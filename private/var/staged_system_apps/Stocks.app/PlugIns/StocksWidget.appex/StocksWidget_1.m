uint64_t sub_100081D44@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100082DD0(a1, a2);
  *a3 = result;
  return result;
}

void sub_100081D68(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100081D74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100082AFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100081D9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100082AFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100081DC4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100081FC0(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  *a2 = result;
  a2[1] = v4;
  return result;
}

void sub_100081E04(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10008196C(a1, a2);
}

uint64_t sub_100081E18(_QWORD *a1)
{
  return sub_100081788(a1);
}

Swift::Int sub_100081E2C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000816CC((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100081E6C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000816CC((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_100081EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for PriceChangeDisplay(0);
  v5 = sub_100003D3C(&qword_100115FC0, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t)&protocol conformance descriptor for PriceChangeDisplay);
  dispatch thunk of RawRepresentable.rawValue.getter(&v16, v4, v5);
  dispatch thunk of RawRepresentable.rawValue.getter(&v15, v4, v5);
  if (v16 == v15
    && (v6 = (int *)_s11FormatStyleVMa_0(0), *(unsigned __int8 *)(a1 + v6[5]) == *(unsigned __int8 *)(a2 + v6[5]))
    && *(unsigned __int8 *)(a1 + v6[6]) == *(unsigned __int8 *)(a2 + v6[6])
    && *(unsigned __int8 *)(a1 + v6[7]) == *(unsigned __int8 *)(a2 + v6[7]))
  {
    v9 = v6[8];
    v10 = *(_QWORD *)(a1 + v9);
    v11 = *(_QWORD *)(a1 + v9 + 8);
    v12 = (_QWORD *)(a2 + v9);
    v13 = v12[1];
    if (v10 == *v12 && v11 == v13)
      v7 = 1;
    else
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, *v12, v13, 0);
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

uint64_t sub_100081FC0(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  char v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  Class isa;
  id v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t result;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  uint64_t v59;
  double v60;
  double v61;
  int *v62;
  _QWORD v63[2];
  _QWORD v64[4];

  LODWORD(v60) = a6;
  v58 = *(double *)&a3;
  v59 = a5;
  LODWORD(v61) = a2;
  v57 = *(double *)&a1;
  v8 = type metadata accessor for Locale(0);
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = (int *)_s11FormatStyleVMa_0(0);
  __chkstk_darwin(v62);
  v54 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v53 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v53 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v53 - v19;
  v21 = type metadata accessor for PriceChangeDisplay(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = v6;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16))(v25, v6, v21, v23);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v22 + 88))(v25, v21);
  if ((_DWORD)v27 == enum case for PriceChangeDisplay.currency(_:))
  {
    if ((a4 & 1) == 0 && (LOBYTE(v61) & 1) == 0)
    {
      v28 = v58;
      v29 = v57 == 0.0 || v57 >= 5.0;
      v30 = v62;
      if (*(_BYTE *)(v26 + v62[7]) != 1)
      {
        if (qword_100111470 != -1)
        {
          v61 = v58;
          swift_once(&qword_100111470, sub_10003FDE0);
          v28 = v61;
        }
        v31 = sub_10008308C(v29, v28);
        v33 = v47;
        sub_10008251C(v26, (uint64_t)v17);
        if (!v33)
        {
          v48 = (uint64_t *)&v17[v30[8]];
          v31 = *v48;
          v33 = v48[1];
          swift_bridgeObjectRetain(v33);
        }
        v49 = (uint64_t)v17;
        goto LABEL_42;
      }
      if (qword_100111470 != -1)
      {
        v61 = v58;
        swift_once(&qword_100111470, sub_10003FDE0);
        v28 = v61;
      }
      v31 = sub_10008318C(v29, v28);
      v33 = v32;
      v34 = v26;
LABEL_39:
      sub_10008251C(v34, (uint64_t)v20);
      if (!v33)
      {
        v51 = (uint64_t *)&v20[v30[8]];
        v31 = *v51;
        v33 = v51[1];
        swift_bridgeObjectRetain(v33);
      }
      v49 = (uint64_t)v20;
LABEL_42:
      sub_100082560(v49);
LABEL_43:
      if (*(_BYTE *)(v26 + v30[6]) == 1)
      {
        v64[2] = v31;
        v64[3] = v33;
        v64[0] = 32;
        v64[1] = 0xE100000000000000;
        v63[0] = 0;
        v63[1] = 0xE000000000000000;
        v52 = sub_1000144A0();
        v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v64, v63, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v52, v52, v52);
        swift_bridgeObjectRelease(v33);
      }
      return v31;
    }
LABEL_20:
    v39 = v62[8];
    goto LABEL_29;
  }
  if ((_DWORD)v27 == enum case for PriceChangeDisplay.percentage(_:))
  {
    if ((LOBYTE(v61) & 1) == 0 && (a4 & 1) == 0)
    {
      v35 = v57;
      v36 = v58;
      if (*(_BYTE *)(v6 + v62[7]) == 1)
      {
        if (qword_100111478 != -1)
        {
          v60 = v58;
          v61 = v57;
          swift_once(&qword_100111478, sub_10003FE0C);
          v36 = v60;
          v35 = v61;
        }
        v31 = sub_1000D4304(v35, v36);
        v33 = v37;
        sub_10008251C(v26, (uint64_t)v14);
        if (!v33)
        {
          v38 = (uint64_t *)&v14[v62[8]];
          v31 = *v38;
          v33 = v38[1];
          swift_bridgeObjectRetain(v33);
        }
        sub_100082560((uint64_t)v14);
        v30 = v62;
        goto LABEL_43;
      }
      if (qword_100111478 != -1)
      {
        v60 = v58;
        v61 = v57;
        swift_once(&qword_100111478, sub_10003FE0C);
        v36 = v60;
        v35 = v61;
      }
      v30 = v62;
      v31 = sub_1000D41B8(*(_BYTE *)(v6 + v62[5]), v35, v36);
      v33 = v50;
      v34 = v26;
      v20 = v54;
      goto LABEL_39;
    }
    goto LABEL_20;
  }
  if ((_DWORD)v27 == enum case for PriceChangeDisplay.marketCapitalization(_:))
  {
    v30 = v62;
    if ((LOBYTE(v60) & 1) == 0)
    {
      if (qword_100111480 != -1)
        v27 = swift_once(&qword_100111480, sub_10003FE38);
      if (v59 >= 1)
      {
        v40 = *(unsigned __int8 *)(v6 + v30[7]);
        v41 = *(void **)(qword_100126890 + 16);
        static Locale.current.getter(v27);
        isa = Locale._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v56);
        v43 = objc_msgSend(v41, "formattedCount:withLocale:longform:compactDisplay:", v59, isa, v40, 0);

        if (v43)
        {
          v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
          v33 = v44;

          goto LABEL_43;
        }
      }
    }
    v39 = v30[8];
LABEL_29:
    v45 = (uint64_t *)(v6 + v39);
    v31 = *v45;
    swift_bridgeObjectRetain(v45[1]);
    return v31;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v21, v21);
  __break(1u);
  return result;
}

uint64_t _s11FormatStyleVMa_0(uint64_t a1)
{
  uint64_t result;

  result = qword_100115F38;
  if (!qword_100115F38)
    return swift_getSingletonMetadata(a1, &_s11FormatStyleVMn_0);
  return result;
}

uint64_t sub_10008251C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s11FormatStyleVMa_0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100082560(uint64_t a1)
{
  uint64_t v2;

  v2 = _s11FormatStyleVMa_0(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_10008259C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    swift_bridgeObjectRetain(v12);
  }
  return a1;
}

uint64_t sub_10008264C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 32) + 8));
}

uint64_t sub_100082694(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t sub_100082718(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v7 = a3[8];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_1000827B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_100082830(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_1000828B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000828C4);
}

uint64_t sub_1000828C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PriceChangeDisplay(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100082944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100082950);
}

uint64_t sub_100082950(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PriceChangeDisplay(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1000829CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for PriceChangeDisplay(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000E07E8;
    v4[2] = &unk_1000E07E8;
    v4[3] = &unk_1000E07E8;
    v4[4] = &unk_1000E0800;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100082A4C()
{
  return sub_100003D3C(&qword_100115F80, _s11FormatStyleVMa_0, (uint64_t)&unk_1000E0818);
}

uint64_t sub_100082A78()
{
  return sub_100003D3C(&qword_100115F88, _s11FormatStyleVMa_0, (uint64_t)&unk_1000E08A8);
}

uint64_t sub_100082AA4()
{
  return sub_100003D3C(&qword_100115F90, _s11FormatStyleVMa_0, (uint64_t)&unk_1000E0880);
}

uint64_t sub_100082AD0()
{
  return sub_100003D3C(&qword_100115F98, _s11FormatStyleVMa_0, (uint64_t)&unk_1000E0840);
}

unint64_t sub_100082AFC()
{
  unint64_t result;

  result = qword_100115FA8;
  if (!qword_100115FA8)
  {
    result = swift_getWitnessTable(&unk_1000E09EC, &_s11FormatStyleV10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_100115FA8);
  }
  return result;
}

void sub_100082B40(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_100082AFC();
    v7 = a3(a1, &_s11FormatStyleV10CodingKeysON_0, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t _s11FormatStyleV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s11FormatStyleV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100082C78 + 4 * byte_1000E07D2[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100082CAC + 4 * byte_1000E07CD[v4]))();
}

uint64_t sub_100082CAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100082CB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100082CBCLL);
  return result;
}

uint64_t sub_100082CC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100082CD0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100082CD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100082CDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s11FormatStyleV10CodingKeysOMa_0()
{
  return &_s11FormatStyleV10CodingKeysON_0;
}

unint64_t sub_100082CFC()
{
  unint64_t result;

  result = qword_100115FC8;
  if (!qword_100115FC8)
  {
    result = swift_getWitnessTable(&unk_1000E09C4, &_s11FormatStyleV10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_100115FC8);
  }
  return result;
}

unint64_t sub_100082D44()
{
  unint64_t result;

  result = qword_100115FD0;
  if (!qword_100115FD0)
  {
    result = swift_getWitnessTable(&unk_1000E0934, &_s11FormatStyleV10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_100115FD0);
  }
  return result;
}

unint64_t sub_100082D8C()
{
  unint64_t result;

  result = qword_100115FD8;
  if (!qword_100115FD8)
  {
    result = swift_getWitnessTable(&unk_1000E095C, &_s11FormatStyleV10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_100115FD8);
  }
  return result;
}

uint64_t sub_100082DD0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x79616C70736964 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79616C70736964, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6665725065646968 && a2 == 0xEA00000000007869)
  {
    v7 = 0xEA00000000007869;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6665725065646968, 0xEA00000000007869, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x80000001000E6550;
    if (a2 == 0x80000001000E6550)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001000E6550, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x6B61657053726F66 && a2 == 0xEB00000000676E69)
  {
    v9 = 0xEB00000000676E69;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B61657053726F66, 0xEB00000000676E69, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x6B6361626C6C6166 && a2 == 0xEC00000074786554)
  {
    swift_bridgeObjectRelease(0xEC00000074786554);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6361626C6C6166, 0xEC00000074786554, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100083020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for PriceFormatter(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = static Locale.autoupdatingCurrent.getter(v1);
  qword_100126960 = v1;
  return result;
}

uint64_t type metadata accessor for PriceChangeFormatter()
{
  return objc_opt_self(_TtC12StocksWidget20PriceChangeFormatter);
}

uint64_t sub_10008308C(char a1, double a2)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  if (qword_100111518 != -1)
    swift_once(&qword_100111518, sub_100083020);
  v4 = (id)sub_1000221F8(a1, 3, 0, a2);
  objc_msgSend(v4, "setNumberStyle:", 1);
  v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", a2);
  v6 = objc_msgSend(v4, "stringFromNumber:", v5);

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  }
  else
  {

    return 0;
  }
  return v7;
}

uint64_t sub_10008318C(char a1, double a2)
{
  double v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjCClassFromMetadata;
  void *v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  Swift::String v22;
  unint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v29;
  Swift::String v30;

  if (qword_100111518 != -1)
    swift_once(&qword_100111518, sub_100083020);
  v4 = fabs(a2);
  v5 = (id)sub_1000221F8(a1, 3, 1, v4);
  objc_msgSend(v5, "setNumberStyle:", 1);
  v6 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v4);
  v7 = objc_msgSend(v5, "stringFromNumber:", v6);

  if (v7)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = type metadata accessor for Localized();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v11);
    v13 = (void *)objc_opt_self(NSBundle);
    v14 = objc_msgSend(v13, "bundleForClass:", ObjCClassFromMetadata);
    v15._countAndFlagsBits = 0xD000000000000013;
    v30._countAndFlagsBits = 0xD00000000000002BLL;
    v30._object = (void *)0x80000001000E65C0;
    v15._object = (void *)0x80000001000E65A0;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v30);

    v18 = objc_msgSend(v13, "bundleForClass:", ObjCClassFromMetadata);
    if (a2 >= 0.0)
    {
      v29 = 0x80000001000E6630;
      v19 = 28789;
      v20 = 0xE200000000000000;
    }
    else
    {
      v29 = 0x80000001000E65F0;
      v19 = 1853321060;
      v20 = 0xE400000000000000;
    }
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    v23 = 0xD000000000000030;
    v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v19, (Swift::String_optional)0, (NSBundle)v18, v22, *(Swift::String *)(&v29 - 1));

    sub_100003A7C(0);
    v26 = swift_allocObject(v25, 152, 7);
    *(_OWORD *)(v26 + 16) = xmmword_1000DB8B0;
    *(_QWORD *)(v26 + 56) = &type metadata for Double;
    *(_QWORD *)(v26 + 64) = &protocol witness table for Double;
    *(double *)(v26 + 32) = v4;
    *(_QWORD *)(v26 + 96) = &type metadata for String;
    v27 = sub_100003B2C();
    *(Swift::String *)(v26 + 72) = v24;
    *(_QWORD *)(v26 + 136) = &type metadata for String;
    *(_QWORD *)(v26 + 144) = v27;
    *(_QWORD *)(v26 + 104) = v27;
    *(_QWORD *)(v26 + 112) = v8;
    *(_QWORD *)(v26 + 120) = v10;
    v21 = static String.localizedStringWithFormat(_:_:)(v17._countAndFlagsBits, v17._object, v26);
    swift_bridgeObjectRelease(v17._object);
    swift_bridgeObjectRelease(v26);
  }
  else
  {

    return 0;
  }
  return v21;
}

uint64_t sub_100083458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100083464);
}

uint64_t sub_100083464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      sub_100042D9C(0);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10008351C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100083528);
}

uint64_t sub_100083528(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      sub_100042D9C(0);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for MediumDetailWithNewsContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001160D0;
  if (!qword_1001160D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MediumDetailWithNewsContentView);
  return result;
}

void sub_100083618(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = " ";
  v6[1] = &unk_1000E0A98;
  v6[2] = &unk_1000E0AB0;
  v6[3] = &unk_1000E0AC8;
  v6[4] = &unk_1000E0AE0;
  sub_10000EDE8(319, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    sub_100042D9C(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000836E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9548, 1);
}

uint64_t sub_1000836F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  _BYTE *v42;
  uint64_t *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE v80[12];
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  uint64_t v109;
  unsigned __int8 v110;
  uint64_t v111;
  unsigned __int8 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 v116;
  _BYTE *v117;
  unsigned __int8 v118;
  uint64_t v119;
  uint64_t v120;

  v106 = a2;
  v100 = type metadata accessor for HeadlinesList(0);
  __chkstk_darwin(v100);
  v102 = &v80[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10005E73C(0, &qword_100114D60, v4);
  v101 = v5;
  __chkstk_darwin(v5);
  v105 = &v80[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v104 = &v80[-v8];
  v98 = type metadata accessor for Divider(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v96 = &v80[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10005E6E0(0);
  v95 = v10;
  __chkstk_darwin(v10);
  v103 = &v80[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v108 = &v80[-v13];
  v14 = type metadata accessor for RowWithChartTicker(0);
  __chkstk_darwin(v14);
  v16 = &v80[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10005E73C(0, &qword_100114D50, v17);
  v93 = v18;
  __chkstk_darwin(v18);
  v107 = &v80[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  v99 = &v80[-v21];
  LODWORD(v92) = *((unsigned __int8 *)a1 + 80);
  v22 = a1[1];
  v91 = *a1;
  v23 = a1[3];
  v90 = a1[2];
  v24 = a1[5];
  v89 = a1[4];
  v25 = a1[6];
  v26 = a1[7];
  v27 = a1[8];
  v86 = a1[9];
  v88 = a1[11];
  v87 = *((unsigned __int8 *)a1 + 96);
  v28 = a1[14];
  v85 = a1[13];
  v84 = a1[15];
  v83 = *((unsigned __int8 *)a1 + 128);
  v82 = a1[17];
  v81 = *((unsigned __int8 *)a1 + 144);
  v94 = type metadata accessor for MediumDetailWithNewsContentView(0);
  sub_1000245D0((uint64_t)a1 + *(int *)(v94 + 36), (uint64_t)&v16[*(int *)(v14 + 36)]);
  *v16 = v92;
  *((_QWORD *)v16 + 1) = v91;
  *((_QWORD *)v16 + 2) = v22;
  v29 = v22;
  *((_QWORD *)v16 + 3) = v90;
  *((_QWORD *)v16 + 4) = v23;
  *((_QWORD *)v16 + 5) = v89;
  *((_QWORD *)v16 + 6) = v24;
  *((_QWORD *)v16 + 7) = v25;
  *((_QWORD *)v16 + 8) = v26;
  v30 = v86;
  *((_QWORD *)v16 + 9) = v27;
  *((_QWORD *)v16 + 10) = v30;
  v31 = v87;
  *((_QWORD *)v16 + 11) = v88;
  *((_QWORD *)v16 + 12) = v31;
  *((_QWORD *)v16 + 13) = v85;
  *((_QWORD *)v16 + 14) = v28;
  v32 = v83;
  *((_QWORD *)v16 + 15) = v84;
  *((_QWORD *)v16 + 16) = v32;
  *((_QWORD *)v16 + 17) = v82;
  v16[144] = v81;
  v92 = v14;
  v91 = *(int *)(v14 + 40);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  sub_100024540(v25, v26, v27, v30);
  v33 = qword_100111538;
  swift_bridgeObjectRetain(v28);
  if (v33 != -1)
    swift_once(&qword_100111538, sub_1000A9EB8);
  v34 = static Settings.UserPreferences.showCurrency;
  sub_10002F488(0, (unint64_t *)&qword_100111610, (uint64_t)&type metadata for Bool, (uint64_t)&protocol witness table for Bool, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for SettingProperty);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v36 = swift_retain(v34);
  v37 = SettingProperty.init(_:)(v36);
  *(_QWORD *)&v16[v91] = v37;
  v38 = &v16[*(int *)(v92 + 44)];
  *v38 = swift_getKeyPath(&unk_1000E0B48);
  sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v38, v39, 0);
  KeyPath = swift_getKeyPath(&unk_1000E0B78);
  v41 = swift_allocObject(&unk_100107B38, 41, 7);
  *(_QWORD *)(v41 + 16) = 0;
  *(_BYTE *)(v41 + 24) = 1;
  *(_QWORD *)(v41 + 32) = 0;
  *(_BYTE *)(v41 + 40) = 0;
  v42 = v107;
  sub_10001DE2C((uint64_t)v16, (uint64_t)v107, type metadata accessor for RowWithChartTicker);
  v43 = (uint64_t *)&v42[*(int *)(v93 + 36)];
  *v43 = KeyPath;
  v43[1] = (uint64_t)sub_10002453C;
  v43[2] = v41;
  sub_10001DF70((uint64_t)v16, type metadata accessor for RowWithChartTicker);
  v44 = v99;
  v45 = sub_10005E818((uint64_t)v42, (uint64_t)v99, &qword_100114D50, type metadata accessor for RowWithChartTicker);
  v46 = static Alignment.center.getter(v45);
  v48 = _FrameLayout.init(width:height:alignment:)(&v109, 0, 1, 0x4020000000000000, 0, v46, v47);
  v93 = v109;
  LODWORD(v92) = v110;
  v91 = v111;
  LODWORD(v90) = v112;
  v89 = v113;
  v88 = v114;
  v49 = v96;
  Divider.init()(v48);
  v50 = swift_getKeyPath(&unk_1000E0BA0);
  v51 = v97;
  v52 = (uint64_t)v103;
  v53 = v98;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v97 + 16))(v103, v49, v98);
  v54 = v52 + *(int *)(v95 + 36);
  *(_BYTE *)v54 = 1;
  *(_QWORD *)(v54 + 8) = v50;
  *(_QWORD *)(v54 + 16) = 0;
  *(_QWORD *)(v54 + 24) = 0;
  *(_QWORD *)(v54 + 32) = 0;
  *(_BYTE *)(v54 + 40) = 0;
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v49, v53);
  v55 = sub_10005E7C4(v52, (uint64_t)v108);
  v56 = static Alignment.center.getter(v55);
  _FrameLayout.init(width:height:alignment:)(&v115, 0, 1, 0x4030000000000000, 0, v56, v57);
  v98 = v115;
  LODWORD(v97) = v116;
  v96 = v117;
  LODWORD(v95) = v118;
  v87 = v119;
  v86 = v120;
  v58 = (uint64_t)a1 + *(int *)(v94 + 40);
  sub_100042D9C(0);
  v60 = v59;
  v61 = (uint64_t)v102;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v102, v58, v59);
  v62 = NonEmpty.count.getter(v60);
  v63 = v100;
  *(_QWORD *)(v61 + *(int *)(v100 + 20)) = v62;
  *(_QWORD *)(v61 + *(int *)(v63 + 24)) = 0x4028000000000000;
  v64 = swift_getKeyPath(&unk_1000E0B78);
  v65 = swift_allocObject(&unk_100107B60, 41, 7);
  *(_QWORD *)(v65 + 16) = 0;
  *(_BYTE *)(v65 + 24) = 0;
  *(_QWORD *)(v65 + 32) = 0;
  *(_BYTE *)(v65 + 40) = 1;
  v66 = v105;
  sub_10001DE2C(v61, (uint64_t)v105, type metadata accessor for HeadlinesList);
  v67 = (uint64_t *)&v66[*(int *)(v101 + 36)];
  *v67 = v64;
  v67[1] = (uint64_t)sub_10002453C;
  v67[2] = v65;
  sub_10001DF70(v61, type metadata accessor for HeadlinesList);
  v68 = v104;
  sub_10005E818((uint64_t)v66, (uint64_t)v104, &qword_100114D60, type metadata accessor for HeadlinesList);
  v69 = v42;
  sub_10005E864((uint64_t)v44, (uint64_t)v42, &qword_100114D50, type metadata accessor for RowWithChartTicker);
  v70 = v108;
  sub_10001DE2C((uint64_t)v108, v52, (uint64_t (*)(_QWORD))sub_10005E6E0);
  sub_10005E864((uint64_t)v68, (uint64_t)v66, &qword_100114D60, type metadata accessor for HeadlinesList);
  v71 = (uint64_t)v69;
  v72 = v106;
  sub_10005E864(v71, v106, &qword_100114D50, type metadata accessor for RowWithChartTicker);
  sub_10005E60C(0);
  v74 = v73;
  v75 = v72 + *(int *)(v73 + 48);
  *(_QWORD *)v75 = 0;
  *(_BYTE *)(v75 + 8) = 1;
  *(_QWORD *)(v75 + 16) = v93;
  *(_BYTE *)(v75 + 24) = v92;
  *(_QWORD *)(v75 + 32) = v91;
  *(_BYTE *)(v75 + 40) = v90;
  v76 = v88;
  *(_QWORD *)(v75 + 48) = v89;
  *(_QWORD *)(v75 + 56) = v76;
  sub_10001DE2C(v52, v72 + *(int *)(v73 + 64), (uint64_t (*)(_QWORD))sub_10005E6E0);
  v77 = v72 + *(int *)(v74 + 80);
  *(_QWORD *)v77 = 0;
  *(_BYTE *)(v77 + 8) = 1;
  *(_QWORD *)(v77 + 16) = v98;
  *(_BYTE *)(v77 + 24) = v97;
  *(_QWORD *)(v77 + 32) = v96;
  *(_BYTE *)(v77 + 40) = v95;
  v78 = v86;
  *(_QWORD *)(v77 + 48) = v87;
  *(_QWORD *)(v77 + 56) = v78;
  sub_10005E864((uint64_t)v66, v72 + *(int *)(v74 + 96), &qword_100114D60, type metadata accessor for HeadlinesList);
  sub_10005E8B0((uint64_t)v68, &qword_100114D60, type metadata accessor for HeadlinesList);
  sub_10001DF70((uint64_t)v70, (uint64_t (*)(_QWORD))sub_10005E6E0);
  sub_10005E8B0((uint64_t)v44, &qword_100114D50, type metadata accessor for RowWithChartTicker);
  sub_10005E8B0((uint64_t)v66, &qword_100114D60, type metadata accessor for HeadlinesList);
  sub_10001DF70(v52, (uint64_t (*)(_QWORD))sub_10005E6E0);
  return sub_10005E8B0((uint64_t)v107, &qword_100114D50, type metadata accessor for RowWithChartTicker);
}

uint64_t sub_10008405C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  sub_10005E590(0);
  return sub_1000836F8(v2, a2 + *(int *)(v4 + 44));
}

uint64_t sub_1000840B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000840C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t *sub_1000840D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    sub_100042D9C(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
  }
  return a1;
}

uint64_t sub_100084164(uint64_t a1)
{
  uint64_t v2;

  sub_100042D9C(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_100084198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  sub_100042D9C(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1000841FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_100042D9C(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100084264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  sub_100042D9C(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1000842C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  sub_100042D9C(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_10008432C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100084338);
}

uint64_t sub_100084338(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100042D9C(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100084374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100084380);
}

uint64_t sub_100084380(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100042D9C(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for HeadlinesList(uint64_t a1)
{
  uint64_t result;

  result = qword_100116178;
  if (!qword_100116178)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HeadlinesList);
  return result;
}

void sub_1000843FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_100042D9C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_100084474(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9598, 1);
}

uint64_t sub_100084484@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v27;

  v6 = type metadata accessor for HeadlinesList(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = type metadata accessor for HeadlineView(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002C5D8(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DE2C(a1, (uint64_t)v11, type metadata accessor for HeadlineViewModel);
  v15 = &v11[*(int *)(v9 + 20)];
  *(_QWORD *)v15 = swift_getKeyPath(&unk_1000E0C30);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v17 = swift_storeEnumTagMultiPayload(v15, v16, 0);
  v18 = static Alignment.top.getter(v17);
  sub_100029C28(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v14, 0.0, 1, INFINITY, 0, v18, v19);
  sub_10001DF70((uint64_t)v11, type metadata accessor for HeadlineView);
  KeyPath = swift_getKeyPath(&unk_1000E0C60);
  sub_10001DE2C(a2, (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for HeadlinesList);
  v21 = *(unsigned __int8 *)(v7 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = swift_allocObject(&unk_100107BF8, v22 + v8, v21 | 7);
  sub_100084B60((uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22);
  sub_10001DE2C((uint64_t)v14, a3, (uint64_t (*)(_QWORD))sub_10002C5D8);
  sub_100084A30(0);
  v25 = (uint64_t *)(a3 + *(int *)(v24 + 36));
  *v25 = KeyPath;
  v25[1] = (uint64_t)sub_100084D70;
  v25[2] = v23;
  return sub_10001DF70((uint64_t)v14, (uint64_t (*)(_QWORD))sub_10002C5D8);
}

void sub_1000846C0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(a1);
  sub_100042D9C(0);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v2 + *(int *)(a1 + 20));
  if (v12 < 1)
  {
    __break(1u);
  }
  else
  {
    v13 = *(_QWORD *)(v2 + *(int *)(a1 + 24));
    *a2 = 1;
    a2[1] = 0;
    a2[2] = v12;
    a2[3] = v13;
    sub_10008486C(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v2, v8);
    sub_10001DE2C(v2, (uint64_t)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for HeadlinesList);
    v14 = *(unsigned __int8 *)(v5 + 80);
    v15 = (v14 + 16) & ~v14;
    v16 = swift_allocObject(&unk_100107BD0, v15 + v6, v14 | 7);
    sub_100084B60((uint64_t)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
    sub_100084A30(0);
    v18 = v17;
    v19 = sub_100084A94();
    v20 = sub_100084BF0();
    v21 = sub_100003D3C(&qword_100116208, type metadata accessor for HeadlineViewModel, (uint64_t)&unk_1000E1D78);
    ForEach<>.init(_:content:)(v11, sub_100084BA4, v16, v8, &type metadata for String, v18, v19, v20, v21);
  }
}

void sub_10008486C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1001161B8)
  {
    sub_100084900(255);
    v3 = v2;
    sub_10008499C(255);
    v5 = v4;
    v6 = sub_100003D3C(&qword_1001161F0, (uint64_t (*)(uint64_t))sub_100084900, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
    v7 = type metadata accessor for _VariadicView.Tree(a1, v3, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1001161B8);
  }
}

void sub_100084900(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001161C0)
  {
    v2 = sub_100084958();
    v3 = type metadata accessor for _LayoutRoot(a1, &type metadata for VFlowGridLayout, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001161C0);
  }
}

unint64_t sub_100084958()
{
  unint64_t result;

  result = qword_1001161C8;
  if (!qword_1001161C8)
  {
    result = swift_getWitnessTable(&unk_1000DC818, &type metadata for VFlowGridLayout);
    atomic_store(result, (unint64_t *)&qword_1001161C8);
  }
  return result;
}

void sub_10008499C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  if (!qword_1001161D0)
  {
    sub_100042D9C(255);
    v3 = v2;
    sub_100084A30(255);
    v7[0] = v3;
    v7[1] = &type metadata for String;
    v7[2] = v4;
    v7[3] = sub_100084A94();
    v7[4] = &protocol witness table for String;
    v5 = type metadata accessor for ForEach(a1, v7);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001161D0);
  }
}

void sub_100084A30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001161D8)
  {
    sub_10002C5D8(255);
    v3 = v2;
    sub_100024258();
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001161D8);
  }
}

unint64_t sub_100084A94()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001161E0;
  if (!qword_1001161E0)
  {
    sub_100042D9C(255);
    v2 = v1;
    sub_100084B04(&qword_1001161E8, (uint64_t)&protocol conformance descriptor for [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> NonEmpty<A>, v2);
    atomic_store(result, (unint64_t *)&qword_1001161E0);
  }
  return result;
}

uint64_t sub_100084B04(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_10000EDE8(255, &qword_1001126A0, type metadata accessor for HeadlineViewModel, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100084B60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HeadlinesList(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100084BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HeadlinesList(0) - 8) + 80);
  return sub_100084484(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_100084BF0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001161F8;
  if (!qword_1001161F8)
  {
    sub_100084A30(255);
    v2 = v1;
    sub_100084C70();
    sub_100003D3C((unint64_t *)&qword_100114130, (uint64_t (*)(uint64_t))sub_100024258, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001161F8);
  }
  return result;
}

unint64_t sub_100084C70()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116200;
  if (!qword_100116200)
  {
    sub_10002C5D8(255);
    v2 = v1;
    sub_100003D3C(&qword_100113AD0, type metadata accessor for HeadlineView, (uint64_t)&unk_1000E1F0C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116200);
  }
  return result;
}

uint64_t sub_100084D00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for HeadlinesList(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  sub_100042D9C(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100084D70(double *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;

  result = type metadata accessor for HeadlinesList(0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = *a1;
  v7 = *(int *)(result + 24);
  v8 = *(double *)(v5 + v7);
  if (v8 < *a1)
    v6 = *(double *)(v5 + v7);
  *a1 = v6;
  v9 = a1[2];
  if (v8 < v9)
    v9 = v8;
  a1[2] = v9;
  return result;
}

unint64_t sub_100084DD4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116210;
  if (!qword_100116210)
  {
    sub_10008486C(255);
    v2 = v1;
    sub_100003D3C(&qword_100116218, (uint64_t (*)(uint64_t))sub_100084900, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
    sub_100084E54();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116210);
  }
  return result;
}

unint64_t sub_100084E54()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116220;
  if (!qword_100116220)
  {
    sub_10008499C(255);
    v2 = v1;
    sub_100084BF0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v2);
    atomic_store(result, (unint64_t *)&qword_100116220);
  }
  return result;
}

uint64_t destroy for StockPrice(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for StockPrice(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for StockPrice(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = a2[2];
  v4 = a2[3];
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t assignWithTake for StockPrice(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for StockPrice(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StockPrice(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for StockPrice()
{
  return &type metadata for StockPrice;
}

uint64_t sub_100085048(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = a4;
  v19 = a5;
  v8 = a3 & 1;
  sub_1000855D4(0, &qword_100116238, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedEncodingContainer);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v13 = (char *)&v18 - v12;
  v15 = a1[3];
  v14 = a1[4];
  sub_100007184(a1, v15);
  v16 = sub_100085590();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for StockPrice.CodingKeys, &type metadata for StockPrice.CodingKeys, v16, v15, v14);
  v21 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, v8, &v21, v10);
  if (!v5)
  {
    v20 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v20, v10);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_100085178()
{
  _BYTE *v0;

  if (*v0)
    return 0x79636E6572727563;
  else
    return 0x746E756F6D61;
}

uint64_t sub_1000851B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100085328(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000851DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100085590();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100085204(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100085590();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_10008522C(uint64_t a1, uint64_t a2)
{
  return sub_1000852B4(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(_BYTE *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_100085258@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_100085428(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_10008528C(_QWORD *a1)
{
  uint64_t v1;

  return sub_100085048(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

BOOL sub_1000852B4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  if ((a2 & 1) != 0)
  {
    if ((a6 & 1) == 0)
      return 0;
  }
  else if ((a6 & 1) != 0 || *(double *)&a1 != *(double *)&a5)
  {
    return 0;
  }
  if (a4)
    return a8 && (a3 == a7 && a4 == a8 || (_stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0) & 1) != 0);
  return !a8;
}

uint64_t sub_100085328(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x746E756F6D61 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E756F6D61, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x79636E6572727563 && a2 == 0xEC00000065646F43)
  {
    swift_bridgeObjectRelease(0xEC00000065646F43);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x79636E6572727563, 0xEC00000065646F43, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100085428(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  char v14;

  sub_1000855D4(0, &qword_100116228, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedDecodingContainer);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v7 = (char *)&v12 - v6;
  v8 = a1[3];
  v9 = a1[4];
  sub_100007184(a1, v8);
  v10 = sub_100085590();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for StockPrice.CodingKeys, &type metadata for StockPrice.CodingKeys, v10, v8, v9);
  if (!v1)
  {
    v14 = 0;
    v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v14, v4);
    v13 = 1;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v13, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_100007164(a1);
  return v8;
}

unint64_t sub_100085590()
{
  unint64_t result;

  result = qword_100116230;
  if (!qword_100116230)
  {
    result = swift_getWitnessTable(&unk_1000E0DDC, &type metadata for StockPrice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100116230);
  }
  return result;
}

void sub_1000855D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_100085590();
    v7 = a3(a1, &type metadata for StockPrice.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for StockPrice.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10008567C + 4 * byte_1000E0C8D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000856B0 + 4 * byte_1000E0C88[v4]))();
}

uint64_t sub_1000856B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000856B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000856C0);
  return result;
}

uint64_t sub_1000856CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000856D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000856D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000856E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StockPrice.CodingKeys()
{
  return &type metadata for StockPrice.CodingKeys;
}

unint64_t sub_100085700()
{
  unint64_t result;

  result = qword_100116240;
  if (!qword_100116240)
  {
    result = swift_getWitnessTable(&unk_1000E0DB4, &type metadata for StockPrice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100116240);
  }
  return result;
}

unint64_t sub_100085748()
{
  unint64_t result;

  result = qword_100116248;
  if (!qword_100116248)
  {
    result = swift_getWitnessTable(&unk_1000E0D24, &type metadata for StockPrice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100116248);
  }
  return result;
}

unint64_t sub_100085790()
{
  unint64_t result;

  result = qword_100116250;
  if (!qword_100116250)
  {
    result = swift_getWitnessTable(&unk_1000E0D4C, &type metadata for StockPrice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100116250);
  }
  return result;
}

uint64_t sub_1000857D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000857E0);
}

uint64_t sub_1000857E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10008581C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100085828);
}

uint64_t sub_100085828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for OverviewTimelineProvider(uint64_t a1)
{
  return sub_1000071F8(a1, qword_1001162B0, (uint64_t)&nominal type descriptor for OverviewTimelineProvider);
}

uint64_t sub_100085880()
{
  return sub_100003D3C(qword_1001162E8, type metadata accessor for OverviewTimelineEntry, (uint64_t)&unk_1000DEC20);
}

uint64_t sub_10008589C()
{
  return sub_100003D3C(&qword_100112E98, (uint64_t (*)(uint64_t))&type metadata accessor for WatchlistWidgetConfigurationIntent, (uint64_t)&protocol conformance descriptor for WatchlistWidgetConfigurationIntent);
}

uint64_t sub_1000858C8(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v3 >= result)
      v4 = result;
    else
      v4 = *(_QWORD *)(a2 + 16);
    if (result)
      v5 = v4;
    else
      v5 = 0;
    if (v3 >= v5)
    {
      type metadata accessor for Stock(0);
      return a2;
    }
  }
  __break(1u);
  return result;
}

void sub_100085938(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v6 = type metadata accessor for LayoutSubviews(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = sub_100003D3C(&qword_100112940, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
    dispatch thunk of Collection.startIndex.getter(&v16, v6, v10);
    dispatch thunk of Collection.endIndex.getter(&v15, v6, v10);
    dispatch thunk of Collection.index(_:offsetBy:limitedBy:)(&v13, &v16, a1, &v15, v6, v10);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v2, v6);
    if ((v14 & 1) != 0)
    {
      dispatch thunk of Collection.endIndex.getter(&v16, v6, v10);
      v11 = *(void (**)(char *, uint64_t))(v7 + 8);
      v11(v9, v6);
    }
    else
    {
      v12 = v13;
      v11 = *(void (**)(char *, uint64_t))(v7 + 8);
      v11(v9, v6);
      v16 = v12;
    }
    dispatch thunk of Collection.startIndex.getter(&v15, v6, v10);
    if (v16 >= v15)
    {
      v13 = v15;
      v14 = v16;
      dispatch thunk of Collection.subscript.getter(a2, &v13, v6, v10);
      v11(v3, v6);
      return;
    }
  }
  __break(1u);
}

_QWORD *sub_100085AC4(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD *))
{
  char *v3;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = v3;
  v7 = a2(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = (_QWORD *)__chkstk_darwin(v7);
  v11 = (char *)&v16[-1] - v10;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v12 = a3(result);
    dispatch thunk of Collection.startIndex.getter(v16, v7, v12);
    dispatch thunk of Collection.endIndex.getter(&v17, v7, v12);
    dispatch thunk of Collection.index(_:offsetBy:limitedBy:)(&v18, v16, a1, &v17, v7, v12);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v3, v7);
    if ((v19 & 1) != 0)
    {
      dispatch thunk of Collection.endIndex.getter(&v17, v7, v12);
      v13 = *(void (**)(char *, uint64_t))(v8 + 8);
      v13(v11, v7);
    }
    else
    {
      v14 = v18;
      v13 = *(void (**)(char *, uint64_t))(v8 + 8);
      v13(v11, v7);
      v17 = v14;
    }
    result = dispatch thunk of Collection.startIndex.getter(&v18, v7, v12);
    if (v17 >= v18)
    {
      v16[0] = v18;
      v16[1] = v17;
      dispatch thunk of Collection.subscript.getter(&v18, v16, v7, v12);
      v13(v5, v7);
      return (_QWORD *)v18;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100085C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t (*v23)(_BYTE *, uint64_t, uint64_t, __n128);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  __n128 v29;
  _BYTE *v30;
  _BOOL4 v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(_BYTE *, uint64_t, __n128);
  uint64_t v37;
  void (*v38)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  void (*v41)(_BYTE *, uint64_t);
  _BYTE *v42;
  __n128 v43;
  void (*v44)(_QWORD, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  NSObject *v55;
  __n128 v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint8_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t result;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _BYTE v83[12];
  int v84;
  void (*v85)(_QWORD, _QWORD);
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(_QWORD, _QWORD);
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v92 = a3;
  v5 = type metadata accessor for NewsDisplayConfiguration(0);
  v90 = *(_QWORD *)(v5 - 8);
  v91 = v5;
  __chkstk_darwin(v5);
  v86 = &v83[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for WatchlistWidgetEntity(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v88 = &v83[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v87 = &v83[-v11];
  sub_10008E93C(0);
  __chkstk_darwin(v12);
  v14 = &v83[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v17 = &v83[-v16];
  v18 = type metadata accessor for WatchlistWidgetConfigurationIntent(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = &v83[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, __n128))(v19 + 16);
  v89 = a1;
  v24 = a1;
  v26 = v25;
  v27 = v23(v22, v24, v25, v20);
  v95 = a2;
  v28 = Logger.logObject.getter(v27);
  LODWORD(v30) = static os_log_type_t.default.getter(v29);
  v31 = os_log_type_enabled(v28, (os_log_type_t)v30);
  v93 = v26;
  v94 = v8;
  if (v31)
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v85 = (void (*)(_QWORD, _QWORD))swift_slowAlloc(32, -1);
    v96 = v85;
    *(_DWORD *)v32 = 136315138;
    ((void (*)(void))WatchlistWidgetConfigurationIntent.selectedWatchlist.getter)();
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v7))
    {
      v33 = v7;
      sub_10001DF70((uint64_t)v17, (uint64_t (*)(_QWORD))sub_10008E93C);
      v34 = 0xE300000000000000;
      v35 = 7104878;
    }
    else
    {
      v38 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16);
      v84 = (int)v30;
      v30 = v87;
      v38(v87, v17, v7);
      v39 = sub_10001DF70((uint64_t)v17, (uint64_t (*)(_QWORD))sub_10008E93C);
      v35 = WatchlistWidgetEntity.identifier.getter(v39);
      v34 = v40;
      v41 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
      v42 = v30;
      LOBYTE(v30) = v84;
      v33 = v7;
      v41(v42, v7);
    }
    v98 = sub_10007ECFC(v35, v34, (uint64_t *)&v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v32 + 4, v32 + 12);
    v43 = swift_bridgeObjectRelease(v34);
    v36 = *(void (**)(_BYTE *, uint64_t, __n128))(v19 + 8);
    v36(v22, v93, v43);
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v30, "Resolving intent: %s", v32, 0xCu);
    v44 = v85;
    swift_arrayDestroy(v85, 1, &type metadata for Any[8]);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {
    v33 = v7;

    v36 = *(void (**)(_BYTE *, uint64_t, __n128))(v19 + 8);
    v37 = ((uint64_t (*)(_BYTE *, uint64_t))v36)(v22, v26);
  }
  v45 = v89;
  WatchlistWidgetConfigurationIntent.selectedWatchlist.getter(v37);
  v46 = v94;
  v47 = v33;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v94 + 48))(v14, 1, v33) == 1)
  {
    v48 = sub_10001DF70((uint64_t)v14, (uint64_t (*)(_QWORD))sub_10008E93C);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = swift_slowAlloc(32, -1);
      v98 = v52;
      *(_DWORD *)v51 = 136315138;
      if (qword_100111468 != -1)
        swift_once(&qword_100111468, sub_10002DFB0);
      TaskLocal.get()(&v96);
      v53 = v97;
      v96 = (void (*)(_QWORD, _QWORD))sub_10007ECFC((uint64_t)v96, v97, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v51 + 4, v51 + 12);
      swift_bridgeObjectRelease(v53);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Malformed widget configuration, falling back to default entity, id=%s", v51, 0xCu);
      swift_arrayDestroy(v52, 1, &type metadata for Any[8]);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);

      v46 = v94;
    }
    else
    {

    }
    v63 = v87;
    v64 = static WatchlistWidgetEntity.defaultWatchlistEntity.getter();
    v65 = WatchlistWidgetEntity.identifier.getter(v64);
    v67 = v66;
    v68 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v95, v68);
    ((void (*)(uint64_t, uint64_t))v36)(v45, v93);
    (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v63, v47);
    v69 = type metadata accessor for OverviewTimelineProvider.Configuration(0);
    v70 = v92;
    result = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v90 + 104))((char *)v92 + *(int *)(v69 + 28), enum case for NewsDisplayConfiguration.afterHours(_:), v91);
    *v70 = v65;
    v70[1] = v67;
    *((_WORD *)v70 + 8) = 0;
  }
  else
  {
    v54 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 32))(v88, v14, v33);
    v55 = Logger.logObject.getter(v54);
    v57 = static os_log_type_t.default.getter(v56);
    v58 = os_log_type_enabled(v55, v57);
    v85 = (void (*)(_QWORD, _QWORD))v36;
    if (v58)
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = swift_slowAlloc(32, -1);
      v98 = v60;
      *(_DWORD *)v59 = 136315138;
      if (qword_100111468 != -1)
        swift_once(&qword_100111468, sub_10002DFB0);
      TaskLocal.get()(&v96);
      v61 = v97;
      v96 = (void (*)(_QWORD, _QWORD))sub_10007ECFC((uint64_t)v96, v97, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v59 + 4, v59 + 12);
      swift_bridgeObjectRelease(v61);
      _os_log_impl((void *)&_mh_execute_header, v55, v57, "Successfully loaded widget entity, id=%s", v59, 0xCu);
      swift_arrayDestroy(v60, 1, &type metadata for Any[8]);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);

      v46 = v94;
    }
    else
    {

    }
    v72 = v88;
    v73 = WatchlistWidgetEntity.identifier.getter(v62);
    v75 = v74;
    v76 = v95;
    v77 = sub_1000863A4(v45, v95, (uint64_t (*)(void))&WatchlistWidgetConfigurationIntent.showWatchlistNameValue.getter, "Missing showWatchlistName on intent, id=%s");
    v78 = sub_1000863A4(v45, v76, (uint64_t (*)(void))&WatchlistWidgetConfigurationIntent.showMoreDataValue.getter, "Missing showMoreDetails on intent, id=%s");
    v79 = v86;
    sub_100086524((uint64_t)v86);
    v80 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v76, v80);
    v85(v45, v93);
    (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v72, v47);
    v81 = v92;
    *v92 = v73;
    v81[1] = v75;
    *((_BYTE *)v81 + 16) = v77 & 1;
    *((_BYTE *)v81 + 17) = v78 & 1;
    v82 = type metadata accessor for OverviewTimelineProvider.Configuration(0);
    return (*(uint64_t (**)(char *, _BYTE *, uint64_t))(v90 + 32))((char *)v81 + *(int *)(v82 + 28), v79, v91);
  }
  return result;
}

uint64_t sub_1000863A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), const char *a4)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = a3();
  if (v5 != 2)
    return v5 & 1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v14 = v9;
    *(_DWORD *)v8 = 136315138;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()(&v12);
    v10 = v13;
    v12 = sub_10007ECFC(v12, v13, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a4, v8, 0xCu);
    swift_arrayDestroy(v9, 1, &type metadata for Any[8]);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  return 0;
}

uint64_t sub_100086524@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  sub_10001DF54(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  WatchlistWidgetConfigurationIntent.newsDisplayConfiguration.getter(v3);
  v6 = type metadata accessor for NewsDisplayConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v5, v6);
  v8 = sub_10001DF70((uint64_t)v5, (uint64_t (*)(_QWORD))sub_10001DF54);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v18 = v12;
    *(_DWORD *)v11 = 136315138;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()(&v16);
    v13 = v17;
    v16 = sub_10007ECFC(v16, v17, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Missing newsDisplayConfiguration on intent, id=%s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, &type metadata for Any[8]);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(a1, enum case for NewsDisplayConfiguration.afterHours(_:), v6);
}

uint64_t sub_100086740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  sub_10001D7CC(0);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for IntentSystemContext(0);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[8] = v7;
  v4[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v4[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[11] = v9;
  v4[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WatchlistWidgetEntity(0);
  v4[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[14] = v11;
  v4[15] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008E93C(0);
  v4[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100086834, 0, 0);
}

uint64_t sub_100086834()
{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  void *object;
  __n128 v33;
  int8x16_t *v34;
  int8x16_t **v35;
  uint64_t v36;
  uint64_t v38;
  int8x16_t v39;

  v1 = v0[8].i64[0];
  v2 = v0[6].i64[1];
  v3 = v0[7].i64[0];
  WatchlistWidgetConfigurationIntent.selectedWatchlist.getter();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = v0[8].i64[0];
  if (v4)
  {
    sub_10001DF70(v0[8].i64[0], (uint64_t (*)(_QWORD))sub_10008E93C);
    v6 = (void *)0xE300000000000000;
    v7 = 7104878;
  }
  else
  {
    v9 = v0[7].i64[0];
    v8 = v0[7].i64[1];
    v10 = v0[6].i64[1];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v0[8].i64[0], v10);
    v11 = sub_10001DF70(v5, (uint64_t (*)(_QWORD))sub_10008E93C);
    v7 = WatchlistWidgetEntity.identifier.getter(v11);
    v6 = v12;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  v13 = v0[5].i64[1];
  v38 = v0[5].i64[0];
  v14 = v0[4].i64[0];
  v15 = v0[4].i64[1];
  v16 = v0[3].i64[0];
  v17 = v0[3].i64[1];
  v18._countAndFlagsBits = v7;
  v18._object = v6;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v6);
  v19._countAndFlagsBits = 45;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20 = type metadata accessor for WatchlistWidgetConfigurationIntent(0);
  v21 = sub_100003D3C(&qword_100116358, (uint64_t (*)(uint64_t))&type metadata accessor for WatchlistWidgetConfigurationIntent, (uint64_t)&protocol conformance descriptor for WatchlistWidgetConfigurationIntent);
  v22 = AppIntent.systemContext.getter(v20, v21);
  IntentSystemContext.preciseTimestamp.getter(v22);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v17);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v16, 1, v38);
  v24 = v0[6].i64[0];
  if (v23 == 1)
  {
    v25 = v0[3].i64[0];
    static Date.now.getter(v24);
    sub_10001DF70(v25, (uint64_t (*)(_QWORD))sub_10001D7CC);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[5].i64[1] + 32))(v24, v0[3].i64[0], v0[5].i64[0]);
  }
  v27 = v0[5].i64[1];
  v26 = v0[6].i64[0];
  v28 = v0[5].i64[0];
  v29 = v0[1].i64[1];
  v30 = sub_100003D3C(&qword_1001126E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v39 = v0[2];
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v28, v30);
  object = v31._object;
  String.append(_:)(v31);
  v33 = swift_bridgeObjectRelease(object);
  (*(void (**)(uint64_t, uint64_t, __n128))(v27 + 8))(v26, v28, v33);
  v0[8].i64[1] = 0xEA00000000002D74;
  v34 = (int8x16_t *)swift_task_alloc(64);
  v0[9].i64[0] = (uint64_t)v34;
  v34[1].i64[0] = 0x73696C6863746177;
  v34[1].i64[1] = 0xEA00000000002D74;
  v34[2] = vextq_s8(v39, v39, 8uLL);
  v34[3].i64[0] = v29;
  v35 = (int8x16_t **)swift_task_alloc(async function pointer to withOSActivity<A>(_:operation:)[1]);
  v0[9].i64[1] = (uint64_t)v35;
  v36 = type metadata accessor for OverviewTimelineEntry(0);
  *v35 = v0;
  v35[1] = (int8x16_t *)sub_100014FC8;
  return withOSActivity<A>(_:operation:)(v0[1].i64[0], "Watchlist Widget Snapshot", 25, 2, &unk_100116368, v34, v36);
}

uint64_t sub_100086AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  return swift_task_switch(sub_100086B1C, 0, 0);
}

uint64_t sub_100086B1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  if (qword_100111468 != -1)
    swift_once(&qword_100111468, sub_10002DFB0);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 24) = v2;
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 80) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v3 + 32) = v1;
  v4 = async function pointer to TaskLocal.withValue<A>(_:operation:isolation:file:line:)[1];
  swift_bridgeObjectRetain(v2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 88) = v5;
  type metadata accessor for OverviewTimelineEntry(0);
  *v5 = v0;
  v5[1] = sub_1000151A4;
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(*(_QWORD *)(v0 + 32), v0 + 16, &unk_100116378, v3, 0, 0, 0xD00000000000002BLL, 0x80000001000E6690);
}

uint64_t sub_100086C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  v5 = type metadata accessor for WatchlistWidgetConfigurationIntent(0);
  v4[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[12] = v6;
  v4[13] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OverviewTimelineProvider.Configuration(0);
  v4[14] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[15] = swift_task_alloc(v8);
  v4[16] = swift_task_alloc(v8);
  v4[17] = swift_task_alloc(v8);
  v4[18] = swift_task_alloc(v8);
  v9 = type metadata accessor for WidgetFamily(0);
  v4[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[20] = v10;
  v4[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TimelineProviderContext(0);
  v4[22] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[23] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[24] = swift_task_alloc(v13);
  v4[25] = swift_task_alloc(v13);
  v14 = type metadata accessor for Logger(0);
  v4[26] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[27] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[28] = swift_task_alloc(v16);
  v4[29] = swift_task_alloc(v16);
  v4[30] = swift_task_alloc(v16);
  v4[31] = swift_task_alloc(v16);
  v4[32] = swift_task_alloc(v16);
  v4[33] = swift_task_alloc(v16);
  return swift_task_switch(sub_100086DA4, 0, 0);
}

uint64_t sub_100086DA4()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  NSObject *v3;
  __n128 v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  __n128 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __n128 v39;
  uint64_t (*v40)(uint64_t, uint64_t, __n128);
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  __n128 v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  __n128 v71;
  os_log_type_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint8_t *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  __n128 v85;
  os_log_type_t v86;
  _BOOL4 v87;
  uint64_t v88;
  uint8_t *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v95;
  os_log_type_t type;
  NSObject *log;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(_QWORD, _QWORD, _QWORD);
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t v110;

  v103 = v0 + 48;
  v104 = v0 + 40;
  v105 = v0 + 284;
  v106 = v0 + 288;
  v1 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 16);
  v2 = v1(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 208));
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter(v4);
  v107 = v1;
  if (os_log_type_enabled(v3, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v110 = v7;
    *(_DWORD *)v6 = 136315138;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v108 = *(_QWORD *)(v0 + 264);
    v8 = *(_QWORD *)(v0 + 216);
    v100 = *(_QWORD *)(v0 + 208);
    TaskLocal.get()((_QWORD *)(v0 + 16));
    v9 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 32) = sub_10007ECFC(*(_QWORD *)(v0 + 16), v9, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v104, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Starting snapshot fetch, id=%s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, &type metadata for Any[8]);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v10 = v108;
    v109 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v109(v10, v100);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 264);
    v12 = *(_QWORD *)(v0 + 208);
    v13 = *(_QWORD *)(v0 + 216);

    v109 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v109(v11, v12);
  }
  v14 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 176);
  v18 = *(_QWORD *)(v0 + 72);
  v1(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 208));
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v19(v14, v18, v17);
  v20 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v19)(v15, v18, v17);
  v21 = Logger.logObject.getter(v20);
  v23 = static os_log_type_t.default.getter(v22);
  v24 = os_log_type_enabled(v21, v23);
  v25 = *(_QWORD *)(v0 + 256);
  v26 = *(_QWORD *)(v0 + 200);
  v27 = *(_QWORD *)(v0 + 208);
  v29 = *(_QWORD *)(v0 + 184);
  v28 = *(_QWORD *)(v0 + 192);
  v30 = *(_QWORD *)(v0 + 176);
  if (v24)
  {
    v99 = *(_QWORD *)(v0 + 256);
    v101 = *(_QWORD *)(v0 + 208);
    v31 = *(_QWORD *)(v0 + 168);
    v95 = *(_QWORD *)(v0 + 160);
    v32 = *(_QWORD *)(v0 + 152);
    log = v21;
    v33 = swift_slowAlloc(18, -1);
    v98 = swift_slowAlloc(32, -1);
    v110 = v98;
    *(_DWORD *)v33 = 136315394;
    type = v23;
    TimelineProviderContext.family.getter(v98);
    v34 = sub_100003D3C(&qword_100112720, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v32, v34);
    v37 = v36;
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v31, v32);
    *(_QWORD *)(v0 + 48) = sub_10007ECFC(v35, v37, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, v0 + 56, v33 + 4, v33 + 12);
    v38 = v37;
    v1 = v107;
    v39 = swift_bridgeObjectRelease(v38);
    v40 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v29 + 8);
    v41 = v40(v26, v30, v39);
    *(_WORD *)(v33 + 12) = 1024;
    v42 = TimelineProviderContext.isPreview.getter(v41) & 1;
    ((void (*)(uint64_t, uint64_t))v40)(v28, v30);
    *(_DWORD *)(v0 + 284) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v105, v106, v33 + 14, v33 + 18);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Snapshot context. family: %s, isPreview: %{BOOL}d", (uint8_t *)v33, 0x12u);
    swift_arrayDestroy(v98, 1, &type metadata for Any[8]);
    swift_slowDealloc(v98, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    v43 = v99;
    v44 = v101;
  }
  else
  {
    v45 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v45(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
    v45(v26, v30);

    v43 = v25;
    v44 = v27;
  }
  v109(v43, v44);
  v46 = *(_QWORD *)(v0 + 240);
  v47 = *(_QWORD *)(v0 + 248);
  v48 = *(_QWORD *)(v0 + 208);
  v50 = *(_QWORD *)(v0 + 136);
  v49 = *(uint64_t **)(v0 + 144);
  v51 = *(_QWORD *)(v0 + 104);
  v52 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(v51, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  v1(v47, v52, v48);
  sub_100085C3C(v51, v47, v49);
  v1(v46, v52, v48);
  v53 = sub_10001DE2C((uint64_t)v49, v50, type metadata accessor for OverviewTimelineProvider.Configuration);
  v54 = Logger.logObject.getter(v53);
  v56 = static os_log_type_t.default.getter(v55);
  v57 = os_log_type_enabled(v54, v56);
  v58 = *(_QWORD *)(v0 + 240);
  v59 = *(_QWORD *)(v0 + 208);
  v60 = *(_QWORD *)(v0 + 136);
  if (v57)
  {
    v102 = *(_QWORD *)(v0 + 240);
    v61 = (uint8_t *)swift_slowAlloc(12, -1);
    v62 = swift_slowAlloc(32, -1);
    v110 = v62;
    *(_DWORD *)v61 = 136446210;
    v63 = NewsDisplayConfiguration.rawValue.getter();
    v65 = v64;
    *(_QWORD *)(v0 + 40) = sub_10007ECFC(v63, v64, &v110);
    v1 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v104, v103, v61 + 4, v61 + 12);
    swift_bridgeObjectRelease(v65);
    sub_10001DF70(v60, type metadata accessor for OverviewTimelineProvider.Configuration);
    _os_log_impl((void *)&_mh_execute_header, v54, v56, "Resolved configuration. newsDisplayConfiguration: %{public}s", v61, 0xCu);
    swift_arrayDestroy(v62, 1, &type metadata for Any[8]);
    swift_slowDealloc(v62, -1, -1);
    swift_slowDealloc(v61, -1, -1);

    v66 = v102;
  }
  else
  {
    sub_10001DF70(*(_QWORD *)(v0 + 136), type metadata accessor for OverviewTimelineProvider.Configuration);

    v66 = v58;
  }
  v109(v66, v59);
  v67 = *(_QWORD *)(v0 + 144);
  v68 = *(_QWORD *)(v0 + 128);
  v1(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 208));
  v69 = sub_10001DE2C(v67, v68, type metadata accessor for OverviewTimelineProvider.Configuration);
  v70 = Logger.logObject.getter(v69);
  v72 = static os_log_type_t.default.getter(v71);
  v73 = os_log_type_enabled(v70, v72);
  v74 = *(_QWORD *)(v0 + 128);
  if (v73)
  {
    v75 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v75 = 67109120;
    v76 = *(unsigned __int8 *)(v74 + 16);
    sub_10001DF70(v74, type metadata accessor for OverviewTimelineProvider.Configuration);
    *(_DWORD *)(v0 + 280) = v76;
    v1 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v105, v75 + 4, v75 + 8);
    _os_log_impl((void *)&_mh_execute_header, v70, v72, "Resolved configuration. showWatchlistName: %{BOOL}d", v75, 8u);
    swift_slowDealloc(v75, -1, -1);
  }
  else
  {
    sub_10001DF70(*(_QWORD *)(v0 + 128), type metadata accessor for OverviewTimelineProvider.Configuration);
  }
  v78 = *(_QWORD *)(v0 + 224);
  v77 = *(_QWORD *)(v0 + 232);
  v79 = *(_QWORD *)(v0 + 208);
  v80 = *(_QWORD *)(v0 + 144);
  v81 = *(_QWORD *)(v0 + 120);
  v82 = *(_QWORD *)(v0 + 64);

  v109(v77, v79);
  v1(v78, v82, v79);
  v83 = sub_10001DE2C(v80, v81, type metadata accessor for OverviewTimelineProvider.Configuration);
  v84 = Logger.logObject.getter(v83);
  v86 = static os_log_type_t.default.getter(v85);
  v87 = os_log_type_enabled(v84, v86);
  v88 = *(_QWORD *)(v0 + 120);
  if (v87)
  {
    v89 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v89 = 67109120;
    v90 = *(unsigned __int8 *)(v88 + 17);
    sub_10001DF70(v88, type metadata accessor for OverviewTimelineProvider.Configuration);
    *(_DWORD *)(v0 + 288) = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v106, v0 + 292, v89 + 4, v89 + 8);
    _os_log_impl((void *)&_mh_execute_header, v84, v86, "Resolved configuration. showMoreDetails: %{BOOL}d", v89, 8u);
    swift_slowDealloc(v89, -1, -1);
  }
  else
  {
    sub_10001DF70(*(_QWORD *)(v0 + 120), type metadata accessor for OverviewTimelineProvider.Configuration);
  }
  v91 = *(_QWORD *)(v0 + 224);
  v92 = *(_QWORD *)(v0 + 208);

  v109(v91, v92);
  v93 = (_QWORD *)swift_task_alloc(dword_100116384);
  *(_QWORD *)(v0 + 272) = v93;
  *v93 = v0;
  v93[1] = sub_1000875BC;
  return sub_10008770C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 72));
}

uint64_t sub_1000875BC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  return swift_task_switch(sub_100087610, 0, 0);
}

uint64_t sub_100087610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v0 + 256);
  v1 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 104);
  sub_10001DF70(v9, type metadata accessor for OverviewTimelineProvider.Configuration);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008770C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v4[95] = v3;
  v4[94] = a3;
  v4[93] = a2;
  v4[92] = a1;
  v5 = type metadata accessor for ExchangeStatus(0);
  v4[96] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[97] = v6;
  v4[98] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100053CF0(0);
  v4[99] = v7;
  v4[100] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D694(0);
  v4[101] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100053D50(0);
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[102] = swift_task_alloc(v10);
  v4[103] = swift_task_alloc(v10);
  v4[104] = swift_task_alloc(v10);
  sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v4[105] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[106] = v12;
  v4[107] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for WatchlistOverviewContentViewModel(0);
  v4[108] = v13;
  v4[109] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TimelineProviderContext(0);
  v4[110] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[111] = v15;
  v4[112] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for HeadlineViewModel(0);
  v4[113] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v4[114] = v17;
  v4[115] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042D9C(0);
  v4[116] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v4[117] = v19;
  v4[118] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for WidgetStock(0);
  v4[119] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v4[120] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[121] = swift_task_alloc(v22);
  v4[122] = swift_task_alloc(v22);
  v23 = type metadata accessor for Stock(0);
  v4[123] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v4[124] = v24;
  v4[125] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D6B0(0);
  v26 = (*(_QWORD *)(*(_QWORD *)(v25 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[126] = swift_task_alloc(v26);
  v4[127] = swift_task_alloc(v26);
  v4[128] = swift_task_alloc(v26);
  v4[129] = swift_task_alloc(v26);
  sub_10008EA50(0);
  v4[130] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v27 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008EA6C(0);
  v4[131] = v28;
  v29 = *(_QWORD *)(v28 - 8);
  v4[132] = v29;
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[133] = swift_task_alloc(v30);
  v4[134] = swift_task_alloc(v30);
  v31 = type metadata accessor for WidgetWatchlist(0);
  v4[135] = v31;
  v32 = *(_QWORD *)(v31 - 8);
  v4[136] = v32;
  v4[137] = swift_task_alloc((*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for Logger(0);
  v4[138] = v33;
  v34 = *(_QWORD *)(v33 - 8);
  v4[139] = v34;
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[140] = swift_task_alloc(v35);
  v4[141] = swift_task_alloc(v35);
  v4[142] = swift_task_alloc(v35);
  v4[143] = swift_task_alloc(v35);
  v4[144] = swift_task_alloc(v35);
  v4[145] = swift_task_alloc(v35);
  v4[146] = swift_task_alloc(v35);
  v4[147] = swift_task_alloc(v35);
  sub_10008EAC8(0);
  v37 = (*(_QWORD *)(*(_QWORD *)(v36 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[148] = swift_task_alloc(v37);
  v4[149] = swift_task_alloc(v37);
  v38 = type metadata accessor for WidgetFamily(0);
  v4[150] = v38;
  v39 = *(_QWORD *)(v38 - 8);
  v4[151] = v39;
  v40 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[152] = swift_task_alloc(v40);
  v4[153] = swift_task_alloc(v40);
  v4[154] = swift_task_alloc(v40);
  v4[155] = swift_task_alloc(v40);
  v4[156] = swift_task_alloc(v40);
  v4[157] = swift_task_alloc(v40);
  v4[158] = swift_task_alloc(v40);
  v4[159] = swift_task_alloc(v40);
  return swift_task_switch(sub_100087B34, 0, 0);
}

uint64_t sub_100087B34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 1280) = v1;
  *(_QWORD *)(v0 + 1288) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100087BA0, v2, v3);
}

uint64_t sub_100087BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  swift_release(*(_QWORD *)(v0 + 1288));
  v1 = sub_100003AE0(0, &qword_100113D88, (uint64_t)&protocol descriptor for WatchlistViewModelServiceType);
  if (qword_100111588 != -1)
    swift_once(&qword_100111588, sub_1000B0BAC);
  sub_10001DB68((uint64_t)qword_100126A08, v0 + 56);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  sub_100007184((_QWORD *)(v0 + 56), v2);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v1, v1, v2, v3);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10001D968((__int128 *)(v0 + 96), v0 + 16);
    sub_100007164((_QWORD *)(v0 + 56));
    return swift_task_switch(sub_100087C98, 0, 0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100087C98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 1280);
  *(_QWORD *)(v1 + 1296) = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_100087CF8, v3, v4);
}

uint64_t sub_100087CF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  swift_release(*(_QWORD *)(v0 + 1296));
  v1 = sub_100003AE0(0, &qword_100112790, (uint64_t)&protocol descriptor for HeadlineViewModelServiceType);
  sub_10001DB68((uint64_t)qword_100126A08, v0 + 176);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  sub_100007184((_QWORD *)(v0 + 176), v2);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v1, v1, v2, v3);
  if (*(_QWORD *)(v0 + 240))
  {
    sub_10001D968((__int128 *)(v0 + 216), v0 + 136);
    sub_100007164((_QWORD *)(v0 + 176));
    return swift_task_switch(sub_100087DC8, 0, 0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100087DC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v11)(uint64_t, uint64_t);
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v2 = *(_QWORD *)(v1 + 1272);
  v3 = *(_QWORD *)(v1 + 1264);
  v4 = *(_QWORD *)(v1 + 1256);
  v5 = *(_QWORD **)(v1 + 1208);
  v6 = *(_QWORD *)(v1 + 1200);
  v7 = *(_QWORD *)(v1 + 744);
  TimelineProviderContext.family.getter(a1);
  v32 = sub_10008EAE4(v2, *(_BYTE *)(v7 + 16), *(_BYTE *)(v7 + 17), 0);
  *(_QWORD *)(v1 + 1304) = v32;
  v8 = (uint64_t (*)(uint64_t, uint64_t))v5[1];
  *(_QWORD *)(v1 + 1312) = v8;
  v9 = v8(v2, v6);
  TimelineProviderContext.family.getter(v9);
  v10 = (void (*)(uint64_t, uint64_t, uint64_t))v5[2];
  *(_QWORD *)(v1 + 1320) = v10;
  v10(v4, v3, v6);
  v11 = (uint64_t (*)(uint64_t, uint64_t))v5[11];
  *(_QWORD *)(v1 + 1328) = v11;
  v12 = v11(v4, v6);
  v13 = enum case for WidgetFamily.systemSmall(_:);
  *(_DWORD *)(v1 + 1464) = enum case for WidgetFamily.systemSmall(_:);
  v14 = enum case for WidgetFamily.systemMedium(_:);
  *(_DWORD *)(v1 + 1468) = enum case for WidgetFamily.systemMedium(_:);
  v15 = enum case for WidgetFamily.systemLarge(_:);
  *(_DWORD *)(v1 + 1472) = enum case for WidgetFamily.systemLarge(_:);
  v16 = enum case for WidgetFamily.accessoryRectangular(_:);
  *(_DWORD *)(v1 + 1476) = enum case for WidgetFamily.accessoryRectangular(_:);
  if (v12 != v13 && v12 != v14 && v12 != v15 && v12 != v16)
  {
    v17 = 374;
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000012, 0x80000001000E5410, "StocksWidget/OverviewTimelineProvider.swift", 43, 2, v17, 0);
  }
  v19 = *(_QWORD *)(v1 + 1248);
  v20 = *(_QWORD *)(v1 + 1200);
  v10(v19, *(_QWORD *)(v1 + 1264), v20);
  v21 = v11(v19, v20);
  if (v21 == v13)
    goto LABEL_11;
  v22 = 6;
  if (v21 != v14 && v21 != v15)
  {
    if (v21 != v16)
    {
      v17 = 385;
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000012, 0x80000001000E5410, "StocksWidget/OverviewTimelineProvider.swift", 43, 2, v17, 0);
    }
LABEL_11:
    v22 = 3;
  }
  *(_QWORD *)(v1 + 1336) = v22;
  v23 = *(_QWORD *)(v1 + 744);
  v24 = v8(*(_QWORD *)(v1 + 1264), *(_QWORD *)(v1 + 1200));
  v25 = *(_QWORD *)(v23 + 8);
  if (v25)
  {
    v26 = **(_QWORD **)(v1 + 744);
    v27 = *(_QWORD *)(v23 + 8);
  }
  else
  {
    v26 = static Watchlist.defaultWatchlistIdentifier.getter(v24);
    v27 = v28;
  }
  *(_QWORD *)(v1 + 1352) = v27;
  *(_QWORD *)(v1 + 1344) = v26;
  sub_100007184((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  if (v22 <= v32)
    v29 = v32;
  else
    v29 = v22;
  v30 = dword_100111EB4;
  swift_bridgeObjectRetain(v25);
  v31 = (_QWORD *)swift_task_alloc(v30);
  *(_QWORD *)(v1 + 1360) = v31;
  *v31 = v1;
  v31[1] = sub_10008804C;
  return sub_100004098(*(_QWORD *)(v1 + 1192), v26, v27, v29);
}

uint64_t sub_10008804C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1360);
  *(_QWORD *)(*v1 + 1368) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 1352));
    v4 = sub_10008A0D4;
  }
  else
  {
    v4 = sub_1000880B8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000880B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  NSObject *v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  __n128 v55;
  os_log_type_t v56;
  _BOOL4 v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::String *v71;
  Swift::String *v72;
  uint64_t v73;
  uint64_t ObjCClassFromMetadata;
  void *v75;
  id v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  id v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  __n128 v93;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  Swift::String *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (*v135)(uint64_t, uint64_t, uint64_t);
  int v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  NSObject *v147;
  __n128 v148;
  os_log_type_t v149;
  uint64_t v150;
  _QWORD *v151;
  __n128 v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t (*v169)(uint64_t, uint64_t);
  void (*v170)(uint64_t, uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  __n128 v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __n128 v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __n128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t (*v203)(uint64_t, uint64_t);
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t (*v208)(uint64_t, uint64_t);
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t *v213;
  uint64_t v214;
  int v215;
  uint64_t (*v216)(uint64_t, uint64_t);
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  char v221;
  void (*v222)(uint64_t, uint64_t, uint64_t);
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  int *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void (*v231)(uint64_t, uint64_t);
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  NSObject *v236;
  __n128 v237;
  os_log_type_t v238;
  uint8_t *v239;
  _QWORD *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  char v244;
  uint64_t v245;
  void (*v246)(uint64_t, uint64_t);
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void (*v270)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int (*v276)(uint64_t, uint64_t, uint64_t);
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  void (*v284)(uint64_t, uint64_t);
  char v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  void (*v303)(uint64_t, uint64_t, __n128);
  uint64_t v304;
  uint64_t v305;
  Swift::String v306;
  uint64_t v307;
  uint64_t v308;
  Swift::String v309;
  void *object;
  __n128 v311;
  Swift::String v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t (*v349)(uint64_t, uint64_t, uint64_t);
  int *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  void (*v354)(uint64_t, uint64_t);
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  void (*v366)(uint64_t, uint64_t);
  void (*v367)(uint64_t, uint64_t);
  uint64_t v368;
  char v369;
  uint64_t v370;
  void (*v371)(uint64_t, uint64_t, uint64_t);
  uint64_t v372;
  unsigned int v373;
  _QWORD *v374;
  NSObject *v375;
  NSObject *v376;
  NSObject *v377;
  char v378;
  NSObject *v379;
  NSObject *v380;
  NSObject *v381;
  _QWORD *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  void (*v387)(uint64_t, uint64_t);
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  unint64_t v391;
  Swift::String v392;
  Swift::String v393;
  Swift::String v394;

  v1 = *(_QWORD *)(v0 + 1352);
  v2 = *(_QWORD *)(v0 + 1176);
  v3 = *(_QWORD *)(v0 + 1104);
  v4 = *(_QWORD *)(v0 + 760);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1112) + 16);
  *(_QWORD *)(v0 + 1376) = v5;
  v371 = v5;
  v374 = (_QWORD *)(v0 + 136);
  v5(v2, v4, v3);
  v6 = swift_bridgeObjectRetain_n(v1, 2);
  v7 = Logger.logObject.getter(v6);
  LOBYTE(v9) = static os_log_type_t.default.getter(v8);
  if (!os_log_type_enabled(v7, (os_log_type_t)v9))
  {
    v19 = *(_QWORD *)(v0 + 1176);
    v20 = *(_QWORD *)(v0 + 1112);
    v21 = *(_QWORD *)(v0 + 1104);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1352), 2);

    v18 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v18(v19, v21);
    goto LABEL_5;
  }
  v375 = (v0 + 728);
  v10 = *(_QWORD *)(v0 + 1352);
  v11 = *(_QWORD *)(v0 + 1344);
  v362 = *(_QWORD *)(v0 + 1336);
  v366 = (void (*)(uint64_t, uint64_t))(v0 + 456);
  v358 = *(_QWORD *)(v0 + 1304);
  v12 = swift_slowAlloc(42, -1);
  v382 = (_QWORD *)swift_slowAlloc(64, -1);
  v390 = v382;
  *(_DWORD *)v12 = 136315906;
  swift_bridgeObjectRetain(v10);
  *(_QWORD *)(v0 + 696) = sub_10007ECFC(v11, v10, (uint64_t *)&v390);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 696, v0 + 704, v12 + 4, v12 + 12);
  swift_bridgeObjectRelease_n(v10, 3);
  *(_WORD *)(v12 + 12) = 2048;
  *(_QWORD *)(v0 + 704) = v358;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 704, v0 + 712, v12 + 14, v12 + 22);
  *(_WORD *)(v12 + 22) = 2048;
  *(_QWORD *)(v0 + 712) = v362;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 712, v0 + 720, v12 + 24, v12 + 32);
  *(_WORD *)(v12 + 32) = 2080;
  v13 = v12 + 34;
  if (qword_100111468 != -1)
    goto LABEL_137;
  while (1)
  {
    v14 = *(_QWORD *)(v0 + 1176);
    v15 = *(_QWORD *)(v0 + 1112);
    v16 = *(_QWORD *)(v0 + 1104);
    TaskLocal.get()(v366);
    v17 = *(_QWORD *)(v0 + 464);
    *(_QWORD *)(v0 + 728) = sub_10007ECFC(*(_QWORD *)(v0 + 456), v17, (uint64_t *)&v390);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v375, v0 + 736, v13, v12 + 42);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v7, (os_log_type_t)v9, "Fetching watchlist, watchlist=%s, countWithoutNews=%ld, countWithNews=%ld, id=%s", (uint8_t *)v12, 0x2Au);
    swift_arrayDestroy(v382, 2, &type metadata for Any[8]);
    swift_slowDealloc(v382, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v18(v14, v16);
LABEL_5:
    *(_QWORD *)(v0 + 1384) = v18;
    v22 = *(_QWORD *)(v0 + 1184);
    v23 = *(_QWORD *)(v0 + 1088);
    v24 = *(_QWORD *)(v0 + 1080);
    sub_10001DE2C(*(_QWORD *)(v0 + 1192), v22, (uint64_t (*)(_QWORD))sub_10008EAC8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v22, 1, v24) == 1)
    {
      v25 = *(_QWORD *)(v0 + 1352);
      v26 = *(_QWORD *)(v0 + 1120);
      v27 = *(_QWORD *)(v0 + 1104);
      v28 = *(_QWORD *)(v0 + 760);
      sub_10001DF70(*(_QWORD *)(v0 + 1184), (uint64_t (*)(_QWORD))sub_10008EAC8);
      v371(v26, v28, v27);
      swift_bridgeObjectRetain(v25);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.error.getter();
      v32 = os_log_type_enabled(v30, v31);
      v33 = *(_QWORD *)(v0 + 1352);
      if (v32)
      {
        v367 = v18;
        v34 = *(_QWORD *)(v0 + 1344);
        v35 = swift_slowAlloc(22, -1);
        v36 = (_QWORD *)swift_slowAlloc(64, -1);
        v390 = v36;
        *(_DWORD *)v35 = 136315394;
        swift_bridgeObjectRetain(v33);
        *(_QWORD *)(v0 + 632) = sub_10007ECFC(v34, v33, (uint64_t *)&v390);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 640, v35 + 4, v35 + 12);
        swift_bridgeObjectRelease_n(v33, 3);
        *(_WORD *)(v35 + 12) = 2080;
        if (qword_100111468 != -1)
          swift_once(&qword_100111468, sub_10002DFB0);
        v37 = *(_QWORD *)(v0 + 1120);
        v38 = *(_QWORD *)(v0 + 1104);
        TaskLocal.get()((_QWORD *)(v0 + 408));
        v39 = *(_QWORD *)(v0 + 416);
        *(_QWORD *)(v0 + 624) = sub_10007ECFC(*(_QWORD *)(v0 + 408), v39, (uint64_t *)&v390);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 624, v0 + 632, v35 + 14, v35 + 22);
        swift_bridgeObjectRelease(v39);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to find watchlist, watchlist=%s, id=%s", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy(v36, 2, &type metadata for Any[8]);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v35, -1, -1);

        v367(v37, v38);
      }
      else
      {
        v67 = *(_QWORD *)(v0 + 1120);
        v68 = *(_QWORD *)(v0 + 1104);
        swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1352), 2);

        v18(v67, v68);
      }
      v383 = *(_QWORD *)(v0 + 1192);
      v69 = *(_QWORD *)(v0 + 736);
      sub_10002A734(0);
      v71 = (Swift::String *)(v69 + *(int *)(v70 + 48));
      v72 = (Swift::String *)(v69 + *(int *)(v70 + 64));
      static Date.now.getter(v70);
      v73 = type metadata accessor for Localized();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v73);
      v75 = (void *)objc_opt_self(NSBundle);
      v76 = objc_msgSend(v75, "bundleForClass:", ObjCClassFromMetadata);
      v392._countAndFlagsBits = 0xD00000000000004CLL;
      v392._object = (void *)0x80000001000E66E0;
      v77._object = (void *)0x80000001000E66C0;
      v77._countAndFlagsBits = 0xD000000000000011;
      v78._countAndFlagsBits = 0;
      v78._object = (void *)0xE000000000000000;
      v79 = NSLocalizedString(_:tableName:bundle:value:comment:)(v77, (Swift::String_optional)0, (NSBundle)v76, v78, v392);

      *v71 = v79;
      v80 = objc_msgSend(v75, "bundleForClass:", ObjCClassFromMetadata);
      v81._countAndFlagsBits = 0xD00000000000001DLL;
      v393._countAndFlagsBits = 0xD00000000000004FLL;
      v393._object = (void *)0x80000001000E6750;
      v81._object = (void *)0x80000001000E6730;
      v82._countAndFlagsBits = 0;
      v82._object = (void *)0xE000000000000000;
      v83 = NSLocalizedString(_:tableName:bundle:value:comment:)(v81, (Swift::String_optional)0, (NSBundle)v80, v82, v393);

      sub_10001DF70(v383, (uint64_t (*)(_QWORD))sub_10008EAC8);
      *v72 = v83;
      v84 = type metadata accessor for OverviewTimelineEntry(0);
LABEL_33:
      swift_storeEnumTagMultiPayload(v69, v84, 0);
      goto LABEL_34;
    }
    v363 = v0 + 568;
    v366 = v18;
    v376 = (v0 + 584);
    v40 = *(_QWORD *)(v0 + 1096);
    v41 = *(_QWORD *)(v0 + 1056);
    v42 = *(_QWORD *)(v0 + 1048);
    v43 = *(_QWORD *)(v0 + 1040);
    sub_10000ED3C(*(_QWORD *)(v0 + 1184), v40, type metadata accessor for WidgetWatchlist);
    v44 = *(_QWORD *)(v40 + 16);
    *(_QWORD *)(v0 + 600) = v44;
    sub_10008EA90(0);
    v46 = v45;
    v47 = sub_10008EAAC();
    swift_bridgeObjectRetain(v44);
    NonEmpty.init(_:)(v0 + 600, v46, v47);
    v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v43, 1, v42);
    v49 = *(_QWORD *)(v0 + 1352);
    if (v48 == 1)
    {
      v50 = *(_QWORD *)(v0 + 1128);
      v51 = *(_QWORD *)(v0 + 1104);
      v52 = *(_QWORD *)(v0 + 760);
      sub_10001DF70(*(_QWORD *)(v0 + 1040), (uint64_t (*)(_QWORD))sub_10008EA50);
      v371(v50, v52, v51);
      swift_bridgeObjectRetain(v49);
      v54 = Logger.logObject.getter(v53);
      v56 = static os_log_type_t.default.getter(v55);
      v57 = os_log_type_enabled(v54, v56);
      v58 = *(_QWORD *)(v0 + 1352);
      if (v57)
      {
        v59 = *(_QWORD *)(v0 + 1344);
        v60 = swift_slowAlloc(22, -1);
        v61 = (_QWORD *)swift_slowAlloc(64, -1);
        v390 = v61;
        *(_DWORD *)v60 = 136315394;
        swift_bridgeObjectRetain(v58);
        *(_QWORD *)(v0 + 584) = sub_10007ECFC(v59, v58, (uint64_t *)&v390);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v376, v0 + 592, v60 + 4, v60 + 12);
        swift_bridgeObjectRelease_n(v58, 3);
        *(_WORD *)(v60 + 12) = 2080;
        if (qword_100111468 != -1)
          swift_once(&qword_100111468, sub_10002DFB0);
        v62 = *(_QWORD *)(v0 + 1128);
        v63 = *(_QWORD *)(v0 + 1104);
        TaskLocal.get()((_QWORD *)(v0 + 472));
        v64 = *(_QWORD *)(v0 + 480);
        *(_QWORD *)(v0 + 568) = sub_10007ECFC(*(_QWORD *)(v0 + 472), v64, (uint64_t *)&v390);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v363, v0 + 576, v60 + 14, v60 + 22);
        swift_bridgeObjectRelease(v64);
        _os_log_impl((void *)&_mh_execute_header, v54, v56, "No symbols in watchlist, watchlist=%s, id=%s", (uint8_t *)v60, 0x16u);
        swift_arrayDestroy(v61, 2, &type metadata for Any[8]);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v60, -1, -1);

        v65 = v62;
        v66 = v63;
      }
      else
      {
        v110 = *(_QWORD *)(v0 + 1128);
        v111 = *(_QWORD *)(v0 + 1104);
        swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1352), 2);

        v65 = v110;
        v66 = v111;
      }
      v366(v65, v66);
      v112 = *(_QWORD *)(v0 + 1192);
      v113 = *(_QWORD *)(v0 + 1096);
      v69 = *(_QWORD *)(v0 + 736);
      sub_10002A734(0);
      v115 = (Swift::String *)(v69 + *(int *)(v114 + 48));
      v116 = (_QWORD *)(v69 + *(int *)(v114 + 64));
      static Date.now.getter(v114);
      v117 = type metadata accessor for Localized();
      v118 = swift_getObjCClassFromMetadata(v117);
      v119 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v118);
      v394._countAndFlagsBits = 0xD00000000000004ALL;
      v394._object = (void *)0x80000001000E67A0;
      v120._countAndFlagsBits = 0x6F626D7953206F4ELL;
      v120._object = (void *)0xEA0000000000736CLL;
      v121._countAndFlagsBits = 0;
      v121._object = (void *)0xE000000000000000;
      v122 = NSLocalizedString(_:tableName:bundle:value:comment:)(v120, (Swift::String_optional)0, (NSBundle)v119, v121, v394);

      sub_10001DF70(v113, type metadata accessor for WidgetWatchlist);
      sub_10001DF70(v112, (uint64_t (*)(_QWORD))sub_10008EAC8);
      *v115 = v122;
      v84 = type metadata accessor for OverviewTimelineEntry(0);
      *v116 = 0;
      v116[1] = 0;
      goto LABEL_33;
    }
    v85 = *(_QWORD *)(v0 + 1336);
    v86 = *(_QWORD *)(v0 + 1072);
    v87 = *(_QWORD *)(v0 + 1064);
    v88 = *(_QWORD *)(v0 + 1056);
    v89 = *(_QWORD *)(v0 + 1048);
    v90 = *(_QWORD **)(v0 + 1040);
    v91 = *(_QWORD *)(v0 + 1032);
    v92 = *(_QWORD *)(v0 + 936);
    v343 = *(_QWORD *)(v0 + 928);
    v384 = *(_QWORD *)(v0 + 752);
    v347 = *(_QWORD **)(v0 + 744);
    v351 = *(_QWORD *)(v0 + 760);
    v93 = swift_bridgeObjectRelease(v49);
    (*(void (**)(uint64_t, _QWORD *, uint64_t, __n128))(v88 + 32))(v86, v90, v89, v93);
    v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16);
    *(_QWORD *)(v0 + 1392) = v94;
    v94(v87, v86, v89);
    v95 = sub_100085AC4(v85, (uint64_t (*)(_QWORD))sub_10008EA6C, (uint64_t (*)(_QWORD *))sub_10008ED78);
    v97 = v96;
    v9 = v98;
    v12 = v99;
    *(_QWORD *)(v0 + 1400) = v95;
    *(_QWORD *)(v0 + 1408) = v96;
    *(_QWORD *)(v0 + 1416) = v98;
    *(_QWORD *)(v0 + 1424) = v99;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56))(v91, 1, 1, v343);
    v100 = v384;
    v382 = (_QWORD *)v97;
    if ((sub_10008DEB0((uint64_t)v347, v100, (uint64_t)v95, v97, v9, v12) & 1) == 0)
      break;
    v375 = (v12 >> 1);
    v101 = (v12 >> 1) - v9;
    if (__OFSUB__(v12 >> 1, v9))
    {
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      swift_once(&qword_100111468, sub_10002DFB0);
LABEL_68:
      v203 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1384);
      v204 = *(_QWORD *)(v0 + 1144);
      v205 = *(_QWORD *)(v0 + 1104);
      TaskLocal.get()(v347);
      v206 = *(_QWORD *)(v0 + 448);
      *(_QWORD *)(v0 + 608) = sub_10007ECFC(*(_QWORD *)(v0 + 440), v206, (uint64_t *)&v390);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v351, v366, v92, v12 + 32);
      swift_bridgeObjectRelease(v206);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v101, (os_log_type_t)v9, "Fetched %ld headlines for %ld stocks, id=%s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy(v90, 1, &type metadata for Any[8]);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      v207 = v203(v204, v205);
      v136 = (int)v382;
      goto LABEL_70;
    }
    v12 = (unint64_t)_swiftEmptyArrayStorage;
    if (!v101)
    {
LABEL_38:
      *(_QWORD *)(v0 + 1432) = v12;
      v371(*(_QWORD *)(v0 + 1160), *(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 1104));
      v146 = swift_bridgeObjectRetain_n(v12, 2);
      v147 = Logger.logObject.getter(v146);
      v149 = static os_log_type_t.default.getter(v148);
      if (os_log_type_enabled(v147, v149))
      {
        v150 = swift_slowAlloc(22, -1);
        v151 = (_QWORD *)swift_slowAlloc(64, -1);
        v390 = v151;
        *(_DWORD *)v150 = 136315394;
        v152 = swift_bridgeObjectRetain(v12);
        v153 = Array.description.getter(v152);
        v155 = v154;
        swift_bridgeObjectRelease(v12);
        *(_QWORD *)(v0 + 672) = sub_10007ECFC(v153, v155, (uint64_t *)&v390);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 672, v0 + 680, v150 + 4, v150 + 12);
        swift_bridgeObjectRelease(v155);
        swift_bridgeObjectRelease_n(v12, 2);
        *(_WORD *)(v150 + 12) = 2080;
        if (qword_100111468 != -1)
          swift_once(&qword_100111468, sub_10002DFB0);
        v156 = *(_QWORD *)(v0 + 1160);
        v157 = *(_QWORD *)(v0 + 1104);
        TaskLocal.get()((_QWORD *)(v0 + 520));
        v158 = *(_QWORD *)(v0 + 528);
        *(_QWORD *)(v0 + 688) = sub_10007ECFC(*(_QWORD *)(v0 + 520), v158, (uint64_t *)&v390);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v150 + 14, v150 + 22);
        swift_bridgeObjectRelease(v158);
        _os_log_impl((void *)&_mh_execute_header, v147, v149, "Fetching headlines for stocks, stocks=%s, id=%s", (uint8_t *)v150, 0x16u);
        swift_arrayDestroy(v151, 2, &type metadata for Any[8]);
        swift_slowDealloc(v151, -1, -1);
        swift_slowDealloc(v150, -1, -1);

        v159 = v156;
        v160 = v157;
      }
      else
      {
        v164 = *(_QWORD *)(v0 + 1160);
        v165 = *(_QWORD *)(v0 + 1104);
        swift_bridgeObjectRelease_n(v12, 2);

        v159 = v164;
        v160 = v165;
      }
      v166 = ((uint64_t (*)(uint64_t, uint64_t))v366)(v159, v160);
      v167 = *(_DWORD *)(v0 + 1468);
      v168 = *(_DWORD *)(v0 + 1464);
      v169 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1328);
      v170 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1320);
      v171 = *(_QWORD *)(v0 + 1240);
      v172 = *(_QWORD *)(v0 + 1232);
      v173 = *(_QWORD *)(v0 + 1200);
      TimelineProviderContext.family.getter(v166);
      v170(v172, v171, v173);
      v174 = v169(v172, v173);
      v175 = 1;
      if (v174 != v168 && v174 != v167)
      {
        if (v174 == *(_DWORD *)(v0 + 1472))
        {
          v175 = 4;
        }
        else
        {
          if (v174 != *(_DWORD *)(v0 + 1476))
            return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000012, 0x80000001000E5410, "StocksWidget/OverviewTimelineProvider.swift", 43, 2, 401, 0);
          v175 = 0;
        }
      }
      (*(void (**)(_QWORD, _QWORD))(v0 + 1312))(*(_QWORD *)(v0 + 1240), *(_QWORD *)(v0 + 1200));
      sub_100007184(v374, *(_QWORD *)(v0 + 160));
      v290 = (_QWORD *)swift_task_alloc(dword_100112164);
      *(_QWORD *)(v0 + 1440) = v290;
      *v290 = v0;
      v290[1] = sub_10008A61C;
      return sub_10000915C(v12, v175);
    }
    v390 = _swiftEmptyArrayStorage;
    sub_1000737F4(0, v101 & ~(v101 >> 63), 0);
    if (v101 < 0)
      goto LABEL_139;
    v102 = *(_QWORD *)(v0 + 992);
    v13 = *(_QWORD *)(v0 + 960);
    if (v9 <= (uint64_t)v375)
      v7 = v375;
    else
      v7 = v9;
    while (v7 != v9)
    {
      v103 = *(_QWORD *)(v0 + 1000);
      v104 = *(_QWORD *)(v0 + 984);
      v105 = *(_QWORD *)(v0 + 976);
      sub_10001DE2C((uint64_t)v382 + *(_QWORD *)(v13 + 72) * v9, v105, type metadata accessor for WidgetStock);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16))(v103, v105, v104);
      sub_10001DF70(v105, type metadata accessor for WidgetStock);
      v12 = (unint64_t)v390;
      if ((swift_isUniquelyReferenced_nonNull_native(v390) & 1) == 0)
      {
        sub_1000737F4(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = (unint64_t)v390;
      }
      v107 = *(_QWORD *)(v12 + 16);
      v106 = *(_QWORD *)(v12 + 24);
      if (v107 >= v106 >> 1)
      {
        sub_1000737F4(v106 > 1, v107 + 1, 1);
        v12 = (unint64_t)v390;
      }
      v108 = *(_QWORD *)(v0 + 1000);
      v109 = *(_QWORD *)(v0 + 984);
      *(_QWORD *)(v12 + 16) = v107 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v102 + 32))(v12+ ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80))+ *(_QWORD *)(v102 + 72) * v107, v108, v109);
      v390 = (_QWORD *)v12;
      if (v375 == ++v9)
        goto LABEL_38;
    }
    __break(1u);
LABEL_137:
    swift_once(&qword_100111468, sub_10002DFB0);
  }
  v132 = *(_QWORD *)(v0 + 1008);
  v133 = *(_QWORD *)(v0 + 936);
  v134 = *(_QWORD *)(v0 + 928);
  sub_10001DE2C(*(_QWORD *)(v0 + 1032), v132, (uint64_t (*)(_QWORD))sub_10001D6B0);
  v135 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 48);
  v136 = v135(v132, 1, v134);
  sub_10001DF70(v132, (uint64_t (*)(_QWORD))sub_10001D6B0);
  if (v136 != 1)
  {
    v161 = *(_QWORD *)(v0 + 1424);
    v162 = *(_QWORD *)(v0 + 1400);
    if ((v161 & 1) != 0)
    {
      v185 = type metadata accessor for __ContiguousArrayStorageBase(0);
      v187 = swift_unknownObjectRetain_n(v186);
      v188 = (_QWORD *)swift_dynamicCastClass(v187, v185);
      if (!v188)
      {
        swift_unknownObjectRelease(v162);
        v161 = *(_QWORD *)(v0 + 1424);
        v188 = _swiftEmptyArrayStorage;
      }
      v189 = *(_QWORD *)(v0 + 1416);
      v190 = v188[2];
      swift_release(v188);
      v191 = (v161 >> 1) - v189;
      if (__OFSUB__(v161 >> 1, v189))
      {
        __break(1u);
      }
      else
      {
        v161 = *(_QWORD *)(v0 + 1400);
        if (v190 == v191)
        {
          v163 = (_QWORD *)swift_dynamicCastClass(*(_QWORD *)(v0 + 1400), v185);
          if (!v163)
          {
            swift_unknownObjectRelease(v161);
            v163 = _swiftEmptyArrayStorage;
          }
          goto LABEL_63;
        }
      }
      swift_unknownObjectRelease(v161);
      v161 = *(_QWORD *)(v0 + 1424);
      v162 = *(_QWORD *)(v0 + 1400);
    }
    else
    {
      swift_unknownObjectRetain(*(_QWORD *)(v0 + 1400));
    }
    v163 = sub_10007F5DC(v162, *(_QWORD *)(v0 + 1408), *(_QWORD *)(v0 + 1416), v161);
LABEL_63:
    v192 = *(_QWORD *)(v0 + 1048);
    swift_unknownObjectRelease(*(_QWORD *)(v0 + 1400));
    *(_QWORD *)(v0 + 616) = v163;
    v183 = v0 + 616;
    v184 = v192;
    goto LABEL_64;
  }
  v137 = *(_QWORD *)(v0 + 1304);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1392))(*(_QWORD *)(v0 + 1064), *(_QWORD *)(v0 + 1072), *(_QWORD *)(v0 + 1048));
  v138 = sub_100085AC4(v137, (uint64_t (*)(_QWORD))sub_10008EA6C, (uint64_t (*)(_QWORD *))sub_10008ED78);
  v140 = v139;
  v142 = v141;
  v144 = v143;
  if ((v143 & 1) == 0)
    goto LABEL_37;
  v176 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v178 = swift_unknownObjectRetain_n(v177);
  v179 = (_QWORD *)swift_dynamicCastClass(v178, v176);
  if (!v179)
  {
    swift_unknownObjectRelease(v138);
    v179 = _swiftEmptyArrayStorage;
  }
  v180 = v179[2];
  v181 = swift_release(v179);
  if (__OFSUB__(v144 >> 1, v142))
  {
    __break(1u);
  }
  else
  {
    v181 = (uint64_t)v138;
    if (v180 == (v144 >> 1) - v142)
    {
      v145 = (_QWORD *)swift_dynamicCastClass(v138, v176);
      if (!v145)
      {
        swift_unknownObjectRelease(v138);
        v145 = _swiftEmptyArrayStorage;
      }
      goto LABEL_56;
    }
  }
  swift_unknownObjectRelease(v181);
LABEL_37:
  v145 = sub_10007F5DC((uint64_t)v138, v140, v142, v144);
LABEL_56:
  v182 = *(_QWORD *)(v0 + 1048);
  swift_unknownObjectRelease(v138);
  *(_QWORD *)(v0 + 552) = v145;
  v183 = v0 + 552;
  v184 = v182;
LABEL_64:
  NonEmpty.rawElements.setter(v183, v184);
  v193 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 1376))(*(_QWORD *)(v0 + 1144), *(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 1104));
  v101 = Logger.logObject.getter(v193);
  LOBYTE(v9) = static os_log_type_t.default.getter(v194);
  if (os_log_type_enabled((os_log_t)v101, (os_log_type_t)v9))
  {
    v366 = (void (*)(uint64_t, uint64_t))(v0 + 616);
    LODWORD(v382) = v136;
    v347 = (_QWORD *)(v0 + 440);
    v351 = v0 + 608;
    v195 = *(_QWORD *)(v0 + 1032);
    v196 = *(_QWORD *)(v0 + 928);
    v12 = swift_slowAlloc(32, -1);
    v90 = (_QWORD *)swift_slowAlloc(32, -1);
    v390 = v90;
    *(_DWORD *)v12 = 134218498;
    swift_beginAccess(v195, v0 + 336, 0, 0);
    v197 = 0;
    if (!v135(v195, 1, v196))
    {
      v198 = *(_QWORD *)(v0 + 944);
      v199 = *(_QWORD *)(v0 + 936);
      v200 = *(_QWORD *)(v0 + 928);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v199 + 16))(v198, *(_QWORD *)(v0 + 1032), v200);
      v197 = NonEmpty.count.getter(v200);
      (*(void (**)(uint64_t, uint64_t))(v199 + 8))(v198, v200);
    }
    v201 = *(_QWORD *)(v0 + 1072);
    v202 = *(_QWORD *)(v0 + 1048);
    *(_QWORD *)(v0 + 576) = v197;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 576, v376, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2048;
    swift_beginAccess(v201, v0 + 384, 0, 0);
    *(_QWORD *)(v0 + 592) = NonEmpty.count.getter(v202);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 592, v0 + 600, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2080;
    v92 = v12 + 24;
    if (qword_100111468 != -1)
      goto LABEL_140;
    goto LABEL_68;
  }
  v208 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1384);
  v209 = *(_QWORD *)(v0 + 1144);
  v210 = *(_QWORD *)(v0 + 1104);

  v207 = v208(v209, v210);
LABEL_70:
  v211 = *(_QWORD *)(v0 + 744);
  v212 = *(unsigned __int8 *)(v211 + 16);
  if (v212 == 1)
  {
    v213 = *(uint64_t **)(v0 + 1096);
    v214 = v213[1];
    v386 = *v213;
    swift_bridgeObjectRetain(v214);
  }
  else
  {
    v386 = 0;
    v214 = 0;
  }
  v215 = *(_DWORD *)(v0 + 1464);
  v216 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1328);
  v217 = *(_QWORD *)(v0 + 1216);
  v218 = *(_QWORD *)(v0 + 1200);
  v219 = *(unsigned __int8 *)(v211 + 17);
  TimelineProviderContext.family.getter(v207);
  v220 = v216(v217, v218);
  v378 = v219;
  if (v220 == v215)
  {
    v356 = 3;
    if (v136 == 1)
      v221 = v219;
    else
      v221 = 3;
    goto LABEL_77;
  }
  if (v220 == *(_DWORD *)(v0 + 1468))
  {
    v243 = 1;
    if (v219)
      v244 = 1;
    else
      v244 = 2;
    if (v219)
      v243 = 2;
    v245 = 2;
    if (((v136 == 1) & v212) == 0)
      v245 = 3;
    if (v136 == 1)
    {
      v356 = v245;
      v360 = v243;
      v369 = v244;
      v340 = v214;
      goto LABEL_79;
    }
    v360 = 2;
    v369 = 3;
    v356 = 3;
LABEL_78:
    swift_bridgeObjectRelease(v214);
    v386 = 0;
    v340 = 0;
    goto LABEL_79;
  }
  if (v220 != *(_DWORD *)(v0 + 1472))
  {
    if (v220 != *(_DWORD *)(v0 + 1476))
    {
      v303 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 1312);
      v304 = *(_QWORD *)(v0 + 1272);
      v305 = *(_QWORD *)(v0 + 1200);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 888) + 16))(*(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 880));
      v390 = 0;
      v391 = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v306._countAndFlagsBits = 0xD000000000000030;
      v306._object = (void *)0x80000001000E67F0;
      String.append(_:)(v306);
      TimelineProviderContext.family.getter(v307);
      v308 = sub_100003D3C(&qword_100112720, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
      v309._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v305, v308);
      object = v309._object;
      String.append(_:)(v309);
      v311 = swift_bridgeObjectRelease(object);
      v303(v304, v305, v311);
      v312._countAndFlagsBits = 11815;
      v312._object = (void *)0xE200000000000000;
      String.append(_:)(v312);
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v390, v391, "StocksWidget/OverviewTimelineProvider.swift", 43, 2, 294, 0);
    }
    v356 = *(_QWORD *)(v0 + 1304);
    v221 = 3;
LABEL_77:
    v369 = v221;
    v360 = 1;
    goto LABEL_78;
  }
  if (v219)
    v286 = 2;
  else
    v286 = 1;
  if (v219)
    v287 = 1;
  else
    v287 = 2;
  if (v136 == 1)
    v288 = v286;
  else
    v288 = 2;
  v289 = 6;
  if (v136 != 1)
    v289 = 3;
  v356 = v289;
  v360 = v288;
  if (v136 != 1)
    v287 = 3;
  v369 = v287;
  v340 = v214;
LABEL_79:
  v222 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1392);
  v349 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1376);
  v342 = *(_QWORD *)(v0 + 1136);
  v345 = *(_QWORD *)(v0 + 1104);
  v327 = *(_QWORD *)(v0 + 1080);
  v329 = *(_QWORD *)(v0 + 1096);
  v223 = *(_QWORD *)(v0 + 1072);
  v224 = *(_QWORD *)(v0 + 1064);
  v353 = *(_QWORD *)(v0 + 1056);
  v225 = *(_QWORD *)(v0 + 1048);
  v331 = *(_QWORD *)(v0 + 1032);
  v226 = *(char **)(v0 + 872);
  v227 = *(int **)(v0 + 864);
  v228 = *(_QWORD *)(v0 + 856);
  v334 = *(_QWORD *)(v0 + 848);
  v336 = *(_QWORD *)(v0 + 840);
  v338 = *(_QWORD *)(v0 + 760);
  swift_beginAccess(v223, v0 + 312, 0, 0);
  v222(v224, v223, v225);
  v229 = swift_task_alloc(32);
  *(_BYTE *)(v229 + 16) = v369;
  v230 = type metadata accessor for TickerCellViewModel(0);
  NonEmpty.map<A>(_:)(sub_10008ED00, v229, v225, v230);
  swift_task_dealloc(v229);
  v231 = *(void (**)(uint64_t, uint64_t))(v353 + 8);
  v231(v224, v225);
  v232 = v329 + *(int *)(v327 + 24);
  v233 = &v226[v227[7]];
  v234 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v234 - 8) + 16))(v233, v232, v234);
  swift_beginAccess(v331, v0 + 360, 0, 0);
  sub_10001DE2C(v331, (uint64_t)&v226[v227[11]], (uint64_t (*)(_QWORD))sub_10001D6B0);
  *(_QWORD *)v226 = v386;
  *((_QWORD *)v226 + 1) = v340;
  (*(void (**)(char *, uint64_t, uint64_t))(v334 + 32))(&v226[v227[5]], v228, v336);
  v226[v227[6]] = v369;
  *(_QWORD *)&v226[v227[8]] = v356;
  *(_QWORD *)&v226[v227[9]] = v360;
  v226[v227[10]] = v378;
  v235 = v349(v342, v338, v345);
  v236 = Logger.logObject.getter(v235);
  v238 = static os_log_type_t.default.getter(v237);
  v354 = v231;
  if (os_log_type_enabled(v236, v238))
  {
    v239 = (uint8_t *)swift_slowAlloc(12, -1);
    v240 = (_QWORD *)swift_slowAlloc(32, -1);
    v390 = v240;
    *(_DWORD *)v239 = 136315138;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v379 = *(NSObject **)(v0 + 1136);
    v387 = *(void (**)(uint64_t, uint64_t))(v0 + 1384);
    v241 = *(_QWORD *)(v0 + 1104);
    TaskLocal.get()((_QWORD *)(v0 + 504));
    v242 = *(_QWORD *)(v0 + 512);
    *(_QWORD *)(v0 + 560) = sub_10007ECFC(*(_QWORD *)(v0 + 504), v242, (uint64_t *)&v390);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 560, v363, v239 + 4, v239 + 12);
    swift_bridgeObjectRelease(v242);
    _os_log_impl((void *)&_mh_execute_header, v236, v238, "Successfully created timeline entry, id=%s", v239, 0xCu);
    swift_arrayDestroy(v240, 1, &type metadata for Any[8]);
    swift_slowDealloc(v240, -1, -1);
    swift_slowDealloc(v239, -1, -1);

    v387((uint64_t)v379, v241);
  }
  else
  {
    v246 = *(void (**)(uint64_t, uint64_t))(v0 + 1384);
    v247 = *(_QWORD *)(v0 + 1136);
    v248 = *(_QWORD *)(v0 + 1104);

    v246(v247, v248);
  }
  v249 = *(_QWORD *)(v0 + 1096);
  v250 = *(_QWORD *)(v0 + 872);
  v251 = *(_QWORD *)(v0 + 736);
  sub_10002A7CC(0);
  v350 = v252;
  v253 = v251 + v252[12];
  static Date.now.getter(v252);
  sub_10001DE2C(v250, v253, type metadata accessor for WatchlistOverviewContentViewModel);
  v254 = *(_QWORD *)(v249 + 16);
  v255 = *(_QWORD *)(v254 + 16);
  if (!v255)
  {
    v285 = 0;
    goto LABEL_130;
  }
  v256 = *(_QWORD *)(v0 + 960);
  v380 = *(NSObject **)(v0 + 792);
  v388 = *(_QWORD *)(v0 + 952);
  v257 = *(_QWORD *)(v0 + 776);
  v258 = v254 + ((*(unsigned __int8 *)(v256 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v256 + 80));
  v373 = enum case for ExchangeStatus.open(_:);
  v370 = *(_QWORD *)(v256 + 72);
  v346 = *(_QWORD *)(v249 + 16);
  swift_bridgeObjectRetain(v254);
  while (2)
  {
    v262 = *(_QWORD *)(v0 + 968);
    v263 = *(_QWORD *)(v0 + 808);
    sub_10001DE2C(v258, v262, type metadata accessor for WidgetStock);
    sub_10001DE2C(v262 + *(int *)(v388 + 20), v263, (uint64_t (*)(_QWORD))sub_10001D694);
    v264 = type metadata accessor for WidgetQuote(0);
    v265 = *(_QWORD *)(v264 - 8);
    v266 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v265 + 48))(v263, 1, v264);
    v267 = *(_QWORD *)(v0 + 832);
    v268 = *(_QWORD *)(v0 + 808);
    v269 = *(_QWORD *)(v0 + 768);
    if ((_DWORD)v266 == 1)
    {
      sub_10001DF70(*(_QWORD *)(v0 + 808), (uint64_t (*)(_QWORD))sub_10001D694);
      v270 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v257 + 56);
      v270(v267, 1, 1, v269);
    }
    else
    {
      WidgetQuote.exchangeStatus.getter(v266);
      (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v268, v264);
      v270 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v257 + 56);
      v270(v267, 0, 1, v269);
    }
    v271 = *(_QWORD *)(v0 + 832);
    v272 = *(_QWORD *)(v0 + 824);
    v273 = *(_QWORD *)(v0 + 800);
    v274 = *(_QWORD *)(v0 + 768);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v257 + 104))(v272, v373, v274);
    v270(v272, 0, 1, v274);
    v275 = v273 + SLODWORD(v380[6].isa);
    sub_10001DE2C(v271, v273, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DE2C(v272, v275, (uint64_t (*)(_QWORD))sub_100053D50);
    v276 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v257 + 48);
    if (v276(v273, 1, v274) != 1)
    {
      v277 = *(_QWORD *)(v0 + 768);
      sub_10001DE2C(*(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 816), (uint64_t (*)(_QWORD))sub_100053D50);
      if (v276(v275, 1, v277) == 1)
      {
        (*(void (**)(_QWORD, _QWORD))(v257 + 8))(*(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 768));
LABEL_97:
        v259 = *(_QWORD *)(v0 + 968);
        v260 = *(_QWORD *)(v0 + 832);
        v261 = *(_QWORD *)(v0 + 824);
        sub_10001DF70(*(_QWORD *)(v0 + 800), (uint64_t (*)(_QWORD))sub_100053CF0);
        sub_10001DF70(v261, (uint64_t (*)(_QWORD))sub_100053D50);
        sub_10001DF70(v260, (uint64_t (*)(_QWORD))sub_100053D50);
        sub_10001DF70(v259, type metadata accessor for WidgetStock);
      }
      else
      {
        v361 = *(_QWORD *)(v0 + 832);
        v365 = *(_QWORD *)(v0 + 968);
        v357 = *(_QWORD *)(v0 + 824);
        v278 = *(_QWORD *)(v0 + 816);
        v279 = *(_QWORD *)(v0 + 800);
        v280 = *(_QWORD *)(v0 + 784);
        v281 = *(_QWORD *)(v0 + 768);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v257 + 32))(v280, v275, v281);
        v282 = sub_100003D3C(&qword_1001146D8, (uint64_t (*)(uint64_t))&type metadata accessor for ExchangeStatus, (uint64_t)&protocol conformance descriptor for ExchangeStatus);
        v283 = dispatch thunk of static Equatable.== infix(_:_:)(v278, v280, v281, v282);
        v284 = *(void (**)(uint64_t, uint64_t))(v257 + 8);
        v284(v278, v281);
        v284(v280, v281);
        sub_10001DF70(v279, (uint64_t (*)(_QWORD))sub_100053D50);
        sub_10001DF70(v357, (uint64_t (*)(_QWORD))sub_100053D50);
        sub_10001DF70(v361, (uint64_t (*)(_QWORD))sub_100053D50);
        sub_10001DF70(v365, type metadata accessor for WidgetStock);
        if ((v283 & 1) != 0)
          goto LABEL_128;
      }
      v258 += v370;
      if (!--v255)
      {
        v285 = 0;
        goto LABEL_129;
      }
      continue;
    }
    break;
  }
  if (v276(v275, 1, *(_QWORD *)(v0 + 768)) != 1)
    goto LABEL_97;
  v291 = *(_QWORD *)(v0 + 968);
  v292 = *(_QWORD *)(v0 + 832);
  v293 = *(_QWORD *)(v0 + 824);
  sub_10001DF70(*(_QWORD *)(v0 + 800), (uint64_t (*)(_QWORD))sub_100053D50);
  sub_10001DF70(v293, (uint64_t (*)(_QWORD))sub_100053D50);
  sub_10001DF70(v292, (uint64_t (*)(_QWORD))sub_100053D50);
  sub_10001DF70(v291, type metadata accessor for WidgetStock);
LABEL_128:
  v285 = 1;
LABEL_129:
  swift_bridgeObjectRelease(v346);
LABEL_130:
  v294 = *(_QWORD *)(v0 + 1192);
  v295 = *(_QWORD *)(v0 + 1096);
  v381 = *(NSObject **)(v0 + 1048);
  v389 = *(_QWORD *)(v0 + 1072);
  v296 = *(_QWORD *)(v0 + 1032);
  v297 = *(_QWORD *)(v0 + 872);
  v298 = *(_QWORD *)(v0 + 736);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 1400));
  v299 = v350[16];
  v300 = v350[20];
  v301 = v350[24];
  sub_10001DF70(v297, type metadata accessor for WatchlistOverviewContentViewModel);
  sub_10001DF70(v295, type metadata accessor for WidgetWatchlist);
  sub_10001DF70(v294, (uint64_t (*)(_QWORD))sub_10008EAC8);
  *(_BYTE *)(v298 + v299) = v285;
  *(_BYTE *)(v298 + v300) = 0;
  *(_BYTE *)(v298 + v301) = 0;
  v302 = type metadata accessor for OverviewTimelineEntry(0);
  swift_storeEnumTagMultiPayload(v298, v302, 1);
  sub_10001DF70(v296, (uint64_t (*)(_QWORD))sub_10001D6B0);
  v354(v389, (uint64_t)v381);
LABEL_34:
  v123 = *(_QWORD *)(v0 + 1272);
  v124 = *(_QWORD *)(v0 + 1264);
  v125 = *(_QWORD *)(v0 + 1256);
  v126 = *(_QWORD *)(v0 + 1248);
  v127 = *(_QWORD *)(v0 + 1240);
  v128 = *(_QWORD *)(v0 + 1232);
  v129 = *(_QWORD *)(v0 + 1224);
  v130 = *(_QWORD *)(v0 + 1216);
  v313 = *(_QWORD *)(v0 + 1192);
  v314 = *(_QWORD *)(v0 + 1184);
  v315 = *(_QWORD *)(v0 + 1176);
  v316 = *(_QWORD *)(v0 + 1168);
  v317 = *(_QWORD *)(v0 + 1160);
  v318 = *(_QWORD *)(v0 + 1152);
  v319 = *(_QWORD *)(v0 + 1144);
  v320 = *(_QWORD *)(v0 + 1136);
  v321 = *(_QWORD *)(v0 + 1128);
  v322 = *(_QWORD *)(v0 + 1120);
  v323 = *(_QWORD *)(v0 + 1096);
  v324 = *(_QWORD *)(v0 + 1072);
  v325 = *(_QWORD *)(v0 + 1064);
  v326 = *(_QWORD *)(v0 + 1040);
  v328 = *(_QWORD *)(v0 + 1032);
  v330 = *(_QWORD *)(v0 + 1024);
  v332 = *(_QWORD *)(v0 + 1016);
  v333 = *(_QWORD *)(v0 + 1008);
  v335 = *(_QWORD *)(v0 + 1000);
  v337 = *(_QWORD *)(v0 + 976);
  v339 = *(_QWORD *)(v0 + 968);
  v341 = *(_QWORD *)(v0 + 944);
  v344 = *(_QWORD *)(v0 + 920);
  v348 = *(_QWORD *)(v0 + 896);
  v352 = *(_QWORD *)(v0 + 872);
  v355 = *(_QWORD *)(v0 + 856);
  v359 = *(_QWORD *)(v0 + 832);
  v364 = *(_QWORD *)(v0 + 824);
  v368 = *(_QWORD *)(v0 + 816);
  v372 = *(_QWORD *)(v0 + 808);
  v377 = *(NSObject **)(v0 + 800);
  v385 = *(_QWORD *)(v0 + 784);
  sub_100007164(v374);
  sub_100007164((_QWORD *)(v0 + 16));
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  swift_task_dealloc(v313);
  swift_task_dealloc(v314);
  swift_task_dealloc(v315);
  swift_task_dealloc(v316);
  swift_task_dealloc(v317);
  swift_task_dealloc(v318);
  swift_task_dealloc(v319);
  swift_task_dealloc(v320);
  swift_task_dealloc(v321);
  swift_task_dealloc(v322);
  swift_task_dealloc(v323);
  swift_task_dealloc(v324);
  swift_task_dealloc(v325);
  swift_task_dealloc(v326);
  swift_task_dealloc(v328);
  swift_task_dealloc(v330);
  swift_task_dealloc(v332);
  swift_task_dealloc(v333);
  swift_task_dealloc(v335);
  swift_task_dealloc(v337);
  swift_task_dealloc(v339);
  swift_task_dealloc(v341);
  swift_task_dealloc(v344);
  swift_task_dealloc(v348);
  swift_task_dealloc(v352);
  swift_task_dealloc(v355);
  swift_task_dealloc(v359);
  swift_task_dealloc(v364);
  swift_task_dealloc(v368);
  swift_task_dealloc(v372);
  swift_task_dealloc(v377);
  swift_task_dealloc(v385);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008A0D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74[2];

  v1 = *(_QWORD *)(v0 + 1368);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1112) + 16))(*(_QWORD *)(v0 + 1168), *(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 1104));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 1368);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v74[0] = v7;
    *(_DWORD *)v6 = 136315394;
    swift_getErrorValue(v5, v0 + 720, v0 + 288);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
    v10 = v9;
    *(_QWORD *)(v0 + 680) = sub_10007ECFC(v8, v9, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 680, v0 + 688, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    *(_WORD *)(v6 + 12) = 2080;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v11 = *(_QWORD *)(v0 + 1168);
    v12 = *(_QWORD *)(v0 + 1112);
    v13 = *(_QWORD *)(v0 + 1104);
    TaskLocal.get()((_QWORD *)(v0 + 488));
    v14 = *(_QWORD *)(v0 + 496);
    *(_QWORD *)(v0 + 648) = sub_10007ECFC(*(_QWORD *)(v0 + 488), v14, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 648, v0 + 656, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to create timeline entry, error=%s, id=%s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, &type metadata for Any[8]);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 1368);
    v17 = *(_QWORD *)(v0 + 1168);
    v18 = *(_QWORD *)(v0 + 1112);
    v19 = *(_QWORD *)(v0 + 1104);
    swift_errorRelease(v16);
    swift_errorRelease(v16);

    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  v20 = *(_QWORD *)(v0 + 1368);
  v72 = *(void (**)(uint64_t, uint64_t))(v0 + 1312);
  v21 = *(_QWORD *)(v0 + 1272);
  v22 = *(_QWORD *)(v0 + 1200);
  v23 = *(_QWORD *)(v0 + 744);
  v24 = *(_QWORD *)(v0 + 736);
  TimelineProviderContext.family.getter(v15);
  v25 = *(unsigned __int8 *)(v23 + 17);
  sub_10002A7CC(0);
  v27 = (char *)(v24 + v26[12]);
  v28 = v26[16];
  v29 = v26[20];
  v30 = v26[24];
  static Date.now.getter(v26);
  sub_10003755C(v21, v25, v27);
  *(_BYTE *)(v24 + v28) = 0;
  *(_BYTE *)(v24 + v29) = 1;
  *(_BYTE *)(v24 + v30) = 1;
  v31 = type metadata accessor for OverviewTimelineEntry(0);
  swift_storeEnumTagMultiPayload(v24, v31, 1);
  swift_errorRelease(v20);
  v72(v21, v22);
  v32 = *(_QWORD *)(v0 + 1272);
  v33 = *(_QWORD *)(v0 + 1264);
  v34 = *(_QWORD *)(v0 + 1256);
  v35 = *(_QWORD *)(v0 + 1248);
  v36 = *(_QWORD *)(v0 + 1240);
  v37 = *(_QWORD *)(v0 + 1232);
  v38 = *(_QWORD *)(v0 + 1224);
  v39 = *(_QWORD *)(v0 + 1216);
  v40 = *(_QWORD *)(v0 + 1192);
  v42 = *(_QWORD *)(v0 + 1184);
  v43 = *(_QWORD *)(v0 + 1176);
  v44 = *(_QWORD *)(v0 + 1168);
  v45 = *(_QWORD *)(v0 + 1160);
  v46 = *(_QWORD *)(v0 + 1152);
  v47 = *(_QWORD *)(v0 + 1144);
  v48 = *(_QWORD *)(v0 + 1136);
  v49 = *(_QWORD *)(v0 + 1128);
  v50 = *(_QWORD *)(v0 + 1120);
  v51 = *(_QWORD *)(v0 + 1096);
  v52 = *(_QWORD *)(v0 + 1072);
  v53 = *(_QWORD *)(v0 + 1064);
  v54 = *(_QWORD *)(v0 + 1040);
  v55 = *(_QWORD *)(v0 + 1032);
  v56 = *(_QWORD *)(v0 + 1024);
  v57 = *(_QWORD *)(v0 + 1016);
  v58 = *(_QWORD *)(v0 + 1008);
  v59 = *(_QWORD *)(v0 + 1000);
  v60 = *(_QWORD *)(v0 + 976);
  v61 = *(_QWORD *)(v0 + 968);
  v62 = *(_QWORD *)(v0 + 944);
  v63 = *(_QWORD *)(v0 + 920);
  v64 = *(_QWORD *)(v0 + 896);
  v65 = *(_QWORD *)(v0 + 872);
  v66 = *(_QWORD *)(v0 + 856);
  v67 = *(_QWORD *)(v0 + 832);
  v68 = *(_QWORD *)(v0 + 824);
  v69 = *(_QWORD *)(v0 + 816);
  v70 = *(_QWORD *)(v0 + 808);
  v71 = *(_QWORD *)(v0 + 800);
  v73 = *(_QWORD *)(v0 + 784);
  sub_100007164((_QWORD *)(v0 + 136));
  sub_100007164((_QWORD *)(v0 + 16));
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v73);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008A61C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1440);
  *(_QWORD *)(*v2 + 1448) = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 1432));
  if (v1)
  {
    v6 = sub_10008BA4C;
  }
  else
  {
    *(_QWORD *)(v4 + 1456) = a1;
    v6 = sub_10008A698;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10008A698()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v18)(_QWORD, uint64_t, uint64_t);
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  int v95;
  uint64_t (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  char v101;
  void (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  int *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  __n128 v116;
  os_log_type_t v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int (*v155)(uint64_t, uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  void (*v163)(uint64_t, uint64_t);
  char v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void (*v191)(uint64_t, uint64_t, __n128);
  uint64_t v192;
  uint64_t v193;
  Swift::String v194;
  uint64_t v195;
  uint64_t v196;
  Swift::String v197;
  void *object;
  __n128 v199;
  Swift::String v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int *v233;
  uint64_t v234;
  uint64_t v235;
  void (*v236)(uint64_t, uint64_t);
  uint64_t v237;
  uint64_t (*v238)(uint64_t, uint64_t, uint64_t);
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  void (*v262)(uint64_t, uint64_t);
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;

  v3 = *(_QWORD *)(v0 + 1032);
  v4 = *(_QWORD *)(v0 + 1024);
  *(_QWORD *)(v0 + 664) = *(_QWORD *)(v0 + 1456);
  sub_10001D794(0);
  v6 = v5;
  v7 = sub_10001D7B0();
  NonEmpty.init(_:)(v0 + 664, v6, v7);
  v8 = sub_10008ED34(v4, v3);
  LODWORD(v6) = *(_DWORD *)(v0 + 1472);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1328);
  v10 = *(void (**)(uint64_t, uint64_t))(v0 + 1312);
  v11 = *(_QWORD *)(v0 + 1224);
  v12 = *(_QWORD *)(v0 + 1200);
  TimelineProviderContext.family.getter(v8);
  v13 = v9(v11, v12);
  v10(v11, v12);
  if (v13 == (_DWORD)v6)
  {
    v14 = *(_QWORD *)(v0 + 1032);
    v15 = *(_QWORD *)(v0 + 936);
    v16 = *(_QWORD *)(v0 + 928);
    v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v15 + 48);
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v17)(v14, 1, v16))
    {
      v18 = *(void (**)(_QWORD, uint64_t, uint64_t))(v15 + 16);
      v18(*(_QWORD *)(v0 + 944), v14, v16);
      sub_100003D3C(&qword_1001163B0, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t)&protocol conformance descriptor for NonEmpty<A>);
      dispatch thunk of Sequence.makeIterator()(v16);
      v19 = *(_QWORD *)(v0 + 424);
      v20 = *(_QWORD *)(v0 + 432);
      v21 = *(_QWORD *)(v19 + 16);
      if (v20 == v21)
      {
LABEL_9:
        swift_bridgeObjectRelease(v19);
      }
      else
      {
        v22 = *(_QWORD *)(v0 + 920);
        v23 = *(_QWORD *)(v0 + 912);
        while (1)
        {
          if ((v20 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_103:
            __break(1u);
            goto LABEL_104;
          }
          if (v20 >= v21)
            goto LABEL_103;
          v24 = *(_QWORD *)(v0 + 920);
          v1 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
          v25 = v19 + v1 + *(_QWORD *)(v23 + 72) * v20;
          *(_QWORD *)(v0 + 432) = v20 + 1;
          sub_10001DE2C(v25, v24, type metadata accessor for HeadlineViewModel);
          v2 = *(_QWORD *)(v22 + 104);
          sub_10001DF70(v24, type metadata accessor for HeadlineViewModel);
          v19 = *(_QWORD *)(v0 + 424);
          if (v2 != 1)
            break;
          v20 = *(_QWORD *)(v0 + 432);
          v21 = *(_QWORD *)(v19 + 16);
          if (v20 == v21)
            goto LABEL_9;
        }
        v26 = *(_QWORD *)(v0 + 1032);
        v27 = *(_QWORD *)(v0 + 928);
        v28 = swift_bridgeObjectRelease(v19);
        if (v17(v26, 1, v27, v28))
        {
          v29 = 0;
          v30 = _swiftEmptyArrayStorage;
          v31 = (char *)_swiftEmptyArrayStorage + v1;
          v32 = 1;
        }
        else
        {
          v18(*(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 1032), *(_QWORD *)(v0 + 928));
          v30 = sub_100085AC4(3, (uint64_t (*)(_QWORD))sub_100042D9C, (uint64_t (*)(_QWORD *))sub_10001DDC4);
        }
        v33 = *(_QWORD *)(v0 + 1032);
        v34 = *(_QWORD *)(v0 + 1016);
        v35 = *(_QWORD *)(v0 + 904);
        *(_QWORD *)(v0 + 256) = v30;
        *(_QWORD *)(v0 + 264) = v31;
        *(_QWORD *)(v0 + 272) = v29;
        *(_QWORD *)(v0 + 280) = v32;
        sub_10008ED18(0);
        v37 = v36;
        v38 = sub_100003D3C(&qword_1001163C0, (uint64_t (*)(uint64_t))sub_10008ED18, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
        NonEmpty.init<A, B>(_:)(v0 + 256, v35, v37, v38);
        sub_10008ED34(v34, v33);
      }
    }
  }
  v39 = *(_QWORD *)(v0 + 1008);
  v40 = *(_QWORD *)(v0 + 936);
  v41 = *(_QWORD *)(v0 + 928);
  sub_10001DE2C(*(_QWORD *)(v0 + 1032), v39, (uint64_t (*)(_QWORD))sub_10001D6B0);
  v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  v43 = v42(v39, 1, v41);
  sub_10001DF70(v39, (uint64_t (*)(_QWORD))sub_10001D6B0);
  if (v43 == 1)
  {
    v44 = *(_QWORD *)(v0 + 1304);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1392))(*(_QWORD *)(v0 + 1064), *(_QWORD *)(v0 + 1072), *(_QWORD *)(v0 + 1048));
    v45 = sub_100085AC4(v44, (uint64_t (*)(_QWORD))sub_10008EA6C, (uint64_t (*)(_QWORD *))sub_10008ED78);
    v47 = v46;
    v49 = v48;
    v51 = v50;
    if ((v50 & 1) != 0)
    {
      v56 = type metadata accessor for __ContiguousArrayStorageBase(0);
      v58 = swift_unknownObjectRetain_n(v57);
      v59 = (_QWORD *)swift_dynamicCastClass(v58, v56);
      if (!v59)
      {
        swift_unknownObjectRelease(v45);
        v59 = _swiftEmptyArrayStorage;
      }
      v60 = v59[2];
      v61 = swift_release(v59);
      if (__OFSUB__(v51 >> 1, v49))
      {
        __break(1u);
      }
      else
      {
        v61 = (uint64_t)v45;
        if (v60 == (v51 >> 1) - v49)
        {
          v52 = (_QWORD *)swift_dynamicCastClass(v45, v56);
          if (!v52)
          {
            swift_unknownObjectRelease(v45);
            v52 = _swiftEmptyArrayStorage;
          }
          goto LABEL_26;
        }
      }
      swift_unknownObjectRelease(v61);
    }
    v52 = sub_10007F5DC((uint64_t)v45, v47, v49, v51);
LABEL_26:
    v62 = *(_QWORD *)(v0 + 1048);
    swift_unknownObjectRelease(v45);
    *(_QWORD *)(v0 + 552) = v52;
    v63 = v0 + 552;
    v64 = v62;
    goto LABEL_34;
  }
  v53 = *(_QWORD *)(v0 + 1424);
  v54 = *(_QWORD *)(v0 + 1400);
  if ((v53 & 1) != 0)
  {
    v65 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v67 = swift_unknownObjectRetain_n(v66);
    v68 = (_QWORD *)swift_dynamicCastClass(v67, v65);
    if (!v68)
    {
      swift_unknownObjectRelease(v54);
      v53 = *(_QWORD *)(v0 + 1424);
      v68 = _swiftEmptyArrayStorage;
    }
    v69 = *(_QWORD *)(v0 + 1416);
    v70 = v68[2];
    swift_release(v68);
    v71 = (v53 >> 1) - v69;
    if (__OFSUB__(v53 >> 1, v69))
    {
      __break(1u);
    }
    else
    {
      v53 = *(_QWORD *)(v0 + 1400);
      if (v70 == v71)
      {
        v55 = (_QWORD *)swift_dynamicCastClass(*(_QWORD *)(v0 + 1400), v65);
        if (!v55)
        {
          swift_unknownObjectRelease(v53);
          v55 = _swiftEmptyArrayStorage;
        }
        goto LABEL_33;
      }
    }
    swift_unknownObjectRelease(v53);
    v53 = *(_QWORD *)(v0 + 1424);
    v54 = *(_QWORD *)(v0 + 1400);
  }
  else
  {
    swift_unknownObjectRetain(*(_QWORD *)(v0 + 1400));
  }
  v55 = sub_10007F5DC(v54, *(_QWORD *)(v0 + 1408), *(_QWORD *)(v0 + 1416), v53);
LABEL_33:
  v72 = *(_QWORD *)(v0 + 1048);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 1400));
  *(_QWORD *)(v0 + 616) = v55;
  v63 = v0 + 616;
  v64 = v72;
LABEL_34:
  NonEmpty.rawElements.setter(v63, v64);
  v73 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 1376))(*(_QWORD *)(v0 + 1144), *(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 1104));
  v17 = (unsigned int (*)(uint64_t, uint64_t, uint64_t, __n128))Logger.logObject.getter(v73);
  LOBYTE(v18) = static os_log_type_t.default.getter(v74);
  if (os_log_type_enabled((os_log_t)v17, (os_log_type_t)v18))
  {
    v260 = v43;
    v244 = (_QWORD *)(v0 + 440);
    v75 = *(_QWORD *)(v0 + 1032);
    v76 = *(_QWORD *)(v0 + 928);
    v248 = v0 + 608;
    v252 = v0 + 616;
    v23 = swift_slowAlloc(32, -1);
    v1 = swift_slowAlloc(32, -1);
    v266 = v1;
    *(_DWORD *)v23 = 134218498;
    swift_beginAccess(v75, v0 + 336, 0, 0);
    v77 = 0;
    if (!v42(v75, 1, v76))
    {
      v78 = *(_QWORD *)(v0 + 944);
      v79 = *(_QWORD *)(v0 + 936);
      v80 = *(_QWORD *)(v0 + 928);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v79 + 16))(v78, *(_QWORD *)(v0 + 1032), v80);
      v77 = NonEmpty.count.getter(v80);
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
    }
    v81 = *(_QWORD *)(v0 + 1072);
    v82 = *(_QWORD *)(v0 + 1048);
    *(_QWORD *)(v0 + 576) = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 576, v0 + 584, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2048;
    swift_beginAccess(v81, v0 + 384, 0, 0);
    *(_QWORD *)(v0 + 592) = NonEmpty.count.getter(v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 592, v0 + 600, v23 + 14, v23 + 22);
    *(_WORD *)(v23 + 22) = 2080;
    v2 = v23 + 24;
    if (qword_100111468 != -1)
LABEL_104:
      swift_once(&qword_100111468, sub_10002DFB0);
    v83 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1384);
    v84 = *(_QWORD *)(v0 + 1144);
    v85 = *(_QWORD *)(v0 + 1104);
    TaskLocal.get()(v244);
    v86 = *(_QWORD *)(v0 + 448);
    *(_QWORD *)(v0 + 608) = sub_10007ECFC(*(_QWORD *)(v0 + 440), v86, (uint64_t *)&v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v248, v252, v2, v23 + 32);
    swift_bridgeObjectRelease(v86);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v17, (os_log_type_t)v18, "Fetched %ld headlines for %ld stocks, id=%s", (uint8_t *)v23, 0x20u);
    swift_arrayDestroy(v1, 1, &type metadata for Any[8]);
    swift_slowDealloc(v1, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v87 = v83(v84, v85);
    v43 = v260;
  }
  else
  {
    v88 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1384);
    v89 = *(_QWORD *)(v0 + 1144);
    v90 = *(_QWORD *)(v0 + 1104);

    v87 = v88(v89, v90);
  }
  v91 = *(_QWORD *)(v0 + 744);
  v92 = *(unsigned __int8 *)(v91 + 16);
  if (v92 == 1)
  {
    v93 = *(uint64_t **)(v0 + 1096);
    v94 = v93[1];
    v261 = *v93;
    swift_bridgeObjectRetain(v94);
  }
  else
  {
    v261 = 0;
    v94 = 0;
  }
  v95 = *(_DWORD *)(v0 + 1464);
  v96 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1328);
  v97 = *(_QWORD *)(v0 + 1216);
  v98 = *(_QWORD *)(v0 + 1200);
  v99 = *(unsigned __int8 *)(v91 + 17);
  TimelineProviderContext.family.getter(v87);
  v100 = v96(v97, v98);
  v253 = v99;
  if (v100 == v95)
  {
    v241 = 3;
    if (v43 == 1)
      v101 = v99;
    else
      v101 = 3;
LABEL_47:
    v249 = v101;
    v245 = 1;
    goto LABEL_48;
  }
  if (v100 != *(_DWORD *)(v0 + 1468))
  {
    if (v100 == *(_DWORD *)(v0 + 1472))
    {
      if (v99)
        v165 = 2;
      else
        v165 = 1;
      if (v99)
        v166 = 1;
      else
        v166 = 2;
      if (v43 == 1)
        v167 = v165;
      else
        v167 = 2;
      v168 = 6;
      if (v43 != 1)
        v168 = 3;
      v241 = v168;
      v245 = v167;
      if (v43 != 1)
        v166 = 3;
      v249 = v166;
      v227 = v94;
      goto LABEL_49;
    }
    if (v100 != *(_DWORD *)(v0 + 1476))
    {
      v191 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 1312);
      v192 = *(_QWORD *)(v0 + 1272);
      v193 = *(_QWORD *)(v0 + 1200);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 888) + 16))(*(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 880));
      v266 = 0;
      v267 = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v194._object = (void *)0x80000001000E67F0;
      v194._countAndFlagsBits = 0xD000000000000030;
      String.append(_:)(v194);
      TimelineProviderContext.family.getter(v195);
      v196 = sub_100003D3C(&qword_100112720, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
      v197._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v193, v196);
      object = v197._object;
      String.append(_:)(v197);
      v199 = swift_bridgeObjectRelease(object);
      v191(v192, v193, v199);
      v200._countAndFlagsBits = 11815;
      v200._object = (void *)0xE200000000000000;
      String.append(_:)(v200);
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v266, v267, "StocksWidget/OverviewTimelineProvider.swift", 43, 2, 294, 0);
    }
    v241 = *(_QWORD *)(v0 + 1304);
    v101 = 3;
    goto LABEL_47;
  }
  v122 = 1;
  if (v99)
    v123 = 1;
  else
    v123 = 2;
  if (v99)
    v122 = 2;
  v124 = 2;
  if (((v43 == 1) & v92) == 0)
    v124 = 3;
  if (v43 == 1)
  {
    v241 = v124;
    v245 = v122;
    v249 = v123;
    v227 = v94;
    goto LABEL_49;
  }
  v245 = 2;
  v249 = 3;
  v241 = 3;
LABEL_48:
  swift_bridgeObjectRelease(v94);
  v261 = 0;
  v227 = 0;
LABEL_49:
  v102 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1392);
  v238 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1376);
  v229 = *(_QWORD *)(v0 + 1136);
  v232 = *(_QWORD *)(v0 + 1104);
  v214 = *(_QWORD *)(v0 + 1080);
  v216 = *(_QWORD *)(v0 + 1096);
  v103 = *(_QWORD *)(v0 + 1072);
  v104 = *(_QWORD *)(v0 + 1064);
  v235 = *(_QWORD *)(v0 + 1056);
  v105 = *(_QWORD *)(v0 + 1048);
  v218 = *(_QWORD *)(v0 + 1032);
  v106 = *(char **)(v0 + 872);
  v107 = *(int **)(v0 + 864);
  v108 = *(_QWORD *)(v0 + 856);
  v221 = *(_QWORD *)(v0 + 848);
  v223 = *(_QWORD *)(v0 + 840);
  v225 = *(_QWORD *)(v0 + 760);
  swift_beginAccess(v103, v0 + 312, 0, 0);
  v102(v104, v103, v105);
  v109 = swift_task_alloc(32);
  *(_BYTE *)(v109 + 16) = v249;
  v110 = type metadata accessor for TickerCellViewModel(0);
  NonEmpty.map<A>(_:)(sub_10008ED00, v109, v105, v110);
  swift_task_dealloc(v109);
  v236 = *(void (**)(uint64_t, uint64_t))(v235 + 8);
  v236(v104, v105);
  v111 = v216 + *(int *)(v214 + 24);
  v112 = &v106[v107[7]];
  v113 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(v112, v111, v113);
  swift_beginAccess(v218, v0 + 360, 0, 0);
  sub_10001DE2C(v218, (uint64_t)&v106[v107[11]], (uint64_t (*)(_QWORD))sub_10001D6B0);
  *(_QWORD *)v106 = v261;
  *((_QWORD *)v106 + 1) = v227;
  (*(void (**)(char *, uint64_t, uint64_t))(v221 + 32))(&v106[v107[5]], v108, v223);
  v106[v107[6]] = v249;
  *(_QWORD *)&v106[v107[8]] = v241;
  *(_QWORD *)&v106[v107[9]] = v245;
  v106[v107[10]] = v253;
  v114 = v238(v229, v225, v232);
  v115 = Logger.logObject.getter(v114);
  v117 = static os_log_type_t.default.getter(v116);
  if (os_log_type_enabled(v115, v117))
  {
    v118 = (uint8_t *)swift_slowAlloc(12, -1);
    v119 = swift_slowAlloc(32, -1);
    v266 = v119;
    *(_DWORD *)v118 = 136315138;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v256 = *(_QWORD *)(v0 + 1136);
    v262 = *(void (**)(uint64_t, uint64_t))(v0 + 1384);
    v120 = *(_QWORD *)(v0 + 1104);
    TaskLocal.get()((_QWORD *)(v0 + 504));
    v121 = *(_QWORD *)(v0 + 512);
    *(_QWORD *)(v0 + 560) = sub_10007ECFC(*(_QWORD *)(v0 + 504), v121, (uint64_t *)&v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 560, v0 + 568, v118 + 4, v118 + 12);
    swift_bridgeObjectRelease(v121);
    _os_log_impl((void *)&_mh_execute_header, v115, v117, "Successfully created timeline entry, id=%s", v118, 0xCu);
    swift_arrayDestroy(v119, 1, &type metadata for Any[8]);
    swift_slowDealloc(v119, -1, -1);
    swift_slowDealloc(v118, -1, -1);

    v262(v256, v120);
  }
  else
  {
    v125 = *(void (**)(uint64_t, uint64_t))(v0 + 1384);
    v126 = *(_QWORD *)(v0 + 1136);
    v127 = *(_QWORD *)(v0 + 1104);

    v125(v126, v127);
  }
  v128 = *(_QWORD *)(v0 + 1096);
  v129 = *(_QWORD *)(v0 + 872);
  v130 = *(_QWORD *)(v0 + 736);
  sub_10002A7CC(0);
  v233 = v131;
  v132 = v130 + v131[12];
  static Date.now.getter(v131);
  sub_10001DE2C(v129, v132, type metadata accessor for WatchlistOverviewContentViewModel);
  v133 = *(_QWORD *)(v128 + 16);
  v134 = *(_QWORD *)(v133 + 16);
  if (!v134)
  {
    v164 = 0;
    goto LABEL_97;
  }
  v135 = *(_QWORD *)(v0 + 960);
  v257 = *(_QWORD *)(v0 + 792);
  v263 = *(_QWORD *)(v0 + 952);
  v136 = *(_QWORD *)(v0 + 776);
  v137 = v133 + ((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80));
  v254 = enum case for ExchangeStatus.open(_:);
  v250 = *(_QWORD *)(v135 + 72);
  v230 = v133;
  swift_bridgeObjectRetain(v133);
  while (1)
  {
    v141 = *(_QWORD *)(v0 + 968);
    v142 = *(_QWORD *)(v0 + 808);
    sub_10001DE2C(v137, v141, type metadata accessor for WidgetStock);
    sub_10001DE2C(v141 + *(int *)(v263 + 20), v142, (uint64_t (*)(_QWORD))sub_10001D694);
    v143 = type metadata accessor for WidgetQuote(0);
    v144 = *(_QWORD *)(v143 - 8);
    v145 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 48))(v142, 1, v143);
    v146 = *(_QWORD *)(v0 + 832);
    v147 = *(_QWORD *)(v0 + 808);
    v148 = *(_QWORD *)(v0 + 768);
    if ((_DWORD)v145 == 1)
    {
      sub_10001DF70(*(_QWORD *)(v0 + 808), (uint64_t (*)(_QWORD))sub_10001D694);
      v149 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v136 + 56);
      v149(v146, 1, 1, v148);
    }
    else
    {
      WidgetQuote.exchangeStatus.getter(v145);
      (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v147, v143);
      v149 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v136 + 56);
      v149(v146, 0, 1, v148);
    }
    v150 = *(_QWORD *)(v0 + 832);
    v151 = *(_QWORD *)(v0 + 824);
    v152 = *(_QWORD *)(v0 + 800);
    v153 = *(_QWORD *)(v0 + 768);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v136 + 104))(v151, v254, v153);
    v149(v151, 0, 1, v153);
    v154 = v152 + *(int *)(v257 + 48);
    sub_10001DE2C(v150, v152, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DE2C(v151, v154, (uint64_t (*)(_QWORD))sub_100053D50);
    v155 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48);
    if (v155(v152, 1, v153) == 1)
      break;
    v156 = *(_QWORD *)(v0 + 768);
    sub_10001DE2C(*(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 816), (uint64_t (*)(_QWORD))sub_100053D50);
    if (v155(v154, 1, v156) == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(v136 + 8))(*(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 768));
      goto LABEL_67;
    }
    v242 = *(_QWORD *)(v0 + 832);
    v246 = *(_QWORD *)(v0 + 968);
    v239 = *(_QWORD *)(v0 + 824);
    v157 = *(_QWORD *)(v0 + 816);
    v158 = *(_QWORD *)(v0 + 800);
    v159 = *(_QWORD *)(v0 + 784);
    v160 = *(_QWORD *)(v0 + 768);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v136 + 32))(v159, v154, v160);
    v161 = sub_100003D3C(&qword_1001146D8, (uint64_t (*)(uint64_t))&type metadata accessor for ExchangeStatus, (uint64_t)&protocol conformance descriptor for ExchangeStatus);
    v162 = dispatch thunk of static Equatable.== infix(_:_:)(v157, v159, v160, v161);
    v163 = *(void (**)(uint64_t, uint64_t))(v136 + 8);
    v163(v157, v160);
    v163(v159, v160);
    sub_10001DF70(v158, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DF70(v239, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DF70(v242, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DF70(v246, type metadata accessor for WidgetStock);
    if ((v162 & 1) != 0)
      goto LABEL_95;
LABEL_68:
    v137 += v250;
    if (!--v134)
    {
      v164 = 0;
      goto LABEL_96;
    }
  }
  if (v155(v154, 1, *(_QWORD *)(v0 + 768)) != 1)
  {
LABEL_67:
    v138 = *(_QWORD *)(v0 + 968);
    v139 = *(_QWORD *)(v0 + 832);
    v140 = *(_QWORD *)(v0 + 824);
    sub_10001DF70(*(_QWORD *)(v0 + 800), (uint64_t (*)(_QWORD))sub_100053CF0);
    sub_10001DF70(v140, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DF70(v139, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DF70(v138, type metadata accessor for WidgetStock);
    goto LABEL_68;
  }
  v169 = *(_QWORD *)(v0 + 968);
  v170 = *(_QWORD *)(v0 + 832);
  v171 = *(_QWORD *)(v0 + 824);
  sub_10001DF70(*(_QWORD *)(v0 + 800), (uint64_t (*)(_QWORD))sub_100053D50);
  sub_10001DF70(v171, (uint64_t (*)(_QWORD))sub_100053D50);
  sub_10001DF70(v170, (uint64_t (*)(_QWORD))sub_100053D50);
  sub_10001DF70(v169, type metadata accessor for WidgetStock);
LABEL_95:
  v164 = 1;
LABEL_96:
  swift_bridgeObjectRelease(v230);
LABEL_97:
  v172 = *(_QWORD *)(v0 + 1192);
  v173 = *(_QWORD *)(v0 + 1096);
  v258 = *(_QWORD *)(v0 + 1048);
  v264 = *(_QWORD *)(v0 + 1072);
  v174 = *(_QWORD *)(v0 + 1032);
  v175 = *(_QWORD *)(v0 + 872);
  v176 = *(_QWORD *)(v0 + 736);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 1400));
  v177 = v233[16];
  v178 = v233[20];
  v179 = v233[24];
  sub_10001DF70(v175, type metadata accessor for WatchlistOverviewContentViewModel);
  sub_10001DF70(v173, type metadata accessor for WidgetWatchlist);
  sub_10001DF70(v172, (uint64_t (*)(_QWORD))sub_10008EAC8);
  *(_BYTE *)(v176 + v177) = v164;
  *(_BYTE *)(v176 + v178) = 0;
  *(_BYTE *)(v176 + v179) = 0;
  v180 = type metadata accessor for OverviewTimelineEntry(0);
  swift_storeEnumTagMultiPayload(v176, v180, 1);
  sub_10001DF70(v174, (uint64_t (*)(_QWORD))sub_10001D6B0);
  v236(v264, v258);
  v181 = *(_QWORD *)(v0 + 1272);
  v182 = *(_QWORD *)(v0 + 1264);
  v183 = *(_QWORD *)(v0 + 1256);
  v184 = *(_QWORD *)(v0 + 1248);
  v185 = *(_QWORD *)(v0 + 1240);
  v186 = *(_QWORD *)(v0 + 1232);
  v187 = *(_QWORD *)(v0 + 1224);
  v188 = *(_QWORD *)(v0 + 1216);
  v189 = *(_QWORD *)(v0 + 1192);
  v201 = *(_QWORD *)(v0 + 1184);
  v202 = *(_QWORD *)(v0 + 1176);
  v203 = *(_QWORD *)(v0 + 1168);
  v204 = *(_QWORD *)(v0 + 1160);
  v205 = *(_QWORD *)(v0 + 1152);
  v206 = *(_QWORD *)(v0 + 1144);
  v207 = *(_QWORD *)(v0 + 1136);
  v208 = *(_QWORD *)(v0 + 1128);
  v209 = *(_QWORD *)(v0 + 1120);
  v210 = *(_QWORD *)(v0 + 1096);
  v211 = *(_QWORD *)(v0 + 1072);
  v212 = *(_QWORD *)(v0 + 1064);
  v213 = *(_QWORD *)(v0 + 1040);
  v215 = *(_QWORD *)(v0 + 1032);
  v217 = *(_QWORD *)(v0 + 1024);
  v219 = *(_QWORD *)(v0 + 1016);
  v220 = *(_QWORD *)(v0 + 1008);
  v222 = *(_QWORD *)(v0 + 1000);
  v224 = *(_QWORD *)(v0 + 976);
  v226 = *(_QWORD *)(v0 + 968);
  v228 = *(_QWORD *)(v0 + 944);
  v231 = *(_QWORD *)(v0 + 920);
  v234 = *(_QWORD *)(v0 + 896);
  v237 = *(_QWORD *)(v0 + 872);
  v240 = *(_QWORD *)(v0 + 856);
  v243 = *(_QWORD *)(v0 + 832);
  v247 = *(_QWORD *)(v0 + 824);
  v251 = *(_QWORD *)(v0 + 816);
  v255 = *(_QWORD *)(v0 + 808);
  v259 = *(_QWORD *)(v0 + 800);
  v265 = *(_QWORD *)(v0 + 784);
  sub_100007164((_QWORD *)(v0 + 136));
  sub_100007164((_QWORD *)(v0 + 16));
  swift_task_dealloc(v181);
  swift_task_dealloc(v182);
  swift_task_dealloc(v183);
  swift_task_dealloc(v184);
  swift_task_dealloc(v185);
  swift_task_dealloc(v186);
  swift_task_dealloc(v187);
  swift_task_dealloc(v188);
  swift_task_dealloc(v189);
  swift_task_dealloc(v201);
  swift_task_dealloc(v202);
  swift_task_dealloc(v203);
  swift_task_dealloc(v204);
  swift_task_dealloc(v205);
  swift_task_dealloc(v206);
  swift_task_dealloc(v207);
  swift_task_dealloc(v208);
  swift_task_dealloc(v209);
  swift_task_dealloc(v210);
  swift_task_dealloc(v211);
  swift_task_dealloc(v212);
  swift_task_dealloc(v213);
  swift_task_dealloc(v215);
  swift_task_dealloc(v217);
  swift_task_dealloc(v219);
  swift_task_dealloc(v220);
  swift_task_dealloc(v222);
  swift_task_dealloc(v224);
  swift_task_dealloc(v226);
  swift_task_dealloc(v228);
  swift_task_dealloc(v231);
  swift_task_dealloc(v234);
  swift_task_dealloc(v237);
  swift_task_dealloc(v240);
  swift_task_dealloc(v243);
  swift_task_dealloc(v247);
  swift_task_dealloc(v251);
  swift_task_dealloc(v255);
  swift_task_dealloc(v259);
  swift_task_dealloc(v265);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008BA4C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  __n128 v5;
  void (*v6)(_QWORD, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(uint64_t, uint64_t, uint64_t);
  unsigned int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  __n128 v85;
  os_log_type_t v86;
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t *v108;
  uint64_t v109;
  int v110;
  uint64_t (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  char v116;
  void (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  __n128 v131;
  os_log_type_t v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  void (*v140)(uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int (*v170)(uint64_t, uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  void (*v178)(uint64_t, uint64_t);
  char v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void (*v206)(uint64_t, uint64_t, __n128);
  uint64_t v207;
  uint64_t v208;
  Swift::String v209;
  uint64_t v210;
  uint64_t v211;
  Swift::String v212;
  void *object;
  __n128 v214;
  Swift::String v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int *v247;
  uint64_t v248;
  uint64_t v249;
  void (*v250)(uint64_t, uint64_t);
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t (*v255)(uint64_t, uint64_t, uint64_t);
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t (*v269)(uint64_t, uint64_t);
  char v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void (*v277)(uint64_t, uint64_t);
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;

  v2 = *(_QWORD *)(v0 + 1448);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1376))(*(_QWORD *)(v0 + 1152), *(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 1104));
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  LOBYTE(v6) = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v4, (os_log_type_t)v6))
  {
    v261 = (_QWORD *)(v0 + 536);
    v275 = v0 + 656;
    v7 = *(_QWORD *)(v0 + 1448);
    v8 = swift_slowAlloc(22, -1);
    v9 = (unsigned int (*)(uint64_t, uint64_t, uint64_t, __n128))swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v281 = v10;
    *(_DWORD *)v8 = 138412546;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 640) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 648, v8 + 4, v8 + 12);
    *(_QWORD *)v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    *(_WORD *)(v8 + 12) = 2080;
    v1 = v8 + 14;
    if (qword_100111468 != -1)
LABEL_109:
      swift_once(&qword_100111468, sub_10002DFB0);
    v12 = *(_QWORD *)(v0 + 1448);
    v265 = *(_QWORD *)(v0 + 1152);
    v269 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1384);
    v13 = *(_QWORD *)(v0 + 1104);
    TaskLocal.get()(v261);
    v14 = *(_QWORD *)(v0 + 544);
    *(_QWORD *)(v0 + 656) = sub_10007ECFC(*(_QWORD *)(v0 + 536), v14, &v281);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v275, v0 + 664, v1, v8 + 22);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v4, (os_log_type_t)v6, "Fetching headlines failed with error=%@, id=%s", (uint8_t *)v8, 0x16u);
    sub_10000EDE8(0, &qword_100111EC0, (uint64_t (*)(uint64_t))sub_1000071A8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    swift_arrayDestroy(v9, 1, v15);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, &type metadata for Any[8]);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v12);
    v16 = v269(v265, v13);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 1448);
    v18 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1384);
    v19 = *(_QWORD *)(v0 + 1152);
    v20 = *(_QWORD *)(v0 + 1104);
    swift_errorRelease(v17);
    swift_errorRelease(v17);
    swift_errorRelease(v17);

    v16 = v18(v19, v20);
  }
  v21 = *(_DWORD *)(v0 + 1472);
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1328);
  v23 = *(void (**)(uint64_t, uint64_t))(v0 + 1312);
  v24 = *(_QWORD *)(v0 + 1224);
  v25 = *(_QWORD *)(v0 + 1200);
  TimelineProviderContext.family.getter(v16);
  v26 = v22(v24, v25);
  v23(v24, v25);
  if (v26 == v21)
  {
    v27 = *(_QWORD *)(v0 + 1032);
    v28 = *(_QWORD *)(v0 + 936);
    v29 = *(_QWORD *)(v0 + 928);
    v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v28 + 48);
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v9)(v27, 1, v29))
    {
      v8 = v0 + 424;
      v6 = *(void (**)(_QWORD, uint64_t, uint64_t))(v28 + 16);
      v6(*(_QWORD *)(v0 + 944), v27, v29);
      sub_100003D3C(&qword_1001163B0, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t)&protocol conformance descriptor for NonEmpty<A>);
      dispatch thunk of Sequence.makeIterator()(v29);
      v30 = *(_QWORD *)(v0 + 424);
      v31 = *(_QWORD *)(v0 + 432);
      v32 = *(_QWORD *)(v30 + 16);
      if (v31 == v32)
      {
LABEL_13:
        swift_bridgeObjectRelease(v30);
      }
      else
      {
        v4 = (v0 + 256);
        v10 = *(_QWORD *)(v0 + 920);
        v33 = *(_QWORD *)(v0 + 912);
        while (1)
        {
          if ((v31 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_108:
            __break(1u);
            goto LABEL_109;
          }
          if (v31 >= v32)
            goto LABEL_108;
          v8 = *(_QWORD *)(v0 + 920);
          v1 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
          v34 = v30 + v1 + *(_QWORD *)(v33 + 72) * v31;
          *(_QWORD *)(v0 + 432) = v31 + 1;
          sub_10001DE2C(v34, v8, type metadata accessor for HeadlineViewModel);
          v35 = *(_QWORD *)(v10 + 104);
          sub_10001DF70(v8, type metadata accessor for HeadlineViewModel);
          v30 = *(_QWORD *)(v0 + 424);
          if (v35 != 1)
            break;
          v31 = *(_QWORD *)(v0 + 432);
          v32 = *(_QWORD *)(v30 + 16);
          if (v31 == v32)
            goto LABEL_13;
        }
        v36 = *(_QWORD *)(v0 + 1032);
        v37 = *(_QWORD *)(v0 + 928);
        v38 = swift_bridgeObjectRelease(v30);
        if (v9(v36, 1, v37, v38))
        {
          v39 = 0;
          v40 = _swiftEmptyArrayStorage;
          v41 = (char *)_swiftEmptyArrayStorage + v1;
          v42 = 1;
        }
        else
        {
          v6(*(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 1032), *(_QWORD *)(v0 + 928));
          v40 = sub_100085AC4(3, (uint64_t (*)(_QWORD))sub_100042D9C, (uint64_t (*)(_QWORD *))sub_10001DDC4);
        }
        v43 = *(_QWORD *)(v0 + 1032);
        v44 = *(_QWORD *)(v0 + 1016);
        v45 = *(_QWORD *)(v0 + 904);
        *(_QWORD *)(v0 + 256) = v40;
        *(_QWORD *)(v0 + 264) = v41;
        *(_QWORD *)(v0 + 272) = v39;
        *(_QWORD *)(v0 + 280) = v42;
        sub_10008ED18(0);
        v47 = v46;
        v48 = sub_100003D3C(&qword_1001163C0, (uint64_t (*)(uint64_t))sub_10008ED18, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
        NonEmpty.init<A, B>(_:)(v0 + 256, v45, v47, v48);
        sub_10008ED34(v44, v43);
      }
    }
  }
  v49 = *(_QWORD *)(v0 + 1008);
  v50 = *(_QWORD *)(v0 + 936);
  v51 = *(_QWORD *)(v0 + 928);
  sub_10001DE2C(*(_QWORD *)(v0 + 1032), v49, (uint64_t (*)(_QWORD))sub_10001D6B0);
  v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  v53 = v52(v49, 1, v51);
  sub_10001DF70(v49, (uint64_t (*)(_QWORD))sub_10001D6B0);
  if (v53 == 1)
  {
    v54 = *(_QWORD *)(v0 + 1304);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1392))(*(_QWORD *)(v0 + 1064), *(_QWORD *)(v0 + 1072), *(_QWORD *)(v0 + 1048));
    v55 = sub_100085AC4(v54, (uint64_t (*)(_QWORD))sub_10008EA6C, (uint64_t (*)(_QWORD *))sub_10008ED78);
    v57 = v56;
    v59 = v58;
    v61 = v60;
    if ((v60 & 1) != 0)
    {
      v66 = type metadata accessor for __ContiguousArrayStorageBase(0);
      v68 = swift_unknownObjectRetain_n(v67);
      v69 = (_QWORD *)swift_dynamicCastClass(v68, v66);
      if (!v69)
      {
        swift_unknownObjectRelease(v55);
        v69 = _swiftEmptyArrayStorage;
      }
      v70 = v69[2];
      v71 = swift_release(v69);
      if (__OFSUB__(v61 >> 1, v59))
      {
        __break(1u);
      }
      else
      {
        v71 = (uint64_t)v55;
        if (v70 == (v61 >> 1) - v59)
        {
          v62 = (_QWORD *)swift_dynamicCastClass(v55, v66);
          if (!v62)
          {
            swift_unknownObjectRelease(v55);
            v62 = _swiftEmptyArrayStorage;
          }
          goto LABEL_30;
        }
      }
      swift_unknownObjectRelease(v71);
    }
    v62 = sub_10007F5DC((uint64_t)v55, v57, v59, v61);
LABEL_30:
    v72 = *(_QWORD *)(v0 + 1048);
    swift_unknownObjectRelease(v55);
    *(_QWORD *)(v0 + 552) = v62;
    v73 = v0 + 552;
    v74 = v72;
    goto LABEL_38;
  }
  v63 = *(_QWORD *)(v0 + 1424);
  v64 = *(_QWORD *)(v0 + 1400);
  if ((v63 & 1) != 0)
  {
    v75 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v77 = swift_unknownObjectRetain_n(v76);
    v78 = (_QWORD *)swift_dynamicCastClass(v77, v75);
    if (!v78)
    {
      swift_unknownObjectRelease(v64);
      v63 = *(_QWORD *)(v0 + 1424);
      v78 = _swiftEmptyArrayStorage;
    }
    v79 = *(_QWORD *)(v0 + 1416);
    v80 = v78[2];
    swift_release(v78);
    v81 = (v63 >> 1) - v79;
    if (__OFSUB__(v63 >> 1, v79))
    {
      __break(1u);
    }
    else
    {
      v63 = *(_QWORD *)(v0 + 1400);
      if (v80 == v81)
      {
        v65 = (_QWORD *)swift_dynamicCastClass(*(_QWORD *)(v0 + 1400), v75);
        if (!v65)
        {
          swift_unknownObjectRelease(v63);
          v65 = _swiftEmptyArrayStorage;
        }
        goto LABEL_37;
      }
    }
    swift_unknownObjectRelease(v63);
    v63 = *(_QWORD *)(v0 + 1424);
    v64 = *(_QWORD *)(v0 + 1400);
  }
  else
  {
    swift_unknownObjectRetain(*(_QWORD *)(v0 + 1400));
  }
  v65 = sub_10007F5DC(v64, *(_QWORD *)(v0 + 1408), *(_QWORD *)(v0 + 1416), v63);
LABEL_37:
  v82 = *(_QWORD *)(v0 + 1048);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 1400));
  *(_QWORD *)(v0 + 616) = v65;
  v73 = v0 + 616;
  v74 = v82;
LABEL_38:
  NonEmpty.rawElements.setter(v73, v74);
  v83 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 1376))(*(_QWORD *)(v0 + 1144), *(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 1104));
  v84 = Logger.logObject.getter(v83);
  v86 = static os_log_type_t.default.getter(v85);
  if (os_log_type_enabled(v84, v86))
  {
    v87 = v52;
    v88 = *(_QWORD *)(v0 + 1032);
    v89 = *(_QWORD *)(v0 + 928);
    v90 = swift_slowAlloc(32, -1);
    v91 = swift_slowAlloc(32, -1);
    v281 = v91;
    *(_DWORD *)v90 = 134218498;
    swift_beginAccess(v88, v0 + 336, 0, 0);
    v92 = 0;
    if (!v87(v88, 1, v89))
    {
      v93 = *(_QWORD *)(v0 + 944);
      v94 = *(_QWORD *)(v0 + 936);
      v95 = *(_QWORD *)(v0 + 928);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v94 + 16))(v93, *(_QWORD *)(v0 + 1032), v95);
      v92 = NonEmpty.count.getter(v95);
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v95);
    }
    v96 = *(_QWORD *)(v0 + 1072);
    v97 = *(_QWORD *)(v0 + 1048);
    *(_QWORD *)(v0 + 576) = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 576, v0 + 584, v90 + 4, v90 + 12);
    *(_WORD *)(v90 + 12) = 2048;
    swift_beginAccess(v96, v0 + 384, 0, 0);
    *(_QWORD *)(v0 + 592) = NonEmpty.count.getter(v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 592, v0 + 600, v90 + 14, v90 + 22);
    *(_WORD *)(v90 + 22) = 2080;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v98 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1384);
    v99 = *(_QWORD *)(v0 + 1144);
    v100 = *(_QWORD *)(v0 + 1104);
    TaskLocal.get()((_QWORD *)(v0 + 440));
    v101 = *(_QWORD *)(v0 + 448);
    *(_QWORD *)(v0 + 608) = sub_10007ECFC(*(_QWORD *)(v0 + 440), v101, &v281);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 608, v0 + 616, v90 + 24, v90 + 32);
    swift_bridgeObjectRelease(v101);
    _os_log_impl((void *)&_mh_execute_header, v84, v86, "Fetched %ld headlines for %ld stocks, id=%s", (uint8_t *)v90, 0x20u);
    swift_arrayDestroy(v91, 1, &type metadata for Any[8]);
    swift_slowDealloc(v91, -1, -1);
    swift_slowDealloc(v90, -1, -1);

    v102 = v98(v99, v100);
  }
  else
  {
    v103 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1384);
    v104 = *(_QWORD *)(v0 + 1144);
    v105 = *(_QWORD *)(v0 + 1104);

    v102 = v103(v104, v105);
  }
  v106 = *(_QWORD *)(v0 + 744);
  v107 = *(unsigned __int8 *)(v106 + 16);
  if (v107 == 1)
  {
    v108 = *(uint64_t **)(v0 + 1096);
    v109 = v108[1];
    v276 = *v108;
    swift_bridgeObjectRetain(v109);
  }
  else
  {
    v276 = 0;
    v109 = 0;
  }
  v110 = *(_DWORD *)(v0 + 1464);
  v111 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1328);
  v112 = *(_QWORD *)(v0 + 1216);
  v113 = *(_QWORD *)(v0 + 1200);
  v114 = *(unsigned __int8 *)(v106 + 17);
  TimelineProviderContext.family.getter(v102);
  v115 = v111(v112, v113);
  v270 = v114;
  if (v115 == v110)
  {
    v258 = 3;
    if (v53 == 1)
      v116 = v114;
    else
      v116 = 3;
LABEL_52:
    v266 = v116;
    v262 = 1;
    goto LABEL_53;
  }
  if (v115 != *(_DWORD *)(v0 + 1468))
  {
    if (v115 == *(_DWORD *)(v0 + 1472))
    {
      if (v114)
        v180 = 2;
      else
        v180 = 1;
      if (v114)
        v181 = 1;
      else
        v181 = 2;
      if (v53 == 1)
        v182 = v180;
      else
        v182 = 2;
      v183 = 6;
      if (v53 != 1)
        v183 = 3;
      v258 = v183;
      v262 = v182;
      if (v53 != 1)
        v181 = 3;
      v266 = v181;
      v243 = v109;
      goto LABEL_54;
    }
    if (v115 != *(_DWORD *)(v0 + 1476))
    {
      v206 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 1312);
      v207 = *(_QWORD *)(v0 + 1272);
      v208 = *(_QWORD *)(v0 + 1200);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 888) + 16))(*(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 880));
      v281 = 0;
      v282 = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v209._object = (void *)0x80000001000E67F0;
      v209._countAndFlagsBits = 0xD000000000000030;
      String.append(_:)(v209);
      TimelineProviderContext.family.getter(v210);
      v211 = sub_100003D3C(&qword_100112720, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
      v212._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v208, v211);
      object = v212._object;
      String.append(_:)(v212);
      v214 = swift_bridgeObjectRelease(object);
      v206(v207, v208, v214);
      v215._countAndFlagsBits = 11815;
      v215._object = (void *)0xE200000000000000;
      String.append(_:)(v215);
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v281, v282, "StocksWidget/OverviewTimelineProvider.swift", 43, 2, 294, 0);
    }
    v258 = *(_QWORD *)(v0 + 1304);
    v116 = 3;
    goto LABEL_52;
  }
  v137 = 1;
  if (v114)
    v138 = 1;
  else
    v138 = 2;
  if (v114)
    v137 = 2;
  v139 = 2;
  if (((v53 == 1) & v107) == 0)
    v139 = 3;
  if (v53 == 1)
  {
    v258 = v139;
    v262 = v137;
    v266 = v138;
    v243 = v109;
    goto LABEL_54;
  }
  v262 = 2;
  v266 = 3;
  v258 = 3;
LABEL_53:
  swift_bridgeObjectRelease(v109);
  v276 = 0;
  v243 = 0;
LABEL_54:
  v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1392);
  v246 = *(_QWORD *)(v0 + 1136);
  v252 = *(_QWORD *)(v0 + 1104);
  v255 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1376);
  v230 = *(_QWORD *)(v0 + 1080);
  v232 = *(_QWORD *)(v0 + 1096);
  v118 = *(_QWORD *)(v0 + 1072);
  v119 = *(_QWORD *)(v0 + 1064);
  v249 = *(_QWORD *)(v0 + 1056);
  v120 = *(_QWORD *)(v0 + 1048);
  v234 = *(_QWORD *)(v0 + 1032);
  v121 = *(char **)(v0 + 872);
  v122 = *(int **)(v0 + 864);
  v123 = *(_QWORD *)(v0 + 856);
  v237 = *(_QWORD *)(v0 + 848);
  v239 = *(_QWORD *)(v0 + 840);
  v241 = *(_QWORD *)(v0 + 760);
  swift_beginAccess(v118, v0 + 312, 0, 0);
  v117(v119, v118, v120);
  v124 = swift_task_alloc(32);
  *(_BYTE *)(v124 + 16) = v266;
  v125 = type metadata accessor for TickerCellViewModel(0);
  NonEmpty.map<A>(_:)(sub_10008ED00, v124, v120, v125);
  swift_task_dealloc(v124);
  v250 = *(void (**)(uint64_t, uint64_t))(v249 + 8);
  v250(v119, v120);
  v126 = v232 + *(int *)(v230 + 24);
  v127 = &v121[v122[7]];
  v128 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 16))(v127, v126, v128);
  swift_beginAccess(v234, v0 + 360, 0, 0);
  sub_10001DE2C(v234, (uint64_t)&v121[v122[11]], (uint64_t (*)(_QWORD))sub_10001D6B0);
  *(_QWORD *)v121 = v276;
  *((_QWORD *)v121 + 1) = v243;
  (*(void (**)(char *, uint64_t, uint64_t))(v237 + 32))(&v121[v122[5]], v123, v239);
  v121[v122[6]] = v266;
  *(_QWORD *)&v121[v122[8]] = v258;
  *(_QWORD *)&v121[v122[9]] = v262;
  v121[v122[10]] = v270;
  v129 = v255(v246, v241, v252);
  v130 = Logger.logObject.getter(v129);
  v132 = static os_log_type_t.default.getter(v131);
  if (os_log_type_enabled(v130, v132))
  {
    v133 = (uint8_t *)swift_slowAlloc(12, -1);
    v134 = swift_slowAlloc(32, -1);
    v281 = v134;
    *(_DWORD *)v133 = 136315138;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v271 = *(_QWORD *)(v0 + 1136);
    v277 = *(void (**)(uint64_t, uint64_t))(v0 + 1384);
    v135 = *(_QWORD *)(v0 + 1104);
    TaskLocal.get()((_QWORD *)(v0 + 504));
    v136 = *(_QWORD *)(v0 + 512);
    *(_QWORD *)(v0 + 560) = sub_10007ECFC(*(_QWORD *)(v0 + 504), v136, &v281);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 560, v0 + 568, v133 + 4, v133 + 12);
    swift_bridgeObjectRelease(v136);
    _os_log_impl((void *)&_mh_execute_header, v130, v132, "Successfully created timeline entry, id=%s", v133, 0xCu);
    swift_arrayDestroy(v134, 1, &type metadata for Any[8]);
    swift_slowDealloc(v134, -1, -1);
    swift_slowDealloc(v133, -1, -1);

    v277(v271, v135);
  }
  else
  {
    v140 = *(void (**)(uint64_t, uint64_t))(v0 + 1384);
    v141 = *(_QWORD *)(v0 + 1136);
    v142 = *(_QWORD *)(v0 + 1104);

    v140(v141, v142);
  }
  v143 = *(_QWORD *)(v0 + 1096);
  v144 = *(_QWORD *)(v0 + 872);
  v145 = *(_QWORD *)(v0 + 736);
  sub_10002A7CC(0);
  v247 = v146;
  v147 = v145 + v146[12];
  static Date.now.getter(v146);
  sub_10001DE2C(v144, v147, type metadata accessor for WatchlistOverviewContentViewModel);
  v148 = *(_QWORD *)(v143 + 16);
  v149 = *(_QWORD *)(v148 + 16);
  if (!v149)
  {
    v179 = 0;
    goto LABEL_102;
  }
  v150 = *(_QWORD *)(v0 + 960);
  v272 = *(_QWORD *)(v0 + 792);
  v278 = *(_QWORD *)(v0 + 952);
  v151 = *(_QWORD *)(v0 + 776);
  v152 = v148 + ((*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80));
  v267 = enum case for ExchangeStatus.open(_:);
  v263 = *(_QWORD *)(v150 + 72);
  v244 = v148;
  swift_bridgeObjectRetain(v148);
  while (1)
  {
    v156 = *(_QWORD *)(v0 + 968);
    v157 = *(_QWORD *)(v0 + 808);
    sub_10001DE2C(v152, v156, type metadata accessor for WidgetStock);
    sub_10001DE2C(v156 + *(int *)(v278 + 20), v157, (uint64_t (*)(_QWORD))sub_10001D694);
    v158 = type metadata accessor for WidgetQuote(0);
    v159 = *(_QWORD *)(v158 - 8);
    v160 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v159 + 48))(v157, 1, v158);
    v161 = *(_QWORD *)(v0 + 832);
    v162 = *(_QWORD *)(v0 + 808);
    v163 = *(_QWORD *)(v0 + 768);
    if ((_DWORD)v160 == 1)
    {
      sub_10001DF70(*(_QWORD *)(v0 + 808), (uint64_t (*)(_QWORD))sub_10001D694);
      v164 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v151 + 56);
      v164(v161, 1, 1, v163);
    }
    else
    {
      WidgetQuote.exchangeStatus.getter(v160);
      (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v162, v158);
      v164 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v151 + 56);
      v164(v161, 0, 1, v163);
    }
    v165 = *(_QWORD *)(v0 + 832);
    v166 = *(_QWORD *)(v0 + 824);
    v167 = *(_QWORD *)(v0 + 800);
    v168 = *(_QWORD *)(v0 + 768);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v151 + 104))(v166, v267, v168);
    v164(v166, 0, 1, v168);
    v169 = v167 + *(int *)(v272 + 48);
    sub_10001DE2C(v165, v167, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DE2C(v166, v169, (uint64_t (*)(_QWORD))sub_100053D50);
    v170 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48);
    if (v170(v167, 1, v168) == 1)
      break;
    v171 = *(_QWORD *)(v0 + 768);
    sub_10001DE2C(*(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 816), (uint64_t (*)(_QWORD))sub_100053D50);
    if (v170(v169, 1, v171) == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(v151 + 8))(*(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 768));
      goto LABEL_72;
    }
    v256 = *(_QWORD *)(v0 + 832);
    v259 = *(_QWORD *)(v0 + 968);
    v253 = *(_QWORD *)(v0 + 824);
    v172 = *(_QWORD *)(v0 + 816);
    v173 = *(_QWORD *)(v0 + 800);
    v174 = *(_QWORD *)(v0 + 784);
    v175 = *(_QWORD *)(v0 + 768);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 32))(v174, v169, v175);
    v176 = sub_100003D3C(&qword_1001146D8, (uint64_t (*)(uint64_t))&type metadata accessor for ExchangeStatus, (uint64_t)&protocol conformance descriptor for ExchangeStatus);
    v177 = dispatch thunk of static Equatable.== infix(_:_:)(v172, v174, v175, v176);
    v178 = *(void (**)(uint64_t, uint64_t))(v151 + 8);
    v178(v172, v175);
    v178(v174, v175);
    sub_10001DF70(v173, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DF70(v253, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DF70(v256, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DF70(v259, type metadata accessor for WidgetStock);
    if ((v177 & 1) != 0)
      goto LABEL_100;
LABEL_73:
    v152 += v263;
    if (!--v149)
    {
      v179 = 0;
      goto LABEL_101;
    }
  }
  if (v170(v169, 1, *(_QWORD *)(v0 + 768)) != 1)
  {
LABEL_72:
    v153 = *(_QWORD *)(v0 + 968);
    v154 = *(_QWORD *)(v0 + 832);
    v155 = *(_QWORD *)(v0 + 824);
    sub_10001DF70(*(_QWORD *)(v0 + 800), (uint64_t (*)(_QWORD))sub_100053CF0);
    sub_10001DF70(v155, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DF70(v154, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DF70(v153, type metadata accessor for WidgetStock);
    goto LABEL_73;
  }
  v184 = *(_QWORD *)(v0 + 968);
  v185 = *(_QWORD *)(v0 + 832);
  v186 = *(_QWORD *)(v0 + 824);
  sub_10001DF70(*(_QWORD *)(v0 + 800), (uint64_t (*)(_QWORD))sub_100053D50);
  sub_10001DF70(v186, (uint64_t (*)(_QWORD))sub_100053D50);
  sub_10001DF70(v185, (uint64_t (*)(_QWORD))sub_100053D50);
  sub_10001DF70(v184, type metadata accessor for WidgetStock);
LABEL_100:
  v179 = 1;
LABEL_101:
  swift_bridgeObjectRelease(v244);
LABEL_102:
  v187 = *(_QWORD *)(v0 + 1192);
  v188 = *(_QWORD *)(v0 + 1096);
  v273 = *(_QWORD *)(v0 + 1048);
  v279 = *(_QWORD *)(v0 + 1072);
  v189 = *(_QWORD *)(v0 + 1032);
  v190 = *(_QWORD *)(v0 + 872);
  v191 = *(_QWORD *)(v0 + 736);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 1400));
  v192 = v247[16];
  v193 = v247[20];
  v194 = v247[24];
  sub_10001DF70(v190, type metadata accessor for WatchlistOverviewContentViewModel);
  sub_10001DF70(v188, type metadata accessor for WidgetWatchlist);
  sub_10001DF70(v187, (uint64_t (*)(_QWORD))sub_10008EAC8);
  *(_BYTE *)(v191 + v192) = v179;
  *(_BYTE *)(v191 + v193) = 0;
  *(_BYTE *)(v191 + v194) = 0;
  v195 = type metadata accessor for OverviewTimelineEntry(0);
  swift_storeEnumTagMultiPayload(v191, v195, 1);
  sub_10001DF70(v189, (uint64_t (*)(_QWORD))sub_10001D6B0);
  v250(v279, v273);
  v196 = *(_QWORD *)(v0 + 1272);
  v197 = *(_QWORD *)(v0 + 1264);
  v198 = *(_QWORD *)(v0 + 1256);
  v199 = *(_QWORD *)(v0 + 1248);
  v200 = *(_QWORD *)(v0 + 1240);
  v201 = *(_QWORD *)(v0 + 1232);
  v202 = *(_QWORD *)(v0 + 1224);
  v203 = *(_QWORD *)(v0 + 1216);
  v204 = *(_QWORD *)(v0 + 1192);
  v216 = *(_QWORD *)(v0 + 1184);
  v217 = *(_QWORD *)(v0 + 1176);
  v218 = *(_QWORD *)(v0 + 1168);
  v219 = *(_QWORD *)(v0 + 1160);
  v220 = *(_QWORD *)(v0 + 1152);
  v221 = *(_QWORD *)(v0 + 1144);
  v222 = *(_QWORD *)(v0 + 1136);
  v223 = *(_QWORD *)(v0 + 1128);
  v224 = *(_QWORD *)(v0 + 1120);
  v225 = *(_QWORD *)(v0 + 1096);
  v226 = *(_QWORD *)(v0 + 1072);
  v227 = *(_QWORD *)(v0 + 1064);
  v228 = *(_QWORD *)(v0 + 1040);
  v229 = *(_QWORD *)(v0 + 1032);
  v231 = *(_QWORD *)(v0 + 1024);
  v233 = *(_QWORD *)(v0 + 1016);
  v235 = *(_QWORD *)(v0 + 1008);
  v236 = *(_QWORD *)(v0 + 1000);
  v238 = *(_QWORD *)(v0 + 976);
  v240 = *(_QWORD *)(v0 + 968);
  v242 = *(_QWORD *)(v0 + 944);
  v245 = *(_QWORD *)(v0 + 920);
  v248 = *(_QWORD *)(v0 + 896);
  v251 = *(_QWORD *)(v0 + 872);
  v254 = *(_QWORD *)(v0 + 856);
  v257 = *(_QWORD *)(v0 + 832);
  v260 = *(_QWORD *)(v0 + 824);
  v264 = *(_QWORD *)(v0 + 816);
  v268 = *(_QWORD *)(v0 + 808);
  v274 = *(_QWORD *)(v0 + 800);
  v280 = *(_QWORD *)(v0 + 784);
  sub_100007164((_QWORD *)(v0 + 136));
  sub_100007164((_QWORD *)(v0 + 16));
  swift_task_dealloc(v196);
  swift_task_dealloc(v197);
  swift_task_dealloc(v198);
  swift_task_dealloc(v199);
  swift_task_dealloc(v200);
  swift_task_dealloc(v201);
  swift_task_dealloc(v202);
  swift_task_dealloc(v203);
  swift_task_dealloc(v204);
  swift_task_dealloc(v216);
  swift_task_dealloc(v217);
  swift_task_dealloc(v218);
  swift_task_dealloc(v219);
  swift_task_dealloc(v220);
  swift_task_dealloc(v221);
  swift_task_dealloc(v222);
  swift_task_dealloc(v223);
  swift_task_dealloc(v224);
  swift_task_dealloc(v225);
  swift_task_dealloc(v226);
  swift_task_dealloc(v227);
  swift_task_dealloc(v228);
  swift_task_dealloc(v229);
  swift_task_dealloc(v231);
  swift_task_dealloc(v233);
  swift_task_dealloc(v235);
  swift_task_dealloc(v236);
  swift_task_dealloc(v238);
  swift_task_dealloc(v240);
  swift_task_dealloc(v242);
  swift_task_dealloc(v245);
  swift_task_dealloc(v248);
  swift_task_dealloc(v251);
  swift_task_dealloc(v254);
  swift_task_dealloc(v257);
  swift_task_dealloc(v260);
  swift_task_dealloc(v264);
  swift_task_dealloc(v268);
  swift_task_dealloc(v274);
  swift_task_dealloc(v280);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008D01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v8[2] = a7;
  v8[3] = a8;
  v11 = type metadata accessor for OverviewTimelineEntry(0);
  v12 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[4] = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_10011633C);
  v8[5] = v13;
  *v13 = v8;
  v13[1] = sub_10008D0B0;
  return sub_100086740(v12, a5, a6);
}

uint64_t sub_10008D0B0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  return swift_task_switch(sub_10008D104, 0, 0);
}

uint64_t sub_10008D104()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  sub_10001DF70(v1, type metadata accessor for OverviewTimelineEntry);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008D154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v3[19] = a1;
  v6 = type metadata accessor for AppConfiguration(0);
  v3[20] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[21] = v7;
  v3[22] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WatchlistOverviewContentViewModel(0);
  v3[23] = v8;
  v3[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetQuote(0);
  v3[25] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[26] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[27] = swift_task_alloc(v11);
  v3[28] = swift_task_alloc(v11);
  sub_10001D694(0);
  v13 = *(_QWORD *)(v12 - 8);
  v3[29] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[30] = swift_task_alloc(v14);
  v3[31] = swift_task_alloc(v14);
  sub_10001D6B0(0);
  v3[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v3[33] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v3[34] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[35] = swift_task_alloc(v18);
  v3[36] = swift_task_alloc(v18);
  v3[37] = swift_task_alloc(v18);
  v19 = type metadata accessor for TimelineReloadPolicy(0);
  v3[38] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v3[39] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[40] = swift_task_alloc(v21);
  v3[41] = swift_task_alloc(v21);
  sub_10008E860(0);
  v3[42] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D724(0, &qword_100114C78, (uint64_t (*)(uint64_t))sub_10005C908, sub_10005C924, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v3[43] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v3[44] = v24;
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[45] = swift_task_alloc(v25);
  v3[46] = swift_task_alloc(v25);
  v26 = type metadata accessor for OverviewTimelineEntry(0);
  v3[47] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v3[48] = v27;
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[49] = swift_task_alloc(v28);
  v3[50] = swift_task_alloc(v28);
  v29 = swift_task_alloc(v28);
  v3[51] = v29;
  v30 = (_QWORD *)swift_task_alloc(dword_10011633C);
  v3[52] = v30;
  *v30 = v3;
  v30[1] = sub_10008D3D0;
  return sub_100086740(v29, a2, a3);
}

uint64_t sub_10008D3D0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 416));
  return swift_task_switch(sub_10008D424, 0, 0);
}

uint64_t sub_10008D424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 424) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10008D48C, v2, v3);
}

uint64_t sub_10008D48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  swift_release(*(_QWORD *)(v0 + 424));
  v1 = sub_100003AE0(0, (unint64_t *)&unk_100113DA0, (uint64_t)&protocol descriptor for ReloadPolicyProviderType);
  if (qword_100111588 != -1)
    swift_once(&qword_100111588, sub_1000B0BAC);
  sub_10001DB68((uint64_t)qword_100126A08, v0 + 56);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  sub_100007184((_QWORD *)(v0 + 56), v2);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v1, v1, v2, v3);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10001D968((__int128 *)(v0 + 96), v0 + 16);
    sub_100007164((_QWORD *)(v0 + 56));
    return swift_task_switch(sub_10008D584, 0, 0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10008D584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  void (*v128)(uint64_t, uint64_t, __n128);
  uint64_t v129;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 376);
  sub_10001DE2C(*(_QWORD *)(v0 + 408), v1, type metadata accessor for OverviewTimelineEntry);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v2);
  v4 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 272);
  if (EnumCaseMultiPayload == 1)
  {
    sub_10002A7CC(0);
    v8 = *(_BYTE *)(v4 + *(int *)(v7 + 96));
    sub_10001DF70(v4 + *(int *)(v7 + 48), type metadata accessor for WatchlistOverviewContentViewModel);
    v32 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v32(v4, v5);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v0 + 408);
      v10 = *(_QWORD *)(v0 + 384);
      v124 = *(_QWORD *)(v0 + 376);
      v127 = v32;
      v11 = *(_QWORD *)(v0 + 280);
      v12 = *(_QWORD *)(v0 + 288);
      v13 = *(_QWORD *)(v0 + 264);
      v14 = *(_QWORD *)(v0 + 176);
      v114 = *(_QWORD *)(v0 + 320);
      v116 = *(_QWORD *)(v0 + 168);
      v119 = *(_QWORD *)(v0 + 160);
      sub_10000EDE8(0, &qword_100116340, type metadata accessor for OverviewTimelineEntry, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      v15 = *(unsigned __int8 *)(v10 + 80);
      v16 = (v15 + 32) & ~v15;
      v18 = swift_allocObject(v17, v16 + *(_QWORD *)(v10 + 72), v15 | 7);
      *(_OWORD *)(v18 + 16) = xmmword_1000DB170;
      sub_10001DE2C(v9, v18 + v16, type metadata accessor for OverviewTimelineEntry);
      v19 = sub_100007184((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      static Date.now.getter(v19);
      v20 = *(_QWORD *)(*v19 + 40);
      v21 = *(_QWORD *)(*v19 + 48);
      sub_100007184((_QWORD *)(*v19 + 16), v20);
      v22 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v20, v21);
      v23 = AppConfiguration.widgetSystemReloadJitterMax.getter(v22);
      v24 = (double)v23;
      AppConfiguration.openMarketWidgetSystemReloadInterval.getter(v23);
      static Date.+ infix(_:_:)(v12);
      static TimelineReloadPolicy.after(_:jitteredUpTo:)(v11, v114, v24);
      v127(v11, v13);
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v14, v119);
      v127(v12, v13);
      v25 = sub_100085880();
      v26 = v124;
      v27 = v18;
      v28 = v114;
LABEL_7:
      Timeline.init(entries:policy:)(v27, v28, v26, v25);
LABEL_28:
      v100 = *(_QWORD *)(v0 + 400);
      v101 = *(_QWORD *)(v0 + 408);
      v102 = *(_QWORD *)(v0 + 392);
      v104 = *(_QWORD *)(v0 + 360);
      v103 = *(_QWORD *)(v0 + 368);
      v106 = *(_QWORD *)(v0 + 328);
      v105 = *(_QWORD *)(v0 + 336);
      v107 = *(_QWORD *)(v0 + 320);
      v108 = *(_QWORD *)(v0 + 296);
      v109 = *(_QWORD *)(v0 + 288);
      v111 = *(_QWORD *)(v0 + 280);
      v113 = *(_QWORD *)(v0 + 256);
      v115 = *(_QWORD *)(v0 + 248);
      v118 = *(_QWORD *)(v0 + 240);
      v121 = *(_QWORD *)(v0 + 224);
      v123 = *(_QWORD *)(v0 + 216);
      v126 = *(_QWORD *)(v0 + 192);
      v129 = *(_QWORD *)(v0 + 176);
      sub_10001DF70(v101, type metadata accessor for OverviewTimelineEntry);
      sub_100007164((_QWORD *)(v0 + 16));
      swift_task_dealloc(v101);
      swift_task_dealloc(v100);
      swift_task_dealloc(v102);
      swift_task_dealloc(v103);
      swift_task_dealloc(v104);
      swift_task_dealloc(v105);
      swift_task_dealloc(v106);
      swift_task_dealloc(v107);
      swift_task_dealloc(v108);
      swift_task_dealloc(v109);
      swift_task_dealloc(v111);
      swift_task_dealloc(v113);
      swift_task_dealloc(v115);
      swift_task_dealloc(v118);
      swift_task_dealloc(v121);
      swift_task_dealloc(v123);
      swift_task_dealloc(v126);
      swift_task_dealloc(v129);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    sub_10002A734(0);
    v30 = v29;
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + *(int *)(v29 + 48) + 8));
    v31 = swift_bridgeObjectRelease(*(_QWORD *)(v4 + *(int *)(v30 + 64) + 8));
    v32 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    ((void (*)(uint64_t, uint64_t, __n128))v32)(v4, v5, v31);
  }
  v33 = *(_QWORD *)(v0 + 344);
  v34 = *(_QWORD *)(v0 + 352);
  v35 = *(_QWORD *)(v0 + 336);
  sub_10005C500(v35);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v35, 1, v33) == 1)
  {
    v36 = *(_QWORD *)(v0 + 408);
    v37 = *(_QWORD *)(v0 + 376);
    v38 = *(_QWORD *)(v0 + 384);
    v39 = *(_QWORD *)(v0 + 320);
    sub_10001DF70(*(_QWORD *)(v0 + 336), (uint64_t (*)(_QWORD))sub_10008E860);
    sub_10000EDE8(0, &qword_100116340, type metadata accessor for OverviewTimelineEntry, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v40 = *(unsigned __int8 *)(v38 + 80);
    v41 = (v40 + 32) & ~v40;
    v43 = swift_allocObject(v42, v41 + *(_QWORD *)(v38 + 72), v40 | 7);
    *(_OWORD *)(v43 + 16) = xmmword_1000DB170;
    v44 = sub_10001DE2C(v36, v43 + v41, type metadata accessor for OverviewTimelineEntry);
    static TimelineReloadPolicy.never.getter(v44);
    v25 = sub_100085880();
    v27 = v43;
    v28 = v39;
    v26 = v37;
    goto LABEL_7;
  }
  v46 = *(_QWORD *)(v0 + 360);
  v45 = *(_QWORD *)(v0 + 368);
  v47 = *(_QWORD *)(v0 + 344);
  v48 = *(_QWORD *)(v0 + 352);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v48 + 32))(v45, *(_QWORD *)(v0 + 336), v47);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v46, v45, v47);
  sub_10008E8D4();
  dispatch thunk of Sequence.makeIterator()(v47);
  result = *(_QWORD *)(v0 + 136);
  v50 = *(_QWORD *)(v0 + 144);
  v51 = *(_QWORD *)(result + 16);
  v128 = (void (*)(uint64_t, uint64_t, __n128))v32;
  if (v50 == v51)
  {
    v52 = _swiftEmptyArrayStorage;
LABEL_10:
    v53 = *(_QWORD *)(v0 + 408);
    v54 = *(_QWORD *)(v0 + 392);
    v55 = *(_QWORD *)(v0 + 376);
    swift_bridgeObjectRelease(result);
    v56 = sub_100007184((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    static Date.now.getter(v56);
    sub_10001DE2C(v53, v54, type metadata accessor for OverviewTimelineEntry);
    v57 = swift_getEnumCaseMultiPayload(v54, v55);
    v58 = *(_QWORD *)(v0 + 392);
    v59 = *(_QWORD *)(v0 + 256);
    if (v57 == 1)
    {
      v61 = *(_QWORD *)(v0 + 184);
      v60 = *(_QWORD *)(v0 + 192);
      sub_10002A7CC(0);
      sub_10000ED3C(v58 + *(int *)(v62 + 48), v60, type metadata accessor for WatchlistOverviewContentViewModel);
      sub_10001DE2C(v60 + *(int *)(v61 + 44), v59, (uint64_t (*)(_QWORD))sub_10001D6B0);
      sub_10001DF70(v60, type metadata accessor for WatchlistOverviewContentViewModel);
    }
    else
    {
      sub_10002A734(0);
      v78 = v77;
      swift_bridgeObjectRelease(*(_QWORD *)(v58 + *(int *)(v77 + 48) + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v58 + *(int *)(v78 + 64) + 8));
      sub_100042D9C(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v59, 1, 1, v79);
    }
    v80 = *(_QWORD *)(v0 + 256);
    ((void (*)(_QWORD, _QWORD))v128)(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 264));
    sub_100042D9C(0);
    v82 = v81;
    v83 = *(_QWORD *)(v81 - 8);
    v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v80, 1, v81);
    v85 = *(_QWORD *)(v0 + 256);
    if (v84 == 1)
    {
      sub_10001DF70(*(_QWORD *)(v0 + 256), (uint64_t (*)(_QWORD))sub_10001D6B0);
      v86 = 0;
    }
    else
    {
      v86 = NonEmpty.count.getter(v82);
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v85, v82);
    }
    v87 = *(_QWORD *)(v0 + 384);
    v125 = *(_QWORD *)(v0 + 368);
    v117 = *(_QWORD *)(v0 + 376);
    v120 = *(_QWORD *)(v0 + 352);
    v122 = *(_QWORD *)(v0 + 344);
    v89 = *(_QWORD *)(v0 + 320);
    v88 = *(_QWORD *)(v0 + 328);
    v90 = *(_QWORD *)(v0 + 312);
    v110 = *(_QWORD *)(v0 + 304);
    v112 = *(_QWORD *)(v0 + 408);
    v91 = *(_QWORD *)(v0 + 296);
    v92 = *(_QWORD *)(v0 + 264);
    sub_1000C6490(v91, (uint64_t)v52, v86, v88);
    v93 = swift_bridgeObjectRelease(v52);
    v128(v91, v92, v93);
    sub_10000EDE8(0, &qword_100116340, type metadata accessor for OverviewTimelineEntry, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v94 = *(_QWORD *)(v87 + 72);
    v95 = *(unsigned __int8 *)(v87 + 80);
    v96 = (v95 + 32) & ~v95;
    v98 = swift_allocObject(v97, v96 + v94, v95 | 7);
    *(_OWORD *)(v98 + 16) = xmmword_1000DB170;
    sub_10001DE2C(v112, v98 + v96, type metadata accessor for OverviewTimelineEntry);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16))(v89, v88, v110);
    v99 = sub_100085880();
    Timeline.init(entries:policy:)(v98, v89, v117, v99);
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v88, v110);
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v125, v122);
    goto LABEL_28;
  }
  v63 = *(_QWORD *)(v0 + 232);
  v64 = *(_QWORD *)(v0 + 208);
  v52 = _swiftEmptyArrayStorage;
  while ((v50 & 0x8000000000000000) == 0)
  {
    if (v50 >= v51)
      goto LABEL_30;
    v66 = *(_QWORD *)(v0 + 240);
    v65 = *(_QWORD *)(v0 + 248);
    v67 = *(_QWORD *)(v0 + 200);
    v68 = result
        + ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))
        + *(_QWORD *)(v63 + 72) * v50;
    *(_QWORD *)(v0 + 144) = v50 + 1;
    sub_10001DE2C(v68, v65, (uint64_t (*)(_QWORD))sub_10001D694);
    sub_10000ED3C(v65, v66, (uint64_t (*)(_QWORD))sub_10001D694);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v66, 1, v67) == 1)
    {
      sub_10001DF70(*(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))sub_10001D694);
    }
    else
    {
      v70 = *(_QWORD *)(v0 + 216);
      v69 = *(_QWORD *)(v0 + 224);
      v71 = *(_QWORD *)(v0 + 200);
      v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32);
      v72(v69, *(_QWORD *)(v0 + 240), v71);
      v72(v70, v69, v71);
      if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
        v52 = (_QWORD *)sub_1000733D0(0, v52[2] + 1, 1, (unint64_t)v52);
      v74 = v52[2];
      v73 = v52[3];
      if (v74 >= v73 >> 1)
        v52 = (_QWORD *)sub_1000733D0(v73 > 1, v74 + 1, 1, (unint64_t)v52);
      v75 = *(_QWORD *)(v0 + 216);
      v76 = *(_QWORD *)(v0 + 200);
      v52[2] = v74 + 1;
      v72((uint64_t)v52+ ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))+ *(_QWORD *)(v64 + 72) * v74, v75, v76);
    }
    result = *(_QWORD *)(v0 + 136);
    v50 = *(_QWORD *)(v0 + 144);
    v51 = *(_QWORD *)(result + 16);
    if (v50 == v51)
      goto LABEL_10;
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10008DDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v8[2] = a7;
  v8[3] = a8;
  sub_10001D724(0, &qword_100116320, type metadata accessor for OverviewTimelineEntry, sub_100085880, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for Timeline);
  v8[4] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[5] = v12;
  v13 = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[6] = v13;
  v14 = (_QWORD *)swift_task_alloc(dword_10011632C);
  v8[7] = v14;
  *v14 = v8;
  v14[1] = sub_10001CA90;
  return sub_10008D154(v13, a5, a6);
}

uint64_t sub_10008DEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  int64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v47 = a4;
  v10 = type metadata accessor for ExchangeStatus(0);
  v44 = *(_QWORD *)(v10 - 8);
  v45 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D694(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for WidgetStock(0);
  v48 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v43 = (uint64_t)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v40 - v18;
  v20 = type metadata accessor for NewsDisplayConfiguration(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for OverviewTimelineProvider.Configuration(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, a1 + *(int *)(v24 + 28), v20);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v23, v20);
  if (v25 != enum case for NewsDisplayConfiguration.afterHours(_:))
  {
    if (v25 == enum case for NewsDisplayConfiguration.always(_:))
      return 1;
    if (v25 != enum case for NewsDisplayConfiguration.never(_:))
      (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    return 0;
  }
  v26 = _swiftEmptyArrayStorage;
  v49 = _swiftEmptyArrayStorage;
  v27 = a6 >> 1;
  result = swift_unknownObjectRetain(a3);
  if (a6 >> 1 != a5)
  {
    v41 = a3;
    v42 = a5;
    v29 = a5;
    while (1)
    {
      if (v29 >= v27)
      {
        __break(1u);
LABEL_25:
        __break(1u);
        return result;
      }
      v30 = *(_QWORD *)(v48 + 72);
      sub_10001DE2C(v47 + v30 * v29, (uint64_t)v19, type metadata accessor for WidgetStock);
      sub_10001DE2C((uint64_t)&v19[*(int *)(v46 + 20)], (uint64_t)v15, (uint64_t (*)(_QWORD))sub_10001D694);
      v31 = type metadata accessor for WidgetQuote(0);
      v32 = *(_QWORD *)(v31 - 8);
      v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v15, 1, v31);
      if ((_DWORD)v33 == 1)
      {
        sub_10001DF70((uint64_t)v15, (uint64_t (*)(_QWORD))sub_10001D694);
      }
      else
      {
        WidgetQuote.exchangeStatus.getter(v33);
        v34 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v15, v31);
        v35 = ExchangeStatus.isClosed.getter(v34);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v45);
        if ((v35 & 1) != 0)
        {
          sub_10000ED3C((uint64_t)v19, v43, type metadata accessor for WidgetStock);
          v36 = v49;
          if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
          {
            sub_100073748(0, v36[2] + 1, 1);
            v36 = v49;
          }
          v38 = v36[2];
          v37 = v36[3];
          if (v38 >= v37 >> 1)
          {
            sub_100073748(v37 > 1, v38 + 1, 1);
            v36 = v49;
          }
          v36[2] = v38 + 1;
          result = sub_10000ED3C(v43, (uint64_t)v36+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ v38 * v30, type metadata accessor for WidgetStock);
          goto LABEL_6;
        }
      }
      result = sub_10001DF70((uint64_t)v19, type metadata accessor for WidgetStock);
LABEL_6:
      if (v27 == ++v29)
      {
        v26 = v49;
        a3 = v41;
        a5 = v42;
        break;
      }
    }
  }
  swift_unknownObjectRelease(a3);
  v39 = v26[2];
  result = swift_release(v26);
  if (!v39)
    return 0;
  if (__OFSUB__(v27, a5))
    goto LABEL_25;
  return (float)((float)(v27 - a5) * 0.5) <= (float)v39;
}

uint64_t sub_10008E284@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v11;

  v6 = type metadata accessor for WidgetStock(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DE2C(a1, (uint64_t)v8, v9);
  return sub_100077774((uint64_t)v8, a2, a3);
}

uint64_t sub_10008E31C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  TimelineProviderContext.family.getter(v6);
  sub_10002A7CC(0);
  v8 = (char *)(a1 + v7[12]);
  v9 = v7[16];
  v10 = v7[20];
  v11 = v7[24];
  static Date.now.getter(v7);
  sub_10003755C((uint64_t)v5, 0, v8);
  *(_BYTE *)(a1 + v9) = 0;
  *(_BYTE *)(a1 + v10) = 1;
  *(_BYTE *)(a1 + v11) = 0;
  v12 = type metadata accessor for OverviewTimelineEntry(0);
  swift_storeEnumTagMultiPayload(a1, v12, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10008E404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_10011633C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000F0A8;
  return sub_100086740(a1, a2, a3);
}

uint64_t sub_10008E46C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_10011632C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000F0A8;
  return sub_10008D154(a1, a2, a3);
}

uint64_t sub_10008E4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10008E4FC(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_100107E48, (uint64_t)&unk_1001163D8);
}

uint64_t sub_10008E4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10008E4FC(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_100107E20, (uint64_t)&unk_100116318);
}

uint64_t sub_10008E4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v44 = a4;
  v45 = a8;
  v42 = a7;
  v43 = a3;
  v40 = a1;
  v41 = a2;
  v46 = type metadata accessor for TimelineProviderContext(0);
  v9 = *(_QWORD *)(v46 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v46);
  v38 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WatchlistWidgetConfigurationIntent(0);
  v12 = *(_QWORD *)(v11 - 8);
  v36 = v11;
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v37 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a5 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v16);
  v17 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100112658, (uint64_t (*)(uint64_t))&type metadata accessor for TaskPriority, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v18);
  v20 = (char *)&v35 - v19;
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  sub_10001DE2C(v39, (uint64_t)v17, type metadata accessor for OverviewTimelineProvider);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v40, v11);
  v22 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v38, v41, v46);
  v23 = *(unsigned __int8 *)(v14 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = *(unsigned __int8 *)(v12 + 80);
  v26 = (v15 + v25 + v24) & ~v25;
  v27 = *(unsigned __int8 *)(v9 + 80);
  v28 = (v13 + v27 + v26) & ~v27;
  v29 = (v10 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = swift_allocObject(v42, v29 + 16, v23 | v25 | v27 | 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  sub_10000ED3C((uint64_t)v17, v30 + v24, type metadata accessor for OverviewTimelineProvider);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v30 + v26, v37, v36);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v30 + v28, v22, v46);
  v31 = (_QWORD *)(v30 + v29);
  v32 = v44;
  *v31 = v43;
  v31[1] = v32;
  swift_retain(v32);
  v33 = sub_10001C888((uint64_t)v20, v45, v30);
  return swift_release(v33);
}

uint64_t sub_10008E75C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v4 = *(_QWORD *)(type metadata accessor for OverviewTimelineProvider(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for WatchlistWidgetConfigurationIntent(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v1 + 24);
  v14 = v1 + v5;
  v15 = v1 + v8;
  v16 = v1 + v11;
  v17 = (uint64_t *)(v1 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  v18 = *v17;
  v19 = v17[1];
  v20 = (_QWORD *)swift_task_alloc(dword_100116314);
  *(_QWORD *)(v2 + 16) = v20;
  *v20 = v2;
  v20[1] = sub_10000E914;
  return sub_10008DDF4(a1, v12, v13, v14, v15, v16, v18, v19);
}

void sub_10008E860(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100116330)
  {
    sub_10001D724(255, &qword_100114C78, (uint64_t (*)(uint64_t))sub_10005C908, sub_10005C924, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, &qword_100116330);
  }
}

unint64_t sub_10008E8D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116348;
  if (!qword_100116348)
  {
    sub_10001D724(255, &qword_100114C78, (uint64_t (*)(uint64_t))sub_10005C908, sub_10005C924, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    result = swift_getWitnessTable(&protocol conformance descriptor for NonEmpty<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100116348);
  }
  return result;
}

void sub_10008E93C(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100116350, (uint64_t (*)(uint64_t))&type metadata accessor for WatchlistWidgetEntity, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

uint64_t sub_10008E958(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = swift_task_alloc(dword_100116364);
  v6 = *(_OWORD *)(v1 + 24);
  v7 = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_10000F0A8;
  *(_OWORD *)(v5 + 48) = v6;
  *(_OWORD *)(v5 + 64) = v7;
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = v4;
  return swift_task_switch(sub_100086B1C, 0, 0);
}

uint64_t sub_10008E9D0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100116374);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000E914;
  return sub_100086C2C(a1, v4, v5, v6);
}

uint64_t type metadata accessor for OverviewTimelineProvider.Configuration(uint64_t a1)
{
  return sub_1000071F8(a1, qword_100116438, (uint64_t)&nominal type descriptor for OverviewTimelineProvider.Configuration);
}

void sub_10008EA50(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100116388, (uint64_t (*)(uint64_t))sub_10008EA6C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

void sub_10008EA6C(uint64_t a1)
{
  sub_10001D724(a1, &qword_100116390, (uint64_t (*)(uint64_t))sub_10008EA90, sub_10008EAAC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
}

void sub_10008EA90(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100116398, type metadata accessor for WidgetStock, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
}

uint64_t sub_10008EAAC()
{
  return sub_100003D3C(&qword_1001163A0, (uint64_t (*)(uint64_t))sub_10008EA90, (uint64_t)&protocol conformance descriptor for [A]);
}

void sub_10008EAC8(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001163A8, type metadata accessor for WidgetWatchlist, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

uint64_t sub_10008EAE4(uint64_t a1, char a2, unsigned __int8 a3, unsigned __int8 a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t (*v16)(char *, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;

  v8 = type metadata accessor for WidgetFamily(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v24 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15((char *)&v24 - v13, a1, v8);
  v16 = *(uint64_t (**)(char *, uint64_t))(v9 + 88);
  v17 = v16(v14, v8);
  v18 = enum case for WidgetFamily.systemSmall(_:);
  if (v17 == enum case for WidgetFamily.systemSmall(_:))
  {
LABEL_2:
    v19 = 3;
    goto LABEL_11;
  }
  if (v17 == enum case for WidgetFamily.systemMedium(_:))
  {
    if (a4 & 1 | ((a2 & 1) == 0))
      v19 = 3;
    else
      v19 = 2;
  }
  else
  {
    if (v17 != enum case for WidgetFamily.systemLarge(_:))
    {
      if (v17 != enum case for WidgetFamily.accessoryRectangular(_:))
      {
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000012, 0x80000001000E5410, "StocksWidget/OverviewTimelineProvider.swift", 43, 2, 374, 0);
        goto LABEL_26;
      }
      goto LABEL_2;
    }
    if ((a4 & 1) != 0)
      v19 = 3;
    else
      v19 = 6;
  }
LABEL_11:
  v15(v12, a1, v8);
  v20 = v16(v12, v8);
  if (v20 == v18)
    goto LABEL_21;
  if (v20 == enum case for WidgetFamily.systemMedium(_:) || v20 == enum case for WidgetFamily.systemLarge(_:))
  {
    v22 = 1;
    if (((a3 | a4) & 1) != 0)
      v22 = 2;
    return v22 * v19;
  }
  if (v20 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
LABEL_21:
    v22 = 1;
    return v22 * v19;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000012, 0x80000001000E5410, "StocksWidget/OverviewTimelineProvider.swift", 43, 2, 385, 0);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10008ED00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10008E284(a1, *(unsigned __int8 *)(v2 + 16), a2);
}

void sub_10008ED18(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001163B8, type metadata accessor for HeadlineViewModel, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for ArraySlice);
}

uint64_t sub_10008ED34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10001D6B0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008ED78()
{
  return sub_100003D3C(&qword_1001163C8, (uint64_t (*)(uint64_t))sub_10008EA6C, (uint64_t)&protocol conformance descriptor for NonEmpty<A>);
}

uint64_t sub_10008ED98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *(_QWORD *)(type metadata accessor for OverviewTimelineProvider(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for WatchlistWidgetConfigurationIntent(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v3 + v4 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for TimelineProviderContext(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v8 + v9 + v12) & ~v12;
  v17 = v2 | v7 | v12 | 7;
  v14 = (*(_QWORD *)(v11 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v15 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v0 + v3, v15);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v5);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0 + v13, v10);
  swift_release(*(_QWORD *)(v0 + v14 + 8));
  return swift_deallocObject(v0, v14 + 16, v17);
}

uint64_t sub_10008EEBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v4 = *(_QWORD *)(type metadata accessor for OverviewTimelineProvider(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for WatchlistWidgetConfigurationIntent(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v1 + 24);
  v14 = v1 + v5;
  v15 = v1 + v8;
  v16 = v1 + v11;
  v17 = (uint64_t *)(v1 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  v18 = *v17;
  v19 = v17[1];
  v20 = (_QWORD *)swift_task_alloc(dword_1001163D4);
  *(_QWORD *)(v2 + 16) = v20;
  *v20 = v2;
  v20[1] = sub_10000F0A8;
  return sub_10008D01C(a1, v12, v13, v14, v15, v16, v18, v19);
}

_QWORD *sub_10008EFC0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for NewsDisplayConfiguration(0);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_10008F064(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for NewsDisplayConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_10008F0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for NewsDisplayConfiguration(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_10008F124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for NewsDisplayConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t sub_10008F1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for NewsDisplayConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10008F214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for NewsDisplayConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10008F290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008F29C);
}

uint64_t sub_10008F29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for NewsDisplayConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v9);
  }
}

uint64_t sub_10008F324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008F330);
}

uint64_t sub_10008F330(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for NewsDisplayConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10008F3A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1000E0F00;
  v4[1] = &unk_1000E0F18;
  v4[2] = &unk_1000E0F18;
  result = type metadata accessor for NewsDisplayConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10008F424()
{
  qword_100116478 = (uint64_t)&off_100103708;
}

void sub_10008F438(uint64_t a1)
{
  __asm { BR              X9 }
}

void sub_10008F490()
{
  _QWORD *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10008FB1C(v1);
  v4 = v3;
  v6 = v5;
  sub_10008F534(v1);
  *v0 = 1751607656;
  v0[1] = v2;
  v0[2] = v4;
  v0[3] = v6;
  v0[4] = v7;
  v0[5] = v8;
}

void sub_10008F534(char a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_10001D694(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for Locale(0);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_10008F5F0()
{
  uint64_t v0;
  double v1;
  char v2;
  double v3;
  id v4;
  id v5;
  id v6;

  v0 = 9666786;
  v1 = COERCE_DOUBLE(((uint64_t (*)(void))QuoteDetail.dayOpenPrice.getter)());
  if ((v2 & 1) == 0)
  {
    v3 = v1;
    v4 = (id)sub_1000221F8(0, 5, 1, v1);
    objc_msgSend(v4, "setNumberStyle:", 1);
    v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v3);
    v6 = objc_msgSend(v4, "stringFromNumber:", v5);

    if (v6)
    {
      v0 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

    }
  }
  return v0;
}

uint64_t sub_10008F9E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for QuoteDetailItemFactory()
{
  return objc_opt_self(_TtC12StocksWidget22QuoteDetailItemFactory);
}

_QWORD *sub_10008FA3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v1 = type metadata accessor for PriceFormatter(0);
  v2 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  static Locale.autoupdatingCurrent.getter();
  v0[2] = v2;
  v3 = type metadata accessor for UnitNumberFormatter();
  v4 = swift_allocObject(v3, 24, 7);
  *(_QWORD *)(v4 + 16) = objc_msgSend(objc_allocWithZone((Class)SCICUNumberFormatter), "init");
  v0[3] = v4;
  v5 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v5, "setNumberStyle:", 1);
  objc_msgSend(v5, "setMinimumFractionDigits:", 2);
  objc_msgSend(v5, "setMaximumFractionDigits:", 2);
  v0[4] = v5;
  return v0;
}

void sub_10008FB1C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10008FB4C()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t countAndFlagsBits;
  Swift::String v7;

  v0 = type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v7._countAndFlagsBits = 0xD000000000000038;
  v7._object = (void *)0x80000001000E6A10;
  v3._countAndFlagsBits = 1852141647;
  v3._object = (void *)0xE400000000000000;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v7)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_10008FE28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10001D694(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008FE6C(uint64_t a1)
{
  uint64_t v2;

  sub_10001D694(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_10008FEA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075FE0(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100007184(a1, v9);
  v11 = sub_10002D554(0, &qword_100116678, FCContextConfiguration_ptr);
  v12 = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (!v12)
  {
    __break(1u);
    goto LABEL_8;
  }
  v13 = (void *)v12;
  v14 = a1[3];
  v15 = a1[4];
  sub_100007184(a1, v14);
  v16 = sub_10003F97C(0, &qword_100116680, &protocolRef_FCCoreConfigurationManager);
  v17 = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (!v17)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v18 = v17;
  v19 = (id)FCURLForContainerizedUserAccountCachesDirectory(1);
  if (!v19)
  {
LABEL_9:
    result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_10;
  }
  v20 = v19;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result == 1)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v22 = a1[3];
  v23 = a1[4];
  sub_100007184(a1, v22);
  v24 = sub_10002D554(0, (unint64_t *)&unk_100116600, FCNetworkBehaviorMonitor_ptr);
  result = (id)dispatch thunk of ResolverType.resolve<A>(_:)(v24, v24, v22, v23);
  if (result)
  {
    v25 = result;
    v26 = sub_100056F40(v13, v18, (uint64_t)v8, result);

    swift_unknownObjectRelease(v18);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return v26;
  }
LABEL_11:
  __break(1u);
  return result;
}

void sub_1000900F0(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  objc_msgSend(*a1, "enableFlushingWithFlushingThreshold:", 1);
  v2 = objc_msgSend(v1, "assetManager");
  objc_msgSend(v2, "enableFlushingWithFlushingThreshold:", 1);

}

uint64_t sub_100090154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  uint64_t result;
  id v11;
  NSURL *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075FE0(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (id)FCURLForTodayDropbox(v5);
  if (v8)
  {
    v9 = v8;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v7, v3, v0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v7, 0, 1, v0);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 48))(v7, 1, v0);
    if ((_DWORD)result != 1)
    {
      v11 = objc_allocWithZone((Class)FCFileCoordinatedTodayDropbox);
      URL._bridgeToObjectiveC()(v12);
      v14 = v13;
      v15 = objc_msgSend(v11, "initWithFileURL:", v13);

      (*(void (**)(char *, uint64_t))(v1 + 8))(v7, v0);
      return (uint64_t)v15;
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v7, 1, 1, v0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000902B8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  void *v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[5];
  _QWORD v48[5];
  __int128 v49;
  uint64_t v50;
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v47[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v47[-1] - v9;
  v11 = a1[3];
  v12 = a1[4];
  sub_100007184(a1, v11);
  v13 = sub_10003FAA0(0, &qword_100113E90, (uint64_t)&protocol descriptor for FeatureAvailabilityType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (v50)
  {
    sub_10001D968(&v49, (uint64_t)v51);
    v15 = v52;
    v16 = v53;
    sub_100007184(v51, v52);
    if ((dispatch thunk of FeatureAvailabilityType.appleNewsContent.getter(v15, v16) & 1) == 0)
    {
      v44 = type metadata accessor for EmptyNewsUserProfileProvider(0);
      swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
      v40 = EmptyNewsUserProfileProvider.init()();
      v41 = (unint64_t *)&unk_100116640;
      v42 = &protocol conformance descriptor for EmptyNewsUserProfileProvider;
      v43 = (void (*)(uint64_t))&type metadata accessor for EmptyNewsUserProfileProvider;
LABEL_8:
      v45 = sub_100003D3C(v41, (uint64_t (*)(uint64_t))v43, (uint64_t)v42);
      *a2 = v40;
      a2[1] = v45;
      return sub_100007164(v51);
    }
    v17 = a1[3];
    v18 = a1[4];
    sub_100007184(a1, v17);
    v19 = sub_10003FAA0(0, &qword_1001165E0, (uint64_t)&protocol descriptor for TodayPrivateDataProviderType, 1);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v19, v19, v17, v18);
    if (v50)
    {
      v20 = sub_10005F1A8((uint64_t)&v49, v50);
      v46 = (uint64_t)&v46;
      v21 = __chkstk_darwin(v20);
      v23 = (_QWORD *)((char *)&v47[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v24 + 16))(v23, v21);
      v25 = *v23;
      v26 = type metadata accessor for TodayPrivateDataProvider(0);
      v48[3] = v26;
      v48[4] = &off_1001059D0;
      v48[0] = v25;
      v27 = type metadata accessor for WidgetNewsUserProfileProvider();
      v28 = swift_allocObject(v27, 64, 7);
      v29 = sub_10005F1A8((uint64_t)v48, v26);
      v30 = __chkstk_darwin(v29);
      v32 = (_QWORD *)((char *)&v47[-1] - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v33 + 16))(v32, v30);
      v34 = *v32;
      v47[3] = v26;
      v47[4] = &off_1001059D0;
      v47[0] = v34;
      sub_10001DB68((uint64_t)v47, v28 + 16);
      sub_100090F54(0);
      swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
      v36 = Cache.init()();
      sub_100007164(v47);
      *(_QWORD *)(v28 + 56) = v36;
      sub_100007164(v48);
      sub_100007164(&v49);
      if (qword_100111440 != -1)
        swift_once(&qword_100111440, sub_10002DE10);
      v37 = sub_100012524(v4, (uint64_t)qword_1001267E8);
      v38 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v38(v10, v37, v4);
      v38(v7, (uint64_t)v10, v4);
      sub_100091000(0);
      v40 = swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
      *(_QWORD *)(v40 + 16) = v28;
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v40 + qword_100126958, v7, v4);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      v41 = (unint64_t *)&unk_100116668;
      v42 = &unk_1000E04A4;
      v43 = sub_100091000;
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100090674@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100007184(a1, v8);
  v10 = sub_10002D554(0, (unint64_t *)&unk_1001165D0, FCFileCoordinatedTodayDropbox_ptr);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (result)
  {
    v12 = result;
    static Logger.stocksNews.getter();
    v13 = type metadata accessor for TodayPrivateDataProvider(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    swift_defaultActor_initialize();
    v15 = OBJC_IVAR____TtC12StocksWidget24TodayPrivateDataProvider_cache;
    sub_100090E98(0);
    swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    *(_QWORD *)(v14 + v15) = Cache.init()();
    *(_QWORD *)(v14 + OBJC_IVAR____TtC12StocksWidget24TodayPrivateDataProvider_maxAge) = 0x4024000000000000;
    *(_QWORD *)(v14 + 112) = v12;
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v14 + OBJC_IVAR____TtC12StocksWidget24TodayPrivateDataProvider_logger, v7, v4);
    a2[3] = v13;
    a2[4] = (uint64_t)&off_1001059D0;
    *a2 = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1000907C8@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  *(_QWORD *)(a1 + 24) = &type metadata for ManagedConfigurationService;
  result = sub_100090E54();
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

id sub_1000907F8()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NoopAppActivityMonitor()), "init");
}

void sub_10009081C(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

id sub_100090824()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  Class isa;
  id v5;

  sub_10003F9CC();
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1000DD6C0;
  v2 = objc_msgSend(objc_allocWithZone((Class)FCPrivateDataSyncConditionFalse), "init");
  *(_QWORD *)(v1 + 32) = v2;
  specialized Array._endMutation()(v2);
  v3 = objc_allocWithZone((Class)FCPrivateDataSyncAvailability);
  sub_10003F97C(0, &qword_100116610, &protocolRef_FCPrivateDataSyncCondition);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(v3, "initWithConditions:", isa, swift_bridgeObjectRelease(v1).n128_f64[0]);

  return v5;
}

uint64_t sub_100090900@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for UserIdentitySource.cache(_:);
  v3 = type metadata accessor for UserIdentitySource(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

id sub_100090944()
{
  return objc_msgSend(objc_allocWithZone((Class)FCNetworkBehaviorMonitor), "initForLoggingOnly");
}

uint64_t type metadata accessor for StocksCoreOverridesAssembly()
{
  return objc_opt_self(_TtC12StocksWidget27StocksCoreOverridesAssembly);
}

uint64_t sub_10009098C()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  double (*v12)(char *, uint64_t);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;

  v0 = type metadata accessor for Scope(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = ProxyContainer.public.getter(v2);
  v6 = sub_10003F97C(0, &qword_100113E48, &protocolRef_FCContentContext);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_10008FEA8, 0, v6);
  swift_release(v5);
  v8 = Definition.thenConfigure(_:)(sub_1000900F0, 0);
  swift_release(v7);
  v9 = enum case for Scope.singleton(_:);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v10(v4, enum case for Scope.singleton(_:), v0);
  v11 = Definition.inScope(_:)(v4);
  swift_release(v11);
  swift_release(v8);
  v12 = *(double (**)(char *, uint64_t))(v1 + 8);
  v13.n128_f64[0] = v12(v4, v0);
  v14 = ProxyContainer.public.getter(v13);
  v15 = sub_10002D554(0, (unint64_t *)&unk_1001165D0, FCFileCoordinatedTodayDropbox_ptr);
  v16 = RegistrationContainer.register<A>(_:name:factory:)(v15, 0, 0, sub_100090154, 0, v15);
  swift_release(v16);
  swift_release(v14);
  v18 = ProxyContainer.public.getter(v17);
  v19 = sub_10003FAA0(0, &qword_100113EB0, (uint64_t)&protocol descriptor for NewsUserProfileProviderType, 0);
  v20 = RegistrationContainer.register<A>(_:name:factory:)(v19, 0, 0, sub_1000902B8, 0, v19);
  swift_release(v20);
  swift_release(v18);
  v22 = ProxyContainer.public.getter(v21);
  v23 = sub_10003FAA0(0, &qword_1001165E0, (uint64_t)&protocol descriptor for TodayPrivateDataProviderType, 1);
  v24 = RegistrationContainer.register<A>(_:name:factory:)(v23, 0, 0, sub_100090674, 0, v23);
  swift_release(v22);
  v10(v4, v9, v0);
  v25 = Definition.inScope(_:)(v4);
  swift_release(v25);
  swift_release(v24);
  v26.n128_f64[0] = v12(v4, v0);
  v27 = ProxyContainer.public.getter(v26);
  v28 = sub_10003FAA0(0, &qword_1001165E8, (uint64_t)&protocol descriptor for ManagedConfigurationServiceType, 1);
  v29 = RegistrationContainer.register<A>(_:name:factory:)(v28, 0, 0, sub_1000907C8, 0, v28);
  swift_release(v29);
  swift_release(v27);
  v31 = ProxyContainer.public.getter(v30);
  v32 = sub_10003F97C(0, &qword_1001165F0, &protocolRef_FCAppActivityMonitor);
  v33 = RegistrationContainer.register<A>(_:name:factory:)(v32, 0, 0, sub_1000907F8, 0, v32);
  swift_release(v33);
  swift_release(v31);
  v35 = ProxyContainer.public.getter(v34);
  v36 = static String.pushNotificationsEnabled.getter();
  v38 = v37;
  v39 = RegistrationContainer.register<A>(_:name:factory:)(&type metadata for Bool, v36, v37, sub_10009081C, 0, &type metadata for Bool);
  swift_release(v35);
  v40 = swift_bridgeObjectRelease(v38);
  ((void (*)(char *, uint64_t, uint64_t, __n128))v10)(v4, v9, v0, v40);
  v41 = Definition.inScope(_:)(v4);
  swift_release(v41);
  swift_release(v39);
  v42.n128_f64[0] = v12(v4, v0);
  v43 = ProxyContainer.public.getter(v42);
  v44 = sub_10002D554(0, &qword_1001165F8, FCPrivateDataSyncAvailability_ptr);
  v45 = RegistrationContainer.register<A>(_:name:factory:)(v44, 0, 0, sub_100090824, 0, v44);
  swift_release(v45);
  swift_release(v43);
  v47 = ProxyContainer.public.getter(v46);
  v48 = type metadata accessor for URL(0);
  v49 = static URLs.NewsPrivateDataDirectory.getter();
  v51 = v50;
  v52 = RegistrationContainer.register<A>(_:name:factory:)(v48, v49, v50, &j___s10Foundation3URLV18temporaryDirectoryACvgZ, 0, v48);
  swift_release(v52);
  swift_release(v47);
  v53 = swift_bridgeObjectRelease(v51);
  v54 = ProxyContainer.public.getter(v53);
  v55 = type metadata accessor for UserIdentitySource(0);
  v56 = RegistrationContainer.register<A>(_:name:factory:)(v55, 0, 0, sub_100090900, 0, v55);
  swift_release(v56);
  swift_release(v54);
  v58 = ProxyContainer.public.getter(v57);
  v59 = sub_10002D554(0, (unint64_t *)&unk_100116600, FCNetworkBehaviorMonitor_ptr);
  v60 = RegistrationContainer.register<A>(_:name:factory:)(v59, 0, 0, sub_100090944, 0, v59);
  swift_release(v58);
  v10(v4, v9, v0);
  v61 = Definition.inScope(_:)(v4);
  swift_release(v61);
  swift_release(v60);
  return ((uint64_t (*)(char *, uint64_t))v12)(v4, v0);
}

unint64_t sub_100090E54()
{
  unint64_t result;

  result = qword_100116618;
  if (!qword_100116618)
  {
    result = swift_getWitnessTable(&unk_1000E19BC, &type metadata for ManagedConfigurationService);
    atomic_store(result, (unint64_t *)&qword_100116618);
  }
  return result;
}

void sub_100090E98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_100116620)
  {
    v2 = sub_10003F97C(255, &qword_100114860, &protocolRef_FCTodayPrivateData);
    v3 = sub_100090F10();
    v4 = type metadata accessor for Cache(a1, &type metadata for TodayPrivateDataProvider.SingletonKey, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_100116620);
  }
}

unint64_t sub_100090F10()
{
  unint64_t result;

  result = qword_100116630;
  if (!qword_100116630)
  {
    result = swift_getWitnessTable(&unk_1000DE148, &type metadata for TodayPrivateDataProvider.SingletonKey);
    atomic_store(result, (unint64_t *)&qword_100116630);
  }
  return result;
}

void sub_100090F54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_100116648)
  {
    v2 = type metadata accessor for NewsUserProfile(255);
    v3 = sub_100090FBC();
    v4 = type metadata accessor for Cache(a1, &type metadata for WidgetNewsUserProfileProvider.CacheKey, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_100116648);
  }
}

unint64_t sub_100090FBC()
{
  unint64_t result;

  result = qword_100116650;
  if (!qword_100116650)
  {
    result = swift_getWitnessTable(&unk_1000E03D4, &type metadata for WidgetNewsUserProfileProvider.CacheKey);
    atomic_store(result, (unint64_t *)&qword_100116650);
  }
  return result;
}

void sub_100091000(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100116658)
  {
    v2 = type metadata accessor for WidgetNewsUserProfileProvider();
    v3 = sub_100003D3C(&qword_100116660, (uint64_t (*)(uint64_t))type metadata accessor for WidgetNewsUserProfileProvider, (uint64_t)&unk_1000E056C);
    v5 = type metadata accessor for LoggingNewsUserProfileProvider(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100116658);
  }
}

_QWORD *sub_100091078@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_1000910AC();
  return EnvironmentValues.subscript.getter(a1, &type metadata for PriceChangeDisplayKey, &type metadata for PriceChangeDisplayKey, v2);
}

unint64_t sub_1000910AC()
{
  unint64_t result;

  result = qword_1001166A0;
  if (!qword_1001166A0)
  {
    result = swift_getWitnessTable(&unk_1000E1018, &type metadata for PriceChangeDisplayKey);
    atomic_store(result, (unint64_t *)&qword_1001166A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for PriceChangeDisplayKey()
{
  return &type metadata for PriceChangeDisplayKey;
}

uint64_t sub_100091100()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for PriceChangeDisplay(0);
  sub_10001253C(v0, qword_100116688);
  v1 = sub_100012524(v0, (uint64_t)qword_100116688);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for PriceChangeDisplay.currency(_:), v0);
}

uint64_t sub_100091158@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100111528 != -1)
    swift_once(&qword_100111528, sub_100091100);
  v2 = type metadata accessor for PriceChangeDisplay(0);
  v3 = sub_100012524(v2, (uint64_t)qword_100116688);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1000911C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_100091218();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

unint64_t sub_100091218()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001166A8;
  if (!qword_1001166A8)
  {
    v1 = type metadata accessor for PriceChangeDisplay(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for PriceChangeDisplay, v1);
    atomic_store(result, (unint64_t *)&qword_1001166A8);
  }
  return result;
}

id sub_1000912A4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NoopAppActivityMonitor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NoopAppActivityMonitor()
{
  return objc_opt_self(_TtC12StocksWidget22NoopAppActivityMonitor);
}

uint64_t sub_1000912F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  void *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  uint64_t v56;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v13);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = (_OWORD *)(a1 + 32);
    v10 = a2 + 4;
    v11 = a2[7];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v11 == 1)
    {
      v12 = *((_OWORD *)a2 + 3);
      *v9 = *v10;
      *(_OWORD *)(a1 + 48) = v12;
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_QWORD *)(a1 + 56) = v11;
      swift_bridgeObjectRetain(v11);
    }
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    v14 = *(int *)(a3 + 28);
    v15 = (uint64_t *)(a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = (int *)type metadata accessor for PreparedSparkline(0);
    v18 = *((_QWORD *)v17 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
    {
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v56 = v18;
      v20 = *v16;
      *v15 = *v16;
      v21 = v17[5];
      v55 = (char *)v15 + v21;
      v22 = (char *)v16 + v21;
      v23 = type metadata accessor for Date(0);
      v24 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v23 - 8) + 16);
      v25 = swift_bridgeObjectRetain(v20);
      v24(v55, v22, v23, v25);
      sub_100022800(0);
      ((void (*)(char *, char *, uint64_t))v24)(&v55[*(int *)(v26 + 36)], &v22[*(int *)(v26 + 36)], v23);
      v27 = v17[6];
      v28 = (char *)v15 + v27;
      v29 = (char *)v16 + v27;
      v30 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
      *(_OWORD *)((char *)v15 + v17[7]) = *(_OWORD *)((char *)v16 + v17[7]);
      v31 = v17[8];
      v32 = (char *)v15 + v31;
      v33 = (char *)v16 + v31;
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      *((_BYTE *)v15 + v17[9]) = *((_BYTE *)v16 + v17[9]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v56 + 56))(v15, 0, 1, v17);
    }
    v34 = *(int *)(a3 + 32);
    v35 = a1 + v34;
    v36 = (uint64_t)a2 + v34;
    v37 = *(uint64_t *)((char *)a2 + v34 + 8);
    *(_QWORD *)v35 = *(uint64_t *)((char *)a2 + v34);
    *(_QWORD *)(v35 + 8) = v37;
    *(_BYTE *)(v35 + 16) = *((_BYTE *)a2 + v34 + 16);
    v38 = *(void **)((char *)a2 + v34 + 24);
    v39 = *(_QWORD *)(v36 + 32);
    v40 = *(_QWORD *)(v36 + 40);
    v41 = *(_QWORD *)(v36 + 48);
    v42 = *(_BYTE *)(v36 + 56);
    swift_bridgeObjectRetain(v37);
    sub_10000EBD8(v38, v39, v40, v41, v42);
    *(_QWORD *)(v35 + 24) = v38;
    *(_QWORD *)(v35 + 32) = v39;
    *(_QWORD *)(v35 + 40) = v40;
    *(_QWORD *)(v35 + 48) = v41;
    *(_BYTE *)(v35 + 56) = v42;
    v43 = *(_QWORD *)(v36 + 72);
    *(_QWORD *)(v35 + 64) = *(_QWORD *)(v36 + 64);
    *(_QWORD *)(v35 + 72) = v43;
    v44 = *(_QWORD *)(v36 + 88);
    swift_bridgeObjectRetain(v43);
    if (v44 <= 2)
    {
      *(_OWORD *)(v35 + 80) = *(_OWORD *)(v36 + 80);
      *(_QWORD *)(v35 + 96) = *(_QWORD *)(v36 + 96);
    }
    else
    {
      *(_QWORD *)(v35 + 80) = *(_QWORD *)(v36 + 80);
      *(_QWORD *)(v35 + 88) = v44;
      v45 = *(_QWORD *)(v36 + 96);
      *(_QWORD *)(v35 + 96) = v45;
      swift_bridgeObjectRetain(v44);
      swift_retain(v45);
    }
    v46 = *(void **)(v36 + 104);
    if (v46 == (void *)1)
    {
      *(_QWORD *)(v35 + 104) = *(_QWORD *)(v36 + 104);
      *(_BYTE *)(v35 + 112) = *(_BYTE *)(v36 + 112);
    }
    else
    {
      *(_QWORD *)(v35 + 104) = v46;
      *(_BYTE *)(v35 + 112) = *(_BYTE *)(v36 + 112);
      v47 = v46;
    }
    v48 = *(int *)(type metadata accessor for HeadlineViewModel(0) + 36);
    v49 = (void *)(v35 + v48);
    v50 = (const void *)(v36 + v48);
    v51 = type metadata accessor for URL(0);
    v52 = *(_QWORD *)(v51 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v52 + 16))(v49, v50, v51);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
    }
  }
  return a1;
}

uint64_t sub_1000916A4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  v4 = a1[7];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = (_QWORD *)((char *)a1 + *(int *)(a2 + 28));
  v6 = type metadata accessor for PreparedSparkline(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease(*v5);
    v7 = (char *)v5 + *(int *)(v6 + 20);
    v8 = type metadata accessor for Date(0);
    v9 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v9(v7, v8);
    sub_100022800(0);
    v9(&v7[*(int *)(v10 + 36)], v8);
    v11 = (char *)v5 + *(int *)(v6 + 24);
    v12 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  v13 = (char *)a1 + *(int *)(a2 + 32);
  swift_bridgeObjectRelease(*((_QWORD *)v13 + 1));
  sub_10000EC04(*((void **)v13 + 3), *((_QWORD *)v13 + 4), *((_QWORD *)v13 + 5), *((_QWORD *)v13 + 6), v13[56]);
  swift_bridgeObjectRelease(*((_QWORD *)v13 + 9));
  v14 = *((_QWORD *)v13 + 11);
  if (v14 >= 3)
  {
    swift_bridgeObjectRelease(v14);
    swift_release(*((_QWORD *)v13 + 12));
  }
  v15 = (void *)*((_QWORD *)v13 + 13);
  if (v15 != (void *)1)

  v16 = &v13[*(int *)(type metadata accessor for HeadlineViewModel(0) + 36)];
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v16, v17);
  return result;
}

uint64_t sub_100091844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v54;
  uint64_t v55;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = (_OWORD *)(a1 + 32);
  v9 = a2 + 32;
  v10 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v10 == 1)
  {
    v11 = *(_OWORD *)(v9 + 16);
    *v8 = *(_OWORD *)v9;
    *(_OWORD *)(a1 + 48) = v11;
  }
  else
  {
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(v9 + 8);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v10;
    swift_bridgeObjectRetain(v10);
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v12 = *(int *)(a3 + 28);
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = (int *)type metadata accessor for PreparedSparkline(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v55 = a3;
    v18 = *v14;
    *v13 = *v14;
    v19 = v15[5];
    v54 = (char *)v13 + v19;
    v20 = (char *)v14 + v19;
    v21 = type metadata accessor for Date(0);
    v22 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v21 - 8) + 16);
    v23 = swift_bridgeObjectRetain(v18);
    v22(v54, v20, v21, v23);
    sub_100022800(0);
    ((void (*)(char *, char *, uint64_t))v22)(&v54[*(int *)(v24 + 36)], &v20[*(int *)(v24 + 36)], v21);
    v25 = v15[6];
    v26 = (char *)v13 + v25;
    v27 = (char *)v14 + v25;
    v28 = type metadata accessor for TimeZone(0);
    v29 = v26;
    a3 = v55;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v29, v27, v28);
    *(_OWORD *)((char *)v13 + v15[7]) = *(_OWORD *)((char *)v14 + v15[7]);
    v30 = v15[8];
    v31 = (char *)v13 + v30;
    v32 = (char *)v14 + v30;
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v31[8] = v32[8];
    *((_BYTE *)v13 + v15[9]) = *((_BYTE *)v14 + v15[9]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  v33 = *(int *)(a3 + 32);
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = *(_QWORD *)(a2 + v33 + 8);
  *(_QWORD *)v34 = *(_QWORD *)(a2 + v33);
  *(_QWORD *)(v34 + 8) = v36;
  *(_BYTE *)(v34 + 16) = *(_BYTE *)(a2 + v33 + 16);
  v37 = *(void **)(a2 + v33 + 24);
  v38 = *(_QWORD *)(v35 + 32);
  v39 = *(_QWORD *)(v35 + 40);
  v40 = *(_QWORD *)(v35 + 48);
  v41 = *(_BYTE *)(v35 + 56);
  swift_bridgeObjectRetain(v36);
  sub_10000EBD8(v37, v38, v39, v40, v41);
  *(_QWORD *)(v34 + 24) = v37;
  *(_QWORD *)(v34 + 32) = v38;
  *(_QWORD *)(v34 + 40) = v39;
  *(_QWORD *)(v34 + 48) = v40;
  *(_BYTE *)(v34 + 56) = v41;
  v42 = *(_QWORD *)(v35 + 72);
  *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
  *(_QWORD *)(v34 + 72) = v42;
  v43 = *(_QWORD *)(v35 + 88);
  swift_bridgeObjectRetain(v42);
  if (v43 <= 2)
  {
    *(_OWORD *)(v34 + 80) = *(_OWORD *)(v35 + 80);
    *(_QWORD *)(v34 + 96) = *(_QWORD *)(v35 + 96);
  }
  else
  {
    *(_QWORD *)(v34 + 80) = *(_QWORD *)(v35 + 80);
    *(_QWORD *)(v34 + 88) = v43;
    v44 = *(_QWORD *)(v35 + 96);
    *(_QWORD *)(v34 + 96) = v44;
    swift_bridgeObjectRetain(v43);
    swift_retain(v44);
  }
  v45 = *(void **)(v35 + 104);
  if (v45 == (void *)1)
  {
    *(_QWORD *)(v34 + 104) = *(_QWORD *)(v35 + 104);
    *(_BYTE *)(v34 + 112) = *(_BYTE *)(v35 + 112);
  }
  else
  {
    *(_QWORD *)(v34 + 104) = v45;
    *(_BYTE *)(v34 + 112) = *(_BYTE *)(v35 + 112);
    v46 = v45;
  }
  v47 = *(int *)(type metadata accessor for HeadlineViewModel(0) + 36);
  v48 = (void *)(v34 + v47);
  v49 = (const void *)(v35 + v47);
  v50 = type metadata accessor for URL(0);
  v51 = *(_QWORD *)(v50 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v51 + 16))(v48, v49, v50);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  }
  return a1;
}

uint64_t sub_100091BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int *v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD *, uint64_t, int *);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  __int128 *v82;
  unint64_t v83;
  unint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  void *v90;
  void *v91;
  uint64_t *v92;
  uint64_t v93;
  char v94;
  id v95;
  id v96;
  uint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(void *, uint64_t, uint64_t);
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (_OWORD *)(a1 + 32);
  v11 = (_OWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a2 + 56);
  if (v12 == 1)
  {
    if (v13 == 1)
    {
      v14 = *(_OWORD *)(a2 + 48);
      *v10 = *v11;
      *(_OWORD *)(a1 + 48) = v14;
    }
    else
    {
      v16 = *(_QWORD *)v11;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)v10 = v16;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v17 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v17;
      swift_bridgeObjectRetain(v17);
    }
  }
  else if (v13 == 1)
  {
    sub_10002304C(a1 + 32);
    v15 = *(_OWORD *)(a2 + 48);
    *v10 = *v11;
    *(_OWORD *)(a1 + 48) = v15;
  }
  else
  {
    v18 = *(_QWORD *)v11;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)v10 = v18;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v19 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v19;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRelease(v12);
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v20 = *(int *)(a3 + 28);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  v23 = (int *)type metadata accessor for PreparedSparkline(0);
  v24 = *((_QWORD *)v23 - 1);
  v25 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (v27)
      goto LABEL_13;
    v29 = *v22;
    *v21 = *v22;
    v30 = v23[5];
    v110 = (char *)v21 + v30;
    v31 = (char *)v22 + v30;
    v111 = a3;
    v32 = type metadata accessor for Date(0);
    v33 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v32 - 8) + 16);
    v34 = swift_bridgeObjectRetain(v29);
    v33(v110, v31, v32, v34);
    sub_100022800(0);
    v36 = v32;
    a3 = v111;
    ((void (*)(char *, char *, uint64_t))v33)(&v110[*(int *)(v35 + 36)], &v31[*(int *)(v35 + 36)], v36);
    v37 = v23[6];
    v38 = (char *)v21 + v37;
    v39 = (char *)v22 + v37;
    v40 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
    *(_OWORD *)((char *)v21 + v23[7]) = *(_OWORD *)((char *)v22 + v23[7]);
    v41 = v23[8];
    v42 = (char *)v21 + v41;
    v43 = (char *)v22 + v41;
    v44 = v43[8];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v44;
    *((_BYTE *)v21 + v23[9]) = *((_BYTE *)v22 + v23[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  else
  {
    if (v27)
    {
      sub_10001DF70((uint64_t)v21, type metadata accessor for PreparedSparkline);
LABEL_13:
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      goto LABEL_16;
    }
    v45 = *v22;
    v46 = *v21;
    *v21 = *v22;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRelease(v46);
    v47 = v23[5];
    v48 = (char *)v21 + v47;
    v49 = (char *)v22 + v47;
    v50 = type metadata accessor for Date(0);
    v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 24);
    v51(v48, v49, v50);
    sub_100022800(0);
    v51(&v48[*(int *)(v52 + 36)], &v49[*(int *)(v52 + 36)], v50);
    v53 = v23[6];
    v54 = (char *)v21 + v53;
    v55 = (char *)v22 + v53;
    v56 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 24))(v54, v55, v56);
    v57 = v23[7];
    v58 = (_QWORD *)((char *)v21 + v57);
    v59 = (_QWORD *)((char *)v22 + v57);
    *v58 = *v59;
    v58[1] = v59[1];
    v60 = v23[8];
    v61 = (char *)v21 + v60;
    v62 = (char *)v22 + v60;
    v63 = v62[8];
    *(_QWORD *)v61 = *(_QWORD *)v62;
    v61[8] = v63;
    *((_BYTE *)v21 + v23[9]) = *((_BYTE *)v22 + v23[9]);
  }
LABEL_16:
  v64 = *(int *)(a3 + 32);
  v65 = a1 + v64;
  v66 = a2 + v64;
  *(_QWORD *)v65 = *(_QWORD *)(a2 + v64);
  v67 = *(_QWORD *)(a2 + v64 + 8);
  v68 = *(_QWORD *)(a1 + v64 + 8);
  *(_QWORD *)(v65 + 8) = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  *(_BYTE *)(v65 + 16) = *(_BYTE *)(v66 + 16);
  v69 = *(void **)(v66 + 24);
  v70 = *(_QWORD *)(v66 + 32);
  v71 = *(_QWORD *)(v66 + 40);
  v72 = *(_QWORD *)(v66 + 48);
  v73 = *(_BYTE *)(v66 + 56);
  sub_10000EBD8(v69, v70, v71, v72, v73);
  v74 = *(void **)(v65 + 24);
  v75 = *(_QWORD *)(v65 + 32);
  v76 = *(_QWORD *)(v65 + 40);
  v77 = *(_QWORD *)(v65 + 48);
  v78 = *(_BYTE *)(v65 + 56);
  *(_QWORD *)(v65 + 24) = v69;
  *(_QWORD *)(v65 + 32) = v70;
  *(_QWORD *)(v65 + 40) = v71;
  *(_QWORD *)(v65 + 48) = v72;
  *(_BYTE *)(v65 + 56) = v73;
  sub_10000EC04(v74, v75, v76, v77, v78);
  *(_QWORD *)(v65 + 64) = *(_QWORD *)(v66 + 64);
  v79 = *(_QWORD *)(v66 + 72);
  v80 = *(_QWORD *)(v65 + 72);
  *(_QWORD *)(v65 + 72) = v79;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRelease(v80);
  v81 = (__int128 *)(v65 + 80);
  v82 = (__int128 *)(v66 + 80);
  v83 = *(_QWORD *)(v65 + 88);
  v84 = *(_QWORD *)(v66 + 88);
  if (v83 == 2)
  {
    if (v84 <= 2)
    {
LABEL_18:
      v85 = *v82;
      *(_QWORD *)(v65 + 96) = *(_QWORD *)(v66 + 96);
      *v81 = v85;
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  if (v84 == 2)
  {
    sub_1000922CC(v65 + 80);
LABEL_26:
    v88 = *(_QWORD *)(v66 + 96);
    *v81 = *v82;
    *(_QWORD *)(v65 + 96) = v88;
    goto LABEL_27;
  }
  if (v83 < 2)
  {
    if (v84 < 2)
      goto LABEL_18;
LABEL_23:
    *(_QWORD *)(v65 + 80) = *(_QWORD *)(v66 + 80);
    v86 = *(_QWORD *)(v66 + 88);
    *(_QWORD *)(v65 + 88) = v86;
    v87 = *(_QWORD *)(v66 + 96);
    *(_QWORD *)(v65 + 96) = v87;
    swift_bridgeObjectRetain(v86);
    swift_retain(v87);
    goto LABEL_27;
  }
  if (v84 < 2)
  {
    sub_10001DF70(v65 + 80, (uint64_t (*)(_QWORD))sub_10009224C);
    goto LABEL_26;
  }
  *(_QWORD *)(v65 + 80) = *(_QWORD *)(v66 + 80);
  v107 = *(_QWORD *)(v66 + 88);
  *(_QWORD *)(v65 + 88) = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v83);
  v108 = *(_QWORD *)(v65 + 96);
  v109 = *(_QWORD *)(v66 + 96);
  *(_QWORD *)(v65 + 96) = v109;
  swift_retain(v109);
  swift_release(v108);
LABEL_27:
  v89 = (uint64_t *)(v65 + 104);
  v90 = *(void **)(v65 + 104);
  v92 = (uint64_t *)(v66 + 104);
  v91 = *(void **)(v66 + 104);
  if (v90 == (void *)1)
  {
    if (v91 == (void *)1)
    {
      v93 = *v92;
      *(_BYTE *)(v65 + 112) = *(_BYTE *)(v66 + 112);
      *v89 = v93;
    }
    else
    {
      *(_QWORD *)(v65 + 104) = v91;
      *(_BYTE *)(v65 + 112) = *(_BYTE *)(v66 + 112);
      v95 = v91;
    }
  }
  else if (v91 == (void *)1)
  {
    sub_100092300((id *)(v65 + 104));
    v94 = *(_BYTE *)(v66 + 112);
    *v89 = *v92;
    *(_BYTE *)(v65 + 112) = v94;
  }
  else
  {
    *(_QWORD *)(v65 + 104) = v91;
    v96 = v91;

    *(_BYTE *)(v65 + 112) = *(_BYTE *)(v66 + 112);
  }
  v97 = *(int *)(type metadata accessor for HeadlineViewModel(0) + 36);
  v98 = (void *)(v65 + v97);
  v99 = (void *)(v66 + v97);
  v100 = type metadata accessor for URL(0);
  v101 = *(_QWORD *)(v100 - 8);
  v102 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v101 + 48);
  v103 = v102(v98, 1, v100);
  v104 = v102(v99, 1, v100);
  if (!v103)
  {
    if (!v104)
    {
      (*(void (**)(void *, void *, uint64_t))(v101 + 24))(v98, v99, v100);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v101 + 8))(v98, v100);
    goto LABEL_39;
  }
  if (v104)
  {
LABEL_39:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v101 + 16))(v98, v99, v100);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
  return a1;
}

void sub_10009224C(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1001166D8)
  {
    sub_1000143C4(255, (unint64_t *)&qword_100112D38, (uint64_t)&type metadata for Color, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Optional);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for String, v2, "title foreground ", 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1001166D8);
  }
}

uint64_t sub_1000922CC(uint64_t a1)
{
  destroy for HeadlineRubric(a1);
  return a1;
}

id *sub_100092300(id *a1)
{
  destroy for HeadlineThumbnail(a1);
  return a1;
}

uint64_t sub_100092334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;

  v3 = a3;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v8 = *(int *)(a3 + 28);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = (int *)type metadata accessor for PreparedSparkline(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    v14 = v11[5];
    v15 = (char *)v9 + v14;
    v16 = (char *)v10 + v14;
    v17 = type metadata accessor for Date(0);
    v40 = v3;
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
    v18(v15, v16, v17);
    sub_100022800(0);
    v18(&v15[*(int *)(v19 + 36)], &v16[*(int *)(v19 + 36)], v17);
    v3 = v40;
    v20 = v11[6];
    v21 = (char *)v9 + v20;
    v22 = (char *)v10 + v20;
    v23 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
    *(_OWORD *)((char *)v9 + v11[7]) = *(_OWORD *)((char *)v10 + v11[7]);
    v24 = v11[8];
    v25 = (char *)v9 + v24;
    v26 = (char *)v10 + v24;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    *((_BYTE *)v9 + v11[9]) = *((_BYTE *)v10 + v11[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v27 = *(int *)(v3 + 32);
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = *(_OWORD *)(a2 + v27 + 16);
  *(_OWORD *)v28 = *(_OWORD *)(a2 + v27);
  *(_OWORD *)(v28 + 16) = v30;
  *(_OWORD *)(v28 + 32) = *(_OWORD *)(a2 + v27 + 32);
  *(_OWORD *)(v28 + 41) = *(_OWORD *)(a2 + v27 + 41);
  v31 = *(_OWORD *)(a2 + v27 + 80);
  *(_OWORD *)(v28 + 64) = *(_OWORD *)(a2 + v27 + 64);
  *(_OWORD *)(v28 + 80) = v31;
  *(_BYTE *)(v28 + 112) = *(_BYTE *)(a2 + v27 + 112);
  v32 = *(_QWORD *)(a2 + v27 + 104);
  *(_QWORD *)(v28 + 96) = *(_QWORD *)(a2 + v27 + 96);
  *(_QWORD *)(v28 + 104) = v32;
  v33 = *(int *)(type metadata accessor for HeadlineViewModel(0) + 36);
  v34 = (void *)(v28 + v33);
  v35 = (const void *)(v29 + v33);
  v36 = type metadata accessor for URL(0);
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v37 + 32))(v34, v35, v36);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  return a1;
}

uint64_t sub_1000925B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD *, uint64_t, int *);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(void *, uint64_t, uint64_t);
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = (_OWORD *)(a1 + 32);
  v11 = (_OWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a1 + 56);
  if (v12 == 1)
    goto LABEL_4;
  v13 = *(_QWORD *)(a2 + 56);
  if (v13 == 1)
  {
    sub_10002304C(a1 + 32);
LABEL_4:
    v14 = *(_OWORD *)(a2 + 48);
    *v10 = *v11;
    *(_OWORD *)(a1 + 48) = v14;
    goto LABEL_6;
  }
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v13;
  swift_bridgeObjectRelease(v12);
LABEL_6:
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v15 = *(int *)(a3 + 28);
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = (int *)type metadata accessor for PreparedSparkline(0);
  v19 = *((_QWORD *)v18 - 1);
  v20 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (v22)
      goto LABEL_11;
    *v16 = *v17;
    v24 = v18[5];
    v25 = (char *)v16 + v24;
    v26 = (char *)v17 + v24;
    v27 = type metadata accessor for Date(0);
    v79 = a3;
    v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
    v28(v25, v26, v27);
    sub_100022800(0);
    v28(&v25[*(int *)(v29 + 36)], &v26[*(int *)(v29 + 36)], v27);
    a3 = v79;
    v30 = v18[6];
    v31 = (char *)v16 + v30;
    v32 = (char *)v17 + v30;
    v33 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
    *(_OWORD *)((char *)v16 + v18[7]) = *(_OWORD *)((char *)v17 + v18[7]);
    v34 = v18[8];
    v35 = (char *)v16 + v34;
    v36 = (char *)v17 + v34;
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    *((_BYTE *)v16 + v18[9]) = *((_BYTE *)v17 + v18[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
  }
  else
  {
    if (v22)
    {
      sub_10001DF70((uint64_t)v16, type metadata accessor for PreparedSparkline);
LABEL_11:
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      goto LABEL_14;
    }
    v37 = *v16;
    *v16 = *v17;
    swift_bridgeObjectRelease(v37);
    v38 = v18[5];
    v39 = (char *)v16 + v38;
    v40 = (char *)v17 + v38;
    v41 = type metadata accessor for Date(0);
    v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 40);
    v42(v39, v40, v41);
    sub_100022800(0);
    v42(&v39[*(int *)(v43 + 36)], &v40[*(int *)(v43 + 36)], v41);
    v44 = v18[6];
    v45 = (char *)v16 + v44;
    v46 = (char *)v17 + v44;
    v47 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 40))(v45, v46, v47);
    *(_OWORD *)((char *)v16 + v18[7]) = *(_OWORD *)((char *)v17 + v18[7]);
    v48 = v18[8];
    v49 = (char *)v16 + v48;
    v50 = (char *)v17 + v48;
    v49[8] = v50[8];
    *(_QWORD *)v49 = *(_QWORD *)v50;
    *((_BYTE *)v16 + v18[9]) = *((_BYTE *)v17 + v18[9]);
  }
LABEL_14:
  v51 = *(int *)(a3 + 32);
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = *(_QWORD *)(a2 + v51 + 8);
  v55 = *(_QWORD *)(a1 + v51 + 8);
  *(_QWORD *)v52 = *(_QWORD *)(a2 + v51);
  *(_QWORD *)(v52 + 8) = v54;
  swift_bridgeObjectRelease(v55);
  *(_BYTE *)(v52 + 16) = *(_BYTE *)(v53 + 16);
  v56 = *(_BYTE *)(v53 + 56);
  v57 = *(void **)(v52 + 24);
  v58 = *(_QWORD *)(v52 + 32);
  v59 = *(_QWORD *)(v52 + 40);
  v60 = *(_QWORD *)(v52 + 48);
  v61 = *(_BYTE *)(v52 + 56);
  *(_OWORD *)(v52 + 24) = *(_OWORD *)(v53 + 24);
  *(_OWORD *)(v52 + 40) = *(_OWORD *)(v53 + 40);
  *(_BYTE *)(v52 + 56) = v56;
  sub_10000EC04(v57, v58, v59, v60, v61);
  v62 = *(_QWORD *)(v53 + 72);
  v63 = *(_QWORD *)(v52 + 72);
  *(_QWORD *)(v52 + 64) = *(_QWORD *)(v53 + 64);
  *(_QWORD *)(v52 + 72) = v62;
  swift_bridgeObjectRelease(v63);
  v64 = *(_QWORD *)(v52 + 88);
  v65 = *(_QWORD *)(v53 + 88);
  if (v64 == 2)
  {
LABEL_20:
    *(_OWORD *)(v52 + 80) = *(_OWORD *)(v53 + 80);
    *(_QWORD *)(v52 + 96) = *(_QWORD *)(v53 + 96);
    goto LABEL_21;
  }
  if (v65 == 2)
  {
    sub_1000922CC(v52 + 80);
    goto LABEL_20;
  }
  if (v64 < 2)
    goto LABEL_20;
  if (v65 < 2)
  {
    sub_10001DF70(v52 + 80, (uint64_t (*)(_QWORD))sub_10009224C);
    goto LABEL_20;
  }
  *(_QWORD *)(v52 + 80) = *(_QWORD *)(v53 + 80);
  *(_QWORD *)(v52 + 88) = v65;
  swift_bridgeObjectRelease(v64);
  v78 = *(_QWORD *)(v52 + 96);
  *(_QWORD *)(v52 + 96) = *(_QWORD *)(v53 + 96);
  swift_release(v78);
LABEL_21:
  v66 = *(void **)(v52 + 104);
  v67 = *(_QWORD *)(v53 + 104);
  if (v66 == (void *)1)
  {
LABEL_24:
    *(_QWORD *)(v52 + 104) = *(_QWORD *)(v53 + 104);
    *(_BYTE *)(v52 + 112) = *(_BYTE *)(v53 + 112);
    goto LABEL_26;
  }
  if (v67 == 1)
  {
    sub_100092300((id *)(v52 + 104));
    goto LABEL_24;
  }
  *(_QWORD *)(v52 + 104) = v67;

  *(_BYTE *)(v52 + 112) = *(_BYTE *)(v53 + 112);
LABEL_26:
  v68 = *(int *)(type metadata accessor for HeadlineViewModel(0) + 36);
  v69 = (void *)(v52 + v68);
  v70 = (void *)(v53 + v68);
  v71 = type metadata accessor for URL(0);
  v72 = *(_QWORD *)(v71 - 8);
  v73 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v72 + 48);
  v74 = v73(v69, 1, v71);
  v75 = v73(v70, 1, v71);
  if (!v74)
  {
    if (!v75)
    {
      (*(void (**)(void *, void *, uint64_t))(v72 + 40))(v69, v70, v71);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v72 + 8))(v69, v71);
    goto LABEL_31;
  }
  if (v75)
  {
LABEL_31:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v72 + 32))(v69, v70, v71);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
  return a1;
}

uint64_t sub_100092ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100092AE8);
}

uint64_t sub_100092AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = type metadata accessor for HeadlineViewModel(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100092BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100092BAC);
}

uint64_t sub_100092BAC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for HeadlineViewModel(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SmallDetailWithNewsContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100116738;
  if (!qword_100116738)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SmallDetailWithNewsContentView);
  return result;
}

void sub_100092C9C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = " ";
  v6[1] = &unk_1000E10A8;
  v6[2] = &unk_1000E10C0;
  sub_10000EDE8(319, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for HeadlineViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t sub_100092D58(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9780, 1);
}

uint64_t sub_100092D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  unsigned __int8 v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;

  v109 = a2;
  v103 = type metadata accessor for HeadlineView(0);
  __chkstk_darwin(v103);
  v101 = (uint64_t)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100093894(0);
  v105 = v4;
  __chkstk_darwin(v4);
  v102 = (uint64_t)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B594(0, &qword_1001167B8, v6);
  v108 = v7;
  __chkstk_darwin(v7);
  v104 = (uint64_t)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v107 = (uint64_t)&v86 - v10;
  v11 = type metadata accessor for SmallSparklineView(0);
  __chkstk_darwin(v11);
  v106 = (uint64_t)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v100 = (uint64_t)&v86 - v14;
  v15 = type metadata accessor for AccessibilityChildBehavior(0);
  v98 = *(_QWORD *)(v15 - 8);
  v99 = v15;
  __chkstk_darwin(v15);
  v96 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LineTicker(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B594(0, &qword_1001167A8, type metadata accessor for LineTicker);
  v90 = v20;
  __chkstk_darwin(v20);
  v22 = (char *)&v86 - v21;
  sub_100093724(0);
  v95 = v23;
  v93 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v110 = (char *)&v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003D790(0, &qword_100116798, v25, (uint64_t)&type metadata for AccessibilitySimpleTicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v92 = v26;
  __chkstk_darwin(v26);
  v91 = (char *)&v86 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v94 = (uint64_t)&v86 - v29;
  v30 = *(_BYTE *)(a1 + 64);
  v31 = *(_QWORD *)a1;
  v32 = *(_QWORD *)(a1 + 8);
  v33 = *(_QWORD *)(a1 + 16);
  v34 = *(_QWORD *)(a1 + 24);
  v89 = *(_QWORD *)(a1 + 32);
  v35 = v89;
  v37 = *(_QWORD *)(a1 + 48);
  v88 = *(_QWORD *)(a1 + 40);
  v36 = v88;
  v87 = *(_QWORD *)(a1 + 56);
  v38 = v87;
  *v19 = v30;
  *((_QWORD *)v19 + 1) = v31;
  *((_QWORD *)v19 + 2) = v32;
  *((_QWORD *)v19 + 3) = v33;
  *((_QWORD *)v19 + 4) = v34;
  *((_QWORD *)v19 + 5) = v35;
  *((_QWORD *)v19 + 6) = v36;
  *((_QWORD *)v19 + 7) = v37;
  *((_QWORD *)v19 + 8) = v38;
  v39 = &v19[*(int *)(v17 + 28)];
  *(_QWORD *)v39 = swift_getKeyPath(&unk_1000E1128);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v97 = v40;
  swift_storeEnumTagMultiPayload(v39, v40, 0);
  KeyPath = swift_getKeyPath(&unk_1000E1158);
  v42 = swift_allocObject(&unk_100107F38, 41, 7);
  *(_QWORD *)(v42 + 16) = 0;
  *(_BYTE *)(v42 + 24) = 1;
  *(_QWORD *)(v42 + 32) = 0;
  *(_BYTE *)(v42 + 40) = 0;
  sub_10001DE2C((uint64_t)v19, (uint64_t)v22, type metadata accessor for LineTicker);
  v43 = v90;
  v44 = (uint64_t *)&v22[*(int *)(v90 + 36)];
  *v44 = KeyPath;
  v44[1] = (uint64_t)sub_10002453C;
  v44[2] = v42;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v34);
  sub_100024540(v89, v88, v37, v87);
  v45 = sub_10001DF70((uint64_t)v19, type metadata accessor for LineTicker);
  v46 = v96;
  static AccessibilityChildBehavior.combine.getter(v45);
  v47 = sub_1000937A8();
  v48 = v110;
  View.accessibilityElement(children:)(v46, v43, v47);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v46, v99);
  sub_10006647C((uint64_t)v22, &qword_1001167A8, type metadata accessor for LineTicker);
  v86 = a1;
  v49 = *(_QWORD *)(a1 + 8);
  v99 = *(_QWORD *)a1;
  v50 = *(_QWORD *)(a1 + 24);
  v98 = *(_QWORD *)(a1 + 16);
  v51 = *(_QWORD *)(a1 + 32);
  v52 = *(_QWORD *)(a1 + 40);
  v53 = *(_QWORD *)(a1 + 48);
  v54 = *(_QWORD *)(a1 + 56);
  LOBYTE(v37) = *(_BYTE *)(a1 + 64);
  v55 = v93;
  v56 = (uint64_t)v91;
  v57 = v48;
  v58 = v95;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v91, v57, v95);
  v59 = v56 + *(int *)(v92 + 36);
  *(_BYTE *)v59 = v37;
  *(_QWORD *)(v59 + 8) = v99;
  *(_QWORD *)(v59 + 16) = v49;
  *(_QWORD *)(v59 + 24) = v98;
  *(_QWORD *)(v59 + 32) = v50;
  *(_QWORD *)(v59 + 40) = v51;
  *(_QWORD *)(v59 + 48) = v52;
  *(_QWORD *)(v59 + 56) = v53;
  *(_QWORD *)(v59 + 64) = v54;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v50);
  sub_100024540(v51, v52, v53, v54);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v110, v58);
  v60 = v94;
  v61 = sub_100093934(v56, v94);
  v62 = static Alignment.center.getter(v61);
  _FrameLayout.init(width:height:alignment:)(&v111, 0, 1, 0x4020000000000000, 0, v62, v63);
  v110 = v111;
  LODWORD(v99) = v112;
  v98 = v113;
  LODWORD(v96) = v114;
  v95 = v115;
  v93 = v116;
  v64 = type metadata accessor for SmallDetailWithNewsContentView(0);
  v65 = v86;
  v66 = v100;
  sub_1000245D0(v86 + *(int *)(v64 + 28), v100);
  v67 = v101;
  sub_10001DE2C(v65 + *(int *)(v64 + 32), v101, type metadata accessor for HeadlineViewModel);
  sub_100093998(*(id *)(v67 + 104));
  *(_QWORD *)(v67 + 104) = 1;
  *(_BYTE *)(v67 + 112) = 0;
  v68 = (_QWORD *)(v67 + *(int *)(v103 + 20));
  *v68 = swift_getKeyPath(&unk_1000E1128);
  swift_storeEnumTagMultiPayload(v68, v97, 0);
  v69 = v102;
  sub_10001DE2C(v67, v102, type metadata accessor for HeadlineView);
  *(_QWORD *)(v69 + *(int *)(v105 + 36)) = 0x3FF0000000000000;
  sub_10001DF70(v67, type metadata accessor for HeadlineView);
  v70 = swift_getKeyPath(&unk_1000E1158);
  v71 = swift_allocObject(&unk_100107F60, 41, 7);
  *(_QWORD *)(v71 + 16) = 0;
  *(_BYTE *)(v71 + 24) = 0;
  *(_QWORD *)(v71 + 32) = 0;
  *(_BYTE *)(v71 + 40) = 1;
  v72 = v104;
  sub_10001DE2C(v69, v104, (uint64_t (*)(_QWORD))sub_100093894);
  v73 = (uint64_t *)(v72 + *(int *)(v108 + 36));
  *v73 = v70;
  v73[1] = (uint64_t)sub_10002453C;
  v73[2] = v71;
  sub_10001DF70(v69, (uint64_t (*)(_QWORD))sub_100093894);
  v74 = v107;
  sub_1000939B8(v72, v107);
  v75 = v56;
  sub_100093A0C(v60, v56);
  v76 = v66;
  v77 = v66;
  v78 = v106;
  sub_10001DE2C(v76, v106, type metadata accessor for SmallSparklineView);
  v79 = v74;
  sub_100093A70(v74, v72);
  v80 = v109;
  sub_100093A0C(v75, v109);
  sub_10009365C(0);
  v82 = v81;
  v83 = v80 + *(int *)(v81 + 48);
  *(_QWORD *)v83 = 0;
  *(_BYTE *)(v83 + 8) = 1;
  *(_QWORD *)(v83 + 16) = v110;
  *(_BYTE *)(v83 + 24) = v99;
  *(_QWORD *)(v83 + 32) = v98;
  *(_BYTE *)(v83 + 40) = (_BYTE)v96;
  *(_QWORD *)(v83 + 48) = v95;
  *(_QWORD *)(v83 + 56) = v93;
  sub_10001DE2C(v78, v80 + *(int *)(v81 + 64), type metadata accessor for SmallSparklineView);
  v84 = v80 + *(int *)(v82 + 80);
  *(_QWORD *)v84 = 0x4020000000000000;
  *(_BYTE *)(v84 + 8) = 0;
  sub_100093A70(v72, v80 + *(int *)(v82 + 96));
  sub_10006647C(v79, &qword_1001167B8, (uint64_t (*)(uint64_t))sub_100093894);
  sub_10001DF70(v77, type metadata accessor for SmallSparklineView);
  sub_100093AC4(v60);
  sub_10006647C(v72, &qword_1001167B8, (uint64_t (*)(uint64_t))sub_100093894);
  sub_10001DF70(v78, type metadata accessor for SmallSparklineView);
  return sub_100093AC4(v75);
}

uint64_t sub_10009359C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  sub_1000935E0(0);
  return sub_100092D68(v2, a2 + *(int *)(v4 + 44));
}

void sub_1000935E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100116780)
  {
    sub_10000EDE8(255, &qword_100116788, (uint64_t (*)(uint64_t))sub_10009365C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _VStackLayout, v2, &protocol witness table for _VStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100116780);
  }
}

void sub_10009365C(uint64_t a1)
{
  unint64_t TupleTypeMetadata;
  uint64_t v3;

  if (!qword_100116790)
  {
    sub_10003D790(255, &qword_100116798, (uint64_t (*)(uint64_t))sub_100093724, (uint64_t)&type metadata for AccessibilitySimpleTicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    sub_100093838();
    type metadata accessor for SmallSparklineView(255);
    sub_10003B594(255, &qword_1001167B8, (uint64_t (*)(uint64_t))sub_100093894);
    TupleTypeMetadata = swift_getTupleTypeMetadata(a1, 5);
    if (!v3)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_100116790);
  }
}

void sub_100093724(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1001167A0)
  {
    sub_10003B594(255, &qword_1001167A8, type metadata accessor for LineTicker);
    v5[0] = v2;
    v5[1] = sub_1000937A8();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001167A0);
  }
}

unint64_t sub_1000937A8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001167B0;
  if (!qword_1001167B0)
  {
    sub_10003B594(255, &qword_1001167A8, type metadata accessor for LineTicker);
    v2 = v1;
    sub_100003D3C(&qword_100115C48, type metadata accessor for LineTicker, (uint64_t)&unk_1000DD5B8);
    sub_100046184();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001167B0);
  }
  return result;
}

void sub_100093838()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100113A30)
  {
    v0 = type metadata accessor for ModifiedContent(0, &type metadata for Spacer, &type metadata for _FrameLayout);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100113A30);
  }
}

void sub_100093894(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1001167C0)
  {
    v2 = type metadata accessor for HeadlineView(255);
    sub_10003D790(255, (unint64_t *)&qword_100113C08, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutPriorityTraitKey, (uint64_t)&protocol witness table for LayoutPriorityTraitKey, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _TraitWritingModifier);
    v4 = type metadata accessor for ModifiedContent(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1001167C0);
  }
}

uint64_t sub_100093924()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100093934(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10003D790(0, &qword_100116798, (uint64_t (*)(uint64_t))sub_100093724, (uint64_t)&type metadata for AccessibilitySimpleTicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100093998(id a1)
{
  if (a1 != (id)1)

}

uint64_t sub_1000939A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000939B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10003B594(0, &qword_1001167B8, (uint64_t (*)(uint64_t))sub_100093894);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100093A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10003D790(0, &qword_100116798, (uint64_t (*)(uint64_t))sub_100093724, (uint64_t)&type metadata for AccessibilitySimpleTicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100093A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10003B594(0, &qword_1001167B8, (uint64_t (*)(uint64_t))sub_100093894);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100093AC4(uint64_t a1)
{
  uint64_t v2;

  sub_10003D790(0, &qword_100116798, (uint64_t (*)(uint64_t))sub_100093724, (uint64_t)&type metadata for AccessibilitySimpleTicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100093B20()
{
  return sub_100003D3C(&qword_1001167C8, (uint64_t (*)(uint64_t))sub_100093B4C, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

void sub_100093B4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001167D0)
  {
    sub_10000EDE8(255, &qword_100116788, (uint64_t (*)(uint64_t))sub_10009365C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_100093BC4();
    v5 = type metadata accessor for VStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001167D0);
  }
}

unint64_t sub_100093BC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001167D8;
  if (!qword_1001167D8)
  {
    sub_10000EDE8(255, &qword_100116788, (uint64_t (*)(uint64_t))sub_10009365C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001167D8);
  }
  return result;
}

unint64_t sub_100093C28()
{
  unint64_t result;

  result = qword_1001167E0;
  if (!qword_1001167E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StockChartHighlightStyle, &type metadata for StockChartHighlightStyle);
    atomic_store(result, (unint64_t *)&qword_1001167E0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for StockChartHighlightStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100093CB8 + 4 * byte_1000E1185[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100093CEC + 4 * byte_1000E1180[v4]))();
}

uint64_t sub_100093CEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100093CF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100093CFCLL);
  return result;
}

uint64_t sub_100093D08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100093D10);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100093D14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100093D1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StockChartHighlightStyle()
{
  return &type metadata for StockChartHighlightStyle;
}

uint64_t sub_100093D38(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  int *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t *, uint64_t, int *, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t, __n128);
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v58;
  uint64_t v59;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v14);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    v10 = (_OWORD *)(a1 + 48);
    v11 = a2 + 6;
    v12 = a2[9];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v12 == 1)
    {
      v13 = *((_OWORD *)a2 + 4);
      *v10 = *v11;
      *(_OWORD *)(a1 + 64) = v13;
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_QWORD *)(a1 + 72) = v12;
      swift_bridgeObjectRetain(v12);
    }
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    v15 = a2[12];
    v16 = a2[13];
    v17 = a2[14];
    *(_QWORD *)(a1 + 104) = v16;
    *(_QWORD *)(a1 + 112) = v17;
    *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
    *(_BYTE *)(a1 + 137) = *((_BYTE *)a2 + 137);
    v18 = a3[9];
    v19 = (uint64_t *)(a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    *(_QWORD *)(a1 + 96) = v15;
    v21 = (int *)type metadata accessor for PreparedSparkline(0);
    v22 = *((_QWORD *)v21 - 1);
    v23 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v22 + 48);
    v24 = swift_bridgeObjectRetain(v16);
    if (v23(v20, 1, v21, v24))
    {
      sub_10002FCAC(0);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      v27 = v21[5];
      v58 = (char *)v19 + v27;
      v59 = v22;
      v28 = (char *)v20 + v27;
      v29 = type metadata accessor for Date(0);
      v30 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v29 - 8) + 16);
      v31 = swift_bridgeObjectRetain(v26);
      v30(v58, v28, v29, v31);
      sub_100022800(0);
      ((void (*)(char *, char *, uint64_t))v30)(&v58[*(int *)(v32 + 36)], &v28[*(int *)(v32 + 36)], v29);
      v33 = v21[6];
      v34 = (char *)v19 + v33;
      v35 = (char *)v20 + v33;
      v36 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
      *(_OWORD *)((char *)v19 + v21[7]) = *(_OWORD *)((char *)v20 + v21[7]);
      v37 = v21[8];
      v38 = (char *)v19 + v37;
      v39 = (char *)v20 + v37;
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      *((_BYTE *)v19 + v21[9]) = *((_BYTE *)v20 + v21[9]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v59 + 56))(v19, 0, 1, v21);
    }
    v40 = a3[10];
    v41 = a3[11];
    v42 = *(uint64_t *)((char *)a2 + v40);
    *(_QWORD *)(a1 + v40) = v42;
    v43 = (void *)(a1 + v41);
    v44 = (char *)a2 + v41;
    sub_100042D9C(0);
    v46 = v45;
    v47 = *(_QWORD *)(v45 - 8);
    v48 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v47 + 48);
    v49 = swift_bridgeObjectRetain(v42);
    if (v48(v44, 1, v46, v49))
    {
      sub_10001D6B0(0);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v47 + 16))(v43, v44, v46);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v43, 0, 1, v46);
    }
    v51 = a3[12];
    v52 = (void *)(a1 + v51);
    v53 = (char *)a2 + v51;
    v54 = type metadata accessor for URL(0);
    v55 = *(_QWORD *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      sub_100075FE0(0);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
    }
  }
  return a1;
}

uint64_t sub_1000940AC(_QWORD *a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = a1[9];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[13]);
  v5 = (_QWORD *)((char *)a1 + a2[9]);
  v6 = type metadata accessor for PreparedSparkline(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease(*v5);
    v7 = (char *)v5 + *(int *)(v6 + 20);
    v8 = type metadata accessor for Date(0);
    v9 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v9(v7, v8);
    sub_100022800(0);
    v9(&v7[*(int *)(v10 + 36)], v8);
    v11 = (char *)v5 + *(int *)(v6 + 24);
    v12 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[10]));
  v13 = (char *)a1 + a2[11];
  sub_100042D9C(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v14))
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
  v17 = (char *)a1 + a2[12];
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v17, v18);
  return result;
}

uint64_t sub_100094250(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  int *v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t *, uint64_t, int *, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(const void *, uint64_t, uint64_t, __n128);
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  int *v60;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = (_OWORD *)(a1 + 48);
  v10 = a2 + 48;
  v11 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v11 == 1)
  {
    v12 = *(_OWORD *)(v10 + 16);
    *v9 = *(_OWORD *)v10;
    *(_OWORD *)(a1 + 64) = v12;
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(v10 + 8);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v11;
    swift_bridgeObjectRetain(v11);
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v15;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  v16 = a3[9];
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  *(_QWORD *)(a1 + 96) = v13;
  v19 = (int *)type metadata accessor for PreparedSparkline(0);
  v20 = *((_QWORD *)v19 - 1);
  v21 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v20 + 48);
  v22 = swift_bridgeObjectRetain(v14);
  if (v21(v18, 1, v19, v22))
  {
    sub_10002FCAC(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = *v18;
    *v17 = *v18;
    v25 = v19[5];
    v26 = (char *)v17 + v25;
    v60 = a3;
    v27 = (char *)v18 + v25;
    v28 = type metadata accessor for Date(0);
    v59 = v20;
    v29 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 16);
    v30 = swift_bridgeObjectRetain(v24);
    v29(v26, v27, v28, v30);
    sub_100022800(0);
    v32 = *(int *)(v31 + 36);
    v33 = &v27[v32];
    a3 = v60;
    ((void (*)(char *, char *, uint64_t))v29)(&v26[v32], v33, v28);
    v34 = v19[6];
    v35 = (char *)v17 + v34;
    v36 = (char *)v18 + v34;
    v37 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    *(_OWORD *)((char *)v17 + v19[7]) = *(_OWORD *)((char *)v18 + v19[7]);
    v38 = v19[8];
    v39 = (char *)v17 + v38;
    v40 = (char *)v18 + v38;
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    *((_BYTE *)v17 + v19[9]) = *((_BYTE *)v18 + v19[9]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v59 + 56))(v17, 0, 1, v19);
  }
  v41 = a3[10];
  v42 = a3[11];
  v43 = *(_QWORD *)(a2 + v41);
  *(_QWORD *)(a1 + v41) = v43;
  v44 = (void *)(a1 + v42);
  v45 = (const void *)(a2 + v42);
  sub_100042D9C(0);
  v47 = v46;
  v48 = *(_QWORD *)(v46 - 8);
  v49 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v48 + 48);
  v50 = swift_bridgeObjectRetain(v43);
  if (v49(v45, 1, v47, v50))
  {
    sub_10001D6B0(0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v48 + 16))(v44, v45, v47);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v44, 0, 1, v47);
  }
  v52 = a3[12];
  v53 = (void *)(a1 + v52);
  v54 = (const void *)(a2 + v52);
  v55 = type metadata accessor for URL(0);
  v56 = *(_QWORD *)(v55 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
  {
    sub_100075FE0(0);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v56 + 16))(v53, v54, v55);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
  }
  return a1;
}

uint64_t sub_10009459C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int *v30;
  uint64_t v31;
  uint64_t (*v32)(_QWORD *, uint64_t, int *);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t, __n128);
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(void *, uint64_t, uint64_t);
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(void *, uint64_t, uint64_t);
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char v93;
  char *v94;
  int *v95;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = (_OWORD *)(a1 + 48);
  v13 = (_OWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a2 + 72);
  if (v14 == 1)
  {
    if (v15 == 1)
    {
      v16 = *(_OWORD *)(a2 + 64);
      *v12 = *v13;
      *(_OWORD *)(a1 + 64) = v16;
    }
    else
    {
      v18 = *(_QWORD *)v13;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)v12 = v18;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v19 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 72) = v19;
      swift_bridgeObjectRetain(v19);
    }
  }
  else if (v15 == 1)
  {
    sub_10002304C(a1 + 48);
    v17 = *(_OWORD *)(a2 + 64);
    *v12 = *v13;
    *(_OWORD *)(a1 + 64) = v17;
  }
  else
  {
    v20 = *(_QWORD *)v13;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)v12 = v20;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v21 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v21;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v14);
  }
  v22 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v22;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v23 = *(_QWORD *)(a2 + 104);
  v24 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v25;
  v26 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v26;
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  v27 = a3[9];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  v30 = (int *)type metadata accessor for PreparedSparkline(0);
  v31 = *((_QWORD *)v30 - 1);
  v32 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      v35 = *v29;
      *v28 = *v29;
      v36 = v30[5];
      v94 = (char *)v28 + v36;
      v37 = (char *)v29 + v36;
      v95 = a3;
      v38 = type metadata accessor for Date(0);
      v39 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v38 - 8) + 16);
      v40 = swift_bridgeObjectRetain(v35);
      v39(v94, v37, v38, v40);
      sub_100022800(0);
      v42 = v38;
      a3 = v95;
      ((void (*)(char *, char *, uint64_t))v39)(&v94[*(int *)(v41 + 36)], &v37[*(int *)(v41 + 36)], v42);
      v43 = v30[6];
      v44 = (char *)v28 + v43;
      v45 = (char *)v29 + v43;
      v46 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
      *(_OWORD *)((char *)v28 + v30[7]) = *(_OWORD *)((char *)v29 + v30[7]);
      v47 = v30[8];
      v48 = (char *)v28 + v47;
      v49 = (char *)v29 + v47;
      v50 = v49[8];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v50;
      *((_BYTE *)v28 + v30[9]) = *((_BYTE *)v29 + v30[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v34)
  {
    sub_10001DF70((uint64_t)v28, type metadata accessor for PreparedSparkline);
LABEL_13:
    sub_10002FCAC(0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_14;
  }
  v75 = *v29;
  v76 = *v28;
  *v28 = *v29;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRelease(v76);
  v77 = v30[5];
  v78 = (char *)v28 + v77;
  v79 = (char *)v29 + v77;
  v80 = type metadata accessor for Date(0);
  v81 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 24);
  v81(v78, v79, v80);
  sub_100022800(0);
  v81(&v78[*(int *)(v82 + 36)], &v79[*(int *)(v82 + 36)], v80);
  v83 = v30[6];
  v84 = (char *)v28 + v83;
  v85 = (char *)v29 + v83;
  v86 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 24))(v84, v85, v86);
  v87 = v30[7];
  v88 = (_QWORD *)((char *)v28 + v87);
  v89 = (_QWORD *)((char *)v29 + v87);
  *v88 = *v89;
  v88[1] = v89[1];
  v90 = v30[8];
  v91 = (char *)v28 + v90;
  v92 = (char *)v29 + v90;
  v93 = v92[8];
  *(_QWORD *)v91 = *(_QWORD *)v92;
  v91[8] = v93;
  *((_BYTE *)v28 + v30[9]) = *((_BYTE *)v29 + v30[9]);
LABEL_14:
  v52 = a3[10];
  v53 = *(_QWORD *)(a2 + v52);
  v54 = *(_QWORD *)(a1 + v52);
  *(_QWORD *)(a1 + v52) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  v55 = a3[11];
  v56 = (void *)(a1 + v55);
  v57 = (void *)(a2 + v55);
  sub_100042D9C(0);
  v59 = v58;
  v60 = *(_QWORD *)(v58 - 8);
  v61 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v60 + 48);
  v62 = v61(v56, 1, v58);
  v63 = v61(v57, 1, v59);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(void *, void *, uint64_t))(v60 + 16))(v56, v57, v59);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v56, 0, 1, v59);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v63)
  {
    (*(void (**)(void *, uint64_t))(v60 + 8))(v56, v59);
LABEL_19:
    sub_10001D6B0(0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v60 + 24))(v56, v57, v59);
LABEL_20:
  v65 = a3[12];
  v66 = (void *)(a1 + v65);
  v67 = (void *)(a2 + v65);
  v68 = type metadata accessor for URL(0);
  v69 = *(_QWORD *)(v68 - 8);
  v70 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v69 + 48);
  v71 = v70(v66, 1, v68);
  v72 = v70(v67, 1, v68);
  if (!v71)
  {
    if (!v72)
    {
      (*(void (**)(void *, void *, uint64_t))(v69 + 24))(v66, v67, v68);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v69 + 8))(v66, v68);
    goto LABEL_25;
  }
  if (v72)
  {
LABEL_25:
    sub_100075FE0(0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v69 + 16))(v66, v67, v68);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
  return a1;
}

uint64_t sub_100094B20(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v44;

  v3 = a3;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  v9 = *(_OWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  v11 = a3[9];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *(_OWORD *)(a1 + 64) = v9;
  *(_OWORD *)(a1 + 80) = v10;
  v14 = (int *)type metadata accessor for PreparedSparkline(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    sub_10002FCAC(0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v17 = v14[5];
    v18 = (char *)v12 + v17;
    v19 = (char *)v13 + v17;
    v20 = type metadata accessor for Date(0);
    v44 = v3;
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
    v21(v18, v19, v20);
    sub_100022800(0);
    v21(&v18[*(int *)(v22 + 36)], &v19[*(int *)(v22 + 36)], v20);
    v3 = v44;
    v23 = v14[6];
    v24 = (char *)v12 + v23;
    v25 = (char *)v13 + v23;
    v26 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
    *(_OWORD *)((char *)v12 + v14[7]) = *(_OWORD *)((char *)v13 + v14[7]);
    v27 = v14[8];
    v28 = (char *)v12 + v27;
    v29 = (char *)v13 + v27;
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
    *((_BYTE *)v12 + v14[9]) = *((_BYTE *)v13 + v14[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v30 = v3[11];
  *(_QWORD *)(a1 + v3[10]) = *(_QWORD *)(a2 + v3[10]);
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  sub_100042D9C(0);
  v34 = v33;
  v35 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v32, 1, v33))
  {
    sub_10001D6B0(0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 32))(v31, v32, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v31, 0, 1, v34);
  }
  v37 = v3[12];
  v38 = (void *)(a1 + v37);
  v39 = (const void *)(a2 + v37);
  v40 = type metadata accessor for URL(0);
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    sub_100075FE0(0);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v41 + 32))(v38, v39, v40);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  return a1;
}

uint64_t sub_100094DD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int *v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t, int *);
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(void *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(void *, uint64_t, uint64_t);
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int *v80;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = (_OWORD *)(a1 + 48);
  v13 = (_OWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14 == 1)
    goto LABEL_4;
  v15 = *(_QWORD *)(a2 + 72);
  if (v15 == 1)
  {
    sub_10002304C(a1 + 48);
LABEL_4:
    v16 = *(_OWORD *)(a2 + 64);
    *v12 = *v13;
    *(_OWORD *)(a1 + 64) = v16;
    goto LABEL_6;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v15;
  swift_bridgeObjectRelease(v14);
LABEL_6:
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v17;
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = (int *)type metadata accessor for PreparedSparkline(0);
  v23 = *((_QWORD *)v22 - 1);
  v24 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      *v20 = *v21;
      v27 = v22[5];
      v28 = (char *)v20 + v27;
      v29 = (char *)v21 + v27;
      v80 = a3;
      v30 = type metadata accessor for Date(0);
      v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32);
      v31(v28, v29, v30);
      sub_100022800(0);
      v33 = v30;
      a3 = v80;
      v31(&v28[*(int *)(v32 + 36)], &v29[*(int *)(v32 + 36)], v33);
      v34 = v22[6];
      v35 = (char *)v20 + v34;
      v36 = (char *)v21 + v34;
      v37 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
      *(_OWORD *)((char *)v20 + v22[7]) = *(_OWORD *)((char *)v21 + v22[7]);
      v38 = v22[8];
      v39 = (char *)v20 + v38;
      v40 = (char *)v21 + v38;
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v40[8];
      *((_BYTE *)v20 + v22[9]) = *((_BYTE *)v21 + v22[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v26)
  {
    sub_10001DF70((uint64_t)v20, type metadata accessor for PreparedSparkline);
LABEL_11:
    sub_10002FCAC(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_12;
  }
  v64 = *v20;
  *v20 = *v21;
  swift_bridgeObjectRelease(v64);
  v65 = v22[5];
  v66 = (char *)v20 + v65;
  v67 = (char *)v21 + v65;
  v68 = a3;
  v69 = type metadata accessor for Date(0);
  v70 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 40);
  v70(v66, v67, v69);
  sub_100022800(0);
  v72 = v69;
  a3 = v68;
  v70(&v66[*(int *)(v71 + 36)], &v67[*(int *)(v71 + 36)], v72);
  v73 = v22[6];
  v74 = (char *)v20 + v73;
  v75 = (char *)v21 + v73;
  v76 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 40))(v74, v75, v76);
  *(_OWORD *)((char *)v20 + v22[7]) = *(_OWORD *)((char *)v21 + v22[7]);
  v77 = v22[8];
  v78 = (char *)v20 + v77;
  v79 = (char *)v21 + v77;
  v78[8] = v79[8];
  *(_QWORD *)v78 = *(_QWORD *)v79;
  *((_BYTE *)v20 + v22[9]) = *((_BYTE *)v21 + v22[9]);
LABEL_12:
  v42 = a3[10];
  v43 = *(_QWORD *)(a1 + v42);
  *(_QWORD *)(a1 + v42) = *(_QWORD *)(a2 + v42);
  swift_bridgeObjectRelease(v43);
  v44 = a3[11];
  v45 = (void *)(a1 + v44);
  v46 = (void *)(a2 + v44);
  sub_100042D9C(0);
  v48 = v47;
  v49 = *(_QWORD *)(v47 - 8);
  v50 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v45, 1, v47);
  v52 = v50(v46, 1, v48);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, void *, uint64_t))(v49 + 32))(v45, v46, v48);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v45, 0, 1, v48);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v49 + 8))(v45, v48);
LABEL_17:
    sub_10001D6B0(0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(void *, void *, uint64_t))(v49 + 40))(v45, v46, v48);
LABEL_18:
  v54 = a3[12];
  v55 = (void *)(a1 + v54);
  v56 = (void *)(a2 + v54);
  v57 = type metadata accessor for URL(0);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v58 + 48);
  v60 = v59(v55, 1, v57);
  v61 = v59(v56, 1, v57);
  if (!v60)
  {
    if (!v61)
    {
      (*(void (**)(void *, void *, uint64_t))(v58 + 40))(v55, v56, v57);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v58 + 8))(v55, v57);
    goto LABEL_23;
  }
  if (v61)
  {
LABEL_23:
    sub_100075FE0(0);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v58 + 32))(v55, v56, v57);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
  return a1;
}

uint64_t sub_100095298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000952A4);
}

uint64_t sub_1000952A4(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_10002FCAC(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[9];
    }
    else
    {
      sub_10001D6B0(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[11];
      }
      else
      {
        sub_100075FE0(0);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a3[12];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100095368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100095374);
}

uint64_t sub_100095374(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_10002FCAC(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[9];
    }
    else
    {
      sub_10001D6B0(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[11];
      }
      else
      {
        sub_100075FE0(0);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a4[12];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for DetailContentViewModel(uint64_t a1)
{
  return sub_1000071F8(a1, qword_100116840, (uint64_t)&nominal type descriptor for DetailContentViewModel);
}

void sub_100095448(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[9];

  v8[0] = " ";
  v8[1] = &unk_1000E1270;
  v8[2] = &unk_1000E1288;
  v8[3] = &unk_1000E12A0;
  v8[4] = &unk_1000E12B8;
  sub_10002FCAC(319);
  if (v3 <= 0x3F)
  {
    v8[5] = *(_QWORD *)(v2 - 8) + 64;
    v8[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_10001D6B0(319);
    if (v5 <= 0x3F)
    {
      v8[7] = *(_QWORD *)(v4 - 8) + 64;
      sub_100075FE0(319);
      if (v7 <= 0x3F)
      {
        v8[8] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 9, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_100095528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  char v30;
  char v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD v45[2];
  _OWORD v46[2];

  v42 = a2;
  v43 = a3;
  sub_100075FE0(0);
  __chkstk_darwin(v6);
  v44 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D694(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WidgetStock(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001DE2C(a1, (uint64_t)v13, type metadata accessor for WidgetStock);
  v15 = Stock.compactName.getter(v14);
  v17 = v16;
  v18 = Stock.shortName.getter();
  v20 = v19;
  v21 = sub_10001DF70((uint64_t)v13, type metadata accessor for WidgetStock);
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v17;
  *(_QWORD *)(a4 + 16) = v18;
  *(_QWORD *)(a4 + 24) = v20;
  *(_QWORD *)(a4 + 32) = Stock.name.getter(v21);
  *(_QWORD *)(a4 + 40) = v22;
  *(_QWORD *)(a4 + 48) = sub_1000B57BC();
  *(_QWORD *)(a4 + 56) = v23 & 1;
  *(_QWORD *)(a4 + 64) = v24;
  *(_QWORD *)(a4 + 72) = v25;
  sub_10001DE2C(a1, (uint64_t)v13, type metadata accessor for WidgetStock);
  sub_10009BBA8((uint64_t)v13, (uint64_t)v45);
  v26 = v45[1];
  *(_OWORD *)(a4 + 80) = v45[0];
  *(_OWORD *)(a4 + 96) = v26;
  *(_OWORD *)(a4 + 112) = v46[0];
  *(_OWORD *)(a4 + 121) = *(_OWORD *)((char *)v46 + 9);
  sub_10001DE2C(a1 + *(int *)(v11 + 20), (uint64_t)v10, (uint64_t (*)(_QWORD))sub_10001D694);
  v27 = type metadata accessor for WidgetQuote(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v10, 1, v27) == 1)
  {
    sub_10001DF70((uint64_t)v10, (uint64_t (*)(_QWORD))sub_10001D694);
LABEL_7:
    v40 = 2;
    v34 = v43;
    v33 = (uint64_t)v44;
    v35 = v42;
    goto LABEL_8;
  }
  v29 = COERCE_DOUBLE(WidgetQuote.priceChange.getter());
  v31 = v30;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v27);
  if ((v31 & 1) != 0)
    goto LABEL_7;
  v32 = v29 < 0.0;
  v34 = v43;
  v33 = (uint64_t)v44;
  v35 = v42;
  v40 = v32;
LABEL_8:
  *(_BYTE *)(a4 + 137) = v40;
  v36 = (int *)type metadata accessor for DetailContentViewModel(0);
  *(_QWORD *)(a4 + v36[10]) = v35;
  sub_10001DE2C(v34, a4 + v36[11], (uint64_t (*)(_QWORD))sub_10001D6B0);
  v37 = sub_10001DE2C(a1 + *(int *)(v11 + 24), a4 + v36[9], (uint64_t (*)(_QWORD))sub_10002FCAC);
  Stock.universalLinkURL.getter(v37);
  sub_10001DF70(v34, (uint64_t (*)(_QWORD))sub_10001D6B0);
  sub_10001DF70(a1, type metadata accessor for WidgetStock);
  v38 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v33, 0, 1, v38);
  return sub_10000ED3C(v33, a4 + v36[12], (uint64_t (*)(_QWORD))sub_100075FE0);
}

uint64_t sub_100095810(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100095848
                                                            + 4 * asc_1000E1220[a1]))(0x614E6C6F626D7973, 0xEA0000000000656DLL);
}

uint64_t sub_100095848()
{
  return 0x4E796E61706D6F63;
}

uint64_t sub_10009586C()
{
  return 0x6563697270;
}

uint64_t sub_100095880()
{
  return 0x6168436563697270;
}

unint64_t sub_1000958A0()
{
  return 0xD000000000000010;
}

uint64_t sub_1000958BC()
{
  return 0x6E696C6B72617073;
}

uint64_t sub_1000958DC()
{
  return 0x74654465746F7571;
}

uint64_t sub_1000958FC()
{
  return 0x656E696C64616568;
}

uint64_t sub_10009591C()
{
  return 0x52556C6F626D7973;
}

uint64_t sub_100095938(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;

  v3 = v1;
  sub_100098548(0, &qword_1001168F8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedEncodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v42 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_100098360();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DetailContentViewModel.CodingKeys, &type metadata for DetailContentViewModel.CodingKeys, v12, v10, v11);
  v13 = *((_QWORD *)v3 + 2);
  v14 = *((_QWORD *)v3 + 3);
  v42 = *v3;
  *(_QWORD *)&v43 = v13;
  *((_QWORD *)&v43 + 1) = v14;
  v48 = 0;
  v15 = sub_1000985A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v48, v6, &type metadata for SymbolName, v15);
  if (!v2)
  {
    v16 = *((_QWORD *)v3 + 4);
    v17 = *((_QWORD *)v3 + 5);
    LOBYTE(v42) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v42, v6);
    v18 = v3[4];
    v42 = v3[3];
    v43 = v18;
    v48 = 2;
    v19 = sub_1000985E8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v48, v6, &type metadata for StockPrice, v19);
    v20 = *((_BYTE *)v3 + 88);
    v21 = *((_QWORD *)v3 + 14);
    v22 = *((_BYTE *)v3 + 120);
    v23 = *((_QWORD *)v3 + 16);
    v24 = *((_BYTE *)v3 + 136);
    *(_QWORD *)&v42 = *((_QWORD *)v3 + 10);
    BYTE8(v42) = v20;
    v43 = v3[6];
    v44 = v21;
    v45 = v22;
    v46 = v23;
    v47 = v24;
    v48 = 3;
    v25 = sub_10009862C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v48, v6, &type metadata for PriceChange, v25);
    LOBYTE(v42) = *((_BYTE *)v3 + 137);
    v48 = 4;
    v26 = sub_10006CA10();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v48, v6, &type metadata for ValueChangeTrend, v26);
    v27 = (int *)type metadata accessor for DetailContentViewModel(0);
    v28 = (uint64_t)v3 + v27[9];
    LOBYTE(v42) = 5;
    v29 = type metadata accessor for PreparedSparkline(0);
    v30 = sub_100003D3C(&qword_100116918, type metadata accessor for PreparedSparkline, (uint64_t)&unk_1000DFA20);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v42, v6, v29, v30);
    *(_QWORD *)&v42 = *(_QWORD *)((char *)v3 + v27[10]);
    v48 = 6;
    sub_100098470();
    v32 = v31;
    v33 = sub_10004EB5C(&qword_100116920, (uint64_t (*)(uint64_t))sub_100098470, (void (*)(void))sub_100098670, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v48, v6, v32, v33);
    v34 = (uint64_t)v3 + v27[11];
    LOBYTE(v42) = 7;
    sub_100042D9C(0);
    v36 = v35;
    v37 = sub_10004EB5C(&qword_100116930, (uint64_t (*)(uint64_t))sub_100042D9C, (void (*)(void))sub_1000986B4, (uint64_t)&protocol conformance descriptor for <> NonEmpty<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v34, &v42, v6, v36, v37);
    v38 = (uint64_t)v3 + v27[12];
    LOBYTE(v42) = 8;
    v39 = type metadata accessor for URL(0);
    v40 = sub_100003D3C(&qword_100116948, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v38, &v42, v6, v39, v40);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_100095D04(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  char v65;

  v53 = a2;
  sub_100075FE0(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D6B0(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002FCAC(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098548(0, &qword_100116898, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedDecodingContainer);
  v54 = v12;
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v51 - v14;
  v58 = type metadata accessor for DetailContentViewModel(0);
  __chkstk_darwin(v58);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v19 = a1[4];
  v56 = a1;
  sub_100007184(a1, v18);
  v20 = sub_100098360();
  v55 = v15;
  v21 = v57;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DetailContentViewModel.CodingKeys, &type metadata for DetailContentViewModel.CodingKeys, v20, v18, v19);
  if (v21)
  {
    sub_100007164(v56);
  }
  else
  {
    v57 = v8;
    v22 = v13;
    v52 = v5;
    v65 = 0;
    v23 = sub_1000983A4();
    v24 = v54;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v59, &type metadata for SymbolName, &v65, v54, &type metadata for SymbolName, v23);
    v25 = v60;
    *(_OWORD *)v17 = v59;
    *((_OWORD *)v17 + 1) = v25;
    LOBYTE(v59) = 1;
    v26 = KeyedDecodingContainer.decode(_:forKey:)(&v59, v24);
    v27 = v56;
    *((_QWORD *)v17 + 4) = v26;
    *((_QWORD *)v17 + 5) = v28;
    v65 = 2;
    v29 = sub_1000983E8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for StockPrice, &v65, v24, &type metadata for StockPrice, v29);
    v30 = v60;
    *((_OWORD *)v17 + 3) = v59;
    *((_OWORD *)v17 + 4) = v30;
    v65 = 3;
    v31 = sub_10009842C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v59, &type metadata for PriceChange, &v65, v24, &type metadata for PriceChange, v31);
    v32 = BYTE8(v59);
    v33 = v61;
    v34 = v62;
    v35 = v63;
    v36 = v64;
    *((_QWORD *)v17 + 10) = v59;
    v17[88] = v32;
    *((_OWORD *)v17 + 6) = v60;
    *((_QWORD *)v17 + 14) = v33;
    v17[120] = v34;
    *((_QWORD *)v17 + 16) = v35;
    v17[136] = v36;
    v65 = 4;
    v37 = sub_10006C938();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ValueChangeTrend, &v65, v24, &type metadata for ValueChangeTrend, v37);
    MEMORY[0x89] = v59;
    v38 = type metadata accessor for PreparedSparkline(0);
    LOBYTE(v59) = 5;
    v39 = sub_100003D3C(&qword_1001168C0, type metadata accessor for PreparedSparkline, (uint64_t)&unk_1000DFA48);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v38, &v59, v24, v38, v39);
    v40 = v58;
    sub_10000ED3C((uint64_t)v11, *(int *)(v58 + 36), (uint64_t (*)(_QWORD))sub_10002FCAC);
    sub_100098470();
    v42 = v41;
    v65 = 6;
    v43 = sub_10004EB5C(&qword_1001168C8, (uint64_t (*)(uint64_t))sub_100098470, (void (*)(void))sub_1000984C4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v59, v42, &v65, v24, v42, v43);
    *(_QWORD *)&v17[*(int *)(v40 + 40)] = v59;
    sub_100042D9C(0);
    v45 = v44;
    LOBYTE(v59) = 7;
    v46 = sub_10004EB5C(&qword_1001168D8, (uint64_t (*)(uint64_t))sub_100042D9C, (void (*)(void))sub_100098508, (uint64_t)&protocol conformance descriptor for <> NonEmpty<A>);
    v47 = (uint64_t)v57;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v45, &v59, v54, v45, v46);
    sub_10000ED3C(v47, (uint64_t)&v17[*(int *)(v40 + 44)], (uint64_t (*)(_QWORD))sub_10001D6B0);
    v48 = type metadata accessor for URL(0);
    LOBYTE(v59) = 8;
    v49 = sub_100003D3C(&qword_1001168F0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v50 = (uint64_t)v52;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v48, &v59, v54, v48, v49);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v55, v54);
    sub_10000ED3C(v50, (uint64_t)&v17[*(int *)(v58 + 48)], (uint64_t (*)(_QWORD))sub_100075FE0);
    sub_10001DE2C((uint64_t)v17, v53, type metadata accessor for DetailContentViewModel);
    sub_100007164(v27);
    sub_10001DF70((uint64_t)v17, type metadata accessor for DetailContentViewModel);
  }
}

uint64_t sub_100096428()
{
  unsigned __int8 *v0;

  return sub_100095810(*v0);
}

uint64_t sub_100096430@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009ADAC(a1, a2);
  *a3 = result;
  return result;
}

void sub_100096454(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_100096460(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100098360();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100096488(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100098360();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000964B0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100095D04(a1, a2);
}

uint64_t sub_1000964C4(_QWORD *a1)
{
  return sub_100095938(a1);
}

uint64_t sub_1000964D8@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t OpaqueTypeConformance2;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;

  v3 = v2;
  v60 = a1;
  v4 = type metadata accessor for ContainerBackgroundPlacement(0, a2);
  v61 = *(_QWORD *)(v4 - 8);
  v62 = v4;
  __chkstk_darwin(v4);
  v59 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DynamicTypeSize(0);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  __chkstk_darwin(v6);
  v54 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ColorScheme(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009A548(0);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002BC34(0, &qword_100116AA8, v15, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v17 = v16;
  __chkstk_darwin(v16);
  v19 = (char *)&v51 - v18;
  sub_10009AA00(0);
  v21 = v20;
  v53 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009AB54(0);
  v25 = *(_QWORD *)(v24 - 8);
  v57 = v24;
  v58 = v25;
  v26 = __chkstk_darwin(v24);
  v52 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v14 = static Alignment.bottom.getter(v26);
  v14[1] = v28;
  sub_10009AC14(0);
  sub_1000968D4(v3, (uint64_t)v14 + *(int *)(v29 + 44));
  KeyPath = swift_getKeyPath(&unk_1000E14B8);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for ColorScheme.dark(_:), v8);
  v31 = (uint64_t *)&v19[*(int *)(v17 + 36)];
  sub_10002BE28(0);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)v31 + *(int *)(v32 + 28), v11, v8);
  *v31 = KeyPath;
  sub_10001DE2C((uint64_t)v14, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_10009A548);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_10001DF70((uint64_t)v14, (uint64_t (*)(_QWORD))sub_10009A548);
  v34 = v54;
  v33 = v55;
  v35 = v56;
  (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v54, enum case for DynamicTypeSize.large(_:), v56);
  v36 = sub_10009AA94();
  View.dynamicTypeSize(_:)(v34, v17, v36);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
  sub_10009AC80((uint64_t)v19);
  v37 = v51 + *(int *)(type metadata accessor for DetailContentViewModel(0) + 48);
  v63 = v17;
  v64 = v36;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v63, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
  v39 = v52;
  View.widgetURL(_:)(v37, v21, OpaqueTypeConformance2);
  v40 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v23, v21);
  v41 = v59;
  v42 = static ContainerBackgroundPlacement.widget.getter(v40);
  v43 = static Alignment.center.getter(v42);
  v45 = v44;
  v63 = v21;
  v64 = OpaqueTypeConformance2;
  v46 = swift_getOpaqueTypeConformance2(&v63, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  v47 = sub_10002C1A8();
  v48 = v43;
  v49 = v57;
  View.containerBackground<A>(for:alignment:content:)(v41, v48, v45, nullsub_1, 0, v57, &type metadata for TodayBackgroundView, v46, v47);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v41, v62);
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v39, v49);
}

uint64_t sub_1000968D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t);
  int v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t KeyPath;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(uint64_t);
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t (*v175)(uint64_t);
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t result;
  Swift::String v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  Swift::String v218;
  void *object;
  __n128 v220;
  Swift::String v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;

  v267 = a2;
  v3 = type metadata accessor for DetailContentView(0);
  __chkstk_darwin(v3);
  v226 = (uint64_t)&v222 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v243 = type metadata accessor for LargeDetailContentView(0);
  __chkstk_darwin(v243);
  v231 = (char *)&v222 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009ACDC(0, &qword_100116AD8, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent.Storage);
  v245 = v6;
  __chkstk_darwin(v6);
  v246 = (uint64_t)&v222 - v7;
  sub_10002BC34(0, &qword_100116AE0, type metadata accessor for LargeDetailWithNewsContentView, type metadata accessor for LargeDetailContentView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v238 = v8;
  __chkstk_darwin(v8);
  v241 = (uint64_t)&v222 - v9;
  sub_10009A6BC(0);
  v242 = v10;
  __chkstk_darwin(v10);
  v244 = (char *)&v222 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009A6A8(0);
  v266 = v12;
  __chkstk_darwin(v12);
  v247 = (char *)&v222 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v249 = type metadata accessor for LargeDetailWithNewsContentView(0);
  __chkstk_darwin(v249);
  v230 = (char *)&v222 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = type metadata accessor for MediumDetailContentView(0);
  __chkstk_darwin(v239);
  v229 = (char *)&v222 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BC34(0, &qword_100116AE8, type metadata accessor for MediumDetailWithNewsContentView, v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v236 = v17;
  __chkstk_darwin(v17);
  v237 = (uint64_t)&v222 - v18;
  sub_10009A684(0);
  v259 = v19;
  __chkstk_darwin(v19);
  v240 = (char *)&v222 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = type metadata accessor for MediumDetailWithNewsContentView(0);
  __chkstk_darwin(v248);
  v228 = (char *)&v222 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002FCAC(0);
  __chkstk_darwin(v22);
  v234 = (uint64_t)&v222 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v253 = type metadata accessor for SmallDetailContentView(0);
  __chkstk_darwin(v253);
  v233 = (uint64_t *)((char *)&v222 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v25);
  v235 = (uint64_t)&v222 - v26;
  sub_10002BC34(0, &qword_100116AF0, (uint64_t (*)(uint64_t))sub_10009A63C, (uint64_t (*)(uint64_t))sub_10009A6A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v260 = v27;
  __chkstk_darwin(v27);
  v263 = (uint64_t)&v222 - v28;
  sub_10002BC34(0, &qword_100116AF8, (uint64_t (*)(uint64_t))sub_10009A660, (uint64_t (*)(uint64_t))sub_10009A684, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v255 = v29;
  __chkstk_darwin(v29);
  v257 = (uint64_t)&v222 - v30;
  sub_10002BC34(0, &qword_100116B00, type metadata accessor for SmallDetailWithNewsContentView, type metadata accessor for SmallDetailContentView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v250 = v31;
  __chkstk_darwin(v31);
  v251 = (uint64_t)&v222 - v32;
  sub_10009A660(0);
  v256 = v33;
  __chkstk_darwin(v33);
  v252 = (char *)&v222 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009A63C(0);
  v261 = v35;
  __chkstk_darwin(v35);
  v258 = (char *)&v222 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = type metadata accessor for SmallDetailWithNewsContentView(0);
  __chkstk_darwin(v254);
  v232 = (char *)&v222 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042D9C(0);
  v39 = v38;
  v40 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v268 = (uint64_t)&v222 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009AD3C(0);
  v43 = v42;
  __chkstk_darwin(v42);
  v45 = (char *)&v222 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for WidgetFamily(0);
  v47 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v223 = (uint64_t *)((char *)&v222 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v49);
  v51 = (char *)&v222 - v50;
  v227 = v3;
  sub_100045E2C((uint64_t *)((char *)&v222 - v50));
  v52 = (int *)type metadata accessor for DetailContentViewModel(0);
  v53 = a1 + v52[11];
  v54 = (uint64_t)&v45[*(int *)(v43 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v45, v51, v46);
  sub_10001DE2C(v53, v54, (uint64_t (*)(_QWORD))sub_10001D6B0);
  v264 = v47;
  v265 = v46;
  v55 = *(uint64_t (**)(char *, uint64_t))(v47 + 88);
  v262 = v45;
  v56 = v55(v45, v46);
  if (v56 == enum case for WidgetFamily.systemSmall(_:))
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v54, 1, v39) == 1)
    {
      v57 = *(char **)(a1 + 8);
      v246 = *(_QWORD *)a1;
      v247 = v57;
      v58 = *(_QWORD *)(a1 + 24);
      v245 = *(_QWORD *)(a1 + 16);
      v248 = v58;
      v59 = *(_QWORD *)(a1 + 40);
      v244 = *(char **)(a1 + 32);
      v249 = v59;
      v61 = *(_QWORD *)(a1 + 48);
      v60 = *(_QWORD *)(a1 + 56);
      v62 = *(_QWORD *)(a1 + 72);
      v236 = *(_QWORD *)(a1 + 64);
      v268 = v62;
      LODWORD(v243) = *(unsigned __int8 *)(a1 + 137);
      v242 = *(_QWORD *)(a1 + 80);
      LODWORD(v241) = *(unsigned __int8 *)(a1 + 88);
      v63 = *(_QWORD *)(a1 + 104);
      v240 = *(char **)(a1 + 96);
      v239 = *(_QWORD *)(a1 + 112);
      LODWORD(v238) = *(unsigned __int8 *)(a1 + 120);
      v237 = *(_QWORD *)(a1 + 128);
      v64 = a1 + v52[9];
      v65 = *(_BYTE *)(a1 + 136);
      v66 = v234;
      sub_10001DE2C(v64, v234, (uint64_t (*)(_QWORD))sub_10002FCAC);
      KeyPath = swift_getKeyPath(&unk_1000E14E8);
      v68 = (uint64_t)v233;
      *v233 = KeyPath;
      *(_QWORD *)(v68 + 8) = 0;
      *(_QWORD *)(v68 + 16) = 0;
      *(_QWORD *)(v68 + 24) = 0;
      *(_QWORD *)(v68 + 40) = v246;
      *(_QWORD *)(v68 + 48) = v57;
      *(_QWORD *)(v68 + 56) = v245;
      *(_QWORD *)(v68 + 64) = v58;
      *(_QWORD *)(v68 + 72) = v244;
      *(_QWORD *)(v68 + 80) = v59;
      *(_QWORD *)(v68 + 88) = v61;
      *(_QWORD *)(v68 + 96) = v60;
      v69 = v60;
      v70 = v236;
      *(_QWORD *)(v68 + 104) = v236;
      *(_QWORD *)(v68 + 112) = v62;
      *(_BYTE *)(v68 + 120) = v243;
      *(_QWORD *)(v68 + 128) = v242;
      *(_BYTE *)(v68 + 136) = v241;
      *(_QWORD *)(v68 + 144) = v240;
      *(_QWORD *)(v68 + 152) = v63;
      *(_QWORD *)(v68 + 160) = v239;
      *(_BYTE *)(v68 + 168) = v238;
      *(_QWORD *)(v68 + 176) = v237;
      *(_BYTE *)(v68 + 184) = v65;
      v71 = v253;
      v72 = v68 + *(int *)(v253 + 40);
      *(_BYTE *)(v68 + 32) = 0;
      sub_10000ED3C(v66, v72, (uint64_t (*)(_QWORD))sub_10002FCAC);
      v73 = type metadata accessor for SmallDetailContentView;
      v74 = v235;
      sub_10000ED3C(v68, v235, type metadata accessor for SmallDetailContentView);
      v75 = v251;
      sub_10001DE2C(v74, v251, type metadata accessor for SmallDetailContentView);
      swift_storeEnumTagMultiPayload(v75, v250, 1);
      swift_bridgeObjectRetain(v247);
      swift_bridgeObjectRetain(v248);
      swift_bridgeObjectRetain(v249);
      sub_100024540(v61, v69, v70, v268);
      v76 = sub_100003D3C(&qword_100116A60, type metadata accessor for SmallDetailWithNewsContentView, (uint64_t)&unk_1000E10D8);
      v77 = sub_100003D3C(&qword_100116A68, type metadata accessor for SmallDetailContentView, (uint64_t)&unk_1000E39D8);
      swift_bridgeObjectRetain(v63);
      v78 = (uint64_t)v252;
      _ConditionalContent<>.init(storage:)(v75, v254, v71, v76, v77);
      v79 = v257;
      sub_10001DE2C(v78, v257, (uint64_t (*)(_QWORD))sub_10009A660);
      swift_storeEnumTagMultiPayload(v79, v255, 0);
      v80 = sub_10009A7D0();
      v81 = sub_10009A868();
      v82 = (uint64_t)v258;
      _ConditionalContent<>.init(storage:)(v79, v256, v259, v80, v81);
      sub_10001DF70(v78, (uint64_t (*)(_QWORD))sub_10009A660);
      v83 = v263;
      sub_10001DE2C(v82, v263, (uint64_t (*)(_QWORD))sub_10009A63C);
      swift_storeEnumTagMultiPayload(v83, v260, 0);
      v84 = sub_10009A768();
      v85 = sub_10009A900();
      _ConditionalContent<>.init(storage:)(v83, v261, v266, v84, v85);
      sub_10001DF70(v82, (uint64_t (*)(_QWORD))sub_10009A63C);
      v86 = v74;
LABEL_12:
      sub_10001DF70(v86, v73);
      return (*(uint64_t (**)(char *, uint64_t))(v264 + 8))(v262, v265);
    }
    v114 = v40;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v268, v54, v39);
    v115 = *(_QWORD *)(a1 + 8);
    v249 = *(_QWORD *)a1;
    v116 = *(_QWORD *)(a1 + 24);
    v248 = *(_QWORD *)(a1 + 16);
    v225 = v114;
    v117 = *(_QWORD *)(a1 + 48);
    v118 = *(_QWORD *)(a1 + 56);
    v224 = v39;
    v119 = *(_QWORD *)(a1 + 64);
    v120 = *(_QWORD *)(a1 + 72);
    v121 = a1 + v52[9];
    v122 = (uint64_t)v232;
    v123 = *(_BYTE *)(a1 + 137);
    sub_10001DE2C(v121, (uint64_t)&v232[*(int *)(v254 + 28)], (uint64_t (*)(_QWORD))sub_10002FCAC);
    swift_bridgeObjectRetain(v115);
    swift_bridgeObjectRetain(v116);
    sub_100024540(v117, v118, v119, v120);
    NonEmpty.first.getter(v39);
    *(_QWORD *)v122 = v249;
    *(_QWORD *)(v122 + 8) = v115;
    *(_QWORD *)(v122 + 16) = v248;
    *(_QWORD *)(v122 + 24) = v116;
    *(_QWORD *)(v122 + 32) = v117;
    *(_QWORD *)(v122 + 40) = v118;
    *(_QWORD *)(v122 + 48) = v119;
    *(_QWORD *)(v122 + 56) = v120;
    *(_BYTE *)(v122 + 64) = v123;
    v124 = v251;
    sub_10001DE2C(v122, v251, type metadata accessor for SmallDetailWithNewsContentView);
    swift_storeEnumTagMultiPayload(v124, v250, 0);
    v125 = sub_100003D3C(&qword_100116A60, type metadata accessor for SmallDetailWithNewsContentView, (uint64_t)&unk_1000E10D8);
    v126 = sub_100003D3C(&qword_100116A68, type metadata accessor for SmallDetailContentView, (uint64_t)&unk_1000E39D8);
    v127 = (uint64_t)v252;
    _ConditionalContent<>.init(storage:)(v124, v254, v253, v125, v126);
    v128 = v257;
    sub_10001DE2C(v127, v257, (uint64_t (*)(_QWORD))sub_10009A660);
    swift_storeEnumTagMultiPayload(v128, v255, 0);
    v129 = sub_10009A7D0();
    v130 = sub_10009A868();
    v131 = (uint64_t)v258;
    _ConditionalContent<>.init(storage:)(v128, v256, v259, v129, v130);
    sub_10001DF70(v127, (uint64_t (*)(_QWORD))sub_10009A660);
    v132 = v263;
    sub_10001DE2C(v131, v263, (uint64_t (*)(_QWORD))sub_10009A63C);
    swift_storeEnumTagMultiPayload(v132, v260, 0);
    v133 = sub_10009A768();
    v134 = sub_10009A900();
    _ConditionalContent<>.init(storage:)(v132, v261, v266, v133, v134);
    sub_10001DF70(v131, (uint64_t (*)(_QWORD))sub_10009A63C);
    v135 = v122;
    v136 = type metadata accessor for SmallDetailWithNewsContentView;
LABEL_16:
    sub_10001DF70(v135, v136);
    (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v268, v224);
    return (*(uint64_t (**)(char *, uint64_t))(v264 + 8))(v262, v265);
  }
  if (v56 == enum case for WidgetFamily.systemMedium(_:))
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v54, 1, v39) == 1)
    {
      v252 = *(char **)a1;
      v235 = *(_QWORD *)(a1 + 8);
      v87 = *(_QWORD *)(a1 + 16);
      v253 = *(_QWORD *)(a1 + 24);
      v88 = v253;
      v89 = *(_QWORD *)(a1 + 40);
      v250 = *(_QWORD *)(a1 + 32);
      v251 = v87;
      v90 = *(_QWORD *)(a1 + 56);
      v238 = *(_QWORD *)(a1 + 48);
      v91 = *(_QWORD *)(a1 + 72);
      v254 = *(_QWORD *)(a1 + 64);
      v92 = v254;
      v241 = v91;
      LODWORD(v249) = *(unsigned __int8 *)(a1 + 137);
      v247 = *(char **)(a1 + 80);
      LODWORD(v246) = *(unsigned __int8 *)(a1 + 88);
      v93 = *(_QWORD *)(a1 + 104);
      v245 = *(_QWORD *)(a1 + 96);
      v244 = *(char **)(a1 + 112);
      LODWORD(v243) = *(unsigned __int8 *)(a1 + 120);
      v242 = *(_QWORD *)(a1 + 128);
      v94 = v239;
      v95 = (uint64_t)v229;
      v96 = *(_BYTE *)(a1 + 136);
      sub_10001DE2C(a1 + v52[9], (uint64_t)&v229[*(int *)(v239 + 36)], (uint64_t (*)(_QWORD))sub_10002FCAC);
      v268 = *(_QWORD *)(a1 + v52[10]);
      v97 = v268;
      v98 = v235;
      *(_QWORD *)v95 = v252;
      *(_QWORD *)(v95 + 8) = v98;
      *(_QWORD *)(v95 + 16) = v251;
      *(_QWORD *)(v95 + 24) = v88;
      *(_QWORD *)(v95 + 32) = v250;
      *(_QWORD *)(v95 + 40) = v89;
      v99 = v238;
      *(_QWORD *)(v95 + 48) = v238;
      *(_QWORD *)(v95 + 56) = v90;
      *(_QWORD *)(v95 + 64) = v92;
      v100 = v241;
      *(_QWORD *)(v95 + 72) = v241;
      *(_BYTE *)(v95 + 80) = v249;
      *(_QWORD *)(v95 + 88) = v247;
      *(_BYTE *)(v95 + 96) = v246;
      *(_QWORD *)(v95 + 104) = v245;
      *(_QWORD *)(v95 + 112) = v93;
      *(_QWORD *)(v95 + 120) = v244;
      *(_BYTE *)(v95 + 128) = v243;
      *(_QWORD *)(v95 + 136) = v242;
      *(_BYTE *)(v95 + 144) = v96;
      *(_QWORD *)(v95 + *(int *)(v94 + 40)) = v97;
      v101 = v237;
      sub_10001DE2C(v95, v237, type metadata accessor for MediumDetailContentView);
      swift_storeEnumTagMultiPayload(v101, v236, 1);
      swift_bridgeObjectRetain(v98);
      swift_bridgeObjectRetain(v253);
      swift_bridgeObjectRetain(v89);
      sub_100024540(v99, v90, v254, v100);
      v102 = sub_100003D3C(&qword_100116A78, type metadata accessor for MediumDetailWithNewsContentView, (uint64_t)&unk_1000E0AF8);
      v73 = type metadata accessor for MediumDetailContentView;
      v103 = sub_100003D3C(&qword_100116A80, type metadata accessor for MediumDetailContentView, (uint64_t)&unk_1000DC960);
      swift_bridgeObjectRetain(v93);
      swift_bridgeObjectRetain(v268);
      v104 = (uint64_t)v240;
      _ConditionalContent<>.init(storage:)(v101, v248, v94, v102, v103);
      v105 = v257;
      sub_10001DE2C(v104, v257, (uint64_t (*)(_QWORD))sub_10009A684);
      swift_storeEnumTagMultiPayload(v105, v255, 1);
      v106 = sub_10009A7D0();
      v107 = sub_10009A868();
      v108 = (uint64_t)v258;
      _ConditionalContent<>.init(storage:)(v105, v256, v259, v106, v107);
      sub_10001DF70(v104, (uint64_t (*)(_QWORD))sub_10009A684);
      v109 = sub_10009A63C;
      v110 = v263;
      sub_10001DE2C(v108, v263, (uint64_t (*)(_QWORD))sub_10009A63C);
      v111 = v110;
      v112 = v260;
      v113 = 0;
LABEL_11:
      swift_storeEnumTagMultiPayload(v111, v112, v113);
      v157 = sub_10009A768();
      v158 = sub_10009A900();
      _ConditionalContent<>.init(storage:)(v110, v261, v266, v157, v158);
      sub_10001DF70(v108, (uint64_t (*)(_QWORD))v109);
      v86 = v95;
      goto LABEL_12;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v268, v54, v39);
    v224 = v39;
    v254 = *(_QWORD *)a1;
    v238 = *(_QWORD *)(a1 + 8);
    v159 = v40;
    v225 = v40;
    v160 = *(_QWORD *)(a1 + 16);
    v161 = *(_QWORD *)(a1 + 24);
    v252 = *(char **)(a1 + 32);
    v253 = v160;
    v241 = *(_QWORD *)(a1 + 40);
    v162 = *(_QWORD *)(a1 + 56);
    v243 = *(_QWORD *)(a1 + 48);
    v163 = *(_QWORD *)(a1 + 64);
    v242 = *(_QWORD *)(a1 + 72);
    LODWORD(v251) = *(unsigned __int8 *)(a1 + 137);
    v250 = *(_QWORD *)(a1 + 80);
    LODWORD(v249) = *(unsigned __int8 *)(a1 + 88);
    v164 = *(_QWORD *)(a1 + 104);
    v247 = *(char **)(a1 + 96);
    v246 = *(_QWORD *)(a1 + 112);
    LODWORD(v245) = *(unsigned __int8 *)(a1 + 120);
    v244 = *(char **)(a1 + 128);
    v165 = a1 + v52[9];
    v166 = v248;
    v167 = (uint64_t)v228;
    v168 = (uint64_t)&v228[*(int *)(v248 + 36)];
    LODWORD(v235) = *(unsigned __int8 *)(a1 + 136);
    sub_10001DE2C(v165, v168, (uint64_t (*)(_QWORD))sub_10002FCAC);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v159 + 16))(v167 + *(int *)(v166 + 40), v268, v39);
    v169 = v238;
    *(_QWORD *)v167 = v254;
    *(_QWORD *)(v167 + 8) = v169;
    *(_QWORD *)(v167 + 16) = v253;
    *(_QWORD *)(v167 + 24) = v161;
    v170 = v241;
    *(_QWORD *)(v167 + 32) = v252;
    *(_QWORD *)(v167 + 40) = v170;
    v171 = v243;
    *(_QWORD *)(v167 + 48) = v243;
    *(_QWORD *)(v167 + 56) = v162;
    v172 = v163;
    *(_QWORD *)(v167 + 64) = v163;
    v173 = v242;
    *(_QWORD *)(v167 + 72) = v242;
    *(_BYTE *)(v167 + 80) = v251;
    *(_QWORD *)(v167 + 88) = v250;
    *(_BYTE *)(v167 + 96) = v249;
    *(_QWORD *)(v167 + 104) = v247;
    *(_QWORD *)(v167 + 112) = v164;
    *(_QWORD *)(v167 + 120) = v246;
    *(_BYTE *)(v167 + 128) = v245;
    *(_QWORD *)(v167 + 136) = v244;
    *(_BYTE *)(v167 + 144) = v235;
    v174 = v237;
    sub_10001DE2C(v167, v237, type metadata accessor for MediumDetailWithNewsContentView);
    swift_storeEnumTagMultiPayload(v174, v236, 0);
    swift_bridgeObjectRetain(v169);
    swift_bridgeObjectRetain(v161);
    swift_bridgeObjectRetain(v170);
    sub_100024540(v171, v162, v172, v173);
    v175 = type metadata accessor for MediumDetailWithNewsContentView;
    v176 = sub_100003D3C(&qword_100116A78, type metadata accessor for MediumDetailWithNewsContentView, (uint64_t)&unk_1000E0AF8);
    v177 = sub_100003D3C(&qword_100116A80, type metadata accessor for MediumDetailContentView, (uint64_t)&unk_1000DC960);
    swift_bridgeObjectRetain(v164);
    v178 = (uint64_t)v240;
    _ConditionalContent<>.init(storage:)(v174, v248, v239, v176, v177);
    v179 = v257;
    sub_10001DE2C(v178, v257, (uint64_t (*)(_QWORD))sub_10009A684);
    swift_storeEnumTagMultiPayload(v179, v255, 1);
    v180 = sub_10009A7D0();
    v181 = sub_10009A868();
    v182 = (uint64_t)v258;
    _ConditionalContent<>.init(storage:)(v179, v256, v259, v180, v181);
    sub_10001DF70(v178, (uint64_t (*)(_QWORD))sub_10009A684);
    v183 = v263;
    sub_10001DE2C(v182, v263, (uint64_t (*)(_QWORD))sub_10009A63C);
    swift_storeEnumTagMultiPayload(v183, v260, 0);
    v184 = sub_10009A768();
    v185 = sub_10009A900();
    _ConditionalContent<>.init(storage:)(v183, v261, v266, v184, v185);
    sub_10001DF70(v182, (uint64_t (*)(_QWORD))sub_10009A63C);
    v135 = v167;
    goto LABEL_15;
  }
  if (v56 == enum case for WidgetFamily.systemLarge(_:))
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v54, 1, v39) == 1)
    {
      v257 = *(_QWORD *)a1;
      v236 = *(_QWORD *)(a1 + 8);
      v137 = *(_QWORD *)(a1 + 16);
      v258 = *(char **)(a1 + 24);
      v138 = v258;
      v139 = *(_QWORD *)(a1 + 40);
      v255 = *(_QWORD *)(a1 + 32);
      v256 = v137;
      v140 = *(_QWORD *)(a1 + 48);
      v237 = *(_QWORD *)(a1 + 56);
      v141 = *(_QWORD *)(a1 + 72);
      v259 = *(_QWORD *)(a1 + 64);
      v142 = v259;
      v239 = v141;
      LODWORD(v254) = *(unsigned __int8 *)(a1 + 137);
      v253 = *(_QWORD *)(a1 + 80);
      LODWORD(v252) = *(unsigned __int8 *)(a1 + 88);
      v143 = *(_QWORD *)(a1 + 96);
      v144 = *(_QWORD *)(a1 + 104);
      v250 = *(_QWORD *)(a1 + 112);
      v251 = v143;
      LODWORD(v248) = *(unsigned __int8 *)(a1 + 120);
      v240 = *(char **)(a1 + 128);
      v145 = v243;
      v95 = (uint64_t)v231;
      v146 = *(_BYTE *)(a1 + 136);
      sub_10001DE2C(a1 + v52[9], (uint64_t)&v231[*(int *)(v243 + 36)], (uint64_t (*)(_QWORD))sub_10002FCAC);
      v268 = *(_QWORD *)(a1 + v52[10]);
      v147 = v268;
      v148 = v236;
      *(_QWORD *)v95 = v257;
      *(_QWORD *)(v95 + 8) = v148;
      *(_QWORD *)(v95 + 16) = v256;
      *(_QWORD *)(v95 + 24) = v138;
      *(_QWORD *)(v95 + 32) = v255;
      *(_QWORD *)(v95 + 40) = v139;
      v149 = v237;
      *(_QWORD *)(v95 + 48) = v140;
      *(_QWORD *)(v95 + 56) = v149;
      *(_QWORD *)(v95 + 64) = v142;
      v150 = v239;
      *(_QWORD *)(v95 + 72) = v239;
      *(_BYTE *)(v95 + 80) = v254;
      *(_QWORD *)(v95 + 88) = v253;
      *(_BYTE *)(v95 + 96) = (_BYTE)v252;
      *(_QWORD *)(v95 + 104) = v251;
      *(_QWORD *)(v95 + 112) = v144;
      *(_QWORD *)(v95 + 120) = v250;
      *(_BYTE *)(v95 + 128) = v248;
      *(_QWORD *)(v95 + 136) = v240;
      *(_BYTE *)(v95 + 144) = v146;
      *(_QWORD *)(v95 + *(int *)(v145 + 40)) = v147;
      v151 = v241;
      sub_10001DE2C(v95, v241, type metadata accessor for LargeDetailContentView);
      swift_storeEnumTagMultiPayload(v151, v238, 1);
      swift_bridgeObjectRetain(v148);
      swift_bridgeObjectRetain(v258);
      swift_bridgeObjectRetain(v139);
      sub_100024540(v140, v149, v259, v150);
      v152 = sub_100003D3C(&qword_100116A98, type metadata accessor for LargeDetailWithNewsContentView, (uint64_t)&unk_1000DECE8);
      v73 = type metadata accessor for LargeDetailContentView;
      v153 = sub_100003D3C(&qword_100116AA0, type metadata accessor for LargeDetailContentView, (uint64_t)&unk_1000E2100);
      swift_bridgeObjectRetain(v144);
      swift_bridgeObjectRetain(v268);
      v154 = (uint64_t)v244;
      _ConditionalContent<>.init(storage:)(v151, v249, v145, v152, v153);
      v155 = v246;
      sub_10001DE2C(v154, v246, (uint64_t (*)(_QWORD))sub_10009A6BC);
      swift_storeEnumTagMultiPayload(v155, v245, 0);
      v156 = sub_10009A968();
      v108 = (uint64_t)v247;
      _ConditionalContent<>.init(storage:)(v155, v242, &type metadata for Never, v156, &protocol witness table for Never);
      sub_10001DF70(v154, (uint64_t (*)(_QWORD))sub_10009A6BC);
      v109 = sub_10009A6A8;
      v110 = v263;
      sub_10001DE2C(v108, v263, (uint64_t (*)(_QWORD))sub_10009A6A8);
      v111 = v110;
      v112 = v260;
      v113 = 1;
      goto LABEL_11;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v268, v54, v39);
    v225 = v40;
    v259 = *(_QWORD *)a1;
    v237 = *(_QWORD *)(a1 + 8);
    v186 = *(char **)(a1 + 16);
    v187 = *(_QWORD *)(a1 + 24);
    v257 = *(_QWORD *)(a1 + 32);
    v258 = v186;
    v188 = *(_QWORD *)(a1 + 48);
    v239 = *(_QWORD *)(a1 + 40);
    v189 = *(_QWORD *)(a1 + 56);
    v248 = *(_QWORD *)(a1 + 64);
    v240 = *(char **)(a1 + 72);
    v190 = v39;
    v224 = v39;
    LODWORD(v256) = *(unsigned __int8 *)(a1 + 137);
    v255 = *(_QWORD *)(a1 + 80);
    LODWORD(v254) = *(unsigned __int8 *)(a1 + 88);
    v191 = *(_QWORD *)(a1 + 96);
    v192 = *(_QWORD *)(a1 + 104);
    v252 = *(char **)(a1 + 112);
    v253 = v191;
    LODWORD(v251) = *(unsigned __int8 *)(a1 + 120);
    v250 = *(_QWORD *)(a1 + 128);
    v193 = a1 + v52[9];
    v194 = v249;
    v195 = (uint64_t)v230;
    v196 = (uint64_t)&v230[*(int *)(v249 + 36)];
    LODWORD(v236) = *(unsigned __int8 *)(a1 + 136);
    sub_10001DE2C(v193, v196, (uint64_t (*)(_QWORD))sub_10002FCAC);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v195 + *(int *)(v194 + 40), v268, v190);
    v197 = v237;
    *(_QWORD *)v195 = v259;
    *(_QWORD *)(v195 + 8) = v197;
    *(_QWORD *)(v195 + 16) = v258;
    *(_QWORD *)(v195 + 24) = v187;
    v198 = v239;
    *(_QWORD *)(v195 + 32) = v257;
    *(_QWORD *)(v195 + 40) = v198;
    v199 = v188;
    *(_QWORD *)(v195 + 48) = v188;
    *(_QWORD *)(v195 + 56) = v189;
    v200 = v189;
    v201 = v248;
    v202 = (uint64_t)v240;
    *(_QWORD *)(v195 + 64) = v248;
    *(_QWORD *)(v195 + 72) = v202;
    *(_BYTE *)(v195 + 80) = v256;
    *(_QWORD *)(v195 + 88) = v255;
    *(_BYTE *)(v195 + 96) = v254;
    *(_QWORD *)(v195 + 104) = v253;
    *(_QWORD *)(v195 + 112) = v192;
    *(_QWORD *)(v195 + 120) = v252;
    *(_BYTE *)(v195 + 128) = v251;
    *(_QWORD *)(v195 + 136) = v250;
    *(_BYTE *)(v195 + 144) = v236;
    v203 = v241;
    sub_10001DE2C(v195, v241, type metadata accessor for LargeDetailWithNewsContentView);
    swift_storeEnumTagMultiPayload(v203, v238, 0);
    swift_bridgeObjectRetain(v197);
    swift_bridgeObjectRetain(v187);
    swift_bridgeObjectRetain(v198);
    sub_100024540(v199, v200, v201, v202);
    v175 = type metadata accessor for LargeDetailWithNewsContentView;
    v204 = sub_100003D3C(&qword_100116A98, type metadata accessor for LargeDetailWithNewsContentView, (uint64_t)&unk_1000DECE8);
    v205 = sub_100003D3C(&qword_100116AA0, type metadata accessor for LargeDetailContentView, (uint64_t)&unk_1000E2100);
    swift_bridgeObjectRetain(v192);
    v206 = (uint64_t)v244;
    _ConditionalContent<>.init(storage:)(v203, v249, v243, v204, v205);
    v207 = v246;
    sub_10001DE2C(v206, v246, (uint64_t (*)(_QWORD))sub_10009A6BC);
    swift_storeEnumTagMultiPayload(v207, v245, 0);
    v208 = sub_10009A968();
    v209 = (uint64_t)v247;
    _ConditionalContent<>.init(storage:)(v207, v242, &type metadata for Never, v208, &protocol witness table for Never);
    sub_10001DF70(v206, (uint64_t (*)(_QWORD))sub_10009A6BC);
    v210 = v263;
    sub_10001DE2C(v209, v263, (uint64_t (*)(_QWORD))sub_10009A6A8);
    swift_storeEnumTagMultiPayload(v210, v260, 1);
    v211 = sub_10009A768();
    v212 = sub_10009A900();
    _ConditionalContent<>.init(storage:)(v210, v261, v266, v211, v212);
    sub_10001DF70(v209, (uint64_t (*)(_QWORD))sub_10009A6A8);
    v135 = v195;
LABEL_15:
    v136 = v175;
    goto LABEL_16;
  }
  sub_10001DE2C(a1, v226, type metadata accessor for DetailContentView);
  v269 = 0;
  v270 = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v214._object = (void *)0x80000001000E6B10;
  v214._countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v214);
  v215 = v223;
  sub_100045E2C(v223);
  v216 = sub_100003D3C(&qword_100112720, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v217 = v265;
  v218._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v265, v216);
  object = v218._object;
  String.append(_:)(v218);
  v220 = swift_bridgeObjectRelease(object);
  (*(void (**)(_QWORD *, uint64_t, __n128))(v264 + 8))(v215, v217, v220);
  v221._countAndFlagsBits = 0x2074656764697720;
  v221._object = (void *)0xEF2E796C696D6166;
  String.append(_:)(v221);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v269, v270, "StocksWidget/DetailContentView.swift", 36, 2, 128, 0);
  __break(1u);
  return result;
}

unint64_t sub_100098360()
{
  unint64_t result;

  result = qword_1001168A0;
  if (!qword_1001168A0)
  {
    result = swift_getWitnessTable(&unk_1000E1418, &type metadata for DetailContentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001168A0);
  }
  return result;
}

unint64_t sub_1000983A4()
{
  unint64_t result;

  result = qword_1001168A8;
  if (!qword_1001168A8)
  {
    result = swift_getWitnessTable(&unk_1000E4BF8, &type metadata for SymbolName);
    atomic_store(result, (unint64_t *)&qword_1001168A8);
  }
  return result;
}

unint64_t sub_1000983E8()
{
  unint64_t result;

  result = qword_1001168B0;
  if (!qword_1001168B0)
  {
    result = swift_getWitnessTable(&unk_1000E0CC8, &type metadata for StockPrice);
    atomic_store(result, (unint64_t *)&qword_1001168B0);
  }
  return result;
}

unint64_t sub_10009842C()
{
  unint64_t result;

  result = qword_1001168B8;
  if (!qword_1001168B8)
  {
    result = swift_getWitnessTable(&unk_1000E1584, &type metadata for PriceChange);
    atomic_store(result, (unint64_t *)&qword_1001168B8);
  }
  return result;
}

void sub_100098470()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100112510)
  {
    v0 = type metadata accessor for Array(0, &type metadata for QuoteDetailItem);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100112510);
  }
}

unint64_t sub_1000984C4()
{
  unint64_t result;

  result = qword_1001168D0;
  if (!qword_1001168D0)
  {
    result = swift_getWitnessTable(&unk_1000DC370, &type metadata for QuoteDetailItem);
    atomic_store(result, (unint64_t *)&qword_1001168D0);
  }
  return result;
}

uint64_t sub_100098508()
{
  return sub_10004EB5C(&qword_1001168E0, (uint64_t (*)(uint64_t))sub_10001D794, (void (*)(void))sub_10009852C, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

uint64_t sub_10009852C()
{
  return sub_100003D3C(&qword_1001168E8, type metadata accessor for HeadlineViewModel, (uint64_t)&unk_1000E1D50);
}

void sub_100098548(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_100098360();
    v7 = a3(a1, &type metadata for DetailContentViewModel.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1000985A4()
{
  unint64_t result;

  result = qword_100116900;
  if (!qword_100116900)
  {
    result = swift_getWitnessTable(&unk_1000E4BD0, &type metadata for SymbolName);
    atomic_store(result, (unint64_t *)&qword_100116900);
  }
  return result;
}

unint64_t sub_1000985E8()
{
  unint64_t result;

  result = qword_100116908;
  if (!qword_100116908)
  {
    result = swift_getWitnessTable(&unk_1000E0CA0, &type metadata for StockPrice);
    atomic_store(result, (unint64_t *)&qword_100116908);
  }
  return result;
}

unint64_t sub_10009862C()
{
  unint64_t result;

  result = qword_100116910;
  if (!qword_100116910)
  {
    result = swift_getWitnessTable(&unk_1000E155C, &type metadata for PriceChange);
    atomic_store(result, (unint64_t *)&qword_100116910);
  }
  return result;
}

unint64_t sub_100098670()
{
  unint64_t result;

  result = qword_100116928;
  if (!qword_100116928)
  {
    result = swift_getWitnessTable(&unk_1000DC348, &type metadata for QuoteDetailItem);
    atomic_store(result, (unint64_t *)&qword_100116928);
  }
  return result;
}

uint64_t sub_1000986B4()
{
  return sub_10004EB5C(&qword_100116938, (uint64_t (*)(uint64_t))sub_10001D794, (void (*)(void))sub_1000986D8, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

uint64_t sub_1000986D8()
{
  return sub_100003D3C(&qword_100116940, type metadata accessor for HeadlineViewModel, (uint64_t)&unk_1000E1D28);
}

uint64_t getEnumTagSinglePayload for DetailContentViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DetailContentViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1000987D0 + 4 * byte_1000E122E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_100098804 + 4 * byte_1000E1229[v4]))();
}

uint64_t sub_100098804(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009880C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100098814);
  return result;
}

uint64_t sub_100098820(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100098828);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_10009882C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100098834(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DetailContentViewModel.CodingKeys()
{
  return &type metadata for DetailContentViewModel.CodingKeys;
}

uint64_t sub_100098850(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  int *v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t *, uint64_t, int *, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t, __n128);
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v71;
  uint64_t v72;
  uint64_t v73;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v14);
  }
  else
  {
    v6 = a3;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    v10 = (_OWORD *)(a1 + 48);
    v11 = a2 + 6;
    v12 = a2[9];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v12 == 1)
    {
      v13 = *((_OWORD *)a2 + 4);
      *v10 = *v11;
      *(_OWORD *)(a1 + 64) = v13;
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_QWORD *)(a1 + 72) = v12;
      swift_bridgeObjectRetain(v12);
    }
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    v15 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v15;
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
    *(_BYTE *)(a1 + 137) = *((_BYTE *)a2 + 137);
    v16 = (int *)type metadata accessor for DetailContentViewModel(0);
    v17 = v16[9];
    v18 = (uint64_t *)(a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = (int *)type metadata accessor for PreparedSparkline(0);
    v21 = *((_QWORD *)v20 - 1);
    v22 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v21 + 48);
    v23 = swift_bridgeObjectRetain(v15);
    if (v22(v19, 1, v20, v23))
    {
      sub_10002FCAC(0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v25 = *v19;
      *v18 = *v19;
      v26 = v20[5];
      v71 = (char *)v18 + v26;
      v73 = v6;
      v27 = (char *)v19 + v26;
      v28 = type metadata accessor for Date(0);
      v72 = v21;
      v29 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 16);
      v30 = swift_bridgeObjectRetain(v25);
      v29(v71, v27, v28, v30);
      sub_100022800(0);
      v32 = *(int *)(v31 + 36);
      v33 = &v27[v32];
      v6 = v73;
      ((void (*)(char *, char *, uint64_t))v29)(&v71[v32], v33, v28);
      v34 = v20[6];
      v35 = (char *)v18 + v34;
      v36 = (char *)v19 + v34;
      v37 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
      *(_OWORD *)((char *)v18 + v20[7]) = *(_OWORD *)((char *)v19 + v20[7]);
      v38 = v20[8];
      v39 = (char *)v18 + v38;
      v40 = (char *)v19 + v38;
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v40[8];
      *((_BYTE *)v18 + v20[9]) = *((_BYTE *)v19 + v20[9]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v72 + 56))(v18, 0, 1, v20);
    }
    v41 = v16[10];
    v42 = *(uint64_t *)((char *)a2 + v41);
    *(_QWORD *)(a1 + v41) = v42;
    v43 = v16[11];
    v44 = (void *)(a1 + v43);
    v45 = (char *)a2 + v43;
    sub_100042D9C(0);
    v47 = v46;
    v48 = *(_QWORD *)(v46 - 8);
    v49 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v48 + 48);
    v50 = swift_bridgeObjectRetain(v42);
    if (v49(v45, 1, v47, v50))
    {
      sub_10001D6B0(0);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v48 + 16))(v44, v45, v47);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v44, 0, 1, v47);
    }
    v52 = v16[12];
    v53 = (void *)(a1 + v52);
    v54 = (char *)a2 + v52;
    v55 = type metadata accessor for URL(0);
    v56 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
    {
      sub_100075FE0(0);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v56 + 16))(v53, v54, v55);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
    }
    v58 = *(int *)(v6 + 20);
    v59 = *(_OWORD *)((char *)a2 + v58 + 24);
    *(_OWORD *)(a1 + v58 + 24) = v59;
    (**(void (***)(void))(v59 - 8))();
    v60 = *(int *)(v6 + 24);
    v61 = (uint64_t *)(a1 + v60);
    v62 = (uint64_t *)((char *)a2 + v60);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v64 = v63;
    if (swift_getEnumCaseMultiPayload(v62, v63) == 1)
    {
      v65 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v61, v62, v65);
      v66 = v61;
      v67 = v64;
      v68 = 1;
    }
    else
    {
      v69 = *v62;
      *v61 = *v62;
      swift_retain(v69);
      v66 = v61;
      v67 = v64;
      v68 = 0;
    }
    swift_storeEnumTagMultiPayload(v66, v67, v68);
  }
  return a1;
}

uint64_t sub_100098C94(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = a1[9];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[13]);
  v5 = (int *)type metadata accessor for DetailContentViewModel(0);
  v6 = (_QWORD *)((char *)a1 + v5[9]);
  v7 = type metadata accessor for PreparedSparkline(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease(*v6);
    v8 = (char *)v6 + *(int *)(v7 + 20);
    v9 = type metadata accessor for Date(0);
    v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v10(v8, v9);
    sub_100022800(0);
    v10(&v8[*(int *)(v11 + 36)], v9);
    v12 = (char *)v6 + *(int *)(v7 + 24);
    v13 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v5[10]));
  v14 = (char *)a1 + v5[11];
  sub_100042D9C(0);
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
  v18 = (char *)a1 + v5[12];
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  sub_100007164((_QWORD *)((char *)a1 + *(int *)(a2 + 20)));
  v21 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v21, v22) != 1)
    return swift_release(*v21);
  v23 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
}

uint64_t sub_100098EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  int *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t *, uint64_t, int *, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(const void *, uint64_t, uint64_t, __n128);
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v67;
  uint64_t v68;
  uint64_t v69;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = (_OWORD *)(a1 + 48);
  v10 = a2 + 48;
  v11 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v11 == 1)
  {
    v12 = *(_OWORD *)(v10 + 16);
    *v9 = *(_OWORD *)v10;
    *(_OWORD *)(a1 + 64) = v12;
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(v10 + 8);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v11;
    swift_bridgeObjectRetain(v11);
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  v14 = (int *)type metadata accessor for DetailContentViewModel(0);
  v15 = v14[9];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = (int *)type metadata accessor for PreparedSparkline(0);
  v19 = *((_QWORD *)v18 - 1);
  v20 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v19 + 48);
  v21 = swift_bridgeObjectRetain(v13);
  if (v20(v17, 1, v18, v21))
  {
    sub_10002FCAC(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = *v17;
    *v16 = *v17;
    v24 = v18[5];
    v67 = (char *)v16 + v24;
    v69 = a3;
    v25 = (char *)v17 + v24;
    v26 = type metadata accessor for Date(0);
    v68 = v19;
    v27 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v26 - 8) + 16);
    v28 = swift_bridgeObjectRetain(v23);
    v27(v67, v25, v26, v28);
    sub_100022800(0);
    v30 = *(int *)(v29 + 36);
    v31 = &v25[v30];
    a3 = v69;
    ((void (*)(char *, char *, uint64_t))v27)(&v67[v30], v31, v26);
    v32 = v18[6];
    v33 = (char *)v16 + v32;
    v34 = (char *)v17 + v32;
    v35 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    *(_OWORD *)((char *)v16 + v18[7]) = *(_OWORD *)((char *)v17 + v18[7]);
    v36 = v18[8];
    v37 = (char *)v16 + v36;
    v38 = (char *)v17 + v36;
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v37[8] = v38[8];
    *((_BYTE *)v16 + v18[9]) = *((_BYTE *)v17 + v18[9]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v68 + 56))(v16, 0, 1, v18);
  }
  v39 = v14[10];
  v40 = *(_QWORD *)(a2 + v39);
  *(_QWORD *)(a1 + v39) = v40;
  v41 = v14[11];
  v42 = (void *)(a1 + v41);
  v43 = (const void *)(a2 + v41);
  sub_100042D9C(0);
  v45 = v44;
  v46 = *(_QWORD *)(v44 - 8);
  v47 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v46 + 48);
  v48 = swift_bridgeObjectRetain(v40);
  if (v47(v43, 1, v45, v48))
  {
    sub_10001D6B0(0);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v46 + 16))(v42, v43, v45);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v42, 0, 1, v45);
  }
  v50 = v14[12];
  v51 = (void *)(a1 + v50);
  v52 = (const void *)(a2 + v50);
  v53 = type metadata accessor for URL(0);
  v54 = *(_QWORD *)(v53 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    sub_100075FE0(0);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v54 + 16))(v51, v52, v53);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  v56 = *(int *)(a3 + 20);
  v57 = *(_OWORD *)(a2 + v56 + 24);
  *(_OWORD *)(a1 + v56 + 24) = v57;
  (**(void (***)(void))(v57 - 8))();
  v58 = *(int *)(a3 + 24);
  v59 = (uint64_t *)(a1 + v58);
  v60 = (uint64_t *)(a2 + v58);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v62 = v61;
  if (swift_getEnumCaseMultiPayload(v60, v61) == 1)
  {
    v63 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v59, v60, v63);
    v64 = 1;
  }
  else
  {
    v65 = *v60;
    *v59 = *v60;
    swift_retain(v65);
    v64 = 0;
  }
  swift_storeEnumTagMultiPayload(v59, v62, v64);
  return a1;
}

uint64_t sub_1000992BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int *v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD *, uint64_t, int *);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t, __n128);
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(void *, uint64_t, uint64_t);
  int v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(void *, uint64_t, uint64_t);
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  int *v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char v105;
  char *v106;
  int *v107;
  uint64_t v108;
  uint64_t v109;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = (_OWORD *)(a1 + 48);
  v13 = (_OWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a2 + 72);
  if (v14 == 1)
  {
    if (v15 == 1)
    {
      v16 = *(_OWORD *)(a2 + 64);
      *v12 = *v13;
      *(_OWORD *)(a1 + 64) = v16;
    }
    else
    {
      v18 = *(_QWORD *)v13;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)v12 = v18;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v19 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 72) = v19;
      swift_bridgeObjectRetain(v19);
    }
  }
  else if (v15 == 1)
  {
    sub_10002304C(a1 + 48);
    v17 = *(_OWORD *)(a2 + 64);
    *v12 = *v13;
    *(_OWORD *)(a1 + 64) = v17;
  }
  else
  {
    v20 = *(_QWORD *)v13;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)v12 = v20;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v21 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v21;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v14);
  }
  v22 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v22;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v23 = *(_QWORD *)(a2 + 104);
  v24 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v25;
  v26 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v26;
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  v27 = (int *)type metadata accessor for DetailContentViewModel(0);
  v28 = v27[9];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  v31 = (int *)type metadata accessor for PreparedSparkline(0);
  v32 = *((_QWORD *)v31 - 1);
  v33 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      v36 = *v30;
      *v29 = *v30;
      v37 = v31[5];
      v106 = (char *)v29 + v37;
      v107 = v27;
      v38 = (char *)v30 + v37;
      v39 = type metadata accessor for Date(0);
      v108 = a3;
      v40 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v39 - 8) + 16);
      v41 = swift_bridgeObjectRetain(v36);
      v40(v106, v38, v39, v41);
      sub_100022800(0);
      v43 = *(int *)(v42 + 36);
      v44 = &v38[v43];
      v27 = v107;
      ((void (*)(char *, char *, uint64_t))v40)(&v106[v43], v44, v39);
      a3 = v108;
      v45 = v31[6];
      v46 = (char *)v29 + v45;
      v47 = (char *)v30 + v45;
      v48 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
      *(_OWORD *)((char *)v29 + v31[7]) = *(_OWORD *)((char *)v30 + v31[7]);
      v49 = v31[8];
      v50 = (char *)v29 + v49;
      v51 = (char *)v30 + v49;
      v52 = v51[8];
      *(_QWORD *)v50 = *(_QWORD *)v51;
      v50[8] = v52;
      *((_BYTE *)v29 + v31[9]) = *((_BYTE *)v30 + v31[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v35)
  {
    sub_10001DF70((uint64_t)v29, type metadata accessor for PreparedSparkline);
LABEL_13:
    sub_10002FCAC(0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_14;
  }
  v84 = *v30;
  v85 = *v29;
  *v29 = *v30;
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRelease(v85);
  v86 = v31[5];
  v87 = (char *)v29 + v86;
  v109 = a3;
  v88 = (char *)v30 + v86;
  v89 = v27;
  v90 = type metadata accessor for Date(0);
  v91 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 24);
  v91(v87, v88, v90);
  sub_100022800(0);
  v93 = v90;
  v27 = v89;
  v91(&v87[*(int *)(v92 + 36)], &v88[*(int *)(v92 + 36)], v93);
  v94 = v31[6];
  v95 = (char *)v29 + v94;
  v96 = (char *)v30 + v94;
  v97 = type metadata accessor for TimeZone(0);
  v98 = v96;
  a3 = v109;
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 24))(v95, v98, v97);
  v99 = v31[7];
  v100 = (_QWORD *)((char *)v29 + v99);
  v101 = (_QWORD *)((char *)v30 + v99);
  *v100 = *v101;
  v100[1] = v101[1];
  v102 = v31[8];
  v103 = (char *)v29 + v102;
  v104 = (char *)v30 + v102;
  v105 = v104[8];
  *(_QWORD *)v103 = *(_QWORD *)v104;
  v103[8] = v105;
  *((_BYTE *)v29 + v31[9]) = *((_BYTE *)v30 + v31[9]);
LABEL_14:
  v54 = v27[10];
  v55 = *(_QWORD *)(a2 + v54);
  v56 = *(_QWORD *)(a1 + v54);
  *(_QWORD *)(a1 + v54) = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  v57 = v27[11];
  v58 = (void *)(a1 + v57);
  v59 = (void *)(a2 + v57);
  sub_100042D9C(0);
  v61 = v60;
  v62 = *(_QWORD *)(v60 - 8);
  v63 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v62 + 48);
  LODWORD(v56) = v63(v58, 1, v60);
  v64 = v63(v59, 1, v61);
  if ((_DWORD)v56)
  {
    if (!v64)
    {
      (*(void (**)(void *, void *, uint64_t))(v62 + 16))(v58, v59, v61);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v58, 0, 1, v61);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v64)
  {
    (*(void (**)(void *, uint64_t))(v62 + 8))(v58, v61);
LABEL_19:
    sub_10001D6B0(0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v62 + 24))(v58, v59, v61);
LABEL_20:
  v66 = v27[12];
  v67 = (void *)(a1 + v66);
  v68 = (void *)(a2 + v66);
  v69 = type metadata accessor for URL(0);
  v70 = *(_QWORD *)(v69 - 8);
  v71 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v70 + 48);
  v72 = v71(v67, 1, v69);
  v73 = v71(v68, 1, v69);
  if (v72)
  {
    if (!v73)
    {
      (*(void (**)(void *, void *, uint64_t))(v70 + 16))(v67, v68, v69);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v73)
  {
    (*(void (**)(void *, uint64_t))(v70 + 8))(v67, v69);
LABEL_25:
    sub_100075FE0(0);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(void *, void *, uint64_t))(v70 + 24))(v67, v68, v69);
LABEL_26:
  sub_1000621B0((_QWORD *)(a1 + *(int *)(a3 + 20)), (_QWORD *)(a2 + *(int *)(a3 + 20)));
  if (a1 != a2)
  {
    v75 = *(int *)(a3 + 24);
    v76 = (uint64_t *)(a1 + v75);
    v77 = (uint64_t *)(a2 + v75);
    sub_10002B1A4(a1 + v75);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v79 = v78;
    if (swift_getEnumCaseMultiPayload(v77, v78) == 1)
    {
      v80 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v76, v77, v80);
      v81 = 1;
    }
    else
    {
      v82 = *v77;
      *v76 = *v77;
      swift_retain(v82);
      v81 = 0;
    }
    swift_storeEnumTagMultiPayload(v76, v79, v81);
  }
  return a1;
}

uint64_t sub_100099908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  void *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  v10 = (int *)type metadata accessor for DetailContentViewModel(0);
  v11 = v10[9];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = (int *)type metadata accessor for PreparedSparkline(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    sub_10002FCAC(0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v17 = v14[5];
    v56 = a3;
    v18 = (char *)v12 + v17;
    v19 = (char *)v13 + v17;
    v20 = type metadata accessor for Date(0);
    v55 = v15;
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
    v21(v18, v19, v20);
    sub_100022800(0);
    v21(&v18[*(int *)(v22 + 36)], &v19[*(int *)(v22 + 36)], v20);
    v23 = v14[6];
    v24 = (char *)v12 + v23;
    v25 = (char *)v13 + v23;
    v26 = type metadata accessor for TimeZone(0);
    v27 = v24;
    a3 = v56;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v27, v25, v26);
    *(_OWORD *)((char *)v12 + v14[7]) = *(_OWORD *)((char *)v13 + v14[7]);
    v28 = v14[8];
    v29 = (char *)v12 + v28;
    v30 = (char *)v13 + v28;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    *((_BYTE *)v12 + v14[9]) = *((_BYTE *)v13 + v14[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v55 + 56))(v12, 0, 1, v14);
  }
  *(_QWORD *)(a1 + v10[10]) = *(_QWORD *)(a2 + v10[10]);
  v31 = v10[11];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  sub_100042D9C(0);
  v35 = v34;
  v36 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v33, 1, v34))
  {
    sub_10001D6B0(0);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v36 + 32))(v32, v33, v35);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v32, 0, 1, v35);
  }
  v38 = v10[12];
  v39 = (void *)(a1 + v38);
  v40 = (const void *)(a2 + v38);
  v41 = type metadata accessor for URL(0);
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    sub_100075FE0(0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v42 + 32))(v39, v40, v41);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  v44 = *(int *)(a3 + 20);
  v45 = *(int *)(a3 + 24);
  v46 = a1 + v44;
  v47 = a2 + v44;
  v48 = *(_OWORD *)(v47 + 16);
  *(_OWORD *)v46 = *(_OWORD *)v47;
  *(_OWORD *)(v46 + 16) = v48;
  *(_QWORD *)(v46 + 32) = *(_QWORD *)(v47 + 32);
  v49 = (void *)(a1 + v45);
  v50 = (const void *)(a2 + v45);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v52 = v51;
  if (swift_getEnumCaseMultiPayload(v50, v51) == 1)
  {
    v53 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v49, v50, v53);
    swift_storeEnumTagMultiPayload(v49, v52, 1);
  }
  else
  {
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100099C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int *v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t, int *);
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(void *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(void *, uint64_t, uint64_t);
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  int *v91;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = (_OWORD *)(a1 + 48);
  v13 = (_OWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14 == 1)
    goto LABEL_4;
  v15 = *(_QWORD *)(a2 + 72);
  if (v15 == 1)
  {
    sub_10002304C(a1 + 48);
LABEL_4:
    v16 = *(_OWORD *)(a2 + 64);
    *v12 = *v13;
    *(_OWORD *)(a1 + 64) = v16;
    goto LABEL_6;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v15;
  swift_bridgeObjectRelease(v14);
LABEL_6:
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v17;
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  v91 = (int *)type metadata accessor for DetailContentViewModel(0);
  v19 = v91[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = (int *)type metadata accessor for PreparedSparkline(0);
  v23 = *((_QWORD *)v22 - 1);
  v24 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      *v20 = *v21;
      v27 = v22[5];
      v28 = (char *)v20 + v27;
      v29 = (char *)v21 + v27;
      v90 = a3;
      v30 = type metadata accessor for Date(0);
      v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32);
      v31(v28, v29, v30);
      sub_100022800(0);
      v33 = v30;
      a3 = v90;
      v31(&v28[*(int *)(v32 + 36)], &v29[*(int *)(v32 + 36)], v33);
      v34 = v22[6];
      v35 = (char *)v20 + v34;
      v36 = (char *)v21 + v34;
      v37 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
      *(_OWORD *)((char *)v20 + v22[7]) = *(_OWORD *)((char *)v21 + v22[7]);
      v38 = v22[8];
      v39 = (char *)v20 + v38;
      v40 = (char *)v21 + v38;
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v40[8];
      *((_BYTE *)v20 + v22[9]) = *((_BYTE *)v21 + v22[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v26)
  {
    sub_10001DF70((uint64_t)v20, type metadata accessor for PreparedSparkline);
LABEL_11:
    sub_10002FCAC(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_12;
  }
  v74 = *v20;
  *v20 = *v21;
  swift_bridgeObjectRelease(v74);
  v75 = v22[5];
  v76 = (char *)v20 + v75;
  v77 = (char *)v21 + v75;
  v78 = a3;
  v79 = type metadata accessor for Date(0);
  v80 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 40);
  v80(v76, v77, v79);
  sub_100022800(0);
  v82 = v79;
  a3 = v78;
  v80(&v76[*(int *)(v81 + 36)], &v77[*(int *)(v81 + 36)], v82);
  v83 = v22[6];
  v84 = (char *)v20 + v83;
  v85 = (char *)v21 + v83;
  v86 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 40))(v84, v85, v86);
  *(_OWORD *)((char *)v20 + v22[7]) = *(_OWORD *)((char *)v21 + v22[7]);
  v87 = v22[8];
  v88 = (char *)v20 + v87;
  v89 = (char *)v21 + v87;
  v88[8] = v89[8];
  *(_QWORD *)v88 = *(_QWORD *)v89;
  *((_BYTE *)v20 + v22[9]) = *((_BYTE *)v21 + v22[9]);
LABEL_12:
  v42 = v91[10];
  v43 = *(_QWORD *)(a1 + v42);
  *(_QWORD *)(a1 + v42) = *(_QWORD *)(a2 + v42);
  swift_bridgeObjectRelease(v43);
  v44 = v91[11];
  v45 = (void *)(a1 + v44);
  v46 = (void *)(a2 + v44);
  sub_100042D9C(0);
  v48 = v47;
  v49 = *(_QWORD *)(v47 - 8);
  v50 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v45, 1, v47);
  v52 = v50(v46, 1, v48);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, void *, uint64_t))(v49 + 32))(v45, v46, v48);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v45, 0, 1, v48);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v49 + 8))(v45, v48);
LABEL_17:
    sub_10001D6B0(0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(void *, void *, uint64_t))(v49 + 40))(v45, v46, v48);
LABEL_18:
  v54 = v91[12];
  v55 = (void *)(a1 + v54);
  v56 = (void *)(a2 + v54);
  v57 = type metadata accessor for URL(0);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v58 + 48);
  v60 = v59(v55, 1, v57);
  v61 = v59(v56, 1, v57);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(void *, void *, uint64_t))(v58 + 32))(v55, v56, v57);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v61)
  {
    (*(void (**)(void *, uint64_t))(v58 + 8))(v55, v57);
LABEL_23:
    sub_100075FE0(0);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(void *, void *, uint64_t))(v58 + 40))(v55, v56, v57);
LABEL_24:
  v63 = *(int *)(a3 + 20);
  v64 = a1 + v63;
  v65 = a2 + v63;
  sub_100007164((_QWORD *)(a1 + v63));
  v66 = *(_OWORD *)(v65 + 16);
  *(_OWORD *)v64 = *(_OWORD *)v65;
  *(_OWORD *)(v64 + 16) = v66;
  *(_QWORD *)(v64 + 32) = *(_QWORD *)(v65 + 32);
  if (a1 != a2)
  {
    v67 = *(int *)(a3 + 24);
    v68 = (void *)(a1 + v67);
    v69 = (const void *)(a2 + v67);
    sub_10002B1A4(a1 + v67);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v71 = v70;
    if (swift_getEnumCaseMultiPayload(v69, v70) == 1)
    {
      v72 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v68, v69, v72);
      swift_storeEnumTagMultiPayload(v68, v71, 1);
    }
    else
    {
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10009A20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009A218);
}

uint64_t sub_10009A218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for DetailContentViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    v8 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_10009A2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009A2E8);
}

uint64_t sub_10009A2E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = type metadata accessor for DetailContentViewModel(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
      return result;
    }
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for DetailContentView(uint64_t a1)
{
  return sub_1000071F8(a1, qword_1001169A8, (uint64_t)&nominal type descriptor for DetailContentView);
}

void sub_10009A3BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v2 = type metadata accessor for DetailContentViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "(";
    sub_10000EDE8(319, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

unint64_t sub_10009A464()
{
  unint64_t result;

  result = qword_1001169E8;
  if (!qword_1001169E8)
  {
    result = swift_getWitnessTable(&unk_1000E13F0, &type metadata for DetailContentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001169E8);
  }
  return result;
}

unint64_t sub_10009A4AC()
{
  unint64_t result;

  result = qword_1001169F0;
  if (!qword_1001169F0)
  {
    result = swift_getWitnessTable(&unk_1000E1360, &type metadata for DetailContentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001169F0);
  }
  return result;
}

unint64_t sub_10009A4F4()
{
  unint64_t result;

  result = qword_1001169F8;
  if (!qword_1001169F8)
  {
    result = swift_getWitnessTable(&unk_1000E1388, &type metadata for DetailContentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001169F8);
  }
  return result;
}

uint64_t sub_10009A538(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9838, 1);
}

void sub_10009A548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100116A00)
  {
    sub_10009A5C8(255);
    v3 = v2;
    v4 = sub_10004EB5C(&qword_100116A40, (uint64_t (*)(uint64_t))sub_10009A5C8, (void (*)(void))sub_10009A6E0, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
    v5 = type metadata accessor for ZStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100116A00);
  }
}

void sub_10009A5C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100116A08)
  {
    sub_10002BC34(255, &qword_100116A10, (uint64_t (*)(uint64_t))sub_10009A63C, (uint64_t (*)(uint64_t))sub_10009A6A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v3 = type metadata accessor for Group(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100116A08);
  }
}

void sub_10009A63C(uint64_t a1)
{
  sub_10002BC34(a1, &qword_100116A18, (uint64_t (*)(uint64_t))sub_10009A660, (uint64_t (*)(uint64_t))sub_10009A684, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
}

void sub_10009A660(uint64_t a1)
{
  sub_10002BC34(a1, &qword_100116A20, type metadata accessor for SmallDetailWithNewsContentView, type metadata accessor for SmallDetailContentView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
}

void sub_10009A684(uint64_t a1)
{
  sub_10002BC34(a1, &qword_100116A28, type metadata accessor for MediumDetailWithNewsContentView, type metadata accessor for MediumDetailContentView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
}

void sub_10009A6A8(uint64_t a1)
{
  sub_10009ACDC(a1, &qword_100116A30, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
}

void sub_10009A6BC(uint64_t a1)
{
  sub_10002BC34(a1, &qword_100116A38, type metadata accessor for LargeDetailWithNewsContentView, type metadata accessor for LargeDetailContentView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
}

unint64_t sub_10009A6E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116A48;
  if (!qword_100116A48)
  {
    sub_10002BC34(255, &qword_100116A10, (uint64_t (*)(uint64_t))sub_10009A63C, (uint64_t (*)(uint64_t))sub_10009A6A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v2 = v1;
    sub_10009A768();
    sub_10009A900();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116A48);
  }
  return result;
}

unint64_t sub_10009A768()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116A50;
  if (!qword_100116A50)
  {
    sub_10009A63C(255);
    v2 = v1;
    sub_10009A7D0();
    sub_10009A868();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116A50);
  }
  return result;
}

unint64_t sub_10009A7D0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116A58;
  if (!qword_100116A58)
  {
    sub_10009A660(255);
    v2 = v1;
    sub_100003D3C(&qword_100116A60, type metadata accessor for SmallDetailWithNewsContentView, (uint64_t)&unk_1000E10D8);
    sub_100003D3C(&qword_100116A68, type metadata accessor for SmallDetailContentView, (uint64_t)&unk_1000E39D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116A58);
  }
  return result;
}

unint64_t sub_10009A868()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116A70;
  if (!qword_100116A70)
  {
    sub_10009A684(255);
    v2 = v1;
    sub_100003D3C(&qword_100116A78, type metadata accessor for MediumDetailWithNewsContentView, (uint64_t)&unk_1000E0AF8);
    sub_100003D3C(&qword_100116A80, type metadata accessor for MediumDetailContentView, (uint64_t)&unk_1000DC960);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116A70);
  }
  return result;
}

unint64_t sub_10009A900()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116A88;
  if (!qword_100116A88)
  {
    sub_10009A6A8(255);
    v2 = v1;
    sub_10009A968();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116A88);
  }
  return result;
}

unint64_t sub_10009A968()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116A90;
  if (!qword_100116A90)
  {
    sub_10009A6BC(255);
    v2 = v1;
    sub_100003D3C(&qword_100116A98, type metadata accessor for LargeDetailWithNewsContentView, (uint64_t)&unk_1000DECE8);
    sub_100003D3C(&qword_100116AA0, type metadata accessor for LargeDetailContentView, (uint64_t)&unk_1000E2100);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116A90);
  }
  return result;
}

void sub_10009AA00(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_100116AB0)
  {
    sub_10002BC34(255, &qword_100116AA8, (uint64_t (*)(uint64_t))sub_10009A548, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v5[0] = v2;
    v5[1] = sub_10009AA94();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100116AB0);
  }
}

unint64_t sub_10009AA94()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116AB8;
  if (!qword_100116AB8)
  {
    sub_10002BC34(255, &qword_100116AA8, (uint64_t (*)(uint64_t))sub_10009A548, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v2 = v1;
    sub_100003D3C(&qword_100116AC0, (uint64_t (*)(uint64_t))sub_10009A548, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_100003D3C(&qword_100113068, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116AB8);
  }
  return result;
}

void sub_10009AB54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (!qword_100116AC8)
  {
    sub_10009AA00(255);
    v3 = v2;
    sub_10002BC34(255, &qword_100116AA8, (uint64_t (*)(uint64_t))sub_10009A548, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v8 = v4;
    v9 = sub_10009AA94();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    v8 = v3;
    v9 = OpaqueTypeConformance2;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v8, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 0);
    if (!v7)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100116AC8);
  }
}

void sub_10009AC14(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100116AD0)
  {
    sub_10009A5C8(255);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _ZStackLayout, v2, &protocol witness table for _ZStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100116AD0);
  }
}

uint64_t sub_10009AC80(uint64_t a1)
{
  uint64_t v2;

  sub_10002BC34(0, &qword_100116AA8, (uint64_t (*)(uint64_t))sub_10009A548, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10009ACDC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_10009A6BC(255);
    v7 = a3(a1, v6, &type metadata for Never);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_10009AD3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!qword_100116B08)
  {
    v2 = type metadata accessor for WidgetFamily(255);
    sub_10001D6B0(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v2, v3, 0, 0);
    if (!v5)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100116B08);
  }
}

uint64_t sub_10009ADAC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 0x614E6C6F626D7973 && a2 == 0xEA0000000000656DLL)
  {
    v5 = 0xEA0000000000656DLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E6C6F626D7973, 0xEA0000000000656DLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4E796E61706D6F63 && a2 == 0xEB00000000656D61)
  {
    v7 = 0xEB00000000656D61;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E796E61706D6F63, 0xEB00000000656D61, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6563697270 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697270, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6168436563697270 && a2 == 0xEB0000000065676ELL)
  {
    v9 = 0xEB0000000065676ELL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6168436563697270, 0xEB0000000065676ELL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000010)
  {
    v10 = 0x80000001000E6B40;
    if (a2 == 0x80000001000E6B40)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001000E6B40, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x6E696C6B72617073 && a2 == 0xE900000000000065)
  {
    v11 = 0xE900000000000065;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E696C6B72617073, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x74654465746F7571 && a2 == 0xEC000000736C6961)
  {
    v12 = 0xEC000000736C6961;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654465746F7571, 0xEC000000736C6961, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x656E696C64616568 && a2 == 0xE900000000000073)
  {
    v13 = 0xE900000000000073;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E696C64616568, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x52556C6F626D7973 && a2 == 0xE90000000000004CLL)
  {
    swift_bridgeObjectRelease(0xE90000000000004CLL);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x52556C6F626D7973, 0xE90000000000004CLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_10009B18C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  ValueMetadata *v10;
  uint64_t v11;
  unint64_t v12;

  sub_10009AB54(255);
  v1 = v0;
  sub_10009AA00(255);
  v3 = v2;
  sub_10002BC34(255, &qword_100116AA8, (uint64_t (*)(uint64_t))sub_10009A548, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v9 = v4;
  v10 = (ValueMetadata *)sub_10009AA94();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
  v9 = v3;
  v10 = (ValueMetadata *)OpaqueTypeConformance2;
  v6 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  v7 = sub_10002C1A8();
  v9 = v1;
  v10 = &type metadata for TodayBackgroundView;
  v11 = v6;
  v12 = v7;
  return swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

uint64_t sub_10009B258(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  _OWORD v22[2];

  v3 = v1;
  sub_10009C3D4(0, &qword_100116B88, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedEncodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v20 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_10009C390();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PriceChange.CodingKeys, &type metadata for PriceChange.CodingKeys, v12, v10, v11);
  v13 = *(_OWORD *)(v3 + 16);
  v22[0] = *(_OWORD *)v3;
  v22[1] = v13;
  v21 = 0;
  v14 = sub_1000985E8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v21, v6, &type metadata for StockPrice, v14);
  if (!v2)
  {
    v15 = *(_QWORD *)(v3 + 32);
    v16 = *(unsigned __int8 *)(v3 + 40);
    LOBYTE(v22[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v22, v6);
    v17 = *(_QWORD *)(v3 + 48);
    v18 = *(unsigned __int8 *)(v3 + 56);
    LOBYTE(v22[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v22, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10009B3BC()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6168436563697270;
  if (*v0 != 1)
    v1 = 0xD000000000000014;
  if (*v0)
    return v1;
  else
    return 0x6563697270;
}

uint64_t sub_10009B420@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009C00C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10009B444(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009C390();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009B46C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009C390();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009B494(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];
  _OWORD v7[2];
  _OWORD v8[2];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return sub_10009BAC4((uint64_t)v5, (uint64_t)v7) & 1;
}

double sub_10009B4EC@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  _OWORD v7[2];

  sub_10009C16C(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_10009B534(_QWORD *a1)
{
  return sub_10009B258(a1);
}

uint64_t sub_10009B548()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  if (qword_100111588 != -1)
    swift_once(&qword_100111588, sub_1000B0BAC);
  sub_10001DB68((uint64_t)qword_100126A08, (uint64_t)v6);
  v0 = v7;
  v1 = v8;
  sub_100007184(v6, v7);
  v2 = sub_1000280C4();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v2, v2, v0, v1);
  if (v5)
  {
    sub_10001D968(&v4, (uint64_t)&unk_100116B50);
    return sub_100007164(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10009B5FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t KeyPath;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v67 = a1;
  sub_10009CF60(0);
  v69 = v2;
  __chkstk_darwin(v2);
  v68 = (uint64_t)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for PriceChangeDisplay(0);
  v4 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v6 = (uint64_t *)((char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (int *)_s11FormatStyleVMa_0(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D000(0);
  v65 = *(_QWORD *)(v10 - 8);
  v66 = v10;
  __chkstk_darwin(v10);
  v64 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PriceChangeView(0);
  v60 = v1;
  v61 = v12;
  v13 = v1 + *(int *)(v12 + 20);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(_QWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v13 + 24);
  v54 = *(_QWORD *)v13;
  v55 = v15;
  v17 = *(_QWORD *)(v13 + 40);
  v58 = *(_QWORD *)(v13 + 32);
  v18 = *(_QWORD *)(v13 + 48);
  v56 = v14;
  v57 = v18;
  v19 = *(_BYTE *)(v13 + 56);
  sub_100024540(v54, v14, v15, v16);
  sub_100046458(v6);
  v20 = v63;
  (*(void (**)(char *, _QWORD *, uint64_t))(v4 + 16))(v9, v6, v63);
  v9[v7[5]] = 0;
  v9[v7[6]] = 0;
  v9[v7[7]] = 0;
  v21 = &v9[v7[8]];
  v59 = v9;
  *(_QWORD *)v21 = 9666786;
  *((_QWORD *)v21 + 1) = 0xA300000000000000;
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v20);
  v23 = v54;
  v22 = v55;
  v24 = v56;
  *(_QWORD *)&v79 = v54;
  *((_QWORD *)&v79 + 1) = v56;
  *(_QWORD *)&v80 = v55;
  *((_QWORD *)&v80 + 1) = v16;
  *(_QWORD *)&v81 = v58;
  *((_QWORD *)&v81 + 1) = v17;
  v82 = v57;
  LOBYTE(v83) = v19;
  v25 = (uint64_t)v9;
  v26 = v68;
  sub_10008251C(v25, v68);
  v27 = (_QWORD *)(v26 + *(int *)(v69 + 60));
  *v27 = 9666786;
  v27[1] = 0xA300000000000000;
  sub_100024540(v23, v24, v22, v16);
  v28 = sub_100003D3C(&qword_100116C88, (uint64_t (*)(uint64_t))sub_10009CF60, (uint64_t)&unk_1000DEF58);
  v29 = sub_10009D3DC();
  v68 = Text.init<A>(_:format:)(&v79, v68, v69, v28, v29);
  v69 = v30;
  v63 = v31;
  v62 = v32;
  sub_10001DF70((uint64_t)v59, _s11FormatStyleVMa_0);
  sub_100024750(v23, v24, v22, v16);
  KeyPath = swift_getKeyPath(&unk_1000E1750);
  v35 = static Font.caption2.getter(v34);
  static Font.Weight.semibold.getter();
  v36 = Font.weight(_:)(v35);
  swift_release(v35);
  v37 = swift_getKeyPath(&unk_1000E1778);
  v38 = swift_getKeyPath(&unk_1000E17A8);
  v39 = *(unsigned __int8 *)(v60 + *(int *)(v61 + 24));
  if (v39 == 2)
  {
    if (qword_100111530 != -1)
      swift_once(&qword_100111530, sub_10009B548);
    v41 = qword_100116B68;
    v40 = unk_100116B70;
    sub_100007184(qword_100116B50, qword_100116B68);
    v42 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v40 + 16) + 432))(v41, *(_QWORD *)(v40 + 16));
  }
  else if ((v39 & 1) != 0)
  {
    if (qword_100111530 != -1)
      swift_once(&qword_100111530, sub_10009B548);
    v45 = qword_100116B68;
    v46 = unk_100116B70;
    sub_100007184(qword_100116B50, qword_100116B68);
    v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 64))(v45, v46);
  }
  else
  {
    if (qword_100111530 != -1)
      swift_once(&qword_100111530, sub_10009B548);
    v43 = qword_100116B68;
    v44 = unk_100116B70;
    sub_100007184(qword_100116B50, qword_100116B68);
    v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 56))(v43, v44);
  }
  v47 = Color.init(_:)(v42);
  v48 = swift_getKeyPath(&unk_1000E17D8);
  *(_QWORD *)&v79 = v68;
  *((_QWORD *)&v79 + 1) = v63;
  LOBYTE(v80) = v62 & 1;
  *((_QWORD *)&v80 + 1) = v69;
  *(_QWORD *)&v81 = 0;
  *((_QWORD *)&v81 + 1) = KeyPath;
  v82 = 0;
  v83 = 0;
  *(_QWORD *)&v84 = 0;
  BYTE8(v84) = 0;
  *(_QWORD *)&v85 = v37;
  *((_QWORD *)&v85 + 1) = v36;
  *(_QWORD *)&v86 = v38;
  *((_QWORD *)&v86 + 1) = 1;
  LOBYTE(v87) = 0;
  *((_QWORD *)&v87 + 1) = v48;
  v88 = v47;
  v76 = v86;
  v77 = v87;
  v78 = v47;
  v72 = v81;
  v73 = 0u;
  v74 = v84;
  v75 = v85;
  v70 = v79;
  v71 = v80;
  sub_10009D074(0);
  v50 = v49;
  v51 = sub_10009D244();
  v52 = v64;
  View.unredacted()(v50, v51);
  sub_10009D4B0((uint64_t)&v79);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v65 + 32))(v67, v52, v66);
}

uint64_t sub_10009BAC4(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  if ((v4 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      return 0;
  }
  else
  {
    v9 = 0;
    if ((*(_BYTE *)(a2 + 8) & 1) != 0 || *(double *)a1 != *(double *)a2)
      return v9;
  }
  if (!v6)
  {
    if (v8)
      return 0;
LABEL_13:
    v9 = *(unsigned __int8 *)(a2 + 40);
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 40))
        return v9;
    }
    else
    {
      if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
        LOBYTE(v9) = 1;
      if ((v9 & 1) != 0)
        return 0;
    }
    v11 = *(_BYTE *)(a2 + 56);
    if ((*(_BYTE *)(a1 + 56) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 56) & 1) != 0)
        return 1;
    }
    else
    {
      if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
        v11 = 1;
      if ((v11 & 1) == 0)
        return 1;
    }
    return 0;
  }
  if (!v8)
    return 0;
  if (v5 == v7 && v6 == v8)
    goto LABEL_13;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0);
  v9 = 0;
  if ((v10 & 1) != 0)
    goto LABEL_13;
  return v9;
}

uint64_t sub_10009BBA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(_BYTE *, uint64_t, uint64_t);
  uint64_t v17;
  char v18;
  char v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  double v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  _BYTE v28[4];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v5 = __chkstk_darwin(v4);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v28[-v8];
  v30 = sub_1000B57BC();
  v31 = v10;
  v29 = v11;
  v32 = v12;
  v13 = a1 + *(int *)(type metadata accessor for WidgetStock(0) + 20);
  sub_10008FE28(v13, (uint64_t)v9);
  v14 = type metadata accessor for WidgetQuote(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v9, 1, v14) == 1)
  {
    sub_100028528((uint64_t)v9, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v17 = 0;
    v18 = 1;
  }
  else
  {
    v17 = WidgetQuote.priceChange.getter();
    v18 = v19 & 1;
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v9, v14);
  }
  sub_10008FE28(v13, (uint64_t)v7);
  if (v16(v7, 1, v14) == 1)
  {
    sub_10001DF70(a1, type metadata accessor for WidgetStock);
    sub_100028528((uint64_t)v7, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    result = 0;
    v21 = 1;
  }
  else
  {
    v22 = v17;
    v23 = COERCE_DOUBLE(WidgetQuote.marketCapitalization.getter());
    v25 = v24;
    sub_10001DF70(a1, type metadata accessor for WidgetStock);
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v7, v14);
    if ((v25 & 1) != 0)
    {
      result = 0;
      v21 = 1;
    }
    else
    {
      result = sub_10009D5C4(v23);
      v21 = v26 & 1;
    }
    v17 = v22;
  }
  *(_QWORD *)a2 = v30;
  *(_BYTE *)(a2 + 8) = v29 & 1;
  v27 = v31;
  *(_QWORD *)(a2 + 16) = v32;
  *(_QWORD *)(a2 + 24) = v27;
  *(_QWORD *)(a2 + 32) = v17;
  *(_BYTE *)(a2 + 40) = v18;
  *(_QWORD *)(a2 + 48) = result;
  *(_BYTE *)(a2 + 56) = v21;
  return result;
}

uint64_t initializeWithCopy for PriceChange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for PriceChange(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  v5 = a2[3];
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  v7 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  return a1;
}

__n128 initializeWithTake for PriceChange(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PriceChange(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for PriceChange(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PriceChange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PriceChange()
{
  return &type metadata for PriceChange;
}

uint64_t sub_10009C00C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6563697270 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697270, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6168436563697270 && a2 == 0xEB0000000065676ELL)
  {
    v7 = 0xEB0000000065676ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6168436563697270, 0xEB0000000065676ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001000E5AF0)
  {
    swift_bridgeObjectRelease(0x80000001000E5AF0);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001000E5AF0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_10009C16C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;

  sub_10009C3D4(0, &qword_100116B78, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedDecodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v20 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_10009C390();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PriceChange.CodingKeys, &type metadata for PriceChange.CodingKeys, v12, v10, v11);
  if (v2)
  {
    sub_100007164(a1);
  }
  else
  {
    v29 = 0;
    v13 = sub_1000983E8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, &type metadata for StockPrice, &v29, v6, &type metadata for StockPrice, v13);
    v23 = v24;
    v28 = v25;
    v15 = v26;
    v14 = v27;
    LOBYTE(v24) = 1;
    swift_bridgeObjectRetain(v27);
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v24, v6);
    HIDWORD(v20) = v17;
    v21 = v16;
    v22 = v15;
    LOBYTE(v24) = 2;
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v24, v6);
    LOBYTE(v15) = v19;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_100007164(a1);
    swift_bridgeObjectRelease(v14);
    *(_QWORD *)a2 = v23;
    *(_BYTE *)(a2 + 8) = v28;
    *(_QWORD *)(a2 + 16) = v22;
    *(_QWORD *)(a2 + 24) = v14;
    *(_QWORD *)(a2 + 32) = v21;
    *(_BYTE *)(a2 + 40) = BYTE4(v20) & 1;
    *(_QWORD *)(a2 + 48) = v18;
    *(_BYTE *)(a2 + 56) = v15 & 1;
  }
}

unint64_t sub_10009C390()
{
  unint64_t result;

  result = qword_100116B80;
  if (!qword_100116B80)
  {
    result = swift_getWitnessTable(&unk_1000E1670, &type metadata for PriceChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100116B80);
  }
  return result;
}

void sub_10009C3D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_10009C390();
    v7 = a3(a1, &type metadata for PriceChange.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for PriceChange.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10009C47C + 4 * byte_1000E151D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10009C4B0 + 4 * byte_1000E1518[v4]))();
}

uint64_t sub_10009C4B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009C4B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009C4C0);
  return result;
}

uint64_t sub_10009C4CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009C4D4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10009C4D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009C4E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PriceChange.CodingKeys()
{
  return &type metadata for PriceChange.CodingKeys;
}

unint64_t sub_10009C500()
{
  unint64_t result;

  result = qword_100116B90;
  if (!qword_100116B90)
  {
    result = swift_getWitnessTable(&unk_1000E1648, &type metadata for PriceChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100116B90);
  }
  return result;
}

unint64_t sub_10009C548()
{
  unint64_t result;

  result = qword_100116B98;
  if (!qword_100116B98)
  {
    result = swift_getWitnessTable(&unk_1000E15B8, &type metadata for PriceChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100116B98);
  }
  return result;
}

unint64_t sub_10009C590()
{
  unint64_t result;

  result = qword_100116BA0;
  if (!qword_100116BA0)
  {
    result = swift_getWitnessTable(&unk_1000E15E0, &type metadata for PriceChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100116BA0);
  }
  return result;
}

_QWORD *sub_10009C5D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v8 = v7;
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v9 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = v8;
      v12 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v10 = a1;
      v11 = v8;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    v15 = *(int *)(a3 + 20);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = *((_QWORD *)v17 + 3);
    if (v18 == 1)
    {
      v19 = *((_OWORD *)v17 + 1);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v19;
      *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
      *(_OWORD *)(v16 + 41) = *(_OWORD *)(v17 + 41);
    }
    else
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
      *((_QWORD *)v16 + 3) = v18;
      *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
      v16[40] = v17[40];
      *((_QWORD *)v16 + 6) = *((_QWORD *)v17 + 6);
      v16[56] = v17[56];
      swift_bridgeObjectRetain(v18);
    }
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

double sub_10009C730(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;

  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v7 = *(_QWORD *)((char *)a1 + *(int *)(a2 + 20) + 24);
  if (v7 != 1)
    *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  return result;
}

_QWORD *sub_10009C7CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;

  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = a1;
    v10 = v7;
    v11 = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v9 = a1;
    v10 = v7;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *((_QWORD *)v15 + 3);
  if (v16 == 1)
  {
    v17 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v17;
    *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
    *(_OWORD *)(v14 + 41) = *(_OWORD *)(v15 + 41);
  }
  else
  {
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v14[8] = v15[8];
    *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
    *((_QWORD *)v14 + 3) = v16;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
    v14[40] = v15[40];
    *((_QWORD *)v14 + 6) = *((_QWORD *)v15 + 6);
    v14[56] = v15[56];
    swift_bridgeObjectRetain(v16);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_10009C8FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a1 != a2)
  {
    sub_100028528((uint64_t)a1, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  v13 = *(int *)(a3 + 20);
  v14 = (uint64_t)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)((char *)a1 + v13 + 24);
  v17 = *(_QWORD *)((char *)a2 + v13 + 24);
  if (v16 == 1)
  {
    if (v17 == 1)
    {
      v18 = *(_OWORD *)v15;
      v19 = *((_OWORD *)v15 + 1);
      v20 = *((_OWORD *)v15 + 2);
      *(_OWORD *)(v14 + 41) = *(_OWORD *)(v15 + 41);
      *(_OWORD *)(v14 + 16) = v19;
      *(_OWORD *)(v14 + 32) = v20;
      *(_OWORD *)v14 = v18;
    }
    else
    {
      v24 = *(_QWORD *)v15;
      *(_BYTE *)(v14 + 8) = v15[8];
      *(_QWORD *)v14 = v24;
      *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
      v25 = *((_QWORD *)v15 + 3);
      *(_QWORD *)(v14 + 24) = v25;
      v26 = *((_QWORD *)v15 + 4);
      *(_BYTE *)(v14 + 40) = v15[40];
      *(_QWORD *)(v14 + 32) = v26;
      v27 = *((_QWORD *)v15 + 6);
      *(_BYTE *)(v14 + 56) = v15[56];
      *(_QWORD *)(v14 + 48) = v27;
      swift_bridgeObjectRetain(v25);
    }
  }
  else if (v17 == 1)
  {
    sub_100064DDC(v14);
    v22 = *((_OWORD *)v15 + 1);
    v21 = *((_OWORD *)v15 + 2);
    v23 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + 41) = *(_OWORD *)(v15 + 41);
    *(_OWORD *)(v14 + 16) = v22;
    *(_OWORD *)(v14 + 32) = v21;
    *(_OWORD *)v14 = v23;
  }
  else
  {
    v28 = *(_QWORD *)v15;
    *(_BYTE *)(v14 + 8) = v15[8];
    *(_QWORD *)v14 = v28;
    *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
    v29 = *((_QWORD *)v15 + 3);
    *(_QWORD *)(v14 + 24) = v29;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRelease(v16);
    v30 = *((_QWORD *)v15 + 4);
    *(_BYTE *)(v14 + 40) = v15[40];
    *(_QWORD *)(v14 + 32) = v30;
    v31 = *((_QWORD *)v15 + 6);
    *(_BYTE *)(v14 + 56) = v15[56];
    *(_QWORD *)(v14 + 48) = v31;
  }
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

char *sub_10009CAEC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;

  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v7, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
  *(_OWORD *)(v11 + 41) = *(_OWORD *)(v12 + 41);
  a1[v10] = a2[v10];
  return a1;
}

char *sub_10009CBC8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (a1 != a2)
  {
    sub_100028528((uint64_t)a1, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v7, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  v9 = *(int *)(a3 + 20);
  v10 = (uint64_t)&a1[v9];
  v11 = &a2[v9];
  v12 = *(_QWORD *)&a1[v9 + 24];
  if (v12 != 1)
  {
    v13 = *((_QWORD *)v11 + 3);
    if (v13 != 1)
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_BYTE *)(v10 + 8) = v11[8];
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v11 + 2);
      *(_QWORD *)(v10 + 24) = v13;
      swift_bridgeObjectRelease(v12);
      *(_QWORD *)(v10 + 32) = *((_QWORD *)v11 + 4);
      *(_BYTE *)(v10 + 40) = v11[40];
      *(_QWORD *)(v10 + 48) = *((_QWORD *)v11 + 6);
      *(_BYTE *)(v10 + 56) = v11[56];
      goto LABEL_10;
    }
    sub_100064DDC(v10);
  }
  v14 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v14;
  *(_OWORD *)(v10 + 32) = *((_OWORD *)v11 + 2);
  *(_OWORD *)(v10 + 41) = *(_OWORD *)(v11 + 41);
LABEL_10:
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_10009CD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009CD44);
}

uint64_t sub_10009CD44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_10000EDE8(0, &qword_100115A80, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return ((_DWORD)v9 - 1) & ~(((int)v9 - 1) >> 31);
}

uint64_t sub_10009CDE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009CDEC);
}

void sub_10009CDEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_10000EDE8(0, &qword_100115A80, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 + 1);
}

uint64_t type metadata accessor for PriceChangeView(uint64_t a1)
{
  uint64_t result;

  result = qword_100116C00;
  if (!qword_100116C00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PriceChangeView);
  return result;
}

void sub_10009CEBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10000EDE8(319, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "9";
    v4[2] = &unk_1000E16E8;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_10009CF50(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E98C8, 1);
}

void sub_10009CF60(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[5];

  if (!qword_100116C40)
  {
    v4[0] = _s11FormatStyleVMa_0(255);
    v4[1] = sub_100003D3C(&qword_100116C48, _s11FormatStyleVMa_0, (uint64_t)&unk_1000E08D0);
    v4[2] = &protocol witness table for String;
    v4[3] = &protocol witness table for String;
    v4[4] = &protocol witness table for String;
    v2 = type metadata accessor for NilPlaceholderFormatStyle(a1, (uint64_t)v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_100116C40);
  }
}

void sub_10009D000(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_100116C50)
  {
    sub_10009D074(255);
    v5[0] = v2;
    v5[1] = sub_10009D244();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100116C50);
  }
}

void sub_10009D074(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100116C58)
  {
    sub_10009D0F0(255);
    v3 = v2;
    sub_10002F4D0(255, &qword_100112D30, (unint64_t *)&qword_100112D38, (uint64_t)&type metadata for Color);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100116C58);
  }
}

void sub_10009D0F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100116C60)
  {
    sub_10009D16C(255);
    v3 = v2;
    sub_10002F4D0(255, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100116C60);
  }
}

void sub_10009D16C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100116C68)
  {
    sub_10009D1E8();
    v3 = v2;
    sub_10002F4D0(255, &qword_100112D40, &qword_100112D48, (uint64_t)&type metadata for Font);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100116C68);
  }
}

void sub_10009D1E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1001133B8)
  {
    v0 = type metadata accessor for ModifiedContent(0, &type metadata for Text, &type metadata for OverflowIntoTextMarginsModifier);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1001133B8);
  }
}

unint64_t sub_10009D244()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116C70;
  if (!qword_100116C70)
  {
    sub_10009D074(255);
    v2 = v1;
    sub_10009D2CC();
    sub_10002F72C((unint64_t *)&qword_100112E38, &qword_100112D30, (unint64_t *)&qword_100112D38, (uint64_t)&type metadata for Color);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116C70);
  }
  return result;
}

unint64_t sub_10009D2CC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116C78;
  if (!qword_100116C78)
  {
    sub_10009D0F0(255);
    v2 = v1;
    sub_10009D354();
    sub_10002F72C(&qword_100112D98, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116C78);
  }
  return result;
}

unint64_t sub_10009D354()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116C80;
  if (!qword_100116C80)
  {
    sub_10009D16C(255);
    v2 = v1;
    sub_10002F63C();
    sub_10002F72C(&qword_100112E30, &qword_100112D40, &qword_100112D48, (uint64_t)&type metadata for Font);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116C80);
  }
  return result;
}

unint64_t sub_10009D3DC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116C90;
  if (!qword_100116C90)
  {
    sub_10002F9E4(255, &qword_100115198, (uint64_t)&type metadata for PriceChange);
    v2 = v1;
    sub_10009D44C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v2);
    atomic_store(result, (unint64_t *)&qword_100116C90);
  }
  return result;
}

unint64_t sub_10009D44C()
{
  unint64_t result;

  result = qword_100116C98;
  if (!qword_100116C98)
  {
    result = swift_getWitnessTable(&unk_1000E1534, &type metadata for PriceChange);
    atomic_store(result, (unint64_t *)&qword_100116C98);
  }
  return result;
}

uint64_t sub_10009D4B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_BYTE *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 96);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 128);
  sub_100014490(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  swift_release(v3);
  sub_100028060(v4, v5, v6, v7, v8);
  swift_release(v10);
  swift_release(v9);
  swift_release(v12);
  swift_release(v13);
  swift_release(v14);
  return a1;
}

uint64_t sub_10009D57C()
{
  uint64_t v0;
  _QWORD v2[2];

  sub_10009D074(255);
  v2[0] = v0;
  v2[1] = sub_10009D244();
  return swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
}

uint64_t sub_10009D5C4(double a1)
{
  uint64_t result;

  if (a1 >= 9.22337204e18 || a1 <= -9.22337204e18)
    return 0;
  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) != 0)
  {
    if (a1 > -9.22337204e18)
      return (uint64_t)a1;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10009D624(char *a1, char *a2)
{
  return sub_1000A3910(*a1, *a2);
}

Swift::Int sub_10009D630()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 1853321060;
  else
    v2 = 28789;
  if (v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE200000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10009D69C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 1853321060;
  else
    v2 = 28789;
  if (*v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE200000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10009D6E4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 1853321060;
  else
    v3 = 28789;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE200000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10009D74C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001038A8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_10009D7A8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 28789;
  if (*v1)
    v2 = 1853321060;
  v3 = 0xE200000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t storeEnumTagSinglePayload for ValueChangeTrend(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10009D820 + 4 * byte_1000E1815[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10009D854 + 4 * byte_1000E1810[v4]))();
}

uint64_t sub_10009D854(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009D85C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009D864);
  return result;
}

uint64_t sub_10009D870(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009D878);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10009D87C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009D884(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ValueChangeTrend()
{
  return &type metadata for ValueChangeTrend;
}

unint64_t sub_10009D8A4()
{
  unint64_t result;

  result = qword_100116CA0;
  if (!qword_100116CA0)
  {
    result = swift_getWitnessTable(&unk_1000E18AC, &type metadata for ValueChangeTrend);
    atomic_store(result, (unint64_t *)&qword_100116CA0);
  }
  return result;
}

uint64_t sub_10009D8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009D990();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10009D944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009D990();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_10009D990()
{
  unint64_t result;

  result = qword_100116CA8;
  if (!qword_100116CA8)
  {
    result = swift_getWitnessTable(&unk_1000E1834, &type metadata for ValueChangeTrend);
    atomic_store(result, (unint64_t *)&qword_100116CA8);
  }
  return result;
}

uint64_t destroy for AccessibilitySimpleTicker(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  result = a1[8];
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t initializeWithCopy for AccessibilitySimpleTicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = (_OWORD *)(a1 + 40);
  v7 = a2 + 40;
  v8 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v8 == 1)
  {
    v9 = *(_OWORD *)(v7 + 16);
    *v6 = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 56) = v9;
  }
  else
  {
    *(_QWORD *)v6 = *(_QWORD *)v7;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(v7 + 8);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v8;
    swift_bridgeObjectRetain(v8);
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilitySimpleTicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (_OWORD *)(a1 + 40);
  v9 = (_OWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a2 + 64);
  if (v10 == 1)
  {
    if (v11 == 1)
    {
      v12 = *(_OWORD *)(a2 + 56);
      *v8 = *v9;
      *(_OWORD *)(a1 + 56) = v12;
    }
    else
    {
      v14 = *(_QWORD *)v9;
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)v8 = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      v15 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v15;
      swift_bridgeObjectRetain(v15);
    }
  }
  else if (v11 == 1)
  {
    sub_10002304C(a1 + 40);
    v13 = *(_OWORD *)(a2 + 56);
    *v8 = *v9;
    *(_OWORD *)(a1 + 56) = v13;
  }
  else
  {
    v16 = *(_QWORD *)v9;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_QWORD *)v8 = v16;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    v17 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v17;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRelease(v10);
  }
  return a1;
}

uint64_t assignWithTake for AccessibilitySimpleTicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = (_QWORD *)(a1 + 40);
  v9 = (_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10 != 1)
  {
    v11 = *(_QWORD *)(a2 + 64);
    if (v11 != 1)
    {
      *v8 = *v9;
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v11;
      swift_bridgeObjectRelease(v10);
      return a1;
    }
    sub_10002304C(a1 + 40);
  }
  v12 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 56) = v12;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilitySimpleTicker(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilitySimpleTicker(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilitySimpleTicker()
{
  return &type metadata for AccessibilitySimpleTicker;
}

uint64_t sub_10009DD14(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9930, 1);
}

uint64_t sub_10009DD24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  double v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t ObjCClassFromMetadata;
  objc_class *v12;
  uint64_t v13;
  unint64_t v14;
  NSBundle v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v39;
  _BYTE v40[71];
  char v41;
  _BYTE v42[32];
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];
  char v46;
  _BYTE v47[16];
  double v48;
  char v49;

  sub_1000664FC(a1 + 40, (uint64_t)v42, &qword_100113418, (uint64_t)&type metadata for StockPrice);
  sub_1000664FC((uint64_t)v42, (uint64_t)&v43, &qword_100113418, (uint64_t)&type metadata for StockPrice);
  if (*((_QWORD *)&v44 + 1) == 1)
  {
    v2 = 0;
    v3 = 0;
    goto LABEL_15;
  }
  v2 = 9666786;
  v45[0] = v43;
  v45[1] = v44;
  sub_1000664FC((uint64_t)v45, (uint64_t)v47, &qword_100116CC0, (uint64_t)&type metadata for Double);
  sub_1000664FC((uint64_t)v47, (uint64_t)&v48, &qword_100116CC0, (uint64_t)&type metadata for Double);
  if (v49 != 1)
  {
    v4 = v48;
    if (qword_1001114C0 != -1)
      swift_once(&qword_1001114C0, sub_1000570EC);
    v5 = (id)sub_1000221F8(0, 3, 1, v4);
    objc_msgSend(v5, "setNumberStyle:", 1);
    v6 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v4);
    v7 = objc_msgSend(v5, "stringFromNumber:", v6);

    if (v7)
    {
      v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v3 = v8;

      goto LABEL_10;
    }

  }
  v3 = 0xA300000000000000;
LABEL_10:
  sub_1000664FC(a1, (uint64_t)&v41, &qword_1001151A0, (uint64_t)&type metadata for ValueChangeTrend);
  sub_1000664FC((uint64_t)&v41, (uint64_t)&v46, &qword_1001151A0, (uint64_t)&type metadata for ValueChangeTrend);
  v9 = v46;
  if (v46 != 2)
  {
    v10 = type metadata accessor for Localized();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v10);
    v12 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    if ((v9 & 1) != 0)
    {
      v18 = 0xD00000000000005BLL;
      v39 = 0x80000001000E6B60;
      v13 = 0x206F74206E776F44;
      v14 = 0xEA00000000004025;
      v15.super.isa = v12;
      v16 = 0;
      v17 = 0xE000000000000000;
    }
    else
    {
      v39 = 0x80000001000E6BC0;
      v13 = 0x4025206F74207055;
      v14 = 0xE800000000000000;
      v15.super.isa = v12;
      v16 = 0;
      v17 = 0xE000000000000000;
      v18 = 0xD00000000000005ALL;
    }
    v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v13, (Swift::String_optional)0, v15, *(Swift::String *)&v16, *(Swift::String *)&v18);

    sub_100003A7C(0);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_1000DB170;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_100003B2C();
    *(_QWORD *)(v21 + 32) = v2;
    *(_QWORD *)(v21 + 40) = v3;
    v2 = static String.localizedStringWithFormat(_:_:)(v19._countAndFlagsBits, v19._object, v21);
    v3 = v22;
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v19._object);
  }
LABEL_15:
  sub_100075990(0);
  inited = swift_initStackObject(v23, v40);
  *(_OWORD *)(inited + 16) = xmmword_1000DD060;
  v26 = *(_QWORD *)(a1 + 24);
  v25 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(inited + 32) = v26;
  *(_QWORD *)(inited + 40) = v25;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v3;
  swift_bridgeObjectRetain_n(v25, 2);
  v27 = sub_100073168(0, 1, 1, _swiftEmptyArrayStorage);
  v29 = v27[2];
  v28 = v27[3];
  v30 = v29 + 1;
  if (v29 >= v28 >> 1)
    v27 = sub_100073168((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
  v27[2] = v30;
  v31 = &v27[2 * v29];
  v31[4] = v26;
  v31[5] = v25;
  if (v3)
  {
    v32 = v27[3];
    swift_bridgeObjectRetain(v3);
    if (v30 >= v32 >> 1)
      v27 = sub_100073168((_QWORD *)(v32 > 1), v29 + 2, 1, v27);
    v27[2] = v29 + 2;
    v33 = &v27[2 * v30];
    v33[4] = v2;
    v33[5] = v3;
  }
  swift_release(inited);
  sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
  v35 = v34;
  v36 = sub_100075848();
  v37 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v35, v36);
  swift_bridgeObjectRelease(v27);
  return v37;
}

double sub_10009E19C()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  _QWORD v10[2];
  _OWORD v11[4];
  uint64_t v12;

  v1 = *(_OWORD *)(v0 + 48);
  v11[2] = *(_OWORD *)(v0 + 32);
  v11[3] = v1;
  v12 = *(_QWORD *)(v0 + 64);
  v2 = *(_OWORD *)(v0 + 16);
  v11[0] = *(_OWORD *)v0;
  v11[1] = v2;
  v3 = sub_10009DD24((uint64_t)v11);
  v5 = v4;
  v10[0] = v3;
  v10[1] = v4;
  sub_10009E258(0);
  v7 = v6;
  v8 = sub_100003D3C(&qword_100116CB8, (uint64_t (*)(uint64_t))sub_10009E258, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  sub_1000144A0();
  View.accessibilityLabel<A>(_:)(v10, v7, &type metadata for String, v8);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

void sub_10009E258(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100116CB0)
  {
    v2 = sub_10003D8B0();
    v3 = type metadata accessor for _ViewModifier_Content(a1, &type metadata for AccessibilitySimpleTicker, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100116CB0);
  }
}

unint64_t sub_10009E2B4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116CC8;
  if (!qword_100116CC8)
  {
    sub_10009E34C(255);
    v2 = v1;
    sub_100003D3C(&qword_100116CB8, (uint64_t (*)(uint64_t))sub_10009E258, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100003D3C(&qword_100115CC8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116CC8);
  }
  return result;
}

void sub_10009E34C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100116CD0)
  {
    sub_10009E258(255);
    v3 = v2;
    v4 = type metadata accessor for AccessibilityAttachmentModifier(255);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100116CD0);
  }
}

ValueMetadata *type metadata accessor for ManagedConfigurationService()
{
  return &type metadata for ManagedConfigurationService;
}

id sub_10009E3C0()
{
  id result;
  void *v1;
  id v2;

  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, "isNewsAllowed");

    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *sub_10009E41C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, int *, __n128);
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(char *, uint64_t, uint64_t, __n128);
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v81)(char *, char *, uint64_t);
  int *v82;
  char *v83;
  char *v84;
  uint64_t *v85;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    v14 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v8 = v7;
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v9 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = v8;
      v12 = 1;
    }
    else
    {
      v15 = *a2;
      *a1 = *a2;
      swift_retain(v15);
      v10 = a1;
      v11 = v8;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    v16 = *(int *)(a3 + 20);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for Date(0);
    v81 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    v81(v17, v18, v19);
    v82 = (int *)type metadata accessor for DetailTimelineEntry(0);
    v83 = v18;
    v20 = v82[5];
    v21 = &v17[v20];
    v22 = &v18[v20];
    v23 = *(_QWORD *)&v18[v20 + 8];
    *(_QWORD *)v21 = *(_QWORD *)&v18[v20];
    *((_QWORD *)v21 + 1) = v23;
    v24 = *(_QWORD *)&v18[v20 + 24];
    *((_QWORD *)v21 + 2) = *(_QWORD *)&v18[v20 + 16];
    *((_QWORD *)v21 + 3) = v24;
    v25 = *(_QWORD *)&v18[v20 + 40];
    *((_QWORD *)v21 + 4) = *(_QWORD *)&v18[v20 + 32];
    *((_QWORD *)v21 + 5) = v25;
    v26 = &v17[v20 + 48];
    v27 = v22 + 48;
    v28 = *((_QWORD *)v22 + 9);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    v84 = v17;
    v85 = a1;
    if (v28 == 1)
    {
      v29 = *((_OWORD *)v22 + 4);
      *(_OWORD *)v26 = *v27;
      *((_OWORD *)v21 + 4) = v29;
    }
    else
    {
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v21[56] = v22[56];
      *((_QWORD *)v21 + 8) = *((_QWORD *)v22 + 8);
      *((_QWORD *)v21 + 9) = v28;
      swift_bridgeObjectRetain(v28);
    }
    *((_QWORD *)v21 + 10) = *((_QWORD *)v22 + 10);
    v21[88] = v22[88];
    v30 = *((_QWORD *)v22 + 13);
    *((_QWORD *)v21 + 12) = *((_QWORD *)v22 + 12);
    *((_QWORD *)v21 + 13) = v30;
    *((_QWORD *)v21 + 14) = *((_QWORD *)v22 + 14);
    v21[120] = v22[120];
    *((_QWORD *)v21 + 16) = *((_QWORD *)v22 + 16);
    v21[136] = v22[136];
    v21[137] = v22[137];
    v31 = (int *)type metadata accessor for DetailContentViewModel(0);
    v32 = v31[9];
    v33 = &v21[v32];
    v34 = &v22[v32];
    v35 = (int *)type metadata accessor for PreparedSparkline(0);
    v36 = *((_QWORD *)v35 - 1);
    v37 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v36 + 48);
    v38 = swift_bridgeObjectRetain(v30);
    if (v37(v34, 1, v35, v38))
    {
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v40 = *(_QWORD *)v34;
      *(_QWORD *)v33 = *(_QWORD *)v34;
      v41 = v35[5];
      v42 = &v33[v41];
      v43 = &v34[v41];
      v44 = swift_bridgeObjectRetain(v40);
      ((void (*)(char *, char *, uint64_t, __n128))v81)(v42, v43, v19, v44);
      sub_100022800(0);
      v81(&v42[*(int *)(v45 + 36)], &v43[*(int *)(v45 + 36)], v19);
      v46 = v35[6];
      v47 = &v33[v46];
      v48 = &v34[v46];
      v49 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
      *(_OWORD *)&v33[v35[7]] = *(_OWORD *)&v34[v35[7]];
      v50 = v35[8];
      v51 = &v33[v50];
      v52 = &v34[v50];
      *(_QWORD *)v51 = *(_QWORD *)v52;
      v51[8] = v52[8];
      v33[v35[9]] = v34[v35[9]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
    }
    v53 = v31[10];
    v54 = *(_QWORD *)&v22[v53];
    *(_QWORD *)&v21[v53] = v54;
    v55 = v31[11];
    v56 = &v21[v55];
    v57 = &v22[v55];
    sub_100042D9C(0);
    v59 = v58;
    v60 = *(_QWORD *)(v58 - 8);
    v61 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v60 + 48);
    v62 = swift_bridgeObjectRetain(v54);
    if (v61(v57, 1, v59, v62))
    {
      sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v56, v57, v59);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v56, 0, 1, v59);
    }
    v14 = v85;
    v64 = v31[12];
    v65 = &v21[v64];
    v66 = &v22[v64];
    v67 = type metadata accessor for URL(0);
    v68 = *(_QWORD *)(v67 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
    {
      sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v65, v66, v67);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
    }
    v70 = v82[6];
    v71 = &v84[v70];
    v72 = &v83[v70];
    v73 = type metadata accessor for WidgetQuote(0);
    v74 = *(_QWORD *)(v73 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
    {
      sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v71, v72, v73);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
    }
    v76 = v82[7];
    v77 = &v84[v76];
    v78 = &v83[v76];
    v79 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
    v84[v82[8]] = v83[v82[8]];
    v84[v82[9]] = v83[v82[9]];
  }
  return v14;
}

uint64_t sub_10009E988(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  int *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = (int *)type metadata accessor for DetailTimelineEntry(0);
  v10 = &v6[v9[5]];
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 5));
  v11 = *((_QWORD *)v10 + 9);
  if (v11 != 1)
    swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 13));
  v12 = (int *)type metadata accessor for DetailContentViewModel(0);
  v13 = &v10[v12[9]];
  v14 = type metadata accessor for PreparedSparkline(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v15 = swift_bridgeObjectRelease(*(_QWORD *)v13);
    v16 = &v13[*(int *)(v14 + 20)];
    ((void (*)(char *, uint64_t, __n128))v8)(v16, v7, v15);
    sub_100022800(0);
    v8(&v16[*(int *)(v17 + 36)], v7);
    v18 = &v13[*(int *)(v14 + 24)];
    v19 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  }
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v12[10]]);
  v20 = &v10[v12[11]];
  sub_100042D9C(0);
  v22 = v21;
  v23 = *(_QWORD *)(v21 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v21))
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
  v24 = &v10[v12[12]];
  v25 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v25 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
  v27 = &v6[v9[6]];
  v28 = type metadata accessor for WidgetQuote(0);
  v29 = *(_QWORD *)(v28 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
  v30 = &v6[v9[7]];
  v31 = type metadata accessor for PriceChangeDisplay(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
}

uint64_t *sub_10009EC10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, int *, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(char *, uint64_t, uint64_t, __n128);
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  void (*v78)(char *, char *, uint64_t);
  int *v79;
  char *v80;
  char *v81;
  uint64_t *v82;

  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = a1;
    v10 = v7;
    v11 = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v9 = a1;
    v10 = v7;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for Date(0);
  v78 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v78(v14, v15, v16);
  v79 = (int *)type metadata accessor for DetailTimelineEntry(0);
  v80 = v15;
  v17 = v79[5];
  v18 = &v14[v17];
  v19 = &v15[v17];
  v20 = *(_QWORD *)&v15[v17 + 8];
  *(_QWORD *)v18 = *(_QWORD *)&v15[v17];
  *((_QWORD *)v18 + 1) = v20;
  v21 = *(_QWORD *)&v15[v17 + 24];
  *((_QWORD *)v18 + 2) = *(_QWORD *)&v15[v17 + 16];
  *((_QWORD *)v18 + 3) = v21;
  v22 = *(_QWORD *)&v15[v17 + 40];
  *((_QWORD *)v18 + 4) = *(_QWORD *)&v15[v17 + 32];
  *((_QWORD *)v18 + 5) = v22;
  v23 = &v14[v17 + 48];
  v24 = v19 + 48;
  v25 = *((_QWORD *)v19 + 9);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  v81 = v14;
  v82 = a1;
  if (v25 == 1)
  {
    v26 = *((_OWORD *)v19 + 4);
    *(_OWORD *)v23 = *v24;
    *((_OWORD *)v18 + 4) = v26;
  }
  else
  {
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v18[56] = v19[56];
    *((_QWORD *)v18 + 8) = *((_QWORD *)v19 + 8);
    *((_QWORD *)v18 + 9) = v25;
    swift_bridgeObjectRetain(v25);
  }
  *((_QWORD *)v18 + 10) = *((_QWORD *)v19 + 10);
  v18[88] = v19[88];
  v27 = *((_QWORD *)v19 + 13);
  *((_QWORD *)v18 + 12) = *((_QWORD *)v19 + 12);
  *((_QWORD *)v18 + 13) = v27;
  *((_QWORD *)v18 + 14) = *((_QWORD *)v19 + 14);
  v18[120] = v19[120];
  *((_QWORD *)v18 + 16) = *((_QWORD *)v19 + 16);
  v18[136] = v19[136];
  v18[137] = v19[137];
  v28 = (int *)type metadata accessor for DetailContentViewModel(0);
  v29 = v28[9];
  v30 = &v18[v29];
  v31 = &v19[v29];
  v32 = (int *)type metadata accessor for PreparedSparkline(0);
  v33 = *((_QWORD *)v32 - 1);
  v34 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v33 + 48);
  v35 = swift_bridgeObjectRetain(v27);
  if (v34(v31, 1, v32, v35))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v37 = *(_QWORD *)v31;
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v38 = v32[5];
    v39 = &v30[v38];
    v40 = &v31[v38];
    v41 = swift_bridgeObjectRetain(v37);
    ((void (*)(char *, char *, uint64_t, __n128))v78)(v39, v40, v16, v41);
    sub_100022800(0);
    v78(&v39[*(int *)(v42 + 36)], &v40[*(int *)(v42 + 36)], v16);
    v43 = v32[6];
    v44 = &v30[v43];
    v45 = &v31[v43];
    v46 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
    *(_OWORD *)&v30[v32[7]] = *(_OWORD *)&v31[v32[7]];
    v47 = v32[8];
    v48 = &v30[v47];
    v49 = &v31[v47];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v48[8] = v49[8];
    v30[v32[9]] = v31[v32[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  v50 = v28[10];
  v51 = *(_QWORD *)&v19[v50];
  *(_QWORD *)&v18[v50] = v51;
  v52 = v28[11];
  v53 = &v18[v52];
  v54 = &v19[v52];
  sub_100042D9C(0);
  v56 = v55;
  v57 = *(_QWORD *)(v55 - 8);
  v58 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v57 + 48);
  v59 = swift_bridgeObjectRetain(v51);
  if (v58(v54, 1, v56, v59))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v53, v54, v56);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v53, 0, 1, v56);
  }
  v61 = v28[12];
  v62 = &v18[v61];
  v63 = &v19[v61];
  v64 = type metadata accessor for URL(0);
  v65 = *(_QWORD *)(v64 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v62, v63, v64);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
  }
  v67 = v79[6];
  v68 = &v81[v67];
  v69 = &v80[v67];
  v70 = type metadata accessor for WidgetQuote(0);
  v71 = *(_QWORD *)(v70 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
  {
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v68, v69, v70);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
  }
  v73 = v79[7];
  v74 = &v81[v73];
  v75 = &v80[v73];
  v76 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
  v81[v79[8]] = v80[v79[8]];
  v81[v79[9]] = v80[v79[9]];
  return v82;
}

uint64_t *sub_10009F150(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, int *);
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t, __n128);
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(char *, uint64_t, uint64_t);
  int v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(char *, uint64_t, uint64_t);
  int v102;
  int v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(char *, uint64_t, uint64_t);
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  int *v122;
  int *v123;
  char *v124;
  char *v125;
  uint64_t *v126;

  if (a1 != a2)
  {
    sub_100028528((uint64_t)a1, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  v13 = *(int *)(a3 + 20);
  v126 = a1;
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for Date(0);
  v121 = *(_QWORD *)(v16 - 8);
  v120 = *(void (**)(char *, char *, uint64_t))(v121 + 24);
  v120(v14, v15, v16);
  v17 = type metadata accessor for DetailTimelineEntry(0);
  v18 = *(int *)(v17 + 20);
  v125 = v14;
  v19 = &v14[v18];
  v20 = &v15[v18];
  *(_QWORD *)v19 = *(_QWORD *)&v15[v18];
  v21 = *(_QWORD *)&v15[v18 + 8];
  v22 = *(_QWORD *)&v14[v18 + 8];
  *((_QWORD *)v19 + 1) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
  v23 = *((_QWORD *)v20 + 3);
  v24 = *((_QWORD *)v19 + 3);
  *((_QWORD *)v19 + 3) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *((_QWORD *)v19 + 4) = *((_QWORD *)v20 + 4);
  v25 = *((_QWORD *)v20 + 5);
  v26 = *((_QWORD *)v19 + 5);
  *((_QWORD *)v19 + 5) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = v19 + 48;
  v28 = v20 + 48;
  v29 = *((_QWORD *)v19 + 9);
  v30 = *((_QWORD *)v20 + 9);
  v123 = (int *)v17;
  v124 = v15;
  if (v29 == 1)
  {
    if (v30 == 1)
    {
      v31 = *((_OWORD *)v20 + 4);
      *v27 = *v28;
      *((_OWORD *)v19 + 4) = v31;
    }
    else
    {
      v33 = *(_QWORD *)v28;
      v19[56] = v20[56];
      *(_QWORD *)v27 = v33;
      *((_QWORD *)v19 + 8) = *((_QWORD *)v20 + 8);
      v34 = *((_QWORD *)v20 + 9);
      *((_QWORD *)v19 + 9) = v34;
      swift_bridgeObjectRetain(v34);
    }
  }
  else if (v30 == 1)
  {
    sub_10002304C((uint64_t)(v19 + 48));
    v32 = *((_OWORD *)v20 + 4);
    *v27 = *v28;
    *((_OWORD *)v19 + 4) = v32;
  }
  else
  {
    v35 = *(_QWORD *)v28;
    v19[56] = v20[56];
    *(_QWORD *)v27 = v35;
    *((_QWORD *)v19 + 8) = *((_QWORD *)v20 + 8);
    v36 = *((_QWORD *)v20 + 9);
    *((_QWORD *)v19 + 9) = v36;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRelease(v29);
  }
  v37 = *((_QWORD *)v20 + 10);
  v19[88] = v20[88];
  *((_QWORD *)v19 + 10) = v37;
  *((_QWORD *)v19 + 12) = *((_QWORD *)v20 + 12);
  v38 = *((_QWORD *)v20 + 13);
  v39 = *((_QWORD *)v19 + 13);
  *((_QWORD *)v19 + 13) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  v40 = *((_QWORD *)v20 + 14);
  v19[120] = v20[120];
  *((_QWORD *)v19 + 14) = v40;
  v41 = *((_QWORD *)v20 + 16);
  v19[136] = v20[136];
  *((_QWORD *)v19 + 16) = v41;
  v19[137] = v20[137];
  v122 = (int *)type metadata accessor for DetailContentViewModel(0);
  v42 = v122[9];
  v43 = &v19[v42];
  v44 = &v20[v42];
  v45 = (int *)type metadata accessor for PreparedSparkline(0);
  v46 = *((_QWORD *)v45 - 1);
  v47 = *(uint64_t (**)(char *, uint64_t, int *))(v46 + 48);
  v48 = v47(v43, 1, v45);
  v49 = v47(v44, 1, v45);
  if (v48)
  {
    if (v49)
      goto LABEL_18;
    v51 = *(_QWORD *)v44;
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v52 = v45[5];
    v53 = &v43[v52];
    v54 = &v44[v52];
    v55 = *(void (**)(char *, char *, uint64_t, __n128))(v121 + 16);
    v56 = swift_bridgeObjectRetain(v51);
    v55(v53, v54, v16, v56);
    sub_100022800(0);
    ((void (*)(char *, char *, uint64_t))v55)(&v53[*(int *)(v57 + 36)], &v54[*(int *)(v57 + 36)], v16);
    v58 = v45[6];
    v59 = &v43[v58];
    v60 = &v44[v58];
    v61 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
    *(_OWORD *)&v43[v45[7]] = *(_OWORD *)&v44[v45[7]];
    v62 = v45[8];
    v63 = &v43[v62];
    v64 = &v44[v62];
    v65 = v64[8];
    *(_QWORD *)v63 = *(_QWORD *)v64;
    v63[8] = v65;
    v43[v45[9]] = v44[v45[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v46 + 56))(v43, 0, 1, v45);
  }
  else
  {
    if (v49)
    {
      sub_10001DF70((uint64_t)v43, type metadata accessor for PreparedSparkline);
LABEL_18:
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      goto LABEL_21;
    }
    v66 = *(_QWORD *)v44;
    v67 = *(_QWORD *)v43;
    *(_QWORD *)v43 = *(_QWORD *)v44;
    swift_bridgeObjectRetain(v66);
    v68 = swift_bridgeObjectRelease(v67);
    v69 = v45[5];
    v70 = &v43[v69];
    v71 = &v44[v69];
    ((void (*)(char *, char *, uint64_t, __n128))v120)(&v43[v69], &v44[v69], v16, v68);
    sub_100022800(0);
    v120(&v70[*(int *)(v72 + 36)], &v71[*(int *)(v72 + 36)], v16);
    v73 = v45[6];
    v74 = &v43[v73];
    v75 = &v44[v73];
    v76 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 24))(v74, v75, v76);
    v77 = v45[7];
    v78 = &v43[v77];
    v79 = &v44[v77];
    *(_QWORD *)v78 = *(_QWORD *)v79;
    *((_QWORD *)v78 + 1) = *((_QWORD *)v79 + 1);
    v80 = v45[8];
    v81 = &v43[v80];
    v82 = &v44[v80];
    v83 = v82[8];
    *(_QWORD *)v81 = *(_QWORD *)v82;
    v81[8] = v83;
    v43[v45[9]] = v44[v45[9]];
  }
LABEL_21:
  v84 = v122[10];
  v85 = *(_QWORD *)&v20[v84];
  v86 = *(_QWORD *)&v19[v84];
  *(_QWORD *)&v19[v84] = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRelease(v86);
  v87 = v122[11];
  v88 = &v19[v87];
  v89 = &v20[v87];
  sub_100042D9C(0);
  v91 = v90;
  v92 = *(_QWORD *)(v90 - 8);
  v93 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48);
  LODWORD(v86) = v93(v88, 1, v90);
  v94 = v93(v89, 1, v91);
  if ((_DWORD)v86)
  {
    if (!v94)
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v88, v89, v91);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v88, 0, 1, v91);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v94)
  {
    (*(void (**)(char *, uint64_t))(v92 + 8))(v88, v91);
LABEL_26:
    sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(char *, char *, uint64_t))(v92 + 24))(v88, v89, v91);
LABEL_27:
  v96 = v122[12];
  v97 = &v19[v96];
  v98 = &v20[v96];
  v99 = type metadata accessor for URL(0);
  v100 = *(_QWORD *)(v99 - 8);
  v101 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v100 + 48);
  v102 = v101(v97, 1, v99);
  v103 = v101(v98, 1, v99);
  if (v102)
  {
    v104 = v125;
    if (!v103)
    {
      (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v97, v98, v99);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  v104 = v125;
  if (v103)
  {
    (*(void (**)(char *, uint64_t))(v100 + 8))(v97, v99);
LABEL_32:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(char *, char *, uint64_t))(v100 + 24))(v97, v98, v99);
LABEL_33:
  v106 = v123[6];
  v107 = &v104[v106];
  v108 = &v124[v106];
  v109 = type metadata accessor for WidgetQuote(0);
  v110 = *(_QWORD *)(v109 - 8);
  v111 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v110 + 48);
  v112 = v111(v107, 1, v109);
  v113 = v111(v108, 1, v109);
  if (!v112)
  {
    if (!v113)
    {
      (*(void (**)(char *, char *, uint64_t))(v110 + 24))(v107, v108, v109);
      goto LABEL_39;
    }
    (*(void (**)(char *, uint64_t))(v110 + 8))(v107, v109);
    goto LABEL_38;
  }
  if (v113)
  {
LABEL_38:
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
    goto LABEL_39;
  }
  (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v107, v108, v109);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v107, 0, 1, v109);
LABEL_39:
  v115 = v123[7];
  v116 = &v104[v115];
  v117 = &v124[v115];
  v118 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v118 - 8) + 24))(v116, v117, v118);
  v104[v123[8]] = v124[v123[8]];
  v104[v123[9]] = v124[v123[9]];
  return v126;
}

char *sub_10009F950(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v64;
  void (*v65)(char *, char *, uint64_t);
  int *v66;
  char *v67;
  char *v68;

  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v7, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for Date(0);
  v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v65(v10, v11, v12);
  v66 = (int *)type metadata accessor for DetailTimelineEntry(0);
  v67 = v11;
  v13 = v66[5];
  v68 = v10;
  v14 = &v10[v13];
  v15 = &v11[v13];
  v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  v17 = *((_OWORD *)v15 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
  *((_OWORD *)v14 + 3) = v17;
  v18 = *((_OWORD *)v15 + 5);
  *((_OWORD *)v14 + 4) = *((_OWORD *)v15 + 4);
  *((_OWORD *)v14 + 5) = v18;
  *(_OWORD *)(v14 + 121) = *(_OWORD *)(v15 + 121);
  v19 = *((_OWORD *)v15 + 7);
  *((_OWORD *)v14 + 6) = *((_OWORD *)v15 + 6);
  *((_OWORD *)v14 + 7) = v19;
  v14[137] = v15[137];
  v20 = (int *)type metadata accessor for DetailContentViewModel(0);
  v21 = v20[9];
  v22 = &v14[v21];
  v23 = &v15[v21];
  v24 = (int *)type metadata accessor for PreparedSparkline(0);
  v25 = *((_QWORD *)v24 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v25 + 48))(v23, 1, v24))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v27 = v24[5];
    v64 = a1;
    v28 = &v22[v27];
    v29 = &v23[v27];
    v65(&v22[v27], &v23[v27], v12);
    sub_100022800(0);
    v31 = *(int *)(v30 + 36);
    v32 = &v28[v31];
    a1 = v64;
    v65(v32, &v29[v31], v12);
    v33 = v24[6];
    v34 = &v22[v33];
    v35 = &v23[v33];
    v36 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
    *(_OWORD *)&v22[v24[7]] = *(_OWORD *)&v23[v24[7]];
    v37 = v24[8];
    v38 = &v22[v37];
    v39 = &v23[v37];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    v22[v24[9]] = v23[v24[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v25 + 56))(v22, 0, 1, v24);
  }
  *(_QWORD *)&v14[v20[10]] = *(_QWORD *)&v15[v20[10]];
  v40 = v20[11];
  v41 = &v14[v40];
  v42 = &v15[v40];
  sub_100042D9C(0);
  v44 = v43;
  v45 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v42, 1, v43))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v41, v42, v44);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
  }
  v47 = v20[12];
  v48 = &v14[v47];
  v49 = &v15[v47];
  v50 = type metadata accessor for URL(0);
  v51 = *(_QWORD *)(v50 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v49, v50);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  }
  v53 = v66[6];
  v54 = &v68[v53];
  v55 = &v67[v53];
  v56 = type metadata accessor for WidgetQuote(0);
  v57 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v54, v55, v56);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  v59 = v66[7];
  v60 = &v68[v59];
  v61 = &v67[v59];
  v62 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v60, v61, v62);
  v68[v66[8]] = v67[v66[8]];
  v68[v66[9]] = v67[v66[9]];
  return a1;
}

char *sub_10009FE04(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, int *);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(char *, uint64_t, uint64_t);
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(char *, uint64_t, uint64_t);
  int v82;
  int v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(char *, uint64_t, uint64_t);
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  int *v102;
  int *v103;
  char *v104;
  char *v105;
  char *v106;

  if (a1 != a2)
  {
    sub_100028528((uint64_t)a1, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v7, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for Date(0);
  v101 = *(_QWORD *)(v12 - 8);
  v100 = *(void (**)(char *, char *, uint64_t))(v101 + 40);
  v100(v10, v11, v12);
  v13 = type metadata accessor for DetailTimelineEntry(0);
  v14 = *(int *)(v13 + 20);
  v105 = v10;
  v15 = &v10[v14];
  v16 = &v11[v14];
  v17 = *(_QWORD *)&v11[v14 + 8];
  v18 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v15 = *(_QWORD *)&v11[v14];
  *((_QWORD *)v15 + 1) = v17;
  swift_bridgeObjectRelease(v18);
  v19 = *((_QWORD *)v16 + 3);
  v20 = *((_QWORD *)v15 + 3);
  *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
  *((_QWORD *)v15 + 3) = v19;
  swift_bridgeObjectRelease(v20);
  v21 = *((_QWORD *)v16 + 5);
  v22 = *((_QWORD *)v15 + 5);
  *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
  *((_QWORD *)v15 + 5) = v21;
  swift_bridgeObjectRelease(v22);
  v23 = v15 + 48;
  v24 = v16 + 48;
  v25 = *((_QWORD *)v15 + 9);
  v106 = a1;
  v103 = (int *)v13;
  v104 = v11;
  if (v25 == 1)
    goto LABEL_8;
  v26 = *((_QWORD *)v16 + 9);
  if (v26 == 1)
  {
    sub_10002304C((uint64_t)(v15 + 48));
LABEL_8:
    v27 = *((_OWORD *)v16 + 4);
    *v23 = *v24;
    *((_OWORD *)v15 + 4) = v27;
    goto LABEL_10;
  }
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v15[56] = v16[56];
  *((_QWORD *)v15 + 8) = *((_QWORD *)v16 + 8);
  *((_QWORD *)v15 + 9) = v26;
  swift_bridgeObjectRelease(v25);
LABEL_10:
  *((_QWORD *)v15 + 10) = *((_QWORD *)v16 + 10);
  v15[88] = v16[88];
  v28 = *((_QWORD *)v16 + 13);
  v29 = *((_QWORD *)v15 + 13);
  *((_QWORD *)v15 + 12) = *((_QWORD *)v16 + 12);
  *((_QWORD *)v15 + 13) = v28;
  swift_bridgeObjectRelease(v29);
  *((_QWORD *)v15 + 14) = *((_QWORD *)v16 + 14);
  v15[120] = v16[120];
  *((_QWORD *)v15 + 16) = *((_QWORD *)v16 + 16);
  *((_WORD *)v15 + 68) = *((_WORD *)v16 + 68);
  v102 = (int *)type metadata accessor for DetailContentViewModel(0);
  v30 = v102[9];
  v31 = &v15[v30];
  v32 = &v16[v30];
  v33 = (int *)type metadata accessor for PreparedSparkline(0);
  v34 = *((_QWORD *)v33 - 1);
  v35 = *(uint64_t (**)(char *, uint64_t, int *))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (v37)
      goto LABEL_15;
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v39 = v33[5];
    v40 = &v31[v39];
    v41 = &v32[v39];
    v42 = *(void (**)(char *, char *, uint64_t))(v101 + 32);
    v42(&v31[v39], &v32[v39], v12);
    sub_100022800(0);
    v42(&v40[*(int *)(v43 + 36)], &v41[*(int *)(v43 + 36)], v12);
    v44 = v33[6];
    v45 = &v31[v44];
    v46 = &v32[v44];
    v47 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v45, v46, v47);
    *(_OWORD *)&v31[v33[7]] = *(_OWORD *)&v32[v33[7]];
    v48 = v33[8];
    v49 = &v31[v48];
    v50 = &v32[v48];
    *(_QWORD *)v49 = *(_QWORD *)v50;
    v49[8] = v50[8];
    v31[v33[9]] = v32[v33[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  else
  {
    if (v37)
    {
      sub_10001DF70((uint64_t)v31, type metadata accessor for PreparedSparkline);
LABEL_15:
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      goto LABEL_18;
    }
    v51 = *(_QWORD *)v31;
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v52 = swift_bridgeObjectRelease(v51);
    v53 = v33[5];
    v54 = &v31[v53];
    v55 = &v32[v53];
    ((void (*)(char *, char *, uint64_t, __n128))v100)(&v31[v53], &v32[v53], v12, v52);
    sub_100022800(0);
    v100(&v54[*(int *)(v56 + 36)], &v55[*(int *)(v56 + 36)], v12);
    v57 = v33[6];
    v58 = &v31[v57];
    v59 = &v32[v57];
    v60 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 40))(v58, v59, v60);
    *(_OWORD *)&v31[v33[7]] = *(_OWORD *)&v32[v33[7]];
    v61 = v33[8];
    v62 = &v31[v61];
    v63 = &v32[v61];
    v62[8] = v63[8];
    *(_QWORD *)v62 = *(_QWORD *)v63;
    v31[v33[9]] = v32[v33[9]];
  }
LABEL_18:
  v64 = v102[10];
  v65 = *(_QWORD *)&v15[v64];
  *(_QWORD *)&v15[v64] = *(_QWORD *)&v16[v64];
  swift_bridgeObjectRelease(v65);
  v66 = v102[11];
  v67 = &v15[v66];
  v68 = &v16[v66];
  sub_100042D9C(0);
  v70 = v69;
  v71 = *(_QWORD *)(v69 - 8);
  v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
  v73 = v72(v67, 1, v69);
  v74 = v72(v68, 1, v70);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v67, v68, v70);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v67, 0, 1, v70);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v67, v70);
LABEL_23:
    sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v71 + 40))(v67, v68, v70);
LABEL_24:
  v76 = v102[12];
  v77 = &v15[v76];
  v78 = &v16[v76];
  v79 = type metadata accessor for URL(0);
  v80 = *(_QWORD *)(v79 - 8);
  v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 48);
  v82 = v81(v77, 1, v79);
  v83 = v81(v78, 1, v79);
  if (v82)
  {
    v84 = v105;
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  v84 = v105;
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v77, v79);
LABEL_29:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v80 + 40))(v77, v78, v79);
LABEL_30:
  v86 = v103[6];
  v87 = &v84[v86];
  v88 = &v104[v86];
  v89 = type metadata accessor for WidgetQuote(0);
  v90 = *(_QWORD *)(v89 - 8);
  v91 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48);
  v92 = v91(v87, 1, v89);
  v93 = v91(v88, 1, v89);
  if (!v92)
  {
    if (!v93)
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 40))(v87, v88, v89);
      goto LABEL_36;
    }
    (*(void (**)(char *, uint64_t))(v90 + 8))(v87, v89);
    goto LABEL_35;
  }
  if (v93)
  {
LABEL_35:
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v87, v88, v89);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
LABEL_36:
  v95 = v103[7];
  v96 = &v84[v95];
  v97 = &v104[v95];
  v98 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 40))(v96, v97, v98);
  v84[v103[8]] = v104[v103[8]];
  v84[v103[9]] = v104[v103[9]];
  return v106;
}

uint64_t sub_1000A0548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A0554);
}

uint64_t sub_1000A0554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  sub_10000EDE8(0, &qword_100115A80, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for DetailTimelineEntry(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1000A05E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A05EC);
}

uint64_t sub_1000A05EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  sub_10000EDE8(0, &qword_100115A80, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for DetailTimelineEntry(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for DetailChartComplicationContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100116D30;
  if (!qword_100116D30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DetailChartComplicationContentView);
  return result;
}

void sub_1000A06BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_10000EDE8(319, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for DetailTimelineEntry(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000A0758(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E999C, 1);
}

uint64_t sub_1000A0768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t KeyPath;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  char v69;
  __int128 v70;
  __int128 v71;
  char v72;

  sub_1000A3450(0, &qword_100116E70, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v65 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v60 - v5;
  sub_1000A34C8(0, &qword_100116E78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v61 = v7;
  __chkstk_darwin(v7);
  v62 = (uint64_t)&v60 - v8;
  sub_1000A34C8(0, &qword_100116DE0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
  v66 = v9;
  __chkstk_darwin(v9);
  v64 = (char *)&v60 - v10;
  sub_10000EDE8(0, &qword_100112D28, (uint64_t (*)(uint64_t))&type metadata accessor for Image.Scale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
  v12 = v11;
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v60 - v13);
  v15 = type metadata accessor for Image.Scale(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100026C6C(0);
  v20 = v19;
  __chkstk_darwin(v19);
  v22 = (uint64_t *)((char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v23);
  v63 = (uint64_t)&v60 - v24;
  v25 = a1 + *(int *)(type metadata accessor for DetailChartComplicationContentView(0) + 20);
  v26 = type metadata accessor for DetailTimelineEntry(0);
  v28 = *(unsigned __int8 *)(v25 + *(int *)(v26 + 20) + 137);
  if (v28 == 2)
  {
    if (*(_BYTE *)(v25 + *(int *)(v26 + 32)) == 1)
    {
      v29 = static Font.caption.getter();
      static Font.Weight.medium.getter(v29);
      v30 = Font.weight(_:)(v29);
      swift_release(v29);
      v31 = Text.font(_:)(v30, 11565, 0xE200000000000000, 0, _swiftEmptyArrayStorage);
      v33 = v32;
      v35 = v34;
      v37 = v36;
      swift_release(v30);
      *(_QWORD *)&v67 = v31;
      *((_QWORD *)&v67 + 1) = v33;
      *(_QWORD *)&v68 = v35 & 1;
      *((_QWORD *)&v68 + 1) = v37;
      v69 = 0;
    }
    else
    {
      v67 = 0u;
      v68 = 0u;
      v69 = 1;
    }
    _ConditionalContent<>.init(storage:)(&v67, &type metadata for Text, &type metadata for EmptyView, &protocol witness table for Text, &protocol witness table for EmptyView);
    v45 = v71;
    v46 = v72;
    *(_OWORD *)v6 = v70;
    *((_OWORD *)v6 + 1) = v45;
    v6[32] = v46;
    swift_storeEnumTagMultiPayload(v6, v65, 1);
    sub_1000A2AE8();
    v48 = v47;
    v49 = sub_1000A3524();
    v50 = sub_1000A365C();
    return _ConditionalContent<>.init(storage:)(v6, v66, v48, v49, v50);
  }
  else
  {
    v60 = a2;
    if ((v28 & 1) != 0)
    {
      v52 = Image.init(systemName:)(0xD000000000000017, 0x80000001000E5490, v27);
      (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for Image.Scale.small(_:), v15);
      KeyPath = swift_getKeyPath(&unk_1000E1B38);
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))((char *)v14 + *(int *)(v12 + 28), v18, v15);
      *v14 = KeyPath;
      sub_1000A3324((uint64_t)v14, (uint64_t)v22 + *(int *)(v20 + 36), &qword_100112D28, (uint64_t (*)(uint64_t))&type metadata accessor for Image.Scale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
      *v22 = v52;
      swift_retain(v52);
      sub_100028528((uint64_t)v14, &qword_100112D28, (uint64_t (*)(uint64_t))&type metadata accessor for Image.Scale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      swift_release(v52);
      v40 = v63;
      sub_10000ED3C((uint64_t)v22, v63, (uint64_t (*)(_QWORD))sub_100026C6C);
      v41 = v62;
      sub_10001DE2C(v40, v62, (uint64_t (*)(_QWORD))sub_100026C6C);
      v42 = v41;
      v43 = v61;
      v44 = 1;
    }
    else
    {
      v38 = Image.init(systemName:)(0xD000000000000015, 0x80000001000E54B0, v27);
      (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for Image.Scale.small(_:), v15);
      v39 = swift_getKeyPath(&unk_1000E1B38);
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))((char *)v14 + *(int *)(v12 + 28), v18, v15);
      *v14 = v39;
      sub_1000A3324((uint64_t)v14, (uint64_t)v22 + *(int *)(v20 + 36), &qword_100112D28, (uint64_t (*)(uint64_t))&type metadata accessor for Image.Scale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
      *v22 = v38;
      swift_retain(v38);
      sub_100028528((uint64_t)v14, &qword_100112D28, (uint64_t (*)(uint64_t))&type metadata accessor for Image.Scale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      swift_release(v38);
      v40 = v63;
      sub_10000ED3C((uint64_t)v22, v63, (uint64_t (*)(_QWORD))sub_100026C6C);
      v41 = v62;
      sub_10001DE2C(v40, v62, (uint64_t (*)(_QWORD))sub_100026C6C);
      v42 = v41;
      v43 = v61;
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v42, v43, v44);
    v54 = sub_1000A3594();
    v55 = (uint64_t)v64;
    _ConditionalContent<>.init(storage:)(v41, v20, v20, v54, v54);
    sub_1000A36E0(v55, (uint64_t)v6);
    swift_storeEnumTagMultiPayload(v6, v65, 0);
    sub_1000A2AE8();
    v57 = v56;
    v58 = sub_1000A3524();
    v59 = sub_1000A365C();
    _ConditionalContent<>.init(storage:)(v6, v66, v57, v58, v59);
    sub_1000A3734(v55);
    return sub_10001DF70(v40, (uint64_t (*)(_QWORD))sub_100026C6C);
  }
}

uint64_t sub_1000A0D5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v42 = a1;
  v43 = type metadata accessor for ColorScheme(0);
  v41 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RedactionReasons(0);
  v38 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A2684(0);
  v37 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000270DC(0, &qword_100116E40, v10, sub_1000A2F5C, (uint64_t)&opaque type descriptor for <<opaque return type of View.redacted(reason:)>>);
  v39 = *(_QWORD *)(v11 - 8);
  v40 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v37 - v12;
  v14 = type metadata accessor for DetailContentViewModel(0);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = v1 + *(int *)(type metadata accessor for DetailChartComplicationContentView(0) + 20);
  v18 = type metadata accessor for DetailTimelineEntry(0);
  v19 = sub_10001DE2C(v17 + *(int *)(v18 + 20), (uint64_t)v16, type metadata accessor for DetailContentViewModel);
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v19);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  sub_1000A2F78(0);
  v21 = sub_1000A10D4(v1, v16, (uint64_t)&v9[*(int *)(v20 + 44)]);
  if (*(_BYTE *)(v17 + *(int *)(v18 + 32)) == 1)
  {
    static RedactionReasons.placeholder.getter(v21);
  }
  else
  {
    v44 = _swiftEmptyArrayStorage;
    v22 = sub_100003D3C(&qword_100113080, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
    sub_10000EDE8(0, &qword_100113088, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    v24 = v23;
    v25 = sub_10002C338();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v24, v25, v4, v22);
  }
  v26 = sub_1000A2F5C();
  View.redacted(reason:)(v6, v37, v26);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v6, v4);
  sub_10001DF70((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1000A2684);
  KeyPath = swift_getKeyPath(&unk_1000E1A78);
  v28 = v41;
  v29 = v43;
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v3, enum case for ColorScheme.dark(_:), v43);
  sub_1000A2FFC(0);
  v31 = v42;
  v32 = (uint64_t *)(v42 + *(int *)(v30 + 36));
  sub_10000EDE8(0, &qword_100113020, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))((char *)v32 + *(int *)(v33 + 28), v3, v29);
  *v32 = KeyPath;
  v35 = v39;
  v34 = v40;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v31, v13, v40);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v3, v29);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v34);
  return sub_10001DF70((uint64_t)v16, type metadata accessor for DetailContentViewModel);
}

uint64_t sub_1000A10D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t KeyPath;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t OpaqueTypeConformance2;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  _QWORD v132[2];
  __int128 v133;
  uint64_t v134;
  uint64_t v135;

  v131 = a2;
  v112 = a1;
  v130 = a3;
  v109 = type metadata accessor for SparklineView(0);
  __chkstk_darwin(v109);
  v105 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000270DC(0, (unint64_t *)&qword_1001135F0, v5, sub_1000A2EE0, (uint64_t)&opaque type descriptor for <<opaque return type of View.chartXAxis(_:)>>);
  v108 = v6;
  v107 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v106 = (char *)&v101 - v7;
  sub_100030F58(0);
  v129 = v8;
  v127 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v104 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v10);
  v102 = (uint64_t)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v123 = (char *)&v101 - v13;
  v124 = type metadata accessor for PreparedSparkline(0);
  v122 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v103 = (uint64_t)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100116E30, (uint64_t (*)(uint64_t))sub_100030F58, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v15);
  v128 = (uint64_t)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v126 = (char *)&v101 - v18;
  v121 = type metadata accessor for AccessibilityChildBehavior(0);
  v120 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v119 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100116DA8, (uint64_t (*)(uint64_t))sub_1000A29A4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
  __chkstk_darwin(v20);
  v22 = (char *)&v101 - v21;
  sub_1000A2910(0);
  v110 = v23;
  __chkstk_darwin(v23);
  v25 = (char *)&v101 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A2894(0);
  v111 = v26;
  __chkstk_darwin(v26);
  v28 = (char *)&v101 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A2818(0);
  v114 = v29;
  __chkstk_darwin(v29);
  v31 = (char *)&v101 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000270DC(0, &qword_100116D88, v32, (uint64_t (*)(void))sub_1000A2C10, (uint64_t)&opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>);
  v116 = v33;
  v117 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v35 = (char *)&v101 - v34;
  sub_1000A2794(0);
  v118 = v36;
  __chkstk_darwin(v36);
  v125 = (uint64_t)&v101 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v40 = (char *)&v101 - v39;
  __chkstk_darwin(v41);
  v115 = (char *)&v101 - v42;
  __chkstk_darwin(v43);
  v113 = (char *)&v101 - v44;
  sub_1000A1B6C(a1, v131);
  KeyPath = swift_getKeyPath(&unk_1000E1AA8);
  sub_1000A3324((uint64_t)v22, (uint64_t)v25, &qword_100116DA8, (uint64_t (*)(uint64_t))sub_1000A29A4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
  v46 = &v25[*(int *)(v110 + 36)];
  *(_QWORD *)v46 = KeyPath;
  *((_QWORD *)v46 + 1) = 1;
  v46[16] = 0;
  sub_100028528((uint64_t)v22, &qword_100116DA8, (uint64_t (*)(uint64_t))sub_1000A29A4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
  v47 = swift_getKeyPath(&unk_1000E1AD8);
  sub_10001DE2C((uint64_t)v25, (uint64_t)v28, (uint64_t (*)(_QWORD))sub_1000A2910);
  v48 = (uint64_t *)&v28[*(int *)(v111 + 36)];
  *v48 = v47;
  v48[1] = 0x3FE6000000000000;
  v49 = sub_10001DF70((uint64_t)v25, (uint64_t (*)(_QWORD))sub_1000A2910);
  v50 = static Font.body.getter(v49);
  v51 = swift_getKeyPath(&unk_1000E1B08);
  sub_10001DE2C((uint64_t)v28, (uint64_t)v31, (uint64_t (*)(_QWORD))sub_1000A2894);
  v52 = v114;
  v53 = (uint64_t *)&v31[*(int *)(v114 + 36)];
  *v53 = v51;
  v53[1] = v50;
  v54 = sub_10001DF70((uint64_t)v28, (uint64_t (*)(_QWORD))sub_1000A2894);
  v55 = v119;
  static AccessibilityChildBehavior.ignore.getter(v54);
  v56 = sub_1000A2C10();
  View.accessibilityElement(children:)(v55, v52, v56);
  (*(void (**)(char *, uint64_t))(v120 + 8))(v55, v121);
  sub_10001DF70((uint64_t)v31, (uint64_t (*)(_QWORD))sub_1000A2818);
  v57 = v131[3];
  v134 = v131[2];
  v135 = v57;
  *(_QWORD *)&v133 = v52;
  *((_QWORD *)&v133 + 1) = v56;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v59 = sub_1000144A0();
  v60 = v116;
  View.accessibilityLabel<A>(_:)(&v134, v116, &type metadata for String, OpaqueTypeConformance2);
  v61 = v35;
  v62 = (uint64_t)v113;
  (*(void (**)(char *, uint64_t))(v117 + 8))(v61, v60);
  v63 = v112;
  v64 = sub_1000A21E4();
  v66 = v65;
  v134 = (uint64_t)v64;
  v135 = v65;
  v67 = (uint64_t)v115;
  v68 = v122;
  v69 = v59;
  v70 = (uint64_t)v123;
  ModifiedContent<>.accessibilityValue<A>(_:)(&v134, v118, &type metadata for String, v69, v71);
  swift_bridgeObjectRelease(v66);
  sub_10001DF70((uint64_t)v40, (uint64_t (*)(_QWORD))sub_1000A2794);
  sub_10000ED3C(v67, v62, (uint64_t (*)(_QWORD))sub_1000A2794);
  v72 = v63 + *(int *)(type metadata accessor for DetailChartComplicationContentView(0) + 20);
  v73 = *(int *)(type metadata accessor for DetailTimelineEntry(0) + 20);
  v74 = v73 + *(int *)(type metadata accessor for DetailContentViewModel(0) + 36);
  v75 = v124;
  sub_1000A3324(v72 + v74, v70, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v70, 1, v75) == 1)
  {
    sub_100028528(v70, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v76 = 1;
    v77 = v129;
    v79 = (uint64_t)v126;
    v78 = v127;
  }
  else
  {
    v80 = v103;
    sub_10000ED3C(v70, v103, type metadata accessor for PreparedSparkline);
    v81 = v102;
    sub_10001DE2C(v80, v102, type metadata accessor for PreparedSparkline);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v68 + 56))(v81, 0, 1, v75);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v133, 1, 0, _swiftEmptyArrayStorage, 2.0, 10.0, 0.0);
    sub_1000143C4(0, (unint64_t *)&qword_100113600, (uint64_t)&type metadata for CGFloat, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v83 = swift_allocObject(v82, 48, 7);
    *(_OWORD *)(v83 + 16) = xmmword_1000DD060;
    *(_OWORD *)(v83 + 32) = xmmword_1000E19F0;
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v134, 1, 0, v83, 2.0, 10.0, 0.0);
    v84 = v105;
    sub_100046A84(v81, &v133, (uint64_t)&v134, 0, 0, 0, 1, v105, 0.3);
    v85 = sub_1000A2EE0();
    v86 = v106;
    v87 = v109;
    View.chartXAxis(_:)(2, v109, v85);
    sub_10001DF70(v84, type metadata accessor for SparklineView);
    v132[0] = v87;
    v132[1] = v85;
    v88 = swift_getOpaqueTypeConformance2(v132, &opaque type descriptor for <<opaque return type of View.chartXAxis(_:)>>, 1);
    v89 = v104;
    v90 = v108;
    View.chartYAxis(_:)(2, v108, v88);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v86, v90);
    sub_10001DF70(v80, type metadata accessor for PreparedSparkline);
    v79 = (uint64_t)v126;
    v91 = v127;
    v92 = v129;
    (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v126, v89, v129);
    v76 = 0;
    v77 = v92;
    v78 = v91;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v79, v76, 1, v77);
  v93 = v125;
  sub_10001DE2C(v62, v125, (uint64_t (*)(_QWORD))sub_1000A2794);
  v94 = v128;
  sub_1000A3324(v79, v128, &qword_100116E30, (uint64_t (*)(uint64_t))sub_100030F58, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v95 = v130;
  sub_10001DE2C(v93, v130, (uint64_t (*)(_QWORD))sub_1000A2794);
  sub_1000A26FC(0);
  v97 = v96;
  v98 = v95 + *(int *)(v96 + 48);
  *(_QWORD *)v98 = 0x400C000000000000;
  *(_BYTE *)(v98 + 8) = 0;
  sub_1000A3324(v94, v95 + *(int *)(v96 + 64), &qword_100116E30, (uint64_t (*)(uint64_t))sub_100030F58, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v99 = v95 + *(int *)(v97 + 80);
  *(_QWORD *)v99 = 0x3FF0000000000000;
  *(_BYTE *)(v99 + 8) = 0;
  sub_100028528(v79, &qword_100116E30, (uint64_t (*)(uint64_t))sub_100030F58, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  sub_10001DF70(v62, (uint64_t (*)(_QWORD))sub_1000A2794);
  sub_100028528(v94, &qword_100116E30, (uint64_t (*)(uint64_t))sub_100030F58, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  return sub_10001DF70(v93, (uint64_t (*)(_QWORD))sub_1000A2794);
}

uint64_t sub_1000A1B6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[16];

  sub_1000A29B8(0);
  v5 = v4;
  __chkstk_darwin(v4);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000A3374(0, &qword_100116E60, (uint64_t (*)(uint64_t, void *, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v9 = v8;
  __chkstk_darwin(v8);
  v11 = &v22[-v10];
  v12 = a1 + *(int *)(type metadata accessor for DetailChartComplicationContentView(0) + 20);
  v13 = type metadata accessor for DetailTimelineEntry(0);
  if (*(_BYTE *)(v12 + *(int *)(v13 + 32)) == 1)
  {
    v14 = LocalizedStringKey.init(stringLiteral:)(0x2E2E2E2E2E2E2E2ELL, 0xEB000000002E2E2ELL);
    *(_QWORD *)v11 = Text.init(_:tableName:bundle:comment:)(v14);
    *((_QWORD *)v11 + 1) = v15;
    v11[16] = v16 & 1;
    *((_QWORD *)v11 + 3) = v17;
    swift_storeEnumTagMultiPayload(v11, v9, 0);
    v18 = sub_100003D3C(&qword_100116E28, (uint64_t (*)(uint64_t))sub_1000A29B8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    return _ConditionalContent<>.init(storage:)(v11, &type metadata for Text, v5, &protocol witness table for Text, v18);
  }
  else
  {
    *(_QWORD *)v7 = static VerticalAlignment.center.getter(v13);
    *((_QWORD *)v7 + 1) = 0x4000000000000000;
    v7[16] = 0;
    sub_1000A33D4(0);
    sub_1000A1D98(a1, a2, (uint64_t)&v7[*(int *)(v20 + 44)]);
    sub_10001DE2C((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1000A29B8);
    swift_storeEnumTagMultiPayload(v11, v9, 1);
    v21 = sub_100003D3C(&qword_100116E28, (uint64_t (*)(uint64_t))sub_1000A29B8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v11, &type metadata for Text, v5, &protocol witness table for Text, v21);
    return sub_10001DF70((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1000A29B8);
  }
}

uint64_t sub_1000A1D98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, __n128);
  __n128 v59;
  __n128 v60;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  char v77;
  uint64_t v78;
  char v79;

  v62[1] = a1;
  v68 = a3;
  v5 = type metadata accessor for PriceChangeDisplay(0);
  v63 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (int *)_s11FormatStyleVMa_0(0);
  __chkstk_darwin(v8);
  v10 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A2B44();
  v66 = *(_QWORD *)(v11 - 8);
  v67 = v11;
  __chkstk_darwin(v11);
  v65 = (char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v70 = (char *)v62 - v14;
  sub_10000EDE8(0, (unint64_t *)&qword_100116DD0, (uint64_t (*)(uint64_t))sub_1000A2AD4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
  __chkstk_darwin(v15);
  v69 = (uint64_t)v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v71 = (uint64_t)v62 - v18;
  sub_1000A0768(a1, (uint64_t)v62 - v18);
  v19 = *a2;
  v20 = a2[1];
  swift_bridgeObjectRetain(v20);
  v22 = static Font.Weight.bold.getter(v21);
  v23 = Text.fontWeight(_:)(*(_QWORD *)&v22, 0, v19, v20, 0, _swiftEmptyArrayStorage);
  v25 = v24;
  LOBYTE(v19) = v26;
  v28 = v27;
  swift_bridgeObjectRelease(v20);
  v73 = v23;
  v74 = v25;
  LOBYTE(v75) = v19 & 1;
  *(_QWORD *)&v76 = v28;
  View.widgetAccentable(_:)(1, &type metadata for Text, &protocol witness table for Text);
  sub_100014490(v23, v25, v19 & 1);
  swift_bridgeObjectRelease(v28);
  v29 = *((_BYTE *)a2 + 88);
  v30 = a2[12];
  v31 = *((_BYTE *)a2 + 120);
  v32 = a2[16];
  v33 = *((_BYTE *)a2 + 136);
  v73 = a2[10];
  LOBYTE(v74) = v29;
  v75 = v30;
  v76 = *(_OWORD *)(a2 + 13);
  v77 = v31;
  v78 = v32;
  v79 = v33;
  swift_bridgeObjectRetain(v76);
  sub_100046458(v7);
  v35 = v63;
  v34 = v64;
  (*(void (**)(char *, _QWORD *, uint64_t))(v63 + 16))(v10, v7, v64);
  v10[v8[5]] = 0;
  v10[v8[6]] = 0;
  v10[v8[7]] = 0;
  v36 = &v10[v8[8]];
  *(_QWORD *)v36 = 9666786;
  *((_QWORD *)v36 + 1) = 0xA300000000000000;
  (*(void (**)(_QWORD *, uint64_t))(v35 + 8))(v7, v34);
  v37 = sub_100003D3C(&qword_100116C48, _s11FormatStyleVMa_0, (uint64_t)&unk_1000E08D0);
  v38 = sub_10009D44C();
  v63 = Text.init<A>(_:format:)(&v73, v10, v8, v37, v38);
  v64 = v39;
  v41 = v40;
  LOBYTE(v37) = v42;
  v43 = v69;
  sub_1000A3324(v71, v69, (unint64_t *)&qword_100116DD0, (uint64_t (*)(uint64_t))sub_1000A2AD4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
  v45 = v65;
  v44 = v66;
  v46 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
  v47 = v67;
  v46(v65, v70, v67);
  LOBYTE(v73) = 1;
  v72 = v37 & 1;
  v48 = v43;
  v49 = v68;
  sub_1000A3324(v48, v68, (unint64_t *)&qword_100116DD0, (uint64_t (*)(uint64_t))sub_1000A2AD4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
  sub_1000A2A30(0);
  v51 = v50;
  v46((char *)(v49 + *(int *)(v50 + 48)), v45, v47);
  v52 = v49 + *(int *)(v51 + 64);
  v53 = v73;
  *(_QWORD *)v52 = 0;
  *(_BYTE *)(v52 + 8) = v53;
  v54 = v49 + *(int *)(v51 + 80);
  v55 = v72;
  v57 = v63;
  v56 = v64;
  *(_QWORD *)v54 = v63;
  *(_QWORD *)(v54 + 8) = v41;
  *(_BYTE *)(v54 + 16) = v55;
  *(_QWORD *)(v54 + 24) = v56;
  sub_1000144EC(v57, v41, v55);
  v58 = *(void (**)(char *, uint64_t, __n128))(v44 + 8);
  v59 = swift_bridgeObjectRetain(v56);
  v58(v70, v47, v59);
  sub_100028528(v71, (unint64_t *)&qword_100116DD0, (uint64_t (*)(uint64_t))sub_1000A2AD4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
  sub_100014490(v57, v41, v72);
  v60 = swift_bridgeObjectRelease(v56);
  v58(v45, v47, v60);
  return sub_100028528(v69, (unint64_t *)&qword_100116DD0, (uint64_t (*)(uint64_t))sub_1000A2AD4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
}

id sub_1000A21E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t inited;
  id result;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  id v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char v53[24];
  uint64_t v54;

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v48 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v47 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for PriceChangeDisplay(0);
  v5 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v7 = (uint64_t *)((char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (int *)_s11FormatStyleVMa_0(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000143C4(0, (unint64_t *)&qword_1001127A0, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v12 = swift_allocObject(v11, 64, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1000DD060;
  v13 = v0 + *(int *)(type metadata accessor for DetailChartComplicationContentView(0) + 20);
  v14 = v13 + *(int *)(type metadata accessor for DetailTimelineEntry(0) + 20);
  v15 = *(_QWORD *)(v14 + 80);
  v16 = *(unsigned __int8 *)(v14 + 88);
  v51 = *(_QWORD *)(v14 + 112);
  v50 = *(unsigned __int8 *)(v14 + 120);
  v49 = *(_QWORD *)(v14 + 128);
  v17 = *(unsigned __int8 *)(v14 + 136);
  sub_100046458(v7);
  v18 = v52;
  (*(void (**)(char *, _QWORD *, uint64_t))(v5 + 16))(v10, v7, v52);
  v10[v8[5]] = 0;
  v10[v8[6]] = 0;
  v10[v8[7]] = 1;
  v19 = &v10[v8[8]];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0xE000000000000000;
  v20 = v7;
  v21 = v12;
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v20, v18);
  v22 = sub_100081FC0(v15, v16, v51, v50, v49, v17);
  v24 = v23;
  sub_10001DF70((uint64_t)v10, _s11FormatStyleVMa_0);
  *(_QWORD *)(v12 + 32) = v22;
  *(_QWORD *)(v12 + 40) = v24;
  if (*(_QWORD *)(v14 + 72) == 1)
  {
    v25 = v47;
    v26 = String.LocalizationValue.init(stringLiteral:)(0x616C696176616E75, 0xEB00000000656C62);
    v27 = v48;
    static Locale.current.getter(v26);
    v28 = String.init(localized:table:bundle:locale:comment:)(v25, 0, 0, 0, v27, "Accessibility string for when information is unavailable (spoken instead of em-dash)", 84, 2);
    v30 = v29;
LABEL_16:
    *(_QWORD *)(v21 + 48) = v28;
    *(_QWORD *)(v21 + 56) = v30;
    v54 = v21;
    sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
    v43 = v42;
    v44 = sub_100075848();
    v45 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v43, v44);
    swift_bridgeObjectRelease(v21);
    return (id)v45;
  }
  v28 = 9666786;
  if ((*(_BYTE *)(v14 + 56) & 1) != 0)
  {
LABEL_15:
    v30 = 0xA300000000000000;
    goto LABEL_16;
  }
  v31 = *(double *)(v14 + 48);
  if (v31 <= 1000000.0)
  {
LABEL_10:
    if (qword_1001114C0 != -1)
      swift_once(&qword_1001114C0, sub_1000570EC);
    v38 = (id)sub_1000221F8(0, 3, 1, v31);
    objc_msgSend(v38, "setNumberStyle:", 1);
    v39 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v31);
    v40 = objc_msgSend(v38, "stringFromNumber:", v39);

    if (v40)
    {
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v30 = v41;

      goto LABEL_16;
    }

    goto LABEL_15;
  }
  v32 = type metadata accessor for UnitNumberFormatter();
  inited = swift_initStackObject(v32, v53);
  result = objc_msgSend(objc_allocWithZone((Class)SCICUNumberFormatter), "init");
  *(_QWORD *)(inited + 16) = result;
  if ((~*(_QWORD *)&v31 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v31 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v31 < 9.22337204e18)
  {
    v35 = result;
    v36 = sub_10003D8F4((uint64_t)v31, 0, 0);
    v30 = v37;

    if (v30)
    {
      v28 = v36;
      goto LABEL_16;
    }
    goto LABEL_10;
  }
LABEL_19:
  __break(1u);
  return result;
}

void sub_1000A2684(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100116D68)
  {
    sub_10000EDE8(255, &qword_100116D70, (uint64_t (*)(uint64_t))sub_1000A26FC, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_1000A2EFC();
    v5 = type metadata accessor for VStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100116D68);
  }
}

void sub_1000A26FC(uint64_t a1)
{
  unint64_t TupleTypeMetadata;
  uint64_t v3;

  if (!qword_100116D78)
  {
    sub_1000A2794(255);
    sub_10000EDE8(255, &qword_100116E30, (uint64_t (*)(uint64_t))sub_100030F58, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    TupleTypeMetadata = swift_getTupleTypeMetadata(a1, 4);
    if (!v3)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_100116D78);
  }
}

void sub_1000A2794(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100116D80)
  {
    sub_1000270DC(255, &qword_100116D88, (uint64_t (*)(uint64_t))sub_1000A2818, (uint64_t (*)(void))sub_1000A2C10, (uint64_t)&opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>);
    v3 = v2;
    v4 = type metadata accessor for AccessibilityAttachmentModifier(255);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100116D80);
  }
}

void sub_1000A2818(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100116D90)
  {
    sub_1000A2894(255);
    v3 = v2;
    sub_100026CE0(255, &qword_100112D40, &qword_100112D48, (uint64_t)&type metadata for Font);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100116D90);
  }
}

void sub_1000A2894(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100116D98)
  {
    sub_1000A2910(255);
    v3 = v2;
    sub_1000143C4(255, (unint64_t *)&qword_100112D70, (uint64_t)&type metadata for CGFloat, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100116D98);
  }
}

void sub_1000A2910(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100116DA0)
  {
    sub_10000EDE8(255, &qword_100116DA8, (uint64_t (*)(uint64_t))sub_1000A29A4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
    v3 = v2;
    sub_100026CE0(255, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100116DA0);
  }
}

void sub_1000A29A4(uint64_t a1)
{
  sub_1000A3374(a1, &qword_100116DB0, (uint64_t (*)(uint64_t, void *, uint64_t))&type metadata accessor for _ConditionalContent);
}

void sub_1000A29B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100116DB8)
  {
    sub_10000EDE8(255, &qword_100116DC0, (uint64_t (*)(uint64_t))sub_1000A2A30, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_1000A2BB0();
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100116DB8);
  }
}

void sub_1000A2A30(uint64_t a1)
{
  unint64_t TupleTypeMetadata;
  uint64_t v3;

  if (!qword_100116DC8)
  {
    sub_10000EDE8(255, (unint64_t *)&qword_100116DD0, (uint64_t (*)(uint64_t))sub_1000A2AD4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
    sub_1000A2B44();
    TupleTypeMetadata = swift_getTupleTypeMetadata(a1, 4);
    if (!v3)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_100116DC8);
  }
}

void sub_1000A2AD4(uint64_t a1)
{
  sub_1000A3450(a1, &qword_100116DD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
}

void sub_1000A2AE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100116DE8)
  {
    v0 = type metadata accessor for _ConditionalContent(0, &type metadata for Text, &type metadata for EmptyView);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100116DE8);
  }
}

void sub_1000A2B44()
{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v1;
  _QWORD v2[2];

  if (!qword_100116DF0)
  {
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, v2, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 0);
    if (!v1)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100116DF0);
  }
}

unint64_t sub_1000A2BB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116DF8;
  if (!qword_100116DF8)
  {
    sub_10000EDE8(255, &qword_100116DC0, (uint64_t (*)(uint64_t))sub_1000A2A30, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100116DF8);
  }
  return result;
}

unint64_t sub_1000A2C10()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116E00;
  if (!qword_100116E00)
  {
    sub_1000A2818(255);
    v2 = v1;
    sub_1000A2C98();
    sub_1000276E8(&qword_100112E30, &qword_100112D40, &qword_100112D48, (uint64_t)&type metadata for Font);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116E00);
  }
  return result;
}

unint64_t sub_1000A2C98()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116E08;
  if (!qword_100116E08)
  {
    sub_1000A2894(255);
    v2 = v1;
    sub_1000A2D00();
    sub_1000A2E80();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116E08);
  }
  return result;
}

unint64_t sub_1000A2D00()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116E10;
  if (!qword_100116E10)
  {
    sub_1000A2910(255);
    v2 = v1;
    sub_1000A2D88();
    sub_1000276E8(&qword_100112D98, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116E10);
  }
  return result;
}

unint64_t sub_1000A2D88()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116E18;
  if (!qword_100116E18)
  {
    sub_10000EDE8(255, &qword_100116DA8, (uint64_t (*)(uint64_t))sub_1000A29A4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
    v2 = v1;
    sub_1000A2E00();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v2);
    atomic_store(result, (unint64_t *)&qword_100116E18);
  }
  return result;
}

unint64_t sub_1000A2E00()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116E20;
  if (!qword_100116E20)
  {
    sub_1000A29A4(255);
    v2 = v1;
    sub_100003D3C(&qword_100116E28, (uint64_t (*)(uint64_t))sub_1000A29B8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116E20);
  }
  return result;
}

unint64_t sub_1000A2E80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100112DA0;
  if (!qword_100112DA0)
  {
    sub_1000143C4(255, (unint64_t *)&qword_100112D70, (uint64_t)&type metadata for CGFloat, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100112DA0);
  }
  return result;
}

uint64_t sub_1000A2EE0()
{
  return sub_100003D3C(&qword_1001135F8, type metadata accessor for SparklineView, (uint64_t)&unk_1000DDD08);
}

unint64_t sub_1000A2EFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116E38;
  if (!qword_100116E38)
  {
    sub_10000EDE8(255, &qword_100116D70, (uint64_t (*)(uint64_t))sub_1000A26FC, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100116E38);
  }
  return result;
}

uint64_t sub_1000A2F5C()
{
  return sub_100003D3C(&qword_100116E48, (uint64_t (*)(uint64_t))sub_1000A2684, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

void sub_1000A2F78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100116E50)
  {
    sub_10000EDE8(255, &qword_100116D70, (uint64_t (*)(uint64_t))sub_1000A26FC, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _VStackLayout, v2, &protocol witness table for _VStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100116E50);
  }
}

void sub_1000A2FFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100116E58)
  {
    sub_1000270DC(255, &qword_100116E40, (uint64_t (*)(uint64_t))sub_1000A2684, sub_1000A2F5C, (uint64_t)&opaque type descriptor for <<opaque return type of View.redacted(reason:)>>);
    v3 = v2;
    sub_10000EDE8(255, &qword_100113020, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100116E58);
  }
}

uint64_t sub_1000A3098@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000A30C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000A30F8(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000A3124(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000A3150()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1000A3170(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Image.Scale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.imageScale.setter(v4);
}

uint64_t sub_1000A31EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000A3214(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

void sub_1000A323C(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

void sub_1000A3264(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_1000A328C(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_1000A32B0(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_1000A32D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000A32FC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_1000A3324(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;

  sub_10000EDE8(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void sub_1000A3374(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1000A29B8(255);
    v7 = a3(a1, &type metadata for Text, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1000A33D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100116E68)
  {
    sub_10000EDE8(255, &qword_100116DC0, (uint64_t (*)(uint64_t))sub_1000A2A30, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _HStackLayout, v2, &protocol witness table for _HStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100116E68);
  }
}

void sub_1000A3450(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_1000A34C8(255, &qword_100116DE0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v7 = v6;
    sub_1000A2AE8();
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_1000A34C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_100026C6C(255);
    v7 = a3(a1, v6, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1000A3524()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116E80;
  if (!qword_100116E80)
  {
    sub_1000A34C8(255, &qword_100116DE0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v2 = v1;
    sub_1000A3594();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116E80);
  }
  return result;
}

unint64_t sub_1000A3594()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100116E88;
  if (!qword_100116E88)
  {
    sub_100026C6C(255);
    v2 = v1;
    sub_1000A35FC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116E88);
  }
  return result;
}

unint64_t sub_1000A35FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116E90;
  if (!qword_100116E90)
  {
    sub_10000EDE8(255, &qword_100112D28, (uint64_t (*)(uint64_t))&type metadata accessor for Image.Scale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100116E90);
  }
  return result;
}

unint64_t sub_1000A365C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116E98;
  if (!qword_100116E98)
  {
    sub_1000A2AE8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116E98);
  }
  return result;
}

uint64_t sub_1000A36BC()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1000A36E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000A34C8(0, &qword_100116DE0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A3734(uint64_t a1)
{
  uint64_t v2;

  sub_1000A34C8(0, &qword_100116DE0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000A3784()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100116EA0;
  if (!qword_100116EA0)
  {
    sub_1000A2FFC(255);
    v2 = v1;
    sub_1000A2684(255);
    v4[0] = v3;
    v4[1] = sub_1000A2F5C();
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    sub_1000469F4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100116EA0);
  }
  return result;
}

uint64_t sub_1000A3810(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x746C7561666564;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x746867696CLL;
    else
      v4 = 1802658148;
    if (v3 == 1)
      v5 = 0xE500000000000000;
    else
      v5 = 0xE400000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x746867696CLL;
      else
        v2 = 1802658148;
      if (v6 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE400000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x746C7561666564;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x746C7561666564)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_1000A3910(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1853321060;
  else
    v3 = 28789;
  if (v2)
    v4 = 0xE200000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1853321060;
  else
    v5 = 28789;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE200000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1000A39A0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000A39D8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000A3A50 + 4 * byte_1000E1B6C[a2]))(0x7475626972747461);
}

uint64_t sub_1000A3A50(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7475626972747461 && v1 == 0xEB000000006E6F69)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7475626972747461, 0xEB000000006E6F69, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB000000006E6F69);
  return v2 & 1;
}

uint64_t sub_1000A3B08(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6465736F6C63;
  else
    v3 = 1852141679;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6465736F6C63;
  else
    v5 = 1852141679;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1000A3BA0(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000014;
  else
    v3 = 0x4E64726F6365725FLL;
  if (v2)
    v4 = 0xEB00000000656D61;
  else
    v4 = 0x80000001000E4D40;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000014;
  else
    v5 = 0x4E64726F6365725FLL;
  if ((a2 & 1) != 0)
    v6 = 0x80000001000E4D40;
  else
    v6 = 0xEB00000000656D61;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1000A3C50@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X8>)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  id v13;
  __int128 v14[2];

  if (a3 > 1u)
    goto LABEL_6;
  v7 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v8 = objc_msgSend(v7, "userInterfaceIdiom");

  if ((unint64_t)v8 + 1 > 6)
    goto LABEL_7;
  if (((1 << (v8 + 1)) & 0x5D) != 0)
  {
    sub_10001DB68(a1, (uint64_t)v14);
    a4[3] = (uint64_t)&type metadata for LightTheme;
    a4[4] = (uint64_t)&off_100107770;
    v9 = swift_allocObject(&unk_100108748, 424, 7);
    *a4 = v9;
    return sub_1000802A4(v14, v9 + 16);
  }
  if (v8)
  {
LABEL_7:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000005BLL, 0x80000001000E57C0, "StocksWidget/Theme.swift", 24, 2, 37, 0);
    __break(1u);
  }
  else
  {
LABEL_6:
    sub_10001DB68(a1, (uint64_t)v14);
    a4[3] = (uint64_t)&type metadata for DarkTheme;
    a4[4] = (uint64_t)&off_100106560;
    v11 = swift_allocObject(&unk_100108720, 416, 7);
    v12 = v11 + 16;
    *a4 = v11;
    v13 = a2;
    return sub_100061378(v14, (uint64_t)a2, v12);
  }
  return result;
}

uint64_t Theme.rawValue.getter(char a1)
{
  if (!a1)
    return 0x746C7561666564;
  if (a1 == 1)
    return 0x746867696CLL;
  return 1802658148;
}

uint64_t sub_1000A3E2C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000A3810(*a1, *a2);
}

Swift::Int sub_1000A3E38()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE500000000000000;
  v3 = 0x746867696CLL;
  if (v1 != 1)
  {
    v3 = 1802658148;
    v2 = 0xE400000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x746C7561666564;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1000A3ECC(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE500000000000000;
  v3 = 0x746867696CLL;
  if (*v1 != 1)
  {
    v3 = 1802658148;
    v2 = 0xE400000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x746C7561666564;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000A3F3C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE500000000000000;
  v4 = 0x746867696CLL;
  if (v2 != 1)
  {
    v4 = 1802658148;
    v3 = 0xE400000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x746C7561666564;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_1000A3FCC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s12StocksWidget5ThemeO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1000A3FF8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x746867696CLL;
  if (v2 != 1)
  {
    v5 = 1802658148;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x746C7561666564;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1000A404C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A4548();
  return static RawRepresentable<>.dataType.getter(a1, v2, &protocol witness table for String);
}

uint64_t sub_1000A408C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_1000A4548();
  return static RawRepresentable<>.convert(from:)(a1, a2, v4, &protocol witness table for String);
}

uint64_t sub_1000A40D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A4548();
  return RawRepresentable<>.toData()(a1, v2, &protocol witness table for String);
}

unint64_t _s12StocksWidget5ThemeO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001038F8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_1000A4160()
{
  unint64_t result;

  result = qword_100116EA8;
  if (!qword_100116EA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Theme, &type metadata for Theme);
    atomic_store(result, (unint64_t *)&qword_100116EA8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Theme(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000A41F0 + 4 * byte_1000E1B75[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000A4224 + 4 * byte_1000E1B70[v4]))();
}

uint64_t sub_1000A4224(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A422C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A4234);
  return result;
}

uint64_t sub_1000A4240(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A4248);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000A424C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A4254(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Theme()
{
  return &type metadata for Theme;
}

uint64_t sub_1000A4270()
{
  uint64_t v0;

  sub_100007164((_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 416, 7);
}

uint64_t sub_1000A43DC()
{
  uint64_t v0;

  sub_100007164((_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 424, 7);
}

unint64_t sub_1000A4548()
{
  unint64_t result;

  result = qword_100116EB0;
  if (!qword_100116EB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Theme, &type metadata for Theme);
    atomic_store(result, (unint64_t *)&qword_100116EB0);
  }
  return result;
}

uint64_t sub_1000A458C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = (void *)a2[3];
    v9 = a2[4];
    v10 = a2[5];
    v11 = a2[6];
    v12 = *((_BYTE *)a2 + 56);
    swift_bridgeObjectRetain(v7);
    sub_10000EBD8(v8, v9, v10, v11, v12);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v11;
    *(_BYTE *)(a1 + 56) = v12;
    v13 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v13;
    v14 = a2[11];
    swift_bridgeObjectRetain(v13);
    if (v14 <= 2)
    {
      *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
      *(_QWORD *)(a1 + 96) = a2[12];
    }
    else
    {
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_QWORD *)(a1 + 88) = v14;
      v16 = a2[12];
      *(_QWORD *)(a1 + 96) = v16;
      swift_bridgeObjectRetain(v14);
      swift_retain(v16);
    }
    v17 = (void *)a2[13];
    if (v17 == (void *)1)
    {
      *(_QWORD *)(a1 + 104) = a2[13];
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    }
    else
    {
      *(_QWORD *)(a1 + 104) = v17;
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
      v18 = v17;
    }
    v19 = *(int *)(a3 + 36);
    v20 = (void *)(a1 + v19);
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for URL(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
  }
  return a1;
}

uint64_t sub_1000A4764(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  sub_10000EC04(*(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v4 = *(_QWORD *)(a1 + 88);
  if (v4 >= 3)
  {
    swift_bridgeObjectRelease(v4);
    swift_release(*(_QWORD *)(a1 + 96));
  }
  v5 = *(void **)(a1 + 104);
  if (v5 != (void *)1)

  v6 = a1 + *(int *)(a2 + 36);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

uint64_t sub_1000A4820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(void **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain(v6);
  sub_10000EBD8(v7, v8, v9, v10, v11);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v11;
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  v13 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain(v12);
  if (v13 <= 2)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  else
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v13;
    v14 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v14;
    swift_bridgeObjectRetain(v13);
    swift_retain(v14);
  }
  v15 = *(void **)(a2 + 104);
  if (v15 == (void *)1)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  }
  else
  {
    *(_QWORD *)(a1 + 104) = v15;
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    v16 = v15;
  }
  v17 = *(int *)(a3 + 36);
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_1000A49CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  void *v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(void **)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_BYTE *)(a2 + 56);
  sub_10000EBD8(v8, v9, v10, v11, v12);
  v13 = *(void **)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = v12;
  sub_10000EC04(v13, v14, v15, v16, v17);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  v19 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = (__int128 *)(a1 + 80);
  v21 = (__int128 *)(a2 + 80);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_QWORD *)(a2 + 88);
  if (v22 == 2)
  {
    if (v23 <= 2)
    {
LABEL_3:
      v24 = *v21;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *v20 = v24;
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  if (v23 == 2)
  {
    sub_1000922CC(a1 + 80);
LABEL_11:
    v27 = *(_QWORD *)(a2 + 96);
    *v20 = *v21;
    *(_QWORD *)(a1 + 96) = v27;
    goto LABEL_12;
  }
  if (v22 < 2)
  {
    if (v23 < 2)
      goto LABEL_3;
LABEL_8:
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v25 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v25;
    v26 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v26;
    swift_bridgeObjectRetain(v25);
    swift_retain(v26);
    goto LABEL_12;
  }
  if (v23 < 2)
  {
    sub_10001DF70(a1 + 80, (uint64_t (*)(_QWORD))sub_10009224C);
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v46 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v22);
  v47 = *(_QWORD *)(a1 + 96);
  v48 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v48;
  swift_retain(v48);
  swift_release(v47);
LABEL_12:
  v28 = (uint64_t *)(a1 + 104);
  v29 = *(void **)(a1 + 104);
  v31 = (uint64_t *)(a2 + 104);
  v30 = *(void **)(a2 + 104);
  if (v29 == (void *)1)
  {
    if (v30 == (void *)1)
    {
      v32 = *v31;
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *v28 = v32;
    }
    else
    {
      *(_QWORD *)(a1 + 104) = v30;
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      v34 = v30;
    }
  }
  else if (v30 == (void *)1)
  {
    sub_100092300((id *)(a1 + 104));
    v33 = *(_BYTE *)(a2 + 112);
    *v28 = *v31;
    *(_BYTE *)(a1 + 112) = v33;
  }
  else
  {
    *(_QWORD *)(a1 + 104) = v30;
    v35 = v30;

    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  }
  v36 = *(int *)(a3 + 36);
  v37 = (void *)(a1 + v36);
  v38 = (void *)(a2 + v36);
  v39 = type metadata accessor for URL(0);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
  v42 = v41(v37, 1, v39);
  v43 = v41(v38, 1, v39);
  if (!v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, void *, uint64_t))(v40 + 24))(v37, v38, v39);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v40 + 8))(v37, v39);
    goto LABEL_24;
  }
  if (v43)
  {
LABEL_24:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v40 + 16))(v37, v38, v39);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  return a1;
}

uint64_t sub_1000A4CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v6;
  v7 = *(int *)(a3 + 36);
  v8 = (const void *)(a2 + v7);
  v9 = (void *)(a1 + v7);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v9, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v9, v8, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_1000A4DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v30;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_BYTE *)(a2 + 56);
  v9 = *(void **)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_BYTE *)(a1 + 56);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = v8;
  sub_10000EC04(v9, v10, v11, v12, v13);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 88);
  v17 = *(_QWORD *)(a2 + 88);
  if (v16 == 2)
    goto LABEL_7;
  if (v17 == 2)
  {
    sub_1000922CC(a1 + 80);
LABEL_7:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    goto LABEL_8;
  }
  if (v16 < 2)
    goto LABEL_7;
  if (v17 < 2)
  {
    sub_10001DF70(a1 + 80, (uint64_t (*)(_QWORD))sub_10009224C);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v17;
  swift_bridgeObjectRelease(v16);
  v30 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release(v30);
LABEL_8:
  v18 = *(void **)(a1 + 104);
  v19 = *(_QWORD *)(a2 + 104);
  if (v18 == (void *)1)
  {
LABEL_11:
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    goto LABEL_13;
  }
  if (v19 == 1)
  {
    sub_100092300((id *)(a1 + 104));
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + 104) = v19;

  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
LABEL_13:
  v20 = *(int *)(a3 + 36);
  v21 = (void *)(a1 + v20);
  v22 = (void *)(a2 + v20);
  v23 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 40))(v21, v22, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_18;
  }
  if (v27)
  {
LABEL_18:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 32))(v21, v22, v23);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t sub_1000A5008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A5014);
}

uint64_t sub_1000A5014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_1000A50A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A50B4);
}

uint64_t sub_1000A50B4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for HeadlineViewModel(uint64_t a1)
{
  return sub_1000071F8(a1, qword_100116F10, (uint64_t)&nominal type descriptor for HeadlineViewModel);
}

void sub_1000A5154(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1000E1CC8;
  v4[1] = &unk_1000E1CE0;
  v4[2] = &unk_1000E1CC8;
  v4[3] = &unk_1000E1CF8;
  v4[4] = &unk_1000E1D10;
  sub_10000EDE8(319, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

void sub_1000A5200(char *a1)
{
  sub_1000A39A0(*a1);
}

void sub_1000A520C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1000A524C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7475626972747461, 0xEB000000006E6F69);
  swift_bridgeObjectRelease(0xEB000000006E6F69);
  return Hasher._finalize()();
}

void sub_1000A52CC()
{
  __asm { BR              X10 }
}

uint64_t sub_1000A52FC(uint64_t a1)
{
  String.hash(into:)(a1, 0x7475626972747461, 0xEB000000006E6F69);
  return swift_bridgeObjectRelease(0xEB000000006E6F69);
}

void sub_1000A5368(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1000A53A4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7475626972747461, 0xEB000000006E6F69);
  swift_bridgeObjectRelease(0xEB000000006E6F69);
  return Hasher._finalize()();
}

unint64_t sub_1000A5424@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000A7E84(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A5450()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000A5474 + 4 * byte_1000E1C9C[*v0]))();
}

void sub_1000A5474(_QWORD *a1@<X8>)
{
  *a1 = 0x7475626972747461;
  a1[1] = 0xEB000000006E6F69;
}

void sub_1000A5498(_QWORD *a1@<X8>)
{
  *a1 = 0x656C746974;
  a1[1] = 0xE500000000000000;
}

void sub_1000A54B0(char *a1@<X8>)
{
  strcpy(a1, "destinationURL");
  a1[15] = -18;
}

uint64_t sub_1000A54D8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A54FC + 4 * byte_1000E1CA0[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_1000A54FC()
{
  return 0x7475626972747461;
}

uint64_t sub_1000A551C()
{
  return 0x656C746974;
}

uint64_t sub_1000A5530()
{
  return 0x74616E6974736564;
}

unint64_t sub_1000A5554@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000A7E84(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A5578(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A5E50();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A55A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A5E50();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A55C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE v32[80];

  sub_1000A9174(0, (unint64_t *)&qword_100115958, &qword_100112EE0, (uint64_t)&type metadata for String, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  inited = swift_initStackObject(v1, v32);
  v3 = (_QWORD *)inited;
  *(_OWORD *)(inited + 16) = xmmword_1000DB8B0;
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = v4;
  v6 = 40;
  if (*(_BYTE *)(v0 + 56))
    v6 = 24;
  v7 = 48;
  if (*(_BYTE *)(v0 + 56))
    v7 = 32;
  v8 = *(_QWORD *)(v0 + v7);
  *(_QWORD *)(inited + 48) = *(_QWORD *)(v0 + v6);
  *(_QWORD *)(inited + 56) = v8;
  v9 = *(unsigned __int8 *)(v0 + 16);
  if (v9 == 2)
  {
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v8);
    v3[8] = 0;
    v3[9] = 0;
    if (v4)
      goto LABEL_7;
LABEL_12:
    v10 = _swiftEmptyArrayStorage;
    v14 = v3[7];
    if (!v14)
      goto LABEL_18;
    goto LABEL_13;
  }
  v15 = v9 & 1;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v8);
  v16 = sub_1000C72CC(v15);
  v5 = v3[4];
  v4 = v3[5];
  v3[8] = v16;
  v3[9] = v17;
  if (!v4)
    goto LABEL_12;
LABEL_7:
  swift_bridgeObjectRetain(v4);
  v10 = sub_100073168(0, 1, 1, _swiftEmptyArrayStorage);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = sub_100073168((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v10[2] = v12 + 1;
  v13 = &v10[2 * v12];
  v13[4] = v5;
  v13[5] = v4;
  v14 = v3[7];
  if (v14)
  {
LABEL_13:
    v18 = v3[6];
    swift_bridgeObjectRetain(v14);
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      v10 = sub_100073168(0, v10[2] + 1, 1, v10);
    v20 = v10[2];
    v19 = v10[3];
    if (v20 >= v19 >> 1)
      v10 = sub_100073168((_QWORD *)(v19 > 1), v20 + 1, 1, v10);
    v10[2] = v20 + 1;
    v21 = &v10[2 * v20];
    v21[4] = v18;
    v21[5] = v14;
  }
LABEL_18:
  v22 = v3[9];
  if (v22)
  {
    v23 = v3[8];
    swift_bridgeObjectRetain(v3[9]);
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      v10 = sub_100073168(0, v10[2] + 1, 1, v10);
    v25 = v10[2];
    v24 = v10[3];
    if (v25 >= v24 >> 1)
      v10 = sub_100073168((_QWORD *)(v24 > 1), v25 + 1, 1, v10);
    v10[2] = v25 + 1;
    v26 = &v10[2 * v25];
    v26[4] = v23;
    v26[5] = v22;
  }
  swift_bridgeObjectRelease(v3);
  sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
  v28 = v27;
  v29 = sub_100075848();
  v30 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v28, v29);
  swift_bridgeObjectRelease(v10);
  return v30;
}

uint64_t sub_1000A5890(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  char v25[8];
  __int128 v26;
  __int128 v27;
  char v28;

  v3 = v1;
  sub_1000A5F1C(0, &qword_100116F70, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedEncodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v23 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_1000A5E50();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for HeadlineViewModel.CodingKeys, &type metadata for HeadlineViewModel.CodingKeys, v12, v10, v11);
  v13 = *v3;
  v14 = v3[1];
  v25[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v14, v25, v6);
  if (!v2)
  {
    v15 = *((_BYTE *)v3 + 56);
    v25[0] = *((_BYTE *)v3 + 16);
    v26 = *(_OWORD *)(v3 + 3);
    v27 = *(_OWORD *)(v3 + 5);
    v28 = v15;
    v24 = 1;
    v16 = sub_1000A5F78();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v24, v6, &type metadata for HeadlineAttribution, v16);
    v17 = v3[8];
    v18 = v3[9];
    v25[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, v25, v6);
    v19 = (uint64_t)v3 + *(int *)(type metadata accessor for HeadlineViewModel(0) + 36);
    v25[0] = 3;
    v20 = type metadata accessor for URL(0);
    v21 = sub_100003D3C(&qword_100116948, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, v25, v6, v20, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000A5A6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;

  v29 = a2;
  sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v3);
  v30 = (char *)&v28 - v4;
  sub_1000A5F1C(0, &qword_100116F58, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedDecodingContainer);
  v31 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = type metadata accessor for HeadlineViewModel(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v9 + 5) = xmmword_1000DB8C0;
  *((_OWORD *)v9 + 6) = xmmword_1000DB8D0;
  v9[112] = 0;
  v11 = (uint64_t)&v9[*(int *)(v10 + 36)];
  v12 = type metadata accessor for URL(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v32 = v11;
  v13(v11, 1, 1, v12);
  v15 = a1[3];
  v14 = a1[4];
  sub_100007184(a1, v15);
  v16 = sub_1000A5E50();
  v17 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HeadlineViewModel.CodingKeys, &type metadata for HeadlineViewModel.CodingKeys, v16, v15, v14);
  if (v17)
  {
    sub_100007164(a1);
    v21 = v32;
    sub_1000A5E94(*((_QWORD *)v9 + 10), *((_QWORD *)v9 + 11), *((_QWORD *)v9 + 12));
    sub_100093998(*((id *)v9 + 13));
    return sub_100028528(v21, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  }
  else
  {
    v33 = v12;
    v18 = v6;
    v19 = (uint64_t)v30;
    v20 = v31;
    LOBYTE(v34) = 0;
    *(_QWORD *)v9 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v31);
    *((_QWORD *)v9 + 1) = v22;
    v38 = 1;
    v23 = sub_1000A5ED8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for HeadlineAttribution, &v38, v20, &type metadata for HeadlineAttribution, v23);
    v24 = v37;
    v9[16] = v34;
    *(_OWORD *)(v9 + 24) = v35;
    *(_OWORD *)(v9 + 40) = v36;
    v9[56] = v24;
    LOBYTE(v34) = 2;
    *((_QWORD *)v9 + 8) = KeyedDecodingContainer.decode(_:forKey:)(&v34, v20);
    *((_QWORD *)v9 + 9) = v25;
    LOBYTE(v34) = 3;
    v26 = sub_100003D3C(&qword_1001168F0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v33, &v34, v20, v33, v26);
    (*(void (**)(_QWORD, uint64_t))(v18 + 8))(0, v20);
    sub_100035608(v19, v32);
    sub_10001DE2C((uint64_t)v9, v29, type metadata accessor for HeadlineViewModel);
    sub_100007164(a1);
    return sub_10001DF70((uint64_t)v9, type metadata accessor for HeadlineViewModel);
  }
}

uint64_t sub_1000A5E28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A5A6C(a1, a2);
}

uint64_t sub_1000A5E3C(_QWORD *a1)
{
  return sub_1000A5890(a1);
}

unint64_t sub_1000A5E50()
{
  unint64_t result;

  result = qword_100116F60;
  if (!qword_100116F60)
  {
    result = swift_getWitnessTable(&unk_1000E1EAC, &type metadata for HeadlineViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100116F60);
  }
  return result;
}

uint64_t sub_1000A5E94(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 != 2)
    return sub_1000A5EA4(a1, a2, a3);
  return a1;
}

uint64_t sub_1000A5EA4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2 >= 2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_release(a3);
  }
  return result;
}

unint64_t sub_1000A5ED8()
{
  unint64_t result;

  result = qword_100116F68;
  if (!qword_100116F68)
  {
    result = swift_getWitnessTable(&unk_1000E3F2C, &type metadata for HeadlineAttribution);
    atomic_store(result, (unint64_t *)&qword_100116F68);
  }
  return result;
}

void sub_1000A5F1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1000A5E50();
    v7 = a3(a1, &type metadata for HeadlineViewModel.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1000A5F78()
{
  unint64_t result;

  result = qword_100116F78;
  if (!qword_100116F78)
  {
    result = swift_getWitnessTable(&unk_1000E3F04, &type metadata for HeadlineAttribution);
    atomic_store(result, (unint64_t *)&qword_100116F78);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HeadlineViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000A6008 + 4 * byte_1000E1CA9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000A603C + 4 * byte_1000E1CA4[v4]))();
}

uint64_t sub_1000A603C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A6044(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A604CLL);
  return result;
}

uint64_t sub_1000A6058(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A6060);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000A6064(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A606C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HeadlineViewModel.CodingKeys()
{
  return &type metadata for HeadlineViewModel.CodingKeys;
}

unint64_t sub_1000A608C()
{
  unint64_t result;

  result = qword_100116F80;
  if (!qword_100116F80)
  {
    result = swift_getWitnessTable(&unk_1000E1E84, &type metadata for HeadlineViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100116F80);
  }
  return result;
}

unint64_t sub_1000A60D4()
{
  unint64_t result;

  result = qword_100116F88;
  if (!qword_100116F88)
  {
    result = swift_getWitnessTable(&unk_1000E1DBC, &type metadata for HeadlineViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100116F88);
  }
  return result;
}

unint64_t sub_1000A611C()
{
  unint64_t result;

  result = qword_100116F90;
  if (!qword_100116F90)
  {
    result = swift_getWitnessTable(&unk_1000E1DE4, &type metadata for HeadlineViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100116F90);
  }
  return result;
}

void sub_1000A6160()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  NSString *v6;
  NSString *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Class isa;
  id v12;
  id v13;
  _BYTE v14[48];
  _BYTE v15[72];

  v0 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:", UIFontTextStyleTitle3);
  v1 = objc_msgSend(v0, "fontDescriptorWithSymbolicTraits:", 64);

  if (v1)
  {
    sub_10000EDE8(0, &qword_100117160, (uint64_t (*)(uint64_t))sub_10002DD04, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    inited = swift_initStackObject(v2, v15);
    *(_OWORD *)(inited + 16) = xmmword_1000DB170;
    *(_QWORD *)(inited + 32) = UIFontDescriptorTraitsAttribute;
    sub_10000EDE8(0, &qword_100117168, (uint64_t (*)(uint64_t))sub_1000A9CCC, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v5 = swift_initStackObject(v4, v14);
    *(_OWORD *)(v5 + 16) = xmmword_1000DB170;
    *(_QWORD *)(v5 + 32) = UIFontWeightTrait;
    *(UIFontWeight *)(v5 + 40) = UIFontWeightMedium;
    v6 = UIFontDescriptorTraitsAttribute;
    v7 = UIFontWeightTrait;
    v8 = sub_10002CA7C(v5);
    sub_1000A9D58(0);
    *(_QWORD *)(inited + 64) = v9;
    *(_QWORD *)(inited + 40) = v8;
    v10 = sub_10002CB80(inited);
    type metadata accessor for AttributeName(0);
    sub_100003D3C(&qword_1001132E0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1000DB62C);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v12 = objc_msgSend(v1, "fontDescriptorByAddingAttributes:", isa, swift_bridgeObjectRelease(v10).n128_f64[0]);

    v13 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v12, 0.0);
    objc_msgSend(v13, "fontWithSize:", 15.0);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000A6384@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t OpaqueTypeConformance2;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[2];
  uint64_t v89;
  uint64_t v90;

  v87 = a1;
  v77 = type metadata accessor for AccessibilityChildBehavior(0);
  v75 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v74 = (char *)&v67 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A8F20(0);
  v82 = v3;
  __chkstk_darwin(v3);
  v68 = (uint64_t *)((char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000A9668(0);
  v79 = *(_QWORD *)(v5 - 8);
  v80 = v5;
  __chkstk_darwin(v5);
  v78 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A96A8(0);
  v86 = v7;
  __chkstk_darwin(v7);
  v76 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v81 = (uint64_t)&v67 - v10;
  sub_10002BC34(0, &qword_1001170F0, (uint64_t (*)(uint64_t))sub_1000A96CC, v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v84 = v12;
  __chkstk_darwin(v12);
  v85 = (uint64_t)&v67 - v13;
  sub_1000A96F0(0);
  v71 = *(_QWORD *)(v14 - 8);
  v72 = v14;
  __chkstk_darwin(v14);
  v70 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A96CC(0);
  v83 = v16;
  __chkstk_darwin(v16);
  v69 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v73 = (uint64_t)&v67 - v19;
  sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v20);
  v22 = (char *)&v67 - v21;
  v23 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v29 = (char *)&v67 - v28;
  v30 = type metadata accessor for HeadlineViewModel(0);
  v31 = v1;
  sub_1000A3324(v1 + *(int *)(v30 + 36), (uint64_t)v22, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    v32 = sub_100028528((uint64_t)v22, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v33 = static VerticalAlignment.top.getter(v32);
    v34 = (uint64_t)v68;
    *v68 = v33;
    *(_QWORD *)(v34 + 8) = 0;
    *(_BYTE *)(v34 + 16) = 0;
    sub_1000A9750(0);
    v36 = sub_1000A6A18(v31, v34 + *(int *)(v35 + 44));
    v37 = v74;
    static AccessibilityChildBehavior.combine.getter(v36);
    v38 = sub_1000A968C();
    v39 = v78;
    v40 = v82;
    View.accessibilityElement(children:)(v37, v82, v38);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v37, v77);
    sub_10001DF70(v34, (uint64_t (*)(_QWORD))sub_1000A8F20);
    v41 = sub_1000A55C8();
    v43 = v42;
    v89 = v41;
    v90 = v42;
    v88[0] = v40;
    v88[1] = v38;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v88, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_1000144A0();
    v45 = (uint64_t)v76;
    v46 = v80;
    View.accessibilityLabel<A>(_:)(&v89, v80, &type metadata for String, OpaqueTypeConformance2);
    v47 = swift_bridgeObjectRelease(v43);
    (*(void (**)(char *, uint64_t, __n128))(v79 + 8))(v39, v46, v47);
    v48 = v81;
    sub_10000ED3C(v45, v81, (uint64_t (*)(_QWORD))sub_1000A96A8);
    v49 = v85;
    sub_10001DE2C(v48, v85, (uint64_t (*)(_QWORD))sub_1000A96A8);
    swift_storeEnumTagMultiPayload(v49, v84, 1);
    v50 = sub_1000A97CC();
    v51 = sub_1000A9864();
    _ConditionalContent<>.init(storage:)(v49, v83, v86, v50, v51);
    return sub_10001DF70(v48, (uint64_t (*)(_QWORD))sub_1000A96A8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v29, v22, v23);
    v53 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 16))(v26, v29, v23);
    __chkstk_darwin(v53);
    *(&v67 - 2) = v1;
    v54 = sub_1000A968C();
    v55 = v70;
    Link.init(destination:label:)(v26, sub_1000A9908, &v67 - 4, v82, v54);
    v56 = sub_1000A55C8();
    v58 = v57;
    v89 = v56;
    v90 = v57;
    v59 = sub_100003D3C(&qword_100117118, (uint64_t (*)(uint64_t))sub_1000A96F0, (uint64_t)&protocol conformance descriptor for Link<A>);
    sub_1000144A0();
    v60 = (uint64_t)v69;
    v61 = v72;
    View.accessibilityLabel<A>(_:)(&v89, v72, &type metadata for String, v59);
    v62 = swift_bridgeObjectRelease(v58);
    (*(void (**)(char *, uint64_t, __n128))(v71 + 8))(v55, v61, v62);
    v63 = v73;
    sub_10000ED3C(v60, v73, (uint64_t (*)(_QWORD))sub_1000A96CC);
    v64 = v85;
    sub_10001DE2C(v63, v85, (uint64_t (*)(_QWORD))sub_1000A96CC);
    swift_storeEnumTagMultiPayload(v64, v84, 0);
    v65 = sub_1000A97CC();
    v66 = sub_1000A9864();
    _ConditionalContent<>.init(storage:)(v64, v83, v86, v65, v66);
    sub_10001DF70(v63, (uint64_t (*)(_QWORD))sub_1000A96CC);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v29, v23);
  }
}

uint64_t sub_1000A69D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = static VerticalAlignment.top.getter();
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  sub_1000A9750(0);
  return sub_1000A6A18(a1, a2 + *(int *)(v4 + 44));
}

uint64_t sub_1000A6A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[8];
  _BYTE v58[135];
  char v59;
  _OWORD v60[8];
  _OWORD v61[9];
  char v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char v92;

  v48 = a2;
  v3 = type metadata accessor for WidgetFamily(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v47 - v8;
  sub_1000A8FB4(0);
  __chkstk_darwin(v10);
  v47 = (uint64_t)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v47 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v47 - v16;
  *(_QWORD *)v14 = static HorizontalAlignment.leading.getter(v18);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 1;
  sub_1000A9910(0);
  sub_1000A6FBC(a1, (uint64_t)&v14[*(int *)(v19 + 44)]);
  sub_10000ED3C((uint64_t)v14, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_1000A8FB4);
  type metadata accessor for HeadlineView(0);
  sub_100045E2C(v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for WidgetFamily.systemSmall(_:), v3);
  v20 = sub_100003D3C(&qword_100117130, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v3, v20);
  v22 = *(void (**)(char *, uint64_t))(v4 + 8);
  v22(v6, v3);
  v22(v9, v3);
  if ((v21 & 1) != 0 || (v23 = *(void **)(a1 + 104), v23 == (void *)1))
  {
    *(_QWORD *)&v73 = 0;
    BYTE8(v73) = 1;
    sub_1000A998C((uint64_t)&v73);
    sub_10000ED3C((uint64_t)&v73, (uint64_t)&v63, (uint64_t (*)(_QWORD))sub_1000A9998);
    sub_10000EDE8(0, &qword_1001170B8, (uint64_t (*)(uint64_t))sub_1000A9544, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v25 = v24;
    v26 = sub_1000A99AC();
    _ConditionalContent<>.init(storage:)(&v63, v25, &type metadata for Spacer, v26, &protocol witness table for Spacer);
  }
  else
  {
    v27 = *(_BYTE *)(a1 + 112);
    v28 = static Alignment.top.getter(v23);
    sub_100029E48(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)&v49, 0.0, 1, INFINITY, 0, v28, v29, v23, v27);
    v60[4] = v53;
    v60[5] = v54;
    v60[6] = v55;
    v60[7] = v56;
    v57[6] = v55;
    v57[7] = v56;
    v60[2] = v51;
    v60[3] = v52;
    v57[4] = v53;
    v57[5] = v54;
    v57[2] = v51;
    v57[3] = v52;
    v60[0] = v49;
    v60[1] = v50;
    v57[0] = v49;
    v57[1] = v50;
    v59 = 0;
    *(_OWORD *)&v58[7] = v49;
    *(_OWORD *)&v58[23] = v50;
    *(_OWORD *)&v58[39] = v51;
    *(_OWORD *)&v58[119] = v56;
    *(_OWORD *)&v58[103] = v55;
    *(_OWORD *)&v58[87] = v54;
    *(_OWORD *)&v58[71] = v53;
    *(_OWORD *)&v58[55] = v52;
    *(_QWORD *)&v61[0] = 0x4024000000000000;
    BYTE8(v61[0]) = 0;
    *(_OWORD *)((char *)&v61[5] + 9) = *(_OWORD *)&v58[80];
    *(_OWORD *)((char *)&v61[6] + 9) = *(_OWORD *)&v58[96];
    *(_OWORD *)((char *)&v61[7] + 9) = *(_OWORD *)&v58[112];
    *((_QWORD *)&v61[8] + 1) = *((_QWORD *)&v56 + 1);
    *(_OWORD *)((char *)&v61[1] + 9) = *(_OWORD *)&v58[16];
    *(_OWORD *)((char *)&v61[2] + 9) = *(_OWORD *)&v58[32];
    *(_OWORD *)((char *)&v61[3] + 9) = *(_OWORD *)&v58[48];
    *(_OWORD *)((char *)&v61[4] + 9) = *(_OWORD *)&v58[64];
    *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)v58;
    sub_1000A9A90((id *)v57);
    sub_1000A9A90((id *)&v49);
    sub_1000A9AB8((id *)v60);
    v79 = v61[6];
    v80 = v61[7];
    v81 = v61[8];
    v75 = v61[2];
    v76 = v61[3];
    v77 = v61[4];
    v78 = v61[5];
    v73 = v61[0];
    v74 = v61[1];
    sub_1000A9AE0((uint64_t)&v73);
    sub_10000ED3C((uint64_t)&v73, (uint64_t)&v83, (uint64_t (*)(_QWORD))sub_1000A9998);
    sub_1000A9AE8((uint64_t)v61);
    sub_10000EDE8(0, &qword_1001170B8, (uint64_t (*)(uint64_t))sub_1000A9544, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v31 = v30;
    v32 = sub_1000A99AC();
    _ConditionalContent<>.init(storage:)(&v83, v31, &type metadata for Spacer, v32, &protocol witness table for Spacer);
    sub_100093998(v23);
    sub_1000A9AB8((id *)v57);
    sub_1000A9AB8((id *)&v49);
    v89 = v69;
    v90 = v70;
    v91 = v71;
    v92 = v72;
    v85 = v65;
    v86 = v66;
    v87 = v67;
    v88 = v68;
    v83 = v63;
    v84 = v64;
  }
  v33 = v47;
  sub_10001DE2C((uint64_t)v17, v47, (uint64_t (*)(_QWORD))sub_1000A8FB4);
  v61[6] = v89;
  v61[7] = v90;
  v61[8] = v91;
  v62 = v92;
  v61[2] = v85;
  v61[3] = v86;
  v61[4] = v87;
  v61[5] = v88;
  v61[0] = v83;
  v61[1] = v84;
  v34 = v48;
  sub_10001DE2C(v33, v48, (uint64_t (*)(_QWORD))sub_1000A8FB4);
  sub_1000A8F98(0);
  v36 = *(int *)(v35 + 48);
  v37 = v61[7];
  v69 = v61[6];
  v70 = v61[7];
  v38 = v61[8];
  v71 = v61[8];
  v39 = v61[4];
  v40 = v61[5];
  v67 = v61[4];
  v68 = v61[5];
  v41 = v61[2];
  v42 = v61[3];
  v65 = v61[2];
  v66 = v61[3];
  v43 = v61[0];
  v44 = v61[1];
  v63 = v61[0];
  v64 = v61[1];
  v45 = v34 + v36;
  *(_OWORD *)(v45 + 96) = v61[6];
  *(_OWORD *)(v45 + 112) = v37;
  *(_OWORD *)(v45 + 128) = v38;
  *(_OWORD *)(v45 + 32) = v41;
  *(_OWORD *)(v45 + 48) = v42;
  *(_OWORD *)(v45 + 64) = v39;
  *(_OWORD *)(v45 + 80) = v40;
  v72 = v62;
  *(_BYTE *)(v45 + 144) = v62;
  *(_OWORD *)v45 = v43;
  *(_OWORD *)(v45 + 16) = v44;
  sub_1000A9A1C((uint64_t)&v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000A9A0C);
  sub_10001DF70((uint64_t)v17, (uint64_t (*)(_QWORD))sub_1000A8FB4);
  v79 = v61[6];
  v80 = v61[7];
  v81 = v61[8];
  v82 = v62;
  v75 = v61[2];
  v76 = v61[3];
  v77 = v61[4];
  v78 = v61[5];
  v73 = v61[0];
  v74 = v61[1];
  sub_1000A9A1C((uint64_t)&v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000A9A80);
  return sub_10001DF70(v33, (uint64_t (*)(_QWORD))sub_1000A8FB4);
}

uint64_t sub_1000A6FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char v89;
  _QWORD *v90;
  char v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, char *, uint64_t);
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  char v120;
  void (*v121)(char *, uint64_t);
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  char *v153;
  _QWORD *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  char v187;
  char v188;
  char v189;
  _OWORD v190[3];
  uint64_t v191;
  unsigned __int8 v192;
  uint64_t v193;
  unsigned __int8 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned __int8 v198;
  uint64_t v199;
  unsigned __int8 v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  _QWORD *v205;
  char v206;
  __int128 v207;

  v180 = a2;
  sub_1000A92F8(0, &qword_100117148, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v177 = v3;
  __chkstk_darwin(v3);
  v179 = (uint64_t *)((char *)&v146 - v4);
  sub_10000EDE8(0, &qword_100117088, (uint64_t (*)(uint64_t))sub_1000A9390, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
  v178 = v5;
  __chkstk_darwin(v5);
  v152 = (uint64_t *)((char *)&v146 - v6);
  v148 = type metadata accessor for HeadlineRubricView(0);
  __chkstk_darwin(v148);
  v147 = (uint64_t *)((char *)&v146 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000270DC(0, &qword_100117098, v8, sub_1000A943C, (uint64_t)&opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>);
  v151 = v9;
  v150 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v149 = (char *)&v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v153 = (char *)&v146 - v12;
  v158 = type metadata accessor for WidgetFamily(0);
  v156 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v155 = (char *)&v146 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v154 = (uint64_t *)((char *)&v146 - v15);
  sub_1000A92F8(0, &qword_100117080, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
  __chkstk_darwin(v16);
  v184 = (uint64_t)&v146 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v183 = (uint64_t)&v146 - v19;
  v20 = type metadata accessor for HeadlineAttributionView(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v146 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A9274(0, &qword_100117060, v23);
  v25 = v24;
  __chkstk_darwin(v24);
  v27 = (char *)&v146 - v26;
  sub_1000A9108(0);
  v181 = v28;
  __chkstk_darwin(v28);
  v185 = (uint64_t)&v146 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v182 = (uint64_t)&v146 - v31;
  v32 = *(_BYTE *)(a1 + 16);
  v34 = *(void **)(a1 + 24);
  v33 = *(_QWORD *)(a1 + 32);
  v35 = *(_QWORD *)(a1 + 40);
  v36 = *(_QWORD *)(a1 + 48);
  v176 = (_QWORD *)a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + 56);
  *v22 = v32;
  *((_QWORD *)v22 + 1) = v34;
  *((_QWORD *)v22 + 2) = v33;
  *((_QWORD *)v22 + 3) = v35;
  *((_QWORD *)v22 + 4) = v36;
  v22[40] = a1;
  v37 = &v22[*(int *)(v20 + 20)];
  *(_QWORD *)v37 = swift_getKeyPath(&unk_1000E1F60);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v146 = v38;
  swift_storeEnumTagMultiPayload(v37, v38, 0);
  v39 = &v22[*(int *)(v20 + 24)];
  *(_QWORD *)v39 = swift_getKeyPath(&unk_1000E1F90);
  v39[8] = 0;
  v40 = sub_10000EBD8(v34, v33, v35, v36, a1);
  v41 = static Color.secondary.getter(v40);
  KeyPath = swift_getKeyPath(&unk_1000E1FC0);
  sub_10001DE2C((uint64_t)v22, (uint64_t)v27, type metadata accessor for HeadlineAttributionView);
  v43 = (uint64_t *)&v27[*(int *)(v25 + 36)];
  *v43 = KeyPath;
  v43[1] = v41;
  sub_10001DF70((uint64_t)v22, type metadata accessor for HeadlineAttributionView);
  if (qword_1001115C0 != -1)
    swift_once(&qword_1001115C0, sub_1000C7FFC);
  v44 = qword_100126A88;
  v45 = static Alignment.topLeading.getter();
  _FrameLayout.init(width:height:alignment:)(v190, 0, 1, v44, 0, v45, v46);
  v47 = v185;
  sub_10003C138((uint64_t)v27, v185, (uint64_t)&qword_100117060, (uint64_t)type metadata accessor for HeadlineAttributionView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1000A9274);
  v48 = (_OWORD *)(v47 + *(int *)(v181 + 36));
  v49 = v190[1];
  *v48 = v190[0];
  v48[1] = v49;
  v48[2] = v190[2];
  sub_10003C184((uint64_t)v27, (uint64_t)&qword_100117060, (uint64_t)type metadata accessor for HeadlineAttributionView, (uint64_t (*)(_QWORD))sub_1000A9274);
  v50 = v182;
  v51 = sub_10000ED3C(v47, v182, (uint64_t (*)(_QWORD))sub_1000A9108);
  v52 = static Alignment.center.getter(v51);
  _FrameLayout.init(width:height:alignment:)(&v191, 0, 1, 0x4014000000000000, 0, v52, v53);
  v175 = v191;
  v174 = v192;
  v173 = v193;
  v172 = v194;
  v171 = v195;
  v170 = v196;
  v54 = v176;
  sub_1000A6160();
  v56 = v55;
  objc_msgSend(v55, "capHeight");
  v58 = v57;

  v60 = static Alignment.center.getter(v59);
  _FrameLayout.init(width:height:alignment:)(&v197, 0, 1, v58, 0, v60, v61);
  v164 = v197;
  v163 = v198;
  v162 = v199;
  v161 = v200;
  v160 = v201;
  v159 = v202;
  v62 = v54[9];
  v203 = (char *)v54[8];
  v204 = v62;
  v63 = sub_1000144A0();
  swift_bridgeObjectRetain(v62);
  v64 = Text.init<A>(_:)(&v203, &type metadata for String, v63);
  v66 = v65;
  v68 = v67;
  v70 = v69 & 1;
  sub_1000A6160();
  v71 = Font.init(_:)();
  v169 = Text.font(_:)(v71, v64, v66, v70, v68);
  v168 = v72;
  LODWORD(v74) = v73;
  v181 = v75;
  swift_release(v71);
  sub_100014490(v64, v66, v70);
  swift_bridgeObjectRelease(v68);
  v167 = swift_getKeyPath(&unk_1000E1FF0);
  v166 = static Color.primary.getter(v167);
  v165 = swift_getKeyPath(&unk_1000E1FC0);
  v157 = swift_getKeyPath(&unk_1000E2020);
  type metadata accessor for HeadlineView(0);
  v76 = v154;
  sub_100045E2C(v154);
  v77 = v156;
  v78 = v155;
  v79 = v158;
  (*(void (**)(char *, _QWORD, uint64_t))(v156 + 104))(v155, enum case for WidgetFamily.systemSmall(_:), v158);
  v80 = sub_100003D3C(&qword_100117130, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  LOBYTE(v71) = dispatch thunk of static Equatable.== infix(_:_:)(v76, v78, v79, v80);
  v81 = *(void (**)(char *, uint64_t))(v77 + 8);
  v81(v78, v79);
  v82 = ((uint64_t (*)(_QWORD *, uint64_t))v81)(v76, v79);
  v83 = v47;
  v84 = v50;
  if ((v71 & 1) != 0 || (v85 = v54[11], v85 == 2))
  {
    v86 = static Alignment.center.getter(v82);
    _FrameLayout.init(width:height:alignment:)(&v203, 0, 1, 0, 0, v86, v87);
    v88 = v203;
    v89 = v204;
    v90 = v205;
    v91 = v206;
    v92 = v179;
    *v179 = 0;
    *((_BYTE *)v92 + 8) = 1;
    v92[2] = v88;
    *((_BYTE *)v92 + 24) = v89;
    v92[4] = v90;
    *((_BYTE *)v92 + 40) = v91;
    *((_OWORD *)v92 + 3) = v207;
    swift_storeEnumTagMultiPayload(v92, v177, 1);
    sub_1000A95C0(0, &qword_100117068, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&type metadata for _FrameLayout);
    v94 = v93;
    v95 = sub_1000A9BC0();
    v96 = sub_1000A9C20();
    v97 = v183;
    _ConditionalContent<>.init(storage:)(v92, v178, v94, v95, v96);
  }
  else
  {
    v98 = v54[12];
    v99 = v54[10];
    v100 = (uint64_t)v147;
    *v147 = v99;
    *(_QWORD *)(v100 + 8) = v85;
    v156 = v99;
    *(_QWORD *)(v100 + 16) = v98;
    v101 = v148;
    v102 = (_QWORD *)(v100 + *(int *)(v148 + 20));
    *v102 = swift_getKeyPath(&unk_1000E1F60);
    swift_storeEnumTagMultiPayload(v102, v146, 0);
    *(_QWORD *)(v100 + *(int *)(v101 + 24)) = 0x4024000000000000;
    v158 = v98;
    sub_1000A9C98(v99, v85, v98);
    sub_1000A9C98(v99, v85, v98);
    v103 = sub_1000A943C();
    LODWORD(v176) = v74;
    v104 = v149;
    View.widgetAccentable(_:)(1, v101, v103);
    sub_10001DF70(v100, type metadata accessor for HeadlineRubricView);
    v105 = v150;
    v106 = v153;
    v107 = v151;
    v108 = (*(uint64_t (**)(char *, char *, uint64_t))(v150 + 32))(v153, v104, v151);
    v109 = static Alignment.center.getter(v108);
    _FrameLayout.init(width:height:alignment:)(&v203, 0, 1, 0, 0, v109, v110);
    v155 = v203;
    LOBYTE(v99) = v204;
    v154 = v205;
    LOBYTE(v98) = v206;
    v111 = *((_QWORD *)&v207 + 1);
    v148 = v207;
    v189 = 0;
    v112 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
    v112(v104, v106, v107);
    v188 = 1;
    v187 = v99;
    v186 = v98;
    v113 = v189;
    v114 = (uint64_t)v152;
    *v152 = 0x4010000000000000;
    *(_BYTE *)(v114 + 8) = v113;
    sub_1000A9390(0);
    v116 = v115;
    v112((char *)(v114 + *(int *)(v115 + 48)), v104, v107);
    v117 = v114 + *(int *)(v116 + 64);
    v118 = v188;
    v119 = v187;
    v120 = v186;
    *(_QWORD *)v117 = 0;
    *(_BYTE *)(v117 + 8) = v118;
    *(_QWORD *)(v117 + 16) = v155;
    *(_BYTE *)(v117 + 24) = v119;
    *(_QWORD *)(v117 + 32) = v154;
    *(_BYTE *)(v117 + 40) = v120;
    *(_QWORD *)(v117 + 48) = v148;
    *(_QWORD *)(v117 + 56) = v111;
    v83 = v185;
    v121 = *(void (**)(char *, uint64_t))(v105 + 8);
    v121(v104, v107);
    v122 = v84;
    v123 = v179;
    sub_1000A3324(v114, (uint64_t)v179, &qword_100117088, (uint64_t (*)(uint64_t))sub_1000A9390, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    swift_storeEnumTagMultiPayload(v123, v177, 0);
    sub_1000A95C0(0, &qword_100117068, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&type metadata for _FrameLayout);
    v74 = v124;
    v125 = sub_1000A9BC0();
    v126 = sub_1000A9C20();
    v97 = v183;
    v127 = v123;
    v84 = v122;
    v128 = v74;
    LOBYTE(v74) = (_BYTE)v176;
    _ConditionalContent<>.init(storage:)(v127, v178, v128, v125, v126);
    sub_1000A5E94(v156, v85, v158);
    sub_100028528(v114, &qword_100117088, (uint64_t (*)(uint64_t))sub_1000A9390, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v121(v153, v107);
  }
  v129 = v74 & 1;
  sub_10001DE2C(v84, v83, (uint64_t (*)(_QWORD))sub_1000A9108);
  v130 = v184;
  sub_10003C138(v97, v184, (uint64_t)&qword_100117080, (uint64_t)&type metadata accessor for _ConditionalContent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1000A92F8);
  v131 = v180;
  sub_10001DE2C(v83, v180, (uint64_t (*)(_QWORD))sub_1000A9108);
  sub_1000A902C(0);
  v133 = v131 + v132[12];
  *(_QWORD *)v133 = 0;
  *(_BYTE *)(v133 + 8) = 1;
  *(_QWORD *)(v133 + 16) = v175;
  *(_BYTE *)(v133 + 24) = v174;
  *(_QWORD *)(v133 + 32) = v173;
  *(_BYTE *)(v133 + 40) = v172;
  v134 = v170;
  *(_QWORD *)(v133 + 48) = v171;
  *(_QWORD *)(v133 + 56) = v134;
  v135 = v131 + v132[16];
  *(_QWORD *)v135 = 0;
  *(_BYTE *)(v135 + 8) = 1;
  *(_QWORD *)(v135 + 16) = v164;
  *(_BYTE *)(v135 + 24) = v163;
  *(_QWORD *)(v135 + 32) = v162;
  *(_BYTE *)(v135 + 40) = v161;
  v136 = v159;
  *(_QWORD *)(v135 + 48) = v160;
  *(_QWORD *)(v135 + 56) = v136;
  v137 = v131 + v132[20];
  v138 = v169;
  v139 = v168;
  *(_QWORD *)v137 = v169;
  *(_QWORD *)(v137 + 8) = v139;
  *(_BYTE *)(v137 + 16) = v129;
  v140 = v181;
  v141 = v167;
  *(_QWORD *)(v137 + 24) = v181;
  *(_QWORD *)(v137 + 32) = v141;
  *(_BYTE *)(v137 + 40) = 0;
  v142 = v165;
  v143 = v166;
  *(_QWORD *)(v137 + 48) = v165;
  *(_QWORD *)(v137 + 56) = v143;
  v144 = v157;
  *(_QWORD *)(v137 + 64) = v157;
  *(_QWORD *)(v137 + 72) = 3;
  *(_BYTE *)(v137 + 80) = 0;
  sub_10003C138(v130, v131 + v132[24], (uint64_t)&qword_100117080, (uint64_t)&type metadata accessor for _ConditionalContent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1000A92F8);
  sub_1000144EC(v138, v139, v129);
  swift_bridgeObjectRetain(v140);
  swift_retain(v141);
  swift_retain(v142);
  swift_retain(v143);
  swift_retain(v144);
  sub_10003C184(v183, (uint64_t)&qword_100117080, (uint64_t)&type metadata accessor for _ConditionalContent, (uint64_t (*)(_QWORD))sub_1000A92F8);
  sub_10001DF70(v182, (uint64_t (*)(_QWORD))sub_1000A9108);
  sub_10003C184(v184, (uint64_t)&qword_100117080, (uint64_t)&type metadata accessor for _ConditionalContent, (uint64_t (*)(_QWORD))sub_1000A92F8);
  sub_100014490(v138, v139, v129);
  swift_release(v144);
  swift_release(v143);
  swift_release(v142);
  swift_release(v141);
  swift_bridgeObjectRelease(v140);
  return sub_10001DF70(v185, (uint64_t (*)(_QWORD))sub_1000A9108);
}

uint64_t sub_1000A7E34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000A7E5C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

unint64_t sub_1000A7E84(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100103960, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_1000A7ECC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = (void *)a2[3];
    v9 = a2[4];
    v10 = a2[5];
    v11 = a2[6];
    v12 = *((_BYTE *)a2 + 56);
    swift_bridgeObjectRetain(v7);
    sub_10000EBD8(v8, v9, v10, v11, v12);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v11;
    *(_BYTE *)(a1 + 56) = v12;
    v13 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v13;
    v14 = a2[11];
    swift_bridgeObjectRetain(v13);
    if (v14 <= 2)
    {
      *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
      *(_QWORD *)(a1 + 96) = a2[12];
    }
    else
    {
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_QWORD *)(a1 + 88) = v14;
      v16 = a2[12];
      *(_QWORD *)(a1 + 96) = v16;
      swift_bridgeObjectRetain(v14);
      swift_retain(v16);
    }
    v17 = (void *)a2[13];
    if (v17 == (void *)1)
    {
      *(_QWORD *)(a1 + 104) = a2[13];
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    }
    else
    {
      *(_QWORD *)(a1 + 104) = v17;
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
      v18 = v17;
    }
    v19 = *(int *)(type metadata accessor for HeadlineViewModel(0) + 36);
    v20 = (void *)(a1 + v19);
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for URL(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v25 = *(int *)(a3 + 20);
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v29 = v28;
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v30 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v26, v27, v30);
      v31 = v26;
      v32 = v29;
      v33 = 1;
    }
    else
    {
      v34 = *v27;
      *v26 = *v27;
      swift_retain(v34);
      v31 = v26;
      v32 = v29;
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v32, v33);
  }
  return a1;
}

uint64_t sub_1000A813C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  sub_10000EC04(*(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v4 = *(_QWORD *)(a1 + 88);
  if (v4 >= 3)
  {
    swift_bridgeObjectRelease(v4);
    swift_release(*(_QWORD *)(a1 + 96));
  }
  v5 = *(void **)(a1 + 104);
  if (v5 != (void *)1)

  v6 = a1 + *(int *)(type metadata accessor for HeadlineViewModel(0) + 36);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v9, v10) != 1)
    return swift_release(*v9);
  v11 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
}

uint64_t sub_1000A8268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(void **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain(v6);
  sub_10000EBD8(v7, v8, v9, v10, v11);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v11;
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  v13 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain(v12);
  if (v13 <= 2)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  else
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v13;
    v14 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v14;
    swift_bridgeObjectRetain(v13);
    swift_retain(v14);
  }
  v15 = *(void **)(a2 + 104);
  if (v15 == (void *)1)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  }
  else
  {
    *(_QWORD *)(a1 + 104) = v15;
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    v16 = v15;
  }
  v17 = *(int *)(type metadata accessor for HeadlineViewModel(0) + 36);
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v23 = *(int *)(a3 + 20);
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v27 = v26;
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    v28 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v24, v25, v28);
    v29 = 1;
  }
  else
  {
    v30 = *v25;
    *v24 = *v25;
    swift_retain(v30);
    v29 = 0;
  }
  swift_storeEnumTagMultiPayload(v24, v27, v29);
  return a1;
}

uint64_t sub_1000A84A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  void *v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(void **)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_BYTE *)(a2 + 56);
  sub_10000EBD8(v8, v9, v10, v11, v12);
  v13 = *(void **)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = v12;
  sub_10000EC04(v13, v14, v15, v16, v17);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  v19 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = (__int128 *)(a1 + 80);
  v21 = (__int128 *)(a2 + 80);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_QWORD *)(a2 + 88);
  if (v22 == 2)
  {
    if (v23 <= 2)
    {
LABEL_3:
      v24 = *v21;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *v20 = v24;
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  if (v23 == 2)
  {
    sub_1000922CC(a1 + 80);
LABEL_11:
    v27 = *(_QWORD *)(a2 + 96);
    *v20 = *v21;
    *(_QWORD *)(a1 + 96) = v27;
    goto LABEL_12;
  }
  if (v22 < 2)
  {
    if (v23 < 2)
      goto LABEL_3;
LABEL_8:
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v25 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v25;
    v26 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v26;
    swift_bridgeObjectRetain(v25);
    swift_retain(v26);
    goto LABEL_12;
  }
  if (v23 < 2)
  {
    sub_10001DF70(a1 + 80, (uint64_t (*)(_QWORD))sub_10009224C);
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v54 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v22);
  v55 = *(_QWORD *)(a1 + 96);
  v56 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v56;
  swift_retain(v56);
  swift_release(v55);
LABEL_12:
  v28 = (uint64_t *)(a1 + 104);
  v29 = *(void **)(a1 + 104);
  v31 = (uint64_t *)(a2 + 104);
  v30 = *(void **)(a2 + 104);
  if (v29 == (void *)1)
  {
    if (v30 == (void *)1)
    {
      v32 = *v31;
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *v28 = v32;
    }
    else
    {
      *(_QWORD *)(a1 + 104) = v30;
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      v34 = v30;
    }
  }
  else if (v30 == (void *)1)
  {
    sub_100092300((id *)(a1 + 104));
    v33 = *(_BYTE *)(a2 + 112);
    *v28 = *v31;
    *(_BYTE *)(a1 + 112) = v33;
  }
  else
  {
    *(_QWORD *)(a1 + 104) = v30;
    v35 = v30;

    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  }
  v36 = *(int *)(type metadata accessor for HeadlineViewModel(0) + 36);
  v37 = (void *)(a1 + v36);
  v38 = (void *)(a2 + v36);
  v39 = type metadata accessor for URL(0);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
  v42 = v41(v37, 1, v39);
  v43 = v41(v38, 1, v39);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, void *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      if (a1 == a2)
        return a1;
      goto LABEL_26;
    }
LABEL_25:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_26;
  }
  if (v43)
  {
    (*(void (**)(void *, uint64_t))(v40 + 8))(v37, v39);
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v40 + 24))(v37, v38, v39);
  if (a1 == a2)
    return a1;
LABEL_26:
  v45 = *(int *)(a3 + 20);
  v46 = (uint64_t *)(a1 + v45);
  v47 = (uint64_t *)(a2 + v45);
  sub_100028528(a1 + v45, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v49 = v48;
  if (swift_getEnumCaseMultiPayload(v47, v48) == 1)
  {
    v50 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v46, v47, v50);
    v51 = 1;
  }
  else
  {
    v52 = *v47;
    *v46 = *v47;
    swift_retain(v52);
    v51 = 0;
  }
  swift_storeEnumTagMultiPayload(v46, v49, v51);
  return a1;
}

uint64_t sub_1000A887C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v9 = *(int *)(type metadata accessor for HeadlineViewModel(0) + 36);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = *(int *)(a3 + 20);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v19 = v18;
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v20 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v16, v17, v20);
    swift_storeEnumTagMultiPayload(v16, v19, 1);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000A8A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_BYTE *)(a2 + 56);
  v9 = *(void **)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_BYTE *)(a1 + 56);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = v8;
  sub_10000EC04(v9, v10, v11, v12, v13);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 88);
  v17 = *(_QWORD *)(a2 + 88);
  if (v16 == 2)
    goto LABEL_7;
  if (v17 == 2)
  {
    sub_1000922CC(a1 + 80);
LABEL_7:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    goto LABEL_8;
  }
  if (v16 < 2)
    goto LABEL_7;
  if (v17 < 2)
  {
    sub_10001DF70(a1 + 80, (uint64_t (*)(_QWORD))sub_10009224C);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v17;
  swift_bridgeObjectRelease(v16);
  v36 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release(v36);
LABEL_8:
  v18 = *(void **)(a1 + 104);
  v19 = *(_QWORD *)(a2 + 104);
  if (v18 == (void *)1)
  {
LABEL_11:
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    goto LABEL_13;
  }
  if (v19 == 1)
  {
    sub_100092300((id *)(a1 + 104));
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + 104) = v19;

  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
LABEL_13:
  v20 = *(int *)(type metadata accessor for HeadlineViewModel(0) + 36);
  v21 = (void *)(a1 + v20);
  v22 = (void *)(a2 + v20);
  v23 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      if (a1 == a2)
        return a1;
      goto LABEL_20;
    }
LABEL_19:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_20;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 40))(v21, v22, v23);
  if (a1 == a2)
    return a1;
LABEL_20:
  v29 = *(int *)(a3 + 20);
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  sub_100028528(a1 + v29, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v33 = v32;
  if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
  {
    v34 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v30, v31, v34);
    swift_storeEnumTagMultiPayload(v30, v33, 1);
  }
  else
  {
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000A8D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A8D34);
}

uint64_t sub_1000A8D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for HeadlineViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    v8 = v11;
    v12 = *(_QWORD *)(v11 - 8);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1000A8DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A8DCC);
}

uint64_t sub_1000A8DCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = type metadata accessor for HeadlineViewModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for HeadlineView(uint64_t a1)
{
  return sub_1000071F8(a1, qword_100116FF0, (uint64_t)&nominal type descriptor for HeadlineView);
}

void sub_1000A8E74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for HeadlineViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000EDE8(319, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000A8F10(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9A54, 1);
}

void sub_1000A8F20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100117028)
  {
    sub_10000EDE8(255, &qword_100117030, (uint64_t (*)(uint64_t))sub_1000A8F98, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_1000A9608();
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100117028);
  }
}

void sub_1000A8F98(uint64_t a1)
{
  sub_1000A9CE8(a1, &qword_100117038, (uint64_t (*)(uint64_t))sub_1000A8FB4, (uint64_t (*)(uint64_t))sub_1000A94B8);
}

void sub_1000A8FB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100117040)
  {
    sub_10000EDE8(255, &qword_100117048, (uint64_t (*)(uint64_t))sub_1000A902C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_1000A9458();
    v5 = type metadata accessor for VStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100117040);
  }
}

void sub_1000A902C(uint64_t a1)
{
  unint64_t TupleTypeMetadata;
  uint64_t v3;

  if (!qword_100117050)
  {
    sub_1000A9108(255);
    sub_1000A95C0(255, (unint64_t *)&qword_100113A30, (uint64_t)&type metadata for Spacer, (uint64_t)&type metadata for _FrameLayout);
    sub_1000A95C0(255, &qword_100117068, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&type metadata for _FrameLayout);
    sub_1000A91E0(255);
    sub_1000A92F8(255, &qword_100117080, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    TupleTypeMetadata = swift_getTupleTypeMetadata(a1, 5);
    if (!v3)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_100117050);
  }
}

void sub_1000A9108(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100117058)
  {
    sub_1000A9274(255, &qword_100117060, type metadata accessor for HeadlineAttributionView);
    v3 = type metadata accessor for ModifiedContent(a1, v2, &type metadata for _FrameLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100117058);
  }
}

void sub_1000A9174(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_1000143C4(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Optional);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_1000A91E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100117070)
  {
    sub_1000A9274(255, &qword_100117078, (uint64_t (*)(uint64_t))sub_10002BCA8);
    v3 = v2;
    sub_1000A9174(255, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100117070);
  }
}

void sub_1000A9274(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v5 = a3(255);
    sub_1000A9174(255, &qword_100112D30, (unint64_t *)&qword_100112D38, (uint64_t)&type metadata for Color, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    v7 = type metadata accessor for ModifiedContent(a1, v5, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1000A92F8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_10000EDE8(255, &qword_100117088, (uint64_t (*)(uint64_t))sub_1000A9390, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v7 = v6;
    sub_1000A95C0(255, &qword_100117068, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&type metadata for _FrameLayout);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_1000A9390(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata3;
  uint64_t v6;

  if (!qword_100117090)
  {
    sub_1000270DC(255, &qword_100117098, type metadata accessor for HeadlineRubricView, sub_1000A943C, (uint64_t)&opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>);
    v3 = v2;
    sub_1000A95C0(255, &qword_100117068, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&type metadata for _FrameLayout);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, &type metadata for Spacer, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100117090);
  }
}

uint64_t sub_1000A943C()
{
  return sub_100003D3C(&qword_1001170A0, type metadata accessor for HeadlineRubricView, (uint64_t)&unk_1000E3BD0);
}

unint64_t sub_1000A9458()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001170A8;
  if (!qword_1001170A8)
  {
    sub_10000EDE8(255, &qword_100117048, (uint64_t (*)(uint64_t))sub_1000A902C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001170A8);
  }
  return result;
}

void sub_1000A94B8(uint64_t a1)
{
  sub_1000A94CC(a1, &qword_1001170B0, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
}

void sub_1000A94CC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_10000EDE8(255, &qword_1001170B8, (uint64_t (*)(uint64_t))sub_1000A9544, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v7 = a3(a1, v6, &type metadata for Spacer);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1000A9544(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1001170C0)
  {
    sub_1000A95C0(255, &qword_1001170C8, (uint64_t)&type metadata for HeadlineThumbnailView, (uint64_t)&type metadata for _FlexFrameLayout);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for Spacer, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1001170C0);
  }
}

void sub_1000A95C0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for ModifiedContent(0, a3, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t sub_1000A9608()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001170D0;
  if (!qword_1001170D0)
  {
    sub_10000EDE8(255, &qword_100117030, (uint64_t (*)(uint64_t))sub_1000A8F98, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001170D0);
  }
  return result;
}

void sub_1000A9668(uint64_t a1)
{
  sub_1000270DC(a1, &qword_1001170D8, (uint64_t (*)(uint64_t))sub_1000A8F20, sub_1000A968C, (uint64_t)&opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>);
}

uint64_t sub_1000A968C()
{
  return sub_100003D3C(&qword_1001170E0, (uint64_t (*)(uint64_t))sub_1000A8F20, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

void sub_1000A96A8(uint64_t a1)
{
  sub_10002BC34(a1, &qword_1001170E8, (uint64_t (*)(uint64_t))sub_1000A9668, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
}

void sub_1000A96CC(uint64_t a1)
{
  sub_10002BC34(a1, &qword_1001170F8, (uint64_t (*)(uint64_t))sub_1000A96F0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
}

void sub_1000A96F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100117100)
  {
    sub_1000A8F20(255);
    v3 = v2;
    v4 = sub_1000A968C();
    v5 = type metadata accessor for Link(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100117100);
  }
}

void sub_1000A9750(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100117108)
  {
    sub_10000EDE8(255, &qword_100117030, (uint64_t (*)(uint64_t))sub_1000A8F98, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _HStackLayout, v2, &protocol witness table for _HStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100117108);
  }
}

unint64_t sub_1000A97CC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100117110;
  if (!qword_100117110)
  {
    sub_1000A96CC(255);
    v2 = v1;
    sub_100003D3C(&qword_100117118, (uint64_t (*)(uint64_t))sub_1000A96F0, (uint64_t)&protocol conformance descriptor for Link<A>);
    sub_100003D3C(&qword_100115CC8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100117110);
  }
  return result;
}

unint64_t sub_1000A9864()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100117120;
  if (!qword_100117120)
  {
    sub_1000A96A8(255);
    v2 = v1;
    sub_1000A8F20(255);
    v4[0] = v3;
    v4[1] = sub_1000A968C();
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003D3C(&qword_100115CC8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100117120);
  }
  return result;
}

uint64_t sub_1000A9908@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000A69D4(*(_QWORD *)(v1 + 16), a1);
}

void sub_1000A9910(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100117128)
  {
    sub_10000EDE8(255, &qword_100117048, (uint64_t (*)(uint64_t))sub_1000A902C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _VStackLayout, v2, &protocol witness table for _VStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100117128);
  }
}

uint64_t sub_1000A998C(uint64_t result)
{
  *(_BYTE *)(result + 144) = 1;
  return result;
}

void sub_1000A9998(uint64_t a1)
{
  sub_1000A94CC(a1, &qword_100117138, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent.Storage);
}

unint64_t sub_1000A99AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117140;
  if (!qword_100117140)
  {
    sub_10000EDE8(255, &qword_1001170B8, (uint64_t (*)(uint64_t))sub_1000A9544, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100117140);
  }
  return result;
}

id sub_1000A9A0C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  id result;

  if ((a19 & 1) == 0)
    return a3;
  return result;
}

uint64_t sub_1000A9A1C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 144);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v4);
  return a1;
}

void sub_1000A9A80(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if ((a19 & 1) == 0)

}

id *sub_1000A9A90(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

id *sub_1000A9AB8(id *a1)
{

  return a1;
}

uint64_t sub_1000A9AE0(uint64_t result)
{
  *(_BYTE *)(result + 144) = 0;
  return result;
}

uint64_t sub_1000A9AE8(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 16);
  return a1;
}

void sub_1000A9B14(double *a1@<X8>)
{
  *a1 = EnvironmentValues.displayScale.getter();
}

uint64_t sub_1000A9B3C(double *a1)
{
  return EnvironmentValues.displayScale.setter(*a1);
}

uint64_t sub_1000A9B60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000A9B88(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

unint64_t sub_1000A9BC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117150;
  if (!qword_100117150)
  {
    sub_10000EDE8(255, &qword_100117088, (uint64_t (*)(uint64_t))sub_1000A9390, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100117150);
  }
  return result;
}

unint64_t sub_1000A9C20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117158;
  if (!qword_100117158)
  {
    sub_1000A95C0(255, &qword_100117068, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&type metadata for _FrameLayout);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117158);
  }
  return result;
}

uint64_t sub_1000A9C98(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2 >= 2)
  {
    swift_retain(a3);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

void sub_1000A9CCC(uint64_t a1)
{
  sub_1000A9CE8(a1, &qword_100117170, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t (*)(uint64_t))type metadata accessor for Weight);
}

void sub_1000A9CE8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t TupleTypeMetadata2;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v7, v8, 0, 0);
    if (!v10)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1000A9D58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_100117178)
  {
    type metadata accessor for TraitKey(255);
    v3 = v2;
    type metadata accessor for Weight(255);
    v5 = v4;
    v6 = sub_100003D3C(&qword_100111988, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1000DB670);
    v7 = type metadata accessor for Dictionary(a1, v3, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_100117178);
  }
}

unint64_t sub_1000A9DF0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100117180;
  if (!qword_100117180)
  {
    sub_10002BC34(255, &qword_100117188, (uint64_t (*)(uint64_t))sub_1000A96CC, (uint64_t (*)(uint64_t))sub_1000A96A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v2 = v1;
    sub_1000A97CC();
    sub_1000A9864();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100117180);
  }
  return result;
}

uint64_t *Settings.UserPreferences.showCurrency.unsafeMutableAddressor()
{
  if (qword_100111538 != -1)
    swift_once(&qword_100111538, sub_1000A9EB8);
  return &static Settings.UserPreferences.showCurrency;
}

uint64_t sub_1000A9EB8()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[15];
  char v13;

  v0 = type metadata accessor for Access(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for Domain(0, v2);
  v6 = __chkstk_darwin(v5);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AppGroup(0, v6);
  v9 = static AppGroup.stocks.getter();
  AppGroup.settingsDomain.getter();
  swift_release(v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for Access.public(_:), v0);
  v13 = 0;
  sub_1000AA2C0();
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  result = Setting.init(_:defaultValue:domain:access:)(0xD000000000000014, 0x80000001000E6CA0, &v13, v8, v4);
  static Settings.UserPreferences.showCurrency = result;
  return result;
}

uint64_t static Settings.UserPreferences.showCurrency.getter()
{
  return sub_1000AA1D0(&qword_100111538, &static Settings.UserPreferences.showCurrency);
}

uint64_t sub_1000A9FFC()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v0 = type metadata accessor for Access(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Domain(0, v2);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ChartRange(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, __n128))(v13 + 104))(v12, enum case for ChartRange.oneDay(_:), v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Domain.standard(_:), v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for Access.public(_:), v0);
  sub_1000AA218(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  result = Setting.init(_:defaultValue:domain:access:)(0xD000000000000017, 0x80000001000E6C80, v12, v8, v4);
  static Settings.UserPreferences.chartDateRange = result;
  return result;
}

uint64_t *Settings.UserPreferences.chartDateRange.unsafeMutableAddressor()
{
  if (qword_100111540 != -1)
    swift_once(&qword_100111540, sub_1000A9FFC);
  return &static Settings.UserPreferences.chartDateRange;
}

uint64_t static Settings.UserPreferences.chartDateRange.getter()
{
  return sub_1000AA1D0(&qword_100111540, &static Settings.UserPreferences.chartDateRange);
}

uint64_t sub_1000AA1D0(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain(*a2);
}

ValueMetadata *type metadata accessor for Settings.UserPreferences()
{
  return &type metadata for Settings.UserPreferences;
}

void sub_1000AA218(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_100117190)
  {
    v2 = type metadata accessor for ChartRange(255);
    v3 = sub_1000AA278();
    v4 = type metadata accessor for Setting(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_100117190);
  }
}

unint64_t sub_1000AA278()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117198;
  if (!qword_100117198)
  {
    v1 = type metadata accessor for ChartRange(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ChartRange, v1);
    atomic_store(result, (unint64_t *)&qword_100117198);
  }
  return result;
}

void sub_1000AA2C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1001171A0)
  {
    v0 = type metadata accessor for Setting(0, &type metadata for Bool, &protocol witness table for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1001171A0);
  }
}

uint64_t sub_1000AA31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AA328);
}

uint64_t sub_1000AA328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_1000AA3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AA3C8);
}

uint64_t sub_1000AA3C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for LargeDetailContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100117200;
  if (!qword_100117200)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LargeDetailContentView);
  return result;
}

void sub_1000AA490(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = " ";
  v4[1] = &unk_1000E20A0;
  v4[2] = &unk_1000E20B8;
  v4[3] = &unk_1000E20D0;
  v4[4] = &unk_1000E20E8;
  sub_10000EDE8(319, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

uint64_t sub_1000AA550(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9ACC, 1);
}

uint64_t sub_1000AA560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v4 = type metadata accessor for LargeSparklineView(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002C564(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - v11;
  sub_100024A18(0, &qword_100117268, &qword_100117270, (uint64_t (*)(uint64_t))sub_1000AB558, &qword_1001172B0);
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v27 - v17;
  *(_QWORD *)v18 = static HorizontalAlignment.leading.getter(v19);
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 0;
  sub_1000AB7A8(0, &qword_1001172B8, &qword_100117270, (uint64_t (*)(uint64_t))sub_1000AB558);
  sub_1000AA7D0(a1, (uint64_t)&v18[*(int *)(v20 + 44)]);
  v21 = type metadata accessor for LargeDetailContentView(0);
  v22 = sub_1000245D0(a1 + *(int *)(v21 + 36), (uint64_t)v6);
  v23 = static Alignment.center.getter(v22);
  sub_100029FF8(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v9, 0.0, 1, INFINITY, 0, v23, v24);
  sub_10001DF70((uint64_t)v6, type metadata accessor for LargeSparklineView);
  sub_10000ED3C((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_10002C564);
  sub_1000AB818((uint64_t)v18, (uint64_t)v15);
  sub_10001DE2C((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_10002C564);
  sub_1000AB818((uint64_t)v15, a2);
  sub_1000AB4CC(0);
  sub_10001DE2C((uint64_t)v9, a2 + *(int *)(v25 + 48), (uint64_t (*)(_QWORD))sub_10002C564);
  sub_10001DF70((uint64_t)v12, (uint64_t (*)(_QWORD))sub_10002C564);
  sub_1000AB87C((uint64_t)v18);
  sub_10001DF70((uint64_t)v9, (uint64_t (*)(_QWORD))sub_10002C564);
  return sub_1000AB87C((uint64_t)v15);
}

_QWORD *sub_1000AA7D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  int *v47;
  int *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t KeyPath;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _QWORD v102[18];
  char v103;
  uint64_t v104;
  uint64_t (*v105)();
  uint64_t v106;

  sub_1000AB688(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AB624(0);
  v62 = v7;
  __chkstk_darwin(v7);
  v55 = (uint64_t)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v63 = (uint64_t)&v54 - v10;
  v79 = *(unsigned __int8 *)(a1 + 80);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 24);
  v81 = *(_QWORD *)(a1 + 16);
  v82 = v11;
  v69 = v13;
  v70 = v12;
  v14 = *(_QWORD *)(a1 + 40);
  v80 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 56);
  v67 = *(_QWORD *)(a1 + 48);
  v16 = v67;
  v68 = v14;
  v17 = *(_QWORD *)(a1 + 64);
  v65 = *(_QWORD *)(a1 + 72);
  v18 = v65;
  v66 = v17;
  v19 = *(_QWORD *)(a1 + 88);
  v77 = *(unsigned __int8 *)(a1 + 96);
  v78 = v19;
  v20 = *(_QWORD *)(a1 + 104);
  v21 = *(_QWORD *)(a1 + 112);
  v83 = v15;
  v84 = v21;
  v75 = *(_QWORD *)(a1 + 120);
  v76 = v20;
  v74 = *(unsigned __int8 *)(a1 + 128);
  v73 = *(_QWORD *)(a1 + 136);
  v72 = *(unsigned __int8 *)(a1 + 144);
  KeyPath = swift_getKeyPath(&unk_1000E2150);
  v22 = swift_allocObject(&unk_1001089F8, 41, 7);
  v71 = v22;
  *(_QWORD *)(v22 + 16) = 0;
  *(_BYTE *)(v22 + 24) = 1;
  *(_QWORD *)(v22 + 32) = 0;
  *(_BYTE *)(v22 + 40) = 0;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  sub_100024540(v16, v83, v17, v18);
  swift_bridgeObjectRetain(v84);
  v24 = static Alignment.center.getter(v23);
  v26 = _FrameLayout.init(width:height:alignment:)(&v85, 0, 1, 0x4028000000000000, 0, v24, v25);
  v61 = v85;
  v60 = v86;
  v59 = v87;
  v58 = v88;
  v56 = v90;
  v57 = v89;
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v26);
  *((_QWORD *)v6 + 1) = 0x4038000000000000;
  v6[16] = 0;
  sub_1000AB8F0(0);
  sub_1000AADC4(a1, (uint64_t)&v6[*(int *)(v27 + 44)]);
  v28 = swift_getKeyPath(&unk_1000E2150);
  v29 = swift_allocObject(&unk_100108A20, 41, 7);
  *(_QWORD *)(v29 + 16) = 0;
  *(_BYTE *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 32) = 0;
  *(_BYTE *)(v29 + 40) = 0;
  v30 = v55;
  sub_10001DE2C((uint64_t)v6, v55, (uint64_t (*)(_QWORD))sub_1000AB688);
  v31 = (uint64_t *)(v30 + *(int *)(v62 + 36));
  *v31 = v28;
  v31[1] = (uint64_t)sub_10002453C;
  v31[2] = v29;
  sub_10001DF70((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1000AB688);
  v32 = v63;
  sub_10000ED3C(v30, v63, (uint64_t (*)(_QWORD))sub_1000AB624);
  v33 = *(_QWORD *)(a1 + 48);
  v34 = *(_QWORD *)(a1 + 56);
  v36 = *(_QWORD *)(a1 + 64);
  v35 = *(_QWORD *)(a1 + 72);
  v62 = swift_getKeyPath(&unk_1000E2150);
  v37 = swift_allocObject(&unk_100108A48, 41, 7);
  *(_QWORD *)(v37 + 16) = 0;
  *(_BYTE *)(v37 + 24) = 0;
  *(_QWORD *)(v37 + 32) = 0;
  *(_BYTE *)(v37 + 40) = 0;
  sub_10001DE2C(v32, v30, (uint64_t (*)(_QWORD))sub_1000AB624);
  LOBYTE(v91) = v79;
  *((_QWORD *)&v91 + 1) = v82;
  *(_QWORD *)&v92 = v70;
  *((_QWORD *)&v92 + 1) = v81;
  *(_QWORD *)&v93 = v69;
  *((_QWORD *)&v93 + 1) = v80;
  *(_QWORD *)&v94 = v68;
  *((_QWORD *)&v94 + 1) = v67;
  *(_QWORD *)&v95 = v83;
  *((_QWORD *)&v95 + 1) = v66;
  *(_QWORD *)&v96 = v65;
  *((_QWORD *)&v96 + 1) = v78;
  *(_QWORD *)&v97 = v77;
  *((_QWORD *)&v97 + 1) = v76;
  *(_QWORD *)&v98 = v84;
  *((_QWORD *)&v98 + 1) = v75;
  *(_QWORD *)&v99 = v74;
  *((_QWORD *)&v99 + 1) = v73;
  LOBYTE(v100) = v72;
  *((_QWORD *)&v100 + 1) = KeyPath;
  *(_QWORD *)&v101 = sub_10002453C;
  *((_QWORD *)&v101 + 1) = v71;
  v38 = v96;
  *(_OWORD *)(a2 + 64) = v95;
  *(_OWORD *)(a2 + 80) = v38;
  v39 = v91;
  v40 = v92;
  v41 = v94;
  *(_OWORD *)(a2 + 32) = v93;
  *(_OWORD *)(a2 + 48) = v41;
  *(_OWORD *)a2 = v39;
  *(_OWORD *)(a2 + 16) = v40;
  v42 = v97;
  v43 = v98;
  v44 = v101;
  v45 = v99;
  *(_OWORD *)(a2 + 144) = v100;
  *(_OWORD *)(a2 + 160) = v44;
  *(_OWORD *)(a2 + 112) = v43;
  *(_OWORD *)(a2 + 128) = v45;
  *(_OWORD *)(a2 + 96) = v42;
  *(_QWORD *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 184) = 1;
  *(_QWORD *)(a2 + 192) = v61;
  *(_BYTE *)(a2 + 200) = v60;
  *(_QWORD *)(a2 + 208) = v59;
  *(_BYTE *)(a2 + 216) = v58;
  v46 = v56;
  *(_QWORD *)(a2 + 224) = v57;
  *(_QWORD *)(a2 + 232) = v46;
  sub_1000AB558(0);
  v48 = v47;
  sub_10001DE2C(v30, a2 + v47[16], (uint64_t (*)(_QWORD))sub_1000AB624);
  v49 = a2 + v48[20];
  *(_QWORD *)v49 = 0x4030000000000000;
  *(_BYTE *)(v49 + 8) = 0;
  v50 = (uint64_t *)(a2 + v48[24]);
  *v50 = v33;
  v50[1] = v34;
  v50[2] = v36;
  v50[3] = v35;
  v51 = v62;
  v50[4] = v62;
  v50[5] = (uint64_t)sub_10002453C;
  v50[6] = v37;
  v52 = a2 + v48[28];
  *(_QWORD *)v52 = 0x4030000000000000;
  *(_BYTE *)(v52 + 8) = 0;
  sub_1000247B8(&v91);
  sub_100024540(v33, v34, v36, v35);
  swift_retain(v51);
  swift_retain(v37);
  sub_100024540(v33, v34, v36, v35);
  sub_10001DF70(v63, (uint64_t (*)(_QWORD))sub_1000AB624);
  sub_100024750(v33, v34, v36, v35);
  swift_release(v37);
  swift_release(v51);
  sub_10001DF70(v30, (uint64_t (*)(_QWORD))sub_1000AB624);
  LOBYTE(v102[0]) = v79;
  v102[1] = v82;
  v102[2] = v70;
  v102[3] = v81;
  v102[4] = v69;
  v102[5] = v80;
  v102[6] = v68;
  v102[7] = v67;
  v102[8] = v83;
  v102[9] = v66;
  v102[10] = v65;
  v102[11] = v78;
  v102[12] = v77;
  v102[13] = v76;
  v102[14] = v84;
  v102[15] = v75;
  v102[16] = v74;
  v102[17] = v73;
  v103 = v72;
  v104 = KeyPath;
  v105 = sub_10002453C;
  v106 = v71;
  return sub_100024898(v102);
}

double sub_1000AADC4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  char v38;
  void (*v39)(void);
  char *v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  char v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, __n128);
  __n128 v63;
  double result;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 v105;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  unsigned __int8 v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;

  v4 = type metadata accessor for Divider(0);
  v90 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v91 = (char *)&v65 - v8;
  v9 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for LargeDetailContentView(0) + 40));
  v10 = *(_QWORD *)(v9 + 16);
  if (v10 >= 6)
    v11 = 6;
  else
    v11 = *(_QWORD *)(v9 + 16);
  if (v10 >= 3)
    v12 = 3;
  else
    v12 = *(_QWORD *)(v9 + 16);
  v13 = type metadata accessor for __ContiguousArrayStorageBase(0);
  swift_bridgeObjectRetain_n(v9, 2);
  v15 = swift_unknownObjectRetain_n(v14);
  v16 = (_QWORD *)swift_dynamicCastClass(v15, v13);
  if (!v16)
  {
    swift_bridgeObjectRelease(v9);
    v16 = _swiftEmptyArrayStorage;
  }
  v17 = v16[2];
  swift_release(v16);
  if (v17 == v12)
  {
    v18 = (_QWORD *)swift_dynamicCastClass(v9, v13);
    swift_bridgeObjectRelease(v9);
    if (v18)
      goto LABEL_13;
    v18 = _swiftEmptyArrayStorage;
  }
  else
  {
    swift_bridgeObjectRelease(v9);
    v18 = sub_10007F354(v9, v9 + 32, 0, (2 * v12) | 1);
  }
  swift_bridgeObjectRelease(v9);
LABEL_13:
  v89 = v9 + 32;
  if (v11 - v12 >= 3)
    v19 = v12 + 3;
  else
    v19 = v11;
  if (v19 < v12)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v11 < v12)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v11 < v19)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    swift_bridgeObjectRelease(v9);
    v24 = sub_10007F354(v9, v89, v12, (2 * v19) | 1);
    goto LABEL_24;
  }
  v88 = v4;
  v20 = swift_bridgeObjectRetain(v9);
  v21 = swift_unknownObjectRetain_n(v20);
  v22 = (_QWORD *)swift_dynamicCastClass(v21, v13);
  if (!v22)
  {
    swift_bridgeObjectRelease(v9);
    v22 = _swiftEmptyArrayStorage;
  }
  v23 = v22[2];
  swift_release(v22);
  v87 = v6;
  if (v23 != v19 - v12)
    goto LABEL_29;
  v24 = (_QWORD *)swift_dynamicCastClass(v9, v13);
  if (!v24)
  {
    swift_bridgeObjectRelease(v9);
    v24 = _swiftEmptyArrayStorage;
  }
LABEL_24:
  swift_bridgeObjectRelease(v9);
  v26 = static Alignment.center.getter(v25);
  sub_10002A050(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v103, 0.0, 1, 0.0, 1, v26, v27, (uint64_t)v18);
  v28 = swift_release(v18);
  v89 = v103;
  v86 = v104;
  LODWORD(v69) = v105;
  v85 = v106;
  v68 = v107;
  v84 = v108;
  v67 = v109;
  v83 = v110;
  v66 = v111;
  v82 = v112;
  v65 = v113;
  v81 = v114;
  v29 = v115;
  v80 = v116;
  v79 = v117;
  v30 = Divider.init()(v28);
  v31 = static Alignment.center.getter(v30);
  sub_10002A050(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v103, 0.0, 1, 0.0, 1, v31, v32, (uint64_t)v24);
  swift_release(v24);
  v70 = v103;
  v78 = v104;
  v33 = v105;
  v77 = v106;
  v34 = v107;
  v76 = v108;
  v35 = v109;
  v75 = v110;
  v36 = v111;
  v74 = v112;
  v37 = v113;
  v73 = v114;
  v38 = v115;
  v72 = v116;
  v71 = v117;
  LOBYTE(v103) = v69;
  v102 = v68;
  v101 = v67;
  v100 = v66;
  v99 = v65;
  v98 = v29;
  v39 = *(void (**)(void))(v90 + 16);
  v69 = v9;
  v40 = v87;
  v41 = v88;
  v39();
  v97 = v33;
  v96 = v34;
  v95 = v35;
  v94 = v36;
  v93 = v37;
  v92 = v38;
  v42 = v103;
  v43 = v102;
  v44 = v101;
  v45 = v100;
  v46 = v99;
  v47 = v98;
  v48 = v89;
  v49 = v86;
  *(_QWORD *)a2 = v89;
  *(_QWORD *)(a2 + 8) = v49;
  *(_BYTE *)(a2 + 16) = v42;
  *(_QWORD *)(a2 + 24) = v85;
  *(_BYTE *)(a2 + 32) = v43;
  *(_QWORD *)(a2 + 40) = v84;
  *(_BYTE *)(a2 + 48) = v44;
  *(_QWORD *)(a2 + 56) = v83;
  *(_BYTE *)(a2 + 64) = v45;
  *(_QWORD *)(a2 + 72) = v82;
  *(_BYTE *)(a2 + 80) = v46;
  *(_QWORD *)(a2 + 88) = v81;
  *(_BYTE *)(a2 + 96) = v47;
  v50 = v79;
  *(_QWORD *)(a2 + 104) = v80;
  *(_QWORD *)(a2 + 112) = v50;
  sub_1000AB720(0);
  v52 = v51;
  ((void (*)(uint64_t, char *, uint64_t))v39)(a2 + *(int *)(v51 + 48), v40, v41);
  v53 = a2 + *(int *)(v52 + 64);
  v54 = v97;
  v55 = v96;
  v56 = v95;
  LOBYTE(v39) = v94;
  LOBYTE(v52) = v93;
  v57 = v92;
  swift_bridgeObjectRetain(v48);
  v58 = v70;
  swift_bridgeObjectRetain(v70);
  v59 = swift_bridgeObjectRelease(v69);
  v60 = v78;
  *(_QWORD *)v53 = v58;
  *(_QWORD *)(v53 + 8) = v60;
  *(_BYTE *)(v53 + 16) = v54;
  *(_QWORD *)(v53 + 24) = v77;
  *(_BYTE *)(v53 + 32) = v55;
  *(_QWORD *)(v53 + 40) = v76;
  *(_BYTE *)(v53 + 48) = v56;
  *(_QWORD *)(v53 + 56) = v75;
  *(_BYTE *)(v53 + 64) = (_BYTE)v39;
  *(_QWORD *)(v53 + 72) = v74;
  *(_BYTE *)(v53 + 80) = v52;
  *(_QWORD *)(v53 + 88) = v73;
  *(_BYTE *)(v53 + 96) = v57;
  v61 = v71;
  *(_QWORD *)(v53 + 104) = v72;
  *(_QWORD *)(v53 + 112) = v61;
  v62 = *(void (**)(char *, uint64_t, __n128))(v90 + 8);
  v62(v91, v41, v59);
  v63 = swift_bridgeObjectRelease(v58);
  v62(v40, v41, v63);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v89).n128_u64[0];
  return result;
}

uint64_t sub_1000AB474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  sub_1000AB7A8(0, &qword_100117250, &qword_100117258, (uint64_t (*)(uint64_t))sub_1000AB4CC);
  return sub_1000AA560(v2, a2 + *(int *)(v4 + 44));
}

void sub_1000AB4CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100117260)
  {
    sub_100024A18(255, &qword_100117268, &qword_100117270, (uint64_t (*)(uint64_t))sub_1000AB558, &qword_1001172B0);
    v3 = v2;
    sub_10002C564(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100117260);
  }
}

void sub_1000AB558(uint64_t a1)
{
  unint64_t TupleTypeMetadata;
  uint64_t v3;

  if (!qword_100117278)
  {
    sub_1000244C8(255, &qword_100112B88, (uint64_t)&type metadata for SymbolSummaryTicker);
    sub_1000A95C0(255, (unint64_t *)&qword_100113A30, (uint64_t)&type metadata for Spacer, (uint64_t)&type metadata for _FrameLayout);
    sub_1000AB624(255);
    sub_1000244C8(255, &qword_100112BD8, (uint64_t)&type metadata for LargePriceView);
    TupleTypeMetadata = swift_getTupleTypeMetadata(a1, 6);
    if (!v3)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_100117278);
  }
}

void sub_1000AB624(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100117280)
  {
    sub_1000AB688(255);
    v3 = v2;
    sub_100024258();
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100117280);
  }
}

void sub_1000AB688(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100117288)
  {
    sub_10000EDE8(255, &qword_100117290, (uint64_t (*)(uint64_t))sub_1000AB720, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_100024AA8(&qword_1001172A8, &qword_100117290, (uint64_t (*)(uint64_t))sub_1000AB720);
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100117288);
  }
}

void sub_1000AB720(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata3;
  uint64_t v6;

  if (!qword_100117298)
  {
    sub_1000A95C0(255, &qword_1001172A0, (uint64_t)&type metadata for QuoteDetailsView, (uint64_t)&type metadata for _FlexFrameLayout);
    v3 = v2;
    v4 = type metadata accessor for Divider(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v3, v4, v3, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100117298);
  }
}

void sub_1000AB7A8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_10000EDE8(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v7 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _VStackLayout, v6, &protocol witness table for _VStackLayout);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1000AB818(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100024A18(0, &qword_100117268, &qword_100117270, (uint64_t (*)(uint64_t))sub_1000AB558, &qword_1001172B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AB87C(uint64_t a1)
{
  uint64_t v2;

  sub_100024A18(0, &qword_100117268, &qword_100117270, (uint64_t (*)(uint64_t))sub_1000AB558, &qword_1001172B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AB8E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

void sub_1000AB8F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001172C0)
  {
    sub_10000EDE8(255, &qword_100117290, (uint64_t (*)(uint64_t))sub_1000AB720, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _HStackLayout, v2, &protocol witness table for _HStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001172C0);
  }
}

uint64_t sub_1000AB96C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000AB97C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

unint64_t sub_1000AB990()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001172C8;
  if (!qword_1001172C8)
  {
    sub_100024A18(255, &qword_1001172D0, &qword_100117258, (uint64_t (*)(uint64_t))sub_1000AB4CC, &qword_1001172D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001172C8);
  }
  return result;
}

uint64_t sub_1000AB9F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[28] = a1;
  v2[29] = v1;
  v3 = type metadata accessor for StockPriceData(0);
  v2[30] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[31] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[32] = swift_task_alloc(v5);
  v2[33] = swift_task_alloc(v5);
  v2[34] = swift_task_alloc(v5);
  v6 = type metadata accessor for CachePolicy(0);
  v2[35] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[36] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[37] = swift_task_alloc(v8);
  v2[38] = swift_task_alloc(v8);
  v9 = type metadata accessor for AppConfiguration(0);
  v2[39] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[40] = v10;
  v2[41] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000ABAD4, 0, 0);
}

uint64_t sub_1000ABAD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  __n128 v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v1 = v0[28];
  v0[42] = OBJC_IVAR____TtC12StocksWidget21TodayViewModelService_logger;
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = v0[28];
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v20 = v8;
    *(_DWORD *)v7 = 136446466;
    v9 = swift_bridgeObjectRetain(v6);
    v10 = Array.description.getter(v9);
    v12 = v11;
    swift_bridgeObjectRelease(v6);
    v0[25] = sub_10007ECFC(v10, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v6, 2);
    *(_WORD *)(v7 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()(v0 + 2);
    v13 = v0[3];
    v0[27] = sub_10007ECFC(v0[2], v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 27, v0 + 28, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "will fetch Today models for symbols: %{public}s, id=%{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, &type metadata for Any[8]);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    v14 = v0[28];

    swift_bridgeObjectRelease_n(v14, 2);
  }
  v15 = (_QWORD *)v0[29];
  v17 = v15[5];
  v16 = v15[6];
  sub_100007184(v15 + 2, v17);
  v18 = (_QWORD *)swift_task_alloc(dword_1001118E4);
  v0[43] = v18;
  *v18 = v0;
  v18[1] = sub_1000ABD38;
  return sub_100003324(v0[41], v17, v16);
}

uint64_t sub_1000ABD38()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 320);
  v2 = *(_QWORD *)(*v0 + 328);
  v4 = *(_QWORD *)(*v0 + 312);
  swift_task_dealloc(*(_QWORD *)(*v0 + 344));
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v1 + 352) = v5;
  v5(v2, v4);
  return swift_task_switch(sub_1000ABDAC, 0, 0);
}

uint64_t sub_1000ABDAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  _QWORD *v11;

  v1 = v0[38];
  v2 = v0[35];
  v3 = v0[36];
  v5 = v0[28];
  v4 = (_QWORD *)v0[29];
  v6 = v4[15];
  v7 = v4[16];
  sub_100007184(v4 + 12, v6);
  v8 = enum case for CachePolicy.preferCache(_:);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  v0[45] = v9;
  v9(v1, v8, v2);
  v0[46] = StockMetadataManagerType.fetchStocks(for:cachePolicy:)(v5, v1, v6, v7);
  v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[47] = v10;
  v10(v1, v2);
  v11 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
  v0[48] = v11;
  *v11 = v0;
  v11[1] = sub_1000ABE8C;
  return Promise.resolveAsync()(v0 + 26);
}

uint64_t sub_1000ABE8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 384);
  *(_QWORD *)(*v1 + 392) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000AC7F8;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 368));
    v4 = sub_1000ABEF8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000ABEF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  __n128 v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  double *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double refreshed;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  _QWORD *v30;
  uint64_t v32;
  void (*v33)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(double *, uint64_t);
  double *v38;
  uint64_t v39[2];

  v1 = v0[28];
  v2 = v0[26];
  swift_bridgeObjectRetain(v2);
  v3 = sub_1000AD7D8(v1, v2);
  v0[50] = v3;
  swift_bridgeObjectRelease_n(v2, 2);
  v4 = swift_bridgeObjectRetain_n(v3, 2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v39[0] = v9;
    *(_DWORD *)v8 = 136446466;
    type metadata accessor for Stock(0);
    v10 = swift_bridgeObjectRetain(v3);
    v11 = Array.description.getter(v10);
    v13 = v12;
    swift_bridgeObjectRelease(v3);
    v0[22] = sub_10007ECFC(v11, v13, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v3, 2);
    *(_WORD *)(v8 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()(v0 + 4);
    v14 = v0[5];
    v0[24] = sub_10007ECFC(v0[4], v14, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 25, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "did fetch stocks: %{public}s, id=%{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, &type metadata for Any[8]);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v3, 2);
  }
  v15 = (void (*)(uint64_t, uint64_t))v0[44];
  v16 = v0[41];
  v17 = v0[39];
  v37 = (void (*)(double *, uint64_t))v0[47];
  v38 = (double *)v0[38];
  v18 = (double *)v0[37];
  v32 = v0[35];
  v33 = (void (*)(void))v0[45];
  v19 = (_QWORD *)v0[29];
  v20 = v19 + 2;
  v34 = v19[10];
  v35 = v0[28];
  v36 = v19[11];
  sub_100007184(v19 + 7, v34);
  v22 = v19[5];
  v21 = v19[6];
  sub_100007184(v19 + 2, v22);
  v23 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v22, v21);
  refreshed = AppConfiguration.stockPriceAutoRefreshMinimumInterval.getter(v23);
  v15(v16, v17);
  *v38 = refreshed;
  v25 = enum case for CachePolicy.maxAge(_:);
  v33();
  v26 = v19[5];
  v27 = v19[6];
  sub_100007184(v20, v26);
  v28 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v26, v27);
  v29 = AppConfiguration.sparklineAutoRefreshMinimumInterval.getter(v28);
  v15(v16, v17);
  *v18 = v29;
  ((void (*)(double *, uint64_t, uint64_t))v33)(v18, v25, v32);
  v0[51] = dispatch thunk of StockPriceDataManagerType.priceData(for:quoteCachePolicy:sparklineCachePolicy:)(v35, v38, v18, v34, v36);
  v37(v18, v32);
  v37(v38, v32);
  v30 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
  v0[52] = v30;
  *v30 = v0;
  v30[1] = sub_1000AC2A4;
  return Promise.resolveAsync()(v0[33]);
}

uint64_t sub_1000AC2A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 416);
  *(_QWORD *)(*v1 + 424) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000ACA90;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 408));
    v4 = sub_1000AC310;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000AC310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  __n128 v7;
  os_log_type_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  NSObject *v30;
  __n128 v31;
  os_log_type_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50[2];

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 32))(v1, *(_QWORD *)(v0 + 264), v4);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v1, v4);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = &loc_1000DB000;
  if (os_log_type_enabled(v6, v8))
  {
    v10 = *(_QWORD *)(v0 + 256);
    v46 = *(_QWORD *)(v0 + 248);
    v47 = *(_QWORD *)(v0 + 240);
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v50[0] = v12;
    v13.n128_u64[0] = 136446466;
    *(_DWORD *)v11 = 136446466;
    v14 = StockPriceData.quotes.getter(v13);
    v16 = type metadata accessor for Quote(0, v15);
    v17 = Dictionary.description.getter(v14, &type metadata for String, v16, &protocol witness table for String);
    v19 = v18;
    swift_bridgeObjectRelease(v14);
    *(_QWORD *)(v0 + 152) = sub_10007ECFC(v17, v19, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v10, v47);
    *(_WORD *)(v11 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()((_QWORD *)(v0 + 64));
    v20 = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v0 + 168) = sub_10007ECFC(*(_QWORD *)(v0 + 64), v20, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "did fetch quotes: %{public}s, id=%{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, &type metadata for Any[8]);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v9 = (_QWORD *)&loc_1000DB000;
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 248);
    v21 = *(_QWORD *)(v0 + 256);
    v23 = *(_QWORD *)(v0 + 240);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }
  v24 = *(_QWORD *)(v0 + 400);
  v25 = *(_QWORD *)(v0 + 272);
  v26 = *(_QWORD *)(v0 + 232);
  v27 = swift_task_alloc(32);
  *(_QWORD *)(v27 + 16) = v25;
  *(_QWORD *)(v27 + 24) = v26;
  v28 = sub_100014994((void (*)(uint64_t))sub_1000ADA90, v27, v24);
  swift_bridgeObjectRelease(v24);
  swift_task_dealloc(v27);
  v29 = swift_bridgeObjectRetain_n(v28, 2);
  v30 = Logger.logObject.getter(v29);
  v32 = static os_log_type_t.default.getter(v31);
  if (os_log_type_enabled(v30, v32))
  {
    v48 = v32;
    v33 = swift_slowAlloc(22, -1);
    v49 = swift_slowAlloc(64, -1);
    v50[0] = v49;
    *(_DWORD *)v33 = v9[216];
    type metadata accessor for WidgetStock(0);
    v34 = swift_bridgeObjectRetain(v28);
    v35 = Array.description.getter(v34);
    v37 = v36;
    swift_bridgeObjectRelease(v28);
    *(_QWORD *)(v0 + 112) = sub_10007ECFC(v35, v37, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease_n(v28, 2);
    *(_WORD *)(v33 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()((_QWORD *)(v0 + 96));
    v38 = *(_QWORD *)(v0 + 104);
    *(_QWORD *)(v0 + 120) = sub_10007ECFC(*(_QWORD *)(v0 + 96), v38, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v33 + 14, v33 + 22);
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v30, v48, "did fetch Today models: %{public}s, id=%{public}s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy(v49, 2, &type metadata for Any[8]);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v28, 2);
  }
  v39 = *(_QWORD *)(v0 + 328);
  v41 = *(_QWORD *)(v0 + 296);
  v40 = *(_QWORD *)(v0 + 304);
  v43 = *(_QWORD *)(v0 + 264);
  v42 = *(_QWORD *)(v0 + 272);
  v44 = *(_QWORD *)(v0 + 256);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 248) + 8))(v42, *(_QWORD *)(v0 + 240));
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v28);
}

uint64_t sub_1000AC7F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 392);
  swift_release(*(_QWORD *)(v0 + 368));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 392);
    v6 = swift_slowAlloc(22, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v8 = swift_slowAlloc(32, -1);
    v21 = v8;
    *(_DWORD *)v6 = 138543618;
    swift_errorRetain(v5);
    v9 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 184) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v6 + 4, v6 + 12);
    *v7 = v9;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    *(_WORD *)(v6 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()((_QWORD *)(v0 + 48));
    v10 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 160) = sub_10007ECFC(*(_QWORD *)(v0 + 48), v10, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "failed to fetch Today models with error: %{public}@, id=%{public}s", (uint8_t *)v6, 0x16u);
    sub_100007248(0, &qword_100111EC0, (uint64_t (*)(uint64_t))sub_1000071A8);
    swift_arrayDestroy(v7, 1, v11);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v8, 1, &type metadata for Any[8]);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {
    v13 = *(_QWORD *)(v0 + 392);

    swift_errorRelease(v13);
    v12 = swift_errorRelease(v13);
  }
  v14 = *(_QWORD *)(v0 + 328);
  v16 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 304);
  v18 = *(_QWORD *)(v0 + 264);
  v17 = *(_QWORD *)(v0 + 272);
  v19 = *(_QWORD *)(v0 + 256);
  swift_willThrow(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ACA90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  __n128 v21;
  os_log_type_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];

  v1 = *(_QWORD *)(v0 + 424);
  swift_release(*(_QWORD *)(v0 + 408));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 424);
    v6 = swift_slowAlloc(22, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v36 = swift_slowAlloc(32, -1);
    v38[0] = v36;
    *(_DWORD *)v6 = 138543618;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 128) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    *(_WORD *)(v6 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()((_QWORD *)(v0 + 80));
    v9 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 144) = sub_10007ECFC(*(_QWORD *)(v0 + 80), v9, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "failed to fetch quotes with error: %{public}@, id=%{public}s", (uint8_t *)v6, 0x16u);
    sub_100007248(0, &qword_100111EC0, (uint64_t (*)(uint64_t))sub_1000071A8);
    swift_arrayDestroy(v7, 1, v10);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v36, 1, &type metadata for Any[8]);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {
    v12 = *(_QWORD *)(v0 + 424);

    swift_errorRelease(v12);
    v11 = swift_errorRelease(v12);
  }
  v13 = *(_QWORD *)(v0 + 424);
  static StockPriceData.empty.getter(v11);
  swift_errorRelease(v13);
  v14 = *(_QWORD *)(v0 + 400);
  v15 = *(_QWORD *)(v0 + 272);
  v16 = *(_QWORD *)(v0 + 232);
  v17 = swift_task_alloc(32);
  *(_QWORD *)(v17 + 16) = v15;
  *(_QWORD *)(v17 + 24) = v16;
  v18 = sub_100014994((void (*)(uint64_t))sub_1000ADA90, v17, v14);
  swift_bridgeObjectRelease(v14);
  swift_task_dealloc(v17);
  v19 = swift_bridgeObjectRetain_n(v18, 2);
  v20 = Logger.logObject.getter(v19);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v20, v22))
  {
    v23 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v38[0] = v37;
    *(_DWORD *)v23 = 136446466;
    type metadata accessor for WidgetStock(0);
    v24 = swift_bridgeObjectRetain(v18);
    v25 = Array.description.getter(v24);
    v27 = v26;
    swift_bridgeObjectRelease(v18);
    *(_QWORD *)(v0 + 112) = sub_10007ECFC(v25, v27, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease_n(v18, 2);
    *(_WORD *)(v23 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()((_QWORD *)(v0 + 96));
    v28 = *(_QWORD *)(v0 + 104);
    *(_QWORD *)(v0 + 120) = sub_10007ECFC(*(_QWORD *)(v0 + 96), v28, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v20, v22, "did fetch Today models: %{public}s, id=%{public}s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy(v37, 2, &type metadata for Any[8]);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v18, 2);
  }
  v29 = *(_QWORD *)(v0 + 328);
  v31 = *(_QWORD *)(v0 + 296);
  v30 = *(_QWORD *)(v0 + 304);
  v33 = *(_QWORD *)(v0 + 264);
  v32 = *(_QWORD *)(v0 + 272);
  v34 = *(_QWORD *)(v0 + 256);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 248) + 8))(v32, *(_QWORD *)(v0 + 240));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v18);
}

uint64_t sub_1000ACF74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v98 = a3;
  v91 = a2;
  v5 = type metadata accessor for Quote(0, a4);
  v102 = *(_QWORD *)(v5 - 8);
  v103 = v5;
  __chkstk_darwin(v5);
  v94 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v92 = (char *)&v83 - v8;
  sub_100007248(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  __chkstk_darwin(v9);
  v93 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v97 = (char *)&v83 - v12;
  v13 = type metadata accessor for Logger(0);
  v88 = *(_QWORD *)(v13 - 8);
  v89 = v13;
  __chkstk_darwin(v13);
  v90 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Stock(0);
  v100 = *(_QWORD *)(v15 - 8);
  v101 = v15;
  v16 = __chkstk_darwin(v15);
  v87 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Chart(0, v16);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v85 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v86 = (char *)&v83 - v22;
  sub_100007248(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  __chkstk_darwin(v23);
  v99 = (uint64_t)&v83 - v24;
  sub_100007248(0, &qword_100111EE0, (uint64_t (*)(uint64_t))&type metadata accessor for Chart);
  __chkstk_darwin(v25);
  v27 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v104 = (uint64_t)&v83 - v29;
  sub_100007248(0, &qword_100111EE8, (uint64_t (*)(uint64_t))&type metadata accessor for Quote);
  __chkstk_darwin(v30);
  v32 = (char *)&v83 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v84 = (uint64_t)&v83 - v34;
  v36 = __chkstk_darwin(v35);
  v38 = (char *)&v83 - v37;
  v39 = StockPriceData.quotes.getter(v36);
  v105 = a1;
  v40 = Stock.symbol.getter(v39);
  v42 = v41;
  v43 = *(_QWORD *)(v39 + 16);
  v95 = v32;
  if (v43 && (v44 = sub_10002D24C(v40, v41), (v45 & 1) != 0))
  {
    v47 = v102;
    v46 = v103;
    (*(void (**)(char *, unint64_t, uint64_t))(v102 + 16))(v38, *(_QWORD *)(v39 + 56) + *(_QWORD *)(v102 + 72) * v44, v103);
    v48 = 0;
  }
  else
  {
    v48 = 1;
    v47 = v102;
    v46 = v103;
  }
  v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
  v50 = 1;
  v49(v38, v48, 1, v46);
  swift_bridgeObjectRelease(v42);
  v51 = swift_bridgeObjectRelease(v39);
  v52 = StockPriceData.sparklines.getter(v51);
  v53 = Stock.symbol.getter(v52);
  v55 = v54;
  v56 = *(_QWORD *)(v52 + 16);
  v96 = v38;
  if (v56)
  {
    v57 = sub_10002D24C(v53, v54);
    if ((v58 & 1) != 0)
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 16))(v104, *(_QWORD *)(v52 + 56) + *(_QWORD *)(v19 + 72) * v57, v18);
      v50 = 0;
    }
  }
  v59 = v103;
  v60 = v104;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v104, v50, 1, v18);
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRelease(v52);
  sub_100007294(v60, (uint64_t)v27, &qword_100111EE0, (uint64_t (*)(uint64_t))&type metadata accessor for Chart);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v27, 1, v18) == 1)
  {
    v61 = type metadata accessor for PreparedSparkline(0);
    v62 = v99;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v99, 1, 1, v61);
    v64 = (uint64_t)v96;
    v63 = (uint64_t)v97;
  }
  else
  {
    v65 = v86;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v86, v27, v18);
    v66 = *(double *)&v85;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v85, v65, v18);
    v103 = v18;
    v67 = (uint64_t)v96;
    v68 = v84;
    sub_100007294((uint64_t)v96, v84, &qword_100111EE8, (uint64_t (*)(uint64_t))&type metadata accessor for Quote);
    v69 = v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v87, v105, v101);
    v70 = (uint64_t)v90;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v90, v91 + OBJC_IVAR____TtC12StocksWidget21TodayViewModelService_logger, v89);
    v62 = v99;
    v71 = v68;
    v64 = v67;
    sub_100067D80(v66, v71, v69, v70, v99, 0.02);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v65, v103);
    v63 = (uint64_t)v97;
  }
  v72 = v102;
  v73 = (uint64_t)v95;
  sub_100007294(v64, (uint64_t)v95, &qword_100111EE8, (uint64_t (*)(uint64_t))&type metadata accessor for Quote);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v73, 1, v59) == 1)
  {
    sub_1000072E0(v73, &qword_100111EE8, (uint64_t (*)(uint64_t))&type metadata accessor for Quote);
    v74 = type metadata accessor for WidgetQuote(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v63, 1, 1, v74);
  }
  else
  {
    v75 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v92, v73, v59);
    v76 = v94;
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v94, v75, v59);
    v77 = v93;
    WidgetQuote.init(from:)(v76);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v75, v59);
    v78 = type metadata accessor for WidgetQuote(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v77, 0, 1, v78);
    v79 = (uint64_t)v77;
    v62 = v99;
    sub_10000731C(v79, v63);
  }
  v80 = v98;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 16))(v98, v105, v101);
  v81 = type metadata accessor for WidgetStock(0);
  sub_100007294(v63, v80 + *(int *)(v81 + 20), &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  sub_100007294(v62, v80 + *(int *)(v81 + 24), (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  sub_1000072E0(v63, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  sub_1000072E0(v62, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  sub_1000072E0(v104, &qword_100111EE0, (uint64_t (*)(uint64_t))&type metadata accessor for Chart);
  return sub_1000072E0(v64, &qword_100111EE8, (uint64_t (*)(uint64_t))&type metadata accessor for Quote);
}

uint64_t sub_1000AD6B0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100007164(v0 + 2);
  sub_100007164(v0 + 7);
  sub_100007164(v0 + 12);
  v1 = (char *)v0 + OBJC_IVAR____TtC12StocksWidget21TodayViewModelService_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000AD718()
{
  return type metadata accessor for TodayViewModelService(0);
}

uint64_t type metadata accessor for TodayViewModelService(uint64_t a1)
{
  uint64_t result;

  result = qword_100117310;
  if (!qword_100117310)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TodayViewModelService);
  return result;
}

uint64_t sub_1000AD75C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "(";
  v4[1] = "(";
  v4[2] = "(";
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *sub_1000AD7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD v29[2];
  char *v30;
  char *v31;
  _QWORD *v32;

  sub_100007248(0, &qword_1001173B8, (uint64_t (*)(uint64_t))&type metadata accessor for Stock);
  __chkstk_darwin(v5);
  v7 = (char *)v29 - v6;
  v8 = type metadata accessor for Stock(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v31 = (char *)v29 - v13;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v29[1] = v2;
    swift_bridgeObjectRetain(a1);
    v29[0] = a1;
    v15 = (uint64_t *)(a1 + 40);
    v32 = _swiftEmptyArrayStorage;
    v30 = v11;
    while (1)
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v16 = *(v15 - 1);
        v17 = *v15;
        swift_bridgeObjectRetain(*v15);
        v18 = sub_10002D24C(v16, v17);
        if ((v19 & 1) != 0)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v7, *(_QWORD *)(a2 + 56) + *(_QWORD *)(v9 + 72) * v18, v8);
          v20 = 0;
        }
        else
        {
          v20 = 1;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v20, 1, v8);
        swift_bridgeObjectRelease(v17);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
        {
          v21 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
          v22 = v31;
          v21(v31, v7, v8);
          v21(v11, v22, v8);
          if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) != 0)
            v23 = (unint64_t)v32;
          else
            v23 = sub_1000733E4(0, v32[2] + 1, 1, (unint64_t)v32);
          v25 = *(_QWORD *)(v23 + 16);
          v24 = *(_QWORD *)(v23 + 24);
          if (v25 >= v24 >> 1)
            v23 = sub_1000733E4(v24 > 1, v25 + 1, 1, v23);
          *(_QWORD *)(v23 + 16) = v25 + 1;
          v26 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
          v32 = (_QWORD *)v23;
          v27 = v23 + v26 + *(_QWORD *)(v9 + 72) * v25;
          v11 = v30;
          v21((char *)v27, v30, v8);
          goto LABEL_5;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
      }
      sub_1000072E0((uint64_t)v7, &qword_1001173B8, (uint64_t (*)(uint64_t))&type metadata accessor for Stock);
LABEL_5:
      v15 += 2;
      if (!--v14)
      {
        swift_bridgeObjectRelease(v29[0]);
        return v32;
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000ADA90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;

  return sub_1000ACF74(a1, *(_QWORD *)(v3 + 24), a2, a3);
}

uint64_t storeEnumTagSinglePayload for Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000ADAEC + 4 * byte_1000E2180[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000ADB0C + 4 * byte_1000E2185[v4]))();
}

_BYTE *sub_1000ADAEC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000ADB0C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000ADB14(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000ADB1C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000ADB24(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000ADB2C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Errors()
{
  return &type metadata for Errors;
}

unint64_t sub_1000ADB4C()
{
  unint64_t result;

  result = qword_1001173C0;
  if (!qword_1001173C0)
  {
    result = swift_getWitnessTable(&unk_1000E2258, &type metadata for Errors);
    atomic_store(result, (unint64_t *)&qword_1001173C0);
  }
  return result;
}

uint64_t sub_1000ADB90()
{
  return LocalizedStringResource.init(stringLiteral:)(0xD00000000000002BLL, 0x80000001000E6F50);
}

uint64_t sub_1000ADBAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for BilingualFeedManager();
  v1 = swift_allocObject(v0, 24, 7);
  v2 = static Settings.News.bilingualFeedEnabled.getter();
  sub_1000035F0();
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  result = SettingProperty.init(_:)(v2);
  *(_QWORD *)(v1 + 16) = result;
  static BilingualFeedManager.shared = v1;
  return result;
}

uint64_t *BilingualFeedManager.shared.unsafeMutableAddressor()
{
  if (qword_100111548 != -1)
    swift_once(&qword_100111548, sub_1000ADBAC);
  return &static BilingualFeedManager.shared;
}

uint64_t static BilingualFeedManager.shared.getter()
{
  _BYTE v1[24];

  if (qword_100111548 != -1)
    swift_once(&qword_100111548, sub_1000ADBAC);
  swift_beginAccess(&static BilingualFeedManager.shared, v1, 0, 0);
  return swift_retain(static BilingualFeedManager.shared);
}

uint64_t static BilingualFeedManager.shared.setter(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  if (qword_100111548 != -1)
    swift_once(&qword_100111548, sub_1000ADBAC);
  swift_beginAccess(&static BilingualFeedManager.shared, v4, 1, 0);
  v2 = static BilingualFeedManager.shared;
  static BilingualFeedManager.shared = a1;
  return swift_release(v2);
}

uint64_t (*static BilingualFeedManager.shared.modify(uint64_t a1))(_QWORD)
{
  if (qword_100111548 != -1)
    swift_once(&qword_100111548, sub_1000ADBAC);
  swift_beginAccess(&static BilingualFeedManager.shared, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000ADDA0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  int v34;
  _BYTE *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char *v44;
  char *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[24];

  v0 = type metadata accessor for Locale.LanguageCode(0);
  v49 = *(_QWORD *)(v0 - 8);
  v50 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v44 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B06A0(0);
  v47 = v3;
  __chkstk_darwin(v3);
  v48 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007248(0, &qword_100112AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.LanguageCode);
  __chkstk_darwin(v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - v9;
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v44 - v13;
  v15 = type metadata accessor for Locale.Language(0, v12);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Locale(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *v22;
  if (v25 == 2)
  {
    v44 = v2;
    v45 = v7;
    v46 = v22;
    v26 = static Locale.current.getter(v21);
    Locale.language.getter(v26);
    v27 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v19);
    Locale.Language.languageCode.getter(v27);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    Locale.LanguageCode.init(stringLiteral:)(29286, 0xE200000000000000);
    v28 = v49;
    v29 = v50;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v10, 0, 1, v50);
    v30 = v48;
    v31 = v48 + *(int *)(v47 + 48);
    sub_100007294((uint64_t)v14, v48, &qword_100112AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.LanguageCode);
    sub_100007294((uint64_t)v10, v31, &qword_100112AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.LanguageCode);
    v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
    v33 = (uint64_t)v10;
    if (v32(v30, 1, v29) == 1)
    {
      sub_1000B0710((uint64_t)v10);
      sub_1000B0710((uint64_t)v14);
      v34 = v32(v31, 1, v29);
      v35 = v46;
      if (v34 == 1)
      {
        sub_1000B0710(v30);
        v36 = 1;
LABEL_10:
        swift_beginAccess(v35, v51, 1, 0);
        *v35 = v36 & 1;
        return v36 & 1;
      }
    }
    else
    {
      v37 = v28;
      v38 = (uint64_t)v45;
      sub_100007294(v30, (uint64_t)v45, &qword_100112AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.LanguageCode);
      v39 = v32(v31, 1, v29);
      v35 = v46;
      if (v39 != 1)
      {
        v40 = v44;
        (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v44, v31, v29);
        v41 = sub_10007ECBC(&qword_100117620, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.LanguageCode, (uint64_t)&protocol conformance descriptor for Locale.LanguageCode);
        v36 = dispatch thunk of static Equatable.== infix(_:_:)(v38, v40, v29, v41);
        v42 = *(void (**)(char *, uint64_t))(v37 + 8);
        v42(v40, v29);
        sub_1000B0710(v33);
        sub_1000B0710((uint64_t)v14);
        v42((char *)v38, v29);
        sub_1000B0710(v30);
        goto LABEL_10;
      }
      sub_1000B0710((uint64_t)v10);
      sub_1000B0710((uint64_t)v14);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v29);
    }
    sub_1000B075C(v30);
    v36 = 0;
    goto LABEL_10;
  }
  v36 = v25 & 1;
  return v36 & 1;
}

uint64_t BilingualFeedManager.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t sub_1000AE1A4(uint64_t a1, uint64_t a2)
{
  return sub_10007ECBC(&qword_1001173E8, a2, (uint64_t (*)(uint64_t))type metadata accessor for BilingualFeedManager, (uint64_t)&protocol conformance descriptor for BilingualFeedManager);
}

uint64_t type metadata accessor for BilingualFeedManager()
{
  return objc_opt_self(_TtC12StocksWidget20BilingualFeedManager);
}

unint64_t sub_1000AE1F4()
{
  unint64_t result;

  result = qword_1001173F0;
  if (!qword_1001173F0)
  {
    result = swift_getWitnessTable(&unk_1000E23BC, &type metadata for BilingualFeedSettingEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1001173F0);
  }
  return result;
}

uint64_t sub_1000AE238()
{
  return sub_10007ECBC(&qword_1001173F8, 255, (uint64_t (*)(uint64_t))sub_1000AE268, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

void sub_1000AE268(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[6];

  if (!qword_100117400)
  {
    sub_1000AE320(255);
    v5[0] = &type metadata for BilingualFeedSettingEntity;
    v5[1] = v2;
    v5[2] = &type metadata for BilingualFeedSettingEntity.UpdateIntent_value;
    v5[3] = sub_1000AE398();
    v5[4] = sub_10007ECBC(&qword_100117418, 255, (uint64_t (*)(uint64_t))sub_1000AE320, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
    v5[5] = sub_1000AE3DC();
    v3 = type metadata accessor for _IntentUpdatableEntityProperty(a1, v5);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100117400);
  }
}

void sub_1000AE320(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_100117408)
  {
    v4[0] = &type metadata for BilingualFeedSettingEntity;
    v4[1] = &type metadata for Bool;
    v4[2] = sub_1000AE398();
    v4[3] = sub_10000F9C4();
    v2 = type metadata accessor for _EntityDeferredPropertyValue(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_100117408);
  }
}

unint64_t sub_1000AE398()
{
  unint64_t result;

  result = qword_100117410;
  if (!qword_100117410)
  {
    result = swift_getWitnessTable(&unk_1000E2490, &type metadata for BilingualFeedSettingEntity);
    atomic_store(result, (unint64_t *)&qword_100117410);
  }
  return result;
}

unint64_t sub_1000AE3DC()
{
  unint64_t result;

  result = qword_100117420;
  if (!qword_100117420)
  {
    result = swift_getWitnessTable(&unk_1000E234C, &type metadata for BilingualFeedSettingEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100117420);
  }
  return result;
}

uint64_t sub_1000AE420()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_100012608(0, &qword_100117460, (uint64_t (*)(void))sub_1000AF2E8, (uint64_t)&type metadata for BilingualFeedSettingEntity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _UniqueEntityProvider);
  v1 = v0;
  sub_10001253C(v0, qword_100126980);
  sub_100012524(v1, (uint64_t)qword_100126980);
  v2 = sub_1000AF2E8();
  return _UniqueEntityProvider.init(_:)(&unk_1001175F0, 0, &type metadata for BilingualFeedSettingEntity, v2);
}

uint64_t sub_1000AE4B0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[5] = a1;
  v2 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  v1[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for String.LocalizationValue(0);
  v1[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource(0);
  v1[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000AE570, 0, 0);
}

uint64_t sub_1000AE570()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (qword_100111548 != -1)
    swift_once(&qword_100111548, sub_1000ADBAC);
  swift_beginAccess(&static BilingualFeedManager.shared, v0 + 16, 0, 0);
  v1 = static BilingualFeedManager.shared;
  swift_retain(static BilingualFeedManager.shared);
  v2 = sub_1000AFEA4();
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  if ((v2 & 1) != 0)
  {
    v7 = *(_QWORD *)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 56);
    v9 = *(_QWORD **)(v0 + 40);
    swift_release(v1);
    sub_1000AE268(0);
    v10 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x80000001000E6E00);
    static Locale.current.getter(v10);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v7);
    LocalizedStringResource.init(_:table:locale:bundle:comment:)(v3, 0, 0, v6, v5, "Title of the value of the bilingual feed Settings entity", 56, 2);
    v11 = sub_10007ECBC(&qword_100117610, 255, (uint64_t (*)(uint64_t))sub_1000AE320, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
    v12 = _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v4, &unk_100117600, 0, &unk_100117608, 0, &type metadata for BilingualFeedSettingEntity.UpdateIntent_value, v11);
    *v9 = 0xD00000000000001ALL;
    v9[1] = 0x80000001000E2940;
    v9[2] = v12;
  }
  else
  {
    v13 = sub_1000B065C();
    v14 = swift_allocError(&type metadata for BilingualFeedManager.Error, v13, 0, 0);
    swift_willThrow(v14);
    swift_release(v1);
  }
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AE798()
{
  uint64_t v0;

  v0 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10001253C(v0, qword_100126998);
  sub_100012524(v0, (uint64_t)qword_100126998);
  return TypeDisplayRepresentation.init(stringLiteral:)(0xD000000000000014, 0x80000001000E6E00);
}

uint64_t sub_1000AE7F8(uint64_t a1)
{
  return sub_10000FF4C(a1, qword_1001269B0, 0xD00000000000001BLL, 0x80000001000E6F30);
}

uint64_t sub_1000AE81C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100007248(0, &qword_1001124B0, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
  v1 = v0;
  sub_10001253C(v0, qword_1001269C8);
  v2 = sub_100012524(v1, (uint64_t)qword_1001269C8);
  IntentDescription.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001000E6EF0);
  v3 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 0, 1, v3);
}

uint64_t sub_1000AE8B0()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1000E2998);
  qword_1001269E0 = result;
  return result;
}

uint64_t sub_1000AE8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3[21] = a2;
  v3[22] = a3;
  v3[20] = a1;
  sub_100007248(0, &qword_100112480, (uint64_t (*)(uint64_t))&type metadata accessor for _GeneratedContentFallback);
  v3[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007248(0, &qword_100112488, (uint64_t (*)(uint64_t))&type metadata accessor for _GeneratedContentOptions);
  v3[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B0798(0);
  v3[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IntentDialog(0);
  v3[26] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[27] = v8;
  v3[28] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012608(0, &qword_100117638, (uint64_t (*)(void))sub_1000AF7B4, (uint64_t)&type metadata for BilingualFeedSettingEntity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IntentDialog._CapturedContent);
  v3[29] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[30] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[31] = swift_task_alloc(v11);
  v3[32] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000AEA10, 0, 0);
}

uint64_t sub_1000AEA10()
{
  uint64_t v0;
  __int128 v1;
  _QWORD *v2;
  unint64_t v3;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 48) = v1;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to IntentDialog._CapturedContent.init<>(entity:_:)[1]);
  *(_QWORD *)(v0 + 264) = v2;
  v3 = sub_1000AE398();
  *v2 = v0;
  v2[1] = sub_1000AEAA0;
  return IntentDialog._CapturedContent.init<>(entity:_:)(*(_QWORD *)(v0 + 256), v0 + 40, sub_1000AEE70, 0, &type metadata for BilingualFeedSettingEntity, v3);
}

uint64_t sub_1000AEAA0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 264));
  return swift_task_switch(sub_1000AEAF4, 0, 0);
}

uint64_t sub_1000AEAF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 272) = v1;
  *(_QWORD *)(v0 + 280) = v2;
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)(v0 + 104) = v2;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 313));
  *(_BYTE *)(v0 + 312) = *(_BYTE *)(v0 + 313);
  if (qword_100111570 != -1)
    swift_once(&qword_100111570, sub_1000AE8B0);
  v3 = qword_1001269E0;
  *(_QWORD *)(v0 + 288) = qword_1001269E0;
  v4 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v3);
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 296) = v5;
  v6 = sub_10007ECBC(&qword_100117610, 255, (uint64_t (*)(uint64_t))sub_1000AE320, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v5 = v0;
  v5[1] = sub_1000AEBFC;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 312, v3, &type metadata for Bool, v6);
}

uint64_t sub_1000AEBFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  swift_release(v4);
  swift_bridgeObjectRelease(v5);
  if (v0)
    v6 = sub_100010600;
  else
    v6 = sub_1000AEC84;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000AEC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 232);
  v13 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 216);
  v16 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  v14 = *(_QWORD *)(v0 + 224);
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 136));
  v6 = *(_OWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 112) = *(_QWORD *)(v0 + 136);
  *(_OWORD *)(v0 + 120) = v6;
  v7 = type metadata accessor for _GeneratedContentOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  v8 = type metadata accessor for _GeneratedContentFallback(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
  v9 = sub_1000AE1F4();
  v10 = sub_1000AF7B4();
  IntentDialog._GeneratedDialogContent.init(fromResult:options:fallbackDialog:)(sub_1000AEE70, 0, v5, v4, &type metadata for BilingualFeedSettingEntity.UpdateIntent_value, &type metadata for BilingualFeedSettingEntity, v9, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v13, v12);
  IntentDialog.init<A, B>(from:capturedContent:)(v3, v1, &type metadata for BilingualFeedSettingEntity.UpdateIntent_value, &type metadata for BilingualFeedSettingEntity, v9, v10);
  static IntentResult.result<A>(value:dialog:)(v0 + 112, v14, &type metadata for BilingualFeedSettingEntity, v10);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v13, v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v1);
  swift_task_dealloc(v14);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AEE74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  sub_100012608(0, &qword_100117640, (uint64_t (*)(void))sub_1000AF7B4, (uint64_t)&type metadata for BilingualFeedSettingEntity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _NLGRepresentationEntity);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v4 = (char *)&v10 - v3;
  if (qword_100111570 != -1)
    swift_once(&qword_100111570, sub_1000AE8B0);
  v5 = qword_1001269E0;
  v6 = swift_retain(qword_1001269E0);
  static _DialogBuilderEntity.buildExpression<A, B>(_:)(v6);
  swift_release(v5);
  v7 = sub_1000AF7B4();
  v8 = sub_1000AF898(&qword_100117648, &qword_100117640, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _NLGRepresentationEntity, (uint64_t)&protocol conformance descriptor for _NLGRepresentationEntity<A>);
  static _DialogBuilderEntity.buildBlock<A>(_:)(v4, &type metadata for BilingualFeedSettingEntity, v1, v7, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_1000AEF9C()
{
  if (qword_100111570 != -1)
    swift_once(&qword_100111570, sub_1000AE8B0);
  return swift_retain(qword_1001269E0);
}

unint64_t sub_1000AEFE0()
{
  unint64_t result;

  result = qword_100117428;
  if (!qword_100117428)
  {
    result = swift_getWitnessTable(&unk_1000E244C, &type metadata for BilingualFeedSettingEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100117428);
  }
  return result;
}

unint64_t sub_1000AF028()
{
  unint64_t result;

  result = qword_100117430;
  if (!qword_100117430)
  {
    result = swift_getWitnessTable(&unk_1000E2474, &type metadata for BilingualFeedSettingEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100117430);
  }
  return result;
}

uint64_t sub_1000AF06C(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000E9C38, 1) + 8);
}

uint64_t sub_1000AF090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000115C8(a1, a2, a3, (uint64_t (*)(void))sub_1000AE1F4);
}

uint64_t sub_1000AF09C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000110B0(&qword_100111560, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001269B0, (uint64_t)sub_1000AE7F8, a1);
}

uint64_t sub_1000AF0C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100111568 != -1)
    swift_once(&qword_100111568, sub_1000AE81C);
  sub_100007248(0, &qword_1001124B0, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
  v3 = sub_100012524(v2, (uint64_t)qword_1001269C8);
  return sub_100007294(v3, a1, &qword_1001124B0, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
}

uint64_t sub_1000AF148(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_10011762C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10000E914;
  return sub_1000AE8D4(a1, v5, v4);
}

uint64_t sub_1000AF1AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000AFFB4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_1000AF1D0()
{
  return 0xD00000000000002BLL;
}

unint64_t sub_1000AF1F0()
{
  unint64_t result;

  result = qword_100117440;
  if (!qword_100117440)
  {
    result = swift_getWitnessTable(&unk_1000E2518, &type metadata for BilingualFeedSettingEntity);
    atomic_store(result, (unint64_t *)&qword_100117440);
  }
  return result;
}

unint64_t sub_1000AF238()
{
  unint64_t result;

  result = qword_100117448;
  if (!qword_100117448)
  {
    result = swift_getWitnessTable(&unk_1000E2550, &type metadata for BilingualFeedSettingEntity);
    atomic_store(result, (unint64_t *)&qword_100117448);
  }
  return result;
}

unint64_t sub_1000AF280()
{
  unint64_t result;

  result = qword_100117450;
  if (!qword_100117450)
  {
    result = swift_getWitnessTable(&unk_1000E2580, &type metadata for BilingualFeedSettingEntity);
    atomic_store(result, (unint64_t *)&qword_100117450);
  }
  return result;
}

uint64_t sub_1000AF2C4()
{
  return sub_1000AF6C0(&qword_100117458, (uint64_t)&protocol conformance descriptor for _UniqueEntityProvider<A>);
}

unint64_t sub_1000AF2E8()
{
  unint64_t result;

  result = qword_100117468;
  if (!qword_100117468)
  {
    result = swift_getWitnessTable(&unk_1000E24E8, &type metadata for BilingualFeedSettingEntity);
    atomic_store(result, (unint64_t *)&qword_100117468);
  }
  return result;
}

uint64_t sub_1000AF32C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch(sub_1000AF344, 0, 0);
}

uint64_t sub_1000AF344()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (qword_100111548 != -1)
    swift_once(&qword_100111548, sub_1000ADBAC);
  swift_beginAccess(&static BilingualFeedManager.shared, v0 + 16, 0, 0);
  v1 = static BilingualFeedManager.shared;
  swift_retain(static BilingualFeedManager.shared);
  if ((sub_1000AFEA4() & 1) != 0)
  {
    v2 = *(_BYTE **)(v0 + 40);
    swift_release(v1);
    v3 = static BilingualFeedManager.shared;
    v4 = *(_QWORD *)(static BilingualFeedManager.shared + 16);
    swift_retain(static BilingualFeedManager.shared);
    v5 = swift_retain(v4);
    SettingProperty.wrappedValue.getter(v5);
    swift_release(v4);
    swift_release(v3);
    *v2 = *(_BYTE *)(v0 + 48);
  }
  else
  {
    v6 = sub_1000B065C();
    v7 = swift_allocError(&type metadata for BilingualFeedManager.Error, v6, 0, 0);
    swift_willThrow(v7);
    swift_release(v1);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AF464(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 41) = *a2;
  return swift_task_switch(sub_1000AF480, 0, 0);
}

uint64_t sub_1000AF480()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  unint64_t v7;
  uint64_t v8;

  if (qword_100111548 != -1)
    swift_once(&qword_100111548, sub_1000ADBAC);
  swift_beginAccess(&static BilingualFeedManager.shared, v0 + 16, 0, 0);
  v1 = static BilingualFeedManager.shared;
  swift_retain(static BilingualFeedManager.shared);
  if ((sub_1000AFEA4() & 1) != 0)
  {
    v2 = *(_BYTE *)(v0 + 41);
    swift_release(v1);
    v3 = static BilingualFeedManager.shared;
    v4 = *(_QWORD *)(static BilingualFeedManager.shared + 16);
    *(_BYTE *)(v0 + 40) = v2;
    swift_retain(v3);
    swift_retain(v4);
    SettingProperty.wrappedValue.setter(v0 + 40);
    swift_release(v4);
    swift_release(v3);
    v5 = objc_msgSend((id)objc_opt_self(NSDistributedNotificationCenter), "defaultCenter");
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, "postNotificationName:object:userInfo:options:", v6, 0, 0, 1);

  }
  else
  {
    v7 = sub_1000B065C();
    v8 = swift_allocError(&type metadata for BilingualFeedManager.Error, v7, 0, 0);
    swift_willThrow(v8);
    swift_release(v1);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AF608@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_100111550 != -1)
    swift_once(&qword_100111550, sub_1000AE420);
  sub_100012608(0, &qword_100117460, (uint64_t (*)(void))sub_1000AF2E8, (uint64_t)&type metadata for BilingualFeedSettingEntity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _UniqueEntityProvider);
  v3 = v2;
  v4 = sub_100012524(v2, (uint64_t)qword_100126980);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

uint64_t sub_1000AF69C()
{
  return sub_1000AF6C0(&qword_100117470, (uint64_t)&protocol conformance descriptor for _UniqueEntityProvider<A>);
}

uint64_t sub_1000AF6C0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_100012608(255, &qword_100117460, (uint64_t (*)(void))sub_1000AF2E8, (uint64_t)&type metadata for BilingualFeedSettingEntity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _UniqueEntityProvider);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000AF724()
{
  unint64_t result;

  result = qword_100117478;
  if (!qword_100117478)
  {
    result = swift_getWitnessTable(&unk_1000E25B8, &type metadata for BilingualFeedSettingEntity);
    atomic_store(result, (unint64_t *)&qword_100117478);
  }
  return result;
}

unint64_t sub_1000AF76C()
{
  unint64_t result;

  result = qword_100117480;
  if (!qword_100117480)
  {
    result = swift_getWitnessTable(&unk_1000E25E0, &type metadata for BilingualFeedSettingEntity);
    atomic_store(result, (unint64_t *)&qword_100117480);
  }
  return result;
}

unint64_t sub_1000AF7B4()
{
  unint64_t result;

  result = qword_100117488;
  if (!qword_100117488)
  {
    result = swift_getWitnessTable(&unk_1000E2608, &type metadata for BilingualFeedSettingEntity);
    atomic_store(result, (unint64_t *)&qword_100117488);
  }
  return result;
}

unint64_t sub_1000AF7FC()
{
  unint64_t result;

  result = qword_100117490;
  if (!qword_100117490)
  {
    result = swift_getWitnessTable(&unk_1000E2660, &type metadata for BilingualFeedSettingEntity);
    atomic_store(result, (unint64_t *)&qword_100117490);
  }
  return result;
}

uint64_t sub_1000AF840@<X0>(uint64_t a1@<X8>)
{
  return sub_1000110B0(&qword_100111558, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100126998, (uint64_t)sub_1000AE798, a1);
}

uint64_t sub_1000AF864()
{
  return sub_1000AF898(&qword_100117498, &qword_1001174A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for EmptyResolverSpecification, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_1000AF898(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_100012608(255, a2, (uint64_t (*)(void))sub_1000AF7B4, (uint64_t)&type metadata for BilingualFeedSettingEntity, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000AF8EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AE398();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000AF928()
{
  unint64_t result;

  result = qword_1001174A8;
  if (!qword_1001174A8)
  {
    result = swift_getWitnessTable(&unk_1000E2690, &type metadata for BilingualFeedSettingEntity);
    atomic_store(result, (unint64_t *)&qword_1001174A8);
  }
  return result;
}

uint64_t sub_1000AF96C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AF7FC();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_1000AF9A4()
{
  uint64_t v0;

  v0 = qword_1001173C8;
  swift_bridgeObjectRetain(off_1001173D0);
  return v0;
}

unint64_t sub_1000AF9DC()
{
  unint64_t result;

  result = qword_1001174B0;
  if (!qword_1001174B0)
  {
    result = swift_getWitnessTable(&unk_1000E2720, &type metadata for BilingualFeedSettingEntity);
    atomic_store(result, (unint64_t *)&qword_1001174B0);
  }
  return result;
}

uint64_t sub_1000AFA20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AE398();
  return _EntityURLRepresentation.init(stringLiteral:)(0xD00000000000004DLL, 0x80000001000E6DB0, a1, v2);
}

uint64_t sub_1000AFA68(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1000B0618();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_10001257C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_1000AFAB4()
{
  unint64_t result;

  result = qword_1001174C0;
  if (!qword_1001174C0)
  {
    result = swift_getWitnessTable(&unk_1000E2818, &type metadata for OpenBilingualFeedSettingIntent);
    atomic_store(result, (unint64_t *)&qword_1001174C0);
  }
  return result;
}

uint64_t sub_1000AFAF8(uint64_t a1)
{
  return sub_10000FF4C(a1, qword_1001269E8, 0xD000000000000021, 0x80000001000E6D80);
}

unint64_t sub_1000AFB20()
{
  unint64_t result;

  result = qword_1001174C8;
  if (!qword_1001174C8)
  {
    result = swift_getWitnessTable(&unk_1000E2840, &type metadata for OpenBilingualFeedSettingIntent);
    atomic_store(result, (unint64_t *)&qword_1001174C8);
  }
  return result;
}

uint64_t sub_1000AFB64(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_1000B0590();
  v5 = sub_1000B0618();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_1000AFBB8()
{
  uint64_t v0;

  v0 = qword_1001173D8;
  swift_bridgeObjectRetain(off_1001173E0);
  return v0;
}

unint64_t sub_1000AFBF0()
{
  unint64_t result;

  result = qword_1001174D0;
  if (!qword_1001174D0)
  {
    result = swift_getWitnessTable(&unk_1000E28D0, &type metadata for OpenBilingualFeedSettingIntent);
    atomic_store(result, (unint64_t *)&qword_1001174D0);
  }
  return result;
}

unint64_t sub_1000AFC38()
{
  unint64_t result;

  result = qword_1001174D8;
  if (!qword_1001174D8)
  {
    result = swift_getWitnessTable(&unk_1000E28F8, &type metadata for OpenBilingualFeedSettingIntent);
    atomic_store(result, (unint64_t *)&qword_1001174D8);
  }
  return result;
}

uint64_t sub_1000AFC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000115C8(a1, a2, a3, (uint64_t (*)(void))sub_1000AFB20);
}

uint64_t sub_1000AFC88@<X0>(uint64_t a1@<X8>)
{
  return sub_1000110B0(&qword_100111578, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001269E8, (uint64_t)sub_1000AFAF8, a1);
}

uint64_t sub_1000AFCAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000B0590();
  v7 = sub_1000B05D4();
  v8 = sub_1000B0618();
  *v5 = v2;
  v5[1] = sub_1000116CC;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_1000AFD38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000B0330();
  *a1 = result;
  return result;
}

uint64_t sub_1000AFD5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AFB20();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenBilingualFeedSettingIntent()
{
  return &type metadata for OpenBilingualFeedSettingIntent;
}

ValueMetadata *type metadata accessor for BilingualFeedSettingEntity()
{
  return &type metadata for BilingualFeedSettingEntity;
}

ValueMetadata *type metadata accessor for BilingualFeedSettingEntity.UpdateIntent_value()
{
  return &type metadata for BilingualFeedSettingEntity.UpdateIntent_value;
}

uint64_t sub_1000AFDB4()
{
  return sub_10007ECBC(&qword_1001175B8, 255, (uint64_t (*)(uint64_t))sub_1000AFDE4, (uint64_t)&protocol conformance descriptor for <> IntentResultContainer<A, B, C, D>);
}

void sub_1000AFDE4(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  if (!qword_1001175C0)
  {
    v4[0] = &type metadata for BilingualFeedSettingEntity;
    v4[1] = &type metadata for Never;
    v4[2] = &type metadata for Never;
    v4[3] = type metadata accessor for IntentDialog(255);
    v4[4] = sub_1000AF7B4();
    v4[5] = sub_100011BC4();
    v2 = type metadata accessor for IntentResultContainer(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1001175C0);
  }
}

uint64_t sub_1000AFE74()
{
  return sub_10007ECBC(&qword_1001175C8, 255, (uint64_t (*)(uint64_t))sub_1000AFDE4, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_1000AFEA4()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;
  uint64_t v11;

  v0 = objc_msgSend((id)objc_opt_self(FCAppleAccount), "sharedAccount");
  v1 = objc_msgSend(v0, "contentStoreFrontID");

  if (!v1)
  {
    static Account.StorefrontID.ca.getter();
    v7 = v11;
    goto LABEL_10;
  }
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  v5 = static Account.StorefrontID.ca.getter();
  v7 = v6;
  if (!v4)
  {
LABEL_10:
    swift_bridgeObjectRelease(v7);
    v10 = 0;
    return v10 & 1;
  }
  if (v2 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(v4, 2);
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v7);
    v10 = 0;
    if ((v9 & 1) == 0)
      return v10 & 1;
  }
  v10 = sub_1000ADDA0();
  return v10 & 1;
}

uint64_t sub_1000AFFB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  _QWORD v34[3];

  sub_100007248(0, &qword_100112468, (uint64_t (*)(uint64_t))&type metadata accessor for Bool.IntentDisplayName);
  __chkstk_darwin(v0);
  v33 = (char *)&v27 - v1;
  v2 = type metadata accessor for InputConnectionBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v32 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007248(0, &qword_100112410, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDialog);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - v9;
  sub_100007248(0, &qword_100112418, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - v12;
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  v31 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012608(0, &qword_1001175D0, (uint64_t (*)(void))sub_1000AF7B4, (uint64_t)&type metadata for BilingualFeedSettingEntity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IntentParameter);
  v28 = v18;
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001000E6E90);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v30(v13, 1, 1, v14);
  v19 = type metadata accessor for IntentDialog(0);
  memset(v34, 0, sizeof(v34));
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v20(v10, 1, 1, v19);
  v20(v7, 1, 1, v19);
  v21 = enum case for InputConnectionBehavior.default(_:);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v22 = v32;
  v29(v32, enum case for InputConnectionBehavior.default(_:), v2);
  v23 = sub_1000AE398();
  v28 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v17, v13, v34, v10, v7, v22, v23);
  sub_100012608(0, &qword_100112470, (uint64_t (*)(void))sub_10000F9C4, (uint64_t)&type metadata for Bool, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IntentParameter);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000036, 0x80000001000E6EB0);
  v30(v13, 1, 1, v31);
  LOBYTE(v34[0]) = 2;
  v24 = type metadata accessor for Bool.IntentDisplayName(0);
  v25 = v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v33, 1, 1, v24);
  v20(v10, 1, 1, v19);
  v29(v22, v21, v2);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v17, v13, v34, v25, v10, v22);
  return v28;
}

uint64_t sub_1000B0330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  _QWORD v22[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v22[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007248(0, &qword_100112410, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDialog);
  __chkstk_darwin(v4);
  v6 = (char *)&v22[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v22[-1] - v8;
  sub_100007248(0, &qword_100112418, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v10);
  v12 = (char *)&v22[-1] - v11;
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v22[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012608(0, &qword_1001175D0, (uint64_t (*)(void))sub_1000AF7B4, (uint64_t)&type metadata for BilingualFeedSettingEntity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IntentParameter);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001CLL, 0x80000001000E6D60);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000014, 0x80000001000E5170);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  v17 = type metadata accessor for IntentDialog(0);
  memset(v22, 0, sizeof(v22));
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v6, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_1000AE398();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v16, v12, v22, v9, v6, v3, v19);
}

unint64_t sub_1000B0590()
{
  unint64_t result;

  result = qword_1001175D8;
  if (!qword_1001175D8)
  {
    result = swift_getWitnessTable(&unk_1000E2748, &type metadata for OpenBilingualFeedSettingIntent);
    atomic_store(result, (unint64_t *)&qword_1001175D8);
  }
  return result;
}

unint64_t sub_1000B05D4()
{
  unint64_t result;

  result = qword_1001175E0;
  if (!qword_1001175E0)
  {
    result = swift_getWitnessTable(&unk_1000E2798, &type metadata for OpenBilingualFeedSettingIntent);
    atomic_store(result, (unint64_t *)&qword_1001175E0);
  }
  return result;
}

unint64_t sub_1000B0618()
{
  unint64_t result;

  result = qword_1001175E8;
  if (!qword_1001175E8)
  {
    result = swift_getWitnessTable(&unk_1000E26E8, &type metadata for BilingualFeedSettingEntity);
    atomic_store(result, (unint64_t *)&qword_1001175E8);
  }
  return result;
}

unint64_t sub_1000B065C()
{
  unint64_t result;

  result = qword_1001175F8;
  if (!qword_1001175F8)
  {
    result = swift_getWitnessTable(&unk_1000E2A54, &type metadata for BilingualFeedManager.Error);
    atomic_store(result, (unint64_t *)&qword_1001175F8);
  }
  return result;
}

void sub_1000B06A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_100117618)
  {
    sub_100007248(255, &qword_100112AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.LanguageCode);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v2, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100117618);
  }
}

uint64_t sub_1000B0710(uint64_t a1)
{
  uint64_t v2;

  sub_100007248(0, &qword_100112AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.LanguageCode);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B075C(uint64_t a1)
{
  uint64_t v2;

  sub_1000B06A0(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000B0798(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_100117630)
  {
    v4[0] = &type metadata for BilingualFeedSettingEntity.UpdateIntent_value;
    v4[1] = &type metadata for BilingualFeedSettingEntity;
    v4[2] = sub_1000AE1F4();
    v4[3] = sub_1000AF7B4();
    v2 = type metadata accessor for IntentDialog._GeneratedDialogContent(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_100117630);
  }
}

uint64_t sub_1000B0810@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t storeEnumTagSinglePayload for BilingualFeedManager.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000B085C + 4 * byte_1000E22C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000B087C + 4 * byte_1000E22C5[v4]))();
}

_BYTE *sub_1000B085C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000B087C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000B0884(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000B088C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000B0894(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000B089C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BilingualFeedManager.Error()
{
  return &type metadata for BilingualFeedManager.Error;
}

unint64_t sub_1000B08BC()
{
  unint64_t result;

  result = qword_100117650;
  if (!qword_100117650)
  {
    result = swift_getWitnessTable(&unk_1000E2A2C, &type metadata for BilingualFeedManager.Error);
    atomic_store(result, (unint64_t *)&qword_100117650);
  }
  return result;
}

uint64_t sub_1000B0900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v0 = type metadata accessor for Container.Environment(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B0DB8(0, &qword_100117668, &qword_100117670, (uint64_t)&protocol descriptor for BundleAssemblyType);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1000DD060;
  v6 = type metadata accessor for Assembly(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = Assembly.init()();
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = sub_100003D3C(&qword_100117678, (uint64_t (*)(uint64_t))&type metadata accessor for Assembly, (uint64_t)&protocol conformance descriptor for Assembly);
  *(_QWORD *)(v5 + 32) = v7;
  v8 = (objc_class *)type metadata accessor for FrameworkAssembly(0);
  v9 = objc_msgSend(objc_allocWithZone(v8), "init");
  *(_QWORD *)(v5 + 96) = v8;
  *(_QWORD *)(v5 + 104) = &protocol witness table for FrameworkAssembly;
  *(_QWORD *)(v5 + 72) = v9;
  sub_1000B0DB8(0, &qword_100117680, &qword_100117688, (uint64_t)&protocol descriptor for AssemblyType);
  v11 = swift_allocObject(v10, 152, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1000DB8B0;
  v12 = type metadata accessor for StocksWidgetAssembly();
  v13 = swift_allocObject(v12, 16, 7);
  *(_QWORD *)(v11 + 56) = v12;
  *(_QWORD *)(v11 + 64) = sub_100003D3C(&qword_100117690, (uint64_t (*)(uint64_t))type metadata accessor for StocksWidgetAssembly, (uint64_t)&unk_1000DD6E8);
  *(_QWORD *)(v11 + 32) = v13;
  v14 = type metadata accessor for StocksCoreOverridesAssembly();
  v15 = swift_allocObject(v14, 16, 7);
  *(_QWORD *)(v11 + 96) = v14;
  *(_QWORD *)(v11 + 104) = sub_100003D3C(&qword_100117698, (uint64_t (*)(uint64_t))type metadata accessor for StocksCoreOverridesAssembly, (uint64_t)&unk_1000E0FCC);
  *(_QWORD *)(v11 + 72) = v15;
  v16 = type metadata accessor for PersonalizationAssembly();
  v17 = swift_allocObject(v16, 16, 7);
  *(_QWORD *)(v11 + 136) = v16;
  *(_QWORD *)(v11 + 144) = sub_100003D3C(&qword_1001176A0, (uint64_t (*)(uint64_t))type metadata accessor for PersonalizationAssembly, (uint64_t)&unk_1000DEE24);
  *(_QWORD *)(v11 + 112) = v17;
  v18 = type metadata accessor for SingletonPool(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = SingletonPool.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Container.Environment.normal(_:), v0);
  v20 = type metadata accessor for Container(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  result = Container.init(bundleAssemblies:assemblies:singletonPool:environment:)(v5, v11, v19, v3);
  qword_100126A00 = result;
  return result;
}

_QWORD *sub_1000B0BAC()
{
  if (qword_100111580 != -1)
    swift_once(&qword_100111580, sub_1000B0900);
  return Container.resolver.getter(qword_100126A08);
}

uint64_t sub_1000B0C00()
{
  uint64_t v0;

  sub_1000B0D4C();
  return TupleWidget.init(_:)(v0, v0);
}

uint64_t sub_1000B0C2C()
{
  uint64_t v0;
  _QWORD v2[5];

  type metadata accessor for AppDependencyManager(0);
  v0 = static AppDependencyManager.shared.getter();
  if (qword_100111588 != -1)
    swift_once(&qword_100111588, sub_1000B0BAC);
  sub_10001DB68((uint64_t)qword_100126A08, (uint64_t)v2);
  AppDependencyManager.addStocksDependencies(from:)(v2);
  swift_release(v0);
  return sub_100007164(v2);
}

int main(int argc, const char **argv, const char **envp)
{
  sub_1000B0CE8();
  static WidgetBundle.main()();
  return 0;
}

unint64_t sub_1000B0CE8()
{
  unint64_t result;

  result = qword_100117658;
  if (!qword_100117658)
  {
    result = swift_getWitnessTable(&unk_1000E2AB4, &type metadata for StocksWidgetBundle);
    atomic_store(result, (unint64_t *)&qword_100117658);
  }
  return result;
}

ValueMetadata *type metadata accessor for StocksWidgetBundle()
{
  return &type metadata for StocksWidgetBundle;
}

uint64_t sub_1000B0D3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9CB4, 1);
}

void sub_1000B0D4C()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_100117660)
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(0, &type metadata for OverviewWidget, &type metadata for DetailWidget, &type metadata for DetailChartWidget, 0, 0);
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100117660);
  }
}

void sub_1000B0DB8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_100003AE0(255, a3, a4);
    v7 = type metadata accessor for _ContiguousArrayStorage(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1000B0E0C()
{
  return sub_100003D3C(&qword_1001176A8, (uint64_t (*)(uint64_t))sub_1000B0E38, (uint64_t)&protocol conformance descriptor for TupleWidget<A>);
}

void sub_1000B0E38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001176B0)
  {
    sub_1000B0D4C();
    v3 = type metadata accessor for TupleWidget(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001176B0);
  }
}

uint64_t sub_1000B0E8C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  sub_10000EDE8(0, &qword_100112418, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - v1;
  v3 = type metadata accessor for LocalizedStringResource(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10001253C(v7, qword_100126A30);
  sub_100012524(v7, (uint64_t)qword_100126A30);
  LocalizedStringResource.init(stringLiteral:)(0x736B636F7453, 0xE600000000000000);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v6, v2);
}

unint64_t sub_1000B0FA4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  uint64_t v16;

  sub_10000EDE8(0, &qword_100112440, (uint64_t (*)(uint64_t))&type metadata accessor for DisplayRepresentation.Image, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v0);
  v2 = (char *)&v16 - v1;
  sub_10000EDE8(0, &qword_100112418, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v3);
  v5 = (char *)&v16 - v4;
  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100117780, (uint64_t (*)(uint64_t))sub_1000B2130, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v11 = v10;
  sub_1000B2130(0);
  v13 = swift_allocObject(v11, ((*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) | 7);
  *(_OWORD *)(v13 + 16) = xmmword_1000DB170;
  LocalizedStringResource.init(stringLiteral:)(0x736B636F7453, 0xE600000000000000);
  LocalizedStringResource.init(stringLiteral:)(1936748609, 0xE400000000000000);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  DisplayRepresentation.Image.init(appBundleIdentifier:)(0xD000000000000010, 0x80000001000E6FD0);
  v14 = type metadata accessor for DisplayRepresentation.Image(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v2, 0, 1, v14);
  DisplayRepresentation.init(title:subtitle:image:)(v9, v5, v2);
  result = sub_10002CC94(v13);
  qword_100126A48 = result;
  return result;
}

uint64_t sub_1000B11B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  sub_1000B2210(0, &qword_100117788, (uint64_t (*)(void))sub_10002DAF4, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for _EnumURLRepresentation);
  v1 = v0;
  sub_10001253C(v0, qword_100126A50);
  sub_100012524(v1, (uint64_t)qword_100126A50);
  sub_10000EDE8(0, &qword_100117790, (uint64_t (*)(uint64_t))sub_1000B2194, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v3 = v2;
  sub_1000B2194(0);
  v5 = swift_allocObject(v3, ((*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v4 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) | 7);
  *(_OWORD *)(v5 + 16) = xmmword_1000DB170;
  v6 = sub_10002DAF4();
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD00000000000003ELL, 0x80000001000E6FF0, &type metadata for StocksSettingsDeepLinks, v6);
  v7 = sub_10002CCB0(v5);
  return _EnumURLRepresentation.init(_:)(v7, &type metadata for StocksSettingsDeepLinks, v6);
}

unint64_t sub_1000B12D4()
{
  unint64_t result;

  result = qword_1001176C8;
  if (!qword_1001176C8)
  {
    result = swift_getWitnessTable(&unk_1000E2B0C, &type metadata for StocksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1001176C8);
  }
  return result;
}

Swift::Int sub_1000B1318()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 1953460082, 0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1000B1360(uint64_t a1)
{
  return String.hash(into:)(a1, 1953460082, 0xE400000000000000);
}

Swift::Int sub_1000B1370(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 1953460082, 0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1000B13B4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001039E0, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1000B1404(_QWORD *a1@<X8>)
{
  *a1 = 1953460082;
  a1[1] = 0xE400000000000000;
}

unint64_t sub_1000B1420()
{
  unint64_t result;

  result = qword_1001176D0;
  if (!qword_1001176D0)
  {
    result = swift_getWitnessTable(&unk_1000E2C24, &type metadata for StocksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1001176D0);
  }
  return result;
}

uint64_t sub_1000B1464@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1001115A0 != -1)
    swift_once(&qword_1001115A0, sub_1000B11B0);
  sub_1000B2210(0, &qword_100117788, (uint64_t (*)(void))sub_10002DAF4, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for _EnumURLRepresentation);
  v3 = v2;
  v4 = sub_100012524(v2, (uint64_t)qword_100126A50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

unint64_t sub_1000B14F0()
{
  unint64_t result;

  result = qword_1001176D8;
  if (!qword_1001176D8)
  {
    result = swift_getWitnessTable(&unk_1000E2C4C, &type metadata for StocksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1001176D8);
  }
  return result;
}

unint64_t sub_1000B1538()
{
  unint64_t result;

  result = qword_1001176E0;
  if (!qword_1001176E0)
  {
    result = swift_getWitnessTable(&unk_1000E2C84, &type metadata for StocksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1001176E0);
  }
  return result;
}

unint64_t sub_1000B1580()
{
  unint64_t result;

  result = qword_1001176E8;
  if (!qword_1001176E8)
  {
    result = swift_getWitnessTable(&unk_1000E2B74, &type metadata for StocksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1001176E8);
  }
  return result;
}

void *sub_1000B15C4()
{
  return &protocol witness table for String;
}

uint64_t sub_1000B15D0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1000B20EC();
  v4 = _URLRepresentableEnum.urlRepresentationParameter.getter(a1, v3);
  return sub_10001257C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_1000B161C()
{
  unint64_t result;

  result = qword_1001176F8;
  if (!qword_1001176F8)
  {
    result = swift_getWitnessTable(&unk_1000E2CB4, &type metadata for StocksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1001176F8);
  }
  return result;
}

unint64_t sub_1000B1664()
{
  unint64_t result;

  result = qword_100117700;
  if (!qword_100117700)
  {
    result = swift_getWitnessTable(&unk_1000E2CDC, &type metadata for StocksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100117700);
  }
  return result;
}

unint64_t sub_1000B16AC()
{
  unint64_t result;

  result = qword_100117708;
  if (!qword_100117708)
  {
    result = swift_getWitnessTable(&unk_1000E2D04, &type metadata for StocksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100117708);
  }
  return result;
}

unint64_t sub_1000B16F4()
{
  unint64_t result;

  result = qword_100117710;
  if (!qword_100117710)
  {
    result = swift_getWitnessTable(&unk_1000E2D5C, &type metadata for StocksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100117710);
  }
  return result;
}

uint64_t sub_1000B1738@<X0>(uint64_t a1@<X8>)
{
  return sub_1000110B0(&qword_100111590, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100126A30, (uint64_t)sub_1000B0E8C, a1);
}

uint64_t sub_1000B175C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B1C08(a1, a2, a3, (uint64_t (*)(void))sub_10002DAF4, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

uint64_t sub_1000B1770(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002DAF4();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000B17AC()
{
  unint64_t result;

  result = qword_100117718;
  if (!qword_100117718)
  {
    result = swift_getWitnessTable(&unk_1000E2D9C, &type metadata for StocksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100117718);
  }
  return result;
}

unint64_t sub_1000B17F4()
{
  unint64_t result;

  result = qword_100117720;
  if (!qword_100117720)
  {
    result = swift_getWitnessTable(&unk_1000E2DC4, &type metadata for StocksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100117720);
  }
  return result;
}

double sub_1000B183C()
{
  double result;

  if (qword_100111598 != -1)
    swift_once(&qword_100111598, sub_1000B0FA4);
  *(_QWORD *)&result = swift_bridgeObjectRetain(qword_100126A48).n128_u64[0];
  return result;
}

uint64_t sub_1000B187C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B16F4();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_1000B18B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117728;
  if (!qword_100117728)
  {
    sub_1000B1900();
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100117728);
  }
  return result;
}

void sub_1000B1900()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100117730)
  {
    v0 = type metadata accessor for Array(0, &type metadata for StocksSettingsDeepLinks);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100117730);
  }
}

void sub_1000B1954(_QWORD *a1@<X8>)
{
  *a1 = &off_100103A18;
}

unint64_t sub_1000B1968()
{
  unint64_t result;

  result = qword_100117738;
  if (!qword_100117738)
  {
    result = swift_getWitnessTable(&unk_1000E2ECC, &type metadata for OpenStocksSettingsDeepLinksIntent);
    atomic_store(result, (unint64_t *)&qword_100117738);
  }
  return result;
}

uint64_t sub_1000B19AC()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10001253C(v0, qword_100126A68);
  sub_100012524(v0, (uint64_t)qword_100126A68);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000014, 0x80000001000E6FB0);
}

_QWORD *sub_1000B1A0C@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_1000B1A2C(uint64_t a1)
{
  return IntentParameter.wrappedValue.setter(a1);
}

void (*sub_1000B1A4C(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_1000113DC;
}

unint64_t sub_1000B1A98()
{
  unint64_t result;

  result = qword_100117740;
  if (!qword_100117740)
  {
    result = swift_getWitnessTable(&unk_1000E2EF4, &type metadata for OpenStocksSettingsDeepLinksIntent);
    atomic_store(result, (unint64_t *)&qword_100117740);
  }
  return result;
}

uint64_t sub_1000B1ADC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_1000B2064();
  v5 = sub_1000B20EC();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_1000B1B30()
{
  uint64_t v0;

  v0 = qword_1001176B8;
  swift_bridgeObjectRetain(off_1001176C0);
  return v0;
}

unint64_t sub_1000B1B68()
{
  unint64_t result;

  result = qword_100117748;
  if (!qword_100117748)
  {
    result = swift_getWitnessTable(&unk_1000E2F84, &type metadata for OpenStocksSettingsDeepLinksIntent);
    atomic_store(result, (unint64_t *)&qword_100117748);
  }
  return result;
}

unint64_t sub_1000B1BB0()
{
  unint64_t result;

  result = qword_100117750;
  if (!qword_100117750)
  {
    result = swift_getWitnessTable(&unk_1000E2FAC, &type metadata for OpenStocksSettingsDeepLinksIntent);
    atomic_store(result, (unint64_t *)&qword_100117750);
  }
  return result;
}

uint64_t sub_1000B1BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B1C08(a1, a2, a3, (uint64_t (*)(void))sub_1000B1A98, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_1000B1C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a4();
  return swift_getOpaqueTypeConformance2(v7, a5, 1);
}

uint64_t sub_1000B1C48@<X0>(uint64_t a1@<X8>)
{
  return sub_1000110B0(&qword_1001115A8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100126A68, (uint64_t)sub_1000B19AC, a1);
}

uint64_t sub_1000B1C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000B2064();
  v7 = sub_1000B20A8();
  v8 = sub_1000B20EC();
  *v5 = v2;
  v5[1] = sub_1000116CC;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_1000B1CF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000B1DF0();
  *a1 = result;
  return result;
}

uint64_t sub_1000B1D1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B1A98();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenStocksSettingsDeepLinksIntent()
{
  return &type metadata for OpenStocksSettingsDeepLinksIntent;
}

uint64_t storeEnumTagSinglePayload for StocksSettingsDeepLinks(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000B1D94 + 4 * byte_1000E2B00[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000B1DB4 + 4 * byte_1000E2B05[v4]))();
}

_BYTE *sub_1000B1D94(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000B1DB4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000B1DBC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000B1DC4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000B1DCC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000B1DD4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StocksSettingsDeepLinks()
{
  return &type metadata for StocksSettingsDeepLinks;
}

uint64_t sub_1000B1DF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  _BYTE v21[15];
  char v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000EDE8(0, &qword_100112410, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDialog, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v9 = &v21[-v8];
  sub_10000EDE8(0, &qword_100112418, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v10);
  v12 = &v21[-v11];
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000B2210(0, &qword_100117760, (uint64_t (*)(void))sub_1000B16AC, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for IntentParameter);
  LocalizedStringResource.init(stringLiteral:)(0x5320736B636F7453, 0xEE00676E69747465);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000021, 0x80000001000E6F80);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  v22 = 1;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v6, 1, 1, v17);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_10002DAF4();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v16, v12, &v22, v9, v6, v3, &off_100103A40, v19);
}

unint64_t sub_1000B2064()
{
  unint64_t result;

  result = qword_100117768;
  if (!qword_100117768)
  {
    result = swift_getWitnessTable(&unk_1000E2DFC, &type metadata for OpenStocksSettingsDeepLinksIntent);
    atomic_store(result, (unint64_t *)&qword_100117768);
  }
  return result;
}

unint64_t sub_1000B20A8()
{
  unint64_t result;

  result = qword_100117770;
  if (!qword_100117770)
  {
    result = swift_getWitnessTable(&unk_1000E2E4C, &type metadata for OpenStocksSettingsDeepLinksIntent);
    atomic_store(result, (unint64_t *)&qword_100117770);
  }
  return result;
}

unint64_t sub_1000B20EC()
{
  unint64_t result;

  result = qword_100117778;
  if (!qword_100117778)
  {
    result = swift_getWitnessTable(&unk_1000E2BAC, &type metadata for StocksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100117778);
  }
  return result;
}

void sub_1000B2130(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_100113288)
  {
    v2 = type metadata accessor for DisplayRepresentation(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for StocksSettingsDeepLinks, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100113288);
  }
}

void sub_1000B2194(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1001132A0)
  {
    sub_1000B2210(255, (unint64_t *)&qword_1001132A8, (uint64_t (*)(void))sub_10002DAF4, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for _EnumURLRepresentation.EnumSingleURLRepresentation);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for StocksSettingsDeepLinks, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1001132A0);
  }
}

void sub_1000B2210(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, ValueMetadata *, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3();
    v8 = a4(a1, &type metadata for StocksSettingsDeepLinks, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t destroy for LargePriceView(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t initializeWithCopy for LargePriceView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 == 1)
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

uint64_t assignWithCopy for LargePriceView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = a2[3];
  if (v4 == 1)
  {
    if (v5 == 1)
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
    }
    else
    {
      v8 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 16) = a2[2];
      v9 = a2[3];
      *(_QWORD *)(a1 + 24) = v9;
      swift_bridgeObjectRetain(v9);
    }
  }
  else if (v5 == 1)
  {
    sub_10002304C(a1);
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  else
  {
    v10 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 16) = a2[2];
    v11 = a2[3];
    *(_QWORD *)(a1 + 24) = v11;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRelease(v4);
  }
  return a1;
}

uint64_t assignWithTake for LargePriceView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4 != 1)
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (v5 != 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v5;
      swift_bridgeObjectRelease(v4);
      return a1;
    }
    sub_10002304C(a1);
  }
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for LargePriceView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for LargePriceView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    *(_QWORD *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for LargePriceView()
{
  return &type metadata for LargePriceView;
}

uint64_t sub_1000B24C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9D30, 1);
}

uint64_t sub_1000B24D4@<X0>(double a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = a5;
  sub_10000EDE8(0, &qword_1001141D8, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Design, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - v10;
  v12 = (int *)type metadata accessor for StockPriceView(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B281C(0);
  v39 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B28D4(0);
  v37 = *(_QWORD *)(v18 - 8);
  v38 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 == 1) | a2 & 1 | (a1 < 1000.0))
    v21 = 38.0;
  else
    v21 = 32.0;
  v22 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v11, 1, 1, v22);
  sub_100024540(*(uint64_t *)&a1, a2, a3, a4);
  v23 = static Font.system(size:weight:design:)(0, 1, v11, v21);
  sub_1000B29E0((uint64_t)v11);
  KeyPath = swift_getKeyPath(&unk_1000E3080);
  *(double *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  *((_QWORD *)v14 + 2) = a3;
  *((_QWORD *)v14 + 3) = a4;
  *((_QWORD *)v14 + 4) = v23;
  v25 = &v14[v12[6]];
  *(_QWORD *)v25 = swift_getKeyPath(&unk_1000E30A8);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v25, v26, 0);
  v27 = &v14[v12[7]];
  *(_QWORD *)v27 = KeyPath;
  v27[8] = 0;
  v28 = v12[8];
  if (qword_100111538 != -1)
    swift_once(&qword_100111538, sub_1000A9EB8);
  v29 = static Settings.UserPreferences.showCurrency;
  sub_1000035F0();
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v31 = swift_retain(v29);
  *(_QWORD *)&v14[v28] = SettingProperty.init(_:)(v31);
  v32 = swift_getKeyPath(&unk_1000E30D8);
  sub_1000B2A44((uint64_t)v14, (uint64_t)v17);
  v33 = v39;
  v34 = (uint64_t *)&v17[*(int *)(v39 + 36)];
  *v34 = v32;
  v34[1] = 0x3FB999999999999ALL;
  sub_10001DF70((uint64_t)v14, type metadata accessor for StockPriceView);
  v35 = sub_1000B2948();
  View.unredacted()(v33, v35);
  sub_10001DF70((uint64_t)v17, (uint64_t (*)(_QWORD))sub_1000B281C);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v37 + 32))(v40, v20, v38);
}

uint64_t sub_1000B2810@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B24D4(*(double *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_1000B281C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_100117798)
  {
    v2 = type metadata accessor for StockPriceView(255);
    sub_1000B2880();
    v4 = type metadata accessor for ModifiedContent(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_100117798);
  }
}

void sub_1000B2880()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100112D70)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier(0, &type metadata for CGFloat);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100112D70);
  }
}

void sub_1000B28D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1001177A0)
  {
    sub_1000B281C(255);
    v5[0] = v2;
    v5[1] = sub_1000B2948();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001177A0);
  }
}

unint64_t sub_1000B2948()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001177A8;
  if (!qword_1001177A8)
  {
    sub_1000B281C(255);
    v2 = v1;
    sub_100003D3C(&qword_1001177B0, type metadata accessor for StockPriceView, (uint64_t)&unk_1000DCF58);
    sub_100003D3C((unint64_t *)&qword_100112DA0, (uint64_t (*)(uint64_t))sub_1000B2880, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001177A8);
  }
  return result;
}

uint64_t sub_1000B29E0(uint64_t a1)
{
  uint64_t v2;

  sub_10000EDE8(0, &qword_1001141D8, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Design, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B2A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StockPriceView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B2A88()
{
  uint64_t v0;
  _QWORD v2[2];

  sub_1000B281C(255);
  v2[0] = v0;
  v2[1] = sub_1000B2948();
  return swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for HeadlineThumbnail(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = v3;
  return a1;
}

void destroy for HeadlineThumbnail(id *a1)
{

}

uint64_t assignWithCopy for HeadlineThumbnail(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t initializeWithTake for HeadlineThumbnailImage(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for HeadlineThumbnail(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HeadlineThumbnail(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 9))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for HeadlineThumbnail(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_1000B2C4C(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1000B2C64(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    *(_BYTE *)(result + 8) = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for HeadlineThumbnail()
{
  return &type metadata for HeadlineThumbnail;
}

uint64_t getEnumTagSinglePayload for HeadlineThumbnailImage(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HeadlineThumbnailImage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HeadlineThumbnailImage()
{
  return &type metadata for HeadlineThumbnailImage;
}

uint64_t getEnumTagSinglePayload for HeadlineThumbnailView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 9))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HeadlineThumbnailView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HeadlineThumbnailView()
{
  return &type metadata for HeadlineThumbnailView;
}

uint64_t sub_1000B2DEC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9E00, 1);
}

uint64_t sub_1000B2DFC@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[5];

  v47 = a3;
  v46 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v46);
  v6 = (_OWORD *)((char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000B3608(0, &qword_1001177E0, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for _ConditionalContent);
  __chkstk_darwin(v7);
  v9 = (char *)&v45 - v8;
  sub_1000B3304(0);
  v11 = v10;
  __chkstk_darwin(v10);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B3370(0);
  v45 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B30D4(a1, a2);
  sub_1000B34D4((uint64_t)v9, (uint64_t)v13);
  v17 = &v13[*(int *)(v11 + 36)];
  *(_QWORD *)v17 = 0x3FF0000000000000;
  *((_WORD *)v17 + 4) = 0;
  v18 = sub_1000B3528((uint64_t)v9);
  v19 = static Color.white.getter(v18);
  v20 = Color.opacity(_:)(0.2);
  swift_release(v19);
  v21 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v48, 0, 0, _swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
  v22 = v48[0];
  v23 = v48[2];
  v24 = v48[3];
  v25 = v48[4];
  v26 = static Alignment.center.getter(v21);
  v28 = v27;
  v29 = static Alignment.center.getter(v26);
  v31 = v30;
  sub_10001DE2C((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(_QWORD))sub_1000B3304);
  v32 = &v16[*(int *)(v45 + 36)];
  v33 = v48[1];
  *(_QWORD *)v32 = v22;
  *((_QWORD *)v32 + 1) = v33;
  *((_QWORD *)v32 + 2) = v23;
  *((_QWORD *)v32 + 3) = v24;
  *((_QWORD *)v32 + 4) = v25;
  *((_QWORD *)v32 + 5) = v20;
  *((_WORD *)v32 + 24) = 256;
  *((_QWORD *)v32 + 7) = v26;
  *((_QWORD *)v32 + 8) = v28;
  *((_QWORD *)v32 + 9) = v29;
  *((_QWORD *)v32 + 10) = v31;
  sub_10001DF70((uint64_t)v13, (uint64_t (*)(_QWORD))sub_1000B3304);
  v34 = (char *)v6 + *(int *)(v46 + 20);
  v35 = enum case for RoundedCornerStyle.continuous(_:);
  v36 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v34, v35, v36);
  __asm { FMOV            V0.2D, #8.0 }
  *v6 = _Q0;
  sub_1000B3574(0);
  v43 = v47;
  sub_10001DE2C((uint64_t)v6, v47 + *(int *)(v42 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_10001DE2C((uint64_t)v16, v43, (uint64_t (*)(_QWORD))sub_1000B3370);
  sub_10001DF70((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return sub_10001DF70((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1000B3370);
}

uint64_t sub_1000B30D4(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for HeadlineThumbnailImageView(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000B3608(0, &qword_100117830, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v8 = v7;
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - v9;
  if (a1)
  {
    *v6 = swift_getKeyPath(&unk_1000E31D8);
    sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    swift_storeEnumTagMultiPayload(v6, v11, 0);
    v12 = (char *)v6 + *(int *)(v4 + 20);
    *(_QWORD *)v12 = a1;
    v12[8] = a2 & 1;
    sub_10001DE2C((uint64_t)v6, (uint64_t)v10, type metadata accessor for HeadlineThumbnailImageView);
    swift_storeEnumTagMultiPayload(v10, v8, 1);
    v13 = sub_1000B3E1C();
    v14 = sub_100003D3C(&qword_100117840, type metadata accessor for HeadlineThumbnailImageView, (uint64_t)&unk_1000E3274);
    v15 = a1;
    _ConditionalContent<>.init(storage:)(v10, &type metadata for HeadlineThumbnailAudioIndicatorView, v4, v13, v14);
    return sub_10001DF70((uint64_t)v6, type metadata accessor for HeadlineThumbnailImageView);
  }
  else
  {
    swift_storeEnumTagMultiPayload((char *)&v19 - v9, v8, 0);
    v17 = sub_1000B3E1C();
    v18 = sub_100003D3C(&qword_100117840, type metadata accessor for HeadlineThumbnailImageView, (uint64_t)&unk_1000E3274);
    return _ConditionalContent<>.init(storage:)(v10, &type metadata for HeadlineThumbnailAudioIndicatorView, v4, v17, v18);
  }
}

uint64_t sub_1000B32BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B2DFC(*(void **)v1, *(_BYTE *)(v1 + 8), a1);
}

uint64_t type metadata accessor for HeadlineThumbnailImageView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001178A0;
  if (!qword_1001178A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HeadlineThumbnailImageView);
  return result;
}

void sub_1000B3304(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001177E8)
  {
    sub_1000B3608(255, &qword_1001177E0, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for _ConditionalContent);
    v3 = type metadata accessor for ModifiedContent(a1, v2, &type metadata for _AspectRatioLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001177E8);
  }
}

void sub_1000B3370(uint64_t a1)
{
  sub_100066208(a1, &qword_1001177F0, (uint64_t (*)(uint64_t))sub_1000B3304, (uint64_t (*)(uint64_t))sub_1000B338C);
}

void sub_1000B338C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001177F8)
  {
    sub_1000B3404(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_100117810, (uint64_t (*)(uint64_t))sub_1000B3404, (uint64_t)&protocol conformance descriptor for StrokeShapeView<A, B, C>);
    v5 = type metadata accessor for _OverlayModifier(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001177F8);
  }
}

void sub_1000B3404(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  if (!qword_100117800)
  {
    v4[0] = &type metadata for ContainerRelativeShape;
    v4[1] = &type metadata for Color;
    v4[2] = &type metadata for EmptyView;
    v4[3] = sub_1000B3490();
    v4[4] = &protocol witness table for Color;
    v4[5] = &protocol witness table for EmptyView;
    v2 = type metadata accessor for StrokeShapeView(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_100117800);
  }
}

unint64_t sub_1000B3490()
{
  unint64_t result;

  result = qword_100117808;
  if (!qword_100117808)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContainerRelativeShape, &type metadata for ContainerRelativeShape);
    atomic_store(result, (unint64_t *)&qword_100117808);
  }
  return result;
}

uint64_t sub_1000B34D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000B3608(0, &qword_1001177E0, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for _ConditionalContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B3528(uint64_t a1)
{
  uint64_t v2;

  sub_1000B3608(0, &qword_1001177E0, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for _ConditionalContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000B3574(uint64_t a1)
{
  sub_100066208(a1, &qword_100117818, (uint64_t (*)(uint64_t))sub_1000B3370, (uint64_t (*)(uint64_t))sub_1000B3590);
}

void sub_1000B3590(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_100117820)
  {
    v2 = type metadata accessor for RoundedRectangle(255);
    v3 = sub_100003D3C(&qword_100117828, (uint64_t (*)(uint64_t))&type metadata accessor for RoundedRectangle, (uint64_t)&protocol conformance descriptor for RoundedRectangle);
    v4 = type metadata accessor for _ContainerShapeModifier(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_100117820);
  }
}

void sub_1000B3608(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for HeadlineThumbnailImageView(255);
    v7 = a3(a1, &type metadata for HeadlineThumbnailAudioIndicatorView, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1000B3668@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;

  v2 = v1;
  v46 = a1;
  sub_10000EDE8(0, &qword_100117948, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetAccentedRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v43 - v5;
  v7 = type metadata accessor for Image.ResizingMode(0, v4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B4A78(0, v11);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B4AD0(0, v17);
  v45 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v2 + *(int *)(type metadata accessor for HeadlineThumbnailImageView(0) + 20);
  v21 = Image.init(uiImage:)(*(id *)v44);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Image.ResizingMode.stretch(_:), v7);
  v22 = Image.resizable(capInsets:resizingMode:)(v10, v21, 0.0, 0.0, 0.0, 0.0);
  v23 = swift_release(v21);
  v24 = (*(uint64_t (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v23);
  static WidgetAccentedRenderingMode.fullColor.getter(v24);
  v25 = type metadata accessor for WidgetAccentedRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v6, 0, 1, v25);
  Image.widgetAccentedRenderingMode(_:)(v6, v22);
  swift_release(v22);
  sub_100028528((uint64_t)v6, &qword_100117948, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetAccentedRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v20, v16, v13);
  *(_WORD *)&v20[*(int *)(v45 + 36)] = 256;
  v26 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v27 = static Alignment.center.getter(v26);
  v45 = v27;
  v43 = v28;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = *(unsigned __int8 *)(v44 + 8);
  if (v35 == 1)
  {
    v36 = static Alignment.center.getter(v27);
    _FrameLayout.init(width:height:alignment:)(&v47, 0x4042000000000000, 0, 0x4042000000000000, 0, v36, v37);
    v29 = v47;
    v30 = v48;
    v31 = v49;
    v32 = v50;
    v33 = v51;
    v34 = v52;
  }
  v38 = v46;
  sub_10001DE2C((uint64_t)v20, v46, (uint64_t (*)(_QWORD))sub_1000B4AD0);
  sub_1000B4B54(0);
  v40 = v38 + *(int *)(v39 + 36);
  *(_QWORD *)v40 = v29;
  *(_QWORD *)(v40 + 8) = v30;
  *(_QWORD *)(v40 + 16) = v31;
  *(_QWORD *)(v40 + 24) = v32;
  *(_QWORD *)(v40 + 32) = v33;
  *(_QWORD *)(v40 + 40) = v34;
  *(_BYTE *)(v40 + 48) = v35 ^ 1;
  v41 = v43;
  *(_QWORD *)(v40 + 56) = v45;
  *(_QWORD *)(v40 + 64) = v41;
  return sub_10001DF70((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1000B4AD0);
}

double sub_1000B3978@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v2 = ((uint64_t (*)(void))static Color.black.getter)();
  v3 = Color.opacity(_:)(0.05);
  v4 = swift_release(v2);
  v5 = static Color.black.getter(v4);
  v6 = Color.opacity(_:)(0.12);
  swift_release(v5);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1000E3110;
  *(_QWORD *)(a1 + 24) = 0x4000000000000000;
  *(_QWORD *)(a1 + 32) = v6;
  result = 10.0;
  *(_OWORD *)(a1 + 40) = xmmword_1000E3120;
  *(_QWORD *)(a1 + 56) = 0x4000000000000000;
  return result;
}

uint64_t sub_1000B3A04()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  if (qword_100111588 != -1)
    swift_once(&qword_100111588, sub_1000B0BAC);
  sub_10001DB68((uint64_t)qword_100126A08, (uint64_t)v6);
  v0 = v7;
  v1 = v8;
  sub_100007184(v6, v7);
  v2 = sub_1000280C4();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v2, v2, v0, v1);
  if (v5)
  {
    sub_10001D968(&v4, (uint64_t)&unk_1001177B8);
    return sub_100007164(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B3AB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[8];
  uint64_t v43;

  v40 = a1;
  sub_1000B4708(0);
  v39 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100117918, (uint64_t (*)(uint64_t))&type metadata accessor for Image.TemplateRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - v5;
  sub_100066208(0, &qword_100117920, (uint64_t (*)(uint64_t))sub_1000B4800, (uint64_t (*)(uint64_t))sub_1000B4708);
  v8 = v7;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v38 - v10;
  v12 = Image.init(systemName:)(0x6E6F687064616568, 0xEA00000000007365, v9);
  v13 = enum case for Image.TemplateRenderingMode.template(_:);
  v14 = type metadata accessor for Image.TemplateRenderingMode(0);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v6, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v6, 0, 1, v14);
  v16 = Image.renderingMode(_:)(v6, v12);
  swift_release(v12);
  v17 = sub_100028528((uint64_t)v6, &qword_100117918, (uint64_t (*)(uint64_t))&type metadata accessor for Image.TemplateRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v18 = static Color.white.getter(v17);
  KeyPath = swift_getKeyPath(&unk_1000E3318);
  v20 = static Alignment.center.getter(KeyPath);
  sub_10002A1F8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v42, 0.0, 1, INFINITY, 0, v20, v21, v16, KeyPath, v18);
  swift_release(v18);
  swift_release(KeyPath);
  swift_release(v16);
  v23 = static Alignment.center.getter(v22);
  v25 = v24;
  if (qword_1001115B0 != -1)
    swift_once(&qword_1001115B0, sub_1000B3A04);
  v26 = qword_1001177D0;
  v27 = unk_1001177D8;
  sub_100007184(qword_1001177B8, qword_1001177D0);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v27 + 16) + 104))(v26);
  v29 = Color.init(uiColor:)(v28);
  v41 = v29;
  View.widgetAccentable(_:)(1, &type metadata for Color, &protocol witness table for Color);
  swift_release(v29);
  v30 = (uint64_t *)&v3[*(int *)(v39 + 36)];
  *v30 = v23;
  v30[1] = v25;
  sub_10001DE2C((uint64_t)v3, (uint64_t)&v11[*(int *)(v8 + 36)], (uint64_t (*)(_QWORD))sub_1000B4708);
  v31 = v42[7];
  *((_OWORD *)v11 + 6) = v42[6];
  *((_OWORD *)v11 + 7) = v31;
  *((_QWORD *)v11 + 16) = v43;
  v32 = v42[3];
  *((_OWORD *)v11 + 2) = v42[2];
  *((_OWORD *)v11 + 3) = v32;
  v33 = v42[5];
  *((_OWORD *)v11 + 4) = v42[4];
  *((_OWORD *)v11 + 5) = v33;
  v34 = v42[1];
  *(_OWORD *)v11 = v42[0];
  *((_OWORD *)v11 + 1) = v34;
  sub_10001DF70((uint64_t)v3, (uint64_t (*)(_QWORD))sub_1000B4708);
  v35 = v40;
  sub_1000B492C((uint64_t)v11, v40);
  sub_1000B4988(0);
  *(_WORD *)(v35 + *(int *)(v36 + 36)) = 256;
  return sub_1000B4A24((uint64_t)v11);
}

unint64_t sub_1000B3E1C()
{
  unint64_t result;

  result = qword_100117838;
  if (!qword_100117838)
  {
    result = swift_getWitnessTable(&unk_1000E32C4, &type metadata for HeadlineThumbnailAudioIndicatorView);
    atomic_store(result, (unint64_t *)&qword_100117838);
  }
  return result;
}

uint64_t *sub_1000B3E60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  id v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v8 = v7;
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v9 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = v8;
      v12 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v10 = a1;
      v11 = v8;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    v15 = *(int *)(a3 + 20);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = *(void **)v17;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v19 = v18;
  }
  return a1;
}

void sub_1000B3F60(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }

}

uint64_t *sub_1000B3FE4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  id v17;

  sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = a1;
    v10 = v7;
    v11 = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v9 = a1;
    v10 = v7;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(void **)v15;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v17 = v16;
  return a1;
}

uint64_t *sub_1000B40B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;
  id v18;

  if (a1 != a2)
  {
    sub_100028528((uint64_t)a1, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(void **)v15;
  v17 = *(void **)v14;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v18 = v16;

  v14[8] = v15[8];
  return a1;
}

char *sub_1000B41C4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v7, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  return a1;
}

char *sub_1000B4290(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;

  if (a1 != a2)
  {
    sub_100028528((uint64_t)a1, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v7, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(void **)&a1[v9];
  *(_QWORD *)&a1[v9] = *(_QWORD *)v11;

  v10[8] = v11[8];
  return a1;
}

uint64_t sub_1000B4394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B43A0);
}

uint64_t sub_1000B43A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_10000EDE8(0, &qword_100112C50, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000B4434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B4440);
}

void sub_1000B4440(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_10000EDE8(0, &qword_100112C50, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
}

void sub_1000B44D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10000EDE8(319, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\t";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

ValueMetadata *type metadata accessor for HeadlineThumbnailAudioIndicatorView()
{
  return &type metadata for HeadlineThumbnailAudioIndicatorView;
}

uint64_t sub_1000B4568()
{
  return sub_10002F5CC(&qword_1001178D8, (uint64_t (*)(uint64_t))sub_1000B3574, (void (*)(void))sub_1000B459C, (void (*)(void))sub_1000B46CC);
}

unint64_t sub_1000B459C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001178E0;
  if (!qword_1001178E0)
  {
    sub_1000B3370(255);
    v2 = v1;
    sub_1000B4E64(&qword_1001178E8, (uint64_t (*)(uint64_t))sub_1000B3304, (void (*)(void))sub_1000B463C);
    sub_100003D3C(&qword_1001178F8, (uint64_t (*)(uint64_t))sub_1000B338C, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001178E0);
  }
  return result;
}

unint64_t sub_1000B463C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001178F0;
  if (!qword_1001178F0)
  {
    sub_1000B3608(255, &qword_1001177E0, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for _ConditionalContent);
    v2 = v1;
    sub_1000B3E1C();
    sub_100003D3C(&qword_100117840, type metadata accessor for HeadlineThumbnailImageView, (uint64_t)&unk_1000E3274);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001178F0);
  }
  return result;
}

uint64_t sub_1000B46CC()
{
  return sub_100003D3C(&qword_100117900, (uint64_t (*)(uint64_t))sub_1000B3590, (uint64_t)&protocol conformance descriptor for _ContainerShapeModifier<A>);
}

uint64_t sub_1000B46E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9E74, 1);
}

uint64_t sub_1000B46F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9E4C, 1);
}

void sub_1000B4708(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (!qword_100117908)
  {
    sub_1000B4794();
    v3 = v2;
    v7[0] = &type metadata for Color;
    v7[1] = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v7, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v5 = type metadata accessor for _BackgroundModifier(a1, v3, OpaqueTypeConformance2);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100117908);
  }
}

void sub_1000B4794()
{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v1;
  _QWORD v2[2];

  if (!qword_100117910)
  {
    v2[0] = &type metadata for Color;
    v2[1] = &protocol witness table for Color;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, v2, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 0);
    if (!v1)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100117910);
  }
}

void sub_1000B4800(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100117928)
  {
    sub_1000B485C(255);
    v3 = type metadata accessor for ModifiedContent(a1, v2, &type metadata for _FlexFrameLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100117928);
  }
}

void sub_1000B485C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100117930)
  {
    sub_10000EDE8(255, &qword_100112D30, (uint64_t (*)(uint64_t))sub_1000B48D0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    v3 = type metadata accessor for ModifiedContent(a1, &type metadata for Image, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100117930);
  }
}

void sub_1000B48D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100112D38)
  {
    v0 = type metadata accessor for Optional(0, &type metadata for Color);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100112D38);
  }
}

uint64_t sub_1000B492C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100066208(0, &qword_100117920, (uint64_t (*)(uint64_t))sub_1000B4800, (uint64_t (*)(uint64_t))sub_1000B4708);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000B4988(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100117938)
  {
    sub_100066208(255, &qword_100117920, (uint64_t (*)(uint64_t))sub_1000B4800, (uint64_t (*)(uint64_t))sub_1000B4708);
    v3 = v2;
    sub_100012608(255, &qword_100117940, (uint64_t (*)(void))sub_1000B3490, (uint64_t)&type metadata for ContainerRelativeShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ClipEffect);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100117938);
  }
}

uint64_t sub_1000B4A24(uint64_t a1)
{
  uint64_t v2;

  sub_100066208(0, &qword_100117920, (uint64_t (*)(uint64_t))sub_1000B4800, (uint64_t (*)(uint64_t))sub_1000B4708);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000B4A78(uint64_t a1, uint64_t a2)
{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v3;

  if (!qword_100117950)
  {
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, a2, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 0);
    if (!v3)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100117950);
  }
}

void sub_1000B4AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_100117958)
  {
    sub_1000B4A78(255, a2);
    v4 = v3;
    sub_100012608(255, &qword_100117940, (uint64_t (*)(void))sub_1000B3490, (uint64_t)&type metadata for ContainerRelativeShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ClipEffect);
    v6 = type metadata accessor for ModifiedContent(a1, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_100117958);
  }
}

void sub_1000B4B54(uint64_t a1)
{
  sub_100066208(a1, &qword_100117960, (uint64_t (*)(uint64_t))sub_1000B4AD0, (uint64_t (*)(uint64_t))sub_1000B4B70);
}

void sub_1000B4B70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100117968)
  {
    sub_1000B4BD0(255);
    v3 = v2;
    v4 = sub_1000B4C3C();
    v5 = type metadata accessor for _OverlayModifier(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100117968);
  }
}

void sub_1000B4BD0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100117970)
  {
    sub_1000A95C0(255, &qword_100117978, (uint64_t)&type metadata for HeadlineThumbnailAudioIndicatorBadgeView, (uint64_t)&type metadata for _FrameLayout);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100117970);
  }
}

unint64_t sub_1000B4C3C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100117980;
  if (!qword_100117980)
  {
    sub_1000B4BD0(255);
    v2 = v1;
    sub_1000B4C9C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v2);
    atomic_store(result, (unint64_t *)&qword_100117980);
  }
  return result;
}

unint64_t sub_1000B4C9C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100117988;
  if (!qword_100117988)
  {
    sub_1000A95C0(255, &qword_100117978, (uint64_t)&type metadata for HeadlineThumbnailAudioIndicatorBadgeView, (uint64_t)&type metadata for _FrameLayout);
    v2 = v1;
    sub_1000B4D1C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100117988);
  }
  return result;
}

unint64_t sub_1000B4D1C()
{
  unint64_t result;

  result = qword_100117990;
  if (!qword_100117990)
  {
    result = swift_getWitnessTable(&unk_1000E337C, &type metadata for HeadlineThumbnailAudioIndicatorBadgeView);
    atomic_store(result, (unint64_t *)&qword_100117990);
  }
  return result;
}

ValueMetadata *type metadata accessor for HeadlineThumbnailAudioIndicatorBadgeView()
{
  return &type metadata for HeadlineThumbnailAudioIndicatorBadgeView;
}

uint64_t sub_1000B4D70()
{
  return sub_10002F5CC(&qword_100117998, (uint64_t (*)(uint64_t))sub_1000B4988, (void (*)(void))sub_1000B4DA4, (void (*)(void))sub_1000B4F94);
}

unint64_t sub_1000B4DA4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001179A0;
  if (!qword_1001179A0)
  {
    sub_100066208(255, &qword_100117920, (uint64_t (*)(uint64_t))sub_1000B4800, (uint64_t (*)(uint64_t))sub_1000B4708);
    v2 = v1;
    sub_1000B4E64(&qword_1001179A8, (uint64_t (*)(uint64_t))sub_1000B4800, (void (*)(void))sub_1000B4ECC);
    sub_100003D3C(&qword_1001179B8, (uint64_t (*)(uint64_t))sub_1000B4708, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001179A0);
  }
  return result;
}

uint64_t sub_1000B4E64(unint64_t *a1, uint64_t (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B4ECC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001179B0;
  if (!qword_1001179B0)
  {
    sub_1000B485C(255);
    v2 = v1;
    sub_1000B4F34();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001179B0);
  }
  return result;
}

unint64_t sub_1000B4F34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100112E38;
  if (!qword_100112E38)
  {
    sub_10000EDE8(255, &qword_100112D30, (uint64_t (*)(uint64_t))sub_1000B48D0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100112E38);
  }
  return result;
}

unint64_t sub_1000B4F94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001179C0;
  if (!qword_1001179C0)
  {
    sub_100012608(255, &qword_100117940, (uint64_t (*)(void))sub_1000B3490, (uint64_t)&type metadata for ContainerRelativeShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ClipEffect);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ClipEffect<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001179C0);
  }
  return result;
}

uint64_t sub_1000B4FFC()
{
  return sub_10002F5CC(&qword_1001179C8, (uint64_t (*)(uint64_t))sub_1000B4B54, (void (*)(void))sub_1000B5030, (void (*)(void))sub_1000B50A4);
}

unint64_t sub_1000B5030(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = qword_1001179D0;
  if (!qword_1001179D0)
  {
    sub_1000B4AD0(255, a2);
    v4 = v3;
    swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
    sub_1000B4F94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, (unint64_t *)&qword_1001179D0);
  }
  return result;
}

uint64_t sub_1000B50A4()
{
  return sub_100003D3C(&qword_1001179D8, (uint64_t (*)(uint64_t))sub_1000B4B70, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
}

uint64_t sub_1000B50C0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9E9C, 1);
}

unint64_t sub_1000B50D4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001179E0;
  if (!qword_1001179E0)
  {
    sub_1000B515C(255);
    v2 = v1;
    sub_1000B4E64(&qword_100117A10, (uint64_t (*)(uint64_t))sub_1000B51E0, (void (*)(void))sub_1000B5298);
    sub_1000B5318();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001179E0);
  }
  return result;
}

void sub_1000B515C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001179E8)
  {
    sub_1000B51E0(255);
    v3 = v2;
    sub_100012608(255, &qword_100117A00, (uint64_t (*)(void))sub_1000B5254, (uint64_t)&type metadata for Circle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ContainerShapeModifier);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001179E8);
  }
}

void sub_1000B51E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001179F0)
  {
    sub_1000A95C0(255, &qword_1001179F8, (uint64_t)&type metadata for HeadlineThumbnailAudioIndicatorView, (uint64_t)&type metadata for _ShadowEffect);
    v3 = type metadata accessor for ModifiedContent(a1, v2, &type metadata for _ShadowEffect);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001179F0);
  }
}

unint64_t sub_1000B5254()
{
  unint64_t result;

  result = qword_100117A08;
  if (!qword_100117A08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Circle, &type metadata for Circle);
    atomic_store(result, (unint64_t *)&qword_100117A08);
  }
  return result;
}

unint64_t sub_1000B5298()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100117A18;
  if (!qword_100117A18)
  {
    sub_1000A95C0(255, &qword_1001179F8, (uint64_t)&type metadata for HeadlineThumbnailAudioIndicatorView, (uint64_t)&type metadata for _ShadowEffect);
    v2 = v1;
    sub_1000B3E1C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100117A18);
  }
  return result;
}

unint64_t sub_1000B5318()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117A20;
  if (!qword_100117A20)
  {
    sub_100012608(255, &qword_100117A00, (uint64_t (*)(void))sub_1000B5254, (uint64_t)&type metadata for Circle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ContainerShapeModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ContainerShapeModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100117A20);
  }
  return result;
}

ValueMetadata *type metadata accessor for CompanyNameView()
{
  return &type metadata for CompanyNameView;
}

uint64_t sub_1000B53A0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9EE0, 1);
}

uint64_t sub_1000B53B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t KeyPath;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  _QWORD v28[2];
  char v29;
  _BYTE v30[7];

  v7 = type metadata accessor for Color.RGBColorSpace(0, a4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[0] = a1;
  v28[1] = a2;
  v11 = sub_1000144A0();
  swift_bridgeObjectRetain(a2);
  v12 = Text.init<A>(_:)(v28, &type metadata for String, v11);
  v14 = v13;
  v16 = v15;
  v27 = v17;
  KeyPath = swift_getKeyPath(&unk_1000E3440);
  v20 = static Font.caption2.getter(v19);
  static Font.Weight.medium.getter(v20);
  v21 = Font.weight(_:)(v20);
  swift_release(v20);
  v22 = swift_getKeyPath(&unk_1000E3468);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Color.RGBColorSpace.sRGB(_:), v7);
  v23 = Color.init(_:red:green:blue:opacity:)(v10, 0.921568627, 0.921568627, 0.960784314, 1.0);
  v24 = Color.opacity(_:)(0.6);
  swift_release(v23);
  v25 = swift_getKeyPath(&unk_1000E3498);
  result = swift_getKeyPath(&unk_1000E34C8);
  v29 = 0;
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v14;
  *(_BYTE *)(a3 + 16) = v16 & 1;
  *(_DWORD *)(a3 + 17) = v28[0];
  *(_DWORD *)(a3 + 20) = *(_DWORD *)((char *)v28 + 3);
  *(_QWORD *)(a3 + 24) = v27;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = KeyPath;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 73) = *(_DWORD *)v30;
  *(_DWORD *)(a3 + 76) = *(_DWORD *)&v30[3];
  *(_QWORD *)(a3 + 80) = v22;
  *(_QWORD *)(a3 + 88) = v21;
  *(_QWORD *)(a3 + 96) = v25;
  *(_QWORD *)(a3 + 104) = v24;
  *(_QWORD *)(a3 + 112) = result;
  *(_QWORD *)(a3 + 120) = 1;
  *(_BYTE *)(a3 + 128) = v29;
  return result;
}

uint64_t sub_1000B5588@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t *v2;

  return sub_1000B53B0(*v2, v2[1], a1, a2);
}

unint64_t sub_1000B55B4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100117A28;
  if (!qword_100117A28)
  {
    sub_1000B563C(255);
    v2 = v1;
    sub_1000B5734();
    sub_10002F72C(&qword_100112D98, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100117A28);
  }
  return result;
}

void sub_1000B563C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100117A30)
  {
    sub_1000B56B8(255);
    v3 = v2;
    sub_10002F4D0(255, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100117A30);
  }
}

void sub_1000B56B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100117A38)
  {
    sub_10009D16C(255);
    v3 = v2;
    sub_10002F4D0(255, &qword_100112D30, (unint64_t *)&qword_100112D38, (uint64_t)&type metadata for Color);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100117A38);
  }
}

unint64_t sub_1000B5734()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100117A40;
  if (!qword_100117A40)
  {
    sub_1000B56B8(255);
    v2 = v1;
    sub_10009D354();
    sub_10002F72C((unint64_t *)&qword_100112E38, &qword_100112D30, (unint64_t *)&qword_100112D38, (uint64_t)&type metadata for Color);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100117A40);
  }
  return result;
}

uint64_t sub_1000B57BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for StockType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v27 - v7;
  sub_100007248(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v27 - v13;
  v27 = v1 + *(int *)(type metadata accessor for WidgetStock(0) + 20);
  sub_100007294(v27, (uint64_t)v14, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  v15 = type metadata accessor for WidgetQuote(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1, v15) == 1)
  {
    v18 = sub_1000072E0((uint64_t)v14, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
    v29 = 0;
    v28 = 1;
  }
  else
  {
    v29 = WidgetQuote.price.getter();
    v28 = v19 & 1;
    v18 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  }
  Stock.type.getter(v18);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v20 != enum case for StockType.unknown(_:)
    && v20 != enum case for StockType.currency(_:)
    && v20 != enum case for StockType.cryptocurrency(_:)
    && v20 != enum case for StockType.equity(_:)
    && v20 != enum case for StockType.etf(_:)
    && v20 != enum case for StockType.futures(_:))
  {
    if (v20 == enum case for StockType.index(_:))
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      return v29;
    }
    if (v20 != enum case for StockType.mutualFund(_:))
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  sub_100007294(v27, (uint64_t)v12, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  if (v17(v12, 1, v15) == 1)
  {
    sub_1000072E0((uint64_t)v12, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  }
  else
  {
    WidgetQuote.currencyCode.getter();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v15);
  }
  return v29;
}

uint64_t type metadata accessor for WidgetStock(uint64_t a1)
{
  uint64_t result;

  result = qword_100117AA0;
  if (!qword_100117AA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WidgetStock);
  return result;
}

uint64_t *sub_1000B5B08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for Stock(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for WidgetQuote(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      sub_100007248(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v15 = *(int *)(a3 + 24);
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = (int *)type metadata accessor for PreparedSparkline(0);
    v19 = *((_QWORD *)v18 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
    {
      sub_100007248(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = *v17;
      *v16 = *v17;
      v22 = v18[5];
      v23 = (char *)v16 + v22;
      v24 = (char *)v17 + v22;
      v25 = type metadata accessor for Date(0);
      v26 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v25 - 8) + 16);
      v27 = swift_bridgeObjectRetain(v21);
      v26(v23, v24, v25, v27);
      sub_100022800(0);
      ((void (*)(char *, char *, uint64_t))v26)(&v23[*(int *)(v28 + 36)], &v24[*(int *)(v28 + 36)], v25);
      v29 = v18[6];
      v30 = (char *)v16 + v29;
      v31 = (char *)v17 + v29;
      v32 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
      *(_OWORD *)((char *)v16 + v18[7]) = *(_OWORD *)((char *)v17 + v18[7]);
      v33 = v18[8];
      v34 = (char *)v16 + v33;
      v35 = (char *)v17 + v33;
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      *((_BYTE *)v16 + v18[9]) = *((_BYTE *)v17 + v18[9]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t sub_1000B5D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v4 = type metadata accessor for Stock(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for WidgetQuote(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v9 = type metadata accessor for PreparedSparkline(0);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*v8);
    v11 = (char *)v8 + *(int *)(v9 + 20);
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
    v13(v11, v12);
    sub_100022800(0);
    v13(&v11[*(int *)(v14 + 36)], v12);
    v15 = (char *)v8 + *(int *)(v9 + 24);
    v16 = type metadata accessor for TimeZone(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  }
  return result;
}

uint64_t sub_1000B5E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v6 = type metadata accessor for Stock(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for WidgetQuote(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_100007248(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = (int *)type metadata accessor for PreparedSparkline(0);
  v17 = *((_QWORD *)v16 - 1);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    sub_100007248(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = *v15;
    *v14 = *v15;
    v20 = v16[5];
    v21 = (char *)v14 + v20;
    v22 = (char *)v15 + v20;
    v23 = type metadata accessor for Date(0);
    v24 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v23 - 8) + 16);
    v25 = swift_bridgeObjectRetain(v19);
    v24(v21, v22, v23, v25);
    sub_100022800(0);
    ((void (*)(char *, char *, uint64_t))v24)(&v21[*(int *)(v26 + 36)], &v22[*(int *)(v26 + 36)], v23);
    v27 = v16[6];
    v28 = (char *)v14 + v27;
    v29 = (char *)v15 + v27;
    v30 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
    *(_OWORD *)((char *)v14 + v16[7]) = *(_OWORD *)((char *)v15 + v16[7]);
    v31 = v16[8];
    v32 = (char *)v14 + v31;
    v33 = (char *)v15 + v31;
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    *((_BYTE *)v14 + v16[9]) = *((_BYTE *)v15 + v16[9]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_1000B60CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t, int *);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char v59;

  v6 = type metadata accessor for Stock(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for WidgetQuote(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    sub_100007248(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = *(int *)(a3 + 24);
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = (int *)type metadata accessor for PreparedSparkline(0);
  v20 = *((_QWORD *)v19 - 1);
  v21 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      v25 = *v18;
      *v17 = *v18;
      v26 = v19[5];
      v27 = (char *)v17 + v26;
      v28 = (char *)v18 + v26;
      v29 = type metadata accessor for Date(0);
      v30 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v29 - 8) + 16);
      v31 = swift_bridgeObjectRetain(v25);
      v30(v27, v28, v29, v31);
      sub_100022800(0);
      ((void (*)(char *, char *, uint64_t))v30)(&v27[*(int *)(v32 + 36)], &v28[*(int *)(v32 + 36)], v29);
      v33 = v19[6];
      v34 = (char *)v17 + v33;
      v35 = (char *)v18 + v33;
      v36 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
      *(_OWORD *)((char *)v17 + v19[7]) = *(_OWORD *)((char *)v18 + v19[7]);
      v37 = v19[8];
      v38 = (char *)v17 + v37;
      v39 = (char *)v18 + v37;
      v40 = v39[8];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v40;
      *((_BYTE *)v17 + v19[9]) = *((_BYTE *)v18 + v19[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
      return a1;
    }
  }
  else
  {
    if (!v23)
    {
      v41 = *v18;
      v42 = *v17;
      *v17 = *v18;
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRelease(v42);
      v43 = v19[5];
      v44 = (char *)v17 + v43;
      v45 = (char *)v18 + v43;
      v46 = type metadata accessor for Date(0);
      v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 24);
      v47(v44, v45, v46);
      sub_100022800(0);
      v47(&v44[*(int *)(v48 + 36)], &v45[*(int *)(v48 + 36)], v46);
      v49 = v19[6];
      v50 = (char *)v17 + v49;
      v51 = (char *)v18 + v49;
      v52 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 24))(v50, v51, v52);
      v53 = v19[7];
      v54 = (_QWORD *)((char *)v17 + v53);
      v55 = (_QWORD *)((char *)v18 + v53);
      *v54 = *v55;
      v54[1] = v55[1];
      v56 = v19[8];
      v57 = (char *)v17 + v56;
      v58 = (char *)v18 + v56;
      v59 = v58[8];
      *(_QWORD *)v57 = *(_QWORD *)v58;
      v57[8] = v59;
      *((_BYTE *)v17 + v19[9]) = *((_BYTE *)v18 + v19[9]);
      return a1;
    }
    sub_10001DF70((uint64_t)v17, type metadata accessor for PreparedSparkline);
  }
  sub_100007248(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  return a1;
}

uint64_t sub_1000B645C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;

  v6 = type metadata accessor for Stock(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for WidgetQuote(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_100007248(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = (int *)type metadata accessor for PreparedSparkline(0);
  v17 = *((_QWORD *)v16 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    sub_100007248(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    v19 = v16[5];
    v20 = (char *)v14 + v19;
    v21 = (char *)v15 + v19;
    v22 = type metadata accessor for Date(0);
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
    v23(v20, v21, v22);
    sub_100022800(0);
    v23(&v20[*(int *)(v24 + 36)], &v21[*(int *)(v24 + 36)], v22);
    v25 = v16[6];
    v26 = (char *)v14 + v25;
    v27 = (char *)v15 + v25;
    v28 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
    *(_OWORD *)((char *)v14 + v16[7]) = *(_OWORD *)((char *)v15 + v16[7]);
    v29 = v16[8];
    v30 = (char *)v14 + v29;
    v31 = (char *)v15 + v29;
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    *((_BYTE *)v14 + v16[9]) = *((_BYTE *)v15 + v16[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_1000B6684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t, int *);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;

  v6 = type metadata accessor for Stock(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for WidgetQuote(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    sub_100007248(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = *(int *)(a3 + 24);
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = (int *)type metadata accessor for PreparedSparkline(0);
  v20 = *((_QWORD *)v19 - 1);
  v21 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      *v17 = *v18;
      v25 = v19[5];
      v26 = (char *)v17 + v25;
      v27 = (char *)v18 + v25;
      v28 = type metadata accessor for Date(0);
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32);
      v29(v26, v27, v28);
      sub_100022800(0);
      v29(&v26[*(int *)(v30 + 36)], &v27[*(int *)(v30 + 36)], v28);
      v31 = v19[6];
      v32 = (char *)v17 + v31;
      v33 = (char *)v18 + v31;
      v34 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
      *(_OWORD *)((char *)v17 + v19[7]) = *(_OWORD *)((char *)v18 + v19[7]);
      v35 = v19[8];
      v36 = (char *)v17 + v35;
      v37 = (char *)v18 + v35;
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v37[8];
      *((_BYTE *)v17 + v19[9]) = *((_BYTE *)v18 + v19[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
      return a1;
    }
  }
  else
  {
    if (!v23)
    {
      v38 = *v17;
      *v17 = *v18;
      swift_bridgeObjectRelease(v38);
      v39 = v19[5];
      v40 = (char *)v17 + v39;
      v41 = (char *)v18 + v39;
      v42 = type metadata accessor for Date(0);
      v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 40);
      v43(v40, v41, v42);
      sub_100022800(0);
      v43(&v40[*(int *)(v44 + 36)], &v41[*(int *)(v44 + 36)], v42);
      v45 = v19[6];
      v46 = (char *)v17 + v45;
      v47 = (char *)v18 + v45;
      v48 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(v46, v47, v48);
      *(_OWORD *)((char *)v17 + v19[7]) = *(_OWORD *)((char *)v18 + v19[7]);
      v49 = v19[8];
      v50 = (char *)v17 + v49;
      v51 = (char *)v18 + v49;
      v50[8] = v51[8];
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *((_BYTE *)v17 + v19[9]) = *((_BYTE *)v18 + v19[9]);
      return a1;
    }
    sub_10001DF70((uint64_t)v17, type metadata accessor for PreparedSparkline);
  }
  sub_100007248(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  return a1;
}

uint64_t sub_1000B69F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B6A00);
}

uint64_t sub_1000B6A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for Stock(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    sub_100007248(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      sub_100007248(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
      v8 = v14;
      v12 = *(_QWORD *)(v14 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1000B6AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B6AC4);
}

uint64_t sub_1000B6AC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for Stock(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_100007248(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      sub_100007248(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
      v10 = v16;
      v14 = *(_QWORD *)(v16 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000B6B84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  v2 = type metadata accessor for Stock(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100007248(319, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100007248(319, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_1000B6C44(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  v3 = v1;
  sub_1000B7BA0(0, &qword_100117AF8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedEncodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v23 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_1000B7B10();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WidgetStock.CodingKeys, &type metadata for WidgetStock.CodingKeys, v12, v10, v11);
  v26 = 0;
  v13 = type metadata accessor for Stock(0);
  v14 = sub_100003D3C(&qword_100117B00, (uint64_t (*)(uint64_t))&type metadata accessor for Stock, (uint64_t)&protocol conformance descriptor for Stock);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v26, v6, v13, v14);
  if (!v2)
  {
    v15 = type metadata accessor for WidgetStock(0);
    v16 = v3 + *(int *)(v15 + 20);
    v25 = 1;
    v17 = type metadata accessor for WidgetQuote(0);
    v18 = sub_100003D3C(&qword_100114728, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t)&protocol conformance descriptor for WidgetQuote);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v25, v6, v17, v18);
    v19 = v3 + *(int *)(v15 + 24);
    v24 = 2;
    v20 = type metadata accessor for PreparedSparkline(0);
    v21 = sub_100003D3C(&qword_100116918, type metadata accessor for PreparedSparkline, (uint64_t)&unk_1000DFA20);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v24, v6, v20, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000B6E34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  char v43;
  char v44;

  v34 = a2;
  sub_100007248(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  __chkstk_darwin(v3);
  v35 = (char *)v33 - v4;
  sub_100007248(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  __chkstk_darwin(v5);
  v36 = (char *)v33 - v6;
  v37 = type metadata accessor for Stock(0);
  v7 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v38 = (_QWORD *)((char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000B7BA0(0, &qword_100117AE0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedDecodingContainer);
  v39 = v9;
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - v11;
  v13 = type metadata accessor for WidgetStock(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v16 = a1[4];
  sub_100007184(a1, v17);
  v18 = sub_1000B7B10();
  v40 = v12;
  v19 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WidgetStock.CodingKeys, &type metadata for WidgetStock.CodingKeys, v18, v17, v16);
  if (v19)
    return sub_100007164(a1);
  v20 = v36;
  v21 = v10;
  v41 = v15;
  v44 = 0;
  v22 = sub_100003D3C(&qword_100117AF0, (uint64_t (*)(uint64_t))&type metadata accessor for Stock, (uint64_t)&protocol conformance descriptor for Stock);
  v23 = v37;
  v24 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v38, v37, &v44, v39, v37, v22);
  v33[1] = v7;
  (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 32))(v41, v38, v23);
  v25 = type metadata accessor for WidgetQuote(0);
  v43 = 1;
  v26 = sub_100003D3C(&qword_100114700, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t)&protocol conformance descriptor for WidgetQuote);
  v27 = (uint64_t)v20;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v25, &v43, v24, v25, v26);
  v38 = (_QWORD *)v13;
  v28 = (uint64_t)v41;
  sub_1000B7B54(v27, (uint64_t)&v41[*(int *)(v13 + 20)], &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  v29 = type metadata accessor for PreparedSparkline(0);
  v42 = 2;
  v30 = sub_100003D3C(&qword_1001168C0, type metadata accessor for PreparedSparkline, (uint64_t)&unk_1000DFA48);
  v31 = (uint64_t)v35;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v29, &v42, v39, v29, v30);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v40, v39);
  sub_1000B7B54(v31, v28 + *((int *)v38 + 6), (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  sub_10005FE64(v28, v34);
  sub_100007164(a1);
  return sub_10001DF70(v28, type metadata accessor for WidgetStock);
}

uint64_t sub_1000B723C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65746F7571;
  if (*v0 != 1)
    v1 = 0x6E696C6B72617073;
  if (*v0)
    return v1;
  else
    return 0x6B636F7473;
}

uint64_t sub_1000B7294@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B7DA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B72B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B7B10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B72E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B7B10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B730C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B6E34(a1, a2);
}

uint64_t sub_1000B7320(_QWORD *a1)
{
  return sub_1000B6C44(a1);
}

BOOL sub_1000B7334(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t *v61;
  uint64_t *v63;
  char v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v80 = a2;
  v3 = type metadata accessor for PreparedSparkline(0);
  v74 = *(_QWORD *)(v3 - 8);
  v75 = v3;
  __chkstk_darwin(v3);
  v72 = (uint64_t *)((char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000B7A30(0, &qword_100115A60, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  v73 = v5;
  __chkstk_darwin(v5);
  v76 = (uint64_t)&v65 - v6;
  sub_100007248(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v12 = (char *)&v65 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v65 - v14;
  v16 = type metadata accessor for WidgetQuote(0);
  v77 = *(_QWORD *)(v16 - 8);
  v78 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B7A30(0, &qword_100115A50, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  v20 = v19;
  __chkstk_darwin(v19);
  v79 = (uint64_t)&v65 - v21;
  sub_100007248(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  __chkstk_darwin(v22);
  v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v65 - v26;
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v65 - v30;
  v32 = v80;
  if ((static Stock.== infix(_:_:)(a1, v29) & 1) == 0)
    return 0;
  v70 = v15;
  v71 = v24;
  v66 = v9;
  v67 = v18;
  v69 = v12;
  v33 = type metadata accessor for WidgetStock(0);
  v34 = a1;
  sub_100007294(a1 + *(int *)(v33 + 20), (uint64_t)v31, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  v68 = v33;
  sub_100007294(v32 + *(int *)(v33 + 20), (uint64_t)v27, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  v35 = v79;
  v36 = v79 + *(int *)(v20 + 48);
  sub_100007294((uint64_t)v31, v79, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  sub_100007294((uint64_t)v27, v36, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  v37 = v77;
  v38 = v78;
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
  v40 = (uint64_t)v27;
  if (v39(v35, 1, v78) != 1)
  {
    v42 = v35;
    v43 = (uint64_t)v71;
    sub_100007294(v42, (uint64_t)v71, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
    if (v39(v36, 1, v38) != 1)
    {
      v65 = v34;
      v48 = v43;
      v49 = v67;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v67, v36, v38);
      v50 = sub_100003D3C(&qword_100115A68, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t)&protocol conformance descriptor for WidgetQuote);
      v51 = v38;
      v52 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v49, v38, v50);
      v53 = *(void (**)(char *, uint64_t))(v37 + 8);
      v53(v49, v51);
      sub_1000072E0((uint64_t)v27, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
      sub_1000072E0((uint64_t)v31, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
      v53((char *)v48, v51);
      sub_1000072E0(v79, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
      if ((v52 & 1) == 0)
        return 0;
      goto LABEL_9;
    }
    v41 = v79;
    sub_1000072E0(v40, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
    sub_1000072E0((uint64_t)v31, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v43, v38);
LABEL_7:
    v44 = &qword_100115A50;
    v45 = &qword_100111ED0;
    v46 = (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote;
    v47 = v41;
LABEL_15:
    sub_1000B7A90(v47, v44, v45, v46);
    return 0;
  }
  v41 = v35;
  v65 = v34;
  sub_1000072E0(v40, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  sub_1000072E0((uint64_t)v31, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  if (v39(v36, 1, v38) != 1)
    goto LABEL_7;
  sub_1000072E0(v35, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
LABEL_9:
  v54 = v68;
  v55 = (uint64_t)v70;
  sub_100007294(v65 + *(int *)(v68 + 24), (uint64_t)v70, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  v56 = (uint64_t)v69;
  sub_100007294(v80 + *(int *)(v54 + 24), (uint64_t)v69, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  v57 = v76;
  v58 = v76 + *(int *)(v73 + 48);
  sub_100007294(v55, v76, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  sub_100007294(v56, v58, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  v59 = v75;
  v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  if (v60(v57, 1, v75) == 1)
  {
    sub_1000072E0(v56, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
    sub_1000072E0(v55, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
    if (v60(v58, 1, v59) == 1)
    {
      sub_1000072E0(v57, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
      return 1;
    }
    goto LABEL_14;
  }
  v61 = v66;
  sub_100007294(v57, (uint64_t)v66, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  if (v60(v58, 1, v59) == 1)
  {
    sub_1000072E0(v56, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
    sub_1000072E0(v55, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
    sub_10001DF70((uint64_t)v61, type metadata accessor for PreparedSparkline);
LABEL_14:
    v44 = &qword_100115A60;
    v45 = (unint64_t *)&qword_100111ED8;
    v46 = type metadata accessor for PreparedSparkline;
    v47 = v57;
    goto LABEL_15;
  }
  v63 = v72;
  sub_1000B7ACC(v58, (uint64_t)v72);
  v64 = sub_10006C5DC(v61, v63);
  sub_10001DF70((uint64_t)v63, type metadata accessor for PreparedSparkline);
  sub_1000072E0(v56, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  sub_1000072E0(v55, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  sub_10001DF70((uint64_t)v61, type metadata accessor for PreparedSparkline);
  sub_1000072E0(v57, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  return (v64 & 1) != 0;
}

void sub_1000B7A30(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  unint64_t TupleTypeMetadata2;
  uint64_t v8;

  if (!*a2)
  {
    sub_100007248(255, a3, a4);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v6, v6, 0, 0);
    if (!v8)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_1000B7A90(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  sub_1000B7A30(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_1000B7ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PreparedSparkline(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000B7B10()
{
  unint64_t result;

  result = qword_100117AE8;
  if (!qword_100117AE8)
  {
    result = swift_getWitnessTable(&unk_1000E364C, &type metadata for WidgetStock.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100117AE8);
  }
  return result;
}

uint64_t sub_1000B7B54(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_100007248(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void sub_1000B7BA0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1000B7B10();
    v7 = a3(a1, &type metadata for WidgetStock.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for WidgetStock.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000B7C48 + 4 * byte_1000E34FD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000B7C7C + 4 * byte_1000E34F8[v4]))();
}

uint64_t sub_1000B7C7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B7C84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B7C8CLL);
  return result;
}

uint64_t sub_1000B7C98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B7CA0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000B7CA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B7CAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WidgetStock.CodingKeys()
{
  return &type metadata for WidgetStock.CodingKeys;
}

unint64_t sub_1000B7CCC()
{
  unint64_t result;

  result = qword_100117B08;
  if (!qword_100117B08)
  {
    result = swift_getWitnessTable(&unk_1000E3624, &type metadata for WidgetStock.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100117B08);
  }
  return result;
}

unint64_t sub_1000B7D14()
{
  unint64_t result;

  result = qword_100117B10;
  if (!qword_100117B10)
  {
    result = swift_getWitnessTable(&unk_1000E3594, &type metadata for WidgetStock.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100117B10);
  }
  return result;
}

unint64_t sub_1000B7D5C()
{
  unint64_t result;

  result = qword_100117B18;
  if (!qword_100117B18)
  {
    result = swift_getWitnessTable(&unk_1000E35BC, &type metadata for WidgetStock.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100117B18);
  }
  return result;
}

uint64_t sub_1000B7DA0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6B636F7473 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B636F7473, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65746F7571 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746F7571, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E696C6B72617073 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E696C6B72617073, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1000B7EF0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  _QWORD v18[6];

  v1 = v0;
  *(_QWORD *)(v0 + 16) = 0;
  v2 = sub_100003A40();
  v3 = (void *)static OS_os_log.default.getter(v2);
  sub_100003A7C(0);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1000DB170;
  v6 = (void *)static NSNotificationName.stocksDidClearSharedCache.getter();
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_100003B2C();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  v11 = static os_log_type_t.default.getter(v10);
  os_log(_:dso:log:type:_:)("will listen for shared cache distributed notification, name=%{public}@", 70, 2, &_mh_execute_header, v3, v11, v5);

  swift_bridgeObjectRelease(v5);
  v12 = objc_msgSend((id)objc_opt_self(NSDistributedNotificationCenter), "defaultCenter");
  v13 = (void *)static NSNotificationName.stocksDidClearSharedCache.getter();
  v18[4] = sub_1000B8084;
  v18[5] = 0;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_1000B817C;
  v18[3] = &unk_1001099B8;
  v14 = _Block_copy(v18);
  v15 = objc_msgSend(v12, "addObserverForName:object:queue:usingBlock:", v13, 0, 0, v14);
  _Block_release(v14);

  v16 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v15;
  swift_unknownObjectRelease(v16);
  return v1;
}

void sub_1000B8084()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __n128 v11;
  uint64_t v12;

  sub_100003A40();
  v0 = (void *)((uint64_t (*)(void))static OS_os_log.default.getter)();
  sub_100003A7C(0);
  v2 = swift_allocObject(v1, 72, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1000DB170;
  v3 = (void *)static NSNotificationName.stocksDidClearSharedCache.getter();
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *(_QWORD *)(v2 + 56) = &type metadata for String;
  *(_QWORD *)(v2 + 64) = sub_100003B2C();
  *(_QWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 40) = v6;
  v8 = static os_log_type_t.default.getter(v7);
  os_log(_:dso:log:type:_:)("did receive shared cache distributed notification, name=%{public}@", 66, 2, &_mh_execute_header, v0, v8, v2);

  v9 = swift_bridgeObjectRelease(v2);
  v10 = (void *)static OS_os_log.default.getter(v9);
  v12 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)("will exit due to shared cache being cleared", 43, 2, &_mh_execute_header, v10, v12, _swiftEmptyArrayStorage);

  exit(0);
}

uint64_t sub_1000B817C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1000B8220()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v1 = v0;
  v2 = sub_100003A40();
  v3 = (void *)static OS_os_log.default.getter(v2);
  sub_100003A7C(0);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1000DB170;
  v6 = (void *)static NSNotificationName.stocksDidClearSharedCache.getter();
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_100003B2C();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  v11 = static os_log_type_t.default.getter(v10);
  os_log(_:dso:log:type:_:)("will stop listening for shared cache distributed notification, name=%{public}@", 78, 2, &_mh_execute_header, v3, v11, v5);

  swift_bridgeObjectRelease(v5);
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  return v1;
}

uint64_t sub_1000B82F8()
{
  uint64_t v0;

  sub_1000B8220();
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for WidgetTerminationService()
{
  return objc_opt_self(_TtC12StocksWidget24WidgetTerminationService);
}

uint64_t sub_1000B8338(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B8348(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t type metadata accessor for Localized()
{
  return objc_opt_self(_TtC12StocksWidgetP33_E06628E75237493AECC9D16CC2811AEF9Localized);
}

ValueMetadata *type metadata accessor for TodayBackgroundView()
{
  return &type metadata for TodayBackgroundView;
}

uint64_t sub_1000B8380(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9FF0, 1);
}

double sub_1000B8390@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double result;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v3 = type metadata accessor for Color.RGBColorSpace(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static Color.black.getter(v7);
  v9 = enum case for Color.RGBColorSpace.sRGB(_:);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v10(v6, enum case for Color.RGBColorSpace.sRGB(_:), v3);
  v11 = Color.init(_:red:green:blue:opacity:)(v6, 0.2, 0.2, 0.2, 1.0);
  v10(v6, v9, v3);
  v12 = Color.init(_:red:green:blue:opacity:)(v6, 0.101960784, 0.101960784, 0.101960784, 1.0);
  sub_1000B8594();
  v14 = swift_allocObject(v13, 48, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1000DD060;
  *(_QWORD *)(v14 + 32) = v11;
  *(_QWORD *)(v14 + 40) = v12;
  v27 = v14;
  specialized Array._endMutation()(v14);
  v15 = v27;
  swift_retain(v11);
  swift_retain(v12);
  v16 = Gradient.init(colors:)(v15);
  v17 = static UnitPoint.top.getter();
  v19 = v18;
  v20 = static UnitPoint.bottom.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)(&v27, v16, v17, v19, v20, v21);
  v22 = v27;
  v26 = v28;
  v23 = v29;
  v24 = v30;
  swift_release(v12);
  swift_release(v11);
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v22;
  result = *(double *)&v26;
  *(_OWORD *)(a1 + 16) = v26;
  *(_QWORD *)(a1 + 32) = v23;
  *(_QWORD *)(a1 + 40) = v24;
  *(_QWORD *)(a1 + 48) = 0x3FE0000000000000;
  return result;
}

double sub_1000B8538@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  double result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[3];
  double v12;

  v3 = static Alignment.center.getter(a1);
  v5 = v4;
  sub_1000B8390((uint64_t)v11, v6);
  result = v12;
  v9 = v11[1];
  v8 = v11[2];
  v10 = v11[0];
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v8;
  *(double *)(a2 + 64) = result;
  return result;
}

void sub_1000B8594()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100114548)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage(0, &type metadata for Color);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100114548);
  }
}

uint64_t sub_1000B85E8()
{
  return sub_100003D3C(&qword_100117C58, (uint64_t (*)(uint64_t))sub_1000B8614, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

void sub_1000B8614(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100117C60)
  {
    sub_1000B868C(255);
    v3 = v2;
    v4 = sub_100003D3C(qword_100117C80, (uint64_t (*)(uint64_t))sub_1000B868C, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v5 = type metadata accessor for ZStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100117C60);
  }
}

void sub_1000B868C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100117C68)
  {
    sub_1000B86E0(255);
    v3 = type metadata accessor for TupleView(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100117C68);
  }
}

void sub_1000B86E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_100117C70)
  {
    sub_1000B8744();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for Color, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100117C70);
  }
}

void sub_1000B8744()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100117C78)
  {
    v0 = type metadata accessor for ModifiedContent(0, &type metadata for LinearGradient, &type metadata for _OpacityEffect);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100117C78);
  }
}

uint64_t sub_1000B87A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 64);
}

uint64_t sub_1000B87A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t WitnessTable;
  uint64_t result;
  unint64_t v5;
  _QWORD v6[7];

  v2 = type metadata accessor for Array(255, *(_QWORD *)(a1 + 16));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v2);
  result = type metadata accessor for NonEmpty(319, v2, WitnessTable);
  if (v5 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[4] = &unk_1000E37D8;
    v6[5] = &unk_1000E37D8;
    v6[6] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 7, v6, a1 + 48);
    return 0;
  }
  return result;
}

_QWORD *sub_1000B8864(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for Array(255, *(_QWORD *)(a3 + 16));
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
    v9 = type metadata accessor for NonEmpty(0, v7, WitnessTable);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = *(int *)(a3 + 56);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 52)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 52));
    *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
    v11 = *(int *)(a3 + 64);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 60)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 60));
    *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
    v12 = *(int *)(a3 + 72);
    *((_BYTE *)a1 + *(int *)(a3 + 68)) = *((_BYTE *)a2 + *(int *)(a3 + 68));
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
  }
  swift_retain(v15);
  return a1;
}

uint64_t sub_1000B894C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;

  v4 = type metadata accessor for Array(255, *(_QWORD *)(a2 + 16));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  v6 = type metadata accessor for NonEmpty(0, v4, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 72) + 8));
}

uint64_t sub_1000B89C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for Array(255, *(_QWORD *)(a3 + 16));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v8 = type metadata accessor for NonEmpty(0, v6, WitnessTable);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
  v9 = *(int *)(a3 + 56);
  *(_QWORD *)(a1 + *(int *)(a3 + 52)) = *(_QWORD *)(a2 + *(int *)(a3 + 52));
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = *(int *)(a3 + 64);
  *(_QWORD *)(a1 + *(int *)(a3 + 60)) = *(_QWORD *)(a2 + *(int *)(a3 + 60));
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = *(int *)(a3 + 72);
  *(_BYTE *)(a1 + *(int *)(a3 + 68)) = *(_BYTE *)(a2 + *(int *)(a3 + 68));
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_retain(v14);
  return a1;
}

uint64_t sub_1000B8A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Array(255, *(_QWORD *)(a3 + 16));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v8 = type metadata accessor for NonEmpty(0, v6, WitnessTable);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(a1, a2, v8);
  *(_QWORD *)(a1 + *(int *)(a3 + 52)) = *(_QWORD *)(a2 + *(int *)(a3 + 52));
  *(_QWORD *)(a1 + *(int *)(a3 + 56)) = *(_QWORD *)(a2 + *(int *)(a3 + 56));
  *(_QWORD *)(a1 + *(int *)(a3 + 60)) = *(_QWORD *)(a2 + *(int *)(a3 + 60));
  *(_BYTE *)(a1 + *(int *)(a3 + 64)) = *(_BYTE *)(a2 + *(int *)(a3 + 64));
  *(_BYTE *)(a1 + *(int *)(a3 + 68)) = *(_BYTE *)(a2 + *(int *)(a3 + 68));
  v9 = *(int *)(a3 + 72);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  v12 = v11[1];
  v13 = v10[1];
  *v10 = *v11;
  v10[1] = v12;
  swift_retain(v12);
  swift_release(v13);
  return a1;
}

uint64_t sub_1000B8B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for Array(255, *(_QWORD *)(a3 + 16));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v8 = type metadata accessor for NonEmpty(0, v6, WitnessTable);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
  v9 = *(int *)(a3 + 56);
  *(_QWORD *)(a1 + *(int *)(a3 + 52)) = *(_QWORD *)(a2 + *(int *)(a3 + 52));
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = *(int *)(a3 + 64);
  *(_QWORD *)(a1 + *(int *)(a3 + 60)) = *(_QWORD *)(a2 + *(int *)(a3 + 60));
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = *(int *)(a3 + 72);
  *(_BYTE *)(a1 + *(int *)(a3 + 68)) = *(_BYTE *)(a2 + *(int *)(a3 + 68));
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_1000B8C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Array(255, *(_QWORD *)(a3 + 16));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v8 = type metadata accessor for NonEmpty(0, v6, WitnessTable);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(a1, a2, v8);
  v9 = *(int *)(a3 + 56);
  *(_QWORD *)(a1 + *(int *)(a3 + 52)) = *(_QWORD *)(a2 + *(int *)(a3 + 52));
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = *(int *)(a3 + 64);
  *(_QWORD *)(a1 + *(int *)(a3 + 60)) = *(_QWORD *)(a2 + *(int *)(a3 + 60));
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = *(int *)(a3 + 72);
  *(_BYTE *)(a1 + *(int *)(a3 + 68)) = *(_BYTE *)(a2 + *(int *)(a3 + 68));
  v12 = *(_QWORD *)(a1 + v11 + 8);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  swift_release(v12);
  return a1;
}

uint64_t sub_1000B8CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B8CDC);
}

uint64_t sub_1000B8CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v6 = type metadata accessor for Array(255, *(_QWORD *)(a3 + 16));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v8 = type metadata accessor for NonEmpty(0, v6, WitnessTable);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, a2, v8);
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 72));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000B8D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B8D8C);
}

uint64_t sub_1000B8D8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t result;
  uint64_t v11;

  v8 = type metadata accessor for Array(255, *(_QWORD *)(a4 + 16));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  result = type metadata accessor for NonEmpty(0, v8, WitnessTable);
  v11 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 72)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TickerGrid(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for TickerGrid);
}

uint64_t sub_1000B8E44(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &unk_1000EA154, 1);
}

uint64_t sub_1000B8E78(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    __chkstk_darwin(a1);
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return TupleView.init(_:)(v8, TupleTypeMetadata);
  }
  __chkstk_darwin(a1);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2);
  __chkstk_darwin(TupleTypeMetadata);
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)(v8, TupleTypeMetadata);
}

uint64_t sub_1000B902C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t WitnessTable;
  _QWORD v25[2];
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v8 = v7;
  v25[0] = a6;
  v25[1] = a7;
  v14 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for _LayoutRoot(0, v17, v18);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)v25 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v16, v8, a3, v20);
  _LayoutRoot.init(_:)(v16, a3, a5);
  v27 = a3;
  v28 = a4;
  v29 = a5;
  v30 = v25[0];
  v31 = a1;
  v32 = a2;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _LayoutRoot<A>, v19);
  return _VariadicView.Tree.init(_:content:)(v22, sub_1000BBA88, v26, v19, a4, WitnessTable);
}

uint64_t sub_1000B915C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v14 - v11, a1, a2);
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_1000B9220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v14 - v11, a1, a3);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_1000B92E4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t WitnessTable;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  void (*v52)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char v64[16];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;

  v3 = v2;
  v63 = a2;
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v61 = *(_QWORD *)(v5 - 8);
  v62 = v5;
  __chkstk_darwin(v5);
  v60 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BB3A0(255);
  v8 = v7;
  v58 = *(_QWORD *)(a1 + 16);
  v59 = *(_QWORD *)(a1 + 32);
  v10 = type metadata accessor for GridCell(255, v58, v59, v9);
  v11 = type metadata accessor for Array(255, v10);
  v12 = *(_QWORD *)(a1 + 24);
  sub_100024258();
  v57 = v12;
  v14 = type metadata accessor for ModifiedContent(255, v12, v13);
  v15 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v16 = type metadata accessor for ModifiedContent(255, v14, v15);
  v17 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _OpacityEffect);
  v18 = type metadata accessor for _ConditionalContent(255, v16, v17);
  sub_1000BB4C0(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v18, v19, 0, 0);
  v21 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v21);
  v23 = type metadata accessor for VStack(255, v21, WitnessTable);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for [A], v11);
  v73 = v11;
  v74 = &type metadata for String;
  v75 = v23;
  v76 = v24;
  v77 = &protocol witness table for String;
  v25 = type metadata accessor for ForEach(255, &v73);
  v26 = sub_100003D3C(&qword_100117D48, (uint64_t (*)(uint64_t))sub_1000BB3A0, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
  v27 = type metadata accessor for _VariadicView.Tree(0, v8, v25, v26);
  v56 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v55 = (uint64_t)&v54 - v28;
  v29 = sub_100003D3C(&qword_100117D50, (uint64_t (*)(uint64_t))sub_1000BB3A0, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
  v72 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v23);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v25);
  v70 = v29;
  v71 = v30;
  v54 = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v27);
  v73 = v27;
  v74 = (void *)v54;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v73, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 0);
  v32 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v34 = (char *)&v54 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v37 = (char *)&v54 - v36;
  v38 = *(double *)(v2 + *(int *)(a1 + 60));
  v39 = *(_QWORD *)(v2 + *(int *)(a1 + 56));
  v41 = static HorizontalAlignment.center.getter(v40);
  v42 = sub_1000B9908(v41, 0, 0, *(_QWORD *)(v3 + *(int *)(a1 + 52)));
  v43 = *(_QWORD *)(a1 + 40);
  v44 = (double *)swift_allocObject(&unk_100109AC8, 72, 7);
  v45 = v58;
  v46 = v57;
  *((_QWORD *)v44 + 2) = v58;
  *((_QWORD *)v44 + 3) = v46;
  v47 = v59;
  *((_QWORD *)v44 + 4) = v59;
  *((_QWORD *)v44 + 5) = v43;
  v44[6] = v38;
  *((_QWORD *)v44 + 7) = v39;
  *((_QWORD *)v44 + 8) = v42;
  v65 = v45;
  v66 = v46;
  v67 = v47;
  v68 = v43;
  v69 = v3;
  v48 = v55;
  sub_1000B9724((uint64_t)sub_1000BB57C, (uint64_t)v64, v39, (uint64_t)v42, v45, v46, v47, v55, v38);
  swift_release(v44);
  v49 = v60;
  static AccessibilityChildBehavior.contain.getter(v50);
  View.accessibilityElement(children:)(v49, v27, v54);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v49, v62);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v48, v27);
  v51 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
  v51(v37, v34, OpaqueTypeMetadata2);
  v52 = *(void (**)(char *, uint64_t))(v32 + 8);
  v52(v34, OpaqueTypeMetadata2);
  v51(v63, v37, OpaqueTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v52)(v37, OpaqueTypeMetadata2);
}

uint64_t sub_1000B9724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t TupleTypeMetadata2;
  uint64_t v28;
  uint64_t WitnessTable;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[8];

  *(double *)&v35[5] = a9;
  v35[6] = a3;
  v35[7] = a4;
  sub_1000BB418(0);
  v16 = v15;
  v18 = type metadata accessor for GridCell(255, a5, a7, v17);
  v19 = type metadata accessor for Array(255, v18);
  sub_100024258();
  v21 = type metadata accessor for ModifiedContent(255, a6, v20);
  v22 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v23 = type metadata accessor for ModifiedContent(255, v21, v22);
  v24 = type metadata accessor for ModifiedContent(255, a6, &type metadata for _OpacityEffect);
  v25 = type metadata accessor for _ConditionalContent(255, v23, v24);
  sub_1000BB4C0(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v25, v26, 0, 0);
  v28 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v28);
  v30 = type metadata accessor for VStack(255, v28, WitnessTable);
  v35[0] = v19;
  v35[1] = &type metadata for String;
  v35[2] = v30;
  v35[3] = swift_getWitnessTable(&protocol conformance descriptor for [A], v19);
  v35[4] = &protocol witness table for String;
  v31 = type metadata accessor for ForEach(0, v35);
  v32 = sub_100003D3C(&qword_100117D20, (uint64_t (*)(uint64_t))sub_1000BB418, (uint64_t)&unk_1000DC7A0);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v30);
  v33 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v31);
  return sub_1000B902C(a1, a2, v16, v31, v32, v33, a8);
}

_QWORD *sub_1000B9908(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v9;
  char *v10;

  if (a4 < 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    v4 = a4;
    if (a4)
    {
      result = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a4, &type metadata for VStackLayout);
      result[2] = v4;
      v9 = 4;
      do
      {
        v10 = (char *)&result[v9];
        *(_QWORD *)v10 = a1;
        *((_QWORD *)v10 + 1) = a2;
        v10[16] = a3 & 1;
        v9 += 3;
        --v4;
      }
      while (v4);
    }
    else
    {
      return &_swiftEmptyArrayStorage;
    }
  }
  return result;
}

uint64_t sub_1000B99D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t WitnessTable;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  void (*v53)(char *, uint64_t);
  uint64_t KeyPath;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;

  v64 = a5;
  v66 = a6;
  v72 = a2;
  v73 = a3;
  v74 = a4;
  v75 = a5;
  v10 = type metadata accessor for TickerGrid(0, (uint64_t)&v72);
  v63 = *(_QWORD *)(v10 - 8);
  v65 = *(_QWORD *)(v63 + 64);
  __chkstk_darwin(v10);
  v62 = (char *)&KeyPath - v11;
  v12 = a2;
  v14 = type metadata accessor for GridCell(255, a2, a4, v13);
  v15 = type metadata accessor for Array(255, v14);
  sub_100024258();
  v17 = type metadata accessor for ModifiedContent(255, a3, v16);
  v18 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v19 = type metadata accessor for ModifiedContent(255, v17, v18);
  v20 = type metadata accessor for ModifiedContent(255, a3, &type metadata for _OpacityEffect);
  v21 = type metadata accessor for _ConditionalContent(255, v19, v20);
  sub_1000BB4C0(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v21, v22, 0, 0);
  v24 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v24);
  v26 = type metadata accessor for VStack(255, v24, WitnessTable);
  v57 = v26;
  v61 = v15;
  v59 = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
  v72 = v15;
  v73 = &type metadata for String;
  v74 = v26;
  v75 = v59;
  v76 = &protocol witness table for String;
  v27 = type metadata accessor for ForEach(0, &v72);
  v60 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v56 = (char *)&KeyPath - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v58 = (char *)&KeyPath - v30;
  v31 = *(_QWORD *)(a1 + *(int *)(v10 + 52));
  v32 = *(_QWORD *)(a1 + *(int *)(v10 + 56));
  v33 = type metadata accessor for Array(255, v12);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for [A], v33);
  v35 = type metadata accessor for NonEmpty(0, v33, v34);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for NonEmpty<A>, v35);
  sub_1000B9DA4(v31, v32, v35, v36, a4);
  v72 = v37;
  v67 = v12;
  v68 = a3;
  v38 = v12;
  v39 = a4;
  v40 = v64;
  v69 = a4;
  v70 = v64;
  KeyPath = swift_getKeyPath(&unk_1000E3850);
  v42 = v62;
  v41 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, a1, v10);
  v43 = *(unsigned __int8 *)(v41 + 80);
  v44 = v41;
  v45 = (v43 + 48) & ~v43;
  v46 = (char *)swift_allocObject(&unk_100109AA0, v45 + v65, v43 | 7);
  *((_QWORD *)v46 + 2) = v38;
  *((_QWORD *)v46 + 3) = a3;
  *((_QWORD *)v46 + 4) = v39;
  *((_QWORD *)v46 + 5) = v40;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(&v46[v45], v42, v10);
  v47 = v57;
  v48 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v57);
  v49 = v56;
  ForEach<>.init(_:id:content:)(&v72, KeyPath, sub_1000BB6B4, v46, v61, v47, v59, &protocol witness table for String, v48);
  v71 = v48;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v27);
  v50 = v60;
  v51 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
  v52 = v58;
  v51(v58, v49, v27);
  v53 = *(void (**)(char *, uint64_t))(v50 + 8);
  v53(v49, v27);
  v51(v66, v52, v27);
  return ((uint64_t (*)(char *, uint64_t))v53)(v52, v27);
}

void sub_1000B9DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t AssociatedConformanceWitness;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v50 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(a4 + 8));
  v10 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  __chkstk_darwin(v10);
  v57 = (char *)&v48 - v11;
  v13 = type metadata accessor for SpacerOr(0, AssociatedTypeWitness, a5, v12);
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - v14;
  v59 = AssociatedTypeWitness;
  v54 = a5;
  v55 = type metadata accessor for GridCell(0, AssociatedTypeWitness, a5, v16);
  __chkstk_darwin(v55);
  v18 = (char *)&v48 - v17;
  v19 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = swift_getAssociatedTypeWitness(0, a4);
  __chkstk_darwin(v23);
  v51 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a4, a3, v23, &protocol requirements base descriptor for Collection, &associated conformance descriptor for Collection.Collection.SubSequence: Collection)+ 8);
  v52 = v23;
  v24 = swift_getAssociatedTypeWitness(0, v51);
  v26 = __chkstk_darwin(v24);
  v58 = (char *)&v48 - v27;
  if (v50 < 1 || (v60 = a2 - 1, a2 < 1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v48 = v25;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))(v22, v56, a3, v26);
  v28 = v50 * a2;
  if ((unsigned __int128)(v50 * (__int128)a2) >> 64 == (v50 * a2) >> 63)
  {
    Collection.prefix(_:)(v28, a3, a4);
    dispatch thunk of Sequence.makeIterator()(v52);
    v29 = v55;
    v61 = static Array._allocateUninitialized(_:)(0, v55);
    v55 = type metadata accessor for Array(0, v29);
    Array.reserveCapacity(_:)(v28);
    v30 = 0;
    v31 = v50;
    v56 = v24;
    v49 = a2;
    while (v30 != v31)
    {
      if (v60)
      {
        v32 = v30 * a2;
        if ((unsigned __int128)(v30 * (__int128)a2) >> 64 != (v30 * a2) >> 63)
          goto LABEL_23;
        v53 = v30;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v51, v52, v24, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
        v34 = 0;
        v35 = v54;
        v36 = v59;
        while (1)
        {
          v37 = v57;
          dispatch thunk of IteratorProtocol.next()(v24, AssociatedConformanceWitness);
          sub_1000BB7D4(v37, v36, v35, v38, v15);
          v39 = v32 + v34;
          if (__OFADD__(v32, v34))
            break;
          v40 = __OFSUB__(0, v39);
          v41 = -v39;
          if (v40)
            goto LABEL_19;
          v36 = v59;
          sub_1000BB300((uint64_t)v15, v34 == 0, 0, v59, v35, (uint64_t)v18, (double)v41);
          Array.append(_:)(v18, v55);
          ++v34;
          v24 = v56;
          if (v60 == v34)
          {
            a2 = v49;
            v31 = v50;
            v30 = v53;
            goto LABEL_14;
          }
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v51, v52, v24, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
      v32 = v30 * a2;
LABEL_14:
      v42 = v57;
      dispatch thunk of IteratorProtocol.next()(v24, AssociatedConformanceWitness);
      v43 = v59;
      v44 = v54;
      sub_1000BB7D4(v42, v59, v54, v45, v15);
      v46 = v32 + v60;
      if (__OFADD__(v32, v60))
        goto LABEL_21;
      v40 = __OFSUB__(0, v46);
      v47 = -v46;
      if (v40)
        goto LABEL_22;
      ++v30;
      sub_1000BB300((uint64_t)v15, a2 == 1, 1, v43, v44, (uint64_t)v18, (double)v47);
      Array.append(_:)(v18, v55);
      v24 = v56;
      if (v30 == v31)
      {
        (*(void (**)(char *, uint64_t))(v48 + 8))(v58, v56);
        return;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_1000BA238(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v6);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, v2, a1);
  if (swift_getEnumCaseMultiPayload(v15, a1) == 1)
  {
    v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v8, v15, v4);
    v18 = UUID.uuidString.getter(v17);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v15, v9);
    dispatch thunk of Identifiable.id.getter(&v20, v9, *(_QWORD *)(a1 + 24));
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return v20;
  }
  return v18;
}

uint64_t sub_1000BA3B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _BYTE v37[16];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v34 = a2;
  v35 = a6;
  v36 = a7;
  sub_100024258();
  v12 = type metadata accessor for ModifiedContent(255, a4, v11);
  v13 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v14 = type metadata accessor for ModifiedContent(255, v12, v13);
  v15 = type metadata accessor for ModifiedContent(255, a4, &type metadata for _OpacityEffect);
  v16 = type metadata accessor for _ConditionalContent(255, v14, v15);
  sub_1000BB4C0(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v16, v17, 0, 0);
  v19 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v19);
  v21 = type metadata accessor for VStack(0, v19, WitnessTable);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v33 - v26;
  v38 = a3;
  v39 = a4;
  v40 = a5;
  v41 = v35;
  v42 = a1;
  v43 = v34;
  v29 = static HorizontalAlignment.center.getter(v28);
  VStack.init(alignment:spacing:content:)(v29, 0, 0, sub_1000BB73C, v37, v19, WitnessTable);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v21);
  v30 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v30(v27, v24, v21);
  v31 = *(void (**)(char *, uint64_t))(v22 + 8);
  v31(v24, v21);
  v30(v36, v27, v21);
  return ((uint64_t (*)(char *, uint64_t))v31)(v27, v21);
}

uint64_t sub_1000BA59C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t, __n128);
  uint64_t v58;
  int EnumCaseMultiPayload;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *);
  uint64_t v64;
  uint64_t WitnessTable;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  void (*v85)(char *, char *, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  double v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);
  char *v104;
  void (*v105)(char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t KeyPath;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(char *, uint64_t);
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  _QWORD v194[8];
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;

  v161 = a6;
  v174 = a2;
  v170 = a1;
  v169 = a7;
  v146 = type metadata accessor for Divider(0);
  v145 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v144 = (char *)&v141 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005E6E0(0);
  v165 = v11;
  v147 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v143 = (char *)&v141 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BB560(0);
  __chkstk_darwin(v13);
  v149 = (uint64_t)&v141 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v148 = (uint64_t)&v141 - v16;
  sub_1000BB4C0(0);
  v166 = v17;
  __chkstk_darwin(v17);
  v168 = (char *)&v141 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v167 = (char *)&v141 - v20;
  v21 = type metadata accessor for ModifiedContent(0, a4, &type metadata for _OpacityEffect);
  v156 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v23 = (char *)&v141 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v157 = (char *)&v141 - v25;
  v159 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v26);
  v152 = (char *)&v141 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v30 = (char *)&v141 - v29;
  sub_100024258();
  v175 = a4;
  v32 = type metadata accessor for ModifiedContent(0, a4, v31);
  v151 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v34 = (char *)&v141 - v33;
  v35 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v173 = v32;
  v36 = type metadata accessor for ModifiedContent(0, v32, v35);
  v153 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v155 = (char *)&v141 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v150 = (char *)&v141 - v39;
  __chkstk_darwin(v40);
  v154 = (char *)&v141 - v41;
  v171 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v42);
  v44 = (char *)&v141 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v47 = (char *)&v141 - v46;
  v177 = a3;
  v176 = a5;
  v49 = type metadata accessor for SpacerOr(0, a3, a5, v48);
  v50 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v52 = (char *)&v141 - v51;
  v172 = v21;
  v164 = type metadata accessor for _ConditionalContent(0, v36, v21);
  v162 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v163 = (char *)&v141 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __chkstk_darwin(v54);
  v160 = (char *)&v141 - v56;
  v57 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v50 + 16);
  v58 = v170;
  v57(v52, v170, v49, v55);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v52, v49);
  v158 = v36;
  if (EnumCaseMultiPayload == 1)
  {
    v60 = v177;
    v195 = v177;
    v196 = v175;
    v61 = v161;
    v197 = v176;
    v198 = v161;
    v62 = type metadata accessor for TickerGrid(0, (uint64_t)&v195);
    v63 = *(void (**)(char *))(v174 + *(int *)(v62 + 72));
    v64 = type metadata accessor for Array(255, v60);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v64);
    v66 = type metadata accessor for NonEmpty(0, v64, WitnessTable);
    NonEmpty.first.getter(v66);
    v67 = v152;
    v63(v44);
    (*(void (**)(char *, uint64_t))(v171 + 8))(v44, v60);
    v68 = v175;
    View.opacity(_:)(v175, v61, 0.0);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v67, v68);
    v194[6] = v61;
    v194[7] = &protocol witness table for _OpacityEffect;
    v69 = v172;
    v70 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v172);
    v71 = v156;
    v72 = *(void (**)(char *, char *, uint64_t))(v156 + 16);
    v73 = v157;
    v72(v157, v23, v69);
    v74 = *(void (**)(char *, uint64_t))(v71 + 8);
    v74(v23, v69);
    v72(v23, v73, v69);
    v75 = sub_100003D3C((unint64_t *)&qword_100114130, (uint64_t (*)(uint64_t))sub_100024258, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    v194[4] = v61;
    v194[5] = v75;
    v76 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v173);
    v77 = sub_100003D3C(&qword_100115CC8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    v194[2] = v76;
    v194[3] = v77;
    v78 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v36);
    v79 = v160;
    sub_1000B9220((uint64_t)v23, v36, v69, v78, v70);
    v74(v23, v69);
    v74(v73, v69);
    v80 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v52, v80);
    v82 = v61;
    v83 = v170;
    v84 = v79;
  }
  else
  {
    v85 = *(void (**)(char *, char *, uint64_t))(v171 + 32);
    v86 = v47;
    v142 = v47;
    v87 = v177;
    v85(v47, v52, v177);
    v88 = v175;
    v195 = v87;
    v196 = v175;
    v89 = v176;
    v90 = v161;
    v197 = v176;
    v198 = v161;
    v91 = type metadata accessor for TickerGrid(0, (uint64_t)&v195);
    (*(void (**)(char *))(v174 + *(int *)(v91 + 72)))(v86);
    v93 = (int *)type metadata accessor for GridCell(0, v87, v89, v92);
    v94 = sub_100054FE8(0, *(_BYTE *)(v58 + v93[9]), 0, *(_BYTE *)(v58 + v93[10]), v88, v90);
    (*(void (**)(char *, uint64_t, double))(v159 + 8))(v30, v88, v94);
    v95 = *(double *)(v58 + v93[11]);
    v96 = sub_100003D3C((unint64_t *)&qword_100114130, (uint64_t (*)(uint64_t))sub_100024258, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    v182 = v90;
    v183 = v96;
    v97 = v173;
    v98 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v173);
    v99 = v150;
    View.accessibilitySortPriority(_:)(v97, v98, v95);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v34, v97);
    v100 = sub_100003D3C(&qword_100115CC8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    v180 = v98;
    v181 = v100;
    v101 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v36);
    v83 = v58;
    v102 = v153;
    v103 = *(void (**)(char *, char *, uint64_t))(v153 + 16);
    v104 = v154;
    v103(v154, v99, v36);
    v105 = *(void (**)(char *, uint64_t))(v102 + 8);
    v105(v99, v36);
    v106 = (uint64_t)v155;
    v103(v155, v104, v36);
    v178 = v90;
    v179 = &protocol witness table for _OpacityEffect;
    v107 = v172;
    v108 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v172);
    v84 = v160;
    sub_1000B915C(v106, v36, v107, v101, v108);
    v105((char *)v106, v36);
    v105(v104, v36);
    (*(void (**)(char *, uint64_t))(v171 + 8))(v142, v177);
    v82 = v90;
  }
  v109 = v175;
  v110 = type metadata accessor for GridCell(0, v177, v176, v81);
  v111 = (uint64_t)v168;
  v112 = (uint64_t)v167;
  v113 = v165;
  v114 = v174;
  if ((*(_BYTE *)(v83 + *(int *)(v110 + 40)) & 1) != 0
    || (v195 = v177,
        v196 = v109,
        v197 = v176,
        v198 = v82,
        v115 = type metadata accessor for TickerGrid(0, (uint64_t)&v195),
        *(_BYTE *)(v114 + *(int *)(v115 + 68)) != 1))
  {
    sub_1000BB4DC(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 56))(v112, 1, 1, v125);
  }
  else
  {
    v116 = v115;
    if (*(_BYTE *)(v114 + *(int *)(v115 + 64)) == 1)
    {
      v117 = v144;
      Divider.init()(v115);
      LODWORD(v177) = *(_QWORD *)(v114 + *(int *)(v116 + 52)) == 1;
      KeyPath = swift_getKeyPath(&unk_1000E3890);
      v119 = v145;
      v120 = (uint64_t)v143;
      v121 = v146;
      (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v143, v117, v146);
      v122 = v120 + *(int *)(v113 + 36);
      *(_BYTE *)v122 = v177;
      *(_QWORD *)(v122 + 8) = KeyPath;
      *(_QWORD *)(v122 + 16) = 0;
      *(_QWORD *)(v122 + 24) = 0;
      *(_QWORD *)(v122 + 32) = 0;
      *(_BYTE *)(v122 + 40) = 0;
      (*(void (**)(char *, uint64_t))(v119 + 8))(v117, v121);
      v123 = v148;
      sub_10000ED3C(v120, v148, (uint64_t (*)(_QWORD))sub_10005E6E0);
      v124 = 0;
    }
    else
    {
      v124 = 1;
      v123 = v148;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v147 + 56))(v123, v124, 1, v113);
    v126 = v149;
    sub_10001DE2C(v123, v149, (uint64_t (*)(_QWORD))sub_1000BB560);
    *(_QWORD *)v111 = 0;
    *(_BYTE *)(v111 + 8) = 0;
    sub_1000BB4F8(0);
    v128 = v127;
    sub_10001DE2C(v126, v111 + *(int *)(v127 + 48), (uint64_t (*)(_QWORD))sub_1000BB560);
    v129 = v111 + *(int *)(v128 + 64);
    *(_QWORD *)v129 = 0;
    *(_BYTE *)(v129 + 8) = 0;
    sub_10001DF70(v123, (uint64_t (*)(_QWORD))sub_1000BB560);
    sub_10001DF70(v126, (uint64_t (*)(_QWORD))sub_1000BB560);
    sub_1000BB4DC(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 56))(v111, 0, 1, v130);
    sub_10000ED3C(v111, v112, (uint64_t (*)(_QWORD))sub_1000BB4C0);
  }
  v131 = v162;
  v132 = (uint64_t)v163;
  v133 = v164;
  (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v163, v84, v164);
  v195 = v132;
  sub_10001DE2C(v112, v111, (uint64_t (*)(_QWORD))sub_1000BB4C0);
  v196 = v111;
  v194[0] = v133;
  v194[1] = v166;
  v134 = sub_100003D3C((unint64_t *)&qword_100114130, (uint64_t (*)(uint64_t))sub_100024258, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
  v190 = v82;
  v191 = v134;
  v135 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v173);
  v136 = sub_100003D3C(&qword_100115CC8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v188 = v135;
  v189 = v136;
  v137 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v158);
  v186 = v82;
  v187 = &protocol witness table for _OpacityEffect;
  v138 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v172);
  v184 = v137;
  v185 = v138;
  v192 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v133);
  v193 = sub_1000BB758();
  sub_1000B8E78(&v195, 2uLL, (uint64_t)v194);
  sub_10001DF70(v112, (uint64_t (*)(_QWORD))sub_1000BB4C0);
  v139 = *(void (**)(char *, uint64_t))(v131 + 8);
  v139(v84, v133);
  sub_10001DF70(v111, (uint64_t (*)(_QWORD))sub_1000BB4C0);
  return ((uint64_t (*)(uint64_t, uint64_t))v139)(v132, v133);
}

int *sub_1000BB300@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v14;
  uint64_t v15;
  int *result;

  v14 = type metadata accessor for SpacerOr(0, a4, a5, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a6, a1, v14);
  result = (int *)type metadata accessor for GridCell(0, a4, a5, v15);
  *(_BYTE *)(a6 + result[9]) = a2;
  *(_BYTE *)(a6 + result[10]) = a3;
  *(double *)(a6 + result[11]) = a7;
  return result;
}

void sub_1000BB3A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100117D08)
  {
    sub_1000BB418(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_100117D20, (uint64_t (*)(uint64_t))sub_1000BB418, (uint64_t)&unk_1000DC7A0);
    v5 = type metadata accessor for _LayoutRoot(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100117D08);
  }
}

void sub_1000BB418(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_100117D10)
  {
    v2 = sub_1000BB470();
    v4 = type metadata accessor for EqualWidthColumnsLayout(a1, (uint64_t)&type metadata for VStackLayout, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_100117D10);
  }
}

unint64_t sub_1000BB470()
{
  unint64_t result;

  result = qword_100117D18;
  if (!qword_100117D18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VStackLayout, &type metadata for VStackLayout);
    atomic_store(result, (unint64_t *)&qword_100117D18);
  }
  return result;
}

uint64_t type metadata accessor for GridCell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100021720(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GridCell);
}

void sub_1000BB4C0(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100117D28, (uint64_t (*)(uint64_t))sub_1000BB4DC, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

void sub_1000BB4DC(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100117D30, (uint64_t (*)(uint64_t))sub_1000BB4F8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_1000BB4F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata3;
  uint64_t v4;

  if (!qword_100117D38)
  {
    sub_1000BB560(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, &type metadata for Spacer, v2, &type metadata for Spacer, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100117D38);
  }
}

void sub_1000BB560(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100117D40, (uint64_t (*)(uint64_t))sub_10005E6E0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

uint64_t sub_1000BB57C@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1000B99D0(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_1000BB58C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = type metadata accessor for SpacerOr(0, *(_QWORD *)(a2 + a1 - 32), *(_QWORD *)(a2 + a1 - 16), a3);
  result = sub_1000BA238(v5);
  *a4 = result;
  a4[1] = v7;
  return result;
}

uint64_t sub_1000BB5C8()
{
  return 32;
}

__n128 sub_1000BB5D4(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1000BB5E0()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t v13;
  _OWORD v14[2];

  v1 = *(_OWORD *)(v0 + 32);
  v14[0] = *(_OWORD *)(v0 + 16);
  v13 = *(_QWORD *)&v14[0];
  v14[1] = v1;
  v2 = type metadata accessor for TickerGrid(0, (uint64_t)v14);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 48) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  v8 = v0 + v5;
  v9 = type metadata accessor for Array(255, v13);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  v11 = type metadata accessor for NonEmpty(0, v9, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
  swift_release(*(_QWORD *)(v8 + *(int *)(v2 + 72) + 8));
  return swift_deallocObject(v0, v6, v7);
}

uint64_t sub_1000BB6B4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v11[0] = v2[2];
  v5 = v11[0];
  v11[1] = v6;
  v11[2] = v7;
  v11[3] = v8;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TickerGrid(0, (uint64_t)v11) - 8) + 80);
  return sub_1000BA3B8(a1, (uint64_t)v2 + ((v9 + 48) & ~v9), v5, v6, v7, v8, a2);
}

uint64_t sub_1000BB73C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000BA59C(v1[6], v1[7], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t type metadata accessor for SpacerOr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100021720(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SpacerOr);
}

unint64_t sub_1000BB758()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100117D58;
  if (!qword_100117D58)
  {
    sub_1000BB4C0(255);
    v2 = v1;
    sub_100003D3C(qword_100117D60, (uint64_t (*)(uint64_t))sub_1000BB4DC, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v2);
    atomic_store(result, (unint64_t *)&qword_100117D58);
  }
  return result;
}

uint64_t sub_1000BB7D4@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t (*v21)(char *, uint64_t);
  uint64_t v22;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  uint64_t v26;
  char *v27;

  v27 = a5;
  v7 = type metadata accessor for SpacerOr(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - v9;
  v11 = type metadata accessor for Optional(0, a2);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - v13;
  v15 = *(_QWORD *)(a2 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v12 + 16))(v14, a1, v11, v17);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a2);
  v21 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  if (v20 == 1)
  {
    v22 = v21(v14, v11);
    UUID.init()(v22);
    v21(a1, v11);
    swift_storeEnumTagMultiPayload(v10, v7, 1);
    return (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v27, v10, v7);
  }
  else
  {
    v21(a1, v11);
    v24 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v24(v19, v14, a2);
    v25 = v27;
    v24(v27, v19, a2);
    return swift_storeEnumTagMultiPayload(v25, v7, 0);
  }
}

uint64_t sub_1000BB978@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_1000BA238(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000BB99C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000BB9C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(void);
  uint64_t v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void (*)(void))__chkstk_darwin(v6);
  v11 = (char *)&v15 - v10;
  v9();
  v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v12(v11, v8, a2);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, a2);
  v12(a3, v11, a2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, a2);
}

uint64_t sub_1000BBA88@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1000BB9C0(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000BBA98(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 0, 2, v5);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1000BBB1C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = (*(_BYTE *)(v9 + 80) | *(_BYTE *)(v6 + 80));
  if (v10 <= 7 && v7 + 1 <= 0x18 && ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0)
  {
    v14 = *((unsigned __int8 *)a2 + v7);
    if (v14 >= 2)
    {
      if (v7 <= 3)
        v15 = v7;
      else
        v15 = 4;
      __asm { BR              X13 }
    }
    if (v14 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  else
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain(v13);
  }
  return a1;
}

uint64_t sub_1000BBC68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v5)
    v8 = v5;
  v9 = *(unsigned __int8 *)(a1 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X14 }
  }
  if (v9 == 1)
  {
    v11 = v6;
  }
  else
  {
    v7 = v4;
    v11 = v3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v11);
}

uint64_t sub_1000BBD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = *(unsigned __int8 *)(a2 + v7);
  if (v10 >= 2)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v13 = v8;
  }
  else
  {
    v9 = v6;
    v13 = v5;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a2, v13);
  *(_BYTE *)(a1 + v7) = v12;
  return a1;
}

uint64_t sub_1000BBE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = type metadata accessor for UUID(0);
    v9 = v8;
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) > v7)
      v7 = *(_QWORD *)(v10 + 64);
    v11 = *(unsigned __int8 *)(a1 + v7);
    if (v11 >= 2)
    {
      if (v7 <= 3)
        v12 = v7;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(v8 - 8);
    else
      v13 = v6;
    if (v11 == 1)
      v14 = v8;
    else
      v14 = v5;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v7);
    if (v15 >= 2)
    {
      if (v7 <= 3)
        v16 = v7;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
      v18 = v10;
    else
      v18 = v6;
    if (v15 == 1)
      v19 = v9;
    else
      v19 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a1, a2, v19);
    *(_BYTE *)(a1 + v7) = v17;
  }
  return a1;
}

uint64_t sub_1000BBFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = *(unsigned __int8 *)(a2 + v7);
  if (v10 >= 2)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v13 = v8;
  }
  else
  {
    v9 = v6;
    v13 = v5;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a1, a2, v13);
  *(_BYTE *)(a1 + v7) = v12;
  return a1;
}

uint64_t sub_1000BC094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = type metadata accessor for UUID(0);
    v9 = v8;
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) > v7)
      v7 = *(_QWORD *)(v10 + 64);
    v11 = *(unsigned __int8 *)(a1 + v7);
    if (v11 >= 2)
    {
      if (v7 <= 3)
        v12 = v7;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(v8 - 8);
    else
      v13 = v6;
    if (v11 == 1)
      v14 = v8;
    else
      v14 = v5;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v7);
    if (v15 >= 2)
    {
      if (v7 <= 3)
        v16 = v7;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
      v18 = v10;
    else
      v18 = v6;
    if (v15 == 1)
      v19 = v9;
    else
      v19 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(a1, a2, v19);
    *(_BYTE *)(a1 + v7) = v17;
  }
  return a1;
}

uint64_t sub_1000BC21C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v6 = type metadata accessor for UUID(0);
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= v5)
    v7 = v5;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_22;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 254) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v12 < 2)
    {
LABEL_22:
      v14 = *(unsigned __int8 *)(a1 + v7);
      if (v14 >= 2)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_22;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 > 3)
      LODWORD(v8) = 4;
    __asm { BR              X11 }
  }
  return (v13 + 255);
}

void sub_1000BC35C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 64);
  if (v8 <= v7)
    v8 = v7;
  v9 = v8 + 1;
  if (a3 < 0xFF)
  {
    v10 = 0;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 254) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = &dword_100000004;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v11 = a2 - 255;
  if (v9 < 4)
  {
    if ((_DWORD)v8 != -1)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v8 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

uint64_t sub_1000BC518(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 64);
  if (v4 <= v3)
    v4 = v3;
  result = *(unsigned __int8 *)(a1 + v4);
  if (result >= 2)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1000BC5C8(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  if (a2 > 1)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    v8 = type metadata accessor for UUID(0);
    if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v7)
      v7 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
    v9 = a2 - 2;
    if (v7 < 4)
    {
      v10 = v9 >> (8 * v7);
      v11 = v9 & ~(-1 << (8 * v7));
      a1[v7] = v10 + 2;
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 64);
    if (v6 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v6] = a2;
  }
}

uint64_t sub_1000BC6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[4];

  result = type metadata accessor for SpacerOr(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v6 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    v7[1] = &unk_1000E37D8;
    v7[2] = &unk_1000E37D8;
    v7[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 0, 4, v7, a1 + 32);
    return 0;
  }
  return result;
}

_QWORD *sub_1000BC74C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _BYTE *v18;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = *(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80);
  if ((v10 & 0x1000F8) != 0 || ((v7 + 10) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + (((v10 & 0xF8 | 7u) + 16) & ~(unint64_t)(v10 & 0xF8 | 7u)));
    swift_retain(v12);
  }
  else
  {
    v13 = v7 + 1;
    v14 = *((unsigned __int8 *)a2 + v7);
    if (v14 >= 2)
    {
      if (v7 <= 3)
        v15 = v7;
      else
        v15 = 4;
      __asm { BR              X13 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
    {
      v17 = v8;
    }
    else
    {
      v9 = v6;
      v17 = v5;
    }
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(a1, a2, v17);
    *((_BYTE *)a1 + v7) = v16;
    v18 = (char *)a1 + v13;
    *v18 = *((_BYTE *)a2 + v13);
    v18[1] = *((_BYTE *)a2 + v13 + 1);
    *(_QWORD *)(((unint64_t)a1 + v13 + 9) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v13 + 9) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t sub_1000BC8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v5)
    v8 = v5;
  v9 = *(unsigned __int8 *)(a1 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X14 }
  }
  if (v9 == 1)
  {
    v11 = v6;
  }
  else
  {
    v7 = v4;
    v11 = v3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v11);
}

uint64_t sub_1000BC990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = *(unsigned __int8 *)(a2 + v7);
  if (v10 >= 2)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v13 = v8;
  }
  else
  {
    v9 = v6;
    v13 = v5;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a2, v13);
  *(_BYTE *)(a1 + v7) = v12;
  v14 = (_BYTE *)(v7 + 1 + a1);
  v15 = (_BYTE *)(v7 + 1 + a2);
  *v14 = *v15;
  v14[1] = v15[1];
  *(_QWORD *)((unint64_t)(v14 + 9) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)(v15 + 9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000BCAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _BYTE *v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (a1 != a2)
  {
    v8 = type metadata accessor for UUID(0);
    v9 = v8;
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) <= v7)
      v11 = v7;
    else
      v11 = *(_QWORD *)(v10 + 64);
    v12 = *(unsigned __int8 *)(a1 + v11);
    if (v12 >= 2)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 1)
      v14 = *(_QWORD *)(v8 - 8);
    else
      v14 = v6;
    if (v12 == 1)
      v15 = v8;
    else
      v15 = v5;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v15);
    v16 = *(unsigned __int8 *)(a2 + v11);
    if (v16 >= 2)
    {
      if (v11 <= 3)
        v17 = v11;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    v18 = v16 == 1;
    if (v16 == 1)
      v19 = v10;
    else
      v19 = v6;
    if (v16 == 1)
      v20 = v9;
    else
      v20 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(a1, a2, v20);
    *(_BYTE *)(a1 + v11) = v18;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 64);
  if (v21 <= v7)
    v21 = v7;
  v22 = v21 + 1;
  v23 = (_BYTE *)(v22 + a1);
  v24 = (_BYTE *)(v22 + a2);
  *v23 = *v24;
  v23[1] = v24[1];
  *(_QWORD *)((unint64_t)(v23 + 9) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)(v24 + 9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000BCC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = *(unsigned __int8 *)(a2 + v7);
  if (v10 >= 2)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v13 = v8;
  }
  else
  {
    v9 = v6;
    v13 = v5;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a1, a2, v13);
  *(_BYTE *)(a1 + v7) = v12;
  v14 = (_BYTE *)(v7 + 1 + a1);
  v15 = (_BYTE *)(v7 + 1 + a2);
  *v14 = *v15;
  v14[1] = v15[1];
  *(_QWORD *)((unint64_t)(v14 + 9) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)(v15 + 9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000BCDAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _BYTE *v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (a1 != a2)
  {
    v8 = type metadata accessor for UUID(0);
    v9 = v8;
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) <= v7)
      v11 = v7;
    else
      v11 = *(_QWORD *)(v10 + 64);
    v12 = *(unsigned __int8 *)(a1 + v11);
    if (v12 >= 2)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 1)
      v14 = *(_QWORD *)(v8 - 8);
    else
      v14 = v6;
    if (v12 == 1)
      v15 = v8;
    else
      v15 = v5;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v15);
    v16 = *(unsigned __int8 *)(a2 + v11);
    if (v16 >= 2)
    {
      if (v11 <= 3)
        v17 = v11;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    v18 = v16 == 1;
    if (v16 == 1)
      v19 = v10;
    else
      v19 = v6;
    if (v16 == 1)
      v20 = v9;
    else
      v20 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(a1, a2, v20);
    *(_BYTE *)(a1 + v11) = v18;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 64);
  if (v21 <= v7)
    v21 = v7;
  v22 = v21 + 1;
  v23 = (_BYTE *)(v22 + a1);
  v24 = (_BYTE *)(v22 + a2);
  *v23 = *v24;
  v23[1] = v24[1];
  *(_QWORD *)((unint64_t)(v23 + 9) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)(v24 + 9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000BCF88(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v14;
  unsigned int v15;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 64);
  if (v6 <= v5)
    v6 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_23;
  v7 = ((v6 + 10) & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = a2 - 253;
  v9 = v7 & 0xFFFFFFF8;
  if ((v7 & 0xFFFFFFF8) != 0)
    v8 = 2;
  if (v8 >= 0x10000)
    v10 = 4;
  else
    v10 = 2;
  if (v8 < 0x100)
    v11 = 1;
  else
    v11 = v10;
  if (v11 == 4)
  {
    v12 = *(_DWORD *)((char *)a1 + v7);
    if (!v12)
      goto LABEL_23;
  }
  else if (v11 == 2)
  {
    v12 = *(unsigned __int16 *)((char *)a1 + v7);
    if (!v12)
    {
LABEL_23:
      v15 = *((unsigned __int8 *)a1 + v6);
      if (v15 >= 2)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  else
  {
    v12 = *((unsigned __int8 *)a1 + v7);
    if (!v12)
      goto LABEL_23;
  }
  v14 = v12 - 1;
  if (v9)
  {
    v14 = 0;
    LODWORD(v9) = *a1;
  }
  return (v9 | v14) + 255;
}

void sub_1000BD074(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int v11;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 64);
  if (v8 <= v7)
    v8 = v7;
  if (a3 < 0xFF)
  {
    v11 = 0;
    if (a2 > 0xFE)
      goto LABEL_13;
  }
  else
  {
    v9 = a3 - 253;
    if ((((_DWORD)v8 + 10) & 0xFFFFFFF8) != 0xFFFFFFF8)
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v11 = 1;
    else
      v11 = v10;
    if (a2 > 0xFE)
    {
LABEL_13:
      if ((((_DWORD)v8 + 10) & 0xFFFFFFF8) != 0xFFFFFFF8)
      {
        bzero(a1, ((v8 + 10) & 0xFFFFFFFFFFFFFFF8) + 8);
        *a1 = a2 - 255;
      }
      __asm { BR              X10 }
    }
  }
  __asm { BR              X11 }
}

void sub_1000BD164(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  *(_BYTE *)(v1 + v3) = 0;
  if (v2)
    *(_BYTE *)(v1 + a1) = -(char)v2;
}

void sub_1000BD18C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x1000BD180);
}

uint64_t sub_1000BD1B4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  sub_1000BB3A0(255);
  v5 = v4;
  v7 = type metadata accessor for GridCell(255, v1, v3, v6);
  v8 = type metadata accessor for Array(255, v7);
  sub_100024258();
  v10 = type metadata accessor for ModifiedContent(255, v2, v9);
  v11 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v12 = type metadata accessor for ModifiedContent(255, v10, v11);
  v13 = type metadata accessor for ModifiedContent(255, v2, &type metadata for _OpacityEffect);
  v14 = type metadata accessor for _ConditionalContent(255, v12, v13);
  sub_1000BB4C0(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v14, v15, 0, 0);
  v17 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v17);
  v19 = type metadata accessor for VStack(255, v17, WitnessTable);
  v25 = v8;
  v26 = &type metadata for String;
  v27 = v19;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  v29 = &protocol witness table for String;
  v20 = type metadata accessor for ForEach(255, &v25);
  v21 = sub_100003D3C(&qword_100117D48, (uint64_t (*)(uint64_t))sub_1000BB3A0, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
  v22 = type metadata accessor for _VariadicView.Tree(255, v5, v20, v21);
  sub_100003D3C(&qword_100117D50, (uint64_t (*)(uint64_t))sub_1000BB3A0, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v19);
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v20);
  v23 = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v22);
  v25 = v22;
  v26 = (void *)v23;
  return swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

unint64_t sub_1000BD3B4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  int *v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t *, uint64_t, int *, __n128);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t, __n128);
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v19 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v19);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_BYTE *)(a2 + 32);
    sub_100038430(*(_QWORD *)a2, v8, v9, v10, v11);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = v11;
    v12 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v12;
    v13 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v13;
    v14 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v14;
    v15 = (_OWORD *)(a1 + 88);
    v16 = (_OWORD *)(a2 + 88);
    v17 = *(_QWORD *)(a2 + 112);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    if (v17 == 1)
    {
      v18 = *(_OWORD *)(a2 + 104);
      *v15 = *v16;
      *(_OWORD *)(a1 + 104) = v18;
    }
    else
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v17;
      swift_bridgeObjectRetain(v17);
    }
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    v20 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = v20;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    v21 = *(_QWORD *)(a2 + 176);
    v22 = *(int *)(a3 + 40);
    v23 = (uint64_t *)(a2 + v22);
    v24 = (uint64_t *)(a1 + v22);
    *(_QWORD *)(a1 + 176) = v21;
    v25 = (int *)type metadata accessor for PreparedSparkline(0);
    v26 = *((_QWORD *)v25 - 1);
    v27 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v26 + 48);
    v28 = swift_bridgeObjectRetain(v20);
    if (v27(v23, 1, v25, v28))
    {
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v24, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v30 = *v23;
      *v24 = *v23;
      v31 = v25[5];
      v32 = (char *)v24 + v31;
      v33 = (char *)v23 + v31;
      v34 = type metadata accessor for Date(0);
      v35 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v34 - 8) + 16);
      v36 = swift_bridgeObjectRetain(v30);
      v35(v32, v33, v34, v36);
      sub_100022800(0);
      ((void (*)(char *, char *, uint64_t))v35)(&v32[*(int *)(v37 + 36)], &v33[*(int *)(v37 + 36)], v34);
      v38 = v25[6];
      v39 = (char *)v24 + v38;
      v40 = (char *)v23 + v38;
      v41 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
      *(_OWORD *)((char *)v24 + v25[7]) = *(_OWORD *)((char *)v23 + v25[7]);
      v42 = v25[8];
      v43 = (char *)v24 + v42;
      v44 = (char *)v23 + v42;
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      *((_BYTE *)v24 + v25[9]) = *((_BYTE *)v23 + v25[9]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v26 + 56))(v24, 0, 1, v25);
    }
  }
  return a1;
}

uint64_t sub_1000BD64C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  char *v12;
  uint64_t v13;

  sub_100028060(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  v4 = *(_QWORD *)(a1 + 112);
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 152));
  v5 = (_QWORD *)(a1 + *(int *)(a2 + 40));
  v6 = type metadata accessor for PreparedSparkline(0);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*v5);
    v8 = (char *)v5 + *(int *)(v6 + 20);
    v9 = type metadata accessor for Date(0);
    v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v10(v8, v9);
    sub_100022800(0);
    v10(&v8[*(int *)(v11 + 36)], v9);
    v12 = (char *)v5 + *(int *)(v6 + 24);
    v13 = type metadata accessor for TimeZone(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  return result;
}

uint64_t sub_1000BD76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  int *v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t *, uint64_t, int *, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_100038430(*(_QWORD *)a2, v7, v8, v9, v10);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v13;
  v14 = (_OWORD *)(a1 + 88);
  v15 = (_OWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  if (v16 == 1)
  {
    v17 = *(_OWORD *)(a2 + 104);
    *v14 = *v15;
    *(_OWORD *)(a1 + 104) = v17;
  }
  else
  {
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v16;
    swift_bridgeObjectRetain(v16);
  }
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v18 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v18;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v19 = *(_QWORD *)(a2 + 176);
  v20 = *(int *)(a3 + 40);
  v21 = (uint64_t *)(a2 + v20);
  v22 = (uint64_t *)(a1 + v20);
  *(_QWORD *)(a1 + 176) = v19;
  v23 = (int *)type metadata accessor for PreparedSparkline(0);
  v24 = *((_QWORD *)v23 - 1);
  v25 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v24 + 48);
  v26 = swift_bridgeObjectRetain(v18);
  if (v25(v21, 1, v23, v26))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v22, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v28 = *v21;
    *v22 = *v21;
    v29 = v23[5];
    v30 = (char *)v22 + v29;
    v31 = (char *)v21 + v29;
    v32 = type metadata accessor for Date(0);
    v33 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v32 - 8) + 16);
    v34 = swift_bridgeObjectRetain(v28);
    v33(v30, v31, v32, v34);
    sub_100022800(0);
    ((void (*)(char *, char *, uint64_t))v33)(&v30[*(int *)(v35 + 36)], &v31[*(int *)(v35 + 36)], v32);
    v36 = v23[6];
    v37 = (char *)v22 + v36;
    v38 = (char *)v21 + v36;
    v39 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    *(_OWORD *)((char *)v22 + v23[7]) = *(_OWORD *)((char *)v21 + v23[7]);
    v40 = v23[8];
    v41 = (char *)v22 + v40;
    v42 = (char *)v21 + v40;
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = v42[8];
    *((_BYTE *)v22 + v23[9]) = *((_BYTE *)v21 + v23[9]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v24 + 56))(v22, 0, 1, v23);
  }
  return a1;
}

uint64_t sub_1000BD9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int *v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD *, uint64_t, int *);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t, __n128);
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char v80;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_100038430(*(_QWORD *)a2, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  sub_100028060(v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v18 = *(_QWORD *)(a2 + 64);
  v19 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v20 = *(_QWORD *)(a2 + 80);
  v21 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = (_OWORD *)(a1 + 88);
  v23 = (_OWORD *)(a2 + 88);
  v24 = *(_QWORD *)(a1 + 112);
  v25 = *(_QWORD *)(a2 + 112);
  if (v24 == 1)
  {
    if (v25 == 1)
    {
      v26 = *(_OWORD *)(a2 + 104);
      *v22 = *v23;
      *(_OWORD *)(a1 + 104) = v26;
    }
    else
    {
      v28 = *(_QWORD *)v23;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_QWORD *)v22 = v28;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      v29 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v29;
      swift_bridgeObjectRetain(v29);
    }
  }
  else if (v25 == 1)
  {
    sub_10002304C(a1 + 88);
    v27 = *(_OWORD *)(a2 + 104);
    *v22 = *v23;
    *(_OWORD *)(a1 + 104) = v27;
  }
  else
  {
    v30 = *(_QWORD *)v23;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_QWORD *)v22 = v30;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v31 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v31;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRelease(v24);
  }
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v32 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v32;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v33 = *(_QWORD *)(a2 + 152);
  v34 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  v35 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v35;
  v36 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v36;
  v37 = *(int *)(a3 + 40);
  v38 = (_QWORD *)(a1 + v37);
  v39 = (_QWORD *)(a2 + v37);
  v40 = (int *)type metadata accessor for PreparedSparkline(0);
  v41 = *((_QWORD *)v40 - 1);
  v42 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      v46 = *v39;
      *v38 = *v39;
      v47 = v40[5];
      v48 = (char *)v38 + v47;
      v49 = (char *)v39 + v47;
      v50 = type metadata accessor for Date(0);
      v51 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v50 - 8) + 16);
      v52 = swift_bridgeObjectRetain(v46);
      v51(v48, v49, v50, v52);
      sub_100022800(0);
      ((void (*)(char *, char *, uint64_t))v51)(&v48[*(int *)(v53 + 36)], &v49[*(int *)(v53 + 36)], v50);
      v54 = v40[6];
      v55 = (char *)v38 + v54;
      v56 = (char *)v39 + v54;
      v57 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
      *(_OWORD *)((char *)v38 + v40[7]) = *(_OWORD *)((char *)v39 + v40[7]);
      v58 = v40[8];
      v59 = (char *)v38 + v58;
      v60 = (char *)v39 + v58;
      v61 = v60[8];
      *(_QWORD *)v59 = *(_QWORD *)v60;
      v59[8] = v61;
      *((_BYTE *)v38 + v40[9]) = *((_BYTE *)v39 + v40[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
      return a1;
    }
  }
  else
  {
    if (!v44)
    {
      v62 = *v39;
      v63 = *v38;
      *v38 = *v39;
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRelease(v63);
      v64 = v40[5];
      v65 = (char *)v38 + v64;
      v66 = (char *)v39 + v64;
      v67 = type metadata accessor for Date(0);
      v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 24);
      v68(v65, v66, v67);
      sub_100022800(0);
      v68(&v65[*(int *)(v69 + 36)], &v66[*(int *)(v69 + 36)], v67);
      v70 = v40[6];
      v71 = (char *)v38 + v70;
      v72 = (char *)v39 + v70;
      v73 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 24))(v71, v72, v73);
      v74 = v40[7];
      v75 = (_QWORD *)((char *)v38 + v74);
      v76 = (_QWORD *)((char *)v39 + v74);
      *v75 = *v76;
      v75[1] = v76[1];
      v77 = v40[8];
      v78 = (char *)v38 + v77;
      v79 = (char *)v39 + v77;
      v80 = v79[8];
      *(_QWORD *)v78 = *(_QWORD *)v79;
      v78[8] = v80;
      *((_BYTE *)v38 + v40[9]) = *((_BYTE *)v39 + v40[9]);
      return a1;
    }
    sub_10001DF70((uint64_t)v38, type metadata accessor for PreparedSparkline);
  }
  sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  return a1;
}

uint64_t sub_1000BDE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  v6 = *(int *)(a3 + 40);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
  v9 = (int *)type metadata accessor for PreparedSparkline(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    v12 = v9[5];
    v13 = (char *)v7 + v12;
    v14 = (char *)v8 + v12;
    v15 = type metadata accessor for Date(0);
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
    v16(v13, v14, v15);
    sub_100022800(0);
    v16(&v13[*(int *)(v17 + 36)], &v14[*(int *)(v17 + 36)], v15);
    v18 = v9[6];
    v19 = (char *)v7 + v18;
    v20 = (char *)v8 + v18;
    v21 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    *(_OWORD *)((char *)v7 + v9[7]) = *(_OWORD *)((char *)v8 + v9[7]);
    v22 = v9[8];
    v23 = (char *)v7 + v22;
    v24 = (char *)v8 + v22;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    *((_BYTE *)v7 + v9[9]) = *((_BYTE *)v8 + v9[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_1000BDFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD *, uint64_t, int *);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;

  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 32) = v6;
  sub_100028060(v7, v8, v9, v10, v11);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a2 + 80);
  v18 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v17;
  swift_bridgeObjectRelease(v18);
  v19 = (_OWORD *)(a1 + 88);
  v20 = (_OWORD *)(a2 + 88);
  v21 = *(_QWORD *)(a1 + 112);
  if (v21 == 1)
    goto LABEL_4;
  v22 = *(_QWORD *)(a2 + 112);
  if (v22 == 1)
  {
    sub_10002304C(a1 + 88);
LABEL_4:
    v23 = *(_OWORD *)(a2 + 104);
    *v19 = *v20;
    *(_OWORD *)(a1 + 104) = v23;
    goto LABEL_6;
  }
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v22;
  swift_bridgeObjectRelease(v21);
LABEL_6:
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v24 = *(_QWORD *)(a2 + 152);
  v25 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v24;
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v26 = *(int *)(a3 + 40);
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = (int *)type metadata accessor for PreparedSparkline(0);
  v30 = *((_QWORD *)v29 - 1);
  v31 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      *v27 = *v28;
      v35 = v29[5];
      v36 = (char *)v27 + v35;
      v37 = (char *)v28 + v35;
      v38 = type metadata accessor for Date(0);
      v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32);
      v39(v36, v37, v38);
      sub_100022800(0);
      v39(&v36[*(int *)(v40 + 36)], &v37[*(int *)(v40 + 36)], v38);
      v41 = v29[6];
      v42 = (char *)v27 + v41;
      v43 = (char *)v28 + v41;
      v44 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      *(_OWORD *)((char *)v27 + v29[7]) = *(_OWORD *)((char *)v28 + v29[7]);
      v45 = v29[8];
      v46 = (char *)v27 + v45;
      v47 = (char *)v28 + v45;
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      *((_BYTE *)v27 + v29[9]) = *((_BYTE *)v28 + v29[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
      return a1;
    }
  }
  else
  {
    if (!v33)
    {
      v48 = *v27;
      *v27 = *v28;
      swift_bridgeObjectRelease(v48);
      v49 = v29[5];
      v50 = (char *)v27 + v49;
      v51 = (char *)v28 + v49;
      v52 = type metadata accessor for Date(0);
      v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 40);
      v53(v50, v51, v52);
      sub_100022800(0);
      v53(&v50[*(int *)(v54 + 36)], &v51[*(int *)(v54 + 36)], v52);
      v55 = v29[6];
      v56 = (char *)v27 + v55;
      v57 = (char *)v28 + v55;
      v58 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
      *(_OWORD *)((char *)v27 + v29[7]) = *(_OWORD *)((char *)v28 + v29[7]);
      v59 = v29[8];
      v60 = (char *)v27 + v59;
      v61 = (char *)v28 + v59;
      v60[8] = v61[8];
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *((_BYTE *)v27 + v29[9]) = *((_BYTE *)v28 + v29[9]);
      return a1;
    }
    sub_10001DF70((uint64_t)v27, type metadata accessor for PreparedSparkline);
  }
  sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  return a1;
}

uint64_t sub_1000BE360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BE36C);
}

uint64_t sub_1000BE36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_1000BE400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BE40C);
}

uint64_t sub_1000BE40C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 48) = (a2 - 1);
  }
  else
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SmallDetailContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100117EC0;
  if (!qword_100117EC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SmallDetailContentView);
  return result;
}

void sub_1000BE4D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = "!";
  v4[1] = L" ";
  v4[2] = &unk_1000E3978;
  v4[3] = &unk_1000E3990;
  v4[4] = &unk_1000E39A8;
  v4[5] = &unk_1000E39C0;
  sub_10000EDE8(319, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

uint64_t sub_1000BE590(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000EA1C8, 1);
}

uint64_t sub_1000BE5A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;

  v64 = a2;
  v3 = type metadata accessor for SmallSparklineView(0);
  __chkstk_darwin(v3);
  v67 = (uint64_t)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v66 = (uint64_t)&v55 - v6;
  v63 = type metadata accessor for AccessibilityChildBehavior(0);
  v7 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024A18(0, &qword_100117F38, &qword_100117F40, (uint64_t (*)(uint64_t))sub_1000BFA9C, &qword_100117F50);
  v11 = v10;
  __chkstk_darwin(v10);
  v13 = (char *)&v55 - v12;
  sub_1000BFA08(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100066208(0, &qword_100117F28, v19, (uint64_t (*)(uint64_t))sub_100024258);
  v21 = v20;
  __chkstk_darwin(v20);
  v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v65 = (uint64_t)&v55 - v25;
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v26);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  sub_1000AB7A8(0, &qword_100117F60, &qword_100117F40, (uint64_t (*)(uint64_t))sub_1000BFA9C);
  v28 = sub_1000BEB20((uint64_t)a1, (uint64_t)&v13[*(int *)(v27 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v28);
  v29 = sub_1000BFCB8();
  View.accessibilityElement(children:)(v9, v11, v29);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v63);
  sub_1000BFD7C((uint64_t)v13);
  KeyPath = swift_getKeyPath(&unk_1000E3A28);
  v31 = swift_allocObject(&unk_100109C18, 41, 7);
  *(_QWORD *)(v31 + 16) = 0;
  *(_BYTE *)(v31 + 24) = 1;
  *(_QWORD *)(v31 + 32) = 0;
  *(_BYTE *)(v31 + 40) = 0;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v23, v18, v15);
  v32 = (uint64_t *)&v23[*(int *)(v21 + 36)];
  *v32 = KeyPath;
  v32[1] = (uint64_t)sub_10002453C;
  v32[2] = v31;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v33 = v65;
  v34 = sub_1000BFFB4((uint64_t)v23, v65, &qword_100117F28, (uint64_t (*)(uint64_t))sub_1000BFA08, (uint64_t (*)(uint64_t))sub_100024258);
  v35 = static Alignment.center.getter(v34);
  _FrameLayout.init(width:height:alignment:)(&v68, 0, 1, 0x4020000000000000, 0, v35, v36);
  v63 = v68;
  v61 = v69;
  v60 = v70;
  v59 = v71;
  v57 = v73;
  v58 = v72;
  v37 = type metadata accessor for SmallDetailContentView(0);
  v38 = v66;
  sub_1000BFDF0((uint64_t)a1 + *(int *)(v37 + 40), v66, (uint64_t)&qword_100111ED8, (uint64_t)type metadata accessor for PreparedSparkline, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_10000EDE8);
  v39 = a1[12];
  v56 = a1[11];
  v40 = a1[13];
  v41 = a1[14];
  v55 = swift_getKeyPath(&unk_1000E3A28);
  v42 = swift_allocObject(&unk_100109C40, 41, 7);
  *(_QWORD *)(v42 + 16) = 0;
  *(_BYTE *)(v42 + 24) = 0;
  *(_QWORD *)(v42 + 32) = 0;
  *(_BYTE *)(v42 + 40) = 1;
  v62 = v23;
  sub_1000C0004(v33, (uint64_t)v23, &qword_100117F28, (uint64_t (*)(uint64_t))sub_1000BFA08, (uint64_t (*)(uint64_t))sub_100024258);
  v43 = v67;
  sub_10001DE2C(v38, v67, type metadata accessor for SmallSparklineView);
  v44 = (uint64_t)v23;
  v45 = v64;
  sub_1000C0004(v44, v64, &qword_100117F28, (uint64_t (*)(uint64_t))sub_1000BFA08, (uint64_t (*)(uint64_t))sub_100024258);
  sub_1000BF940(0);
  v47 = v46;
  v48 = v45 + *(int *)(v46 + 48);
  *(_QWORD *)v48 = 0;
  *(_BYTE *)(v48 + 8) = 1;
  *(_QWORD *)(v48 + 16) = v63;
  *(_BYTE *)(v48 + 24) = v61;
  *(_QWORD *)(v48 + 32) = v60;
  *(_BYTE *)(v48 + 40) = v59;
  v49 = v57;
  *(_QWORD *)(v48 + 48) = v58;
  *(_QWORD *)(v48 + 56) = v49;
  sub_10001DE2C(v43, v45 + *(int *)(v46 + 64), type metadata accessor for SmallSparklineView);
  v50 = v45 + *(int *)(v47 + 80);
  *(_QWORD *)v50 = 0;
  *(_BYTE *)(v50 + 8) = 0;
  v51 = (uint64_t *)(v45 + *(int *)(v47 + 96));
  v52 = v55;
  v53 = v56;
  *v51 = v56;
  v51[1] = v39;
  v51[2] = v40;
  v51[3] = v41;
  v51[4] = v52;
  v51[5] = (uint64_t)sub_10002453C;
  v51[6] = v42;
  sub_100024540(v53, v39, v40, v41);
  swift_retain(v52);
  swift_retain(v42);
  sub_100024540(v53, v39, v40, v41);
  sub_10001DF70(v66, type metadata accessor for SmallSparklineView);
  sub_1000BFE50(v65, (uint64_t)&qword_100117F28, (uint64_t)sub_1000BFA08, (uint64_t)sub_100024258, (uint64_t (*)(_QWORD))sub_100066208);
  sub_100024750(v53, v39, v40, v41);
  swift_release(v42);
  swift_release(v52);
  sub_10001DF70(v67, type metadata accessor for SmallSparklineView);
  return sub_1000BFE50((uint64_t)v62, (uint64_t)&qword_100117F28, (uint64_t)sub_1000BFA08, (uint64_t)sub_100024258, (uint64_t (*)(_QWORD))sub_100066208);
}

uint64_t sub_1000BEB20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;

  v42 = a1;
  v51 = a2;
  sub_1000BFC28(0, &qword_100115128, &qword_100115130, (uint64_t (*)(uint64_t))sub_100066120, &qword_100115160);
  __chkstk_darwin(v3);
  v5 = (char *)&v40 - v4;
  sub_1000BFBA4(0);
  v50 = v6;
  __chkstk_darwin(v6);
  v41 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v49 = (uint64_t)&v40 - v9;
  sub_1000BFC28(0, &qword_1001150F0, &qword_1001150F8, (uint64_t (*)(uint64_t))sub_100066018, &qword_100115118);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - v11;
  sub_1000BFB20(0);
  v14 = v13;
  __chkstk_darwin(v13);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v40 - v19;
  *(_QWORD *)v12 = static VerticalAlignment.firstTextBaseline.getter(v18);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  sub_1000BFE8C(0, &qword_100115180, &qword_1001150F8, (uint64_t (*)(uint64_t))sub_100066018);
  sub_1000BEFC8(a1, (uint64_t)&v12[*(int *)(v21 + 44)]);
  KeyPath = swift_getKeyPath(&unk_1000E3A28);
  v23 = swift_allocObject(&unk_100109C68, 41, 7);
  *(_QWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 24) = 1;
  *(_QWORD *)(v23 + 32) = 0;
  *(_BYTE *)(v23 + 40) = 0;
  sub_1000BFF58((uint64_t)v12, (uint64_t)v16, &qword_1001150F0, &qword_1001150F8, (uint64_t (*)(uint64_t))sub_100066018, &qword_100115118);
  v24 = (uint64_t *)&v16[*(int *)(v14 + 36)];
  *v24 = KeyPath;
  v24[1] = (uint64_t)sub_10002453C;
  v24[2] = v23;
  sub_1000BFF0C((uint64_t)v12, &qword_1001150F0, &qword_1001150F8, (uint64_t (*)(uint64_t))sub_100066018, &qword_100115118);
  v25 = sub_10000ED3C((uint64_t)v16, (uint64_t)v20, (uint64_t (*)(_QWORD))sub_1000BFB20);
  v26 = static Alignment.center.getter(v25);
  _FrameLayout.init(width:height:alignment:)(&v52, 0, 1, 0x4000000000000000, 0, v26, v27);
  v48 = v52;
  v47 = v53;
  v46 = v54;
  v45 = v55;
  v43 = v57;
  v44 = v56;
  *(_QWORD *)v5 = static VerticalAlignment.firstTextBaseline.getter(v28);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  sub_1000BFE8C(0, &qword_100115188, &qword_100115130, (uint64_t (*)(uint64_t))sub_100066120);
  sub_1000BF4B8(v42, (uint64_t)&v5[*(int *)(v29 + 44)]);
  v30 = swift_getKeyPath(&unk_1000E3A28);
  v31 = swift_allocObject(&unk_100109C90, 41, 7);
  *(_QWORD *)(v31 + 16) = 0;
  *(_BYTE *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 32) = 0;
  *(_BYTE *)(v31 + 40) = 1;
  v32 = v41;
  sub_1000BFF58((uint64_t)v5, v41, &qword_100115128, &qword_100115130, (uint64_t (*)(uint64_t))sub_100066120, &qword_100115160);
  v33 = (uint64_t *)(v32 + *(int *)(v50 + 36));
  *v33 = v30;
  v33[1] = (uint64_t)sub_10002453C;
  v33[2] = v31;
  sub_1000BFF0C((uint64_t)v5, &qword_100115128, &qword_100115130, (uint64_t (*)(uint64_t))sub_100066120, &qword_100115160);
  v34 = v49;
  sub_10000ED3C(v32, v49, (uint64_t (*)(_QWORD))sub_1000BFBA4);
  sub_10001DE2C((uint64_t)v20, (uint64_t)v16, (uint64_t (*)(_QWORD))sub_1000BFB20);
  sub_10001DE2C(v34, v32, (uint64_t (*)(_QWORD))sub_1000BFBA4);
  v35 = v51;
  sub_10001DE2C((uint64_t)v16, v51, (uint64_t (*)(_QWORD))sub_1000BFB20);
  sub_1000BFA9C(0);
  v37 = v35 + *(int *)(v36 + 48);
  *(_QWORD *)v37 = 0;
  *(_BYTE *)(v37 + 8) = 1;
  *(_QWORD *)(v37 + 16) = v48;
  *(_BYTE *)(v37 + 24) = v47;
  *(_QWORD *)(v37 + 32) = v46;
  *(_BYTE *)(v37 + 40) = v45;
  v38 = v43;
  *(_QWORD *)(v37 + 48) = v44;
  *(_QWORD *)(v37 + 56) = v38;
  sub_10001DE2C(v32, v35 + *(int *)(v36 + 64), (uint64_t (*)(_QWORD))sub_1000BFBA4);
  sub_10001DF70(v34, (uint64_t (*)(_QWORD))sub_1000BFBA4);
  sub_10001DF70((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1000BFB20);
  sub_10001DF70(v32, (uint64_t (*)(_QWORD))sub_1000BFBA4);
  return sub_10001DF70((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1000BFB20);
}

uint64_t sub_1000BEFC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t KeyPath;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v56 = a2;
  v54 = type metadata accessor for PriceChangeView(0);
  __chkstk_darwin(v54);
  v4 = (uint64_t *)((char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100066208(0, &qword_100115110, v5, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  __chkstk_darwin(v6);
  v53 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v55 = (uint64_t)&v50 - v9;
  v10 = (int *)type metadata accessor for SymbolTrendView(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100066208(0, &qword_100115108, v13, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  __chkstk_darwin(v14);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v57 = (uint64_t)&v50 - v18;
  v19 = *(_BYTE *)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(a1 + 48);
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(_QWORD *)(a1 + 64);
  KeyPath = swift_getKeyPath(&unk_1000E3A78);
  *v12 = v19;
  *((_QWORD *)v12 + 1) = v21;
  *((_QWORD *)v12 + 2) = v20;
  *((_QWORD *)v12 + 3) = v22;
  *((_QWORD *)v12 + 4) = v23;
  v24 = &v12[v10[6]];
  *(_QWORD *)v24 = swift_getKeyPath(&unk_1000E3AA0);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  v26 = &v12[v10[7]];
  *(_QWORD *)v26 = swift_getKeyPath(&unk_1000E3AD0);
  sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  v28 = &v12[v10[8]];
  *(_QWORD *)v28 = KeyPath;
  v28[8] = 0;
  v29 = sub_100003D3C(&qword_1001151C0, type metadata accessor for SymbolTrendView, (uint64_t)&unk_1000DCA38);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v23);
  v52 = v16;
  View.accessibilitySortPriority(_:)(v10, v29, 4.0);
  sub_10001DF70((uint64_t)v12, type metadata accessor for SymbolTrendView);
  sub_1000BFFB4((uint64_t)v16, v57, &qword_100115108, type metadata accessor for SymbolTrendView, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  v30 = *(_QWORD *)(a1 + 128);
  v31 = *(unsigned __int8 *)(a1 + 136);
  v33 = *(_QWORD *)(a1 + 144);
  v32 = *(_QWORD *)(a1 + 152);
  v34 = *(_QWORD *)(a1 + 160);
  v35 = *(unsigned __int8 *)(a1 + 168);
  v36 = *(_QWORD *)(a1 + 176);
  LOBYTE(v16) = *(_BYTE *)(a1 + 184);
  LOBYTE(a1) = *(_BYTE *)(a1 + 120);
  *v4 = swift_getKeyPath(&unk_1000E3A50);
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v4, v37, 0);
  v38 = v54;
  v39 = (char *)v4 + *(int *)(v54 + 20);
  *(_QWORD *)v39 = v30;
  *((_QWORD *)v39 + 1) = v31;
  *((_QWORD *)v39 + 2) = v33;
  *((_QWORD *)v39 + 3) = v32;
  *((_QWORD *)v39 + 4) = v34;
  *((_QWORD *)v39 + 5) = v35;
  *((_QWORD *)v39 + 6) = v36;
  v39[56] = (char)v16;
  v40 = v38;
  *((_BYTE *)v4 + *(int *)(v38 + 24)) = a1;
  v41 = sub_100003D3C(&qword_1001151B0, type metadata accessor for PriceChangeView, (uint64_t)&unk_1000E1700);
  swift_bridgeObjectRetain(v32);
  v42 = (uint64_t)v53;
  View.accessibilitySortPriority(_:)(v40, v41, 2.0);
  sub_10001DF70((uint64_t)v4, type metadata accessor for PriceChangeView);
  v43 = v55;
  sub_1000BFFB4(v42, v55, &qword_100115110, type metadata accessor for PriceChangeView, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  v44 = v57;
  v45 = (uint64_t)v52;
  sub_1000C0004(v57, (uint64_t)v52, &qword_100115108, type metadata accessor for SymbolTrendView, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  sub_1000C0004(v43, v42, &qword_100115110, type metadata accessor for PriceChangeView, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  v46 = v56;
  sub_1000C0004(v45, v56, &qword_100115108, type metadata accessor for SymbolTrendView, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  sub_100066018(0);
  v48 = v46 + *(int *)(v47 + 48);
  *(_QWORD *)v48 = 0x4020000000000000;
  *(_BYTE *)(v48 + 8) = 0;
  sub_1000C0004(v42, v46 + *(int *)(v47 + 64), &qword_100115110, type metadata accessor for PriceChangeView, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  sub_1000BFE50(v43, (uint64_t)&qword_100115110, (uint64_t)type metadata accessor for PriceChangeView, (uint64_t)&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD))sub_100066208);
  sub_1000BFE50(v44, (uint64_t)&qword_100115108, (uint64_t)type metadata accessor for SymbolTrendView, (uint64_t)&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD))sub_100066208);
  sub_1000BFE50(v42, (uint64_t)&qword_100115110, (uint64_t)type metadata accessor for PriceChangeView, (uint64_t)&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD))sub_100066208);
  return sub_1000BFE50(v45, (uint64_t)&qword_100115108, (uint64_t)type metadata accessor for SymbolTrendView, (uint64_t)&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD))sub_100066208);
}

uint64_t sub_1000BF4B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v49 = a2;
  v46 = type metadata accessor for PriceChangeView(0);
  __chkstk_darwin(v46);
  v4 = (uint64_t *)((char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100066270(0);
  v48 = v5;
  __chkstk_darwin(v5);
  v44 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100066208(0, &qword_100115148, v7, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  __chkstk_darwin(v8);
  v45 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v47 = (uint64_t)&v42 - v11;
  sub_1000BFD20(0, (unint64_t *)&qword_100115140, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&type metadata for CompanyNameView);
  __chkstk_darwin(v12);
  v43 = (uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v42 = (uint64_t)&v42 - v15;
  v16 = *(_QWORD *)(a1 + 80);
  v50 = *(_QWORD *)(a1 + 72);
  v51 = v16;
  v17 = sub_1000664B8();
  View.accessibilitySortPriority(_:)(&type metadata for CompanyNameView, v17, 3.0);
  v18 = *(_QWORD *)(a1 + 128);
  v19 = *(unsigned __int8 *)(a1 + 136);
  v21 = *(_QWORD *)(a1 + 144);
  v20 = *(_QWORD *)(a1 + 152);
  v22 = *(_QWORD *)(a1 + 160);
  v23 = *(unsigned __int8 *)(a1 + 168);
  v24 = *(_QWORD *)(a1 + 176);
  v25 = *(_BYTE *)(a1 + 184);
  LOBYTE(a1) = *(_BYTE *)(a1 + 120);
  *v4 = swift_getKeyPath(&unk_1000E3A50);
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v4, v26, 0);
  v27 = v46;
  v28 = (char *)v4 + *(int *)(v46 + 20);
  *(_QWORD *)v28 = v18;
  *((_QWORD *)v28 + 1) = v19;
  *((_QWORD *)v28 + 2) = v21;
  *((_QWORD *)v28 + 3) = v20;
  *((_QWORD *)v28 + 4) = v22;
  *((_QWORD *)v28 + 5) = v23;
  *((_QWORD *)v28 + 6) = v24;
  v28[56] = v25;
  *((_BYTE *)v4 + *(int *)(v27 + 24)) = a1;
  KeyPath = swift_getKeyPath(&unk_1000E3A50);
  v30 = v44;
  sub_10001DE2C((uint64_t)v4, v44, type metadata accessor for PriceChangeView);
  v31 = v48;
  v32 = (uint64_t *)(v30 + *(int *)(v48 + 36));
  *v32 = KeyPath;
  v32[1] = (uint64_t)sub_100065C80;
  v32[2] = 0;
  swift_bridgeObjectRetain(v20);
  sub_10001DF70((uint64_t)v4, type metadata accessor for PriceChangeView);
  v33 = sub_100066594();
  v34 = (uint64_t)v45;
  View.accessibilitySortPriority(_:)(v31, v33, 1.0);
  sub_10001DF70(v30, (uint64_t (*)(_QWORD))sub_100066270);
  v35 = v47;
  sub_1000BFFB4(v34, v47, &qword_100115148, (uint64_t (*)(uint64_t))sub_100066270, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  v37 = v42;
  v36 = v43;
  sub_1000BFDF0(v42, v43, (uint64_t)&qword_100115140, (uint64_t)&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&type metadata for CompanyNameView, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1000BFD20);
  sub_1000C0004(v35, v34, &qword_100115148, (uint64_t (*)(uint64_t))sub_100066270, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  v38 = v49;
  sub_1000BFDF0(v36, v49, (uint64_t)&qword_100115140, (uint64_t)&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&type metadata for CompanyNameView, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1000BFD20);
  sub_100066120(0);
  v40 = v38 + *(int *)(v39 + 48);
  *(_QWORD *)v40 = 0x4020000000000000;
  *(_BYTE *)(v40 + 8) = 0;
  sub_1000C0004(v34, v38 + *(int *)(v39 + 64), &qword_100115148, (uint64_t (*)(uint64_t))sub_100066270, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  sub_1000BFE50(v35, (uint64_t)&qword_100115148, (uint64_t)sub_100066270, (uint64_t)&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD))sub_100066208);
  sub_1000BFE50(v37, (uint64_t)&qword_100115140, (uint64_t)&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&type metadata for CompanyNameView, (uint64_t (*)(_QWORD))sub_1000BFD20);
  sub_1000BFE50(v34, (uint64_t)&qword_100115148, (uint64_t)sub_100066270, (uint64_t)&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD))sub_100066208);
  return sub_1000BFE50(v36, (uint64_t)&qword_100115140, (uint64_t)&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&type metadata for CompanyNameView, (uint64_t (*)(_QWORD))sub_1000BFD20);
}

uint64_t sub_1000BF8E4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  *(_QWORD *)a1 = static HorizontalAlignment.trailing.getter();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  sub_1000AB7A8(0, &qword_100117F10, &qword_100117F18, (uint64_t (*)(uint64_t))sub_1000BF940);
  return sub_1000BE5A0(v1, a1 + *(int *)(v3 + 44));
}

void sub_1000BF940(uint64_t a1)
{
  unint64_t TupleTypeMetadata;
  uint64_t v3;

  if (!qword_100117F20)
  {
    sub_100066208(255, &qword_100117F28, (uint64_t (*)(uint64_t))sub_1000BFA08, (uint64_t (*)(uint64_t))sub_100024258);
    sub_100093838();
    type metadata accessor for SmallSparklineView(255);
    sub_1000BFD20(255, &qword_100112BD8, (uint64_t (*)(uint64_t))sub_100024258, (uint64_t)&type metadata for LargePriceView);
    TupleTypeMetadata = swift_getTupleTypeMetadata(a1, 5);
    if (!v3)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_100117F20);
  }
}

void sub_1000BFA08(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_100117F30)
  {
    sub_100024A18(255, &qword_100117F38, &qword_100117F40, (uint64_t (*)(uint64_t))sub_1000BFA9C, &qword_100117F50);
    v5[0] = v2;
    v5[1] = sub_1000BFCB8();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100117F30);
  }
}

void sub_1000BFA9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t TupleTypeMetadata3;
  uint64_t v8;

  if (!qword_100117F48)
  {
    sub_1000BFB20(255);
    v3 = v2;
    sub_100093838();
    v5 = v4;
    sub_1000BFBA4(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v3, v5, v6, 0, 0);
    if (!v8)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100117F48);
  }
}

void sub_1000BFB20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001150E8)
  {
    sub_1000BFC28(255, &qword_1001150F0, &qword_1001150F8, (uint64_t (*)(uint64_t))sub_100066018, &qword_100115118);
    v3 = v2;
    sub_100024258();
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001150E8);
  }
}

void sub_1000BFBA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100115120)
  {
    sub_1000BFC28(255, &qword_100115128, &qword_100115130, (uint64_t (*)(uint64_t))sub_100066120, &qword_100115160);
    v3 = v2;
    sub_100024258();
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100115120);
  }
}

void sub_1000BFC28(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (!*a2)
  {
    sub_10000EDE8(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v11 = v10;
    v12 = sub_100024AA8(a5, a3, a4);
    v13 = type metadata accessor for HStack(a1, v11, v12);
    if (!v14)
      atomic_store(v13, a2);
  }
}

unint64_t sub_1000BFCB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117F58;
  if (!qword_100117F58)
  {
    sub_100024A18(255, &qword_100117F38, &qword_100117F40, (uint64_t (*)(uint64_t))sub_1000BFA9C, &qword_100117F50);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100117F58);
  }
  return result;
}

void sub_1000BFD20(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = type metadata accessor for ModifiedContent(a1, a4, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_1000BFD7C(uint64_t a1)
{
  uint64_t v2;

  sub_100024A18(0, &qword_100117F38, &qword_100117F40, (uint64_t (*)(uint64_t))sub_1000BFA9C, &qword_100117F50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000BFDE0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000BFDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_1000BFE40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000BFE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;

  v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void sub_1000BFE8C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_10000EDE8(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v7 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _HStackLayout, v6, &protocol witness table for _HStackLayout);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1000BFEFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000BFF0C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  uint64_t v6;

  sub_1000BFC28(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_1000BFF48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000BFF58(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t (*a5)(uint64_t), unint64_t *a6)
{
  uint64_t v8;

  sub_1000BFC28(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_1000BFFB4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t v7;

  sub_100066208(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_1000C0004(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t v7;

  sub_100066208(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_1000C005C()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_1000C007C()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_1000C009C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for WidgetRenderingMode(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.widgetRenderingMode.setter(v4);
}

unint64_t sub_1000C0120()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117F68;
  if (!qword_100117F68)
  {
    sub_100024A18(255, &qword_100117F70, &qword_100117F18, (uint64_t (*)(uint64_t))sub_1000BF940, &qword_100117F78);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100117F68);
  }
  return result;
}

uint64_t destroy for DividerExtendedIntoMargin(uint64_t a1)
{
  return sub_100028060(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for DividerExtendedIntoMargin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  sub_100038430(v3, v4, v5, v6, v7);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  return a1;
}

uint64_t assignWithCopy for DividerExtendedIntoMargin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  sub_100038430(v3, v4, v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  sub_100028060(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for DividerExtendedIntoMargin(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v3;
  sub_100028060(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DividerExtendedIntoMargin(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[41])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DividerExtendedIntoMargin(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DividerExtendedIntoMargin()
{
  return &type metadata for DividerExtendedIntoMargin;
}

uint64_t sub_1000C0388(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000EA20C, 1);
}

void sub_1000C0398(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned __int8 *v6;
  int v9;
  __int128 v10;
  double v11;
  char v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[2];
  unsigned __int8 v26;
  _BYTE v27[40];

  v9 = *v6;
  v10 = *(_OWORD *)(v6 + 24);
  v25[0] = *(_OWORD *)(v6 + 8);
  v25[1] = v10;
  v26 = v6[40];
  v11 = 0.0;
  v12 = static Edge.Set.trailing.getter(a1, a2, a3, a4, a5);
  if (v9 == 1)
  {
    sub_10003BD5C((uint64_t)v25, (uint64_t)v27);
    sub_10003BDB8((uint64_t)v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100038430);
    sub_100045EEC();
    v14 = v13;
    sub_10003BDB8((uint64_t)v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100028060);
    v11 = -v14;
  }
  v15 = EdgeInsets.init(_all:)(v11);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  sub_1000C04A0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a6, a1, v22);
  sub_1000C053C(0);
  v24 = a6 + *(int *)(v23 + 36);
  *(_BYTE *)v24 = v12;
  *(double *)(v24 + 8) = v15;
  *(_QWORD *)(v24 + 16) = v17;
  *(_QWORD *)(v24 + 24) = v19;
  *(_QWORD *)(v24 + 32) = v21;
  *(_BYTE *)(v24 + 40) = 0;
}

void sub_1000C04A0(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100117F80)
  {
    v2 = sub_1000C04F8();
    v3 = type metadata accessor for _ViewModifier_Content(a1, &type metadata for DividerExtendedIntoMargin, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100117F80);
  }
}

unint64_t sub_1000C04F8()
{
  unint64_t result;

  result = qword_100117F88;
  if (!qword_100117F88)
  {
    result = swift_getWitnessTable(&unk_1000E3B1C, &type metadata for DividerExtendedIntoMargin);
    atomic_store(result, (unint64_t *)&qword_100117F88);
  }
  return result;
}

void sub_1000C053C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100117F90)
  {
    sub_1000C04A0(255);
    v3 = type metadata accessor for ModifiedContent(a1, v2, &type metadata for _PaddingLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100117F90);
  }
}

unint64_t sub_1000C059C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100117F98;
  if (!qword_100117F98)
  {
    sub_1000C053C(255);
    v2 = v1;
    sub_1000C0604();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100117F98);
  }
  return result;
}

unint64_t sub_1000C0604()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117FA0;
  if (!qword_100117FA0)
  {
    sub_1000C04A0(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100117FA0);
  }
  return result;
}

unint64_t destroy for HeadlineRubric(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(result);
    return swift_release(*(_QWORD *)(a1 + 16));
  }
  return result;
}

uint64_t _s12StocksWidget14HeadlineRubricOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    swift_bridgeObjectRetain(v3);
    swift_retain(v4);
  }
  return a1;
}

_QWORD *assignWithCopy for HeadlineRubric(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v9 = a2[1];
      a1[1] = v9;
      v10 = a2[2];
      a1[2] = v10;
      swift_bridgeObjectRetain(v9);
      swift_retain(v10);
      return a1;
    }
LABEL_7:
    v11 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v11;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_release(a1[2]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  v7 = a1[2];
  v8 = a2[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v7);
  return a1;
}

uint64_t assignWithTake for HeadlineRubric(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
    swift_release(*(_QWORD *)(a1 + 16));
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for HeadlineRubric(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for HeadlineRubric(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_1000C08FC(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000C0914(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for HeadlineRubric()
{
  return &type metadata for HeadlineRubric;
}

uint64_t *sub_1000C0948(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = a2[1];
    if (v7 >= 2)
    {
      *a1 = *a2;
      a1[1] = v7;
      v9 = a2[2];
      a1[2] = v9;
      swift_bridgeObjectRetain(v7);
      swift_retain(v9);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
    }
    v10 = *(int *)(a3 + 20);
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v14 = v13;
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v15 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v11, v12, v15);
      v16 = v11;
      v17 = v14;
      v18 = 1;
    }
    else
    {
      v19 = *v12;
      *v11 = *v12;
      swift_retain(v19);
      v16 = v11;
      v17 = v14;
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v17, v18);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

double sub_1000C0A84(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >= 2)
  {
    swift_bridgeObjectRelease(v4);
    swift_release(*(_QWORD *)(a1 + 16));
  }
  v5 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v5).n128_u64[0];
  }
  return result;
}

_QWORD *sub_1000C0B20(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2[1];
  if (v6 >= 2)
  {
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[2];
    a1[2] = v7;
    swift_bridgeObjectRetain(v6);
    swift_retain(v7);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
  }
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v12 = v11;
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v13 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
    v14 = v9;
    v15 = v12;
    v16 = 1;
  }
  else
  {
    v17 = *v10;
    *v9 = *v10;
    swift_retain(v17);
    v14 = v9;
    v15 = v12;
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v15, v16);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_1000C0C30(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a1[1];
  v7 = a2[1];
  if (v6 >= 2)
  {
    if (v7 >= 2)
    {
      *a1 = *a2;
      v12 = a2[1];
      a1[1] = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v6);
      v13 = a1[2];
      v14 = a2[2];
      a1[2] = v14;
      swift_retain(v14);
      swift_release(v13);
      if (a1 == a2)
        goto LABEL_15;
    }
    else
    {
      sub_10001DF70((uint64_t)a1, (uint64_t (*)(_QWORD))sub_10009224C);
      v9 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v9;
      if (a1 == a2)
        goto LABEL_15;
    }
  }
  else if (v7 >= 2)
  {
    *a1 = *a2;
    v10 = a2[1];
    a1[1] = v10;
    v11 = a2[2];
    a1[2] = v11;
    swift_bridgeObjectRetain(v10);
    swift_retain(v11);
    if (a1 == a2)
      goto LABEL_15;
  }
  else
  {
    v8 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v8;
    if (a1 == a2)
      goto LABEL_15;
  }
  v15 = *(int *)(a3 + 20);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  sub_10002B1A4((uint64_t)a1 + v15);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v19 = v18;
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v20 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v16, v17, v20);
    v21 = v16;
    v22 = v19;
    v23 = 1;
  }
  else
  {
    v24 = *v17;
    *v16 = *v17;
    swift_retain(v24);
    v21 = v16;
    v22 = v19;
    v23 = 0;
  }
  swift_storeEnumTagMultiPayload(v21, v22, v23);
LABEL_15:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000C0DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v10 = v9;
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v11 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
    swift_storeEnumTagMultiPayload(v7, v10, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_1000C0EC0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a1[1];
  if (v6 >= 2)
  {
    v7 = a2[1];
    if (v7 >= 2)
    {
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRelease(v6);
      v8 = a1[2];
      a1[2] = a2[2];
      swift_release(v8);
      if (a1 == a2)
        goto LABEL_10;
      goto LABEL_7;
    }
    sub_10001DF70((uint64_t)a1, (uint64_t (*)(_QWORD))sub_10009224C);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = a2[2];
  if (a1 == a2)
    goto LABEL_10;
LABEL_7:
  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  sub_10002B1A4((uint64_t)a1 + v9);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v13 = v12;
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v14 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v10, v11, v14);
    swift_storeEnumTagMultiPayload(v10, v13, 1);
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
LABEL_10:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000C1000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C100C);
}

uint64_t sub_1000C100C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483645)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 2;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t sub_1000C10B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C10BC);
}

uint64_t sub_1000C10BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483645)
  {
    *(_QWORD *)(result + 8) = (a2 + 1);
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for HeadlineRubricView(uint64_t a1)
{
  uint64_t result;

  result = qword_100118000;
  if (!qword_100118000)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HeadlineRubricView);
  return result;
}

void sub_1000C1188(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1000E3BB8;
  sub_10000EDE8(319, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_1000C1220(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000EA278, 1);
}

uint64_t sub_1000C1230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  void (*v9)(char *, uint64_t);
  double v10;
  void *v11;
  id v12;
  uint64_t v14;

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - v5;
  type metadata accessor for HeadlineRubricView(0);
  sub_100045E2C(v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for WidgetFamily.systemLarge(_:), v0);
  v7 = sub_100003D3C(&qword_100118098, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v8 = dispatch thunk of static Comparable.< infix(_:_:)(v6, v3, v0, v7);
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v3, v0);
  v9(v6, v0);
  if ((v8 & 1) != 0)
    v10 = 8.0;
  else
    v10 = 10.0;
  sub_1000C22FC();
  v11 = (void *)static UIFont.preferredFont(for:weight:)(UIFontTextStyleCaption1, UIFontWeightBold);
  v12 = objc_msgSend(v11, "fontWithSize:", v10);

  return Font.init(_:)(v12);
}

uint64_t sub_1000C13A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t KeyPath;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  id (*v105)(uint64_t, void *);
  char v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char v126;
  uint64_t *v127;
  uint64_t v128;
  id v129;
  void *v130;
  id v131;
  uint64_t *v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char v142;
  __n128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t aBlock;
  unint64_t v177;
  id (*v178)(uint64_t, void *);
  void *v179;
  __int128 v180;

  v173 = a2;
  sub_1000C2400(0, &qword_100118040, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v4 = v3;
  __chkstk_darwin(v3);
  v172 = (uint64_t)&v161 - v5;
  sub_1000C1F34(0, &qword_100118070, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v7 = v6;
  __chkstk_darwin(v6);
  v9 = (char *)&v161 - v8;
  sub_1000C1F34(0, &qword_100118048, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
  v11 = v10;
  __chkstk_darwin(v10);
  v13 = (char *)&v161 - v12;
  sub_1000C1EA0(0);
  v15 = v14;
  __chkstk_darwin(v14);
  v170 = (uint64_t *)((char *)&v161 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000C1EBC(0);
  __chkstk_darwin(v17);
  v171 = (char *)&v161 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C1E44(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v161 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  __chkstk_darwin(v23);
  v25 = (char *)&v161 - v24;
  __chkstk_darwin(v26);
  v30 = a1[1];
  v174 = v4;
  v175 = v11;
  if (v30)
  {
    v166 = v27;
    v167 = v7;
    v168 = v9;
    v169 = v13;
    v165 = v15;
    if (v30 == 1)
    {
      v164 = v29;
      v31 = LocalizedStringKey.init(stringLiteral:)(0x6572207373657270, 0xED0000657361656CLL);
      v32 = Text.init(_:tableName:bundle:comment:)(v31);
      v34 = v33;
      v36 = v35;
      v38 = v37 & 1;
      v39 = sub_1000C1230();
      v40 = Text.font(_:)(v39, v32, v34, v38, v36);
      v42 = v41;
      v44 = v43;
      v46 = v45;
      swift_release(v39);
      LOBYTE(v39) = v44 & 1;
      sub_100014490(v32, v34, v38);
      swift_bridgeObjectRelease(v36);
      LODWORD(aBlock) = static HierarchicalShapeStyle.secondary.getter(v47);
      v48 = Text.foregroundStyle<A>(_:)(&aBlock, v40, v42, v44 & 1, v46, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
      v50 = v49;
      v52 = v51;
      v54 = v53 & 1;
      sub_100014490(v40, v42, v39);
      v55 = swift_bridgeObjectRelease(v46);
      v56 = enum case for Text.Case.uppercase(_:);
      v57 = type metadata accessor for Text.Case(0, v55);
      v58 = *(_QWORD *)(v57 - 8);
      v59 = (uint64_t)v171;
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 104))(v171, v56, v57);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
      KeyPath = swift_getKeyPath(&unk_1000E3C20);
      v61 = v170;
      sub_10001DE2C(v59, (uint64_t)v170 + *(int *)(v165 + 28), (uint64_t (*)(_QWORD))sub_1000C1EBC);
      *v61 = KeyPath;
      v62 = v166;
      sub_10001DE2C((uint64_t)v61, (uint64_t)&v21[*(int *)(v166 + 36)], (uint64_t (*)(_QWORD))sub_1000C1EA0);
      *(_QWORD *)v21 = v48;
      *((_QWORD *)v21 + 1) = v50;
      v21[16] = v54;
      *((_QWORD *)v21 + 3) = v52;
      sub_1000144EC(v48, v50, v54);
      swift_bridgeObjectRetain(v52);
      sub_10001DF70((uint64_t)v61, (uint64_t (*)(_QWORD))sub_1000C1EA0);
      sub_10001DF70(v59, (uint64_t (*)(_QWORD))sub_1000C1EBC);
      sub_100014490(v48, v50, v54);
      swift_bridgeObjectRelease(v52);
      v63 = v164;
      sub_1000C2200((uint64_t)v21, v164);
      v64 = (uint64_t)v168;
      sub_10001DE2C(v63, (uint64_t)v168, (uint64_t (*)(_QWORD))sub_1000C1E44);
      swift_storeEnumTagMultiPayload(v64, v167, 1);
      v65 = sub_1000C2000();
      v66 = (uint64_t)v169;
      _ConditionalContent<>.init(storage:)(v64, v62, v62, v65, v65);
      v67 = v172;
      sub_1000C2244(v66, v172);
      swift_storeEnumTagMultiPayload(v67, v174, 0);
      sub_1000C1ED8();
      v69 = v68;
      v70 = sub_1000C1F90();
      v71 = sub_1000C2080();
      _ConditionalContent<>.init(storage:)(v67, v175, v69, v70, v71);
      sub_1000C2298(v66);
      v72 = v63;
    }
    else
    {
      v164 = (uint64_t)&v161 - v28;
      v112 = a1[2];
      aBlock = *a1;
      v177 = v30;
      v113 = sub_1000144A0();
      swift_bridgeObjectRetain(v30);
      swift_retain(v112);
      v114 = Text.init<A>(_:)(&aBlock, &type metadata for String, v113);
      v116 = v115;
      v118 = v117;
      v120 = v119 & 1;
      v121 = sub_1000C1230();
      v122 = Text.font(_:)(v121, v114, v116, v120, v118);
      v124 = v123;
      v126 = v125;
      v163 = v127;
      swift_release(v121);
      sub_100014490(v114, v116, v120);
      swift_bridgeObjectRelease(v118);
      v128 = v112;
      if (!v112)
      {
        v129 = objc_allocWithZone((Class)UIColor);
        *(_QWORD *)&v180 = sub_1000C20E0;
        *((_QWORD *)&v180 + 1) = 0;
        aBlock = (uint64_t)_NSConcreteStackBlock;
        v177 = 1107296256;
        v178 = sub_10000E270;
        v179 = &unk_100109E40;
        v130 = _Block_copy(&aBlock);
        v131 = objc_msgSend(v129, "initWithDynamicProvider:", v130);
        _Block_release(v130);
        swift_release(*((_QWORD *)&v180 + 1));
        v128 = Color.init(uiColor:)(v131);
      }
      aBlock = v128;
      v132 = (uint64_t *)v112;
      swift_retain(v112);
      v133 = v126 & 1;
      v134 = v122;
      v135 = v122;
      v136 = v163;
      v137 = Text.foregroundStyle<A>(_:)(&aBlock, v134, v124, v126 & 1, v163, &type metadata for Color, &protocol witness table for Color);
      v139 = v138;
      v162 = v140;
      v142 = v141 & 1;
      sub_100014490(v135, v124, v133);
      swift_release(v128);
      v143 = swift_bridgeObjectRelease(v136);
      v144 = enum case for Text.Case.uppercase(_:);
      v145 = type metadata accessor for Text.Case(0, v143);
      v163 = v132;
      v146 = *(_QWORD *)(v145 - 8);
      v147 = (uint64_t)v171;
      (*(void (**)(char *, uint64_t, uint64_t))(v146 + 104))(v171, v144, v145);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v146 + 56))(v147, 0, 1, v145);
      v148 = swift_getKeyPath(&unk_1000E3C20);
      v149 = v170;
      sub_10001DE2C(v147, (uint64_t)v170 + *(int *)(v165 + 28), (uint64_t (*)(_QWORD))sub_1000C1EBC);
      *v149 = v148;
      v150 = v166;
      sub_10001DE2C((uint64_t)v149, (uint64_t)&v25[*(int *)(v166 + 36)], (uint64_t (*)(_QWORD))sub_1000C1EA0);
      *(_QWORD *)v25 = v137;
      *((_QWORD *)v25 + 1) = v139;
      v25[16] = v142;
      v151 = v162;
      *((_QWORD *)v25 + 3) = v162;
      sub_1000144EC(v137, v139, v142);
      swift_bridgeObjectRetain(v151);
      sub_10001DF70((uint64_t)v149, (uint64_t (*)(_QWORD))sub_1000C1EA0);
      sub_10001DF70(v147, (uint64_t (*)(_QWORD))sub_1000C1EBC);
      sub_100014490(v137, v139, v142);
      swift_bridgeObjectRelease(v151);
      v152 = v164;
      sub_1000C2200((uint64_t)v25, v164);
      v153 = (uint64_t)v168;
      sub_10001DE2C(v152, (uint64_t)v168, (uint64_t (*)(_QWORD))sub_1000C1E44);
      swift_storeEnumTagMultiPayload(v153, v167, 0);
      v154 = sub_1000C2000();
      v155 = (uint64_t)v169;
      _ConditionalContent<>.init(storage:)(v153, v150, v150, v154, v154);
      v156 = v172;
      sub_1000C2244(v155, v172);
      swift_storeEnumTagMultiPayload(v156, v174, 0);
      sub_1000C1ED8();
      v158 = v157;
      v159 = sub_1000C1F90();
      v160 = sub_1000C2080();
      _ConditionalContent<>.init(storage:)(v156, v175, v158, v159, v160);
      swift_release(v163);
      sub_1000C2298(v155);
      v72 = v152;
    }
    return sub_10001DF70(v72, (uint64_t (*)(_QWORD))sub_1000C1E44);
  }
  else
  {
    v163 = a1;
    aBlock = 0x654EAF80E2BFA3EFLL;
    v177 = 0xAB000000002B7377;
    v73 = sub_1000144A0();
    aBlock = StringProtocol.localizedCapitalized.getter(&type metadata for String, v73);
    v177 = v74;
    v75 = Text.init<A>(_:)(&aBlock, &type metadata for String, v73);
    v77 = v76;
    v79 = v78;
    v81 = v80 & 1;
    v82 = sub_1000C1230();
    v83 = Text.font(_:)(v82, v75, v77, v81, v79);
    v85 = v84;
    v87 = v86;
    v88 = v172;
    v90 = v89;
    swift_release(v82);
    LOBYTE(v82) = v87 & 1;
    sub_100014490(v75, v77, v81);
    swift_bridgeObjectRelease(v79);
    v92 = static Color.secondary.getter(v91);
    v93 = Text.foregroundColor(_:)(v92, v83, v85, v87 & 1, v90);
    v95 = v94;
    LOBYTE(v81) = v96;
    v98 = v97;
    swift_release(v92);
    sub_100014490(v83, v85, v82);
    swift_bridgeObjectRelease(v90);
    v99 = type metadata accessor for HeadlineRubricView(0);
    v100 = *(double *)((char *)v163 + *(int *)(v99 + 24)) * 0.8;
    v101 = static Alignment.center.getter(v99);
    _FrameLayout.init(width:height:alignment:)(&aBlock, 0, 1, *(_QWORD *)&v100, 0, v101, v102);
    v103 = aBlock;
    v104 = v177;
    v105 = v178;
    v106 = (char)v179;
    *(_QWORD *)v88 = v93;
    *(_QWORD *)(v88 + 8) = v95;
    *(_BYTE *)(v88 + 16) = v81 & 1;
    *(_QWORD *)(v88 + 24) = v98;
    *(_QWORD *)(v88 + 32) = v103;
    *(_BYTE *)(v88 + 40) = v104;
    *(_QWORD *)(v88 + 48) = v105;
    *(_BYTE *)(v88 + 56) = v106;
    *(_OWORD *)(v88 + 64) = v180;
    swift_storeEnumTagMultiPayload(v88, v174, 1);
    sub_1000C1ED8();
    v108 = v107;
    v109 = sub_1000C1F90();
    v110 = sub_1000C2080();
    return _ConditionalContent<>.init(storage:)(v88, v175, v108, v109, v110);
  }
}

uint64_t sub_1000C1E3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000C13A8(v1, a1);
}

void sub_1000C1E44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100118050)
  {
    sub_1000C1EA0(255);
    v3 = type metadata accessor for ModifiedContent(a1, &type metadata for Text, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100118050);
  }
}

void sub_1000C1EA0(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100118058, (uint64_t (*)(uint64_t))sub_1000C1EBC, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
}

void sub_1000C1EBC(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100118060, (uint64_t (*)(uint64_t))&type metadata accessor for Text.Case, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

void sub_1000C1ED8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100118068)
  {
    v0 = type metadata accessor for ModifiedContent(0, &type metadata for Text, &type metadata for _FrameLayout);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100118068);
  }
}

void sub_1000C1F34(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1000C1E44(255);
    v7 = a3(a1, v6, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1000C1F90()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100118078;
  if (!qword_100118078)
  {
    sub_1000C1F34(255, &qword_100118048, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v2 = v1;
    sub_1000C2000();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100118078);
  }
  return result;
}

unint64_t sub_1000C2000()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100118080;
  if (!qword_100118080)
  {
    sub_1000C1E44(255);
    v2 = v1;
    sub_100003D3C(&qword_100118088, (uint64_t (*)(uint64_t))sub_1000C1EA0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100118080);
  }
  return result;
}

unint64_t sub_1000C2080()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118090;
  if (!qword_100118090)
  {
    sub_1000C1ED8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118090);
  }
  return result;
}

id sub_1000C20E0(void *a1)
{
  id v1;
  id v2;
  double v3;
  double v4;

  v1 = objc_msgSend(a1, "userInterfaceStyle");
  v2 = objc_allocWithZone((Class)UIColor);
  if (v1 == (id)2)
  {
    v3 = 0.764705882;
    v4 = 0.737254902;
  }
  else
  {
    v3 = 0.235294118;
    v4 = 0.262745098;
  }
  return objc_msgSend(v2, "initWithRed:green:blue:alpha:", v3, v3, v4, 0.6);
}

uint64_t sub_1000C2160()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_1000C2180(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v7;

  sub_1000C1EBC(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DE2C(a1, (uint64_t)v4, v5);
  return EnvironmentValues.textCase.setter(v4);
}

uint64_t sub_1000C2200(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000C1E44(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C2244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000C1F34(0, &qword_100118048, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C2298(uint64_t a1)
{
  uint64_t v2;

  sub_1000C1F34(0, &qword_100118048, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C22E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C22F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000C22FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001180A0;
  if (!qword_1001180A0)
  {
    v1 = objc_opt_self(UIFont);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001180A0);
  }
  return result;
}

unint64_t sub_1000C233C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001180A8;
  if (!qword_1001180A8)
  {
    sub_1000C239C(255);
    v2 = v1;
    sub_1000C2478();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v2);
    atomic_store(result, (unint64_t *)&qword_1001180A8);
  }
  return result;
}

void sub_1000C239C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001180B0)
  {
    sub_1000C2400(255, &qword_1001180B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v3 = type metadata accessor for Group(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001180B0);
  }
}

void sub_1000C2400(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_1000C1F34(255, &qword_100118048, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v7 = v6;
    sub_1000C1ED8();
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t sub_1000C2478()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001180C0;
  if (!qword_1001180C0)
  {
    sub_1000C2400(255, &qword_1001180B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v2 = v1;
    sub_1000C1F90();
    sub_1000C2080();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001180C0);
  }
  return result;
}

_BYTE *sub_1000C24F0(_BYTE *a1, uint64_t *a2, int *a3)
{
  _BYTE *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v52;
  uint64_t v53;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_BYTE *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *((_QWORD *)v4 + 1) = a2[1];
    *((_QWORD *)v4 + 2) = v7;
    v8 = a2[4];
    *((_QWORD *)v4 + 3) = a2[3];
    *((_QWORD *)v4 + 4) = v8;
    v9 = a2[6];
    *((_QWORD *)v4 + 5) = a2[5];
    *((_QWORD *)v4 + 6) = v9;
    v10 = v4 + 56;
    v11 = a2 + 7;
    v12 = a2[10];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v12 == 1)
    {
      v13 = *(_OWORD *)(a2 + 9);
      *v10 = *v11;
      *(_OWORD *)(v4 + 72) = v13;
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v4[64] = *((_BYTE *)a2 + 64);
      *((_QWORD *)v4 + 9) = a2[9];
      *((_QWORD *)v4 + 10) = v12;
      swift_bridgeObjectRetain(v12);
    }
    v15 = v4 + 88;
    v16 = a2 + 11;
    v17 = a2[14];
    if (v17 == 1)
    {
      v18 = *(_OWORD *)(a2 + 13);
      *v15 = *v16;
      *(_OWORD *)(v4 + 104) = v18;
      *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 15);
      *(_OWORD *)(v4 + 129) = *(_OWORD *)((char *)a2 + 129);
    }
    else
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      v4[96] = *((_BYTE *)a2 + 96);
      *((_QWORD *)v4 + 13) = a2[13];
      *((_QWORD *)v4 + 14) = v17;
      *((_QWORD *)v4 + 15) = a2[15];
      v4[128] = *((_BYTE *)a2 + 128);
      *((_QWORD *)v4 + 17) = a2[17];
      v4[144] = *((_BYTE *)a2 + 144);
      swift_bridgeObjectRetain(v17);
    }
    v19 = a3[9];
    v20 = (uint64_t *)&v4[v19];
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = (int *)type metadata accessor for PreparedSparkline(0);
    v23 = *((_QWORD *)v22 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
    {
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v53 = v23;
      v25 = *v21;
      *v20 = *v21;
      v26 = v22[5];
      v52 = (char *)v20 + v26;
      v27 = (char *)v21 + v26;
      v28 = type metadata accessor for Date(0);
      v29 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 16);
      v30 = swift_bridgeObjectRetain(v25);
      v29(v52, v27, v28, v30);
      sub_100022800(0);
      ((void (*)(char *, char *, uint64_t))v29)(&v52[*(int *)(v31 + 36)], &v27[*(int *)(v31 + 36)], v28);
      v32 = v22[6];
      v33 = (char *)v20 + v32;
      v34 = (char *)v21 + v32;
      v35 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
      *(_OWORD *)((char *)v20 + v22[7]) = *(_OWORD *)((char *)v21 + v22[7]);
      v36 = v22[8];
      v37 = (char *)v20 + v36;
      v38 = (char *)v21 + v36;
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      *((_BYTE *)v20 + v22[9]) = *((_BYTE *)v21 + v22[9]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v53 + 56))(v20, 0, 1, v22);
    }
    v39 = a3[10];
    v40 = a3[11];
    v41 = *(uint64_t *)((char *)a2 + v39);
    *(_QWORD *)&v4[v39] = v41;
    v42 = (uint64_t *)&v4[v40];
    v43 = (uint64_t *)((char *)a2 + v40);
    sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v45 = v44;
    swift_retain(v41);
    if (swift_getEnumCaseMultiPayload(v43, v45) == 1)
    {
      v46 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v42, v43, v46);
      v47 = v42;
      v48 = v45;
      v49 = 1;
    }
    else
    {
      v50 = *v43;
      *v42 = *v43;
      swift_retain(v50);
      v47 = v42;
      v48 = v45;
      v49 = 0;
    }
    swift_storeEnumTagMultiPayload(v47, v48, v49);
  }
  return v4;
}

double sub_1000C283C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  v4 = a1[10];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = a1[14];
  if (v5 != 1)
    swift_bridgeObjectRelease(v5);
  v6 = (_QWORD *)((char *)a1 + a2[9]);
  v7 = type metadata accessor for PreparedSparkline(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease(*v6);
    v8 = (char *)v6 + *(int *)(v7 + 20);
    v9 = type metadata accessor for Date(0);
    v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v10(v8, v9);
    sub_100022800(0);
    v10(&v8[*(int *)(v11 + 36)], v9);
    v12 = (char *)v6 + *(int *)(v7 + 24);
    v13 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[10]));
  v14 = (_QWORD *)((char *)a1 + a2[11]);
  sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v14).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000C29C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  int *v51;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  v9 = (_OWORD *)(a1 + 56);
  v10 = a2 + 56;
  v11 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v11 == 1)
  {
    v12 = *(_OWORD *)(v10 + 16);
    *v9 = *(_OWORD *)v10;
    *(_OWORD *)(a1 + 72) = v12;
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(v10 + 8);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v11;
    swift_bridgeObjectRetain(v11);
  }
  v13 = (_OWORD *)(a1 + 88);
  v14 = (_OWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 112);
  if (v15 == 1)
  {
    v16 = *(_OWORD *)(a2 + 104);
    *v13 = *v14;
    *(_OWORD *)(a1 + 104) = v16;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  }
  else
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v15;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    swift_bridgeObjectRetain(v15);
  }
  v17 = a3[9];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = (int *)type metadata accessor for PreparedSparkline(0);
  v21 = *((_QWORD *)v20 - 1);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = *v19;
    *v18 = *v19;
    v24 = v20[5];
    v51 = a3;
    v25 = (char *)v18 + v24;
    v26 = (char *)v19 + v24;
    v27 = type metadata accessor for Date(0);
    v50 = v21;
    v28 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v27 - 8) + 16);
    v29 = swift_bridgeObjectRetain(v23);
    v28(v25, v26, v27, v29);
    sub_100022800(0);
    ((void (*)(char *, char *, uint64_t))v28)(&v25[*(int *)(v30 + 36)], &v26[*(int *)(v30 + 36)], v27);
    v31 = v20[6];
    v32 = (char *)v18 + v31;
    v33 = (char *)v19 + v31;
    v34 = type metadata accessor for TimeZone(0);
    v35 = v33;
    a3 = v51;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v35, v34);
    *(_OWORD *)((char *)v18 + v20[7]) = *(_OWORD *)((char *)v19 + v20[7]);
    v36 = v20[8];
    v37 = (char *)v18 + v36;
    v38 = (char *)v19 + v36;
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v37[8] = v38[8];
    *((_BYTE *)v18 + v20[9]) = *((_BYTE *)v19 + v20[9]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v50 + 56))(v18, 0, 1, v20);
  }
  v39 = a3[10];
  v40 = a3[11];
  v41 = *(_QWORD *)(a2 + v39);
  *(_QWORD *)(a1 + v39) = v41;
  v42 = (uint64_t *)(a1 + v40);
  v43 = (uint64_t *)(a2 + v40);
  sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v45 = v44;
  swift_retain(v41);
  if (swift_getEnumCaseMultiPayload(v43, v45) == 1)
  {
    v46 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v42, v43, v46);
    v47 = 1;
  }
  else
  {
    v48 = *v43;
    *v42 = *v43;
    swift_retain(v48);
    v47 = 0;
  }
  swift_storeEnumTagMultiPayload(v42, v45, v47);
  return a1;
}

uint64_t sub_1000C2CDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  int *v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD *, uint64_t, int *);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t, __n128);
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v96;
  int *v97;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = (_OWORD *)(a1 + 56);
  v13 = (_OWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a2 + 80);
  if (v14 == 1)
  {
    if (v15 == 1)
    {
      v16 = *(_OWORD *)(a2 + 72);
      *v12 = *v13;
      *(_OWORD *)(a1 + 72) = v16;
    }
    else
    {
      v18 = *(_QWORD *)v13;
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_QWORD *)v12 = v18;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v19 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 80) = v19;
      swift_bridgeObjectRetain(v19);
    }
  }
  else if (v15 == 1)
  {
    sub_10002304C(a1 + 56);
    v17 = *(_OWORD *)(a2 + 72);
    *v12 = *v13;
    *(_OWORD *)(a1 + 72) = v17;
  }
  else
  {
    v20 = *(_QWORD *)v13;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_QWORD *)v12 = v20;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    v21 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v21;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v14);
  }
  v22 = (_OWORD *)(a1 + 88);
  v23 = (__int128 *)(a2 + 88);
  v24 = *(_QWORD *)(a1 + 112);
  v25 = *(_QWORD *)(a2 + 112);
  if (v24 == 1)
  {
    if (v25 == 1)
    {
      v26 = *v23;
      v27 = *(_OWORD *)(a2 + 104);
      v28 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
      *(_OWORD *)(a1 + 104) = v27;
      *(_OWORD *)(a1 + 120) = v28;
      *v22 = v26;
    }
    else
    {
      v32 = *(_QWORD *)v23;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_QWORD *)v22 = v32;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      v33 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v33;
      v34 = *(_QWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_QWORD *)(a1 + 120) = v34;
      v35 = *(_QWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_QWORD *)(a1 + 136) = v35;
      swift_bridgeObjectRetain(v33);
    }
  }
  else if (v25 == 1)
  {
    sub_100064DDC(a1 + 88);
    v30 = *(_OWORD *)(a2 + 104);
    v29 = *(_OWORD *)(a2 + 120);
    v31 = *v23;
    *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
    *(_OWORD *)(a1 + 104) = v30;
    *(_OWORD *)(a1 + 120) = v29;
    *v22 = v31;
  }
  else
  {
    v36 = *(_QWORD *)v23;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_QWORD *)v22 = v36;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v37 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v37;
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRelease(v24);
    v38 = *(_QWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = v38;
    v39 = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v39;
  }
  v40 = a3[9];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (_QWORD *)(a2 + v40);
  v43 = (int *)type metadata accessor for PreparedSparkline(0);
  v44 = *((_QWORD *)v43 - 1);
  v45 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v44 + 48);
  v46 = v45(v41, 1, v43);
  v47 = v45(v42, 1, v43);
  if (v46)
  {
    if (v47)
      goto LABEL_20;
    v49 = *v42;
    *v41 = *v42;
    v50 = v43[5];
    v96 = (char *)v41 + v50;
    v51 = (char *)v42 + v50;
    v97 = a3;
    v52 = type metadata accessor for Date(0);
    v53 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v52 - 8) + 16);
    v54 = swift_bridgeObjectRetain(v49);
    v53(v96, v51, v52, v54);
    sub_100022800(0);
    v56 = v52;
    a3 = v97;
    ((void (*)(char *, char *, uint64_t))v53)(&v96[*(int *)(v55 + 36)], &v51[*(int *)(v55 + 36)], v56);
    v57 = v43[6];
    v58 = (char *)v41 + v57;
    v59 = (char *)v42 + v57;
    v60 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
    *(_OWORD *)((char *)v41 + v43[7]) = *(_OWORD *)((char *)v42 + v43[7]);
    v61 = v43[8];
    v62 = (char *)v41 + v61;
    v63 = (char *)v42 + v61;
    v64 = v63[8];
    *(_QWORD *)v62 = *(_QWORD *)v63;
    v62[8] = v64;
    *((_BYTE *)v41 + v43[9]) = *((_BYTE *)v42 + v43[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v44 + 56))(v41, 0, 1, v43);
  }
  else
  {
    if (v47)
    {
      sub_10001DF70((uint64_t)v41, type metadata accessor for PreparedSparkline);
LABEL_20:
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      goto LABEL_23;
    }
    v65 = *v42;
    v66 = *v41;
    *v41 = *v42;
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRelease(v66);
    v67 = v43[5];
    v68 = (char *)v41 + v67;
    v69 = (char *)v42 + v67;
    v70 = type metadata accessor for Date(0);
    v71 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 24);
    v71(v68, v69, v70);
    sub_100022800(0);
    v71(&v68[*(int *)(v72 + 36)], &v69[*(int *)(v72 + 36)], v70);
    v73 = v43[6];
    v74 = (char *)v41 + v73;
    v75 = (char *)v42 + v73;
    v76 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 24))(v74, v75, v76);
    v77 = v43[7];
    v78 = (_QWORD *)((char *)v41 + v77);
    v79 = (_QWORD *)((char *)v42 + v77);
    *v78 = *v79;
    v78[1] = v79[1];
    v80 = v43[8];
    v81 = (char *)v41 + v80;
    v82 = (char *)v42 + v80;
    v83 = v82[8];
    *(_QWORD *)v81 = *(_QWORD *)v82;
    v81[8] = v83;
    *((_BYTE *)v41 + v43[9]) = *((_BYTE *)v42 + v43[9]);
  }
LABEL_23:
  v84 = a3[10];
  v85 = *(_QWORD *)(a2 + v84);
  v86 = *(_QWORD *)(a1 + v84);
  *(_QWORD *)(a1 + v84) = v85;
  swift_retain(v85);
  swift_release(v86);
  if (a1 != a2)
  {
    v87 = a3[11];
    v88 = (uint64_t *)(a1 + v87);
    v89 = (uint64_t *)(a2 + v87);
    sub_1000C3254(a1 + v87);
    sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v91 = v90;
    if (swift_getEnumCaseMultiPayload(v89, v90) == 1)
    {
      v92 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v88, v89, v92);
      v93 = 1;
    }
    else
    {
      v94 = *v89;
      *v88 = *v89;
      swift_retain(v94);
      v93 = 0;
    }
    swift_storeEnumTagMultiPayload(v88, v91, v93);
  }
  return a1;
}

uint64_t sub_1000C3254(uint64_t a1)
{
  uint64_t v2;

  sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C32A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v6 = a3[9];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v9 = (int *)type metadata accessor for PreparedSparkline(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    v12 = v9[5];
    v32 = v10;
    v13 = (char *)v7 + v12;
    v14 = (char *)v8 + v12;
    v15 = type metadata accessor for Date(0);
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
    v16(v13, v14, v15);
    sub_100022800(0);
    v16(&v13[*(int *)(v17 + 36)], &v14[*(int *)(v17 + 36)], v15);
    v18 = v9[6];
    v19 = (char *)v7 + v18;
    v20 = (char *)v8 + v18;
    v21 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    *(_OWORD *)((char *)v7 + v9[7]) = *(_OWORD *)((char *)v8 + v9[7]);
    v22 = v9[8];
    v23 = (char *)v7 + v22;
    v24 = (char *)v8 + v22;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    *((_BYTE *)v7 + v9[9]) = *((_BYTE *)v8 + v9[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v32 + 56))(v7, 0, 1, v9);
  }
  v25 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v26 = (void *)(a1 + v25);
  v27 = (const void *)(a2 + v25);
  sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v29 = v28;
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    v30 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v26, v27, v30);
    swift_storeEnumTagMultiPayload(v26, v29, 1);
  }
  else
  {
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000C351C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int *v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD *, uint64_t, int *);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v67;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = (_OWORD *)(a1 + 56);
  v13 = (_OWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a1 + 80);
  if (v14 == 1)
    goto LABEL_4;
  v15 = *(_QWORD *)(a2 + 80);
  if (v15 == 1)
  {
    sub_10002304C(a1 + 56);
LABEL_4:
    v16 = *(_OWORD *)(a2 + 72);
    *v12 = *v13;
    *(_OWORD *)(a1 + 72) = v16;
    goto LABEL_6;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v15;
  swift_bridgeObjectRelease(v14);
LABEL_6:
  v17 = (_OWORD *)(a1 + 88);
  v18 = (_OWORD *)(a2 + 88);
  v19 = *(_QWORD *)(a1 + 112);
  if (v19 == 1)
  {
LABEL_9:
    v21 = *(_OWORD *)(a2 + 104);
    *v17 = *v18;
    *(_OWORD *)(a1 + 104) = v21;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
    goto LABEL_11;
  }
  v20 = *(_QWORD *)(a2 + 112);
  if (v20 == 1)
  {
    sub_100064DDC(a1 + 88);
    goto LABEL_9;
  }
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v20;
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
LABEL_11:
  v22 = a3[9];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  v25 = (int *)type metadata accessor for PreparedSparkline(0);
  v26 = *((_QWORD *)v25 - 1);
  v27 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (v29)
      goto LABEL_16;
    *v23 = *v24;
    v31 = v25[5];
    v32 = (char *)v23 + v31;
    v33 = (char *)v24 + v31;
    v34 = type metadata accessor for Date(0);
    v67 = a3;
    v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32);
    v35(v32, v33, v34);
    sub_100022800(0);
    v35(&v32[*(int *)(v36 + 36)], &v33[*(int *)(v36 + 36)], v34);
    a3 = v67;
    v37 = v25[6];
    v38 = (char *)v23 + v37;
    v39 = (char *)v24 + v37;
    v40 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
    *(_OWORD *)((char *)v23 + v25[7]) = *(_OWORD *)((char *)v24 + v25[7]);
    v41 = v25[8];
    v42 = (char *)v23 + v41;
    v43 = (char *)v24 + v41;
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    *((_BYTE *)v23 + v25[9]) = *((_BYTE *)v24 + v25[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v26 + 56))(v23, 0, 1, v25);
  }
  else
  {
    if (v29)
    {
      sub_10001DF70((uint64_t)v23, type metadata accessor for PreparedSparkline);
LABEL_16:
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      goto LABEL_19;
    }
    v44 = *v23;
    *v23 = *v24;
    swift_bridgeObjectRelease(v44);
    v45 = v25[5];
    v46 = (char *)v23 + v45;
    v47 = (char *)v24 + v45;
    v48 = type metadata accessor for Date(0);
    v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 40);
    v49(v46, v47, v48);
    sub_100022800(0);
    v49(&v46[*(int *)(v50 + 36)], &v47[*(int *)(v50 + 36)], v48);
    v51 = v25[6];
    v52 = (char *)v23 + v51;
    v53 = (char *)v24 + v51;
    v54 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 40))(v52, v53, v54);
    *(_OWORD *)((char *)v23 + v25[7]) = *(_OWORD *)((char *)v24 + v25[7]);
    v55 = v25[8];
    v56 = (char *)v23 + v55;
    v57 = (char *)v24 + v55;
    v56[8] = v57[8];
    *(_QWORD *)v56 = *(_QWORD *)v57;
    *((_BYTE *)v23 + v25[9]) = *((_BYTE *)v24 + v25[9]);
  }
LABEL_19:
  v58 = a3[10];
  v59 = *(_QWORD *)(a1 + v58);
  *(_QWORD *)(a1 + v58) = *(_QWORD *)(a2 + v58);
  swift_release(v59);
  if (a1 != a2)
  {
    v60 = a3[11];
    v61 = (void *)(a1 + v60);
    v62 = (const void *)(a2 + v60);
    sub_1000C3254(a1 + v60);
    sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v64 = v63;
    if (swift_getEnumCaseMultiPayload(v62, v63) == 1)
    {
      v65 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v61, v62, v65);
      swift_storeEnumTagMultiPayload(v61, v64, 1);
    }
    else
    {
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000C3970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C397C);
}

uint64_t sub_1000C397C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      sub_10000EDE8(0, &qword_1001141E0, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000C3A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C3A58);
}

uint64_t sub_1000C3A58(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      sub_10000EDE8(0, &qword_1001141E0, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for RowWithChartTicker(uint64_t a1)
{
  uint64_t result;

  result = qword_100118120;
  if (!qword_100118120)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RowWithChartTicker);
  return result;
}

void sub_1000C3B60(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = &unk_1000E3C68;
  v6[1] = &unk_1000E3C80;
  v6[2] = &unk_1000E3C98;
  v6[3] = &unk_1000E3CB0;
  v6[4] = &unk_1000E3CC8;
  sub_10000EDE8(319, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_10000EDE8(319, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000C3C54(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000EA2C8, 1);
}

uint64_t sub_1000C3C64@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;

  v45 = a2;
  sub_1000C50F0(0);
  __chkstk_darwin(v3);
  v46 = (uint64_t)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - v6;
  v8 = type metadata accessor for RowSparklineView(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003D790(0, &qword_1001181B8, type metadata accessor for RowSparklineView, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v12 = v11;
  __chkstk_darwin(v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v45 - v16;
  sub_1000C4F68(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v45 - v22;
  *(_QWORD *)v23 = static HorizontalAlignment.leading.getter(v24);
  *((_QWORD *)v23 + 1) = 0x4000000000000000;
  v23[16] = 0;
  sub_1000AB7A8(0, &qword_100118298, &qword_100118190, (uint64_t (*)(uint64_t))sub_1000C5000);
  sub_1000C3FDC((uint64_t)a1, (uint64_t)&v23[*(int *)(v25 + 44)]);
  v26 = type metadata accessor for RowWithChartTicker(0);
  v27 = sub_1000245D0((uint64_t)&a1[*(int *)(v26 + 36)], (uint64_t)v10);
  v28 = static Edge.Set.horizontal.getter(v27);
  v29 = EdgeInsets.init(_all:)(8.0);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  sub_10001DE2C((uint64_t)v10, (uint64_t)v14, type metadata accessor for RowSparklineView);
  v36 = &v14[*(int *)(v12 + 36)];
  *v36 = v28;
  *((double *)v36 + 1) = v29;
  *((_QWORD *)v36 + 2) = v31;
  *((_QWORD *)v36 + 3) = v33;
  *((_QWORD *)v36 + 4) = v35;
  v36[40] = 0;
  sub_10001DF70((uint64_t)v10, type metadata accessor for RowSparklineView);
  v37 = sub_1000C5950((uint64_t)v14, (uint64_t)v17);
  *(_QWORD *)v7 = static HorizontalAlignment.trailing.getter(v37);
  *((_QWORD *)v7 + 1) = 0x4000000000000000;
  v7[16] = 0;
  sub_1000AB7A8(0, &qword_1001182A0, &qword_1001181C8, (uint64_t (*)(uint64_t))sub_1000C5188);
  sub_1000C4318(a1, (uint64_t)&v7[*(int *)(v38 + 44)]);
  sub_10001DE2C((uint64_t)v23, (uint64_t)v20, (uint64_t (*)(_QWORD))sub_1000C4F68);
  sub_1000C59B4((uint64_t)v17, (uint64_t)v14);
  v39 = v46;
  sub_10001DE2C((uint64_t)v7, v46, (uint64_t (*)(_QWORD))sub_1000C50F0);
  v40 = v45;
  sub_10001DE2C((uint64_t)v20, v45, (uint64_t (*)(_QWORD))sub_1000C4F68);
  sub_1000C4EBC(0);
  v42 = v41;
  v43 = v40 + *(int *)(v41 + 48);
  *(_QWORD *)v43 = 0;
  *(_BYTE *)(v43 + 8) = 1;
  sub_1000C59B4((uint64_t)v14, v40 + *(int *)(v41 + 64));
  sub_10001DE2C(v39, v40 + *(int *)(v42 + 80), (uint64_t (*)(_QWORD))sub_1000C50F0);
  sub_10001DF70((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1000C50F0);
  sub_1000C5A18((uint64_t)v17);
  sub_10001DF70((uint64_t)v23, (uint64_t (*)(_QWORD))sub_1000C4F68);
  sub_10001DF70(v39, (uint64_t (*)(_QWORD))sub_1000C50F0);
  sub_1000C5A18((uint64_t)v14);
  return sub_10001DF70((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1000C4F68);
}

uint64_t sub_1000C3FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a2;
  v3 = (int *)type metadata accessor for SymbolTrendView(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B594(0, &qword_1001181A0, v6);
  v37 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v36 = (uint64_t)&v35 - v11;
  v12 = *(_BYTE *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  KeyPath = swift_getKeyPath(&unk_1000E3DE0);
  *v5 = v12;
  *((_QWORD *)v5 + 1) = v14;
  *((_QWORD *)v5 + 2) = v13;
  *((_QWORD *)v5 + 3) = v16;
  *((_QWORD *)v5 + 4) = v15;
  v18 = &v5[v3[6]];
  *(_QWORD *)v18 = swift_getKeyPath(&unk_1000E3E08);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v18, v19, 0);
  v20 = &v5[v3[7]];
  *(_QWORD *)v20 = swift_getKeyPath(&unk_1000E3E38);
  sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  v22 = &v5[v3[8]];
  *(_QWORD *)v22 = KeyPath;
  v22[8] = 0;
  v23 = swift_getKeyPath(&unk_1000E3D30);
  v24 = swift_allocObject(&unk_100109F08, 41, 7);
  *(_QWORD *)(v24 + 16) = 0;
  *(_BYTE *)(v24 + 24) = 1;
  *(_QWORD *)(v24 + 32) = 0;
  *(_BYTE *)(v24 + 40) = 0;
  sub_10001DE2C((uint64_t)v5, (uint64_t)v9, type metadata accessor for SymbolTrendView);
  v25 = (uint64_t *)&v9[*(int *)(v37 + 36)];
  *v25 = v23;
  v25[1] = (uint64_t)sub_10002453C;
  v25[2] = v24;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  sub_10001DF70((uint64_t)v5, type metadata accessor for SymbolTrendView);
  v26 = v36;
  sub_10003BE08((uint64_t)v9, v36, &qword_1001181A0, type metadata accessor for SymbolTrendView);
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 48);
  v29 = swift_getKeyPath(&unk_1000E3D30);
  v30 = swift_allocObject(&unk_100109F30, 41, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_BYTE *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  *(_BYTE *)(v30 + 40) = 1;
  sub_100066430(v26, (uint64_t)v9, &qword_1001181A0, type metadata accessor for SymbolTrendView);
  v31 = v38;
  sub_100066430((uint64_t)v9, v38, &qword_1001181A0, type metadata accessor for SymbolTrendView);
  sub_1000C5000(0);
  v33 = (_QWORD *)(v31 + *(int *)(v32 + 48));
  *v33 = v27;
  v33[1] = v28;
  v33[2] = v29;
  v33[3] = sub_10002453C;
  v33[4] = v30;
  swift_bridgeObjectRetain_n(v28, 2);
  swift_retain(v29);
  swift_retain(v30);
  sub_10006647C(v26, &qword_1001181A0, type metadata accessor for SymbolTrendView);
  swift_release(v30);
  swift_release(v29);
  swift_bridgeObjectRelease(v28);
  return sub_10006647C((uint64_t)v9, &qword_1001181A0, type metadata accessor for SymbolTrendView);
}

uint64_t sub_1000C4318@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  uint64_t OpaqueTypeConformance2;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t *v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE v80[4];
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  uint64_t KeyPath;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  char v121;
  unsigned __int8 v122;
  _BYTE v123[7];
  unsigned __int8 v124;
  _BYTE v125[7];
  char v126;
  unsigned __int8 v127;
  _BYTE v128[7];
  __int16 v129;
  char v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;

  v106 = a2;
  v102 = type metadata accessor for PriceChangeView(0);
  __chkstk_darwin(v102);
  v101 = (uint64_t *)&v80[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10003B594(0, &qword_100118270, v4);
  v104 = v5;
  __chkstk_darwin(v5);
  v103 = &v80[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v105 = &v80[-v8];
  v9 = type metadata accessor for DynamicTypeSize(0);
  v93 = *(_QWORD *)(v9 - 8);
  v94 = v9;
  __chkstk_darwin(v9);
  v91 = &v80[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C52B4(0);
  v96 = v11;
  v98 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v92 = &v80[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C5214(0);
  v99 = *(_QWORD *)(v13 - 8);
  v100 = v13;
  __chkstk_darwin(v13);
  v95 = &v80[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10003B594(0, &qword_1001181D8, v15);
  v97 = v16;
  __chkstk_darwin(v16);
  v107 = &v80[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18);
  v108 = &v80[-v19];
  v20 = *((_QWORD *)a1 + 7);
  v21 = *((_QWORD *)a1 + 8);
  v22 = *((_QWORD *)a1 + 9);
  v23 = *((_QWORD *)a1 + 10);
  type metadata accessor for RowWithChartTicker(0);
  v88 = a1;
  v24 = sub_100024540(v20, v21, v22, v23);
  SettingProperty.wrappedValue.getter(v24);
  *(_QWORD *)&v109 = v20;
  *((_QWORD *)&v109 + 1) = v21;
  *(_QWORD *)&v110 = v22;
  *((_QWORD *)&v110 + 1) = v23;
  *((_QWORD *)&v131 + 1) = 0;
  *(_QWORD *)&v132 = 0;
  BYTE8(v132) = 0;
  v133 = xmmword_1000DCF00;
  *(_QWORD *)&v134 = 0xA300000000000000;
  *((_QWORD *)&v134 + 1) = 9666786;
  *(_QWORD *)&v135 = 0xA300000000000000;
  *((_QWORD *)&v135 + 1) = 9666786;
  *(_QWORD *)&v136 = 0xA300000000000000;
  sub_10002F864(0);
  v26 = v25;
  v27 = sub_100003D3C((unint64_t *)&qword_100113408, (uint64_t (*)(uint64_t))sub_10002F864, (uint64_t)&unk_1000DEF58);
  v28 = sub_10002F974();
  v29 = Text.init<A>(_:format:)(&v109, &v131, v26, v27, v28);
  v31 = v30;
  v33 = v32;
  LOBYTE(v21) = v34 & 1;
  v35 = static Alignment.trailing.getter();
  v89 = v36;
  v90 = v35;
  sub_1000C4BBC((uint64_t)&v131);
  v37 = v131;
  v38 = v132;
  LOBYTE(v23) = v133;
  v121 = v133;
  sub_1000C5A74(v131, *((uint64_t *)&v131 + 1), v132, *((uint64_t *)&v132 + 1));
  sub_1000144EC(v29, v31, v21);
  swift_bridgeObjectRetain(v33);
  sub_1000144EC(v29, v31, v21);
  swift_bridgeObjectRetain(v33);
  sub_100014490(v29, v31, v21);
  swift_bridgeObjectRelease(v33);
  sub_1000C5A9C(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1));
  sub_100014490(v29, v31, v21);
  swift_bridgeObjectRelease(v33);
  KeyPath = swift_getKeyPath(&unk_1000E3D30);
  v126 = v23;
  v124 = v21;
  v122 = 0;
  v87 = swift_getKeyPath(&unk_1000E3D58);
  LOBYTE(v23) = v126;
  v81 = v124;
  v83 = v122;
  v127 = 0;
  v39 = static HierarchicalShapeStyle.primary.getter();
  v84 = v127;
  v85 = v39;
  v40 = static Font.footnote.getter(v39);
  v82 = Font.bold()();
  swift_release(v40);
  v41 = swift_getKeyPath(&unk_1000E3D88);
  *(_WORD *)((char *)&v119 + 1) = v129;
  BYTE3(v119) = v130;
  *(_QWORD *)&v109 = v90;
  *((_QWORD *)&v109 + 1) = v89;
  v110 = v37;
  v111 = v38;
  LOBYTE(v112) = v23;
  *(_DWORD *)((char *)&v112 + 1) = *(_DWORD *)v125;
  DWORD1(v112) = *(_DWORD *)&v125[3];
  *((_QWORD *)&v112 + 1) = v29;
  *(_QWORD *)&v113 = v31;
  BYTE8(v113) = v81;
  HIDWORD(v113) = *(_DWORD *)&v123[3];
  *(_DWORD *)((char *)&v113 + 9) = *(_DWORD *)v123;
  *(_QWORD *)&v114 = v33;
  *((_QWORD *)&v114 + 1) = 0xBFF0000000000000;
  *(_QWORD *)&v115 = 0;
  *((_QWORD *)&v115 + 1) = KeyPath;
  v116 = 0uLL;
  *(_QWORD *)&v117 = 0;
  BYTE8(v117) = v83;
  *(_DWORD *)((char *)&v117 + 9) = *(_DWORD *)v128;
  HIDWORD(v117) = *(_DWORD *)&v128[3];
  *(_QWORD *)&v118 = v87;
  *((_QWORD *)&v118 + 1) = 1;
  LOBYTE(v119) = v84;
  DWORD1(v119) = v85;
  *((_QWORD *)&v119 + 1) = v41;
  v120 = v82;
  v43 = v93;
  v42 = v94;
  v44 = v91;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v93 + 104))(v91, enum case for DynamicTypeSize.large(_:), v94);
  sub_1000C5328(0);
  v46 = v45;
  v47 = sub_1000C56BC();
  v48 = v92;
  View.dynamicTypeSize(_:)(v44, v46, v47);
  (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v44, v42);
  v139 = v117;
  v140 = v118;
  v141 = v119;
  v142 = v120;
  v135 = v113;
  v136 = v114;
  v137 = v115;
  v138 = v116;
  v131 = v109;
  v132 = v110;
  v133 = v111;
  v134 = v112;
  sub_1000C5ADC((uint64_t)&v131);
  *(_QWORD *)&v109 = v46;
  *((_QWORD *)&v109 + 1) = v47;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v109, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
  v51 = v95;
  v50 = v96;
  View.unredacted()(v96, OpaqueTypeConformance2);
  (*(void (**)(_BYTE *, uint64_t))(v98 + 8))(v48, v50);
  v52 = swift_getKeyPath(&unk_1000E3D30);
  v53 = swift_allocObject(&unk_100109EB8, 41, 7);
  *(_QWORD *)(v53 + 16) = 0;
  *(_BYTE *)(v53 + 24) = 1;
  *(_QWORD *)(v53 + 32) = 0;
  *(_BYTE *)(v53 + 40) = 0;
  v55 = v99;
  v54 = v100;
  v56 = v107;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v99 + 16))(v107, v51, v100);
  v57 = (uint64_t *)&v56[*(int *)(v97 + 36)];
  *v57 = v52;
  v57[1] = (uint64_t)sub_10002453C;
  v57[2] = v53;
  (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v51, v54);
  sub_10003BE08((uint64_t)v56, (uint64_t)v108, &qword_1001181D8, (uint64_t (*)(uint64_t))sub_1000C5214);
  v58 = *((_QWORD *)v88 + 11);
  v59 = *((_QWORD *)v88 + 12);
  v60 = *((_QWORD *)v88 + 13);
  v61 = *((_QWORD *)v88 + 14);
  v62 = *((_QWORD *)v88 + 15);
  v99 = *((_QWORD *)v88 + 16);
  v63 = v99;
  v100 = v62;
  v98 = *((_QWORD *)v88 + 17);
  v64 = v98;
  LODWORD(v96) = *v88;
  LOBYTE(v52) = v88[144];
  LODWORD(v97) = v52;
  v65 = swift_getKeyPath(&unk_1000E3DB8);
  v66 = (uint64_t)v101;
  *v101 = v65;
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v66, v67, 0);
  v68 = v102;
  v69 = v66 + *(int *)(v102 + 20);
  *(_QWORD *)v69 = v58;
  *(_QWORD *)(v69 + 8) = v59;
  *(_QWORD *)(v69 + 16) = v60;
  *(_QWORD *)(v69 + 24) = v61;
  *(_QWORD *)(v69 + 32) = v62;
  *(_QWORD *)(v69 + 40) = v63;
  *(_QWORD *)(v69 + 48) = v64;
  *(_BYTE *)(v69 + 56) = v52;
  *(_BYTE *)(v66 + *(int *)(v68 + 24)) = v96;
  v70 = swift_getKeyPath(&unk_1000E3D30);
  v71 = swift_allocObject(&unk_100109EE0, 41, 7);
  *(_QWORD *)(v71 + 16) = 0;
  *(_BYTE *)(v71 + 24) = 0;
  *(_QWORD *)(v71 + 32) = 0;
  *(_BYTE *)(v71 + 40) = 1;
  v72 = v103;
  sub_10001DE2C(v66, (uint64_t)v103, type metadata accessor for PriceChangeView);
  v73 = (uint64_t *)&v72[*(int *)(v104 + 36)];
  *v73 = v70;
  v73[1] = (uint64_t)sub_10002453C;
  v73[2] = v71;
  sub_100024540(v58, v59, v60, v61);
  sub_10001DF70(v66, type metadata accessor for PriceChangeView);
  v74 = v105;
  sub_10003BE08((uint64_t)v72, (uint64_t)v105, &qword_100118270, type metadata accessor for PriceChangeView);
  v76 = v107;
  v75 = v108;
  sub_100066430((uint64_t)v108, (uint64_t)v107, &qword_1001181D8, (uint64_t (*)(uint64_t))sub_1000C5214);
  sub_100066430((uint64_t)v74, (uint64_t)v72, &qword_100118270, type metadata accessor for PriceChangeView);
  v77 = v106;
  sub_100066430((uint64_t)v76, v106, &qword_1001181D8, (uint64_t (*)(uint64_t))sub_1000C5214);
  sub_1000C5188(0);
  sub_100066430((uint64_t)v72, v77 + *(int *)(v78 + 48), &qword_100118270, type metadata accessor for PriceChangeView);
  sub_10006647C((uint64_t)v74, &qword_100118270, type metadata accessor for PriceChangeView);
  sub_10006647C((uint64_t)v75, &qword_1001181D8, (uint64_t (*)(uint64_t))sub_1000C5214);
  sub_10006647C((uint64_t)v72, &qword_100118270, type metadata accessor for PriceChangeView);
  return sub_10006647C((uint64_t)v76, &qword_1001181D8, (uint64_t (*)(uint64_t))sub_1000C5214);
}

double sub_1000C4BBC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  char v21;

  v2 = type metadata accessor for RowWithChartTicker(0);
  SettingProperty.wrappedValue.getter(v2);
  if (v19 == 1)
  {
    v3 = LocalizedStringKey.init(stringLiteral:)(0x302C303020445355, 0xED000030302E3030);
    v14 = Text.init(_:tableName:bundle:comment:)(v3);
    v15 = v4;
    v16 = v5 & 1;
    v17 = v6;
    v18 = 0;
  }
  else
  {
    v7 = LocalizedStringKey.init(stringLiteral:)(0x302E3030302C3030, 0xE900000000000030);
    v14 = Text.init(_:tableName:bundle:comment:)(v7);
    v15 = v9;
    v16 = v8 & 1;
    v17 = v10;
    v18 = 1;
  }
  _ConditionalContent<>.init(storage:)(&v14, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  result = *(double *)&v19;
  v12 = v20;
  v13 = v21;
  *(_OWORD *)a1 = v19;
  *(_OWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 32) = v13;
  return result;
}

uint64_t sub_1000C4CF8()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C4E24(0);
  v6 = v5;
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v9);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  sub_1000C58D4(0);
  v11 = sub_1000C3C64(v0, (uint64_t)&v8[*(int *)(v10 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v11);
  v12 = sub_100003D3C(&qword_100118290, (uint64_t (*)(uint64_t))sub_1000C4E24, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.accessibilityElement(children:)(v4, v6, v12);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_10001DF70((uint64_t)v8, (uint64_t (*)(_QWORD))sub_1000C4E24);
}

void sub_1000C4E24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100118170)
  {
    sub_10000EDE8(255, &qword_100118178, (uint64_t (*)(uint64_t))sub_1000C4EBC, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_100024AA8(&qword_100118280, &qword_100118178, (uint64_t (*)(uint64_t))sub_1000C4EBC);
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100118170);
  }
}

void sub_1000C4EBC(uint64_t a1)
{
  unint64_t TupleTypeMetadata;
  uint64_t v3;

  if (!qword_100118180)
  {
    sub_1000C4F68(255);
    sub_10003D790(255, &qword_1001181B8, type metadata accessor for RowSparklineView, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    sub_1000C50F0(255);
    TupleTypeMetadata = swift_getTupleTypeMetadata(a1, 4);
    if (!v3)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_100118180);
  }
}

void sub_1000C4F68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100118188)
  {
    sub_10000EDE8(255, &qword_100118190, (uint64_t (*)(uint64_t))sub_1000C5000, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_100024AA8(&qword_1001181B0, &qword_100118190, (uint64_t (*)(uint64_t))sub_1000C5000);
    v5 = type metadata accessor for VStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100118188);
  }
}

void sub_1000C5000(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100118198)
  {
    sub_10003B594(255, &qword_1001181A0, type metadata accessor for SymbolTrendView);
    v3 = v2;
    sub_1000C507C(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100118198);
  }
}

void sub_1000C507C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001181A8)
  {
    sub_1000143C4(255, (unint64_t *)&qword_100112B90, (uint64_t)&type metadata for EdgeInsets, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _EnvironmentKeyTransformModifier);
    v3 = type metadata accessor for ModifiedContent(a1, &type metadata for CompanyNameView, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001181A8);
  }
}

void sub_1000C50F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001181C0)
  {
    sub_10000EDE8(255, &qword_1001181C8, (uint64_t (*)(uint64_t))sub_1000C5188, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_100024AA8(&qword_100118278, &qword_1001181C8, (uint64_t (*)(uint64_t))sub_1000C5188);
    v5 = type metadata accessor for VStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001181C0);
  }
}

void sub_1000C5188(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_1001181D0)
  {
    sub_10003B594(255, &qword_1001181D8, (uint64_t (*)(uint64_t))sub_1000C5214);
    v3 = v2;
    sub_10003B594(255, &qword_100118270, type metadata accessor for PriceChangeView);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1001181D0);
  }
}

void sub_1000C5214(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (!qword_1001181E0)
  {
    sub_1000C52B4(255);
    v3 = v2;
    sub_1000C5328(255);
    v8 = v4;
    v9 = sub_1000C56BC();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    v8 = v3;
    v9 = OpaqueTypeConformance2;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v8, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 0);
    if (!v7)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001181E0);
  }
}

void sub_1000C52B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1001181E8)
  {
    sub_1000C5328(255);
    v5[0] = v2;
    v5[1] = sub_1000C56BC();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001181E8);
  }
}

void sub_1000C5328(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001181F0)
  {
    sub_1000C53A4(255);
    v3 = v2;
    sub_100026CE0(255, &qword_100112D40, &qword_100112D48, (uint64_t)&type metadata for Font);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001181F0);
  }
}

void sub_1000C53A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001181F8)
  {
    sub_1000C5428(255);
    v3 = v2;
    sub_10002F488(255, (unint64_t *)&qword_100112FD8, (uint64_t)&type metadata for HierarchicalShapeStyle, (uint64_t)&protocol witness table for HierarchicalShapeStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for _ForegroundStyleModifier);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001181F8);
  }
}

void sub_1000C5428(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100118200)
  {
    sub_10003D790(255, &qword_100118208, (uint64_t (*)(uint64_t))sub_1000C54C4, (uint64_t)&type metadata for OverflowIntoTextMarginsModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v3 = v2;
    sub_100026CE0(255, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100118200);
  }
}

void sub_1000C54C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100118210)
  {
    sub_10000EDE8(255, &qword_100118218, (uint64_t (*)(uint64_t))sub_1000C555C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_100024AA8(&qword_100118240, &qword_100118218, (uint64_t (*)(uint64_t))sub_1000C555C);
    v5 = type metadata accessor for ZStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100118210);
  }
}

void sub_1000C555C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100118220)
  {
    sub_1000C55C8(255);
    v3 = v2;
    sub_1000C5640(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100118220);
  }
}

void sub_1000C55C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100118228)
  {
    sub_10002F488(255, &qword_100118230, (uint64_t)&type metadata for Text, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v3 = type metadata accessor for ModifiedContent(a1, v2, &type metadata for _HiddenModifier);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100118228);
  }
}

void sub_1000C5640(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100118238)
  {
    sub_10003D790(255, (unint64_t *)&qword_100113C08, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutPriorityTraitKey, (uint64_t)&protocol witness table for LayoutPriorityTraitKey, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _TraitWritingModifier);
    v3 = type metadata accessor for ModifiedContent(a1, &type metadata for Text, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100118238);
  }
}

unint64_t sub_1000C56BC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100118248;
  if (!qword_100118248)
  {
    sub_1000C5328(255);
    v2 = v1;
    sub_1000C5744();
    sub_1000276E8(&qword_100112E30, &qword_100112D40, &qword_100112D48, (uint64_t)&type metadata for Font);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100118248);
  }
  return result;
}

unint64_t sub_1000C5744()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100118250;
  if (!qword_100118250)
  {
    sub_1000C53A4(255);
    v2 = v1;
    sub_1000C57AC();
    sub_10002F6C4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100118250);
  }
  return result;
}

unint64_t sub_1000C57AC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100118258;
  if (!qword_100118258)
  {
    sub_1000C5428(255);
    v2 = v1;
    sub_1000C5834();
    sub_1000276E8(&qword_100112D98, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100118258);
  }
  return result;
}

unint64_t sub_1000C5834()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100118260;
  if (!qword_100118260)
  {
    sub_10003D790(255, &qword_100118208, (uint64_t (*)(uint64_t))sub_1000C54C4, (uint64_t)&type metadata for OverflowIntoTextMarginsModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v2 = v1;
    sub_100003D3C(&qword_100118268, (uint64_t (*)(uint64_t))sub_1000C54C4, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_1000276A4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100118260);
  }
  return result;
}

void sub_1000C58D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100118288)
  {
    sub_10000EDE8(255, &qword_100118178, (uint64_t (*)(uint64_t))sub_1000C4EBC, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _HStackLayout, v2, &protocol witness table for _HStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100118288);
  }
}

uint64_t sub_1000C5950(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10003D790(0, &qword_1001181B8, type metadata accessor for RowSparklineView, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C59B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10003D790(0, &qword_1001181B8, type metadata accessor for RowSparklineView, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C5A18(uint64_t a1)
{
  uint64_t v2;

  sub_10003D790(0, &qword_1001181B8, type metadata accessor for RowSparklineView, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_1000C5A74(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  sub_1000144EC(a1, a2, a3 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRetain(a4).n128_u64[0];
  return result;
}

double sub_1000C5A9C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  sub_100014490(a1, a2, a3 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  return result;
}

uint64_t sub_1000C5ADC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_BYTE *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 128);
  v12 = *(_BYTE *)(a1 + 136);
  v13 = *(_QWORD *)(a1 + 168);
  v14 = *(_QWORD *)(a1 + 144);
  v15 = *(_QWORD *)(a1 + 176);
  sub_1000C5A9C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_100014490(v2, v3, v4);
  swift_bridgeObjectRelease(v5);
  swift_release(v6);
  sub_100028060(v7, v8, v9, v10, v12);
  swift_release(v13);
  swift_release(v14);
  swift_release(v15);
  return a1;
}

uint64_t sub_1000C5BBC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000C5BD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000C5BF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000C5C04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000C5C14()
{
  uint64_t v0;
  _QWORD v2[2];

  sub_1000C4E24(255);
  v2[0] = v0;
  v2[1] = sub_100003D3C(&qword_100118290, (uint64_t (*)(uint64_t))sub_1000C4E24, (uint64_t)&protocol conformance descriptor for HStack<A>);
  return swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

uint64_t sub_1000C5C74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  void (*v29)(char *, uint64_t);
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t, __n128);
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = type metadata accessor for ExchangeStatus(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v32 - v7;
  v9 = type metadata accessor for WidgetQuote(0);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = v12;
    v15 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v38 = enum case for ExchangeStatus.open(_:);
    v16 = *(_QWORD *)(v10 + 72);
    v33 = a1;
    v34 = v16;
    v17 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
    v36 = v10;
    v37 = v17;
    v18 = swift_bridgeObjectRetain(a1);
    v19 = v13 - 1;
    v20 = v14;
    v35 = v14;
    while (1)
    {
      v39 = v19;
      v21 = v37(v20, v15, v9, v18);
      WidgetQuote.exchangeStatus.getter(v21);
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, v38, v2);
      v22 = sub_100003D3C(&qword_100118358, (uint64_t (*)(uint64_t))&type metadata accessor for ExchangeStatus, (uint64_t)&protocol conformance descriptor for ExchangeStatus);
      dispatch thunk of RawRepresentable.rawValue.getter(&v42, v2, v22);
      dispatch thunk of RawRepresentable.rawValue.getter(&v40, v2, v22);
      v23 = v43;
      v24 = v8;
      v25 = v3;
      v26 = v41;
      if (v42 == v40 && v43 == v41)
        break;
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, v40, v41, 0);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v26);
      v29 = *(void (**)(char *, uint64_t))(v25 + 8);
      v29(v6, v2);
      v29(v24, v2);
      v20 = v35;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v9);
      if ((v28 & 1) == 0)
      {
        v3 = v25;
        v8 = v24;
        v19 = v39 - 1;
        v15 += v34;
        if (v39)
          continue;
      }
      goto LABEL_12;
    }
    swift_bridgeObjectRelease_n(v43, 2);
    v30 = *(void (**)(char *, uint64_t))(v25 + 8);
    v30(v6, v2);
    v30(v24, v2);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v9);
    v28 = 1;
LABEL_12:
    swift_bridgeObjectRelease(v33);
  }
  else
  {
    v28 = 0;
  }
  return v28 & 1;
}

char *sub_1000C5F00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  char *v25;
  char *v26;

  sub_10000EDE8(0, &qword_1001126D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v3);
  v5 = (char *)v23 - v4;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v26 = (char *)v23 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return (char *)_swiftEmptyArrayStorage;
  v23[1] = v1;
  v13 = *(_QWORD *)(type metadata accessor for WidgetQuote(0) - 8);
  v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v23[0] = a1;
  v16 = swift_bridgeObjectRetain(a1);
  v17 = (char *)_swiftEmptyArrayStorage;
  v24 = v15;
  v25 = v10;
  do
  {
    WidgetQuote.exchangeNextOpen.getter(v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_1000C7084((uint64_t)v5);
    }
    else
    {
      v18 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v19 = v26;
      v18(v26, v5, v6);
      v18(v10, v19, v6);
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        v17 = (char *)sub_1000733A8(0, *((_QWORD *)v17 + 2) + 1, 1, (unint64_t)v17);
      v21 = *((_QWORD *)v17 + 2);
      v20 = *((_QWORD *)v17 + 3);
      if (v21 >= v20 >> 1)
        v17 = (char *)sub_1000733A8(v20 > 1, v21 + 1, 1, (unint64_t)v17);
      *((_QWORD *)v17 + 2) = v21 + 1;
      v10 = v25;
      v18(&v17[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v21], v25, v6);
      v15 = v24;
    }
    v14 += v15;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease(v23[0]);
  return v17;
}

uint64_t sub_1000C6140@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, char *, uint64_t);
  __n128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);

  sub_10000EDE8(0, &qword_1001126D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v31 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v31 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v18(v9, 1, 1, v10);
    goto LABEL_7;
  }
  v33 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v36 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  v36(v9, a1 + v33, v10);
  v34 = a1;
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v18(v9, 0, 1, v10);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v19(v9, 1, v10) == 1)
  {
LABEL_7:
    sub_1000C7084((uint64_t)v9);
    v24 = a2;
    v25 = 1;
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v24, v25, 1, v10);
  }
  v32 = a2;
  v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v20(v16, v9, v10);
  v21 = swift_bridgeObjectRetain(v34);
  v22 = v17 - 1;
  if (v22)
  {
    v35 = *(_QWORD *)(v11 + 72);
    v27 = v34 + v35 + v33;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t, __n128))v36)(v7, v27, v10, v21);
      v18(v7, 0, 1, v10);
      if (v19(v7, 1, v10) == 1)
        break;
      v20(v14, v7, v10);
      v28 = sub_100003D3C((unint64_t *)&qword_100112AC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v29 = dispatch thunk of static Comparable.< infix(_:_:)(v14, v16, v10, v28);
      v30 = *(void (**)(char *, uint64_t))(v11 + 8);
      if ((v29 & 1) != 0)
      {
        v30(v16, v10);
        v20(v16, v14, v10);
      }
      else
      {
        v30(v14, v10);
      }
      v27 += v35;
      if (!--v22)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v18)(v7, 1, 1, v10, v21);
  }
  swift_bridgeObjectRelease(v34);
  sub_1000C7084((uint64_t)v7);
  v23 = v32;
  v20(v32, v16, v10);
  v24 = v23;
  v25 = 0;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v24, v25, 1, v10);
}

uint64_t sub_1000C642C()
{
  uint64_t result;

  sub_100003A40();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000017, 0x80000001000E5710, 0xD000000000000014, 0x80000001000E3E80);
  qword_100126A80 = result;
  return result;
}

uint64_t sub_1000C6490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  double v45;
  void *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  double v60;
  void *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  __n128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  double v72;
  void *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  __n128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  double v84;
  void *v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  void *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;

  v110 = a3;
  v114 = a4;
  sub_10000EDE8(0, &qword_1001126D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v7);
  v105 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v108 = (char *)&v103 - v10;
  __chkstk_darwin(v11);
  v109 = (char *)&v103 - v12;
  v13 = type metadata accessor for Date(0);
  v116 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v104 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v103 = (char *)&v103 - v16;
  __chkstk_darwin(v17);
  v107 = (char *)&v103 - v18;
  __chkstk_darwin(v19);
  v106 = (char *)&v103 - v20;
  __chkstk_darwin(v21);
  v115 = (char *)&v103 - v22;
  v23 = type metadata accessor for AppConfiguration(0);
  v112 = *(_QWORD *)(v23 - 8);
  v113 = v23;
  __chkstk_darwin(v23);
  v25 = (char *)&v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = v4[5];
  v27 = v4[6];
  sub_100007184(v4 + 2, v26);
  v28 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v26, v27);
  v118 = v25;
  v111 = AppConfiguration.widgetSystemReloadJitterMax.getter(v28);
  if (qword_1001115B8 != -1)
    swift_once(&qword_1001115B8, sub_1000C642C);
  v29 = (void *)qword_100126A80;
  sub_10000EDE8(0, (unint64_t *)&qword_1001118F0, (uint64_t (*)(uint64_t))sub_100022520, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v31 = v30;
  v32 = swift_allocObject(v30, 112, 7);
  *(_OWORD *)(v32 + 16) = xmmword_1000DD060;
  v33 = sub_100003D3C(&qword_1001126E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v34 = v29;
  v117 = v13;
  v35 = dispatch thunk of CustomStringConvertible.description.getter(v13, v33);
  v37 = v36;
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  v38 = sub_100003B2C();
  *(_QWORD *)(v32 + 64) = v38;
  *(_QWORD *)(v32 + 32) = v35;
  *(_QWORD *)(v32 + 40) = v37;
  sub_10000EDE8(0, &qword_100118348, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  *(_QWORD *)(v32 + 96) = v39;
  *(_QWORD *)(v32 + 104) = sub_1000C7024();
  *(_QWORD *)(v32 + 72) = a2;
  v40 = swift_bridgeObjectRetain(a2);
  v41 = static os_log_type_t.default.getter(v40);
  os_log(_:dso:log:type:_:)("for date %{public}@, determining next refresh date with quotes %{public}@", 73, 2, &_mh_execute_header, v34, v41, v32);

  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRetain(a2);
  LOBYTE(v35) = sub_1000C5C74(v42);
  v43 = swift_bridgeObjectRelease(a2);
  if ((v35 & 1) != 0)
  {
    v44 = v118;
    v45 = (double)(unint64_t)AppConfiguration.openMarketWidgetSystemReloadInterval.getter(v43);
    v46 = (void *)qword_100126A80;
    v47 = swift_allocObject(v31, 72, 7);
    *(_OWORD *)(v47 + 16) = xmmword_1000DB170;
    v119 = 0;
    v120 = 0xE000000000000000;
    v48 = v46;
    Double.write<A>(to:)(&v119, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v45);
    v49 = v119;
    v50 = v120;
    *(_QWORD *)(v47 + 56) = &type metadata for String;
    *(_QWORD *)(v47 + 64) = v38;
    *(_QWORD *)(v47 + 32) = v49;
    *(_QWORD *)(v47 + 40) = v50;
    v52 = static os_log_type_t.default.getter(v51);
    os_log(_:dso:log:type:_:)("returning current date plus a %{public}@ second interval because an exchange is open", 84, 2, &_mh_execute_header, v48, v52, v47);

    swift_bridgeObjectRelease(v47);
    v53 = (uint64_t)v115;
    static Date.+ infix(_:_:)(a1);
    v54 = v114;
    v56 = v116;
    v55 = v117;
    goto LABEL_5;
  }
  v53 = (uint64_t)v115;
  v56 = v116;
  if (v110 == 1)
  {
    v60 = (double)(unint64_t)AppConfiguration.smallNewsWidgetSystemReloadInterval.getter(v43);
    v61 = (void *)qword_100126A80;
    v62 = swift_allocObject(v31, 72, 7);
    *(_OWORD *)(v62 + 16) = xmmword_1000DB170;
    v119 = 0;
    v120 = 0xE000000000000000;
    v63 = v61;
    Double.write<A>(to:)(&v119, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v60);
    v64 = v119;
    v65 = v120;
    *(_QWORD *)(v62 + 56) = &type metadata for String;
    *(_QWORD *)(v62 + 64) = v38;
    *(_QWORD *)(v62 + 32) = v64;
    *(_QWORD *)(v62 + 40) = v65;
    v67 = static os_log_type_t.default.getter(v66);
    os_log(_:dso:log:type:_:)("returning current date plus a %{public}@ second interval bounded to next exchange open because exchanges are closed, but showing news in a small widget", 151, 2, &_mh_execute_header, v63, v67, v62);

    swift_bridgeObjectRelease(v62);
    v68 = sub_1000C5F00(a2);
    v69 = v109;
    sub_1000C6140((uint64_t)v68, v109);
    swift_bridgeObjectRelease(v68);
    v55 = v117;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v69, 1, v117) != 1)
    {
      v70 = v106;
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v106, v69, v55);
      v71 = v107;
LABEL_16:
      static Date.+ infix(_:_:)(a1);
      v92 = sub_100003D3C((unint64_t *)&qword_100112AC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      if ((dispatch thunk of static Comparable.< infix(_:_:)(v70, v71, v55, v92) & 1) != 0)
        v93 = v70;
      else
        v93 = v71;
      (*(void (**)(uint64_t, char *, uint64_t))(v56 + 16))(v53, v93, v55);
      v94 = *(void (**)(char *, uint64_t))(v56 + 8);
      v94(v71, v55);
      v94(v70, v55);
      goto LABEL_20;
    }
    goto LABEL_12;
  }
  v55 = v117;
  if (v110 >= 2)
  {
    v72 = (double)(unint64_t)AppConfiguration.newsWidgetSystemReloadInterval.getter(v43);
    v73 = (void *)qword_100126A80;
    v74 = swift_allocObject(v31, 72, 7);
    *(_OWORD *)(v74 + 16) = xmmword_1000DB170;
    v119 = 0;
    v120 = 0xE000000000000000;
    v75 = v73;
    Double.write<A>(to:)(&v119, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v72);
    v76 = v119;
    v77 = v120;
    *(_QWORD *)(v74 + 56) = &type metadata for String;
    *(_QWORD *)(v74 + 64) = v38;
    *(_QWORD *)(v74 + 32) = v76;
    *(_QWORD *)(v74 + 40) = v77;
    v79 = static os_log_type_t.default.getter(v78);
    os_log(_:dso:log:type:_:)("returning current date plus a %{public}@ second interval bounded to next exchange open because exchanges are closed, but showing news in a widget", 145, 2, &_mh_execute_header, v75, v79, v74);

    swift_bridgeObjectRelease(v74);
    v80 = sub_1000C5F00(a2);
    v69 = v108;
    sub_1000C6140((uint64_t)v80, v108);
    swift_bridgeObjectRelease(v80);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v69, 1, v55) != 1)
    {
      v70 = v103;
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v103, v69, v55);
      v71 = v104;
      goto LABEL_16;
    }
LABEL_12:
    sub_1000C7084((uint64_t)v69);
    static Date.+ infix(_:_:)(a1);
LABEL_20:
    v57 = v113;
    v54 = v114;
    v59 = v111;
    v58 = v112;
    v44 = v118;
    goto LABEL_21;
  }
  v81 = sub_1000C5F00(a2);
  v82 = v105;
  sub_1000C6140((uint64_t)v81, v105);
  swift_bridgeObjectRelease(v81);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v82, 1, v55) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v53, v82, v55);
    v96 = (void *)qword_100126A80;
    v97 = swift_allocObject(v31, 72, 7);
    *(_OWORD *)(v97 + 16) = xmmword_1000DB170;
    v98 = v96;
    v99 = dispatch thunk of CustomStringConvertible.description.getter(v55, v33);
    *(_QWORD *)(v97 + 56) = &type metadata for String;
    *(_QWORD *)(v97 + 64) = v38;
    *(_QWORD *)(v97 + 32) = v99;
    *(_QWORD *)(v97 + 40) = v100;
    v102 = static os_log_type_t.default.getter(v101);
    os_log(_:dso:log:type:_:)("returning next exchange open date because exchanges are closed, and no news is shown, nextExchangeOpenDate=%{public}@", 117, 2, &_mh_execute_header, v98, v102, v97);

    swift_bridgeObjectRelease(v97);
    v57 = v113;
    v54 = v114;
    v58 = v112;
    v44 = v118;
    goto LABEL_6;
  }
  v83 = sub_1000C7084((uint64_t)v82);
  v44 = v118;
  v84 = (double)(unint64_t)AppConfiguration.openMarketWidgetSystemReloadInterval.getter(v83);
  v85 = (void *)qword_100126A80;
  v86 = swift_allocObject(v31, 72, 7);
  *(_OWORD *)(v86 + 16) = xmmword_1000DB170;
  v119 = 0;
  v120 = 0xE000000000000000;
  v87 = v85;
  Double.write<A>(to:)(&v119, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v84);
  v88 = v119;
  v89 = v120;
  *(_QWORD *)(v86 + 56) = &type metadata for String;
  *(_QWORD *)(v86 + 64) = v38;
  *(_QWORD *)(v86 + 32) = v88;
  *(_QWORD *)(v86 + 40) = v89;
  v91 = static os_log_type_t.default.getter(v90);
  os_log(_:dso:log:type:_:)("returning current date plus a %{public}@ second interval because exchanges are closed, but we don't know a next open date", 121, 2, &_mh_execute_header, v87, v91, v86);

  swift_bridgeObjectRelease(v86);
  static Date.+ infix(_:_:)(a1);
  v54 = v114;
LABEL_5:
  v58 = v112;
  v57 = v113;
LABEL_6:
  v59 = v111;
LABEL_21:
  static TimelineReloadPolicy.after(_:jitteredUpTo:)(v53, v54, (double)v59);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v53, v55);
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v44, v57);
}

void static TimelineReloadPolicy.after(_:jitteredUpTo:)(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C6F5C(v10, 0.0, a3);
  static Date.+ infix(_:_:)(a1);
  static TimelineReloadPolicy.after(_:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_10000EDE8(0, (unint64_t *)&qword_1001118F0, (uint64_t (*)(uint64_t))sub_100022520, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v12 = swift_allocObject(v11, 152, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1000DB8B0;
  v13 = sub_100003D3C(&qword_1001126E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v14 = dispatch thunk of CustomStringConvertible.description.getter(v6, v13);
  v16 = v15;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v17 = sub_100003B2C();
  *(_QWORD *)(v12 + 64) = v17;
  *(_QWORD *)(v12 + 32) = v14;
  *(_QWORD *)(v12 + 40) = v16;
  *(_QWORD *)(v12 + 96) = &type metadata for Double;
  *(_QWORD *)(v12 + 104) = &protocol witness table for Double;
  *(double *)(v12 + 72) = a3;
  v23 = 0;
  v24 = 0xE000000000000000;
  v18 = type metadata accessor for TimelineReloadPolicy(0);
  _print_unlocked<A, B>(_:_:)(a2, &v23, v18, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v19 = v23;
  v20 = v24;
  *(_QWORD *)(v12 + 136) = &type metadata for String;
  *(_QWORD *)(v12 + 144) = v17;
  *(_QWORD *)(v12 + 112) = v19;
  *(_QWORD *)(v12 + 120) = v20;
  sub_100003A40();
  v21 = (void *)static OS_os_log.default.getter();
  v22 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("reload policy created after %{public}@, jittered up to %f is %{public}@", 71, 2, &_mh_execute_header, v21, v22, v12);
  swift_bridgeObjectRelease(v12);

}

uint64_t sub_1000C6F5C(uint64_t result, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = swift_stdlib_random(&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    return sub_1000C6F5C(v6, a2, a3);
  return result;
}

uint64_t type metadata accessor for ReloadPolicyProvider()
{
  return objc_opt_self(_TtC12StocksWidget20ReloadPolicyProvider);
}

unint64_t sub_1000C7024()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118350;
  if (!qword_100118350)
  {
    sub_10000EDE8(255, &qword_100118348, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100118350);
  }
  return result;
}

uint64_t sub_1000C7084(uint64_t a1)
{
  uint64_t v2;

  sub_10000EDE8(0, &qword_1001126D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for HeadlineAttribution(uint64_t a1)
{
  return sub_10000EC04(*(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for HeadlineAttribution(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  sub_10000EBD8(v3, v4, v5, v6, v7);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  return a1;
}

uint64_t assignWithCopy for HeadlineAttribution(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  sub_10000EBD8(v3, v4, v5, v6, v7);
  v8 = *(void **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  sub_10000EC04(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for HeadlineAttribution(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_BYTE *)(a2 + 40);
  v4 = *(void **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v3;
  sub_10000EC04(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HeadlineAttribution(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HeadlineAttribution(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HeadlineAttribution()
{
  return &type metadata for HeadlineAttribution;
}

uint64_t sub_1000C72CC(char a1)
{
  uint64_t v2;
  uint64_t ObjCClassFromMetadata;
  id v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  unint64_t v8;
  uint64_t countAndFlagsBits;
  unint64_t v11;

  v2 = type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v2);
  v4 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  if ((a1 & 1) != 0)
  {
    v11 = 0x80000001000E76B0;
    v5 = 0x206F6F686159;
  }
  else
  {
    v11 = 0x80000001000E76E0;
    v5 = 0x20656C707041;
  }
  v6._countAndFlagsBits = v5 & 0xFFFFFFFFFFFFLL | 0x654E000000000000;
  v6._object = (void *)0xEA00000000007377;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v8 = 0xD000000000000025;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v4, v7, *(Swift::String *)(&v11 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1000C73B8(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  char v27;

  v25 = a2;
  sub_100012608(0, &qword_100118420, (uint64_t (*)(void))sub_1000CA8E4, (uint64_t)&type metadata for HeadlineAttribution.NewsSourceAttribution.YahooCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedEncodingContainer);
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - v4;
  sub_100012608(0, &qword_100118428, (uint64_t (*)(void))sub_1000CA928, (uint64_t)&type metadata for HeadlineAttribution.NewsSourceAttribution.AppleNewsCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedEncodingContainer);
  v21 = *(_QWORD *)(v6 - 8);
  v22 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - v7;
  sub_100012608(0, &qword_100118430, (uint64_t (*)(void))sub_1000CA96C, (uint64_t)&type metadata for HeadlineAttribution.NewsSourceAttribution.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedEncodingContainer);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v13 = (char *)&v20 - v12;
  v15 = a1[3];
  v14 = a1[4];
  sub_100007184(a1, v15);
  v16 = sub_1000CA96C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for HeadlineAttribution.NewsSourceAttribution.CodingKeys, &type metadata for HeadlineAttribution.NewsSourceAttribution.CodingKeys, v16, v15, v14);
  if ((v25 & 1) != 0)
  {
    v27 = 1;
    v18 = sub_1000CA8E4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HeadlineAttribution.NewsSourceAttribution.YahooCodingKeys, &v27, v10, &type metadata for HeadlineAttribution.NewsSourceAttribution.YahooCodingKeys, v18);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v24);
  }
  else
  {
    v26 = 0;
    v17 = sub_1000CA928();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HeadlineAttribution.NewsSourceAttribution.AppleNewsCodingKeys, &v26, v10, &type metadata for HeadlineAttribution.NewsSourceAttribution.AppleNewsCodingKeys, v17);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1000C75CC(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  char v32;
  uint64_t v33;

  v2 = v1;
  sub_100012608(0, &qword_100118438, (uint64_t (*)(void))sub_1000CAA58, (uint64_t)&type metadata for HeadlineAttribution.PublisherAttribution.NameCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedEncodingContainer);
  v5 = v4;
  v30 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - v6;
  sub_100012608(0, &qword_100118440, (uint64_t (*)(void))sub_1000CAA9C, (uint64_t)&type metadata for HeadlineAttribution.PublisherAttribution.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedEncodingContainer);
  v9 = v8;
  v33 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - v10;
  v13 = a1[3];
  v12 = a1[4];
  sub_100007184(a1, v13);
  v14 = sub_1000CAA9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for HeadlineAttribution.PublisherAttribution.CodingKeys, &type metadata for HeadlineAttribution.PublisherAttribution.CodingKeys, v14, v13, v12);
  sub_1000CA550(v2, (uint64_t)v31);
  if ((v32 & 1) != 0)
  {
    v15 = v31[0];
    v16 = v31[1];
    v17 = sub_1000CAA58();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HeadlineAttribution.PublisherAttribution.NameCodingKeys, v18, v9, &type metadata for HeadlineAttribution.PublisherAttribution.NameCodingKeys, v17);
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, v19, v5);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v5);
  }
  else
  {
    v20 = (void *)v31[0];
    v21 = type metadata accessor for EncodingError(0);
    swift_allocError(v21, &protocol witness table for EncodingError, 0, 0);
    v23 = v22;
    sub_1000CAAE0(0);
    v23[3] = (uint64_t)&type metadata for HeadlineAttribution.PublisherAttribution;
    v24 = swift_allocObject(&unk_10010A1F8, 49, 7);
    *v23 = v24;
    sub_1000CA550(v2, v24 + 16);
    v25 = v20;
    sub_1000CAB74((uint64_t)v2);
    v26 = KeyedEncodingContainer.codingPath.getter(v9);
    EncodingError.Context.init(codingPath:debugDescription:underlyingError:)(v26, 0xD000000000000047, 0x80000001000E7740, 0);
    v27 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, enum case for EncodingError.invalidValue(_:), v21);
    swift_willThrow(v27);

  }
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v11, v9);
}

uint64_t sub_1000C7860(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE v16[40];
  __int128 v17[2];
  char v18;
  char v19;

  v3 = v1;
  sub_100012608(0, &qword_100118380, (uint64_t (*)(void))sub_1000CA3EC, (uint64_t)&type metadata for HeadlineAttribution.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedEncodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = &v16[-v8];
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_1000CA3EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for HeadlineAttribution.CodingKeys, &type metadata for HeadlineAttribution.CodingKeys, v12, v10, v11);
  sub_1000CA4B8(v3, (uint64_t)&v19);
  sub_1000CA4B8((uint64_t)&v19, (uint64_t)v16);
  v18 = 0;
  v13 = sub_1000CA50C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v18, v6, &type metadata for HeadlineAttribution.NewsSourceAttribution, v13);
  if (!v2)
  {
    sub_1000CA550((__int128 *)(v3 + 8), (uint64_t)v17);
    sub_1000CA550(v17, (uint64_t)v16);
    v18 = 1;
    v14 = sub_1000CA568();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v18, v6, &type metadata for HeadlineAttribution.PublisherAttribution, v14);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000C79E4()
{
  return 0;
}

uint64_t sub_1000C79F0@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_1000C7A1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CA928();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C7A44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CA928();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C7A6C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F6F686179;
  else
    return 0x77654E656C707061;
}

uint64_t sub_1000C7AA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C99F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000C7ACC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CA96C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C7AF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CA96C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C7B1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CA8E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C7B44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CA8E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_1000C7B6C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1000C9AEC(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_1000C7B98(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_1000C73B8(a1, *v1);
}

Swift::Int sub_1000C7BB0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 1701667182, 0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1000C7BF8(uint64_t a1)
{
  return String.hash(into:)(a1, 1701667182, 0xE400000000000000);
}

Swift::Int sub_1000C7C08(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 1701667182, 0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1000C7C4C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100103A68, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1000C7C9C(_QWORD *a1@<X8>)
{
  *a1 = 1701667182;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1000C7CB0()
{
  return 1701667182;
}

uint64_t sub_1000C7CC0@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100103AA0, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_1000C7D14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CAA9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C7D3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CAA9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C7D64()
{
  return 12383;
}

uint64_t sub_1000C7D70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease(0xE200000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000C7DEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CAA58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C7E14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CAA58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C7E3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5[2];

  result = sub_1000C9E3C(a1, (uint64_t *)v5);
  if (!v2)
    return sub_1000CA550(v5, a2);
  return result;
}

uint64_t sub_1000C7E80(_QWORD *a1)
{
  __int128 *v1;
  _BYTE v4[40];

  sub_1000CA550(v1, (uint64_t)v4);
  return sub_1000C75CC(a1);
}

uint64_t sub_1000C7ECC()
{
  _BYTE *v0;

  if (*v0)
    return 0x656873696C627570;
  else
    return 0x72756F537377656ELL;
}

uint64_t sub_1000C7F10@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000CA124(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000C7F34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CA3EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C7F5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CA3EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000C7F84@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_1000CA22C(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_1000C7FC4(_QWORD *a1)
{
  return sub_1000C7860(a1);
}

void sub_1000C7FFC()
{
  qword_100126A88 = 0x4024000000000000;
}

uint64_t sub_1000C800C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  void *v67;
  double v68;
  unsigned __int8 v69;
  char *v70;
  double v71;
  id v72;
  void *v73;
  double v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t KeyPath;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  __int128 v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  _BOOL8 v124;
  void (*v125)(char *, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  void (*v135)(char *, char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(char *, uint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  __n128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _OWORD *v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  __n128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  _BOOL8 v177;
  void (*v178)(char *, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  void (*v186)(char *, char *, uint64_t);
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(char *, uint64_t);
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  unsigned __int8 *v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  _BYTE v249[24];
  uint64_t v250;
  char v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;

  v235 = a2;
  sub_10000EDE8(0, &qword_100118600, (uint64_t (*)(uint64_t))sub_1000CBFB4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
  v234 = v3;
  __chkstk_darwin(v3);
  v217 = (uint64_t)&v200 - v4;
  sub_10000EDE8(0, &qword_1001141D8, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Design, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5);
  v209 = (char *)&v200 - v6;
  sub_1000CC058(0, &qword_100118610, (uint64_t (*)(uint64_t))sub_1000CC0F4, &qword_100118620, (void (*)(void))sub_100026F4C);
  v215 = *(_QWORD *)(v7 - 8);
  v216 = v7;
  __chkstk_darwin(v7);
  v214 = (char *)&v200 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v225 = (char *)&v200 - v10;
  sub_1000CC110(0, &qword_100118628, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v231 = v11;
  __chkstk_darwin(v11);
  v233 = (uint64_t)&v200 - v12;
  sub_10000EDE8(0, &qword_1001185C0, (uint64_t (*)(uint64_t))sub_1000CBDAC, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
  v232 = v13;
  v14 = __chkstk_darwin(v13);
  v213 = (uint64_t)&v200 - v15;
  v16 = type metadata accessor for Image.ResizingMode(0, v14);
  v207 = *(_QWORD *)(v16 - 8);
  v208 = v16;
  __chkstk_darwin(v16);
  v206 = (char *)&v200 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100117918, (uint64_t (*)(uint64_t))&type metadata accessor for Image.TemplateRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v18);
  v205 = (char *)&v200 - v19;
  sub_1000CC058(0, &qword_1001185F8, (uint64_t (*)(uint64_t))sub_1000CBBD4, &qword_1001185A8, (void (*)(void))sub_1000CBD4C);
  v211 = *(_QWORD *)(v20 - 8);
  v212 = v20;
  __chkstk_darwin(v20);
  v210 = (char *)&v200 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v221 = (char *)&v200 - v23;
  v24 = type metadata accessor for Divider(0);
  v200 = *(_QWORD *)(v24 - 8);
  v201 = v24;
  __chkstk_darwin(v24);
  v26 = (char *)&v200 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CBEC8(0);
  v203 = *(_QWORD *)(v27 - 8);
  v204 = v27;
  __chkstk_darwin(v27);
  v29 = (char *)&v200 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CBE50(0);
  v218 = *(_QWORD *)(v30 - 8);
  v219 = v30;
  __chkstk_darwin(v30);
  v202 = (char *)&v200 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_1001185D0, v32, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v33);
  v236 = (char *)&v200 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v226 = (uint64_t)&v200 - v36;
  __chkstk_darwin(v37);
  v220 = (char *)&v200 - v38;
  sub_1000CC110(0, &qword_1001185B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
  __chkstk_darwin(v39);
  v230 = (uint64_t)&v200 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v229 = (char *)&v200 - v42;
  v43 = type metadata accessor for WidgetFamily(0);
  v44 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v46 = (char *)&v200 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v49 = (char *)&v200 - v48;
  v50 = a1;
  sub_10000EDE8(0, &qword_100118568, (uint64_t (*)(uint64_t))sub_1000CBAE4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v51);
  v228 = (uint64_t)&v200 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v55 = (char *)&v200 - v54;
  v56 = *a1;
  v237 = a1;
  v223 = v44;
  v224 = v43;
  v222 = v46;
  if (v56 == 2)
  {
    sub_1000CBAE4(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v55, 1, 1, v57);
  }
  else
  {
    sub_1000C9314(v56 & 1, (uint64_t)&v246);
    v238 = v246;
    v239 = v247;
    v240 = v248;
    v241 = *(_OWORD *)v249;
    v242 = *(_QWORD *)&v249[16];
    v243 = v250;
    type metadata accessor for HeadlineAttributionView(0);
    sub_100045E2C(v49);
    (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v46, enum case for WidgetFamily.systemSmall(_:), v43);
    v58 = v43;
    v59 = sub_100003D3C(&qword_100113B18, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    dispatch thunk of RawRepresentable.rawValue.getter(&v253, v58, v59);
    dispatch thunk of RawRepresentable.rawValue.getter(&v245, v58, v59);
    v60 = v253 == v245;
    v61 = *(void (**)(char *, uint64_t))(v44 + 8);
    v61(v46, v58);
    v61(v49, v58);
    sub_10000EDE8(0, &qword_100118578, (uint64_t (*)(uint64_t))sub_1000CBB70, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
    v63 = v62;
    v64 = sub_1000CBC4C();
    View.widgetAccentable(_:)(v60, v63, v64);
    v50 = v237;
    j__swift_release(v238);
    sub_1000CBAE4(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v55, 0, 1, v65);
  }
  v66 = v49;
  v67 = (void *)*((_QWORD *)v50 + 1);
  v68 = *((double *)v50 + 2);
  v69 = v50[40];
  v227 = v55;
  v70 = v29;
  if ((v69 & 1) != 0)
  {
    if (*v50 == 2)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v218 + 56))(v236, 1, 1, v219);
      swift_bridgeObjectRetain(*(_QWORD *)&v68);
    }
    else
    {
      swift_bridgeObjectRetain(*(_QWORD *)&v68);
      Divider.init()(v77);
      KeyPath = swift_getKeyPath(&unk_1000E4748);
      *(_QWORD *)&v246 = KeyPath;
      BYTE8(v246) = 0;
      v79 = sub_100003D3C(&qword_1001185E8, (uint64_t (*)(uint64_t))&type metadata accessor for Divider, (uint64_t)&protocol conformance descriptor for Divider);
      v80 = sub_1000CBF70();
      v81 = v201;
      View.dividerStyle<A>(_:)(&v246, v201, &type metadata for AttributionVerticalDividerStyle, v79, v80);
      v82 = swift_release(KeyPath);
      v83 = (*(uint64_t (**)(char *, uint64_t, __n128))(v200 + 8))(v26, v81, v82);
      if (qword_1001115C0 != -1)
        v83 = swift_once(&qword_1001115C0, sub_1000C7FFC);
      v84 = qword_100126A88;
      v85 = static Alignment.center.getter(v83);
      _FrameLayout.init(width:height:alignment:)(&v253, 0, 1, v84, 0, v85, v86);
      v88 = (uint64_t)v202;
      v87 = v203;
      v89 = v204;
      (*(void (**)(char *, char *, uint64_t))(v203 + 16))(v202, v70, v204);
      v90 = v219;
      v91 = (_OWORD *)(v88 + *(int *)(v219 + 36));
      v92 = v254;
      *v91 = v253;
      v91[1] = v92;
      v91[2] = v255;
      (*(void (**)(char *, uint64_t))(v87 + 8))(v70, v89);
      v93 = v236;
      sub_1000CC280(v88, (uint64_t)v236);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v218 + 56))(v93, 0, 1, v90);
    }
    v221 = v66;
    *(_QWORD *)&v246 = v67;
    *((double *)&v246 + 1) = v68;
    v94 = sub_1000144A0();
    v95 = Text.init<A>(_:)(&v246, &type metadata for String, v94);
    v96 = v95;
    v98 = v97;
    v100 = v99;
    v102 = v101;
    if (qword_1001115C0 != -1)
      v95 = swift_once(&qword_1001115C0, sub_1000C7FFC);
    v103 = *(double *)&qword_100126A88 + 2.0;
    v104 = static Font.Weight.bold.getter(v95);
    v105 = type metadata accessor for Font.Design(0);
    v106 = (uint64_t)v209;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56))(v209, 1, 1, v105);
    v107 = static Font.system(size:weight:design:)(*(_QWORD *)&v104, 0, v106, v103);
    sub_100028528(v106, &qword_1001141D8, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Design, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v108 = v100 & 1;
    v109 = Text.font(_:)(v107, v96, v98, v100 & 1, v102);
    v111 = v110;
    LOBYTE(v106) = v112;
    v114 = v113;
    swift_release(v107);
    sub_100014490(v96, v98, v108);
    swift_bridgeObjectRelease(v102);
    v115 = swift_getKeyPath(&unk_1000E4718);
    v116 = qword_100126A88;
    v117 = static Alignment.center.getter(v115);
    _FrameLayout.init(width:height:alignment:)(&v238, 0, 1, v116, 0, v117, v118);
    *(_QWORD *)&v246 = v109;
    *((_QWORD *)&v246 + 1) = v111;
    LOBYTE(v247) = v106 & 1;
    *((_QWORD *)&v247 + 1) = v114;
    *(_QWORD *)&v248 = v115;
    *((_QWORD *)&v248 + 1) = 1;
    v249[0] = 0;
    *(_QWORD *)&v249[8] = v238;
    v249[16] = BYTE8(v238);
    v250 = v239;
    v251 = BYTE8(v239);
    v252 = v240;
    type metadata accessor for HeadlineAttributionView(0);
    v119 = v221;
    sub_100045E2C(v221);
    v121 = v222;
    v120 = v223;
    v122 = v224;
    (*(void (**)(char *, _QWORD, uint64_t))(v223 + 104))(v222, enum case for WidgetFamily.systemSmall(_:), v224);
    v123 = sub_100003D3C(&qword_100113B18, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    dispatch thunk of RawRepresentable.rawValue.getter(&v245, v122, v123);
    dispatch thunk of RawRepresentable.rawValue.getter(&v244, v122, v123);
    v124 = v245 == v244;
    v125 = *(void (**)(char *, uint64_t))(v120 + 8);
    v125(v121, v122);
    v125(v119, v122);
    sub_1000CC0F4(0);
    v127 = v126;
    v128 = sub_1000B4E64(&qword_100118620, (uint64_t (*)(uint64_t))sub_1000CC0F4, (void (*)(void))sub_100026F4C);
    v129 = v225;
    View.widgetAccentable(_:)(v124, v127, v128);
    v130 = *((_QWORD *)&v247 + 1);
    v131 = v248;
    sub_100014490(v246, *((uint64_t *)&v246 + 1), v247);
    swift_release(v131);
    swift_bridgeObjectRelease(v130);
    v132 = v226;
    sub_1000A3324((uint64_t)v236, v226, &qword_1001185D0, (uint64_t (*)(uint64_t))sub_1000CBE50, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v134 = v214;
    v133 = v215;
    v135 = *(void (**)(char *, char *, uint64_t))(v215 + 16);
    v136 = v216;
    v135(v214, v129, v216);
    v137 = v217;
    sub_1000A3324(v132, v217, &qword_1001185D0, (uint64_t (*)(uint64_t))sub_1000CBE50, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    sub_1000CBFB4(0);
    v135((char *)(v137 + *(int *)(v138 + 48)), v134, v136);
    v139 = *(void (**)(char *, uint64_t))(v133 + 8);
    v139(v134, v136);
    sub_100028528(v132, &qword_1001185D0, (uint64_t (*)(uint64_t))sub_1000CBE50, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v140 = v233;
    sub_1000A3324(v137, v233, &qword_100118600, (uint64_t (*)(uint64_t))sub_1000CBFB4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    swift_storeEnumTagMultiPayload(v140, v231, 1);
    v141 = sub_100024AA8(&qword_100118630, &qword_1001185C0, (uint64_t (*)(uint64_t))sub_1000CBDAC);
    v142 = sub_100024AA8(&qword_100118638, &qword_100118600, (uint64_t (*)(uint64_t))sub_1000CBFB4);
    v143 = (uint64_t)v229;
    _ConditionalContent<>.init(storage:)(v140, v232, v234, v141, v142);
    sub_100028528(v137, &qword_100118600, (uint64_t (*)(uint64_t))sub_1000CBFB4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v139(v225, v136);
    v144 = (uint64_t)v236;
  }
  else
  {
    v71 = v68;
    v72 = v67;
    v73 = v72;
    if (qword_1001115C0 != -1)
      v72 = (id)swift_once(&qword_1001115C0, sub_1000C7FFC);
    v74 = *(double *)&qword_100126A88 * v71;
    if (*v50 == 2)
    {
      v75 = (uint64_t)v220;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v218 + 56))(v220, 1, 1, v219);
      v76 = v74;
    }
    else
    {
      Divider.init()(v72);
      v145 = swift_getKeyPath(&unk_1000E4748);
      *(_QWORD *)&v246 = v145;
      BYTE8(v246) = 0;
      v146 = sub_100003D3C(&qword_1001185E8, (uint64_t (*)(uint64_t))&type metadata accessor for Divider, (uint64_t)&protocol conformance descriptor for Divider);
      v147 = sub_1000CBF70();
      v148 = v201;
      View.dividerStyle<A>(_:)(&v246, v201, &type metadata for AttributionVerticalDividerStyle, v146, v147);
      v149 = swift_release(v145);
      v150 = (*(uint64_t (**)(char *, uint64_t, __n128))(v200 + 8))(v26, v148, v149);
      v76 = v74;
      v151 = static Alignment.center.getter(v150);
      _FrameLayout.init(width:height:alignment:)(&v253, 0, 1, *(_QWORD *)&v74, 0, v151, v152);
      v154 = (uint64_t)v202;
      v153 = v203;
      v155 = v204;
      (*(void (**)(char *, char *, uint64_t))(v203 + 16))(v202, v70, v204);
      v156 = v219;
      v157 = (_OWORD *)(v154 + *(int *)(v219 + 36));
      v158 = v254;
      *v157 = v253;
      v157[1] = v158;
      v157[2] = v255;
      (*(void (**)(char *, uint64_t))(v153 + 8))(v70, v155);
      v75 = (uint64_t)v220;
      sub_1000CC280(v154, (uint64_t)v220);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v218 + 56))(v75, 0, 1, v156);
    }
    v236 = v73;
    v159 = Image.init(uiImage:)(v236);
    v160 = enum case for Image.TemplateRenderingMode.template(_:);
    v161 = type metadata accessor for Image.TemplateRenderingMode(0);
    v162 = *(_QWORD *)(v161 - 8);
    v163 = (uint64_t)v205;
    (*(void (**)(char *, uint64_t, uint64_t))(v162 + 104))(v205, v160, v161);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v162 + 56))(v163, 0, 1, v161);
    v164 = Image.renderingMode(_:)(v163, v159);
    swift_release(v159);
    sub_100028528(v163, &qword_100117918, (uint64_t (*)(uint64_t))&type metadata accessor for Image.TemplateRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v166 = v206;
    v165 = v207;
    v167 = v208;
    (*(void (**)(char *, _QWORD, uint64_t))(v207 + 104))(v206, enum case for Image.ResizingMode.stretch(_:), v208);
    v168 = Image.resizable(capInsets:resizingMode:)(v166, v164, 0.0, 0.0, 0.0, 0.0);
    v169 = swift_release(v164);
    v170 = (*(uint64_t (**)(char *, uint64_t, __n128))(v165 + 8))(v166, v167, v169);
    v171 = static Alignment.center.getter(v170);
    _FrameLayout.init(width:height:alignment:)(&v238, 0, 1, *(_QWORD *)&v76, 0, v171, v172);
    v246 = (unint64_t)v168;
    LOWORD(v247) = 1;
    *((_QWORD *)&v247 + 1) = v238;
    LOBYTE(v248) = BYTE8(v238);
    *((_QWORD *)&v248 + 1) = v239;
    v249[0] = BYTE8(v239);
    *(_OWORD *)&v249[8] = v240;
    type metadata accessor for HeadlineAttributionView(0);
    sub_100045E2C(v66);
    v174 = v222;
    v173 = v223;
    v175 = v224;
    (*(void (**)(char *, _QWORD, uint64_t))(v223 + 104))(v222, enum case for WidgetFamily.systemSmall(_:), v224);
    v176 = sub_100003D3C(&qword_100113B18, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    dispatch thunk of RawRepresentable.rawValue.getter(&v245, v175, v176);
    dispatch thunk of RawRepresentable.rawValue.getter(&v244, v175, v176);
    v177 = v245 == v244;
    v178 = *(void (**)(char *, uint64_t))(v173 + 8);
    v178(v174, v175);
    v178(v66, v175);
    sub_1000CBBD4(0);
    v180 = v179;
    v181 = sub_1000B4E64(&qword_1001185A8, (uint64_t (*)(uint64_t))sub_1000CBBD4, (void (*)(void))sub_1000CBD4C);
    v182 = v221;
    View.widgetAccentable(_:)(v177, v180, v181);
    swift_release(v246);
    v183 = v226;
    sub_1000A3324(v75, v226, &qword_1001185D0, (uint64_t (*)(uint64_t))sub_1000CBE50, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v185 = v210;
    v184 = v211;
    v186 = *(void (**)(char *, _QWORD *, uint64_t))(v211 + 16);
    v187 = v212;
    v186(v210, v182, v212);
    v188 = v213;
    sub_1000A3324(v183, v213, &qword_1001185D0, (uint64_t (*)(uint64_t))sub_1000CBE50, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    sub_1000CBDAC(0);
    v186((char *)(v188 + *(int *)(v189 + 48)), v185, v187);
    v190 = *(void (**)(char *, uint64_t))(v184 + 8);
    v190(v185, v187);
    sub_100028528(v183, &qword_1001185D0, (uint64_t (*)(uint64_t))sub_1000CBE50, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v191 = v233;
    sub_1000A3324(v188, v233, &qword_1001185C0, (uint64_t (*)(uint64_t))sub_1000CBDAC, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    swift_storeEnumTagMultiPayload(v191, v231, 0);
    v192 = sub_100024AA8(&qword_100118630, &qword_1001185C0, (uint64_t (*)(uint64_t))sub_1000CBDAC);
    v193 = sub_100024AA8(&qword_100118638, &qword_100118600, (uint64_t (*)(uint64_t))sub_1000CBFB4);
    v143 = (uint64_t)v229;
    _ConditionalContent<>.init(storage:)(v191, v232, v234, v192, v193);

    v144 = (uint64_t)v220;
    sub_100028528(v188, &qword_1001185C0, (uint64_t (*)(uint64_t))sub_1000CBDAC, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v190(v221, v187);
  }
  sub_100028528(v144, &qword_1001185D0, (uint64_t (*)(uint64_t))sub_1000CBE50, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v195 = (uint64_t)v227;
  v194 = v228;
  sub_1000A3324((uint64_t)v227, v228, &qword_100118568, (uint64_t (*)(uint64_t))sub_1000CBAE4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v196 = v230;
  sub_1000CC1B8(v143, v230);
  v197 = v235;
  sub_1000A3324(v194, v235, &qword_100118568, (uint64_t (*)(uint64_t))sub_1000CBAE4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  sub_1000CBA50(0);
  sub_1000CC1B8(v196, v197 + *(int *)(v198 + 48));
  sub_1000CC20C(v143);
  sub_100028528(v195, &qword_100118568, (uint64_t (*)(uint64_t))sub_1000CBAE4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  sub_1000CC20C(v196);
  return sub_100028528(v194, &qword_100118568, (uint64_t (*)(uint64_t))sub_1000CBAE4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

double sub_1000C9314@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  double result;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  unsigned __int8 v58;
  __int128 v59;

  sub_10000EDE8(0, &qword_100117918, (uint64_t (*)(uint64_t))&type metadata accessor for Image.TemplateRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v43 - v6;
  v8 = type metadata accessor for Image.ResizingMode(0, v5);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v24 = Image.init(_:bundle:)(0x63692D6F6F686179, 0xEA00000000006E6FLL, 0, v10);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for Image.ResizingMode.stretch(_:), v8);
    v25 = Image.resizable(capInsets:resizingMode:)(v12, v24, 0.0, 0.0, 0.0, 0.0);
    v26 = swift_release(v24);
    (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v12, v8, v26);
    v27 = enum case for Image.TemplateRenderingMode.template(_:);
    v28 = type metadata accessor for Image.TemplateRenderingMode(0);
    v29 = *(_QWORD *)(v28 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 104))(v7, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v7, 0, 1, v28);
    v30 = Image.renderingMode(_:)(v7, v25);
    swift_release(v25);
    sub_100028528((uint64_t)v7, &qword_100117918, (uint64_t (*)(uint64_t))&type metadata accessor for Image.TemplateRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v43 = v30;
    v44 = xmmword_1000DB8D0;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 1;
  }
  else
  {
    v13 = Image.init(_internalSystemName:)(1937204590, 0xE400000000000000, v10);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for Image.ResizingMode.stretch(_:), v8);
    v14 = Image.resizable(capInsets:resizingMode:)(v12, v13, 0.0, 0.0, 0.0, 0.0);
    v15 = swift_release(v13);
    (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v12, v8, v15);
    v16 = enum case for Image.TemplateRenderingMode.template(_:);
    v17 = type metadata accessor for Image.TemplateRenderingMode(0);
    v18 = *(_QWORD *)(v17 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v7, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v7, 0, 1, v17);
    v19 = Image.renderingMode(_:)(v7, v14);
    swift_release(v14);
    v20 = sub_100028528((uint64_t)v7, &qword_100117918, (uint64_t (*)(uint64_t))&type metadata accessor for Image.TemplateRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (qword_1001115C0 != -1)
      v20 = swift_once(&qword_1001115C0, sub_1000C7FFC);
    v21 = qword_100126A88;
    v22 = static Alignment.center.getter(v20);
    _FrameLayout.init(width:height:alignment:)(&v55, 0, 1, v21, 0, v22, v23);
    v43 = v19;
    v44 = xmmword_1000DB8D0;
    *(_QWORD *)&v45 = v55;
    *((_QWORD *)&v45 + 1) = v56;
    *(_QWORD *)&v46 = v57;
    *((_QWORD *)&v46 + 1) = v58;
    v47 = v59;
    v48 = 0;
  }
  sub_1000CBBD4(0);
  v32 = v31;
  sub_1000CBBF0();
  v34 = v33;
  v35 = sub_1000B4E64(&qword_1001185A8, (uint64_t (*)(uint64_t))sub_1000CBBD4, (void (*)(void))sub_1000CBD4C);
  v36 = sub_1000CBD4C();
  _ConditionalContent<>.init(storage:)(&v43, v32, v34, v35, v36);
  result = *(double *)&v49;
  v38 = v50;
  v39 = v51;
  v40 = v52;
  v41 = v53;
  v42 = v54;
  *(_OWORD *)a2 = v49;
  *(_OWORD *)(a2 + 16) = v38;
  *(_OWORD *)(a2 + 32) = v39;
  *(_OWORD *)(a2 + 48) = v40;
  *(_QWORD *)(a2 + 64) = v41;
  *(_BYTE *)(a2 + 72) = v42;
  return result;
}

uint64_t sub_1000C9708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v4;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0x4010000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  sub_1000CB9D4(0);
  return sub_1000C800C(v2, a2 + *(int *)(v4 + 44));
}

double sub_1000C974C@<D0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  char v8;
  int v9;
  unsigned __int8 v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  __int128 v29;

  v6 = static Color.gray.getter();
  KeyPath = swift_getKeyPath(&unk_1000E47D8);
  v8 = DividerStyleConfiguration.orientation.getter();
  v9 = Axis.rawValue.getter(v8 & 1);
  v10 = Axis.rawValue.getter(1);
  sub_100024CBC(a1, a2 & 1);
  v11 = sub_1000466B8(a1, a2 & 1);
  v12 = sub_100024DD8(a1, a2 & 1);
  v13 = static Alignment.center.getter(v12);
  v15 = v14;
  if (v9 == v10)
  {
    v16 = v11;
    v17 = 0;
    v18 = 0.0;
    v19 = 1;
  }
  else
  {
    v16 = 0.0;
    v17 = 1;
    v18 = v11;
    v19 = 0;
  }
  _FrameLayout.init(width:height:alignment:)(&v25, *(_QWORD *)&v16, v17, *(_QWORD *)&v18, v19, v13, v15);
  v20 = v26;
  v21 = v27;
  v22 = v28;
  v23 = v25;
  *(_QWORD *)a3 = KeyPath;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = 0x3FE8000000000000;
  *(_QWORD *)(a3 + 24) = v23;
  *(_BYTE *)(a3 + 32) = v20;
  *(_QWORD *)(a3 + 40) = v21;
  *(_BYTE *)(a3 + 48) = v22;
  result = *(double *)&v29;
  *(_OWORD *)(a3 + 56) = v29;
  return result;
}

double sub_1000C9874@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000C974C(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), a1);
}

double sub_1000C9880@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  char v5;

  Rectangle.path(in:)(v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_1000C98C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for ShapeRole.separator(_:);
  v3 = type metadata accessor for ShapeRole(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_1000C9908()
{
  return Shape.sizeThatFits(_:)();
}

uint64_t sub_1000C9920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000CC7A0();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000C9970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000CC7A0();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000C99C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CC7A0();
  return Shape.body.getter(a1, v2);
}

uint64_t sub_1000C99F8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x77654E656C707061 && a2 == 0xE900000000000073)
  {
    v5 = 0xE900000000000073;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x77654E656C707061, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F6F686179 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F686179, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *sub_1000C9AEC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;
  __n128 v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  char v41;
  char v42;

  sub_100012608(0, &qword_1001183C0, (uint64_t (*)(void))sub_1000CA8E4, (uint64_t)&type metadata for HeadlineAttribution.NewsSourceAttribution.YahooCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedDecodingContainer);
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  __chkstk_darwin(v2);
  v39 = (char *)&v33 - v3;
  sub_100012608(0, &qword_1001183D0, (uint64_t (*)(void))sub_1000CA928, (uint64_t)&type metadata for HeadlineAttribution.NewsSourceAttribution.AppleNewsCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedDecodingContainer);
  v5 = *(_QWORD *)(v4 - 8);
  v37 = v4;
  v38 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - v6;
  sub_100012608(0, &qword_1001183E0, (uint64_t (*)(void))sub_1000CA96C, (uint64_t)&type metadata for HeadlineAttribution.NewsSourceAttribution.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedDecodingContainer);
  v9 = v8;
  v10 = *(_QWORD **)(v8 - 8);
  __chkstk_darwin(v8);
  v12 = (char *)&v33 - v11;
  v13 = a1[3];
  v14 = a1[4];
  sub_100007184(a1, v13);
  v15 = sub_1000CA96C();
  v16 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HeadlineAttribution.NewsSourceAttribution.CodingKeys, &type metadata for HeadlineAttribution.NewsSourceAttribution.CodingKeys, v15, v13, v14);
  if (v16)
    goto LABEL_7;
  v18 = v38;
  v17 = v39;
  v40 = v10;
  v34 = a1;
  v19 = v12;
  v20 = KeyedDecodingContainer.allKeys.getter(v9);
  v21 = v20;
  if (*(_QWORD *)(v20 + 16) != 1)
  {
    v25 = type metadata accessor for DecodingError(0);
    swift_allocError(v25, &protocol witness table for DecodingError, 0, 0);
    v10 = v26;
    sub_1000CA9B0(0);
    *v10 = &type metadata for HeadlineAttribution.NewsSourceAttribution;
    v27 = KeyedDecodingContainer.codingPath.getter(v9);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v27, 0xD00000000000002BLL, 0x80000001000E7710, 0);
    v28 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v10, enum case for DecodingError.typeMismatch(_:), v25);
    swift_willThrow(v28);
    v29 = swift_bridgeObjectRelease(v21);
    ((void (*)(char *, uint64_t, __n128))v40[1])(v12, v9, v29);
    a1 = v34;
LABEL_7:
    sub_100007164(a1);
    return v10;
  }
  v10 = (_QWORD *)*(unsigned __int8 *)(v20 + 32);
  if ((v10 & 1) != 0)
  {
    v42 = 1;
    v22 = sub_1000CA8E4();
    v23 = v17;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HeadlineAttribution.NewsSourceAttribution.YahooCodingKeys, &v42, v9, &type metadata for HeadlineAttribution.NewsSourceAttribution.YahooCodingKeys, v22);
    v24 = v40;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v36);
  }
  else
  {
    v41 = 0;
    v30 = sub_1000CA928();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HeadlineAttribution.NewsSourceAttribution.AppleNewsCodingKeys, &v41, v9, &type metadata for HeadlineAttribution.NewsSourceAttribution.AppleNewsCodingKeys, v30);
    v24 = v40;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v37);
  }
  v32 = swift_bridgeObjectRelease(v21);
  ((void (*)(char *, uint64_t, __n128))v24[1])(v19, v9, v32);
  sub_100007164(v34);
  return v10;
}

uint64_t sub_1000C9E3C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t result;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v37 = a2;
  sub_100012608(0, &qword_100118400, (uint64_t (*)(void))sub_1000CAA58, (uint64_t)&type metadata for HeadlineAttribution.PublisherAttribution.NameCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedDecodingContainer);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - v4;
  sub_100012608(0, &qword_100118410, (uint64_t (*)(void))sub_1000CAA9C, (uint64_t)&type metadata for HeadlineAttribution.PublisherAttribution.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedDecodingContainer);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v10 = (char *)&v36 - v9;
  v12 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v12);
  v13 = sub_1000CAA9C();
  v14 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HeadlineAttribution.PublisherAttribution.CodingKeys, &type metadata for HeadlineAttribution.PublisherAttribution.CodingKeys, v13, v12, v11);
  if (!v14)
  {
    v15 = v39;
    v40 = v8;
    v16 = KeyedDecodingContainer.allKeys.getter(v7);
    v17 = v7;
    if (*(_QWORD *)(v16 + 16) == 1)
    {
      v18 = sub_1000CAA58();
      v20 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HeadlineAttribution.PublisherAttribution.NameCodingKeys, v19, v7, &type metadata for HeadlineAttribution.PublisherAttribution.NameCodingKeys, v18);
      v30 = KeyedDecodingContainer.decode(_:forKey:)(v20, v15);
      v32 = v31;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v15);
      v33 = swift_bridgeObjectRelease(v16);
      (*(void (**)(char *, uint64_t, __n128))(v40 + 8))(v10, v17, v33);
      result = sub_100007164(a1);
      v35 = v37;
      *v37 = v30;
      v35[1] = v32;
      v35[2] = 0;
      v35[3] = 0;
      *((_BYTE *)v35 + 32) = 1;
      return result;
    }
    v21 = type metadata accessor for DecodingError(0);
    swift_allocError(v21, &protocol witness table for DecodingError, 0, 0);
    v22 = a1;
    v24 = v23;
    sub_1000CA9B0(0);
    *v24 = &type metadata for HeadlineAttribution.PublisherAttribution;
    v25 = KeyedDecodingContainer.codingPath.getter(v7);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v25, 0xD00000000000002BLL, 0x80000001000E7710, 0);
    v26 = v24;
    a1 = v22;
    v27 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v26, enum case for DecodingError.typeMismatch(_:), v21);
    swift_willThrow(v27);
    v28 = v40;
    v29 = swift_bridgeObjectRelease(v16);
    (*(void (**)(char *, uint64_t, __n128))(v28 + 8))(v10, v7, v29);
  }
  return sub_100007164(a1);
}

uint64_t sub_1000CA124(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x72756F537377656ELL && a2 == 0xEA00000000006563)
  {
    v5 = 0xEA00000000006563;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72756F537377656ELL, 0xEA00000000006563, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656873696C627570 && a2 == 0xE900000000000072)
  {
    swift_bridgeObjectRelease(0xE900000000000072);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656873696C627570, 0xE900000000000072, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000CA22C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t result;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;

  v21 = a2;
  sub_100012608(0, &qword_100118360, (uint64_t (*)(void))sub_1000CA3EC, (uint64_t)&type metadata for HeadlineAttribution.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedDecodingContainer);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = (char *)&v20 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_100007184(a1, v9);
  v11 = sub_1000CA3EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HeadlineAttribution.CodingKeys, &type metadata for HeadlineAttribution.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100007164(a1);
  v12 = v21;
  v26 = 0;
  v13 = sub_1000CA430();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for HeadlineAttribution.NewsSourceAttribution, &v26, v5, &type metadata for HeadlineAttribution.NewsSourceAttribution, v13);
  v14 = v22;
  v26 = 1;
  v15 = sub_1000CA474();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v22, &type metadata for HeadlineAttribution.PublisherAttribution, &v26, v5, &type metadata for HeadlineAttribution.PublisherAttribution, v15);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v20 = v22;
  v16 = v23;
  v17 = v24;
  v18 = v25;
  result = sub_100007164(a1);
  *(_BYTE *)v12 = v14;
  *(_OWORD *)(v12 + 8) = v20;
  *(_QWORD *)(v12 + 24) = v16;
  *(_QWORD *)(v12 + 32) = v17;
  *(_BYTE *)(v12 + 40) = v18;
  return result;
}

unint64_t sub_1000CA3EC()
{
  unint64_t result;

  result = qword_100118368;
  if (!qword_100118368)
  {
    result = swift_getWitnessTable(&unk_1000E4158, &type metadata for HeadlineAttribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118368);
  }
  return result;
}

unint64_t sub_1000CA430()
{
  unint64_t result;

  result = qword_100118370;
  if (!qword_100118370)
  {
    result = swift_getWitnessTable(&unk_1000E4130, &type metadata for HeadlineAttribution.NewsSourceAttribution);
    atomic_store(result, (unint64_t *)&qword_100118370);
  }
  return result;
}

unint64_t sub_1000CA474()
{
  unint64_t result;

  result = qword_100118378;
  if (!qword_100118378)
  {
    result = swift_getWitnessTable(&unk_1000E4108, &type metadata for HeadlineAttribution.PublisherAttribution);
    atomic_store(result, (unint64_t *)&qword_100118378);
  }
  return result;
}

uint64_t sub_1000CA4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10002F9E4(0, &qword_100118388, (uint64_t)&type metadata for HeadlineAttribution.NewsSourceAttribution);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000CA50C()
{
  unint64_t result;

  result = qword_100118390;
  if (!qword_100118390)
  {
    result = swift_getWitnessTable(&unk_1000E40E0, &type metadata for HeadlineAttribution.NewsSourceAttribution);
    atomic_store(result, (unint64_t *)&qword_100118390);
  }
  return result;
}

uint64_t sub_1000CA550(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_1000CA568()
{
  unint64_t result;

  result = qword_100118398;
  if (!qword_100118398)
  {
    result = swift_getWitnessTable(&unk_1000E40B8, &type metadata for HeadlineAttribution.PublisherAttribution);
    atomic_store(result, (unint64_t *)&qword_100118398);
  }
  return result;
}

ValueMetadata *type metadata accessor for HeadlineAttribution.CodingKeys()
{
  return &type metadata for HeadlineAttribution.CodingKeys;
}

uint64_t destroy for HeadlineAttribution.PublisherAttribution(uint64_t a1)
{
  return sub_10000EC04(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for HeadlineAttribution.PublisherAttribution(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_10000EBD8(*(void **)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for HeadlineAttribution.PublisherAttribution(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_10000EBD8(*(void **)a2, v4, v5, v6, v7);
  v8 = *(void **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  sub_10000EC04(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for HeadlineAttribution.PublisherAttribution(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for HeadlineAttribution.PublisherAttribution(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  sub_10000EC04(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HeadlineAttribution.PublisherAttribution(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HeadlineAttribution.PublisherAttribution(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000CA790(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1000CA798(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for HeadlineAttribution.PublisherAttribution()
{
  return &type metadata for HeadlineAttribution.PublisherAttribution;
}

ValueMetadata *type metadata accessor for HeadlineAttribution.NewsSourceAttribution()
{
  return &type metadata for HeadlineAttribution.NewsSourceAttribution;
}

unint64_t sub_1000CA7C8()
{
  unint64_t result;

  result = qword_1001183A0;
  if (!qword_1001183A0)
  {
    result = swift_getWitnessTable(&unk_1000E3FD8, &type metadata for HeadlineAttribution.NewsSourceAttribution);
    atomic_store(result, (unint64_t *)&qword_1001183A0);
  }
  return result;
}

unint64_t sub_1000CA810()
{
  unint64_t result;

  result = qword_1001183A8;
  if (!qword_1001183A8)
  {
    result = swift_getWitnessTable(&unk_1000E4090, &type metadata for HeadlineAttribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001183A8);
  }
  return result;
}

unint64_t sub_1000CA858()
{
  unint64_t result;

  result = qword_1001183B0;
  if (!qword_1001183B0)
  {
    result = swift_getWitnessTable(&unk_1000E4000, &type metadata for HeadlineAttribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001183B0);
  }
  return result;
}

unint64_t sub_1000CA8A0()
{
  unint64_t result;

  result = qword_1001183B8;
  if (!qword_1001183B8)
  {
    result = swift_getWitnessTable(&unk_1000E4028, &type metadata for HeadlineAttribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001183B8);
  }
  return result;
}

unint64_t sub_1000CA8E4()
{
  unint64_t result;

  result = qword_1001183C8;
  if (!qword_1001183C8)
  {
    result = swift_getWitnessTable(&unk_1000E46C8, &type metadata for HeadlineAttribution.NewsSourceAttribution.YahooCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001183C8);
  }
  return result;
}

unint64_t sub_1000CA928()
{
  unint64_t result;

  result = qword_1001183D8;
  if (!qword_1001183D8)
  {
    result = swift_getWitnessTable(&unk_1000E4678, &type metadata for HeadlineAttribution.NewsSourceAttribution.AppleNewsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001183D8);
  }
  return result;
}

unint64_t sub_1000CA96C()
{
  unint64_t result;

  result = qword_1001183E8;
  if (!qword_1001183E8)
  {
    result = swift_getWitnessTable(&unk_1000E4628, &type metadata for HeadlineAttribution.NewsSourceAttribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001183E8);
  }
  return result;
}

void sub_1000CA9B0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!qword_1001183F0)
  {
    v2 = sub_1000CAA1C();
    v3 = type metadata accessor for DecodingError.Context(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v2, v3, 0, 0);
    if (!v5)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1001183F0);
  }
}

unint64_t sub_1000CAA1C()
{
  unint64_t result;

  result = qword_1001183F8;
  if (!qword_1001183F8)
  {
    result = swift_getExistentialMetatypeMetadata(&type metadata for Any[8]);
    atomic_store(result, (unint64_t *)&qword_1001183F8);
  }
  return result;
}

unint64_t sub_1000CAA58()
{
  unint64_t result;

  result = qword_100118408;
  if (!qword_100118408)
  {
    result = swift_getWitnessTable(&unk_1000E45D8, &type metadata for HeadlineAttribution.PublisherAttribution.NameCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118408);
  }
  return result;
}

unint64_t sub_1000CAA9C()
{
  unint64_t result;

  result = qword_100118418;
  if (!qword_100118418)
  {
    result = swift_getWitnessTable(&unk_1000E4588, &type metadata for HeadlineAttribution.PublisherAttribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118418);
  }
  return result;
}

void sub_1000CAAE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_100118448)
  {
    v2 = type metadata accessor for EncodingError.Context(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for Any[8], v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100118448);
  }
}

uint64_t sub_1000CAB48()
{
  uint64_t v0;

  sub_10000EC04(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_1000CAB74(uint64_t a1)
{
  sub_10000EBD8(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

ValueMetadata *type metadata accessor for HeadlineAttribution.PublisherAttribution.CodingKeys()
{
  return &type metadata for HeadlineAttribution.PublisherAttribution.CodingKeys;
}

uint64_t _s12StocksWidget19HeadlineAttributionV20PublisherAttributionO10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000CAC00 + 4 * byte_1000E3ED0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000CAC20 + 4 * byte_1000E3ED5[v4]))();
}

_BYTE *sub_1000CAC00(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000CAC20(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000CAC28(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000CAC30(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000CAC38(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000CAC40(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HeadlineAttribution.PublisherAttribution.NameCodingKeys()
{
  return &type metadata for HeadlineAttribution.PublisherAttribution.NameCodingKeys;
}

uint64_t _s12StocksWidget19HeadlineAttributionV21NewsSourceAttributionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000CACA8 + 4 * byte_1000E3EDF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000CACDC + 4 * byte_1000E3EDA[v4]))();
}

uint64_t sub_1000CACDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CACE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CACECLL);
  return result;
}

uint64_t sub_1000CACF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CAD00);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000CAD04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CAD0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HeadlineAttribution.NewsSourceAttribution.CodingKeys()
{
  return &type metadata for HeadlineAttribution.NewsSourceAttribution.CodingKeys;
}

ValueMetadata *type metadata accessor for HeadlineAttribution.NewsSourceAttribution.AppleNewsCodingKeys()
{
  return &type metadata for HeadlineAttribution.NewsSourceAttribution.AppleNewsCodingKeys;
}

ValueMetadata *type metadata accessor for HeadlineAttribution.NewsSourceAttribution.YahooCodingKeys()
{
  return &type metadata for HeadlineAttribution.NewsSourceAttribution.YahooCodingKeys;
}

_BYTE *sub_1000CAD48(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  int v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_BYTE *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = (void *)a2[1];
    v8 = a2[2];
    v9 = a2[3];
    v10 = a2[4];
    v11 = *((_BYTE *)a2 + 40);
    sub_10000EBD8(v7, v8, v9, v10, v11);
    *((_QWORD *)v4 + 1) = v7;
    *((_QWORD *)v4 + 2) = v8;
    *((_QWORD *)v4 + 3) = v9;
    *((_QWORD *)v4 + 4) = v10;
    v4[40] = v11;
    v12 = *(int *)(a3 + 20);
    v13 = (uint64_t *)&v4[v12];
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v16 = v15;
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v17 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v13, v14, v17);
      v18 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v16, v18);
    v21 = *(int *)(a3 + 24);
    v22 = &v4[v21];
    v23 = (uint64_t)a2 + v21;
    v24 = *(_QWORD *)v23;
    v25 = *(_BYTE *)(v23 + 8);
    sub_100024CBC(*(_QWORD *)v23, v25);
    *(_QWORD *)v22 = v24;
    v22[8] = v25;
  }
  return v4;
}

uint64_t sub_1000CAE9C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_10000EC04(*(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  return sub_100024DD8(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_BYTE *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_1000CAF4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(void **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_BYTE *)(a2 + 40);
  sub_10000EBD8(v6, v7, v8, v9, v10);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  v11 = *(int *)(a3 + 20);
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v15 = v14;
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v16 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v12, v13, v16);
    v17 = 1;
  }
  else
  {
    v18 = *v13;
    *v12 = *v13;
    swift_retain(v18);
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v15, v17);
  v19 = *(int *)(a3 + 24);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_QWORD *)v21;
  v23 = *(_BYTE *)(v21 + 8);
  sub_100024CBC(*(_QWORD *)v21, v23);
  *(_QWORD *)v20 = v22;
  *(_BYTE *)(v20 + 8) = v23;
  return a1;
}

uint64_t sub_1000CB074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(void **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_BYTE *)(a2 + 40);
  sub_10000EBD8(v6, v7, v8, v9, v10);
  v11 = *(void **)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  sub_10000EC04(v11, v12, v13, v14, v15);
  if (a1 != a2)
  {
    v16 = *(int *)(a3 + 20);
    v17 = (uint64_t *)(a1 + v16);
    v18 = (uint64_t *)(a2 + v16);
    sub_100028528(a1 + v16, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v20 = v19;
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v21 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v17, v18, v21);
      v22 = 1;
    }
    else
    {
      v23 = *v18;
      *v17 = *v18;
      swift_retain(v23);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v20, v22);
  }
  v24 = *(int *)(a3 + 24);
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_QWORD *)v26;
  v28 = *(_BYTE *)(v26 + 8);
  sub_100024CBC(*(_QWORD *)v26, v28);
  v29 = *(_QWORD *)v25;
  v30 = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = v28;
  sub_100024DD8(v29, v30);
  return a1;
}

_OWORD *sub_1000CB1E0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v11 = v10;
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v12 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v9, v12);
    swift_storeEnumTagMultiPayload(v8, v11, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  return a1;
}

uint64_t sub_1000CB2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_BYTE *)(a2 + 40);
  v7 = *(void **)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v6;
  sub_10000EC04(v7, v8, v9, v10, v11);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 20);
    v13 = (void *)(a1 + v12);
    v14 = (const void *)(a2 + v12);
    sub_100028528(a1 + v12, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v16 = v15;
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v17 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v13, v14, v17);
      swift_storeEnumTagMultiPayload(v13, v16, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  v18 = *(int *)(a3 + 24);
  v19 = a1 + v18;
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  LOBYTE(v20) = *((_BYTE *)v20 + 8);
  v22 = *(_QWORD *)v19;
  v23 = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 8) = (_BYTE)v20;
  sub_100024DD8(v22, v23);
  return a1;
}

uint64_t sub_1000CB420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CB42C);
}

uint64_t sub_1000CB42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1000CB4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CB4C4);
}

uint64_t sub_1000CB4C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 40) = -(char)a2;
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for HeadlineAttributionView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001184A8;
  if (!qword_1001184A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HeadlineAttributionView);
  return result;
}

void sub_1000CB588(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = ")";
  sub_10000EDE8(319, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1000E4220;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_1000CB61C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000EA4C4, 1);
}

unint64_t sub_1000CB630()
{
  unint64_t result;

  result = qword_1001184E8;
  if (!qword_1001184E8)
  {
    result = swift_getWitnessTable(&unk_1000E43B8, &type metadata for HeadlineAttribution.NewsSourceAttribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001184E8);
  }
  return result;
}

unint64_t sub_1000CB678()
{
  unint64_t result;

  result = qword_1001184F0;
  if (!qword_1001184F0)
  {
    result = swift_getWitnessTable(&unk_1000E4470, &type metadata for HeadlineAttribution.PublisherAttribution.NameCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001184F0);
  }
  return result;
}

unint64_t sub_1000CB6C0()
{
  unint64_t result;

  result = qword_1001184F8;
  if (!qword_1001184F8)
  {
    result = swift_getWitnessTable(&unk_1000E4560, &type metadata for HeadlineAttribution.PublisherAttribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001184F8);
  }
  return result;
}

unint64_t sub_1000CB708()
{
  unint64_t result;

  result = qword_100118500;
  if (!qword_100118500)
  {
    result = swift_getWitnessTable(&unk_1000E4498, &type metadata for HeadlineAttribution.PublisherAttribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118500);
  }
  return result;
}

unint64_t sub_1000CB750()
{
  unint64_t result;

  result = qword_100118508;
  if (!qword_100118508)
  {
    result = swift_getWitnessTable(&unk_1000E44C0, &type metadata for HeadlineAttribution.PublisherAttribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118508);
  }
  return result;
}

unint64_t sub_1000CB798()
{
  unint64_t result;

  result = qword_100118510;
  if (!qword_100118510)
  {
    result = swift_getWitnessTable(&unk_1000E43E0, &type metadata for HeadlineAttribution.PublisherAttribution.NameCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118510);
  }
  return result;
}

unint64_t sub_1000CB7E0()
{
  unint64_t result;

  result = qword_100118518;
  if (!qword_100118518)
  {
    result = swift_getWitnessTable(&unk_1000E4408, &type metadata for HeadlineAttribution.PublisherAttribution.NameCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118518);
  }
  return result;
}

unint64_t sub_1000CB828()
{
  unint64_t result;

  result = qword_100118520;
  if (!qword_100118520)
  {
    result = swift_getWitnessTable(&unk_1000E4328, &type metadata for HeadlineAttribution.NewsSourceAttribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118520);
  }
  return result;
}

unint64_t sub_1000CB870()
{
  unint64_t result;

  result = qword_100118528;
  if (!qword_100118528)
  {
    result = swift_getWitnessTable(&unk_1000E4350, &type metadata for HeadlineAttribution.NewsSourceAttribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118528);
  }
  return result;
}

unint64_t sub_1000CB8B8()
{
  unint64_t result;

  result = qword_100118530;
  if (!qword_100118530)
  {
    result = swift_getWitnessTable(&unk_1000E42D8, &type metadata for HeadlineAttribution.NewsSourceAttribution.AppleNewsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118530);
  }
  return result;
}

unint64_t sub_1000CB900()
{
  unint64_t result;

  result = qword_100118538;
  if (!qword_100118538)
  {
    result = swift_getWitnessTable(&unk_1000E4300, &type metadata for HeadlineAttribution.NewsSourceAttribution.AppleNewsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118538);
  }
  return result;
}

unint64_t sub_1000CB948()
{
  unint64_t result;

  result = qword_100118540;
  if (!qword_100118540)
  {
    result = swift_getWitnessTable(&unk_1000E4288, &type metadata for HeadlineAttribution.NewsSourceAttribution.YahooCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118540);
  }
  return result;
}

unint64_t sub_1000CB990()
{
  unint64_t result;

  result = qword_100118548;
  if (!qword_100118548)
  {
    result = swift_getWitnessTable(&unk_1000E42B0, &type metadata for HeadlineAttribution.NewsSourceAttribution.YahooCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118548);
  }
  return result;
}

void sub_1000CB9D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100118550)
  {
    sub_10000EDE8(255, &qword_100118558, (uint64_t (*)(uint64_t))sub_1000CBA50, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _HStackLayout, v2, &protocol witness table for _HStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100118550);
  }
}

void sub_1000CBA50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100118560)
  {
    sub_10000EDE8(255, &qword_100118568, (uint64_t (*)(uint64_t))sub_1000CBAE4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v3 = v2;
    sub_1000CC110(255, &qword_1001185B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100118560);
  }
}

void sub_1000CBAE4(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_100118570)
  {
    sub_10000EDE8(255, &qword_100118578, (uint64_t (*)(uint64_t))sub_1000CBB70, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
    v5[0] = v2;
    v5[1] = sub_1000CBC4C();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100118570);
  }
}

void sub_1000CBB70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100118580)
  {
    sub_1000CBBD4(255);
    v3 = v2;
    sub_1000CBBF0();
    v5 = type metadata accessor for _ConditionalContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100118580);
  }
}

void sub_1000CBBD4(uint64_t a1)
{
  sub_1000CBE6C(a1, &qword_100118588, (uint64_t (*)(uint64_t))sub_1000CBBF0, (uint64_t)&type metadata for _FrameLayout);
}

void sub_1000CBBF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100118590)
  {
    v0 = type metadata accessor for ModifiedContent(0, &type metadata for Image, &type metadata for _AspectRatioLayout);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100118590);
  }
}

unint64_t sub_1000CBC4C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100118598;
  if (!qword_100118598)
  {
    sub_10000EDE8(255, &qword_100118578, (uint64_t (*)(uint64_t))sub_1000CBB70, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
    v2 = v1;
    sub_1000CBCC4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v2);
    atomic_store(result, (unint64_t *)&qword_100118598);
  }
  return result;
}

unint64_t sub_1000CBCC4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001185A0;
  if (!qword_1001185A0)
  {
    sub_1000CBB70(255);
    v2 = v1;
    sub_1000B4E64(&qword_1001185A8, (uint64_t (*)(uint64_t))sub_1000CBBD4, (void (*)(void))sub_1000CBD4C);
    sub_1000CBD4C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001185A0);
  }
  return result;
}

unint64_t sub_1000CBD4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001185B0;
  if (!qword_1001185B0)
  {
    sub_1000CBBF0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001185B0);
  }
  return result;
}

void sub_1000CBDAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_1001185C8)
  {
    sub_10000EDE8(255, &qword_1001185D0, (uint64_t (*)(uint64_t))sub_1000CBE50, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v3 = v2;
    sub_1000CC058(255, &qword_1001185F8, (uint64_t (*)(uint64_t))sub_1000CBBD4, &qword_1001185A8, (void (*)(void))sub_1000CBD4C);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1001185C8);
  }
}

void sub_1000CBE50(uint64_t a1)
{
  sub_1000CBE6C(a1, &qword_1001185D8, (uint64_t (*)(uint64_t))sub_1000CBEC8, (uint64_t)&type metadata for _FrameLayout);
}

void sub_1000CBE6C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = type metadata accessor for ModifiedContent(a1, v7, a4);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_1000CBEC8(uint64_t a1)
{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_1001185E0)
  {
    v4[0] = type metadata accessor for Divider(255);
    v4[1] = &type metadata for AttributionVerticalDividerStyle;
    v4[2] = sub_100003D3C(&qword_1001185E8, (uint64_t (*)(uint64_t))&type metadata accessor for Divider, (uint64_t)&protocol conformance descriptor for Divider);
    v4[3] = sub_1000CBF70();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v4, &opaque type descriptor for <<opaque return type of View.dividerStyle<A>(_:)>>, 0);
    if (!v3)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001185E0);
  }
}

unint64_t sub_1000CBF70()
{
  unint64_t result;

  result = qword_1001185F0;
  if (!qword_1001185F0)
  {
    result = swift_getWitnessTable(&unk_1000E47A0, &type metadata for AttributionVerticalDividerStyle);
    atomic_store(result, (unint64_t *)&qword_1001185F0);
  }
  return result;
}

void sub_1000CBFB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100118608)
  {
    sub_10000EDE8(255, &qword_1001185D0, (uint64_t (*)(uint64_t))sub_1000CBE50, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v3 = v2;
    sub_1000CC058(255, &qword_100118610, (uint64_t (*)(uint64_t))sub_1000CC0F4, &qword_100118620, (void (*)(void))sub_100026F4C);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100118608);
  }
}

void sub_1000CC058(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, void (*a5)(void))
{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v11;
  _QWORD v12[2];

  if (!*a2)
  {
    v12[0] = a3(255);
    v12[1] = sub_1000B4E64(a4, a3, a5);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v12, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 0);
    if (!v11)
      atomic_store(OpaqueTypeMetadata2, a2);
  }
}

void sub_1000CC0F4(uint64_t a1)
{
  sub_1000CBE6C(a1, &qword_100118618, (uint64_t (*)(uint64_t))sub_1000142FC, (uint64_t)&type metadata for _FrameLayout);
}

void sub_1000CC110(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_10000EDE8(255, &qword_1001185C0, (uint64_t (*)(uint64_t))sub_1000CBDAC, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v7 = v6;
    sub_10000EDE8(255, &qword_100118600, (uint64_t (*)(uint64_t))sub_1000CBFB4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1000CC1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000CC110(0, &qword_1001185B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CC20C(uint64_t a1)
{
  uint64_t v2;

  sub_1000CC110(0, &qword_1001185B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000CC258(double *a1@<X8>)
{
  *a1 = EnvironmentValues.dividerThickness.getter();
}

uint64_t sub_1000CC280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000CBE50(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for AttributionVerticalDividerStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_100024CBC(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for AttributionVerticalDividerStyle(uint64_t a1)
{
  return sub_100024DD8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for AttributionVerticalDividerStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_100024CBC(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_100024DD8(v5, v6);
  return a1;
}

uint64_t assignWithTake for AttributionVerticalDividerStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_100024DD8(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributionVerticalDividerStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributionVerticalDividerStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributionVerticalDividerStyle()
{
  return &type metadata for AttributionVerticalDividerStyle;
}

uint64_t sub_1000CC440()
{
  return sub_100003D3C(&qword_100118640, (uint64_t (*)(uint64_t))sub_1000CC46C, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

void sub_1000CC46C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100118648)
  {
    sub_10000EDE8(255, &qword_100118558, (uint64_t (*)(uint64_t))sub_1000CBA50, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_100024AA8(&qword_100118650, &qword_100118558, (uint64_t (*)(uint64_t))sub_1000CBA50);
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100118648);
  }
}

uint64_t sub_1000CC504(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000EA510, 1);
}

ValueMetadata *type metadata accessor for DividerShape()
{
  return &type metadata for DividerShape;
}

uint64_t sub_1000CC52C()
{
  return sub_1000B4E64(&qword_100118658, (uint64_t (*)(uint64_t))sub_1000CC560, (void (*)(void))sub_1000CC60C);
}

void sub_1000CC560(uint64_t a1)
{
  sub_1000CBE6C(a1, &qword_100118660, (uint64_t (*)(uint64_t))sub_1000CC57C, (uint64_t)&type metadata for _FrameLayout);
}

void sub_1000CC57C(uint64_t a1)
{
  sub_1000CBE6C(a1, &qword_100118668, (uint64_t (*)(uint64_t))sub_1000CC598, (uint64_t)&type metadata for _OpacityEffect);
}

void sub_1000CC598(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100118670)
  {
    sub_10002F4D0(255, &qword_100112D30, (unint64_t *)&qword_100112D38, (uint64_t)&type metadata for Color);
    v3 = type metadata accessor for ModifiedContent(a1, &type metadata for DividerShape, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100118670);
  }
}

uint64_t sub_1000CC60C()
{
  return sub_1000B4E64(&qword_100118678, (uint64_t (*)(uint64_t))sub_1000CC57C, (void (*)(void))sub_1000CC630);
}

unint64_t sub_1000CC630()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100118680;
  if (!qword_100118680)
  {
    sub_1000CC598(255);
    v2 = v1;
    sub_1000CC6B8();
    sub_10002F72C((unint64_t *)&qword_100112E38, &qword_100112D30, (unint64_t *)&qword_100112D38, (uint64_t)&type metadata for Color);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100118680);
  }
  return result;
}

unint64_t sub_1000CC6B8()
{
  unint64_t result;

  result = qword_100118688;
  if (!qword_100118688)
  {
    result = swift_getWitnessTable(&unk_1000E4818, &type metadata for DividerShape);
    atomic_store(result, (unint64_t *)&qword_100118688);
  }
  return result;
}

uint64_t sub_1000CC6FC()
{
  return sub_100003D3C(&qword_100118690, (uint64_t (*)(uint64_t))sub_1000CC728, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
}

void sub_1000CC728(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_100118698)
  {
    v4[0] = &type metadata for DividerShape;
    v4[1] = &type metadata for ForegroundStyle;
    v4[2] = sub_1000CC7A0();
    v4[3] = &protocol witness table for ForegroundStyle;
    v2 = type metadata accessor for _ShapeView(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_100118698);
  }
}

unint64_t sub_1000CC7A0()
{
  unint64_t result;

  result = qword_1001186A0;
  if (!qword_1001186A0)
  {
    result = swift_getWitnessTable(&unk_1000E48B8, &type metadata for DividerShape);
    atomic_store(result, (unint64_t *)&qword_1001186A0);
  }
  return result;
}

unint64_t sub_1000CC7E8()
{
  unint64_t result;

  result = qword_1001186A8;
  if (!qword_1001186A8)
  {
    result = swift_getWitnessTable(&unk_1000E4868, &type metadata for DividerShape);
    atomic_store(result, (unint64_t *)&qword_1001186A8);
  }
  return result;
}

_QWORD *sub_1000CC83C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, int *, __n128);
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t, __n128);
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  void (*v93)(char *, char *, uint64_t);
  int *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    v14 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    sub_100038414(0);
    v8 = v7;
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v9 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = v8;
      v12 = 1;
    }
    else
    {
      v15 = *a2;
      *a1 = *a2;
      swift_retain(v15);
      v10 = a1;
      v11 = v8;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    v16 = *(int *)(a3 + 20);
    v17 = (_QWORD *)((char *)a1 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    sub_1000461DC(0);
    v20 = v19;
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v21 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v17, v18, v21);
      v22 = v17;
      v23 = v20;
      v24 = 1;
    }
    else
    {
      v25 = *v18;
      *v17 = *v18;
      swift_retain(v25);
      v22 = v17;
      v23 = v20;
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v23, v24);
    v97 = a3;
    v26 = *(int *)(a3 + 24);
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = type metadata accessor for Date(0);
    v93 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
    v93(v27, v28, v29);
    v94 = (int *)type metadata accessor for DetailTimelineEntry(0);
    v95 = v28;
    v30 = v94[5];
    v96 = v27;
    v31 = &v27[v30];
    v32 = &v28[v30];
    v33 = *(_QWORD *)&v28[v30 + 8];
    *(_QWORD *)v31 = *(_QWORD *)&v28[v30];
    *((_QWORD *)v31 + 1) = v33;
    v34 = *(_QWORD *)&v28[v30 + 24];
    *((_QWORD *)v31 + 2) = *(_QWORD *)&v28[v30 + 16];
    *((_QWORD *)v31 + 3) = v34;
    v35 = *(_QWORD *)&v28[v30 + 40];
    *((_QWORD *)v31 + 4) = *(_QWORD *)&v28[v30 + 32];
    *((_QWORD *)v31 + 5) = v35;
    v36 = &v27[v30 + 48];
    v37 = &v28[v30 + 48];
    v38 = *((_QWORD *)v32 + 9);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    v98 = a2;
    v99 = a1;
    if (v38 == 1)
    {
      v39 = *((_OWORD *)v32 + 4);
      *(_OWORD *)v36 = *(_OWORD *)v37;
      *((_OWORD *)v31 + 4) = v39;
    }
    else
    {
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v31[56] = v32[56];
      *((_QWORD *)v31 + 8) = *((_QWORD *)v32 + 8);
      *((_QWORD *)v31 + 9) = v38;
      swift_bridgeObjectRetain(v38);
    }
    *((_QWORD *)v31 + 10) = *((_QWORD *)v32 + 10);
    v31[88] = v32[88];
    v40 = *((_QWORD *)v32 + 13);
    *((_QWORD *)v31 + 12) = *((_QWORD *)v32 + 12);
    *((_QWORD *)v31 + 13) = v40;
    *((_QWORD *)v31 + 14) = *((_QWORD *)v32 + 14);
    v31[120] = v32[120];
    *((_QWORD *)v31 + 16) = *((_QWORD *)v32 + 16);
    v31[136] = v32[136];
    v31[137] = v32[137];
    v41 = (int *)type metadata accessor for DetailContentViewModel(0);
    v42 = v41[9];
    v43 = &v31[v42];
    v44 = &v32[v42];
    v45 = (int *)type metadata accessor for PreparedSparkline(0);
    v46 = *((_QWORD *)v45 - 1);
    v47 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v46 + 48);
    v48 = swift_bridgeObjectRetain(v40);
    if (v47(v44, 1, v45, v48))
    {
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      v50 = *(_QWORD *)v44;
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v51 = v45[5];
      v52 = &v43[v51];
      v53 = &v44[v51];
      v54 = swift_bridgeObjectRetain(v50);
      ((void (*)(char *, char *, uint64_t, __n128))v93)(v52, v53, v29, v54);
      sub_100022800(0);
      v93(&v52[*(int *)(v55 + 36)], &v53[*(int *)(v55 + 36)], v29);
      v56 = v45[6];
      v57 = &v43[v56];
      v58 = &v44[v56];
      v59 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
      *(_OWORD *)&v43[v45[7]] = *(_OWORD *)&v44[v45[7]];
      v60 = v45[8];
      v61 = &v43[v60];
      v62 = &v44[v60];
      *(_QWORD *)v61 = *(_QWORD *)v62;
      v61[8] = v62[8];
      v43[v45[9]] = v44[v45[9]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v46 + 56))(v43, 0, 1, v45);
    }
    v63 = v41[10];
    v64 = *(_QWORD *)&v32[v63];
    *(_QWORD *)&v31[v63] = v64;
    v65 = v41[11];
    v66 = &v31[v65];
    v67 = &v32[v65];
    sub_100042D9C(0);
    v69 = v68;
    v70 = *(_QWORD *)(v68 - 8);
    v71 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v70 + 48);
    v72 = swift_bridgeObjectRetain(v64);
    if (v71(v67, 1, v69, v72))
    {
      sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v66, v67, v69);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v66, 0, 1, v69);
    }
    v14 = v99;
    v74 = v41[12];
    v75 = &v31[v74];
    v76 = &v32[v74];
    v77 = type metadata accessor for URL(0);
    v78 = *(_QWORD *)(v77 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
    {
      sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v75, v76, v77);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
    }
    v80 = v94[6];
    v81 = &v96[v80];
    v82 = &v95[v80];
    v83 = type metadata accessor for WidgetQuote(0);
    v84 = *(_QWORD *)(v83 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
    {
      sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v81, v82, v83);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
    }
    v86 = v94[7];
    v87 = &v96[v86];
    v88 = &v95[v86];
    v89 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v87, v88, v89);
    v96[v94[8]] = v95[v94[8]];
    v96[v94[9]] = v95[v94[9]];
    v90 = *(int *)(v97 + 28);
    v91 = *(_OWORD *)((char *)v98 + v90 + 24);
    *(_OWORD *)((char *)v99 + v90 + 24) = v91;
    (**(void (***)(void))(v91 - 8))();
  }
  return v14;
}

uint64_t sub_1000CCE3C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  int *v12;
  char *v13;
  uint64_t v14;
  int *v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  _QWORD *v19;
  int *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int *v39;

  sub_100038414(0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  sub_1000461DC(0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (char *)a1 + a2[6];
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v12 = (int *)type metadata accessor for DetailTimelineEntry(0);
  v13 = &v9[v12[5]];
  swift_bridgeObjectRelease(*((_QWORD *)v13 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v13 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v13 + 5));
  v14 = *((_QWORD *)v13 + 9);
  if (v14 != 1)
    swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(*((_QWORD *)v13 + 13));
  v15 = (int *)type metadata accessor for DetailContentViewModel(0);
  v16 = &v13[v15[9]];
  v17 = type metadata accessor for PreparedSparkline(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v18 = swift_bridgeObjectRelease(*(_QWORD *)v16);
    v39 = v12;
    v19 = a1;
    v20 = a2;
    v21 = &v16[*(int *)(v17 + 20)];
    ((void (*)(char *, uint64_t, __n128))v11)(v21, v10, v18);
    sub_100022800(0);
    v23 = &v21[*(int *)(v22 + 36)];
    a2 = v20;
    a1 = v19;
    v12 = v39;
    v11(v23, v10);
    v24 = &v16[*(int *)(v17 + 24)];
    v25 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  }
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v15[10]]);
  v26 = &v13[v15[11]];
  sub_100042D9C(0);
  v28 = v27;
  v29 = *(_QWORD *)(v27 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v26, 1, v27))
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
  v30 = &v13[v15[12]];
  v31 = type metadata accessor for URL(0);
  v32 = *(_QWORD *)(v31 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v31);
  v33 = &v9[v12[6]];
  v34 = type metadata accessor for WidgetQuote(0);
  v35 = *(_QWORD *)(v34 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v34);
  v36 = &v9[v12[7]];
  v37 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
  return sub_100007164((_QWORD *)((char *)a1 + a2[7]));
}

_QWORD *sub_1000CD124(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int *v43;
  uint64_t v44;
  unsigned int (*v45)(char *, uint64_t, int *, __n128);
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(char *, uint64_t, uint64_t, __n128);
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  void (*v91)(char *, char *, uint64_t, __n128);
  int *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;

  sub_100038414(0);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = a1;
    v10 = v7;
    v11 = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v9 = a1;
    v10 = v7;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  v13 = *(int *)(a3 + 20);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  sub_1000461DC(0);
  v17 = v16;
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v18 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v14, v15, v18);
    v19 = v14;
    v20 = v17;
    v21 = 1;
  }
  else
  {
    v22 = *v15;
    *v14 = *v15;
    swift_retain(v22);
    v19 = v14;
    v20 = v17;
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v19, v20, v21);
  v95 = a3;
  v96 = a2;
  v23 = *(int *)(a3 + 24);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = type metadata accessor for Date(0);
  v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
  v27(v24, v25, v26);
  v92 = (int *)type metadata accessor for DetailTimelineEntry(0);
  v93 = v25;
  v28 = v92[5];
  v94 = v24;
  v29 = &v24[v28];
  v30 = &v25[v28];
  v31 = *(_QWORD *)&v25[v28 + 8];
  *(_QWORD *)v29 = *(_QWORD *)&v25[v28];
  *((_QWORD *)v29 + 1) = v31;
  v32 = *(_QWORD *)&v25[v28 + 24];
  *((_QWORD *)v29 + 2) = *(_QWORD *)&v25[v28 + 16];
  *((_QWORD *)v29 + 3) = v32;
  v33 = *(_QWORD *)&v25[v28 + 40];
  *((_QWORD *)v29 + 4) = *(_QWORD *)&v25[v28 + 32];
  *((_QWORD *)v29 + 5) = v33;
  v34 = &v24[v28 + 48];
  v35 = v30 + 48;
  v36 = *((_QWORD *)v30 + 9);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  v97 = a1;
  v91 = (void (*)(char *, char *, uint64_t, __n128))v27;
  if (v36 == 1)
  {
    v37 = *((_OWORD *)v30 + 4);
    *(_OWORD *)v34 = *v35;
    *((_OWORD *)v29 + 4) = v37;
  }
  else
  {
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v29[56] = v30[56];
    *((_QWORD *)v29 + 8) = *((_QWORD *)v30 + 8);
    *((_QWORD *)v29 + 9) = v36;
    swift_bridgeObjectRetain(v36);
  }
  *((_QWORD *)v29 + 10) = *((_QWORD *)v30 + 10);
  v29[88] = v30[88];
  v38 = *((_QWORD *)v30 + 13);
  *((_QWORD *)v29 + 12) = *((_QWORD *)v30 + 12);
  *((_QWORD *)v29 + 13) = v38;
  *((_QWORD *)v29 + 14) = *((_QWORD *)v30 + 14);
  v29[120] = v30[120];
  *((_QWORD *)v29 + 16) = *((_QWORD *)v30 + 16);
  v29[136] = v30[136];
  v29[137] = v30[137];
  v39 = (int *)type metadata accessor for DetailContentViewModel(0);
  v40 = v39[9];
  v41 = &v29[v40];
  v42 = &v30[v40];
  v43 = (int *)type metadata accessor for PreparedSparkline(0);
  v44 = *((_QWORD *)v43 - 1);
  v45 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v44 + 48);
  v46 = swift_bridgeObjectRetain(v38);
  if (v45(v42, 1, v43, v46))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    v48 = *(_QWORD *)v42;
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v49 = v43[5];
    v50 = &v41[v49];
    v51 = &v42[v49];
    v52 = swift_bridgeObjectRetain(v48);
    v91(v50, v51, v26, v52);
    sub_100022800(0);
    ((void (*)(char *, char *, uint64_t))v91)(&v50[*(int *)(v53 + 36)], &v51[*(int *)(v53 + 36)], v26);
    v54 = v43[6];
    v55 = &v41[v54];
    v56 = &v42[v54];
    v57 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
    *(_OWORD *)&v41[v43[7]] = *(_OWORD *)&v42[v43[7]];
    v58 = v43[8];
    v59 = &v41[v58];
    v60 = &v42[v58];
    *(_QWORD *)v59 = *(_QWORD *)v60;
    v59[8] = v60[8];
    v41[v43[9]] = v42[v43[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v44 + 56))(v41, 0, 1, v43);
  }
  v61 = v39[10];
  v62 = *(_QWORD *)&v30[v61];
  *(_QWORD *)&v29[v61] = v62;
  v63 = v39[11];
  v64 = &v29[v63];
  v65 = &v30[v63];
  sub_100042D9C(0);
  v67 = v66;
  v68 = *(_QWORD *)(v66 - 8);
  v69 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v68 + 48);
  v70 = swift_bridgeObjectRetain(v62);
  if (v69(v65, 1, v67, v70))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v64, v65, v67);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v64, 0, 1, v67);
  }
  v72 = v39[12];
  v73 = &v29[v72];
  v74 = &v30[v72];
  v75 = type metadata accessor for URL(0);
  v76 = *(_QWORD *)(v75 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v73, v74, v75);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
  }
  v78 = v92[6];
  v79 = &v94[v78];
  v80 = &v93[v78];
  v81 = type metadata accessor for WidgetQuote(0);
  v82 = *(_QWORD *)(v81 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
  {
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v79, v80, v81);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
  }
  v84 = v92[7];
  v85 = &v94[v84];
  v86 = &v93[v84];
  v87 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v85, v86, v87);
  v94[v92[8]] = v93[v92[8]];
  v94[v92[9]] = v93[v92[9]];
  v88 = *(int *)(v95 + 28);
  v89 = *(_OWORD *)((char *)v96 + v88 + 24);
  *(_OWORD *)((char *)v97 + v88 + 24) = v89;
  (**(void (***)(void))(v89 - 8))();
  return v97;
}

_QWORD *sub_1000CD6F4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int *v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, int *);
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t, __n128);
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(char *, uint64_t, uint64_t);
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(char *, uint64_t, uint64_t);
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(char *, uint64_t, uint64_t);
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  void (*v131)(char *, char *, uint64_t);
  int *v132;
  uint64_t v133;
  int *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;

  if (a1 != a2)
  {
    sub_10001DF70((uint64_t)a1, (uint64_t (*)(_QWORD))sub_100038414);
    sub_100038414(0);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v13 = *(int *)(a3 + 20);
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    sub_10001DF70((uint64_t)a1 + v13, (uint64_t (*)(_QWORD))sub_1000461DC);
    sub_1000461DC(0);
    v17 = v16;
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v18 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v14, v15, v18);
      v19 = v14;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v15;
      *v14 = *v15;
      swift_retain(v22);
      v19 = v14;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
  }
  v23 = *(int *)(a3 + 24);
  v138 = a2;
  v139 = a1;
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = type metadata accessor for Date(0);
  v133 = *(_QWORD *)(v26 - 8);
  v131 = *(void (**)(char *, char *, uint64_t))(v133 + 24);
  v131(v24, v25, v26);
  v27 = type metadata accessor for DetailTimelineEntry(0);
  v28 = *(int *)(v27 + 20);
  v29 = &v24[v28];
  v30 = &v25[v28];
  *(_QWORD *)v29 = *(_QWORD *)&v25[v28];
  v31 = *(_QWORD *)&v25[v28 + 8];
  v32 = *(_QWORD *)&v24[v28 + 8];
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *((_QWORD *)v29 + 2) = *((_QWORD *)v30 + 2);
  v33 = *((_QWORD *)v30 + 3);
  v34 = *((_QWORD *)v29 + 3);
  *((_QWORD *)v29 + 3) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  *((_QWORD *)v29 + 4) = *((_QWORD *)v30 + 4);
  v35 = *((_QWORD *)v30 + 5);
  v36 = *((_QWORD *)v29 + 5);
  *((_QWORD *)v29 + 5) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = v29 + 48;
  v38 = v30 + 48;
  v39 = *((_QWORD *)v29 + 9);
  v40 = *((_QWORD *)v30 + 9);
  v136 = v24;
  v137 = a3;
  v134 = (int *)v27;
  v135 = v25;
  if (v39 == 1)
  {
    if (v40 == 1)
    {
      v41 = *((_OWORD *)v30 + 4);
      *v37 = *v38;
      *((_OWORD *)v29 + 4) = v41;
    }
    else
    {
      v43 = *(_QWORD *)v38;
      v29[56] = v30[56];
      *(_QWORD *)v37 = v43;
      *((_QWORD *)v29 + 8) = *((_QWORD *)v30 + 8);
      v44 = *((_QWORD *)v30 + 9);
      *((_QWORD *)v29 + 9) = v44;
      swift_bridgeObjectRetain(v44);
    }
  }
  else if (v40 == 1)
  {
    sub_10002304C((uint64_t)(v29 + 48));
    v42 = *((_OWORD *)v30 + 4);
    *v37 = *v38;
    *((_OWORD *)v29 + 4) = v42;
  }
  else
  {
    v45 = *(_QWORD *)v38;
    v29[56] = v30[56];
    *(_QWORD *)v37 = v45;
    *((_QWORD *)v29 + 8) = *((_QWORD *)v30 + 8);
    v46 = *((_QWORD *)v30 + 9);
    *((_QWORD *)v29 + 9) = v46;
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRelease(v39);
  }
  v47 = *((_QWORD *)v30 + 10);
  v29[88] = v30[88];
  *((_QWORD *)v29 + 10) = v47;
  *((_QWORD *)v29 + 12) = *((_QWORD *)v30 + 12);
  v48 = *((_QWORD *)v30 + 13);
  v49 = *((_QWORD *)v29 + 13);
  *((_QWORD *)v29 + 13) = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  v50 = *((_QWORD *)v30 + 14);
  v29[120] = v30[120];
  *((_QWORD *)v29 + 14) = v50;
  v51 = *((_QWORD *)v30 + 16);
  v29[136] = v30[136];
  *((_QWORD *)v29 + 16) = v51;
  v29[137] = v30[137];
  v52 = (int *)type metadata accessor for DetailContentViewModel(0);
  v53 = v52[9];
  v54 = &v29[v53];
  v55 = &v30[v53];
  v56 = (int *)type metadata accessor for PreparedSparkline(0);
  v57 = *((_QWORD *)v56 - 1);
  v58 = *(uint64_t (**)(char *, uint64_t, int *))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (v59)
  {
    if (v60)
      goto LABEL_21;
    v62 = *(_QWORD *)v55;
    *(_QWORD *)v54 = *(_QWORD *)v55;
    v63 = v56[5];
    v64 = &v54[v63];
    v65 = &v55[v63];
    v132 = v52;
    v66 = *(void (**)(char *, char *, uint64_t, __n128))(v133 + 16);
    v67 = swift_bridgeObjectRetain(v62);
    v66(v64, v65, v26, v67);
    sub_100022800(0);
    ((void (*)(char *, char *, uint64_t))v66)(&v64[*(int *)(v68 + 36)], &v65[*(int *)(v68 + 36)], v26);
    v52 = v132;
    v69 = v56[6];
    v70 = &v54[v69];
    v71 = &v55[v69];
    v72 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v70, v71, v72);
    *(_OWORD *)&v54[v56[7]] = *(_OWORD *)&v55[v56[7]];
    v73 = v56[8];
    v74 = &v54[v73];
    v75 = &v55[v73];
    v76 = v75[8];
    *(_QWORD *)v74 = *(_QWORD *)v75;
    v74[8] = v76;
    v54[v56[9]] = v55[v56[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v57 + 56))(v54, 0, 1, v56);
  }
  else
  {
    if (v60)
    {
      sub_10001DF70((uint64_t)v54, type metadata accessor for PreparedSparkline);
LABEL_21:
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      goto LABEL_24;
    }
    v77 = *(_QWORD *)v55;
    v78 = *(_QWORD *)v54;
    *(_QWORD *)v54 = *(_QWORD *)v55;
    swift_bridgeObjectRetain(v77);
    v79 = swift_bridgeObjectRelease(v78);
    v80 = v56[5];
    v81 = &v54[v80];
    v82 = &v55[v80];
    ((void (*)(char *, char *, uint64_t, __n128))v131)(&v54[v80], &v55[v80], v26, v79);
    sub_100022800(0);
    v131(&v81[*(int *)(v83 + 36)], &v82[*(int *)(v83 + 36)], v26);
    v84 = v56[6];
    v85 = &v54[v84];
    v86 = &v55[v84];
    v87 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 24))(v85, v86, v87);
    v88 = v56[7];
    v89 = &v54[v88];
    v90 = &v55[v88];
    *(_QWORD *)v89 = *(_QWORD *)v90;
    *((_QWORD *)v89 + 1) = *((_QWORD *)v90 + 1);
    v91 = v56[8];
    v92 = &v54[v91];
    v93 = &v55[v91];
    v94 = v93[8];
    *(_QWORD *)v92 = *(_QWORD *)v93;
    v92[8] = v94;
    v54[v56[9]] = v55[v56[9]];
  }
LABEL_24:
  v95 = v52[10];
  v96 = *(_QWORD *)&v30[v95];
  v97 = *(_QWORD *)&v29[v95];
  *(_QWORD *)&v29[v95] = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  v98 = v52[11];
  v99 = &v29[v98];
  v100 = &v30[v98];
  sub_100042D9C(0);
  v102 = v101;
  v103 = *(_QWORD *)(v101 - 8);
  v104 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v103 + 48);
  LODWORD(v97) = v104(v99, 1, v101);
  v105 = v104(v100, 1, v102);
  if ((_DWORD)v97)
  {
    v106 = v137;
    if (!v105)
    {
      (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v99, v100, v102);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v99, 0, 1, v102);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  v106 = v137;
  if (v105)
  {
    (*(void (**)(char *, uint64_t))(v103 + 8))(v99, v102);
LABEL_29:
    sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v103 + 24))(v99, v100, v102);
LABEL_30:
  v108 = v52[12];
  v109 = &v29[v108];
  v110 = &v30[v108];
  v111 = type metadata accessor for URL(0);
  v112 = *(_QWORD *)(v111 - 8);
  v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
  v114 = v113(v109, 1, v111);
  v115 = v113(v110, 1, v111);
  if (v114)
  {
    if (!v115)
    {
      (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v109, v110, v111);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v115)
  {
    (*(void (**)(char *, uint64_t))(v112 + 8))(v109, v111);
LABEL_35:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v112 + 24))(v109, v110, v111);
LABEL_36:
  v117 = v134[6];
  v118 = &v136[v117];
  v119 = &v135[v117];
  v120 = type metadata accessor for WidgetQuote(0);
  v121 = *(_QWORD *)(v120 - 8);
  v122 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v121 + 48);
  v123 = v122(v118, 1, v120);
  v124 = v122(v119, 1, v120);
  if (!v123)
  {
    if (!v124)
    {
      (*(void (**)(char *, char *, uint64_t))(v121 + 24))(v118, v119, v120);
      goto LABEL_42;
    }
    (*(void (**)(char *, uint64_t))(v121 + 8))(v118, v120);
    goto LABEL_41;
  }
  if (v124)
  {
LABEL_41:
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v118, v119, v120);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
LABEL_42:
  v126 = v134[7];
  v127 = &v136[v126];
  v128 = &v135[v126];
  v129 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 24))(v127, v128, v129);
  v136[v134[8]] = v135[v134[8]];
  v136[v134[9]] = v135[v134[9]];
  sub_1000621B0((_QWORD *)((char *)v139 + *(int *)(v106 + 28)), (_QWORD *)((char *)v138 + *(int *)(v106 + 28)));
  return v139;
}

__n128 sub_1000CDF70(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  __n128 result;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  int *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;

  sub_100038414(0);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v7, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  sub_1000461DC(0);
  v13 = v12;
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v14 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v10, v11, v14);
    swift_storeEnumTagMultiPayload(v10, v13, 1);
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v77 = a3;
  v78 = a2;
  v15 = *(int *)(a3 + 24);
  v79 = a1;
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for Date(0);
  v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
  v74(v16, v17, v18);
  v75 = (int *)type metadata accessor for DetailTimelineEntry(0);
  v76 = v16;
  v19 = v75[5];
  v20 = &v16[v19];
  v21 = &v17[v19];
  v22 = *(_OWORD *)&v17[v19 + 16];
  *(_OWORD *)v20 = *(_OWORD *)&v17[v19];
  *((_OWORD *)v20 + 1) = v22;
  v23 = *(_OWORD *)&v17[v19 + 48];
  *((_OWORD *)v20 + 2) = *(_OWORD *)&v17[v19 + 32];
  *((_OWORD *)v20 + 3) = v23;
  v24 = *(_OWORD *)&v17[v19 + 80];
  *((_OWORD *)v20 + 4) = *(_OWORD *)&v17[v19 + 64];
  *((_OWORD *)v20 + 5) = v24;
  *(_OWORD *)(v20 + 121) = *(_OWORD *)&v17[v19 + 121];
  v25 = *(_OWORD *)&v17[v19 + 112];
  *((_OWORD *)v20 + 6) = *(_OWORD *)&v17[v19 + 96];
  *((_OWORD *)v20 + 7) = v25;
  v20[137] = v17[v19 + 137];
  v26 = (int *)type metadata accessor for DetailContentViewModel(0);
  v27 = v26[9];
  v28 = &v20[v27];
  v29 = &v21[v27];
  v30 = (int *)type metadata accessor for PreparedSparkline(0);
  v31 = *((_QWORD *)v30 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v33 = v30[5];
    v73 = v17;
    v34 = &v28[v33];
    v35 = &v29[v33];
    v74(&v28[v33], &v29[v33], v18);
    sub_100022800(0);
    v74(&v34[*(int *)(v36 + 36)], &v35[*(int *)(v36 + 36)], v18);
    v37 = v30[6];
    v38 = &v28[v37];
    v39 = &v29[v37];
    v40 = type metadata accessor for TimeZone(0);
    v41 = v39;
    v17 = v73;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v41, v40);
    *(_OWORD *)&v28[v30[7]] = *(_OWORD *)&v29[v30[7]];
    v42 = v30[8];
    v43 = &v28[v42];
    v44 = &v29[v42];
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    v28[v30[9]] = v29[v30[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
  }
  *(_QWORD *)&v20[v26[10]] = *(_QWORD *)&v21[v26[10]];
  v45 = v26[11];
  v46 = &v20[v45];
  v47 = &v21[v45];
  sub_100042D9C(0);
  v49 = v48;
  v50 = *(_QWORD *)(v48 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v47, 1, v48))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v46, v47, v49);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v46, 0, 1, v49);
  }
  v52 = v26[12];
  v53 = &v20[v52];
  v54 = &v21[v52];
  v55 = type metadata accessor for URL(0);
  v56 = *(_QWORD *)(v55 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v53, v54, v55);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
  }
  v58 = v75[6];
  v59 = &v76[v58];
  v60 = &v17[v58];
  v61 = type metadata accessor for WidgetQuote(0);
  v62 = *(_QWORD *)(v61 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
  {
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v60, v61);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
  }
  v64 = v75[7];
  v65 = &v76[v64];
  v66 = v17;
  v67 = &v17[v64];
  v68 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(v65, v67, v68);
  v76[v75[8]] = v66[v75[8]];
  v76[v75[9]] = v66[v75[9]];
  v69 = *(int *)(v77 + 28);
  v70 = &v79[v69];
  v71 = &v78[v69];
  *((_QWORD *)v70 + 4) = *((_QWORD *)v71 + 4);
  result = *((__n128 *)v71 + 1);
  *(_OWORD *)v70 = *(_OWORD *)v71;
  *((__n128 *)v70 + 1) = result;
  return result;
}

char *sub_1000CE4A4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, int *);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(char *, uint64_t, uint64_t);
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(char *, uint64_t, uint64_t);
  int v89;
  int v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(char *, uint64_t, uint64_t);
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  __int128 v110;
  void (*v112)(char *, char *, uint64_t);
  int *v113;
  uint64_t v114;
  int *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;

  if (a1 != a2)
  {
    sub_10001DF70((uint64_t)a1, (uint64_t (*)(_QWORD))sub_100038414);
    sub_100038414(0);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v7, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v9 = *(int *)(a3 + 20);
    v10 = &a1[v9];
    v11 = &a2[v9];
    sub_10001DF70((uint64_t)&a1[v9], (uint64_t (*)(_QWORD))sub_1000461DC);
    sub_1000461DC(0);
    v13 = v12;
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v14 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v10, v11, v14);
      swift_storeEnumTagMultiPayload(v10, v13, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v118 = a3;
  v119 = a2;
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for Date(0);
  v114 = *(_QWORD *)(v18 - 8);
  v112 = *(void (**)(char *, char *, uint64_t))(v114 + 40);
  v112(v16, v17, v18);
  v19 = type metadata accessor for DetailTimelineEntry(0);
  v20 = *(int *)(v19 + 20);
  v117 = v16;
  v21 = &v16[v20];
  v22 = &v17[v20];
  v23 = *(_QWORD *)&v17[v20 + 8];
  v24 = *(_QWORD *)&v16[v20 + 8];
  *(_QWORD *)v21 = *(_QWORD *)&v17[v20];
  *((_QWORD *)v21 + 1) = v23;
  swift_bridgeObjectRelease(v24);
  v25 = *((_QWORD *)v22 + 3);
  v26 = *((_QWORD *)v21 + 3);
  *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
  *((_QWORD *)v21 + 3) = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *((_QWORD *)v22 + 5);
  v28 = *((_QWORD *)v21 + 5);
  *((_QWORD *)v21 + 4) = *((_QWORD *)v22 + 4);
  *((_QWORD *)v21 + 5) = v27;
  swift_bridgeObjectRelease(v28);
  v29 = v21 + 48;
  v30 = v22 + 48;
  v31 = *((_QWORD *)v21 + 9);
  v120 = a1;
  v115 = (int *)v19;
  v116 = v17;
  if (v31 == 1)
    goto LABEL_11;
  v32 = *((_QWORD *)v22 + 9);
  if (v32 == 1)
  {
    sub_10002304C((uint64_t)(v21 + 48));
LABEL_11:
    v33 = *((_OWORD *)v22 + 4);
    *v29 = *v30;
    *((_OWORD *)v21 + 4) = v33;
    goto LABEL_13;
  }
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v21[56] = v22[56];
  *((_QWORD *)v21 + 8) = *((_QWORD *)v22 + 8);
  *((_QWORD *)v21 + 9) = v32;
  swift_bridgeObjectRelease(v31);
LABEL_13:
  *((_QWORD *)v21 + 10) = *((_QWORD *)v22 + 10);
  v21[88] = v22[88];
  v34 = *((_QWORD *)v22 + 13);
  v35 = *((_QWORD *)v21 + 13);
  *((_QWORD *)v21 + 12) = *((_QWORD *)v22 + 12);
  *((_QWORD *)v21 + 13) = v34;
  swift_bridgeObjectRelease(v35);
  *((_QWORD *)v21 + 14) = *((_QWORD *)v22 + 14);
  v21[120] = v22[120];
  *((_QWORD *)v21 + 16) = *((_QWORD *)v22 + 16);
  *((_WORD *)v21 + 68) = *((_WORD *)v22 + 68);
  v36 = (int *)type metadata accessor for DetailContentViewModel(0);
  v37 = v36[9];
  v38 = &v21[v37];
  v39 = &v22[v37];
  v40 = (int *)type metadata accessor for PreparedSparkline(0);
  v41 = *((_QWORD *)v40 - 1);
  v42 = *(uint64_t (**)(char *, uint64_t, int *))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (v44)
      goto LABEL_18;
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v46 = v40[5];
    v47 = &v38[v46];
    v48 = &v39[v46];
    v113 = v36;
    v49 = *(void (**)(char *, char *, uint64_t))(v114 + 32);
    v49(&v38[v46], &v39[v46], v18);
    sub_100022800(0);
    v49(&v47[*(int *)(v50 + 36)], &v48[*(int *)(v50 + 36)], v18);
    v36 = v113;
    v51 = v40[6];
    v52 = &v38[v51];
    v53 = &v39[v51];
    v54 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
    *(_OWORD *)&v38[v40[7]] = *(_OWORD *)&v39[v40[7]];
    v55 = v40[8];
    v56 = &v38[v55];
    v57 = &v39[v55];
    *(_QWORD *)v56 = *(_QWORD *)v57;
    v56[8] = v57[8];
    v38[v40[9]] = v39[v40[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
  }
  else
  {
    if (v44)
    {
      sub_10001DF70((uint64_t)v38, type metadata accessor for PreparedSparkline);
LABEL_18:
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      goto LABEL_21;
    }
    v58 = *(_QWORD *)v38;
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v59 = swift_bridgeObjectRelease(v58);
    v60 = v40[5];
    v61 = &v38[v60];
    v62 = &v39[v60];
    ((void (*)(char *, char *, uint64_t, __n128))v112)(&v38[v60], &v39[v60], v18, v59);
    sub_100022800(0);
    v112(&v61[*(int *)(v63 + 36)], &v62[*(int *)(v63 + 36)], v18);
    v64 = v40[6];
    v65 = &v38[v64];
    v66 = &v39[v64];
    v67 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 40))(v65, v66, v67);
    *(_OWORD *)&v38[v40[7]] = *(_OWORD *)&v39[v40[7]];
    v68 = v40[8];
    v69 = &v38[v68];
    v70 = &v39[v68];
    v69[8] = v70[8];
    *(_QWORD *)v69 = *(_QWORD *)v70;
    v38[v40[9]] = v39[v40[9]];
  }
LABEL_21:
  v71 = v36[10];
  v72 = *(_QWORD *)&v21[v71];
  *(_QWORD *)&v21[v71] = *(_QWORD *)&v22[v71];
  swift_bridgeObjectRelease(v72);
  v73 = v36[11];
  v74 = &v21[v73];
  v75 = &v22[v73];
  sub_100042D9C(0);
  v77 = v76;
  v78 = *(_QWORD *)(v76 - 8);
  v79 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 48);
  v80 = v79(v74, 1, v76);
  v81 = v79(v75, 1, v77);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v74, v75, v77);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v74, 0, 1, v77);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v78 + 8))(v74, v77);
LABEL_26:
    sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(char *, char *, uint64_t))(v78 + 40))(v74, v75, v77);
LABEL_27:
  v83 = v36[12];
  v84 = &v21[v83];
  v85 = &v22[v83];
  v86 = type metadata accessor for URL(0);
  v87 = *(_QWORD *)(v86 - 8);
  v88 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v87 + 48);
  v89 = v88(v84, 1, v86);
  v90 = v88(v85, 1, v86);
  if (v89)
  {
    v92 = v117;
    v91 = v118;
    if (!v90)
    {
      (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v84, v85, v86);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  v92 = v117;
  v91 = v118;
  if (v90)
  {
    (*(void (**)(char *, uint64_t))(v87 + 8))(v84, v86);
LABEL_32:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(char *, char *, uint64_t))(v87 + 40))(v84, v85, v86);
LABEL_33:
  v94 = v115[6];
  v95 = &v92[v94];
  v96 = &v116[v94];
  v97 = type metadata accessor for WidgetQuote(0);
  v98 = *(_QWORD *)(v97 - 8);
  v99 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v98 + 48);
  v100 = v99(v95, 1, v97);
  v101 = v99(v96, 1, v97);
  if (!v100)
  {
    if (!v101)
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 40))(v95, v96, v97);
      goto LABEL_39;
    }
    (*(void (**)(char *, uint64_t))(v98 + 8))(v95, v97);
    goto LABEL_38;
  }
  if (v101)
  {
LABEL_38:
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_39;
  }
  (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v95, v96, v97);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
LABEL_39:
  v103 = v115[7];
  v104 = &v92[v103];
  v105 = &v116[v103];
  v106 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 40))(v104, v105, v106);
  v92[v115[8]] = v116[v115[8]];
  v92[v115[9]] = v116[v115[9]];
  v107 = *(int *)(v91 + 28);
  v108 = &v120[v107];
  v109 = &v119[v107];
  sub_100007164(&v120[v107]);
  v110 = *((_OWORD *)v109 + 1);
  *(_OWORD *)v108 = *(_OWORD *)v109;
  *((_OWORD *)v108 + 1) = v110;
  *((_QWORD *)v108 + 4) = *((_QWORD *)v109 + 4);
  return v120;
}

uint64_t sub_1000CEC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CEC84);
}

uint64_t sub_1000CEC84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  sub_10000EDE8(0, &qword_100115A80, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for DetailTimelineEntry(0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[7] + 24);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t sub_1000CED84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CED90);
}

uint64_t sub_1000CED90(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  sub_10000EDE8(0, &qword_100115A80, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for DetailTimelineEntry(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[6];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[7] + 24) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for DetailComplicationContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100118708;
  if (!qword_100118708)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DetailComplicationContentView);
  return result;
}

void sub_1000CEEC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_100038414(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000461DC(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for DetailTimelineEntry(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = "(";
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_1000CEF70(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000EA560, 1);
}

uint64_t sub_1000CEF80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  char v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v56;
  uint64_t KeyPath;
  unint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 v71;
  __int128 v72;
  char v73;
  __int128 v74;
  __int128 v75;
  char v76;

  sub_1000D2F88(0, &qword_100116E70, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v68 = v4;
  __chkstk_darwin(v4);
  v70 = (_OWORD *)((char *)&v64 - v5);
  sub_1000D3E70(0, &qword_100116E78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v65 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v64 - v7;
  sub_1000D3010(0);
  v69 = v9;
  __chkstk_darwin(v9);
  v67 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D3024(0);
  v12 = v11;
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for Image.Scale(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D3F58(0, (unint64_t *)&qword_100112D20, (uint64_t (*)(uint64_t))sub_1000D3024, (uint64_t)&type metadata for Image, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v20 = v19;
  __chkstk_darwin(v19);
  v22 = (uint64_t *)((char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v23);
  v66 = (uint64_t)&v64 - v24;
  v25 = a1 + *(int *)(type metadata accessor for DetailComplicationContentView(0) + 24);
  v26 = type metadata accessor for DetailTimelineEntry(0);
  v28 = *(unsigned __int8 *)(v25 + *(int *)(v26 + 20) + 137);
  if (v28 == 2)
  {
    if (*(_BYTE *)(v25 + *(int *)(v26 + 32)) == 1)
    {
      v29 = static Font.caption.getter();
      static Font.Weight.medium.getter(v29);
      v30 = Font.weight(_:)(v29);
      swift_release(v29);
      v31 = Text.font(_:)(v30, 11565, 0xE200000000000000, 0, _swiftEmptyArrayStorage);
      v33 = v32;
      v35 = v34;
      v37 = v36;
      swift_release(v30);
      *(_QWORD *)&v71 = v31;
      *((_QWORD *)&v71 + 1) = v33;
      *(_QWORD *)&v72 = v35 & 1;
      *((_QWORD *)&v72 + 1) = v37;
      v73 = 0;
    }
    else
    {
      v71 = 0u;
      v72 = 0u;
      v73 = 1;
    }
    _ConditionalContent<>.init(storage:)(&v71, &type metadata for Text, &type metadata for EmptyView, &protocol witness table for Text, &protocol witness table for EmptyView);
    v48 = v75;
    v49 = v76;
    v50 = v70;
    *v70 = v74;
    v50[1] = v48;
    *((_BYTE *)v50 + 32) = v49;
    swift_storeEnumTagMultiPayload(v50, v68, 1);
    sub_10002F488(0, (unint64_t *)&qword_100116DE8, (uint64_t)&type metadata for Text, (uint64_t)&type metadata for EmptyView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v52 = v51;
    v53 = sub_1000A3524();
    v54 = sub_1000A365C();
    return _ConditionalContent<>.init(storage:)(v50, v69, v52, v53, v54);
  }
  else
  {
    v64 = a2;
    if ((v28 & 1) != 0)
    {
      v56 = Image.init(systemName:)(0xD000000000000017, 0x80000001000E5490, v27);
      (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for Image.Scale.small(_:), v15);
      KeyPath = swift_getKeyPath(&unk_1000E4A48);
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))((char *)v14 + *(int *)(v12 + 28), v18, v15);
      *v14 = KeyPath;
      sub_10001DE2C((uint64_t)v14, (uint64_t)v22 + *(int *)(v20 + 36), (uint64_t (*)(_QWORD))sub_1000D3024);
      *v22 = v56;
      swift_retain(v56);
      sub_10001DF70((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1000D3024);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      swift_release(v56);
      v40 = v66;
      sub_1000D3EF4((uint64_t)v22, v66);
      sub_1000D3DB4(v40, (uint64_t)v8, (uint64_t)&qword_100112D20, (uint64_t)sub_1000D3024, (uint64_t)&type metadata for Image, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, void *))sub_1000D3F58);
      swift_storeEnumTagMultiPayload(v8, v65, 1);
      v58 = sub_1000A3594();
      v42 = (uint64_t)v67;
      _ConditionalContent<>.init(storage:)(v8, v20, v20, v58, v58);
      v59 = v70;
      sub_10001DE2C(v42, (uint64_t)v70, (uint64_t (*)(_QWORD))sub_1000D3010);
      swift_storeEnumTagMultiPayload(v59, v68, 0);
      sub_10002F488(0, (unint64_t *)&qword_100116DE8, (uint64_t)&type metadata for Text, (uint64_t)&type metadata for EmptyView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
      v61 = v60;
      v62 = sub_1000A3524();
      v63 = sub_1000A365C();
      _ConditionalContent<>.init(storage:)(v59, v69, v61, v62, v63);
    }
    else
    {
      v38 = Image.init(systemName:)(0xD000000000000015, 0x80000001000E54B0, v27);
      (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for Image.Scale.small(_:), v15);
      v39 = swift_getKeyPath(&unk_1000E4A48);
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))((char *)v14 + *(int *)(v12 + 28), v18, v15);
      *v14 = v39;
      sub_10001DE2C((uint64_t)v14, (uint64_t)v22 + *(int *)(v20 + 36), (uint64_t (*)(_QWORD))sub_1000D3024);
      *v22 = v38;
      swift_retain(v38);
      sub_10001DF70((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1000D3024);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      swift_release(v38);
      v40 = v66;
      sub_1000D3EF4((uint64_t)v22, v66);
      sub_1000D3DB4(v40, (uint64_t)v8, (uint64_t)&qword_100112D20, (uint64_t)sub_1000D3024, (uint64_t)&type metadata for Image, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, void *))sub_1000D3F58);
      swift_storeEnumTagMultiPayload(v8, v65, 0);
      v41 = sub_1000A3594();
      v42 = (uint64_t)v67;
      _ConditionalContent<>.init(storage:)(v8, v20, v20, v41, v41);
      v43 = v70;
      sub_10001DE2C(v42, (uint64_t)v70, (uint64_t (*)(_QWORD))sub_1000D3010);
      swift_storeEnumTagMultiPayload(v43, v68, 0);
      sub_10002F488(0, (unint64_t *)&qword_100116DE8, (uint64_t)&type metadata for Text, (uint64_t)&type metadata for EmptyView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
      v45 = v44;
      v46 = sub_1000A3524();
      v47 = sub_1000A365C();
      _ConditionalContent<>.init(storage:)(v43, v69, v45, v46, v47);
    }
    sub_10001DF70(v42, (uint64_t (*)(_QWORD))sub_1000D3010);
    return sub_1000D3E10(v40, (uint64_t)&qword_100112D20, (uint64_t)sub_1000D3024, (uint64_t)&type metadata for Image, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, void *))sub_1000D3F58);
  }
}

uint64_t sub_1000CF680@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = a1;
  sub_1000D31D8(0, &qword_100118748, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent.Storage);
  v59 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v50 - v3;
  sub_1000D31C4(0);
  v60 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BC34(0, &qword_100118750, (uint64_t (*)(uint64_t))sub_1000D2AFC, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v58 = v8;
  __chkstk_darwin(v8);
  v57 = (uint64_t)&v50 - v9;
  sub_1000D3258(0);
  v56 = v10;
  __chkstk_darwin(v10);
  v52 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BC34(0, &qword_100118890, (uint64_t (*)(uint64_t))sub_1000D3738, (uint64_t (*)(uint64_t))sub_1000D31C4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v13 = v12;
  __chkstk_darwin(v12);
  v15 = (char *)&v50 - v14;
  sub_10002BC34(0, &qword_100118908, (uint64_t (*)(uint64_t))sub_1000D375C, (uint64_t (*)(uint64_t))sub_1000D3258, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v54 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v50 - v17;
  sub_1000D3738(0);
  v20 = v19;
  __chkstk_darwin(v19);
  v55 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D375C(0);
  v53 = v22;
  __chkstk_darwin(v22);
  v51 = (uint64_t)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for WidgetFamily(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (uint64_t *)((char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100045E2C(v27);
  v28 = (*(uint64_t (**)(_QWORD *, uint64_t))(v25 + 88))(v27, v24);
  if (v28 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    v29 = type metadata accessor for DetailComplicationContentView(0);
    v30 = v57;
    sub_1000D06EC(v1 + *(int *)(v29 + 24), v57);
    sub_1000D3DB4(v30, (uint64_t)v4, (uint64_t)&qword_100118750, (uint64_t)sub_1000D2AFC, (uint64_t)&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, void *))sub_10002BC34);
    swift_storeEnumTagMultiPayload(v4, v59, 0);
    v31 = sub_1000D3AA4();
    _ConditionalContent<>.init(storage:)(v4, v58, &type metadata for EmptyView, v31, &protocol witness table for EmptyView);
    sub_10001DE2C((uint64_t)v7, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1000D31C4);
    swift_storeEnumTagMultiPayload(v15, v13, 1);
    v32 = sub_1000D3B88();
    v33 = sub_1000D3D4C();
    _ConditionalContent<>.init(storage:)(v15, v20, v60, v32, v33);
    sub_10001DF70((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1000D31C4);
    return sub_1000D3E10(v30, (uint64_t)&qword_100118750, (uint64_t)sub_1000D2AFC, (uint64_t)&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, void *))sub_10002BC34);
  }
  v57 = v20;
  if (v28 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    v35 = type metadata accessor for DetailComplicationContentView(0);
    v36 = v52;
    sub_1000D022C(v1 + *(int *)(v35 + 24), v52);
    v37 = sub_1000D3258;
    sub_10001DE2C(v36, (uint64_t)v18, (uint64_t (*)(_QWORD))sub_1000D3258);
    swift_storeEnumTagMultiPayload(v18, v54, 1);
    v38 = sub_1000D3BAC();
    v39 = sub_1000D3C7C();
    v40 = (uint64_t)v55;
    _ConditionalContent<>.init(storage:)(v18, v53, v56, v38, v39);
    v41 = v15;
    sub_10001DE2C(v40, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1000D3738);
    swift_storeEnumTagMultiPayload(v15, v13, 0);
    v42 = sub_1000D3B88();
    v43 = sub_1000D3D4C();
LABEL_7:
    _ConditionalContent<>.init(storage:)(v41, v57, v60, v42, v43);
    sub_10001DF70(v40, (uint64_t (*)(_QWORD))sub_1000D3738);
    return sub_10001DF70(v36, (uint64_t (*)(_QWORD))v37);
  }
  if (v28 == enum case for WidgetFamily.accessoryInline(_:))
  {
    v44 = type metadata accessor for DetailComplicationContentView(0);
    v36 = v51;
    sub_1000CFCC8(v1 + *(int *)(v44 + 24), v51);
    v37 = sub_1000D375C;
    sub_10001DE2C(v36, (uint64_t)v18, (uint64_t (*)(_QWORD))sub_1000D375C);
    swift_storeEnumTagMultiPayload(v18, v54, 0);
    v45 = sub_1000D3BAC();
    v46 = sub_1000D3C7C();
    v40 = (uint64_t)v55;
    _ConditionalContent<>.init(storage:)(v18, v53, v56, v45, v46);
    v41 = v15;
    sub_10001DE2C(v40, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1000D3738);
    swift_storeEnumTagMultiPayload(v15, v13, 0);
    v42 = sub_1000D3B88();
    v43 = sub_1000D3D4C();
    goto LABEL_7;
  }
  swift_storeEnumTagMultiPayload(v4, v59, 1);
  v47 = sub_1000D3AA4();
  _ConditionalContent<>.init(storage:)(v4, v58, &type metadata for EmptyView, v47, &protocol witness table for EmptyView);
  sub_10001DE2C((uint64_t)v7, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1000D31C4);
  swift_storeEnumTagMultiPayload(v15, v13, 1);
  v48 = sub_1000D3B88();
  v49 = sub_1000D3D4C();
  _ConditionalContent<>.init(storage:)(v15, v57, v60, v48, v49);
  sub_10001DF70((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1000D31C4);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v25 + 8))(v27, v24);
}

uint64_t sub_1000CFCC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t OpaqueTypeConformance2;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  _QWORD v77[2];
  _QWORD *v78;
  unint64_t v79;

  v73 = a2;
  v3 = type metadata accessor for PriceChangeDisplay(0);
  v71 = *(_QWORD *)(v3 - 8);
  v72 = v3;
  __chkstk_darwin(v3);
  v61 = (uint64_t *)((char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = _s11FormatStyleVMa_0(0);
  __chkstk_darwin(v69);
  v70 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessibilityChildBehavior(0);
  v66 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  __chkstk_darwin(v6);
  v65 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RedactionReasons(0);
  v60 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D3870(0);
  v59 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D384C(0);
  v15 = v14;
  v62 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D3780(0);
  v63 = *(_QWORD *)(v18 - 8);
  v64 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D375C(0);
  v68 = v21;
  __chkstk_darwin(v21);
  v76 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DetailContentViewModel(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DetailTimelineEntry(0);
  sub_10001DE2C(a1 + *(int *)(v26 + 20), (uint64_t)v25, type metadata accessor for DetailContentViewModel);
  v74 = v25;
  v27 = sub_1000D0FFC(a1, v75, (uint64_t)v25);
  if (*(_BYTE *)(a1 + *(int *)(v26 + 32)) == 1)
  {
    static RedactionReasons.placeholder.getter(v27);
  }
  else
  {
    v78 = _swiftEmptyArrayStorage;
    v28 = sub_100003D3C(&qword_100113080, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
    sub_100045E5C(0);
    v30 = v29;
    v31 = sub_100003D3C((unint64_t *)&qword_100113090, (uint64_t (*)(uint64_t))sub_100045E5C, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v30, v31, v8, v28);
  }
  v32 = sub_1000D39A4();
  v33 = v59;
  View.redacted(reason:)(v10, v59, v32);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v10, v8);
  v34 = sub_10001DF70((uint64_t)v13, (uint64_t (*)(_QWORD))sub_1000D3870);
  v35 = v65;
  static AccessibilityChildBehavior.ignore.getter(v34);
  v78 = v33;
  v79 = v32;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v78, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
  View.accessibilityElement(children:)(v35, v15, OpaqueTypeConformance2);
  (*(void (**)(char *, unint64_t))(v66 + 8))(v35, v67);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v17, v15);
  v37 = *((_QWORD *)v74 + 3);
  v78 = (_QWORD *)*((_QWORD *)v74 + 2);
  v79 = v37;
  v77[0] = v15;
  v77[1] = OpaqueTypeConformance2;
  v38 = swift_getOpaqueTypeConformance2(v77, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v67 = sub_1000144A0();
  v39 = v64;
  View.accessibilityLabel<A>(_:)(&v78, v64, &type metadata for String, v38);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v20, v39);
  v40 = v75 + *(int *)(type metadata accessor for DetailComplicationContentView(0) + 24) + *(int *)(v26 + 20);
  v41 = *(_QWORD *)(v40 + 80);
  v42 = *(unsigned __int8 *)(v40 + 88);
  v43 = *(_QWORD *)(v40 + 112);
  v44 = *(_BYTE *)(v40 + 120);
  v45 = *(_QWORD *)(v40 + 128);
  LODWORD(v35) = *(unsigned __int8 *)(v40 + 136);
  v46 = v61;
  sub_100046458(v61);
  v47 = (uint64_t)v70;
  v48 = v71;
  v49 = v72;
  (*(void (**)(char *, _QWORD *, uint64_t))(v71 + 16))(v70, v46, v72);
  v50 = (int *)v69;
  *(_BYTE *)(v47 + *(int *)(v69 + 20)) = 0;
  *(_BYTE *)(v47 + v50[6]) = 0;
  *(_BYTE *)(v47 + v50[7]) = 1;
  v51 = (_QWORD *)(v47 + v50[8]);
  *v51 = 0;
  v51[1] = 0xE000000000000000;
  (*(void (**)(_QWORD *, uint64_t))(v48 + 8))(v46, v49);
  v52 = sub_100081FC0(v41, v42, v43, v44, v45, (int)v35);
  v54 = v53;
  sub_10001DF70(v47, _s11FormatStyleVMa_0);
  v78 = (_QWORD *)v52;
  v79 = v54;
  v55 = (uint64_t)v76;
  ModifiedContent<>.accessibilityValue<A>(_:)(&v78, v68, &type metadata for String, v67, v56);
  swift_bridgeObjectRelease(v54);
  sub_10001DF70(v55, (uint64_t (*)(_QWORD))sub_1000D375C);
  return sub_10001DF70((uint64_t)v74, type metadata accessor for DetailContentViewModel);
}

uint64_t sub_1000D022C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t OpaqueTypeConformance2;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  __n128 v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD *v64;
  unint64_t v65;

  v61 = a2;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v59 = *(_QWORD *)(v3 - 8);
  v60 = v3;
  __chkstk_darwin(v3);
  v58 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for RedactionReasons(0);
  v53 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D32D8(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D32C4(0);
  v11 = v10;
  __chkstk_darwin(v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D32A0(0);
  v50 = v14;
  v52 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D327C(0);
  v57 = v17;
  v54 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D3258(0);
  v55 = v20;
  __chkstk_darwin(v20);
  v56 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DetailContentViewModel(0);
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = type metadata accessor for DetailTimelineEntry(0);
  v26 = sub_10001DE2C(a1 + *(int *)(v25 + 20), (uint64_t)v24, type metadata accessor for DetailContentViewModel);
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v26);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  sub_1000663A4(0, &qword_100118948, (uint64_t (*)(uint64_t))sub_1000D3350, (uint64_t)&type metadata for _VStackLayout, (uint64_t)&protocol witness table for _VStackLayout);
  sub_1000D1650(a1, v62, v24, (uint64_t)&v9[*(int *)(v27 + 44)]);
  sub_10001DE2C((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1000D32D8);
  *(_OWORD *)&v13[*(int *)(v11 + 36)] = xmmword_1000E4910;
  v28 = sub_10001DF70((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1000D32D8);
  if (*(_BYTE *)(a1 + *(int *)(v25 + 32)) == 1)
  {
    static RedactionReasons.placeholder.getter(v28);
    v29 = v51;
  }
  else
  {
    v64 = _swiftEmptyArrayStorage;
    v30 = sub_100003D3C(&qword_100113080, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
    sub_100045E5C(0);
    v32 = v31;
    v33 = sub_100003D3C((unint64_t *)&qword_100113090, (uint64_t (*)(uint64_t))sub_100045E5C, (uint64_t)&protocol conformance descriptor for [A]);
    v29 = v51;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v32, v33, v51, v30);
  }
  v34 = sub_1000D36B8();
  View.redacted(reason:)(v6, v11, v34);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v6, v29);
  v35 = sub_10001DF70((uint64_t)v13, (uint64_t (*)(_QWORD))sub_1000D32C4);
  v36 = v58;
  static AccessibilityChildBehavior.ignore.getter(v35);
  v64 = (_QWORD *)v11;
  v65 = v34;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v64, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
  v38 = v50;
  View.accessibilityElement(children:)(v36, v50, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v36, v60);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v38);
  v39 = v24[3];
  v64 = (_QWORD *)v24[2];
  v65 = v39;
  v63[0] = v38;
  v63[1] = OpaqueTypeConformance2;
  v40 = swift_getOpaqueTypeConformance2(v63, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v41 = sub_1000144A0();
  v43 = (uint64_t)v56;
  v42 = v57;
  View.accessibilityLabel<A>(_:)(&v64, v57, &type metadata for String, v40);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v19, v42);
  v44 = sub_1000D0B50();
  v46 = v45;
  v64 = v44;
  v65 = v45;
  ModifiedContent<>.accessibilityValue<A>(_:)(&v64, v55, &type metadata for String, v41, v47);
  swift_bridgeObjectRelease(v46);
  sub_10001DF70(v43, (uint64_t (*)(_QWORD))sub_1000D3258);
  return sub_10001DF70((uint64_t)v24, type metadata accessor for DetailContentViewModel);
}

uint64_t sub_1000D06EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;

  v3 = v2;
  v58 = a2;
  v5 = type metadata accessor for PriceChangeDisplay(0);
  v56 = *(_QWORD *)(v5 - 8);
  v57 = v5;
  __chkstk_darwin(v5);
  v55 = (uint64_t *)((char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v54 = _s11FormatStyleVMa_0(0);
  __chkstk_darwin(v54);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessibilityChildBehavior(0);
  v50 = *(_QWORD *)(v9 - 8);
  v51 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D2B88(0);
  v13 = v12;
  __chkstk_darwin(v12);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D2AFC(0);
  v17 = v16;
  v52 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BC34(0, &qword_100118750, v20, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v53 = v21;
  __chkstk_darwin(v21);
  v59 = (char *)&v48 - v22;
  v23 = type metadata accessor for DetailContentViewModel(0);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v48 = type metadata accessor for DetailTimelineEntry(0);
  v26 = sub_10001DE2C(a1 + *(int *)(v48 + 20), (uint64_t)v25, type metadata accessor for DetailContentViewModel);
  *(_QWORD *)v15 = static Alignment.center.getter(v26);
  *((_QWORD *)v15 + 1) = v27;
  sub_1000663A4(0, &qword_100118968, (uint64_t (*)(uint64_t))sub_1000D2C00, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
  v29 = sub_1000D2028(v3, a1, v25, &v15[*(int *)(v28 + 44)]);
  static AccessibilityChildBehavior.ignore.getter(v29);
  v30 = sub_100003D3C(&qword_1001187E8, (uint64_t (*)(uint64_t))sub_1000D2B88, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.accessibilityElement(children:)(v11, v13, v30);
  (*(void (**)(char *, unint64_t))(v50 + 8))(v11, v51);
  sub_10001DF70((uint64_t)v15, (uint64_t (*)(_QWORD))sub_1000D2B88);
  v49 = v25;
  v31 = v25[3];
  v61 = v25[2];
  v62 = v31;
  v60[0] = v13;
  v60[1] = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v60, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v51 = sub_1000144A0();
  View.accessibilityLabel<A>(_:)(&v61, v17, &type metadata for String, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v19, v17);
  v33 = v3 + *(int *)(type metadata accessor for DetailComplicationContentView(0) + 24) + *(int *)(v48 + 20);
  v34 = *(_QWORD *)(v33 + 80);
  LODWORD(v30) = *(unsigned __int8 *)(v33 + 88);
  v35 = *(_QWORD *)(v33 + 112);
  LOBYTE(v13) = *(_BYTE *)(v33 + 120);
  v36 = *(_QWORD *)(v33 + 128);
  LODWORD(a1) = *(unsigned __int8 *)(v33 + 136);
  v37 = v55;
  sub_100046458(v55);
  v39 = v56;
  v38 = v57;
  (*(void (**)(char *, _QWORD *, uint64_t))(v56 + 16))(v8, v37, v57);
  v40 = (int *)v54;
  v8[*(int *)(v54 + 20)] = 0;
  v8[v40[6]] = 0;
  v8[v40[7]] = 1;
  v41 = &v8[v40[8]];
  *(_QWORD *)v41 = 0;
  *((_QWORD *)v41 + 1) = 0xE000000000000000;
  (*(void (**)(_QWORD *, uint64_t))(v39 + 8))(v37, v38);
  v42 = sub_100081FC0(v34, v30, v35, v13, v36, a1);
  v44 = v43;
  sub_10001DF70((uint64_t)v8, _s11FormatStyleVMa_0);
  v61 = v42;
  v62 = v44;
  v45 = (uint64_t)v59;
  ModifiedContent<>.accessibilityValue<A>(_:)(&v61, v53, &type metadata for String, v51, v46);
  swift_bridgeObjectRelease(v44);
  sub_1000D3E10(v45, (uint64_t)&qword_100118750, (uint64_t)sub_1000D2AFC, (uint64_t)&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, void *))sub_10002BC34);
  return sub_10001DF70((uint64_t)v49, type metadata accessor for DetailContentViewModel);
}

id sub_1000D0B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t inited;
  id result;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  id v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  char v51[24];
  uint64_t v52;

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v45 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v44 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PriceChangeDisplay(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char **)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (int *)_s11FormatStyleVMa_0(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000143C4(0, (unint64_t *)&qword_1001127A0, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v13 = swift_allocObject(v12, 64, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1000DD060;
  v14 = v0 + *(int *)(type metadata accessor for DetailComplicationContentView(0) + 24);
  v15 = v14 + *(int *)(type metadata accessor for DetailTimelineEntry(0) + 20);
  v16 = *(_QWORD *)(v15 + 80);
  v50 = *(unsigned __int8 *)(v15 + 88);
  v49 = *(_QWORD *)(v15 + 112);
  v48 = *(unsigned __int8 *)(v15 + 120);
  v47 = *(_QWORD *)(v15 + 128);
  v46 = *(unsigned __int8 *)(v15 + 136);
  sub_100046458(v8);
  (*(void (**)(char *, _QWORD *, uint64_t))(v6 + 16))(v11, v8, v5);
  v11[v9[5]] = 0;
  v11[v9[6]] = 0;
  v11[v9[7]] = 1;
  v17 = &v11[v9[8]];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0xE000000000000000;
  v18 = v8;
  v19 = v13;
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v18, v5);
  v20 = sub_100081FC0(v16, v50, v49, v48, v47, v46);
  v22 = v21;
  sub_10001DF70((uint64_t)v11, _s11FormatStyleVMa_0);
  *(_QWORD *)(v13 + 32) = v20;
  *(_QWORD *)(v13 + 40) = v22;
  if (*(_QWORD *)(v15 + 72) == 1)
  {
    v23 = v44;
    v24 = String.LocalizationValue.init(stringLiteral:)(0x616C696176616E75, 0xEB00000000656C62);
    v25 = v45;
    static Locale.current.getter(v24);
    v26 = String.init(localized:table:bundle:locale:comment:)(v23, 0, 0, 0, v25, "Accessibility string for when information is unavailable (spoken instead of em-dash)", 84, 2);
    v28 = v27;
LABEL_16:
    *(_QWORD *)(v19 + 48) = v26;
    *(_QWORD *)(v19 + 56) = v28;
    v52 = v19;
    sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
    v41 = v40;
    v42 = sub_100075848();
    v43 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v41, v42);
    swift_bridgeObjectRelease(v19);
    return (id)v43;
  }
  v26 = 9666786;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0)
  {
LABEL_15:
    v28 = 0xA300000000000000;
    goto LABEL_16;
  }
  v29 = *(double *)(v15 + 48);
  if (v29 <= 1000000.0)
  {
LABEL_10:
    if (qword_1001114C0 != -1)
      swift_once(&qword_1001114C0, sub_1000570EC);
    v36 = (id)sub_1000221F8(0, 3, 1, v29);
    objc_msgSend(v36, "setNumberStyle:", 1);
    v37 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v29);
    v38 = objc_msgSend(v36, "stringFromNumber:", v37);

    if (v38)
    {
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v28 = v39;

      goto LABEL_16;
    }

    goto LABEL_15;
  }
  v30 = type metadata accessor for UnitNumberFormatter();
  inited = swift_initStackObject(v30, v51);
  result = objc_msgSend(objc_allocWithZone((Class)SCICUNumberFormatter), "init");
  *(_QWORD *)(inited + 16) = result;
  if ((~*(_QWORD *)&v29 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v29 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v29 < 9.22337204e18)
  {
    v33 = result;
    v34 = sub_10003D8F4((uint64_t)v29, 0, 0);
    v28 = v35;

    if (v28)
    {
      v26 = v34;
      goto LABEL_16;
    }
    goto LABEL_10;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1000D0FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];

  sub_1000D388C(0);
  v7 = v6;
  __chkstk_darwin(v6);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000D3F58(0, &qword_100118938, v10, (uint64_t)&type metadata for Text, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v12 = v11;
  __chkstk_darwin(v11);
  v14 = &v24[-v13];
  v15 = type metadata accessor for DetailTimelineEntry(0);
  if (*(_BYTE *)(a1 + *(int *)(v15 + 32)) == 1)
  {
    v16 = LocalizedStringKey.init(stringLiteral:)(0x2E2E2E2E2E2E2E2ELL, 0xE800000000000000);
    *(_QWORD *)v14 = Text.init(_:tableName:bundle:comment:)(v16);
    *((_QWORD *)v14 + 1) = v17;
    v14[16] = v18 & 1;
    *((_QWORD *)v14 + 3) = v19;
    swift_storeEnumTagMultiPayload(v14, v12, 0);
    v20 = sub_100003D3C(&qword_100118900, (uint64_t (*)(uint64_t))sub_1000D388C, (uint64_t)&protocol conformance descriptor for HStack<A>);
    return _ConditionalContent<>.init(storage:)(v14, &type metadata for Text, v7, &protocol witness table for Text, v20);
  }
  else
  {
    *(_QWORD *)v9 = static VerticalAlignment.center.getter(v15);
    *((_QWORD *)v9 + 1) = 0;
    v9[16] = 1;
    sub_1000663A4(0, &qword_100118940, (uint64_t (*)(uint64_t))sub_1000D3904, (uint64_t)&type metadata for _HStackLayout, (uint64_t)&protocol witness table for _HStackLayout);
    sub_1000D124C(a2, a3, (uint64_t)&v9[*(int *)(v22 + 44)]);
    sub_10001DE2C((uint64_t)v9, (uint64_t)v14, (uint64_t (*)(_QWORD))sub_1000D388C);
    swift_storeEnumTagMultiPayload(v14, v12, 1);
    v23 = sub_100003D3C(&qword_100118900, (uint64_t (*)(uint64_t))sub_1000D388C, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v14, &type metadata for Text, v7, &protocol witness table for Text, v23);
    return sub_10001DF70((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1000D388C);
  }
}

uint64_t sub_1000D124C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v51[12];
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;

  v58 = a3;
  v5 = (int *)_s11FormatStyleVMa_0(0);
  __chkstk_darwin(v5);
  v7 = &v51[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for PriceChangeDisplay(0);
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = &v51[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for LocalizedStringKey.StringInterpolation(0, v9);
  __chkstk_darwin(v12);
  v14 = &v51[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000D2F24(0);
  __chkstk_darwin(v15);
  v59 = &v51[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v57 = &v51[-v18];
  sub_1000CEF80(a1, (uint64_t)&v51[-v18]);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 2);
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v19);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)a2);
  v20._countAndFlagsBits = 32;
  v20._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v20);
  v21 = *(_QWORD *)(a2 + 80);
  v54 = *(unsigned __int8 *)(a2 + 88);
  v22 = *(_QWORD *)(a2 + 112);
  v23 = *(_BYTE *)(a2 + 120);
  v53 = *(_QWORD *)(a2 + 128);
  v52 = *(unsigned __int8 *)(a2 + 136);
  type metadata accessor for DetailComplicationContentView(0);
  v24 = v11;
  sub_100046458(v11);
  v26 = v55;
  v25 = v56;
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v55 + 16))(v7, v24, v56);
  v7[v5[5]] = 0;
  v7[v5[6]] = 0;
  v7[v5[7]] = 0;
  v27 = &v7[v5[8]];
  *v27 = 9666786;
  v27[1] = 0xA300000000000000;
  v28 = sub_100081FC0(v21, v54, v22, v23, v53, v52);
  v30 = v29;
  sub_10001DF70((uint64_t)v7, _s11FormatStyleVMa_0);
  (*(void (**)(_QWORD *, uint64_t))(v26 + 8))(v24, v25);
  v31._countAndFlagsBits = v28;
  v31._object = v30;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v31);
  swift_bridgeObjectRelease(v30);
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v32);
  v33 = LocalizedStringKey.init(stringInterpolation:)(v14);
  v34 = Text.init(_:tableName:bundle:comment:)(v33);
  v36 = v35;
  v56 = v37;
  LOBYTE(v7) = v38 & 1;
  KeyPath = swift_getKeyPath(&unk_1000E49B8);
  v40 = swift_getKeyPath(&unk_1000E49E8);
  v41 = static Font.body.getter(v40);
  v42 = swift_getKeyPath(&unk_1000E4A18);
  v43 = v57;
  v44 = v59;
  sub_10001DE2C((uint64_t)v57, (uint64_t)v59, (uint64_t (*)(_QWORD))sub_1000D2F24);
  v45 = (uint64_t)v44;
  v46 = v58;
  sub_10001DE2C(v45, v58, (uint64_t (*)(_QWORD))sub_1000D2F24);
  sub_1000A9CE8(0, &qword_1001188D8, (uint64_t (*)(uint64_t))sub_1000D2F24, (uint64_t (*)(uint64_t))sub_1000D3928);
  v48 = v46 + *(int *)(v47 + 48);
  *(_QWORD *)v48 = v34;
  *(_QWORD *)(v48 + 8) = v36;
  *(_BYTE *)(v48 + 16) = (_BYTE)v7;
  v49 = v56;
  *(_QWORD *)(v48 + 24) = v56;
  *(_QWORD *)(v48 + 32) = KeyPath;
  *(_QWORD *)(v48 + 40) = 1;
  *(_BYTE *)(v48 + 48) = 0;
  *(_QWORD *)(v48 + 56) = v40;
  *(_QWORD *)(v48 + 64) = 0x3FE6000000000000;
  *(_QWORD *)(v48 + 72) = v42;
  *(_QWORD *)(v48 + 80) = v41;
  sub_1000144EC(v34, v36, (char)v7);
  swift_bridgeObjectRetain(v49);
  swift_retain(KeyPath);
  swift_retain(v40);
  swift_retain(v42);
  swift_retain(v41);
  sub_10001DF70((uint64_t)v43, (uint64_t (*)(_QWORD))sub_1000D2F24);
  sub_100014490(v34, v36, (char)v7);
  swift_release(v41);
  swift_release(v42);
  swift_release(v40);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v49);
  return sub_10001DF70((uint64_t)v59, (uint64_t (*)(_QWORD))sub_1000D2F24);
}

uint64_t sub_1000D1650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t KeyPath;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72[5];

  v61 = a4;
  sub_1000D34F0(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D3474(0);
  v11 = v10;
  __chkstk_darwin(v10);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D33F8(0);
  v15 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v60 - v19;
  v60 = (uint64_t)&v60 - v19;
  sub_1000D1A04(a1, a2, (uint64_t)a3);
  KeyPath = swift_getKeyPath(&unk_1000E49B8);
  sub_10001DE2C((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1000D34F0);
  v22 = &v13[*(int *)(v11 + 36)];
  *(_QWORD *)v22 = KeyPath;
  *((_QWORD *)v22 + 1) = 1;
  v22[16] = 0;
  v23 = sub_10001DF70((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1000D34F0);
  v24 = static Font.headline.getter(v23);
  v25 = swift_getKeyPath(&unk_1000E4A18);
  sub_10001DE2C((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_1000D3474);
  v26 = (uint64_t *)&v17[*(int *)(v15 + 36)];
  *v26 = v25;
  v26[1] = v24;
  sub_10001DF70((uint64_t)v13, (uint64_t (*)(_QWORD))sub_1000D3474);
  sub_10000ED3C((uint64_t)v17, (uint64_t)v20, (uint64_t (*)(_QWORD))sub_1000D33F8);
  v27 = a3[7];
  v28 = a3[8];
  v29 = a3[9];
  v72[0] = a3[6];
  v72[1] = v27;
  v72[2] = v28;
  v72[3] = v29;
  LOBYTE(v62) = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66 = xmmword_1000DCF00;
  v67 = 0xA300000000000000;
  v68 = 9666786;
  v69 = 0xA300000000000000;
  v70 = 9666786;
  v71 = 0xA300000000000000;
  sub_100024540(v72[0], v27, v28, v29);
  sub_10002F864(0);
  v31 = v30;
  v32 = sub_100003D3C((unint64_t *)&qword_100113408, (uint64_t (*)(uint64_t))sub_10002F864, (uint64_t)&unk_1000DEF58);
  v33 = sub_10002F974();
  v34 = Text.init<A>(_:format:)(v72, &v62, v31, v32, v33);
  v36 = v35;
  v38 = v37;
  v40 = v39 & 1;
  v41 = static Font.title.getter();
  v42 = Text.font(_:)(v41, v34, v36, v40, v38);
  v44 = v43;
  LOBYTE(v15) = v45;
  v47 = v46;
  swift_release(v41);
  sub_100014490(v34, v36, v40);
  v48 = swift_bridgeObjectRelease(v38);
  v62 = static HierarchicalShapeStyle.primary.getter(v48);
  v49 = Text.foregroundStyle<A>(_:)(&v62, v42, v44, v15 & 1, v47, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v51 = v50;
  v53 = v52;
  LOBYTE(v40) = v54 & 1;
  sub_100014490(v42, v44, v15 & 1);
  swift_bridgeObjectRelease(v47);
  v55 = v60;
  sub_10001DE2C(v60, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_1000D33F8);
  v56 = v61;
  sub_10001DE2C((uint64_t)v17, v61, (uint64_t (*)(_QWORD))sub_1000D33F8);
  sub_1000D336C(0);
  v58 = v56 + *(int *)(v57 + 48);
  *(_QWORD *)v58 = v49;
  *(_QWORD *)(v58 + 8) = v51;
  *(_BYTE *)(v58 + 16) = v40;
  *(_QWORD *)(v58 + 24) = v53;
  *(_OWORD *)(v58 + 32) = xmmword_1000E4920;
  sub_1000144EC(v49, v51, v40);
  swift_bridgeObjectRetain(v53);
  sub_10001DF70(v55, (uint64_t (*)(_QWORD))sub_1000D33F8);
  sub_100014490(v49, v51, v40);
  swift_bridgeObjectRelease(v53);
  return sub_10001DF70((uint64_t)v17, (uint64_t (*)(_QWORD))sub_1000D33F8);
}

uint64_t sub_1000D1A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];

  sub_1000D3574(0);
  v7 = v6;
  __chkstk_darwin(v6);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000D3F58(0, &qword_100118950, v10, (uint64_t)&type metadata for Text, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v12 = v11;
  __chkstk_darwin(v11);
  v14 = &v24[-v13];
  v15 = type metadata accessor for DetailTimelineEntry(0);
  if (*(_BYTE *)(a1 + *(int *)(v15 + 32)) == 1)
  {
    v16 = LocalizedStringKey.init(stringLiteral:)(0x2E2E2E2E2E2E2E2ELL, 0xEB000000002E2E2ELL);
    *(_QWORD *)v14 = Text.init(_:tableName:bundle:comment:)(v16);
    *((_QWORD *)v14 + 1) = v17;
    v14[16] = v18 & 1;
    *((_QWORD *)v14 + 3) = v19;
    swift_storeEnumTagMultiPayload(v14, v12, 0);
    v20 = sub_100003D3C(&qword_100118960, (uint64_t (*)(uint64_t))sub_1000D3574, (uint64_t)&protocol conformance descriptor for HStack<A>);
    return _ConditionalContent<>.init(storage:)(v14, &type metadata for Text, v7, &protocol witness table for Text, v20);
  }
  else
  {
    *(_QWORD *)v9 = static VerticalAlignment.center.getter(v15);
    *((_QWORD *)v9 + 1) = 0x4000000000000000;
    v9[16] = 0;
    sub_1000663A4(0, &qword_100118958, (uint64_t (*)(uint64_t))sub_1000D35EC, (uint64_t)&type metadata for _HStackLayout, (uint64_t)&protocol witness table for _HStackLayout);
    sub_1000D1C5C(a2, a3, (uint64_t)&v9[*(int *)(v22 + 44)]);
    sub_10001DE2C((uint64_t)v9, (uint64_t)v14, (uint64_t (*)(_QWORD))sub_1000D3574);
    swift_storeEnumTagMultiPayload(v14, v12, 1);
    v23 = sub_100003D3C(&qword_100118960, (uint64_t (*)(uint64_t))sub_1000D3574, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v14, &type metadata for Text, v7, &protocol witness table for Text, v23);
    return sub_10001DF70((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1000D3574);
  }
}

uint64_t sub_1000D1C5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;

  v6 = type metadata accessor for PriceChangeDisplay(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (int *)_s11FormatStyleVMa_0(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D2F24(0);
  __chkstk_darwin(v13);
  v52 = (uint64_t)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v45 - v16;
  sub_1000CEF80(a1, (uint64_t)&v45 - v16);
  v18 = *(_QWORD *)(a2 + 8);
  v53 = *(_QWORD *)a2;
  swift_bridgeObjectRetain(v18);
  v20 = static Alignment.center.getter(v19);
  _FrameLayout.init(width:height:alignment:)(&v61, 0x4000000000000000, 0, 0, 1, v20, v21);
  v51 = v61;
  v50 = v62;
  v49 = v63;
  v48 = v64;
  v47 = v65;
  v46 = v66;
  v22 = *(_BYTE *)(a2 + 88);
  v23 = *(_QWORD *)(a2 + 96);
  v24 = *(_BYTE *)(a2 + 120);
  v25 = *(_QWORD *)(a2 + 128);
  v26 = *(_BYTE *)(a2 + 136);
  v54 = *(_QWORD *)(a2 + 80);
  v55 = v22;
  v56 = v23;
  v45 = *(_OWORD *)(a2 + 104);
  v57 = v45;
  v58 = v24;
  v59 = v25;
  v60 = v26;
  type metadata accessor for DetailComplicationContentView(0);
  swift_bridgeObjectRetain(v45);
  sub_100046458(v9);
  (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 16))(v12, v9, v6);
  v12[v10[5]] = 0;
  v12[v10[6]] = 0;
  v12[v10[7]] = 0;
  v27 = &v12[v10[8]];
  *(_QWORD *)v27 = 9666786;
  *((_QWORD *)v27 + 1) = 0xA300000000000000;
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  v28 = sub_100003D3C(&qword_100116C48, _s11FormatStyleVMa_0, (uint64_t)&unk_1000E08D0);
  v29 = sub_10009D44C();
  v30 = Text.init<A>(_:format:)(&v54, v12, v10, v28, v29);
  v32 = v31;
  v34 = v33;
  LOBYTE(v10) = v35 & 1;
  v36 = v52;
  sub_10001DE2C((uint64_t)v17, v52, (uint64_t (*)(_QWORD))sub_1000D2F24);
  LOBYTE(v54) = 0;
  sub_10001DE2C(v36, a3, (uint64_t (*)(_QWORD))sub_1000D2F24);
  sub_1000D3608(0);
  v38 = a3 + v37[12];
  v39 = v53;
  *(_QWORD *)v38 = v53;
  *(_QWORD *)(v38 + 8) = v18;
  *(_BYTE *)(v38 + 16) = 0;
  *(_QWORD *)(v38 + 24) = _swiftEmptyArrayStorage;
  v40 = a3 + v37[16];
  *(_QWORD *)v40 = 0;
  *(_BYTE *)(v40 + 8) = 1;
  *(_QWORD *)(v40 + 16) = v51;
  *(_BYTE *)(v40 + 24) = v50;
  *(_QWORD *)(v40 + 32) = v49;
  *(_BYTE *)(v40 + 40) = v48;
  *(_QWORD *)(v40 + 48) = v47;
  *(_QWORD *)(v40 + 56) = v46;
  v41 = a3 + v37[20];
  *(_QWORD *)v41 = v30;
  *(_QWORD *)(v41 + 8) = v32;
  *(_BYTE *)(v41 + 16) = (_BYTE)v10;
  *(_QWORD *)(v41 + 24) = v34;
  v42 = a3 + v37[24];
  *(_QWORD *)v42 = 0;
  *(_BYTE *)(v42 + 8) = 1;
  v43 = v39;
  sub_1000144EC(v39, v18, 0);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  sub_1000144EC(v30, v32, (char)v10);
  swift_bridgeObjectRetain(v34);
  sub_10001DF70((uint64_t)v17, (uint64_t (*)(_QWORD))sub_1000D2F24);
  sub_100014490(v30, v32, (char)v10);
  swift_bridgeObjectRelease(v34);
  sub_100014490(v43, v18, v54);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  return sub_10001DF70(v36, (uint64_t (*)(_QWORD))sub_1000D2F24);
}

uint64_t sub_1000D2028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;

  v41 = a2;
  v42 = a3;
  v40 = a1;
  v44 = a4;
  sub_1000D2D84(0);
  v43 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D2CF8(0);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D2C7C(0);
  v39 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v37 - v17;
  v19 = type metadata accessor for AccessoryWidgetBackground(0, v16);
  v38 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v37 - v24;
  v26 = AccessoryWidgetBackground.init()(v23);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v26);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  sub_1000663A4(0, &qword_100118970, (uint64_t (*)(uint64_t))sub_1000D2DFC, (uint64_t)&type metadata for _VStackLayout, (uint64_t)&protocol witness table for _VStackLayout);
  sub_1000D2320(v40, v41, v42, (uint64_t)&v6[*(int *)(v27 + 44)]);
  v28 = sub_100003D3C(&qword_1001187D8, (uint64_t (*)(uint64_t))sub_1000D2D84, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.unredacted()(v43, v28);
  sub_10001DF70((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1000D2D84);
  KeyPath = swift_getKeyPath(&unk_1000E49B8);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v14, v11, v8);
  v30 = &v14[*(int *)(v39 + 36)];
  *(_QWORD *)v30 = KeyPath;
  *((_QWORD *)v30 + 1) = 1;
  v30[16] = 0;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_10000ED3C((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(_QWORD))sub_1000D2C7C);
  v31 = v38;
  v32 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  v32(v21, v25, v19);
  sub_10001DE2C((uint64_t)v18, (uint64_t)v14, (uint64_t (*)(_QWORD))sub_1000D2C7C);
  v33 = v44;
  v32(v44, v21, v19);
  sub_1000A9CE8(0, &qword_100118770, (uint64_t (*)(uint64_t))&type metadata accessor for AccessoryWidgetBackground, (uint64_t (*)(uint64_t))sub_1000D2C7C);
  sub_10001DE2C((uint64_t)v14, (uint64_t)&v33[*(int *)(v34 + 48)], (uint64_t (*)(_QWORD))sub_1000D2C7C);
  sub_10001DF70((uint64_t)v18, (uint64_t (*)(_QWORD))sub_1000D2C7C);
  v35 = *(void (**)(char *, uint64_t))(v31 + 8);
  v35(v25, v19);
  sub_10001DF70((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1000D2C7C);
  return ((uint64_t (*)(char *, uint64_t))v35)(v21, v19);
}

uint64_t sub_1000D2320@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  double v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t KeyPath;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  __n128 v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char v88;
  char v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  int v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t);
  __n128 v126;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;

  v134 = a4;
  v133 = type metadata accessor for PriceChangeDisplay(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (_QWORD *)((char *)&v128 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v129 = _s11FormatStyleVMa_0(0);
  __chkstk_darwin(v129);
  v9 = (char *)&v128 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000270DC(0, &qword_1001187A8, (uint64_t (*)(uint64_t))sub_1000D3040, (uint64_t (*)(void))sub_1000D30DC, (uint64_t)&opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>);
  v139 = *(_QWORD *)(v10 - 8);
  v140 = v10;
  __chkstk_darwin(v10);
  v135 = (char *)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v128 - v13;
  __chkstk_darwin(v15);
  v138 = (char *)&v128 - v16;
  sub_1000D2F24(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v128 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D2EBC(0);
  v21 = v20;
  __chkstk_darwin(v20);
  v137 = (uint64_t)&v128 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v128 - v24;
  __chkstk_darwin(v26);
  v28 = (char *)&v128 - v27;
  v130 = a1;
  sub_1000CEF80(a1, (uint64_t)v19);
  if (*(_BYTE *)(a2 + *(int *)(type metadata accessor for DetailTimelineEntry(0) + 32)))
    v29 = 0.0;
  else
    v29 = -2.0;
  sub_10001DE2C((uint64_t)v19, (uint64_t)v25, (uint64_t (*)(_QWORD))sub_1000D2F24);
  v30 = &v25[*(int *)(v21 + 36)];
  *(_QWORD *)v30 = 0;
  *((double *)v30 + 1) = v29;
  sub_10001DF70((uint64_t)v19, (uint64_t (*)(_QWORD))sub_1000D2F24);
  v136 = v28;
  sub_10000ED3C((uint64_t)v25, (uint64_t)v28, (uint64_t (*)(_QWORD))sub_1000D2EBC);
  v31 = *a3;
  v32 = a3[1];
  swift_bridgeObjectRetain(v32);
  v34 = static Font.body.getter(v33);
  v35 = Font.bold()();
  swift_release(v34);
  v36 = Text.font(_:)(v35, v31, v32, 0, _swiftEmptyArrayStorage);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  swift_bridgeObjectRelease(v32);
  v43 = swift_release(v35);
  v44 = static Edge.Set.leading.getter(v43);
  v45 = v44;
  v50 = static Edge.Set.trailing.getter(v44, v46, v47, v48, v49);
  v51 = Edge.Set.init(rawValue:)(0);
  v52 = Edge.Set.init(rawValue:)(v51);
  if (Edge.Set.init(rawValue:)(v52 & v45) != v45)
    v51 = Edge.Set.init(rawValue:)(v51 | v45);
  v53 = Edge.Set.init(rawValue:)(v51);
  if (Edge.Set.init(rawValue:)(v53 & v50) != v50)
    LOBYTE(v51) = Edge.Set.init(rawValue:)(v51 | v50);
  v54 = EdgeInsets.init(_all:)(3.0);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  KeyPath = swift_getKeyPath(&unk_1000E49E8);
  v142 = v36;
  v143 = v38;
  LOBYTE(v144) = v40 & 1;
  *(_QWORD *)&v145 = v42;
  BYTE8(v145) = v51;
  v146 = v54;
  v147 = v56;
  v148 = v58;
  v149 = v60;
  v150 = 0;
  v151 = KeyPath;
  v152 = 0x3FD999999999999ALL;
  sub_1000D3040(0);
  v63 = v62;
  v64 = sub_1000D30DC();
  View.widgetAccentable(_:)(1, v63, v64);
  sub_100014490(v36, v38, v40 & 1);
  swift_release(KeyPath);
  v65 = swift_bridgeObjectRelease(v42);
  (*(void (**)(char *, char *, uint64_t, __n128))(v139 + 32))(v138, v14, v140, v65);
  v66 = *((_BYTE *)a3 + 88);
  v67 = a3[12];
  v68 = *((_BYTE *)a3 + 120);
  v69 = a3[16];
  v70 = *((_BYTE *)a3 + 136);
  v142 = a3[10];
  LOBYTE(v143) = v66;
  v144 = v67;
  v128 = *(_OWORD *)(a3 + 13);
  v145 = v128;
  LOBYTE(v146) = v68;
  v147 = v69;
  LOBYTE(v148) = v70;
  type metadata accessor for DetailComplicationContentView(0);
  swift_bridgeObjectRetain(v128);
  v71 = v131;
  sub_100046458(v131);
  v72 = v132;
  v73 = v133;
  (*(void (**)(char *, _QWORD *, uint64_t))(v132 + 16))(v9, v71, v133);
  v74 = (int *)v129;
  v9[*(int *)(v129 + 20)] = 1;
  v9[v74[6]] = 1;
  v9[v74[7]] = 0;
  v75 = &v9[v74[8]];
  *(_QWORD *)v75 = 9666786;
  *((_QWORD *)v75 + 1) = 0xA300000000000000;
  (*(void (**)(_QWORD *, uint64_t))(v72 + 8))(v71, v73);
  v76 = sub_100003D3C(&qword_100116C48, _s11FormatStyleVMa_0, (uint64_t)&unk_1000E08D0);
  v77 = sub_10009D44C();
  v78 = Text.init<A>(_:format:)(&v142, v9, v74, v76, v77);
  v80 = v79;
  v82 = v81;
  v84 = v83 & 1;
  v85 = static Font.caption.getter();
  static Font.Weight.medium.getter(v85);
  v86 = Font.weight(_:)(v85);
  swift_release(v85);
  v132 = Text.font(_:)(v86, v78, v80, v84, v82);
  v131 = v87;
  v89 = v88;
  v133 = v90;
  swift_release(v86);
  sub_100014490(v78, v80, v84);
  v91 = swift_bridgeObjectRelease(v82);
  v92 = static Edge.Set.leading.getter(v91);
  v93 = v92;
  v98 = static Edge.Set.trailing.getter(v92, v94, v95, v96, v97);
  v99 = Edge.Set.init(rawValue:)(0);
  v100 = Edge.Set.init(rawValue:)(v99);
  if (Edge.Set.init(rawValue:)(v100 & v93) != v93)
    v99 = Edge.Set.init(rawValue:)(v99 | v93);
  v101 = Edge.Set.init(rawValue:)(v99);
  if (Edge.Set.init(rawValue:)(v101 & v98) != v98)
    LOBYTE(v99) = Edge.Set.init(rawValue:)(v99 | v98);
  v102 = EdgeInsets.init(_all:)(8.0);
  v104 = v103;
  v106 = v105;
  v108 = v107;
  v109 = swift_getKeyPath(&unk_1000E49E8);
  v110 = v137;
  sub_10001DE2C((uint64_t)v136, v137, (uint64_t (*)(_QWORD))sub_1000D2EBC);
  v111 = v139;
  v112 = v140;
  v113 = *(void (**)(char *, char *, uint64_t))(v139 + 16);
  v114 = v135;
  v115 = v138;
  v113(v135, v138, v140);
  LOBYTE(v142) = v89 & 1;
  v141 = 0;
  v116 = v134;
  sub_10001DE2C(v110, v134, (uint64_t (*)(_QWORD))sub_1000D2EBC);
  sub_1000D2E18(0);
  v118 = v117;
  v113((char *)(v116 + *(int *)(v117 + 48)), v114, v112);
  v119 = v116 + *(int *)(v118 + 64);
  v120 = v142;
  v121 = v141;
  v122 = v132;
  v123 = v131;
  *(_QWORD *)v119 = v132;
  *(_QWORD *)(v119 + 8) = v123;
  *(_BYTE *)(v119 + 16) = v120;
  v124 = v133;
  *(_QWORD *)(v119 + 24) = v133;
  *(_BYTE *)(v119 + 32) = v99;
  *(double *)(v119 + 40) = v102;
  *(_QWORD *)(v119 + 48) = v104;
  *(_QWORD *)(v119 + 56) = v106;
  *(_QWORD *)(v119 + 64) = v108;
  *(_BYTE *)(v119 + 72) = v121;
  *(_QWORD *)(v119 + 80) = v109;
  *(_QWORD *)(v119 + 88) = 0x3FD3333333333333;
  sub_1000144EC(v122, (uint64_t)v123, v120);
  v125 = *(void (**)(char *, uint64_t))(v111 + 8);
  swift_bridgeObjectRetain(v124);
  swift_retain(v109);
  v125(v115, v112);
  sub_10001DF70((uint64_t)v136, (uint64_t (*)(_QWORD))sub_1000D2EBC);
  sub_100014490(v122, (uint64_t)v123, v142);
  swift_release(v109);
  v126 = swift_bridgeObjectRelease(v124);
  ((void (*)(char *, uint64_t, __n128))v125)(v114, v112, v126);
  return sub_10001DF70(v137, (uint64_t (*)(_QWORD))sub_1000D2EBC);
}

void sub_1000D2AFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_100118758)
  {
    sub_1000D2B88(255);
    v5[0] = v2;
    v5[1] = sub_100003D3C(&qword_1001187E8, (uint64_t (*)(uint64_t))sub_1000D2B88, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100118758);
  }
}

void sub_1000D2B88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100118760)
  {
    sub_1000D2C00(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_1001187E0, (uint64_t (*)(uint64_t))sub_1000D2C00, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v5 = type metadata accessor for ZStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100118760);
  }
}

void sub_1000D2C00(uint64_t a1)
{
  sub_1000D2C24(a1, &qword_100118768, &qword_100118770, (uint64_t (*)(uint64_t))&type metadata accessor for AccessoryWidgetBackground, (uint64_t (*)(uint64_t))sub_1000D2C7C);
}

void sub_1000D2C24(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    sub_1000A9CE8(255, a3, a4, a5);
    v8 = type metadata accessor for TupleView(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_1000D2C7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100118778)
  {
    sub_1000D2CF8(255);
    v3 = v2;
    sub_100026CE0(255, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100118778);
  }
}

void sub_1000D2CF8(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_100118780)
  {
    sub_1000D2D84(255);
    v5[0] = v2;
    v5[1] = sub_100003D3C(&qword_1001187D8, (uint64_t (*)(uint64_t))sub_1000D2D84, (uint64_t)&protocol conformance descriptor for VStack<A>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100118780);
  }
}

void sub_1000D2D84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100118788)
  {
    sub_1000D2DFC(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_1001187D0, (uint64_t (*)(uint64_t))sub_1000D2DFC, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v5 = type metadata accessor for VStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100118788);
  }
}

void sub_1000D2DFC(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100118790, (uint64_t (*)(uint64_t))sub_1000D2E18, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_1000D2E18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t TupleTypeMetadata3;
  uint64_t v8;

  if (!qword_100118798)
  {
    sub_1000D2EBC(255);
    v3 = v2;
    sub_1000270DC(255, &qword_1001187A8, (uint64_t (*)(uint64_t))sub_1000D3040, (uint64_t (*)(void))sub_1000D30DC, (uint64_t)&opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>);
    v5 = v4;
    sub_1000D3040(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v3, v5, v6, 0, 0);
    if (!v8)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100118798);
  }
}

void sub_1000D2EBC(uint64_t a1)
{
  sub_1000D2ED0(a1, &qword_1001187A0, (uint64_t (*)(uint64_t))sub_1000D2F24);
}

void sub_1000D2ED0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for ModifiedContent(a1, v5, &type metadata for _OffsetEffect);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1000D2F24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100116DD0)
  {
    sub_1000D2F88(255, &qword_100116DD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v3 = type metadata accessor for Group(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100116DD0);
  }
}

void sub_1000D2F88(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_1000D3010(255);
    v7 = v6;
    sub_10002F488(255, (unint64_t *)&qword_100116DE8, (uint64_t)&type metadata for Text, (uint64_t)&type metadata for EmptyView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_1000D3010(uint64_t a1)
{
  sub_1000D3E70(a1, &qword_100116DE0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
}

void sub_1000D3024(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100112D28, (uint64_t (*)(uint64_t))&type metadata accessor for Image.Scale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
}

void sub_1000D3040(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001187B0)
  {
    sub_10002F488(255, &qword_1001187B8, (uint64_t)&type metadata for Text, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v3 = v2;
    sub_1000143C4(255, (unint64_t *)&qword_100112D70, (uint64_t)&type metadata for CGFloat, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001187B0);
  }
}

unint64_t sub_1000D30DC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001187C0;
  if (!qword_1001187C0)
  {
    sub_1000D3040(255);
    v2 = v1;
    sub_1000D3144();
    sub_1000A2E80();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001187C0);
  }
  return result;
}

unint64_t sub_1000D3144()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001187C8;
  if (!qword_1001187C8)
  {
    sub_10002F488(255, &qword_1001187B8, (uint64_t)&type metadata for Text, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001187C8);
  }
  return result;
}

void sub_1000D31C4(uint64_t a1)
{
  sub_1000D31D8(a1, &qword_1001187F0, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
}

void sub_1000D31D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_10002BC34(255, &qword_100118750, (uint64_t (*)(uint64_t))sub_1000D2AFC, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v7 = a3(a1, v6, &type metadata for EmptyView);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1000D3258(uint64_t a1)
{
  sub_10002BC34(a1, &qword_1001187F8, (uint64_t (*)(uint64_t))sub_1000D327C, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
}

void sub_1000D327C(uint64_t a1)
{
  sub_1000D37A4(a1, &qword_100118800, (uint64_t (*)(uint64_t))sub_1000D32A0, (uint64_t (*)(uint64_t))sub_1000D32C4, (uint64_t (*)(void))sub_1000D36B8);
}

void sub_1000D32A0(uint64_t a1)
{
  sub_1000270DC(a1, &qword_100118808, (uint64_t (*)(uint64_t))sub_1000D32C4, (uint64_t (*)(void))sub_1000D36B8, (uint64_t)&opaque type descriptor for <<opaque return type of View.redacted(reason:)>>);
}

void sub_1000D32C4(uint64_t a1)
{
  sub_1000D2ED0(a1, &qword_100118810, (uint64_t (*)(uint64_t))sub_1000D32D8);
}

void sub_1000D32D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100118818)
  {
    sub_1000D3350(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_100118878, (uint64_t (*)(uint64_t))sub_1000D3350, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v5 = type metadata accessor for VStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100118818);
  }
}

void sub_1000D3350(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100118820, (uint64_t (*)(uint64_t))sub_1000D336C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_1000D336C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100118828)
  {
    sub_1000D33F8(255);
    v3 = v2;
    sub_10002F488(255, &qword_100118870, (uint64_t)&type metadata for Text, (uint64_t)&type metadata for _OffsetEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100118828);
  }
}

void sub_1000D33F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100118830)
  {
    sub_1000D3474(255);
    v3 = v2;
    sub_100026CE0(255, &qword_100112D40, &qword_100112D48, (uint64_t)&type metadata for Font);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100118830);
  }
}

void sub_1000D3474(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100118838)
  {
    sub_1000D34F0(255);
    v3 = v2;
    sub_100026CE0(255, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100118838);
  }
}

void sub_1000D34F0(uint64_t a1)
{
  sub_1000D350C(a1, &qword_100118840, &qword_100118848, (uint64_t (*)(uint64_t))sub_1000D3574);
}

void sub_1000D350C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1000D3F58(255, a3, a4, (uint64_t)&type metadata for Text, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v7 = type metadata accessor for Group(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1000D3574(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100118850)
  {
    sub_1000D35EC(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_100118868, (uint64_t (*)(uint64_t))sub_1000D35EC, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100118850);
  }
}

void sub_1000D35EC(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100118858, (uint64_t (*)(uint64_t))sub_1000D3608, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_1000D3608(uint64_t a1)
{
  unint64_t TupleTypeMetadata;
  uint64_t v3;

  if (!qword_100118860)
  {
    sub_1000D2F24(255);
    sub_10002F488(255, (unint64_t *)&qword_100113A30, (uint64_t)&type metadata for Spacer, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    TupleTypeMetadata = swift_getTupleTypeMetadata(a1, 5);
    if (!v3)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_100118860);
  }
}

unint64_t sub_1000D36B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100118880;
  if (!qword_100118880)
  {
    sub_1000D32C4(255);
    v2 = v1;
    sub_100003D3C(&qword_100118888, (uint64_t (*)(uint64_t))sub_1000D32D8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100118880);
  }
  return result;
}

void sub_1000D3738(uint64_t a1)
{
  sub_10002BC34(a1, &qword_100118898, (uint64_t (*)(uint64_t))sub_1000D375C, (uint64_t (*)(uint64_t))sub_1000D3258, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
}

void sub_1000D375C(uint64_t a1)
{
  sub_10002BC34(a1, &qword_1001188A0, (uint64_t (*)(uint64_t))sub_1000D3780, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
}

void sub_1000D3780(uint64_t a1)
{
  sub_1000D37A4(a1, &qword_1001188A8, (uint64_t (*)(uint64_t))sub_1000D384C, (uint64_t (*)(uint64_t))sub_1000D3870, (uint64_t (*)(void))sub_1000D39A4);
}

void sub_1000D37A4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(void))
{
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!*a2)
  {
    v9 = a3(255);
    v13 = a4(255);
    v14 = a5();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v13 = v9;
    v14 = OpaqueTypeConformance2;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v13, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 0);
    if (!v12)
      atomic_store(OpaqueTypeMetadata2, a2);
  }
}

void sub_1000D384C(uint64_t a1)
{
  sub_1000270DC(a1, &qword_1001188B0, (uint64_t (*)(uint64_t))sub_1000D3870, (uint64_t (*)(void))sub_1000D39A4, (uint64_t)&opaque type descriptor for <<opaque return type of View.redacted(reason:)>>);
}

void sub_1000D3870(uint64_t a1)
{
  sub_1000D350C(a1, &qword_1001188B8, &qword_1001188C0, (uint64_t (*)(uint64_t))sub_1000D388C);
}

void sub_1000D388C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001188C8)
  {
    sub_1000D3904(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_1001188E8, (uint64_t (*)(uint64_t))sub_1000D3904, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001188C8);
  }
}

void sub_1000D3904(uint64_t a1)
{
  sub_1000D2C24(a1, &qword_1001188D0, &qword_1001188D8, (uint64_t (*)(uint64_t))sub_1000D2F24, (uint64_t (*)(uint64_t))sub_1000D3928);
}

void sub_1000D3928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001188E0)
  {
    sub_100026DD0(255);
    v3 = v2;
    sub_100026CE0(255, &qword_100112D40, &qword_100112D48, (uint64_t)&type metadata for Font);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001188E0);
  }
}

unint64_t sub_1000D39A4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001188F0;
  if (!qword_1001188F0)
  {
    sub_1000D3870(255);
    v2 = v1;
    sub_1000D3A04();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v2);
    atomic_store(result, (unint64_t *)&qword_1001188F0);
  }
  return result;
}

unint64_t sub_1000D3A04()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001188F8;
  if (!qword_1001188F8)
  {
    sub_1000D3F58(255, &qword_1001188C0, (uint64_t (*)(uint64_t))sub_1000D388C, (uint64_t)&type metadata for Text, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v2 = v1;
    sub_100003D3C(&qword_100118900, (uint64_t (*)(uint64_t))sub_1000D388C, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001188F8);
  }
  return result;
}

unint64_t sub_1000D3AA4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100118910;
  if (!qword_100118910)
  {
    sub_10002BC34(255, &qword_100118750, (uint64_t (*)(uint64_t))sub_1000D2AFC, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v2 = v1;
    sub_1000D2B88(255);
    v4[0] = v3;
    v4[1] = sub_100003D3C(&qword_1001187E8, (uint64_t (*)(uint64_t))sub_1000D2B88, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003D3C(&qword_100115CC8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100118910);
  }
  return result;
}

uint64_t sub_1000D3B88()
{
  return sub_10007D578(&qword_100118918, (uint64_t (*)(uint64_t))sub_1000D3738, (void (*)(void))sub_1000D3BAC, (void (*)(void))sub_1000D3C7C);
}

unint64_t sub_1000D3BAC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  unint64_t v8;

  result = qword_100118920;
  if (!qword_100118920)
  {
    sub_1000D375C(255);
    v2 = v1;
    sub_1000D384C(255);
    v4 = v3;
    sub_1000D3870(255);
    v7 = v5;
    v8 = sub_1000D39A4();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v7 = v4;
    v8 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003D3C(&qword_100115CC8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100118920);
  }
  return result;
}

unint64_t sub_1000D3C7C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  unint64_t v8;

  result = qword_100118928;
  if (!qword_100118928)
  {
    sub_1000D3258(255);
    v2 = v1;
    sub_1000D32A0(255);
    v4 = v3;
    sub_1000D32C4(255);
    v7 = v5;
    v8 = sub_1000D36B8();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v7 = v4;
    v8 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003D3C(&qword_100115CC8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100118928);
  }
  return result;
}

unint64_t sub_1000D3D4C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100118930;
  if (!qword_100118930)
  {
    sub_1000D31C4(255);
    v2 = v1;
    sub_1000D3AA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100118930);
  }
  return result;
}

uint64_t sub_1000D3DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t, void *))
{
  uint64_t v8;

  v8 = a6(0, a3, a4, a5, &type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_1000D3E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, uint64_t, void *))
{
  uint64_t v6;

  v6 = a5(0, a2, a3, a4, &type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void sub_1000D3E70(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1000D3F58(255, (unint64_t *)&qword_100112D20, (uint64_t (*)(uint64_t))sub_1000D3024, (uint64_t)&type metadata for Image, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v7 = a3(a1, v6, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1000D3EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000D3F58(0, (unint64_t *)&qword_100112D20, (uint64_t (*)(uint64_t))sub_1000D3024, (uint64_t)&type metadata for Image, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000D3F58(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t sub_1000D3FB8()
{
  return sub_10007D578(&qword_100118978, (uint64_t (*)(uint64_t))sub_1000D3FEC, (void (*)(void))sub_1000D3B88, (void (*)(void))sub_1000D3D4C);
}

void sub_1000D3FEC(uint64_t a1)
{
  sub_10002BC34(a1, &qword_100118980, (uint64_t (*)(uint64_t))sub_1000D3738, (uint64_t (*)(uint64_t))sub_1000D31C4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
}

id sub_1000D4010()
{
  id result;

  result = sub_1000D4088();
  qword_100126A90 = (uint64_t)result;
  return result;
}

id sub_1000D4038()
{
  id result;

  result = sub_1000D4088();
  qword_100126A98 = (uint64_t)result;
  return result;
}

id sub_1000D4060()
{
  id result;

  result = sub_1000D4088();
  qword_100126AA0 = (uint64_t)result;
  return result;
}

id sub_1000D4088()
{
  id v0;
  Class isa;
  NSString v2;
  NSString v3;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v0, "setNumberStyle:", 3);
  sub_1000D4598();
  isa = NSNumber.init(floatLiteral:)(100.0).super.super.isa;
  objc_msgSend(v0, "setMultiplier:", isa);

  objc_msgSend(v0, "setMinimumFractionDigits:", 2);
  objc_msgSend(v0, "setMaximumFractionDigits:", 2);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setPositivePrefix:", v2);

  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setNegativePrefix:", v3);

  return v0;
}

uint64_t type metadata accessor for PercentChangeFormatter()
{
  return objc_opt_self(_TtC12StocksWidget22PercentChangeFormatter);
}

uint64_t sub_1000D41B8(char a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;

  v3 = a2 - a3;
  v4 = a3 / v3;
  if (v3 <= 0.0)
    v5 = 0.0;
  else
    v5 = v4;
  if ((a1 & 1) != 0)
  {
    if (qword_1001115D0 != -1)
      swift_once(&qword_1001115D0, sub_1000D4038);
    v6 = (void *)qword_100126A98;
    v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v5);
    v8 = objc_msgSend(v6, "stringFromNumber:", v7);
  }
  else
  {
    if (qword_1001115C8 != -1)
      swift_once(&qword_1001115C8, sub_1000D4010);
    v9 = (void *)qword_100126A90;
    v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v5);
    v8 = objc_msgSend(v9, "stringFromNumber:", v7);
  }
  v10 = v8;

  if (!v10)
    return 0;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

  return v11;
}

uint64_t sub_1000D4304(double a1, double a2)
{
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t ObjCClassFromMetadata;
  id v8;
  uint64_t v9;
  unint64_t v10;
  Swift::String v11;
  unint64_t v12;
  Swift::String v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v29;
  Swift::String v30;

  v3 = a1 - a2;
  v4 = a2 / v3;
  if (v3 <= 0.0)
    v5 = 0.0;
  else
    v5 = v4;
  v6 = type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v6);
  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  if (a2 >= 0.0)
  {
    v29 = 0x80000001000E6630;
    v9 = 28789;
    v10 = 0xE200000000000000;
  }
  else
  {
    v29 = 0x80000001000E65F0;
    v9 = 1853321060;
    v10 = 0xE400000000000000;
  }
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v12 = 0xD000000000000030;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v9, (Swift::String_optional)0, (NSBundle)v8, v11, *(Swift::String *)(&v29 - 1));

  if (qword_1001115D8 != -1)
    swift_once(&qword_1001115D8, sub_1000D4060);
  v14 = (void *)qword_100126AA0;
  v15 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v5);
  v16 = objc_msgSend(v14, "stringFromNumber:", v15);

  if (v16)
  {
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v20 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v30._countAndFlagsBits = 0xD000000000000024;
    v30._object = (void *)0x80000001000E7930;
    v21._countAndFlagsBits = 0x4025204025;
    v21._object = (void *)0xE500000000000000;
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v30);

    sub_100003A7C(0);
    v25 = swift_allocObject(v24, 112, 7);
    *(_OWORD *)(v25 + 16) = xmmword_1000DD060;
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    v26 = sub_100003B2C();
    *(Swift::String *)(v25 + 32) = v13;
    *(_QWORD *)(v25 + 96) = &type metadata for String;
    *(_QWORD *)(v25 + 104) = v26;
    *(_QWORD *)(v25 + 64) = v26;
    *(_QWORD *)(v25 + 72) = v17;
    *(_QWORD *)(v25 + 80) = v19;
    v27 = static String.localizedStringWithFormat(_:_:)(v23._countAndFlagsBits, v23._object, v25);
    swift_bridgeObjectRelease(v23._object);
    swift_bridgeObjectRelease(v25);
  }
  else
  {
    swift_bridgeObjectRelease(v13._object);
    return 0;
  }
  return v27;
}

unint64_t sub_1000D4598()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118A20;
  if (!qword_100118A20)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_100118A20);
  }
  return result;
}

uint64_t sub_1000D45D4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000D45EC, 0, 0);
}

uint64_t sub_1000D45EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[2];
  v2 = swift_task_alloc(32);
  v0[3] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[4] = v3;
  *v3 = v0;
  v3[1] = sub_1000D4684;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_1000D4684()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000D46E0, 0, 0);
}

uint64_t sub_1000D46E0()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;

  v1 = objc_msgSend(*(id *)(v0 + 16), "filePath");
  v2 = v1;
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v4 = v3;

    v5 = objc_allocWithZone((Class)UIImage);
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
    v2 = objc_msgSend(v5, "initWithContentsOfFile:", v6);

  }
  return (*(uint64_t (**)(id))(v0 + 8))(v2);
}

uint64_t sub_1000D478C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  _QWORD aBlock[5];
  uint64_t v15;

  sub_1000D48D4();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10010A6B8, v9 + v7, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  aBlock[4] = sub_1000D499C;
  v15 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000D49D8;
  aBlock[3] = &unk_10010A6D0;
  v11 = _Block_copy(aBlock);
  swift_release(v15);
  v12 = objc_msgSend(a2, "downloadIfNeededWithCompletion:", v11);
  _Block_release(v11);
  return swift_unknownObjectRelease(v12);
}

uint64_t sub_1000D48CC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000D478C(a1, *(void **)(v1 + 16));
}

void sub_1000D48D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100118A30)
  {
    v0 = type metadata accessor for CheckedContinuation(0, (char *)&type metadata for () + 8, &type metadata for Never, &protocol witness table for Never);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100118A30);
  }
}

uint64_t sub_1000D493C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000D48D4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000D499C()
{
  uint64_t v0;

  sub_1000D48D4();
  return CheckedContinuation.resume(returning:)(v0, v0);
}

uint64_t sub_1000D49D8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000D4A04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D4A14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

ValueMetadata *type metadata accessor for DetailChartWidget()
{
  return &type metadata for DetailChartWidget;
}

uint64_t sub_1000D4A2C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000EA610, 1);
}

_QWORD *sub_1000D4A3C@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_1000910AC();
  return EnvironmentValues.subscript.getter(a1, &type metadata for PriceChangeDisplayKey, &type metadata for PriceChangeDisplayKey, v2);
}

uint64_t sub_1000D4A78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t, __n128);
  unint64_t v11;
  uint64_t v13;

  v2 = type metadata accessor for PriceChangeDisplay(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v13 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16);
  v10((char *)&v13 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  v11 = sub_1000910AC();
  EnvironmentValues.subscript.setter(v5, &type metadata for PriceChangeDisplayKey, &type metadata for PriceChangeDisplayKey, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t sub_1000D4B58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t OpaqueTypeConformance2;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v58 = a1;
  v1 = type metadata accessor for DetailTimelineProvider(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D4FE8(0);
  v5 = v4;
  v53 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D50EC(0);
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D5178(0);
  v56 = *(_QWORD *)(v11 - 8);
  v57 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SymbolWidgetConfigurationIntent(0);
  if (qword_100111458 != -1)
    swift_once(&qword_100111458, sub_10002DE80);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100012524(v15, (uint64_t)qword_100126830);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v3, v16, v15);
  v17 = type metadata accessor for DetailChartWidgetView(0);
  v18 = sub_100003D3C(&qword_100118A40, type metadata accessor for DetailChartWidgetView, (uint64_t)&unk_1000E4B18);
  v19 = sub_100003D3C(&qword_100114038, type metadata accessor for DetailTimelineProvider, (uint64_t)&unk_1000DC5F8);
  AppIntentConfiguration.init<A>(kind:intent:provider:content:)(0x68436C6961746564, 0xEB00000000747261, v14, v3, sub_1000D5230, 0, v14, v17, v1, v18, v19);
  v20 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x80000001000E7980);
  v21 = Text.init(_:tableName:bundle:comment:)(v20);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  v28 = sub_100003D3C(&qword_100118A50, (uint64_t (*)(uint64_t))sub_1000D4FE8, (uint64_t)&protocol conformance descriptor for AppIntentConfiguration<A, B>);
  WidgetConfiguration.configurationDisplayName(_:)(v21, v23, v27, v25, v5, v28);
  sub_100014490(v21, v23, v27);
  v29 = swift_bridgeObjectRelease(v25);
  (*(void (**)(char *, uint64_t, __n128))(v53 + 8))(v7, v5, v29);
  v30 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000047, 0x80000001000E79F0);
  v31 = Text.init(_:tableName:bundle:comment:)(v30);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v59 = v5;
  v60 = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v39 = v55;
  WidgetConfiguration.description(_:)(v31, v33, v37, v35, v55, OpaqueTypeConformance2);
  sub_100014490(v31, v33, v37);
  v40 = swift_bridgeObjectRelease(v35);
  (*(void (**)(char *, uint64_t, __n128))(v54 + 8))(v10, v39, v40);
  sub_10000EDE8(0, &qword_100112ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v42 = v41;
  v43 = type metadata accessor for WidgetFamily(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(unsigned __int8 *)(v44 + 80);
  v46 = (v45 + 32) & ~v45;
  v47 = swift_allocObject(v42, v46 + *(_QWORD *)(v44 + 72), v45 | 7);
  *(_OWORD *)(v47 + 16) = xmmword_1000DB170;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v44 + 104))(v47 + v46, enum case for WidgetFamily.accessoryRectangular(_:), v43);
  v59 = v39;
  v60 = OpaqueTypeConformance2;
  v48 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v49 = v57;
  WidgetConfiguration.supportedFamilies(_:)(v47, v57, v48);
  v50 = swift_bridgeObjectRelease(v47);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v56 + 8))(v13, v49, v50);
}

void sub_1000D4FE8(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_100118A38)
  {
    v4[0] = type metadata accessor for SymbolWidgetConfigurationIntent(255);
    v4[1] = type metadata accessor for DetailChartWidgetView(255);
    v4[2] = sub_100003D3C(qword_100112630, (uint64_t (*)(uint64_t))&type metadata accessor for SymbolWidgetConfigurationIntent, (uint64_t)&protocol conformance descriptor for SymbolWidgetConfigurationIntent);
    v4[3] = sub_100003D3C(&qword_100118A40, type metadata accessor for DetailChartWidgetView, (uint64_t)&unk_1000E4B18);
    v2 = type metadata accessor for AppIntentConfiguration(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_100118A38);
  }
}

uint64_t type metadata accessor for DetailChartWidgetView(uint64_t a1)
{
  uint64_t result;

  result = qword_100118AB8;
  if (!qword_100118AB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DetailChartWidgetView);
  return result;
}

void sub_1000D50EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_100118A48)
  {
    sub_1000D4FE8(255);
    v5[0] = v2;
    v5[1] = sub_100003D3C(&qword_100118A50, (uint64_t (*)(uint64_t))sub_1000D4FE8, (uint64_t)&protocol conformance descriptor for AppIntentConfiguration<A, B>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100118A48);
  }
}

void sub_1000D5178(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!qword_100118A58)
  {
    sub_1000D50EC(255);
    v3 = v2;
    sub_1000D4FE8(255);
    v8 = v4;
    v9 = sub_100003D3C(&qword_100118A50, (uint64_t (*)(uint64_t))sub_1000D4FE8, (uint64_t)&protocol conformance descriptor for AppIntentConfiguration<A, B>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
    v8 = v3;
    v9 = OpaqueTypeConformance2;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 0);
    if (!v7)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100118A58);
  }
}

uint64_t sub_1000D5230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100035448(a1, a2);
}

_QWORD *sub_1000D5238(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  unsigned int (*v25)(char *, uint64_t, int *, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t, __n128);
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t, __n128);
  int *v71;
  _QWORD *v72;

  v4 = type metadata accessor for DetailTimelineEntry(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for Date(0);
    v70 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v7 - 8) + 16);
    ((void (*)(_QWORD *, _QWORD *, uint64_t))v70)(a1, a2, v7);
    v71 = v6;
    v8 = v6[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)((char *)a2 + v8 + 8);
    *(_QWORD *)v9 = *(_QWORD *)((char *)a2 + v8);
    *((_QWORD *)v9 + 1) = v11;
    v12 = *(_QWORD *)((char *)a2 + v8 + 24);
    *((_QWORD *)v9 + 2) = *(_QWORD *)((char *)a2 + v8 + 16);
    *((_QWORD *)v9 + 3) = v12;
    v13 = *(_QWORD *)((char *)a2 + v8 + 40);
    *((_QWORD *)v9 + 4) = *(_QWORD *)((char *)a2 + v8 + 32);
    *((_QWORD *)v9 + 5) = v13;
    v14 = (_OWORD *)((char *)a1 + v8 + 48);
    v15 = (_OWORD *)((char *)a2 + v8 + 48);
    v16 = *(_QWORD *)((char *)a2 + v8 + 72);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v72 = a2;
    if (v16 == 1)
    {
      v17 = *((_OWORD *)v10 + 4);
      *v14 = *v15;
      *((_OWORD *)v9 + 4) = v17;
    }
    else
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      v9[56] = v10[56];
      *((_QWORD *)v9 + 8) = *((_QWORD *)v10 + 8);
      *((_QWORD *)v9 + 9) = v16;
      swift_bridgeObjectRetain(v16);
    }
    *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
    v9[88] = v10[88];
    v19 = *((_QWORD *)v10 + 13);
    *((_QWORD *)v9 + 12) = *((_QWORD *)v10 + 12);
    *((_QWORD *)v9 + 13) = v19;
    *((_QWORD *)v9 + 14) = *((_QWORD *)v10 + 14);
    v9[120] = v10[120];
    *((_QWORD *)v9 + 16) = *((_QWORD *)v10 + 16);
    v9[136] = v10[136];
    v9[137] = v10[137];
    v20 = (int *)type metadata accessor for DetailContentViewModel(0);
    v21 = v20[9];
    v22 = &v9[v21];
    v23 = &v10[v21];
    v24 = (int *)type metadata accessor for PreparedSparkline(0);
    v69 = *((_QWORD *)v24 - 1);
    v25 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v69 + 48);
    v26 = swift_bridgeObjectRetain(v19);
    if (v25(v23, 1, v24, v26))
    {
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v28 = *(_QWORD *)v23;
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v29 = v24[5];
      v30 = &v22[v29];
      v31 = &v23[v29];
      v32 = swift_bridgeObjectRetain(v28);
      v70(v30, v31, v7, v32);
      sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
      ((void (*)(char *, char *, uint64_t))v70)(&v30[*(int *)(v33 + 36)], &v31[*(int *)(v33 + 36)], v7);
      v34 = v24[6];
      v35 = &v22[v34];
      v36 = &v23[v34];
      v37 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
      *(_OWORD *)&v22[v24[7]] = *(_OWORD *)&v23[v24[7]];
      v38 = v24[8];
      v39 = &v22[v38];
      v40 = &v23[v38];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v40[8];
      v22[v24[9]] = v23[v24[9]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v69 + 56))(v22, 0, 1, v24);
    }
    v41 = v20[10];
    v42 = *(_QWORD *)&v10[v41];
    *(_QWORD *)&v9[v41] = v42;
    v43 = v20[11];
    v44 = &v9[v43];
    v45 = &v10[v43];
    sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v47 = v46;
    v48 = *(_QWORD *)(v46 - 8);
    v49 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v48 + 48);
    v50 = swift_bridgeObjectRetain(v42);
    if (v49(v45, 1, v47, v50))
    {
      sub_10001D6B0(0);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v44, v45, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v44, 0, 1, v47);
    }
    v52 = v20[12];
    v53 = &v9[v52];
    v54 = &v10[v52];
    v55 = type metadata accessor for URL(0);
    v56 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
    {
      sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v53, v54, v55);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
    }
    v58 = v71[6];
    v59 = (char *)a1 + v58;
    v60 = (char *)v72 + v58;
    v61 = type metadata accessor for WidgetQuote(0);
    v62 = *(_QWORD *)(v61 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
    {
      sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v59, v60, v61);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
    }
    v64 = v71[7];
    v65 = (char *)a1 + v64;
    v66 = (char *)v72 + v64;
    v67 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
    *((_BYTE *)a1 + v71[8]) = *((_BYTE *)v72 + v71[8]);
    *((_BYTE *)a1 + v71[9]) = *((_BYTE *)v72 + v71[9]);
  }
  return a1;
}

uint64_t sub_1000D5740(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  int *v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = type metadata accessor for Date(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(a1, v2);
  v4 = (int *)type metadata accessor for DetailTimelineEntry(0);
  v5 = (_QWORD *)(a1 + v4[5]);
  swift_bridgeObjectRelease(v5[1]);
  swift_bridgeObjectRelease(v5[3]);
  swift_bridgeObjectRelease(v5[5]);
  v6 = v5[9];
  if (v6 != 1)
    swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5[13]);
  v7 = (int *)type metadata accessor for DetailContentViewModel(0);
  v8 = (_QWORD *)((char *)v5 + v7[9]);
  v9 = type metadata accessor for PreparedSparkline(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = swift_bridgeObjectRelease(*v8);
    v11 = (char *)v8 + *(int *)(v9 + 20);
    ((void (*)(char *, uint64_t, __n128))v3)(v11, v2, v10);
    sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v3((uint64_t)&v11[*(int *)(v12 + 36)], v2);
    v13 = (char *)v8 + *(int *)(v9 + 24);
    v14 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v5 + v7[10]));
  v15 = (char *)v5 + v7[11];
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v16))
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
  v19 = (char *)v5 + v7[12];
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
  v22 = a1 + v4[6];
  v23 = type metadata accessor for WidgetQuote(0);
  v24 = *(_QWORD *)(v23 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
  v25 = a1 + v4[7];
  v26 = type metadata accessor for PriceChangeDisplay(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
}

uint64_t sub_1000D59A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  int *v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t *, uint64_t, int *, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(const void *, uint64_t, uint64_t, __n128);
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  int *v67;
  uint64_t v68;
  uint64_t v69;

  v4 = type metadata accessor for Date(0);
  v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16);
  v66(a1, a2, v4);
  v67 = (int *)type metadata accessor for DetailTimelineEntry(0);
  v5 = v67[5];
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = *(_QWORD *)(a2 + v5 + 8);
  *(_QWORD *)v6 = *(_QWORD *)(a2 + v5);
  *(_QWORD *)(v6 + 8) = v8;
  v9 = *(_QWORD *)(a2 + v5 + 24);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + v5 + 16);
  *(_QWORD *)(v6 + 24) = v9;
  v10 = *(_QWORD *)(a2 + v5 + 40);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a2 + v5 + 32);
  *(_QWORD *)(v6 + 40) = v10;
  v11 = (_OWORD *)(a1 + v5 + 48);
  v12 = (_OWORD *)(a2 + v5 + 48);
  v13 = *(_QWORD *)(a2 + v5 + 72);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  v68 = a2;
  v69 = a1;
  if (v13 == 1)
  {
    v14 = *(_OWORD *)(v7 + 64);
    *v11 = *v12;
    *(_OWORD *)(v6 + 64) = v14;
  }
  else
  {
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *(_BYTE *)(v6 + 56) = *(_BYTE *)(v7 + 56);
    *(_QWORD *)(v6 + 64) = *(_QWORD *)(v7 + 64);
    *(_QWORD *)(v6 + 72) = v13;
    swift_bridgeObjectRetain(v13);
  }
  *(_QWORD *)(v6 + 80) = *(_QWORD *)(v7 + 80);
  *(_BYTE *)(v6 + 88) = *(_BYTE *)(v7 + 88);
  v15 = *(_QWORD *)(v7 + 104);
  *(_QWORD *)(v6 + 96) = *(_QWORD *)(v7 + 96);
  *(_QWORD *)(v6 + 104) = v15;
  *(_QWORD *)(v6 + 112) = *(_QWORD *)(v7 + 112);
  *(_BYTE *)(v6 + 120) = *(_BYTE *)(v7 + 120);
  *(_QWORD *)(v6 + 128) = *(_QWORD *)(v7 + 128);
  *(_BYTE *)(v6 + 136) = *(_BYTE *)(v7 + 136);
  *(_BYTE *)(v6 + 137) = *(_BYTE *)(v7 + 137);
  v16 = (int *)type metadata accessor for DetailContentViewModel(0);
  v17 = v16[9];
  v18 = (uint64_t *)(v6 + v17);
  v19 = (uint64_t *)(v7 + v17);
  v20 = (int *)type metadata accessor for PreparedSparkline(0);
  v21 = *((_QWORD *)v20 - 1);
  v22 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v21 + 48);
  v23 = swift_bridgeObjectRetain(v15);
  if (v22(v19, 1, v20, v23))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = *v19;
    *v18 = *v19;
    v26 = v20[5];
    v27 = (char *)v18 + v26;
    v28 = (char *)v19 + v26;
    v29 = swift_bridgeObjectRetain(v25);
    ((void (*)(char *, char *, uint64_t, __n128))v66)(v27, v28, v4, v29);
    sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v66((uint64_t)&v27[*(int *)(v30 + 36)], (uint64_t)&v28[*(int *)(v30 + 36)], v4);
    v31 = v20[6];
    v32 = (char *)v18 + v31;
    v33 = (char *)v19 + v31;
    v34 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
    *(_OWORD *)((char *)v18 + v20[7]) = *(_OWORD *)((char *)v19 + v20[7]);
    v35 = v20[8];
    v36 = (char *)v18 + v35;
    v37 = (char *)v19 + v35;
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    *((_BYTE *)v18 + v20[9]) = *((_BYTE *)v19 + v20[9]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
  }
  v38 = v16[10];
  v39 = *(_QWORD *)(v7 + v38);
  *(_QWORD *)(v6 + v38) = v39;
  v40 = v16[11];
  v41 = (void *)(v6 + v40);
  v42 = (const void *)(v7 + v40);
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v44 = v43;
  v45 = *(_QWORD *)(v43 - 8);
  v46 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v45 + 48);
  v47 = swift_bridgeObjectRetain(v39);
  if (v46(v42, 1, v44, v47))
  {
    sub_10001D6B0(0);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v45 + 16))(v41, v42, v44);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
  }
  v49 = v16[12];
  v50 = (void *)(v6 + v49);
  v51 = (const void *)(v7 + v49);
  v52 = type metadata accessor for URL(0);
  v53 = *(_QWORD *)(v52 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v53 + 16))(v50, v51, v52);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
  }
  v55 = v67[6];
  v56 = (void *)(v69 + v55);
  v57 = (const void *)(v68 + v55);
  v58 = type metadata accessor for WidgetQuote(0);
  v59 = *(_QWORD *)(v58 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
  {
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v59 + 16))(v56, v57, v58);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
  }
  v61 = v67[7];
  v62 = v69 + v61;
  v63 = v68 + v61;
  v64 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v62, v63, v64);
  *(_BYTE *)(v69 + v67[8]) = *(_BYTE *)(v68 + v67[8]);
  *(_BYTE *)(v69 + v67[9]) = *(_BYTE *)(v68 + v67[9]);
  return v69;
}

uint64_t sub_1000D5E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int *v34;
  uint64_t v35;
  uint64_t (*v36)(_QWORD *, uint64_t, int *);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t, __n128);
  __n128 v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(void *, uint64_t, uint64_t);
  int v84;
  int v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(void *, uint64_t, uint64_t);
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(void *, uint64_t, uint64_t);
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  int *v114;
  uint64_t v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;

  v4 = type metadata accessor for Date(0);
  v115 = *(_QWORD *)(v4 - 8);
  v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 24);
  v113(a1, a2, v4);
  v5 = type metadata accessor for DetailTimelineEntry(0);
  v6 = *(int *)(v5 + 20);
  v118 = a1;
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_QWORD *)v7 = *(_QWORD *)(a2 + v6);
  v9 = *(_QWORD *)(a2 + v6 + 8);
  v10 = *(_QWORD *)(a1 + v6 + 8);
  *(_QWORD *)(v7 + 8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 24) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 40);
  v14 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = (_OWORD *)(v7 + 48);
  v16 = (_OWORD *)(v8 + 48);
  v17 = *(_QWORD *)(v7 + 72);
  v18 = *(_QWORD *)(v8 + 72);
  v116 = (int *)v5;
  v117 = a2;
  if (v17 == 1)
  {
    if (v18 == 1)
    {
      v19 = *(_OWORD *)(v8 + 64);
      *v15 = *v16;
      *(_OWORD *)(v7 + 64) = v19;
    }
    else
    {
      v21 = *(_QWORD *)v16;
      *(_BYTE *)(v7 + 56) = *(_BYTE *)(v8 + 56);
      *(_QWORD *)v15 = v21;
      *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
      v22 = *(_QWORD *)(v8 + 72);
      *(_QWORD *)(v7 + 72) = v22;
      swift_bridgeObjectRetain(v22);
    }
  }
  else if (v18 == 1)
  {
    sub_10002304C(v7 + 48);
    v20 = *(_OWORD *)(v8 + 64);
    *v15 = *v16;
    *(_OWORD *)(v7 + 64) = v20;
  }
  else
  {
    v23 = *(_QWORD *)v16;
    *(_BYTE *)(v7 + 56) = *(_BYTE *)(v8 + 56);
    *(_QWORD *)v15 = v23;
    *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
    v24 = *(_QWORD *)(v8 + 72);
    *(_QWORD *)(v7 + 72) = v24;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRelease(v17);
  }
  v25 = *(_QWORD *)(v8 + 80);
  *(_BYTE *)(v7 + 88) = *(_BYTE *)(v8 + 88);
  *(_QWORD *)(v7 + 80) = v25;
  *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
  v26 = *(_QWORD *)(v8 + 104);
  v27 = *(_QWORD *)(v7 + 104);
  *(_QWORD *)(v7 + 104) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(v8 + 112);
  *(_BYTE *)(v7 + 120) = *(_BYTE *)(v8 + 120);
  *(_QWORD *)(v7 + 112) = v28;
  v29 = *(_QWORD *)(v8 + 128);
  *(_BYTE *)(v7 + 136) = *(_BYTE *)(v8 + 136);
  *(_QWORD *)(v7 + 128) = v29;
  *(_BYTE *)(v7 + 137) = *(_BYTE *)(v8 + 137);
  v30 = (int *)type metadata accessor for DetailContentViewModel(0);
  v31 = v30[9];
  v32 = (_QWORD *)(v7 + v31);
  v33 = (_QWORD *)(v8 + v31);
  v34 = (int *)type metadata accessor for PreparedSparkline(0);
  v35 = *((_QWORD *)v34 - 1);
  v36 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (v38)
      goto LABEL_13;
    v40 = *v33;
    *v32 = *v33;
    v41 = v34[5];
    v42 = (char *)v32 + v41;
    v43 = (char *)v33 + v41;
    v112 = v4;
    v114 = v30;
    v44 = *(void (**)(char *, char *, uint64_t, __n128))(v115 + 16);
    v45 = swift_bridgeObjectRetain(v40);
    v44(v42, v43, v4, v45);
    v46 = (void (*)(char *, char *, uint64_t))v44;
    v30 = v114;
    sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v46(&v42[*(int *)(v47 + 36)], &v43[*(int *)(v47 + 36)], v112);
    v48 = v34[6];
    v49 = (char *)v32 + v48;
    v50 = (char *)v33 + v48;
    v51 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
    *(_OWORD *)((char *)v32 + v34[7]) = *(_OWORD *)((char *)v33 + v34[7]);
    v52 = v34[8];
    v53 = (char *)v32 + v52;
    v54 = (char *)v33 + v52;
    v55 = v54[8];
    *(_QWORD *)v53 = *(_QWORD *)v54;
    v53[8] = v55;
    *((_BYTE *)v32 + v34[9]) = *((_BYTE *)v33 + v34[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
  }
  else
  {
    if (v38)
    {
      sub_10001DF70((uint64_t)v32, type metadata accessor for PreparedSparkline);
LABEL_13:
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      goto LABEL_16;
    }
    v56 = *v33;
    v57 = *v32;
    *v32 = *v33;
    swift_bridgeObjectRetain(v56);
    v58 = swift_bridgeObjectRelease(v57);
    v59 = v34[5];
    v60 = (char *)v32 + v59;
    v61 = (char *)v33 + v59;
    ((void (*)(char *, char *, uint64_t, __n128))v113)((char *)v32 + v59, (char *)v33 + v59, v4, v58);
    sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v113((uint64_t)&v60[*(int *)(v62 + 36)], (uint64_t)&v61[*(int *)(v62 + 36)], v4);
    v63 = v34[6];
    v64 = (char *)v32 + v63;
    v65 = (char *)v33 + v63;
    v66 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 24))(v64, v65, v66);
    v67 = v34[7];
    v68 = (_QWORD *)((char *)v32 + v67);
    v69 = (_QWORD *)((char *)v33 + v67);
    *v68 = *v69;
    v68[1] = v69[1];
    v70 = v34[8];
    v71 = (char *)v32 + v70;
    v72 = (char *)v33 + v70;
    v73 = v72[8];
    *(_QWORD *)v71 = *(_QWORD *)v72;
    v71[8] = v73;
    *((_BYTE *)v32 + v34[9]) = *((_BYTE *)v33 + v34[9]);
  }
LABEL_16:
  v74 = v30[10];
  v75 = *(_QWORD *)(v8 + v74);
  v76 = *(_QWORD *)(v7 + v74);
  *(_QWORD *)(v7 + v74) = v75;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRelease(v76);
  v77 = v30[11];
  v78 = (void *)(v7 + v77);
  v79 = (void *)(v8 + v77);
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v81 = v80;
  v82 = *(_QWORD *)(v80 - 8);
  v83 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v82 + 48);
  v84 = v83(v78, 1, v80);
  v85 = v83(v79, 1, v81);
  if (v84)
  {
    v86 = v116;
    if (!v85)
    {
      (*(void (**)(void *, void *, uint64_t))(v82 + 16))(v78, v79, v81);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v78, 0, 1, v81);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  v86 = v116;
  if (v85)
  {
    (*(void (**)(void *, uint64_t))(v82 + 8))(v78, v81);
LABEL_21:
    sub_10001D6B0(0);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    goto LABEL_22;
  }
  (*(void (**)(void *, void *, uint64_t))(v82 + 24))(v78, v79, v81);
LABEL_22:
  v88 = v30[12];
  v89 = (void *)(v7 + v88);
  v90 = (void *)(v8 + v88);
  v91 = type metadata accessor for URL(0);
  v92 = *(_QWORD *)(v91 - 8);
  v93 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v92 + 48);
  v94 = v93(v89, 1, v91);
  v95 = v93(v90, 1, v91);
  if (v94)
  {
    v96 = v118;
    if (!v95)
    {
      (*(void (**)(void *, void *, uint64_t))(v92 + 16))(v89, v90, v91);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  v96 = v118;
  if (v95)
  {
    (*(void (**)(void *, uint64_t))(v92 + 8))(v89, v91);
LABEL_27:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(void *, void *, uint64_t))(v92 + 24))(v89, v90, v91);
LABEL_28:
  v98 = v86[6];
  v99 = (void *)(v96 + v98);
  v100 = (void *)(v117 + v98);
  v101 = type metadata accessor for WidgetQuote(0);
  v102 = *(_QWORD *)(v101 - 8);
  v103 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v102 + 48);
  v104 = v103(v99, 1, v101);
  v105 = v103(v100, 1, v101);
  if (!v104)
  {
    if (!v105)
    {
      (*(void (**)(void *, void *, uint64_t))(v102 + 24))(v99, v100, v101);
      goto LABEL_34;
    }
    (*(void (**)(void *, uint64_t))(v102 + 8))(v99, v101);
    goto LABEL_33;
  }
  if (v105)
  {
LABEL_33:
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(void *, void *, uint64_t))(v102 + 16))(v99, v100, v101);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v99, 0, 1, v101);
LABEL_34:
  v107 = v86[7];
  v108 = v96 + v107;
  v109 = v117 + v107;
  v110 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 24))(v108, v109, v110);
  *(_BYTE *)(v96 + v86[8]) = *(_BYTE *)(v117 + v86[8]);
  *(_BYTE *)(v96 + v86[9]) = *(_BYTE *)(v117 + v86[9]);
  return v96;
}

uint64_t sub_1000D660C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  int *v60;

  v4 = type metadata accessor for Date(0);
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
  v59(a1, a2, v4);
  v60 = (int *)type metadata accessor for DetailTimelineEntry(0);
  v5 = v60[5];
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)v6 = *(_OWORD *)(a2 + v5);
  *(_OWORD *)(v6 + 16) = v8;
  v9 = *(_OWORD *)(a2 + v5 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a2 + v5 + 32);
  *(_OWORD *)(v6 + 48) = v9;
  v10 = *(_OWORD *)(a2 + v5 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + v5 + 64);
  *(_OWORD *)(v6 + 80) = v10;
  *(_OWORD *)(v6 + 121) = *(_OWORD *)(a2 + v5 + 121);
  v11 = *(_OWORD *)(a2 + v5 + 112);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(a2 + v5 + 96);
  *(_OWORD *)(v6 + 112) = v11;
  *(_BYTE *)(v6 + 137) = *(_BYTE *)(a2 + v5 + 137);
  v12 = (int *)type metadata accessor for DetailContentViewModel(0);
  v13 = v12[9];
  v14 = (_QWORD *)(v6 + v13);
  v15 = (_QWORD *)(v7 + v13);
  v16 = (int *)type metadata accessor for PreparedSparkline(0);
  v17 = *((_QWORD *)v16 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    v19 = v16[5];
    v57 = a2;
    v58 = a1;
    v20 = (char *)v14 + v19;
    v21 = (char *)v15 + v19;
    v59((uint64_t)v14 + v19, (uint64_t)v15 + v19, v4);
    sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v23 = *(int *)(v22 + 36);
    v24 = &v21[v23];
    a2 = v57;
    v59((uint64_t)&v20[v23], (uint64_t)v24, v4);
    v25 = v16[6];
    v26 = (char *)v14 + v25;
    v27 = (char *)v15 + v25;
    v28 = type metadata accessor for TimeZone(0);
    v29 = v27;
    a1 = v58;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v29, v28);
    *(_OWORD *)((char *)v14 + v16[7]) = *(_OWORD *)((char *)v15 + v16[7]);
    v30 = v16[8];
    v31 = (char *)v14 + v30;
    v32 = (char *)v15 + v30;
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v31[8] = v32[8];
    *((_BYTE *)v14 + v16[9]) = *((_BYTE *)v15 + v16[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  }
  *(_QWORD *)(v6 + v12[10]) = *(_QWORD *)(v7 + v12[10]);
  v33 = v12[11];
  v34 = (void *)(v6 + v33);
  v35 = (const void *)(v7 + v33);
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v37 = v36;
  v38 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48))(v35, 1, v36))
  {
    sub_10001D6B0(0);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v38 + 32))(v34, v35, v37);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v34, 0, 1, v37);
  }
  v40 = v12[12];
  v41 = (void *)(v6 + v40);
  v42 = (const void *)(v7 + v40);
  v43 = type metadata accessor for URL(0);
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v44 + 32))(v41, v42, v43);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  v46 = v60[6];
  v47 = (void *)(a1 + v46);
  v48 = (const void *)(a2 + v46);
  v49 = type metadata accessor for WidgetQuote(0);
  v50 = *(_QWORD *)(v49 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
  {
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v50 + 32))(v47, v48, v49);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
  }
  v52 = v60[7];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
  *(_BYTE *)(a1 + v60[8]) = *(_BYTE *)(a2 + v60[8]);
  *(_BYTE *)(a1 + v60[9]) = *(_BYTE *)(a2 + v60[9]);
  return a1;
}

uint64_t sub_1000D6A54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, int *);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(void *, uint64_t, uint64_t);
  int v66;
  int v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(void *, uint64_t, uint64_t);
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(void *, uint64_t, uint64_t);
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  int *v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;

  v4 = type metadata accessor for Date(0);
  v96 = *(_QWORD *)(v4 - 8);
  v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 40);
  v94(a1, a2, v4);
  v5 = type metadata accessor for DetailTimelineEntry(0);
  v6 = *(int *)(v5 + 20);
  v99 = a1;
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = *(_QWORD *)(a2 + v6 + 8);
  v10 = *(_QWORD *)(a1 + v6 + 8);
  *(_QWORD *)v7 = *(_QWORD *)(a2 + v6);
  *(_QWORD *)(v7 + 8) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(v8 + 40);
  v14 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v7 + 40) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = (_OWORD *)(v7 + 48);
  v16 = (_OWORD *)(v8 + 48);
  v17 = *(_QWORD *)(v7 + 72);
  v97 = (int *)v5;
  v98 = a2;
  if (v17 == 1)
    goto LABEL_4;
  v18 = *(_QWORD *)(v8 + 72);
  if (v18 == 1)
  {
    sub_10002304C(v7 + 48);
LABEL_4:
    v19 = *(_OWORD *)(v8 + 64);
    *v15 = *v16;
    *(_OWORD *)(v7 + 64) = v19;
    goto LABEL_6;
  }
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v7 + 56) = *(_BYTE *)(v8 + 56);
  *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v7 + 72) = v18;
  swift_bridgeObjectRelease(v17);
LABEL_6:
  *(_QWORD *)(v7 + 80) = *(_QWORD *)(v8 + 80);
  *(_BYTE *)(v7 + 88) = *(_BYTE *)(v8 + 88);
  v20 = *(_QWORD *)(v8 + 104);
  v21 = *(_QWORD *)(v7 + 104);
  *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
  *(_QWORD *)(v7 + 104) = v20;
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(v7 + 112) = *(_QWORD *)(v8 + 112);
  *(_BYTE *)(v7 + 120) = *(_BYTE *)(v8 + 120);
  *(_QWORD *)(v7 + 128) = *(_QWORD *)(v8 + 128);
  *(_WORD *)(v7 + 136) = *(_WORD *)(v8 + 136);
  v22 = (int *)type metadata accessor for DetailContentViewModel(0);
  v23 = v22[9];
  v24 = (char *)(v7 + v23);
  v25 = (char *)(v8 + v23);
  v26 = (int *)type metadata accessor for PreparedSparkline(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(uint64_t (**)(char *, uint64_t, int *))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (v30)
      goto LABEL_11;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v32 = v26[5];
    v33 = &v24[v32];
    v34 = &v25[v32];
    v95 = v22;
    v35 = *(void (**)(char *, char *, uint64_t))(v96 + 32);
    v35(&v24[v32], &v25[v32], v4);
    sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v35(&v33[*(int *)(v36 + 36)], &v34[*(int *)(v36 + 36)], v4);
    v22 = v95;
    v37 = v26[6];
    v38 = &v24[v37];
    v39 = &v25[v37];
    v40 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
    *(_OWORD *)&v24[v26[7]] = *(_OWORD *)&v25[v26[7]];
    v41 = v26[8];
    v42 = &v24[v41];
    v43 = &v25[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    v24[v26[9]] = v25[v26[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
  }
  else
  {
    if (v30)
    {
      sub_10001DF70((uint64_t)v24, type metadata accessor for PreparedSparkline);
LABEL_11:
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      goto LABEL_14;
    }
    v44 = *(_QWORD *)v24;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v45 = swift_bridgeObjectRelease(v44);
    v46 = v26[5];
    v47 = &v24[v46];
    v48 = &v25[v46];
    ((void (*)(char *, char *, uint64_t, __n128))v94)(&v24[v46], &v25[v46], v4, v45);
    sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v94((uint64_t)&v47[*(int *)(v49 + 36)], (uint64_t)&v48[*(int *)(v49 + 36)], v4);
    v50 = v26[6];
    v51 = &v24[v50];
    v52 = &v25[v50];
    v53 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 40))(v51, v52, v53);
    *(_OWORD *)&v24[v26[7]] = *(_OWORD *)&v25[v26[7]];
    v54 = v26[8];
    v55 = &v24[v54];
    v56 = &v25[v54];
    v55[8] = v56[8];
    *(_QWORD *)v55 = *(_QWORD *)v56;
    v24[v26[9]] = v25[v26[9]];
  }
LABEL_14:
  v57 = v22[10];
  v58 = *(_QWORD *)(v7 + v57);
  *(_QWORD *)(v7 + v57) = *(_QWORD *)(v8 + v57);
  swift_bridgeObjectRelease(v58);
  v59 = v22[11];
  v60 = (void *)(v7 + v59);
  v61 = (void *)(v8 + v59);
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v63 = v62;
  v64 = *(_QWORD *)(v62 - 8);
  v65 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v64 + 48);
  v66 = v65(v60, 1, v62);
  v67 = v65(v61, 1, v63);
  if (v66)
  {
    v68 = v97;
    if (!v67)
    {
      (*(void (**)(void *, void *, uint64_t))(v64 + 32))(v60, v61, v63);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v60, 0, 1, v63);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  v68 = v97;
  if (v67)
  {
    (*(void (**)(void *, uint64_t))(v64 + 8))(v60, v63);
LABEL_19:
    sub_10001D6B0(0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v64 + 40))(v60, v61, v63);
LABEL_20:
  v70 = v22[12];
  v71 = (void *)(v7 + v70);
  v72 = (void *)(v8 + v70);
  v73 = type metadata accessor for URL(0);
  v74 = *(_QWORD *)(v73 - 8);
  v75 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v74 + 48);
  v76 = v75(v71, 1, v73);
  v77 = v75(v72, 1, v73);
  if (v76)
  {
    v78 = v99;
    if (!v77)
    {
      (*(void (**)(void *, void *, uint64_t))(v74 + 32))(v71, v72, v73);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v78 = v99;
  if (v77)
  {
    (*(void (**)(void *, uint64_t))(v74 + 8))(v71, v73);
LABEL_25:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(void *, void *, uint64_t))(v74 + 40))(v71, v72, v73);
LABEL_26:
  v80 = v68[6];
  v81 = (void *)(v78 + v80);
  v82 = (void *)(v98 + v80);
  v83 = type metadata accessor for WidgetQuote(0);
  v84 = *(_QWORD *)(v83 - 8);
  v85 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v84 + 48);
  v86 = v85(v81, 1, v83);
  v87 = v85(v82, 1, v83);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(void *, void *, uint64_t))(v84 + 40))(v81, v82, v83);
      goto LABEL_32;
    }
    (*(void (**)(void *, uint64_t))(v84 + 8))(v81, v83);
    goto LABEL_31;
  }
  if (v87)
  {
LABEL_31:
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(void *, void *, uint64_t))(v84 + 32))(v81, v82, v83);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
LABEL_32:
  v89 = v68[7];
  v90 = v78 + v89;
  v91 = v98 + v89;
  v92 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 40))(v90, v91, v92);
  *(_BYTE *)(v78 + v68[8]) = *(_BYTE *)(v98 + v68[8]);
  *(_BYTE *)(v78 + v68[9]) = *(_BYTE *)(v98 + v68[9]);
  return v78;
}

uint64_t sub_1000D7130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D713C);
}

uint64_t sub_1000D713C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DetailTimelineEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000D7178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D7184);
}

uint64_t sub_1000D7184(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DetailTimelineEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1000D71C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for DetailTimelineEntry(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000D722C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  sub_1000D5178(255);
  v1 = v0;
  sub_1000D50EC(255);
  v3 = v2;
  sub_1000D4FE8(255);
  v8 = v4;
  v9 = sub_100003D3C(&qword_100118A50, (uint64_t (*)(uint64_t))sub_1000D4FE8, (uint64_t)&protocol conformance descriptor for AppIntentConfiguration<A, B>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v8 = v3;
  v9 = OpaqueTypeConformance2;
  v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v8 = v1;
  v9 = v6;
  return swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
}

uint64_t sub_1000D72DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000EA638, 1);
}

uint64_t sub_1000D72EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v26[2];

  v26[1] = a1;
  v2 = type metadata accessor for DetailTimelineEntry(0);
  __chkstk_darwin(v2);
  v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DetailChartComplicationContentView(0);
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v10 = (char *)v26 - v9;
  sub_1000D751C(0);
  v12 = v11;
  __chkstk_darwin(v11);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100035448(v1, (uint64_t)v4);
  *v7 = swift_getKeyPath(&unk_1000E4B68);
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v7, v15, 0);
  sub_10000ED3C((uint64_t)v4, (uint64_t)v7 + *(int *)(v5 + 20), type metadata accessor for DetailTimelineEntry);
  sub_10000ED3C((uint64_t)v7, (uint64_t)v10, type metadata accessor for DetailChartComplicationContentView);
  v16 = v1 + *(int *)(v2 + 28);
  KeyPath = swift_getKeyPath(&unk_1000E4B68);
  v18 = (uint64_t *)&v14[*(int *)(v12 + 36)];
  sub_10002BDF8(0);
  v20 = (char *)v18 + *(int *)(v19 + 28);
  v21 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v20, v16, v21);
  *v18 = KeyPath;
  sub_10000ED3C((uint64_t)v10, (uint64_t)v14, type metadata accessor for DetailChartComplicationContentView);
  v22 = v1 + *(int *)(v2 + 20);
  v23 = v22 + *(int *)(type metadata accessor for DetailContentViewModel(0) + 48);
  v24 = sub_1000D75C0();
  View.widgetURL(_:)(v23, v12, v24);
  return sub_10001DF70((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1000D751C);
}

void sub_1000D751C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_100118AF0)
  {
    v2 = type metadata accessor for DetailChartComplicationContentView(255);
    sub_10002BDF8(255);
    v4 = type metadata accessor for ModifiedContent(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_100118AF0);
  }
}

_QWORD *sub_1000D7580@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_1000910AC();
  return EnvironmentValues.subscript.getter(a1, &type metadata for PriceChangeDisplayKey, &type metadata for PriceChangeDisplayKey, v2);
}

unint64_t sub_1000D75C0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100118AF8;
  if (!qword_100118AF8)
  {
    sub_1000D751C(255);
    v2 = v1;
    sub_100003D3C(&qword_100118B00, type metadata accessor for DetailChartComplicationContentView, (uint64_t)&unk_1000E1A24);
    sub_100003D3C(&qword_100113060, (uint64_t (*)(uint64_t))sub_10002BDF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100118AF8);
  }
  return result;
}

uint64_t sub_1000D7658()
{
  uint64_t v0;
  _QWORD v2[2];

  sub_1000D751C(255);
  v2[0] = v0;
  v2[1] = sub_1000D75C0();
  return swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
}

ValueMetadata *type metadata accessor for SymbolName()
{
  return &type metadata for SymbolName;
}

uint64_t sub_1000D76B0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = a4;
  v19 = a5;
  sub_1000D7C44(0, &qword_100118B18, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedEncodingContainer);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v13 = (char *)&v18 - v12;
  v15 = a1[3];
  v14 = a1[4];
  sub_100007184(a1, v15);
  v16 = sub_1000D7C00();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SymbolName.CodingKeys, &type metadata for SymbolName.CodingKeys, v16, v15, v14);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v10);
  if (!v5)
  {
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v20, v10);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1000D77E0()
{
  _BYTE *v0;

  if (*v0)
    return 0x74726F6873;
  else
    return 0x746361706D6F63;
}

uint64_t sub_1000D7818@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000D7964(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D783C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D7C00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D7864(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D7C00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D788C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0), result = 0, (v12 & 1) != 0))
  {
    if (v6 == v9 && v7 == v10)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
  }
  return result;
}

uint64_t sub_1000D791C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1000D7A4C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1000D7948(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1000D76B0(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1000D7964(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x746361706D6F63 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746361706D6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x74726F6873 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74726F6873, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000D7A4C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  sub_1000D7C44(0, &qword_100118B08, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedDecodingContainer);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v7 = (char *)&v16 - v6;
  v8 = a1[3];
  v9 = a1[4];
  sub_100007184(a1, v8);
  v10 = sub_1000D7C00();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SymbolName.CodingKeys, &type metadata for SymbolName.CodingKeys, v10, v8, v9);
  if (v1)
  {
    sub_100007164(a1);
  }
  else
  {
    v18 = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v4);
    v13 = v12;
    v17 = 1;
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode(_:forKey:)(&v17, v4);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRetain(v15);
    sub_100007164(a1);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v13);
  }
  return v9;
}

unint64_t sub_1000D7C00()
{
  unint64_t result;

  result = qword_100118B10;
  if (!qword_100118B10)
  {
    result = swift_getWitnessTable(&unk_1000E4CE4, &type metadata for SymbolName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118B10);
  }
  return result;
}

void sub_1000D7C44(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1000D7C00();
    v7 = a3(a1, &type metadata for SymbolName.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for SymbolName.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000D7CEC + 4 * byte_1000E4B95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000D7D20 + 4 * byte_1000E4B90[v4]))();
}

uint64_t sub_1000D7D20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D7D28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D7D30);
  return result;
}

uint64_t sub_1000D7D3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D7D44);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000D7D48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D7D50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SymbolName.CodingKeys()
{
  return &type metadata for SymbolName.CodingKeys;
}

unint64_t sub_1000D7D70()
{
  unint64_t result;

  result = qword_100118B20;
  if (!qword_100118B20)
  {
    result = swift_getWitnessTable(&unk_1000E4CBC, &type metadata for SymbolName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118B20);
  }
  return result;
}

unint64_t sub_1000D7DB8()
{
  unint64_t result;

  result = qword_100118B28;
  if (!qword_100118B28)
  {
    result = swift_getWitnessTable(&unk_1000E4C2C, &type metadata for SymbolName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118B28);
  }
  return result;
}

unint64_t sub_1000D7E00()
{
  unint64_t result;

  result = qword_100118B30;
  if (!qword_100118B30)
  {
    result = swift_getWitnessTable(&unk_1000E4C54, &type metadata for SymbolName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100118B30);
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC12StocksWidgetP33_97429527937469178FF6286AEF48253919ResourceBundleClass);
}
