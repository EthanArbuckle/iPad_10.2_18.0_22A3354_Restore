void sub_100006194(id a1)
{
  +[MPMediaQuery setFilteringDisabled:](MPMediaQuery, "setFilteringDisabled:", 1);
}

id sub_100006398()
{
  if (qword_10010C1C0 != -1)
    dispatch_once(&qword_10010C1C0, &stru_1000F6978);
  return (id)qword_10010C1B8;
}

void sub_1000063D8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.tv.TVUpNext", "Default");
  v2 = (void *)qword_10010C1B8;
  qword_10010C1B8 = (uint64_t)v1;

}

id sub_100006408()
{
  if (qword_10010C1D0 != -1)
    dispatch_once(&qword_10010C1D0, &stru_1000F6998);
  return (id)qword_10010C1C8;
}

void sub_100006448(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.tv.SportsWidget", "Default");
  v2 = (void *)qword_10010C1C8;
  qword_10010C1C8 = (uint64_t)v1;

}

void sub_100006520(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[6];
  _QWORD v16[6];

  v15[0] = CFSTR("NextEpisode");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("TV.UpNext.NextEpisode"), &stru_1000FFDC8, 0));
  v16[0] = v13;
  v15[1] = CFSTR("NextChapter");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("TV.UpNext.NextChapter"), &stru_1000FFDC8, 0));
  v16[1] = v2;
  v15[2] = CFSTR("NextSeason");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("TV.UpNext.NextSeason"), &stru_1000FFDC8, 0));
  v16[2] = v4;
  v15[3] = CFSTR("NewEpisode");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("TV.UpNext.NewEpisode"), &stru_1000FFDC8, 0));
  v16[3] = v6;
  v15[4] = CFSTR("NewChapter");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("TV.UpNext.NewChapter"), &stru_1000FFDC8, 0));
  v16[4] = v8;
  v15[5] = CFSTR("NewSeason");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("TV.UpNext.NewSeason"), &stru_1000FFDC8, 0));
  v16[5] = v10;
  v11 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 6));
  v12 = (void *)qword_10010C1D8;
  qword_10010C1D8 = v11;

}

void sub_100006BDC(id a1)
{
  id v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = sub_100006398();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - Registering widget", v3, 2u);
  }

  notify_post("com.apple.tv.TVWidgetExtension.Register");
}

void sub_100006C4C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  int v14;
  uint64_t v15;

  v5 = a2;
  v6 = a3;
  v7 = sub_100006398();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v9, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 32));
    v14 = 134217984;
    v15 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - End FetchUpNextWidget - elapsed time: %.5f", (uint8_t *)&v14, 0xCu);

  }
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
  {
    (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v5, v6);
  }
  else
  {
    v12 = sub_100006398();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - No completion block provided", (uint8_t *)&v14, 2u);
    }

  }
}

void sub_100006D98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void **v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  void *v24;
  id v25;
  id v26[3];
  uint8_t buf[4];
  id v28;

  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    goto LABEL_15;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "features"));

  if (!v7)
    goto LABEL_5;
  v8 = WLKServerConfigurationResponseKeyFeaturesUNW;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "features"));
  v10 = objc_msgSend(v9, "wlk_BOOLForKey:defaultValue:", v8, 1);

  if ((v10 & 1) != 0)
  {

LABEL_5:
    if (+[WLKUpNextWidgetCacheManager consumePendingInvalidation](WLKUpNextWidgetCacheManager, "consumePendingInvalidation"))
    {
      v11 = sub_100006398();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - Ignoring cache", buf, 2u);
      }

      v13 = 9;
    }
    else
    {
      v13 = 1;
    }
    v14 = objc_msgSend(objc_alloc((Class)WLKUpNextWidgetRequestOperation), "initWithQueryParameters:options:", 0, v13);
    objc_initWeak((id *)buf, v14);
    v21 = _NSConcreteStackBlock;
    v22 = 3221225472;
    v23 = sub_100007040;
    v24 = &unk_1000F6A78;
    objc_copyWeak(v26, (id *)buf);
    v15 = *(id *)(a1 + 32);
    v16 = *(void **)(a1 + 40);
    v17 = *(void **)(a1 + 48);
    v25 = v15;
    v26[1] = v16;
    v26[2] = v17;
    objc_msgSend(v14, "setCompletionBlock:", &v21);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSOperationQueue wlkDefaultQueue](NSOperationQueue, "wlkDefaultQueue", v21, v22, v23, v24));
    objc_msgSend(v18, "addOperation:", v14);

    objc_destroyWeak(v26);
    objc_destroyWeak((id *)buf);

    goto LABEL_15;
  }
  v19 = sub_100006398();
  v20 = objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - Bailing early. UTS has disabled the feature %@", buf, 0xCu);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
LABEL_15:

}

void sub_100007018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100007040(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  id v17;
  uint64_t v18;
  id *v19;
  id *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  _QWORD v26[2];
  id v27;
  uint64_t v28;
  _QWORD v29[4];
  id v30;
  id v31;
  id v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t v36[16];
  uint8_t buf[8];
  uint8_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  id v42;

  v2 = sub_100006398();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - Network request complete", buf, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  *(_QWORD *)buf = 0;
  v38 = buf;
  v39 = 0x3032000000;
  v40 = sub_1000073A4;
  v41 = sub_1000073B4;
  v42 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "error"));

  if (v5)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "error"));
    v7 = (void *)*((_QWORD *)v38 + 5);
    *((_QWORD *)v38 + 5) = v6;

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "itemCollection"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "items"));
    v10 = objc_msgSend(v9, "mutableCopy");

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "items"));
    if (!v11)
    {
      v12 = objc_alloc_init((Class)NSMutableArray);

      v10 = v12;
    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "originalExpirationDate"));
    if (objc_msgSend(WeakRetained, "resourceFetchType") == (id)1)
    {
      v14 = sub_100006398();
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - Request was a Network load", v36, 2u);
      }

      v16 = (void *)objc_claimAutoreleasedReturnValue(+[WLKUpNextDeltaStore sharedInstance](WLKUpNextDeltaStore, "sharedInstance"));
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_1000073BC;
      v29[3] = &unk_1000F6A28;
      v34 = *(_QWORD *)(a1 + 48);
      v17 = v10;
      v18 = *(_QWORD *)(a1 + 56);
      v30 = v17;
      v35 = v18;
      v31 = v13;
      v32 = *(id *)(a1 + 32);
      v33 = buf;
      objc_msgSend(v16, "delete:", v29);
      v19 = &v30;
      v20 = &v31;

    }
    else
    {
      v21 = sub_100006398();
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - Request was a Cache hit", v36, 2u);
      }

      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10000755C;
      v24[3] = &unk_1000F6A50;
      v23 = *(_QWORD *)(a1 + 56);
      v27 = *(id *)(a1 + 48);
      v28 = v23;
      v25 = v13;
      v26[0] = *(id *)(a1 + 32);
      v26[1] = buf;
      objc_msgSend(v27, "_processContinuationsDelta:withCompletion:", v10, v24);
      v19 = &v25;
      v20 = (id *)v26;
    }

  }
  _Block_object_dispose(buf, 8);

}

void sub_100007378(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000073A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000073B4(uint64_t a1)
{

}

void sub_1000073BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  __CFString *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  __CFString *v12;
  int v13;
  __CFString *v14;

  v4 = a3;
  v5 = sub_100006398();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = v4 ? (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "description")) : &stru_1000FFDC8;
    v13 = 138412290;
    v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - Done deleting delta (fresh load) %@", (uint8_t *)&v13, 0xCu);
    if (v4)

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "_contentGroupWithContinuations:widgetSize:expiration:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40)));
  v9 = sub_100006398();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "items"));
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v11, "count")));
    v13 = 138412290;
    v14 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - End processing up next. Returning items:[%@]", (uint8_t *)&v13, 0xCu);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10000755C(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "_contentGroupWithContinuations:widgetSize:expiration:", a2, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 32)));
  v4 = sub_100006398();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "items"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v6, "count")));
    v8 = 138412290;
    v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - End processing up next. Returning items:[%@]", (uint8_t *)&v8, 0xCu);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100007884(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  _UNKNOWN **v20;
  uint64_t v21;
  void *i;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  id v28;
  NSObject *v29;
  void *v30;
  NSObject *v31;
  id v32;
  void *v33;
  void *v34;
  _UNKNOWN **v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  void *j;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  NSObject *v48;
  _QWORD *v49;
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void *v59;
  uint8_t v60[128];
  uint8_t buf[4];
  id v62;
  __int16 v63;
  id v64;
  __int16 v65;
  void *v66;
  _BYTE v67[128];

  v5 = a2;
  v6 = a3;
  v7 = sub_100006398();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v9, "timeIntervalSinceDate:", a1[4]);
    *(_DWORD *)buf = 138412546;
    v62 = v5;
    v63 = 2048;
    v64 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - Done fetching delta %@ elapsed:%.5f", buf, 0x16u);

  }
  if (v6)
  {
    v11 = sub_100006398();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v62 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - Continuing after Up Next delta error: %@", buf, 0xCu);
    }

  }
  v13 = sub_100006398();
  v14 = objc_claimAutoreleasedReturnValue(v13);
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    v45 = v6;
    if (v15)
    {
      *(_DWORD *)buf = 138412290;
      v62 = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - Parsing Up Next delta: %@", buf, 0xCu);
    }

    v16 = WLKRestrictionsMaximumEffectiveTVShowRanking();
    v14 = objc_claimAutoreleasedReturnValue(v16);
    v17 = WLKRestrictionsMaximumEffectiveMovieRanking();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v46 = v5;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "additions"));
    v20 = &_ss23_ContiguousArrayStorageCMn_ptr;
    v50 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v55, v67, 16);
    if (v50)
    {
      v21 = *(_QWORD *)v56;
      v48 = v14;
      v49 = a1;
      v47 = *(_QWORD *)v56;
      do
      {
        for (i = 0; i != v50; i = (char *)i + 1)
        {
          if (*(_QWORD *)v56 != v21)
            objc_enumerationMutation(v19);
          v23 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * (_QWORD)i);
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "movieOrShowContent", v45));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "contentRating"));

          if (v14 && objc_msgSend(v25, "systemType") == (id)2)
          {
            v26 = objc_msgSend(v25, "ratingValue");
            v27 = v14;
          }
          else
          {
            if (!v18 || objc_msgSend(v25, "systemType") != (id)1)
            {
LABEL_25:
              objc_msgSend(v20[76], "add:toCollection:", v23, a1[5]);
              goto LABEL_26;
            }
            v26 = objc_msgSend(v25, "ratingValue");
            v27 = v18;
          }
          if ((unint64_t)v26 <= -[NSObject unsignedIntValue](v27, "unsignedIntValue"))
            goto LABEL_25;
          v28 = sub_100006398();
          v29 = objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "name"));
            v31 = v18;
            v32 = objc_msgSend(v25, "ratingValue");
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "movieOrShowContent"));
            v34 = v19;
            v35 = v20;
            v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "canonicalID"));
            *(_DWORD *)buf = 138412802;
            v62 = v30;
            v63 = 2048;
            v64 = v32;
            v18 = v31;
            v65 = 2112;
            v66 = v36;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - Up Next delta content not allowed by current restrictions: %@-%lu, %@", buf, 0x20u);

            v20 = v35;
            v19 = v34;
            v21 = v47;

            v14 = v48;
            a1 = v49;
          }

LABEL_26:
        }
        v50 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v55, v67, 16);
      }
      while (v50);
    }

    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v5 = v46;
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "removals"));
    v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
    if (v38)
    {
      v39 = v38;
      v40 = *(_QWORD *)v52;
      do
      {
        for (j = 0; j != v39; j = (char *)j + 1)
        {
          if (*(_QWORD *)v52 != v40)
            objc_enumerationMutation(v37);
          objc_msgSend(v20[76], "remove:fromCollection:", *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)j), a1[5], v45);
        }
        v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
      }
      while (v39);
    }

    v42 = (void *)a1[5];
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("timestamp"), 0));
    v59 = v43;
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v59, 1));
    objc_msgSend(v42, "sortUsingDescriptors:", v44);

    v6 = v45;
  }
  else if (v15)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - Up Next delta is nil", buf, 2u);
  }

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100007EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100007EC0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  id v15;
  id v16;
  NSObject *v17;
  int v18;
  id v19;
  __int16 v20;
  id v21;

  v3 = a2;
  v4 = objc_opt_class(WLKContinuationMetadata);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
    v5 = v3;
  else
    v5 = 0;
  v6 = v5;
  v7 = objc_opt_class(WLKDeltaContinuationMetadata);
  if ((objc_opt_isKindOfClass(v3, v7) & 1) != 0)
    v8 = v3;
  else
    v8 = 0;
  v9 = v8;
  v10 = 0;
  if (!objc_msgSend(v3, "isRental"))
    goto LABEL_16;
  if (v6)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playable"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "externalID"));

  }
  else if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "adamID"));
  }
  else
  {
    v10 = 0;
  }
  if (objc_msgSend(v10, "length"))
  {
    v12 = objc_claimAutoreleasedReturnValue(+[TVUNRentalUtilities validRentalWithIdentifier:inRentals:](TVUNRentalUtilities, "validRentalWithIdentifier:inRentals:", objc_msgSend(v10, "longLongValue"), *(_QWORD *)(a1 + 32)));
    if (v12)
    {
      v13 = (void *)v12;

      v10 = v13;
LABEL_16:
      v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "_contentItemWithContinuation:mediaItem:widgetSize:itemPosition:", v3, v10, *(_QWORD *)(a1 + 64), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)));
      if (v14)
      {
        objc_msgSend(*(id *)(a1 + 40), "addObject:", v14);
      }
      else
      {
        v16 = sub_100006398();
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v18 = 138412290;
          v19 = v3;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - No content item returned for %@", (uint8_t *)&v18, 0xCu);
        }

      }
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      goto LABEL_24;
    }
  }
  v15 = sub_100006398();
  v14 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v18 = 138412546;
    v19 = v10;
    v20 = 2112;
    v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "TVUNUpNextWidgetDataSource - Skipping Up Next rental. Lacks valid DB item %@ - %@", (uint8_t *)&v18, 0x16u);
  }
LABEL_24:

}

BOOL sub_100008A8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100008AA0()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100008AE4()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100008B0C(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100008B4C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for DynamicTypeSize(0);
  sub_10000905C(v0, qword_10011EBE8);
  v1 = sub_10000909C(v0, (uint64_t)qword_10011EBE8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for DynamicTypeSize.large(_:), v0);
}

uint64_t sub_100008BA4()
{
  return 1;
}

uint64_t sub_100008BAC(__int128 *a1)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  if (!sub_1000BAC94(2, 17, 0, 0))
    return v2;
  v3 = v2;
  return swift_getOpaqueTypeMetadata2(0, &v3, &opaque type descriptor for <<opaque return type of WidgetConfiguration._containerBackgroundRemovable(_:)>>, 0);
}

uint64_t sub_100008C10(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *a1;
  v1 = a1[1];
  if (sub_1000BAC94(2, 17, 0, 0))
  {
    v4[0] = v2;
    v4[1] = v1;
    return swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of WidgetConfiguration._containerBackgroundRemovable(_:)>>, 1);
  }
  return v1;
}

uint64_t sub_100008C6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = sub_100008EF4(&qword_100105ED0);
  v3 = sub_100008F34();
  return WidgetConfiguration._containerBackgroundRemovable(_:)(a1, v2, v3);
}

void sub_100008CB8(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_100008CC0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_100008CD4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_100008CE8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100008CFC(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_100008D2C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100008D58@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_100008D7C(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_100008D90(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_100008DA4(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_100008DB8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100008DCC(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_100008DE0(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_100008DF4(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_100008E08()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_100008E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_100008E30(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

BOOL sub_100008E44(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100008E58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100008EBC(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

_QWORD *sub_100008E94@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_100008EA0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100008EB0(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100008EBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_100008EF4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100008F34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100105ED8;
  if (!qword_100105ED8)
  {
    v1 = sub_100008F80(&qword_100105ED0);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100105ED8);
  }
  return result;
}

uint64_t sub_100008F80(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_100009524(a1, &qword_100105EE0, (uint64_t)&unk_1000F76C0);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_100009524(a1, &qword_100105EE8, (uint64_t)&unk_1000F76E8);
}

__n128 initializeWithTake for SportsWidgetClockViewLayout(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for WatchVStack(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WatchVStack(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_100009524(a1, &qword_100105EF0, (uint64_t)&unk_1000F7770);
}

uint64_t *sub_10000905C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_10000909C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

__n128 initializeWithTake for SportsWidgetScoreViewModel(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1000090C0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000090E0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100009524(a1, &qword_100105EF8, (uint64_t)&unk_1000F77F0);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_100009524(a1, &qword_100105F00, (uint64_t)&unk_1000F7870);
}

uint64_t initializeBufferWithCopyOfBuffer for SportsWidgetClockViewLayout(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for SportsWidgetClockViewLayout(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

uint64_t initializeWithCopy for SportsWidgetClockViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t assignWithCopy for SportsWidgetClockViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t assignWithTake for SportsWidgetClockViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetClockViewLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetClockViewLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetClockViewLayout()
{
  return &type metadata for SportsWidgetClockViewLayout;
}

_BYTE *initializeBufferWithCopyOfBuffer for SportsWidgetClockViewLayoutStyle(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SportsWidgetClockViewLayoutStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetClockViewLayoutStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100009434 + 4 * byte_1000C5415[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100009468 + 4 * byte_1000C5410[v4]))();
}

uint64_t sub_100009468(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100009470(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100009478);
  return result;
}

uint64_t sub_100009484(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10000948CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100009490(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100009498(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000094A4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000094B0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetClockViewLayoutStyle()
{
  return &type metadata for SportsWidgetClockViewLayoutStyle;
}

unint64_t sub_1000094CC()
{
  unint64_t result;

  result = qword_100105F08;
  if (!qword_100105F08)
  {
    result = swift_getWitnessTable(&unk_1000C5524, &type metadata for SportsWidgetClockViewLayoutStyle);
    atomic_store(result, (unint64_t *)&qword_100105F08);
  }
  return result;
}

void type metadata accessor for Unit(uint64_t a1)
{
  sub_100009524(a1, &qword_100105F10, (uint64_t)&unk_1000F79B0);
}

void sub_100009524(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100009568()
{
  return sub_1000095B0(&qword_100105F18, (uint64_t)&unk_1000C55A8);
}

uint64_t sub_10000958C()
{
  return sub_1000095B0(&qword_100105F20, (uint64_t)&unk_1000C5574);
}

uint64_t sub_1000095B0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Unit(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000095F0()
{
  return sub_1000095B0(&qword_100105F28, (uint64_t)&unk_1000C55D4);
}

uint64_t sub_100009614()
{
  return sub_1000095B0(&qword_100105F30, (uint64_t)&unk_1000C5610);
}

_QWORD *sub_100009648(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t EnumCaseMultiPayload;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t);
  void (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  char *v119;
  char *v120;
  void (*v121)(void *, char *, uint64_t, __n128);
  uint64_t v122;
  char *v123;
  char *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int (*v132)(char *, uint64_t, uint64_t, __n128);
  void *__dstb;
  void *__dstc;
  void *__dst;
  void *__dsta;
  uint64_t v137;
  int *v138;
  _QWORD *v139;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v15 = *(int *)(a3 + 20);
    v16 = a1;
    v17 = (char *)a1 + v15;
    v18 = v16;
    v139 = v16;
    v19 = (char *)a2 + v15;
    v20 = *(_QWORD *)v19;
    v21 = a3;
    v137 = a3;
    v22 = v19[8];
    sub_100009EE4(*(_QWORD *)v19, v22);
    *(_QWORD *)v17 = v20;
    v17[8] = v22;
    v23 = *(int *)(v21 + 24);
    v24 = (uint64_t)v18 + v23;
    v25 = (char *)a2 + v23;
    v26 = *(_OWORD *)((char *)a2 + v23 + 16);
    *(_OWORD *)v24 = *(_OWORD *)((char *)a2 + v23);
    *(_OWORD *)(v24 + 16) = v26;
    v27 = *(_OWORD *)((char *)a2 + v23 + 48);
    *(_OWORD *)(v24 + 32) = *(_OWORD *)((char *)a2 + v23 + 32);
    *(_OWORD *)(v24 + 48) = v27;
    v28 = *(_OWORD *)((char *)a2 + v23 + 80);
    *(_OWORD *)(v24 + 64) = *(_OWORD *)((char *)a2 + v23 + 64);
    *(_OWORD *)(v24 + 80) = v28;
    *(_OWORD *)(v24 + 96) = *(_OWORD *)((char *)a2 + v23 + 96);
    v29 = *(_QWORD *)((char *)a2 + v23 + 112);
    v30 = *(_QWORD *)((char *)a2 + v23 + 120);
    *(_QWORD *)(v24 + 112) = v29;
    *(_QWORD *)(v24 + 120) = v30;
    v31 = *(_QWORD *)((char *)a2 + v23 + 128);
    *(_QWORD *)(v24 + 128) = v31;
    *(_OWORD *)(v24 + 136) = *(_OWORD *)((char *)a2 + v23 + 136);
    *(_BYTE *)(v24 + 152) = *((_BYTE *)a2 + v23 + 152);
    *(_QWORD *)(v24 + 160) = *(_QWORD *)((char *)a2 + v23 + 160);
    *(_OWORD *)(v24 + 168) = *(_OWORD *)((char *)a2 + v23 + 168);
    v32 = *(_QWORD *)((char *)a2 + v23 + 192);
    *(_QWORD *)(v24 + 184) = *(_QWORD *)((char *)a2 + v23 + 184);
    *(_QWORD *)(v24 + 192) = v32;
    v33 = *(_QWORD *)((char *)a2 + v23 + 200);
    v34 = *(_QWORD *)((char *)a2 + v23 + 208);
    *(_QWORD *)(v24 + 200) = v33;
    *(_QWORD *)(v24 + 208) = v34;
    v35 = (int *)type metadata accessor for SportsWidgetContentViewLayout(0);
    v36 = v35[29];
    v129 = &v25[v36];
    __dstb = (void *)(v24 + v36);
    v125 = a2;
    v37 = type metadata accessor for Image.Scale(0);
    v121 = *(void (**)(void *, char *, uint64_t, __n128))(*(_QWORD *)(v37 - 8) + 16);
    swift_retain(v29);
    swift_retain(v30);
    swift_retain(v31);
    swift_bridgeObjectRetain(v32);
    swift_retain(v33);
    v38 = swift_retain(v34);
    v121(__dstb, v129, v37, v38);
    *(_QWORD *)(v24 + v35[30]) = *(_QWORD *)&v25[v35[30]];
    *(_QWORD *)(v24 + v35[31]) = *(_QWORD *)&v25[v35[31]];
    *(_QWORD *)(v24 + v35[32]) = *(_QWORD *)&v25[v35[32]];
    *(_QWORD *)(v24 + v35[33]) = *(_QWORD *)&v25[v35[33]];
    *(_QWORD *)(v24 + v35[34]) = *(_QWORD *)&v25[v35[34]];
    *(_QWORD *)(v24 + v35[35]) = *(_QWORD *)&v25[v35[35]];
    *(_QWORD *)(v24 + v35[36]) = *(_QWORD *)&v25[v35[36]];
    v39 = v35[37];
    v130 = *(_QWORD *)&v25[v39];
    *(_QWORD *)(v24 + v39) = v130;
    v40 = v35[38];
    __dstc = *(void **)&v25[v40];
    *(_QWORD *)(v24 + v40) = __dstc;
    *(_QWORD *)(v24 + v35[39]) = *(_QWORD *)&v25[v35[39]];
    *(_BYTE *)(v24 + v35[40]) = v25[v35[40]];
    *(_QWORD *)(v24 + v35[41]) = *(_QWORD *)&v25[v35[41]];
    v41 = *(int *)(v137 + 28);
    v42 = (uint64_t)v139 + v41;
    v43 = (char *)v125 + v41;
    v44 = *(_QWORD *)((char *)v125 + v41);
    v126 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = v44;
    *(_QWORD *)(v42 + 8) = v126;
    v122 = *((_QWORD *)v43 + 3);
    *(_QWORD *)(v42 + 16) = *((_QWORD *)v43 + 2);
    *(_QWORD *)(v42 + 24) = v122;
    v118 = *((_QWORD *)v43 + 5);
    *(_QWORD *)(v42 + 32) = *((_QWORD *)v43 + 4);
    *(_QWORD *)(v42 + 40) = v118;
    v115 = *((_QWORD *)v43 + 7);
    *(_QWORD *)(v42 + 48) = *((_QWORD *)v43 + 6);
    *(_QWORD *)(v42 + 56) = v115;
    v114 = *((_QWORD *)v43 + 9);
    *(_QWORD *)(v42 + 64) = *((_QWORD *)v43 + 8);
    *(_QWORD *)(v42 + 72) = v114;
    v45 = *((_QWORD *)v43 + 11);
    *(_QWORD *)(v42 + 80) = *((_QWORD *)v43 + 10);
    *(_QWORD *)(v42 + 88) = v45;
    *(_BYTE *)(v42 + 96) = v43[96];
    v112 = *((_QWORD *)v43 + 13);
    v113 = v45;
    *(_QWORD *)(v42 + 104) = v112;
    *(_BYTE *)(v42 + 112) = v43[112];
    v46 = *((_QWORD *)v43 + 16);
    *(_QWORD *)(v42 + 120) = *((_QWORD *)v43 + 15);
    *(_QWORD *)(v42 + 128) = v46;
    v111 = *((_QWORD *)v43 + 18);
    *(_QWORD *)(v42 + 136) = *((_QWORD *)v43 + 17);
    *(_QWORD *)(v42 + 144) = v111;
    v110 = *((_QWORD *)v43 + 20);
    *(_QWORD *)(v42 + 152) = *((_QWORD *)v43 + 19);
    *(_QWORD *)(v42 + 160) = v110;
    v47 = *((_QWORD *)v43 + 22);
    *(_QWORD *)(v42 + 168) = *((_QWORD *)v43 + 21);
    *(_QWORD *)(v42 + 176) = v47;
    v48 = *((_QWORD *)v43 + 24);
    *(_QWORD *)(v42 + 184) = *((_QWORD *)v43 + 23);
    *(_QWORD *)(v42 + 192) = v48;
    v49 = *((_QWORD *)v43 + 26);
    *(_QWORD *)(v42 + 200) = *((_QWORD *)v43 + 25);
    *(_QWORD *)(v42 + 208) = v49;
    *(_BYTE *)(v42 + 216) = v43[216];
    v50 = *((_QWORD *)v43 + 28);
    *(_QWORD *)(v42 + 224) = v50;
    *(_BYTE *)(v42 + 232) = v43[232];
    v138 = (int *)type metadata accessor for SportsWidgetContentViewModel(0);
    v51 = v138[6];
    v52 = (_QWORD *)(v42 + v51);
    v53 = &v43[v51];
    v54 = type metadata accessor for SportsWidgetClock(0);
    swift_retain(v130);
    swift_retain(__dstc);
    swift_bridgeObjectRetain(v126);
    swift_bridgeObjectRetain(v122);
    swift_bridgeObjectRetain(v118);
    swift_bridgeObjectRetain(v115);
    swift_bridgeObjectRetain(v114);
    swift_bridgeObjectRetain(v113);
    swift_retain(v112);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v111);
    swift_bridgeObjectRetain(v110);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v49);
    swift_retain(v50);
    __dst = (void *)v54;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v53, v54);
    v56 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v62 = *((_QWORD *)v53 + 1);
      *v52 = *(_QWORD *)v53;
      v52[1] = v62;
      v63 = *((_QWORD *)v53 + 3);
      v52[2] = *((_QWORD *)v53 + 2);
      v52[3] = v63;
      v127 = *((_QWORD *)v53 + 5);
      v52[4] = *((_QWORD *)v53 + 4);
      v52[5] = v127;
      v64 = *((_QWORD *)v53 + 7);
      v52[6] = *((_QWORD *)v53 + 6);
      v52[7] = v64;
      v65 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v66 = v65[8];
      v119 = &v53[v66];
      v123 = (char *)v52 + v66;
      v67 = type metadata accessor for Date(0);
      v68 = *(_QWORD *)(v67 - 8);
      v116 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRetain(v127);
      swift_bridgeObjectRetain(v64);
      v116(v123, v119, v67);
      v69 = sub_100008EF4(&qword_100105F40);
      v116(&v123[*(int *)(v69 + 36)], &v119[*(int *)(v69 + 36)], v67);
      v70 = v65[9];
      v71 = (char *)v52 + v70;
      v72 = &v53[v70];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(&v53[v70], 1, v67))
      {
        v73 = sub_100008EF4(&qword_100105F48);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        v116(v71, v72, v67);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v71, 0, 1, v67);
      }
      *((_BYTE *)v52 + v65[10]) = v53[v65[10]];
      *((_BYTE *)v52 + v65[11]) = v53[v65[11]];
      v86 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
      v87 = *(_QWORD *)&v53[v86];
      *(_QWORD *)((char *)v52 + v86) = v87;
      swift_bridgeObjectRetain(v87);
      v61 = __dst;
      v56 = 2;
    }
    else if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      v57 = *(_QWORD *)v53;
      v58 = *((_QWORD *)v53 + 1);
      *v52 = *(_QWORD *)v53;
      v52[1] = v58;
      v59 = *((_QWORD *)v53 + 3);
      v52[2] = *((_QWORD *)v53 + 2);
      v52[3] = v59;
      v60 = *((_QWORD *)v53 + 5);
      v52[4] = *((_QWORD *)v53 + 4);
      v52[5] = v60;
      *((_BYTE *)v52 + 48) = v53[48];
      swift_bridgeObjectRetain(v57);
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v60);
      v61 = __dst;
    }
    else
    {
      v131 = EnumCaseMultiPayload;
      v74 = *((_QWORD *)v53 + 1);
      *v52 = *(_QWORD *)v53;
      v52[1] = v74;
      v75 = *((_QWORD *)v53 + 3);
      v52[2] = *((_QWORD *)v53 + 2);
      v52[3] = v75;
      v128 = *((_QWORD *)v53 + 5);
      v52[4] = *((_QWORD *)v53 + 4);
      v52[5] = v128;
      v76 = *((_QWORD *)v53 + 7);
      v52[6] = *((_QWORD *)v53 + 6);
      v52[7] = v76;
      v77 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v78 = v77[8];
      v120 = &v53[v78];
      v124 = (char *)v52 + v78;
      v79 = type metadata accessor for Date(0);
      v80 = *(_QWORD *)(v79 - 8);
      v117 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v128);
      swift_bridgeObjectRetain(v76);
      v117(v124, v120, v79);
      v81 = sub_100008EF4(&qword_100105F40);
      v117(&v124[*(int *)(v81 + 36)], &v120[*(int *)(v81 + 36)], v79);
      v82 = v77[9];
      v83 = (char *)v52 + v82;
      v84 = &v53[v82];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(&v53[v82], 1, v79))
      {
        v85 = sub_100008EF4(&qword_100105F48);
        memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        v117(v83, v84, v79);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v83, 0, 1, v79);
      }
      v61 = __dst;
      v56 = v131;
      *((_BYTE *)v52 + v77[10]) = v53[v77[10]];
      *((_BYTE *)v52 + v77[11]) = v53[v77[11]];
    }
    swift_storeEnumTagMultiPayload(v52, v61, v56);
    v88 = v138[7];
    v89 = (_QWORD *)(v42 + v88);
    v90 = &v43[v88];
    v91 = *((_QWORD *)v90 + 1);
    *v89 = *(_QWORD *)v90;
    v89[1] = v91;
    v92 = *((_QWORD *)v90 + 3);
    v89[2] = *((_QWORD *)v90 + 2);
    v89[3] = v92;
    v93 = v138[8];
    v94 = v42 + v93;
    v95 = &v43[v93];
    v96 = *((_QWORD *)v95 + 1);
    *(_QWORD *)v94 = *(_QWORD *)v95;
    *(_QWORD *)(v94 + 8) = v96;
    *(_BYTE *)(v94 + 16) = v95[16];
    v97 = *((_QWORD *)v95 + 3);
    *(_QWORD *)(v94 + 24) = v97;
    *(_BYTE *)(v94 + 32) = v95[32];
    v98 = *((_QWORD *)v95 + 5);
    *(_QWORD *)(v94 + 40) = v98;
    *(_BYTE *)(v94 + 48) = v95[48];
    *(_BYTE *)(v42 + v138[9]) = v43[v138[9]];
    *(_BYTE *)(v42 + v138[10]) = v43[v138[10]];
    *(_BYTE *)(v42 + v138[11]) = v43[v138[11]];
    *(_BYTE *)(v42 + v138[12]) = v43[v138[12]];
    v99 = v138[13];
    __dsta = (void *)(v42 + v99);
    v100 = &v43[v99];
    v101 = type metadata accessor for URL(0);
    v102 = *(_QWORD *)(v101 - 8);
    v132 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v102 + 48);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v96);
    swift_retain(v97);
    v103 = swift_retain(v98);
    if (v132(v100, 1, v101, v103))
    {
      v104 = sub_100008EF4(&qword_100105F50);
      memcpy(__dsta, v100, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v102 + 16))(__dsta, v100, v101);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v102 + 56))(__dsta, 0, 1, v101);
    }
    v13 = v139;
    *(_BYTE *)(v42 + v138[14]) = v43[v138[14]];
    v105 = v138[15];
    v106 = (_QWORD *)(v42 + v105);
    v107 = &v43[v105];
    v108 = *((_QWORD *)v107 + 1);
    *v106 = *(_QWORD *)v107;
    v106[1] = v108;
    swift_bridgeObjectRetain(v108);
  }
  return v13;
}

uint64_t sub_100009EE4(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_100009EF0(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  int *v11;
  _QWORD *v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  v4 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_10000A2AC(*(_QWORD *)((char *)a1 + a2[5]), *((_BYTE *)a1 + a2[5] + 8));
  v6 = (_QWORD *)((char *)a1 + a2[6]);
  swift_release(v6[14]);
  swift_release(v6[15]);
  swift_release(v6[16]);
  swift_bridgeObjectRelease(v6[24]);
  swift_release(v6[25]);
  swift_release(v6[26]);
  v7 = (int *)type metadata accessor for SportsWidgetContentViewLayout(0);
  v8 = (char *)v6 + v7[29];
  v9 = type metadata accessor for Image.Scale(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release(*(_QWORD *)((char *)v6 + v7[37]));
  swift_release(*(_QWORD *)((char *)v6 + v7[38]));
  v10 = (_QWORD *)((char *)a1 + a2[7]);
  swift_bridgeObjectRelease(v10[1]);
  swift_bridgeObjectRelease(v10[3]);
  swift_bridgeObjectRelease(v10[5]);
  swift_bridgeObjectRelease(v10[7]);
  swift_bridgeObjectRelease(v10[9]);
  swift_bridgeObjectRelease(v10[11]);
  swift_release(v10[13]);
  swift_bridgeObjectRelease(v10[16]);
  swift_bridgeObjectRelease(v10[18]);
  swift_bridgeObjectRelease(v10[20]);
  swift_bridgeObjectRelease(v10[22]);
  swift_bridgeObjectRelease(v10[24]);
  swift_bridgeObjectRelease(v10[26]);
  swift_release(v10[28]);
  v11 = (int *)type metadata accessor for SportsWidgetContentViewModel(0);
  v12 = (_QWORD *)((char *)v10 + v11[6]);
  v13 = type metadata accessor for SportsWidgetClock(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v13);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease(v12[1]);
      swift_bridgeObjectRelease(v12[3]);
      swift_bridgeObjectRelease(v12[5]);
      swift_bridgeObjectRelease(v12[7]);
      v22 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v23 = (char *)v12 + *(int *)(v22 + 32);
      v24 = type metadata accessor for Date(0);
      v25 = *(_QWORD *)(v24 - 8);
      v26 = *(void (**)(char *, uint64_t))(v25 + 8);
      v26(v23, v24);
      v27 = sub_100008EF4(&qword_100105F40);
      v26(&v23[*(int *)(v27 + 36)], v24);
      v28 = (char *)v12 + *(int *)(v22 + 36);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v28, 1, v24))
        v26(v28, v24);
      v29 = *(_QWORD *)((char *)v12 + *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20));
      goto LABEL_13;
    case 1:
      swift_bridgeObjectRelease(*v12);
      swift_bridgeObjectRelease(v12[1]);
      swift_bridgeObjectRelease(v12[3]);
      v29 = v12[5];
LABEL_13:
      swift_bridgeObjectRelease(v29);
      break;
    case 0:
      swift_bridgeObjectRelease(v12[1]);
      swift_bridgeObjectRelease(v12[3]);
      swift_bridgeObjectRelease(v12[5]);
      swift_bridgeObjectRelease(v12[7]);
      v15 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v16 = (char *)v12 + *(int *)(v15 + 32);
      v17 = type metadata accessor for Date(0);
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(void (**)(char *, uint64_t))(v18 + 8);
      v19(v16, v17);
      v20 = sub_100008EF4(&qword_100105F40);
      v19(&v16[*(int *)(v20 + 36)], v17);
      v21 = (char *)v12 + *(int *)(v15 + 36);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v21, 1, v17))
        v19(v21, v17);
      break;
  }
  v30 = (char *)v10 + v11[7];
  swift_bridgeObjectRelease(*((_QWORD *)v30 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v30 + 3));
  v31 = (_QWORD *)((char *)v10 + v11[8]);
  swift_bridgeObjectRelease(v31[1]);
  swift_release(v31[3]);
  swift_release(v31[5]);
  v32 = (char *)v10 + v11[13];
  v33 = type metadata accessor for URL(0);
  v34 = *(_QWORD *)(v33 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)v10 + v11[15] + 8));
}

uint64_t sub_10000A2AC(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

_QWORD *sub_10000A2B8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  int *v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t EnumCaseMultiPayload;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  void (*v114)(char *, char *, uint64_t);
  uint64_t v115;
  char *v116;
  char *v117;
  void (*v118)(uint64_t, char *, uint64_t, __n128);
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int (*v129)(char *, uint64_t, uint64_t, __n128);
  int *__dstb;
  void *__dstc;
  void *__dst;
  void *__dsta;
  _QWORD *v134;
  int *v135;
  _QWORD *v136;

  v6 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a1;
  v14 = (char *)a1 + v12;
  v15 = v13;
  v136 = v13;
  v16 = (char *)a2 + v12;
  v17 = *(_QWORD *)v16;
  v18 = a3;
  __dstb = a3;
  v19 = v16[8];
  sub_100009EE4(*(_QWORD *)v16, v19);
  *(_QWORD *)v14 = v17;
  v14[8] = v19;
  v20 = v18[6];
  v21 = a2;
  v134 = a2;
  v22 = (uint64_t)v15 + v20;
  v23 = (char *)v21 + v20;
  v24 = *(_OWORD *)((char *)v21 + v20 + 16);
  *(_OWORD *)v22 = *(_OWORD *)((char *)v21 + v20);
  *(_OWORD *)(v22 + 16) = v24;
  v25 = *(_OWORD *)((char *)v21 + v20 + 48);
  *(_OWORD *)(v22 + 32) = *(_OWORD *)((char *)v21 + v20 + 32);
  *(_OWORD *)(v22 + 48) = v25;
  v26 = *(_OWORD *)((char *)v21 + v20 + 80);
  *(_OWORD *)(v22 + 64) = *(_OWORD *)((char *)v21 + v20 + 64);
  *(_OWORD *)(v22 + 80) = v26;
  *(_OWORD *)(v22 + 96) = *(_OWORD *)((char *)v21 + v20 + 96);
  v27 = *(_QWORD *)((char *)v21 + v20 + 112);
  v28 = *(_QWORD *)((char *)v21 + v20 + 120);
  *(_QWORD *)(v22 + 112) = v27;
  *(_QWORD *)(v22 + 120) = v28;
  v29 = *(_QWORD *)((char *)v21 + v20 + 128);
  *(_QWORD *)(v22 + 128) = v29;
  *(_OWORD *)(v22 + 136) = *(_OWORD *)((char *)v21 + v20 + 136);
  *(_BYTE *)(v22 + 152) = *((_BYTE *)v21 + v20 + 152);
  *(_QWORD *)(v22 + 160) = *(_QWORD *)((char *)v21 + v20 + 160);
  *(_OWORD *)(v22 + 168) = *(_OWORD *)((char *)v21 + v20 + 168);
  v30 = *(_QWORD *)((char *)v21 + v20 + 192);
  *(_QWORD *)(v22 + 184) = *(_QWORD *)((char *)v21 + v20 + 184);
  *(_QWORD *)(v22 + 192) = v30;
  v31 = *(_QWORD *)((char *)v21 + v20 + 200);
  v32 = *(_QWORD *)((char *)v21 + v20 + 208);
  *(_QWORD *)(v22 + 200) = v31;
  *(_QWORD *)(v22 + 208) = v32;
  v33 = (int *)type metadata accessor for SportsWidgetContentViewLayout(0);
  v34 = v33[29];
  v122 = &v23[v34];
  v126 = v22 + v34;
  v35 = type metadata accessor for Image.Scale(0);
  v118 = *(void (**)(uint64_t, char *, uint64_t, __n128))(*(_QWORD *)(v35 - 8) + 16);
  swift_retain(v27);
  swift_retain(v28);
  swift_retain(v29);
  swift_bridgeObjectRetain(v30);
  swift_retain(v31);
  v36 = swift_retain(v32);
  v118(v126, v122, v35, v36);
  *(_QWORD *)(v22 + v33[30]) = *(_QWORD *)&v23[v33[30]];
  *(_QWORD *)(v22 + v33[31]) = *(_QWORD *)&v23[v33[31]];
  *(_QWORD *)(v22 + v33[32]) = *(_QWORD *)&v23[v33[32]];
  *(_QWORD *)(v22 + v33[33]) = *(_QWORD *)&v23[v33[33]];
  *(_QWORD *)(v22 + v33[34]) = *(_QWORD *)&v23[v33[34]];
  *(_QWORD *)(v22 + v33[35]) = *(_QWORD *)&v23[v33[35]];
  *(_QWORD *)(v22 + v33[36]) = *(_QWORD *)&v23[v33[36]];
  v37 = v33[37];
  v123 = *(_QWORD *)&v23[v37];
  *(_QWORD *)(v22 + v37) = v123;
  v38 = v33[38];
  v127 = *(_QWORD *)&v23[v38];
  *(_QWORD *)(v22 + v38) = v127;
  *(_QWORD *)(v22 + v33[39]) = *(_QWORD *)&v23[v33[39]];
  *(_BYTE *)(v22 + v33[40]) = v23[v33[40]];
  *(_QWORD *)(v22 + v33[41]) = *(_QWORD *)&v23[v33[41]];
  v39 = __dstb[7];
  v40 = (uint64_t)v136 + v39;
  v41 = (char *)v134 + v39;
  __dstc = *(void **)((char *)v134 + v39 + 8);
  *(_QWORD *)v40 = *(_QWORD *)((char *)v134 + v39);
  *(_QWORD *)(v40 + 8) = __dstc;
  v119 = *(_QWORD *)((char *)v134 + v39 + 24);
  *(_QWORD *)(v40 + 16) = *(_QWORD *)((char *)v134 + v39 + 16);
  *(_QWORD *)(v40 + 24) = v119;
  v115 = *(_QWORD *)((char *)v134 + v39 + 40);
  *(_QWORD *)(v40 + 32) = *(_QWORD *)((char *)v134 + v39 + 32);
  *(_QWORD *)(v40 + 40) = v115;
  v112 = *(_QWORD *)((char *)v134 + v39 + 56);
  *(_QWORD *)(v40 + 48) = *(_QWORD *)((char *)v134 + v39 + 48);
  *(_QWORD *)(v40 + 56) = v112;
  v111 = *(_QWORD *)((char *)v134 + v39 + 72);
  *(_QWORD *)(v40 + 64) = *(_QWORD *)((char *)v134 + v39 + 64);
  *(_QWORD *)(v40 + 72) = v111;
  v42 = *(_QWORD *)((char *)v134 + v39 + 88);
  *(_QWORD *)(v40 + 80) = *(_QWORD *)((char *)v134 + v39 + 80);
  *(_QWORD *)(v40 + 88) = v42;
  *(_BYTE *)(v40 + 96) = *((_BYTE *)v134 + v39 + 96);
  v109 = *(_QWORD *)((char *)v134 + v39 + 104);
  v110 = v42;
  *(_QWORD *)(v40 + 104) = v109;
  *(_BYTE *)(v40 + 112) = *((_BYTE *)v134 + v39 + 112);
  v43 = *(_QWORD *)((char *)v134 + v39 + 128);
  *(_QWORD *)(v40 + 120) = *(_QWORD *)((char *)v134 + v39 + 120);
  *(_QWORD *)(v40 + 128) = v43;
  v108 = *(_QWORD *)((char *)v134 + v39 + 144);
  *(_QWORD *)(v40 + 136) = *(_QWORD *)((char *)v134 + v39 + 136);
  *(_QWORD *)(v40 + 144) = v108;
  v107 = *(_QWORD *)((char *)v134 + v39 + 160);
  *(_QWORD *)(v40 + 152) = *(_QWORD *)((char *)v134 + v39 + 152);
  *(_QWORD *)(v40 + 160) = v107;
  v44 = *(_QWORD *)((char *)v134 + v39 + 176);
  *(_QWORD *)(v40 + 168) = *(_QWORD *)((char *)v134 + v39 + 168);
  *(_QWORD *)(v40 + 176) = v44;
  v45 = *(_QWORD *)((char *)v134 + v39 + 192);
  *(_QWORD *)(v40 + 184) = *(_QWORD *)((char *)v134 + v39 + 184);
  *(_QWORD *)(v40 + 192) = v45;
  v46 = *(_QWORD *)((char *)v134 + v39 + 208);
  *(_QWORD *)(v40 + 200) = *(_QWORD *)((char *)v134 + v39 + 200);
  *(_QWORD *)(v40 + 208) = v46;
  *(_BYTE *)(v40 + 216) = *((_BYTE *)v134 + v39 + 216);
  v47 = *(_QWORD *)((char *)v134 + v39 + 224);
  *(_QWORD *)(v40 + 224) = v47;
  *(_BYTE *)(v40 + 232) = *((_BYTE *)v134 + v39 + 232);
  v135 = (int *)type metadata accessor for SportsWidgetContentViewModel(0);
  v48 = v135[6];
  v49 = (_QWORD *)(v40 + v48);
  v50 = &v41[v48];
  v51 = type metadata accessor for SportsWidgetClock(0);
  swift_retain(v123);
  swift_retain(v127);
  swift_bridgeObjectRetain(__dstc);
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRetain(v111);
  swift_bridgeObjectRetain(v110);
  swift_retain(v109);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v46);
  swift_retain(v47);
  __dst = (void *)v51;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v50, v51);
  v53 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v59 = *((_QWORD *)v50 + 1);
    *v49 = *(_QWORD *)v50;
    v49[1] = v59;
    v60 = *((_QWORD *)v50 + 3);
    v49[2] = *((_QWORD *)v50 + 2);
    v49[3] = v60;
    v124 = *((_QWORD *)v50 + 5);
    v49[4] = *((_QWORD *)v50 + 4);
    v49[5] = v124;
    v61 = *((_QWORD *)v50 + 7);
    v49[6] = *((_QWORD *)v50 + 6);
    v49[7] = v61;
    v62 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v63 = v62[8];
    v116 = &v50[v63];
    v120 = (char *)v49 + v63;
    v64 = type metadata accessor for Date(0);
    v65 = *(_QWORD *)(v64 - 8);
    v113 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v124);
    swift_bridgeObjectRetain(v61);
    v113(v120, v116, v64);
    v66 = sub_100008EF4(&qword_100105F40);
    v113(&v120[*(int *)(v66 + 36)], &v116[*(int *)(v66 + 36)], v64);
    v67 = v62[9];
    v68 = (char *)v49 + v67;
    v69 = &v50[v67];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(&v50[v67], 1, v64))
    {
      v70 = sub_100008EF4(&qword_100105F48);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    else
    {
      v113(v68, v69, v64);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v68, 0, 1, v64);
    }
    *((_BYTE *)v49 + v62[10]) = v50[v62[10]];
    *((_BYTE *)v49 + v62[11]) = v50[v62[11]];
    v83 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
    v84 = *(_QWORD *)&v50[v83];
    *(_QWORD *)((char *)v49 + v83) = v84;
    swift_bridgeObjectRetain(v84);
    v58 = __dst;
    v53 = 2;
  }
  else if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v54 = *(_QWORD *)v50;
    v55 = *((_QWORD *)v50 + 1);
    *v49 = *(_QWORD *)v50;
    v49[1] = v55;
    v56 = *((_QWORD *)v50 + 3);
    v49[2] = *((_QWORD *)v50 + 2);
    v49[3] = v56;
    v57 = *((_QWORD *)v50 + 5);
    v49[4] = *((_QWORD *)v50 + 4);
    v49[5] = v57;
    *((_BYTE *)v49 + 48) = v50[48];
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v57);
    v58 = __dst;
  }
  else
  {
    v128 = EnumCaseMultiPayload;
    v71 = *((_QWORD *)v50 + 1);
    *v49 = *(_QWORD *)v50;
    v49[1] = v71;
    v72 = *((_QWORD *)v50 + 3);
    v49[2] = *((_QWORD *)v50 + 2);
    v49[3] = v72;
    v125 = *((_QWORD *)v50 + 5);
    v49[4] = *((_QWORD *)v50 + 4);
    v49[5] = v125;
    v73 = *((_QWORD *)v50 + 7);
    v49[6] = *((_QWORD *)v50 + 6);
    v49[7] = v73;
    v74 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v75 = v74[8];
    v117 = &v50[v75];
    v121 = (char *)v49 + v75;
    v76 = type metadata accessor for Date(0);
    v77 = *(_QWORD *)(v76 - 8);
    v114 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v125);
    swift_bridgeObjectRetain(v73);
    v114(v121, v117, v76);
    v78 = sub_100008EF4(&qword_100105F40);
    v114(&v121[*(int *)(v78 + 36)], &v117[*(int *)(v78 + 36)], v76);
    v79 = v74[9];
    v80 = (char *)v49 + v79;
    v81 = &v50[v79];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(&v50[v79], 1, v76))
    {
      v82 = sub_100008EF4(&qword_100105F48);
      memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      v114(v80, v81, v76);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v80, 0, 1, v76);
    }
    v58 = __dst;
    v53 = v128;
    *((_BYTE *)v49 + v74[10]) = v50[v74[10]];
    *((_BYTE *)v49 + v74[11]) = v50[v74[11]];
  }
  swift_storeEnumTagMultiPayload(v49, v58, v53);
  v85 = v135[7];
  v86 = (_QWORD *)(v40 + v85);
  v87 = &v41[v85];
  v88 = *((_QWORD *)v87 + 1);
  *v86 = *(_QWORD *)v87;
  v86[1] = v88;
  v89 = *((_QWORD *)v87 + 3);
  v86[2] = *((_QWORD *)v87 + 2);
  v86[3] = v89;
  v90 = v135[8];
  v91 = v40 + v90;
  v92 = &v41[v90];
  v93 = *((_QWORD *)v92 + 1);
  *(_QWORD *)v91 = *(_QWORD *)v92;
  *(_QWORD *)(v91 + 8) = v93;
  *(_BYTE *)(v91 + 16) = v92[16];
  v94 = *((_QWORD *)v92 + 3);
  *(_QWORD *)(v91 + 24) = v94;
  *(_BYTE *)(v91 + 32) = v92[32];
  v95 = *((_QWORD *)v92 + 5);
  *(_QWORD *)(v91 + 40) = v95;
  *(_BYTE *)(v91 + 48) = v92[48];
  *(_BYTE *)(v40 + v135[9]) = v41[v135[9]];
  *(_BYTE *)(v40 + v135[10]) = v41[v135[10]];
  *(_BYTE *)(v40 + v135[11]) = v41[v135[11]];
  *(_BYTE *)(v40 + v135[12]) = v41[v135[12]];
  v96 = v135[13];
  __dsta = (void *)(v40 + v96);
  v97 = &v41[v96];
  v98 = type metadata accessor for URL(0);
  v99 = *(_QWORD *)(v98 - 8);
  v129 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v99 + 48);
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v93);
  swift_retain(v94);
  v100 = swift_retain(v95);
  if (v129(v97, 1, v98, v100))
  {
    v101 = sub_100008EF4(&qword_100105F50);
    memcpy(__dsta, v97, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v99 + 16))(__dsta, v97, v98);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v99 + 56))(__dsta, 0, 1, v98);
  }
  *(_BYTE *)(v40 + v135[14]) = v41[v135[14]];
  v102 = v135[15];
  v103 = (_QWORD *)(v40 + v102);
  v104 = &v41[v102];
  v105 = *((_QWORD *)v104 + 1);
  *v103 = *(_QWORD *)v104;
  v103[1] = v105;
  swift_bridgeObjectRetain(v105);
  return v136;
}

uint64_t *sub_10000AB2C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t EnumCaseMultiPayload;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(char *, uint64_t, uint64_t);
  int v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v146;
  char *v147;
  char *v148;
  int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(char *, char *, uint64_t);
  unsigned int v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;

  v5 = (uint64_t *)a1;
  if ((uint64_t *)a1 != a2)
  {
    sub_1000135A0(a1, &qword_100105F38);
    v6 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, a2, v7);
      v8 = v5;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *v5 = *a2;
      swift_retain(v11);
      v8 = v5;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)v5 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_100009EE4(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_10000A2AC(v17, v18);
  v19 = a3[6];
  v20 = (char *)v5 + v19;
  v21 = (char *)a2 + v19;
  *(_QWORD *)v20 = *(uint64_t *)((char *)a2 + v19);
  *((_QWORD *)v20 + 1) = *(uint64_t *)((char *)a2 + v19 + 8);
  *((_QWORD *)v20 + 2) = *(uint64_t *)((char *)a2 + v19 + 16);
  *((_QWORD *)v20 + 3) = *(uint64_t *)((char *)a2 + v19 + 24);
  *((_QWORD *)v20 + 4) = *(uint64_t *)((char *)a2 + v19 + 32);
  *((_QWORD *)v20 + 5) = *(uint64_t *)((char *)a2 + v19 + 40);
  *((_QWORD *)v20 + 6) = *(uint64_t *)((char *)a2 + v19 + 48);
  *((_QWORD *)v20 + 7) = *(uint64_t *)((char *)a2 + v19 + 56);
  *((_QWORD *)v20 + 8) = *(uint64_t *)((char *)a2 + v19 + 64);
  *((_QWORD *)v20 + 9) = *(uint64_t *)((char *)a2 + v19 + 72);
  *((_QWORD *)v20 + 10) = *(uint64_t *)((char *)a2 + v19 + 80);
  *((_QWORD *)v20 + 11) = *(uint64_t *)((char *)a2 + v19 + 88);
  *((_QWORD *)v20 + 12) = *(uint64_t *)((char *)a2 + v19 + 96);
  *((_QWORD *)v20 + 13) = *(uint64_t *)((char *)a2 + v19 + 104);
  v22 = *(uint64_t *)((char *)a2 + v19 + 112);
  v23 = *(uint64_t *)((char *)v5 + v19 + 112);
  *((_QWORD *)v20 + 14) = v22;
  swift_retain(v22);
  swift_release(v23);
  v24 = *((_QWORD *)v21 + 15);
  v25 = *((_QWORD *)v20 + 15);
  *((_QWORD *)v20 + 15) = v24;
  swift_retain(v24);
  swift_release(v25);
  v26 = *((_QWORD *)v21 + 16);
  v27 = *((_QWORD *)v20 + 16);
  *((_QWORD *)v20 + 16) = v26;
  swift_retain(v26);
  swift_release(v27);
  *((_QWORD *)v20 + 17) = *((_QWORD *)v21 + 17);
  *((_QWORD *)v20 + 18) = *((_QWORD *)v21 + 18);
  v20[152] = v21[152];
  *((_QWORD *)v20 + 20) = *((_QWORD *)v21 + 20);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v21 + 21);
  *((_QWORD *)v20 + 22) = *((_QWORD *)v21 + 22);
  *((_QWORD *)v20 + 23) = *((_QWORD *)v21 + 23);
  v28 = *((_QWORD *)v21 + 24);
  v29 = *((_QWORD *)v20 + 24);
  *((_QWORD *)v20 + 24) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = *((_QWORD *)v21 + 25);
  v31 = *((_QWORD *)v20 + 25);
  *((_QWORD *)v20 + 25) = v30;
  swift_retain(v30);
  swift_release(v31);
  v32 = *((_QWORD *)v21 + 26);
  v33 = *((_QWORD *)v20 + 26);
  *((_QWORD *)v20 + 26) = v32;
  swift_retain(v32);
  swift_release(v33);
  v34 = (int *)type metadata accessor for SportsWidgetContentViewLayout(0);
  v35 = v34[29];
  v36 = &v20[v35];
  v37 = &v21[v35];
  v38 = type metadata accessor for Image.Scale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  *(_QWORD *)&v20[v34[30]] = *(_QWORD *)&v21[v34[30]];
  *(_QWORD *)&v20[v34[31]] = *(_QWORD *)&v21[v34[31]];
  *(_QWORD *)&v20[v34[32]] = *(_QWORD *)&v21[v34[32]];
  *(_QWORD *)&v20[v34[33]] = *(_QWORD *)&v21[v34[33]];
  *(_QWORD *)&v20[v34[34]] = *(_QWORD *)&v21[v34[34]];
  *(_QWORD *)&v20[v34[35]] = *(_QWORD *)&v21[v34[35]];
  *(_QWORD *)&v20[v34[36]] = *(_QWORD *)&v21[v34[36]];
  v39 = v34[37];
  v40 = *(_QWORD *)&v21[v39];
  v41 = *(_QWORD *)&v20[v39];
  *(_QWORD *)&v20[v39] = v40;
  swift_retain(v40);
  swift_release(v41);
  v42 = v34[38];
  v43 = *(_QWORD *)&v21[v42];
  v44 = *(_QWORD *)&v20[v42];
  *(_QWORD *)&v20[v42] = v43;
  swift_retain(v43);
  swift_release(v44);
  *(_QWORD *)&v20[v34[39]] = *(_QWORD *)&v21[v34[39]];
  v20[v34[40]] = v21[v34[40]];
  *(_QWORD *)&v20[v34[41]] = *(_QWORD *)&v21[v34[41]];
  v45 = a3[7];
  v46 = (char *)v5 + v45;
  v47 = (char *)a2 + v45;
  *(_QWORD *)v46 = *(uint64_t *)((char *)a2 + v45);
  v48 = *(uint64_t *)((char *)a2 + v45 + 8);
  v49 = *(uint64_t *)((char *)v5 + v45 + 8);
  *((_QWORD *)v46 + 1) = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  *((_QWORD *)v46 + 2) = *((_QWORD *)v47 + 2);
  v50 = *((_QWORD *)v47 + 3);
  v51 = *((_QWORD *)v46 + 3);
  *((_QWORD *)v46 + 3) = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  *((_QWORD *)v46 + 4) = *((_QWORD *)v47 + 4);
  v52 = *((_QWORD *)v47 + 5);
  v53 = *((_QWORD *)v46 + 5);
  *((_QWORD *)v46 + 5) = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  *((_QWORD *)v46 + 6) = *((_QWORD *)v47 + 6);
  v54 = *((_QWORD *)v47 + 7);
  v55 = *((_QWORD *)v46 + 7);
  *((_QWORD *)v46 + 7) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  *((_QWORD *)v46 + 8) = *((_QWORD *)v47 + 8);
  v56 = *((_QWORD *)v47 + 9);
  v57 = *((_QWORD *)v46 + 9);
  *((_QWORD *)v46 + 9) = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  *((_QWORD *)v46 + 10) = *((_QWORD *)v47 + 10);
  v58 = *((_QWORD *)v47 + 11);
  v59 = *((_QWORD *)v46 + 11);
  *((_QWORD *)v46 + 11) = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59);
  v46[96] = v47[96];
  v60 = *((_QWORD *)v47 + 13);
  v61 = *((_QWORD *)v46 + 13);
  *((_QWORD *)v46 + 13) = v60;
  swift_retain(v60);
  swift_release(v61);
  v46[112] = v47[112];
  *((_QWORD *)v46 + 15) = *((_QWORD *)v47 + 15);
  v62 = *((_QWORD *)v47 + 16);
  v63 = *((_QWORD *)v46 + 16);
  *((_QWORD *)v46 + 16) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  *((_QWORD *)v46 + 17) = *((_QWORD *)v47 + 17);
  v64 = *((_QWORD *)v47 + 18);
  v65 = *((_QWORD *)v46 + 18);
  *((_QWORD *)v46 + 18) = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease(v65);
  *((_QWORD *)v46 + 19) = *((_QWORD *)v47 + 19);
  v66 = *((_QWORD *)v47 + 20);
  v67 = *((_QWORD *)v46 + 20);
  *((_QWORD *)v46 + 20) = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  *((_QWORD *)v46 + 21) = *((_QWORD *)v47 + 21);
  v68 = *((_QWORD *)v47 + 22);
  v69 = *((_QWORD *)v46 + 22);
  *((_QWORD *)v46 + 22) = v68;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRelease(v69);
  *((_QWORD *)v46 + 23) = *((_QWORD *)v47 + 23);
  v70 = *((_QWORD *)v47 + 24);
  v71 = *((_QWORD *)v46 + 24);
  *((_QWORD *)v46 + 24) = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRelease(v71);
  *((_QWORD *)v46 + 25) = *((_QWORD *)v47 + 25);
  v72 = *((_QWORD *)v47 + 26);
  v73 = *((_QWORD *)v46 + 26);
  *((_QWORD *)v46 + 26) = v72;
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRelease(v73);
  v46[216] = v47[216];
  v74 = *((_QWORD *)v47 + 28);
  v75 = *((_QWORD *)v46 + 28);
  *((_QWORD *)v46 + 28) = v74;
  swift_retain(v74);
  swift_release(v75);
  v46[232] = v47[232];
  v76 = type metadata accessor for SportsWidgetContentViewModel(0);
  v77 = (int *)v76;
  if (v5 != a2)
  {
    v78 = *(int *)(v76 + 24);
    v79 = &v46[v78];
    v80 = &v47[v78];
    sub_100013520((uint64_t)&v46[v78], type metadata accessor for SportsWidgetClock);
    v81 = type metadata accessor for SportsWidgetClock(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v80, v81);
    v83 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v158 = 2;
      v159 = v5;
      v161 = v81;
      *(_QWORD *)v79 = *(_QWORD *)v80;
      v90 = *((_QWORD *)v80 + 1);
      *((_QWORD *)v79 + 1) = v90;
      *((_QWORD *)v79 + 2) = *((_QWORD *)v80 + 2);
      v152 = *((_QWORD *)v80 + 3);
      *((_QWORD *)v79 + 3) = v152;
      *((_QWORD *)v79 + 4) = *((_QWORD *)v80 + 4);
      v150 = *((_QWORD *)v80 + 5);
      *((_QWORD *)v79 + 5) = v150;
      *((_QWORD *)v79 + 6) = *((_QWORD *)v80 + 6);
      v91 = *((_QWORD *)v80 + 7);
      *((_QWORD *)v79 + 7) = v91;
      v92 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v93 = *(int *)(v92 + 32);
      v146 = &v80[v93];
      v148 = &v79[v93];
      v94 = type metadata accessor for Date(0);
      v155 = *(_QWORD *)(v94 - 8);
      v95 = *(void (**)(char *, char *, uint64_t))(v155 + 16);
      swift_bridgeObjectRetain(v90);
      swift_bridgeObjectRetain(v152);
      swift_bridgeObjectRetain(v150);
      swift_bridgeObjectRetain(v91);
      v95(v148, v146, v94);
      v96 = sub_100008EF4(&qword_100105F40);
      v153 = v95;
      v95(&v148[*(int *)(v96 + 36)], &v146[*(int *)(v96 + 36)], v94);
      v97 = v92;
      v98 = *(int *)(v92 + 36);
      v99 = &v79[v98];
      v100 = &v80[v98];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(&v80[v98], 1, v94))
      {
        v101 = sub_100008EF4(&qword_100105F48);
        memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
      }
      else
      {
        v153(v99, v100, v94);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v155 + 56))(v99, 0, 1, v94);
      }
      v79[*(int *)(v97 + 40)] = v80[*(int *)(v97 + 40)];
      v79[*(int *)(v97 + 44)] = v80[*(int *)(v97 + 44)];
      v114 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
      v115 = *(_QWORD *)&v80[v114];
      *(_QWORD *)&v79[v114] = v115;
      swift_bridgeObjectRetain(v115);
      v5 = v159;
      v81 = v161;
    }
    else
    {
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v84 = *(_QWORD *)v80;
        *(_QWORD *)v79 = *(_QWORD *)v80;
        v85 = *((_QWORD *)v80 + 1);
        *((_QWORD *)v79 + 1) = v85;
        *((_QWORD *)v79 + 2) = *((_QWORD *)v80 + 2);
        v86 = *((_QWORD *)v80 + 3);
        *((_QWORD *)v79 + 3) = v86;
        *((_QWORD *)v79 + 4) = *((_QWORD *)v80 + 4);
        v87 = *((_QWORD *)v80 + 5);
        *((_QWORD *)v79 + 5) = v87;
        v79[48] = v80[48];
        v88 = v83;
        swift_bridgeObjectRetain(v84);
        swift_bridgeObjectRetain(v85);
        swift_bridgeObjectRetain(v86);
        swift_bridgeObjectRetain(v87);
        v89 = v88;
LABEL_19:
        swift_storeEnumTagMultiPayload(v79, v81, v89);
        goto LABEL_20;
      }
      v158 = EnumCaseMultiPayload;
      v160 = v5;
      v162 = v81;
      *(_QWORD *)v79 = *(_QWORD *)v80;
      v156 = *((_QWORD *)v80 + 1);
      *((_QWORD *)v79 + 1) = v156;
      *((_QWORD *)v79 + 2) = *((_QWORD *)v80 + 2);
      v102 = *((_QWORD *)v80 + 3);
      *((_QWORD *)v79 + 3) = v102;
      *((_QWORD *)v79 + 4) = *((_QWORD *)v80 + 4);
      v154 = *((_QWORD *)v80 + 5);
      *((_QWORD *)v79 + 5) = v154;
      *((_QWORD *)v79 + 6) = *((_QWORD *)v80 + 6);
      v151 = *((_QWORD *)v80 + 7);
      *((_QWORD *)v79 + 7) = v151;
      v103 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v104 = *(int *)(v103 + 32);
      v105 = &v79[v104];
      v147 = &v80[v104];
      v149 = (int *)v103;
      v106 = type metadata accessor for Date(0);
      v107 = *(_QWORD *)(v106 - 8);
      v108 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
      swift_bridgeObjectRetain(v156);
      swift_bridgeObjectRetain(v102);
      swift_bridgeObjectRetain(v154);
      swift_bridgeObjectRetain(v151);
      v108(v105, v147, v106);
      v109 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
      v157 = v108;
      v108(&v105[v109], &v147[v109], v106);
      v110 = v149[9];
      v111 = &v79[v110];
      v112 = &v80[v110];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(&v80[v110], 1, v106))
      {
        v113 = sub_100008EF4(&qword_100105F48);
        memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
      }
      else
      {
        v157(v111, v112, v106);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v111, 0, 1, v106);
      }
      v5 = v160;
      v81 = v162;
      v79[v149[10]] = v80[v149[10]];
      v79[v149[11]] = v80[v149[11]];
    }
    v89 = v158;
    goto LABEL_19;
  }
LABEL_20:
  v116 = v77[7];
  v117 = &v46[v116];
  v118 = &v47[v116];
  *(_QWORD *)v117 = *(_QWORD *)&v47[v116];
  v119 = *(_QWORD *)&v47[v116 + 8];
  v120 = *(_QWORD *)&v46[v116 + 8];
  *((_QWORD *)v117 + 1) = v119;
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRelease(v120);
  *((_QWORD *)v117 + 2) = *((_QWORD *)v118 + 2);
  v121 = *((_QWORD *)v118 + 3);
  v122 = *((_QWORD *)v117 + 3);
  *((_QWORD *)v117 + 3) = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122);
  v123 = v77[8];
  v124 = &v46[v123];
  v125 = &v47[v123];
  *(_QWORD *)v124 = *(_QWORD *)&v47[v123];
  v126 = *(_QWORD *)&v47[v123 + 8];
  v127 = *(_QWORD *)&v46[v123 + 8];
  *((_QWORD *)v124 + 1) = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease(v127);
  v124[16] = v125[16];
  v128 = *((_QWORD *)v125 + 3);
  v129 = *((_QWORD *)v124 + 3);
  *((_QWORD *)v124 + 3) = v128;
  swift_retain(v128);
  swift_release(v129);
  v124[32] = v125[32];
  v130 = *((_QWORD *)v125 + 5);
  v131 = *((_QWORD *)v124 + 5);
  *((_QWORD *)v124 + 5) = v130;
  swift_retain(v130);
  swift_release(v131);
  v124[48] = v125[48];
  v46[v77[9]] = v47[v77[9]];
  v46[v77[10]] = v47[v77[10]];
  v46[v77[11]] = v47[v77[11]];
  v46[v77[12]] = v47[v77[12]];
  v132 = v77[13];
  v133 = &v46[v132];
  v134 = &v47[v132];
  v135 = type metadata accessor for URL(0);
  v136 = *(_QWORD *)(v135 - 8);
  v137 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v136 + 48);
  LODWORD(v131) = v137(v133, 1, v135);
  v138 = v137(v134, 1, v135);
  if (!(_DWORD)v131)
  {
    if (!v138)
    {
      (*(void (**)(char *, char *, uint64_t))(v136 + 24))(v133, v134, v135);
      goto LABEL_26;
    }
    (*(void (**)(char *, uint64_t))(v136 + 8))(v133, v135);
    goto LABEL_25;
  }
  if (v138)
  {
LABEL_25:
    v139 = sub_100008EF4(&qword_100105F50);
    memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v133, v134, v135);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
LABEL_26:
  v46[v77[14]] = v47[v77[14]];
  v140 = v77[15];
  v141 = &v46[v140];
  v142 = &v47[v140];
  *(_QWORD *)v141 = *(_QWORD *)v142;
  v143 = *((_QWORD *)v142 + 1);
  v144 = *((_QWORD *)v141 + 1);
  *((_QWORD *)v141 + 1) = v143;
  swift_bridgeObjectRetain(v143);
  swift_bridgeObjectRelease(v144);
  return v5;
}

char *sub_10000B604(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int EnumCaseMultiPayload;
  __int128 v41;
  __int128 v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  int *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;

  v6 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = &a1[v9];
  v13 = &a2[v9];
  v14 = *(_OWORD *)&a2[v9 + 16];
  *(_OWORD *)v12 = *(_OWORD *)&a2[v9];
  *((_OWORD *)v12 + 1) = v14;
  v15 = *(_OWORD *)&a2[v9 + 48];
  *((_OWORD *)v12 + 2) = *(_OWORD *)&a2[v9 + 32];
  *((_OWORD *)v12 + 3) = v15;
  v16 = *(_OWORD *)&a2[v9 + 80];
  *((_OWORD *)v12 + 4) = *(_OWORD *)&a2[v9 + 64];
  *((_OWORD *)v12 + 5) = v16;
  v17 = *(_OWORD *)&a2[v9 + 112];
  *((_OWORD *)v12 + 6) = *(_OWORD *)&a2[v9 + 96];
  *((_OWORD *)v12 + 7) = v17;
  *((_OWORD *)v12 + 8) = *(_OWORD *)&a2[v9 + 128];
  *((_QWORD *)v12 + 18) = *(_QWORD *)&a2[v9 + 144];
  v12[152] = a2[v9 + 152];
  *((_QWORD *)v12 + 20) = *(_QWORD *)&a2[v9 + 160];
  *(_OWORD *)(v12 + 168) = *(_OWORD *)&a2[v9 + 168];
  *(_OWORD *)(v12 + 184) = *(_OWORD *)&a2[v9 + 184];
  *(_OWORD *)(v12 + 200) = *(_OWORD *)&a2[v9 + 200];
  v18 = (int *)type metadata accessor for SportsWidgetContentViewLayout(0);
  v19 = v18[29];
  v20 = &v12[v19];
  v21 = &v13[v19];
  v22 = type metadata accessor for Image.Scale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  *(_QWORD *)&v12[v18[30]] = *(_QWORD *)&v13[v18[30]];
  *(_QWORD *)&v12[v18[31]] = *(_QWORD *)&v13[v18[31]];
  *(_QWORD *)&v12[v18[32]] = *(_QWORD *)&v13[v18[32]];
  *(_QWORD *)&v12[v18[33]] = *(_QWORD *)&v13[v18[33]];
  *(_QWORD *)&v12[v18[34]] = *(_QWORD *)&v13[v18[34]];
  *(_QWORD *)&v12[v18[35]] = *(_QWORD *)&v13[v18[35]];
  *(_QWORD *)&v12[v18[36]] = *(_QWORD *)&v13[v18[36]];
  *(_QWORD *)&v12[v18[37]] = *(_QWORD *)&v13[v18[37]];
  *(_QWORD *)&v12[v18[38]] = *(_QWORD *)&v13[v18[38]];
  *(_QWORD *)&v12[v18[39]] = *(_QWORD *)&v13[v18[39]];
  v12[v18[40]] = v13[v18[40]];
  *(_QWORD *)&v12[v18[41]] = *(_QWORD *)&v13[v18[41]];
  v23 = a3[7];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *(_OWORD *)&a2[v23 + 80];
  *((_OWORD *)v24 + 4) = *(_OWORD *)&a2[v23 + 64];
  *((_OWORD *)v24 + 5) = v26;
  *((_OWORD *)v24 + 6) = *(_OWORD *)&a2[v23 + 96];
  v24[112] = a2[v23 + 112];
  v27 = *(_OWORD *)&a2[v23 + 16];
  *(_OWORD *)v24 = *(_OWORD *)&a2[v23];
  *((_OWORD *)v24 + 1) = v27;
  v28 = *(_OWORD *)&a2[v23 + 48];
  *((_OWORD *)v24 + 2) = *(_OWORD *)&a2[v23 + 32];
  *((_OWORD *)v24 + 3) = v28;
  v29 = *(_OWORD *)&a2[v23 + 120];
  v30 = *(_OWORD *)&a2[v23 + 136];
  v31 = *(_OWORD *)&a2[v23 + 152];
  *(_OWORD *)(v24 + 168) = *(_OWORD *)&a2[v23 + 168];
  *(_OWORD *)(v24 + 152) = v31;
  *(_OWORD *)(v24 + 136) = v30;
  *(_OWORD *)(v24 + 120) = v29;
  v32 = *(_OWORD *)&a2[v23 + 184];
  v33 = *(_OWORD *)&a2[v23 + 200];
  v34 = *(_OWORD *)&a2[v23 + 216];
  v24[232] = a2[v23 + 232];
  *(_OWORD *)(v24 + 216) = v34;
  *(_OWORD *)(v24 + 200) = v33;
  *(_OWORD *)(v24 + 184) = v32;
  v35 = (int *)type metadata accessor for SportsWidgetContentViewModel(0);
  v36 = v35[6];
  v37 = &v24[v36];
  v38 = &v25[v36];
  v39 = type metadata accessor for SportsWidgetClock(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v38, v39);
  if (EnumCaseMultiPayload == 2)
  {
    v90 = v39;
    v91 = a1;
    v54 = *((_OWORD *)v38 + 1);
    *(_OWORD *)v37 = *(_OWORD *)v38;
    *((_OWORD *)v37 + 1) = v54;
    v55 = *((_OWORD *)v38 + 3);
    *((_OWORD *)v37 + 2) = *((_OWORD *)v38 + 2);
    *((_OWORD *)v37 + 3) = v55;
    v56 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v57 = v56[8];
    v58 = &v37[v57];
    v59 = &v38[v57];
    v60 = type metadata accessor for Date(0);
    v88 = *(_QWORD *)(v60 - 8);
    v61 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
    v61(v58, v59, v60);
    v62 = sub_100008EF4(&qword_100105F40);
    v61(&v58[*(int *)(v62 + 36)], &v59[*(int *)(v62 + 36)], v60);
    v63 = v56[9];
    v64 = &v37[v63];
    v65 = &v38[v63];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(&v38[v63], 1, v60))
    {
      v66 = sub_100008EF4(&qword_100105F48);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    }
    else
    {
      v61(v64, v65, v60);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v64, 0, 1, v60);
    }
    v37[v56[10]] = v38[v56[10]];
    v37[v56[11]] = v38[v56[11]];
    v70 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
    *(_QWORD *)&v37[*(int *)(v70 + 20)] = *(_QWORD *)&v38[*(int *)(v70 + 20)];
    v68 = v37;
    v67 = v90;
    v69 = 2;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      goto LABEL_16;
    }
    v89 = v39;
    v91 = a1;
    v41 = *((_OWORD *)v38 + 1);
    *(_OWORD *)v37 = *(_OWORD *)v38;
    *((_OWORD *)v37 + 1) = v41;
    v42 = *((_OWORD *)v38 + 3);
    *((_OWORD *)v37 + 2) = *((_OWORD *)v38 + 2);
    *((_OWORD *)v37 + 3) = v42;
    v43 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v44 = v43[8];
    v45 = &v37[v44];
    v46 = &v38[v44];
    v47 = type metadata accessor for Date(0);
    v87 = *(_QWORD *)(v47 - 8);
    v48 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
    v48(v45, v46, v47);
    v49 = sub_100008EF4(&qword_100105F40);
    v48(&v45[*(int *)(v49 + 36)], &v46[*(int *)(v49 + 36)], v47);
    v50 = v43[9];
    v51 = &v37[v50];
    v52 = &v38[v50];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(&v38[v50], 1, v47))
    {
      v53 = sub_100008EF4(&qword_100105F48);
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      v48(v51, v52, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v51, 0, 1, v47);
    }
    v67 = v89;
    v37[v43[10]] = v38[v43[10]];
    v37[v43[11]] = v38[v43[11]];
    v68 = v37;
    v69 = 0;
  }
  swift_storeEnumTagMultiPayload(v68, v67, v69);
  a1 = v91;
LABEL_16:
  v71 = v35[7];
  v72 = &v24[v71];
  v73 = &v25[v71];
  v74 = *((_OWORD *)v73 + 1);
  *(_OWORD *)v72 = *(_OWORD *)v73;
  *((_OWORD *)v72 + 1) = v74;
  v75 = v35[8];
  v76 = &v24[v75];
  v77 = &v25[v75];
  v76[48] = v77[48];
  v78 = *((_OWORD *)v77 + 2);
  v79 = *(_OWORD *)v77;
  *((_OWORD *)v76 + 1) = *((_OWORD *)v77 + 1);
  *((_OWORD *)v76 + 2) = v78;
  *(_OWORD *)v76 = v79;
  v24[v35[9]] = v25[v35[9]];
  v24[v35[10]] = v25[v35[10]];
  v24[v35[11]] = v25[v35[11]];
  v24[v35[12]] = v25[v35[12]];
  v80 = v35[13];
  v81 = &v24[v80];
  v82 = &v25[v80];
  v83 = type metadata accessor for URL(0);
  v84 = *(_QWORD *)(v83 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
  {
    v85 = sub_100008EF4(&qword_100105F50);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v81, v82, v83);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
  }
  v24[v35[14]] = v25[v35[14]];
  *(_OWORD *)&v24[v35[15]] = *(_OWORD *)&v25[v35[15]];
  return a1;
}

char *sub_10000BC24(uint64_t a1, char *a2, int *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  int EnumCaseMultiPayload;
  __int128 v71;
  __int128 v72;
  int *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  int *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(char *, uint64_t, uint64_t);
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;

  v5 = (char *)a1;
  if ((char *)a1 != a2)
  {
    sub_1000135A0(a1, &qword_100105F38);
    v6 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, a2, v7);
      swift_storeEnumTagMultiPayload(v5, v6, 1);
    }
    else
    {
      memcpy(v5, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &v5[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_10000A2AC(v12, v13);
  v14 = a3[6];
  v15 = &v5[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)&a2[v14];
  *((_QWORD *)v15 + 1) = *(_QWORD *)&a2[v14 + 8];
  v17 = *(_OWORD *)&a2[v14 + 32];
  *((_OWORD *)v15 + 1) = *(_OWORD *)&a2[v14 + 16];
  *((_OWORD *)v15 + 2) = v17;
  v18 = *(_OWORD *)&a2[v14 + 64];
  *((_OWORD *)v15 + 3) = *(_OWORD *)&a2[v14 + 48];
  *((_OWORD *)v15 + 4) = v18;
  *((_OWORD *)v15 + 5) = *(_OWORD *)&a2[v14 + 80];
  *((_QWORD *)v15 + 12) = *(_QWORD *)&a2[v14 + 96];
  *((_QWORD *)v15 + 13) = *(_QWORD *)&a2[v14 + 104];
  v19 = *(_QWORD *)&v5[v14 + 112];
  *((_QWORD *)v15 + 14) = *(_QWORD *)&a2[v14 + 112];
  swift_release(v19);
  v20 = *((_QWORD *)v15 + 15);
  *((_QWORD *)v15 + 15) = *((_QWORD *)v16 + 15);
  swift_release(v20);
  v21 = *((_QWORD *)v15 + 16);
  *((_QWORD *)v15 + 16) = *((_QWORD *)v16 + 16);
  swift_release(v21);
  *((_QWORD *)v15 + 17) = *((_QWORD *)v16 + 17);
  *((_QWORD *)v15 + 18) = *((_QWORD *)v16 + 18);
  v15[152] = v16[152];
  *((_QWORD *)v15 + 20) = *((_QWORD *)v16 + 20);
  *(_OWORD *)(v15 + 168) = *(_OWORD *)(v16 + 168);
  v22 = *((_QWORD *)v16 + 24);
  v23 = *((_QWORD *)v15 + 24);
  *((_QWORD *)v15 + 23) = *((_QWORD *)v16 + 23);
  *((_QWORD *)v15 + 24) = v22;
  swift_bridgeObjectRelease(v23);
  v24 = *((_QWORD *)v15 + 25);
  *((_QWORD *)v15 + 25) = *((_QWORD *)v16 + 25);
  swift_release(v24);
  v25 = *((_QWORD *)v15 + 26);
  *((_QWORD *)v15 + 26) = *((_QWORD *)v16 + 26);
  swift_release(v25);
  v26 = (int *)type metadata accessor for SportsWidgetContentViewLayout(0);
  v27 = v26[29];
  v28 = &v15[v27];
  v29 = &v16[v27];
  v30 = type metadata accessor for Image.Scale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  *(_QWORD *)&v15[v26[30]] = *(_QWORD *)&v16[v26[30]];
  *(_QWORD *)&v15[v26[31]] = *(_QWORD *)&v16[v26[31]];
  *(_QWORD *)&v15[v26[32]] = *(_QWORD *)&v16[v26[32]];
  *(_QWORD *)&v15[v26[33]] = *(_QWORD *)&v16[v26[33]];
  *(_QWORD *)&v15[v26[34]] = *(_QWORD *)&v16[v26[34]];
  *(_QWORD *)&v15[v26[35]] = *(_QWORD *)&v16[v26[35]];
  *(_QWORD *)&v15[v26[36]] = *(_QWORD *)&v16[v26[36]];
  v31 = v26[37];
  v32 = *(_QWORD *)&v15[v31];
  *(_QWORD *)&v15[v31] = *(_QWORD *)&v16[v31];
  swift_release(v32);
  v33 = v26[38];
  v34 = *(_QWORD *)&v15[v33];
  *(_QWORD *)&v15[v33] = *(_QWORD *)&v16[v33];
  swift_release(v34);
  *(_QWORD *)&v15[v26[39]] = *(_QWORD *)&v16[v26[39]];
  v15[v26[40]] = v16[v26[40]];
  *(_QWORD *)&v15[v26[41]] = *(_QWORD *)&v16[v26[41]];
  v35 = a3[7];
  v36 = &v5[v35];
  v37 = &a2[v35];
  v38 = *(_QWORD *)&a2[v35 + 8];
  v39 = *(_QWORD *)&v5[v35 + 8];
  *(_QWORD *)v36 = *(_QWORD *)&a2[v35];
  *((_QWORD *)v36 + 1) = v38;
  swift_bridgeObjectRelease(v39);
  v40 = *((_QWORD *)v37 + 3);
  v41 = *((_QWORD *)v36 + 3);
  *((_QWORD *)v36 + 2) = *((_QWORD *)v37 + 2);
  *((_QWORD *)v36 + 3) = v40;
  swift_bridgeObjectRelease(v41);
  v42 = *((_QWORD *)v37 + 5);
  v43 = *((_QWORD *)v36 + 5);
  *((_QWORD *)v36 + 4) = *((_QWORD *)v37 + 4);
  *((_QWORD *)v36 + 5) = v42;
  swift_bridgeObjectRelease(v43);
  v44 = *((_QWORD *)v37 + 7);
  v45 = *((_QWORD *)v36 + 7);
  *((_QWORD *)v36 + 6) = *((_QWORD *)v37 + 6);
  *((_QWORD *)v36 + 7) = v44;
  swift_bridgeObjectRelease(v45);
  v46 = *((_QWORD *)v37 + 9);
  v47 = *((_QWORD *)v36 + 9);
  *((_QWORD *)v36 + 8) = *((_QWORD *)v37 + 8);
  *((_QWORD *)v36 + 9) = v46;
  swift_bridgeObjectRelease(v47);
  v48 = *((_QWORD *)v37 + 11);
  v49 = *((_QWORD *)v36 + 11);
  *((_QWORD *)v36 + 10) = *((_QWORD *)v37 + 10);
  *((_QWORD *)v36 + 11) = v48;
  swift_bridgeObjectRelease(v49);
  v36[96] = v37[96];
  v50 = *((_QWORD *)v36 + 13);
  *((_QWORD *)v36 + 13) = *((_QWORD *)v37 + 13);
  swift_release(v50);
  v36[112] = v37[112];
  v51 = *((_QWORD *)v37 + 16);
  v52 = *((_QWORD *)v36 + 16);
  *((_QWORD *)v36 + 15) = *((_QWORD *)v37 + 15);
  *((_QWORD *)v36 + 16) = v51;
  swift_bridgeObjectRelease(v52);
  v53 = *((_QWORD *)v37 + 18);
  v54 = *((_QWORD *)v36 + 18);
  *((_QWORD *)v36 + 17) = *((_QWORD *)v37 + 17);
  *((_QWORD *)v36 + 18) = v53;
  swift_bridgeObjectRelease(v54);
  v55 = *((_QWORD *)v37 + 20);
  v56 = *((_QWORD *)v36 + 20);
  *((_QWORD *)v36 + 19) = *((_QWORD *)v37 + 19);
  *((_QWORD *)v36 + 20) = v55;
  swift_bridgeObjectRelease(v56);
  v57 = *((_QWORD *)v37 + 22);
  v58 = *((_QWORD *)v36 + 22);
  *((_QWORD *)v36 + 21) = *((_QWORD *)v37 + 21);
  *((_QWORD *)v36 + 22) = v57;
  swift_bridgeObjectRelease(v58);
  v59 = *((_QWORD *)v37 + 24);
  v60 = *((_QWORD *)v36 + 24);
  *((_QWORD *)v36 + 23) = *((_QWORD *)v37 + 23);
  *((_QWORD *)v36 + 24) = v59;
  swift_bridgeObjectRelease(v60);
  v61 = *((_QWORD *)v37 + 26);
  v62 = *((_QWORD *)v36 + 26);
  *((_QWORD *)v36 + 25) = *((_QWORD *)v37 + 25);
  *((_QWORD *)v36 + 26) = v61;
  swift_bridgeObjectRelease(v62);
  v36[216] = v37[216];
  v63 = *((_QWORD *)v36 + 28);
  *((_QWORD *)v36 + 28) = *((_QWORD *)v37 + 28);
  swift_release(v63);
  v36[232] = v37[232];
  v64 = type metadata accessor for SportsWidgetContentViewModel(0);
  v65 = (int *)v64;
  if (v5 != a2)
  {
    v66 = *(int *)(v64 + 24);
    v67 = &v36[v66];
    v68 = &v37[v66];
    sub_100013520((uint64_t)&v36[v66], type metadata accessor for SportsWidgetClock);
    v69 = type metadata accessor for SportsWidgetClock(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v68, v69);
    if (EnumCaseMultiPayload == 2)
    {
      v134 = v69;
      v135 = v5;
      v84 = *((_OWORD *)v68 + 1);
      *(_OWORD *)v67 = *(_OWORD *)v68;
      *((_OWORD *)v67 + 1) = v84;
      v85 = *((_OWORD *)v68 + 3);
      *((_OWORD *)v67 + 2) = *((_OWORD *)v68 + 2);
      *((_OWORD *)v67 + 3) = v85;
      v86 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v87 = v86[8];
      v88 = &v67[v87];
      v89 = &v68[v87];
      v90 = type metadata accessor for Date(0);
      v132 = *(_QWORD *)(v90 - 8);
      v91 = *(void (**)(char *, char *, uint64_t))(v132 + 32);
      v91(v88, v89, v90);
      v92 = sub_100008EF4(&qword_100105F40);
      v91(&v88[*(int *)(v92 + 36)], &v89[*(int *)(v92 + 36)], v90);
      v93 = v86[9];
      v94 = &v67[v93];
      v95 = &v68[v93];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(&v68[v93], 1, v90))
      {
        v96 = sub_100008EF4(&qword_100105F48);
        memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
      }
      else
      {
        v91(v94, v95, v90);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v94, 0, 1, v90);
      }
      v67[v86[10]] = v68[v86[10]];
      v67[v86[11]] = v68[v86[11]];
      v100 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
      *(_QWORD *)&v67[*(int *)(v100 + 20)] = *(_QWORD *)&v68[*(int *)(v100 + 20)];
      v98 = v67;
      v97 = v134;
      v99 = 2;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        goto LABEL_18;
      }
      v133 = v69;
      v135 = v5;
      v71 = *((_OWORD *)v68 + 1);
      *(_OWORD *)v67 = *(_OWORD *)v68;
      *((_OWORD *)v67 + 1) = v71;
      v72 = *((_OWORD *)v68 + 3);
      *((_OWORD *)v67 + 2) = *((_OWORD *)v68 + 2);
      *((_OWORD *)v67 + 3) = v72;
      v73 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v74 = v73[8];
      v75 = &v67[v74];
      v76 = &v68[v74];
      v77 = type metadata accessor for Date(0);
      v131 = *(_QWORD *)(v77 - 8);
      v78 = *(void (**)(char *, char *, uint64_t))(v131 + 32);
      v78(v75, v76, v77);
      v79 = sub_100008EF4(&qword_100105F40);
      v78(&v75[*(int *)(v79 + 36)], &v76[*(int *)(v79 + 36)], v77);
      v80 = v73[9];
      v81 = &v67[v80];
      v82 = &v68[v80];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(&v68[v80], 1, v77))
      {
        v83 = sub_100008EF4(&qword_100105F48);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
      }
      else
      {
        v78(v81, v82, v77);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v81, 0, 1, v77);
      }
      v97 = v133;
      v67[v73[10]] = v68[v73[10]];
      v67[v73[11]] = v68[v73[11]];
      v98 = v67;
      v99 = 0;
    }
    swift_storeEnumTagMultiPayload(v98, v97, v99);
    v5 = v135;
  }
LABEL_18:
  v101 = v65[7];
  v102 = &v36[v101];
  v103 = &v37[v101];
  v104 = *(_QWORD *)&v37[v101 + 8];
  v105 = *(_QWORD *)&v36[v101 + 8];
  *(_QWORD *)v102 = *(_QWORD *)&v37[v101];
  *((_QWORD *)v102 + 1) = v104;
  swift_bridgeObjectRelease(v105);
  v106 = *((_QWORD *)v103 + 3);
  v107 = *((_QWORD *)v102 + 3);
  *((_QWORD *)v102 + 2) = *((_QWORD *)v103 + 2);
  *((_QWORD *)v102 + 3) = v106;
  swift_bridgeObjectRelease(v107);
  v108 = v65[8];
  v109 = &v36[v108];
  v110 = &v37[v108];
  v111 = *(_QWORD *)&v37[v108 + 8];
  v112 = *(_QWORD *)&v36[v108 + 8];
  *(_QWORD *)v109 = *(_QWORD *)&v37[v108];
  *((_QWORD *)v109 + 1) = v111;
  swift_bridgeObjectRelease(v112);
  v109[16] = v110[16];
  v113 = *((_QWORD *)v109 + 3);
  *((_QWORD *)v109 + 3) = *((_QWORD *)v110 + 3);
  swift_release(v113);
  v109[32] = v110[32];
  v114 = *((_QWORD *)v109 + 5);
  *((_QWORD *)v109 + 5) = *((_QWORD *)v110 + 5);
  swift_release(v114);
  v109[48] = v110[48];
  v36[v65[9]] = v37[v65[9]];
  v36[v65[10]] = v37[v65[10]];
  v36[v65[11]] = v37[v65[11]];
  v36[v65[12]] = v37[v65[12]];
  v115 = v65[13];
  v116 = &v36[v115];
  v117 = &v37[v115];
  v118 = type metadata accessor for URL(0);
  v119 = *(_QWORD *)(v118 - 8);
  v120 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 48);
  v121 = v120(v116, 1, v118);
  v122 = v120(v117, 1, v118);
  if (!v121)
  {
    if (!v122)
    {
      (*(void (**)(char *, char *, uint64_t))(v119 + 40))(v116, v117, v118);
      goto LABEL_24;
    }
    (*(void (**)(char *, uint64_t))(v119 + 8))(v116, v118);
    goto LABEL_23;
  }
  if (v122)
  {
LABEL_23:
    v123 = sub_100008EF4(&qword_100105F50);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v116, v117, v118);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
LABEL_24:
  v36[v65[14]] = v37[v65[14]];
  v124 = v65[15];
  v125 = &v36[v124];
  v126 = &v37[v124];
  v128 = *(_QWORD *)v126;
  v127 = *((_QWORD *)v126 + 1);
  v129 = *((_QWORD *)v125 + 1);
  *(_QWORD *)v125 = v128;
  *((_QWORD *)v125 + 1) = v127;
  swift_bridgeObjectRelease(v129);
  return v5;
}

uint64_t sub_10000C430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000C43C);
}

uint64_t sub_10000C43C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_100008EF4(&qword_100105F58);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 254)
  {
    v9 = *(unsigned __int8 *)(a1 + a3[5] + 8);
    if (v9 > 1)
      return (v9 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for SportsWidgetContentViewLayout(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = a3[6];
    }
    else
    {
      v12 = type metadata accessor for SportsWidgetContentViewModel(0);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = a3[7];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t sub_10000C508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000C514);
}

uint64_t sub_10000C514(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_100008EF4(&qword_100105F58);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + a4[5] + 8) = -(char)a2;
      return result;
    }
    v13 = type metadata accessor for SportsWidgetContentViewLayout(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v10 = type metadata accessor for SportsWidgetContentViewModel(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SportsWidgetContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100105FB8;
  if (!qword_100105FB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SportsWidgetContentView);
  return result;
}

void sub_10000C61C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_10000C6C4(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = "\t";
    v4 = type metadata accessor for SportsWidgetContentViewLayout(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for SportsWidgetContentViewModel(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

void sub_10000C6C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100105FC8)
  {
    v2 = type metadata accessor for DynamicTypeSize(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100105FC8);
  }
}

uint64_t sub_10000C718(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D18F8, 1);
}

BOOL sub_10000C728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v17;

  v1 = type metadata accessor for SportsWidgetContentView(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)(v0 + *(int *)(v2 + 28));
  v6 = v5[9];
  v7 = v5[11];
  if (v7
    && ((v8 = v5[10] & 0xFFFFFFFFFFFFLL, (v7 & 0x2000000000000000) != 0) ? (v9 = HIBYTE(v7) & 0xF) : (v9 = v8), v9))
  {
    sub_1000134DC(v0, (uint64_t)v4, type metadata accessor for SportsWidgetContentView);
  }
  else
  {
    sub_1000134DC(v0, (uint64_t)v4, type metadata accessor for SportsWidgetContentView);
    if (!v6)
    {
      v15 = 0;
      goto LABEL_16;
    }
  }
  v10 = &v4[*(int *)(v1 + 28)];
  v11 = *((_QWORD *)v10 + 24);
  v12 = *((_QWORD *)v10 + 26);
  v15 = v12
     && ((v13 = *((_QWORD *)v10 + 25) & 0xFFFFFFFFFFFFLL, (v12 & 0x2000000000000000) != 0)
       ? (v14 = HIBYTE(v12) & 0xF)
       : (v14 = v13),
         v14)
     || v11 != 0;
LABEL_16:
  sub_100013520((uint64_t)v4, type metadata accessor for SportsWidgetContentView);
  return v15;
}

uint64_t sub_10000C838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  id v7;
  double v8;
  double v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v0 = type metadata accessor for DynamicTypeSize(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v15 - v5;
  v7 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v7, "bounds");
  v9 = v8;

  v10 = sub_10009FD4C((uint64_t)v6);
  if (v9 <= 291.0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for DynamicTypeSize.xLarge(_:), v0);
    v12 = sub_1000139F8((unint64_t *)&qword_1001060F0, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
    v11 = dispatch thunk of static Comparable.< infix(_:_:)(v6, v4, v0, v12) ^ 1;
    v13 = *(void (**)(char *, uint64_t))(v1 + 8);
    v13(v4, v0);
    v13(v6, v0);
  }
  else
  {
    v11 = DynamicTypeSize.isAccessibilitySize.getter(v10);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  }
  return v11 & 1;
}

uint64_t sub_10000C99C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t OpaqueTypeConformance2;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v45 = a1;
  v44 = sub_100008EF4(&qword_100106000);
  __chkstk_darwin(v44);
  v3 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100106008);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008EF4(&qword_100106010);
  __chkstk_darwin(v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008EF4(&qword_100106018);
  __chkstk_darwin(v10);
  v12 = (int8x16_t *)((char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_100008EF4(&qword_100106020);
  v43 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v42 = (char *)&v38 - v17;
  if ((sub_10000C838() & 1) != 0)
  {
    v38 = v10;
    v39 = v4;
    v40 = v13;
    v41 = v6;
    v18 = v7;
    v19 = type metadata accessor for SportsWidgetContentView(0);
    *v12 = vextq_s8(*(int8x16_t *)(v1 + *(int *)(v19 + 24)), *(int8x16_t *)(v1 + *(int *)(v19 + 24)), 8uLL);
    v12[1].i8[0] = 0;
    v20 = sub_100008EF4(&qword_100106060);
    sub_10000D910(v1, (uint64_t)v12->i64 + *(int *)(v20 + 44));
    v21 = enum case for DynamicTypeSize.accessibility3(_:);
    v22 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v9, v21, v22);
    v23 = sub_1000139F8(&qword_100106068, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
    result = dispatch thunk of static Equatable.== infix(_:_:)(v9, v9, v22, v23);
    if ((result & 1) != 0)
    {
      v25 = sub_100013840(&qword_100106028, &qword_100106018, (uint64_t)&protocol conformance descriptor for VStack<A>);
      v26 = sub_100013840(&qword_100106030, &qword_100106010, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
      v27 = v38;
      View.dynamicTypeSize<A>(_:)(v9, v38, v7, v25, v26);
      sub_1000135A0((uint64_t)v9, &qword_100106010);
      sub_1000135A0((uint64_t)v12, &qword_100106018);
      v29 = v42;
      v28 = v43;
      v30 = v40;
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v42, v16, v40);
      v31 = v41;
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v41, v29, v30);
      swift_storeEnumTagMultiPayload(v31, v39, 0);
      v46 = v27;
      v47 = v18;
      v48 = v25;
      v49 = v26;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
      v33 = sub_100012C6C();
      _ConditionalContent<>.init(storage:)(v31, v30, v44, OpaqueTypeConformance2, v33);
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v29, v30);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_10000CDB8((uint64_t)v3);
    sub_10001355C((uint64_t)v3, (uint64_t)v6, &qword_100106000);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v34 = sub_100013840(&qword_100106028, &qword_100106018, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v35 = sub_100013840(&qword_100106030, &qword_100106010, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v46 = v10;
    v47 = v7;
    v48 = v34;
    v49 = v35;
    v36 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v37 = sub_100012C6C();
    _ConditionalContent<>.init(storage:)(v6, v13, v44, v36, v37);
    return sub_1000135A0((uint64_t)v3, &qword_100106000);
  }
  return result;
}

uint64_t sub_10000CDB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v40 = a1;
  v3 = sub_100008EF4(&qword_100106058);
  __chkstk_darwin(v3);
  v5 = (int8x16_t *)((char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100008EF4(&qword_100106048);
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008EF4(&qword_100106000);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SportsWidgetContentView(0);
  v13 = v1 + *(int *)(v12 + 24);
  *v5 = vextq_s8(*(int8x16_t *)v13, *(int8x16_t *)v13, 8uLL);
  v5[1].i8[0] = 0;
  v14 = sub_100008EF4(&qword_1001062B0);
  v15 = sub_10000CFF0(v2, (uint64_t)v5->i64 + *(int *)(v14 + 44));
  v16 = static Edge.Set.top.getter(v15);
  v17 = v2 + *(int *)(v12 + 28);
  v18 = type metadata accessor for SportsWidgetContentViewModel(0);
  v19 = 48;
  if (*(_BYTE *)(v17 + *(int *)(v18 + 48)))
    v19 = 40;
  v20 = EdgeInsets.init(_all:)(*(double *)(v13 + v19));
  v22 = v21;
  v24 = v23;
  v26 = v25;
  sub_10001355C((uint64_t)v5, (uint64_t)v8, &qword_100106058);
  v27 = &v8[*(int *)(v6 + 36)];
  *v27 = v16;
  *((double *)v27 + 1) = v20;
  *((_QWORD *)v27 + 2) = v22;
  *((_QWORD *)v27 + 3) = v24;
  *((_QWORD *)v27 + 4) = v26;
  v27[40] = 0;
  v28 = sub_1000135A0((uint64_t)v5, &qword_100106058);
  v29 = static Edge.Set.bottom.getter(v28);
  v30 = EdgeInsets.init(_all:)(*(double *)(v13 + 48));
  v32 = v31;
  v34 = v33;
  v36 = v35;
  sub_10001355C((uint64_t)v8, (uint64_t)v11, &qword_100106048);
  v37 = &v11[*(int *)(v9 + 36)];
  *v37 = v29;
  *((double *)v37 + 1) = v30;
  *((_QWORD *)v37 + 2) = v32;
  *((_QWORD *)v37 + 3) = v34;
  *((_QWORD *)v37 + 4) = v36;
  v37[40] = 0;
  sub_1000135A0((uint64_t)v8, &qword_100106048);
  return sub_100013880((uint64_t)v11, v40, &qword_100106000);
}

uint64_t sub_10000CFF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v81 = a2;
  v3 = sub_100008EF4(&qword_100106098);
  __chkstk_darwin(v3);
  v72 = (uint64_t)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_1001062B8);
  v76 = *(_QWORD *)(v5 - 8);
  v77 = v5;
  __chkstk_darwin(v5);
  v71 = (uint64_t)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008EF4(&qword_1001062C0);
  v8 = __chkstk_darwin(v7);
  v80 = (uint64_t)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v78 = (char *)&v70 - v10;
  v11 = sub_100008EF4(&qword_100106078);
  v12 = __chkstk_darwin(v11);
  v79 = (uint64_t)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v74 = (char *)&v70 - v14;
  v15 = sub_100008EF4(&qword_1001062C8);
  __chkstk_darwin(v15);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100008EF4(&qword_1001062D0);
  __chkstk_darwin(v18);
  v20 = (uint64_t)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = (char *)sub_100008EF4(&qword_1001062D8);
  __chkstk_darwin(v75);
  v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100008EF4(&qword_1001062E0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v70 - v28;
  *(_QWORD *)v17 = static VerticalAlignment.center.getter(v27);
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 1;
  v30 = sub_100008EF4(&qword_1001062E8);
  sub_10000F29C(a1, &v17[*(int *)(v30 + 44)]);
  v31 = (int *)type metadata accessor for SportsWidgetContentView(0);
  v32 = a1 + v31[6];
  v34 = *(double *)(v32 + 16);
  v33 = *(double *)(v32 + 24);
  v35 = static Alignment.center.getter(v31);
  sub_100095C98(0.0, 1, 0.0, 1, v33, 0, 0.0, 1, v20, 0.0, 1, v34, 0, v35, v36);
  sub_1000135A0((uint64_t)v17, &qword_1001062C8);
  v37 = a1 + v31[7];
  v38 = type metadata accessor for SportsWidgetContentViewModel(0);
  v39 = *(int *)(v38 + 60);
  v73 = v37;
  v40 = (uint64_t *)(v37 + v39);
  v42 = *v40;
  v41 = v40[1];
  sub_10001355C(v20, (uint64_t)v22, &qword_1001062D0);
  v43 = &v22[*((int *)v75 + 9)];
  *(_QWORD *)v43 = v42;
  *((_QWORD *)v43 + 1) = v41;
  swift_bridgeObjectRetain(v41);
  v44 = sub_1000135A0(v20, &qword_1001062D0);
  v45 = static Alignment.center.getter(v44);
  sub_100095CF0(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v26, 0.0, 1, INFINITY, 0, v45, v46);
  sub_1000135A0((uint64_t)v22, &qword_1001062D8);
  v75 = v26;
  v47 = (uint64_t)v26;
  v48 = (uint64_t)v29;
  sub_100013880(v47, (uint64_t)v29, &qword_1001062E0);
  v49 = a1 + v31[5];
  v50 = *(_QWORD *)v49;
  LOBYTE(v31) = *(_BYTE *)(v49 + 8);
  sub_100009EE4(*(_QWORD *)v49, (char)v31);
  LOBYTE(v20) = sub_10009FD80(v50, (char)v31);
  v51 = sub_10000A2AC(v50, (char)v31);
  if ((v20 & 1) != 0)
  {
    v52 = (uint64_t)v74;
    Divider.init()(v51);
    v53 = type metadata accessor for Divider(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 0, 1, v53);
  }
  else
  {
    v54 = type metadata accessor for Divider(0);
    v52 = (uint64_t)v74;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v74, 1, 1, v54);
  }
  v55 = 1;
  v56 = (uint64_t)v78;
  if (*(_BYTE *)(v73 + *(int *)(v38 + 48)) == 1)
  {
    v57 = v72;
    v58 = sub_10000D630(v72);
    v59 = static Alignment.center.getter(v58);
    v60 = v71;
    sub_100095F14(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v71, 0.0, 1, INFINITY, 0, v59, v61);
    sub_1000135A0(v57, &qword_100106098);
    sub_100013880(v60, v56, &qword_1001062B8);
    v55 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v56, v55, 1, v77);
  v62 = (uint64_t)v29;
  v63 = (uint64_t)v75;
  sub_10001355C(v62, (uint64_t)v75, &qword_1001062E0);
  v64 = v79;
  sub_10001355C(v52, v79, &qword_100106078);
  v65 = v80;
  sub_10001355C(v56, v80, &qword_1001062C0);
  v66 = v52;
  v67 = v81;
  sub_10001355C(v63, v81, &qword_1001062E0);
  v68 = sub_100008EF4(&qword_1001062F0);
  sub_10001355C(v64, v67 + *(int *)(v68 + 48), &qword_100106078);
  sub_10001355C(v65, v67 + *(int *)(v68 + 64), &qword_1001062C0);
  sub_1000135A0(v56, &qword_1001062C0);
  sub_1000135A0(v66, &qword_100106078);
  sub_1000135A0(v48, &qword_1001062E0);
  sub_1000135A0(v65, &qword_1001062C0);
  sub_1000135A0(v64, &qword_100106078);
  return sub_1000135A0(v63, &qword_1001062E0);
}

uint64_t sub_10000D630@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  _OWORD v35[4];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v3 = type metadata accessor for SportsWidgetPlayByPlayLayout(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SportsWidgetPlayByPlayView(0);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100008EF4(&qword_1001060A8);
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v1 + *(int *)(type metadata accessor for SportsWidgetContentView(0) + 28);
  v13 = type metadata accessor for SportsWidgetContentViewModel(0);
  if (*(_BYTE *)(v12 + *(int *)(v13 + 56)) == 1)
  {
    sub_10003B4A8((uint64_t)v35);
    v14 = v35[1];
    *(_OWORD *)(v11 + 8) = v35[0];
    *(_OWORD *)(v11 + 24) = v14;
    v15 = v35[3];
    *(_OWORD *)(v11 + 40) = v35[2];
    v16 = v36;
    v17 = v38;
    *v11 = 2;
    *(_OWORD *)(v11 + 56) = v15;
    *((_QWORD *)v11 + 9) = v16;
    *((_OWORD *)v11 + 5) = v37;
    *((_QWORD *)v11 + 12) = v17;
    swift_storeEnumTagMultiPayload(v11, v9, 0);
    v18 = sub_100012FF8();
    v19 = sub_1000139F8(&qword_1001060B8, type metadata accessor for SportsWidgetPlayByPlayView, (uint64_t)&unk_1000CBD08);
    return _ConditionalContent<>.init(storage:)(v11, &type metadata for SportsWidgetStaleView, v6, v18, v19);
  }
  else
  {
    v21 = (uint64_t *)(v12 + *(int *)(v13 + 32));
    v23 = *v21;
    v22 = v21[1];
    v34 = a1;
    v24 = *((_BYTE *)v21 + 16);
    v25 = v21[3];
    v26 = *((unsigned __int8 *)v21 + 32);
    v27 = v21[5];
    v32 = *((unsigned __int8 *)v21 + 48);
    v33 = v26;
    swift_bridgeObjectRetain(v22);
    swift_retain(v25);
    swift_retain(v27);
    sub_1000A24F4((uint64_t)v5, 34.0, 20.0);
    *v8 = swift_getKeyPath(&unk_1000C57D0);
    v28 = sub_100008EF4(&qword_100105F38);
    swift_storeEnumTagMultiPayload(v8, v28, 0);
    v29 = (char *)v8 + *(int *)(v6 + 20);
    *(_QWORD *)v29 = v23;
    *((_QWORD *)v29 + 1) = v22;
    v29[16] = v24;
    *((_QWORD *)v29 + 3) = v25;
    v29[32] = v33;
    *((_QWORD *)v29 + 5) = v27;
    v29[48] = v32;
    sub_10001303C((uint64_t)v5, (uint64_t)v8 + *(int *)(v6 + 24), type metadata accessor for SportsWidgetPlayByPlayLayout);
    sub_1000134DC((uint64_t)v8, (uint64_t)v11, type metadata accessor for SportsWidgetPlayByPlayView);
    swift_storeEnumTagMultiPayload(v11, v9, 1);
    v30 = sub_100012FF8();
    v31 = sub_1000139F8(&qword_1001060B8, type metadata accessor for SportsWidgetPlayByPlayView, (uint64_t)&unk_1000CBD08);
    _ConditionalContent<>.init(storage:)(v11, &type metadata for SportsWidgetStaleView, v6, v30, v31);
    return sub_100013520((uint64_t)v8, type metadata accessor for SportsWidgetPlayByPlayView);
  }
}

uint64_t sub_10000D910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v51 = a2;
  v3 = sub_100008EF4(&qword_100106070);
  v4 = __chkstk_darwin(v3);
  v52 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v49 = (uint64_t)&v47 - v6;
  v7 = sub_100008EF4(&qword_100106078);
  v8 = __chkstk_darwin(v7);
  v50 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v47 = (char *)&v47 - v10;
  v11 = sub_100008EF4(&qword_100106080);
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008EF4(&qword_100106088);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v47 - v19;
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v18);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v21 = sub_100008EF4(&qword_100106090);
  sub_10000DD44(a1, &v13[*(int *)(v21 + 44)]);
  v22 = type metadata accessor for SportsWidgetContentView(0);
  v23 = a1 + *(int *)(v22 + 28);
  v24 = type metadata accessor for SportsWidgetContentViewModel(0);
  v25 = *(int *)(v24 + 60);
  v48 = v23;
  v26 = (uint64_t *)(v23 + v25);
  v27 = *v26;
  v28 = v26[1];
  sub_10001355C((uint64_t)v13, (uint64_t)v17, &qword_100106080);
  v29 = &v17[*(int *)(v14 + 36)];
  *(_QWORD *)v29 = v27;
  *((_QWORD *)v29 + 1) = v28;
  swift_bridgeObjectRetain(v28);
  sub_1000135A0((uint64_t)v13, &qword_100106080);
  sub_100013880((uint64_t)v17, (uint64_t)v20, &qword_100106088);
  v30 = a1 + *(int *)(v22 + 20);
  v31 = *(_QWORD *)v30;
  LOBYTE(v13) = *(_BYTE *)(v30 + 8);
  sub_100009EE4(*(_QWORD *)v30, (char)v13);
  LOBYTE(v22) = sub_10009FD80(v31, (char)v13);
  v32 = sub_10000A2AC(v31, (char)v13);
  if ((v22 & 1) != 0)
  {
    v33 = (uint64_t)v47;
    Divider.init()(v32);
    v34 = type metadata accessor for Divider(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 0, 1, v34);
  }
  else
  {
    v35 = type metadata accessor for Divider(0);
    v33 = (uint64_t)v47;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v47, 1, 1, v35);
  }
  v36 = v49;
  if (*(_BYTE *)(v48 + *(int *)(v24 + 48)) == 1)
  {
    sub_10000D630(v49);
    v37 = sub_100008EF4(&qword_100106098);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 0, 1, v37);
  }
  else
  {
    v38 = sub_100008EF4(&qword_100106098);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v36, 1, 1, v38);
  }
  v39 = (uint64_t)v20;
  sub_10001355C((uint64_t)v20, (uint64_t)v17, &qword_100106088);
  v40 = v50;
  sub_10001355C(v33, v50, &qword_100106078);
  v41 = v33;
  v42 = v52;
  sub_10001355C(v36, v52, &qword_100106070);
  v43 = v51;
  sub_10001355C((uint64_t)v17, v51, &qword_100106088);
  v44 = v36;
  v45 = sub_100008EF4(&qword_1001060A0);
  sub_10001355C(v40, v43 + *(int *)(v45 + 48), &qword_100106078);
  sub_10001355C(v42, v43 + *(int *)(v45 + 64), &qword_100106070);
  sub_1000135A0(v44, &qword_100106070);
  sub_1000135A0(v41, &qword_100106078);
  sub_1000135A0(v39, &qword_100106088);
  sub_1000135A0(v42, &qword_100106070);
  sub_1000135A0(v40, &qword_100106078);
  return sub_1000135A0((uint64_t)v17, &qword_100106088);
}

uint64_t sub_10000DD44@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int *v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t KeyPath;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  int *v102;
  char *v103;
  char *v104;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  char *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 v134;
  uint64_t v135;
  unsigned __int8 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 v140;
  uint64_t v141;
  unsigned __int8 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int8 v146;
  uint64_t v147;
  char v148;
  char *v149;
  char *v150;

  v131 = a2;
  v116 = sub_100008EF4(&qword_1001060C0);
  __chkstk_darwin(v116);
  v121 = (char *)&v106 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_100008EF4(&qword_1001060C8);
  __chkstk_darwin(v114);
  v113 = (uint64_t)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SportsWidgetClock(0);
  __chkstk_darwin(v5);
  v120 = (char *)&v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for SportsWidgetClockView(0);
  v7 = __chkstk_darwin(v115);
  v111 = (uint64_t *)((char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v112 = (uint64_t)&v106 - v9;
  v10 = sub_100008EF4(&qword_1001060D0);
  v11 = __chkstk_darwin(v10);
  v117 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v118 = (uint64_t)&v106 - v13;
  v14 = type metadata accessor for DynamicTypeSize(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v106 - v19;
  v21 = sub_100008EF4(&qword_1001060D8);
  v22 = __chkstk_darwin(v21);
  v122 = (char *)&v106 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (char *)&v106 - v24;
  v26 = sub_100008EF4(&qword_1001060E0);
  v27 = __chkstk_darwin(v26);
  v130 = (uint64_t)&v106 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v106 - v30;
  __chkstk_darwin(v29);
  v33 = (char *)&v106 - v32;
  v119 = type metadata accessor for SportsWidgetContentView(0);
  v132 = a1 + *(int *)(v119 + 24);
  v34 = *(_QWORD *)(v132 + 56);
  v35 = static Alignment.center.getter(v119);
  v37 = _FrameLayout.init(width:height:alignment:)(&v133, 0, 1, v34, 0, v35, v36);
  v123 = v133;
  LODWORD(v34) = v134;
  v127 = v135;
  v126 = v136;
  v125 = v137;
  v124 = v138;
  *(_QWORD *)v31 = static VerticalAlignment.center.getter(v37);
  *((_QWORD *)v31 + 1) = 0;
  v31[16] = 1;
  v38 = sub_100008EF4(&qword_1001060E8);
  sub_10000E848(a1, &v31[*(int *)(v38 + 44)]);
  v129 = v33;
  sub_100013880((uint64_t)v31, (uint64_t)v33, &qword_1001060E0);
  sub_10009FD4C((uint64_t)v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for DynamicTypeSize.accessibility2(_:), v14);
  v39 = sub_1000139F8((unint64_t *)&qword_1001060F0, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  v40 = dispatch thunk of static Comparable.< infix(_:_:)(v18, v20, v14, v39);
  v41 = *(void (**)(char *, uint64_t))(v15 + 8);
  v41(v18, v14);
  v41(v20, v14);
  v128 = v34;
  if ((v40 & 1) != 0)
  {
    v42 = (uint64_t)v120;
    v43 = (uint64_t)v121;
    v44 = type metadata accessor for SportsWidgetContentViewLayout(0);
    v45 = v132;
    v46 = *(_QWORD *)(v132 + *(int *)(v44 + 132));
    v47 = static Alignment.center.getter(v44);
    _FrameLayout.init(width:height:alignment:)(&v139, 0, 1, v46, 0, v47, v48);
    v49 = v139;
    v50 = v140;
    v109 = v141;
    v108 = v142;
    v107 = v143;
    v106 = v144;
    v51 = a1 + *(int *)(v119 + 28);
    v52 = (int *)type metadata accessor for SportsWidgetContentViewModel(0);
    v53 = *(_BYTE *)(v51 + v52[9]) == 1;
    v110 = v50;
    if (v53)
    {
      v54 = v42;
      v55 = sub_1000134DC(v51 + v52[6], v42, type metadata accessor for SportsWidgetClock);
      v56 = static Font.footnote.getter(v55);
      v57 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
      v58 = Color.init(uiColor:)(v57);
      v59 = static Font.footnote.getter(v58);
      KeyPath = swift_getKeyPath(&unk_1000C57D0);
      v61 = v49;
      v62 = v111;
      *v111 = KeyPath;
      v63 = sub_100008EF4(&qword_100105F38);
      swift_storeEnumTagMultiPayload(v62, v63, 0);
      v64 = v115;
      sub_10001303C(v54, (uint64_t)v62 + *(int *)(v115 + 20), type metadata accessor for SportsWidgetClock);
      v65 = (char *)v62 + *(int *)(v64 + 24);
      *v65 = 1;
      *((_QWORD *)v65 + 1) = v56;
      *((_QWORD *)v65 + 2) = v58;
      *((_QWORD *)v65 + 3) = v59;
      v66 = (uint64_t)v62;
      v49 = v61;
      v67 = v112;
      sub_10001303C(v66, v112, type metadata accessor for SportsWidgetClockView);
      v68 = v113;
      sub_1000134DC(v67, v113, type metadata accessor for SportsWidgetClockView);
      swift_storeEnumTagMultiPayload(v68, v114, 0);
      v69 = sub_1000139F8(&qword_100106120, type metadata accessor for SportsWidgetClockView, (uint64_t)&unk_1000C98A0);
      v70 = sub_100013840(&qword_100106128, &qword_1001060C0, (uint64_t)&protocol conformance descriptor for VStack<A>);
      v71 = (uint64_t)v117;
      v72 = v69;
      v45 = v132;
      _ConditionalContent<>.init(storage:)(v68, v64, v116, v72, v70);
      sub_100013520(v67, type metadata accessor for SportsWidgetClockView);
      v73 = sub_100008EF4(&qword_100106108);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v71, 0, 1, v73);
      v74 = v118;
      sub_100013880(v71, v118, &qword_1001060D0);
      v75 = (uint64_t)v25;
      v76 = (uint64_t)v122;
    }
    else
    {
      v81 = v25;
      v71 = (uint64_t)v117;
      v76 = (uint64_t)v122;
      v74 = v118;
      if (*(_BYTE *)(v51 + v52[10]) == 1)
      {
        *(_QWORD *)v43 = static HorizontalAlignment.center.getter(v52);
        *(_QWORD *)(v43 + 8) = 0;
        *(_BYTE *)(v43 + 16) = 1;
        v82 = sub_100008EF4(&qword_100106118);
        sub_100010CC4(a1, v43 + *(int *)(v82 + 44));
        v83 = v113;
        sub_10001355C(v43, v113, &qword_1001060C0);
        swift_storeEnumTagMultiPayload(v83, v114, 1);
        v84 = v45;
        v85 = sub_1000139F8(&qword_100106120, type metadata accessor for SportsWidgetClockView, (uint64_t)&unk_1000C98A0);
        v86 = sub_100013840(&qword_100106128, &qword_1001060C0, (uint64_t)&protocol conformance descriptor for VStack<A>);
        v87 = v85;
        v45 = v84;
        _ConditionalContent<>.init(storage:)(v83, v115, v116, v87, v86);
        sub_1000135A0(v43, &qword_1001060C0);
        v88 = sub_100008EF4(&qword_100106108);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v71, 0, 1, v88);
        sub_100013880(v71, v74, &qword_1001060D0);
      }
      else
      {
        v89 = sub_100008EF4(&qword_100106108);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v74, 1, 1, v89);
      }
      v75 = (uint64_t)v81;
    }
    sub_10001355C(v74, v71, &qword_1001060D0);
    *(_QWORD *)v76 = 0;
    *(_BYTE *)(v76 + 8) = 1;
    *(_QWORD *)(v76 + 16) = v49;
    *(_BYTE *)(v76 + 24) = v110;
    *(_QWORD *)(v76 + 32) = v109;
    *(_BYTE *)(v76 + 40) = v108;
    v90 = v106;
    *(_QWORD *)(v76 + 48) = v107;
    *(_QWORD *)(v76 + 56) = v90;
    v91 = sub_100008EF4(&qword_100106110);
    sub_10001355C(v71, v76 + *(int *)(v91 + 48), &qword_1001060D0);
    sub_1000135A0(v74, &qword_1001060D0);
    sub_1000135A0(v71, &qword_1001060D0);
    v92 = sub_100008EF4(&qword_1001060F8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 56))(v76, 0, 1, v92);
    v78 = sub_100013880(v76, v75, &qword_1001060D8);
    v79 = v76;
    v80 = v123;
    v25 = (char *)v75;
  }
  else
  {
    v77 = sub_100008EF4(&qword_1001060F8);
    v78 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v25, 1, 1, v77);
    v79 = (uint64_t)v122;
    v80 = v123;
    v45 = v132;
  }
  v93 = *(_QWORD *)(v45 + 56);
  v94 = static Alignment.center.getter(v78);
  _FrameLayout.init(width:height:alignment:)(&v145, 0, 1, v93, 0, v94, v95);
  v132 = v145;
  LODWORD(v123) = v146;
  v96 = v147;
  v97 = v148;
  v122 = v149;
  v121 = v150;
  v98 = (uint64_t)v129;
  v99 = v130;
  sub_10001355C((uint64_t)v129, v130, &qword_1001060E0);
  sub_10001355C((uint64_t)v25, v79, &qword_1001060D8);
  v100 = v131;
  *v131 = 0;
  *((_BYTE *)v100 + 8) = 1;
  v100[2] = v80;
  *((_BYTE *)v100 + 24) = v128;
  v100[4] = v127;
  *((_BYTE *)v100 + 40) = v126;
  v101 = v124;
  v100[6] = v125;
  v100[7] = v101;
  v102 = (int *)sub_100008EF4(&qword_100106100);
  sub_10001355C(v99, (uint64_t)v100 + v102[12], &qword_1001060E0);
  sub_10001355C(v79, (uint64_t)v100 + v102[16], &qword_1001060D8);
  v103 = (char *)v100 + v102[20];
  *(_QWORD *)v103 = 0;
  v103[8] = 1;
  *((_QWORD *)v103 + 2) = v132;
  v103[24] = v123;
  *((_QWORD *)v103 + 4) = v96;
  v103[40] = v97;
  v104 = v121;
  *((_QWORD *)v103 + 6) = v122;
  *((_QWORD *)v103 + 7) = v104;
  sub_1000135A0((uint64_t)v25, &qword_1001060D8);
  sub_1000135A0(v98, &qword_1001060E0);
  sub_1000135A0(v79, &qword_1001060D8);
  return sub_1000135A0(v99, &qword_1001060E0);
}

uint64_t sub_10000E848@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(char *);
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 v140;
  uint64_t v141;
  unsigned __int8 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int8 v146;
  uint64_t v147;
  unsigned __int8 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int8 v152;
  uint64_t v153;
  unsigned __int8 v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 v158;
  uint64_t v159;
  unsigned __int8 v160;
  uint64_t v161;
  uint64_t v162;
  _OWORD v163[7];
  char v164;
  _OWORD v165[7];
  char v166;

  v127 = a2;
  v3 = sub_100008EF4(&qword_100106190);
  __chkstk_darwin(v3);
  v108 = (uint64_t *)((char *)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v133 = sub_100008EF4(&qword_100106198);
  v125 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v107 = (uint64_t)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008EF4(&qword_1001061A0);
  v7 = __chkstk_darwin(v6);
  v130 = (uint64_t)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v136 = (uint64_t)&v107 - v9;
  v10 = sub_100008EF4(&qword_1001061A8);
  __chkstk_darwin(v10);
  v12 = (char *)&v107 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008EF4(&qword_1001061B0);
  v14 = __chkstk_darwin(v13);
  v129 = (uint64_t)&v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v135 = (uint64_t)&v107 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v107 - v19;
  __chkstk_darwin(v18);
  v134 = (uint64_t)&v107 - v21;
  v22 = type metadata accessor for DynamicTypeSize(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v126 = (uint64_t)&v107 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v118 = (uint64_t)&v107 - v27;
  v28 = __chkstk_darwin(v26);
  v110 = (char *)&v107 - v29;
  v30 = __chkstk_darwin(v28);
  v131 = (uint64_t)&v107 - v31;
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v107 - v33;
  __chkstk_darwin(v32);
  v36 = (char *)&v107 - v35;
  sub_10009FD4C((uint64_t)&v107 - v35);
  LODWORD(v138) = enum case for DynamicTypeSize.accessibility3(_:);
  v137 = *(void (**)(char *))(v23 + 104);
  v137(v34);
  v37 = static DynamicTypeSize.< infix(_:_:)(v36, v34);
  v38 = *(void (**)(char *, uint64_t))(v23 + 8);
  v38(v34, v22);
  v39 = ((uint64_t (*)(char *, uint64_t))v38)(v36, v22);
  if ((v37 & 1) != 0)
    v40 = 0x4034000000000000;
  else
    v40 = 0x4045000000000000;
  v41 = static Alignment.center.getter(v39);
  _FrameLayout.init(width:height:alignment:)(&v139, v40, 0, 0, 1, v41, v42);
  v124 = v139;
  v123 = v140;
  v122 = v141;
  v121 = v142;
  v119 = v144;
  v120 = v143;
  v43 = type metadata accessor for SportsWidgetContentView(0);
  v44 = a1 + *(int *)(v43 + 28);
  v45 = *(_OWORD *)(v44 + 80);
  v165[4] = *(_OWORD *)(v44 + 64);
  v165[5] = v45;
  v165[6] = *(_OWORD *)(v44 + 96);
  v166 = *(_BYTE *)(v44 + 112);
  v46 = *(_OWORD *)(v44 + 48);
  v165[2] = *(_OWORD *)(v44 + 32);
  v165[3] = v46;
  v47 = *(_OWORD *)(v44 + 16);
  v165[0] = *(_OWORD *)v44;
  v165[1] = v47;
  *(_QWORD *)v12 = static HorizontalAlignment.center.getter(v43);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v111 = sub_100008EF4(&qword_1001061B8);
  v48 = sub_100011234(a1, (uint64_t)v165, (uint64_t)&v12[*(int *)(v111 + 44)]);
  v132 = a1 + *(int *)(v43 + 24);
  v49 = *(double *)(v132 + 80);
  v50 = static Alignment.center.getter(v48);
  sub_100095F6C(0.0, 1, 0.0, 1, v49, 0, 0.0, 1, (uint64_t)v20, 0.0, 1, 0.0, 1, v50, v51);
  v109 = (uint64_t *)v12;
  sub_1000135A0((uint64_t)v12, &qword_1001061A8);
  v128 = v20;
  sub_100013880((uint64_t)v20, v134, &qword_1001061B0);
  v52 = v131;
  sub_10009FD4C(v131);
  v53 = v138;
  v54 = (void (*)(char *, uint64_t, uint64_t))v137;
  ((void (*)(char *, _QWORD, uint64_t))v137)(v34, v138, v22);
  v55 = v52;
  LOBYTE(v52) = static DynamicTypeSize.< infix(_:_:)(v52, v34);
  v38(v34, v22);
  v56 = ((uint64_t (*)(uint64_t, uint64_t))v38)(v55, v22);
  if ((v52 & 1) != 0)
    v57 = 0x4034000000000000;
  else
    v57 = 0;
  v58 = static Alignment.center.getter(v56);
  _FrameLayout.init(width:height:alignment:)(&v145, v57, 0, 0, 1, v58, v59);
  v117 = v145;
  v116 = v146;
  v115 = v147;
  v114 = v148;
  v112 = v150;
  v113 = v149;
  v131 = a1;
  sub_10009FD4C((uint64_t)v34);
  v60 = v110;
  v54(v110, v53, v22);
  v61 = static DynamicTypeSize.< infix(_:_:)(v34, v60);
  v38(v60, v22);
  v62 = ((uint64_t (*)(char *, uint64_t))v38)(v34, v22);
  v63 = 1;
  if ((v61 & 1) != 0)
  {
    v64 = static HorizontalAlignment.center.getter(v62);
    v65 = (uint64_t)v108;
    *v108 = v64;
    *(_QWORD *)(v65 + 8) = 0;
    *(_BYTE *)(v65 + 16) = 1;
    v66 = sub_100008EF4(&qword_1001061C8);
    sub_100010014(v131, v65 + *(int *)(v66 + 44));
    v67 = *(_QWORD *)(v132 + *(int *)(type metadata accessor for SportsWidgetContentViewLayout(0) + 140));
    v68 = v107;
    sub_10001355C(v65, v107, &qword_100106190);
    *(_QWORD *)(v68 + *(int *)(v133 + 36)) = v67;
    sub_1000135A0(v65, &qword_100106190);
    sub_100013880(v68, v136, &qword_100106198);
    v63 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 56))(v136, v63, 1, v133);
  v69 = v118;
  v70 = v131;
  sub_10009FD4C(v118);
  ((void (*)(char *, _QWORD, uint64_t))v137)(v34, v138, v22);
  v71 = static DynamicTypeSize.< infix(_:_:)(v69, v34);
  v38(v34, v22);
  v72 = ((uint64_t (*)(uint64_t, uint64_t))v38)(v69, v22);
  if ((v71 & 1) != 0)
    v73 = 0x4034000000000000;
  else
    v73 = 0;
  v74 = static Alignment.center.getter(v72);
  v76 = _FrameLayout.init(width:height:alignment:)(&v151, v73, 0, 0, 1, v74, v75);
  v133 = v151;
  LODWORD(v125) = v152;
  v118 = v153;
  LODWORD(v110) = v154;
  v107 = v156;
  v108 = v155;
  v77 = *(_OWORD *)(v44 + 200);
  v163[4] = *(_OWORD *)(v44 + 184);
  v163[5] = v77;
  v163[6] = *(_OWORD *)(v44 + 216);
  v164 = *(_BYTE *)(v44 + 232);
  v78 = *(_OWORD *)(v44 + 136);
  v163[0] = *(_OWORD *)(v44 + 120);
  v163[1] = v78;
  v79 = *(_OWORD *)(v44 + 168);
  v163[2] = *(_OWORD *)(v44 + 152);
  v163[3] = v79;
  v80 = static HorizontalAlignment.center.getter(v76);
  v81 = (uint64_t)v109;
  *v109 = v80;
  *(_QWORD *)(v81 + 8) = 0;
  *(_BYTE *)(v81 + 16) = 1;
  v82 = sub_100011234(v70, (uint64_t)v163, v81 + *(int *)(v111 + 44));
  v83 = *(double *)(v132 + 80);
  v84 = static Alignment.center.getter(v82);
  v85 = (uint64_t)v128;
  sub_100095F6C(0.0, 1, 0.0, 1, v83, 0, 0.0, 1, (uint64_t)v128, 0.0, 1, 0.0, 1, v84, v86);
  sub_1000135A0(v81, &qword_1001061A8);
  v87 = v135;
  sub_100013880(v85, v135, &qword_1001061B0);
  v88 = v126;
  sub_10009FD4C(v126);
  ((void (*)(char *, _QWORD, uint64_t))v137)(v34, v138, v22);
  LOBYTE(v83) = static DynamicTypeSize.< infix(_:_:)(v88, v34);
  v38(v34, v22);
  v89 = ((uint64_t (*)(uint64_t, uint64_t))v38)(v88, v22);
  if ((LOBYTE(v83) & 1) != 0)
    v90 = 0x4034000000000000;
  else
    v90 = 0x4045000000000000;
  v91 = static Alignment.center.getter(v89);
  _FrameLayout.init(width:height:alignment:)(&v157, v90, 0, 0, 1, v91, v92);
  v138 = v157;
  LODWORD(v137) = v158;
  v132 = v159;
  LODWORD(v131) = v160;
  v126 = v161;
  v111 = v162;
  v93 = v134;
  sub_10001355C(v134, v85, &qword_1001061B0);
  v94 = v136;
  v95 = v130;
  sub_10001355C(v136, v130, &qword_1001061A0);
  v96 = v129;
  sub_10001355C(v87, v129, &qword_1001061B0);
  v97 = v127;
  *v127 = 0;
  *((_BYTE *)v97 + 8) = 1;
  v97[2] = v124;
  *((_BYTE *)v97 + 24) = v123;
  v97[4] = v122;
  *((_BYTE *)v97 + 40) = v121;
  v98 = v119;
  v97[6] = v120;
  v97[7] = v98;
  v99 = (int *)sub_100008EF4(&qword_1001061C0);
  sub_10001355C(v85, (uint64_t)v97 + v99[12], &qword_1001061B0);
  v100 = (char *)v97 + v99[16];
  *(_QWORD *)v100 = 0;
  v100[8] = 1;
  *((_QWORD *)v100 + 2) = v117;
  v100[24] = v116;
  *((_QWORD *)v100 + 4) = v115;
  v100[40] = v114;
  v101 = v112;
  *((_QWORD *)v100 + 6) = v113;
  *((_QWORD *)v100 + 7) = v101;
  sub_10001355C(v95, (uint64_t)v97 + v99[20], &qword_1001061A0);
  v102 = (char *)v97 + v99[24];
  *(_QWORD *)v102 = 0;
  v102[8] = 1;
  *((_QWORD *)v102 + 2) = v133;
  v102[24] = v125;
  *((_QWORD *)v102 + 4) = v118;
  v102[40] = (char)v110;
  v103 = v107;
  *((_QWORD *)v102 + 6) = v108;
  *((_QWORD *)v102 + 7) = v103;
  sub_10001355C(v96, (uint64_t)v97 + v99[28], &qword_1001061B0);
  v104 = (char *)v97 + v99[32];
  *(_QWORD *)v104 = 0;
  v104[8] = 1;
  *((_QWORD *)v104 + 2) = v138;
  v104[24] = (char)v137;
  *((_QWORD *)v104 + 4) = v132;
  v104[40] = v131;
  v105 = v111;
  *((_QWORD *)v104 + 6) = v126;
  *((_QWORD *)v104 + 7) = v105;
  sub_1000135A0(v135, &qword_1001061B0);
  sub_1000135A0(v94, &qword_1001061A0);
  sub_1000135A0(v93, &qword_1001061B0);
  sub_1000135A0(v96, &qword_1001061B0);
  sub_1000135A0(v95, &qword_1001061A0);
  return sub_1000135A0(v85, &qword_1001061B0);
}

uint64_t sub_10000F29C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t OpaqueTypeConformance2;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t KeyPath;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  int *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned __int8 v231;
  uint64_t v232;
  unsigned __int8 v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  unsigned __int8 v237;
  uint64_t v238;
  unsigned __int8 v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  unsigned __int8 v243;
  uint64_t v244;
  unsigned __int8 v245;
  uint64_t v246;
  uint64_t v247;

  v214 = a2;
  v3 = sub_100008EF4(&qword_1001062F8);
  __chkstk_darwin(v3);
  v204 = (uint64_t *)((char *)&v189 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100008EF4(&qword_100106300);
  v6 = __chkstk_darwin(v5);
  v220 = (uint64_t)&v189 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v219 = (uint64_t)&v189 - v8;
  v215 = sub_100008EF4(&qword_100106308);
  __chkstk_darwin(v215);
  v10 = (char *)&v189 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = sub_100008EF4(&qword_100106208);
  v196 = *(_QWORD *)(v216 - 8);
  v11 = __chkstk_darwin(v216);
  v189 = (char *)&v189 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v190 = (char *)&v189 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v189 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v189 - v18;
  v20 = sub_100008EF4(&qword_100106310);
  v21 = __chkstk_darwin(v20);
  v212 = (uint64_t)&v189 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v213 = (uint64_t)&v189 - v24;
  v25 = __chkstk_darwin(v23);
  v217 = (uint64_t)&v189 - v26;
  __chkstk_darwin(v25);
  v218 = (uint64_t)&v189 - v27;
  v28 = type metadata accessor for SportsWidgetContentView(0);
  v29 = (_QWORD *)(a1 + *(int *)(v28 + 24));
  v30 = v29[4];
  v31 = static Alignment.center.getter(v28);
  _FrameLayout.init(width:height:alignment:)(&v230, v30, 0, 0, 1, v31, v32);
  v211 = v230;
  v210 = v231;
  v209 = v232;
  v208 = v233;
  v206 = v235;
  v207 = v234;
  v33 = sub_10000C728();
  v197 = v28;
  v34 = *(int *)(v28 + 28);
  v205 = a1;
  v35 = a1 + v34;
  v221 = v29;
  if (v33)
  {
    v36 = *(_QWORD *)(v35 + 48);
    v37 = *(_QWORD *)(v35 + 56);
    v201 = *(_QWORD *)(v35 + 64);
    v202 = v36;
    v203 = v19;
    v38 = *(_QWORD *)(v35 + 72);
    v200 = *(_QWORD *)(v35 + 80);
    v39 = *(_QWORD *)(v35 + 88);
    v40 = (void *)objc_opt_self(UIColor);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    v41 = v17;
    v42 = Color.init(uiColor:)(objc_msgSend(v40, "labelColor"));
    v222 = 0x4049000000000000;
    v223 = v42;
    v224 = v202;
    v225 = v37;
    v226 = v201;
    v227 = v38;
    v228 = v200;
    v229 = v39;
    if (*(_BYTE *)(v35 + 96))
      v43 = 4;
    else
      v43 = 7;
    v44 = sub_1000132F8();
    View.accessibilityIdentifier(key:location:)(v43, 0, 14, 2, &type metadata for SportsWidgetLogoView, v44);
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v37);
    swift_release(v42);
    v45 = v196;
    v46 = v203;
    v47 = v216;
    (*(void (**)(char *, char *, uint64_t))(v196 + 32))(v203, v41, v216);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v10, v46, v47);
    swift_storeEnumTagMultiPayload(v10, v215, 0);
    v48 = sub_100008EF4(&qword_100106268);
    v222 = (uint64_t)&type metadata for SportsWidgetLogoView;
    v223 = v44;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v222, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
    v50 = sub_100013344();
    _ConditionalContent<>.init(storage:)(v10, v47, v48, OpaqueTypeConformance2, v50);
    v51 = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v46, v47);
  }
  else
  {
    v52 = *(_QWORD *)(v35 + 32);
    v53 = *(_QWORD *)(v35 + 40);
    v202 = v29[16];
    v222 = v52;
    v223 = v53;
    v54 = sub_100013080();
    v203 = v10;
    v55 = v29;
    v56 = v54;
    swift_bridgeObjectRetain(v53);
    v57 = Text.init<A>(_:)(&v222, &type metadata for String, v56);
    v59 = v58;
    v61 = v60;
    v63 = v62 & 1;
    v64 = Text.foregroundColor(_:)(v55[14], v57, v58, v63, v60);
    v66 = v65;
    v68 = v67;
    v70 = v69 & 1;
    sub_1000130C4(v57, v59, v63);
    swift_bridgeObjectRelease(v61);
    v71 = Text.font(_:)(v202, v64, v66, v70, v68);
    v73 = v72;
    v75 = v74;
    v77 = v76 & 1;
    sub_1000130C4(v64, v66, v70);
    swift_bridgeObjectRelease(v68);
    v78 = Text.fontWeight(_:)(0, 1, v71, v73, v77, v75);
    v80 = v79;
    LOBYTE(v66) = v81;
    v83 = v82;
    sub_1000130C4(v71, v73, v77);
    swift_bridgeObjectRelease(v75);
    v84 = v55[18];
    KeyPath = swift_getKeyPath(&unk_1000C5800);
    LOBYTE(v77) = *((_BYTE *)v55 + 152);
    v86 = swift_getKeyPath(&unk_1000C5830);
    v87 = v55[20];
    v10 = v203;
    v88 = swift_getKeyPath(&unk_1000C5860);
    *(_QWORD *)v10 = v78;
    *((_QWORD *)v10 + 1) = v80;
    v10[16] = v66 & 1;
    *((_QWORD *)v10 + 3) = v83;
    *((_QWORD *)v10 + 4) = KeyPath;
    *((_QWORD *)v10 + 5) = v84;
    v10[48] = 0;
    *((_QWORD *)v10 + 7) = v86;
    v10[64] = v77;
    *((_QWORD *)v10 + 9) = v88;
    *((_QWORD *)v10 + 10) = v87;
    swift_storeEnumTagMultiPayload(v10, v215, 1);
    v89 = sub_100008EF4(&qword_100106268);
    v90 = sub_1000132F8();
    v222 = (uint64_t)&type metadata for SportsWidgetLogoView;
    v223 = v90;
    v91 = swift_getOpaqueTypeConformance2(&v222, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
    v92 = sub_100013344();
    v51 = _ConditionalContent<>.init(storage:)(v10, v216, v89, v91, v92);
  }
  v93 = v221;
  v94 = v221[8];
  v95 = static Alignment.center.getter(v51);
  v97 = _FrameLayout.init(width:height:alignment:)(&v236, v94, 0, 0, 1, v95, v96);
  v203 = v236;
  LODWORD(v202) = v237;
  v201 = v238;
  LODWORD(v200) = v239;
  v198 = v241;
  v199 = v240;
  v98 = static VerticalAlignment.center.getter(v97);
  v99 = (uint64_t)v204;
  *v204 = v98;
  *(_QWORD *)(v99 + 8) = 0;
  *(_BYTE *)(v99 + 16) = 1;
  v100 = sub_100008EF4(&qword_100106318);
  v101 = v205;
  sub_1000106B4(v205, v99 + *(int *)(v100 + 44));
  v102 = type metadata accessor for SportsWidgetContentViewLayout(0);
  v103 = *(double *)((char *)v93 + *(int *)(v102 + 136));
  v104 = static Alignment.center.getter(v102);
  v105 = v220;
  sub_100095FC4(0.0, 1, 0.0, 1, v103, 0, 0.0, 1, v220, 0.0, 1, 0.0, 1, v104, v106);
  sub_1000135A0(v99, &qword_1001062F8);
  v107 = sub_100013880(v105, v219, &qword_100106300);
  v108 = v93[8];
  v109 = static Alignment.center.getter(v107);
  _FrameLayout.init(width:height:alignment:)(&v242, v108, 0, 0, 1, v109, v110);
  v204 = v242;
  v195 = v243;
  v194 = v244;
  v193 = v245;
  v191 = v247;
  v192 = v246;
  v111 = sub_10000C728();
  v112 = v101 + *(int *)(v197 + 28);
  if (v111)
  {
    v114 = *(_QWORD *)(v112 + 168);
    v113 = *(_QWORD *)(v112 + 176);
    v116 = *(_QWORD *)(v112 + 184);
    v115 = *(_QWORD *)(v112 + 192);
    v117 = *(_QWORD *)(v112 + 208);
    v205 = *(_QWORD *)(v112 + 200);
    v118 = (void *)objc_opt_self(UIColor);
    swift_bridgeObjectRetain(v117);
    swift_bridgeObjectRetain(v113);
    swift_bridgeObjectRetain(v115);
    v119 = Color.init(uiColor:)(objc_msgSend(v118, "labelColor"));
    v222 = 0x4049000000000000;
    v223 = v119;
    v224 = v114;
    v225 = v113;
    v226 = v116;
    v227 = v115;
    v228 = v205;
    v229 = v117;
    if (*(_BYTE *)(v112 + 216))
      v120 = 4;
    else
      v120 = 7;
    v121 = sub_1000132F8();
    v122 = v189;
    View.accessibilityIdentifier(key:location:)(v120, 0, 14, 2, &type metadata for SportsWidgetLogoView, v121);
    swift_bridgeObjectRelease(v117);
    swift_bridgeObjectRelease(v115);
    swift_bridgeObjectRelease(v113);
    swift_release(v119);
    v123 = v196;
    v124 = v190;
    v125 = v216;
    (*(void (**)(char *, char *, uint64_t))(v196 + 32))(v190, v122, v216);
    v126 = v123;
    (*(void (**)(char *, char *, uint64_t))(v123 + 16))(v10, v124, v125);
    swift_storeEnumTagMultiPayload(v10, v215, 0);
    v127 = sub_100008EF4(&qword_100106268);
    v222 = (uint64_t)&type metadata for SportsWidgetLogoView;
    v223 = v121;
    v128 = swift_getOpaqueTypeConformance2(&v222, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
    v129 = sub_100013344();
    v130 = v217;
    _ConditionalContent<>.init(storage:)(v10, v125, v127, v128, v129);
    v131 = (*(uint64_t (**)(char *, uint64_t))(v126 + 8))(v124, v125);
  }
  else
  {
    v132 = *(_QWORD *)(v112 + 152);
    v133 = *(_QWORD *)(v112 + 160);
    v205 = v93[16];
    v222 = v132;
    v223 = v133;
    v134 = sub_100013080();
    swift_bridgeObjectRetain(v133);
    v135 = Text.init<A>(_:)(&v222, &type metadata for String, v134);
    v137 = v136;
    v139 = v138;
    v141 = v140 & 1;
    v142 = Text.foregroundColor(_:)(v93[14], v135, v136, v141, v138);
    v144 = v143;
    v146 = v145;
    v148 = v147 & 1;
    sub_1000130C4(v135, v137, v141);
    swift_bridgeObjectRelease(v139);
    v149 = Text.font(_:)(v205, v142, v144, v148, v146);
    v151 = v150;
    v153 = v152;
    v155 = v154 & 1;
    sub_1000130C4(v142, v144, v148);
    swift_bridgeObjectRelease(v146);
    v156 = Text.fontWeight(_:)(0, 1, v149, v151, v155, v153);
    v158 = v157;
    LOBYTE(v144) = v159;
    v205 = v160;
    sub_1000130C4(v149, v151, v155);
    swift_bridgeObjectRelease(v153);
    v161 = v221;
    v162 = v221[18];
    v163 = swift_getKeyPath(&unk_1000C5800);
    LOBYTE(v155) = *((_BYTE *)v161 + 152);
    v164 = swift_getKeyPath(&unk_1000C5830);
    v165 = v161[20];
    v166 = swift_getKeyPath(&unk_1000C5860);
    *(_QWORD *)v10 = v156;
    *((_QWORD *)v10 + 1) = v158;
    v10[16] = v144 & 1;
    *((_QWORD *)v10 + 3) = v205;
    *((_QWORD *)v10 + 4) = v163;
    *((_QWORD *)v10 + 5) = v162;
    v10[48] = 0;
    *((_QWORD *)v10 + 7) = v164;
    v10[64] = v155;
    *((_QWORD *)v10 + 9) = v166;
    *((_QWORD *)v10 + 10) = v165;
    swift_storeEnumTagMultiPayload(v10, v215, 1);
    v167 = sub_100008EF4(&qword_100106268);
    v168 = sub_1000132F8();
    v222 = (uint64_t)&type metadata for SportsWidgetLogoView;
    v223 = v168;
    v169 = swift_getOpaqueTypeConformance2(&v222, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
    v170 = sub_100013344();
    v130 = v217;
    v131 = _ConditionalContent<>.init(storage:)(v10, v216, v167, v169, v170);
  }
  v171 = v221[4];
  v172 = static Alignment.center.getter(v131);
  _FrameLayout.init(width:height:alignment:)(&v222, v171, 0, 0, 1, v172, v173);
  v221 = (_QWORD *)v222;
  LODWORD(v216) = v223;
  v215 = v224;
  LODWORD(v205) = v225;
  v196 = v227;
  v197 = v226;
  v174 = v218;
  v175 = v213;
  sub_10001355C(v218, v213, &qword_100106310);
  v177 = v219;
  v176 = v220;
  sub_10001355C(v219, v220, &qword_100106300);
  v178 = v212;
  sub_10001355C(v130, v212, &qword_100106310);
  v179 = v214;
  *v214 = 0;
  *((_BYTE *)v179 + 8) = 1;
  v179[2] = v211;
  *((_BYTE *)v179 + 24) = v210;
  v179[4] = v209;
  *((_BYTE *)v179 + 40) = v208;
  v180 = v206;
  v179[6] = v207;
  v179[7] = v180;
  v181 = (int *)sub_100008EF4(&qword_100106320);
  sub_10001355C(v175, (uint64_t)v179 + v181[12], &qword_100106310);
  v182 = (char *)v179 + v181[16];
  *(_QWORD *)v182 = 0;
  v182[8] = 1;
  *((_QWORD *)v182 + 2) = v203;
  v182[24] = v202;
  *((_QWORD *)v182 + 4) = v201;
  v182[40] = v200;
  v183 = v198;
  *((_QWORD *)v182 + 6) = v199;
  *((_QWORD *)v182 + 7) = v183;
  sub_10001355C(v176, (uint64_t)v179 + v181[20], &qword_100106300);
  v184 = (char *)v179 + v181[24];
  *(_QWORD *)v184 = 0;
  v184[8] = 1;
  *((_QWORD *)v184 + 2) = v204;
  v184[24] = v195;
  *((_QWORD *)v184 + 4) = v194;
  v184[40] = v193;
  v185 = v191;
  *((_QWORD *)v184 + 6) = v192;
  *((_QWORD *)v184 + 7) = v185;
  sub_10001355C(v178, (uint64_t)v179 + v181[28], &qword_100106310);
  v186 = (char *)v179 + v181[32];
  *(_QWORD *)v186 = 0;
  v186[8] = 1;
  *((_QWORD *)v186 + 2) = v221;
  v186[24] = v216;
  *((_QWORD *)v186 + 4) = v215;
  v186[40] = v205;
  v187 = v196;
  *((_QWORD *)v186 + 6) = v197;
  *((_QWORD *)v186 + 7) = v187;
  sub_1000135A0(v217, &qword_100106310);
  sub_1000135A0(v177, &qword_100106300);
  sub_1000135A0(v174, &qword_100106310);
  sub_1000135A0(v178, &qword_100106310);
  sub_1000135A0(v176, &qword_100106300);
  return sub_1000135A0(v175, &qword_100106310);
}

uint64_t sub_100010014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD v69[4];
  uint64_t v70;
  __int128 v71;
  uint64_t v72;

  v68 = a2;
  v67 = sub_100008EF4(&qword_1001060C0);
  __chkstk_darwin(v67);
  v63 = (uint64_t *)((char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for SportsWidgetClock(0);
  __chkstk_darwin(v4);
  v65 = (uint64_t)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SportsWidgetClockView(0);
  v7 = __chkstk_darwin(v6);
  v64 = (uint64_t *)((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v66 = (uint64_t)&v59 - v9;
  v10 = sub_100008EF4(&qword_1001061D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008EF4(&qword_1001061D8);
  __chkstk_darwin(v13);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008EF4(&qword_1001061E0);
  __chkstk_darwin(v16);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100008EF4(&qword_1001061E8);
  __chkstk_darwin(v19);
  v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1;
  v23 = a1 + *(int *)(type metadata accessor for SportsWidgetContentView(0) + 28);
  v24 = (int *)type metadata accessor for SportsWidgetContentViewModel(0);
  if (*(_BYTE *)(v23 + v24[14]) == 1)
  {
    sub_10003B4A8((uint64_t)v69);
    v25 = v69[1];
    *(_OWORD *)(v15 + 8) = v69[0];
    *(_OWORD *)(v15 + 24) = v25;
    v26 = v69[3];
    *(_OWORD *)(v15 + 40) = v69[2];
    v27 = v70;
    v28 = v72;
    *v15 = 1;
    *(_OWORD *)(v15 + 56) = v26;
    *((_QWORD *)v15 + 9) = v27;
    *((_OWORD *)v15 + 5) = v71;
    *((_QWORD *)v15 + 12) = v28;
    swift_storeEnumTagMultiPayload(v15, v13, 0);
    sub_100013270(v69);
    v29 = sub_100012FF8();
    v30 = sub_1000139F8(&qword_100106120, type metadata accessor for SportsWidgetClockView, (uint64_t)&unk_1000C98A0);
    _ConditionalContent<>.init(storage:)(v15, &type metadata for SportsWidgetStaleView, v6, v29, v30);
    sub_10001355C((uint64_t)v18, (uint64_t)v12, &qword_1001061E0);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v31 = sub_1000131EC();
    v32 = sub_100013840(&qword_100106128, &qword_1001060C0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v12, v16, v67, v31, v32);
    sub_1000135A0((uint64_t)v18, &qword_1001061E0);
    sub_1000132B4(v69);
    v33 = sub_100008EF4(&qword_1001061F0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v21, 0, 1, v33);
    v34 = (uint64_t)v21;
    return sub_100013880(v34, v68, &qword_1001061E8);
  }
  v59 = v13;
  v60 = v6;
  v61 = v16;
  v62 = v21;
  if (*(_BYTE *)(v23 + v24[9]) == 1)
  {
    v35 = v65;
    v36 = sub_1000134DC(v23 + v24[6], v65, type metadata accessor for SportsWidgetClock);
    v63 = (uint64_t *)static Font.footnote.getter(v36);
    v37 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
    v38 = Color.init(uiColor:)(v37);
    v39 = static Font.footnote.getter(v38);
    KeyPath = swift_getKeyPath(&unk_1000C57D0);
    v41 = (uint64_t)v64;
    *v64 = KeyPath;
    v42 = sub_100008EF4(&qword_100105F38);
    swift_storeEnumTagMultiPayload(v41, v42, 0);
    v43 = v60;
    sub_10001303C(v35, v41 + *(int *)(v60 + 20), type metadata accessor for SportsWidgetClock);
    v44 = v41 + *(int *)(v43 + 24);
    *(_BYTE *)v44 = 1;
    *(_QWORD *)(v44 + 8) = v63;
    *(_QWORD *)(v44 + 16) = v38;
    *(_QWORD *)(v44 + 24) = v39;
    v45 = v66;
    sub_10001303C(v41, v66, type metadata accessor for SportsWidgetClockView);
    sub_1000134DC(v45, (uint64_t)v15, type metadata accessor for SportsWidgetClockView);
    swift_storeEnumTagMultiPayload(v15, v59, 1);
    v46 = sub_100012FF8();
    v47 = sub_1000139F8(&qword_100106120, type metadata accessor for SportsWidgetClockView, (uint64_t)&unk_1000C98A0);
    _ConditionalContent<>.init(storage:)(v15, &type metadata for SportsWidgetStaleView, v43, v46, v47);
    sub_10001355C((uint64_t)v18, (uint64_t)v12, &qword_1001061E0);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v48 = sub_1000131EC();
    v49 = sub_100013840(&qword_100106128, &qword_1001060C0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v50 = (uint64_t)v62;
    _ConditionalContent<>.init(storage:)(v12, v61, v67, v48, v49);
    sub_1000135A0((uint64_t)v18, &qword_1001061E0);
    sub_100013520(v45, type metadata accessor for SportsWidgetClockView);
LABEL_7:
    v56 = sub_100008EF4(&qword_1001061F0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v50, 0, 1, v56);
    v34 = v50;
    return sub_100013880(v34, v68, &qword_1001061E8);
  }
  v50 = (uint64_t)v62;
  if (*(_BYTE *)(v23 + v24[10]) == 1)
  {
    v51 = static HorizontalAlignment.center.getter(v24);
    v52 = (uint64_t)v63;
    *v63 = v51;
    *(_QWORD *)(v52 + 8) = 0;
    *(_BYTE *)(v52 + 16) = 1;
    v53 = sub_100008EF4(&qword_100106118);
    sub_100010CC4(v22, v52 + *(int *)(v53 + 44));
    sub_10001355C(v52, (uint64_t)v12, &qword_1001060C0);
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v54 = sub_1000131EC();
    v55 = sub_100013840(&qword_100106128, &qword_1001060C0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v12, v61, v67, v54, v55);
    sub_1000135A0(v52, &qword_1001060C0);
    goto LABEL_7;
  }
  v58 = sub_100008EF4(&qword_1001061F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v68, 1, 1, v58);
}

uint64_t sub_1000106B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[7];
  char v101;
  _OWORD v102[7];
  char v103;

  v84 = a2;
  v3 = sub_100008EF4(&qword_100106190);
  __chkstk_darwin(v3);
  v5 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100008EF4(&qword_100106198);
  v6 = __chkstk_darwin(v82);
  v86 = (uint64_t)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v81 = (uint64_t)&v68 - v8;
  v9 = sub_100008EF4(&qword_100106328);
  __chkstk_darwin(v9);
  v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008EF4(&qword_100106330);
  v13 = __chkstk_darwin(v12);
  v83 = (uint64_t)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v87 = (uint64_t)&v68 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v68 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v68 - v20;
  v74 = (uint64_t)&v68 - v20;
  v22 = type metadata accessor for SportsWidgetContentView(0);
  v23 = a1 + *(int *)(v22 + 28);
  v24 = *(_OWORD *)(v23 + 48);
  v102[2] = *(_OWORD *)(v23 + 32);
  v102[3] = v24;
  v103 = *(_BYTE *)(v23 + 112);
  v25 = *(_OWORD *)(v23 + 96);
  v26 = *(_OWORD *)(v23 + 64);
  v102[5] = *(_OWORD *)(v23 + 80);
  v102[6] = v25;
  v102[4] = v26;
  v27 = *(_OWORD *)(v23 + 16);
  v102[0] = *(_OWORD *)v23;
  v102[1] = v27;
  v28 = a1 + *(int *)(v22 + 24);
  *(_OWORD *)v11 = *(_OWORD *)(v28 + 96);
  v11[16] = 0;
  v73 = sub_100008EF4(&qword_100106338);
  v29 = sub_100012014(a1, (uint64_t)v102, (uint64_t)&v11[*(int *)(v73 + 44)]);
  v30 = *(double *)(v28 + 72);
  v31 = static Alignment.center.getter(v29);
  v85 = v19;
  sub_10009601C(0.0, 1, 0.0, 1, v30, 0, 0.0, 1, (uint64_t)v19, 0.0, 1, 0.0, 1, v31, v32);
  sub_1000135A0((uint64_t)v11, &qword_100106328);
  sub_100013880((uint64_t)v19, (uint64_t)v21, &qword_100106330);
  v33 = type metadata accessor for SportsWidgetContentViewLayout(0);
  v34 = *(int *)(v33 + 124);
  v35 = *(_QWORD *)(v28 + v34);
  v36 = static Alignment.center.getter(v33);
  v38 = _FrameLayout.init(width:height:alignment:)(&v88, v35, 0, 0, 1, v36, v37);
  v80 = v88;
  v79 = v89;
  v78 = v90;
  v77 = v91;
  v75 = v93;
  v76 = v92;
  *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v38);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v39 = sub_100008EF4(&qword_1001061C8);
  sub_100010014(a1, (uint64_t)&v5[*(int *)(v39 + 44)]);
  v40 = *(_QWORD *)(v28 + *(int *)(v33 + 144));
  v41 = v86;
  sub_10001355C((uint64_t)v5, v86, &qword_100106190);
  *(_QWORD *)(v41 + *(int *)(v82 + 36)) = v40;
  sub_1000135A0((uint64_t)v5, &qword_100106190);
  v42 = v81;
  v43 = sub_100013880(v41, v81, &qword_100106198);
  v44 = *(_QWORD *)(v28 + v34);
  v45 = static Alignment.center.getter(v43);
  _FrameLayout.init(width:height:alignment:)(&v94, v44, 0, 0, 1, v45, v46);
  v82 = v94;
  v72 = v95;
  v71 = v96;
  v70 = v97;
  v68 = v99;
  v69 = v98;
  v47 = *(_OWORD *)(v23 + 200);
  v100[4] = *(_OWORD *)(v23 + 184);
  v100[5] = v47;
  v100[6] = *(_OWORD *)(v23 + 216);
  v101 = *(_BYTE *)(v23 + 232);
  v48 = *(_OWORD *)(v23 + 136);
  v100[0] = *(_OWORD *)(v23 + 120);
  v100[1] = v48;
  v49 = *(_OWORD *)(v23 + 168);
  v100[2] = *(_OWORD *)(v23 + 152);
  v100[3] = v49;
  *(_OWORD *)v11 = *(_OWORD *)(v28 + 96);
  v50 = (uint64_t)&v11[*(int *)(v73 + 44)];
  v11[16] = 0;
  v51 = sub_100012014(a1, (uint64_t)v100, v50);
  v52 = *(double *)(v28 + 72);
  v53 = static Alignment.center.getter(v51);
  v54 = v87;
  sub_10009601C(0.0, 1, 0.0, 1, v52, 0, 0.0, 1, v87, 0.0, 1, 0.0, 1, v53, v55);
  sub_1000135A0((uint64_t)v11, &qword_100106328);
  v56 = (uint64_t)v85;
  sub_100013880(v54, (uint64_t)v85, &qword_100106330);
  v57 = v74;
  sub_10001355C(v74, v54, &qword_100106330);
  v58 = v42;
  v59 = v86;
  sub_10001355C(v42, v86, &qword_100106198);
  v60 = v83;
  sub_10001355C(v56, v83, &qword_100106330);
  v61 = v84;
  sub_10001355C(v54, v84, &qword_100106330);
  v62 = (int *)sub_100008EF4(&qword_100106340);
  v63 = v61 + v62[12];
  *(_QWORD *)v63 = 0;
  *(_BYTE *)(v63 + 8) = 1;
  *(_QWORD *)(v63 + 16) = v80;
  *(_BYTE *)(v63 + 24) = v79;
  *(_QWORD *)(v63 + 32) = v78;
  *(_BYTE *)(v63 + 40) = v77;
  v64 = v75;
  *(_QWORD *)(v63 + 48) = v76;
  *(_QWORD *)(v63 + 56) = v64;
  sub_10001355C(v59, v61 + v62[16], &qword_100106198);
  v65 = v61 + v62[20];
  *(_QWORD *)v65 = 0;
  *(_BYTE *)(v65 + 8) = 1;
  *(_QWORD *)(v65 + 16) = v82;
  *(_BYTE *)(v65 + 24) = v72;
  *(_QWORD *)(v65 + 32) = v71;
  *(_BYTE *)(v65 + 40) = v70;
  v66 = v68;
  *(_QWORD *)(v65 + 48) = v69;
  *(_QWORD *)(v65 + 56) = v66;
  sub_10001355C(v60, v61 + v62[24], &qword_100106330);
  sub_1000135A0((uint64_t)v85, &qword_100106330);
  sub_1000135A0(v58, &qword_100106198);
  sub_1000135A0(v57, &qword_100106330);
  sub_1000135A0(v60, &qword_100106330);
  sub_1000135A0(v59, &qword_100106198);
  return sub_1000135A0(v87, &qword_100106330);
}

uint64_t sub_100010CC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char v103;

  v91 = a2;
  v3 = sub_100008EF4(&qword_100106130);
  v4 = __chkstk_darwin(v3);
  v93 = (uint64_t)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v92 = (uint64_t)&v87 - v7;
  v8 = __chkstk_darwin(v6);
  v90 = (char *)&v87 - v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v87 - v10;
  v12 = type metadata accessor for SportsWidgetContentView(0);
  v13 = a1 + *(int *)(v12 + 28);
  v14 = (uint64_t *)(v13 + *(int *)(type metadata accessor for SportsWidgetContentViewModel(0) + 28));
  v15 = v14[1];
  v94 = v11;
  v88 = v12;
  v89 = a1;
  if (v15)
  {
    v95 = *v14;
    v96 = v15;
    v16 = sub_100013080();
    v87 = v14;
    v17 = v16;
    swift_bridgeObjectRetain(v15);
    v18 = Text.init<A>(_:)(&v95, &type metadata for String, v17);
    v20 = v19;
    v22 = v21;
    v24 = v23 & 1;
    v25 = a1 + *(int *)(v12 + 24);
    v26 = (int *)type metadata accessor for SportsWidgetContentViewLayout(0);
    v27 = Text.foregroundColor(_:)(*(_QWORD *)(v25 + v26[38]), v18, v20, v24, v22);
    v29 = v28;
    v31 = v30;
    v33 = v32 & 1;
    sub_1000130C4(v18, v20, v24);
    swift_bridgeObjectRelease(v22);
    v34 = Text.font(_:)(*(_QWORD *)(v25 + v26[37]), v27, v29, v33, v31);
    v36 = v35;
    v38 = v37;
    LOBYTE(v18) = v39 & 1;
    v40 = v29;
    v11 = v94;
    sub_1000130C4(v27, v40, v33);
    swift_bridgeObjectRelease(v31);
    v41 = *(_QWORD *)(v25 + v26[39]);
    KeyPath = swift_getKeyPath(&unk_1000C5800);
    LOBYTE(v26) = *(_BYTE *)(v25 + v26[40]);
    v43 = swift_getKeyPath(&unk_1000C5830);
    v95 = v34;
    v96 = v36;
    v97 = v18;
    v98 = v38;
    v99 = KeyPath;
    v100 = v41;
    v101 = 0;
    v102 = v43;
    v103 = (char)v26;
    v44 = sub_100008EF4(&qword_100106150);
    v45 = sub_1000130E4();
    View.accessibilityIdentifier(key:location:)(13, 0, 14, 2, v44, v45);
    v14 = v87;
    sub_1000130C4(v34, v36, v18);
    swift_release(v43);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v38);
    v46 = sub_100008EF4(&qword_100106138);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v11, 0, 1, v46);
  }
  else
  {
    v47 = sub_100008EF4(&qword_100106138);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v11, 1, 1, v47);
  }
  v48 = v14[3];
  if (v48)
  {
    v95 = v14[2];
    v96 = v48;
    v49 = sub_100013080();
    swift_bridgeObjectRetain(v48);
    v50 = Text.init<A>(_:)(&v95, &type metadata for String, v49);
    v52 = v51;
    v54 = v53;
    v56 = v55 & 1;
    v57 = v89 + *(int *)(v88 + 24);
    v58 = (int *)type metadata accessor for SportsWidgetContentViewLayout(0);
    v59 = Text.foregroundColor(_:)(*(_QWORD *)(v57 + v58[38]), v50, v52, v56, v54);
    v61 = v60;
    v63 = v62;
    v65 = v64 & 1;
    sub_1000130C4(v50, v52, v56);
    swift_bridgeObjectRelease(v54);
    v66 = v63;
    v67 = Text.font(_:)(*(_QWORD *)(v57 + v58[37]), v59, v61, v65, v63);
    v69 = v68;
    v71 = v70;
    LOBYTE(v63) = v72 & 1;
    sub_1000130C4(v59, v61, v65);
    swift_bridgeObjectRelease(v66);
    v73 = *(_QWORD *)(v57 + v58[39]);
    v74 = swift_getKeyPath(&unk_1000C5800);
    LOBYTE(v58) = *(_BYTE *)(v57 + v58[40]);
    v75 = swift_getKeyPath(&unk_1000C5830);
    v95 = v67;
    v96 = v69;
    v97 = v63;
    v98 = v71;
    v99 = v74;
    v100 = v73;
    v101 = 0;
    v102 = v75;
    v103 = (char)v58;
    v76 = sub_100008EF4(&qword_100106150);
    v77 = sub_1000130E4();
    v78 = (uint64_t)v90;
    v79 = v76;
    v11 = v94;
    View.accessibilityIdentifier(key:location:)(14, 0, 14, 2, v79, v77);
    sub_1000130C4(v67, v69, v63);
    swift_release(v75);
    swift_release(v74);
    swift_bridgeObjectRelease(v71);
    v80 = sub_100008EF4(&qword_100106138);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v78, 0, 1, v80);
  }
  else
  {
    v81 = sub_100008EF4(&qword_100106138);
    v78 = (uint64_t)v90;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v90, 1, 1, v81);
  }
  v82 = v92;
  sub_10001355C((uint64_t)v11, v92, &qword_100106130);
  v83 = v93;
  sub_10001355C(v78, v93, &qword_100106130);
  v84 = v91;
  sub_10001355C(v82, v91, &qword_100106130);
  v85 = sub_100008EF4(&qword_100106140);
  sub_10001355C(v83, v84 + *(int *)(v85 + 48), &qword_100106130);
  sub_1000135A0(v78, &qword_100106130);
  sub_1000135A0((uint64_t)v11, &qword_100106130);
  sub_1000135A0(v83, &qword_100106130);
  return sub_1000135A0(v82, &qword_100106130);
}

uint64_t sub_100011234@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v71 = a3;
  v5 = sub_100008EF4(&qword_100106200);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v59 - v9;
  v11 = sub_100008EF4(&qword_100106208);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v69 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v59 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v59 - v18;
  v20 = sub_100008EF4(&qword_100106210);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v59 - v24;
  if (sub_10000C728())
  {
    v70 = a1;
    v65 = v11;
    v66 = v25;
    v26 = a2;
    v28 = *(_QWORD *)(a2 + 48);
    v27 = *(_QWORD *)(a2 + 56);
    v29 = *(_QWORD *)(v26 + 64);
    v67 = v8;
    v68 = v12;
    v30 = *(_QWORD *)(v26 + 72);
    v62 = *(_QWORD *)(v26 + 80);
    v63 = v29;
    v31 = *(_QWORD *)(v26 + 88);
    v32 = (void *)objc_opt_self(UIColor);
    swift_bridgeObjectRetain(v31);
    v64 = v19;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v30);
    v33 = Color.init(uiColor:)(objc_msgSend(v32, "labelColor"));
    v72 = 0x4049000000000000;
    v73 = v33;
    v74 = v28;
    v75 = v27;
    v76 = v63;
    v77 = v30;
    v78 = v62;
    v79 = v31;
    if ((*(_BYTE *)(v26 + 96) & 1) != 0)
      v34 = 4;
    else
      v34 = 7;
    v35 = sub_1000132F8();
    View.accessibilityIdentifier(key:location:)(v34, 0, 14, 2, &type metadata for SportsWidgetLogoView, v35);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v27);
    swift_release(v33);
    v36 = v68;
    v37 = v17;
    v39 = v64;
    v38 = v65;
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v64, v37, v65);
    v40 = type metadata accessor for SportsWidgetContentView(0);
    v41 = *(_QWORD *)(v70 + *(int *)(v40 + 24) + 88);
    v42 = static Alignment.center.getter(v40);
    _FrameLayout.init(width:height:alignment:)(&v72, 0, 1, v41, 0, v42, v43);
    v63 = v72;
    LODWORD(v62) = v73;
    v61 = v74;
    v60 = v75;
    v44 = v76;
    v59 = v77;
    v45 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
    v46 = v69;
    v47 = v10;
    v48 = v39;
    v45(v69, v39, v38);
    v49 = v38;
    v45(v23, v46, v38);
    v50 = &v23[*(int *)(sub_100008EF4(&qword_100106238) + 48)];
    *(_QWORD *)v50 = 0;
    v50[8] = 1;
    *((_QWORD *)v50 + 2) = v63;
    v50[24] = v62;
    *((_QWORD *)v50 + 4) = v61;
    v50[40] = v60;
    *((_QWORD *)v50 + 6) = v44;
    v25 = v66;
    v8 = v67;
    a1 = v70;
    *((_QWORD *)v50 + 7) = v59;
    v51 = *(void (**)(char *, uint64_t))(v68 + 8);
    v52 = v48;
    v10 = v47;
    v51(v52, v49);
    v51(v46, v49);
    a2 = v26;
    v53 = sub_100008EF4(&qword_100106218);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v23, 0, 1, v53);
    sub_100013880((uint64_t)v23, (uint64_t)v25, &qword_100106210);
  }
  else
  {
    v54 = sub_100008EF4(&qword_100106218);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v25, 1, 1, v54);
  }
  *(_OWORD *)v10 = *(_OWORD *)(a1 + *(int *)(type metadata accessor for SportsWidgetContentView(0) + 24) + 96);
  v10[16] = 0;
  v55 = sub_100008EF4(&qword_100106220);
  sub_100011700(a1, a2, &v10[*(int *)(v55 + 44)]);
  sub_10001355C((uint64_t)v25, (uint64_t)v23, &qword_100106210);
  sub_10001355C((uint64_t)v10, (uint64_t)v8, &qword_100106200);
  v56 = v71;
  sub_10001355C((uint64_t)v23, v71, &qword_100106210);
  v57 = sub_100008EF4(&qword_100106228);
  sub_10001355C((uint64_t)v8, v56 + *(int *)(v57 + 48), &qword_100106200);
  sub_1000135A0((uint64_t)v10, &qword_100106200);
  sub_1000135A0((uint64_t)v25, &qword_100106210);
  sub_1000135A0((uint64_t)v8, &qword_100106200);
  return sub_1000135A0((uint64_t)v23, &qword_100106210);
}

uint64_t sub_100011700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t KeyPath;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  void (*v92)(char *, char *, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  void (*v115)(char *, char *, uint64_t);
  uint64_t v116;
  char *v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  _BYTE v150[56];
  __int128 v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  _OWORD v168[4];
  uint64_t v169;
  __int128 v170;
  uint64_t v171;

  v136 = a3;
  v128 = sub_100008EF4(&qword_100106240);
  __chkstk_darwin(v128);
  v129 = (uint64_t *)((char *)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100008EF4(&qword_100106248);
  v7 = __chkstk_darwin(v6);
  v135 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v134 = (char *)&v121 - v9;
  v10 = sub_100008EF4(&qword_100106250);
  v130 = *(_QWORD *)(v10 - 8);
  v131 = v10;
  v11 = __chkstk_darwin(v10);
  v127 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v126 = (char *)&v121 - v13;
  v14 = sub_100008EF4(&qword_100106258);
  v15 = __chkstk_darwin(v14);
  v133 = (char *)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v146 = (char *)&v121 - v17;
  v144 = sub_100008EF4(&qword_100106260);
  v147 = *(_QWORD *)(v144 - 8);
  v18 = __chkstk_darwin(v144);
  v132 = (char *)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v140 = (uint64_t)&v121 - v21;
  __chkstk_darwin(v20);
  v143 = (char *)&v121 - v22;
  v23 = type metadata accessor for SportsWidgetContentView(0);
  v24 = *(int *)(v23 + 28);
  v25 = (_QWORD *)(a1 + *(int *)(v23 + 24));
  v139 = v25[15];
  v26 = a1 + v24;
  v27 = type metadata accessor for SportsWidgetContentViewModel(0);
  v28 = 0;
  v124 = v27;
  v125 = v26;
  LODWORD(v142) = *(unsigned __int8 *)(v26 + *(int *)(v27 + 44));
  if ((v142 & 1) == 0)
    v28 = v25[17];
  v138 = v28;
  v29 = *(_QWORD *)(a2 + 40);
  v154 = *(_QWORD *)(a2 + 32);
  v155 = v29;
  v30 = sub_100013080();
  swift_bridgeObjectRetain(v29);
  v31 = Text.init<A>(_:)(&v154, &type metadata for String, v30);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v38 = Text.foregroundColor(_:)(v25[14], v31, v32, v37, v34);
  v145 = a2;
  v141 = v25;
  v40 = v39;
  v42 = v41;
  v44 = v43 & 1;
  sub_1000130C4(v31, v33, v37);
  swift_bridgeObjectRelease(v35);
  v45 = Text.font(_:)(v139, v38, v40, v44, v42);
  v47 = v46;
  v49 = v48;
  v51 = v50 & 1;
  sub_1000130C4(v38, v40, v44);
  swift_bridgeObjectRelease(v42);
  v52 = Text.fontWeight(_:)(v138, v142, v45, v47, v51, v49);
  v138 = v52;
  v139 = v53;
  v55 = v54;
  v56 = v53;
  LODWORD(v137) = v57 & 1;
  sub_1000130C4(v45, v47, v51);
  swift_bridgeObjectRelease(v49);
  v58 = v141;
  v59 = v141[18];
  KeyPath = swift_getKeyPath(&unk_1000C5800);
  LOBYTE(v44) = *((_BYTE *)v58 + 152);
  v61 = swift_getKeyPath(&unk_1000C5830);
  v62 = v58[20];
  v63 = swift_getKeyPath(&unk_1000C5860);
  v154 = v52;
  v155 = v55;
  v64 = v137;
  LOBYTE(v156) = v137;
  v157 = v56;
  v158 = KeyPath;
  v159 = v59;
  LOBYTE(v160) = 0;
  v161 = v61;
  LOBYTE(v162) = v44;
  v163 = v63;
  v164 = v62;
  v123 = *(unsigned __int8 *)(v145 + 96);
  if ((v123 & 1) != 0)
    v65 = 6;
  else
    v65 = 9;
  v66 = sub_100008EF4(&qword_100106268);
  v67 = sub_100013344();
  v68 = v140;
  View.accessibilityIdentifier(key:location:)(v65, 0, 14, 2, v66, v67);
  sub_1000130C4(v138, v55, v64);
  swift_release(v63);
  swift_release(v61);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v139);
  (*(void (**)(char *, uint64_t, uint64_t))(v147 + 32))(v143, v68, v144);
  if ((_DWORD)v142)
  {
    v69 = v123;
    if (*(_BYTE *)(v125 + *(int *)(v124 + 56)) == 1)
    {
      sub_10003B4A8((uint64_t)v168);
      v149 = v168[0];
      *(_OWORD *)v150 = v168[1];
      *(_OWORD *)&v150[16] = v168[2];
      v148 = 0;
      *(_OWORD *)&v150[32] = v168[3];
      *(_QWORD *)&v150[48] = v169;
      v151 = v170;
      v152 = v171;
      v153 = 0;
    }
    else
    {
      v76 = *(_QWORD *)(v145 + 16);
      v75 = *(_QWORD *)(v145 + 24);
      v77 = swift_bridgeObjectRetain(v75);
      v78 = static Font.largeTitle.getter(v77);
      v79 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
      v80 = Color.init(uiColor:)(v79);
      v148 = v76;
      *(_QWORD *)&v149 = v75;
      *((_QWORD *)&v149 + 1) = v78;
      *(_QWORD *)v150 = v80;
      *(int64x2_t *)&v150[8] = vdupq_n_s64(1uLL);
      *(_OWORD *)&v150[24] = xmmword_1000C5720;
      *(_OWORD *)&v150[40] = 0u;
      v151 = 0u;
      v152 = 0;
      v153 = 1;
    }
    v81 = sub_100012FF8();
    v82 = sub_1000133E0();
    _ConditionalContent<>.init(storage:)(&v148, &type metadata for SportsWidgetStaleView, &type metadata for SportsWidgetScoreView, v81, v82);
    v83 = v155;
    v85 = v164;
    v84 = v165;
    v86 = v166;
    v87 = v167;
    v121 = v156;
    v122 = v154;
    v124 = v157;
    v125 = v158;
    v137 = v159;
    v138 = v163;
    v139 = v160;
    v140 = v161;
    v142 = v162;
    if ((v69 & 1) != 0)
      v88 = 5;
    else
      v88 = 8;
    v89 = sub_100008EF4(&qword_1001062A0);
    v90 = sub_100013424();
    v91 = v127;
    View.accessibilityIdentifier(key:location:)(v88, 0, 14, 2, v89, v90);
    sub_100013490(v122, v83, v121, v124, v125, v137, v139, v140, v142, v138, v85, v84, v86, v87);
    v74 = v130;
    v73 = v131;
    v92 = *(void (**)(char *, char *, uint64_t))(v130 + 32);
    v93 = v126;
    v92(v126, v91, v131);
    v72 = (uint64_t)v146;
    v92(v146, v93, v73);
    v70 = 0;
    v71 = v145;
  }
  else
  {
    v70 = 1;
    v71 = v145;
    v72 = (uint64_t)v146;
    v74 = v130;
    v73 = v131;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v72, v70, 1, v73);
  if ((*(_BYTE *)(v71 + 112) & 1) != 0)
  {
    v96 = v141;
    v97 = v141[23];
    v98 = v141[24];
    swift_bridgeObjectRetain(v98);
    v99 = Image.init(systemName:)(v97, v98);
    v100 = v96[26];
    v101 = swift_getKeyPath(&unk_1000C5890);
    v102 = v96[25];
    v103 = swift_getKeyPath(&unk_1000C58C0);
    v104 = (char *)v96 + *(int *)(type metadata accessor for SportsWidgetContentViewLayout(0) + 116);
    v105 = swift_getKeyPath(&unk_1000C58F0);
    v106 = v129;
    v107 = (char *)v129 + *(int *)(v128 + 28);
    v108 = type metadata accessor for Image.Scale(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 16))(v107, v104, v108);
    *v106 = v105;
    v109 = sub_100008EF4(&qword_100106288);
    v95 = (uint64_t *)v134;
    sub_10001355C((uint64_t)v106, (uint64_t)&v134[*(int *)(v109 + 36)], &qword_100106240);
    *v95 = v99;
    v95[1] = v101;
    v95[2] = v100;
    v95[3] = v103;
    v95[4] = v102;
    swift_retain(v100);
    v110 = v102;
    v72 = (uint64_t)v146;
    swift_retain(v110);
    sub_1000135A0((uint64_t)v106, &qword_100106240);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56))(v95, 0, 1, v109);
  }
  else
  {
    v94 = sub_100008EF4(&qword_100106288);
    v95 = (uint64_t *)v134;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 56))(v134, 1, 1, v94);
  }
  v112 = (uint64_t)v135;
  v111 = v136;
  v114 = v132;
  v113 = (uint64_t)v133;
  v115 = *(void (**)(char *, char *, uint64_t))(v147 + 16);
  v117 = v143;
  v116 = v144;
  v115(v132, v143, v144);
  sub_10001355C(v72, v113, &qword_100106258);
  sub_10001355C((uint64_t)v95, v112, &qword_100106248);
  v115(v111, v114, v116);
  v118 = sub_100008EF4(&qword_100106290);
  sub_10001355C(v113, (uint64_t)&v111[*(int *)(v118 + 48)], &qword_100106258);
  sub_10001355C(v112, (uint64_t)&v111[*(int *)(v118 + 64)], &qword_100106248);
  sub_1000135A0((uint64_t)v95, &qword_100106248);
  sub_1000135A0((uint64_t)v146, &qword_100106258);
  v119 = *(void (**)(char *, uint64_t))(v147 + 8);
  v119(v117, v116);
  sub_1000135A0(v112, &qword_100106248);
  sub_1000135A0(v113, &qword_100106258);
  return ((uint64_t (*)(char *, uint64_t))v119)(v114, v116);
}

uint64_t sub_100012014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t KeyPath;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;

  v94 = a3;
  v95 = a2;
  v4 = sub_100008EF4(&qword_100106348);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v83 - v8;
  v10 = sub_100008EF4(&qword_100106260);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v83 - v15;
  v17 = sub_100008EF4(&qword_100106350);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v83 - v21;
  if (sub_10000C728())
  {
    v23 = v95;
    v85 = v16;
    v86 = v14;
    v87 = v11;
    v88 = v10;
    v90 = v22;
    v91 = v20;
    v92 = v9;
    v93 = v7;
    v24 = type metadata accessor for SportsWidgetContentView(0);
    v25 = *(int *)(v24 + 28);
    v26 = a1 + *(int *)(v24 + 24);
    v27 = *(_QWORD *)(v26 + 120);
    v89 = a1;
    v28 = a1 + v25;
    v29 = type metadata accessor for SportsWidgetContentViewModel(0);
    v30 = 0;
    LODWORD(v84) = *(unsigned __int8 *)(v28 + *(int *)(v29 + 44));
    if ((v84 & 1) == 0)
      v30 = *(_QWORD *)(v26 + 136);
    v83 = v30;
    v31 = *(_QWORD *)(v23 + 40);
    v96 = *(_QWORD *)(v23 + 32);
    v97 = v31;
    v32 = sub_100013080();
    swift_bridgeObjectRetain(v31);
    v33 = Text.init<A>(_:)(&v96, &type metadata for String, v32);
    v35 = v34;
    v37 = v36;
    v39 = v38 & 1;
    v40 = Text.foregroundColor(_:)(*(_QWORD *)(v26 + 112), v33, v34, v39, v36);
    v42 = v41;
    v44 = v43;
    v46 = v45 & 1;
    sub_1000130C4(v33, v35, v39);
    swift_bridgeObjectRelease(v37);
    v47 = Text.font(_:)(v27, v40, v42, v46, v44);
    v49 = v48;
    v51 = v50;
    v53 = v52 & 1;
    sub_1000130C4(v40, v42, v46);
    swift_bridgeObjectRelease(v44);
    v54 = Text.fontWeight(_:)(v83, v84, v47, v49, v53, v51);
    v84 = v54;
    v56 = v55;
    v58 = v57;
    v60 = v59 & 1;
    sub_1000130C4(v47, v49, v53);
    swift_bridgeObjectRelease(v51);
    v61 = *(_QWORD *)(v26 + 144);
    KeyPath = swift_getKeyPath(&unk_1000C5800);
    LOBYTE(v49) = *(_BYTE *)(v26 + 152);
    v63 = swift_getKeyPath(&unk_1000C5830);
    v64 = *(_QWORD *)(v26 + 160);
    v65 = swift_getKeyPath(&unk_1000C5860);
    v96 = v54;
    v97 = v56;
    v98 = v60;
    v99 = v58;
    v100 = KeyPath;
    v66 = KeyPath;
    v101 = v61;
    v102 = 0;
    v103 = v63;
    v104 = v49;
    v105 = v65;
    v106 = v64;
    if ((*(_BYTE *)(v95 + 96) & 1) != 0)
      v67 = 6;
    else
      v67 = 9;
    v68 = sub_100008EF4(&qword_100106268);
    v69 = sub_100013344();
    v70 = v86;
    View.accessibilityIdentifier(key:location:)(v67, 0, 14, 2, v68, v69);
    sub_1000130C4(v84, v56, v60);
    swift_release(v65);
    swift_release(v63);
    swift_release(v66);
    swift_bridgeObjectRelease(v58);
    v71 = v87;
    v72 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
    v73 = v85;
    v10 = v88;
    v72(v85, v70, v88);
    v22 = v90;
    v72(v90, v73, v10);
    v11 = v71;
    v74 = 0;
    v7 = v93;
    v75 = v94;
    v20 = v91;
    v9 = v92;
    a1 = v89;
  }
  else
  {
    v74 = 1;
    v75 = v94;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v22, v74, 1, v10);
  v76 = type metadata accessor for SportsWidgetContentView(0);
  v77 = a1 + *(int *)(v76 + 28);
  if (*(_BYTE *)(v77 + *(int *)(type metadata accessor for SportsWidgetContentViewModel(0) + 44)) == 1)
  {
    *(_OWORD *)v9 = *(_OWORD *)(a1 + *(int *)(v76 + 24) + 168);
    v78 = sub_100008EF4(&qword_100106368);
    sub_1000125A4(a1, v95, &v9[*(int *)(v78 + 44)]);
    v79 = sub_100008EF4(&qword_100106358);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v9, 0, 1, v79);
  }
  else
  {
    v80 = sub_100008EF4(&qword_100106358);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v9, 1, 1, v80);
  }
  sub_10001355C((uint64_t)v22, (uint64_t)v20, &qword_100106350);
  sub_10001355C((uint64_t)v9, (uint64_t)v7, &qword_100106348);
  sub_10001355C((uint64_t)v20, v75, &qword_100106350);
  v81 = sub_100008EF4(&qword_100106360);
  sub_10001355C((uint64_t)v7, v75 + *(int *)(v81 + 48), &qword_100106348);
  sub_1000135A0((uint64_t)v9, &qword_100106348);
  sub_1000135A0((uint64_t)v22, &qword_100106350);
  sub_1000135A0((uint64_t)v7, &qword_100106348);
  return sub_1000135A0((uint64_t)v20, &qword_100106350);
}

uint64_t sub_1000125A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t KeyPath;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  _BYTE v101[56];
  __int128 v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  _OWORD v119[4];
  uint64_t v120;
  __int128 v121;
  uint64_t v122;

  v95 = a3;
  v85 = sub_100008EF4(&qword_100106240);
  __chkstk_darwin(v85);
  v86 = (uint64_t *)((char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v84 = sub_100008EF4(&qword_100106288);
  __chkstk_darwin(v84);
  v91 = (uint64_t *)((char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v88 = sub_100008EF4(&qword_100106370);
  __chkstk_darwin(v88);
  v90 = (uint64_t)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100008EF4(&qword_100106378);
  v8 = __chkstk_darwin(v89);
  v94 = (uint64_t)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v87 = (uint64_t)&v71 - v11;
  __chkstk_darwin(v10);
  v93 = (uint64_t)&v71 - v12;
  v13 = sub_100008EF4(&qword_100106250);
  v97 = *(_QWORD *)(v13 - 8);
  v98 = v13;
  v14 = __chkstk_darwin(v13);
  v92 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v71 - v17;
  __chkstk_darwin(v16);
  v96 = (char *)&v71 - v19;
  KeyPath = type metadata accessor for SportsWidgetContentView(0);
  v83 = a1;
  v20 = a1 + *(int *)(KeyPath + 28);
  if (*(_BYTE *)(v20 + *(int *)(type metadata accessor for SportsWidgetContentViewModel(0) + 56)) == 1)
  {
    sub_10003B4A8((uint64_t)v119);
    v100 = v119[0];
    *(_OWORD *)v101 = v119[1];
    *(_OWORD *)&v101[16] = v119[2];
    v99 = 0;
    *(_OWORD *)&v101[32] = v119[3];
    *(_QWORD *)&v101[48] = v120;
    v102 = v121;
    v103 = v122;
    v104 = 0;
  }
  else
  {
    v22 = *(_QWORD *)(a2 + 16);
    v21 = *(_QWORD *)(a2 + 24);
    v23 = swift_bridgeObjectRetain(v21);
    v24 = a2;
    v25 = static Font.largeTitle.getter(v23);
    v26 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
    v27 = Color.init(uiColor:)(v26);
    v99 = v22;
    *(_QWORD *)&v100 = v21;
    *((_QWORD *)&v100 + 1) = v25;
    *(_QWORD *)v101 = v27;
    a2 = v24;
    *(int64x2_t *)&v101[8] = vdupq_n_s64(1uLL);
    *(_OWORD *)&v101[24] = xmmword_1000C5720;
    *(_OWORD *)&v101[40] = 0u;
    v102 = 0u;
    v103 = 0;
    v104 = 1;
  }
  v28 = sub_100012FF8();
  v29 = sub_1000133E0();
  _ConditionalContent<>.init(storage:)(&v99, &type metadata for SportsWidgetStaleView, &type metadata for SportsWidgetScoreView, v28, v29);
  v30 = v106;
  v32 = v115;
  v31 = v116;
  v33 = v117;
  v34 = v118;
  v72 = v107;
  v73 = v105;
  v74 = v108;
  v75 = v109;
  v76 = v110;
  v77 = v114;
  v78 = v111;
  v79 = v112;
  v80 = v113;
  v81 = a2;
  if ((*(_BYTE *)(a2 + 96) & 1) != 0)
    v35 = 5;
  else
    v35 = 8;
  v36 = sub_100008EF4(&qword_1001062A0);
  v37 = sub_100013424();
  View.accessibilityIdentifier(key:location:)(v35, 0, 14, 2, v36, v37);
  sub_100013490(v73, v30, v72, v74, v75, v76, v78, v79, v80, v77, v32, v31, v33, v34);
  (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v96, v18, v98);
  v38 = (_QWORD *)(v83 + *(int *)(KeyPath + 24));
  v39 = v38[23];
  v40 = v38[24];
  swift_bridgeObjectRetain(v40);
  v83 = Image.init(systemName:)(v39, v40);
  v41 = v38[26];
  KeyPath = swift_getKeyPath(&unk_1000C5890);
  v42 = v38[25];
  v43 = swift_getKeyPath(&unk_1000C58C0);
  v44 = type metadata accessor for SportsWidgetContentViewLayout(0);
  v45 = (char *)v38 + *(int *)(v44 + 116);
  v46 = swift_getKeyPath(&unk_1000C58F0);
  v47 = v86;
  v48 = (char *)v86 + *(int *)(v85 + 28);
  v49 = type metadata accessor for Image.Scale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v48, v45, v49);
  *v47 = v46;
  v50 = v91;
  sub_10001355C((uint64_t)v47, (uint64_t)v91 + *(int *)(v84 + 36), &qword_100106240);
  v51 = KeyPath;
  *v50 = v83;
  v50[1] = v51;
  v50[2] = v41;
  v50[3] = v43;
  v50[4] = v42;
  swift_retain(v41);
  swift_retain(v42);
  sub_1000135A0((uint64_t)v47, &qword_100106240);
  v52 = *(_QWORD *)((char *)v38 + *(int *)(v44 + 120));
  v53 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleCaption2);
  objc_msgSend(v53, "pointSize");
  v55 = v54;

  v56 = v90;
  sub_10001355C((uint64_t)v50, v90, &qword_100106288);
  v57 = v56 + *(int *)(v88 + 36);
  *(_QWORD *)v57 = v52;
  *(double *)(v57 + 8) = v55 + -3.0;
  sub_1000135A0((uint64_t)v50, &qword_100106288);
  if ((*(_BYTE *)(v81 + 112) & 1) != 0)
    v58 = 1.0;
  else
    v58 = 0.0;
  v59 = v87;
  sub_10001355C(v56, v87, &qword_100106370);
  *(double *)(v59 + *(int *)(v89 + 36)) = v58;
  sub_1000135A0(v56, &qword_100106370);
  v60 = v93;
  sub_100013880(v59, v93, &qword_100106378);
  v62 = v96;
  v61 = v97;
  v63 = *(void (**)(char *, char *, uint64_t))(v97 + 16);
  v64 = v92;
  v65 = v98;
  v63(v92, v96, v98);
  v66 = v94;
  sub_10001355C(v60, v94, &qword_100106378);
  v67 = v95;
  v63(v95, v64, v65);
  v68 = sub_100008EF4(&qword_100106380);
  sub_10001355C(v66, (uint64_t)&v67[*(int *)(v68 + 48)], &qword_100106378);
  sub_1000135A0(v60, &qword_100106378);
  v69 = *(void (**)(char *, uint64_t))(v61 + 8);
  v69(v62, v65);
  sub_1000135A0(v66, &qword_100106378);
  return ((uint64_t (*)(char *, uint64_t))v69)(v64, v65);
}

uint64_t sub_100012C50()
{
  return static View._viewListCount(inputs:)();
}

unint64_t sub_100012C6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100106038;
  if (!qword_100106038)
  {
    v1 = sub_100008F80(&qword_100106000);
    sub_100012CD8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100106038);
  }
  return result;
}

unint64_t sub_100012CD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100106040;
  if (!qword_100106040)
  {
    v1 = sub_100008F80(&qword_100106048);
    sub_100013840(&qword_100106050, &qword_100106058, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100106040);
  }
  return result;
}

uint64_t sub_100012D5C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a1;
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008EF4(&qword_100106398);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008EF4(&qword_1001063A0);
  __chkstk_darwin(v13);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 56))(a3, 1, 1);
  v35 = v15;
  v36 = v14;
  v18 = swift_bridgeObjectRetain(a2);
  static AccessibilityChildBehavior.combine.getter(v18);
  v33 = v10;
  v19 = sub_100008EF4(&qword_1001063A8);
  v34 = a3;
  v20 = v19;
  v21 = sub_100013840(&qword_1001063B0, &qword_1001063A8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  View.accessibilityElement(children:)(v8, v20, v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v38 = v37;
  v39 = a2;
  v22 = sub_100013080();
  v23 = Text.init<A>(_:)(&v38, &type metadata for String, v22);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v38 = v20;
  v39 = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibility(label:)(v23, v25, v29, v27, v9, OpaqueTypeConformance2);
  sub_1000130C4(v23, v25, v29);
  swift_bridgeObjectRelease(v27);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v9);
  v31 = v34;
  sub_100013880((uint64_t)v17, v34, &qword_1001063A0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v31, 0, 1, v36);
}

uint64_t sub_100012FD0()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_100012FE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100012D5C(*v1, v1[1], a1);
}

unint64_t sub_100012FF8()
{
  unint64_t result;

  result = qword_1001060B0;
  if (!qword_1001060B0)
  {
    result = swift_getWitnessTable(&unk_1000CE988, &type metadata for SportsWidgetStaleView);
    atomic_store(result, (unint64_t *)&qword_1001060B0);
  }
  return result;
}

uint64_t sub_10001303C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100013080()
{
  unint64_t result;

  result = qword_100106148;
  if (!qword_100106148)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100106148);
  }
  return result;
}

uint64_t sub_1000130C4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

unint64_t sub_1000130E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100106158;
  if (!qword_100106158)
  {
    v1 = sub_100008F80(&qword_100106150);
    sub_100013168();
    sub_100013840(&qword_100106180, &qword_100106188, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100106158);
  }
  return result;
}

unint64_t sub_100013168()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100106160;
  if (!qword_100106160)
  {
    v1 = sub_100008F80(&qword_100106168);
    sub_100013840(&qword_100106170, &qword_100106178, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100106160);
  }
  return result;
}

unint64_t sub_1000131EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001061F8;
  if (!qword_1001061F8)
  {
    v1 = sub_100008F80(&qword_1001061E0);
    sub_100012FF8();
    sub_1000139F8(&qword_100106120, type metadata accessor for SportsWidgetClockView, (uint64_t)&unk_1000C98A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001061F8);
  }
  return result;
}

_QWORD *sub_100013270(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[9];
  v3 = a1[10];
  swift_retain(a1[11]);
  swift_retain(v2);
  swift_retain(v3);
  return a1;
}

_QWORD *sub_1000132B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[9];
  v3 = a1[11];
  swift_release(a1[10]);
  swift_release(v2);
  swift_release(v3);
  return a1;
}

unint64_t sub_1000132F8()
{
  unint64_t result;

  result = qword_100106230;
  if (!qword_100106230)
  {
    result = swift_getWitnessTable(&unk_1000D0448, &type metadata for SportsWidgetLogoView);
    atomic_store(result, (unint64_t *)&qword_100106230);
  }
  return result;
}

unint64_t sub_100013344()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100106270;
  if (!qword_100106270)
  {
    v1 = sub_100008F80(&qword_100106268);
    sub_1000130E4();
    sub_100013840(&qword_100106278, &qword_100106280, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100106270);
  }
  return result;
}

unint64_t sub_1000133E0()
{
  unint64_t result;

  result = qword_100106298;
  if (!qword_100106298)
  {
    result = swift_getWitnessTable(&unk_1000CBA88, &type metadata for SportsWidgetScoreView);
    atomic_store(result, (unint64_t *)&qword_100106298);
  }
  return result;
}

unint64_t sub_100013424()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001062A8;
  if (!qword_1001062A8)
  {
    v1 = sub_100008F80(&qword_1001062A0);
    sub_100012FF8();
    sub_1000133E0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001062A8);
  }
  return result;
}

uint64_t sub_100013490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if ((a14 & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    a3 = a12;
    a4 = a13;
    swift_release(a11);
  }
  swift_release(a3);
  return swift_release(a4);
}

uint64_t sub_1000134DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100013520(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10001355C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008EF4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000135A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100008EF4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for SportsWidgetScoreViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SportsWidgetScoreViewModel(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for SportsWidgetScoreViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v3);
  return a1;
}

_QWORD *assignWithTake for SportsWidgetScoreViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetContentViewVoiceOverModifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetContentViewVoiceOverModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetContentViewVoiceOverModifier()
{
  return &type metadata for SportsWidgetContentViewVoiceOverModifier;
}

unint64_t sub_100013740()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100106388;
  if (!qword_100106388)
  {
    v1 = sub_100008F80(&qword_100106390);
    v2[0] = sub_100008F80(&qword_100106018);
    v2[1] = sub_100008F80(&qword_100106010);
    v2[2] = sub_100013840(&qword_100106028, &qword_100106018, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v2[3] = sub_100013840(&qword_100106030, &qword_100106010, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_100012C6C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100106388);
  }
  return result;
}

uint64_t sub_100013830(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D1920, 1);
}

uint64_t sub_100013840(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100008F80(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100013880(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008EF4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000138C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001063B8;
  if (!qword_1001063B8)
  {
    v1 = sub_100008F80(&qword_1001063C0);
    sub_10001392C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001063B8);
  }
  return result;
}

unint64_t sub_10001392C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001063C8;
  if (!qword_1001063C8)
  {
    v1 = sub_100008F80(&qword_1001063A0);
    v2[0] = sub_100008F80(&qword_1001063A8);
    v2[1] = sub_100013840(&qword_1001063B0, &qword_1001063A8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_1000139F8(&qword_1001063D0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001063C8);
  }
  return result;
}

uint64_t sub_1000139F8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100013A40()
{
  unint64_t result;

  result = qword_1001063D8;
  if (!qword_1001063D8)
  {
    result = swift_getWitnessTable(&unk_1000C5A10, &type metadata for TVSettingsSelectedAudioLanguageEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1001063D8);
  }
  return result;
}

uint64_t sub_100013A84()
{
  return sub_100013840(&qword_1001063E0, &qword_1001063E8, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_100013AB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  if (qword_100105D20 != -1)
    swift_once(&qword_100105D20, sub_10005AA14);
  v0 = qword_10011EF60;
  v1 = swift_bridgeObjectRetain(qword_10011EF60);
  v2 = sub_100015974(v1);
  result = swift_bridgeObjectRelease(v0);
  qword_10011EC00 = (uint64_t)v2;
  return result;
}

uint64_t sub_100013B18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD v21[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v21[0] = (char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011EC08);
  sub_10000909C(v16, (uint64_t)qword_10011EC08);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x614C206F69647541, 0xEE0065676175676ELL);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v2);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  v18 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v19 = v21[0];
  v18(v21[0], 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v19);
}

uint64_t sub_100013D48()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000905C(v0, qword_10011EC20);
  sub_10000909C(v0, (uint64_t)qword_10011EC20);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000015, 0x80000001000BF640);
}

uint64_t sub_100013DA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008EF4(&qword_100106608);
  sub_10000905C(v0, qword_10011EC38);
  v1 = sub_10000909C(v0, (uint64_t)qword_10011EC38);
  IntentDescription.init(stringLiteral:)(0xD000000000000031, 0x80000001000BF600);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_100013E30()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1000C5FB8);
  qword_10011EC50 = result;
  return result;
}

uint64_t sub_100013E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_retain(a3);
}

uint64_t sub_100013E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[23] = a2;
  v3[24] = a3;
  v3[22] = a1;
  return swift_task_switch(sub_100013E78, 0, 0);
}

uint64_t sub_100013E78()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  IntentParameter.wrappedValue.getter(v0 + 2);
  v1 = v0[3];
  v0[5] = v0[2];
  v2 = v0[4];
  v0[25] = v1;
  v0[26] = v2;
  v0[6] = v1;
  v0[7] = v2;
  IntentParameter.wrappedValue.getter(v0 + 18);
  v0[16] = v0[18];
  v3 = v0[19];
  v0[27] = v3;
  v0[17] = v3;
  if (qword_100105BD8 != -1)
    swift_once(&qword_100105BD8, sub_100013E30);
  v4 = qword_10011EC50;
  v0[28] = qword_10011EC50;
  v5 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v4);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[29] = v6;
  v7 = sub_100013840(&qword_1001065B8, &qword_1001065C0, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v0[30] = v7;
  *v6 = v0;
  v6[1] = sub_100013F8C;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 16, v4, &type metadata for String, v7);
}

uint64_t sub_100013F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  swift_release(v5);
  if (v0)
    v7 = sub_1000141BC;
  else
    v7 = sub_100014028;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100014028()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  IntentParameter.wrappedValue.getter(v0 + 11);
  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[13];
  v0[32] = v2;
  v0[33] = v3;
  v0[8] = v1;
  v0[9] = v2;
  v0[10] = v3;
  v4 = qword_10011EC50;
  v0[34] = qword_10011EC50;
  v5 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain(v4);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[35] = v6;
  *v6 = v0;
  v6[1] = sub_1000140C8;
  return AppEntity._value<A, B>(for:)(v0 + 14, v4, v0[30]);
}

uint64_t sub_1000140C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v6 = sub_1000141C8;
  else
    v6 = sub_100014150;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100014150()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 168) = v1;
  v2 = sub_1000164C8();
  static IntentResult.result<A>(value:)(v0 + 160, &type metadata for String, v2);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000141BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000141C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

__n128 sub_1000141D4@<Q0>(uint64_t a1@<X8>)
{
  __n128 result;
  uint64_t v3;
  __n128 v4;

  IntentParameter.wrappedValue.getter(&v3);
  result = v4;
  *(_QWORD *)a1 = v3;
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100014214(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];

  v1 = a1[1];
  v2 = a1[2];
  v4[0] = *a1;
  v4[1] = v1;
  v4[2] = v2;
  swift_bridgeObjectRetain(v1);
  swift_retain(v2);
  IntentParameter.wrappedValue.setter(v4);
  swift_release(v2);
  return swift_bridgeObjectRelease(v1);
}

uint64_t (*sub_100014278(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_1000142C0;
}

_QWORD *sub_1000142C4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[2];

  result = IntentParameter.wrappedValue.getter(v4);
  v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t sub_1000142FC(_QWORD *a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  return IntentParameter.wrappedValue.setter(v3);
}

uint64_t (*sub_100014330(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_1000142C0;
}

void sub_100014378(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

double sub_1000143A8()
{
  double result;

  if (qword_100105BD8 != -1)
    swift_once(&qword_100105BD8, sub_100013E30);
  *(_QWORD *)&result = swift_retain(qword_10011EC50).n128_u64[0];
  return result;
}

unint64_t sub_1000143EC()
{
  unint64_t result;

  result = qword_1001063F0;
  if (!qword_1001063F0)
  {
    result = swift_getWitnessTable(&unk_1000C5AA0, &type metadata for TVSettingsSelectedAudioLanguageEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1001063F0);
  }
  return result;
}

unint64_t sub_100014434()
{
  unint64_t result;

  result = qword_1001063F8;
  if (!qword_1001063F8)
  {
    result = swift_getWitnessTable(&unk_1000C5AC8, &type metadata for TVSettingsSelectedAudioLanguageEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1001063F8);
  }
  return result;
}

uint64_t sub_100014478(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000D199C, 1) + 8);
}

uint64_t sub_10001449C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100013A40();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_1000144DC@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105BC8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10011EC20, (uint64_t)sub_100013D48, a1);
}

uint64_t sub_100014510@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100105BD0 != -1)
    swift_once(&qword_100105BD0, sub_100013DA8);
  v2 = sub_100008EF4(&qword_100106608);
  v3 = sub_10000909C(v2, (uint64_t)qword_10011EC38);
  return sub_100016518(v3, a1);
}

uint64_t sub_100014570(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_1001065FC);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_1000145D8;
  *(_OWORD *)(v4 + 184) = *v1;
  *(_QWORD *)(v4 + 176) = a1;
  return swift_task_switch(sub_100013E78, 0, 0);
}

uint64_t sub_1000145D8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100014620@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100015F24();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100014644()
{
  return 0xD000000000000036;
}

unint64_t sub_100014664()
{
  unint64_t result;

  result = qword_100106408;
  if (!qword_100106408)
  {
    result = swift_getWitnessTable(&unk_1000C5B24, &type metadata for TVSettingsSelectedAudioLanguageEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106408);
  }
  return result;
}

unint64_t sub_1000146AC()
{
  unint64_t result;

  result = qword_100106410;
  if (!qword_100106410)
  {
    result = swift_getWitnessTable(&unk_1000C5F84, &type metadata for TVSettingsSelectedAudioLanguageEntity);
    atomic_store(result, (unint64_t *)&qword_100106410);
  }
  return result;
}

uint64_t sub_1000146F0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch(sub_100014708, 0, 0);
}

uint64_t sub_100014708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  NSString v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v0 + 16) = &type metadata for TVSettingsSelectedAudioLanguageEntity;
  v1 = sub_100008EF4(&qword_1001065A0);
  v2 = String.init<A>(describing:)(v0 + 16, v1);
  v4 = v3;
  if (qword_100105D10 != -1)
    swift_once(&qword_100105D10, sub_1000588A0);
  swift_beginAccess(&off_100108C68, v0 + 16, 32, 0);
  v5 = off_100108C68;
  if (*((_QWORD *)off_100108C68 + 2))
  {
    swift_bridgeObjectRetain(v4);
    v6 = sub_10002D668(v2, v4);
    if ((v7 & 1) != 0)
      v8 = *(_BYTE *)(v5[7] + v6);
    else
      v8 = 0;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v8 = 0;
  }
  swift_endAccess(v0 + 16);
  swift_bridgeObjectRelease(v4);
  sub_10005AB94(v8);
  sub_100077438();
  v11 = v10;
  v12 = *(uint64_t **)(v0 + 40);
  v13 = (void *)objc_opt_self(WLKSettingsLanguageUtilities);
  v14 = String._bridgeToObjectiveC()();
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v13, "userFacingLocalizedNameForLanguageCode:autoString:", v14, v15);

  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  swift_bridgeObjectRelease(v11);
  *v12 = v17;
  v12[1] = v19;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000148BC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a2[1];
  *(_QWORD *)(v2 + 40) = *a2;
  *(_QWORD *)(v2 + 48) = v3;
  return swift_task_switch(sub_1000148D8, 0, 0);
}

uint64_t sub_1000148D8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  sub_100015D30(*(_QWORD *)(v0 + 40), *(void **)(v0 + 48));
  v1 = sub_10005AD48();
  if (v2)
  {
    v3 = v1;
    v4 = v2;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease(0xE000000000000000);
    v5._countAndFlagsBits = v3;
    v5._object = v4;
    String.append(_:)(v5);
    sub_1000A3EAC(0xD000000000000012, (void *)0x80000001000BF550);
    swift_bridgeObjectRelease(0x80000001000BF550);
    if (qword_100105DF8 != -1)
      swift_once(&qword_100105DF8, sub_10007A8A0);
    *(_QWORD *)(v0 + 16) = &type metadata for TVSettingsSelectedAudioLanguageEntity;
    v6 = sub_100008EF4(&qword_1001065A0);
    v7 = String.init<A>(describing:)(v0 + 16, v6);
    v9 = v8;
    if (qword_100105E00 != -1)
      swift_once(&qword_100105E00, sub_10007AB20);
    swift_beginAccess(&off_10010A098, v0 + 16, 32, 0);
    v10 = off_10010A098;
    if (*((_QWORD *)off_10010A098 + 2))
    {
      swift_bridgeObjectRetain(v9);
      v11 = sub_10002D668(v7, v9);
      if ((v12 & 1) != 0)
        v13 = *(_BYTE *)(v10[7] + v11);
      else
        v13 = 0;
      swift_bridgeObjectRelease(v9);
    }
    else
    {
      v13 = 0;
    }
    swift_endAccess(v0 + 16);
    swift_bridgeObjectRelease(v9);
    sub_1000A4558(v13, v3, (uint64_t)v4);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v14 = type metadata accessor for AppIntentError(0);
    v15 = sub_100016474();
    swift_allocError(v14, v15, 0, 0);
    v16 = static AppIntentError.Unrecoverable.unknown.getter();
    swift_willThrow(v16);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100014AF4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100014B0C, 0, 0);
}

uint64_t sub_100014B0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(v0 + 16);
  *v1 = sub_100016248();
  v1[1] = v2;
  v1[2] = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100014B4C()
{
  unint64_t result;

  result = qword_100106420;
  if (!qword_100106420)
  {
    result = swift_getWitnessTable(&unk_1000C5B5C, &type metadata for TVSettingsSelectedAudioLanguageEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106420);
  }
  return result;
}

uint64_t sub_100014B90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10001591C();
  *v4 = v2;
  v4[1] = sub_100014BF8;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

uint64_t sub_100014BF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

unint64_t sub_100014C5C()
{
  unint64_t result;

  result = qword_100106430;
  if (!qword_100106430)
  {
    result = swift_getWitnessTable(&unk_1000C5BB4, &type metadata for TVSettingsSelectedAudioLanguageEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106430);
  }
  return result;
}

unint64_t sub_100014CA4()
{
  unint64_t result;

  result = qword_100106438;
  if (!qword_100106438)
  {
    result = swift_getWitnessTable(&unk_1000C5C14, &type metadata for TVSettingsSelectedAudioLanguageEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106438);
  }
  return result;
}

unint64_t sub_100014CEC()
{
  unint64_t result;

  result = qword_100106440[0];
  if (!qword_100106440[0])
  {
    result = swift_getWitnessTable(&unk_1000C5F2C, &type metadata for TVSettingsSelectedAudioLanguageEntity);
    atomic_store(result, qword_100106440);
  }
  return result;
}

uint64_t sub_100014D30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10001591C();
  *v5 = v2;
  v5[1] = sub_100014D9C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100014D9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_100014DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10001591C();
  *v4 = v2;
  v4[1] = sub_100016564;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_100014E5C()
{
  unint64_t result;

  result = qword_100106458;
  if (!qword_100106458)
  {
    result = swift_getWitnessTable(&unk_1000C5C3C, &type metadata for TVSettingsSelectedAudioLanguageEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106458);
  }
  return result;
}

unint64_t sub_100014EA4()
{
  unint64_t result;

  result = qword_100106460;
  if (!qword_100106460)
  {
    result = swift_getWitnessTable(&unk_1000C5ED4, &type metadata for TVSettingsSelectedAudioLanguageEntity);
    atomic_store(result, (unint64_t *)&qword_100106460);
  }
  return result;
}

unint64_t sub_100014EEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100106468;
  if (!qword_100106468)
  {
    v1 = sub_100008F80(qword_100106470);
    sub_100014EA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100106468);
  }
  return result;
}

uint64_t sub_100014F50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100014B4C();
  *v5 = v2;
  v5[1] = sub_100016560;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_100014FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to DynamicOptionsProvider.defaultResult()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000145D8;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

ValueMetadata *type metadata accessor for TVSettingsSelectedAudioLanguageEntity.Query()
{
  return &type metadata for TVSettingsSelectedAudioLanguageEntity.Query;
}

uint64_t destroy for TVSettingsSelectedAudioLanguageEntity(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 16));
}

_QWORD *_s17TVWidgetExtension37TVSettingsSelectedAudioLanguageEntityVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *assignWithCopy for TVSettingsSelectedAudioLanguageEntity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

__n128 initializeWithTake for TVSettingsSelectedAudioLanguageEntity(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for TVSettingsSelectedAudioLanguageEntity(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TVSettingsSelectedAudioLanguageEntity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TVSettingsSelectedAudioLanguageEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TVSettingsSelectedAudioLanguageEntity()
{
  return &type metadata for TVSettingsSelectedAudioLanguageEntity;
}

uint64_t destroy for TVSettingsSelectedAudioLanguageEntity.UpdateIntent_value(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s17TVWidgetExtension37TVSettingsSelectedAudioLanguageEntityV18UpdateIntent_valueVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for TVSettingsSelectedAudioLanguageEntity.UpdateIntent_value(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

_QWORD *assignWithTake for TVSettingsSelectedAudioLanguageEntity.UpdateIntent_value(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TVSettingsSelectedAudioLanguageEntity.UpdateIntent_value(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TVSettingsSelectedAudioLanguageEntity.UpdateIntent_value(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TVSettingsSelectedAudioLanguageEntity.UpdateIntent_value()
{
  return &type metadata for TVSettingsSelectedAudioLanguageEntity.UpdateIntent_value;
}

uint64_t sub_100015388()
{
  return sub_100013840(&qword_100106488, &qword_100106490, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

unint64_t sub_1000153B4()
{
  return 0xD000000000000015;
}

uint64_t sub_1000153D4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000153E0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100015750();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100015960(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_100015428@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105BC0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10011EC08, (uint64_t)sub_100013B18, a1);
}

uint64_t sub_10001544C@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_10000909C(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

uint64_t sub_1000154BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100014CEC();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_1000154F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000146AC();
  return _UniqueEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_10001552C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000155BC();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100015568()
{
  unint64_t result;

  result = qword_100106498;
  if (!qword_100106498)
  {
    result = swift_getWitnessTable(&unk_1000C5CC4, &type metadata for TVSettingsSelectedAudioLanguageEntity);
    atomic_store(result, (unint64_t *)&qword_100106498);
  }
  return result;
}

void *sub_1000155AC()
{
  return &protocol witness table for String;
}

unint64_t sub_1000155BC()
{
  unint64_t result;

  result = qword_1001064A8;
  if (!qword_1001064A8)
  {
    result = swift_getWitnessTable(&unk_1000C5CEC, &type metadata for TVSettingsSelectedAudioLanguageEntity);
    atomic_store(result, (unint64_t *)&qword_1001064A8);
  }
  return result;
}

unint64_t sub_100015604()
{
  unint64_t result;

  result = qword_1001064B0;
  if (!qword_1001064B0)
  {
    result = swift_getWitnessTable(&unk_1000C5D1C, &type metadata for TVSettingsSelectedAudioLanguageEntity);
    atomic_store(result, (unint64_t *)&qword_1001064B0);
  }
  return result;
}

unint64_t sub_10001564C()
{
  unint64_t result;

  result = qword_1001064B8;
  if (!qword_1001064B8)
  {
    result = swift_getWitnessTable(&unk_1000C5D44, &type metadata for TVSettingsSelectedAudioLanguageEntity);
    atomic_store(result, (unint64_t *)&qword_1001064B8);
  }
  return result;
}

unint64_t sub_100015694()
{
  unint64_t result;

  result = qword_1001064C0;
  if (!qword_1001064C0)
  {
    result = swift_getWitnessTable(&unk_1000C5D6C, &type metadata for TVSettingsSelectedAudioLanguageEntity);
    atomic_store(result, (unint64_t *)&qword_1001064C0);
  }
  return result;
}

unint64_t sub_1000156D8(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_10001570C();
  a1[2] = sub_100015750();
  result = sub_1000146AC();
  a1[3] = result;
  return result;
}

unint64_t sub_10001570C()
{
  unint64_t result;

  result = qword_100106510;
  if (!qword_100106510)
  {
    result = swift_getWitnessTable(&unk_1000C5E6C, &type metadata for TVSettingsSelectedAudioLanguageEntity);
    atomic_store(result, (unint64_t *)&qword_100106510);
  }
  return result;
}

unint64_t sub_100015750()
{
  unint64_t result;

  result = qword_100106518;
  if (!qword_100106518)
  {
    result = swift_getWitnessTable(&unk_1000C5E34, &type metadata for TVSettingsSelectedAudioLanguageEntity);
    atomic_store(result, (unint64_t *)&qword_100106518);
  }
  return result;
}

void *sub_100015794()
{
  return &protocol witness table for String;
}

unint64_t sub_1000157A0(uint64_t a1)
{
  unint64_t result;

  result = sub_1000157C4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000157C4()
{
  unint64_t result;

  result = qword_100106560;
  if (!qword_100106560)
  {
    result = swift_getWitnessTable(&unk_1000C5E9C, &type metadata for TVSettingsSelectedAudioLanguageEntity);
    atomic_store(result, (unint64_t *)&qword_100106560);
  }
  return result;
}

uint64_t sub_100015808()
{
  return sub_100013840(&qword_100106568, &qword_100106570, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

unint64_t sub_100015838()
{
  unint64_t result;

  result = qword_100106578;
  if (!qword_100106578)
  {
    result = swift_getWitnessTable(&unk_1000C5DFC, &type metadata for TVSettingsSelectedAudioLanguageEntity);
    atomic_store(result, (unint64_t *)&qword_100106578);
  }
  return result;
}

unint64_t sub_100015880()
{
  unint64_t result;

  result = qword_100106580;
  if (!qword_100106580)
  {
    result = swift_getWitnessTable(&unk_1000C5DCC, &type metadata for TVSettingsSelectedAudioLanguageEntity);
    atomic_store(result, (unint64_t *)&qword_100106580);
  }
  return result;
}

unint64_t sub_1000158C8()
{
  unint64_t result;

  result = qword_100106588;
  if (!qword_100106588)
  {
    result = swift_getWitnessTable(&unk_1000C5D94, &type metadata for TVSettingsSelectedAudioLanguageEntity);
    atomic_store(result, (unint64_t *)&qword_100106588);
  }
  return result;
}

void *sub_10001590C()
{
  return &protocol witness table for String;
}

unint64_t sub_10001591C()
{
  unint64_t result;

  result = qword_100106590;
  if (!qword_100106590)
  {
    result = swift_getWitnessTable(&unk_1000C5AE4, &type metadata for TVSettingsSelectedAudioLanguageEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106590);
  }
  return result;
}

uint64_t sub_100015960(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

_QWORD *sub_100015974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return &_swiftEmptyArrayStorage;
  v3 = sub_100008EF4(&qword_1001065D0);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_100015B34((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_1000164BC(v8);
  if (v7 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v4;
}

void sub_100015A58(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        v12 = type metadata accessor for TVWidgetContentRefinedViewModel();
        swift_arrayInitWithCopy(v9 + 4, a2 + 8 * a3, v5, v12);
        return;
      }
    }
    else
    {
      v8 = sub_100008EF4(&qword_100106610);
      v9 = (_QWORD *)swift_allocObject(v8, 8 * v5 + 32, 7);
      v10 = j__malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_11;
  }
}

uint64_t sub_100015B34(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100015D30(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t result;
  Swift::String v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v19 = (uint64_t)&type metadata for TVSettingsSelectedAudioLanguageEntity;
  v5 = sub_100008EF4(&qword_1001065A0);
  v6 = String.init<A>(describing:)(&v19, v5);
  v8 = v7;
  if (qword_100105D10 != -1)
    swift_once(&qword_100105D10, sub_1000588A0);
  swift_beginAccess(&off_100108C68, &v19, 32, 0);
  v9 = off_100108C68;
  if (*((_QWORD *)off_100108C68 + 2))
  {
    swift_bridgeObjectRetain(v8);
    v10 = sub_10002D668(v6, v8);
    if ((v11 & 1) != 0)
      v12 = *(_BYTE *)(v9[7] + v10);
    else
      v12 = 0;
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v12 = 0;
  }
  swift_endAccess(&v19);
  swift_bridgeObjectRelease(v8);
  result = sub_10005AB94(v12);
  if (!v2)
  {
    if (qword_100105BB8 != -1)
      swift_once(&qword_100105BB8, sub_100013AB0);
    result = sub_100077304(a1, (uint64_t)a2, (_QWORD *)qword_10011EC00);
    if ((result & 1) == 0)
    {
      v19 = 0;
      v20 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v20);
      v19 = 0x2064696C61766E69;
      v20 = (void *)0xEF203A65756C6176;
      v14._countAndFlagsBits = a1;
      v14._object = a2;
      String.append(_:)(v14);
      v15 = v20;
      sub_1000A3EAC(v19, v20);
      swift_bridgeObjectRelease(v15);
      v16 = type metadata accessor for AppIntentError(0);
      v17 = sub_100016474();
      swift_allocError(v16, v17, 0, 0);
      v18 = static AppIntentError.Unrecoverable.notAllowed.getter();
      return swift_willThrow(v18);
    }
  }
  return result;
}

uint64_t sub_100015F24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v0 = sub_100008EF4(&qword_1001065D8);
  __chkstk_darwin(v0);
  v32 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for InputConnectionBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v31 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_1001065E0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  v30 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008EF4(&qword_1001065E8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000018, 0x80000001000BF5B0);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v29(v13, 1, 1, v14);
  v18 = type metadata accessor for IntentDialog(0);
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v10, 1, 1, v18);
  v19(v8, 1, 1, v18);
  v20 = enum case for InputConnectionBehavior.default(_:);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v21 = v31;
  v28(v31, enum case for InputConnectionBehavior.default(_:), v2);
  v22 = sub_100014CEC();
  v27 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v17, v13, &v33, v10, v8, v21, v22);
  sub_100008EF4(&qword_1001065F0);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000002ALL, 0x80000001000BF5D0);
  v29(v13, 1, 1, v30);
  v23 = type metadata accessor for String.IntentInputOptions(0);
  v33 = 0;
  v34 = 0;
  v24 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v32, 1, 1, v23);
  v19(v10, 1, 1, v18);
  v28(v21, v20, v2);
  IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v17, v13, &v33, v24, v10, v21);
  return v27;
}

uint64_t sub_100016248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  ValueMetadata *v19;

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &type metadata for TVSettingsSelectedAudioLanguageEntity;
  v13 = sub_100008EF4(&qword_1001065A0);
  v14 = String.init<A>(describing:)(&v19, v13);
  sub_100008EF4(&qword_1001063E8);
  v15 = String.LocalizationValue.init(stringLiteral:)(0x614C206F69647541, 0xEE0065676175676ELL);
  static Locale.current.getter(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0xD000000000000012, 0x80000001000BF530, v6, v3, 0, 0, 256);
  v16 = sub_100013840(&qword_1001065B8, &qword_1001065C0, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v12, &unk_1001065A8, 0, &unk_1001065B0, 0, &type metadata for TVSettingsSelectedAudioLanguageEntity.UpdateIntent_value, v16);
  return v14;
}

unint64_t sub_100016474()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001065C8;
  if (!qword_1001065C8)
  {
    v1 = type metadata accessor for AppIntentError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AppIntentError, v1);
    atomic_store(result, (unint64_t *)&qword_1001065C8);
  }
  return result;
}

uint64_t sub_1000164BC(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

unint64_t sub_1000164C8()
{
  unint64_t result;

  result = qword_100106600;
  if (!qword_100106600)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100106600);
  }
  return result;
}

uint64_t sub_10001650C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_100016518(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008EF4(&qword_100106608);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100016568(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, _QWORD, uint64_t);
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v2 = sub_100008EF4(&qword_100106618);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_100106010);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DynamicTypeSize(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v27 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v27 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v18((char *)&v27 - v16, a1, v8);
  v18(v15, (uint64_t)v17, v8);
  v19 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v19(v7, enum case for DynamicTypeSize.xxxLarge(_:), v8);
  v20 = sub_100016844(&qword_100106068, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v7, v7, v8, v20);
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v27 = v12;
  v28 = v4;
  v22 = sub_100016844((unint64_t *)&qword_1001060F0, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  v23 = dispatch thunk of static Comparable.<= infix(_:_:)(v15, v7, v8, v22);
  sub_1000135A0((uint64_t)v7, &qword_100106010);
  v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v15, v8);
  if ((v23 & 1) != 0)
    return ((uint64_t (*)(char *, uint64_t))v24)(v17, v8);
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v17, v8);
  if ((_DWORD)result != enum case for DynamicTypeSize.accessibility1(_:)
    && (_DWORD)result != enum case for DynamicTypeSize.accessibility2(_:))
  {
    v25 = v27;
    ((void (*)(char *, char *, uint64_t, double))v18)(v27, v17, v8, 10.0);
    v26 = (uint64_t)v28;
    v19(v28, enum case for DynamicTypeSize.accessibility3(_:), v8);
    result = dispatch thunk of static Equatable.== infix(_:_:)(v26, v26, v8, v20);
    if ((result & 1) != 0)
    {
      dispatch thunk of static Comparable.<= infix(_:_:)(v26, v25, v8, v22);
      sub_1000135A0(v26, &qword_100106618);
      v24(v25, v8);
      return ((uint64_t (*)(char *, uint64_t))v24)(v17, v8);
    }
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t sub_100016844(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for DynamicTypeSize(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100016884(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, _QWORD, uint64_t);
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v2 = sub_100008EF4(&qword_100106618);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_100106010);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DynamicTypeSize(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v27 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v27 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v18((char *)&v27 - v16, a1, v8);
  v18(v15, (uint64_t)v17, v8);
  v19 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v19(v7, enum case for DynamicTypeSize.xxxLarge(_:), v8);
  v20 = sub_100016844(&qword_100106068, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v7, v7, v8, v20);
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v27 = v12;
  v28 = v4;
  v22 = sub_100016844((unint64_t *)&qword_1001060F0, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  v23 = dispatch thunk of static Comparable.<= infix(_:_:)(v15, v7, v8, v22);
  sub_1000135A0((uint64_t)v7, &qword_100106010);
  v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v15, v8);
  if ((v23 & 1) != 0)
    return ((uint64_t (*)(char *, uint64_t))v24)(v17, v8);
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v17, v8);
  if ((_DWORD)result != enum case for DynamicTypeSize.accessibility1(_:)
    && (_DWORD)result != enum case for DynamicTypeSize.accessibility2(_:))
  {
    v25 = v27;
    ((void (*)(char *, char *, uint64_t, double))v18)(v27, v17, v8, 16.0);
    v26 = (uint64_t)v28;
    v19(v28, enum case for DynamicTypeSize.accessibility3(_:), v8);
    result = dispatch thunk of static Equatable.== infix(_:_:)(v26, v26, v8, v20);
    if ((result & 1) != 0)
    {
      dispatch thunk of static Comparable.<= infix(_:_:)(v26, v25, v8, v22);
      sub_1000135A0(v26, &qword_100106618);
      v24(v25, v8);
      return ((uint64_t (*)(char *, uint64_t))v24)(v17, v8);
    }
LABEL_10:
    __break(1u);
  }
  return result;
}

double sub_100016B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  NSString *v24;
  int v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  double v31;
  id v32;
  double v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v36 = a6;
  v37 = a1;
  v39 = a3;
  v40 = a4;
  v38 = a2;
  v7 = type metadata accessor for LegibilityWeight(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DynamicTypeSize(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v35 - v16;
  if (qword_100105BB0 != -1)
    swift_once(&qword_100105BB0, sub_100008B4C);
  v18 = sub_10000909C(v11, (uint64_t)qword_10011EBE8);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v19(v15, v18, v11);
  v20 = sub_100016844((unint64_t *)&qword_1001060F0, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  if ((dispatch thunk of static Comparable.>= infix(_:_:)(v15, a5, v11, v20) & 1) != 0)
  {
    v21 = v17;
    v22 = v15;
  }
  else
  {
    v21 = v17;
    v22 = a5;
  }
  v19(v21, (uint64_t)v22, v11);
  v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v15, v11);
  v24 = sub_100026410();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v36, v7);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if (v25 != enum case for LegibilityWeight.regular(_:) && v25 != enum case for LegibilityWeight.bold(_:))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v26 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", v24);
  v27 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleFootnote, v26);
  v28 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v27, "pointSize");
  v29 = objc_msgSend(v28, "monospacedDigitSystemFontOfSize:weight:");

  v30 = v29;
  v31 = String.widthOfString(usingFont:)(v29, v37, v38);

  v32 = v30;
  v33 = String.widthOfString(usingFont:)(v29, v39, v40);

  if (v31 <= v33)
    v31 = v33;
  v23(v17, v11);
  return v31;
}

uint64_t destroy for SportsWidgetBaseballClockViewLayout(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_release(a1[3]);
  swift_release(a1[5]);
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for SportsWidgetBaseballClockViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v6;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t assignWithCopy for SportsWidgetBaseballClockViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_retain(v10);
  swift_release(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

__n128 initializeWithTake for SportsWidgetBaseballClockViewLayout(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for SportsWidgetBaseballClockViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_release(v6);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_release(v9);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetBaseballClockViewLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetBaseballClockViewLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetBaseballClockViewLayout()
{
  return &type metadata for SportsWidgetBaseballClockViewLayout;
}

unint64_t sub_10001716C()
{
  unint64_t result;

  result = qword_100106620;
  if (!qword_100106620)
  {
    result = swift_getWitnessTable(&unk_1000C60A0, &type metadata for TVSettingsPlaybackUseCellularEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100106620);
  }
  return result;
}

uint64_t sub_1000171B0()
{
  return sub_100013840(&qword_100106628, &qword_100106630, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

void sub_1000171DC()
{
  qword_10011EC58 = (uint64_t)&off_1000F6BB0;
}

uint64_t sub_1000171F0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011EC60);
  sub_10000909C(v16, (uint64_t)qword_10011EC60);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001000BF660);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_100017418()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000905C(v0, qword_10011EC78);
  sub_10000909C(v0, (uint64_t)qword_10011EC78);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000026, 0x80000001000BF7A0);
}

uint64_t sub_100017478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008EF4(&qword_100106608);
  sub_10000905C(v0, qword_10011EC90);
  v1 = sub_10000909C(v0, (uint64_t)qword_10011EC90);
  IntentDescription.init(stringLiteral:)(0xD000000000000053, 0x80000001000BF740);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_100017500()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1000C6648);
  qword_10011ECA8 = result;
  return result;
}

uint64_t sub_100017524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[15] = a2;
  v3[16] = a3;
  v3[14] = a1;
  return swift_task_switch(sub_100017540, 0, 0);
}

uint64_t sub_100017540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 56) = v2;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 226));
  *(_BYTE *)(v0 + 225) = *(_BYTE *)(v0 + 226);
  if (qword_100105C00 != -1)
    swift_once(&qword_100105C00, sub_100017500);
  v3 = qword_10011ECA8;
  *(_QWORD *)(v0 + 152) = qword_10011ECA8;
  v4 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v3);
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 160) = v5;
  v6 = sub_100013840(&qword_1001067F8, &qword_100106800, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 168) = v6;
  *v5 = v0;
  v5[1] = sub_100017648;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 225, v3, &type metadata for Bool, v6);
}

uint64_t sub_100017648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v6 = sub_100017850;
  else
    v6 = sub_1000176D0;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000176D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  IntentParameter.wrappedValue.getter(v0 + 11);
  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[13];
  v0[23] = v2;
  v0[24] = v3;
  v0[8] = v1;
  v0[9] = v2;
  v0[10] = v3;
  v4 = qword_10011ECA8;
  v0[25] = qword_10011ECA8;
  v5 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain(v4);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[26] = v6;
  *v6 = v0;
  v6[1] = sub_100017770;
  return AppEntity._value<A, B>(for:)(v0 + 28, v4, v0[21]);
}

uint64_t sub_100017770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v6 = sub_10001785C;
  else
    v6 = sub_1000177F8;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000177F8()
{
  uint64_t v0;
  unint64_t v1;

  *(_BYTE *)(v0 + 227) = *(_BYTE *)(v0 + 224);
  v1 = sub_1000190DC();
  static IntentResult.result<A>(value:)(v0 + 227, &type metadata for Bool, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017850()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001785C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_100017868@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1000178A0(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

double sub_1000178D4()
{
  double result;

  if (qword_100105C00 != -1)
    swift_once(&qword_100105C00, sub_100017500);
  *(_QWORD *)&result = swift_retain(qword_10011ECA8).n128_u64[0];
  return result;
}

unint64_t sub_100017918()
{
  unint64_t result;

  result = qword_100106638;
  if (!qword_100106638)
  {
    result = swift_getWitnessTable(&unk_1000C6130, &type metadata for TVSettingsPlaybackUseCellularEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100106638);
  }
  return result;
}

unint64_t sub_100017960()
{
  unint64_t result;

  result = qword_100106640;
  if (!qword_100106640)
  {
    result = swift_getWitnessTable(&unk_1000C6158, &type metadata for TVSettingsPlaybackUseCellularEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100106640);
  }
  return result;
}

uint64_t sub_1000179A4(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000D1A40, 1) + 8);
}

uint64_t sub_1000179C8(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10001716C();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_100017A08@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105BF0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10011EC78, (uint64_t)sub_100017418, a1);
}

uint64_t sub_100017A2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100105BF8 != -1)
    swift_once(&qword_100105BF8, sub_100017478);
  v2 = sub_100008EF4(&qword_100106608);
  v3 = sub_10000909C(v2, (uint64_t)qword_10011EC90);
  return sub_100016518(v3, a1);
}

uint64_t sub_100017A8C(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_100106824);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_1000145D8;
  *(_OWORD *)(v4 + 120) = *v1;
  *(_QWORD *)(v4 + 112) = a1;
  return swift_task_switch(sub_100017540, 0, 0);
}

uint64_t sub_100017AF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100018B88();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100017B18()
{
  return 0xD000000000000034;
}

unint64_t sub_100017B38()
{
  unint64_t result;

  result = qword_100106650;
  if (!qword_100106650)
  {
    result = swift_getWitnessTable(&unk_1000C61B4, &type metadata for TVSettingsPlaybackUseCellularEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106650);
  }
  return result;
}

unint64_t sub_100017B80()
{
  unint64_t result;

  result = qword_100106658;
  if (!qword_100106658)
  {
    result = swift_getWitnessTable(&unk_1000C6614, &type metadata for TVSettingsPlaybackUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_100106658);
  }
  return result;
}

uint64_t sub_100017BC4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100017BDC, 0, 0);
}

uint64_t sub_100017BDC()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = sub_100077644() & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017C34(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_100017C50, 0, 0);
}

uint64_t sub_100017C50()
{
  uint64_t v0;

  sub_100078790(*(_BYTE *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017C9C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100017CB4, 0, 0);
}

uint64_t sub_100017CB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(v0 + 16);
  *v1 = sub_100018EB0();
  v1[1] = v2;
  v1[2] = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100017CF4()
{
  unint64_t result;

  result = qword_100106668;
  if (!qword_100106668)
  {
    result = swift_getWitnessTable(&unk_1000C61EC, &type metadata for TVSettingsPlaybackUseCellularEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106668);
  }
  return result;
}

uint64_t sub_100017D38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000185D0();
  *v4 = v2;
  v4[1] = sub_100014BF8;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_100017DA4()
{
  unint64_t result;

  result = qword_100106678;
  if (!qword_100106678)
  {
    result = swift_getWitnessTable(&unk_1000C6244, &type metadata for TVSettingsPlaybackUseCellularEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106678);
  }
  return result;
}

unint64_t sub_100017DEC()
{
  unint64_t result;

  result = qword_100106680;
  if (!qword_100106680)
  {
    result = swift_getWitnessTable(&unk_1000C62A4, &type metadata for TVSettingsPlaybackUseCellularEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106680);
  }
  return result;
}

unint64_t sub_100017E34()
{
  unint64_t result;

  result = qword_100106688[0];
  if (!qword_100106688[0])
  {
    result = swift_getWitnessTable(&unk_1000C65BC, &type metadata for TVSettingsPlaybackUseCellularEntity);
    atomic_store(result, qword_100106688);
  }
  return result;
}

uint64_t sub_100017E78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000185D0();
  *v5 = v2;
  v5[1] = sub_100014D9C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100017EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000185D0();
  *v4 = v2;
  v4[1] = sub_100016564;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_100017F50()
{
  unint64_t result;

  result = qword_1001066A0;
  if (!qword_1001066A0)
  {
    result = swift_getWitnessTable(&unk_1000C62CC, &type metadata for TVSettingsPlaybackUseCellularEntity.Query);
    atomic_store(result, (unint64_t *)&qword_1001066A0);
  }
  return result;
}

unint64_t sub_100017F98()
{
  unint64_t result;

  result = qword_1001066A8;
  if (!qword_1001066A8)
  {
    result = swift_getWitnessTable(&unk_1000C6564, &type metadata for TVSettingsPlaybackUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_1001066A8);
  }
  return result;
}

unint64_t sub_100017FE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001066B0;
  if (!qword_1001066B0)
  {
    v1 = sub_100008F80(qword_1001066B8);
    sub_100017F98();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001066B0);
  }
  return result;
}

uint64_t sub_100018044(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100017CF4();
  *v5 = v2;
  v5[1] = sub_100016560;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for TVSettingsPlaybackUseCellularEntity.Query()
{
  return &type metadata for TVSettingsPlaybackUseCellularEntity.Query;
}

ValueMetadata *type metadata accessor for TVSettingsPlaybackUseCellularEntity()
{
  return &type metadata for TVSettingsPlaybackUseCellularEntity;
}

ValueMetadata *type metadata accessor for TVSettingsPlaybackUseCellularEntity.UpdateIntent_value()
{
  return &type metadata for TVSettingsPlaybackUseCellularEntity.UpdateIntent_value;
}

uint64_t sub_1000180E0()
{
  return sub_100013840(&qword_1001066D0, &qword_1001066D8, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100018110(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10001840C();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100015960(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_100018158@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105BE8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10011EC60, (uint64_t)sub_1000171F0, a1);
}

uint64_t sub_10001817C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017E34();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_1000181B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017B80();
  return _UniqueEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_1000181EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100018270();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100018228()
{
  unint64_t result;

  result = qword_1001066E0;
  if (!qword_1001066E0)
  {
    result = swift_getWitnessTable(&unk_1000C6354, &type metadata for TVSettingsPlaybackUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_1001066E0);
  }
  return result;
}

unint64_t sub_100018270()
{
  unint64_t result;

  result = qword_1001066F0;
  if (!qword_1001066F0)
  {
    result = swift_getWitnessTable(&unk_1000C637C, &type metadata for TVSettingsPlaybackUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_1001066F0);
  }
  return result;
}

unint64_t sub_1000182B8()
{
  unint64_t result;

  result = qword_1001066F8;
  if (!qword_1001066F8)
  {
    result = swift_getWitnessTable(&unk_1000C63AC, &type metadata for TVSettingsPlaybackUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_1001066F8);
  }
  return result;
}

unint64_t sub_100018300()
{
  unint64_t result;

  result = qword_100106700;
  if (!qword_100106700)
  {
    result = swift_getWitnessTable(&unk_1000C63D4, &type metadata for TVSettingsPlaybackUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_100106700);
  }
  return result;
}

unint64_t sub_100018350()
{
  unint64_t result;

  result = qword_100106708;
  if (!qword_100106708)
  {
    result = swift_getWitnessTable(&unk_1000C63FC, &type metadata for TVSettingsPlaybackUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_100106708);
  }
  return result;
}

unint64_t sub_100018394(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1000183C8();
  a1[2] = sub_10001840C();
  result = sub_100017B80();
  a1[3] = result;
  return result;
}

unint64_t sub_1000183C8()
{
  unint64_t result;

  result = qword_100106758;
  if (!qword_100106758)
  {
    result = swift_getWitnessTable(&unk_1000C64FC, &type metadata for TVSettingsPlaybackUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_100106758);
  }
  return result;
}

unint64_t sub_10001840C()
{
  unint64_t result;

  result = qword_100106760;
  if (!qword_100106760)
  {
    result = swift_getWitnessTable(&unk_1000C64C4, &type metadata for TVSettingsPlaybackUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_100106760);
  }
  return result;
}

void *sub_100018450()
{
  return &protocol witness table for Bool;
}

unint64_t sub_10001845C(uint64_t a1)
{
  unint64_t result;

  result = sub_100018480();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100018480()
{
  unint64_t result;

  result = qword_1001067A8;
  if (!qword_1001067A8)
  {
    result = swift_getWitnessTable(&unk_1000C652C, &type metadata for TVSettingsPlaybackUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_1001067A8);
  }
  return result;
}

uint64_t sub_1000184C4()
{
  return sub_100013840(&qword_1001067B0, &qword_1001067B8, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

unint64_t sub_1000184F4()
{
  unint64_t result;

  result = qword_1001067C0;
  if (!qword_1001067C0)
  {
    result = swift_getWitnessTable(&unk_1000C648C, &type metadata for TVSettingsPlaybackUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_1001067C0);
  }
  return result;
}

unint64_t sub_10001853C()
{
  unint64_t result;

  result = qword_1001067C8;
  if (!qword_1001067C8)
  {
    result = swift_getWitnessTable(&unk_1000C645C, &type metadata for TVSettingsPlaybackUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_1001067C8);
  }
  return result;
}

unint64_t sub_100018584()
{
  unint64_t result;

  result = qword_1001067D0;
  if (!qword_1001067D0)
  {
    result = swift_getWitnessTable(&unk_1000C6424, &type metadata for TVSettingsPlaybackUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_1001067D0);
  }
  return result;
}

unint64_t sub_1000185D0()
{
  unint64_t result;

  result = qword_1001067D8;
  if (!qword_1001067D8)
  {
    result = swift_getWitnessTable(&unk_1000C6174, &type metadata for TVSettingsPlaybackUseCellularEntity.Query);
    atomic_store(result, (unint64_t *)&qword_1001067D8);
  }
  return result;
}

uint64_t sub_100018614@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  unint64_t v52;
  _QWORD v53[2];
  unint64_t v54;
  unint64_t v55;

  v49 = a1;
  v1 = sub_100008EF4(&qword_100106888);
  v42 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100106890);
  v5 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  v44 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008EF4(&qword_100106898);
  v9 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  v46 = v9;
  __chkstk_darwin(v8);
  v40 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008EF4(&qword_1001068A0);
  v12 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  v48 = v12;
  __chkstk_darwin(v11);
  v41 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v50, "com.apple.tv.");
  HIWORD(v50[1]) = -4864;
  v54 = (unint64_t)&type metadata for TVSettingsPlaybackUseCellularWidget;
  v14 = sub_100008EF4(&qword_1001068A8);
  v15._countAndFlagsBits = String.init<A>(describing:)(&v54, v14);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17 = v50[0];
  v18 = v50[1];
  KeyPath = swift_getKeyPath(&unk_1000C6648);
  v20 = sub_100008EF4(&qword_1001068B0);
  v21 = sub_100017B80();
  v22 = sub_100013840(&qword_1001068B8, &qword_1001068B0, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  ControlToggle.init<A, B, C, D, E, F>(kind:intentUpdatableProperty:content:value:)(v17, v18, KeyPath, sub_100018A54, 0, sub_100018B14, 0, v20, &type metadata for Text, v21, v22, &protocol witness table for Text);
  v50[0] = &type metadata for TVSettingsPlaybackUseCellularWidget;
  v23 = String.init<A>(describing:)(v50, v14);
  v25 = v24;
  v50[0] = v23;
  v50[1] = v24;
  v54 = 0x746567646957;
  v55 = 0xE600000000000000;
  v53[0] = 0x656C67676F54;
  v53[1] = 0xE600000000000000;
  v26 = sub_100013080();
  v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v54, v53, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v26, v26, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v25);
  v50[0] = v27;
  v50[1] = v29;
  v30 = sub_100013840(&qword_1001068C0, &qword_100106888, (uint64_t)&protocol conformance descriptor for ControlToggle<A>);
  WidgetConfiguration.configurationDisplayName<A>(_:)(v50, v1, &type metadata for String, v30, v26);
  swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v3, v1);
  v54 = 0xD000000000000033;
  v55 = 0x80000001000BF7D0;
  v50[0] = v1;
  v50[1] = &type metadata for String;
  v51 = v30;
  v52 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v32 = v40;
  v33 = v43;
  WidgetConfiguration.description<A>(_:)(&v54, v43, &type metadata for String, OpaqueTypeConformance2, v26);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v33);
  v50[0] = v33;
  v50[1] = &type metadata for String;
  v51 = OpaqueTypeConformance2;
  v52 = v26;
  v34 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v35 = v41;
  v36 = v45;
  WidgetConfiguration.disablesControlStateCaching()(v45, v34);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v36);
  v50[0] = v36;
  v50[1] = v34;
  v37 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v38 = v47;
  WidgetConfiguration.hiddenControl()(v47, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v35, v38);
}

uint64_t sub_100018A54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  _QWORD v8[2];

  v2 = sub_100008EF4(&qword_1001068B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[0] = 0xD00000000000001FLL;
  v8[1] = 0x80000001000BF660;
  v6 = sub_100013080();
  Label<>.init<A>(_:systemImage:)(v8, 1918985575, 0xE400000000000000, &type metadata for String, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
}

uint64_t sub_100018B14@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[2];

  v3 = 6710863;
  if ((a1 & 1) != 0)
    v3 = 28239;
  v4 = 0xE300000000000000;
  if ((a1 & 1) != 0)
    v4 = 0xE200000000000000;
  v10[0] = v3;
  v10[1] = v4;
  v5 = sub_100013080();
  result = Text.init<A>(_:)(v10, &type metadata for String, v5);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t sub_100018B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD v33[3];

  v0 = sub_100008EF4(&qword_100106808);
  __chkstk_darwin(v0);
  v32 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for InputConnectionBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v31 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_1001065E0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  v30 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008EF4(&qword_100106810);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000029, 0x80000001000BF6C0);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v29(v13, 1, 1, v14);
  v18 = type metadata accessor for IntentDialog(0);
  memset(v33, 0, sizeof(v33));
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v10, 1, 1, v18);
  v19(v8, 1, 1, v18);
  v20 = enum case for InputConnectionBehavior.default(_:);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v21 = v31;
  v28(v31, enum case for InputConnectionBehavior.default(_:), v2);
  v22 = sub_100017E34();
  v27 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v17, v13, v33, v10, v8, v21, v22);
  sub_100008EF4(&qword_100106818);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000004CLL, 0x80000001000BF6F0);
  v29(v13, 1, 1, v30);
  LOBYTE(v33[0]) = 2;
  v23 = type metadata accessor for Bool.IntentDisplayName(0);
  v24 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v32, 1, 1, v23);
  v19(v10, 1, 1, v18);
  v28(v21, v20, v2);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v17, v13, v33, v24, v10, v21);
  return v27;
}

uint64_t sub_100018EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  ValueMetadata *v19;

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &type metadata for TVSettingsPlaybackUseCellularEntity;
  v13 = sub_100008EF4(&qword_1001067E0);
  v14 = String.init<A>(describing:)(&v19, v13);
  sub_100008EF4(&qword_100106630);
  v15 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001000BF660);
  static Locale.current.getter(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0xD000000000000012, 0x80000001000BF530, v6, v3, 0, 0, 256);
  v16 = sub_100013840(&qword_1001067F8, &qword_100106800, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v12, &unk_1001067E8, 0, &unk_1001067F0, 0, &type metadata for TVSettingsPlaybackUseCellularEntity.UpdateIntent_value, v16);
  return v14;
}

unint64_t sub_1000190DC()
{
  unint64_t result;

  result = qword_100106828;
  if (!qword_100106828)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Bool, &type metadata for Bool);
    atomic_store(result, (unint64_t *)&qword_100106828);
  }
  return result;
}

uint64_t sub_100019120@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  return swift_retain(v2);
}

ValueMetadata *type metadata accessor for TVSettingsPlaybackUseCellularWidget()
{
  return &type metadata for TVSettingsPlaybackUseCellularWidget;
}

uint64_t sub_10001913C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D1A90, 1);
}

unint64_t sub_10001914C(uint64_t a1)
{
  unint64_t result;

  result = sub_100019170();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100019170()
{
  unint64_t result;

  result = qword_100106878;
  if (!qword_100106878)
  {
    result = swift_getWitnessTable(&unk_1000C6694, &type metadata for TVSettingsPlaybackUseCellularWidget);
    atomic_store(result, (unint64_t *)&qword_100106878);
  }
  return result;
}

unint64_t sub_1000191B4(uint64_t a1)
{
  unint64_t result;

  result = sub_1000191D8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000191D8()
{
  unint64_t result;

  result = qword_100106880;
  if (!qword_100106880)
  {
    result = swift_getWitnessTable(&unk_1000C66D4, &type metadata for TVSettingsPlaybackUseCellularWidget);
    atomic_store(result, (unint64_t *)&qword_100106880);
  }
  return result;
}

uint64_t sub_10001921C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;

  v0 = sub_100008F80(&qword_1001068A0);
  v1 = sub_100008F80(&qword_100106898);
  v2 = sub_100008F80(&qword_100106890);
  v3 = sub_100008F80(&qword_100106888);
  v4 = sub_100013840(&qword_1001068C0, &qword_100106888, (uint64_t)&protocol conformance descriptor for ControlToggle<A>);
  v5 = sub_100013080();
  v10 = v3;
  v11 = &type metadata for String;
  v12 = v4;
  v13 = v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v10 = v2;
  v11 = &type metadata for String;
  v12 = OpaqueTypeConformance2;
  v13 = v5;
  v7 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v10 = v1;
  v11 = (void *)v7;
  v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v10 = v0;
  v11 = (void *)v8;
  return swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.hiddenControl()>>, 1);
}

uint64_t sub_10001932C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100019620(*a1, *a2);
}

uint64_t sub_100019340(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  if (a1)
  {
    if (a1 == 1)
      v2 = 1936943469;
    else
      v2 = 1818324839;
    v3 = 0xE400000000000000;
    v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1)
        v5 = 1936943469;
      else
        v5 = 1818324839;
      v6 = 0xE400000000000000;
      if (v2 != v5)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = 0xE500000000000000;
    v2 = 0x7974706D65;
    v4 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE500000000000000;
  if (v2 != 0x7974706D65)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6)
    goto LABEL_15;
  v7 = 1;
  v6 = v3;
LABEL_16:
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100019430(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x6C61755174736542;
  else
    v2 = 0x6C617551646F6F47;
  if ((a2 & 1) != 0)
    v3 = 0x6C61755174736542;
  else
    v3 = 0x6C617551646F6F47;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xEB00000000797469);
  swift_bridgeObjectRelease_n(0xEB00000000797469, 2);
  return v4 & 1;
}

uint64_t sub_1000194C4(char a1, char a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x80000001000BEFF0;
  else
    v2 = 0x80000001000BEFD0;
  if ((a2 & 1) != 0)
    v3 = 0x80000001000BEFF0;
  else
    v3 = 0x80000001000BEFD0;
  if (v2 == v3)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, v2);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

uint64_t sub_100019560(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 48;
  else
    v2 = 49;
  if ((a2 & 1) != 0)
    v3 = 48;
  else
    v3 = 49;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000);
  swift_bridgeObjectRelease_n(0xE100000000000000, 2);
  return v4 & 1;
}

uint64_t sub_1000195C0(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 49;
  else
    v2 = 48;
  if ((a2 & 1) != 0)
    v3 = 49;
  else
    v3 = 48;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000);
  swift_bridgeObjectRelease_n(0xE100000000000000, 2);
  return v4 & 1;
}

uint64_t sub_100019620(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6E69747563657865;
    else
      v3 = 0x64656873696E6966;
    if (v2 == 1)
      v4 = 0xE900000000000067;
    else
      v4 = 0xE800000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6E69747563657865;
      else
        v6 = 0x64656873696E6966;
      if (v5 == 1)
        v7 = 0xE900000000000067;
      else
        v7 = 0xE800000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x6C616974696E69;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x6C616974696E69)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4);
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v4;
LABEL_22:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

Swift::Int sub_100019740()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE900000000000067;
  v3 = 0x6E69747563657865;
  if (v1 != 1)
  {
    v3 = 0x64656873696E6966;
    v2 = 0xE800000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6C616974696E69;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1000197E4(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE900000000000067;
  v3 = 0x6E69747563657865;
  if (*v1 != 1)
  {
    v3 = 0x64656873696E6966;
    v2 = 0xE800000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6C616974696E69;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100019864(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE900000000000067;
  v4 = 0x6E69747563657865;
  if (v2 != 1)
  {
    v4 = 0x64656873696E6966;
    v3 = 0xE800000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6C616974696E69;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_100019904@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10001A584(*a1);
  *a2 = result;
  return result;
}

void sub_100019930(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE900000000000067;
  v5 = 0x6E69747563657865;
  if (v2 != 1)
  {
    v5 = 0x64656873696E6966;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6C616974696E69;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1000199F8()
{
  Swift::Int v0;
  uint64_t result;

  v0 = sub_10001A690((uint64_t)&off_1000F6C90);
  result = swift_arrayDestroy(&unk_1000F6CB0, 3, &type metadata for String);
  qword_1001068C8 = v0;
  return result;
}

uint64_t sub_100019A78()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v1 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation_lock);
  swift_beginAccess(v0 + OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation_lock, v6, 33, 0);
  os_unfair_lock_lock(v1);
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__state);
  os_unfair_lock_unlock(v1);
  swift_endAccess(v6);
  if (!v2)
  {
    v3 = 0xE700000000000000;
    v4 = 0x6C616974696E69;
LABEL_6:
    LOBYTE(v2) = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3);
    goto LABEL_7;
  }
  if (v2 != 1)
  {
    v3 = 0xE800000000000000;
    v4 = 0x64656873696E6966;
    goto LABEL_6;
  }
  v3 = 0xE900000000000067;
LABEL_7:
  swift_bridgeObjectRelease(v3);
  return v2 & 1;
}

uint64_t sub_100019B84()
{
  char *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  os_unfair_lock_s *v7;
  int v8;
  unint64_t v9;
  char v10;
  _BYTE v12[24];

  v1 = 0x6C616974696E69;
  if (objc_msgSend(v0, "isCancelled"))
  {
    v2 = (os_unfair_lock_s *)&v0[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation_lock];
    swift_beginAccess(&v0[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation_lock], v12, 33, 0);
    os_unfair_lock_lock(v2);
    v3 = v0[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__state];
    os_unfair_lock_unlock(v2);
    swift_endAccess(v12);
    if (v3)
    {
      if (v3 == 1)
      {
        swift_bridgeObjectRelease(0xE900000000000067);
        goto LABEL_8;
      }
      v4 = 0xE800000000000000;
      v5 = 0x64656873696E6966;
    }
    else
    {
      v4 = 0xE700000000000000;
      v5 = 0x6C616974696E69;
    }
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v4);
    swift_bridgeObjectRelease(v4);
    if ((v6 & 1) == 0)
    {
      v10 = 1;
      return v10 & 1;
    }
  }
LABEL_8:
  v7 = (os_unfair_lock_s *)&v0[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation_lock];
  swift_beginAccess(&v0[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation_lock], v12, 33, 0);
  os_unfair_lock_lock(v7);
  v8 = v0[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__state];
  os_unfair_lock_unlock(v7);
  swift_endAccess(v12);
  if (v8)
  {
    if (v8 != 1)
    {
      v10 = 1;
      v9 = 0xE800000000000000;
      goto LABEL_14;
    }
    v1 = 0x6E69747563657865;
    v9 = 0xE900000000000067;
  }
  else
  {
    v9 = 0xE700000000000000;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v9);
LABEL_14:
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100019D48()
{
  char *v0;
  char *v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  _BYTE v25[32];

  v1 = v0;
  result = (uint64_t)sub_100006398();
  if (result)
  {
    v3 = (void *)result;
    v4 = sub_100008EF4(&qword_100106918);
    v5 = swift_allocObject(v4, 72, 7);
    *(_OWORD *)(v5 + 16) = xmmword_1000C6710;
    v6 = (uint64_t *)&v0[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier];
    v7 = *(_QWORD *)&v0[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
    if (v7)
    {
      v8 = *v6;
      v9 = *(_QWORD *)&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
    }
    else
    {
      *((_QWORD *)&v24 + 1) = 2;
      sub_10001A5CC();
      v10 = (void *)NSString.init(stringLiteral:)("%p", (const void *)1);
      v11 = swift_allocObject(v4, 72, 7);
      *(_OWORD *)(v11 + 16) = v24;
      *(_QWORD *)(v11 + 56) = type metadata accessor for TVWidgetAsyncOperation();
      *(_QWORD *)(v11 + 64) = sub_10001A608();
      *(_QWORD *)(v11 + 32) = v1;
      v12 = v1;
      v13 = (void *)NSString.init(format:_:)(v10, v11);

      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v9 = v14;

      v7 = 0;
    }
    *(_QWORD *)(v5 + 56) = &type metadata for String;
    *(_QWORD *)(v5 + 64) = sub_10001A64C();
    *(_QWORD *)(v5 + 32) = v8;
    *(_QWORD *)(v5 + 40) = v9;
    v15 = swift_bridgeObjectRetain(v7);
    v16 = static os_log_type_t.default.getter(v15);
    os_log(_:dso:log:type:_:)("AsyncOp::[%{public}@] start", 27, 2, &_mh_execute_header, v3, v16, v5);

    swift_bridgeObjectRelease(v5);
    result = (uint64_t)objc_msgSend(v1, "isCancelled");
    if ((result & 1) == 0)
    {
      if (qword_100105C08 != -1)
        swift_once(&qword_100105C08, sub_1000199F8);
      v17 = qword_1001068C8;
      v18 = v1;
      v19 = swift_bridgeObjectRetain(v17);
      sub_10001A830(v19, v18, (SEL *)&selRef_willChangeValueForKey_);
      swift_bridgeObjectRelease(v17);

      v20 = (os_unfair_lock_s *)&v18[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation_lock];
      swift_beginAccess(&v18[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation_lock], v25, 33, 0);
      os_unfair_lock_lock(v20);
      v18[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__state] = 1;
      os_unfair_lock_unlock(v20);
      swift_endAccess(v25);
      v21 = qword_1001068C8;
      v22 = v18;
      v23 = swift_bridgeObjectRetain(v21);
      sub_10001A830(v23, v22, (SEL *)&selRef_didChangeValueForKey_);
      swift_bridgeObjectRelease(v21);

      return (*(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v22) + 0xE0))();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10001A000()
{
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease(0xE000000000000000);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002CLL, 0x80000001000BF8F0, "TVWidgetExtension/TVWidgetAsyncOperation.swift", 46, 2, 81, 0, 0);
  __break(1u);
}

void sub_10001A078()
{
  char *v0;
  char *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  _BYTE v29[24];

  v1 = v0;
  v2 = (os_unfair_lock_s *)&v0[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation_lock];
  swift_beginAccess(&v0[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation_lock], v29, 33, 0);
  os_unfair_lock_lock(v2);
  v3 = OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__state;
  v4 = v0[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__state];
  os_unfair_lock_unlock(v2);
  swift_endAccess(v29);
  if (!v4)
  {
    v5 = 0xE700000000000000;
    v6 = 0x6C616974696E69;
    goto LABEL_6;
  }
  if (v4 != 1)
  {
    v5 = 0xE800000000000000;
    v6 = 0x64656873696E6966;
LABEL_6:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5);
    swift_bridgeObjectRelease(v5);
    if ((v7 & 1) == 0)
      return;
    goto LABEL_7;
  }
  swift_bridgeObjectRelease(0xE900000000000067);
LABEL_7:
  v8 = sub_100006398();
  if (v8)
  {
    v9 = v8;
    v10 = sub_100008EF4(&qword_100106918);
    v11 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_1000C6710;
    v12 = *(_QWORD *)&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
    if (v12)
    {
      v13 = *(_QWORD *)&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier];
      v14 = *(_QWORD *)&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
    }
    else
    {
      *((_QWORD *)&v28 + 1) = 2;
      sub_10001A5CC();
      v15 = (void *)NSString.init(stringLiteral:)("%p", (const void *)1);
      v16 = swift_allocObject(v10, 72, 7);
      *(_OWORD *)(v16 + 16) = v28;
      *(_QWORD *)(v16 + 56) = type metadata accessor for TVWidgetAsyncOperation();
      *(_QWORD *)(v16 + 64) = sub_10001A608();
      *(_QWORD *)(v16 + 32) = v1;
      v17 = v1;
      v18 = (void *)NSString.init(format:_:)(v15, v16);

      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v14 = v19;

      v12 = 0;
    }
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 64) = sub_10001A64C();
    *(_QWORD *)(v11 + 32) = v13;
    *(_QWORD *)(v11 + 40) = v14;
    v20 = swift_bridgeObjectRetain(v12);
    v21 = static os_log_type_t.default.getter(v20);
    os_log(_:dso:log:type:_:)("AsyncOp::[%{public}@] finish", 28, 2, &_mh_execute_header, v9, v21, v11);

    swift_bridgeObjectRelease(v11);
    if (qword_100105C08 != -1)
      swift_once(&qword_100105C08, sub_1000199F8);
    v22 = qword_1001068C8;
    v23 = v1;
    v24 = swift_bridgeObjectRetain(v22);
    sub_10001A830(v24, v23, (SEL *)&selRef_willChangeValueForKey_);
    swift_bridgeObjectRelease(v22);

    swift_beginAccess(v2, v29, 33, 0);
    os_unfair_lock_lock(v2);
    v1[v3] = 2;
    os_unfair_lock_unlock(v2);
    swift_endAccess(v29);
    v25 = qword_1001068C8;
    v26 = v23;
    v27 = swift_bridgeObjectRetain(v25);
    sub_10001A830(v27, v26, (SEL *)&selRef_didChangeValueForKey_);
    swift_bridgeObjectRelease(v25);

  }
  else
  {
    __break(1u);
  }
}

id sub_10001A37C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TVWidgetAsyncOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TVWidgetAsyncOperation()
{
  return objc_opt_self(_TtC17TVWidgetExtension22TVWidgetAsyncOperation);
}

uint64_t getEnumTagSinglePayload for CompetitorShootoutsViewModel.ShootoutState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TVWidgetAsyncOperation.ExecutionState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10001A4BC + 4 * byte_1000C6725[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10001A4F0 + 4 * byte_1000C6720[v4]))();
}

uint64_t sub_10001A4F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001A4F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001A500);
  return result;
}

uint64_t sub_10001A50C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001A514);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10001A518(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001A520(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TVWidgetAsyncOperation.ExecutionState()
{
  return &type metadata for TVWidgetAsyncOperation.ExecutionState;
}

unint64_t sub_10001A540()
{
  unint64_t result;

  result = qword_100106910;
  if (!qword_100106910)
  {
    result = swift_getWitnessTable(&unk_1000C67F0, &type metadata for TVWidgetAsyncOperation.ExecutionState);
    atomic_store(result, (unint64_t *)&qword_100106910);
  }
  return result;
}

unint64_t sub_10001A584(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000F6C28, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_10001A5CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100106920;
  if (!qword_100106920)
  {
    v1 = objc_opt_self(NSString);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100106920);
  }
  return result;
}

unint64_t sub_10001A608()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100106928;
  if (!qword_100106928)
  {
    v1 = type metadata accessor for TVWidgetAsyncOperation();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100106928);
  }
  return result;
}

unint64_t sub_10001A64C()
{
  unint64_t result;

  result = qword_100106930;
  if (!qword_100106930)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100106930);
  }
  return result;
}

Swift::Int sub_10001A690(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100008EF4(&qword_100106938);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v27 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v27 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)(v28, *(_QWORD *)(v3 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = v16[1];
        v18 = *v16 == v8 && v17 == v7;
        if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }
        v19 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v19;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v20 = (_QWORD *)(v15 + 16 * v11);
          v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21);
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v23 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v23 = v8;
      v23[1] = v7;
      v24 = *(_QWORD *)(v3 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_10001A830(uint64_t a1, void *a2, SEL *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSString v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v6 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v10)
      goto LABEL_23;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v10)
        goto LABEL_23;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v10)
          goto LABEL_23;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
        {
          v11 = v16 + 3;
          if (v16 + 3 >= v10)
            goto LABEL_23;
          v17 = *(_QWORD *)(v6 + 8 * v11);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v9 = (v17 - 1) & v17;
    v13 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_5:
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13 + 8);
    swift_bridgeObjectRetain(v14);
    v15 = String._bridgeToObjectiveC()();
    objc_msgSend(a2, *a3, v15);
    swift_bridgeObjectRelease(v14);

  }
  v18 = v16 + 4;
  if (v18 >= v10)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v10)
      goto LABEL_23;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10001A9C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  *(_QWORD *)a2 = static Font.footnote.getter(a1);
  v3 = (void *)objc_opt_self(UIColor);
  *(_QWORD *)(a2 + 8) = Color.init(uiColor:)(objc_msgSend(v3, "labelColor"));
  *(_QWORD *)(a2 + 16) = 1;
  *(_BYTE *)(a2 + 24) = 1;
  *(_OWORD *)(a2 + 32) = xmmword_1000C6820;
  v4 = static Alignment.bottom.getter();
  *(_QWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v5;
  *(_QWORD *)(a2 + 64) = static HorizontalAlignment.center.getter(v4);
  *(_QWORD *)(a2 + 72) = 0;
  v6 = Color.init(uiColor:)(objc_msgSend(v3, "labelColor"));
  *(_QWORD *)(a2 + 80) = v6;
  *(_QWORD *)(a2 + 88) = static Font.caption.getter(v6);
  v7 = static Font.title.getter();
  *(_QWORD *)(a2 + 96) = v7;
  *(double *)(a2 + 104) = static Font.Weight.semibold.getter(v7);
  *(_QWORD *)(a2 + 112) = 1;
  *(_BYTE *)(a2 + 120) = 1;
  *(_QWORD *)(a2 + 128) = 0x3FE0000000000000;
  *(_QWORD *)(a2 + 136) = 0xD000000000000015;
  *(_QWORD *)(a2 + 144) = 0x80000001000BF940;
  *(_QWORD *)(a2 + 152) = static Font.caption2.getter();
  *(_QWORD *)(a2 + 160) = Color.init(uiColor:)(objc_msgSend(v3, "labelColor"));
  v8 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewLayout(0);
  v9 = a2 + *(int *)(v8 + 92);
  v10 = enum case for Image.Scale.small(_:);
  v11 = type metadata accessor for Image.Scale(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v9, v10, v11);
  *(_QWORD *)(a2 + *(int *)(v8 + 96)) = 0;
  return result;
}

uint64_t type metadata accessor for SportsWidgetDynamicIslandExpandedViewLayout(uint64_t a1)
{
  uint64_t result;

  result = qword_100106998;
  if (!qword_100106998)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SportsWidgetDynamicIslandExpandedViewLayout);
  return result;
}

uint64_t sub_10001AB4C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    v22 = a2[1];
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v9 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v9;
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    v10 = a2[10];
    v11 = a2[11];
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = v11;
    v12 = a2[12];
    *(_QWORD *)(a1 + 96) = v12;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    v13 = a2[18];
    v14 = a2[19];
    *(_QWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 152) = v14;
    v15 = *(int *)(a3 + 92);
    v21 = a1 + v15;
    v19 = a2[20];
    v20 = (uint64_t)a2 + v15;
    *(_QWORD *)(a1 + 160) = v19;
    v16 = type metadata accessor for Image.Scale(0);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_retain(v4);
    swift_retain(v22);
    swift_retain(v10);
    swift_retain(v11);
    swift_retain(v12);
    swift_bridgeObjectRetain(v13);
    swift_retain(v14);
    swift_retain(v19);
    v18(v21, v20, v16);
    *(_QWORD *)(v7 + *(int *)(a3 + 96)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 96));
  }
  return v7;
}

uint64_t sub_10001ACB0(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[10]);
  swift_release(a1[11]);
  swift_release(a1[12]);
  swift_bridgeObjectRelease(a1[18]);
  swift_release(a1[19]);
  swift_release(a1[20]);
  v4 = (char *)a1 + *(int *)(a2 + 92);
  v5 = type metadata accessor for Image.Scale(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_10001AD30(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *a2;
  v19 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v6 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  v7 = a2[10];
  v8 = a2[11];
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  v9 = a2[12];
  *(_QWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  v10 = a2[18];
  v11 = a2[19];
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 152) = v11;
  v12 = a2[20];
  v13 = *(int *)(a3 + 92);
  v17 = (uint64_t)a2 + v13;
  v18 = a1 + v13;
  *(_QWORD *)(a1 + 160) = v12;
  v14 = type metadata accessor for Image.Scale(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_retain(v5);
  swift_retain(v19);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  swift_retain(v12);
  v16(v18, v17, v14);
  *(_QWORD *)(a1 + *(int *)(a3 + 96)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 96));
  return a1;
}

uint64_t *sub_10001AE68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  v10 = a2[10];
  v11 = a1[10];
  a1[10] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[11];
  v13 = a1[11];
  a1[11] = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = a2[12];
  v15 = a1[12];
  a1[12] = v14;
  swift_retain(v14);
  swift_release(v15);
  a1[13] = a2[13];
  a1[14] = a2[14];
  *((_BYTE *)a1 + 120) = *((_BYTE *)a2 + 120);
  a1[16] = a2[16];
  a1[17] = a2[17];
  v16 = a2[18];
  v17 = a1[18];
  a1[18] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a2[19];
  v19 = a1[19];
  a1[19] = v18;
  swift_retain(v18);
  swift_release(v19);
  v20 = a2[20];
  v21 = a1[20];
  a1[20] = v20;
  swift_retain(v20);
  swift_release(v21);
  v22 = *(int *)(a3 + 92);
  v23 = (uint64_t)a1 + v22;
  v24 = (uint64_t)a2 + v22;
  v25 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  *(uint64_t *)((char *)a1 + *(int *)(a3 + 96)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 96));
  return a1;
}

uint64_t sub_10001B000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v8 = *(int *)(a3 + 92);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  v11 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_QWORD *)(a1 + *(int *)(a3 + 96)) = *(_QWORD *)(a2 + *(int *)(a3 + 96));
  return a1;
}

uint64_t *sub_10001B0C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v8 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v8;
  a1[8] = a2[8];
  a1[9] = a2[9];
  v9 = a1[10];
  a1[10] = a2[10];
  swift_release(v9);
  v10 = a1[11];
  a1[11] = a2[11];
  swift_release(v10);
  v11 = a1[12];
  a1[12] = a2[12];
  swift_release(v11);
  a1[13] = a2[13];
  a1[14] = a2[14];
  *((_BYTE *)a1 + 120) = *((_BYTE *)a2 + 120);
  a1[16] = a2[16];
  v12 = a2[18];
  v13 = a1[18];
  a1[17] = a2[17];
  a1[18] = v12;
  swift_bridgeObjectRelease(v13);
  v14 = a1[19];
  a1[19] = a2[19];
  swift_release(v14);
  v15 = a1[20];
  a1[20] = a2[20];
  swift_release(v15);
  v16 = *(int *)(a3 + 92);
  v17 = (uint64_t)a1 + v16;
  v18 = (uint64_t)a2 + v16;
  v19 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  *(uint64_t *)((char *)a1 + *(int *)(a3 + 96)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 96));
  return a1;
}

uint64_t sub_10001B200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001B20C);
}

uint64_t sub_10001B20C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Image.Scale(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 92)], a2, v8);
  }
}

uint64_t sub_10001B288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001B294);
}

char *sub_10001B294(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Image.Scale(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 92)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_10001B308(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[21];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_1000C6880;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = &unk_1000C6898;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[13] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[14] = &unk_1000C6880;
  v4[15] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[16] = &unk_1000C68B0;
  v4[17] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[18] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Image.Scale(319);
  if (v3 <= 0x3F)
  {
    v4[19] = *(_QWORD *)(result - 8) + 64;
    v4[20] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 21, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for SportsWidgetMinimalViewLayout(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 16));
  return swift_release(*(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for SportsWidgetMinimalViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v4;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

_QWORD *assignWithCopy for SportsWidgetMinimalViewLayout(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  v6 = a2[7];
  v7 = a1[7];
  a1[7] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[8] = a2[8];
  return a1;
}

__n128 initializeWithTake for SportsWidgetMinimalViewLayout(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SportsWidgetMinimalViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release(v5);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetMinimalViewLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetMinimalViewLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetMinimalViewLayout()
{
  return &type metadata for SportsWidgetMinimalViewLayout;
}

uint64_t destroy for SportsWidgetDynamicIslandCompactViewLayout(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[8]);
  swift_release(a1[9]);
  return swift_release(a1[10]);
}

uint64_t initializeWithCopy for SportsWidgetDynamicIslandCompactViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t assignWithCopy for SportsWidgetDynamicIslandCompactViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_retain(v12);
  swift_release(v13);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

__n128 initializeWithTake for SportsWidgetDynamicIslandCompactViewLayout(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for SportsWidgetDynamicIslandCompactViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release(*(_QWORD *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release(v6);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetDynamicIslandCompactViewLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetDynamicIslandCompactViewLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetDynamicIslandCompactViewLayout()
{
  return &type metadata for SportsWidgetDynamicIslandCompactViewLayout;
}

_QWORD *sub_10001B94C(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t EnumCaseMultiPayload;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int (*v92)(char *, uint64_t, uint64_t, __n128);
  void *__dstb;
  void *__dst;
  char *__dsta;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    __dstb = (void *)a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = __dstb;
    v90 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v90;
    v87 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v87;
    v84 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v84;
    v81 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v81;
    v6 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v6;
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    v77 = a2[13];
    v78 = v6;
    *(_QWORD *)(a1 + 104) = v77;
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    v76 = a2[16];
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_QWORD *)(a1 + 128) = v76;
    v7 = a2[18];
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_QWORD *)(a1 + 144) = v7;
    v8 = a2[20];
    *(_QWORD *)(a1 + 152) = a2[19];
    *(_QWORD *)(a1 + 160) = v8;
    v9 = a2[22];
    *(_QWORD *)(a1 + 168) = a2[21];
    *(_QWORD *)(a1 + 176) = v9;
    v10 = a2[24];
    *(_QWORD *)(a1 + 184) = a2[23];
    *(_QWORD *)(a1 + 192) = v10;
    v11 = a2[26];
    *(_QWORD *)(a1 + 200) = a2[25];
    *(_QWORD *)(a1 + 208) = v11;
    *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
    v12 = a2[28];
    *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
    v13 = a3[6];
    v75 = (_QWORD *)(a1 + v13);
    v14 = (char *)a2 + v13;
    *(_QWORD *)(a1 + 224) = v12;
    v15 = type metadata accessor for SportsWidgetClock(0);
    swift_bridgeObjectRetain(__dstb);
    swift_bridgeObjectRetain(v90);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v78);
    swift_retain(v77);
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_retain(v12);
    __dst = (void *)v15;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v15);
    v17 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v25 = *((_QWORD *)v14 + 1);
      v18 = v75;
      *v75 = *(_QWORD *)v14;
      v75[1] = v25;
      v26 = *((_QWORD *)v14 + 3);
      v75[2] = *((_QWORD *)v14 + 2);
      v75[3] = v26;
      v88 = *((_QWORD *)v14 + 5);
      v75[4] = *((_QWORD *)v14 + 4);
      v75[5] = v88;
      v27 = *((_QWORD *)v14 + 7);
      v75[6] = *((_QWORD *)v14 + 6);
      v75[7] = v27;
      v28 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v29 = v28[8];
      v82 = &v14[v29];
      v85 = (char *)v75 + v29;
      v30 = type metadata accessor for Date(0);
      v31 = *(_QWORD *)(v30 - 8);
      v79 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRetain(v27);
      v79(v85, v82, v30);
      v32 = sub_100008EF4(&qword_100105F40);
      v79(&v85[*(int *)(v32 + 36)], &v82[*(int *)(v32 + 36)], v30);
      v33 = v28[9];
      v34 = (char *)v75 + v33;
      v35 = &v14[v33];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(&v14[v33], 1, v30))
      {
        v36 = sub_100008EF4(&qword_100105F48);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        v79(v34, v35, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v34, 0, 1, v30);
      }
      *((_BYTE *)v75 + v28[10]) = v14[v28[10]];
      *((_BYTE *)v75 + v28[11]) = v14[v28[11]];
      v49 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
      v50 = *(_QWORD *)&v14[v49];
      *(_QWORD *)((char *)v75 + v49) = v50;
      swift_bridgeObjectRetain(v50);
      v23 = __dst;
      v17 = 2;
    }
    else
    {
      v18 = v75;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v19 = *(_QWORD *)v14;
        v20 = *((_QWORD *)v14 + 1);
        *v75 = *(_QWORD *)v14;
        v75[1] = v20;
        v21 = *((_QWORD *)v14 + 3);
        v75[2] = *((_QWORD *)v14 + 2);
        v75[3] = v21;
        v22 = *((_QWORD *)v14 + 5);
        v75[4] = *((_QWORD *)v14 + 4);
        v75[5] = v22;
        *((_BYTE *)v75 + 48) = v14[48];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v23 = __dst;
      }
      else
      {
        v91 = EnumCaseMultiPayload;
        v37 = *((_QWORD *)v14 + 1);
        *v75 = *(_QWORD *)v14;
        v75[1] = v37;
        v38 = *((_QWORD *)v14 + 3);
        v75[2] = *((_QWORD *)v14 + 2);
        v75[3] = v38;
        v89 = *((_QWORD *)v14 + 5);
        v75[4] = *((_QWORD *)v14 + 4);
        v75[5] = v89;
        v39 = *((_QWORD *)v14 + 7);
        v75[6] = *((_QWORD *)v14 + 6);
        v75[7] = v39;
        v40 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
        v41 = v40[8];
        v83 = &v14[v41];
        v86 = (char *)v75 + v41;
        v42 = type metadata accessor for Date(0);
        v43 = *(_QWORD *)(v42 - 8);
        v80 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
        swift_bridgeObjectRetain(v37);
        swift_bridgeObjectRetain(v38);
        swift_bridgeObjectRetain(v89);
        swift_bridgeObjectRetain(v39);
        v80(v86, v83, v42);
        v44 = sub_100008EF4(&qword_100105F40);
        v80(&v86[*(int *)(v44 + 36)], &v83[*(int *)(v44 + 36)], v42);
        v45 = v40[9];
        v46 = (char *)v75 + v45;
        v47 = &v14[v45];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(&v14[v45], 1, v42))
        {
          v48 = sub_100008EF4(&qword_100105F48);
          memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          v80(v46, v47, v42);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, v42);
        }
        v23 = __dst;
        v17 = v91;
        *((_BYTE *)v75 + v40[10]) = v14[v40[10]];
        *((_BYTE *)v75 + v40[11]) = v14[v40[11]];
      }
    }
    swift_storeEnumTagMultiPayload(v18, v23, v17);
    v51 = a3[7];
    v52 = a3[8];
    v53 = (_QWORD *)((char *)v4 + v51);
    v54 = (uint64_t *)((char *)a2 + v51);
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    v56 = v54[3];
    v53[2] = v54[2];
    v53[3] = v56;
    v57 = (char *)v4 + v52;
    v58 = (uint64_t)a2 + v52;
    v59 = *(_QWORD *)(v58 + 8);
    *(_QWORD *)v57 = *(_QWORD *)v58;
    *((_QWORD *)v57 + 1) = v59;
    v57[16] = *(_BYTE *)(v58 + 16);
    v60 = *(_QWORD *)(v58 + 24);
    *((_QWORD *)v57 + 3) = v60;
    v57[32] = *(_BYTE *)(v58 + 32);
    v61 = *(_QWORD *)(v58 + 40);
    *((_QWORD *)v57 + 5) = v61;
    v57[48] = *(_BYTE *)(v58 + 48);
    v62 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)v4 + v62) = *((_BYTE *)a2 + v62);
    v63 = a3[12];
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)v4 + v63) = *((_BYTE *)a2 + v63);
    v64 = a3[13];
    __dsta = (char *)v4 + v64;
    v65 = (char *)a2 + v64;
    v66 = type metadata accessor for URL(0);
    v67 = *(_QWORD *)(v66 - 8);
    v92 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v67 + 48);
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v59);
    swift_retain(v60);
    v68 = swift_retain(v61);
    if (v92(v65, 1, v66, v68))
    {
      v69 = sub_100008EF4(&qword_100105F50);
      memcpy(__dsta, v65, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(__dsta, v65, v66);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(__dsta, 0, 1, v66);
    }
    v70 = a3[15];
    *((_BYTE *)v4 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    v71 = (_QWORD *)((char *)v4 + v70);
    v72 = (uint64_t *)((char *)a2 + v70);
    v73 = v72[1];
    *v71 = *v72;
    v71[1] = v73;
    swift_bridgeObjectRetain(v73);
  }
  return v4;
}

uint64_t type metadata accessor for SportsWidgetClock(uint64_t a1)
{
  return sub_100025CD0(a1, qword_100106CA0, (uint64_t)&nominal type descriptor for SportsWidgetClock);
}

uint64_t type metadata accessor for SportsWidgetGenericClockViewModel(uint64_t a1)
{
  return sub_100025CD0(a1, (uint64_t *)&unk_100106B38, (uint64_t)&nominal type descriptor for SportsWidgetGenericClockViewModel);
}

uint64_t type metadata accessor for SportsWidgetSoccerClockViewModel(uint64_t a1)
{
  return sub_100025CD0(a1, qword_100106BF8, (uint64_t)&nominal type descriptor for SportsWidgetSoccerClockViewModel);
}

uint64_t sub_10001BFBC(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_release(a1[13]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  swift_release(a1[28]);
  v4 = (_QWORD *)((char *)a1 + a2[6]);
  v5 = type metadata accessor for SportsWidgetClock(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v5);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease(v4[1]);
      swift_bridgeObjectRelease(v4[3]);
      swift_bridgeObjectRelease(v4[5]);
      swift_bridgeObjectRelease(v4[7]);
      v14 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v15 = (char *)v4 + *(int *)(v14 + 32);
      v16 = type metadata accessor for Date(0);
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(void (**)(char *, uint64_t))(v17 + 8);
      v18(v15, v16);
      v19 = sub_100008EF4(&qword_100105F40);
      v18(&v15[*(int *)(v19 + 36)], v16);
      v20 = (char *)v4 + *(int *)(v14 + 36);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v20, 1, v16))
        v18(v20, v16);
      v21 = *(_QWORD *)((char *)v4 + *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20));
      goto LABEL_10;
    case 1:
      swift_bridgeObjectRelease(*v4);
      swift_bridgeObjectRelease(v4[1]);
      swift_bridgeObjectRelease(v4[3]);
      v21 = v4[5];
LABEL_10:
      swift_bridgeObjectRelease(v21);
      break;
    case 0:
      swift_bridgeObjectRelease(v4[1]);
      swift_bridgeObjectRelease(v4[3]);
      swift_bridgeObjectRelease(v4[5]);
      swift_bridgeObjectRelease(v4[7]);
      v7 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v8 = (char *)v4 + *(int *)(v7 + 32);
      v9 = type metadata accessor for Date(0);
      v10 = *(_QWORD *)(v9 - 8);
      v11 = *(void (**)(char *, uint64_t))(v10 + 8);
      v11(v8, v9);
      v12 = sub_100008EF4(&qword_100105F40);
      v11(&v8[*(int *)(v12 + 36)], v9);
      v13 = (char *)v4 + *(int *)(v7 + 36);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
        v11(v13, v9);
      break;
  }
  v22 = (char *)a1 + a2[7];
  swift_bridgeObjectRelease(*((_QWORD *)v22 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v22 + 3));
  v23 = (_QWORD *)((char *)a1 + a2[8]);
  swift_bridgeObjectRelease(v23[1]);
  swift_release(v23[3]);
  swift_release(v23[5]);
  v24 = (char *)a1 + a2[13];
  v25 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v25 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[15] + 8));
}

uint64_t sub_10001C288(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int (*v90)(const void *, uint64_t, uint64_t, __n128);
  void *__dstb;
  void *__dst;
  void *__dsta;

  __dstb = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = __dstb;
  v88 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v88;
  v85 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v85;
  v82 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v82;
  v79 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v79;
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v75 = *(_QWORD *)(a2 + 104);
  v76 = v5;
  *(_QWORD *)(a1 + 104) = v75;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v74 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v74;
  v6 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v6;
  v7 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v7;
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v8;
  v9 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v9;
  v10 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v10;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v11 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v12 = a3[6];
  v73 = (_QWORD *)(a1 + v12);
  v13 = (char *)(a2 + v12);
  *(_QWORD *)(a1 + 224) = v11;
  v14 = type metadata accessor for SportsWidgetClock(0);
  swift_bridgeObjectRetain(__dstb);
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v76);
  swift_retain(v75);
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  __dst = (void *)v14;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v14);
  v16 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v23 = *((_QWORD *)v13 + 1);
    v17 = v73;
    *v73 = *(_QWORD *)v13;
    v73[1] = v23;
    v24 = *((_QWORD *)v13 + 3);
    v73[2] = *((_QWORD *)v13 + 2);
    v73[3] = v24;
    v86 = *((_QWORD *)v13 + 5);
    v73[4] = *((_QWORD *)v13 + 4);
    v73[5] = v86;
    v25 = *((_QWORD *)v13 + 7);
    v73[6] = *((_QWORD *)v13 + 6);
    v73[7] = v25;
    v26 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v27 = v26[8];
    v80 = &v13[v27];
    v83 = (char *)v73 + v27;
    v28 = type metadata accessor for Date(0);
    v29 = *(_QWORD *)(v28 - 8);
    v77 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v25);
    v77(v83, v80, v28);
    v30 = sub_100008EF4(&qword_100105F40);
    v77(&v83[*(int *)(v30 + 36)], &v80[*(int *)(v30 + 36)], v28);
    v31 = v26[9];
    v32 = (char *)v73 + v31;
    v33 = &v13[v31];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(&v13[v31], 1, v28))
    {
      v34 = sub_100008EF4(&qword_100105F48);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v77(v32, v33, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v32, 0, 1, v28);
    }
    *((_BYTE *)v73 + v26[10]) = v13[v26[10]];
    *((_BYTE *)v73 + v26[11]) = v13[v26[11]];
    v47 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
    v48 = *(_QWORD *)&v13[v47];
    *(_QWORD *)((char *)v73 + v47) = v48;
    swift_bridgeObjectRetain(v48);
    v22 = __dst;
    v16 = 2;
  }
  else
  {
    v17 = v73;
    if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      v18 = *(_QWORD *)v13;
      v19 = *((_QWORD *)v13 + 1);
      *v73 = *(_QWORD *)v13;
      v73[1] = v19;
      v20 = *((_QWORD *)v13 + 3);
      v73[2] = *((_QWORD *)v13 + 2);
      v73[3] = v20;
      v21 = *((_QWORD *)v13 + 5);
      v73[4] = *((_QWORD *)v13 + 4);
      v73[5] = v21;
      *((_BYTE *)v73 + 48) = v13[48];
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v22 = __dst;
    }
    else
    {
      v89 = EnumCaseMultiPayload;
      v35 = *((_QWORD *)v13 + 1);
      *v73 = *(_QWORD *)v13;
      v73[1] = v35;
      v36 = *((_QWORD *)v13 + 3);
      v73[2] = *((_QWORD *)v13 + 2);
      v73[3] = v36;
      v87 = *((_QWORD *)v13 + 5);
      v73[4] = *((_QWORD *)v13 + 4);
      v73[5] = v87;
      v37 = *((_QWORD *)v13 + 7);
      v73[6] = *((_QWORD *)v13 + 6);
      v73[7] = v37;
      v38 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v39 = v38[8];
      v81 = &v13[v39];
      v84 = (char *)v73 + v39;
      v40 = type metadata accessor for Date(0);
      v41 = *(_QWORD *)(v40 - 8);
      v78 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v87);
      swift_bridgeObjectRetain(v37);
      v78(v84, v81, v40);
      v42 = sub_100008EF4(&qword_100105F40);
      v78(&v84[*(int *)(v42 + 36)], &v81[*(int *)(v42 + 36)], v40);
      v43 = v38[9];
      v44 = (char *)v73 + v43;
      v45 = &v13[v43];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(&v13[v43], 1, v40))
      {
        v46 = sub_100008EF4(&qword_100105F48);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        v78(v44, v45, v40);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v44, 0, 1, v40);
      }
      v22 = __dst;
      v16 = v89;
      *((_BYTE *)v73 + v38[10]) = v13[v38[10]];
      *((_BYTE *)v73 + v38[11]) = v13[v38[11]];
    }
  }
  swift_storeEnumTagMultiPayload(v17, v22, v16);
  v49 = a3[7];
  v50 = a3[8];
  v51 = (_QWORD *)(a1 + v49);
  v52 = (_QWORD *)(a2 + v49);
  v53 = v52[1];
  *v51 = *v52;
  v51[1] = v53;
  v54 = v52[3];
  v51[2] = v52[2];
  v51[3] = v54;
  v55 = a1 + v50;
  v56 = a2 + v50;
  v57 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)v55 = *(_QWORD *)v56;
  *(_QWORD *)(v55 + 8) = v57;
  *(_BYTE *)(v55 + 16) = *(_BYTE *)(v56 + 16);
  v58 = *(_QWORD *)(v56 + 24);
  *(_QWORD *)(v55 + 24) = v58;
  *(_BYTE *)(v55 + 32) = *(_BYTE *)(v56 + 32);
  v59 = *(_QWORD *)(v56 + 40);
  *(_QWORD *)(v55 + 40) = v59;
  *(_BYTE *)(v55 + 48) = *(_BYTE *)(v56 + 48);
  v60 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v60) = *(_BYTE *)(a2 + v60);
  v61 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v61) = *(_BYTE *)(a2 + v61);
  v62 = a3[13];
  __dsta = (void *)(a1 + v62);
  v63 = (const void *)(a2 + v62);
  v64 = type metadata accessor for URL(0);
  v65 = *(_QWORD *)(v64 - 8);
  v90 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v65 + 48);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v57);
  swift_retain(v58);
  v66 = swift_retain(v59);
  if (v90(v63, 1, v64, v66))
  {
    v67 = sub_100008EF4(&qword_100105F50);
    memcpy(__dsta, v63, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v65 + 16))(__dsta, v63, v64);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v65 + 56))(__dsta, 0, 1, v64);
  }
  v68 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v69 = (_QWORD *)(a1 + v68);
  v70 = (_QWORD *)(a2 + v68);
  v71 = v70[1];
  *v69 = *v70;
  v69[1] = v71;
  swift_bridgeObjectRetain(v71);
  return a1;
}

uint64_t sub_10001C890(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(void *, uint64_t, uint64_t);
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char *v104;
  char *v105;
  uint64_t v106;
  int *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  uint64_t v113;
  void (*v114)(char *, char *, uint64_t);
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v18;
  swift_retain(v18);
  swift_release(v19);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v26 = *(_QWORD *)(a2 + 176);
  v27 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v28 = *(_QWORD *)(a2 + 192);
  v29 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v30 = *(_QWORD *)(a2 + 208);
  v31 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v32 = *(_QWORD *)(a2 + 224);
  v33 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v32;
  swift_retain(v32);
  swift_release(v33);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  if (a1 != a2)
  {
    v34 = a3[6];
    v35 = (_QWORD *)(a1 + v34);
    v36 = (char *)(a2 + v34);
    sub_10001D060(a1 + v34);
    v37 = type metadata accessor for SportsWidgetClock(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v36, v37);
    v39 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v116 = v37;
      *v35 = *(_QWORD *)v36;
      v110 = *((_QWORD *)v36 + 1);
      v112 = a3;
      v35[1] = v110;
      v35[2] = *((_QWORD *)v36 + 2);
      v108 = *((_QWORD *)v36 + 3);
      v35[3] = v108;
      v35[4] = *((_QWORD *)v36 + 4);
      v44 = *((_QWORD *)v36 + 5);
      v35[5] = v44;
      v35[6] = *((_QWORD *)v36 + 6);
      v106 = *((_QWORD *)v36 + 7);
      v35[7] = v106;
      v45 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v46 = *(int *)(v45 + 32);
      v104 = (char *)v35 + v46;
      v47 = &v36[v46];
      v48 = type metadata accessor for Date(0);
      v49 = *(_QWORD *)(v48 - 8);
      v50 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      swift_bridgeObjectRetain(v110);
      swift_bridgeObjectRetain(v108);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v106);
      v50(v104, v47, v48);
      v51 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
      v52 = &v47[v51];
      v53 = v48;
      v50(&v104[v51], v52, v48);
      v54 = v45;
      v55 = *(int *)(v45 + 36);
      v56 = (char *)v35 + v55;
      v57 = &v36[v55];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(&v36[v55], 1, v53))
      {
        v58 = sub_100008EF4(&qword_100105F48);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        v50(v56, v57, v53);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v56, 0, 1, v53);
      }
      *((_BYTE *)v35 + *(int *)(v54 + 40)) = v36[*(int *)(v54 + 40)];
      *((_BYTE *)v35 + *(int *)(v54 + 44)) = v36[*(int *)(v54 + 44)];
      v71 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
      v72 = *(_QWORD *)&v36[v71];
      *(_QWORD *)((char *)v35 + v71) = v72;
      swift_bridgeObjectRetain(v72);
      v37 = v116;
      v39 = 2;
      a3 = v112;
    }
    else if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      v40 = *(_QWORD *)v36;
      *v35 = *(_QWORD *)v36;
      v41 = *((_QWORD *)v36 + 1);
      v35[1] = v41;
      v35[2] = *((_QWORD *)v36 + 2);
      v42 = *((_QWORD *)v36 + 3);
      v35[3] = v42;
      v35[4] = *((_QWORD *)v36 + 4);
      v43 = *((_QWORD *)v36 + 5);
      v35[5] = v43;
      *((_BYTE *)v35 + 48) = v36[48];
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v43);
    }
    else
    {
      v115 = EnumCaseMultiPayload;
      v117 = v37;
      *v35 = *(_QWORD *)v36;
      v113 = *((_QWORD *)v36 + 1);
      v35[1] = v113;
      v35[2] = *((_QWORD *)v36 + 2);
      v59 = *((_QWORD *)v36 + 3);
      v35[3] = v59;
      v35[4] = *((_QWORD *)v36 + 4);
      v111 = *((_QWORD *)v36 + 5);
      v35[5] = v111;
      v35[6] = *((_QWORD *)v36 + 6);
      v109 = *((_QWORD *)v36 + 7);
      v35[7] = v109;
      v60 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v61 = *(int *)(v60 + 32);
      v62 = (char *)v35 + v61;
      v105 = &v36[v61];
      v107 = (int *)v60;
      v63 = type metadata accessor for Date(0);
      v64 = *(_QWORD *)(v63 - 8);
      v65 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
      swift_bridgeObjectRetain(v113);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v111);
      swift_bridgeObjectRetain(v109);
      v65(v62, v105, v63);
      v66 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
      v114 = v65;
      v65(&v62[v66], &v105[v66], v63);
      v67 = v107[9];
      v68 = (char *)v35 + v67;
      v69 = &v36[v67];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(&v36[v67], 1, v63))
      {
        v70 = sub_100008EF4(&qword_100105F48);
        memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      }
      else
      {
        v114(v68, v69, v63);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v68, 0, 1, v63);
      }
      v37 = v117;
      *((_BYTE *)v35 + v107[10]) = v36[v107[10]];
      *((_BYTE *)v35 + v107[11]) = v36[v107[11]];
      v39 = v115;
    }
    swift_storeEnumTagMultiPayload(v35, v37, v39);
  }
  v73 = a3[7];
  v74 = (_QWORD *)(a1 + v73);
  v75 = a2 + v73;
  *v74 = *(_QWORD *)(a2 + v73);
  v76 = *(_QWORD *)(a2 + v73 + 8);
  v77 = *(_QWORD *)(a1 + v73 + 8);
  v74[1] = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77);
  v74[2] = *(_QWORD *)(v75 + 16);
  v78 = *(_QWORD *)(v75 + 24);
  v79 = v74[3];
  v74[3] = v78;
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRelease(v79);
  v80 = a3[8];
  v81 = a1 + v80;
  v82 = a2 + v80;
  *(_QWORD *)v81 = *(_QWORD *)(a2 + v80);
  v83 = *(_QWORD *)(a2 + v80 + 8);
  v84 = *(_QWORD *)(a1 + v80 + 8);
  *(_QWORD *)(v81 + 8) = v83;
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRelease(v84);
  *(_BYTE *)(v81 + 16) = *(_BYTE *)(v82 + 16);
  v85 = *(_QWORD *)(v82 + 24);
  v86 = *(_QWORD *)(v81 + 24);
  *(_QWORD *)(v81 + 24) = v85;
  swift_retain(v85);
  swift_release(v86);
  *(_BYTE *)(v81 + 32) = *(_BYTE *)(v82 + 32);
  v87 = *(_QWORD *)(v82 + 40);
  v88 = *(_QWORD *)(v81 + 40);
  *(_QWORD *)(v81 + 40) = v87;
  swift_retain(v87);
  swift_release(v88);
  *(_BYTE *)(v81 + 48) = *(_BYTE *)(v82 + 48);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v89 = a3[13];
  v90 = (void *)(a1 + v89);
  v91 = (void *)(a2 + v89);
  v92 = type metadata accessor for URL(0);
  v93 = *(_QWORD *)(v92 - 8);
  v94 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v93 + 48);
  v95 = v94(v90, 1, v92);
  v96 = v94(v91, 1, v92);
  if (!v95)
  {
    if (!v96)
    {
      (*(void (**)(void *, void *, uint64_t))(v93 + 24))(v90, v91, v92);
      goto LABEL_20;
    }
    (*(void (**)(void *, uint64_t))(v93 + 8))(v90, v92);
    goto LABEL_19;
  }
  if (v96)
  {
LABEL_19:
    v97 = sub_100008EF4(&qword_100105F50);
    memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v93 + 16))(v90, v91, v92);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
LABEL_20:
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v98 = a3[15];
  v99 = (_QWORD *)(a1 + v98);
  v100 = (_QWORD *)(a2 + v98);
  *v99 = *v100;
  v101 = v100[1];
  v102 = v99[1];
  v99[1] = v101;
  swift_bridgeObjectRetain(v101);
  swift_bridgeObjectRelease(v102);
  return a1;
}

uint64_t sub_10001D060(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SportsWidgetClock(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001D09C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  char *v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  __int128 v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  _OWORD *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 136);
  v11 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  v12 = *(_OWORD *)(a2 + 184);
  v13 = *(_OWORD *)(a2 + 200);
  v14 = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(a1 + 200) = v13;
  v15 = a3[6];
  v16 = (_OWORD *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  *(_OWORD *)(a1 + 184) = v12;
  v18 = type metadata accessor for SportsWidgetClock(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v18);
  if (EnumCaseMultiPayload == 2)
  {
    v71 = v18;
    v33 = *((_OWORD *)v17 + 1);
    *v16 = *(_OWORD *)v17;
    v16[1] = v33;
    v34 = *((_OWORD *)v17 + 3);
    v16[2] = *((_OWORD *)v17 + 2);
    v16[3] = v34;
    v35 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v36 = v35[8];
    v37 = (char *)v16 + v36;
    v38 = &v17[v36];
    v39 = type metadata accessor for Date(0);
    v69 = *(_QWORD *)(v39 - 8);
    v40 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
    v40(v37, v38, v39);
    v41 = sub_100008EF4(&qword_100105F40);
    v40(&v37[*(int *)(v41 + 36)], &v38[*(int *)(v41 + 36)], v39);
    v42 = v35[9];
    v43 = (char *)v16 + v42;
    v44 = &v17[v42];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(&v17[v42], 1, v39))
    {
      v45 = sub_100008EF4(&qword_100105F48);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      v40(v43, v44, v39);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v43, 0, 1, v39);
    }
    *((_BYTE *)v16 + v35[10]) = v17[v35[10]];
    *((_BYTE *)v16 + v35[11]) = v17[v35[11]];
    v49 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
    *(_QWORD *)((char *)v16 + *(int *)(v49 + 20)) = *(_QWORD *)&v17[*(int *)(v49 + 20)];
    v47 = v16;
    v46 = v71;
    v48 = 2;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      goto LABEL_13;
    }
    v70 = v18;
    v20 = *((_OWORD *)v17 + 1);
    *v16 = *(_OWORD *)v17;
    v16[1] = v20;
    v21 = *((_OWORD *)v17 + 3);
    v16[2] = *((_OWORD *)v17 + 2);
    v16[3] = v21;
    v22 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v23 = v22[8];
    v24 = (char *)v16 + v23;
    v25 = &v17[v23];
    v26 = type metadata accessor for Date(0);
    v68 = *(_QWORD *)(v26 - 8);
    v27 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
    v27(v24, v25, v26);
    v28 = sub_100008EF4(&qword_100105F40);
    v27(&v24[*(int *)(v28 + 36)], &v25[*(int *)(v28 + 36)], v26);
    v29 = v22[9];
    v30 = (char *)v16 + v29;
    v31 = &v17[v29];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(&v17[v29], 1, v26))
    {
      v32 = sub_100008EF4(&qword_100105F48);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v27(v30, v31, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v30, 0, 1, v26);
    }
    v46 = v70;
    *((_BYTE *)v16 + v22[10]) = v17[v22[10]];
    *((_BYTE *)v16 + v22[11]) = v17[v22[11]];
    v47 = v16;
    v48 = 0;
  }
  swift_storeEnumTagMultiPayload(v47, v46, v48);
LABEL_13:
  v50 = a3[7];
  v51 = a3[8];
  v52 = (_OWORD *)(a1 + v50);
  v53 = (_OWORD *)(a2 + v50);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = a1 + v51;
  v56 = a2 + v51;
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  *(_OWORD *)(v55 + 32) = *(_OWORD *)(v56 + 32);
  *(_BYTE *)(v55 + 48) = *(_BYTE *)(v56 + 48);
  v58 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v58) = *(_BYTE *)(a2 + v58);
  v59 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v59) = *(_BYTE *)(a2 + v59);
  v60 = a3[13];
  v61 = (void *)(a1 + v60);
  v62 = (const void *)(a2 + v60);
  v63 = type metadata accessor for URL(0);
  v64 = *(_QWORD *)(v63 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
  {
    v65 = sub_100008EF4(&qword_100105F50);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v64 + 32))(v61, v62, v63);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
  }
  v66 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v66) = *(_OWORD *)(a2 + v66);
  return a1;
}

uint64_t sub_10001D4E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  int EnumCaseMultiPayload;
  __int128 v37;
  __int128 v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(void *, uint64_t, uint64_t);
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v16;
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v18 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release(v18);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v19;
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a2 + 144);
  v22 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v21;
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a2 + 160);
  v24 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v23;
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a2 + 176);
  v26 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(a2 + 192);
  v28 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v27;
  swift_bridgeObjectRelease(v28);
  v29 = *(_QWORD *)(a2 + 208);
  v30 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v29;
  swift_bridgeObjectRelease(v30);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v31 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_release(v31);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  if (a1 != a2)
  {
    v32 = a3[6];
    v33 = (_OWORD *)(a1 + v32);
    v34 = (char *)(a2 + v32);
    sub_10001D060(a1 + v32);
    v35 = type metadata accessor for SportsWidgetClock(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v34, v35);
    if (EnumCaseMultiPayload == 2)
    {
      v102 = v35;
      v50 = *((_OWORD *)v34 + 1);
      *v33 = *(_OWORD *)v34;
      v33[1] = v50;
      v51 = *((_OWORD *)v34 + 3);
      v33[2] = *((_OWORD *)v34 + 2);
      v33[3] = v51;
      v52 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v53 = v52[8];
      v54 = (char *)v33 + v53;
      v55 = &v34[v53];
      v56 = type metadata accessor for Date(0);
      v100 = *(_QWORD *)(v56 - 8);
      v57 = *(void (**)(char *, char *, uint64_t))(v100 + 32);
      v57(v54, v55, v56);
      v58 = sub_100008EF4(&qword_100105F40);
      v57(&v54[*(int *)(v58 + 36)], &v55[*(int *)(v58 + 36)], v56);
      v59 = v52[9];
      v60 = (char *)v33 + v59;
      v61 = &v34[v59];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(&v34[v59], 1, v56))
      {
        v62 = sub_100008EF4(&qword_100105F48);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        v57(v60, v61, v56);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v60, 0, 1, v56);
      }
      *((_BYTE *)v33 + v52[10]) = v34[v52[10]];
      *((_BYTE *)v33 + v52[11]) = v34[v52[11]];
      v66 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
      *(_QWORD *)((char *)v33 + *(int *)(v66 + 20)) = *(_QWORD *)&v34[*(int *)(v66 + 20)];
      v64 = v33;
      v63 = v102;
      v65 = 2;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        goto LABEL_14;
      }
      v101 = v35;
      v37 = *((_OWORD *)v34 + 1);
      *v33 = *(_OWORD *)v34;
      v33[1] = v37;
      v38 = *((_OWORD *)v34 + 3);
      v33[2] = *((_OWORD *)v34 + 2);
      v33[3] = v38;
      v39 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v40 = v39[8];
      v41 = (char *)v33 + v40;
      v42 = &v34[v40];
      v43 = type metadata accessor for Date(0);
      v99 = *(_QWORD *)(v43 - 8);
      v44 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
      v44(v41, v42, v43);
      v45 = sub_100008EF4(&qword_100105F40);
      v44(&v41[*(int *)(v45 + 36)], &v42[*(int *)(v45 + 36)], v43);
      v46 = v39[9];
      v47 = (char *)v33 + v46;
      v48 = &v34[v46];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(&v34[v46], 1, v43))
      {
        v49 = sub_100008EF4(&qword_100105F48);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        v44(v47, v48, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v47, 0, 1, v43);
      }
      v63 = v101;
      *((_BYTE *)v33 + v39[10]) = v34[v39[10]];
      *((_BYTE *)v33 + v39[11]) = v34[v39[11]];
      v64 = v33;
      v65 = 0;
    }
    swift_storeEnumTagMultiPayload(v64, v63, v65);
  }
LABEL_14:
  v67 = a3[7];
  v68 = (_QWORD *)(a1 + v67);
  v69 = a2 + v67;
  v70 = *(_QWORD *)(a2 + v67 + 8);
  v71 = *(_QWORD *)(a1 + v67 + 8);
  *v68 = *(_QWORD *)(a2 + v67);
  v68[1] = v70;
  swift_bridgeObjectRelease(v71);
  v72 = *(_QWORD *)(v69 + 24);
  v73 = v68[3];
  v68[2] = *(_QWORD *)(v69 + 16);
  v68[3] = v72;
  swift_bridgeObjectRelease(v73);
  v74 = a3[8];
  v75 = a1 + v74;
  v76 = a2 + v74;
  v77 = *(_QWORD *)(a2 + v74 + 8);
  v78 = *(_QWORD *)(a1 + v74 + 8);
  *(_QWORD *)v75 = *(_QWORD *)(a2 + v74);
  *(_QWORD *)(v75 + 8) = v77;
  swift_bridgeObjectRelease(v78);
  *(_BYTE *)(v75 + 16) = *(_BYTE *)(v76 + 16);
  v79 = *(_QWORD *)(v75 + 24);
  *(_QWORD *)(v75 + 24) = *(_QWORD *)(v76 + 24);
  swift_release(v79);
  *(_BYTE *)(v75 + 32) = *(_BYTE *)(v76 + 32);
  v80 = *(_QWORD *)(v75 + 40);
  *(_QWORD *)(v75 + 40) = *(_QWORD *)(v76 + 40);
  swift_release(v80);
  *(_BYTE *)(v75 + 48) = *(_BYTE *)(v76 + 48);
  v81 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v81) = *(_BYTE *)(a2 + v81);
  v82 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v82) = *(_BYTE *)(a2 + v82);
  v83 = a3[13];
  v84 = (void *)(a1 + v83);
  v85 = (void *)(a2 + v83);
  v86 = type metadata accessor for URL(0);
  v87 = *(_QWORD *)(v86 - 8);
  v88 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v87 + 48);
  v89 = v88(v84, 1, v86);
  v90 = v88(v85, 1, v86);
  if (!v89)
  {
    if (!v90)
    {
      (*(void (**)(void *, void *, uint64_t))(v87 + 40))(v84, v85, v86);
      goto LABEL_20;
    }
    (*(void (**)(void *, uint64_t))(v87 + 8))(v84, v86);
    goto LABEL_19;
  }
  if (v90)
  {
LABEL_19:
    v91 = sub_100008EF4(&qword_100105F50);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v87 + 32))(v84, v85, v86);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
LABEL_20:
  v92 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v93 = (_QWORD *)(a1 + v92);
  v94 = (uint64_t *)(a2 + v92);
  v96 = *v94;
  v95 = v94[1];
  v97 = v93[1];
  *v93 = v96;
  v93[1] = v95;
  swift_bridgeObjectRelease(v97);
  return a1;
}

uint64_t sub_10001DA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001DA78);
}

uint64_t sub_10001DA78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SportsWidgetClock(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_100008EF4(&qword_100105F50);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 52);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10001DB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001DB28);
}

uint64_t sub_10001DB28(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for SportsWidgetClock(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_100008EF4(&qword_100105F50);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 52);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SportsWidgetContentViewModel(uint64_t a1)
{
  return sub_100025CD0(a1, (uint64_t *)&unk_100106A78, (uint64_t)&nominal type descriptor for SportsWidgetContentViewModel);
}

void sub_10001DBDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[12];

  v6[0] = "q";
  v6[1] = "q";
  v2 = type metadata accessor for SportsWidgetClock(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = &unk_1000C6A38;
    v6[4] = &unk_1000C6A50;
    v6[5] = &unk_1000C6A68;
    v6[6] = &unk_1000C6A68;
    v6[7] = &unk_1000C6A68;
    v6[8] = &unk_1000C6A68;
    sub_10001EBC0(319, (unint64_t *)&qword_100106A88, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v6[9] = *(_QWORD *)(v4 - 8) + 64;
      v6[10] = &unk_1000C6A68;
      v6[11] = &unk_1000C6A80;
      swift_initStructMetadata(a1, 256, 12, v6, a1 + 16);
    }
  }
}

uint64_t destroy for SportsWidgetContender(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  return swift_release(a1[13]);
}

uint64_t initializeWithCopy for SportsWidgetContender(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v9;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  return a1;
}

uint64_t assignWithCopy for SportsWidgetContender(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_retain(v16);
  swift_release(v17);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

__n128 initializeWithTake for SportsWidgetContender(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for SportsWidgetContender(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v16 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release(v16);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetContender(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 113))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetContender(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 113) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetContender()
{
  return &type metadata for SportsWidgetContender;
}

ValueMetadata *type metadata accessor for SportsWidgetScoreViewModel()
{
  return &type metadata for SportsWidgetScoreViewModel;
}

_QWORD *sub_10001E064(_QWORD *a1, char *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v7;
    v8 = *((_QWORD *)a2 + 3);
    a1[2] = *((_QWORD *)a2 + 2);
    a1[3] = v8;
    v9 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v9;
    v10 = *((_QWORD *)a2 + 7);
    v11 = a3[8];
    v23 = &a2[v11];
    v24 = (char *)a1 + v11;
    a1[6] = *((_QWORD *)a2 + 6);
    a1[7] = v10;
    v12 = type metadata accessor for Date(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v14(v24, v23, v12);
    v15 = sub_100008EF4(&qword_100105F40);
    v14(&v24[*(int *)(v15 + 36)], &v23[*(int *)(v15 + 36)], v12);
    v16 = a3[9];
    v17 = (char *)v4 + v16;
    v18 = &a2[v16];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(&a2[v16], 1, v12))
    {
      v19 = sub_100008EF4(&qword_100105F48);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v14(v17, v18, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
    }
    v21 = a3[11];
    *((_BYTE *)v4 + a3[10]) = a2[a3[10]];
    *((_BYTE *)v4 + v21) = a2[v21];
  }
  return v4;
}

uint64_t sub_10001E1FC(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  void (*v10)(char *, uint64_t);

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  v4 = (char *)a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v10 = *(void (**)(char *, uint64_t))(v6 + 8);
  v10(v4, v5);
  v7 = sub_100008EF4(&qword_100105F40);
  v10(&v4[*(int *)(v7 + 36)], v5);
  v8 = (char *)a1 + *(int *)(a2 + 36);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5);
  if (!(_DWORD)result)
    return ((uint64_t (*)(char *, uint64_t))v10)(v8, v5);
  return result;
}

_QWORD *sub_10001E2E8(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v22;

  v5 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *((_QWORD *)a2 + 3);
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = v6;
  v7 = *((_QWORD *)a2 + 5);
  a1[4] = *((_QWORD *)a2 + 4);
  a1[5] = v7;
  v8 = *((_QWORD *)a2 + 7);
  v9 = a3[8];
  v22 = (char *)a1 + v9;
  v10 = &a2[v9];
  a1[6] = *((_QWORD *)a2 + 6);
  a1[7] = v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v22, v10, v11);
  v14 = sub_100008EF4(&qword_100105F40);
  v13(&v22[*(int *)(v14 + 36)], &v10[*(int *)(v14 + 36)], v11);
  v15 = a3[9];
  v16 = (char *)a1 + v15;
  v17 = &a2[v15];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v15], 1, v11))
  {
    v18 = sub_100008EF4(&qword_100105F48);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v13(v16, v17, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  v19 = a3[11];
  *((_BYTE *)a1 + a3[10]) = a2[a3[10]];
  *((_BYTE *)a1 + v19) = a2[v19];
  return a1;
}

char *sub_10001E454(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;

  *(_QWORD *)a1 = *a2;
  v6 = a2[1];
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_QWORD *)a1 + 2) = a2[2];
  v8 = a2[3];
  v9 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_QWORD *)a1 + 4) = a2[4];
  v10 = a2[5];
  v11 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *((_QWORD *)a1 + 6) = a2[6];
  v12 = a2[7];
  v13 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[8];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(char *, char *, uint64_t))(v18 + 24);
  v19(v15, v16, v17);
  v20 = sub_100008EF4(&qword_100105F40);
  v19(&v15[*(int *)(v20 + 36)], &v16[*(int *)(v20 + 36)], v17);
  v21 = a3[9];
  v22 = &a1[v21];
  v23 = (char *)a2 + v21;
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v25 = v24(&a1[v21], 1, v17);
  v26 = v24(v23, 1, v17);
  if (!v25)
  {
    if (!v26)
    {
      v19(v22, v23, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v27 = sub_100008EF4(&qword_100105F48);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v22, v23, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v22, 0, 1, v17);
LABEL_7:
  a1[a3[10]] = *((_BYTE *)a2 + a3[10]);
  a1[a3[11]] = *((_BYTE *)a2 + a3[11]);
  return a1;
}

_OWORD *sub_10001E638(_OWORD *a1, char *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *((_OWORD *)a2 + 1);
  *a1 = *(_OWORD *)a2;
  a1[1] = v6;
  v7 = *((_OWORD *)a2 + 3);
  a1[2] = *((_OWORD *)a2 + 2);
  a1[3] = v7;
  v8 = a3[8];
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  v14 = sub_100008EF4(&qword_100105F40);
  v13(&v9[*(int *)(v14 + 36)], &v10[*(int *)(v14 + 36)], v11);
  v15 = a3[9];
  v16 = (char *)a1 + v15;
  v17 = &a2[v15];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v15], 1, v11))
  {
    v18 = sub_100008EF4(&qword_100105F48);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v13(v16, v17, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  v19 = a3[11];
  *((_BYTE *)a1 + a3[10]) = a2[a3[10]];
  *((_BYTE *)a1 + v19) = a2[v19];
  return a1;
}

char *sub_10001E75C(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a2[1];
  v7 = *((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 2) = a2[2];
  *((_QWORD *)a1 + 3) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 4) = a2[4];
  *((_QWORD *)a1 + 5) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a2[7];
  v13 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 6) = a2[6];
  *((_QWORD *)a1 + 7) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = a3[8];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(char *, char *, uint64_t))(v18 + 40);
  v19(v15, v16, v17);
  v20 = sub_100008EF4(&qword_100105F40);
  v19(&v15[*(int *)(v20 + 36)], &v16[*(int *)(v20 + 36)], v17);
  v21 = a3[9];
  v22 = &a1[v21];
  v23 = (char *)a2 + v21;
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v25 = v24(&a1[v21], 1, v17);
  v26 = v24(v23, 1, v17);
  if (!v25)
  {
    if (!v26)
    {
      v19(v22, v23, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v27 = sub_100008EF4(&qword_100105F48);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v23, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v22, 0, 1, v17);
LABEL_7:
  v28 = a3[11];
  a1[a3[10]] = *((_BYTE *)a2 + a3[10]);
  a1[v28] = *((_BYTE *)a2 + v28);
  return a1;
}

uint64_t sub_10001E8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001E908);
}

uint64_t sub_10001E908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100008EF4(&qword_100105F40);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = sub_100008EF4(&qword_100105F48);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10001E9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001E9BC);
}

uint64_t sub_10001E9BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_100008EF4(&qword_100105F40);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = sub_100008EF4(&qword_100105F48);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_10001EA60(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = &unk_1000C6B08;
  v6[1] = &unk_1000C6A80;
  v6[2] = &unk_1000C6A80;
  v6[3] = &unk_1000C6A80;
  sub_10001EB18(319);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001EBC0(319, (unint64_t *)&qword_100106B58, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      v6[6] = &unk_1000C6A68;
      v6[7] = &unk_1000C6A68;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

void sub_10001EB18(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_100106B48)
  {
    v2 = type metadata accessor for Date(255);
    v3 = sub_10001EB78();
    v4 = type metadata accessor for ClosedRange(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_100106B48);
  }
}

unint64_t sub_10001EB78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100106B50;
  if (!qword_100106B50)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_100106B50);
  }
  return result;
}

void sub_10001EBC0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t destroy for SportsWidgetBaseballClockViewModel(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for SportsWidgetBaseballClockViewModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for SportsWidgetBaseballClockViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

__n128 initializeWithTake for SportsWidgetBaseballClockViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SportsWidgetBaseballClockViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetBaseballClockViewModel(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetBaseballClockViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetBaseballClockViewModel()
{
  return &type metadata for SportsWidgetBaseballClockViewModel;
}

_QWORD *sub_10001EE74(_QWORD *a1, char *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  int *v26;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    v7 = *((_QWORD *)a2 + 3);
    a1[2] = *((_QWORD *)a2 + 2);
    a1[3] = v7;
    v8 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v8;
    v9 = *((_QWORD *)a2 + 7);
    a1[6] = *((_QWORD *)a2 + 6);
    a1[7] = v9;
    v10 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v11 = *(int *)(v10 + 32);
    v12 = (char *)v4 + v11;
    v25 = &a2[v11];
    v26 = (int *)v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v15(v12, v25, v13);
    v16 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
    v15(&v12[v16], &v25[v16], v13);
    v17 = v26[9];
    v18 = (char *)v4 + v17;
    v19 = &a2[v17];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(&a2[v17], 1, v13))
    {
      v20 = sub_100008EF4(&qword_100105F48);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v15(v18, v19, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v18, 0, 1, v13);
    }
    *((_BYTE *)v4 + v26[10]) = a2[v26[10]];
    *((_BYTE *)v4 + v26[11]) = a2[v26[11]];
    v22 = *(int *)(a3 + 20);
    v23 = *(_QWORD *)&a2[v22];
    *(_QWORD *)((char *)v4 + v22) = v23;
    swift_bridgeObjectRetain(v23);
  }
  return v4;
}

uint64_t sub_10001F030(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  char *v10;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  v4 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v5 = (char *)a1 + *(int *)(v4 + 32);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(char *, uint64_t))(v7 + 8);
  v8(v5, v6);
  v9 = sub_100008EF4(&qword_100105F40);
  v8(&v5[*(int *)(v9 + 36)], v6);
  v10 = (char *)a1 + *(int *)(v4 + 36);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
    v8(v10, v6);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)));
}

_QWORD *sub_10001F10C(_QWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  int *v24;

  v5 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *((_QWORD *)a2 + 3);
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = v6;
  v7 = *((_QWORD *)a2 + 5);
  a1[4] = *((_QWORD *)a2 + 4);
  a1[5] = v7;
  v8 = *((_QWORD *)a2 + 7);
  a1[6] = *((_QWORD *)a2 + 6);
  a1[7] = v8;
  v9 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v10 = *(int *)(v9 + 32);
  v11 = (char *)a1 + v10;
  v23 = &a2[v10];
  v24 = (int *)v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v14(v11, v23, v12);
  v15 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
  v14(&v11[v15], &v23[v15], v12);
  v16 = v24[9];
  v17 = (char *)a1 + v16;
  v18 = &a2[v16];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(&a2[v16], 1, v12))
  {
    v19 = sub_100008EF4(&qword_100105F48);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v14(v17, v18, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  *((_BYTE *)a1 + v24[10]) = a2[v24[10]];
  *((_BYTE *)a1 + v24[11]) = a2[v24[11]];
  v20 = *(int *)(a3 + 20);
  v21 = *(_QWORD *)&a2[v20];
  *(_QWORD *)((char *)a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  return a1;
}

char *sub_10001F29C(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)a1 = *a2;
  v5 = a2[1];
  v6 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *((_QWORD *)a1 + 2) = a2[2];
  v7 = a2[3];
  v8 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *((_QWORD *)a1 + 4) = a2[4];
  v9 = a2[5];
  v10 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *((_QWORD *)a1 + 6) = a2[6];
  v11 = a2[7];
  v12 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v14 = v13[8];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(char *, char *, uint64_t))(v18 + 24);
  v19(v15, v16, v17);
  v20 = sub_100008EF4(&qword_100105F40);
  v19(&v15[*(int *)(v20 + 36)], &v16[*(int *)(v20 + 36)], v17);
  v21 = v13[9];
  v22 = &a1[v21];
  v23 = (char *)a2 + v21;
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v25 = v24(&a1[v21], 1, v17);
  v26 = v24(v23, 1, v17);
  if (!v25)
  {
    if (!v26)
    {
      v19(v22, v23, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v27 = sub_100008EF4(&qword_100105F48);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v22, v23, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v22, 0, 1, v17);
LABEL_7:
  a1[v13[10]] = *((_BYTE *)a2 + v13[10]);
  a1[v13[11]] = *((_BYTE *)a2 + v13[11]);
  v28 = *(int *)(a3 + 20);
  v29 = *(_QWORD *)&a1[v28];
  v30 = *(_QWORD *)((char *)a2 + v28);
  *(_QWORD *)&a1[v28] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v29);
  return a1;
}

_OWORD *sub_10001F4B4(_OWORD *a1, char *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = *((_OWORD *)a2 + 1);
  *a1 = *(_OWORD *)a2;
  a1[1] = v6;
  v7 = *((_OWORD *)a2 + 3);
  a1[2] = *((_OWORD *)a2 + 2);
  a1[3] = v7;
  v8 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v9 = v8[8];
  v10 = (char *)a1 + v9;
  v11 = &a2[v9];
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v14(v10, v11, v12);
  v15 = sub_100008EF4(&qword_100105F40);
  v14(&v10[*(int *)(v15 + 36)], &v11[*(int *)(v15 + 36)], v12);
  v16 = v8[9];
  v17 = (char *)a1 + v16;
  v18 = &a2[v16];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(&a2[v16], 1, v12))
  {
    v19 = sub_100008EF4(&qword_100105F48);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v14(v17, v18, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  *((_BYTE *)a1 + v8[10]) = a2[v8[10]];
  *((_BYTE *)a1 + v8[11]) = a2[v8[11]];
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_10001F5FC(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = a2[1];
  v6 = *((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = a2[3];
  v8 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 2) = a2[2];
  *((_QWORD *)a1 + 3) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = a2[5];
  v10 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 4) = a2[4];
  *((_QWORD *)a1 + 5) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = a2[7];
  v12 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 6) = a2[6];
  *((_QWORD *)a1 + 7) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v14 = v13[8];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(char *, char *, uint64_t))(v18 + 40);
  v19(v15, v16, v17);
  v20 = sub_100008EF4(&qword_100105F40);
  v19(&v15[*(int *)(v20 + 36)], &v16[*(int *)(v20 + 36)], v17);
  v21 = v13[9];
  v22 = &a1[v21];
  v23 = (char *)a2 + v21;
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v25 = v24(&a1[v21], 1, v17);
  v26 = v24(v23, 1, v17);
  if (!v25)
  {
    if (!v26)
    {
      v19(v22, v23, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v27 = sub_100008EF4(&qword_100105F48);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v23, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v22, 0, 1, v17);
LABEL_7:
  a1[v13[10]] = *((_BYTE *)a2 + v13[10]);
  a1[v13[11]] = *((_BYTE *)a2 + v13[11]);
  v28 = *(int *)(a3 + 20);
  v29 = *(_QWORD *)&a1[v28];
  *(_QWORD *)&a1[v28] = *(_QWORD *)((char *)a2 + v28);
  swift_bridgeObjectRelease(v29);
  return a1;
}

uint64_t sub_10001F7CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001F7D8);
}

uint64_t sub_10001F7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10001F860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001F86C);
}

uint64_t sub_10001F86C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t sub_10001F8E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for SportsWidgetGenericClockViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompetitorShootoutsViewModel()
{
  return &type metadata for CompetitorShootoutsViewModel;
}

uint64_t storeEnumTagSinglePayload for CompetitorShootoutsViewModel.ShootoutState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10001F9B0 + 4 * byte_1000C69D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10001F9E4 + 4 * asc_1000C69D0[v4]))();
}

uint64_t sub_10001F9E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001F9EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001F9F4);
  return result;
}

uint64_t sub_10001FA00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001FA08);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10001FA0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001FA14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CompetitorShootoutsViewModel.ShootoutState()
{
  return &type metadata for CompetitorShootoutsViewModel.ShootoutState;
}

uint64_t destroy for SportsWidgetEventInfoViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for SportsWidgetEventInfoViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for SportsWidgetEventInfoViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for SportsWidgetEventInfoViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetEventInfoViewModel(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetEventInfoViewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetEventInfoViewModel()
{
  return &type metadata for SportsWidgetEventInfoViewModel;
}

uint64_t destroy for SportsWidgetPlay(_QWORD *a1, uint64_t a2)
{
  return sub_10002109C(a1, a2, (void (*)(_QWORD))&_swift_release);
}

uint64_t initializeWithCopy for SportsWidgetPlay(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t assignWithCopy for SportsWidgetPlay(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for SportsWidgetPlay(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v6);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetPlay(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetPlay(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetPlay()
{
  return &type metadata for SportsWidgetPlay;
}

_QWORD *sub_10001FE24(_QWORD *a1, char *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  int *v51;
  int *v52;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v16 = *((_QWORD *)a2 + 1);
      *a1 = *(_QWORD *)a2;
      a1[1] = v16;
      v17 = *((_QWORD *)a2 + 3);
      a1[2] = *((_QWORD *)a2 + 2);
      a1[3] = v17;
      v18 = *((_QWORD *)a2 + 5);
      a1[4] = *((_QWORD *)a2 + 4);
      a1[5] = v18;
      v19 = *((_QWORD *)a2 + 7);
      a1[6] = *((_QWORD *)a2 + 6);
      a1[7] = v19;
      v20 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v21 = *(int *)(v20 + 32);
      v49 = (char *)a1 + v21;
      v51 = (int *)v20;
      v47 = &a2[v21];
      v22 = type metadata accessor for Date(0);
      v23 = *(_QWORD *)(v22 - 8);
      v24 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      v24(v49, v47, v22);
      v25 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
      v24(&v49[v25], &v47[v25], v22);
      v26 = v51[9];
      v27 = (char *)a1 + v26;
      v28 = &a2[v26];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(&a2[v26], 1, v22))
      {
        v29 = sub_100008EF4(&qword_100105F48);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v24(v27, v28, v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v27, 0, 1, v22);
      }
      *((_BYTE *)a1 + v51[10]) = a2[v51[10]];
      *((_BYTE *)a1 + v51[11]) = a2[v51[11]];
      v44 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
      v45 = *(_QWORD *)&a2[v44];
      *(_QWORD *)((char *)a1 + v44) = v45;
      swift_bridgeObjectRetain(v45);
      v12 = a1;
      v13 = a3;
      v14 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = *(_QWORD *)a2;
      v9 = *((_QWORD *)a2 + 1);
      *a1 = *(_QWORD *)a2;
      a1[1] = v9;
      v10 = *((_QWORD *)a2 + 3);
      a1[2] = *((_QWORD *)a2 + 2);
      a1[3] = v10;
      v11 = *((_QWORD *)a2 + 5);
      a1[4] = *((_QWORD *)a2 + 4);
      a1[5] = v11;
      *((_BYTE *)a1 + 48) = a2[48];
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      v12 = a1;
      v13 = a3;
      v14 = 1;
    }
    else
    {
      v30 = *((_QWORD *)a2 + 1);
      *a1 = *(_QWORD *)a2;
      a1[1] = v30;
      v31 = *((_QWORD *)a2 + 3);
      a1[2] = *((_QWORD *)a2 + 2);
      a1[3] = v31;
      v32 = *((_QWORD *)a2 + 5);
      a1[4] = *((_QWORD *)a2 + 4);
      a1[5] = v32;
      v33 = *((_QWORD *)a2 + 7);
      a1[6] = *((_QWORD *)a2 + 6);
      a1[7] = v33;
      v34 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v35 = *(int *)(v34 + 32);
      v50 = (char *)a1 + v35;
      v52 = (int *)v34;
      v48 = &a2[v35];
      v36 = type metadata accessor for Date(0);
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v33);
      v38(v50, v48, v36);
      v39 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
      v38(&v50[v39], &v48[v39], v36);
      v40 = v52[9];
      v41 = (char *)a1 + v40;
      v42 = &a2[v40];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(&a2[v40], 1, v36))
      {
        v43 = sub_100008EF4(&qword_100105F48);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        v38(v41, v42, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v41, 0, 1, v36);
      }
      *((_BYTE *)a1 + v52[10]) = a2[v52[10]];
      *((_BYTE *)a1 + v52[11]) = a2[v52[11]];
      v12 = a1;
      v13 = a3;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_1000201A0(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((_DWORD)result)
  {
    case 2:
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[3]);
      swift_bridgeObjectRelease(a1[5]);
      swift_bridgeObjectRelease(a1[7]);
      v10 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v11 = (char *)a1 + *(int *)(v10 + 32);
      v12 = type metadata accessor for Date(0);
      v13 = *(_QWORD *)(v12 - 8);
      v14 = *(void (**)(char *, uint64_t))(v13 + 8);
      v14(v11, v12);
      v15 = sub_100008EF4(&qword_100105F40);
      v14(&v11[*(int *)(v15 + 36)], v12);
      v16 = (char *)a1 + *(int *)(v10 + 36);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v16, 1, v12))
        v14(v16, v12);
      v17 = *(_QWORD *)((char *)a1 + *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20));
      return swift_bridgeObjectRelease(v17);
    case 1:
      swift_bridgeObjectRelease(*a1);
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[3]);
      v17 = a1[5];
      return swift_bridgeObjectRelease(v17);
    case 0:
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[3]);
      swift_bridgeObjectRelease(a1[5]);
      swift_bridgeObjectRelease(a1[7]);
      v4 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v5 = (char *)a1 + *(int *)(v4 + 32);
      v6 = type metadata accessor for Date(0);
      v7 = *(_QWORD *)(v6 - 8);
      v18 = *(void (**)(char *, uint64_t))(v7 + 8);
      v18(v5, v6);
      v8 = sub_100008EF4(&qword_100105F40);
      v18(&v5[*(int *)(v8 + 36)], v6);
      v9 = (char *)a1 + *(int *)(v4 + 36);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6);
      if (!(_DWORD)result)
        return ((uint64_t (*)(char *, uint64_t))v18)(v9, v6);
      break;
  }
  return result;
}

_QWORD *sub_100020390(_QWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  char *v47;
  int *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;

  v3 = a3;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v50 = v3;
    v12 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v12;
    v13 = *((_QWORD *)a2 + 3);
    a1[2] = *((_QWORD *)a2 + 2);
    a1[3] = v13;
    v14 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v14;
    v15 = *((_QWORD *)a2 + 7);
    a1[6] = *((_QWORD *)a2 + 6);
    a1[7] = v15;
    v16 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v17 = v16[8];
    v47 = (char *)a1 + v17;
    v18 = &a2[v17];
    v19 = type metadata accessor for Date(0);
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    v21 = v12;
    v22 = *(_QWORD *)(v19 - 8);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    v20(v47, v18, v19);
    v23 = sub_100008EF4(&qword_100105F40);
    v20(&v47[*(int *)(v23 + 36)], &v18[*(int *)(v23 + 36)], v19);
    v24 = v16[9];
    v25 = (char *)a1 + v24;
    v26 = &a2[v24];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(&a2[v24], 1, v19))
    {
      v27 = sub_100008EF4(&qword_100105F48);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v20(v25, v26, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v19);
    }
    *((_BYTE *)a1 + v16[10]) = a2[v16[10]];
    *((_BYTE *)a1 + v16[11]) = a2[v16[11]];
    v43 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
    v44 = *(_QWORD *)&a2[v43];
    *(_QWORD *)((char *)a1 + v43) = v44;
    swift_bridgeObjectRetain(v44);
    v3 = v50;
    v7 = 2;
  }
  else if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v8 = *(_QWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v9;
    v10 = *((_QWORD *)a2 + 3);
    a1[2] = *((_QWORD *)a2 + 2);
    a1[3] = v10;
    v11 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v11;
    *((_BYTE *)a1 + 48) = a2[48];
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
  }
  else
  {
    v49 = EnumCaseMultiPayload;
    v51 = v3;
    v28 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v28;
    v29 = *((_QWORD *)a2 + 3);
    a1[2] = *((_QWORD *)a2 + 2);
    a1[3] = v29;
    v30 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v30;
    v31 = *((_QWORD *)a2 + 7);
    a1[6] = *((_QWORD *)a2 + 6);
    a1[7] = v31;
    v32 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v33 = *(int *)(v32 + 32);
    v46 = (char *)a1 + v33;
    v48 = (int *)v32;
    v34 = &a2[v33];
    v35 = type metadata accessor for Date(0);
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    v37(v46, v34, v35);
    v38 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
    v37(&v46[v38], &v34[v38], v35);
    v39 = v48[9];
    v40 = (char *)a1 + v39;
    v41 = &a2[v39];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(&a2[v39], 1, v35))
    {
      v42 = sub_100008EF4(&qword_100105F48);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v37(v40, v41, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v40, 0, 1, v35);
    }
    v3 = v51;
    v7 = v49;
    *((_BYTE *)a1 + v48[10]) = a2[v48[10]];
    *((_BYTE *)a1 + v48[11]) = a2[v48[11]];
  }
  swift_storeEnumTagMultiPayload(a1, v3, v7);
  return a1;
}

char *sub_1000206E8(char *a1, char *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  char *v47;
  int *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;

  if (a1 != a2)
  {
    sub_10001D060((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v49 = 2;
      v50 = a3;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v12 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 1) = v12;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      v13 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 3) = v13;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      v14 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 5) = v14;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      v15 = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 7) = v15;
      v16 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v17 = v16[8];
      v47 = &a1[v17];
      v18 = &a2[v17];
      v19 = type metadata accessor for Date(0);
      v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
      v21 = v12;
      v22 = *(_QWORD *)(v19 - 8);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      v20(v47, v18, v19);
      v23 = sub_100008EF4(&qword_100105F40);
      v20(&v47[*(int *)(v23 + 36)], &v18[*(int *)(v23 + 36)], v19);
      v24 = v16[9];
      v25 = &a1[v24];
      v26 = &a2[v24];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(&a2[v24], 1, v19))
      {
        v27 = sub_100008EF4(&qword_100105F48);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v20(v25, v26, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v19);
      }
      a1[v16[10]] = a2[v16[10]];
      a1[v16[11]] = a2[v16[11]];
      v43 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
      v44 = *(_QWORD *)&a2[v43];
      *(_QWORD *)&a1[v43] = v44;
      swift_bridgeObjectRetain(v44);
      a3 = v50;
    }
    else
    {
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v8 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v9 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v9;
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        v10 = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 3) = v10;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        v11 = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 5) = v11;
        a1[48] = a2[48];
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v11);
LABEL_14:
        swift_storeEnumTagMultiPayload(a1, a3, v7);
        return a1;
      }
      v49 = EnumCaseMultiPayload;
      v51 = a3;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v28 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 1) = v28;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      v29 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 3) = v29;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      v30 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 5) = v30;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      v31 = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 7) = v31;
      v32 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v33 = *(int *)(v32 + 32);
      v34 = &a1[v33];
      v46 = &a2[v33];
      v48 = (int *)v32;
      v35 = type metadata accessor for Date(0);
      v36 = *(_QWORD *)(v35 - 8);
      v37 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      v37(v34, v46, v35);
      v38 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
      v37(&v34[v38], &v46[v38], v35);
      v39 = v48[9];
      v40 = &a1[v39];
      v41 = &a2[v39];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(&a2[v39], 1, v35))
      {
        v42 = sub_100008EF4(&qword_100105F48);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        v37(v40, v41, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v40, 0, 1, v35);
      }
      a3 = v51;
      a1[v48[10]] = a2[v48[10]];
      a1[v48[11]] = a2[v48[11]];
    }
    v7 = v49;
    goto LABEL_14;
  }
  return a1;
}

_OWORD *sub_100020AA4(_OWORD *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v21 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v21;
    v22 = *((_OWORD *)a2 + 3);
    a1[2] = *((_OWORD *)a2 + 2);
    a1[3] = v22;
    v23 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v24 = v23[8];
    v25 = (char *)a1 + v24;
    v26 = &a2[v24];
    v27 = type metadata accessor for Date(0);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    v29(v25, v26, v27);
    v30 = sub_100008EF4(&qword_100105F40);
    v29(&v25[*(int *)(v30 + 36)], &v26[*(int *)(v30 + 36)], v27);
    v31 = v23[9];
    v32 = (char *)a1 + v31;
    v33 = &a2[v31];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(&a2[v31], 1, v27))
    {
      v34 = sub_100008EF4(&qword_100105F48);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v29(v32, v33, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
    }
    *((_BYTE *)a1 + v23[10]) = a2[v23[10]];
    *((_BYTE *)a1 + v23[11]) = a2[v23[11]];
    v38 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
    *(_QWORD *)((char *)a1 + *(int *)(v38 + 20)) = *(_QWORD *)&a2[*(int *)(v38 + 20)];
    v35 = a1;
    v36 = a3;
    v37 = 2;
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v7;
    v8 = *((_OWORD *)a2 + 3);
    a1[2] = *((_OWORD *)a2 + 2);
    a1[3] = v8;
    v9 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v10 = v9[8];
    v11 = (char *)a1 + v10;
    v12 = &a2[v10];
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v15(v11, v12, v13);
    v16 = sub_100008EF4(&qword_100105F40);
    v15(&v11[*(int *)(v16 + 36)], &v12[*(int *)(v16 + 36)], v13);
    v17 = v9[9];
    v18 = (char *)a1 + v17;
    v19 = &a2[v17];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(&a2[v17], 1, v13))
    {
      v20 = sub_100008EF4(&qword_100105F48);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v15(v18, v19, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v18, 0, 1, v13);
    }
    *((_BYTE *)a1 + v9[10]) = a2[v9[10]];
    *((_BYTE *)a1 + v9[11]) = a2[v9[11]];
    v35 = a1;
    v36 = a3;
    v37 = 0;
LABEL_12:
    swift_storeEnumTagMultiPayload(v35, v36, v37);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_100020D38(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a1 != a2)
  {
    sub_10001D060((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v21 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v21;
      v22 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v22;
      v23 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v24 = v23[8];
      v25 = &a1[v24];
      v26 = &a2[v24];
      v27 = type metadata accessor for Date(0);
      v28 = *(_QWORD *)(v27 - 8);
      v29 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
      v29(v25, v26, v27);
      v30 = sub_100008EF4(&qword_100105F40);
      v29(&v25[*(int *)(v30 + 36)], &v26[*(int *)(v30 + 36)], v27);
      v31 = v23[9];
      v32 = &a1[v31];
      v33 = &a2[v31];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(&a2[v31], 1, v27))
      {
        v34 = sub_100008EF4(&qword_100105F48);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        v29(v32, v33, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
      }
      a1[v23[10]] = a2[v23[10]];
      a1[v23[11]] = a2[v23[11]];
      v38 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
      *(_QWORD *)&a1[*(int *)(v38 + 20)] = *(_QWORD *)&a2[*(int *)(v38 + 20)];
      v35 = a1;
      v36 = a3;
      v37 = 2;
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
      v8 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v8;
      v9 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v10 = v9[8];
      v11 = &a1[v10];
      v12 = &a2[v10];
      v13 = type metadata accessor for Date(0);
      v14 = *(_QWORD *)(v13 - 8);
      v15 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      v15(v11, v12, v13);
      v16 = sub_100008EF4(&qword_100105F40);
      v15(&v11[*(int *)(v16 + 36)], &v12[*(int *)(v16 + 36)], v13);
      v17 = v9[9];
      v18 = &a1[v17];
      v19 = &a2[v17];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(&a2[v17], 1, v13))
      {
        v20 = sub_100008EF4(&qword_100105F48);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v15(v18, v19, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v18, 0, 1, v13);
      }
      a1[v9[10]] = a2[v9[10]];
      a1[v9[11]] = a2[v9[11]];
      v35 = a1;
      v36 = a3;
      v37 = 0;
LABEL_13:
      swift_storeEnumTagMultiPayload(v35, v36, v37);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100020FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_100020FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100020FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100021008(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for SportsWidgetGenericClockViewModel(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_1000C6A50;
    result = type metadata accessor for SportsWidgetSoccerClockViewModel(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v5);
      return 0;
    }
  }
  return result;
}

uint64_t destroy for SportsWidgetLogoViewModel(_QWORD *a1, uint64_t a2)
{
  return sub_10002109C(a1, a2, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_10002109C(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD))
{
  swift_bridgeObjectRelease(a1[1]);
  a3(a1[3]);
  return ((uint64_t (*)(_QWORD))a3)(a1[5]);
}

_QWORD *initializeWithCopy for SportsWidgetLogoViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for SportsWidgetLogoViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for SportsWidgetLogoViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for SportsWidgetLogoViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetLogoViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetLogoViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetLogoViewModel()
{
  return &type metadata for SportsWidgetLogoViewModel;
}

uint64_t sub_1000212CC(char *a1, unsigned __int8 *a2)
{
  return sub_100019340(*a1, *a2);
}

Swift::Int sub_1000212D8()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = 1936943469;
  if (v1 != 1)
    v2 = 1818324839;
  if (v1)
    v3 = v2;
  else
    v3 = 0x7974706D65;
  if (v1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100021364(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 1936943469;
  if (*v1 != 1)
    v2 = 1818324839;
  if (*v1)
    v3 = v2;
  else
    v3 = 0x7974706D65;
  if (*v1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_1000213CC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = 1936943469;
  if (v2 != 1)
    v3 = 1818324839;
  if (v2)
    v4 = v3;
  else
    v4 = 0x7974706D65;
  if (v2)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_100021454@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100021514(*a1);
  *a2 = result;
  return result;
}

void sub_100021480(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 1936943469;
  if (v2 != 1)
    v4 = 1818324839;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x7974706D65;
  if (!v5)
    v3 = 0xE400000000000000;
  *a1 = v6;
  a1[1] = v3;
}

unint64_t sub_1000214D0()
{
  unint64_t result;

  result = qword_100106CD8;
  if (!qword_100106CD8)
  {
    result = swift_getWitnessTable(&unk_1000C6CEC, &type metadata for CompetitorShootoutsViewModel.ShootoutState);
    atomic_store(result, (unint64_t *)&qword_100106CD8);
  }
  return result;
}

unint64_t sub_100021514(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000F6E70, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

_QWORD *sub_10002155C(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t EnumCaseMultiPayload;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v82 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v82;
    v80 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v80;
    v77 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v77;
    v74 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v74;
    v71 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v71;
    v6 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v6;
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    v67 = a2[13];
    v68 = v6;
    *(_QWORD *)(a1 + 104) = v67;
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    v66 = a2[16];
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_QWORD *)(a1 + 128) = v66;
    v7 = a2[18];
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_QWORD *)(a1 + 144) = v7;
    v8 = a2[20];
    *(_QWORD *)(a1 + 152) = a2[19];
    *(_QWORD *)(a1 + 160) = v8;
    v9 = a2[22];
    *(_QWORD *)(a1 + 168) = a2[21];
    *(_QWORD *)(a1 + 176) = v9;
    v10 = a2[24];
    *(_QWORD *)(a1 + 184) = a2[23];
    *(_QWORD *)(a1 + 192) = v10;
    v11 = a2[26];
    *(_QWORD *)(a1 + 200) = a2[25];
    *(_QWORD *)(a1 + 208) = v11;
    *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
    v12 = a2[28];
    *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
    v13 = a3[6];
    v65 = (_QWORD *)(a1 + v13);
    v14 = (char *)a2 + v13;
    *(_QWORD *)(a1 + 224) = v12;
    v15 = type metadata accessor for SportsWidgetClock(0);
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v68);
    swift_retain(v67);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_retain(v12);
    v83 = v15;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v15);
    v17 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v25 = *((_QWORD *)v14 + 1);
      v18 = v65;
      *v65 = *(_QWORD *)v14;
      v65[1] = v25;
      v26 = *((_QWORD *)v14 + 3);
      v65[2] = *((_QWORD *)v14 + 2);
      v65[3] = v26;
      v78 = *((_QWORD *)v14 + 5);
      v65[4] = *((_QWORD *)v14 + 4);
      v65[5] = v78;
      v27 = *((_QWORD *)v14 + 7);
      v65[6] = *((_QWORD *)v14 + 6);
      v65[7] = v27;
      v28 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v29 = v28[8];
      v72 = &v14[v29];
      v75 = (char *)v65 + v29;
      v30 = type metadata accessor for Date(0);
      v31 = *(_QWORD *)(v30 - 8);
      v69 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(v27);
      v69(v75, v72, v30);
      v32 = sub_100008EF4(&qword_100105F40);
      v69(&v75[*(int *)(v32 + 36)], &v72[*(int *)(v32 + 36)], v30);
      v33 = v28[9];
      v34 = (char *)v65 + v33;
      v35 = &v14[v33];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(&v14[v33], 1, v30))
      {
        v36 = sub_100008EF4(&qword_100105F48);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        v69(v34, v35, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v34, 0, 1, v30);
      }
      *((_BYTE *)v65 + v28[10]) = v14[v28[10]];
      *((_BYTE *)v65 + v28[11]) = v14[v28[11]];
      v49 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
      v50 = *(_QWORD *)&v14[v49];
      *(_QWORD *)((char *)v65 + v49) = v50;
      swift_bridgeObjectRetain(v50);
      v23 = v83;
      v17 = 2;
    }
    else
    {
      v18 = v65;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v19 = *(_QWORD *)v14;
        v20 = *((_QWORD *)v14 + 1);
        *v65 = *(_QWORD *)v14;
        v65[1] = v20;
        v21 = *((_QWORD *)v14 + 3);
        v65[2] = *((_QWORD *)v14 + 2);
        v65[3] = v21;
        v22 = *((_QWORD *)v14 + 5);
        v65[4] = *((_QWORD *)v14 + 4);
        v65[5] = v22;
        *((_BYTE *)v65 + 48) = v14[48];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v23 = v83;
      }
      else
      {
        v81 = EnumCaseMultiPayload;
        v37 = *((_QWORD *)v14 + 1);
        *v65 = *(_QWORD *)v14;
        v65[1] = v37;
        v38 = *((_QWORD *)v14 + 3);
        v65[2] = *((_QWORD *)v14 + 2);
        v65[3] = v38;
        v79 = *((_QWORD *)v14 + 5);
        v65[4] = *((_QWORD *)v14 + 4);
        v65[5] = v79;
        v39 = *((_QWORD *)v14 + 7);
        v65[6] = *((_QWORD *)v14 + 6);
        v65[7] = v39;
        v40 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
        v41 = v40[8];
        v73 = &v14[v41];
        v76 = (char *)v65 + v41;
        v42 = type metadata accessor for Date(0);
        v43 = *(_QWORD *)(v42 - 8);
        v70 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
        swift_bridgeObjectRetain(v37);
        swift_bridgeObjectRetain(v38);
        swift_bridgeObjectRetain(v79);
        swift_bridgeObjectRetain(v39);
        v70(v76, v73, v42);
        v44 = sub_100008EF4(&qword_100105F40);
        v70(&v76[*(int *)(v44 + 36)], &v73[*(int *)(v44 + 36)], v42);
        v45 = v40[9];
        v46 = (char *)v65 + v45;
        v47 = &v14[v45];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(&v14[v45], 1, v42))
        {
          v48 = sub_100008EF4(&qword_100105F48);
          memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          v70(v46, v47, v42);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, v42);
        }
        v23 = v83;
        v17 = v81;
        *((_BYTE *)v65 + v40[10]) = v14[v40[10]];
        *((_BYTE *)v65 + v40[11]) = v14[v40[11]];
      }
    }
    swift_storeEnumTagMultiPayload(v18, v23, v17);
    v51 = a3[7];
    v52 = a3[8];
    v53 = (char *)v4 + v51;
    v54 = (uint64_t)a2 + v51;
    v55 = *(_QWORD *)(v54 + 8);
    *(_QWORD *)v53 = *(_QWORD *)v54;
    *((_QWORD *)v53 + 1) = v55;
    v53[16] = *(_BYTE *)(v54 + 16);
    v56 = *(_QWORD *)(v54 + 24);
    *((_QWORD *)v53 + 3) = v56;
    v53[32] = *(_BYTE *)(v54 + 32);
    v57 = *(_QWORD *)(v54 + 40);
    *((_QWORD *)v53 + 5) = v57;
    v53[48] = *(_BYTE *)(v54 + 48);
    v58 = (_QWORD *)((char *)v4 + v52);
    v59 = (uint64_t *)((char *)a2 + v52);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = v59[3];
    v58[2] = v59[2];
    v58[3] = v61;
    v62 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)v4 + v62) = *((_BYTE *)a2 + v62);
    v63 = a3[12];
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)v4 + v63) = *((_BYTE *)a2 + v63);
    swift_bridgeObjectRetain(v55);
    swift_retain(v56);
    swift_retain(v57);
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v61);
  }
  return v4;
}

uint64_t sub_100021AD4(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_release(a1[13]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  swift_release(a1[28]);
  v4 = (_QWORD *)((char *)a1 + a2[6]);
  v5 = type metadata accessor for SportsWidgetClock(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v5);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease(v4[1]);
      swift_bridgeObjectRelease(v4[3]);
      swift_bridgeObjectRelease(v4[5]);
      swift_bridgeObjectRelease(v4[7]);
      v14 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v15 = (char *)v4 + *(int *)(v14 + 32);
      v16 = type metadata accessor for Date(0);
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(void (**)(char *, uint64_t))(v17 + 8);
      v18(v15, v16);
      v19 = sub_100008EF4(&qword_100105F40);
      v18(&v15[*(int *)(v19 + 36)], v16);
      v20 = (char *)v4 + *(int *)(v14 + 36);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v20, 1, v16))
        v18(v20, v16);
      v21 = *(_QWORD *)((char *)v4 + *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20));
      goto LABEL_10;
    case 1:
      swift_bridgeObjectRelease(*v4);
      swift_bridgeObjectRelease(v4[1]);
      swift_bridgeObjectRelease(v4[3]);
      v21 = v4[5];
LABEL_10:
      swift_bridgeObjectRelease(v21);
      break;
    case 0:
      swift_bridgeObjectRelease(v4[1]);
      swift_bridgeObjectRelease(v4[3]);
      swift_bridgeObjectRelease(v4[5]);
      swift_bridgeObjectRelease(v4[7]);
      v7 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v8 = (char *)v4 + *(int *)(v7 + 32);
      v9 = type metadata accessor for Date(0);
      v10 = *(_QWORD *)(v9 - 8);
      v11 = *(void (**)(char *, uint64_t))(v10 + 8);
      v11(v8, v9);
      v12 = sub_100008EF4(&qword_100105F40);
      v11(&v8[*(int *)(v12 + 36)], v9);
      v13 = (char *)v4 + *(int *)(v7 + 36);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
        v11(v13, v9);
      break;
  }
  v22 = (_QWORD *)((char *)a1 + a2[7]);
  swift_bridgeObjectRelease(v22[1]);
  swift_release(v22[3]);
  swift_release(v22[5]);
  v23 = (char *)a1 + a2[8];
  swift_bridgeObjectRelease(*((_QWORD *)v23 + 1));
  return swift_bridgeObjectRelease(*((_QWORD *)v23 + 3));
}

uint64_t sub_100021D50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;

  v83 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v83;
  v81 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v81;
  v78 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v78;
  v75 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v75;
  v72 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v72;
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v69 = *(_QWORD *)(a2 + 104);
  v70 = v5;
  *(_QWORD *)(a1 + 104) = v69;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v68 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v68;
  v6 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v6;
  v7 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v7;
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v8;
  v9 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v9;
  v10 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v10;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v11 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v12 = a3[6];
  v85 = (_QWORD *)(a1 + v12);
  v13 = (char *)(a2 + v12);
  *(_QWORD *)(a1 + 224) = v11;
  v14 = type metadata accessor for SportsWidgetClock(0);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRetain(v70);
  swift_retain(v69);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  v84 = v14;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v14);
  v16 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v24 = *((_QWORD *)v13 + 1);
    v19 = v85;
    *v85 = *(_QWORD *)v13;
    v85[1] = v24;
    v25 = *((_QWORD *)v13 + 3);
    v85[2] = *((_QWORD *)v13 + 2);
    v85[3] = v25;
    v79 = *((_QWORD *)v13 + 5);
    v85[4] = *((_QWORD *)v13 + 4);
    v85[5] = v79;
    v26 = *((_QWORD *)v13 + 7);
    v85[6] = *((_QWORD *)v13 + 6);
    v85[7] = v26;
    v27 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v28 = v27[8];
    v73 = &v13[v28];
    v76 = (char *)v85 + v28;
    v29 = type metadata accessor for Date(0);
    v30 = *(_QWORD *)(v29 - 8);
    v71 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v26);
    v71(v76, v73, v29);
    v31 = sub_100008EF4(&qword_100105F40);
    v71(&v76[*(int *)(v31 + 36)], &v73[*(int *)(v31 + 36)], v29);
    v32 = v27[9];
    v33 = (char *)v85 + v32;
    v34 = &v13[v32];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(&v13[v32], 1, v29))
    {
      v35 = sub_100008EF4(&qword_100105F48);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v71(v33, v34, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v33, 0, 1, v29);
    }
    v22 = a3;
    *((_BYTE *)v85 + v27[10]) = v13[v27[10]];
    *((_BYTE *)v85 + v27[11]) = v13[v27[11]];
    v51 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
    v52 = *(_QWORD *)&v13[v51];
    *(_QWORD *)((char *)v85 + v51) = v52;
    swift_bridgeObjectRetain(v52);
    v23 = v84;
    v16 = 2;
  }
  else if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v17 = *(_QWORD *)v13;
    v18 = *((_QWORD *)v13 + 1);
    v19 = v85;
    *v85 = *(_QWORD *)v13;
    v85[1] = v18;
    v20 = *((_QWORD *)v13 + 3);
    v85[2] = *((_QWORD *)v13 + 2);
    v85[3] = v20;
    v21 = *((_QWORD *)v13 + 5);
    v85[4] = *((_QWORD *)v13 + 4);
    v85[5] = v21;
    *((_BYTE *)v85 + 48) = v13[48];
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    v22 = a3;
    v23 = v84;
  }
  else
  {
    v82 = EnumCaseMultiPayload;
    v36 = *((_QWORD *)v13 + 1);
    *v85 = *(_QWORD *)v13;
    v85[1] = v36;
    v37 = *((_QWORD *)v13 + 3);
    v85[2] = *((_QWORD *)v13 + 2);
    v85[3] = v37;
    v38 = *((_QWORD *)v13 + 5);
    v85[4] = *((_QWORD *)v13 + 4);
    v85[5] = v38;
    v39 = *((_QWORD *)v13 + 7);
    v85[6] = *((_QWORD *)v13 + 6);
    v85[7] = v39;
    v40 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v41 = *(int *)(v40 + 32);
    v77 = &v13[v41];
    v80 = (char *)v85 + v41;
    v42 = type metadata accessor for Date(0);
    v43 = *(_QWORD *)(v42 - 8);
    v74 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    v44 = v38;
    v45 = (int *)v40;
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v39);
    v74(v80, v77, v42);
    v46 = sub_100008EF4(&qword_100105F40);
    v19 = v85;
    v74(&v80[*(int *)(v46 + 36)], &v77[*(int *)(v46 + 36)], v42);
    v47 = v45[9];
    v48 = (char *)v85 + v47;
    v49 = &v13[v47];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(&v13[v47], 1, v42))
    {
      v50 = sub_100008EF4(&qword_100105F48);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      v74(v48, v49, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v48, 0, 1, v42);
    }
    v22 = a3;
    v23 = v84;
    v16 = v82;
    *((_BYTE *)v85 + v45[10]) = v13[v45[10]];
    *((_BYTE *)v85 + v45[11]) = v13[v45[11]];
  }
  swift_storeEnumTagMultiPayload(v19, v23, v16);
  v53 = v22[7];
  v54 = v22[8];
  v55 = a1 + v53;
  v56 = a2 + v53;
  v57 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)v55 = *(_QWORD *)v56;
  *(_QWORD *)(v55 + 8) = v57;
  *(_BYTE *)(v55 + 16) = *(_BYTE *)(v56 + 16);
  v58 = *(_QWORD *)(v56 + 24);
  *(_QWORD *)(v55 + 24) = v58;
  *(_BYTE *)(v55 + 32) = *(_BYTE *)(v56 + 32);
  v59 = *(_QWORD *)(v56 + 40);
  *(_QWORD *)(v55 + 40) = v59;
  *(_BYTE *)(v55 + 48) = *(_BYTE *)(v56 + 48);
  v60 = (_QWORD *)(a1 + v54);
  v61 = (_QWORD *)(a2 + v54);
  v62 = v61[1];
  *v60 = *v61;
  v60[1] = v62;
  v63 = v61[3];
  v60[2] = v61[2];
  v60[3] = v63;
  v64 = v22[10];
  *(_BYTE *)(a1 + v22[9]) = *(_BYTE *)(a2 + v22[9]);
  *(_BYTE *)(a1 + v64) = *(_BYTE *)(a2 + v64);
  v65 = v22[12];
  *(_BYTE *)(a1 + v22[11]) = *(_BYTE *)(a2 + v22[11]);
  *(_BYTE *)(a1 + v65) = *(_BYTE *)(a2 + v65);
  swift_bridgeObjectRetain(v57);
  swift_retain(v58);
  swift_retain(v59);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v63);
  return a1;
}

uint64_t sub_1000222AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v88;
  char *v89;
  uint64_t v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  int *v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v18;
  swift_retain(v18);
  swift_release(v19);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v26 = *(_QWORD *)(a2 + 176);
  v27 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v28 = *(_QWORD *)(a2 + 192);
  v29 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v30 = *(_QWORD *)(a2 + 208);
  v31 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v32 = *(_QWORD *)(a2 + 224);
  v33 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v32;
  swift_retain(v32);
  swift_release(v33);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  if (a1 != a2)
  {
    v34 = a3[6];
    v35 = (_QWORD *)(a1 + v34);
    v36 = (char *)(a2 + v34);
    sub_10001D060(a1 + v34);
    v37 = type metadata accessor for SportsWidgetClock(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v36, v37);
    v39 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v101 = v37;
      *v35 = *(_QWORD *)v36;
      v94 = *((_QWORD *)v36 + 1);
      v97 = a3;
      v35[1] = v94;
      v35[2] = *((_QWORD *)v36 + 2);
      v92 = *((_QWORD *)v36 + 3);
      v35[3] = v92;
      v35[4] = *((_QWORD *)v36 + 4);
      v44 = *((_QWORD *)v36 + 5);
      v35[5] = v44;
      v35[6] = *((_QWORD *)v36 + 6);
      v90 = *((_QWORD *)v36 + 7);
      v35[7] = v90;
      v45 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v46 = *(int *)(v45 + 32);
      v88 = (char *)v35 + v46;
      v47 = &v36[v46];
      v48 = type metadata accessor for Date(0);
      v49 = *(_QWORD *)(v48 - 8);
      v50 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      swift_bridgeObjectRetain(v94);
      swift_bridgeObjectRetain(v92);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v90);
      v50(v88, v47, v48);
      v51 = sub_100008EF4(&qword_100105F40);
      v95 = v50;
      v50(&v88[*(int *)(v51 + 36)], &v47[*(int *)(v51 + 36)], v48);
      v52 = v45;
      v53 = *(int *)(v45 + 36);
      v54 = (char *)v35 + v53;
      v55 = &v36[v53];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(&v36[v53], 1, v48))
      {
        v56 = sub_100008EF4(&qword_100105F48);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        v95(v54, v55, v48);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v54, 0, 1, v48);
      }
      *((_BYTE *)v35 + *(int *)(v52 + 40)) = v36[*(int *)(v52 + 40)];
      *((_BYTE *)v35 + *(int *)(v52 + 44)) = v36[*(int *)(v52 + 44)];
      v69 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
      v70 = *(_QWORD *)&v36[v69];
      *(_QWORD *)((char *)v35 + v69) = v70;
      swift_bridgeObjectRetain(v70);
      v37 = v101;
      v39 = 2;
      a3 = v97;
    }
    else if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      v40 = *(_QWORD *)v36;
      *v35 = *(_QWORD *)v36;
      v41 = *((_QWORD *)v36 + 1);
      v35[1] = v41;
      v35[2] = *((_QWORD *)v36 + 2);
      v42 = *((_QWORD *)v36 + 3);
      v35[3] = v42;
      v35[4] = *((_QWORD *)v36 + 4);
      v43 = *((_QWORD *)v36 + 5);
      v35[5] = v43;
      *((_BYTE *)v35 + 48) = v36[48];
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v43);
    }
    else
    {
      v100 = EnumCaseMultiPayload;
      v102 = v37;
      *v35 = *(_QWORD *)v36;
      v98 = *((_QWORD *)v36 + 1);
      v35[1] = v98;
      v35[2] = *((_QWORD *)v36 + 2);
      v57 = *((_QWORD *)v36 + 3);
      v35[3] = v57;
      v35[4] = *((_QWORD *)v36 + 4);
      v96 = *((_QWORD *)v36 + 5);
      v35[5] = v96;
      v35[6] = *((_QWORD *)v36 + 6);
      v93 = *((_QWORD *)v36 + 7);
      v35[7] = v93;
      v58 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v59 = *(int *)(v58 + 32);
      v60 = (char *)v35 + v59;
      v89 = &v36[v59];
      v91 = (int *)v58;
      v61 = type metadata accessor for Date(0);
      v62 = *(_QWORD *)(v61 - 8);
      v63 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
      swift_bridgeObjectRetain(v98);
      swift_bridgeObjectRetain(v57);
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRetain(v93);
      v63(v60, v89, v61);
      v64 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
      v99 = v63;
      v63(&v60[v64], &v89[v64], v61);
      v65 = v91[9];
      v66 = (char *)v35 + v65;
      v67 = &v36[v65];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(&v36[v65], 1, v61))
      {
        v68 = sub_100008EF4(&qword_100105F48);
        memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
      }
      else
      {
        v99(v66, v67, v61);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v66, 0, 1, v61);
      }
      v37 = v102;
      *((_BYTE *)v35 + v91[10]) = v36[v91[10]];
      *((_BYTE *)v35 + v91[11]) = v36[v91[11]];
      v39 = v100;
    }
    swift_storeEnumTagMultiPayload(v35, v37, v39);
  }
  v71 = a3[7];
  v72 = a1 + v71;
  v73 = a2 + v71;
  *(_QWORD *)v72 = *(_QWORD *)(a2 + v71);
  v74 = *(_QWORD *)(a2 + v71 + 8);
  v75 = *(_QWORD *)(a1 + v71 + 8);
  *(_QWORD *)(v72 + 8) = v74;
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRelease(v75);
  *(_BYTE *)(v72 + 16) = *(_BYTE *)(v73 + 16);
  v76 = *(_QWORD *)(v73 + 24);
  v77 = *(_QWORD *)(v72 + 24);
  *(_QWORD *)(v72 + 24) = v76;
  swift_retain(v76);
  swift_release(v77);
  *(_BYTE *)(v72 + 32) = *(_BYTE *)(v73 + 32);
  v78 = *(_QWORD *)(v73 + 40);
  v79 = *(_QWORD *)(v72 + 40);
  *(_QWORD *)(v72 + 40) = v78;
  swift_retain(v78);
  swift_release(v79);
  *(_BYTE *)(v72 + 48) = *(_BYTE *)(v73 + 48);
  v80 = a3[8];
  v81 = (_QWORD *)(a1 + v80);
  v82 = a2 + v80;
  *v81 = *(_QWORD *)(a2 + v80);
  v83 = *(_QWORD *)(a2 + v80 + 8);
  v84 = *(_QWORD *)(a1 + v80 + 8);
  v81[1] = v83;
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRelease(v84);
  v81[2] = *(_QWORD *)(v82 + 16);
  v85 = *(_QWORD *)(v82 + 24);
  v86 = v81[3];
  v81[3] = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRelease(v86);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100022978(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  char *v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  __int128 v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  _OWORD *v55;
  _OWORD *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 136);
  v11 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  v12 = *(_OWORD *)(a2 + 184);
  v13 = *(_OWORD *)(a2 + 200);
  v14 = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(a1 + 200) = v13;
  v15 = a3[6];
  v16 = (_OWORD *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  *(_OWORD *)(a1 + 184) = v12;
  v18 = type metadata accessor for SportsWidgetClock(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v18);
  if (EnumCaseMultiPayload == 2)
  {
    v64 = v18;
    v33 = *((_OWORD *)v17 + 1);
    *v16 = *(_OWORD *)v17;
    v16[1] = v33;
    v34 = *((_OWORD *)v17 + 3);
    v16[2] = *((_OWORD *)v17 + 2);
    v16[3] = v34;
    v35 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v36 = v35[8];
    v37 = (char *)v16 + v36;
    v38 = &v17[v36];
    v39 = type metadata accessor for Date(0);
    v62 = *(_QWORD *)(v39 - 8);
    v40 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
    v40(v37, v38, v39);
    v41 = sub_100008EF4(&qword_100105F40);
    v40(&v37[*(int *)(v41 + 36)], &v38[*(int *)(v41 + 36)], v39);
    v42 = v35[9];
    v43 = (char *)v16 + v42;
    v44 = &v17[v42];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(&v17[v42], 1, v39))
    {
      v45 = sub_100008EF4(&qword_100105F48);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      v40(v43, v44, v39);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v43, 0, 1, v39);
    }
    *((_BYTE *)v16 + v35[10]) = v17[v35[10]];
    *((_BYTE *)v16 + v35[11]) = v17[v35[11]];
    v49 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
    *(_QWORD *)((char *)v16 + *(int *)(v49 + 20)) = *(_QWORD *)&v17[*(int *)(v49 + 20)];
    v47 = v16;
    v46 = v64;
    v48 = 2;
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    v63 = v18;
    v20 = *((_OWORD *)v17 + 1);
    *v16 = *(_OWORD *)v17;
    v16[1] = v20;
    v21 = *((_OWORD *)v17 + 3);
    v16[2] = *((_OWORD *)v17 + 2);
    v16[3] = v21;
    v22 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v23 = v22[8];
    v24 = (char *)v16 + v23;
    v25 = &v17[v23];
    v26 = type metadata accessor for Date(0);
    v61 = *(_QWORD *)(v26 - 8);
    v27 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
    v27(v24, v25, v26);
    v28 = sub_100008EF4(&qword_100105F40);
    v27(&v24[*(int *)(v28 + 36)], &v25[*(int *)(v28 + 36)], v26);
    v29 = v22[9];
    v30 = (char *)v16 + v29;
    v31 = &v17[v29];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(&v17[v29], 1, v26))
    {
      v32 = sub_100008EF4(&qword_100105F48);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v27(v30, v31, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v30, 0, 1, v26);
    }
    v46 = v63;
    *((_BYTE *)v16 + v22[10]) = v17[v22[10]];
    *((_BYTE *)v16 + v22[11]) = v17[v22[11]];
    v47 = v16;
    v48 = 0;
LABEL_12:
    swift_storeEnumTagMultiPayload(v47, v46, v48);
    goto LABEL_13;
  }
  memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_13:
  v50 = a3[7];
  v51 = a3[8];
  v52 = a1 + v50;
  v53 = a2 + v50;
  v54 = *(_OWORD *)(v53 + 16);
  *(_OWORD *)v52 = *(_OWORD *)v53;
  *(_OWORD *)(v52 + 16) = v54;
  *(_OWORD *)(v52 + 32) = *(_OWORD *)(v53 + 32);
  *(_BYTE *)(v52 + 48) = *(_BYTE *)(v53 + 48);
  v55 = (_OWORD *)(a1 + v51);
  v56 = (_OWORD *)(a2 + v51);
  v57 = v56[1];
  *v55 = *v56;
  v55[1] = v57;
  v58 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v58) = *(_BYTE *)(a2 + v58);
  v59 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v59) = *(_BYTE *)(a2 + v59);
  return a1;
}

uint64_t sub_100022D24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  int EnumCaseMultiPayload;
  __int128 v37;
  __int128 v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v16;
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v18 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release(v18);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v19;
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a2 + 144);
  v22 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v21;
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a2 + 160);
  v24 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v23;
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a2 + 176);
  v26 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(a2 + 192);
  v28 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v27;
  swift_bridgeObjectRelease(v28);
  v29 = *(_QWORD *)(a2 + 208);
  v30 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v29;
  swift_bridgeObjectRelease(v30);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v31 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_release(v31);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  if (a1 != a2)
  {
    v32 = a3[6];
    v33 = (_OWORD *)(a1 + v32);
    v34 = (char *)(a2 + v32);
    sub_10001D060(a1 + v32);
    v35 = type metadata accessor for SportsWidgetClock(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v34, v35);
    if (EnumCaseMultiPayload == 2)
    {
      v87 = v35;
      v50 = *((_OWORD *)v34 + 1);
      *v33 = *(_OWORD *)v34;
      v33[1] = v50;
      v51 = *((_OWORD *)v34 + 3);
      v33[2] = *((_OWORD *)v34 + 2);
      v33[3] = v51;
      v52 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v53 = v52[8];
      v54 = (char *)v33 + v53;
      v55 = &v34[v53];
      v56 = type metadata accessor for Date(0);
      v85 = *(_QWORD *)(v56 - 8);
      v57 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
      v57(v54, v55, v56);
      v58 = sub_100008EF4(&qword_100105F40);
      v57(&v54[*(int *)(v58 + 36)], &v55[*(int *)(v58 + 36)], v56);
      v59 = v52[9];
      v60 = (char *)v33 + v59;
      v61 = &v34[v59];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(&v34[v59], 1, v56))
      {
        v62 = sub_100008EF4(&qword_100105F48);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        v57(v60, v61, v56);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v60, 0, 1, v56);
      }
      *((_BYTE *)v33 + v52[10]) = v34[v52[10]];
      *((_BYTE *)v33 + v52[11]) = v34[v52[11]];
      v66 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
      *(_QWORD *)((char *)v33 + *(int *)(v66 + 20)) = *(_QWORD *)&v34[*(int *)(v66 + 20)];
      v64 = v33;
      v63 = v87;
      v65 = 2;
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      v86 = v35;
      v37 = *((_OWORD *)v34 + 1);
      *v33 = *(_OWORD *)v34;
      v33[1] = v37;
      v38 = *((_OWORD *)v34 + 3);
      v33[2] = *((_OWORD *)v34 + 2);
      v33[3] = v38;
      v39 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v40 = v39[8];
      v41 = (char *)v33 + v40;
      v42 = &v34[v40];
      v43 = type metadata accessor for Date(0);
      v84 = *(_QWORD *)(v43 - 8);
      v44 = *(void (**)(char *, char *, uint64_t))(v84 + 32);
      v44(v41, v42, v43);
      v45 = sub_100008EF4(&qword_100105F40);
      v44(&v41[*(int *)(v45 + 36)], &v42[*(int *)(v45 + 36)], v43);
      v46 = v39[9];
      v47 = (char *)v33 + v46;
      v48 = &v34[v46];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(&v34[v46], 1, v43))
      {
        v49 = sub_100008EF4(&qword_100105F48);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        v44(v47, v48, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v47, 0, 1, v43);
      }
      v63 = v86;
      *((_BYTE *)v33 + v39[10]) = v34[v39[10]];
      *((_BYTE *)v33 + v39[11]) = v34[v39[11]];
      v64 = v33;
      v65 = 0;
LABEL_13:
      swift_storeEnumTagMultiPayload(v64, v63, v65);
      goto LABEL_14;
    }
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
LABEL_14:
  v67 = a3[7];
  v68 = a1 + v67;
  v69 = a2 + v67;
  v70 = *(_QWORD *)(a2 + v67 + 8);
  v71 = *(_QWORD *)(a1 + v67 + 8);
  *(_QWORD *)v68 = *(_QWORD *)(a2 + v67);
  *(_QWORD *)(v68 + 8) = v70;
  swift_bridgeObjectRelease(v71);
  *(_BYTE *)(v68 + 16) = *(_BYTE *)(v69 + 16);
  v72 = *(_QWORD *)(v68 + 24);
  *(_QWORD *)(v68 + 24) = *(_QWORD *)(v69 + 24);
  swift_release(v72);
  *(_BYTE *)(v68 + 32) = *(_BYTE *)(v69 + 32);
  v73 = *(_QWORD *)(v68 + 40);
  *(_QWORD *)(v68 + 40) = *(_QWORD *)(v69 + 40);
  swift_release(v73);
  *(_BYTE *)(v68 + 48) = *(_BYTE *)(v69 + 48);
  v74 = a3[8];
  v75 = (_QWORD *)(a1 + v74);
  v76 = a2 + v74;
  v77 = *(_QWORD *)(a2 + v74 + 8);
  v78 = *(_QWORD *)(a1 + v74 + 8);
  *v75 = *(_QWORD *)(a2 + v74);
  v75[1] = v77;
  swift_bridgeObjectRelease(v78);
  v79 = *(_QWORD *)(v76 + 24);
  v80 = v75[3];
  v75[2] = *(_QWORD *)(v76 + 16);
  v75[3] = v79;
  swift_bridgeObjectRelease(v80);
  v81 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v81) = *(_BYTE *)(a2 + v81);
  v82 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v82) = *(_BYTE *)(a2 + v82);
  return a1;
}

uint64_t sub_1000231C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000231D0);
}

uint64_t sub_1000231D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000231E0);
}

uint64_t type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(uint64_t a1)
{
  return sub_100025CD0(a1, qword_100106D38, (uint64_t)&nominal type descriptor for SportsWidgetDynamicIslandExpandedViewModel);
}

uint64_t sub_1000231F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = "q";
  v4[1] = "q";
  result = type metadata accessor for SportsWidgetClock(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1000C6A50;
    v4[4] = &unk_1000C6A38;
    v4[5] = &unk_1000C6A68;
    v4[6] = &unk_1000C6A68;
    v4[7] = &unk_1000C6A68;
    v4[8] = &unk_1000C6A68;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_100023290(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = a2[7];
    v11 = a3[6];
    __dst = (char *)a1 + v11;
    v12 = (char *)a2 + v11;
    a1[6] = a2[6];
    a1[7] = v10;
    v13 = type metadata accessor for URL(0);
    v14 = *(_QWORD *)(v13 - 8);
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    if (v27(v12, 1, v13))
    {
      v15 = sub_100008EF4(&qword_100105F50);
      memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    v17 = a3[7];
    v18 = a3[8];
    v19 = (_QWORD *)((char *)v4 + v17);
    v20 = (_QWORD *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = (_QWORD *)((char *)v4 + v18);
    v23 = (_QWORD *)((char *)a2 + v18);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)v4 + v25) = *((_BYTE *)a2 + v25);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v24);
  }
  return v4;
}

uint64_t sub_100023428(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  v4 = (char *)a1 + a2[6];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8] + 8));
}

_QWORD *sub_1000234D4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  v9 = a2[7];
  v10 = a3[6];
  __dst = (char *)a1 + v10;
  v11 = (char *)a2 + v10;
  a1[6] = a2[6];
  a1[7] = v9;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  if (v25(v11, 1, v12))
  {
    v14 = sub_100008EF4(&qword_100105F50);
    memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  v15 = a3[7];
  v16 = a3[8];
  v17 = (_QWORD *)((char *)a1 + v15);
  v18 = (_QWORD *)((char *)a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_QWORD *)((char *)a1 + v16);
  v21 = (_QWORD *)((char *)a2 + v16);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  return a1;
}

_QWORD *sub_100023640(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[6] = a2[6];
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = sub_100008EF4(&qword_100105F50);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = a3[7];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  *v24 = *v25;
  v26 = v25[1];
  v27 = v24[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = a3[8];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

_OWORD *sub_100023840(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100008EF4(&qword_100105F50);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  v15 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  return a1;
}

_QWORD *sub_10002393C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a2[7];
  v13 = a1[7];
  a1[6] = a2[6];
  a1[7] = v12;
  swift_bridgeObjectRelease(v13);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = sub_100008EF4(&qword_100105F50);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = a3[7];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  v28 = v24[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease(v28);
  v29 = a3[8];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  v34 = v30[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease(v34);
  v35 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v35) = *((_BYTE *)a2 + v35);
  return a1;
}

uint64_t sub_100023AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100023AE4);
}

uint64_t sub_100023AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100008EF4(&qword_100105F50);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100023B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100023B70);
}

uint64_t sub_100023B70(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100008EF4(&qword_100105F50);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(uint64_t a1)
{
  return sub_100025CD0(a1, qword_100106DE8, (uint64_t)&nominal type descriptor for SportsWidgetDynamicIslandCompactViewModel);
}

void sub_100023BFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = "0";
  v4[1] = &unk_1000C6B08;
  sub_10001EBC0(319, (unint64_t *)&qword_100106A88, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1000C6B08;
    v4[4] = &unk_1000C6A80;
    v4[5] = &unk_1000C6A68;
    v4[6] = &unk_1000C6A68;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SportsWidgetPlay.Bar(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for SportsWidgetPlay.Bar(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

uint64_t assignWithCopy for SportsWidgetPlay.Bar(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for SportsWidgetPlay.Bar(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetLogoViewLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetLogoViewLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetPlay.Bar()
{
  return &type metadata for SportsWidgetPlay.Bar;
}

_QWORD *sub_100023DE8(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t EnumCaseMultiPayload;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v90 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v90;
    v88 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v88;
    v85 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v85;
    v82 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v82;
    v79 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v79;
    v6 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v6;
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    v75 = a2[13];
    v76 = v6;
    *(_QWORD *)(a1 + 104) = v75;
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    v74 = a2[16];
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_QWORD *)(a1 + 128) = v74;
    v7 = a2[18];
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_QWORD *)(a1 + 144) = v7;
    v8 = a2[20];
    *(_QWORD *)(a1 + 152) = a2[19];
    *(_QWORD *)(a1 + 160) = v8;
    v9 = a2[22];
    *(_QWORD *)(a1 + 168) = a2[21];
    *(_QWORD *)(a1 + 176) = v9;
    v10 = a2[24];
    *(_QWORD *)(a1 + 184) = a2[23];
    *(_QWORD *)(a1 + 192) = v10;
    v11 = a2[26];
    *(_QWORD *)(a1 + 200) = a2[25];
    *(_QWORD *)(a1 + 208) = v11;
    *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
    v12 = a2[28];
    *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
    v13 = a3[6];
    v73 = (_QWORD *)(a1 + v13);
    v14 = (char *)a2 + v13;
    *(_QWORD *)(a1 + 224) = v12;
    v15 = type metadata accessor for SportsWidgetClock(0);
    swift_bridgeObjectRetain(v90);
    swift_bridgeObjectRetain(v88);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v76);
    swift_retain(v75);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_retain(v12);
    v91 = v15;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v15);
    v17 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v25 = *((_QWORD *)v14 + 1);
      v18 = v73;
      *v73 = *(_QWORD *)v14;
      v73[1] = v25;
      v26 = *((_QWORD *)v14 + 3);
      v73[2] = *((_QWORD *)v14 + 2);
      v73[3] = v26;
      v86 = *((_QWORD *)v14 + 5);
      v73[4] = *((_QWORD *)v14 + 4);
      v73[5] = v86;
      v27 = *((_QWORD *)v14 + 7);
      v73[6] = *((_QWORD *)v14 + 6);
      v73[7] = v27;
      v28 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v29 = v28[8];
      v80 = &v14[v29];
      v83 = (char *)v73 + v29;
      v30 = type metadata accessor for Date(0);
      v31 = *(_QWORD *)(v30 - 8);
      v77 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v86);
      swift_bridgeObjectRetain(v27);
      v77(v83, v80, v30);
      v32 = sub_100008EF4(&qword_100105F40);
      v77(&v83[*(int *)(v32 + 36)], &v80[*(int *)(v32 + 36)], v30);
      v33 = v28[9];
      v34 = (char *)v73 + v33;
      v35 = &v14[v33];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(&v14[v33], 1, v30))
      {
        v36 = sub_100008EF4(&qword_100105F48);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        v77(v34, v35, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v34, 0, 1, v30);
      }
      *((_BYTE *)v73 + v28[10]) = v14[v28[10]];
      *((_BYTE *)v73 + v28[11]) = v14[v28[11]];
      v49 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
      v50 = *(_QWORD *)&v14[v49];
      *(_QWORD *)((char *)v73 + v49) = v50;
      swift_bridgeObjectRetain(v50);
      v23 = v91;
      v17 = 2;
    }
    else
    {
      v18 = v73;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v19 = *(_QWORD *)v14;
        v20 = *((_QWORD *)v14 + 1);
        *v73 = *(_QWORD *)v14;
        v73[1] = v20;
        v21 = *((_QWORD *)v14 + 3);
        v73[2] = *((_QWORD *)v14 + 2);
        v73[3] = v21;
        v22 = *((_QWORD *)v14 + 5);
        v73[4] = *((_QWORD *)v14 + 4);
        v73[5] = v22;
        *((_BYTE *)v73 + 48) = v14[48];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v23 = v91;
      }
      else
      {
        v89 = EnumCaseMultiPayload;
        v37 = *((_QWORD *)v14 + 1);
        *v73 = *(_QWORD *)v14;
        v73[1] = v37;
        v38 = *((_QWORD *)v14 + 3);
        v73[2] = *((_QWORD *)v14 + 2);
        v73[3] = v38;
        v87 = *((_QWORD *)v14 + 5);
        v73[4] = *((_QWORD *)v14 + 4);
        v73[5] = v87;
        v39 = *((_QWORD *)v14 + 7);
        v73[6] = *((_QWORD *)v14 + 6);
        v73[7] = v39;
        v40 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
        v41 = v40[8];
        v81 = &v14[v41];
        v84 = (char *)v73 + v41;
        v42 = type metadata accessor for Date(0);
        v43 = *(_QWORD *)(v42 - 8);
        v78 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
        swift_bridgeObjectRetain(v37);
        swift_bridgeObjectRetain(v38);
        swift_bridgeObjectRetain(v87);
        swift_bridgeObjectRetain(v39);
        v78(v84, v81, v42);
        v44 = sub_100008EF4(&qword_100105F40);
        v78(&v84[*(int *)(v44 + 36)], &v81[*(int *)(v44 + 36)], v42);
        v45 = v40[9];
        v46 = (char *)v73 + v45;
        v47 = &v14[v45];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(&v14[v45], 1, v42))
        {
          v48 = sub_100008EF4(&qword_100105F48);
          memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          v78(v46, v47, v42);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, v42);
        }
        v23 = v91;
        v17 = v89;
        *((_BYTE *)v73 + v40[10]) = v14[v40[10]];
        *((_BYTE *)v73 + v40[11]) = v14[v40[11]];
      }
    }
    swift_storeEnumTagMultiPayload(v18, v23, v17);
    v51 = a3[7];
    v52 = a3[8];
    v53 = (_QWORD *)((char *)v4 + v51);
    v54 = (uint64_t *)((char *)a2 + v51);
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    v56 = v54[3];
    v53[2] = v54[2];
    v53[3] = v56;
    v57 = (char *)v4 + v52;
    v58 = (uint64_t)a2 + v52;
    v59 = *(_QWORD *)(v58 + 8);
    *(_QWORD *)v57 = *(_QWORD *)v58;
    *((_QWORD *)v57 + 1) = v59;
    v57[16] = *(_BYTE *)(v58 + 16);
    v60 = *(_QWORD *)(v58 + 24);
    *((_QWORD *)v57 + 3) = v60;
    v57[32] = *(_BYTE *)(v58 + 32);
    v61 = *(_QWORD *)(v58 + 40);
    *((_QWORD *)v57 + 5) = v61;
    v57[48] = *(_BYTE *)(v58 + 48);
    v62 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)v4 + v62) = *((_BYTE *)a2 + v62);
    v63 = a3[12];
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    v64 = (_QWORD *)((char *)v4 + v63);
    v65 = (uint64_t *)((char *)a2 + v63);
    v66 = v65[1];
    *v64 = *v65;
    v64[1] = v66;
    v67 = a3[14];
    *((_BYTE *)v4 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    *((_BYTE *)v4 + v67) = *((_BYTE *)a2 + v67);
    v68 = a3[15];
    v69 = (_QWORD *)((char *)v4 + v68);
    v70 = (uint64_t *)((char *)a2 + v68);
    v71 = v70[1];
    *v69 = *v70;
    v69[1] = v71;
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v71);
  }
  return v4;
}

uint64_t sub_1000243A0(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_release(a1[13]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  swift_release(a1[28]);
  v4 = (_QWORD *)((char *)a1 + a2[6]);
  v5 = type metadata accessor for SportsWidgetClock(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v5);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease(v4[1]);
      swift_bridgeObjectRelease(v4[3]);
      swift_bridgeObjectRelease(v4[5]);
      swift_bridgeObjectRelease(v4[7]);
      v14 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v15 = (char *)v4 + *(int *)(v14 + 32);
      v16 = type metadata accessor for Date(0);
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(void (**)(char *, uint64_t))(v17 + 8);
      v18(v15, v16);
      v19 = sub_100008EF4(&qword_100105F40);
      v18(&v15[*(int *)(v19 + 36)], v16);
      v20 = (char *)v4 + *(int *)(v14 + 36);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v20, 1, v16))
        v18(v20, v16);
      v21 = *(_QWORD *)((char *)v4 + *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20));
      goto LABEL_10;
    case 1:
      swift_bridgeObjectRelease(*v4);
      swift_bridgeObjectRelease(v4[1]);
      swift_bridgeObjectRelease(v4[3]);
      v21 = v4[5];
LABEL_10:
      swift_bridgeObjectRelease(v21);
      break;
    case 0:
      swift_bridgeObjectRelease(v4[1]);
      swift_bridgeObjectRelease(v4[3]);
      swift_bridgeObjectRelease(v4[5]);
      swift_bridgeObjectRelease(v4[7]);
      v7 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v8 = (char *)v4 + *(int *)(v7 + 32);
      v9 = type metadata accessor for Date(0);
      v10 = *(_QWORD *)(v9 - 8);
      v11 = *(void (**)(char *, uint64_t))(v10 + 8);
      v11(v8, v9);
      v12 = sub_100008EF4(&qword_100105F40);
      v11(&v8[*(int *)(v12 + 36)], v9);
      v13 = (char *)v4 + *(int *)(v7 + 36);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
        v11(v13, v9);
      break;
  }
  v22 = (char *)a1 + a2[7];
  swift_bridgeObjectRelease(*((_QWORD *)v22 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v22 + 3));
  v23 = (_QWORD *)((char *)a1 + a2[8]);
  swift_bridgeObjectRelease(v23[1]);
  swift_release(v23[3]);
  swift_release(v23[5]);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[12] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[15] + 8));
}

uint64_t sub_10002463C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;

  v90 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v90;
  v88 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v88;
  v85 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v85;
  v82 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v82;
  v79 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v79;
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v75 = *(_QWORD *)(a2 + 104);
  v76 = v5;
  *(_QWORD *)(a1 + 104) = v75;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v74 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v74;
  v6 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v6;
  v7 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v7;
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v8;
  v9 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v9;
  v10 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v10;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v11 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v12 = a3[6];
  v73 = (_QWORD *)(a1 + v12);
  v13 = (char *)(a2 + v12);
  *(_QWORD *)(a1 + 224) = v11;
  v14 = type metadata accessor for SportsWidgetClock(0);
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v76);
  swift_retain(v75);
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  v91 = v14;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v14);
  v16 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v24 = *((_QWORD *)v13 + 1);
    v17 = v73;
    *v73 = *(_QWORD *)v13;
    v73[1] = v24;
    v25 = *((_QWORD *)v13 + 3);
    v73[2] = *((_QWORD *)v13 + 2);
    v73[3] = v25;
    v86 = *((_QWORD *)v13 + 5);
    v73[4] = *((_QWORD *)v13 + 4);
    v73[5] = v86;
    v26 = *((_QWORD *)v13 + 7);
    v73[6] = *((_QWORD *)v13 + 6);
    v73[7] = v26;
    v27 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v28 = v27[8];
    v80 = &v13[v28];
    v83 = (char *)v73 + v28;
    v29 = type metadata accessor for Date(0);
    v30 = *(_QWORD *)(v29 - 8);
    v77 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v26);
    v77(v83, v80, v29);
    v31 = sub_100008EF4(&qword_100105F40);
    v77(&v83[*(int *)(v31 + 36)], &v80[*(int *)(v31 + 36)], v29);
    v32 = v27[9];
    v33 = (char *)v73 + v32;
    v34 = &v13[v32];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(&v13[v32], 1, v29))
    {
      v35 = sub_100008EF4(&qword_100105F48);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v77(v33, v34, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v33, 0, 1, v29);
    }
    v22 = a3;
    *((_BYTE *)v73 + v27[10]) = v13[v27[10]];
    *((_BYTE *)v73 + v27[11]) = v13[v27[11]];
    v48 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
    v49 = *(_QWORD *)&v13[v48];
    *(_QWORD *)((char *)v73 + v48) = v49;
    swift_bridgeObjectRetain(v49);
    v23 = v91;
    v16 = 2;
  }
  else
  {
    v17 = v73;
    if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      v18 = *(_QWORD *)v13;
      v19 = *((_QWORD *)v13 + 1);
      *v73 = *(_QWORD *)v13;
      v73[1] = v19;
      v20 = *((_QWORD *)v13 + 3);
      v73[2] = *((_QWORD *)v13 + 2);
      v73[3] = v20;
      v21 = *((_QWORD *)v13 + 5);
      v73[4] = *((_QWORD *)v13 + 4);
      v73[5] = v21;
      *((_BYTE *)v73 + 48) = v13[48];
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v22 = a3;
      v23 = v91;
    }
    else
    {
      v89 = EnumCaseMultiPayload;
      v36 = *((_QWORD *)v13 + 1);
      *v73 = *(_QWORD *)v13;
      v73[1] = v36;
      v37 = *((_QWORD *)v13 + 3);
      v73[2] = *((_QWORD *)v13 + 2);
      v73[3] = v37;
      v87 = *((_QWORD *)v13 + 5);
      v73[4] = *((_QWORD *)v13 + 4);
      v73[5] = v87;
      v38 = *((_QWORD *)v13 + 7);
      v73[6] = *((_QWORD *)v13 + 6);
      v73[7] = v38;
      v39 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v40 = v39[8];
      v81 = &v13[v40];
      v84 = (char *)v73 + v40;
      v41 = type metadata accessor for Date(0);
      v42 = *(_QWORD *)(v41 - 8);
      v78 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v87);
      swift_bridgeObjectRetain(v38);
      v78(v84, v81, v41);
      v43 = sub_100008EF4(&qword_100105F40);
      v78(&v84[*(int *)(v43 + 36)], &v81[*(int *)(v43 + 36)], v41);
      v44 = v39[9];
      v45 = (char *)v73 + v44;
      v46 = &v13[v44];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(&v13[v44], 1, v41))
      {
        v47 = sub_100008EF4(&qword_100105F48);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        v78(v45, v46, v41);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v45, 0, 1, v41);
      }
      v22 = a3;
      v23 = v91;
      v16 = v89;
      *((_BYTE *)v73 + v39[10]) = v13[v39[10]];
      *((_BYTE *)v73 + v39[11]) = v13[v39[11]];
    }
  }
  swift_storeEnumTagMultiPayload(v17, v23, v16);
  v50 = v22[7];
  v51 = v22[8];
  v52 = (_QWORD *)(a1 + v50);
  v53 = (_QWORD *)(a2 + v50);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = v53[3];
  v52[2] = v53[2];
  v52[3] = v55;
  v56 = a1 + v51;
  v57 = a2 + v51;
  v58 = *(_QWORD *)(v57 + 8);
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *(_QWORD *)(v56 + 8) = v58;
  *(_BYTE *)(v56 + 16) = *(_BYTE *)(v57 + 16);
  v59 = *(_QWORD *)(v57 + 24);
  *(_QWORD *)(v56 + 24) = v59;
  *(_BYTE *)(v56 + 32) = *(_BYTE *)(v57 + 32);
  v60 = *(_QWORD *)(v57 + 40);
  *(_QWORD *)(v56 + 40) = v60;
  *(_BYTE *)(v56 + 48) = *(_BYTE *)(v57 + 48);
  v61 = v22[10];
  *(_BYTE *)(a1 + v22[9]) = *(_BYTE *)(a2 + v22[9]);
  *(_BYTE *)(a1 + v61) = *(_BYTE *)(a2 + v61);
  v62 = v22[12];
  *(_BYTE *)(a1 + v22[11]) = *(_BYTE *)(a2 + v22[11]);
  v63 = (_QWORD *)(a1 + v62);
  v64 = (_QWORD *)(a2 + v62);
  v65 = v64[1];
  *v63 = *v64;
  v63[1] = v65;
  v66 = v22[14];
  *(_BYTE *)(a1 + v22[13]) = *(_BYTE *)(a2 + v22[13]);
  *(_BYTE *)(a1 + v66) = *(_BYTE *)(a2 + v66);
  v67 = v22[15];
  v68 = (_QWORD *)(a1 + v67);
  v69 = (_QWORD *)(a2 + v67);
  v70 = v69[1];
  *v68 = *v69;
  v68[1] = v70;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v58);
  swift_retain(v59);
  swift_retain(v60);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v70);
  return a1;
}

uint64_t sub_100024BCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  char *v97;
  char *v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);
  uint64_t v104;
  int *v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v18;
  swift_retain(v18);
  swift_release(v19);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v26 = *(_QWORD *)(a2 + 176);
  v27 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v28 = *(_QWORD *)(a2 + 192);
  v29 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v30 = *(_QWORD *)(a2 + 208);
  v31 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v32 = *(_QWORD *)(a2 + 224);
  v33 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v32;
  swift_retain(v32);
  swift_release(v33);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  if (a1 != a2)
  {
    v34 = a3[6];
    v35 = (_QWORD *)(a1 + v34);
    v36 = (char *)(a2 + v34);
    sub_10001D060(a1 + v34);
    v37 = type metadata accessor for SportsWidgetClock(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v36, v37);
    v39 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v108 = 2;
      v109 = v37;
      *v35 = *(_QWORD *)v36;
      v44 = *((_QWORD *)v36 + 1);
      v35[1] = v44;
      v35[2] = *((_QWORD *)v36 + 2);
      v101 = *((_QWORD *)v36 + 3);
      v35[3] = v101;
      v35[4] = *((_QWORD *)v36 + 4);
      v45 = *((_QWORD *)v36 + 5);
      v35[5] = v45;
      v35[6] = *((_QWORD *)v36 + 6);
      v99 = *((_QWORD *)v36 + 7);
      v35[7] = v99;
      v105 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v46 = v105[8];
      v97 = (char *)v35 + v46;
      v47 = &v36[v46];
      v48 = type metadata accessor for Date(0);
      v49 = *(_QWORD *)(v48 - 8);
      v103 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v101);
      swift_bridgeObjectRetain(v45);
      v50 = v49;
      swift_bridgeObjectRetain(v99);
      v103(v97, v47, v48);
      v51 = sub_100008EF4(&qword_100105F40);
      v103(&v97[*(int *)(v51 + 36)], &v47[*(int *)(v51 + 36)], v48);
      v52 = v105[9];
      v53 = (char *)v35 + v52;
      v54 = &v36[v52];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(&v36[v52], 1, v48))
      {
        v55 = sub_100008EF4(&qword_100105F48);
        memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        v103(v53, v54, v48);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v53, 0, 1, v48);
      }
      *((_BYTE *)v35 + v105[10]) = v36[v105[10]];
      *((_BYTE *)v35 + v105[11]) = v36[v105[11]];
      v68 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
      v69 = *(_QWORD *)&v36[v68];
      *(_QWORD *)((char *)v35 + v68) = v69;
      swift_bridgeObjectRetain(v69);
      v37 = v109;
    }
    else
    {
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v40 = *(_QWORD *)v36;
        *v35 = *(_QWORD *)v36;
        v41 = *((_QWORD *)v36 + 1);
        v35[1] = v41;
        v35[2] = *((_QWORD *)v36 + 2);
        v42 = *((_QWORD *)v36 + 3);
        v35[3] = v42;
        v35[4] = *((_QWORD *)v36 + 4);
        v43 = *((_QWORD *)v36 + 5);
        v35[5] = v43;
        *((_BYTE *)v35 + 48) = v36[48];
        swift_bridgeObjectRetain(v40);
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
LABEL_14:
        swift_storeEnumTagMultiPayload(v35, v37, v39);
        goto LABEL_15;
      }
      v108 = EnumCaseMultiPayload;
      v110 = v37;
      *v35 = *(_QWORD *)v36;
      v106 = *((_QWORD *)v36 + 1);
      v35[1] = v106;
      v35[2] = *((_QWORD *)v36 + 2);
      v56 = *((_QWORD *)v36 + 3);
      v35[3] = v56;
      v35[4] = *((_QWORD *)v36 + 4);
      v104 = *((_QWORD *)v36 + 5);
      v35[5] = v104;
      v35[6] = *((_QWORD *)v36 + 6);
      v102 = *((_QWORD *)v36 + 7);
      v35[7] = v102;
      v57 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v58 = *(int *)(v57 + 32);
      v59 = (char *)v35 + v58;
      v98 = &v36[v58];
      v100 = (int *)v57;
      v60 = type metadata accessor for Date(0);
      v61 = *(_QWORD *)(v60 - 8);
      v62 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
      swift_bridgeObjectRetain(v106);
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRetain(v104);
      swift_bridgeObjectRetain(v102);
      v62(v59, v98, v60);
      v63 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
      v107 = v62;
      v62(&v59[v63], &v98[v63], v60);
      v64 = v100[9];
      v65 = (char *)v35 + v64;
      v66 = &v36[v64];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(&v36[v64], 1, v60))
      {
        v67 = sub_100008EF4(&qword_100105F48);
        memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
      }
      else
      {
        v107(v65, v66, v60);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v65, 0, 1, v60);
      }
      v37 = v110;
      *((_BYTE *)v35 + v100[10]) = v36[v100[10]];
      *((_BYTE *)v35 + v100[11]) = v36[v100[11]];
    }
    v39 = v108;
    goto LABEL_14;
  }
LABEL_15:
  v70 = a3[7];
  v71 = (_QWORD *)(a1 + v70);
  v72 = a2 + v70;
  *v71 = *(_QWORD *)(a2 + v70);
  v73 = *(_QWORD *)(a2 + v70 + 8);
  v74 = *(_QWORD *)(a1 + v70 + 8);
  v71[1] = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  v71[2] = *(_QWORD *)(v72 + 16);
  v75 = *(_QWORD *)(v72 + 24);
  v76 = v71[3];
  v71[3] = v75;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRelease(v76);
  v77 = a3[8];
  v78 = a1 + v77;
  v79 = a2 + v77;
  *(_QWORD *)v78 = *(_QWORD *)(a2 + v77);
  v80 = *(_QWORD *)(a2 + v77 + 8);
  v81 = *(_QWORD *)(a1 + v77 + 8);
  *(_QWORD *)(v78 + 8) = v80;
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRelease(v81);
  *(_BYTE *)(v78 + 16) = *(_BYTE *)(v79 + 16);
  v82 = *(_QWORD *)(v79 + 24);
  v83 = *(_QWORD *)(v78 + 24);
  *(_QWORD *)(v78 + 24) = v82;
  swift_retain(v82);
  swift_release(v83);
  *(_BYTE *)(v78 + 32) = *(_BYTE *)(v79 + 32);
  v84 = *(_QWORD *)(v79 + 40);
  v85 = *(_QWORD *)(v78 + 40);
  *(_QWORD *)(v78 + 40) = v84;
  swift_retain(v84);
  swift_release(v85);
  *(_BYTE *)(v78 + 48) = *(_BYTE *)(v79 + 48);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v86 = a3[12];
  v87 = (_QWORD *)(a1 + v86);
  v88 = (_QWORD *)(a2 + v86);
  *v87 = *v88;
  v89 = v88[1];
  v90 = v87[1];
  v87[1] = v89;
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRelease(v90);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v91 = a3[15];
  v92 = (_QWORD *)(a1 + v91);
  v93 = (_QWORD *)(a2 + v91);
  *v92 = *v93;
  v94 = v93[1];
  v95 = v92[1];
  v92[1] = v94;
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRelease(v95);
  return a1;
}

uint64_t sub_100025300(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  char *v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  __int128 v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  _OWORD *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 136);
  v11 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  v12 = *(_OWORD *)(a2 + 184);
  v13 = *(_OWORD *)(a2 + 200);
  v14 = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(a1 + 200) = v13;
  v15 = a3[6];
  v16 = (_OWORD *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  *(_OWORD *)(a1 + 184) = v12;
  v18 = type metadata accessor for SportsWidgetClock(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v18);
  if (EnumCaseMultiPayload == 2)
  {
    v65 = v18;
    v33 = *((_OWORD *)v17 + 1);
    *v16 = *(_OWORD *)v17;
    v16[1] = v33;
    v34 = *((_OWORD *)v17 + 3);
    v16[2] = *((_OWORD *)v17 + 2);
    v16[3] = v34;
    v35 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v36 = v35[8];
    v37 = (char *)v16 + v36;
    v38 = &v17[v36];
    v39 = type metadata accessor for Date(0);
    v63 = *(_QWORD *)(v39 - 8);
    v40 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
    v40(v37, v38, v39);
    v41 = sub_100008EF4(&qword_100105F40);
    v40(&v37[*(int *)(v41 + 36)], &v38[*(int *)(v41 + 36)], v39);
    v42 = v35[9];
    v43 = (char *)v16 + v42;
    v44 = &v17[v42];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(&v17[v42], 1, v39))
    {
      v45 = sub_100008EF4(&qword_100105F48);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      v40(v43, v44, v39);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v43, 0, 1, v39);
    }
    *((_BYTE *)v16 + v35[10]) = v17[v35[10]];
    *((_BYTE *)v16 + v35[11]) = v17[v35[11]];
    v49 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
    *(_QWORD *)((char *)v16 + *(int *)(v49 + 20)) = *(_QWORD *)&v17[*(int *)(v49 + 20)];
    v47 = v16;
    v46 = v65;
    v48 = 2;
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    v64 = v18;
    v20 = *((_OWORD *)v17 + 1);
    *v16 = *(_OWORD *)v17;
    v16[1] = v20;
    v21 = *((_OWORD *)v17 + 3);
    v16[2] = *((_OWORD *)v17 + 2);
    v16[3] = v21;
    v22 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v23 = v22[8];
    v24 = (char *)v16 + v23;
    v25 = &v17[v23];
    v26 = type metadata accessor for Date(0);
    v62 = *(_QWORD *)(v26 - 8);
    v27 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
    v27(v24, v25, v26);
    v28 = sub_100008EF4(&qword_100105F40);
    v27(&v24[*(int *)(v28 + 36)], &v25[*(int *)(v28 + 36)], v26);
    v29 = v22[9];
    v30 = (char *)v16 + v29;
    v31 = &v17[v29];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(&v17[v29], 1, v26))
    {
      v32 = sub_100008EF4(&qword_100105F48);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v27(v30, v31, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v30, 0, 1, v26);
    }
    v46 = v64;
    *((_BYTE *)v16 + v22[10]) = v17[v22[10]];
    *((_BYTE *)v16 + v22[11]) = v17[v22[11]];
    v47 = v16;
    v48 = 0;
LABEL_12:
    swift_storeEnumTagMultiPayload(v47, v46, v48);
    goto LABEL_13;
  }
  memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_13:
  v50 = a3[7];
  v51 = a3[8];
  v52 = (_OWORD *)(a1 + v50);
  v53 = (_OWORD *)(a2 + v50);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = a1 + v51;
  v56 = a2 + v51;
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  *(_OWORD *)(v55 + 32) = *(_OWORD *)(v56 + 32);
  *(_BYTE *)(v55 + 48) = *(_BYTE *)(v56 + 48);
  v58 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v58) = *(_BYTE *)(a2 + v58);
  v59 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v59) = *(_OWORD *)(a2 + v59);
  v60 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v60) = *(_BYTE *)(a2 + v60);
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_1000256CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  int EnumCaseMultiPayload;
  __int128 v37;
  __int128 v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v16;
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v18 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release(v18);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v19;
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a2 + 144);
  v22 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v21;
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a2 + 160);
  v24 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v23;
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a2 + 176);
  v26 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(a2 + 192);
  v28 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v27;
  swift_bridgeObjectRelease(v28);
  v29 = *(_QWORD *)(a2 + 208);
  v30 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v29;
  swift_bridgeObjectRelease(v30);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v31 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_release(v31);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  if (a1 != a2)
  {
    v32 = a3[6];
    v33 = (_OWORD *)(a1 + v32);
    v34 = (char *)(a2 + v32);
    sub_10001D060(a1 + v32);
    v35 = type metadata accessor for SportsWidgetClock(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v34, v35);
    if (EnumCaseMultiPayload == 2)
    {
      v99 = v35;
      v50 = *((_OWORD *)v34 + 1);
      *v33 = *(_OWORD *)v34;
      v33[1] = v50;
      v51 = *((_OWORD *)v34 + 3);
      v33[2] = *((_OWORD *)v34 + 2);
      v33[3] = v51;
      v52 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v53 = v52[8];
      v54 = (char *)v33 + v53;
      v55 = &v34[v53];
      v56 = type metadata accessor for Date(0);
      v97 = *(_QWORD *)(v56 - 8);
      v57 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
      v57(v54, v55, v56);
      v58 = sub_100008EF4(&qword_100105F40);
      v57(&v54[*(int *)(v58 + 36)], &v55[*(int *)(v58 + 36)], v56);
      v59 = v52[9];
      v60 = (char *)v33 + v59;
      v61 = &v34[v59];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(&v34[v59], 1, v56))
      {
        v62 = sub_100008EF4(&qword_100105F48);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        v57(v60, v61, v56);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v60, 0, 1, v56);
      }
      *((_BYTE *)v33 + v52[10]) = v34[v52[10]];
      *((_BYTE *)v33 + v52[11]) = v34[v52[11]];
      v66 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
      *(_QWORD *)((char *)v33 + *(int *)(v66 + 20)) = *(_QWORD *)&v34[*(int *)(v66 + 20)];
      v64 = v33;
      v63 = v99;
      v65 = 2;
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      v98 = v35;
      v37 = *((_OWORD *)v34 + 1);
      *v33 = *(_OWORD *)v34;
      v33[1] = v37;
      v38 = *((_OWORD *)v34 + 3);
      v33[2] = *((_OWORD *)v34 + 2);
      v33[3] = v38;
      v39 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v40 = v39[8];
      v41 = (char *)v33 + v40;
      v42 = &v34[v40];
      v43 = type metadata accessor for Date(0);
      v96 = *(_QWORD *)(v43 - 8);
      v44 = *(void (**)(char *, char *, uint64_t))(v96 + 32);
      v44(v41, v42, v43);
      v45 = sub_100008EF4(&qword_100105F40);
      v44(&v41[*(int *)(v45 + 36)], &v42[*(int *)(v45 + 36)], v43);
      v46 = v39[9];
      v47 = (char *)v33 + v46;
      v48 = &v34[v46];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(&v34[v46], 1, v43))
      {
        v49 = sub_100008EF4(&qword_100105F48);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        v44(v47, v48, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v47, 0, 1, v43);
      }
      v63 = v98;
      *((_BYTE *)v33 + v39[10]) = v34[v39[10]];
      *((_BYTE *)v33 + v39[11]) = v34[v39[11]];
      v64 = v33;
      v65 = 0;
LABEL_13:
      swift_storeEnumTagMultiPayload(v64, v63, v65);
      goto LABEL_14;
    }
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
LABEL_14:
  v67 = a3[7];
  v68 = (_QWORD *)(a1 + v67);
  v69 = a2 + v67;
  v70 = *(_QWORD *)(a2 + v67 + 8);
  v71 = *(_QWORD *)(a1 + v67 + 8);
  *v68 = *(_QWORD *)(a2 + v67);
  v68[1] = v70;
  swift_bridgeObjectRelease(v71);
  v72 = *(_QWORD *)(v69 + 24);
  v73 = v68[3];
  v68[2] = *(_QWORD *)(v69 + 16);
  v68[3] = v72;
  swift_bridgeObjectRelease(v73);
  v74 = a3[8];
  v75 = a1 + v74;
  v76 = a2 + v74;
  v77 = *(_QWORD *)(a2 + v74 + 8);
  v78 = *(_QWORD *)(a1 + v74 + 8);
  *(_QWORD *)v75 = *(_QWORD *)(a2 + v74);
  *(_QWORD *)(v75 + 8) = v77;
  swift_bridgeObjectRelease(v78);
  *(_BYTE *)(v75 + 16) = *(_BYTE *)(v76 + 16);
  v79 = *(_QWORD *)(v75 + 24);
  *(_QWORD *)(v75 + 24) = *(_QWORD *)(v76 + 24);
  swift_release(v79);
  *(_BYTE *)(v75 + 32) = *(_BYTE *)(v76 + 32);
  v80 = *(_QWORD *)(v75 + 40);
  *(_QWORD *)(v75 + 40) = *(_QWORD *)(v76 + 40);
  swift_release(v80);
  *(_BYTE *)(v75 + 48) = *(_BYTE *)(v76 + 48);
  v81 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v81) = *(_BYTE *)(a2 + v81);
  v82 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v83 = (_QWORD *)(a1 + v82);
  v84 = (uint64_t *)(a2 + v82);
  v86 = *v84;
  v85 = v84[1];
  v87 = v83[1];
  *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  v88 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v88) = *(_BYTE *)(a2 + v88);
  v89 = a3[15];
  v90 = (_QWORD *)(a1 + v89);
  v91 = (uint64_t *)(a2 + v89);
  v93 = *v91;
  v92 = v91[1];
  v94 = v90[1];
  *v90 = v93;
  v90[1] = v92;
  swift_bridgeObjectRelease(v94);
  return a1;
}

uint64_t sub_100025BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100025BB8);
}

uint64_t sub_100025BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SportsWidgetClock(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100025C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100025C44);
}

uint64_t sub_100025C48(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for SportsWidgetClock(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SportsWatchWidgetViewModel(uint64_t a1)
{
  return sub_100025CD0(a1, qword_100106E90, (uint64_t)&nominal type descriptor for SportsWatchWidgetViewModel);
}

uint64_t sub_100025CD0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100025D04(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = "q";
  v4[1] = "q";
  result = type metadata accessor for SportsWidgetClock(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1000C6A38;
    v4[4] = &unk_1000C6A50;
    v4[5] = &unk_1000C6A68;
    v4[6] = &unk_1000C6A68;
    v4[7] = &unk_1000C6A68;
    v4[8] = &unk_1000C6A80;
    v4[9] = &unk_1000C6A68;
    v4[10] = &unk_1000C6A68;
    v4[11] = &unk_1000C6A80;
    swift_initStructMetadata(a1, 256, 12, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for SportsWidgetMinimalViewModel(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_release(a1[13]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  swift_release(a1[28]);
  return swift_bridgeObjectRelease(a1[35]);
}

uint64_t initializeWithCopy for SportsWidgetMinimalViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v19 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v19;
  v18 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v18;
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v17;
  v16 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v16;
  v15 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v15;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v4;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v5 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v5;
  v6 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v6;
  v7 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v7;
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v8;
  v9 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v9;
  v10 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v10;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v11 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 224) = v11;
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v12 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v12;
  v13 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v13;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v15);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t assignWithCopy for SportsWidgetMinimalViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_retain(v16);
  swift_release(v17);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v20 = *(_QWORD *)(a2 + 144);
  v21 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v22 = *(_QWORD *)(a2 + 160);
  v23 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v24 = *(_QWORD *)(a2 + 176);
  v25 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v26 = *(_QWORD *)(a2 + 192);
  v27 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v28 = *(_QWORD *)(a2 + 208);
  v29 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v30 = *(_QWORD *)(a2 + 224);
  v31 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v30;
  swift_retain(v30);
  swift_release(v31);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v32 = *(_QWORD *)(a2 + 280);
  v33 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  return a1;
}

void *initializeWithTake for SportsWidgetMinimalViewModel(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t assignWithTake for SportsWidgetMinimalViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v16 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release(v16);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 128);
  v18 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v17;
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 144);
  v20 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v19;
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a2 + 160);
  v22 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v21;
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a2 + 176);
  v24 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v23;
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a2 + 192);
  v26 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(a2 + 208);
  v28 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v27;
  swift_bridgeObjectRelease(v28);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v29 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_release(v29);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v30 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v30;
  v31 = *(_QWORD *)(a2 + 280);
  v32 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v31;
  swift_bridgeObjectRelease(v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetMinimalViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 288))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetMinimalViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 288) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 288) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetMinimalViewModel()
{
  return &type metadata for SportsWidgetMinimalViewModel;
}

NSString *sub_100026410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  id *v7;
  void (*v9)(char *, uint64_t);
  NSString *v10;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for DynamicTypeSize(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DynamicTypeSize.xSmall(_:))
  {
    v7 = (id *)&UIContentSizeCategoryExtraSmall;
    return (NSString *)*v7;
  }
  if (v6 == enum case for DynamicTypeSize.small(_:))
  {
    v7 = (id *)&UIContentSizeCategorySmall;
    return (NSString *)*v7;
  }
  if (v6 == enum case for DynamicTypeSize.medium(_:))
  {
    v7 = (id *)&UIContentSizeCategoryMedium;
    return (NSString *)*v7;
  }
  if (v6 == enum case for DynamicTypeSize.large(_:))
  {
    v7 = (id *)&UIContentSizeCategoryLarge;
    return (NSString *)*v7;
  }
  if (v6 == enum case for DynamicTypeSize.xLarge(_:))
  {
    v7 = (id *)&UIContentSizeCategoryExtraLarge;
    return (NSString *)*v7;
  }
  if (v6 == enum case for DynamicTypeSize.xxLarge(_:))
  {
    v7 = (id *)&UIContentSizeCategoryExtraExtraLarge;
    return (NSString *)*v7;
  }
  if (v6 == enum case for DynamicTypeSize.xxxLarge(_:))
  {
    v7 = (id *)&UIContentSizeCategoryExtraExtraExtraLarge;
    return (NSString *)*v7;
  }
  if (v6 == enum case for DynamicTypeSize.accessibility1(_:))
  {
    v7 = (id *)&UIContentSizeCategoryAccessibilityMedium;
    return (NSString *)*v7;
  }
  if (v6 == enum case for DynamicTypeSize.accessibility2(_:))
  {
    v7 = (id *)&UIContentSizeCategoryAccessibilityLarge;
    return (NSString *)*v7;
  }
  if (v6 == enum case for DynamicTypeSize.accessibility3(_:))
  {
    v7 = (id *)&UIContentSizeCategoryAccessibilityExtraLarge;
    return (NSString *)*v7;
  }
  if (v6 == enum case for DynamicTypeSize.accessibility4(_:))
  {
    v7 = (id *)&UIContentSizeCategoryAccessibilityExtraExtraLarge;
    return (NSString *)*v7;
  }
  if (v6 == enum case for DynamicTypeSize.accessibility5(_:))
  {
    v7 = (id *)&UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
    return (NSString *)*v7;
  }
  v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10 = UIContentSizeCategoryLarge;
  v9(v5, v2);
  return v10;
}

uint64_t Color.init(hex:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t result;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  _QWORD v32[2];
  _QWORD v33[2];
  unint64_t v34;
  uint64_t v35;

  v31 = type metadata accessor for Color.RGBColorSpace(0);
  v4 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v6 = (char *)&v32[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CharacterSet(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v32[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = a1;
  v35 = a2;
  static CharacterSet.whitespacesAndNewlines.getter(v9);
  v12 = sub_100013080();
  v13 = StringProtocol.trimmingCharacters(in:)(v11, &type metadata for String, v12);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  swift_bridgeObjectRelease(a2);
  v34 = v13;
  v35 = v15;
  v33[0] = 35;
  v33[1] = 0xE100000000000000;
  v32[0] = 0;
  v32[1] = 0xE000000000000000;
  v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v33, v32, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v12, v12, v12);
  v18 = v17;
  swift_bridgeObjectRelease(v15);
  v34 = 0;
  v19 = String.count.getter(v16, v18);
  v20 = objc_allocWithZone((Class)NSScanner);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  v22 = objc_msgSend(v20, "initWithString:", v21);

  LODWORD(v21) = objc_msgSend(v22, "scanHexLongLong:", &v34);
  result = 0;
  if ((_DWORD)v21)
  {
    if (v19 == 8)
    {
      v25 = v34 >> 24;
      v26 = v34 >> 16;
      v24 = v34 >> 8;
      v27 = (double)v34 / 255.0;
      goto LABEL_6;
    }
    if (v19 == 6)
    {
      LOBYTE(v24) = v34;
      v25 = v34 >> 16;
      v26 = v34 >> 8;
      v27 = 1.0;
LABEL_6:
      v28 = (double)v25 / 255.0;
      v29 = (double)v26 / 255.0;
      v30 = (double)v24 / 255.0;
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Color.RGBColorSpace.sRGB(_:), v31);
      return Color.init(_:red:green:blue:opacity:)(v6, v28, v29, v30, v27);
    }
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetDiamondShape()
{
  return &type metadata for SportsWidgetDiamondShape;
}

unint64_t sub_10002693C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100106EF0;
  if (!qword_100106EF0)
  {
    v1 = sub_100008F80(&qword_100106EF8);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100106EF0);
  }
  return result;
}

double sub_100026988@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double MidY;
  double MaxX;
  double MaxY;
  double MinX;
  double MinY;
  char v15;
  double result;
  __int128 v17;
  double MidX;
  _OWORD v19[2];
  char v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;

  Path.init()(v19);
  v21.origin.x = a2;
  v21.origin.y = a3;
  v21.size.width = a4;
  v21.size.height = a5;
  MidX = CGRectGetMidX(v21);
  v22.origin.x = a2;
  v22.origin.y = a3;
  v22.size.width = a4;
  v22.size.height = a5;
  MidY = CGRectGetMidY(v22);
  v23.origin.x = a2;
  v23.origin.y = a3;
  v23.size.width = a4;
  v23.size.height = a5;
  MaxX = CGRectGetMaxX(v23);
  Path.move(to:)(MaxX, MidY);
  v24.origin.x = a2;
  v24.origin.y = a3;
  v24.size.width = a4;
  v24.size.height = a5;
  MaxY = CGRectGetMaxY(v24);
  v25.origin.x = a2;
  v25.origin.y = a3;
  v25.size.width = a4;
  v25.size.height = a5;
  MinX = CGRectGetMinX(v25);
  v26.origin.x = a2;
  v26.origin.y = a3;
  v26.size.width = a4;
  v26.size.height = a5;
  MinY = CGRectGetMinY(v26);
  Path.addLine(to:)(MidX, MaxY);
  Path.addLine(to:)(MinX, MidY);
  Path.addLine(to:)(MidX, MinY);
  Path.addLine(to:)(MaxX, MidY);
  v15 = v20;
  result = *(double *)v19;
  v17 = v19[1];
  *(_OWORD *)a1 = v19[0];
  *(_OWORD *)(a1 + 16) = v17;
  *(_BYTE *)(a1 + 32) = v15;
  return result;
}

uint64_t sub_100026ADC()
{
  return Shape.sizeThatFits(_:)();
}

void (*sub_100026AF4(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_100026B50;
}

void sub_100026B50(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_100026B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100026D30();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100026BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100026D30();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100026C20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100026D30();
  return Shape.body.getter(a1, v2);
}

unint64_t sub_100026C5C()
{
  unint64_t result;

  result = qword_100106F00;
  if (!qword_100106F00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_100106F00);
  }
  return result;
}

unint64_t sub_100026CA4()
{
  unint64_t result;

  result = qword_100106F08;
  if (!qword_100106F08)
  {
    result = swift_getWitnessTable(&unk_1000C6E6C, &type metadata for SportsWidgetDiamondShape);
    atomic_store(result, (unint64_t *)&qword_100106F08);
  }
  return result;
}

unint64_t sub_100026CEC()
{
  unint64_t result;

  result = qword_100106F10;
  if (!qword_100106F10)
  {
    result = swift_getWitnessTable(&unk_1000C6E1C, &type metadata for SportsWidgetDiamondShape);
    atomic_store(result, (unint64_t *)&qword_100106F10);
  }
  return result;
}

unint64_t sub_100026D30()
{
  unint64_t result;

  result = qword_100106F18;
  if (!qword_100106F18)
  {
    result = swift_getWitnessTable(&unk_1000C6EBC, &type metadata for SportsWidgetDiamondShape);
    atomic_store(result, (unint64_t *)&qword_100106F18);
  }
  return result;
}

uint64_t sub_100026D74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, _QWORD, uint64_t);
  uint64_t (*v48)(char *, uint64_t);
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v44 = a2;
  v3 = type metadata accessor for WidgetLocation(0);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v41 - v8;
  __chkstk_darwin(v7);
  v50 = (char *)&v41 - v10;
  v11 = type metadata accessor for WidgetFamily(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v49 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v41 - v16;
  v18 = static Font.caption.getter(v15);
  v47 = *(void (**)(char *, _QWORD, uint64_t))(v12 + 104);
  v47(v17, enum case for WidgetFamily.systemLarge(_:), v11);
  v19 = sub_1000270C4();
  v20 = a1;
  dispatch thunk of RawRepresentable.rawValue.getter(&v52, v11, v19);
  dispatch thunk of RawRepresentable.rawValue.getter(&v51, v11, v19);
  v22 = v51;
  v21 = v52;
  v48 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  v23 = v48(v17, v11);
  if (v21 == v22)
  {
    v24 = static Font.body.getter(v23);
LABEL_8:
    v38 = v24;
    swift_release(v18);
    return v38;
  }
  v42 = v6;
  v43 = v9;
  v47(v17, enum case for WidgetFamily.systemExtraLarge(_:), v11);
  dispatch thunk of RawRepresentable.rawValue.getter(&v52, v11, v19);
  dispatch thunk of RawRepresentable.rawValue.getter(&v51, v11, v19);
  v26 = v51;
  v25 = v52;
  v48(v17, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v49, v20, v11);
  v27 = v45;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
  v29 = v46;
  v28(v50, v44, v46);
  if (v25 == v26)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v50, v29);
    v30 = v48(v49, v11);
LABEL_7:
    v24 = static Font.subheadline.getter(v30);
    goto LABEL_8;
  }
  v47(v17, enum case for WidgetFamily.systemSmall(_:), v11);
  dispatch thunk of RawRepresentable.rawValue.getter(&v52, v11, v19);
  dispatch thunk of RawRepresentable.rawValue.getter(&v51, v11, v19);
  v32 = v51;
  v31 = v52;
  v48(v17, v11);
  v33 = v43;
  v34 = ((uint64_t (*)(char *, char *, uint64_t))v28)(v43, v50, v29);
  if (v31 != v32)
  {
    v40 = *(void (**)(char *, uint64_t))(v27 + 8);
    v40(v33, v29);
    v40(v50, v29);
    v48(v49, v11);
    return v18;
  }
  v35 = v42;
  static WidgetLocation.lockScreen.getter(v34);
  v36 = static WidgetLocation.== infix(_:_:)(v33, v35);
  v37 = *(void (**)(char *, uint64_t))(v27 + 8);
  v37(v35, v29);
  v37(v33, v29);
  v37(v50, v29);
  v30 = v48(v49, v11);
  if ((v36 & 1) != 0)
    goto LABEL_7;
  return v18;
}

unint64_t sub_1000270C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100106F20;
  if (!qword_100106F20)
  {
    v1 = type metadata accessor for WidgetFamily(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WidgetFamily, v1);
    atomic_store(result, (unint64_t *)&qword_100106F20);
  }
  return result;
}

uint64_t destroy for TVWidgetNoContentTextViewLayout(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t _s17TVWidgetExtension31TVWidgetNoContentTextViewLayoutVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for TVWidgetNoContentTextViewLayout(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

__n128 initializeWithTake for TVWidgetNoContentTextViewLayout(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for TVWidgetNoContentTextViewLayout(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TVWidgetNoContentTextViewLayout(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TVWidgetNoContentTextViewLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TVWidgetNoContentTextViewLayout()
{
  return &type metadata for TVWidgetNoContentTextViewLayout;
}

_QWORD *initializeBufferWithCopyOfBuffer for SportsWidgetLogoViewLayout(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for SportsWidgetLogoViewLayout(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

_QWORD *assignWithTake for SportsWidgetLogoViewLayout(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a1[1];
  a1[1] = a2[1];
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for SportsWidgetLogoViewLayout()
{
  return &type metadata for SportsWidgetLogoViewLayout;
}

uint64_t destroy for TVWidgetContentViewLayout(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for TVWidgetContentViewLayout(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for TVWidgetContentViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for TVWidgetContentViewLayout(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v5);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for TVWidgetContentViewLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TVWidgetContentViewLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TVWidgetContentViewLayout()
{
  return &type metadata for TVWidgetContentViewLayout;
}

double sub_1000275B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void (*v4)(char *, _QWORD, uint64_t);
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(void (**)(char *, _QWORD, uint64_t))(v1 + 104);
  v4(v3, enum case for WidgetFamily.systemSmall(_:), v0);
  v5 = sub_1000270C4();
  dispatch thunk of RawRepresentable.rawValue.getter(&v13, v0, v5);
  dispatch thunk of RawRepresentable.rawValue.getter(&v12, v0, v5);
  v7 = v12;
  v6 = v13;
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v3, v0);
  result = 20.0;
  if (v6 != v7)
  {
    ((void (*)(char *, _QWORD, uint64_t, double))v4)(v3, enum case for WidgetFamily.systemMedium(_:), v0, 20.0);
    dispatch thunk of RawRepresentable.rawValue.getter(&v13, v0, v5);
    dispatch thunk of RawRepresentable.rawValue.getter(&v12, v0, v5);
    v11 = v12;
    v10 = v13;
    v8(v3, v0);
    result = 0.0;
    if (v10 == v11)
      return 16.0;
  }
  return result;
}

double sub_1000276F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, _QWORD, uint64_t);
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v17 - v7;
  v9 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v9((char *)&v17 - v7, enum case for WidgetFamily.systemLarge(_:), v2);
  v10 = sub_1000270C4();
  dispatch thunk of RawRepresentable.rawValue.getter(&v18, v2, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v17, v2, v10);
  v12 = v17;
  v11 = v18;
  v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v8, v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  if (v11 == v12)
  {
    v13(v6, v2);
  }
  else
  {
    v9(v8, enum case for WidgetFamily.systemExtraLarge(_:), v2);
    dispatch thunk of RawRepresentable.rawValue.getter(&v18, v2, v10);
    dispatch thunk of RawRepresentable.rawValue.getter(&v17, v2, v10);
    v15 = v17;
    v14 = v18;
    v13(v8, v2);
    v13(v6, v2);
    result = 0.0;
    if (v14 != v15)
      return result;
  }
  return 18.0;
}

double sub_100027884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void (*v4)(char *, _QWORD, uint64_t);
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(void (**)(char *, _QWORD, uint64_t))(v1 + 104);
  v4(v3, enum case for WidgetFamily.systemSmall(_:), v0);
  v5 = sub_1000270C4();
  dispatch thunk of RawRepresentable.rawValue.getter(&v13, v0, v5);
  dispatch thunk of RawRepresentable.rawValue.getter(&v12, v0, v5);
  v7 = v12;
  v6 = v13;
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v3, v0);
  if (v6 == v7)
    return 40.0;
  v4(v3, enum case for WidgetFamily.systemMedium(_:), v0);
  dispatch thunk of RawRepresentable.rawValue.getter(&v13, v0, v5);
  dispatch thunk of RawRepresentable.rawValue.getter(&v12, v0, v5);
  v11 = v12;
  v10 = v13;
  v8(v3, v0);
  result = 1.79769313e308;
  if (v10 == v11)
    return 30.0;
  return result;
}

double sub_1000279D0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_BYTE *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  double result;
  _BYTE v15[7];

  v2 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin();
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 7];
  v5 = enum case for Color.RGBColorSpace.sRGB(_:);
  v7 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 104);
  v7(v4, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  v8 = Color.init(_:red:green:blue:opacity:)(v4, 0.0, 0.0, 0.0, 1.0);
  v9 = Color.opacity(_:)(0.08);
  swift_release(v8);
  v7(v4, v5, v2);
  v10 = Color.init(_:red:green:blue:opacity:)(v4, 0.0, 0.0, 0.0, 1.0);
  v11 = Color.opacity(_:)(0.15);
  swift_release(v10);
  v12 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.31372549, 0.4, 1.0);
  *(_QWORD *)a1 = 0x3FFC71C71C71C71CLL;
  *(_QWORD *)(a1 + 8) = v9;
  *(_OWORD *)(a1 + 16) = xmmword_1000C7000;
  *(_QWORD *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 40) = xmmword_1000C7010;
  *(_BYTE *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 57) = *(_DWORD *)v15;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)&v15[3];
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 120) = xmmword_1000C7020;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0x4018000000000000;
  result = 11.0;
  *(_OWORD *)(a1 + 160) = xmmword_1000C7030;
  return result;
}

void destroy for TVWidgetImageViewLayout(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 64));

}

uint64_t initializeWithCopy for TVWidgetImageViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  id v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v5;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v8 = *(void **)(a2 + 112);
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = v7;
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  v10 = v8;
  return a1;
}

uint64_t assignWithCopy for TVWidgetImageViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v10 = *(void **)(a2 + 112);
  v11 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v10;
  v12 = v10;

  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  return a1;
}

__n128 initializeWithTake for TVWidgetImageViewLayout(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for TVWidgetImageViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(v5);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release(v6);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  v8 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);

  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for TVWidgetImageViewLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 176))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TVWidgetImageViewLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TVWidgetImageViewLayout()
{
  return &type metadata for TVWidgetImageViewLayout;
}

unint64_t sub_100027F20()
{
  unint64_t result;

  result = qword_100106F28;
  if (!qword_100106F28)
  {
    result = swift_getWitnessTable(&unk_1000C70F0, &type metadata for TVSettingsShowSportsScoresEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100106F28);
  }
  return result;
}

uint64_t sub_100027F64()
{
  return sub_100013840(&qword_100106F30, &qword_100106F38, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

void sub_100027F90()
{
  qword_10011ECB0 = (uint64_t)&off_1000F6B38;
}

uint64_t sub_100027FA4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011ECB8);
  sub_10000909C(v16, (uint64_t)qword_10011ECB8);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001000BF960);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_1000281C4()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000905C(v0, qword_10011ECD0);
  sub_10000909C(v0, (uint64_t)qword_10011ECD0);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000019, 0x80000001000BFA60);
}

uint64_t sub_100028224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008EF4(&qword_100106608);
  sub_10000905C(v0, qword_10011ECE8);
  v1 = sub_10000909C(v0, (uint64_t)qword_10011ECE8);
  IntentDescription.init(stringLiteral:)(0xD000000000000039, 0x80000001000BFA20);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_1000282AC()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1000C7698);
  qword_10011ED00 = result;
  return result;
}

uint64_t sub_1000282D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[15] = a2;
  v3[16] = a3;
  v3[14] = a1;
  return swift_task_switch(sub_1000282EC, 0, 0);
}

uint64_t sub_1000282EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 56) = v2;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 226));
  *(_BYTE *)(v0 + 225) = *(_BYTE *)(v0 + 226);
  if (qword_100105C30 != -1)
    swift_once(&qword_100105C30, sub_1000282AC);
  v3 = qword_10011ED00;
  *(_QWORD *)(v0 + 152) = qword_10011ED00;
  v4 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v3);
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 160) = v5;
  v6 = sub_100013840(&qword_1001070F0, &qword_1001070F8, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 168) = v6;
  *v5 = v0;
  v5[1] = sub_1000283F4;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 225, v3, &type metadata for Bool, v6);
}

uint64_t sub_1000283F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v6 = sub_100017850;
  else
    v6 = sub_10002847C;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10002847C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  IntentParameter.wrappedValue.getter(v0 + 11);
  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[13];
  v0[23] = v2;
  v0[24] = v3;
  v0[8] = v1;
  v0[9] = v2;
  v0[10] = v3;
  v4 = qword_10011ED00;
  v0[25] = qword_10011ED00;
  v5 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain(v4);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[26] = v6;
  *v6 = v0;
  v6[1] = sub_100017770;
  return AppEntity._value<A, B>(for:)(v0 + 28, v4, v0[21]);
}

double sub_10002851C()
{
  double result;

  if (qword_100105C30 != -1)
    swift_once(&qword_100105C30, sub_1000282AC);
  *(_QWORD *)&result = swift_retain(qword_10011ED00).n128_u64[0];
  return result;
}

unint64_t sub_100028560()
{
  unint64_t result;

  result = qword_100106F40;
  if (!qword_100106F40)
  {
    result = swift_getWitnessTable(&unk_1000C7180, &type metadata for TVSettingsShowSportsScoresEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100106F40);
  }
  return result;
}

unint64_t sub_1000285A8()
{
  unint64_t result;

  result = qword_100106F48;
  if (!qword_100106F48)
  {
    result = swift_getWitnessTable(&unk_1000C71A8, &type metadata for TVSettingsShowSportsScoresEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100106F48);
  }
  return result;
}

uint64_t sub_1000285EC(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000D203C, 1) + 8);
}

uint64_t sub_100028610(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100027F20();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_100028650@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105C20, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10011ECD0, (uint64_t)sub_1000281C4, a1);
}

uint64_t sub_100028674@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100105C28 != -1)
    swift_once(&qword_100105C28, sub_100028224);
  v2 = sub_100008EF4(&qword_100106608);
  v3 = sub_10000909C(v2, (uint64_t)qword_10011ECE8);
  return sub_100016518(v3, a1);
}

uint64_t sub_1000286D4(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_10010710C);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_1000145D8;
  *(_OWORD *)(v4 + 120) = *v1;
  *(_QWORD *)(v4 + 112) = a1;
  return swift_task_switch(sub_1000282EC, 0, 0);
}

uint64_t sub_10002873C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100029748();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100028760()
{
  return 0xD000000000000031;
}

unint64_t sub_100028780()
{
  unint64_t result;

  result = qword_100106F58;
  if (!qword_100106F58)
  {
    result = swift_getWitnessTable(&unk_1000C7204, &type metadata for TVSettingsShowSportsScoresEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106F58);
  }
  return result;
}

unint64_t sub_1000287C8()
{
  unint64_t result;

  result = qword_100106F60;
  if (!qword_100106F60)
  {
    result = swift_getWitnessTable(&unk_1000C7664, &type metadata for TVSettingsShowSportsScoresEntity);
    atomic_store(result, (unint64_t *)&qword_100106F60);
  }
  return result;
}

uint64_t sub_10002880C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100028824, 0, 0);
}

uint64_t sub_100028824()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = sub_10007766C() & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002887C(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_100028898, 0, 0);
}

uint64_t sub_100028898()
{
  uint64_t v0;

  sub_1000787C4(*(_BYTE *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000288E4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000288FC, 0, 0);
}

uint64_t sub_1000288FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(v0 + 16);
  *v1 = sub_100029A70();
  v1[1] = v2;
  v1[2] = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10002893C()
{
  unint64_t result;

  result = qword_100106F70;
  if (!qword_100106F70)
  {
    result = swift_getWitnessTable(&unk_1000C723C, &type metadata for TVSettingsShowSportsScoresEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106F70);
  }
  return result;
}

uint64_t sub_100028980(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100029200();
  *v4 = v2;
  v4[1] = sub_100014BF8;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_1000289EC()
{
  unint64_t result;

  result = qword_100106F80;
  if (!qword_100106F80)
  {
    result = swift_getWitnessTable(&unk_1000C7294, &type metadata for TVSettingsShowSportsScoresEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106F80);
  }
  return result;
}

unint64_t sub_100028A34()
{
  unint64_t result;

  result = qword_100106F88;
  if (!qword_100106F88)
  {
    result = swift_getWitnessTable(&unk_1000C72F4, &type metadata for TVSettingsShowSportsScoresEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106F88);
  }
  return result;
}

unint64_t sub_100028A7C()
{
  unint64_t result;

  result = qword_100106F90[0];
  if (!qword_100106F90[0])
  {
    result = swift_getWitnessTable(&unk_1000C760C, &type metadata for TVSettingsShowSportsScoresEntity);
    atomic_store(result, qword_100106F90);
  }
  return result;
}

uint64_t sub_100028AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100029200();
  *v5 = v2;
  v5[1] = sub_100014D9C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100028B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100029200();
  *v4 = v2;
  v4[1] = sub_100016564;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_100028B98()
{
  unint64_t result;

  result = qword_100106FA8;
  if (!qword_100106FA8)
  {
    result = swift_getWitnessTable(&unk_1000C731C, &type metadata for TVSettingsShowSportsScoresEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100106FA8);
  }
  return result;
}

unint64_t sub_100028BE0()
{
  unint64_t result;

  result = qword_100106FB0;
  if (!qword_100106FB0)
  {
    result = swift_getWitnessTable(&unk_1000C75B4, &type metadata for TVSettingsShowSportsScoresEntity);
    atomic_store(result, (unint64_t *)&qword_100106FB0);
  }
  return result;
}

unint64_t sub_100028C28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100106FB8;
  if (!qword_100106FB8)
  {
    v1 = sub_100008F80(qword_100106FC0);
    sub_100028BE0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100106FB8);
  }
  return result;
}

uint64_t sub_100028C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10002893C();
  *v5 = v2;
  v5[1] = sub_100016560;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for TVSettingsShowSportsScoresEntity.Query()
{
  return &type metadata for TVSettingsShowSportsScoresEntity.Query;
}

ValueMetadata *type metadata accessor for TVSettingsShowSportsScoresEntity()
{
  return &type metadata for TVSettingsShowSportsScoresEntity;
}

ValueMetadata *type metadata accessor for TVSettingsShowSportsScoresEntity.UpdateIntent_value()
{
  return &type metadata for TVSettingsShowSportsScoresEntity.UpdateIntent_value;
}

uint64_t sub_100028D28()
{
  return sub_100013840(&qword_1001066D0, &qword_1001066D8, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100028D58(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10002904C();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100015960(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_100028DA0@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105C18, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10011ECB8, (uint64_t)sub_100027FA4, a1);
}

uint64_t sub_100028DC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100028A7C();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100028DFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000287C8();
  return _UniqueEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_100028E34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100028EB8();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100028E70()
{
  unint64_t result;

  result = qword_100106FD8;
  if (!qword_100106FD8)
  {
    result = swift_getWitnessTable(&unk_1000C73A4, &type metadata for TVSettingsShowSportsScoresEntity);
    atomic_store(result, (unint64_t *)&qword_100106FD8);
  }
  return result;
}

unint64_t sub_100028EB8()
{
  unint64_t result;

  result = qword_100106FE8;
  if (!qword_100106FE8)
  {
    result = swift_getWitnessTable(&unk_1000C73CC, &type metadata for TVSettingsShowSportsScoresEntity);
    atomic_store(result, (unint64_t *)&qword_100106FE8);
  }
  return result;
}

unint64_t sub_100028F00()
{
  unint64_t result;

  result = qword_100106FF0;
  if (!qword_100106FF0)
  {
    result = swift_getWitnessTable(&unk_1000C73FC, &type metadata for TVSettingsShowSportsScoresEntity);
    atomic_store(result, (unint64_t *)&qword_100106FF0);
  }
  return result;
}

unint64_t sub_100028F48()
{
  unint64_t result;

  result = qword_100106FF8;
  if (!qword_100106FF8)
  {
    result = swift_getWitnessTable(&unk_1000C7424, &type metadata for TVSettingsShowSportsScoresEntity);
    atomic_store(result, (unint64_t *)&qword_100106FF8);
  }
  return result;
}

unint64_t sub_100028F90()
{
  unint64_t result;

  result = qword_100107000;
  if (!qword_100107000)
  {
    result = swift_getWitnessTable(&unk_1000C744C, &type metadata for TVSettingsShowSportsScoresEntity);
    atomic_store(result, (unint64_t *)&qword_100107000);
  }
  return result;
}

unint64_t sub_100028FD4(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_100029008();
  a1[2] = sub_10002904C();
  result = sub_1000287C8();
  a1[3] = result;
  return result;
}

unint64_t sub_100029008()
{
  unint64_t result;

  result = qword_100107050;
  if (!qword_100107050)
  {
    result = swift_getWitnessTable(&unk_1000C754C, &type metadata for TVSettingsShowSportsScoresEntity);
    atomic_store(result, (unint64_t *)&qword_100107050);
  }
  return result;
}

unint64_t sub_10002904C()
{
  unint64_t result;

  result = qword_100107058;
  if (!qword_100107058)
  {
    result = swift_getWitnessTable(&unk_1000C7514, &type metadata for TVSettingsShowSportsScoresEntity);
    atomic_store(result, (unint64_t *)&qword_100107058);
  }
  return result;
}

unint64_t sub_100029090(uint64_t a1)
{
  unint64_t result;

  result = sub_1000290B4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000290B4()
{
  unint64_t result;

  result = qword_1001070A0;
  if (!qword_1001070A0)
  {
    result = swift_getWitnessTable(&unk_1000C757C, &type metadata for TVSettingsShowSportsScoresEntity);
    atomic_store(result, (unint64_t *)&qword_1001070A0);
  }
  return result;
}

uint64_t sub_1000290F8()
{
  return sub_100013840(&qword_1001070A8, &qword_1001070B0, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

unint64_t sub_100029128()
{
  unint64_t result;

  result = qword_1001070B8;
  if (!qword_1001070B8)
  {
    result = swift_getWitnessTable(&unk_1000C74DC, &type metadata for TVSettingsShowSportsScoresEntity);
    atomic_store(result, (unint64_t *)&qword_1001070B8);
  }
  return result;
}

unint64_t sub_100029170()
{
  unint64_t result;

  result = qword_1001070C0;
  if (!qword_1001070C0)
  {
    result = swift_getWitnessTable(&unk_1000C74AC, &type metadata for TVSettingsShowSportsScoresEntity);
    atomic_store(result, (unint64_t *)&qword_1001070C0);
  }
  return result;
}

unint64_t sub_1000291B8()
{
  unint64_t result;

  result = qword_1001070C8;
  if (!qword_1001070C8)
  {
    result = swift_getWitnessTable(&unk_1000C7474, &type metadata for TVSettingsShowSportsScoresEntity);
    atomic_store(result, (unint64_t *)&qword_1001070C8);
  }
  return result;
}

unint64_t sub_100029200()
{
  unint64_t result;

  result = qword_1001070D0;
  if (!qword_1001070D0)
  {
    result = swift_getWitnessTable(&unk_1000C71C4, &type metadata for TVSettingsShowSportsScoresEntity.Query);
    atomic_store(result, (unint64_t *)&qword_1001070D0);
  }
  return result;
}

uint64_t sub_100029244@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  unint64_t v52;
  _QWORD v53[2];
  unint64_t v54;
  unint64_t v55;

  v49 = a1;
  v1 = sub_100008EF4(&qword_100106888);
  v42 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100106890);
  v5 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  v44 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008EF4(&qword_100106898);
  v9 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  v46 = v9;
  __chkstk_darwin(v8);
  v40 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008EF4(&qword_1001068A0);
  v12 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  v48 = v12;
  __chkstk_darwin(v11);
  v41 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v50, "com.apple.tv.");
  HIWORD(v50[1]) = -4864;
  v54 = (unint64_t)&type metadata for TVSettingsShowSportsScoresWidget;
  v14 = sub_100008EF4(&qword_100107168);
  v15._countAndFlagsBits = String.init<A>(describing:)(&v54, v14);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17 = v50[0];
  v18 = v50[1];
  KeyPath = swift_getKeyPath(&unk_1000C7698);
  v20 = sub_100008EF4(&qword_1001068B0);
  v21 = sub_1000287C8();
  v22 = sub_100013840(&qword_1001068B8, &qword_1001068B0, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  ControlToggle.init<A, B, C, D, E, F>(kind:intentUpdatableProperty:content:value:)(v17, v18, KeyPath, sub_100029684, 0, sub_100018B14, 0, v20, &type metadata for Text, v21, v22, &protocol witness table for Text);
  v50[0] = &type metadata for TVSettingsShowSportsScoresWidget;
  v23 = String.init<A>(describing:)(v50, v14);
  v25 = v24;
  v50[0] = v23;
  v50[1] = v24;
  v54 = 0x746567646957;
  v55 = 0xE600000000000000;
  v53[0] = 0x656C67676F54;
  v53[1] = 0xE600000000000000;
  v26 = sub_100013080();
  v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v54, v53, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v26, v26, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v25);
  v50[0] = v27;
  v50[1] = v29;
  v30 = sub_100013840(&qword_1001068C0, &qword_100106888, (uint64_t)&protocol conformance descriptor for ControlToggle<A>);
  WidgetConfiguration.configurationDisplayName<A>(_:)(v50, v1, &type metadata for String, v30, v26);
  swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v3, v1);
  v54 = 0xD00000000000002DLL;
  v55 = 0x80000001000BFA80;
  v50[0] = v1;
  v50[1] = &type metadata for String;
  v51 = v30;
  v52 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v32 = v40;
  v33 = v43;
  WidgetConfiguration.description<A>(_:)(&v54, v43, &type metadata for String, OpaqueTypeConformance2, v26);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v33);
  v50[0] = v33;
  v50[1] = &type metadata for String;
  v51 = OpaqueTypeConformance2;
  v52 = v26;
  v34 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v35 = v41;
  v36 = v45;
  WidgetConfiguration.disablesControlStateCaching()(v45, v34);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v36);
  v50[0] = v36;
  v50[1] = v34;
  v37 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v38 = v47;
  WidgetConfiguration.hiddenControl()(v47, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v35, v38);
}

uint64_t sub_100029684@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  _QWORD v8[2];

  v2 = sub_100008EF4(&qword_1001068B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[0] = 0xD000000000000012;
  v8[1] = 0x80000001000BF960;
  v6 = sub_100013080();
  Label<>.init<A>(_:systemImage:)(v8, 1918985575, 0xE400000000000000, &type metadata for String, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
}

uint64_t sub_100029748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD v33[3];

  v0 = sub_100008EF4(&qword_100106808);
  __chkstk_darwin(v0);
  v32 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for InputConnectionBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v31 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_1001065E0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  v30 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008EF4(&qword_100107100);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001CLL, 0x80000001000BF9C0);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v29(v13, 1, 1, v14);
  v18 = type metadata accessor for IntentDialog(0);
  memset(v33, 0, sizeof(v33));
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v10, 1, 1, v18);
  v19(v8, 1, 1, v18);
  v20 = enum case for InputConnectionBehavior.default(_:);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v21 = v31;
  v28(v31, enum case for InputConnectionBehavior.default(_:), v2);
  v22 = sub_100028A7C();
  v27 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v17, v13, v33, v10, v8, v21, v22);
  sub_100008EF4(&qword_100106818);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000032, 0x80000001000BF9E0);
  v29(v13, 1, 1, v30);
  LOBYTE(v33[0]) = 2;
  v23 = type metadata accessor for Bool.IntentDisplayName(0);
  v24 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v32, 1, 1, v23);
  v19(v10, 1, 1, v18);
  v28(v21, v20, v2);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v17, v13, v33, v24, v10, v21);
  return v27;
}

uint64_t sub_100029A70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  ValueMetadata *v19;

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &type metadata for TVSettingsShowSportsScoresEntity;
  v13 = sub_100008EF4(&qword_1001070D8);
  v14 = String.init<A>(describing:)(&v19, v13);
  sub_100008EF4(&qword_100106F38);
  v15 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001000BF960);
  static Locale.current.getter(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0xD000000000000012, 0x80000001000BF530, v6, v3, 0, 0, 256);
  v16 = sub_100013840(&qword_1001070F0, &qword_1001070F8, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v12, &unk_1001070E0, 0, &unk_1001070E8, 0, &type metadata for TVSettingsShowSportsScoresEntity.UpdateIntent_value, v16);
  return v14;
}

uint64_t sub_100029C94@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  return swift_retain(v2);
}

ValueMetadata *type metadata accessor for TVSettingsShowSportsScoresWidget()
{
  return &type metadata for TVSettingsShowSportsScoresWidget;
}

uint64_t sub_100029CB0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D208C, 1);
}

unint64_t sub_100029CC0(uint64_t a1)
{
  unint64_t result;

  result = sub_100029CE4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100029CE4()
{
  unint64_t result;

  result = qword_100107158;
  if (!qword_100107158)
  {
    result = swift_getWitnessTable(&unk_1000C76E4, &type metadata for TVSettingsShowSportsScoresWidget);
    atomic_store(result, (unint64_t *)&qword_100107158);
  }
  return result;
}

unint64_t sub_100029D28(uint64_t a1)
{
  unint64_t result;

  result = sub_100029D4C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100029D4C()
{
  unint64_t result;

  result = qword_100107160;
  if (!qword_100107160)
  {
    result = swift_getWitnessTable(&unk_1000C7724, &type metadata for TVSettingsShowSportsScoresWidget);
    atomic_store(result, (unint64_t *)&qword_100107160);
  }
  return result;
}

uint64_t sub_100029D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;

  v0 = sub_100008F80(&qword_1001068A0);
  v1 = sub_100008F80(&qword_100106898);
  v2 = sub_100008F80(&qword_100106890);
  v3 = sub_100008F80(&qword_100106888);
  v4 = sub_100013840(&qword_1001068C0, &qword_100106888, (uint64_t)&protocol conformance descriptor for ControlToggle<A>);
  v5 = sub_100013080();
  v10 = v3;
  v11 = &type metadata for String;
  v12 = v4;
  v13 = v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v10 = v2;
  v11 = &type metadata for String;
  v12 = OpaqueTypeConformance2;
  v13 = v5;
  v7 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v10 = v1;
  v11 = (void *)v7;
  v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v10 = v0;
  v11 = (void *)v8;
  return swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.hiddenControl()>>, 1);
}

uint64_t sub_100029EA0@<X0>(char a1@<W0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t result;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[7];
  _QWORD v52[6];
  uint64_t v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  v45 = a4;
  v46 = a2;
  v6 = sub_100008EF4(&qword_100107170);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008EF4(&qword_100107178);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008EF4(&qword_100107180);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008EF4(&qword_100107188);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
  {
    sub_10001355C(v46, (uint64_t)v8, &qword_100107170);
    sub_10001355C((uint64_t)v8, (uint64_t)v11, &qword_100107170);
    swift_storeEnumTagMultiPayload(v11, v9, 1);
    v39 = sub_10002A19C();
    v40 = sub_10002A220();
    _ConditionalContent<>.init(storage:)(v11, v12, v6, v39, v40);
    v37 = (uint64_t)v8;
    v38 = &qword_100107170;
    goto LABEL_5;
  }
  v43 = v9;
  v44 = v12;
  v19 = v46;
  v20 = static Alignment.center.getter(v16);
  v42 = v21;
  v22 = a3[10];
  v51[4] = a3[9];
  v51[5] = v22;
  v51[6] = a3[11];
  v23 = a3[6];
  v51[0] = a3[5];
  v51[1] = v23;
  v24 = a3[8];
  v51[2] = a3[7];
  v51[3] = v24;
  v25 = a3[2];
  v47 = a3[1];
  v48 = v25;
  v26 = a3[4];
  v49 = a3[3];
  v50 = v26;
  sub_100013880((uint64_t)v51, (uint64_t)v52, &qword_100107230);
  result = sub_100013880((uint64_t)v52, (uint64_t)&v53, &qword_100107230);
  v28 = v53;
  if (v53)
  {
    v29 = v54;
    v41 = v55;
    v30 = v56;
    v31 = v57;
    sub_10001355C(v19, (uint64_t)v14, &qword_100107170);
    v32 = v44;
    v33 = &v14[*(int *)(v44 + 36)];
    v34 = v42;
    *(_QWORD *)v33 = v20;
    *((_QWORD *)v33 + 1) = v34;
    *((_QWORD *)v33 + 2) = v28;
    v33[24] = v29;
    *((_OWORD *)v33 + 2) = v41;
    *((_QWORD *)v33 + 6) = v30;
    *((_QWORD *)v33 + 7) = v31;
    sub_10001355C((uint64_t)v14, (uint64_t)v11, &qword_100107180);
    swift_storeEnumTagMultiPayload(v11, v43, 0);
    sub_10002A534(v52);
    v35 = sub_10002A19C();
    v36 = sub_10002A220();
    _ConditionalContent<>.init(storage:)(v11, v32, v6, v35, v36);
    v37 = (uint64_t)v14;
    v38 = &qword_100107180;
LABEL_5:
    sub_1000135A0(v37, v38);
    sub_100013880((uint64_t)v18, v45, &qword_100107188);
    return sub_10002A4D0((uint64_t)a3);
  }
  __break(1u);
  return result;
}

unint64_t sub_10002A19C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100107190;
  if (!qword_100107190)
  {
    v1 = sub_100008F80(&qword_100107180);
    sub_10002A220();
    sub_100013840(&qword_100107220, &qword_100107228, (uint64_t)&protocol conformance descriptor for _MaskAlignmentEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100107190);
  }
  return result;
}

unint64_t sub_10002A220()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100107198;
  if (!qword_100107198)
  {
    v1 = sub_100008F80(&qword_100107170);
    sub_100013840(&qword_1001071A0, &qword_1001071A8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    sub_10002A2A4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100107198);
  }
  return result;
}

unint64_t sub_10002A2A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001071B0;
  if (!qword_1001071B0)
  {
    v1 = sub_100008F80(&qword_1001071B8);
    sub_10002A36C(&qword_1001071C0, &qword_1001071C8, (void (*)(void))sub_10002A348);
    sub_100013840(&qword_100107210, &qword_100107218, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001071B0);
  }
  return result;
}

uint64_t sub_10002A348()
{
  return sub_10002A36C(&qword_1001071D0, &qword_1001071D8, (void (*)(void))sub_10002A3D4);
}

uint64_t sub_10002A36C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100008F80(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002A3D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001071E0;
  if (!qword_1001071E0)
  {
    v1 = sub_100008F80(&qword_1001071E8);
    sub_10002A458();
    sub_100013840(&qword_100107200, &qword_100107208, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001071E0);
  }
  return result;
}

unint64_t sub_10002A458()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001071F0;
  if (!qword_1001071F0)
  {
    v1 = sub_100008F80(&qword_1001071F8);
    swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001071F0);
  }
  return result;
}

uint64_t sub_10002A4D0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 80);

  swift_release(v4);
  swift_release(v3);

  swift_release(v5);
  return a1;
}

_QWORD *sub_10002A534(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

unint64_t sub_10002A560()
{
  unint64_t result;

  result = qword_100107238;
  if (!qword_100107238)
  {
    result = swift_getWitnessTable(&unk_1000C77D0, &type metadata for TVSettingsUseDownloadAVAdapterEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100107238);
  }
  return result;
}

uint64_t sub_10002A5A4()
{
  return sub_100013840(&qword_100107240, &qword_100107248, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

void sub_10002A5D0()
{
  qword_10011ED08 = (uint64_t)&off_1000F6BD8;
}

uint64_t sub_10002A5E4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011ED10);
  sub_10000909C(v16, (uint64_t)qword_10011ED10);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000BFAB0);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_10002A808()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000905C(v0, qword_10011ED28);
  sub_10000909C(v0, (uint64_t)qword_10011ED28);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000021, 0x80000001000BFBE0);
}

uint64_t sub_10002A868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008EF4(&qword_100106608);
  sub_10000905C(v0, qword_10011ED40);
  v1 = sub_10000909C(v0, (uint64_t)qword_10011ED40);
  IntentDescription.init(stringLiteral:)(0xD000000000000049, 0x80000001000BFB90);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_10002A8F0()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1000C7D78);
  qword_10011ED58 = result;
  return result;
}

uint64_t sub_10002A914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[15] = a2;
  v3[16] = a3;
  v3[14] = a1;
  return swift_task_switch(sub_10002A930, 0, 0);
}

uint64_t sub_10002A930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 56) = v2;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 226));
  *(_BYTE *)(v0 + 225) = *(_BYTE *)(v0 + 226);
  if (qword_100105C58 != -1)
    swift_once(&qword_100105C58, sub_10002A8F0);
  v3 = qword_10011ED58;
  *(_QWORD *)(v0 + 152) = qword_10011ED58;
  v4 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v3);
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 160) = v5;
  v6 = sub_100013840(&qword_100107400, &qword_100107408, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 168) = v6;
  *v5 = v0;
  v5[1] = sub_10002AA38;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 225, v3, &type metadata for Bool, v6);
}

uint64_t sub_10002AA38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v6 = sub_100017850;
  else
    v6 = sub_10002AAC0;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10002AAC0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  IntentParameter.wrappedValue.getter(v0 + 11);
  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[13];
  v0[23] = v2;
  v0[24] = v3;
  v0[8] = v1;
  v0[9] = v2;
  v0[10] = v3;
  v4 = qword_10011ED58;
  v0[25] = qword_10011ED58;
  v5 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain(v4);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[26] = v6;
  *v6 = v0;
  v6[1] = sub_100017770;
  return AppEntity._value<A, B>(for:)(v0 + 28, v4, v0[21]);
}

double sub_10002AB60()
{
  double result;

  if (qword_100105C58 != -1)
    swift_once(&qword_100105C58, sub_10002A8F0);
  *(_QWORD *)&result = swift_retain(qword_10011ED58).n128_u64[0];
  return result;
}

unint64_t sub_10002ABA4()
{
  unint64_t result;

  result = qword_100107250;
  if (!qword_100107250)
  {
    result = swift_getWitnessTable(&unk_1000C7860, &type metadata for TVSettingsUseDownloadAVAdapterEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100107250);
  }
  return result;
}

unint64_t sub_10002ABEC()
{
  unint64_t result;

  result = qword_100107258;
  if (!qword_100107258)
  {
    result = swift_getWitnessTable(&unk_1000C7888, &type metadata for TVSettingsUseDownloadAVAdapterEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100107258);
  }
  return result;
}

uint64_t sub_10002AC30(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000D2108, 1) + 8);
}

uint64_t sub_10002AC54(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10002A560();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10002AC94@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105C48, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10011ED28, (uint64_t)sub_10002A808, a1);
}

uint64_t sub_10002ACB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100105C50 != -1)
    swift_once(&qword_100105C50, sub_10002A868);
  v2 = sub_100008EF4(&qword_100106608);
  v3 = sub_10000909C(v2, (uint64_t)qword_10011ED40);
  return sub_100016518(v3, a1);
}

uint64_t sub_10002AD18(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_10010741C);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_1000145D8;
  *(_OWORD *)(v4 + 120) = *v1;
  *(_QWORD *)(v4 + 112) = a1;
  return swift_task_switch(sub_10002A930, 0, 0);
}

uint64_t sub_10002AD80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10002BD68();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_10002ADA4()
{
  return 0xD000000000000035;
}

unint64_t sub_10002ADC4()
{
  unint64_t result;

  result = qword_100107268;
  if (!qword_100107268)
  {
    result = swift_getWitnessTable(&unk_1000C78E4, &type metadata for TVSettingsUseDownloadAVAdapterEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100107268);
  }
  return result;
}

unint64_t sub_10002AE0C()
{
  unint64_t result;

  result = qword_100107270;
  if (!qword_100107270)
  {
    result = swift_getWitnessTable(&unk_1000C7D44, &type metadata for TVSettingsUseDownloadAVAdapterEntity);
    atomic_store(result, (unint64_t *)&qword_100107270);
  }
  return result;
}

uint64_t sub_10002AE50(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10002AE68, 0, 0);
}

uint64_t sub_10002AE68()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = sub_100077694() & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002AEC0(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_10002AEDC, 0, 0);
}

uint64_t sub_10002AEDC()
{
  uint64_t v0;

  sub_1000787F8((*(_BYTE *)(v0 + 16) & 1) == 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002AF30(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10002AF48, 0, 0);
}

uint64_t sub_10002AF48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(v0 + 16);
  *v1 = sub_10002C090();
  v1[1] = v2;
  v1[2] = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10002AF88()
{
  unint64_t result;

  result = qword_100107280;
  if (!qword_100107280)
  {
    result = swift_getWitnessTable(&unk_1000C791C, &type metadata for TVSettingsUseDownloadAVAdapterEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100107280);
  }
  return result;
}

uint64_t sub_10002AFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10002B820();
  *v4 = v2;
  v4[1] = sub_100014BF8;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_10002B038()
{
  unint64_t result;

  result = qword_100107290;
  if (!qword_100107290)
  {
    result = swift_getWitnessTable(&unk_1000C7974, &type metadata for TVSettingsUseDownloadAVAdapterEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100107290);
  }
  return result;
}

unint64_t sub_10002B080()
{
  unint64_t result;

  result = qword_100107298;
  if (!qword_100107298)
  {
    result = swift_getWitnessTable(&unk_1000C79D4, &type metadata for TVSettingsUseDownloadAVAdapterEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100107298);
  }
  return result;
}

unint64_t sub_10002B0C8()
{
  unint64_t result;

  result = qword_1001072A0[0];
  if (!qword_1001072A0[0])
  {
    result = swift_getWitnessTable(&unk_1000C7CEC, &type metadata for TVSettingsUseDownloadAVAdapterEntity);
    atomic_store(result, qword_1001072A0);
  }
  return result;
}

uint64_t sub_10002B10C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10002B820();
  *v5 = v2;
  v5[1] = sub_100014D9C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_10002B178(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10002B820();
  *v4 = v2;
  v4[1] = sub_100016564;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_10002B1E4()
{
  unint64_t result;

  result = qword_1001072B8;
  if (!qword_1001072B8)
  {
    result = swift_getWitnessTable(&unk_1000C79FC, &type metadata for TVSettingsUseDownloadAVAdapterEntity.Query);
    atomic_store(result, (unint64_t *)&qword_1001072B8);
  }
  return result;
}

unint64_t sub_10002B22C()
{
  unint64_t result;

  result = qword_1001072C0;
  if (!qword_1001072C0)
  {
    result = swift_getWitnessTable(&unk_1000C7C94, &type metadata for TVSettingsUseDownloadAVAdapterEntity);
    atomic_store(result, (unint64_t *)&qword_1001072C0);
  }
  return result;
}

unint64_t sub_10002B274()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001072C8;
  if (!qword_1001072C8)
  {
    v1 = sub_100008F80(qword_1001072D0);
    sub_10002B22C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001072C8);
  }
  return result;
}

uint64_t sub_10002B2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10002AF88();
  *v5 = v2;
  v5[1] = sub_100016560;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for TVSettingsUseDownloadAVAdapterEntity.Query()
{
  return &type metadata for TVSettingsUseDownloadAVAdapterEntity.Query;
}

ValueMetadata *type metadata accessor for TVSettingsUseDownloadAVAdapterEntity()
{
  return &type metadata for TVSettingsUseDownloadAVAdapterEntity;
}

ValueMetadata *type metadata accessor for TVSettingsUseDownloadAVAdapterEntity.UpdateIntent_value()
{
  return &type metadata for TVSettingsUseDownloadAVAdapterEntity.UpdateIntent_value;
}

uint64_t sub_10002B378(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10002B66C();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100015960(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_10002B3C0@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105C40, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10011ED10, (uint64_t)sub_10002A5E4, a1);
}

uint64_t sub_10002B3E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B0C8();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10002B41C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002AE0C();
  return _UniqueEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_10002B454(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B4D8();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10002B490()
{
  unint64_t result;

  result = qword_1001072E8;
  if (!qword_1001072E8)
  {
    result = swift_getWitnessTable(&unk_1000C7A84, &type metadata for TVSettingsUseDownloadAVAdapterEntity);
    atomic_store(result, (unint64_t *)&qword_1001072E8);
  }
  return result;
}

unint64_t sub_10002B4D8()
{
  unint64_t result;

  result = qword_1001072F8;
  if (!qword_1001072F8)
  {
    result = swift_getWitnessTable(&unk_1000C7AAC, &type metadata for TVSettingsUseDownloadAVAdapterEntity);
    atomic_store(result, (unint64_t *)&qword_1001072F8);
  }
  return result;
}

unint64_t sub_10002B520()
{
  unint64_t result;

  result = qword_100107300;
  if (!qword_100107300)
  {
    result = swift_getWitnessTable(&unk_1000C7ADC, &type metadata for TVSettingsUseDownloadAVAdapterEntity);
    atomic_store(result, (unint64_t *)&qword_100107300);
  }
  return result;
}

unint64_t sub_10002B568()
{
  unint64_t result;

  result = qword_100107308;
  if (!qword_100107308)
  {
    result = swift_getWitnessTable(&unk_1000C7B04, &type metadata for TVSettingsUseDownloadAVAdapterEntity);
    atomic_store(result, (unint64_t *)&qword_100107308);
  }
  return result;
}

unint64_t sub_10002B5B0()
{
  unint64_t result;

  result = qword_100107310;
  if (!qword_100107310)
  {
    result = swift_getWitnessTable(&unk_1000C7B2C, &type metadata for TVSettingsUseDownloadAVAdapterEntity);
    atomic_store(result, (unint64_t *)&qword_100107310);
  }
  return result;
}

unint64_t sub_10002B5F4(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_10002B628();
  a1[2] = sub_10002B66C();
  result = sub_10002AE0C();
  a1[3] = result;
  return result;
}

unint64_t sub_10002B628()
{
  unint64_t result;

  result = qword_100107360;
  if (!qword_100107360)
  {
    result = swift_getWitnessTable(&unk_1000C7C2C, &type metadata for TVSettingsUseDownloadAVAdapterEntity);
    atomic_store(result, (unint64_t *)&qword_100107360);
  }
  return result;
}

unint64_t sub_10002B66C()
{
  unint64_t result;

  result = qword_100107368;
  if (!qword_100107368)
  {
    result = swift_getWitnessTable(&unk_1000C7BF4, &type metadata for TVSettingsUseDownloadAVAdapterEntity);
    atomic_store(result, (unint64_t *)&qword_100107368);
  }
  return result;
}

unint64_t sub_10002B6B0(uint64_t a1)
{
  unint64_t result;

  result = sub_10002B6D4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10002B6D4()
{
  unint64_t result;

  result = qword_1001073B0;
  if (!qword_1001073B0)
  {
    result = swift_getWitnessTable(&unk_1000C7C5C, &type metadata for TVSettingsUseDownloadAVAdapterEntity);
    atomic_store(result, (unint64_t *)&qword_1001073B0);
  }
  return result;
}

uint64_t sub_10002B718()
{
  return sub_100013840(&qword_1001073B8, &qword_1001073C0, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

unint64_t sub_10002B748()
{
  unint64_t result;

  result = qword_1001073C8;
  if (!qword_1001073C8)
  {
    result = swift_getWitnessTable(&unk_1000C7BBC, &type metadata for TVSettingsUseDownloadAVAdapterEntity);
    atomic_store(result, (unint64_t *)&qword_1001073C8);
  }
  return result;
}

unint64_t sub_10002B790()
{
  unint64_t result;

  result = qword_1001073D0;
  if (!qword_1001073D0)
  {
    result = swift_getWitnessTable(&unk_1000C7B8C, &type metadata for TVSettingsUseDownloadAVAdapterEntity);
    atomic_store(result, (unint64_t *)&qword_1001073D0);
  }
  return result;
}

unint64_t sub_10002B7D8()
{
  unint64_t result;

  result = qword_1001073D8;
  if (!qword_1001073D8)
  {
    result = swift_getWitnessTable(&unk_1000C7B54, &type metadata for TVSettingsUseDownloadAVAdapterEntity);
    atomic_store(result, (unint64_t *)&qword_1001073D8);
  }
  return result;
}

unint64_t sub_10002B820()
{
  unint64_t result;

  result = qword_1001073E0;
  if (!qword_1001073E0)
  {
    result = swift_getWitnessTable(&unk_1000C78A4, &type metadata for TVSettingsUseDownloadAVAdapterEntity.Query);
    atomic_store(result, (unint64_t *)&qword_1001073E0);
  }
  return result;
}

uint64_t sub_10002B864@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  unint64_t v52;
  _QWORD v53[2];
  unint64_t v54;
  unint64_t v55;

  v49 = a1;
  v1 = sub_100008EF4(&qword_100106888);
  v42 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100106890);
  v5 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  v44 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008EF4(&qword_100106898);
  v9 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  v46 = v9;
  __chkstk_darwin(v8);
  v40 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008EF4(&qword_1001068A0);
  v12 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  v48 = v12;
  __chkstk_darwin(v11);
  v41 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v50, "com.apple.tv.");
  HIWORD(v50[1]) = -4864;
  v54 = (unint64_t)&type metadata for TVSettingsDownloadAVAdapterWidget;
  v14 = sub_100008EF4(&qword_100107478);
  v15._countAndFlagsBits = String.init<A>(describing:)(&v54, v14);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17 = v50[0];
  v18 = v50[1];
  KeyPath = swift_getKeyPath(&unk_1000C7D78);
  v20 = sub_100008EF4(&qword_1001068B0);
  v21 = sub_10002AE0C();
  v22 = sub_100013840(&qword_1001068B8, &qword_1001068B0, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  ControlToggle.init<A, B, C, D, E, F>(kind:intentUpdatableProperty:content:value:)(v17, v18, KeyPath, sub_10002BCA4, 0, sub_100018B14, 0, v20, &type metadata for Text, v21, v22, &protocol witness table for Text);
  v50[0] = &type metadata for TVSettingsDownloadAVAdapterWidget;
  v23 = String.init<A>(describing:)(v50, v14);
  v25 = v24;
  v50[0] = v23;
  v50[1] = v24;
  v54 = 0x746567646957;
  v55 = 0xE600000000000000;
  v53[0] = 0x656C67676F54;
  v53[1] = 0xE600000000000000;
  v26 = sub_100013080();
  v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v54, v53, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v26, v26, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v25);
  v50[0] = v27;
  v50[1] = v29;
  v30 = sub_100013840(&qword_1001068C0, &qword_100106888, (uint64_t)&protocol conformance descriptor for ControlToggle<A>);
  WidgetConfiguration.configurationDisplayName<A>(_:)(v50, v1, &type metadata for String, v30, v26);
  swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v3, v1);
  v54 = 0xD00000000000002CLL;
  v55 = 0x80000001000BFC10;
  v50[0] = v1;
  v50[1] = &type metadata for String;
  v51 = v30;
  v52 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v32 = v40;
  v33 = v43;
  WidgetConfiguration.description<A>(_:)(&v54, v43, &type metadata for String, OpaqueTypeConformance2, v26);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v33);
  v50[0] = v33;
  v50[1] = &type metadata for String;
  v51 = OpaqueTypeConformance2;
  v52 = v26;
  v34 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v35 = v41;
  v36 = v45;
  WidgetConfiguration.disablesControlStateCaching()(v45, v34);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v36);
  v50[0] = v36;
  v50[1] = v34;
  v37 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v38 = v47;
  WidgetConfiguration.hiddenControl()(v47, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v35, v38);
}

uint64_t sub_10002BCA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  _QWORD v8[2];

  v2 = sub_100008EF4(&qword_1001068B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[0] = 0xD00000000000001ALL;
  v8[1] = 0x80000001000BFAB0;
  v6 = sub_100013080();
  Label<>.init<A>(_:systemImage:)(v8, 1918985575, 0xE400000000000000, &type metadata for String, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
}

uint64_t sub_10002BD68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD v33[3];

  v0 = sub_100008EF4(&qword_100106808);
  __chkstk_darwin(v0);
  v32 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for InputConnectionBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v31 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_1001065E0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  v30 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008EF4(&qword_100107410);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000024, 0x80000001000BFB10);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v29(v13, 1, 1, v14);
  v18 = type metadata accessor for IntentDialog(0);
  memset(v33, 0, sizeof(v33));
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v10, 1, 1, v18);
  v19(v8, 1, 1, v18);
  v20 = enum case for InputConnectionBehavior.default(_:);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v21 = v31;
  v28(v31, enum case for InputConnectionBehavior.default(_:), v2);
  v22 = sub_10002B0C8();
  v27 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v17, v13, v33, v10, v8, v21, v22);
  sub_100008EF4(&qword_100106818);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000042, 0x80000001000BFB40);
  v29(v13, 1, 1, v30);
  LOBYTE(v33[0]) = 2;
  v23 = type metadata accessor for Bool.IntentDisplayName(0);
  v24 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v32, 1, 1, v23);
  v19(v10, 1, 1, v18);
  v28(v21, v20, v2);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v17, v13, v33, v24, v10, v21);
  return v27;
}

uint64_t sub_10002C090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  ValueMetadata *v19;

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &type metadata for TVSettingsUseDownloadAVAdapterEntity;
  v13 = sub_100008EF4(&qword_1001073E8);
  v14 = String.init<A>(describing:)(&v19, v13);
  sub_100008EF4(&qword_100107248);
  v15 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000BFAB0);
  static Locale.current.getter(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0xD000000000000012, 0x80000001000BF530, v6, v3, 0, 0, 256);
  v16 = sub_100013840(&qword_100107400, &qword_100107408, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v12, &unk_1001073F0, 0, &unk_1001073F8, 0, &type metadata for TVSettingsUseDownloadAVAdapterEntity.UpdateIntent_value, v16);
  return v14;
}

uint64_t sub_10002C2B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  return swift_retain(v2);
}

ValueMetadata *type metadata accessor for TVSettingsDownloadAVAdapterWidget()
{
  return &type metadata for TVSettingsDownloadAVAdapterWidget;
}

uint64_t sub_10002C2D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2158, 1);
}

unint64_t sub_10002C2E4(uint64_t a1)
{
  unint64_t result;

  result = sub_10002C308();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10002C308()
{
  unint64_t result;

  result = qword_100107468;
  if (!qword_100107468)
  {
    result = swift_getWitnessTable(&unk_1000C7DC4, &type metadata for TVSettingsDownloadAVAdapterWidget);
    atomic_store(result, (unint64_t *)&qword_100107468);
  }
  return result;
}

unint64_t sub_10002C34C(uint64_t a1)
{
  unint64_t result;

  result = sub_10002C370();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10002C370()
{
  unint64_t result;

  result = qword_100107470;
  if (!qword_100107470)
  {
    result = swift_getWitnessTable(&unk_1000C7E04, &type metadata for TVSettingsDownloadAVAdapterWidget);
    atomic_store(result, (unint64_t *)&qword_100107470);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UpNextDisplayType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UpNextDisplayType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10002C490 + 4 * byte_1000C7E45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10002C4C4 + 4 * byte_1000C7E40[v4]))();
}

uint64_t sub_10002C4C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002C4CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002C4D4);
  return result;
}

uint64_t sub_10002C4E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002C4E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10002C4EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002C4F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10002C500(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for UpNextDisplayType()
{
  return &type metadata for UpNextDisplayType;
}

uint64_t sub_10002C51C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD v21[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v21[0] = (char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011ED60);
  sub_10000909C(v16, (uint64_t)qword_10011ED60);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x207478654E207055, 0xEF79616C70736944);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v2);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  v18 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v19 = v21[0];
  v18(v21[0], 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v19);
}

unint64_t sub_10002C74C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t result;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;

  v0 = sub_100008EF4(&qword_1001074F8);
  __chkstk_darwin(v0);
  v49 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = v5;
  __chkstk_darwin(v5);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Locale(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for LocalizedStringResource(0);
  v45 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100008EF4(&qword_100107500);
  v19 = sub_100008EF4(&qword_100107508);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = v19;
  v44 = v19;
  v46 = *(_QWORD *)(v20 + 72);
  v22 = *(unsigned __int8 *)(v20 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(v18, v23 + 2 * v46, v22 | 7);
  v47 = v24;
  *(_OWORD *)(v24 + 16) = xmmword_1000C8170;
  v25 = v24 + v23 + *(int *)(v21 + 48);
  v42 = v24 + v23;
  v43 = v25;
  *(_BYTE *)(v24 + v23) = 0;
  v26 = String.LocalizationValue.init(stringLiteral:)(0x7246206C6C697453, 0xEB00000000656D61);
  static Locale.current.getter(v26);
  v27 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v40 = v7;
  v28(v9, enum case for LocalizedStringResource.BundleDescription.main(_:), v7);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v15, 0xD000000000000012, 0x80000001000BF530, v12, v9, 0, 0, 256);
  v29 = String.LocalizationValue.init(stringLiteral:)(0x1000000000000026, 0x80000001000BFC40);
  static Locale.current.getter(v29);
  v28(v9, v27, v7);
  v30 = v4;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v15, 0xD000000000000012, 0x80000001000BF530, v12, v9, 0, 0, 256);
  v45 = *(_QWORD *)(v45 + 56);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v45)(v4, 0, 1, v48);
  v31 = type metadata accessor for DisplayRepresentation.Image(0);
  v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v32 = v49;
  v41(v49, 1, 1, v31);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v17, v30, v32, &_swiftEmptyArrayStorage);
  v33 = (_BYTE *)(v42 + v46);
  v46 += v42 + *(int *)(v44 + 48);
  *v33 = 1;
  v34 = String.LocalizationValue.init(stringLiteral:)(0x4120726574736F50, 0xEA00000000007472);
  static Locale.current.getter(v34);
  v35 = v40;
  v28(v9, v27, v40);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v15, 0xD000000000000012, 0x80000001000BF530, v12, v9, 0, 0, 256);
  v36 = String.LocalizationValue.init(stringLiteral:)(0x1000000000000025, 0x80000001000BFC70);
  static Locale.current.getter(v36);
  v28(v9, v27, v35);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v15, 0xD000000000000012, 0x80000001000BF530, v12, v9, 0, 0, 256);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v45)(v30, 0, 1, v48);
  v37 = v49;
  v41(v49, 1, 1, v31);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v17, v30, v37, &_swiftEmptyArrayStorage);
  result = sub_10002CDD0(v47, &qword_100107508, &qword_100107510, (uint64_t (*)(_QWORD))sub_10002D6CC);
  qword_10011ED78 = result;
  return result;
}

unint64_t sub_10002CC20(uint64_t a1)
{
  return sub_10002CC38(a1, &qword_100107518);
}

unint64_t sub_10002CC2C(uint64_t a1)
{
  return sub_10002CC38(a1, &qword_100107570);
}

unint64_t sub_10002CC38(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008EF4(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v8 = *((_QWORD *)v7 - 2);
    v9 = *((_QWORD *)v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    result = sub_10002D668(v8, v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_BYTE *)(v5[7] + result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v7 += 24;
    v5[2] = v16;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002CD44(uint64_t a1)
{
  return sub_10002CDD0(a1, &qword_100107550, &qword_100107558, (uint64_t (*)(_QWORD))sub_10002D73C);
}

unint64_t sub_10002CD60(uint64_t a1)
{
  return sub_10002CDD0(a1, &qword_100107560, &qword_100107568, (uint64_t (*)(_QWORD))sub_10002D73C);
}

unint64_t sub_10002CD7C(uint64_t a1)
{
  return sub_10002CDD0(a1, &qword_100107530, &qword_100107538, (uint64_t (*)(_QWORD))sub_10002D7E4);
}

unint64_t sub_10002CD98(uint64_t a1)
{
  return sub_10002CDD0(a1, &qword_100107540, &qword_100107548, (uint64_t (*)(_QWORD))sub_10002D7E4);
}

unint64_t sub_10002CDB4(uint64_t a1)
{
  return sub_10002CDD0(a1, &qword_100107520, &qword_100107528, (uint64_t (*)(_QWORD))sub_10002D8E4);
}

unint64_t sub_10002CDD0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t result;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);

  v31 = a4;
  v7 = sub_100008EF4(a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    v13 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v29 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v29);
    return (unint64_t)v13;
  }
  sub_100008EF4(a3);
  v12 = static _DictionaryStorage.allocate(capacity:)(v11);
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_9;
  v15 = &v10[*(int *)(v7 + 48)];
  v16 = v12 + 64;
  v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v30 = a1;
  v18 = a1 + v17;
  v19 = *(_QWORD *)(v8 + 72);
  swift_retain(v12);
  while (1)
  {
    sub_10001355C(v18, (uint64_t)v10, a2);
    v20 = *v10;
    result = v31(*v10);
    if ((v22 & 1) != 0)
      break;
    v23 = result;
    *(_QWORD *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v13[6] + result) = v20;
    v24 = v13[7];
    v25 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v23, v15, v25);
    v26 = v13[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_12;
    v13[2] = v28;
    v18 += v19;
    if (!--v14)
    {
      swift_release(v13);
      v29 = v30;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10002CF68(char *a1, char *a2)
{
  return sub_1000195C0(*a1, *a2);
}

Swift::Int sub_10002CF74()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  if (v1)
    v2 = 49;
  else
    v2 = 48;
  String.hash(into:)(v4, v2, 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10002CFCC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 49;
  else
    v2 = 48;
  String.hash(into:)(a1, v2, 0xE100000000000000);
  return swift_bridgeObjectRelease(0xE100000000000000);
}

Swift::Int sub_10002CFF8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2)
    v3 = 49;
  else
    v3 = 48;
  String.hash(into:)(v5, v3, 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10002D04C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000F6ED8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_10002D0A8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 48;
  if (*v1)
    v2 = 49;
  *a1 = v2;
  a1[1] = 0xE100000000000000;
}

void sub_10002D0C4(_QWORD *a1@<X8>)
{
  *a1 = &off_1000F6F28;
}

void sub_10002D0D4(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_10002D0E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100105C60 != -1)
    swift_once(&qword_100105C60, sub_10002C51C);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_10000909C(v2, (uint64_t)qword_10011ED60);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10002D150(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002D318();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10002D188()
{
  if (qword_100105C68 != -1)
    swift_once(&qword_100105C68, sub_10002C74C);
  return swift_bridgeObjectRetain(qword_10011ED78);
}

uint64_t sub_10002D1C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002D3A8();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10002D204()
{
  unint64_t result;

  result = qword_100107480;
  if (!qword_100107480)
  {
    result = swift_getWitnessTable(&unk_1000C7E84, &type metadata for UpNextDisplayType);
    atomic_store(result, (unint64_t *)&qword_100107480);
  }
  return result;
}

unint64_t sub_10002D24C()
{
  unint64_t result;

  result = qword_100107488;
  if (!qword_100107488)
  {
    result = swift_getWitnessTable(&unk_1000C8034, &type metadata for UpNextDisplayType);
    atomic_store(result, (unint64_t *)&qword_100107488);
  }
  return result;
}

unint64_t sub_10002D294()
{
  unint64_t result;

  result = qword_100107490;
  if (!qword_100107490)
  {
    result = swift_getWitnessTable(&unk_1000C8100, &type metadata for UpNextDisplayType);
    atomic_store(result, (unint64_t *)&qword_100107490);
  }
  return result;
}

uint64_t sub_10002D2D8(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10002D318();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>, 1);
}

unint64_t sub_10002D318()
{
  unint64_t result;

  result = qword_100107498;
  if (!qword_100107498)
  {
    result = swift_getWitnessTable(&unk_1000C806C, &type metadata for UpNextDisplayType);
    atomic_store(result, (unint64_t *)&qword_100107498);
  }
  return result;
}

unint64_t sub_10002D360()
{
  unint64_t result;

  result = qword_1001074A0;
  if (!qword_1001074A0)
  {
    result = swift_getWitnessTable(&unk_1000C7EEC, &type metadata for UpNextDisplayType);
    atomic_store(result, (unint64_t *)&qword_1001074A0);
  }
  return result;
}

unint64_t sub_10002D3A8()
{
  unint64_t result;

  result = qword_1001074A8;
  if (!qword_1001074A8)
  {
    result = swift_getWitnessTable(&unk_1000C7EAC, &type metadata for UpNextDisplayType);
    atomic_store(result, (unint64_t *)&qword_1001074A8);
  }
  return result;
}

unint64_t sub_10002D3F0()
{
  unint64_t result;

  result = qword_1001074B0;
  if (!qword_1001074B0)
  {
    result = swift_getWitnessTable(&unk_1000C7F44, &type metadata for UpNextDisplayType);
    atomic_store(result, (unint64_t *)&qword_1001074B0);
  }
  return result;
}

unint64_t sub_10002D438()
{
  unint64_t result;

  result = qword_1001074B8;
  if (!qword_1001074B8)
  {
    result = swift_getWitnessTable(&unk_1000C7F6C, &type metadata for UpNextDisplayType);
    atomic_store(result, (unint64_t *)&qword_1001074B8);
  }
  return result;
}

unint64_t sub_10002D480()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001074C0;
  if (!qword_1001074C0)
  {
    v1 = sub_100008F80(&qword_1001074C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001074C0);
  }
  return result;
}

unint64_t sub_10002D4D0()
{
  unint64_t result;

  result = qword_1001074D0;
  if (!qword_1001074D0)
  {
    result = swift_getWitnessTable(&unk_1000C7FC4, &type metadata for UpNextDisplayType);
    atomic_store(result, (unint64_t *)&qword_1001074D0);
  }
  return result;
}

unint64_t sub_10002D518()
{
  unint64_t result;

  result = qword_1001074D8;
  if (!qword_1001074D8)
  {
    result = swift_getWitnessTable(&unk_1000C7F94, &type metadata for UpNextDisplayType);
    atomic_store(result, (unint64_t *)&qword_1001074D8);
  }
  return result;
}

unint64_t sub_10002D560()
{
  unint64_t result;

  result = qword_1001074E0;
  if (!qword_1001074E0)
  {
    result = swift_getWitnessTable(&unk_1000C80C8, &type metadata for UpNextDisplayType);
    atomic_store(result, (unint64_t *)&qword_1001074E0);
  }
  return result;
}

void *sub_10002D5A4()
{
  return &protocol witness table for String;
}

unint64_t sub_10002D5B0(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10002D318();
  result = sub_10002D5DC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10002D5DC()
{
  unint64_t result;

  result = qword_1001074E8;
  if (!qword_1001074E8)
  {
    result = swift_getWitnessTable(&unk_1000C7FFC, &type metadata for UpNextDisplayType);
    atomic_store(result, (unint64_t *)&qword_1001074E8);
  }
  return result;
}

unint64_t sub_10002D624()
{
  unint64_t result;

  result = qword_1001074F0;
  if (!qword_1001074F0)
  {
    result = swift_getWitnessTable(&unk_1000C8140, &type metadata for UpNextDisplayType);
    atomic_store(result, (unint64_t *)&qword_1001074F0);
  }
  return result;
}

unint64_t sub_10002D668(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10002D950(a1, a2, v5);
}

unint64_t sub_10002D6CC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = v1;
  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  if ((a1 & 1) != 0)
    v4 = 49;
  else
    v4 = 48;
  String.hash(into:)(v7, v4, 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  v5 = Hasher._finalize()();
  return sub_10002DA30(a1 & 1, v5);
}

unint64_t sub_10002D73C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = v1;
  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  if ((a1 & 1) != 0)
    v4 = 0x6C61755174736542;
  else
    v4 = 0x6C617551646F6F47;
  String.hash(into:)(v7, v4, 0xEB00000000797469);
  swift_bridgeObjectRelease(0xEB00000000797469);
  v5 = Hasher._finalize()();
  return sub_10002DB18(a1 & 1, v5);
}

unint64_t sub_10002D7E4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  unint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v2 = v1;
  Hasher.init(_seed:)(v8, *(_QWORD *)(v2 + 40));
  v4 = a1 & 1;
  if ((a1 & 1) != 0)
    v5 = 0x80000001000BEFF0;
  else
    v5 = 0x80000001000BEFD0;
  String.hash(into:)(v8, 0xD000000000000013, v5);
  swift_bridgeObjectRelease(v5);
  v6 = Hasher._finalize()();
  return sub_10002DC3C(v4, v6);
}

unint64_t sub_10002D880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for SportingEventCompetitorScoreStatisticType.StatisticName(0);
  v6 = sub_10002DF80(&qword_100107578, (uint64_t)&protocol conformance descriptor for SportingEventCompetitorScoreStatisticType.StatisticName);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10002DD60(a1, v7);
}

unint64_t sub_10002D8E4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = v1;
  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  if ((a1 & 1) != 0)
    v4 = 48;
  else
    v4 = 49;
  String.hash(into:)(v7, v4, 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  v5 = Hasher._finalize()();
  return sub_10002DE98(a1 & 1, v5);
}

unint64_t sub_10002D950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10002DA30(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 49;
    else
      v6 = 48;
    while (1)
    {
      v7 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 49 : 48;
      if (v7 == v6)
        break;
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, 0xE100000000000000);
      swift_bridgeObjectRelease_n(0xE100000000000000, 2);
      if ((v8 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(0xE100000000000000, 2);
  }
  return v4;
}

unint64_t sub_10002DB18(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0x6C61755174736542;
    else
      v6 = 0x6C617551646F6F47;
    while (1)
    {
      v7 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x6C61755174736542 : 0x6C617551646F6F47;
      if (v7 == v6)
        break;
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, 0xEB00000000797469);
      swift_bridgeObjectRelease_n(0xEB00000000797469, 2);
      if ((v8 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(0xEB00000000797469, 2);
  }
  return v4;
}

unint64_t sub_10002DC3C(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  char v10;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0x80000001000BEFF0;
    else
      v6 = 0x80000001000BEFD0;
    while (1)
    {
      v7 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? "BestQualityDownload" : "GoodQualityDownload";
      v8 = v7 - 32;
      v9 = (unint64_t)v8 | 0x8000000000000000;
      if (((unint64_t)v8 | 0x8000000000000000) == v6)
        break;
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, (unint64_t)v8 | 0x8000000000000000);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v6);
      if ((v10 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(v6, 2);
  }
  return v4;
}

unint64_t sub_10002DD60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for SportingEventCompetitorScoreStatisticType.StatisticName(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_10002DF80(&qword_100107580, (uint64_t)&protocol conformance descriptor for SportingEventCompetitorScoreStatisticType.StatisticName);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_10002DE98(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 48;
    else
      v6 = 49;
    while (1)
    {
      v7 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 48 : 49;
      if (v7 == v6)
        break;
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, 0xE100000000000000);
      swift_bridgeObjectRelease_n(0xE100000000000000, 2);
      if ((v8 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(0xE100000000000000, 2);
  }
  return v4;
}

uint64_t sub_10002DF80(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for SportingEventCompetitorScoreStatisticType.StatisticName(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_10002DFC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v17;

  v1 = type metadata accessor for SportsWidgetDynamicIslandExpanded(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)(v0 + *(int *)(v2 + 20));
  v6 = v5[9];
  v7 = v5[11];
  if (v7
    && ((v8 = v5[10] & 0xFFFFFFFFFFFFLL, (v7 & 0x2000000000000000) != 0) ? (v9 = HIBYTE(v7) & 0xF) : (v9 = v8), v9))
  {
    sub_1000134DC(v0, (uint64_t)v4, type metadata accessor for SportsWidgetDynamicIslandExpanded);
  }
  else
  {
    sub_1000134DC(v0, (uint64_t)v4, type metadata accessor for SportsWidgetDynamicIslandExpanded);
    if (!v6)
    {
      v15 = 0;
      goto LABEL_16;
    }
  }
  v10 = &v4[*(int *)(v1 + 20)];
  v11 = *((_QWORD *)v10 + 24);
  v12 = *((_QWORD *)v10 + 26);
  v15 = v12
     && ((v13 = *((_QWORD *)v10 + 25) & 0xFFFFFFFFFFFFLL, (v12 & 0x2000000000000000) != 0)
       ? (v14 = HIBYTE(v12) & 0xF)
       : (v14 = v13),
         v14)
     || v11 != 0;
LABEL_16:
  sub_100013520((uint64_t)v4, type metadata accessor for SportsWidgetDynamicIslandExpanded);
  return v15;
}

uint64_t sub_10002E0D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  _OWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  char v127;

  v101 = a2;
  v3 = sub_100008EF4(&qword_1001075D8);
  __chkstk_darwin(v3);
  v103 = (_OWORD *)((char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100008EF4(&qword_1001075E0);
  v6 = __chkstk_darwin(v5);
  v104 = (uint64_t)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v106 = (uint64_t)&v91 - v8;
  v9 = sub_10002DFC0();
  v102 = type metadata accessor for SportsWidgetDynamicIslandExpanded(0);
  v10 = (_QWORD *)(a1 + *(int *)(v102 + 20));
  if (v9)
  {
    v12 = v10[6];
    v11 = v10[7];
    v14 = v10[8];
    v13 = v10[9];
    v16 = v10[10];
    v15 = v10[11];
    v17 = (void *)objc_opt_self(UIColor);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    v18 = Color.init(uiColor:)(objc_msgSend(v17, "labelColor"));
    v108 = 0x4049000000000000;
    v109 = v18;
    v110 = v12;
    v111 = v11;
    v112 = v14;
    v113 = v13;
    v114 = v16;
    v115 = v15;
    v118 = 0;
    v116 = 0;
    v117 = 0;
    v119 = 0;
  }
  else
  {
    v19 = v10[5];
    v20 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)&v120 = v10[4];
    *((_QWORD *)&v120 + 1) = v19;
    v21 = sub_100013080();
    swift_bridgeObjectRetain(v19);
    v22 = Text.init<A>(_:)(&v120, &type metadata for String, v21);
    v24 = v23;
    v26 = v25;
    v28 = v27 & 1;
    v29 = Text.foregroundColor(_:)(*(_QWORD *)(a1 + 80), v22, v23, v28, v25);
    v31 = v30;
    v33 = v32;
    v35 = v34 & 1;
    sub_1000130C4(v22, v24, v28);
    swift_bridgeObjectRelease(v26);
    v36 = Text.font(_:)(v20, v29, v31, v35, v33);
    v38 = v37;
    v40 = v39;
    v42 = v41 & 1;
    sub_1000130C4(v29, v31, v35);
    swift_bridgeObjectRelease(v33);
    v107 = Text.fontWeight(_:)(0, 1, v36, v38, v42, v40);
    v44 = v43;
    v46 = v45;
    v48 = v47 & 1;
    sub_1000130C4(v36, v38, v42);
    swift_bridgeObjectRelease(v40);
    v49 = *(_QWORD *)(a1 + 112);
    KeyPath = swift_getKeyPath(&unk_1000C81C0);
    v51 = *(unsigned __int8 *)(a1 + 120);
    v52 = swift_getKeyPath(&unk_1000C81F0);
    v53 = *(_QWORD *)(a1 + 128);
    v54 = swift_getKeyPath(&unk_1000C8220);
    v108 = v107;
    v109 = v44;
    v110 = v48;
    v111 = v46;
    v112 = KeyPath;
    v113 = v49;
    v114 = 0;
    v115 = v52;
    v116 = v51;
    v117 = v54;
    v118 = v53;
    v119 = 1;
  }
  v55 = sub_100008EF4(&qword_100106268);
  v56 = sub_1000132F8();
  v57 = sub_100013344();
  _ConditionalContent<>.init(storage:)(&v108, &type metadata for SportsWidgetLogoView, v55, v56, v57);
  v59 = *((_QWORD *)&v120 + 1);
  v58 = v120;
  v60 = *((_QWORD *)&v121 + 1);
  v107 = v121;
  v61 = v122;
  v105 = *((_QWORD *)&v123 + 1);
  v62 = v123;
  v99 = *((_QWORD *)&v124 + 1);
  v100 = v124;
  v98 = v125;
  v97 = BYTE8(v125);
  type metadata accessor for SportsWidgetDynamicIslandExpanded(0);
  v63 = a1 + *(int *)(v102 + 20);
  v64 = *(_OWORD *)(v63 + 64);
  v65 = *(_OWORD *)(v63 + 96);
  v125 = *(_OWORD *)(v63 + 80);
  v126 = v65;
  v66 = *(_OWORD *)(v63 + 32);
  v67 = *(_OWORD *)(v63 + 48);
  v68 = *(_OWORD *)v63;
  v121 = *(_OWORD *)(v63 + 16);
  v122 = v66;
  v123 = v67;
  v124 = v64;
  v127 = *(_BYTE *)(v63 + 112);
  v120 = v68;
  v69 = (uint64_t)v103;
  *v103 = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v69 + 16) = 0;
  v70 = sub_100008EF4(&qword_1001075E8);
  sub_10002FC38(a1, (uint64_t)&v120, (uint64_t *)(v69 + *(int *)(v70 + 44)));
  v72 = static Alignment.center.getter(v71);
  v73 = v104;
  sub_100096074(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v104, 0.0, 1, 0.0, 1, v72, v74);
  sub_1000135A0(v69, &qword_1001075D8);
  v75 = v106;
  sub_100013880(v73, v106, &qword_1001075E0);
  sub_10001355C(v75, v73, &qword_1001075E0);
  v96 = v58;
  v76 = v101;
  *v101 = v58;
  v76[1] = v59;
  v77 = v107;
  v76[2] = v107;
  v76[3] = v60;
  v107 = v77;
  v92 = v60;
  *((_OWORD *)v76 + 2) = v61;
  v95 = *((_QWORD *)&v61 + 1);
  v93 = v61;
  v94 = v62;
  v78 = v105;
  v76[6] = v62;
  v76[7] = v78;
  v79 = v100;
  v80 = v99;
  v76[8] = v100;
  v76[9] = v80;
  v81 = v98;
  v76[10] = v98;
  v82 = v97;
  *((_BYTE *)v76 + 88) = v97;
  v76[12] = 0;
  *((_BYTE *)v76 + 104) = 1;
  v83 = sub_100008EF4(&qword_100107620);
  sub_10001355C(v73, (uint64_t)v76 + *(int *)(v83 + 64), &qword_1001075E0);
  v84 = v96;
  v85 = v77;
  v86 = v60;
  v87 = v95;
  v88 = v94;
  v89 = v105;
  sub_1000326EC(v96, v59, v85, v86, v61, v95, v94, v105, v79, v80, v81, v82);
  sub_1000135A0(v106, &qword_1001075E0);
  sub_1000135A0(v73, &qword_1001075E0);
  return sub_10003278C(v84, v59, v107, v92, v93, v87, v88, v89, v79, v80, v81, v82);
}

uint64_t sub_10002E750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t KeyPath;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 v122;
  _OWORD v123[7];
  char v124;

  v95 = a2;
  v3 = sub_100008EF4(&qword_1001075D8);
  __chkstk_darwin(v3);
  v5 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008EF4(&qword_1001075E0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v88 - v10;
  v12 = a1 + *(int *)(type metadata accessor for SportsWidgetDynamicIslandExpanded(0) + 20);
  v13 = *(_OWORD *)(v12 + 200);
  v123[4] = *(_OWORD *)(v12 + 184);
  v123[5] = v13;
  v123[6] = *(_OWORD *)(v12 + 216);
  v124 = *(_BYTE *)(v12 + 232);
  v14 = *(_OWORD *)(v12 + 136);
  v15 = *(_OWORD *)(v12 + 168);
  v123[2] = *(_OWORD *)(v12 + 152);
  v123[3] = v15;
  v123[0] = *(_OWORD *)(v12 + 120);
  v123[1] = v14;
  *(_OWORD *)v5 = *(_OWORD *)(a1 + 64);
  v5[16] = 0;
  v16 = sub_100008EF4(&qword_1001075E8);
  sub_10002FC38(a1, (uint64_t)v123, (uint64_t *)&v5[*(int *)(v16 + 44)]);
  v18 = static Alignment.center.getter(v17);
  sub_100096074(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v18, v19);
  sub_1000135A0((uint64_t)v5, &qword_1001075D8);
  v96 = v11;
  v97 = v9;
  sub_100013880((uint64_t)v9, (uint64_t)v11, &qword_1001075E0);
  if (sub_10002DFC0())
  {
    v21 = *(_QWORD *)(v12 + 168);
    v20 = *(_QWORD *)(v12 + 176);
    v23 = *(_QWORD *)(v12 + 184);
    v22 = *(_QWORD *)(v12 + 192);
    v25 = *(_QWORD *)(v12 + 200);
    v24 = *(_QWORD *)(v12 + 208);
    v26 = (void *)objc_opt_self(UIColor);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    v27 = Color.init(uiColor:)(objc_msgSend(v26, "labelColor"));
    v99 = 0x4049000000000000;
    v100 = v27;
    v101 = v21;
    v102 = v20;
    v103 = v23;
    v104 = v22;
    v105 = v25;
    v106 = v24;
    v108 = 0;
    v109 = 0;
    v107 = 0;
    v110 = 0;
  }
  else
  {
    v28 = *(_QWORD *)(v12 + 152);
    v29 = *(_QWORD *)(v12 + 160);
    v98 = *(_QWORD *)(a1 + 96);
    v111 = v28;
    v112 = v29;
    v30 = sub_100013080();
    swift_bridgeObjectRetain(v29);
    v31 = Text.init<A>(_:)(&v111, &type metadata for String, v30);
    v33 = v32;
    v35 = v34;
    v37 = v36 & 1;
    v38 = Text.foregroundColor(_:)(*(_QWORD *)(a1 + 80), v31, v32, v37, v34);
    v40 = v39;
    v42 = v41;
    v44 = v43 & 1;
    sub_1000130C4(v31, v33, v37);
    swift_bridgeObjectRelease(v35);
    v45 = Text.font(_:)(v98, v38, v40, v44, v42);
    v47 = v46;
    v49 = v48;
    v51 = v50 & 1;
    sub_1000130C4(v38, v40, v44);
    swift_bridgeObjectRelease(v42);
    v52 = Text.fontWeight(_:)(0, 1, v45, v47, v51, v49);
    v54 = v53;
    v56 = v55;
    v58 = v57 & 1;
    sub_1000130C4(v45, v47, v51);
    swift_bridgeObjectRelease(v49);
    v59 = *(_QWORD *)(a1 + 112);
    KeyPath = swift_getKeyPath(&unk_1000C81C0);
    v61 = *(unsigned __int8 *)(a1 + 120);
    v62 = swift_getKeyPath(&unk_1000C81F0);
    v63 = *(_QWORD *)(a1 + 128);
    v64 = swift_getKeyPath(&unk_1000C8220);
    v99 = v52;
    v100 = v54;
    v101 = v58;
    v102 = v56;
    v103 = KeyPath;
    v104 = v59;
    v105 = 0;
    v106 = v62;
    v107 = v61;
    v108 = v64;
    v109 = v63;
    v110 = 1;
  }
  v65 = sub_100008EF4(&qword_100106268);
  v66 = sub_1000132F8();
  v67 = sub_100013344();
  _ConditionalContent<>.init(storage:)(&v99, &type metadata for SportsWidgetLogoView, v65, v66, v67);
  v68 = v112;
  v98 = v111;
  v70 = v113;
  v69 = v114;
  v71 = v115;
  v72 = v116;
  v73 = v117;
  v74 = v118;
  v93 = v120;
  v94 = v119;
  v92 = v121;
  v91 = v122;
  v75 = (uint64_t)v97;
  sub_10001355C((uint64_t)v96, (uint64_t)v97, &qword_1001075E0);
  v76 = v75;
  v77 = v95;
  sub_10001355C(v76, v95, &qword_1001075E0);
  v78 = sub_100008EF4(&qword_1001075F0);
  v79 = v77 + *(int *)(v78 + 48);
  *(_QWORD *)v79 = 0;
  *(_BYTE *)(v79 + 8) = 1;
  v80 = v77 + *(int *)(v78 + 64);
  v81 = v98;
  *(_QWORD *)v80 = v98;
  *(_QWORD *)(v80 + 8) = v68;
  v98 = v81;
  v82 = v68;
  v89 = v69;
  v90 = v68;
  *(_QWORD *)(v80 + 16) = v70;
  *(_QWORD *)(v80 + 24) = v69;
  v83 = v69;
  *(_QWORD *)(v80 + 32) = v71;
  *(_QWORD *)(v80 + 40) = v72;
  *(_QWORD *)(v80 + 48) = v73;
  *(_QWORD *)(v80 + 56) = v74;
  v84 = v93;
  v85 = v94;
  *(_QWORD *)(v80 + 64) = v94;
  *(_QWORD *)(v80 + 72) = v84;
  v86 = v92;
  *(_QWORD *)(v80 + 80) = v92;
  LOBYTE(v68) = v91;
  *(_BYTE *)(v80 + 88) = v91;
  sub_1000326EC(v81, v82, v70, v83, v71, v72, v73, v74, v85, v84, v86, v68);
  sub_1000135A0((uint64_t)v96, &qword_1001075E0);
  sub_10003278C(v98, v90, v70, v89, v71, v72, v73, v74, v85, v84, v86, v68);
  return sub_1000135A0((uint64_t)v97, &qword_1001075E0);
}

uint64_t sub_10002EC74@<X0>(uint64_t a1@<X8>)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double *v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD v97[11];
  _BYTE v98[183];
  char v99;

  v96 = a1;
  v2 = type metadata accessor for SportsWidgetClock(0);
  __chkstk_darwin(v2);
  v90 = (uint64_t)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for SportsWidgetClockView(0);
  v4 = __chkstk_darwin(v89);
  v88 = (uint64_t *)((char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v92 = (uint64_t)&v81 - v6;
  v95 = sub_100008EF4(&qword_100107588);
  v7 = __chkstk_darwin(v95);
  v91 = (uint64_t)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v93 = (uint64_t)&v81 - v9;
  v10 = sub_100008EF4(&qword_100107590);
  __chkstk_darwin(v10);
  v12 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008EF4(&qword_100107598);
  __chkstk_darwin(v13);
  v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008EF4(&qword_1001075A0);
  __chkstk_darwin(v16);
  v18 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100008EF4(&qword_1001075A8);
  __chkstk_darwin(v19);
  v21 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(int *)(type metadata accessor for SportsWidgetDynamicIslandExpanded(0) + 20);
  v94 = v1;
  v23 = (char *)v1 + v22;
  v24 = (int *)type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0);
  if (v23[v24[12]] == 1)
  {
    sub_10003B4A8((uint64_t)v98);
    v25 = *(_OWORD *)&v98[16];
    *(_OWORD *)(v15 + 8) = *(_OWORD *)v98;
    *(_OWORD *)(v15 + 24) = v25;
    v26 = *(_OWORD *)&v98[48];
    *(_OWORD *)(v15 + 40) = *(_OWORD *)&v98[32];
    v27 = *(_QWORD *)&v98[64];
    v28 = *(_QWORD *)&v98[88];
    *v15 = 1;
    *(_OWORD *)(v15 + 56) = v26;
    *((_QWORD *)v15 + 9) = v27;
    *((_OWORD *)v15 + 5) = *(_OWORD *)&v98[72];
    *((_QWORD *)v15 + 12) = v28;
    swift_storeEnumTagMultiPayload(v15, v13, 0);
    sub_100013270(v98);
    v29 = sub_100012FF8();
    v30 = sub_10002FBB4();
    _ConditionalContent<>.init(storage:)(v15, &type metadata for SportsWidgetStaleView, v95, v29, v30);
    sub_10001355C((uint64_t)v18, (uint64_t)v12, &qword_1001075A0);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v31 = sub_100008EF4(&qword_1001075B8);
    v32 = sub_10002FB48();
    v33 = sub_100013840(&qword_1001075D0, &qword_1001075B8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v12, v16, v31, v32, v33);
    sub_1000135A0((uint64_t)v18, &qword_1001075A0);
    sub_1000132B4(v98);
    v34 = sub_100008EF4(&qword_1001075B0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v21, 0, 1, v34);
    v35 = (uint64_t)v21;
    return sub_100013880(v35, v96, &qword_1001075A8);
  }
  v84 = v21;
  v85 = v13;
  v36 = v95;
  v86 = v16;
  v87 = v10;
  if (v23[v24[9]] == 1)
  {
    v37 = v90;
    v38 = sub_1000134DC((uint64_t)&v23[v24[6]], v90, type metadata accessor for SportsWidgetClock);
    v39 = static Font.footnote.getter(v38);
    v40 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
    v83 = Color.init(uiColor:)(v40);
    v82 = static Font.footnote.getter(v83);
    KeyPath = swift_getKeyPath(&unk_1000C8190);
    v42 = (uint64_t)v88;
    *v88 = KeyPath;
    v43 = sub_100008EF4(&qword_100105F38);
    swift_storeEnumTagMultiPayload(v42, v43, 0);
    v44 = v89;
    sub_10001303C(v37, v42 + *(int *)(v89 + 20), type metadata accessor for SportsWidgetClock);
    v45 = v42 + *(int *)(v44 + 24);
    *(_BYTE *)v45 = 0;
    v46 = v83;
    *(_QWORD *)(v45 + 8) = v39;
    *(_QWORD *)(v45 + 16) = v46;
    *(_QWORD *)(v45 + 24) = v82;
    v47 = v92;
    v48 = sub_10001303C(v42, v92, type metadata accessor for SportsWidgetClockView);
    LOBYTE(v37) = static Edge.Set.top.getter(v48);
    v49 = EdgeInsets.init(_all:)(v94[5]);
    v51 = v50;
    v53 = v52;
    v55 = v54;
    v56 = v91;
    sub_1000134DC(v47, v91, type metadata accessor for SportsWidgetClockView);
    v57 = v56 + *(int *)(v36 + 36);
    *(_BYTE *)v57 = v37;
    *(double *)(v57 + 8) = v49;
    *(_QWORD *)(v57 + 16) = v51;
    *(_QWORD *)(v57 + 24) = v53;
    *(_QWORD *)(v57 + 32) = v55;
    *(_BYTE *)(v57 + 40) = 0;
    sub_100013520(v47, type metadata accessor for SportsWidgetClockView);
    v58 = v93;
    sub_100013880(v56, v93, &qword_100107588);
    sub_10001355C(v58, (uint64_t)v15, &qword_100107588);
    swift_storeEnumTagMultiPayload(v15, v85, 1);
    v59 = sub_100012FF8();
    v60 = sub_10002FBB4();
    _ConditionalContent<>.init(storage:)(v15, &type metadata for SportsWidgetStaleView, v36, v59, v60);
    sub_10001355C((uint64_t)v18, (uint64_t)v12, &qword_1001075A0);
    swift_storeEnumTagMultiPayload(v12, v87, 0);
    v61 = sub_100008EF4(&qword_1001075B8);
    v62 = sub_10002FB48();
    v63 = sub_100013840(&qword_1001075D0, &qword_1001075B8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v64 = (uint64_t)v84;
    _ConditionalContent<>.init(storage:)(v12, v86, v61, v62, v63);
    sub_1000135A0((uint64_t)v18, &qword_1001075A0);
    sub_1000135A0(v58, &qword_100107588);
    v65 = sub_100008EF4(&qword_1001075B0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v64, 0, 1, v65);
    v35 = v64;
    return sub_100013880(v35, v96, &qword_1001075A8);
  }
  v67 = v23[v24[10]];
  v68 = v87;
  if (v67 == 1)
  {
    v69 = static HorizontalAlignment.center.getter(v24);
    sub_10002F74C(v94, (uint64_t *)v97);
    *(_OWORD *)&v98[71] = v97[4];
    *(_OWORD *)&v98[55] = v97[3];
    *(_OWORD *)&v98[119] = v97[7];
    *(_OWORD *)&v98[135] = v97[8];
    *(_OWORD *)&v98[151] = v97[9];
    *(_OWORD *)&v98[167] = v97[10];
    *(_OWORD *)&v98[87] = v97[5];
    *(_OWORD *)&v98[103] = v97[6];
    *(_OWORD *)&v98[7] = v97[0];
    *(_OWORD *)&v98[23] = v97[1];
    *(_OWORD *)&v98[39] = v97[2];
    v70 = *(_OWORD *)&v98[144];
    *(_OWORD *)(v12 + 145) = *(_OWORD *)&v98[128];
    *(_OWORD *)(v12 + 161) = v70;
    *(_OWORD *)(v12 + 177) = *(_OWORD *)&v98[160];
    v71 = *(_OWORD *)&v98[80];
    *(_OWORD *)(v12 + 81) = *(_OWORD *)&v98[64];
    *(_OWORD *)(v12 + 97) = v71;
    v72 = *(_OWORD *)&v98[112];
    *(_OWORD *)(v12 + 113) = *(_OWORD *)&v98[96];
    *(_OWORD *)(v12 + 129) = v72;
    v73 = *(_OWORD *)&v98[16];
    *(_OWORD *)(v12 + 17) = *(_OWORD *)v98;
    *(_OWORD *)(v12 + 33) = v73;
    v74 = *(_OWORD *)&v98[48];
    *(_OWORD *)(v12 + 49) = *(_OWORD *)&v98[32];
    v99 = 1;
    *(_QWORD *)v12 = v69;
    *((_QWORD *)v12 + 1) = 0;
    v12[16] = 1;
    *((_QWORD *)v12 + 24) = *(_QWORD *)&v98[175];
    *(_OWORD *)(v12 + 65) = v74;
    swift_storeEnumTagMultiPayload(v12, v68, 1);
    v75 = sub_100008EF4(&qword_1001075B8);
    v76 = sub_10002FB48();
    v77 = sub_100013840(&qword_1001075D0, &qword_1001075B8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v78 = v96;
    _ConditionalContent<>.init(storage:)(v12, v86, v75, v76, v77);
    v79 = sub_100008EF4(&qword_1001075B0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v78, 0, 1, v79);
  }
  else
  {
    v80 = sub_100008EF4(&qword_1001075B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v96, 1, 1, v80);
  }
}

uint64_t type metadata accessor for SportsWidgetDynamicIslandExpanded(uint64_t a1)
{
  return sub_100025CD0(a1, qword_100107680, (uint64_t)&nominal type descriptor for SportsWidgetDynamicIslandExpanded);
}

uint64_t sub_10002F470@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  _OWORD v35[4];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v3 = type metadata accessor for SportsWidgetPlayByPlayLayout(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SportsWidgetPlayByPlayView(0);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100008EF4(&qword_1001060A8);
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v1 + *(int *)(type metadata accessor for SportsWidgetDynamicIslandExpanded(0) + 20);
  v13 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0);
  if (*(_BYTE *)(v12 + *(int *)(v13 + 48)) == 1)
  {
    sub_10003B4A8((uint64_t)v35);
    v14 = v35[1];
    *(_OWORD *)(v11 + 8) = v35[0];
    *(_OWORD *)(v11 + 24) = v14;
    v15 = v35[3];
    *(_OWORD *)(v11 + 40) = v35[2];
    v16 = v36;
    v17 = v38;
    *v11 = 2;
    *(_OWORD *)(v11 + 56) = v15;
    *((_QWORD *)v11 + 9) = v16;
    *((_OWORD *)v11 + 5) = v37;
    *((_QWORD *)v11 + 12) = v17;
    swift_storeEnumTagMultiPayload(v11, v9, 0);
    v18 = sub_100012FF8();
    v19 = sub_1000139F8(&qword_1001060B8, type metadata accessor for SportsWidgetPlayByPlayView, (uint64_t)&unk_1000CBD08);
    return _ConditionalContent<>.init(storage:)(v11, &type metadata for SportsWidgetStaleView, v6, v18, v19);
  }
  else
  {
    v21 = (uint64_t *)(v12 + *(int *)(v13 + 28));
    v23 = *v21;
    v22 = v21[1];
    v34 = a1;
    v24 = *((_BYTE *)v21 + 16);
    v25 = v21[3];
    v26 = *((unsigned __int8 *)v21 + 32);
    v27 = v21[5];
    v32 = *((unsigned __int8 *)v21 + 48);
    v33 = v26;
    swift_bridgeObjectRetain(v22);
    swift_retain(v25);
    swift_retain(v27);
    sub_1000A24F4((uint64_t)v5, 14.0, 0.0);
    *v8 = swift_getKeyPath(&unk_1000C8190);
    v28 = sub_100008EF4(&qword_100105F38);
    swift_storeEnumTagMultiPayload(v8, v28, 0);
    v29 = (char *)v8 + *(int *)(v6 + 20);
    *(_QWORD *)v29 = v23;
    *((_QWORD *)v29 + 1) = v22;
    v29[16] = v24;
    *((_QWORD *)v29 + 3) = v25;
    v29[32] = v33;
    *((_QWORD *)v29 + 5) = v27;
    v29[48] = v32;
    sub_10001303C((uint64_t)v5, (uint64_t)v8 + *(int *)(v6 + 24), type metadata accessor for SportsWidgetPlayByPlayLayout);
    sub_1000134DC((uint64_t)v8, (uint64_t)v11, type metadata accessor for SportsWidgetPlayByPlayView);
    swift_storeEnumTagMultiPayload(v11, v9, 1);
    v30 = sub_100012FF8();
    v31 = sub_1000139F8(&qword_1001060B8, type metadata accessor for SportsWidgetPlayByPlayView, (uint64_t)&unk_1000CBD08);
    _ConditionalContent<>.init(storage:)(v11, &type metadata for SportsWidgetStaleView, v6, v30, v31);
    return sub_100013520((uint64_t)v8, type metadata accessor for SportsWidgetPlayByPlayView);
  }
}

double sub_10002F74C@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t KeyPath;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v4 = (char *)a1 + *(int *)(type metadata accessor for SportsWidgetDynamicIslandExpanded(0) + 20);
  v5 = &v4[*(int *)(type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0) + 32)];
  v6 = *((_QWORD *)v5 + 1);
  if (!v6)
  {
    v68 = 0;
    v66 = 0;
    v67 = 0;
    v64 = 0;
    v65 = 0;
    v62 = 0;
    KeyPath = 0;
    v60 = 0;
    v61 = 0;
    v59 = 0;
    v26 = *((_QWORD *)v5 + 3);
    if (v26)
      goto LABEL_3;
LABEL_5:
    v56 = 0;
    v58 = 0;
    v54 = 0;
    v55 = 0;
    v46 = 0;
    v52 = 0;
    v53 = 0;
    v50 = 0;
    v51 = 0;
    v47 = 0;
    goto LABEL_6;
  }
  v57 = v5;
  v69 = *(_QWORD *)v5;
  v70 = v6;
  v7 = sub_100013080();
  swift_bridgeObjectRetain(v6);
  v8 = Text.init<A>(_:)(&v69, &type metadata for String, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = Text.foregroundColor(_:)(a1[1], v8, v9, v14, v11);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  sub_1000130C4(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  v68 = Text.font(_:)(*a1, v15, v17, v21, v19);
  v66 = v23;
  v67 = v22;
  v65 = v24 & 1;
  sub_1000130C4(v15, v17, v21);
  swift_bridgeObjectRelease(v19);
  v64 = a1[2];
  KeyPath = swift_getKeyPath(&unk_1000C81C0);
  v61 = *((unsigned __int8 *)a1 + 24);
  v62 = swift_getKeyPath(&unk_1000C81F0);
  v60 = a1[4];
  v25 = swift_getKeyPath(&unk_1000C8220);
  v5 = v57;
  v59 = v25;
  v26 = *((_QWORD *)v57 + 3);
  if (!v26)
    goto LABEL_5;
LABEL_3:
  v69 = *((_QWORD *)v5 + 2);
  v70 = v26;
  v27 = sub_100013080();
  swift_bridgeObjectRetain(v26);
  v28 = Text.init<A>(_:)(&v69, &type metadata for String, v27);
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  v35 = Text.foregroundColor(_:)(a1[1], v28, v29, v34, v31);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  sub_1000130C4(v28, v30, v34);
  swift_bridgeObjectRelease(v32);
  v42 = Text.font(_:)(*a1, v35, v37, v41, v39);
  v56 = v43;
  v58 = v42;
  v54 = v44 & 1;
  v55 = v45;
  sub_1000130C4(v35, v37, v41);
  swift_bridgeObjectRelease(v39);
  v53 = a1[2];
  v46 = swift_getKeyPath(&unk_1000C81C0);
  v51 = *((unsigned __int8 *)a1 + 24);
  v52 = swift_getKeyPath(&unk_1000C81F0);
  v50 = a1[4];
  v47 = swift_getKeyPath(&unk_1000C8220);
LABEL_6:
  *a2 = v68;
  a2[1] = v67;
  a2[2] = v65;
  a2[3] = v66;
  a2[4] = KeyPath;
  a2[5] = v64;
  a2[6] = 0;
  a2[7] = v62;
  a2[8] = v61;
  a2[9] = v59;
  a2[10] = v60;
  a2[11] = v58;
  a2[12] = v56;
  a2[13] = v54;
  a2[14] = v55;
  a2[15] = v46;
  a2[16] = v53;
  a2[17] = 0;
  a2[18] = v52;
  a2[19] = v51;
  a2[20] = v47;
  a2[21] = v50;
  v48 = v47;
  sub_100032530(v68, v67, v65, v66, KeyPath, v64, 0, v62, v61, v59);
  sub_100032530(v58, v56, v54, v55, v46, v53, 0, v52, v51, v48);
  sub_10003259C(v58, v56, v54, v55, v46, v53, 0, v52, v51, v48);
  return sub_10003259C(v68, v67, v65, v66, KeyPath, v64, 0, v62, v61, v59);
}

unint64_t sub_10002FB48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001075C0;
  if (!qword_1001075C0)
  {
    v1 = sub_100008F80(&qword_1001075A0);
    sub_100012FF8();
    sub_10002FBB4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001075C0);
  }
  return result;
}

unint64_t sub_10002FBB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001075C8;
  if (!qword_1001075C8)
  {
    v1 = sub_100008F80(&qword_100107588);
    sub_1000139F8(&qword_100106120, type metadata accessor for SportsWidgetClockView, (uint64_t)&unk_1000C98A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001075C8);
  }
  return result;
}

double sub_10002FC38@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  uint64_t v75;
  _QWORD v76[2];

  v6 = sub_100008EF4(&qword_1001075F8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v63 - v10;
  v12 = sub_10002DFC0();
  v71 = v9;
  v74 = v11;
  v64 = a2;
  if (v12)
  {
    v73 = *(_QWORD *)(a1 + 88);
    v13 = a1 + *(int *)(type metadata accessor for SportsWidgetDynamicIslandExpanded(0) + 20);
    v14 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0);
    v15 = 0;
    LODWORD(v75) = *(unsigned __int8 *)(v13 + *(int *)(v14 + 44));
    if ((v75 & 1) == 0)
      v15 = *(_QWORD *)(a1 + 104);
    v72 = v15;
    v16 = *(_QWORD *)(a2 + 40);
    v76[0] = *(_QWORD *)(a2 + 32);
    v76[1] = v16;
    v17 = sub_100013080();
    swift_bridgeObjectRetain(v16);
    v18 = Text.init<A>(_:)(v76, &type metadata for String, v17);
    v20 = v19;
    v22 = v21;
    v24 = v23 & 1;
    v25 = Text.foregroundColor(_:)(*(_QWORD *)(a1 + 80), v18, v19, v24, v21);
    v27 = v26;
    v29 = v28;
    v31 = v30 & 1;
    sub_1000130C4(v18, v20, v24);
    swift_bridgeObjectRelease(v22);
    v32 = Text.font(_:)(v73, v25, v27, v31, v29);
    v34 = v33;
    v36 = v35;
    v38 = v37 & 1;
    sub_1000130C4(v25, v27, v31);
    swift_bridgeObjectRelease(v29);
    v70 = Text.fontWeight(_:)(v72, v75, v32, v34, v38, v36);
    v73 = v39;
    v75 = v40;
    v42 = v41 & 1;
    sub_1000130C4(v32, v34, v38);
    swift_bridgeObjectRelease(v36);
    v69 = *(_QWORD *)(a1 + 112);
    KeyPath = swift_getKeyPath(&unk_1000C81C0);
    v67 = *(unsigned __int8 *)(a1 + 120);
    v68 = swift_getKeyPath(&unk_1000C81F0);
    v66 = *(_QWORD *)(a1 + 128);
    v65 = swift_getKeyPath(&unk_1000C8220);
  }
  else
  {
    v69 = 0;
    v70 = 0;
    v73 = 0;
    v42 = 0;
    v75 = 0;
    KeyPath = 0;
    v67 = 0;
    v68 = 0;
    v65 = 0;
    v66 = 0;
  }
  v44 = a1 + *(int *)(type metadata accessor for SportsWidgetDynamicIslandExpanded(0) + 20);
  if (*(_BYTE *)(v44 + *(int *)(type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0) + 44)) == 1)
  {
    v45 = v74;
    *v74 = *(_OWORD *)(a1 + 48);
    v46 = sub_100008EF4(&qword_100107610);
    sub_100030038((_QWORD *)a1, v64, (_OWORD *)((char *)v45 + *(int *)(v46 + 44)));
    v47 = sub_100008EF4(&qword_100107600);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v45, 0, 1, v47);
  }
  else
  {
    v48 = sub_100008EF4(&qword_100107600);
    v45 = v74;
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v74, 1, 1, v48);
  }
  v49 = (uint64_t)v71;
  sub_10001355C((uint64_t)v45, (uint64_t)v71, &qword_1001075F8);
  v50 = v70;
  v51 = v73;
  *a3 = v70;
  a3[1] = v51;
  v52 = v75;
  a3[2] = v42;
  a3[3] = v52;
  v75 = v52;
  v72 = KeyPath;
  a3[4] = KeyPath;
  v53 = v68;
  v54 = v69;
  a3[5] = v69;
  a3[6] = 0;
  v56 = v66;
  v55 = v67;
  a3[7] = v53;
  a3[8] = v55;
  v57 = v65;
  a3[9] = v65;
  a3[10] = v56;
  v58 = sub_100008EF4(&qword_100107608);
  sub_10001355C(v49, (uint64_t)a3 + *(int *)(v58 + 48), &qword_1001075F8);
  v59 = v73;
  v60 = v52;
  v61 = v72;
  sub_100032530(v50, v73, v42, v60, v72, v54, 0, v53, v55, v57);
  sub_1000135A0((uint64_t)v74, &qword_1001075F8);
  sub_1000135A0(v49, &qword_1001075F8);
  return sub_10003259C(v50, v59, v42, v75, v61, v54, 0, v53, v55, v57);
}

uint64_t sub_100030038@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t KeyPath;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  _BYTE v103[56];
  __int128 v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 v120;
  _OWORD v121[4];
  uint64_t v122;
  __int128 v123;
  uint64_t v124;

  v81 = a3;
  v83 = sub_100008EF4(&qword_100106240);
  __chkstk_darwin(v83);
  v6 = (uint64_t *)((char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v82 = sub_100008EF4(&qword_100106288);
  __chkstk_darwin(v82);
  v88 = (uint64_t *)((char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v85 = sub_100008EF4(&qword_100106370);
  __chkstk_darwin(v85);
  v87 = (uint64_t)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100008EF4(&qword_100106378);
  v9 = __chkstk_darwin(v86);
  v95 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v84 = (uint64_t)&v73 - v12;
  __chkstk_darwin(v11);
  v94 = (uint64_t)&v73 - v13;
  v14 = (char *)a1 + *(int *)(type metadata accessor for SportsWidgetDynamicIslandExpanded(0) + 20);
  v15 = v14[*(int *)(type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0) + 48)];
  v77 = a2;
  if (v15 == 1)
  {
    sub_10003B4A8((uint64_t)v121);
    v102 = v121[0];
    *(_OWORD *)v103 = v121[1];
    *(_OWORD *)&v103[16] = v121[2];
    v101 = 0;
    *(_OWORD *)&v103[32] = v121[3];
    *(_QWORD *)&v103[48] = v122;
    v104 = v123;
    v105 = v124;
    v106 = 0;
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v18 = swift_bridgeObjectRetain(v16);
    v19 = static Font.largeTitle.getter(v18);
    v20 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
    v21 = Color.init(uiColor:)(v20);
    v101 = v17;
    *(_QWORD *)&v102 = v16;
    *((_QWORD *)&v102 + 1) = v19;
    *(_QWORD *)v103 = v21;
    *(int64x2_t *)&v103[8] = vdupq_n_s64(1uLL);
    *(_OWORD *)&v103[24] = xmmword_1000C5720;
    *(_OWORD *)&v103[40] = 0u;
    v104 = 0u;
    v105 = 0;
    v106 = 1;
  }
  v22 = sub_100012FF8();
  v23 = sub_1000133E0();
  _ConditionalContent<>.init(storage:)(&v101, &type metadata for SportsWidgetStaleView, &type metadata for SportsWidgetScoreView, v22, v23);
  v92 = v108;
  v93 = v107;
  v90 = v110;
  v91 = v109;
  v24 = v112;
  v89 = v111;
  v99 = v115;
  v100 = v114;
  v97 = v117;
  v98 = v116;
  v96 = v118;
  v79 = v119;
  v80 = v113;
  v78 = v120;
  v25 = a1[17];
  v26 = a1[18];
  swift_bridgeObjectRetain(v26);
  v76 = Image.init(systemName:)(v25, v26);
  v27 = a1[20];
  KeyPath = swift_getKeyPath(&unk_1000C8250);
  v28 = a1[19];
  v29 = swift_getKeyPath(&unk_1000C8280);
  v30 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewLayout(0);
  v31 = (char *)a1 + *(int *)(v30 + 92);
  v32 = swift_getKeyPath(&unk_1000C82B0);
  v74 = a1;
  v33 = v32;
  v34 = (char *)v6 + *(int *)(v83 + 28);
  v35 = type metadata accessor for Image.Scale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v34, v31, v35);
  *v6 = v33;
  v36 = v88;
  sub_10001355C((uint64_t)v6, (uint64_t)v88 + *(int *)(v82 + 36), &qword_100106240);
  v37 = KeyPath;
  *v36 = v76;
  v36[1] = v37;
  v36[2] = v27;
  v36[3] = v29;
  v36[4] = v28;
  swift_retain(v27);
  swift_retain(v28);
  sub_1000135A0((uint64_t)v6, &qword_100106240);
  v38 = *(_QWORD *)((char *)v74 + *(int *)(v30 + 96));
  v39 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleCaption2);
  objc_msgSend(v39, "pointSize");
  v41 = v40;

  v42 = v87;
  sub_10001355C((uint64_t)v36, v87, &qword_100106288);
  v43 = v42 + *(int *)(v85 + 36);
  *(_QWORD *)v43 = v38;
  *(double *)(v43 + 8) = v41 + -3.0;
  sub_1000135A0((uint64_t)v36, &qword_100106288);
  if ((*(_BYTE *)(v77 + 112) & 1) != 0)
    v44 = 1.0;
  else
    v44 = 0.0;
  v45 = v84;
  sub_10001355C(v42, v84, &qword_100106370);
  *(double *)(v45 + *(int *)(v86 + 36)) = v44;
  sub_1000135A0(v42, &qword_100106370);
  v46 = v94;
  sub_100013880(v45, v94, &qword_100106378);
  v47 = v46;
  v48 = v95;
  sub_10001355C(v47, v95, &qword_100106378);
  v50 = v80;
  v49 = v81;
  v51 = v92;
  *v81 = v93;
  v49[1] = v51;
  v52 = v90;
  v49[2] = v91;
  v49[3] = v52;
  v49[4] = v89;
  v49[5] = v24;
  v73 = v24;
  v53 = v100;
  v49[6] = v50;
  v49[7] = v53;
  v55 = v98;
  v54 = v99;
  v49[8] = v99;
  v49[9] = v55;
  v56 = v54;
  v98 = v55;
  v99 = v54;
  v58 = v96;
  v57 = v97;
  v49[10] = v97;
  v49[11] = v58;
  v96 = v58;
  v97 = v57;
  v59 = v79;
  v49[12] = v79;
  v60 = v78;
  *((_BYTE *)v49 + 104) = v78;
  v61 = sub_100008EF4(&qword_100107618);
  sub_10001355C(v48, (uint64_t)v49 + *(int *)(v61 + 48), &qword_100106378);
  v72 = v58;
  v70 = v55;
  v71 = v57;
  v69 = v56;
  v62 = v92;
  v63 = v93;
  v64 = v90;
  v65 = v91;
  v66 = v89;
  v67 = v73;
  sub_1000328F0(v93, v92, v91, v90, v89, v73, v50, v100, v69, v70, v71, v72, v59, v60);
  sub_1000135A0(v94, &qword_100106378);
  sub_1000135A0(v95, &qword_100106378);
  return sub_100013490(v63, v62, v65, v64, v66, v67, v50, v100, v99, v98, v97, v96, v59, v60);
}

BOOL sub_10003066C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100030684@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t OpaqueTypeConformance2;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _BYTE v36[272];
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  _BYTE v42[272];
  _BYTE v43[296];
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  __int128 v48;

  v3 = sub_100008EF4(&qword_100107750);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008EF4(&qword_100107758);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008EF4(&qword_100107760);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*v1 & 1) != 0)
  {
    v14 = static VerticalAlignment.center.getter(v11);
    sub_1000313DC((uint64_t)v1, v42);
    v43[272] = 1;
    v15 = memcpy(&v43[7], v42, 0x109uLL);
    v32 = a1;
    v16 = static Alignment.trailing.getter(v15);
    _FrameLayout.init(width:height:alignment:)(&v44, 0, 1, 0, 1, v16, v17);
    v30 = v4;
    v31 = v10;
    v43[288] = v45;
    v43[280] = v47;
    v33 = v14;
    v34 = 0;
    v35 = 1;
    memcpy(v36, v43, sizeof(v36));
    v37 = v44;
    v38 = v45;
    v39 = v46;
    v40 = v47;
    v41 = v48;
    v18 = &v1[*(int *)(type metadata accessor for SportsWidgetDynamicIslandCompactView(0) + 24)];
    v19 = &v18[*(int *)(type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(0) + 24)];
    v20 = sub_100008EF4(&qword_100107768);
    v21 = sub_100036490(&qword_100107770, &qword_100107768, &qword_100107778, &qword_100107780);
    View.widgetURL(_:)(v19, v20, v21);
    sub_1000362A4((uint64_t)v42);
    v22 = v30;
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v9, v6, v3);
    swift_storeEnumTagMultiPayload(v9, v7, 1);
    v23 = sub_1000363BC();
    v33 = v20;
    v34 = v21;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v9, v31, v3, v23, OpaqueTypeConformance2);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v6, v3);
  }
  else
  {
    sub_1000309D8((uint64_t)v13);
    sub_10001355C((uint64_t)v13, (uint64_t)v9, &qword_100107760);
    swift_storeEnumTagMultiPayload(v9, v7, 0);
    v26 = sub_1000363BC();
    v27 = sub_100008F80(&qword_100107768);
    v28 = sub_100036490(&qword_100107770, &qword_100107768, &qword_100107778, &qword_100107780);
    v33 = v27;
    v34 = v28;
    v29 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v9, v10, v3, v26, v29);
    return sub_1000135A0((uint64_t)v13, &qword_100107760);
  }
}

uint64_t sub_1000309D8@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _BYTE v47[272];
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  _BYTE v53[296];
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  _BYTE v59[280];

  v2 = v1;
  v4 = type metadata accessor for SportsWidgetDynamicIslandCompactView(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008EF4(&qword_1001077B0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v43 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static VerticalAlignment.center.getter(v9);
  v12 = sub_100030CD8((uint64_t)v2, v59);
  v13 = *v2;
  v41 = v7;
  v42 = a1;
  v40 = v8;
  if ((v13 & 1) != 0)
    v14 = static Alignment.trailing.getter(v12);
  else
    v14 = static Alignment.leading.getter(v12);
  v16 = v14;
  v17 = v15;
  v53[272] = 1;
  memcpy(&v53[7], v59, 0x109uLL);
  _FrameLayout.init(width:height:alignment:)(&v54, 0, 1, 0, 1, v16, v17);
  v53[288] = v55;
  v53[280] = v57;
  v44 = v11;
  v45 = 0;
  v46 = 1;
  memcpy(v47, v53, sizeof(v47));
  v48 = v54;
  v49 = v55;
  v50 = v56;
  v51 = v57;
  v52 = v58;
  v18 = &v2[*(int *)(v4 + 24)];
  v19 = (int *)type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(0);
  v20 = &v18[v19[6]];
  v21 = sub_100008EF4(&qword_100107790);
  v22 = sub_100036490(&qword_100107798, &qword_100107790, &qword_1001077A0, &qword_1001077A8);
  View.widgetURL(_:)(v20, v21, v22);
  sub_100036510((uint64_t)v59);
  v23 = (uint64_t *)&v18[v19[8]];
  v25 = *v23;
  v24 = v23[1];
  sub_1000134DC((uint64_t)v2, (uint64_t)v6, type metadata accessor for SportsWidgetDynamicIslandCompactView);
  if (v24)
  {
    v26 = v24;
  }
  else
  {
    v27 = &v6[*(int *)(v4 + 24) + (uint64_t)v19[7]];
    v25 = *(_QWORD *)v27;
    v26 = *((_QWORD *)v27 + 1);
    swift_bridgeObjectRetain(v26);
  }
  swift_bridgeObjectRetain(v24);
  sub_100013520((uint64_t)v6, type metadata accessor for SportsWidgetDynamicIslandCompactView);
  v44 = v25;
  v45 = v26;
  v28 = sub_100013080();
  v29 = Text.init<A>(_:)(&v44, &type metadata for String, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34 & 1;
  v44 = v21;
  v45 = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v44, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  v37 = v41;
  v38 = v43;
  View.accessibility(label:)(v29, v31, v35, v33, v41, OpaqueTypeConformance2);
  sub_1000130C4(v29, v31, v35);
  swift_bridgeObjectRelease(v33);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v38, v37);
}

uint64_t sub_100030CD8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *__dst;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE v106[176];
  _BYTE v107[176];
  uint64_t __src[34];
  _BYTE v109[176];
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  _BYTE v113[40];
  __int128 v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD v123[4];
  uint64_t v124;
  __int128 v125;
  uint64_t v126;

  v4 = (_QWORD *)(a1 + *(int *)(type metadata accessor for SportsWidgetDynamicIslandCompactView(0) + 24));
  v5 = v4[2];
  v6 = v4[3];
  v8 = v4[4];
  v7 = v4[5];
  __dst = a2;
  if (v7)
  {
    v9 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v9 = v8 & 0xFFFFFFFFFFFFLL;
    if (!(v9 | v6))
      goto LABEL_5;
  }
  else if (!v6)
  {
LABEL_5:
    v10 = (_QWORD *)((char *)v4
                   + *(int *)(type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(0) + 28));
    v11 = v10[1];
    __src[0] = *v10;
    __src[1] = v11;
    v12 = sub_100013080();
    swift_bridgeObjectRetain(v11);
    v13 = Text.init<A>(_:)(__src, &type metadata for String, v12);
    v15 = v14;
    v17 = v16;
    v19 = v18 & 1;
    v20 = Text.foregroundColor(_:)(*(_QWORD *)(a1 + 80), v13, v14, v19, v16);
    v22 = v21;
    v24 = v23;
    v26 = v25 & 1;
    sub_1000130C4(v13, v15, v19);
    swift_bridgeObjectRelease(v17);
    v104 = Text.font(_:)(*(_QWORD *)(a1 + 88), v20, v22, v26, v24);
    v28 = v27;
    v30 = v29;
    v32 = v31 & 1;
    sub_1000130C4(v20, v22, v26);
    swift_bridgeObjectRelease(v24);
    v33 = *(_QWORD *)(a1 + 96);
    KeyPath = swift_getKeyPath(&unk_1000C81C0);
    v35 = *(unsigned __int8 *)(a1 + 104);
    v36 = swift_getKeyPath(&unk_1000C81F0);
    v37 = *(_QWORD *)(a1 + 112);
    v38 = swift_getKeyPath(&unk_1000C8220);
    v110 = v104;
    *(_QWORD *)&v111 = v28;
    *((_QWORD *)&v111 + 1) = v32;
    *(_QWORD *)&v112 = v30;
    *((_QWORD *)&v112 + 1) = KeyPath;
    *(_QWORD *)v113 = v33;
    *(_QWORD *)&v113[8] = 0;
    *(_QWORD *)&v113[16] = v36;
    *(_QWORD *)&v113[24] = v35;
    *(_QWORD *)&v113[32] = v38;
    *(_QWORD *)&v114 = v37;
    BYTE8(v114) = 1;
    goto LABEL_8;
  }
  v39 = *(_QWORD *)(a1 + 72);
  v40 = *v4;
  v41 = v4[1];
  v110 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&v111 = v39;
  *((_QWORD *)&v111 + 1) = v40;
  *(_QWORD *)&v112 = v41;
  *((_QWORD *)&v112 + 1) = v5;
  *(_QWORD *)v113 = v6;
  *(_QWORD *)&v113[8] = v8;
  *(_QWORD *)&v113[16] = v7;
  *(_QWORD *)&v114 = 0;
  *(_QWORD *)&v113[24] = 0;
  *(_QWORD *)&v113[32] = 0;
  BYTE8(v114) = 0;
  swift_bridgeObjectRetain(v7);
  swift_retain(v39);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v6);
LABEL_8:
  v42 = sub_100008EF4(&qword_100106268);
  v43 = sub_1000132F8();
  v44 = sub_100013344();
  _ConditionalContent<>.init(storage:)(&v110, &type metadata for SportsWidgetLogoView, v42, v43, v44);
  v45 = __src[0];
  v46 = __src[1];
  v47 = __src[2];
  v48 = __src[3];
  v93 = __src[6];
  v94 = __src[4];
  v103 = __src[5];
  v105 = __src[7];
  v98 = __src[8];
  v49 = __src[9];
  v50 = __src[10];
  v51 = __src[11];
  v52 = type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(0);
  v101 = v46;
  v102 = v45;
  v100 = v47;
  v96 = v50;
  v97 = v49;
  v95 = v51;
  if (*((_BYTE *)v4 + *(int *)(v52 + 36)) == 1)
  {
    v53 = v52;
    v90 = v48;
    v54 = *(_QWORD *)(a1 + 8);
    v55 = static Alignment.center.getter(v52);
    _FrameLayout.init(width:height:alignment:)(&v117, v54, 0, 0, 1, v55, v56);
    v88 = v119;
    v89 = v117;
    v91 = v120;
    v92 = v118;
    v86 = v122;
    v87 = v121;
    if (*((_BYTE *)v4 + *(int *)(v53 + 40)) == 1)
    {
      sub_10003B4A8((uint64_t)v123);
      v111 = v123[0];
      v112 = v123[1];
      *(_OWORD *)v113 = v123[2];
      *(_OWORD *)&v113[16] = v123[3];
      v110 = 3;
      *(_QWORD *)&v113[32] = v124;
      v114 = v125;
      v115 = v126;
      v116 = 0;
      v57 = sub_100012FF8();
      v58 = sub_1000133E0();
      v59 = v57;
    }
    else
    {
      v60 = v4[7];
      v61 = *(_QWORD *)(a1 + 16);
      v62 = *(_QWORD *)(a1 + 24);
      v63 = *(_QWORD *)(a1 + 32);
      v64 = *(unsigned __int8 *)(a1 + 40);
      v110 = v4[6];
      *(_QWORD *)&v111 = v60;
      *((_QWORD *)&v111 + 1) = v61;
      *(_QWORD *)&v112 = v62;
      *((_QWORD *)&v112 + 1) = v63;
      *(_QWORD *)v113 = v64;
      *(_OWORD *)&v113[8] = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&v113[24] = 0u;
      v114 = 0u;
      v115 = 0;
      v116 = 1;
      v65 = sub_100012FF8();
      v66 = sub_1000133E0();
      swift_bridgeObjectRetain(v60);
      swift_retain(v61);
      swift_retain(v62);
      v59 = v65;
      v58 = v66;
    }
    _ConditionalContent<>.init(storage:)(&v110, &type metadata for SportsWidgetStaleView, &type metadata for SportsWidgetScoreView, v59, v58);
    v67 = __src[0];
    v68 = __src[1];
    v69 = __src[2];
    v70 = __src[3];
    v71 = __src[4];
    v72 = __src[12];
    v73 = __src[13];
    v78 = __src[8];
    v109[0] = 1;
    v107[0] = v92;
    v106[0] = v91;
    v80 = __src[6];
    v81 = __src[5];
    v79 = __src[7];
    v74 = __src[9];
    v75 = __src[10];
    v82 = __src[10];
    v83 = __src[11];
    v76 = __src[11];
    v84 = __src[12];
    v85 = __src[13];
    sub_1000328F0(__src[0], __src[1], __src[2], __src[3], __src[4], __src[5], __src[6], __src[7], __src[8], __src[9], __src[10], __src[11], __src[12], __src[13]);
    sub_100013490(v67, v68, v69, v70, v71, v81, v80, v79, v78, v74, v75, v76, v72, v73);
    __src[0] = 0;
    LOBYTE(__src[1]) = 1;
    __src[2] = v89;
    LOBYTE(__src[3]) = v92;
    __src[4] = v88;
    LOBYTE(__src[5]) = v91;
    __src[6] = v87;
    __src[7] = v86;
    __src[8] = v67;
    __src[9] = v68;
    __src[10] = v69;
    __src[11] = v70;
    __src[12] = v71;
    __src[13] = v81;
    __src[14] = v80;
    __src[15] = v79;
    __src[16] = v78;
    __src[17] = v74;
    __src[18] = v82;
    __src[19] = v83;
    __src[20] = v84;
    LOBYTE(__src[21]) = v85;
    nullsub_1(__src);
    sub_100013880((uint64_t)__src, (uint64_t)&v110, &qword_1001077B8);
    v46 = v101;
    v45 = v102;
    v47 = v100;
    v48 = v90;
  }
  else
  {
    sub_100036668((uint64_t)__src);
    sub_100013880((uint64_t)__src, (uint64_t)&v110, &qword_1001077B8);
  }
  sub_100013880((uint64_t)&v110, (uint64_t)v106, &qword_1001077B8);
  sub_100013880((uint64_t)v106, (uint64_t)v107, &qword_1001077B8);
  __src[0] = v45;
  __src[1] = v46;
  __src[2] = v47;
  __src[3] = v48;
  __src[4] = v94;
  __src[5] = v103;
  __src[6] = v93;
  __src[7] = v105;
  __src[8] = v98;
  __src[9] = v97;
  __src[10] = v96;
  LOBYTE(__src[11]) = v95;
  sub_100013880((uint64_t)v107, (uint64_t)&__src[12], &qword_1001077B8);
  memcpy(__dst, __src, 0x109uLL);
  sub_100013880((uint64_t)v106, (uint64_t)v109, &qword_1001077B8);
  sub_1000326EC(v45, v46, v47, v48, v94, v103, v93, v105, v98, v97, v96, v95);
  sub_1000366D4((uint64_t)v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100036690);
  sub_1000366D4((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100036624);
  return sub_10003278C(v102, v101, v100, v48, v94, v103, v93, v105, v98, v97, v96, v95);
}

_QWORD *sub_1000313DC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t KeyPath;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  _BYTE v84[176];
  _QWORD v85[22];
  uint64_t __src[34];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  _OWORD v99[4];
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  _BYTE v112[40];
  __int128 v113;
  uint64_t v114;
  char v115;

  v4 = (_QWORD *)(a1 + *(int *)(type metadata accessor for SportsWidgetDynamicIslandCompactView(0) + 24));
  v5 = type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(0);
  v6 = v5;
  v82 = a2;
  if (*((_BYTE *)v4 + *(int *)(v5 + 36)) == 1)
  {
    v77 = v5;
    if (*((_BYTE *)v4 + *(int *)(v5 + 40)) == 1)
    {
      sub_10003B4A8((uint64_t)v99);
      v110 = v99[0];
      v111 = v99[1];
      *(_OWORD *)v112 = v99[2];
      *(_OWORD *)&v112[16] = v99[3];
      v109 = 3;
      *(_QWORD *)&v112[32] = v100;
      v113 = v101;
      v114 = v102;
      v115 = 0;
      v7 = sub_100012FF8();
      v8 = sub_1000133E0();
      v9 = v7;
    }
    else
    {
      v10 = v4[7];
      v11 = *(_QWORD *)(a1 + 16);
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(unsigned __int8 *)(a1 + 40);
      v109 = v4[6];
      *(_QWORD *)&v110 = v10;
      *((_QWORD *)&v110 + 1) = v11;
      *(_QWORD *)&v111 = v12;
      *((_QWORD *)&v111 + 1) = v13;
      *(_QWORD *)v112 = v14;
      *(_OWORD *)&v112[8] = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&v112[24] = 0u;
      v113 = 0u;
      v114 = 0;
      v115 = 1;
      v15 = sub_100012FF8();
      v16 = sub_1000133E0();
      swift_bridgeObjectRetain(v10);
      swift_retain(v11);
      swift_retain(v12);
      v9 = v15;
      v8 = v16;
    }
    v17 = _ConditionalContent<>.init(storage:)(&v109, &type metadata for SportsWidgetStaleView, &type metadata for SportsWidgetScoreView, v9, v8);
    v18 = *(_QWORD *)(a1 + 8);
    v19 = static Alignment.center.getter(v17);
    _FrameLayout.init(width:height:alignment:)(&v103, v18, 0, 0, 1, v19, v20);
    v74 = v105;
    v75 = v103;
    v70 = v104;
    v71 = v106;
    v73 = v107;
    v72 = v108;
    LOBYTE(v87) = __src[13];
    LOBYTE(v85[0]) = 1;
    v84[0] = v104;
    sub_1000328F0(__src[0], __src[1], __src[2], __src[3], __src[4], __src[5], __src[6], __src[7], __src[8], __src[9], __src[10], __src[11], __src[12], __src[13]);
    sub_100013490(__src[0], __src[1], __src[2], __src[3], __src[4], __src[5], __src[6], __src[7], __src[8], __src[9], __src[10], __src[11], __src[12], __src[13]);
    __src[14] = 0;
    LOBYTE(__src[15]) = 1;
    __src[16] = v75;
    LOBYTE(__src[17]) = v70;
    __src[18] = v74;
    LOBYTE(__src[19]) = v71;
    __src[20] = v73;
    __src[21] = v72;
    nullsub_1(__src);
    sub_100013880((uint64_t)__src, (uint64_t)&v109, &qword_1001077C0);
    v6 = v77;
  }
  else
  {
    sub_100036740((uint64_t)__src);
    sub_100013880((uint64_t)__src, (uint64_t)&v109, &qword_1001077C0);
  }
  v21 = v4[2];
  v22 = v4[3];
  v24 = v4[4];
  v23 = v4[5];
  if (v23)
  {
    v25 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0)
      v25 = v24 & 0xFFFFFFFFFFFFLL;
    if (!(v25 | v22))
      goto LABEL_11;
LABEL_13:
    v56 = *(_QWORD *)(a1 + 64);
    v57 = *(_QWORD *)(a1 + 72);
    v58 = *v4;
    v59 = v4[1];
    v87 = v56;
    v88 = v57;
    v89 = v58;
    v90 = v59;
    v91 = v21;
    v92 = v22;
    v93 = v24;
    v94 = v23;
    v97 = 0;
    v95 = 0;
    v96 = 0;
    v98 = 0;
    swift_bridgeObjectRetain(v23);
    swift_retain(v57);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v22);
    goto LABEL_14;
  }
  if (v22)
    goto LABEL_13;
LABEL_11:
  v26 = (_QWORD *)((char *)v4 + *(int *)(v6 + 28));
  v27 = v26[1];
  __src[0] = *v26;
  __src[1] = v27;
  v28 = sub_100013080();
  swift_bridgeObjectRetain(v27);
  v29 = Text.init<A>(_:)(__src, &type metadata for String, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34 & 1;
  v36 = Text.foregroundColor(_:)(*(_QWORD *)(a1 + 80), v29, v30, v35, v32);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  sub_1000130C4(v29, v31, v35);
  swift_bridgeObjectRelease(v33);
  v43 = Text.font(_:)(*(_QWORD *)(a1 + 88), v36, v38, v42, v40);
  v45 = v44;
  v47 = v46;
  v49 = v48 & 1;
  sub_1000130C4(v36, v38, v42);
  swift_bridgeObjectRelease(v40);
  v50 = *(_QWORD *)(a1 + 96);
  KeyPath = swift_getKeyPath(&unk_1000C81C0);
  v52 = *(unsigned __int8 *)(a1 + 104);
  v53 = swift_getKeyPath(&unk_1000C81F0);
  v54 = *(_QWORD *)(a1 + 112);
  v55 = swift_getKeyPath(&unk_1000C8220);
  v87 = v43;
  v88 = v45;
  v89 = v49;
  v90 = v47;
  v91 = KeyPath;
  v92 = v50;
  v93 = 0;
  v94 = v53;
  v95 = v52;
  v96 = v55;
  v97 = v54;
  v98 = 1;
LABEL_14:
  v60 = sub_100008EF4(&qword_100106268);
  v61 = sub_1000132F8();
  v62 = sub_100013344();
  _ConditionalContent<>.init(storage:)(&v87, &type metadata for SportsWidgetLogoView, v60, v61, v62);
  v63 = __src[0];
  v64 = __src[1];
  v65 = __src[2];
  v66 = __src[3];
  v67 = __src[4];
  v76 = __src[5];
  v83 = __src[6];
  v68 = __src[7];
  v80 = __src[9];
  v81 = __src[8];
  v79 = __src[10];
  v78 = __src[11];
  sub_100013880((uint64_t)&v109, (uint64_t)v84, &qword_1001077C0);
  sub_100013880((uint64_t)v84, (uint64_t)v85, &qword_1001077C0);
  sub_100013880((uint64_t)v85, (uint64_t)__src, &qword_1001077C0);
  __src[22] = v63;
  __src[23] = v64;
  __src[24] = v65;
  __src[25] = v66;
  __src[26] = v67;
  __src[27] = v76;
  __src[28] = v83;
  __src[29] = v68;
  __src[30] = v81;
  __src[31] = v80;
  __src[32] = v79;
  LOBYTE(__src[33]) = v78;
  memcpy(v82, __src, 0x109uLL);
  sub_10003679C(v85, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100036764);
  sub_1000326EC(v63, v64, v65, v66, v67, v76, v83, v68, v81, v80, v79, v78);
  sub_10003278C(v63, v64, v65, v66, v67, v76, v83, v68, v81, v80, v79, v78);
  sub_100013880((uint64_t)v84, (uint64_t)&v87, &qword_1001077C0);
  return sub_10003679C(&v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100036384);
}

uint64_t sub_100031AF0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v26[4];
  _BYTE v27[544];
  _QWORD v28[68];

  v3 = sub_100008EF4(&qword_1001077C8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static Alignment.center.getter(v4);
  v9 = v8;
  sub_100031C78((uint64_t)v1, v28);
  memcpy(v27, v28, sizeof(v27));
  v26[2] = v7;
  v26[3] = v9;
  v10 = v1[44];
  if (v10)
  {
    v11 = v1[43];
    v12 = v10;
  }
  else
  {
    v13 = v1 + 13;
    v11 = v1[13];
    v12 = swift_bridgeObjectRetain(v13[1]);
  }
  v26[0] = v11;
  v26[1] = v12;
  v14 = sub_100013080();
  swift_bridgeObjectRetain(v10);
  v15 = Text.init<A>(_:)(v26, &type metadata for String, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  v22 = sub_100008EF4(&qword_1001077D0);
  v23 = sub_100013840(&qword_1001077D8, &qword_1001077D0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.accessibility(label:)(v15, v17, v21, v19, v22, v23);
  sub_1000130C4(v15, v17, v21);
  swift_bridgeObjectRelease(v19);
  sub_100036800(v28);
  return sub_100013880((uint64_t)v6, a1, &qword_1001077C8);
}

_QWORD *sub_100031C78@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[128];
  _OWORD v93[7];
  char v94;
  _OWORD v95[7];
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  _OWORD __src[17];
  _OWORD v102[17];
  _BYTE __dst[544];
  _QWORD v104[2];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  char v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[2];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;

  v3 = *(_OWORD *)(a1 + 248);
  v4 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)&v92[80] = *(_OWORD *)(a1 + 264);
  *(_OWORD *)&v92[96] = v4;
  *(_OWORD *)&v92[112] = *(_OWORD *)(a1 + 296);
  v5 = *(_OWORD *)(a1 + 184);
  v6 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)&v92[16] = *(_OWORD *)(a1 + 200);
  *(_OWORD *)&v92[32] = v6;
  *(_OWORD *)&v92[48] = *(_OWORD *)(a1 + 232);
  *(_OWORD *)&v92[64] = v3;
  v7 = *(_OWORD *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 152);
  v89 = *(_OWORD *)(a1 + 136);
  v90 = v8;
  v91 = *(_OWORD *)(a1 + 168);
  *(_OWORD *)v92 = v5;
  v9 = *(_OWORD *)(a1 + 88);
  v85 = *(_OWORD *)(a1 + 72);
  v86 = v9;
  v87 = *(_OWORD *)(a1 + 104);
  v88 = v7;
  v10 = *(_QWORD *)(a1 + 312);
  v11 = *(_QWORD *)(a1 + 320);
  v12 = *(_QWORD *)(a1 + 328);
  v13 = *(_QWORD *)(a1 + 336);
  v14 = *(_OWORD *)(a1 + 152);
  v95[4] = *(_OWORD *)(a1 + 136);
  v95[5] = v14;
  v95[6] = *(_OWORD *)(a1 + 168);
  v96 = *(_BYTE *)(a1 + 184);
  v15 = *(_OWORD *)(a1 + 88);
  v95[0] = *(_OWORD *)(a1 + 72);
  v95[1] = v15;
  v16 = *(_OWORD *)(a1 + 120);
  v95[2] = *(_OWORD *)(a1 + 104);
  v95[3] = v16;
  v49 = static Alignment.center.getter(a1);
  v18 = v17;
  v45 = v17;
  v19 = sub_1000320E8((double *)a1, (uint64_t)v95, (uint64_t)&v63);
  v20 = *(double *)a1;
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(_QWORD *)(a1 + 40);
  v24 = *(_QWORD *)(a1 + 48);
  v25 = static Alignment.center.getter(v19);
  v27 = _FrameLayout.init(width:height:alignment:)(&v74, *(_QWORD *)&v20, 0, *(_QWORD *)&v20, 0, v25, v26);
  v28 = v74;
  v29 = v75;
  v51 = v76;
  v30 = v77;
  v31 = v78;
  v47 = v78;
  v48 = v74;
  v43 = v79;
  v98 = v75;
  v46 = v75;
  v97 = v77;
  v44 = v77;
  v93[4] = *(_OWORD *)&v92[72];
  v93[5] = *(_OWORD *)&v92[88];
  v93[6] = *(_OWORD *)&v92[104];
  v94 = v92[120];
  v93[0] = *(_OWORD *)&v92[8];
  v93[1] = *(_OWORD *)&v92[24];
  v93[2] = *(_OWORD *)&v92[40];
  v93[3] = *(_OWORD *)&v92[56];
  v32 = static Alignment.center.getter(v27);
  v42 = v33;
  v34 = sub_1000320E8((double *)a1, (uint64_t)v93, (uint64_t)&v52);
  v35 = static Alignment.center.getter(v34);
  _FrameLayout.init(width:height:alignment:)(&v80, *(_QWORD *)&v20, 0, *(_QWORD *)&v20, 0, v35, v36);
  v37 = v80;
  LOBYTE(v20) = v81;
  v38 = v83;
  v100 = v81;
  v99 = v83;
  *(_QWORD *)&__src[0] = v49;
  *((_QWORD *)&__src[0] + 1) = v18;
  __src[9] = v71;
  __src[10] = v72;
  __src[11] = v73;
  __src[5] = v67;
  __src[6] = v68;
  __src[8] = v70;
  __src[7] = v69;
  __src[1] = v63;
  __src[2] = v64;
  __src[4] = v66;
  __src[3] = v65;
  *(_QWORD *)&__src[12] = v28;
  BYTE8(__src[12]) = v29;
  *(_QWORD *)&__src[13] = v51;
  BYTE8(__src[13]) = v30;
  *(_QWORD *)&__src[14] = v31;
  *((_QWORD *)&__src[14] + 1) = v43;
  *(_QWORD *)&__src[15] = v10;
  *((_QWORD *)&__src[15] + 1) = v21;
  *(_QWORD *)&__src[16] = v22;
  *((_QWORD *)&__src[16] + 1) = v12;
  *(_QWORD *)&v102[0] = v32;
  *((_QWORD *)&v102[0] + 1) = v42;
  v102[9] = v60;
  v102[10] = v61;
  v102[11] = v62;
  v102[5] = v56;
  v102[6] = v57;
  v102[8] = v59;
  v102[7] = v58;
  v102[1] = v52;
  v102[2] = v53;
  v102[4] = v55;
  v102[3] = v54;
  *(_QWORD *)&v102[12] = v80;
  BYTE8(v102[12]) = v81;
  *(_QWORD *)&v102[13] = v82;
  v39 = v82;
  BYTE8(v102[13]) = v83;
  v102[14] = v84;
  v40 = v84;
  *(_QWORD *)&v102[15] = v11;
  *((_QWORD *)&v102[15] + 1) = v23;
  *(_QWORD *)&v102[16] = v24;
  *((_QWORD *)&v102[16] + 1) = v13;
  memcpy(__dst, __src, 0x110uLL);
  memcpy(&__dst[272], v102, 0x110uLL);
  memcpy(a2, __dst, 0x220uLL);
  v104[0] = v32;
  v104[1] = v42;
  v113 = v60;
  v114 = v61;
  v115 = v62;
  v109 = v56;
  v110 = v57;
  v112 = v59;
  v111 = v58;
  v105 = v52;
  v106 = v53;
  v108 = v55;
  v107 = v54;
  v116 = v37;
  v117 = LOBYTE(v20);
  v118 = v39;
  v119 = v38;
  v120 = v40;
  v121 = v11;
  v122 = v23;
  v123 = v24;
  v124 = v13;
  sub_1000368F8(__src);
  sub_1000368F8(v102);
  sub_100036980(v104);
  v125[0] = v49;
  v125[1] = v45;
  v134 = v71;
  v135 = v72;
  v136 = v73;
  v130 = v67;
  v131 = v68;
  v133 = v70;
  v132 = v69;
  v126 = v63;
  v127 = v64;
  v129 = v66;
  v128 = v65;
  v137 = v48;
  v138 = v46;
  v139 = v51;
  v140 = v44;
  v141 = v47;
  v142 = v43;
  v143 = v10;
  v144 = v21;
  v145 = v22;
  v146 = v12;
  return sub_100036980(v125);
}

uint64_t sub_1000320E8@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  _QWORD *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  double v29[5];

  v5 = *(_QWORD *)(a2 + 104);
  v6 = *((_QWORD *)a1 + 1);
  v7 = *((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 7);
  v9 = a1[8];
  swift_retain(v8);
  v10 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v29, 0, 0, &_swiftEmptyArrayStorage, v9, 10.0, 0.0);
  v11 = v29[0];
  v12 = v29[2];
  v13 = v29[3];
  v14 = v29[4];
  v15 = v29[0] * 0.5;
  v16 = static Alignment.center.getter(v10);
  v18 = v17;
  swift_retain(v5);
  v20 = static Alignment.center.getter(v19);
  v21 = *(_QWORD *)(a2 + 48);
  v22 = *(_QWORD *)(a2 + 56);
  v23 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 88);
  *(double *)a3 = v15;
  *(double *)(a3 + 8) = v11;
  *(double *)(a3 + 16) = v29[1];
  *(double *)(a3 + 24) = v12;
  *(double *)(a3 + 32) = v13;
  *(double *)(a3 + 40) = v14;
  *(_QWORD *)(a3 + 48) = v8;
  *(_WORD *)(a3 + 56) = 256;
  *(_QWORD *)(a3 + 64) = v16;
  *(_QWORD *)(a3 + 72) = v18;
  *(_QWORD *)(a3 + 80) = v5;
  *(_WORD *)(a3 + 88) = 256;
  *(_QWORD *)(a3 + 96) = v20;
  *(_QWORD *)(a3 + 104) = v25;
  *(_QWORD *)(a3 + 112) = v6;
  *(_QWORD *)(a3 + 120) = v7;
  *(_QWORD *)(a3 + 128) = v21;
  *(_QWORD *)(a3 + 136) = v22;
  *(_QWORD *)(a3 + 144) = v23;
  v26 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a3 + 152) = v26;
  v27 = v26;
  *(_QWORD *)(a3 + 168) = v24;
  swift_retain(v7);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v27);
  return swift_bridgeObjectRetain(v24);
}

uint64_t sub_10003222C@<X0>(uint64_t a1@<X8>)
{
  const void *v1;
  _BYTE __dst[360];

  memcpy(__dst, v1, sizeof(__dst));
  return sub_100031AF0(a1);
}

uint64_t sub_100032274()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_100032294()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_1000322B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000324B4(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(char *))&EnvironmentValues.dynamicTypeSize.setter);
}

uint64_t sub_1000322C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000324B4(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(char *))&EnvironmentValues.dynamicTypeSize.setter);
}

uint64_t sub_1000322EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10003231C(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100032348@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100032370(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

void sub_100032394(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_1000323BC(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_1000323E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100032408(_QWORD *a1)
{
  __n128 v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_100032430@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100032458(_QWORD *a1)
{
  __n128 v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_100032480()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1000324A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000324B4(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

uint64_t sub_1000324B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  __chkstk_darwin();
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

double sub_100032530(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  double result;

  if (a4)
  {
    sub_10003258C(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    swift_retain(a8);
    *(_QWORD *)&result = swift_retain(a10).n128_u64[0];
  }
  return result;
}

void sub_10003258C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    swift_retain(a1);
  else
    swift_bridgeObjectRetain(a2);
}

double sub_10003259C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  double result;

  if (a4)
  {
    sub_1000130C4(a1, a2, a3 & 1);
    swift_release(a10);
    swift_release(a8);
    swift_release(a5);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000325F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100032628(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100032654@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003267C(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

void sub_1000326A0(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_1000326C8(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

void sub_1000326EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if ((a12 & 1) != 0)
  {
    sub_10003258C(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    swift_retain(a8);
    swift_retain(a10);
  }
  else
  {
    swift_bridgeObjectRetain(a8);
    swift_retain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
  }
}

uint64_t sub_10003278C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if ((a12 & 1) != 0)
  {
    sub_1000130C4(a1, a2, a3 & 1);
    swift_release(a10);
    swift_release(a8);
    swift_release(a5);
    a8 = a4;
  }
  else
  {
    swift_release(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
  }
  return swift_bridgeObjectRelease(a8);
}

uint64_t sub_10003280C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100032834(_QWORD *a1)
{
  __n128 v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_10003285C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100032884(_QWORD *a1)
{
  __n128 v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_1000328AC()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1000328CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000324B4(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

double sub_1000328F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  double result;

  if ((a14 & 1) != 0)
  {
    swift_bridgeObjectRetain(a2);
  }
  else
  {
    a4 = a12;
    a3 = a11;
    swift_retain(a13);
  }
  swift_retain(a3);
  *(_QWORD *)&result = swift_retain(a4).n128_u64[0];
  return result;
}

uint64_t sub_10003293C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t EnumCaseMultiPayload;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v109;
  uint64_t v110;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v40 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain(v4);
  }
  else
  {
    v6 = a2[2];
    v105 = a2[1];
    *(_QWORD *)(a1 + 8) = v105;
    *(_QWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v7 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    v8 = a2[10];
    v9 = a2[11];
    *(_QWORD *)(a1 + 80) = v8;
    *(_QWORD *)(a1 + 88) = v9;
    v11 = a2[12];
    *(_QWORD *)(a1 + 96) = v11;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    v12 = a2[18];
    v13 = a2[19];
    *(_QWORD *)(a1 + 144) = v12;
    *(_QWORD *)(a1 + 152) = v13;
    v14 = a2[20];
    *(_QWORD *)(a1 + 160) = v14;
    v15 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewLayout(0);
    v16 = *(int *)(v15 + 92);
    v97 = a1 + v16;
    v101 = v15;
    v93 = (uint64_t)a2 + v16;
    v17 = type metadata accessor for Image.Scale(0);
    v91 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
    swift_retain(v4);
    swift_retain(v105);
    swift_retain(v8);
    swift_retain(v9);
    swift_retain(v11);
    swift_bridgeObjectRetain(v12);
    swift_retain(v13);
    v18 = swift_retain(v14);
    v91(v97, v93, v17, v18);
    *(_QWORD *)(a1 + *(int *)(v101 + 96)) = *(uint64_t *)((char *)a2 + *(int *)(v101 + 96));
    v19 = *(int *)(a3 + 20);
    v87 = a1;
    v20 = a1 + v19;
    v21 = (uint64_t)a2 + v19;
    v109 = *(uint64_t *)((char *)a2 + v19 + 8);
    *(_QWORD *)v20 = *(uint64_t *)((char *)a2 + v19);
    *(_QWORD *)(v20 + 8) = v109;
    v106 = *(uint64_t *)((char *)a2 + v19 + 24);
    *(_QWORD *)(v20 + 16) = *(uint64_t *)((char *)a2 + v19 + 16);
    *(_QWORD *)(v20 + 24) = v106;
    v102 = *(uint64_t *)((char *)a2 + v19 + 40);
    *(_QWORD *)(v20 + 32) = *(uint64_t *)((char *)a2 + v19 + 32);
    *(_QWORD *)(v20 + 40) = v102;
    v98 = *(uint64_t *)((char *)a2 + v19 + 56);
    *(_QWORD *)(v20 + 48) = *(uint64_t *)((char *)a2 + v19 + 48);
    *(_QWORD *)(v20 + 56) = v98;
    v94 = *(uint64_t *)((char *)a2 + v19 + 72);
    *(_QWORD *)(v20 + 64) = *(uint64_t *)((char *)a2 + v19 + 64);
    *(_QWORD *)(v20 + 72) = v94;
    v22 = *(uint64_t *)((char *)a2 + v19 + 88);
    *(_QWORD *)(v20 + 80) = *(uint64_t *)((char *)a2 + v19 + 80);
    *(_QWORD *)(v20 + 88) = v22;
    *(_BYTE *)(v20 + 96) = *((_BYTE *)a2 + v19 + 96);
    v90 = *(uint64_t *)((char *)a2 + v19 + 104);
    v92 = v22;
    *(_QWORD *)(v20 + 104) = v90;
    *(_BYTE *)(v20 + 112) = *((_BYTE *)a2 + v19 + 112);
    v23 = *(uint64_t *)((char *)a2 + v19 + 128);
    *(_QWORD *)(v20 + 120) = *(_QWORD *)(v21 + 120);
    *(_QWORD *)(v20 + 128) = v23;
    v24 = *(_QWORD *)(v21 + 144);
    *(_QWORD *)(v20 + 136) = *(_QWORD *)(v21 + 136);
    *(_QWORD *)(v20 + 144) = v24;
    v89 = *(_QWORD *)(v21 + 160);
    *(_QWORD *)(v20 + 152) = *(_QWORD *)(v21 + 152);
    *(_QWORD *)(v20 + 160) = v89;
    v25 = *(_QWORD *)(v21 + 176);
    *(_QWORD *)(v20 + 168) = *(_QWORD *)(v21 + 168);
    *(_QWORD *)(v20 + 176) = v25;
    v26 = *(_QWORD *)(v21 + 192);
    *(_QWORD *)(v20 + 184) = *(_QWORD *)(v21 + 184);
    *(_QWORD *)(v20 + 192) = v26;
    v27 = *(_QWORD *)(v21 + 208);
    *(_QWORD *)(v20 + 200) = *(_QWORD *)(v21 + 200);
    *(_QWORD *)(v20 + 208) = v27;
    *(_BYTE *)(v20 + 216) = *(_BYTE *)(v21 + 216);
    v28 = *(_QWORD *)(v21 + 224);
    *(_QWORD *)(v20 + 224) = v28;
    *(_BYTE *)(v20 + 232) = *(_BYTE *)(v21 + 232);
    v86 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0);
    v29 = *(int *)(v86 + 24);
    v88 = (_QWORD *)(v20 + v29);
    v30 = (char *)(v21 + v29);
    v31 = type metadata accessor for SportsWidgetClock(0);
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v106);
    swift_bridgeObjectRetain(v102);
    swift_bridgeObjectRetain(v98);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v92);
    swift_retain(v90);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    swift_retain(v28);
    v110 = v31;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v30, v31);
    v33 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v43 = *((_QWORD *)v30 + 1);
      v39 = v88;
      *v88 = *(_QWORD *)v30;
      v88[1] = v43;
      v44 = *((_QWORD *)v30 + 3);
      v88[2] = *((_QWORD *)v30 + 2);
      v88[3] = v44;
      v103 = *((_QWORD *)v30 + 5);
      v88[4] = *((_QWORD *)v30 + 4);
      v88[5] = v103;
      v45 = *((_QWORD *)v30 + 7);
      v88[6] = *((_QWORD *)v30 + 6);
      v88[7] = v45;
      v46 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v47 = v46[8];
      v95 = &v30[v47];
      v99 = (char *)v88 + v47;
      v48 = type metadata accessor for Date(0);
      v49 = *(_QWORD *)(v48 - 8);
      v50 = v43;
      v51 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v103);
      swift_bridgeObjectRetain(v45);
      v51(v99, v95, v48);
      v52 = sub_100008EF4(&qword_100105F40);
      v51(&v99[*(int *)(v52 + 36)], &v95[*(int *)(v52 + 36)], v48);
      v53 = v46[9];
      v54 = (char *)v88 + v53;
      v55 = &v30[v53];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(&v30[v53], 1, v48))
      {
        v56 = sub_100008EF4(&qword_100105F48);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        v51(v54, v55, v48);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v54, 0, 1, v48);
      }
      v41 = (int *)v86;
      *((_BYTE *)v88 + v46[10]) = v30[v46[10]];
      *((_BYTE *)v88 + v46[11]) = v30[v46[11]];
      v72 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
      v73 = *(_QWORD *)&v30[v72];
      *(_QWORD *)((char *)v88 + v72) = v73;
      swift_bridgeObjectRetain(v73);
      v40 = v87;
      v42 = v110;
      v33 = 2;
    }
    else if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      v34 = *(_QWORD *)v30;
      v35 = *((_QWORD *)v30 + 1);
      *v88 = *(_QWORD *)v30;
      v88[1] = v35;
      v36 = *((_QWORD *)v30 + 3);
      v88[2] = *((_QWORD *)v30 + 2);
      v88[3] = v36;
      v37 = *((_QWORD *)v30 + 5);
      v88[4] = *((_QWORD *)v30 + 4);
      v88[5] = v37;
      *((_BYTE *)v88 + 48) = v30[48];
      swift_bridgeObjectRetain(v34);
      v38 = v35;
      v39 = v88;
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      v41 = (int *)v86;
      v40 = v87;
      v42 = v110;
    }
    else
    {
      v107 = EnumCaseMultiPayload;
      v57 = *((_QWORD *)v30 + 1);
      v39 = v88;
      *v88 = *(_QWORD *)v30;
      v88[1] = v57;
      v58 = *((_QWORD *)v30 + 3);
      v88[2] = *((_QWORD *)v30 + 2);
      v88[3] = v58;
      v59 = *((_QWORD *)v30 + 5);
      v88[4] = *((_QWORD *)v30 + 4);
      v88[5] = v59;
      v104 = *((_QWORD *)v30 + 7);
      v88[6] = *((_QWORD *)v30 + 6);
      v88[7] = v104;
      v60 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v61 = *(int *)(v60 + 32);
      v96 = &v30[v61];
      v100 = (char *)v88 + v61;
      v62 = type metadata accessor for Date(0);
      v63 = *(_QWORD *)(v62 - 8);
      v64 = v57;
      v65 = (int *)v60;
      v66 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
      swift_bridgeObjectRetain(v64);
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v104);
      v66(v100, v96, v62);
      v67 = sub_100008EF4(&qword_100105F40);
      v66(&v100[*(int *)(v67 + 36)], &v96[*(int *)(v67 + 36)], v62);
      v68 = v65[9];
      v69 = (char *)v88 + v68;
      v70 = &v30[v68];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(&v30[v68], 1, v62))
      {
        v71 = sub_100008EF4(&qword_100105F48);
        memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      }
      else
      {
        v66(v69, v70, v62);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v69, 0, 1, v62);
      }
      v41 = (int *)v86;
      v40 = v87;
      v42 = v110;
      v33 = v107;
      *((_BYTE *)v88 + v65[10]) = v30[v65[10]];
      *((_BYTE *)v88 + v65[11]) = v30[v65[11]];
    }
    swift_storeEnumTagMultiPayload(v39, v42, v33);
    v74 = v41[7];
    v75 = v20 + v74;
    v76 = v21 + v74;
    v77 = *(_QWORD *)(v76 + 8);
    *(_QWORD *)v75 = *(_QWORD *)v76;
    *(_QWORD *)(v75 + 8) = v77;
    *(_BYTE *)(v75 + 16) = *(_BYTE *)(v76 + 16);
    v78 = *(_QWORD *)(v76 + 24);
    *(_QWORD *)(v75 + 24) = v78;
    *(_BYTE *)(v75 + 32) = *(_BYTE *)(v76 + 32);
    v79 = *(_QWORD *)(v76 + 40);
    *(_QWORD *)(v75 + 40) = v79;
    *(_BYTE *)(v75 + 48) = *(_BYTE *)(v76 + 48);
    v80 = v41[8];
    v81 = (_QWORD *)(v20 + v80);
    v82 = (_QWORD *)(v21 + v80);
    v83 = v82[1];
    *v81 = *v82;
    v81[1] = v83;
    v84 = v82[3];
    v81[2] = v82[2];
    v81[3] = v84;
    *(_BYTE *)(v20 + v41[9]) = *(_BYTE *)(v21 + v41[9]);
    *(_BYTE *)(v20 + v41[10]) = *(_BYTE *)(v21 + v41[10]);
    *(_BYTE *)(v20 + v41[11]) = *(_BYTE *)(v21 + v41[11]);
    *(_BYTE *)(v20 + v41[12]) = *(_BYTE *)(v21 + v41[12]);
    swift_bridgeObjectRetain(v77);
    swift_retain(v78);
    swift_retain(v79);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v84);
  }
  return v40;
}

uint64_t sub_100032FE8(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  _QWORD *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[10]);
  swift_release(a1[11]);
  swift_release(a1[12]);
  swift_bridgeObjectRelease(a1[18]);
  swift_release(a1[19]);
  swift_release(a1[20]);
  v4 = (char *)a1 + *(int *)(type metadata accessor for SportsWidgetDynamicIslandExpandedViewLayout(0) + 92);
  v5 = type metadata accessor for Image.Scale(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[3]);
  swift_bridgeObjectRelease(v6[5]);
  swift_bridgeObjectRelease(v6[7]);
  swift_bridgeObjectRelease(v6[9]);
  swift_bridgeObjectRelease(v6[11]);
  swift_release(v6[13]);
  swift_bridgeObjectRelease(v6[16]);
  swift_bridgeObjectRelease(v6[18]);
  swift_bridgeObjectRelease(v6[20]);
  swift_bridgeObjectRelease(v6[22]);
  swift_bridgeObjectRelease(v6[24]);
  swift_bridgeObjectRelease(v6[26]);
  swift_release(v6[28]);
  v7 = (int *)type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0);
  v8 = (_QWORD *)((char *)v6 + v7[6]);
  v9 = type metadata accessor for SportsWidgetClock(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v9);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease(v8[1]);
      swift_bridgeObjectRelease(v8[3]);
      swift_bridgeObjectRelease(v8[5]);
      swift_bridgeObjectRelease(v8[7]);
      v18 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v19 = (char *)v8 + *(int *)(v18 + 32);
      v20 = type metadata accessor for Date(0);
      v21 = *(_QWORD *)(v20 - 8);
      v22 = *(void (**)(char *, uint64_t))(v21 + 8);
      v22(v19, v20);
      v23 = sub_100008EF4(&qword_100105F40);
      v22(&v19[*(int *)(v23 + 36)], v20);
      v24 = (char *)v8 + *(int *)(v18 + 36);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v24, 1, v20))
        v22(v24, v20);
      v25 = *(_QWORD *)((char *)v8 + *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20));
      goto LABEL_10;
    case 1:
      swift_bridgeObjectRelease(*v8);
      swift_bridgeObjectRelease(v8[1]);
      swift_bridgeObjectRelease(v8[3]);
      v25 = v8[5];
LABEL_10:
      swift_bridgeObjectRelease(v25);
      break;
    case 0:
      swift_bridgeObjectRelease(v8[1]);
      swift_bridgeObjectRelease(v8[3]);
      swift_bridgeObjectRelease(v8[5]);
      swift_bridgeObjectRelease(v8[7]);
      v11 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v12 = (char *)v8 + *(int *)(v11 + 32);
      v13 = type metadata accessor for Date(0);
      v14 = *(_QWORD *)(v13 - 8);
      v15 = *(void (**)(char *, uint64_t))(v14 + 8);
      v15(v12, v13);
      v16 = sub_100008EF4(&qword_100105F40);
      v15(&v12[*(int *)(v16 + 36)], v13);
      v17 = (char *)v8 + *(int *)(v11 + 36);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v17, 1, v13))
        v15(v17, v13);
      break;
  }
  v26 = (_QWORD *)((char *)v6 + v7[7]);
  swift_bridgeObjectRelease(v26[1]);
  swift_release(v26[3]);
  swift_release(v26[5]);
  v27 = (char *)v6 + v7[8];
  swift_bridgeObjectRelease(*((_QWORD *)v27 + 1));
  return swift_bridgeObjectRelease(*((_QWORD *)v27 + 3));
}

uint64_t sub_1000332E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t EnumCaseMultiPayload;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v107;
  uint64_t v108;

  v5 = *a2;
  v103 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v103;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v6 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  v7 = a2[10];
  v8 = a2[11];
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  v9 = a2[12];
  *(_QWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  v10 = a2[18];
  v11 = a2[19];
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 152) = v11;
  v12 = a2[20];
  *(_QWORD *)(a1 + 160) = v12;
  v13 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewLayout(0);
  v14 = *(int *)(v13 + 92);
  v95 = a1 + v14;
  v99 = v13;
  v91 = (uint64_t)a2 + v14;
  v15 = type metadata accessor for Image.Scale(0);
  v89 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v15 - 8) + 16);
  swift_retain(v5);
  swift_retain(v103);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  v16 = swift_retain(v12);
  v89(v95, v91, v15, v16);
  *(_QWORD *)(a1 + *(int *)(v99 + 96)) = *(uint64_t *)((char *)a2 + *(int *)(v99 + 96));
  v17 = *(int *)(a3 + 20);
  v85 = a1;
  v18 = a1 + v17;
  v19 = (uint64_t)a2 + v17;
  v107 = *(uint64_t *)((char *)a2 + v17 + 8);
  *(_QWORD *)v18 = *(uint64_t *)((char *)a2 + v17);
  *(_QWORD *)(v18 + 8) = v107;
  v104 = *(uint64_t *)((char *)a2 + v17 + 24);
  *(_QWORD *)(v18 + 16) = *(uint64_t *)((char *)a2 + v17 + 16);
  *(_QWORD *)(v18 + 24) = v104;
  v100 = *(uint64_t *)((char *)a2 + v17 + 40);
  *(_QWORD *)(v18 + 32) = *(uint64_t *)((char *)a2 + v17 + 32);
  *(_QWORD *)(v18 + 40) = v100;
  v96 = *(uint64_t *)((char *)a2 + v17 + 56);
  *(_QWORD *)(v18 + 48) = *(uint64_t *)((char *)a2 + v17 + 48);
  *(_QWORD *)(v18 + 56) = v96;
  v92 = *(uint64_t *)((char *)a2 + v17 + 72);
  *(_QWORD *)(v18 + 64) = *(uint64_t *)((char *)a2 + v17 + 64);
  *(_QWORD *)(v18 + 72) = v92;
  v20 = *(uint64_t *)((char *)a2 + v17 + 88);
  *(_QWORD *)(v18 + 80) = *(uint64_t *)((char *)a2 + v17 + 80);
  *(_QWORD *)(v18 + 88) = v20;
  *(_BYTE *)(v18 + 96) = *((_BYTE *)a2 + v17 + 96);
  v88 = *(uint64_t *)((char *)a2 + v17 + 104);
  v90 = v20;
  *(_QWORD *)(v18 + 104) = v88;
  *(_BYTE *)(v18 + 112) = *((_BYTE *)a2 + v17 + 112);
  v21 = *(uint64_t *)((char *)a2 + v17 + 128);
  *(_QWORD *)(v18 + 120) = *(_QWORD *)(v19 + 120);
  *(_QWORD *)(v18 + 128) = v21;
  v22 = *(_QWORD *)(v19 + 144);
  *(_QWORD *)(v18 + 136) = *(_QWORD *)(v19 + 136);
  *(_QWORD *)(v18 + 144) = v22;
  v87 = *(_QWORD *)(v19 + 160);
  *(_QWORD *)(v18 + 152) = *(_QWORD *)(v19 + 152);
  *(_QWORD *)(v18 + 160) = v87;
  v23 = *(_QWORD *)(v19 + 176);
  *(_QWORD *)(v18 + 168) = *(_QWORD *)(v19 + 168);
  *(_QWORD *)(v18 + 176) = v23;
  v24 = *(_QWORD *)(v19 + 192);
  *(_QWORD *)(v18 + 184) = *(_QWORD *)(v19 + 184);
  *(_QWORD *)(v18 + 192) = v24;
  v25 = *(_QWORD *)(v19 + 208);
  *(_QWORD *)(v18 + 200) = *(_QWORD *)(v19 + 200);
  *(_QWORD *)(v18 + 208) = v25;
  *(_BYTE *)(v18 + 216) = *(_BYTE *)(v19 + 216);
  v26 = *(_QWORD *)(v19 + 224);
  *(_QWORD *)(v18 + 224) = v26;
  *(_BYTE *)(v18 + 232) = *(_BYTE *)(v19 + 232);
  v84 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0);
  v27 = *(int *)(v84 + 24);
  v86 = (_QWORD *)(v18 + v27);
  v28 = (char *)(v19 + v27);
  v29 = type metadata accessor for SportsWidgetClock(0);
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRetain(v100);
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v90);
  swift_retain(v88);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_retain(v26);
  v108 = v29;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v29);
  v31 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v41 = *((_QWORD *)v28 + 1);
    v37 = v86;
    *v86 = *(_QWORD *)v28;
    v86[1] = v41;
    v42 = *((_QWORD *)v28 + 3);
    v86[2] = *((_QWORD *)v28 + 2);
    v86[3] = v42;
    v101 = *((_QWORD *)v28 + 5);
    v86[4] = *((_QWORD *)v28 + 4);
    v86[5] = v101;
    v43 = *((_QWORD *)v28 + 7);
    v86[6] = *((_QWORD *)v28 + 6);
    v86[7] = v43;
    v44 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v45 = v44[8];
    v93 = &v28[v45];
    v97 = (char *)v86 + v45;
    v46 = type metadata accessor for Date(0);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = v41;
    v49 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRetain(v43);
    v49(v97, v93, v46);
    v50 = sub_100008EF4(&qword_100105F40);
    v49(&v97[*(int *)(v50 + 36)], &v93[*(int *)(v50 + 36)], v46);
    v51 = v44[9];
    v52 = (char *)v86 + v51;
    v53 = &v28[v51];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(&v28[v51], 1, v46))
    {
      v54 = sub_100008EF4(&qword_100105F48);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      v49(v52, v53, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v52, 0, 1, v46);
    }
    v39 = (int *)v84;
    *((_BYTE *)v86 + v44[10]) = v28[v44[10]];
    *((_BYTE *)v86 + v44[11]) = v28[v44[11]];
    v70 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
    v71 = *(_QWORD *)&v28[v70];
    *(_QWORD *)((char *)v86 + v70) = v71;
    swift_bridgeObjectRetain(v71);
    v38 = v85;
    v40 = v108;
    v31 = 2;
  }
  else if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v32 = *(_QWORD *)v28;
    v33 = *((_QWORD *)v28 + 1);
    *v86 = *(_QWORD *)v28;
    v86[1] = v33;
    v34 = *((_QWORD *)v28 + 3);
    v86[2] = *((_QWORD *)v28 + 2);
    v86[3] = v34;
    v35 = *((_QWORD *)v28 + 5);
    v86[4] = *((_QWORD *)v28 + 4);
    v86[5] = v35;
    *((_BYTE *)v86 + 48) = v28[48];
    swift_bridgeObjectRetain(v32);
    v36 = v33;
    v37 = v86;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    v39 = (int *)v84;
    v38 = v85;
    v40 = v108;
  }
  else
  {
    v105 = EnumCaseMultiPayload;
    v55 = *((_QWORD *)v28 + 1);
    v37 = v86;
    *v86 = *(_QWORD *)v28;
    v86[1] = v55;
    v56 = *((_QWORD *)v28 + 3);
    v86[2] = *((_QWORD *)v28 + 2);
    v86[3] = v56;
    v57 = *((_QWORD *)v28 + 5);
    v86[4] = *((_QWORD *)v28 + 4);
    v86[5] = v57;
    v102 = *((_QWORD *)v28 + 7);
    v86[6] = *((_QWORD *)v28 + 6);
    v86[7] = v102;
    v58 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v59 = *(int *)(v58 + 32);
    v94 = &v28[v59];
    v98 = (char *)v86 + v59;
    v60 = type metadata accessor for Date(0);
    v61 = *(_QWORD *)(v60 - 8);
    v62 = v55;
    v63 = (int *)v58;
    v64 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v102);
    v64(v98, v94, v60);
    v65 = sub_100008EF4(&qword_100105F40);
    v64(&v98[*(int *)(v65 + 36)], &v94[*(int *)(v65 + 36)], v60);
    v66 = v63[9];
    v67 = (char *)v86 + v66;
    v68 = &v28[v66];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(&v28[v66], 1, v60))
    {
      v69 = sub_100008EF4(&qword_100105F48);
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    }
    else
    {
      v64(v67, v68, v60);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v67, 0, 1, v60);
    }
    v39 = (int *)v84;
    v38 = v85;
    v40 = v108;
    v31 = v105;
    *((_BYTE *)v86 + v63[10]) = v28[v63[10]];
    *((_BYTE *)v86 + v63[11]) = v28[v63[11]];
  }
  swift_storeEnumTagMultiPayload(v37, v40, v31);
  v72 = v39[7];
  v73 = v18 + v72;
  v74 = v19 + v72;
  v75 = *(_QWORD *)(v74 + 8);
  *(_QWORD *)v73 = *(_QWORD *)v74;
  *(_QWORD *)(v73 + 8) = v75;
  *(_BYTE *)(v73 + 16) = *(_BYTE *)(v74 + 16);
  v76 = *(_QWORD *)(v74 + 24);
  *(_QWORD *)(v73 + 24) = v76;
  *(_BYTE *)(v73 + 32) = *(_BYTE *)(v74 + 32);
  v77 = *(_QWORD *)(v74 + 40);
  *(_QWORD *)(v73 + 40) = v77;
  *(_BYTE *)(v73 + 48) = *(_BYTE *)(v74 + 48);
  v78 = v39[8];
  v79 = (_QWORD *)(v18 + v78);
  v80 = (_QWORD *)(v19 + v78);
  v81 = v80[1];
  *v79 = *v80;
  v79[1] = v81;
  v82 = v80[3];
  v79[2] = v80[2];
  v79[3] = v82;
  *(_BYTE *)(v18 + v39[9]) = *(_BYTE *)(v19 + v39[9]);
  *(_BYTE *)(v18 + v39[10]) = *(_BYTE *)(v19 + v39[10]);
  *(_BYTE *)(v18 + v39[11]) = *(_BYTE *)(v19 + v39[11]);
  *(_BYTE *)(v18 + v39[12]) = *(_BYTE *)(v19 + v39[12]);
  swift_bridgeObjectRetain(v75);
  swift_retain(v76);
  swift_retain(v77);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v82);
  return v38;
}

uint64_t *sub_100033964(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t EnumCaseMultiPayload;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  void (*v122)(char *, char *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  int *v125;
  int *v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  v10 = a2[10];
  v11 = a1[10];
  a1[10] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[11];
  v13 = a1[11];
  a1[11] = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = a2[12];
  v15 = a1[12];
  a1[12] = v14;
  swift_retain(v14);
  swift_release(v15);
  a1[13] = a2[13];
  a1[14] = a2[14];
  *((_BYTE *)a1 + 120) = *((_BYTE *)a2 + 120);
  a1[16] = a2[16];
  a1[17] = a2[17];
  v16 = a2[18];
  v17 = a1[18];
  a1[18] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a2[19];
  v19 = a1[19];
  a1[19] = v18;
  swift_retain(v18);
  swift_release(v19);
  v20 = a2[20];
  v21 = a1[20];
  a1[20] = v20;
  swift_retain(v20);
  swift_release(v21);
  v22 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewLayout(0);
  v23 = *(int *)(v22 + 92);
  v24 = (uint64_t)a1 + v23;
  v25 = (uint64_t)a2 + v23;
  v26 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  *(uint64_t *)((char *)a1 + *(int *)(v22 + 96)) = *(uint64_t *)((char *)a2 + *(int *)(v22 + 96));
  v27 = *(int *)(a3 + 20);
  v28 = (uint64_t)a1 + v27;
  v29 = (uint64_t)a2 + v27;
  *(_QWORD *)v28 = *(uint64_t *)((char *)a2 + v27);
  v30 = *(uint64_t *)((char *)a2 + v27 + 8);
  v31 = *(uint64_t *)((char *)a1 + v27 + 8);
  *(_QWORD *)(v28 + 8) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
  v32 = *(_QWORD *)(v29 + 24);
  v33 = *(_QWORD *)(v28 + 24);
  *(_QWORD *)(v28 + 24) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  *(_QWORD *)(v28 + 32) = *(_QWORD *)(v29 + 32);
  v34 = *(_QWORD *)(v29 + 40);
  v35 = *(_QWORD *)(v28 + 40);
  *(_QWORD *)(v28 + 40) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  *(_QWORD *)(v28 + 48) = *(_QWORD *)(v29 + 48);
  v36 = *(_QWORD *)(v29 + 56);
  v37 = *(_QWORD *)(v28 + 56);
  *(_QWORD *)(v28 + 56) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_QWORD *)(v28 + 64) = *(_QWORD *)(v29 + 64);
  v38 = *(_QWORD *)(v29 + 72);
  v39 = *(_QWORD *)(v28 + 72);
  *(_QWORD *)(v28 + 72) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  *(_QWORD *)(v28 + 80) = *(_QWORD *)(v29 + 80);
  v40 = *(_QWORD *)(v29 + 88);
  v41 = *(_QWORD *)(v28 + 88);
  *(_QWORD *)(v28 + 88) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  *(_BYTE *)(v28 + 96) = *(_BYTE *)(v29 + 96);
  v42 = *(_QWORD *)(v29 + 104);
  v43 = *(_QWORD *)(v28 + 104);
  *(_QWORD *)(v28 + 104) = v42;
  swift_retain(v42);
  swift_release(v43);
  *(_BYTE *)(v28 + 112) = *(_BYTE *)(v29 + 112);
  *(_QWORD *)(v28 + 120) = *(_QWORD *)(v29 + 120);
  v44 = *(_QWORD *)(v29 + 128);
  v45 = *(_QWORD *)(v28 + 128);
  *(_QWORD *)(v28 + 128) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  *(_QWORD *)(v28 + 136) = *(_QWORD *)(v29 + 136);
  v46 = *(_QWORD *)(v29 + 144);
  v47 = *(_QWORD *)(v28 + 144);
  *(_QWORD *)(v28 + 144) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  *(_QWORD *)(v28 + 152) = *(_QWORD *)(v29 + 152);
  v48 = *(_QWORD *)(v29 + 160);
  v49 = *(_QWORD *)(v28 + 160);
  *(_QWORD *)(v28 + 160) = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  *(_QWORD *)(v28 + 168) = *(_QWORD *)(v29 + 168);
  v50 = *(_QWORD *)(v29 + 176);
  v51 = *(_QWORD *)(v28 + 176);
  *(_QWORD *)(v28 + 176) = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  *(_QWORD *)(v28 + 184) = *(_QWORD *)(v29 + 184);
  v52 = *(_QWORD *)(v29 + 192);
  v53 = *(_QWORD *)(v28 + 192);
  *(_QWORD *)(v28 + 192) = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  *(_QWORD *)(v28 + 200) = *(_QWORD *)(v29 + 200);
  v54 = *(_QWORD *)(v29 + 208);
  v55 = *(_QWORD *)(v28 + 208);
  *(_QWORD *)(v28 + 208) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  *(_BYTE *)(v28 + 216) = *(_BYTE *)(v29 + 216);
  v56 = *(_QWORD *)(v29 + 224);
  v57 = *(_QWORD *)(v28 + 224);
  *(_QWORD *)(v28 + 224) = v56;
  swift_retain(v56);
  swift_release(v57);
  *(_BYTE *)(v28 + 232) = *(_BYTE *)(v29 + 232);
  v58 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0);
  v59 = (int *)v58;
  if (a1 != a2)
  {
    v60 = *(int *)(v58 + 24);
    v61 = (_QWORD *)(v28 + v60);
    v62 = (char *)(v29 + v60);
    sub_100013520(v28 + v60, type metadata accessor for SportsWidgetClock);
    v63 = type metadata accessor for SportsWidgetClock(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v62, v63);
    v65 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v127 = 2;
      v128 = v63;
      *v61 = *(_QWORD *)v62;
      v119 = *((_QWORD *)v62 + 1);
      v61[1] = v119;
      v61[2] = *((_QWORD *)v62 + 2);
      v117 = *((_QWORD *)v62 + 3);
      v61[3] = v117;
      v61[4] = *((_QWORD *)v62 + 4);
      v115 = *((_QWORD *)v62 + 5);
      v61[5] = v115;
      v61[6] = *((_QWORD *)v62 + 6);
      v113 = *((_QWORD *)v62 + 7);
      v61[7] = v113;
      v125 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v72 = v125[8];
      v73 = (char *)v61 + v72;
      v74 = &v62[v72];
      v75 = type metadata accessor for Date(0);
      v123 = *(_QWORD *)(v75 - 8);
      v76 = *(void (**)(char *, char *, uint64_t))(v123 + 16);
      swift_bridgeObjectRetain(v119);
      swift_bridgeObjectRetain(v117);
      swift_bridgeObjectRetain(v115);
      swift_bridgeObjectRetain(v113);
      v76(v73, v74, v75);
      v77 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
      v78 = &v73[v77];
      v79 = v75;
      v120 = v76;
      v76(v78, &v74[v77], v75);
      v80 = v125[9];
      v81 = (char *)v61 + v80;
      v82 = &v62[v80];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(&v62[v80], 1, v79))
      {
        v83 = sub_100008EF4(&qword_100105F48);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
      }
      else
      {
        v120(v81, v82, v79);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v81, 0, 1, v79);
      }
      *((_BYTE *)v61 + v125[10]) = v62[v125[10]];
      *((_BYTE *)v61 + v125[11]) = v62[v125[11]];
      v94 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
      v95 = *(_QWORD *)&v62[v94];
      *(_QWORD *)((char *)v61 + v94) = v95;
      swift_bridgeObjectRetain(v95);
      v63 = v128;
    }
    else
    {
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v66 = *(_QWORD *)v62;
        *v61 = *(_QWORD *)v62;
        v67 = *((_QWORD *)v62 + 1);
        v61[1] = v67;
        v61[2] = *((_QWORD *)v62 + 2);
        v68 = *((_QWORD *)v62 + 3);
        v61[3] = v68;
        v61[4] = *((_QWORD *)v62 + 4);
        v69 = *((_QWORD *)v62 + 5);
        v61[5] = v69;
        *((_BYTE *)v61 + 48) = v62[48];
        v70 = v65;
        swift_bridgeObjectRetain(v66);
        swift_bridgeObjectRetain(v67);
        swift_bridgeObjectRetain(v68);
        swift_bridgeObjectRetain(v69);
        v71 = v70;
LABEL_14:
        swift_storeEnumTagMultiPayload(v61, v63, v71);
        goto LABEL_15;
      }
      v127 = EnumCaseMultiPayload;
      v129 = v63;
      *v61 = *(_QWORD *)v62;
      v84 = *((_QWORD *)v62 + 1);
      v61[1] = v84;
      v61[2] = *((_QWORD *)v62 + 2);
      v121 = *((_QWORD *)v62 + 3);
      v61[3] = v121;
      v61[4] = *((_QWORD *)v62 + 4);
      v118 = *((_QWORD *)v62 + 5);
      v61[5] = v118;
      v61[6] = *((_QWORD *)v62 + 6);
      v116 = *((_QWORD *)v62 + 7);
      v61[7] = v116;
      v126 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v85 = v126[8];
      v114 = (char *)v61 + v85;
      v86 = &v62[v85];
      v87 = type metadata accessor for Date(0);
      v124 = *(_QWORD *)(v87 - 8);
      v88 = *(void (**)(char *, char *, uint64_t))(v124 + 16);
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRetain(v121);
      swift_bridgeObjectRetain(v118);
      swift_bridgeObjectRetain(v116);
      v88(v114, v86, v87);
      v89 = sub_100008EF4(&qword_100105F40);
      v122 = v88;
      v88(&v114[*(int *)(v89 + 36)], &v86[*(int *)(v89 + 36)], v87);
      v90 = v126[9];
      v91 = (char *)v61 + v90;
      v92 = &v62[v90];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(&v62[v90], 1, v87))
      {
        v93 = sub_100008EF4(&qword_100105F48);
        memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
      }
      else
      {
        v122(v91, v92, v87);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v91, 0, 1, v87);
      }
      v63 = v129;
      *((_BYTE *)v61 + v126[10]) = v62[v126[10]];
      *((_BYTE *)v61 + v126[11]) = v62[v126[11]];
    }
    v71 = v127;
    goto LABEL_14;
  }
LABEL_15:
  v96 = v59[7];
  v97 = v28 + v96;
  v98 = v29 + v96;
  *(_QWORD *)v97 = *(_QWORD *)(v29 + v96);
  v99 = *(_QWORD *)(v29 + v96 + 8);
  v100 = *(_QWORD *)(v28 + v96 + 8);
  *(_QWORD *)(v97 + 8) = v99;
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRelease(v100);
  *(_BYTE *)(v97 + 16) = *(_BYTE *)(v98 + 16);
  v101 = *(_QWORD *)(v98 + 24);
  v102 = *(_QWORD *)(v97 + 24);
  *(_QWORD *)(v97 + 24) = v101;
  swift_retain(v101);
  swift_release(v102);
  *(_BYTE *)(v97 + 32) = *(_BYTE *)(v98 + 32);
  v103 = *(_QWORD *)(v98 + 40);
  v104 = *(_QWORD *)(v97 + 40);
  *(_QWORD *)(v97 + 40) = v103;
  swift_retain(v103);
  swift_release(v104);
  *(_BYTE *)(v97 + 48) = *(_BYTE *)(v98 + 48);
  v105 = v59[8];
  v106 = (_QWORD *)(v28 + v105);
  v107 = v29 + v105;
  *v106 = *(_QWORD *)(v29 + v105);
  v108 = *(_QWORD *)(v29 + v105 + 8);
  v109 = *(_QWORD *)(v28 + v105 + 8);
  v106[1] = v108;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRelease(v109);
  v106[2] = *(_QWORD *)(v107 + 16);
  v110 = *(_QWORD *)(v107 + 24);
  v111 = v106[3];
  v106[3] = v110;
  swift_bridgeObjectRetain(v110);
  swift_bridgeObjectRelease(v111);
  *(_BYTE *)(v28 + v59[9]) = *(_BYTE *)(v29 + v59[9]);
  *(_BYTE *)(v28 + v59[10]) = *(_BYTE *)(v29 + v59[10]);
  *(_BYTE *)(v28 + v59[11]) = *(_BYTE *)(v29 + v59[11]);
  *(_BYTE *)(v28 + v59[12]) = *(_BYTE *)(v29 + v59[12]);
  return a1;
}

uint64_t sub_1000341D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int *v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  __int128 v61;
  void (*v63)(char *, char *, uint64_t);
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  int *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  v8 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewLayout(0);
  v9 = *(int *)(v8 + 92);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  *(_QWORD *)(a1 + *(int *)(v8 + 96)) = *(_QWORD *)(a2 + *(int *)(v8 + 96));
  v13 = *(int *)(a3 + 20);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_OWORD *)(a2 + v13 + 48);
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(a2 + v13 + 32);
  *(_OWORD *)(v14 + 48) = v16;
  v17 = *(_OWORD *)(a2 + v13 + 16);
  *(_OWORD *)v14 = *(_OWORD *)(a2 + v13);
  *(_OWORD *)(v14 + 16) = v17;
  *(_BYTE *)(v14 + 112) = *(_BYTE *)(a2 + v13 + 112);
  v18 = *(_OWORD *)(a2 + v13 + 96);
  v19 = *(_OWORD *)(a2 + v13 + 64);
  *(_OWORD *)(v14 + 80) = *(_OWORD *)(a2 + v13 + 80);
  *(_OWORD *)(v14 + 96) = v18;
  *(_OWORD *)(v14 + 64) = v19;
  *(_OWORD *)(v14 + 184) = *(_OWORD *)(a2 + v13 + 184);
  *(_OWORD *)(v14 + 200) = *(_OWORD *)(a2 + v13 + 200);
  *(_OWORD *)(v14 + 216) = *(_OWORD *)(a2 + v13 + 216);
  *(_BYTE *)(v14 + 232) = *(_BYTE *)(a2 + v13 + 232);
  *(_OWORD *)(v14 + 120) = *(_OWORD *)(a2 + v13 + 120);
  *(_OWORD *)(v14 + 136) = *(_OWORD *)(a2 + v13 + 136);
  *(_OWORD *)(v14 + 152) = *(_OWORD *)(a2 + v13 + 152);
  *(_OWORD *)(v14 + 168) = *(_OWORD *)(a2 + v13 + 168);
  v20 = (int *)type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0);
  v21 = v20[6];
  v22 = (_OWORD *)(v14 + v21);
  v23 = (char *)(v15 + v21);
  v24 = type metadata accessor for SportsWidgetClock(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23, v24);
  if (EnumCaseMultiPayload == 2)
  {
    v70 = v24;
    v38 = *((_OWORD *)v23 + 1);
    *v22 = *(_OWORD *)v23;
    v22[1] = v38;
    v39 = *((_OWORD *)v23 + 3);
    v22[2] = *((_OWORD *)v23 + 2);
    v22[3] = v39;
    v68 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v40 = v68[8];
    v41 = (char *)v22 + v40;
    v42 = &v23[v40];
    v43 = type metadata accessor for Date(0);
    v66 = *(_QWORD *)(v43 - 8);
    v44 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
    v44(v41, v42, v43);
    v45 = sub_100008EF4(&qword_100105F40);
    v64 = v44;
    v44(&v41[*(int *)(v45 + 36)], &v42[*(int *)(v45 + 36)], v43);
    v46 = v68[9];
    v47 = (char *)v22 + v46;
    v48 = &v23[v46];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(&v23[v46], 1, v43))
    {
      v49 = sub_100008EF4(&qword_100105F48);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      v64(v47, v48, v43);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v47, 0, 1, v43);
    }
    *((_BYTE *)v22 + v68[10]) = v23[v68[10]];
    *((_BYTE *)v22 + v68[11]) = v23[v68[11]];
    v53 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
    *(_QWORD *)((char *)v22 + *(int *)(v53 + 20)) = *(_QWORD *)&v23[*(int *)(v53 + 20)];
    v51 = v22;
    v50 = v70;
    v52 = 2;
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    v69 = v24;
    v26 = *((_OWORD *)v23 + 1);
    *v22 = *(_OWORD *)v23;
    v22[1] = v26;
    v27 = *((_OWORD *)v23 + 3);
    v22[2] = *((_OWORD *)v23 + 2);
    v22[3] = v27;
    v67 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v28 = v67[8];
    v29 = (char *)v22 + v28;
    v30 = &v23[v28];
    v31 = type metadata accessor for Date(0);
    v65 = *(_QWORD *)(v31 - 8);
    v32 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    v32(v29, v30, v31);
    v33 = sub_100008EF4(&qword_100105F40);
    v63 = v32;
    v32(&v29[*(int *)(v33 + 36)], &v30[*(int *)(v33 + 36)], v31);
    v34 = v67[9];
    v35 = (char *)v22 + v34;
    v36 = &v23[v34];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(&v23[v34], 1, v31))
    {
      v37 = sub_100008EF4(&qword_100105F48);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v63(v35, v36, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v35, 0, 1, v31);
    }
    v50 = v69;
    *((_BYTE *)v22 + v67[10]) = v23[v67[10]];
    *((_BYTE *)v22 + v67[11]) = v23[v67[11]];
    v51 = v22;
    v52 = 0;
LABEL_12:
    swift_storeEnumTagMultiPayload(v51, v50, v52);
    goto LABEL_13;
  }
  memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
LABEL_13:
  v54 = v20[7];
  v55 = v14 + v54;
  v56 = v15 + v54;
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  *(_OWORD *)(v55 + 32) = *(_OWORD *)(v56 + 32);
  *(_BYTE *)(v55 + 48) = *(_BYTE *)(v56 + 48);
  v58 = v20[8];
  v59 = (_OWORD *)(v14 + v58);
  v60 = (_OWORD *)(v15 + v58);
  v61 = v60[1];
  *v59 = *v60;
  v59[1] = v61;
  *(_BYTE *)(v14 + v20[9]) = *(_BYTE *)(v15 + v20[9]);
  *(_BYTE *)(v14 + v20[10]) = *(_BYTE *)(v15 + v20[10]);
  *(_BYTE *)(v14 + v20[11]) = *(_BYTE *)(v15 + v20[11]);
  *(_BYTE *)(v14 + v20[12]) = *(_BYTE *)(v15 + v20[12]);
  return a1;
}

uint64_t *sub_100034638(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  int EnumCaseMultiPayload;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v100)(char *, char *, uint64_t);
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  int *v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v8 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v8;
  a1[8] = a2[8];
  a1[9] = a2[9];
  v9 = a1[10];
  a1[10] = a2[10];
  swift_release(v9);
  v10 = a1[11];
  a1[11] = a2[11];
  swift_release(v10);
  v11 = a1[12];
  a1[12] = a2[12];
  swift_release(v11);
  a1[13] = a2[13];
  a1[14] = a2[14];
  *((_BYTE *)a1 + 120) = *((_BYTE *)a2 + 120);
  a1[16] = a2[16];
  v12 = a2[18];
  v13 = a1[18];
  a1[17] = a2[17];
  a1[18] = v12;
  swift_bridgeObjectRelease(v13);
  v14 = a1[19];
  a1[19] = a2[19];
  swift_release(v14);
  v15 = a1[20];
  a1[20] = a2[20];
  swift_release(v15);
  v16 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewLayout(0);
  v17 = *(int *)(v16 + 92);
  v18 = (uint64_t)a1 + v17;
  v19 = (uint64_t)a2 + v17;
  v20 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  *(uint64_t *)((char *)a1 + *(int *)(v16 + 96)) = *(uint64_t *)((char *)a2 + *(int *)(v16 + 96));
  v21 = *(int *)(a3 + 20);
  v22 = (uint64_t)a1 + v21;
  v23 = (uint64_t)a2 + v21;
  v24 = *(uint64_t *)((char *)a2 + v21 + 8);
  v25 = *(uint64_t *)((char *)a1 + v21 + 8);
  *(_QWORD *)v22 = *(uint64_t *)((char *)a2 + v21);
  *(_QWORD *)(v22 + 8) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = *(_QWORD *)(v23 + 24);
  v27 = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(v22 + 24) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(v23 + 40);
  v29 = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(v22 + 32) = *(_QWORD *)(v23 + 32);
  *(_QWORD *)(v22 + 40) = v28;
  swift_bridgeObjectRelease(v29);
  v30 = *(_QWORD *)(v23 + 56);
  v31 = *(_QWORD *)(v22 + 56);
  *(_QWORD *)(v22 + 48) = *(_QWORD *)(v23 + 48);
  *(_QWORD *)(v22 + 56) = v30;
  swift_bridgeObjectRelease(v31);
  v32 = *(_QWORD *)(v23 + 72);
  v33 = *(_QWORD *)(v22 + 72);
  *(_QWORD *)(v22 + 64) = *(_QWORD *)(v23 + 64);
  *(_QWORD *)(v22 + 72) = v32;
  swift_bridgeObjectRelease(v33);
  v34 = *(_QWORD *)(v23 + 88);
  v35 = *(_QWORD *)(v22 + 88);
  *(_QWORD *)(v22 + 80) = *(_QWORD *)(v23 + 80);
  *(_QWORD *)(v22 + 88) = v34;
  swift_bridgeObjectRelease(v35);
  *(_BYTE *)(v22 + 96) = *(_BYTE *)(v23 + 96);
  v36 = *(_QWORD *)(v22 + 104);
  *(_QWORD *)(v22 + 104) = *(_QWORD *)(v23 + 104);
  swift_release(v36);
  *(_BYTE *)(v22 + 112) = *(_BYTE *)(v23 + 112);
  v37 = *(_QWORD *)(v23 + 128);
  v38 = *(_QWORD *)(v22 + 128);
  *(_QWORD *)(v22 + 120) = *(_QWORD *)(v23 + 120);
  *(_QWORD *)(v22 + 128) = v37;
  swift_bridgeObjectRelease(v38);
  v39 = *(_QWORD *)(v23 + 144);
  v40 = *(_QWORD *)(v22 + 144);
  *(_QWORD *)(v22 + 136) = *(_QWORD *)(v23 + 136);
  *(_QWORD *)(v22 + 144) = v39;
  swift_bridgeObjectRelease(v40);
  v41 = *(_QWORD *)(v23 + 160);
  v42 = *(_QWORD *)(v22 + 160);
  *(_QWORD *)(v22 + 152) = *(_QWORD *)(v23 + 152);
  *(_QWORD *)(v22 + 160) = v41;
  swift_bridgeObjectRelease(v42);
  v43 = *(_QWORD *)(v23 + 176);
  v44 = *(_QWORD *)(v22 + 176);
  *(_QWORD *)(v22 + 168) = *(_QWORD *)(v23 + 168);
  *(_QWORD *)(v22 + 176) = v43;
  swift_bridgeObjectRelease(v44);
  v45 = *(_QWORD *)(v23 + 192);
  v46 = *(_QWORD *)(v22 + 192);
  *(_QWORD *)(v22 + 184) = *(_QWORD *)(v23 + 184);
  *(_QWORD *)(v22 + 192) = v45;
  swift_bridgeObjectRelease(v46);
  v47 = *(_QWORD *)(v23 + 208);
  v48 = *(_QWORD *)(v22 + 208);
  *(_QWORD *)(v22 + 200) = *(_QWORD *)(v23 + 200);
  *(_QWORD *)(v22 + 208) = v47;
  swift_bridgeObjectRelease(v48);
  *(_BYTE *)(v22 + 216) = *(_BYTE *)(v23 + 216);
  v49 = *(_QWORD *)(v22 + 224);
  *(_QWORD *)(v22 + 224) = *(_QWORD *)(v23 + 224);
  swift_release(v49);
  *(_BYTE *)(v22 + 232) = *(_BYTE *)(v23 + 232);
  v50 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0);
  v51 = (int *)v50;
  if (a1 != a2)
  {
    v52 = *(int *)(v50 + 24);
    v53 = (_OWORD *)(v22 + v52);
    v54 = (char *)(v23 + v52);
    sub_100013520(v22 + v52, type metadata accessor for SportsWidgetClock);
    v55 = type metadata accessor for SportsWidgetClock(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v54, v55);
    if (EnumCaseMultiPayload == 2)
    {
      v107 = v55;
      v69 = *((_OWORD *)v54 + 1);
      *v53 = *(_OWORD *)v54;
      v53[1] = v69;
      v70 = *((_OWORD *)v54 + 3);
      v53[2] = *((_OWORD *)v54 + 2);
      v53[3] = v70;
      v105 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v71 = v105[8];
      v72 = (char *)v53 + v71;
      v73 = &v54[v71];
      v74 = type metadata accessor for Date(0);
      v103 = *(_QWORD *)(v74 - 8);
      v75 = *(void (**)(char *, char *, uint64_t))(v103 + 32);
      v75(v72, v73, v74);
      v76 = sub_100008EF4(&qword_100105F40);
      v101 = v75;
      v75(&v72[*(int *)(v76 + 36)], &v73[*(int *)(v76 + 36)], v74);
      v77 = v105[9];
      v78 = (char *)v53 + v77;
      v79 = &v54[v77];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(&v54[v77], 1, v74))
      {
        v80 = sub_100008EF4(&qword_100105F48);
        memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
      }
      else
      {
        v101(v78, v79, v74);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v78, 0, 1, v74);
      }
      *((_BYTE *)v53 + v105[10]) = v54[v105[10]];
      *((_BYTE *)v53 + v105[11]) = v54[v105[11]];
      v84 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
      *(_QWORD *)((char *)v53 + *(int *)(v84 + 20)) = *(_QWORD *)&v54[*(int *)(v84 + 20)];
      v82 = v53;
      v81 = v107;
      v83 = 2;
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      v106 = v55;
      v57 = *((_OWORD *)v54 + 1);
      *v53 = *(_OWORD *)v54;
      v53[1] = v57;
      v58 = *((_OWORD *)v54 + 3);
      v53[2] = *((_OWORD *)v54 + 2);
      v53[3] = v58;
      v104 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v59 = v104[8];
      v60 = (char *)v53 + v59;
      v61 = &v54[v59];
      v62 = type metadata accessor for Date(0);
      v102 = *(_QWORD *)(v62 - 8);
      v63 = *(void (**)(char *, char *, uint64_t))(v102 + 32);
      v63(v60, v61, v62);
      v64 = sub_100008EF4(&qword_100105F40);
      v100 = v63;
      v63(&v60[*(int *)(v64 + 36)], &v61[*(int *)(v64 + 36)], v62);
      v65 = v104[9];
      v66 = (char *)v53 + v65;
      v67 = &v54[v65];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(&v54[v65], 1, v62))
      {
        v68 = sub_100008EF4(&qword_100105F48);
        memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
      }
      else
      {
        v100(v66, v67, v62);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v66, 0, 1, v62);
      }
      v81 = v106;
      *((_BYTE *)v53 + v104[10]) = v54[v104[10]];
      *((_BYTE *)v53 + v104[11]) = v54[v104[11]];
      v82 = v53;
      v83 = 0;
LABEL_13:
      swift_storeEnumTagMultiPayload(v82, v81, v83);
      goto LABEL_14;
    }
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
LABEL_14:
  v85 = v51[7];
  v86 = v22 + v85;
  v87 = v23 + v85;
  v88 = *(_QWORD *)(v23 + v85 + 8);
  v89 = *(_QWORD *)(v22 + v85 + 8);
  *(_QWORD *)v86 = *(_QWORD *)(v23 + v85);
  *(_QWORD *)(v86 + 8) = v88;
  swift_bridgeObjectRelease(v89);
  *(_BYTE *)(v86 + 16) = *(_BYTE *)(v87 + 16);
  v90 = *(_QWORD *)(v86 + 24);
  *(_QWORD *)(v86 + 24) = *(_QWORD *)(v87 + 24);
  swift_release(v90);
  *(_BYTE *)(v86 + 32) = *(_BYTE *)(v87 + 32);
  v91 = *(_QWORD *)(v86 + 40);
  *(_QWORD *)(v86 + 40) = *(_QWORD *)(v87 + 40);
  swift_release(v91);
  *(_BYTE *)(v86 + 48) = *(_BYTE *)(v87 + 48);
  v92 = v51[8];
  v93 = (_QWORD *)(v22 + v92);
  v94 = v23 + v92;
  v95 = *(_QWORD *)(v23 + v92 + 8);
  v96 = *(_QWORD *)(v22 + v92 + 8);
  *v93 = *(_QWORD *)(v23 + v92);
  v93[1] = v95;
  swift_bridgeObjectRelease(v96);
  v97 = *(_QWORD *)(v94 + 24);
  v98 = v93[3];
  v93[2] = *(_QWORD *)(v94 + 16);
  v93[3] = v97;
  swift_bridgeObjectRelease(v98);
  *(_BYTE *)(v22 + v51[9]) = *(_BYTE *)(v23 + v51[9]);
  *(_BYTE *)(v22 + v51[10]) = *(_BYTE *)(v23 + v51[10]);
  *(_BYTE *)(v22 + v51[11]) = *(_BYTE *)(v23 + v51[11]);
  *(_BYTE *)(v22 + v51[12]) = *(_BYTE *)(v23 + v51[12]);
  return a1;
}

uint64_t sub_100034C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100034C10);
}

uint64_t sub_100034C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewLayout(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100034C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100034C90);
}

uint64_t sub_100034C90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewLayout(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_100034D0C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for SportsWidgetDynamicIslandExpandedViewLayout(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t destroy for SportsWidgetMinimalView(_QWORD *a1)
{
  swift_release(a1[2]);
  swift_release(a1[7]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[20]);
  swift_release(a1[22]);
  swift_bridgeObjectRelease(a1[25]);
  swift_bridgeObjectRelease(a1[27]);
  swift_bridgeObjectRelease(a1[29]);
  swift_bridgeObjectRelease(a1[31]);
  swift_bridgeObjectRelease(a1[33]);
  swift_bridgeObjectRelease(a1[35]);
  swift_release(a1[37]);
  return swift_bridgeObjectRelease(a1[44]);
}

uint64_t initializeWithCopy for SportsWidgetMinimalView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v26 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v26;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 88);
  v24 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v24;
  *(_QWORD *)(a1 + 88) = v4;
  v5 = *(_QWORD *)(a2 + 104);
  v23 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v23;
  *(_QWORD *)(a1 + 104) = v5;
  v6 = *(_QWORD *)(a2 + 120);
  v22 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v22;
  *(_QWORD *)(a1 + 120) = v6;
  v7 = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v21;
  *(_QWORD *)(a1 + 136) = v7;
  v8 = *(_QWORD *)(a2 + 152);
  v20 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v20;
  *(_QWORD *)(a1 + 152) = v8;
  v25 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v25;
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v9 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v9;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v10 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v10;
  v11 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v11;
  v12 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v12;
  v13 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v13;
  v14 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v14;
  v15 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v15;
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  v16 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v16;
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  v17 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v17;
  v18 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 352) = v18;
  swift_retain(v3);
  swift_retain(v26);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v25);
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_retain(v16);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t assignWithCopy for SportsWidgetMinimalView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = a2 + 288;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  swift_retain(v5);
  swift_release(v6);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  swift_retain(v7);
  swift_release(v8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a2 + 112);
  v14 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a2 + 128);
  v16 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v17 = *(_QWORD *)(a2 + 144);
  v18 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v19 = *(_QWORD *)(a2 + 160);
  v20 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v21 = *(_QWORD *)(a2 + 176);
  v22 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v21;
  swift_retain(v21);
  swift_release(v22);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v23 = *(_QWORD *)(a2 + 200);
  v24 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v25 = *(_QWORD *)(a2 + 216);
  v26 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v27 = *(_QWORD *)(a2 + 232);
  v28 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v29 = *(_QWORD *)(a2 + 248);
  v30 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v31 = *(_QWORD *)(a2 + 264);
  v32 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v33 = *(_QWORD *)(a2 + 280);
  v34 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  v35 = *(_QWORD *)(a2 + 296);
  v36 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v35;
  swift_retain(v35);
  swift_release(v36);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(v4 + 16);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  v37 = *(_QWORD *)(a2 + 352);
  v38 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  return a1;
}

void *initializeWithTake for SportsWidgetMinimalView(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x168uLL);
}

uint64_t assignWithTake for SportsWidgetMinimalView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = a2 + 288;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release(v6);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 112);
  v12 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 128);
  v14 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 144);
  v16 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a2 + 160);
  v18 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v17;
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v19 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_release(v19);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v20 = *(_QWORD *)(a2 + 200);
  v21 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 216);
  v23 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v22;
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(a2 + 232);
  v25 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = *(_QWORD *)(a2 + 248);
  v27 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(a2 + 264);
  v29 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v28;
  swift_bridgeObjectRelease(v29);
  v30 = *(_QWORD *)(a2 + 280);
  v31 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v30;
  swift_bridgeObjectRelease(v31);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  v32 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  swift_release(v32);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(v4 + 16);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  v33 = *(_QWORD *)(a2 + 352);
  v34 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = v33;
  swift_bridgeObjectRelease(v34);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetMinimalView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 360))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetMinimalView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 360) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 360) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetMinimalView()
{
  return &type metadata for SportsWidgetMinimalView;
}

_QWORD *sub_10003552C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  const void *v29;
  unsigned int (*v30)(const void *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *__dst;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v18 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v18 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v18);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v33 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v33;
    v5 = a2[4];
    v34 = a2[3];
    *(_QWORD *)(a1 + 24) = v34;
    *(_QWORD *)(a1 + 32) = v5;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    v6 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v6;
    v31 = a2[10];
    v32 = a2[11];
    *(_QWORD *)(a1 + 80) = v31;
    *(_QWORD *)(a1 + 88) = v32;
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    *(_QWORD *)(a1 + 112) = a2[14];
    v7 = *(int *)(a3 + 24);
    v8 = (_QWORD *)(a1 + v7);
    v9 = (uint64_t)a2 + v7;
    v10 = *(uint64_t *)((char *)a2 + v7 + 8);
    *v8 = *(uint64_t *)((char *)a2 + v7);
    v8[1] = v10;
    v11 = *(uint64_t *)((char *)a2 + v7 + 24);
    v8[2] = *(uint64_t *)((char *)a2 + v7 + 16);
    v8[3] = v11;
    v12 = *(uint64_t *)((char *)a2 + v7 + 40);
    v8[4] = *(uint64_t *)((char *)a2 + v7 + 32);
    v8[5] = v12;
    v13 = *(uint64_t *)((char *)a2 + v7 + 56);
    v8[6] = *(uint64_t *)((char *)a2 + v7 + 48);
    v8[7] = v13;
    v14 = (int *)type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(0);
    v15 = v14[6];
    __dst = (char *)v8 + v15;
    v29 = (const void *)(v9 + v15);
    v16 = type metadata accessor for URL(0);
    v28 = *(_QWORD *)(v16 - 8);
    v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
    swift_retain(v33);
    swift_retain(v34);
    swift_retain(v6);
    swift_retain(v31);
    swift_retain(v32);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    if (v30(v29, 1, v16))
    {
      v17 = sub_100008EF4(&qword_100105F50);
      memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v28 + 16))(__dst, v29, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v16);
    }
    v19 = v14[7];
    v20 = (_QWORD *)((char *)v8 + v19);
    v21 = (_QWORD *)(v9 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = v14[8];
    v24 = (_QWORD *)((char *)v8 + v23);
    v25 = (_QWORD *)(v9 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    *((_BYTE *)v8 + v14[9]) = *(_BYTE *)(v9 + v14[9]);
    *((_BYTE *)v8 + v14[10]) = *(_BYTE *)(v9 + v14[10]);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
  }
  return v3;
}

uint64_t sub_10003576C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_release(a1[9]);
  swift_release(a1[10]);
  swift_release(a1[11]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  swift_bridgeObjectRelease(v4[1]);
  swift_bridgeObjectRelease(v4[3]);
  swift_bridgeObjectRelease(v4[5]);
  swift_bridgeObjectRelease(v4[7]);
  v5 = (int *)type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(0);
  v6 = (char *)v4 + v5[6];
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v5[7] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v5[8] + 8));
}

uint64_t sub_100035854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  const void *v27;
  unsigned int (*v28)(const void *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v31 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v31;
  v4 = *(_QWORD *)(a2 + 32);
  v32 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v32;
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  v29 = *(_QWORD *)(a2 + 80);
  v30 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v29;
  *(_QWORD *)(a1 + 88) = v30;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = *(int *)(a3 + 24);
  v7 = (_QWORD *)(a1 + v6);
  v8 = a2 + v6;
  v9 = *(_QWORD *)(a2 + v6 + 8);
  *v7 = *(_QWORD *)(a2 + v6);
  v7[1] = v9;
  v10 = *(_QWORD *)(a2 + v6 + 24);
  v7[2] = *(_QWORD *)(a2 + v6 + 16);
  v7[3] = v10;
  v11 = *(_QWORD *)(a2 + v6 + 40);
  v7[4] = *(_QWORD *)(a2 + v6 + 32);
  v7[5] = v11;
  v12 = *(_QWORD *)(a2 + v6 + 56);
  v7[6] = *(_QWORD *)(a2 + v6 + 48);
  v7[7] = v12;
  v13 = (int *)type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(0);
  v14 = v13[6];
  __dst = (char *)v7 + v14;
  v27 = (const void *)(v8 + v14);
  v15 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v15 - 8);
  v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
  swift_retain(v31);
  swift_retain(v32);
  swift_retain(v5);
  swift_retain(v29);
  swift_retain(v30);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  if (v28(v27, 1, v15))
  {
    v16 = sub_100008EF4(&qword_100105F50);
    memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v26 + 16))(__dst, v27, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v15);
  }
  v17 = v13[7];
  v18 = (_QWORD *)((char *)v7 + v17);
  v19 = (_QWORD *)(v8 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = v13[8];
  v22 = (_QWORD *)((char *)v7 + v21);
  v23 = (_QWORD *)(v8 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  *((_BYTE *)v7 + v13[9]) = *(_BYTE *)(v8 + v13[9]);
  *((_BYTE *)v7 + v13[10]) = *(_BYTE *)(v8 + v13[10]);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t sub_100035A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_retain(v14);
  swift_release(v15);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v16 = *(int *)(a3 + 24);
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *(_QWORD *)(a2 + v16);
  v19 = *(_QWORD *)(a2 + v16 + 8);
  v20 = *(_QWORD *)(a1 + v16 + 8);
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v17[2] = v18[2];
  v21 = v18[3];
  v22 = v17[3];
  v17[3] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v17[4] = v18[4];
  v23 = v18[5];
  v24 = v17[5];
  v17[5] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  v17[6] = v18[6];
  v25 = v18[7];
  v26 = v17[7];
  v17[7] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = (int *)type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(0);
  v28 = v27[6];
  v29 = (char *)v17 + v28;
  v30 = (char *)v18 + v28;
  v31 = type metadata accessor for URL(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v29, v30, v31);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v31);
    goto LABEL_6;
  }
  if (v35)
  {
LABEL_6:
    v36 = sub_100008EF4(&qword_100105F50);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
LABEL_7:
  v37 = v27[7];
  v38 = (_QWORD *)((char *)v17 + v37);
  v39 = (_QWORD *)((char *)v18 + v37);
  *v38 = *v39;
  v40 = v39[1];
  v41 = v38[1];
  v38[1] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = v27[8];
  v43 = (_QWORD *)((char *)v17 + v42);
  v44 = (_QWORD *)((char *)v18 + v42);
  *v43 = *v44;
  v45 = v44[1];
  v46 = v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  *((_BYTE *)v17 + v27[9]) = *((_BYTE *)v18 + v27[9]);
  *((_BYTE *)v17 + v27[10]) = *((_BYTE *)v18 + v27[10]);
  return a1;
}

uint64_t sub_100035D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 24);
  v5 = (_OWORD *)(a1 + v4);
  v6 = a2 + v4;
  v7 = *(_OWORD *)(a2 + v4 + 16);
  *v5 = *(_OWORD *)(a2 + v4);
  v5[1] = v7;
  v8 = *(_OWORD *)(a2 + v4 + 48);
  v5[2] = *(_OWORD *)(a2 + v4 + 32);
  v5[3] = v8;
  v9 = (int *)type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(0);
  v10 = v9[6];
  v11 = (char *)v5 + v10;
  v12 = (const void *)(v6 + v10);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_100008EF4(&qword_100105F50);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_OWORD *)((char *)v5 + v9[7]) = *(_OWORD *)(v6 + v9[7]);
  *(_OWORD *)((char *)v5 + v9[8]) = *(_OWORD *)(v6 + v9[8]);
  *((_BYTE *)v5 + v9[9]) = *(_BYTE *)(v6 + v9[9]);
  *((_BYTE *)v5 + v9[10]) = *(_BYTE *)(v6 + v9[10]);
  return a1;
}

uint64_t sub_100035E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release(v9);
  v10 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release(v10);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = *(_QWORD *)(a2 + v11 + 8);
  v15 = *(_QWORD *)(a1 + v11 + 8);
  *v12 = *(_QWORD *)(a2 + v11);
  v12[1] = v14;
  swift_bridgeObjectRelease(v15);
  v16 = v13[3];
  v17 = v12[3];
  v12[2] = v13[2];
  v12[3] = v16;
  swift_bridgeObjectRelease(v17);
  v18 = v13[5];
  v19 = v12[5];
  v12[4] = v13[4];
  v12[5] = v18;
  swift_bridgeObjectRelease(v19);
  v20 = v13[7];
  v21 = v12[7];
  v12[6] = v13[6];
  v12[7] = v20;
  swift_bridgeObjectRelease(v21);
  v22 = (int *)type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(0);
  v23 = v22[6];
  v24 = (char *)v12 + v23;
  v25 = (char *)v13 + v23;
  v26 = type metadata accessor for URL(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v24, v25, v26);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_6;
  }
  if (v30)
  {
LABEL_6:
    v31 = sub_100008EF4(&qword_100105F50);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
LABEL_7:
  v32 = v22[7];
  v33 = (_QWORD *)((char *)v12 + v32);
  v34 = (_QWORD *)((char *)v13 + v32);
  v36 = *v34;
  v35 = v34[1];
  v37 = v33[1];
  *v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease(v37);
  v38 = v22[8];
  v39 = (_QWORD *)((char *)v12 + v38);
  v40 = (_QWORD *)((char *)v13 + v38);
  v42 = *v40;
  v41 = v40[1];
  v43 = v39[1];
  *v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease(v43);
  *((_BYTE *)v12 + v22[9]) = *((_BYTE *)v13 + v22[9]);
  *((_BYTE *)v12 + v22[10]) = *((_BYTE *)v13 + v22[10]);
  return a1;
}

uint64_t sub_1000360EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000360F8);
}

uint64_t sub_1000360F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100036174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100036180);
}

uint64_t sub_100036180(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SportsWidgetDynamicIslandCompactView(uint64_t a1)
{
  return sub_100025CD0(a1, qword_100107710, (uint64_t)&nominal type descriptor for SportsWidgetDynamicIslandCompactView);
}

uint64_t sub_100036208(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1000C8378;
  v4[1] = &unk_1000C8390;
  result = type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100036284(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D224C, 1);
}

uint64_t sub_100036294(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2224, 1);
}

uint64_t sub_1000362A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;

  v13 = *(_QWORD *)(a1 + 176);
  v2 = *(_QWORD *)(a1 + 184);
  v3 = *(_QWORD *)(a1 + 192);
  v4 = *(_QWORD *)(a1 + 200);
  v5 = *(_QWORD *)(a1 + 208);
  v6 = *(_QWORD *)(a1 + 216);
  v7 = *(_QWORD *)(a1 + 224);
  v8 = *(_QWORD *)(a1 + 232);
  v12 = *(_OWORD *)(a1 + 240);
  v9 = *(_QWORD *)(a1 + 256);
  v10 = *(_BYTE *)(a1 + 264);
  sub_100036384(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  sub_10003278C(v13, v2, v3, v4, v5, v6, v7, v8, v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

uint64_t sub_100036384(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14 != -1)
    return sub_100013490(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14 & 1);
  return result;
}

unint64_t sub_1000363BC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100107788;
  if (!qword_100107788)
  {
    v1 = sub_100008F80(&qword_100107760);
    v2[0] = sub_100008F80(&qword_100107790);
    v2[1] = sub_100036490(&qword_100107798, &qword_100107790, &qword_1001077A0, &qword_1001077A8);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    sub_1000139F8(&qword_1001063D0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100107788);
  }
  return result;
}

uint64_t sub_100036490(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100008F80(a2);
    sub_100013840(a3, a4, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100036510(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 104);
  v18 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v16 = *(_OWORD *)(a1 + 176);
  v17 = *(_OWORD *)(a1 + 160);
  v15 = *(_OWORD *)(a1 + 192);
  v13 = *(_OWORD *)(a1 + 224);
  v14 = *(_OWORD *)(a1 + 208);
  v12 = *(_OWORD *)(a1 + 240);
  v9 = *(_QWORD *)(a1 + 256);
  v10 = *(_BYTE *)(a1 + 264);
  sub_10003278C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  sub_100036624(v18, v2, v3, v4, v5, v6, v7, v8, v17, *((uint64_t *)&v17 + 1), v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12,
    *((uint64_t *)&v12 + 1),
    v9,
    v10);
  return a1;
}

uint64_t sub_100036624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned __int8 a22)
{
  uint64_t result;

  if (a22 != 255)
    return sub_100013490(a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22 & 1);
  return result;
}

double sub_100036668(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 168) = -1;
  return result;
}

double sub_100036690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned __int8 a22)
{
  double result;

  if (a22 != 255)
    return sub_1000328F0(a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22 & 1);
  return result;
}

uint64_t sub_1000366D4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 168);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    v4);
  return a1;
}

double sub_100036740(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 255;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  return result;
}

double sub_100036764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  double result;

  if (a14 != -1)
    return sub_1000328F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14 & 1);
  return result;
}

_QWORD *sub_10003679C(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21]);
  return a1;
}

_QWORD *sub_100036800(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a1[8];
  v3 = a1[12];
  v4 = a1[17];
  v5 = a1[19];
  v6 = a1[21];
  v13 = a1[6];
  v14 = a1[23];
  v7 = a1[40];
  v8 = a1[42];
  v9 = a1[46];
  v10 = a1[51];
  v12 = a1[55];
  v15 = a1[57];
  swift_bridgeObjectRelease(a1[53]);
  swift_release(v10);
  swift_release(v9);
  swift_release(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v15);
  return a1;
}

_QWORD *sub_1000368F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[6];
  v3 = a1[8];
  v4 = a1[12];
  v5 = a1[17];
  v6 = a1[19];
  v7 = a1[21];
  swift_bridgeObjectRetain(a1[23]);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *sub_100036980(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[6];
  v3 = a1[8];
  v4 = a1[12];
  v5 = a1[17];
  v6 = a1[21];
  v7 = a1[23];
  swift_bridgeObjectRelease(a1[19]);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t storeEnumTagSinglePayload for SportsWidgetDynamicIslandCompactView.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100036A54 + 4 * byte_1000C8185[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100036A88 + 4 * byte_1000C8180[v4]))();
}

uint64_t sub_100036A88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100036A90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100036A98);
  return result;
}

uint64_t sub_100036AA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100036AACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100036AB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100036AB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetDynamicIslandCompactView.Mode()
{
  return &type metadata for SportsWidgetDynamicIslandCompactView.Mode;
}

unint64_t sub_100036AD8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001077E0;
  if (!qword_1001077E0)
  {
    v1 = sub_100008F80(&qword_1001077E8);
    sub_1000363BC();
    v2[0] = sub_100008F80(&qword_100107768);
    v2[1] = sub_100036490(&qword_100107770, &qword_100107768, &qword_100107778, &qword_100107780);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001077E0);
  }
  return result;
}

unint64_t sub_100036B98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001077F0;
  if (!qword_1001077F0)
  {
    v1 = sub_100008F80(&qword_1001077C8);
    sub_100013840(&qword_1001077D8, &qword_1001077D0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_1000139F8(&qword_1001063D0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001077F0);
  }
  return result;
}

unint64_t sub_100036C38()
{
  unint64_t result;

  result = qword_1001077F8;
  if (!qword_1001077F8)
  {
    result = swift_getWitnessTable(&unk_1000C8490, &type metadata for SportsWidgetDynamicIslandCompactView.Mode);
    atomic_store(result, (unint64_t *)&qword_1001077F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for VideosPlaybackWiFiQuality()
{
  return &type metadata for VideosPlaybackWiFiQuality;
}

uint64_t _s17TVWidgetExtension25VideosPlaybackWiFiQualityOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100036CE4 + 4 * byte_1000C84C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100036D18 + 4 * byte_1000C84C0[v4]))();
}

uint64_t sub_100036D18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100036D20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100036D28);
  return result;
}

uint64_t sub_100036D34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100036D3CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100036D40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100036D48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VideosPlaybackCellularQuality()
{
  return &type metadata for VideosPlaybackCellularQuality;
}

uint64_t sub_100036D64()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011ED80);
  sub_10000909C(v16, (uint64_t)qword_10011ED80);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x80000001000BFCA0);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

unint64_t sub_100036F88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t result;
  unint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t);
  void (*v56)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  __int128 v67;

  v0 = sub_100008EF4(&qword_1001074F8);
  __chkstk_darwin(v0);
  v63 = (char *)&v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v2);
  v62 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v4 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  v57 = v13;
  __chkstk_darwin(v13);
  v65 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008EF4(&qword_1001078F0);
  v17 = sub_100008EF4(&qword_100107550);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v60 = v17;
  v61 = v19;
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v16, v21 + 2 * v19, v20 | 7);
  v67 = xmmword_1000C8170;
  v64 = v22;
  *(_OWORD *)(v22 + 16) = xmmword_1000C8170;
  v58 = v22 + v21 + *(int *)(v17 + 48);
  v59 = v22 + v21;
  *(_BYTE *)(v22 + v21) = 0;
  v23 = String.LocalizationValue.init(stringLiteral:)(0x776F442074736146, 0xEE007364616F6C6ELL);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v49 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v26 = v66;
  v25(v6, enum case for LocalizedStringResource.BundleDescription.main(_:), v66);
  v48 = v25;
  v47 = 0x80000001000BF530;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0xD000000000000012, 0x80000001000BF530, v9, v6, 0, 0, 256);
  v27 = String.LocalizationValue.init(stringLiteral:)(0x100000000000002CLL, 0x80000001000BFCC0);
  static Locale.current.getter(v27);
  v25(v6, v24, v26);
  v28 = v62;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0xD000000000000012, 0x80000001000BF530, v9, v6, 0, 0, 256);
  v56 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56);
  v56(v28, 0, 1, v13);
  v29 = type metadata accessor for DisplayRepresentation.Image(0);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v54 = v29;
  v55 = v30;
  v31 = v63;
  v30(v63, 1, 1, v29);
  v32 = sub_100008EF4(&qword_1001078F8);
  v33 = *(_QWORD *)(v14 + 72);
  v34 = *(unsigned __int8 *)(v14 + 80);
  v51 = ((v34 + 32) & ~v34) + 2 * v33;
  v52 = v32;
  v53 = v33;
  v50 = v34 | 7;
  v35 = swift_allocObject(v32, v51, v34 | 7);
  *(_OWORD *)(v35 + 16) = v67;
  LocalizedStringResource.init(stringLiteral:)(0x61755120646F6F47, 0xEC0000007974696CLL);
  LocalizedStringResource.init(stringLiteral:)(0x6F7453207373654CLL, 0xEC00000065676172);
  v36 = v31;
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v65, v28, v31, v35);
  v37 = (_BYTE *)(v59 + v61);
  v61 += v59 + *(int *)(v60 + 48);
  *v37 = 1;
  v38 = String.LocalizationValue.init(stringLiteral:)(0x6175512068676948, 0xEC0000007974696CLL);
  static Locale.current.getter(v38);
  v39 = v49;
  v40 = v66;
  v41 = v48;
  v48(v6, v49, v66);
  v42 = v47;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0xD000000000000012, v47, v9, v6, 0, 0, 256);
  v43 = String.LocalizationValue.init(stringLiteral:)(0x100000000000002ELL, 0x80000001000BFCF0);
  static Locale.current.getter(v43);
  v41(v6, v39, v40);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0xD000000000000012, v42, v9, v6, 0, 0, 256);
  v44 = v28;
  v56(v28, 0, 1, v57);
  v55(v36, 1, 1, v54);
  v45 = swift_allocObject(v52, v51, v50);
  *(_OWORD *)(v45 + 16) = v67;
  LocalizedStringResource.init(stringLiteral:)(0x44207265776F6C53, 0xEF64616F6C6E776FLL);
  LocalizedStringResource.init(stringLiteral:)(0x6F74532065726F4DLL, 0xEC00000065676172);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v65, v44, v36, v45);
  result = sub_10002CD44(v64);
  qword_10011ED98 = result;
  return result;
}

uint64_t sub_100037564(char *a1, char *a2)
{
  return sub_100019338(*a1, *a2);
}

uint64_t sub_100037574(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 0x6C61755174736542;
  else
    v2 = 0x6C617551646F6F47;
  String.hash(into:)(a1, v2, 0xEB00000000797469);
  return swift_bridgeObjectRelease(0xEB00000000797469);
}

uint64_t sub_1000375D0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1000F6D30;
  return sub_100037E64(v2, a1, a2);
}

void sub_1000375DC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x6C617551646F6F47;
  if (*v1)
    v2 = 0x6C61755174736542;
  *a1 = v2;
  a1[1] = 0xEB00000000797469;
}

void sub_10003761C(_QWORD *a1@<X8>)
{
  *a1 = &off_1000F6F50;
}

uint64_t sub_10003762C@<X0>(uint64_t a1@<X8>)
{
  return sub_100037EE8(&qword_100105C70, (uint64_t)qword_10011ED80, (uint64_t)sub_100036D64, a1);
}

uint64_t sub_100037648(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038524();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100037680(uint64_t a1, uint64_t a2)
{
  return sub_100037FA8(a1, a2, &qword_100105C78, &qword_10011ED98, (uint64_t)sub_100036F88);
}

uint64_t sub_10003769C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000385B4();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_1000376D4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v7, qword_10011EDA0);
  sub_10000909C(v7, (uint64_t)qword_10011EDA0);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000019, 0x80000001000BFD20);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v6, v2);
}

unint64_t sub_1000377E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t result;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(char *);
  unsigned int v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  void (*v53)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;

  v0 = sub_100008EF4(&qword_1001074F8);
  __chkstk_darwin(v0);
  v63 = (char *)&v44 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v2);
  v59 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v4 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  v54 = v13;
  __chkstk_darwin(v13);
  v61 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008EF4(&qword_100107900);
  v17 = sub_100008EF4(&qword_100107560);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v57 = v17;
  v58 = v19;
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v16, v21 + 2 * v19, v20 | 7);
  v60 = v22;
  *(_OWORD *)(v22 + 16) = xmmword_1000C8170;
  v55 = v22 + v21 + *(int *)(v17 + 48);
  v56 = v22 + v21;
  *(_BYTE *)(v22 + v21) = 0;
  v23 = String.LocalizationValue.init(stringLiteral:)(0x6974616D6F747541, 0xE900000000000063);
  static Locale.current.getter(v23);
  v24 = *(void (**)(char *))(v4 + 104);
  v25 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v47 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v26 = v62;
  v24(v6);
  v46 = v24;
  v45 = 0x80000001000BF530;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0xD000000000000012, 0x80000001000BF530, v9, v6, 0, 0, 256);
  v27 = String.LocalizationValue.init(stringLiteral:)(0x100000000000002BLL, 0x80000001000BFD40);
  static Locale.current.getter(v27);
  ((void (*)(char *, uint64_t, uint64_t))v24)(v6, v25, v26);
  v28 = v59;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0xD000000000000012, 0x80000001000BF530, v9, v6, 0, 0, 256);
  v53 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56);
  v53(v28, 0, 1, v13);
  v29 = type metadata accessor for DisplayRepresentation.Image(0);
  v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v30 = v63;
  v52(v63, 1, 1, v29);
  v31 = sub_100008EF4(&qword_1001078F8);
  v32 = *(unsigned __int8 *)(v14 + 80);
  v50 = ((v32 + 32) & ~v32) + *(_QWORD *)(v14 + 72);
  v51 = v31;
  v49 = v32 | 7;
  v33 = swift_allocObject(v31, v50, v32 | 7);
  v48 = xmmword_1000C6710;
  *(_OWORD *)(v33 + 16) = xmmword_1000C6710;
  LocalizedStringResource.init(stringLiteral:)(0x657A696D6974704FLL, 0xE900000000000064);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v61, v28, v30, v33);
  v34 = (_BYTE *)(v56 + v58);
  v58 += v56 + *(int *)(v57 + 48);
  *v34 = 1;
  v35 = String.LocalizationValue.init(stringLiteral:)(0x6175512068676948, 0xEC0000007974696CLL);
  static Locale.current.getter(v35);
  v36 = v47;
  v37 = v62;
  v38 = (void (*)(char *, uint64_t, uint64_t))v46;
  ((void (*)(char *, _QWORD, uint64_t))v46)(v6, v47, v62);
  v39 = v45;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0xD000000000000012, v45, v9, v6, 0, 0, 256);
  v40 = String.LocalizationValue.init(stringLiteral:)(0x100000000000002ELL, 0x80000001000BFD70);
  static Locale.current.getter(v40);
  v38(v6, v36, v37);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0xD000000000000012, v39, v9, v6, 0, 0, 256);
  v53(v28, 0, 1, v54);
  v41 = v63;
  v52(v63, 1, 1, v29);
  v42 = swift_allocObject(v51, v50, v49);
  *(_OWORD *)(v42 + 16) = v48;
  LocalizedStringResource.init(stringLiteral:)(0x7461442065726F4DLL, 0xE900000000000061);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v61, v28, v41, v42);
  result = sub_10002CD60(v60);
  qword_10011EDB8 = result;
  return result;
}

Swift::Int sub_100037D54()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  if (v1)
    v2 = 0x6C61755174736542;
  else
    v2 = 0x6C617551646F6F47;
  String.hash(into:)(v4, v2, 0xEB00000000797469);
  swift_bridgeObjectRelease(0xEB00000000797469);
  return Hasher._finalize()();
}

Swift::Int sub_100037DD8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2)
    v3 = 0x6C61755174736542;
  else
    v3 = 0x6C617551646F6F47;
  String.hash(into:)(v5, v3, 0xEB00000000797469);
  swift_bridgeObjectRelease(0xEB00000000797469);
  return Hasher._finalize()();
}

uint64_t sub_100037E58@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1000F6CE0;
  return sub_100037E64(v2, a1, a2);
}

uint64_t sub_100037E64@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;
  char v8;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

void sub_100037EBC(_QWORD *a1@<X8>)
{
  *a1 = &off_1000F6F78;
}

uint64_t sub_100037ECC@<X0>(uint64_t a1@<X8>)
{
  return sub_100037EE8(&qword_100105C80, (uint64_t)qword_10011EDA0, (uint64_t)sub_1000376D4, a1);
}

uint64_t sub_100037EE8@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for TypeDisplayRepresentation(0);
  v7 = sub_10000909C(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_100037F54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038100();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100037F8C(uint64_t a1, uint64_t a2)
{
  return sub_100037FA8(a1, a2, &qword_100105C88, &qword_10011EDB8, (uint64_t)sub_1000377E4);
}

uint64_t sub_100037FA8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  if (*a3 != -1)
    swift_once(a3, a5);
  return swift_bridgeObjectRetain(*a4);
}

uint64_t sub_100037FE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038190();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100038020()
{
  unint64_t result;

  result = qword_100107800;
  if (!qword_100107800)
  {
    result = swift_getWitnessTable(&unk_1000C8530, &type metadata for VideosPlaybackCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100107800);
  }
  return result;
}

unint64_t sub_100038068()
{
  unint64_t result;

  result = qword_100107808;
  if (!qword_100107808)
  {
    result = swift_getWitnessTable(&unk_1000C86E0, &type metadata for VideosPlaybackCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100107808);
  }
  return result;
}

unint64_t sub_1000380B0()
{
  unint64_t result;

  result = qword_100107810;
  if (!qword_100107810)
  {
    result = swift_getWitnessTable(&unk_1000C87AC, &type metadata for VideosPlaybackCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100107810);
  }
  return result;
}

uint64_t sub_1000380F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000384E4(a1, a2, a3, (uint64_t (*)(void))sub_100038100);
}

unint64_t sub_100038100()
{
  unint64_t result;

  result = qword_100107818;
  if (!qword_100107818)
  {
    result = swift_getWitnessTable(&unk_1000C8718, &type metadata for VideosPlaybackCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100107818);
  }
  return result;
}

unint64_t sub_100038148()
{
  unint64_t result;

  result = qword_100107820;
  if (!qword_100107820)
  {
    result = swift_getWitnessTable(&unk_1000C8598, &type metadata for VideosPlaybackCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100107820);
  }
  return result;
}

unint64_t sub_100038190()
{
  unint64_t result;

  result = qword_100107828;
  if (!qword_100107828)
  {
    result = swift_getWitnessTable(&unk_1000C8558, &type metadata for VideosPlaybackCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100107828);
  }
  return result;
}

unint64_t sub_1000381D8()
{
  unint64_t result;

  result = qword_100107830;
  if (!qword_100107830)
  {
    result = swift_getWitnessTable(&unk_1000C85F0, &type metadata for VideosPlaybackCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100107830);
  }
  return result;
}

unint64_t sub_100038220()
{
  unint64_t result;

  result = qword_100107838;
  if (!qword_100107838)
  {
    result = swift_getWitnessTable(&unk_1000C8618, &type metadata for VideosPlaybackCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100107838);
  }
  return result;
}

uint64_t sub_100038264()
{
  return sub_1000386AC(&qword_100107840, &qword_100107848);
}

unint64_t sub_10003828C()
{
  unint64_t result;

  result = qword_100107850;
  if (!qword_100107850)
  {
    result = swift_getWitnessTable(&unk_1000C8670, &type metadata for VideosPlaybackCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100107850);
  }
  return result;
}

unint64_t sub_1000382D4()
{
  unint64_t result;

  result = qword_100107858;
  if (!qword_100107858)
  {
    result = swift_getWitnessTable(&unk_1000C8640, &type metadata for VideosPlaybackCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100107858);
  }
  return result;
}

unint64_t sub_10003831C()
{
  unint64_t result;

  result = qword_100107860;
  if (!qword_100107860)
  {
    result = swift_getWitnessTable(&unk_1000C8774, &type metadata for VideosPlaybackCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100107860);
  }
  return result;
}

uint64_t sub_100038360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000387D8(a1, a2, a3, (uint64_t (*)(void))sub_100038100, (uint64_t (*)(void))sub_100038374);
}

unint64_t sub_100038374()
{
  unint64_t result;

  result = qword_100107868;
  if (!qword_100107868)
  {
    result = swift_getWitnessTable(&unk_1000C86A8, &type metadata for VideosPlaybackCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100107868);
  }
  return result;
}

unint64_t sub_1000383BC()
{
  unint64_t result;

  result = qword_100107870;
  if (!qword_100107870)
  {
    result = swift_getWitnessTable(&unk_1000C87EC, &type metadata for VideosPlaybackCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100107870);
  }
  return result;
}

unint64_t sub_100038404()
{
  unint64_t result;

  result = qword_100107878;
  if (!qword_100107878)
  {
    result = swift_getWitnessTable(&unk_1000C8814, &type metadata for VideosPlaybackWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_100107878);
  }
  return result;
}

unint64_t sub_10003844C()
{
  unint64_t result;

  result = qword_100107880;
  if (!qword_100107880)
  {
    result = swift_getWitnessTable(&unk_1000C89C4, &type metadata for VideosPlaybackWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_100107880);
  }
  return result;
}

unint64_t sub_100038494()
{
  unint64_t result;

  result = qword_100107888;
  if (!qword_100107888)
  {
    result = swift_getWitnessTable(&unk_1000C8A90, &type metadata for VideosPlaybackWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_100107888);
  }
  return result;
}

uint64_t sub_1000384D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000384E4(a1, a2, a3, (uint64_t (*)(void))sub_100038524);
}

uint64_t sub_1000384E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a4();
  return swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>, 1);
}

unint64_t sub_100038524()
{
  unint64_t result;

  result = qword_100107890;
  if (!qword_100107890)
  {
    result = swift_getWitnessTable(&unk_1000C89FC, &type metadata for VideosPlaybackWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_100107890);
  }
  return result;
}

unint64_t sub_10003856C()
{
  unint64_t result;

  result = qword_100107898;
  if (!qword_100107898)
  {
    result = swift_getWitnessTable(&unk_1000C887C, &type metadata for VideosPlaybackWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_100107898);
  }
  return result;
}

unint64_t sub_1000385B4()
{
  unint64_t result;

  result = qword_1001078A0;
  if (!qword_1001078A0)
  {
    result = swift_getWitnessTable(&unk_1000C883C, &type metadata for VideosPlaybackWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_1001078A0);
  }
  return result;
}

unint64_t sub_1000385FC()
{
  unint64_t result;

  result = qword_1001078A8;
  if (!qword_1001078A8)
  {
    result = swift_getWitnessTable(&unk_1000C88D4, &type metadata for VideosPlaybackWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_1001078A8);
  }
  return result;
}

unint64_t sub_100038644()
{
  unint64_t result;

  result = qword_1001078B0;
  if (!qword_1001078B0)
  {
    result = swift_getWitnessTable(&unk_1000C88FC, &type metadata for VideosPlaybackWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_1001078B0);
  }
  return result;
}

uint64_t sub_100038688()
{
  return sub_1000386AC(&qword_1001078B8, &qword_1001078C0);
}

uint64_t sub_1000386AC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100008F80(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000386F0()
{
  unint64_t result;

  result = qword_1001078C8;
  if (!qword_1001078C8)
  {
    result = swift_getWitnessTable(&unk_1000C8954, &type metadata for VideosPlaybackWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_1001078C8);
  }
  return result;
}

unint64_t sub_100038738()
{
  unint64_t result;

  result = qword_1001078D0;
  if (!qword_1001078D0)
  {
    result = swift_getWitnessTable(&unk_1000C8924, &type metadata for VideosPlaybackWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_1001078D0);
  }
  return result;
}

unint64_t sub_100038780()
{
  unint64_t result;

  result = qword_1001078D8;
  if (!qword_1001078D8)
  {
    result = swift_getWitnessTable(&unk_1000C8A58, &type metadata for VideosPlaybackWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_1001078D8);
  }
  return result;
}

uint64_t sub_1000387C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000387D8(a1, a2, a3, (uint64_t (*)(void))sub_100038524, (uint64_t (*)(void))sub_100038808);
}

uint64_t sub_1000387D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100038808()
{
  unint64_t result;

  result = qword_1001078E0;
  if (!qword_1001078E0)
  {
    result = swift_getWitnessTable(&unk_1000C898C, &type metadata for VideosPlaybackWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_1001078E0);
  }
  return result;
}

unint64_t sub_100038850()
{
  unint64_t result;

  result = qword_1001078E8;
  if (!qword_1001078E8)
  {
    result = swift_getWitnessTable(&unk_1000C8AD0, &type metadata for VideosPlaybackWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_1001078E8);
  }
  return result;
}

_QWORD *sub_1000388A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v42;
  int *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v44 = a3;
    v45 = a2;
    v15 = *(int *)(a3 + 20);
    v46 = a1;
    v16 = (_QWORD *)((char *)a1 + v15);
    v17 = (char *)a2 + v15;
    v18 = *(_QWORD *)((char *)a2 + v15 + 8);
    *v16 = *(_QWORD *)((char *)a2 + v15);
    v16[1] = v18;
    v19 = *(_QWORD *)((char *)a2 + v15 + 24);
    v16[2] = *(_QWORD *)((char *)a2 + v15 + 16);
    v16[3] = v19;
    v20 = *(_QWORD *)((char *)a2 + v15 + 40);
    v16[4] = *(_QWORD *)((char *)a2 + v15 + 32);
    v16[5] = v20;
    v21 = *(_QWORD *)((char *)a2 + v15 + 56);
    v16[6] = *(_QWORD *)((char *)a2 + v15 + 48);
    v16[7] = v21;
    v22 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v23 = *(int *)(v22 + 32);
    v24 = (char *)v16 + v23;
    v42 = &v17[v23];
    v43 = (int *)v22;
    v25 = type metadata accessor for Date(0);
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    v27(v24, v42, v25);
    v28 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
    v27(&v24[v28], &v42[v28], v25);
    v29 = v43[9];
    v30 = (char *)v16 + v29;
    v31 = &v17[v29];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(&v17[v29], 1, v25))
    {
      v32 = sub_100008EF4(&qword_100105F48);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v27(v30, v31, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v30, 0, 1, v25);
    }
    *((_BYTE *)v16 + v43[10]) = v17[v43[10]];
    *((_BYTE *)v16 + v43[11]) = v17[v43[11]];
    v33 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
    v34 = *(_QWORD *)&v17[v33];
    *(_QWORD *)((char *)v16 + v33) = v34;
    v35 = *(int *)(v44 + 24);
    v13 = v46;
    v36 = (char *)v46 + v35;
    v37 = (char *)v45 + v35;
    *v36 = *v37;
    v38 = *((_QWORD *)v37 + 1);
    v39 = *((_QWORD *)v37 + 2);
    *((_QWORD *)v36 + 1) = v38;
    *((_QWORD *)v36 + 2) = v39;
    v40 = *((_QWORD *)v37 + 3);
    v12 = *((_QWORD *)v37 + 4);
    *((_QWORD *)v36 + 3) = v40;
    *((_QWORD *)v36 + 4) = v12;
    *((_QWORD *)v36 + 5) = *((_QWORD *)v37 + 5);
    v36[48] = v37[48];
    *(_OWORD *)(v36 + 56) = *(_OWORD *)(v37 + 56);
    *((_QWORD *)v36 + 9) = *((_QWORD *)v37 + 9);
    swift_bridgeObjectRetain(v34);
    swift_retain(v38);
    swift_retain(v39);
    swift_retain(v40);
  }
  swift_retain(v12);
  return v13;
}

uint64_t sub_100038B54(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[3]);
  swift_bridgeObjectRelease(v6[5]);
  swift_bridgeObjectRelease(v6[7]);
  v7 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v8 = (char *)v6 + *(int *)(v7 + 32);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, uint64_t))(v10 + 8);
  v11(v8, v9);
  v12 = sub_100008EF4(&qword_100105F40);
  v11(&v8[*(int *)(v12 + 36)], v9);
  v13 = (char *)v6 + *(int *)(v7 + 36);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
    v11(v13, v9);
  v14 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + *(int *)(v14 + 20)));
  v15 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  swift_release(v15[1]);
  swift_release(v15[2]);
  swift_release(v15[3]);
  return swift_release(v15[4]);
}

_QWORD *sub_100038CB0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  int *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;

  v6 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v42 = a3;
  v43 = a2;
  v12 = *(int *)(a3 + 20);
  v44 = a1;
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)((char *)a2 + v12 + 8);
  *v13 = *(_QWORD *)((char *)a2 + v12);
  v13[1] = v15;
  v16 = *(_QWORD *)((char *)a2 + v12 + 24);
  v13[2] = *(_QWORD *)((char *)a2 + v12 + 16);
  v13[3] = v16;
  v17 = *(_QWORD *)((char *)a2 + v12 + 40);
  v13[4] = *(_QWORD *)((char *)a2 + v12 + 32);
  v13[5] = v17;
  v18 = *(_QWORD *)((char *)a2 + v12 + 56);
  v13[6] = *(_QWORD *)((char *)a2 + v12 + 48);
  v13[7] = v18;
  v19 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v20 = *(int *)(v19 + 32);
  v21 = (char *)v13 + v20;
  v40 = &v14[v20];
  v41 = (int *)v19;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  v24(v21, v40, v22);
  v25 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
  v24(&v21[v25], &v40[v25], v22);
  v26 = v41[9];
  v27 = (char *)v13 + v26;
  v28 = &v14[v26];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(&v14[v26], 1, v22))
  {
    v29 = sub_100008EF4(&qword_100105F48);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v24(v27, v28, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v27, 0, 1, v22);
  }
  *((_BYTE *)v13 + v41[10]) = v14[v41[10]];
  *((_BYTE *)v13 + v41[11]) = v14[v41[11]];
  v30 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
  v31 = *(_QWORD *)&v14[v30];
  *(_QWORD *)((char *)v13 + v30) = v31;
  v32 = *(int *)(v42 + 24);
  v33 = (char *)v44 + v32;
  v34 = (char *)v43 + v32;
  *v33 = *v34;
  v35 = *((_QWORD *)v34 + 1);
  v36 = *((_QWORD *)v34 + 2);
  *((_QWORD *)v33 + 1) = v35;
  *((_QWORD *)v33 + 2) = v36;
  v37 = *((_QWORD *)v34 + 3);
  v38 = *((_QWORD *)v34 + 4);
  *((_QWORD *)v33 + 3) = v37;
  *((_QWORD *)v33 + 4) = v38;
  *((_QWORD *)v33 + 5) = *((_QWORD *)v34 + 5);
  v33[48] = v34[48];
  *(_OWORD *)(v33 + 56) = *(_OWORD *)(v34 + 56);
  *((_QWORD *)v33 + 9) = *((_QWORD *)v34 + 9);
  swift_bridgeObjectRetain(v31);
  swift_retain(v35);
  swift_retain(v36);
  swift_retain(v37);
  swift_retain(v38);
  return v44;
}

_QWORD *sub_100038F34(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;

  if (a1 != a2)
  {
    sub_10003928C((uint64_t)a1);
    v6 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v53 = a3;
  v54 = a2;
  v12 = *(int *)(a3 + 20);
  v55 = a1;
  v13 = (char *)a1 + v12;
  v14 = (_QWORD *)((char *)a2 + v12);
  *(_QWORD *)v13 = *(_QWORD *)((char *)a2 + v12);
  v15 = *(_QWORD *)((char *)a2 + v12 + 8);
  v16 = *(_QWORD *)((char *)a1 + v12 + 8);
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *((_QWORD *)v13 + 2) = v14[2];
  v17 = v14[3];
  v18 = *((_QWORD *)v13 + 3);
  *((_QWORD *)v13 + 3) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *((_QWORD *)v13 + 4) = v14[4];
  v19 = v14[5];
  v20 = *((_QWORD *)v13 + 5);
  *((_QWORD *)v13 + 5) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *((_QWORD *)v13 + 6) = v14[6];
  v21 = v14[7];
  v22 = *((_QWORD *)v13 + 7);
  *((_QWORD *)v13 + 7) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v24 = v23[8];
  v25 = &v13[v24];
  v26 = (char *)v14 + v24;
  v27 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(void (**)(char *, char *, uint64_t))(v28 + 24);
  v29(v25, v26, v27);
  v30 = sub_100008EF4(&qword_100105F40);
  v29(&v25[*(int *)(v30 + 36)], &v26[*(int *)(v30 + 36)], v27);
  v31 = v23[9];
  v32 = &v13[v31];
  v33 = (char *)v14 + v31;
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v35 = v34(&v13[v31], 1, v27);
  v36 = v34(v33, 1, v27);
  if (!v35)
  {
    if (!v36)
    {
      v29(v32, v33, v27);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v27);
    goto LABEL_11;
  }
  if (v36)
  {
LABEL_11:
    v37 = sub_100008EF4(&qword_100105F48);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v32, v33, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
LABEL_12:
  v13[v23[10]] = *((_BYTE *)v14 + v23[10]);
  v13[v23[11]] = *((_BYTE *)v14 + v23[11]);
  v38 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
  v39 = *(_QWORD *)&v13[v38];
  v40 = *(_QWORD *)((char *)v14 + v38);
  *(_QWORD *)&v13[v38] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v39);
  v41 = *(int *)(v53 + 24);
  v42 = (char *)v55 + v41;
  v43 = (char *)v54 + v41;
  *v42 = *((_BYTE *)v54 + v41);
  v44 = *(_QWORD *)((char *)v54 + v41 + 8);
  v45 = *(_QWORD *)((char *)v55 + v41 + 8);
  *((_QWORD *)v42 + 1) = v44;
  swift_retain(v44);
  swift_release(v45);
  v46 = *((_QWORD *)v43 + 2);
  v47 = *((_QWORD *)v42 + 2);
  *((_QWORD *)v42 + 2) = v46;
  swift_retain(v46);
  swift_release(v47);
  v48 = *((_QWORD *)v43 + 3);
  v49 = *((_QWORD *)v42 + 3);
  *((_QWORD *)v42 + 3) = v48;
  swift_retain(v48);
  swift_release(v49);
  v50 = *((_QWORD *)v43 + 4);
  v51 = *((_QWORD *)v42 + 4);
  *((_QWORD *)v42 + 4) = v50;
  swift_retain(v50);
  swift_release(v51);
  *((_QWORD *)v42 + 5) = *((_QWORD *)v43 + 5);
  v42[48] = v43[48];
  *((_QWORD *)v42 + 7) = *((_QWORD *)v43 + 7);
  *((_QWORD *)v42 + 8) = *((_QWORD *)v43 + 8);
  *((_QWORD *)v42 + 9) = *((_QWORD *)v43 + 9);
  return v55;
}

uint64_t sub_10003928C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008EF4(&qword_100105F38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1000392CC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v33;

  v6 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v33 = a3;
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_OWORD *)&a2[v8 + 16];
  *(_OWORD *)v9 = *(_OWORD *)&a2[v8];
  *((_OWORD *)v9 + 1) = v11;
  v12 = *(_OWORD *)&a2[v8 + 48];
  *((_OWORD *)v9 + 2) = *(_OWORD *)&a2[v8 + 32];
  *((_OWORD *)v9 + 3) = v12;
  v13 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v14 = v13[8];
  v15 = &v9[v14];
  v16 = &v10[v14];
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v19(v15, v16, v17);
  v20 = sub_100008EF4(&qword_100105F40);
  v19(&v15[*(int *)(v20 + 36)], &v16[*(int *)(v20 + 36)], v17);
  v21 = v13[9];
  v22 = &v9[v21];
  v23 = &v10[v21];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(&v10[v21], 1, v17))
  {
    v24 = sub_100008EF4(&qword_100105F48);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v19(v22, v23, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v22, 0, 1, v17);
  }
  v9[v13[10]] = v10[v13[10]];
  v9[v13[11]] = v10[v13[11]];
  v25 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
  *(_QWORD *)&v9[*(int *)(v25 + 20)] = *(_QWORD *)&v10[*(int *)(v25 + 20)];
  v26 = *(int *)(v33 + 24);
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = *((_OWORD *)v28 + 4);
  v30 = *((_OWORD *)v28 + 2);
  *((_OWORD *)v27 + 3) = *((_OWORD *)v28 + 3);
  *((_OWORD *)v27 + 4) = v29;
  v31 = *((_OWORD *)v28 + 1);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *((_OWORD *)v27 + 1) = v31;
  *((_OWORD *)v27 + 2) = v30;
  return a1;
}

char *sub_1000394C8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  char *v45;
  char *v46;

  if (a1 != a2)
  {
    sub_10003928C((uint64_t)a1);
    v6 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v44 = a3;
  v45 = a2;
  v8 = *(int *)(a3 + 20);
  v46 = a1;
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a2[v8 + 8];
  v12 = *(_QWORD *)&a1[v8 + 8];
  *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *((_QWORD *)v10 + 3);
  v14 = *((_QWORD *)v9 + 3);
  *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
  *((_QWORD *)v9 + 3) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *((_QWORD *)v10 + 5);
  v16 = *((_QWORD *)v9 + 5);
  *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
  *((_QWORD *)v9 + 5) = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *((_QWORD *)v10 + 7);
  v18 = *((_QWORD *)v9 + 7);
  *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
  *((_QWORD *)v9 + 7) = v17;
  swift_bridgeObjectRelease(v18);
  v19 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v20 = v19[8];
  v21 = &v9[v20];
  v22 = &v10[v20];
  v23 = type metadata accessor for Date(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(void (**)(char *, char *, uint64_t))(v24 + 40);
  v25(v21, v22, v23);
  v26 = sub_100008EF4(&qword_100105F40);
  v25(&v21[*(int *)(v26 + 36)], &v22[*(int *)(v26 + 36)], v23);
  v27 = v19[9];
  v28 = &v9[v27];
  v29 = &v10[v27];
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v31 = v30(&v9[v27], 1, v23);
  v32 = v30(v29, 1, v23);
  if (!v31)
  {
    if (!v32)
    {
      v25(v28, v29, v23);
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v23);
    goto LABEL_10;
  }
  if (v32)
  {
LABEL_10:
    v33 = sub_100008EF4(&qword_100105F48);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v28, v29, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v23);
LABEL_11:
  v9[v19[10]] = v10[v19[10]];
  v9[v19[11]] = v10[v19[11]];
  v34 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
  v35 = *(_QWORD *)&v9[v34];
  *(_QWORD *)&v9[v34] = *(_QWORD *)&v10[v34];
  swift_bridgeObjectRelease(v35);
  v36 = *(int *)(v44 + 24);
  v37 = &v46[v36];
  v38 = &v45[v36];
  *v37 = v45[v36];
  v39 = *(_QWORD *)&v46[v36 + 8];
  *((_QWORD *)v37 + 1) = *(_QWORD *)&v45[v36 + 8];
  swift_release(v39);
  v40 = *((_QWORD *)v37 + 2);
  *((_QWORD *)v37 + 2) = *((_QWORD *)v38 + 2);
  swift_release(v40);
  v41 = *((_QWORD *)v37 + 3);
  *((_QWORD *)v37 + 3) = *((_QWORD *)v38 + 3);
  swift_release(v41);
  v42 = *((_QWORD *)v37 + 4);
  *((_QWORD *)v37 + 4) = *((_QWORD *)v38 + 4);
  swift_release(v42);
  *((_QWORD *)v37 + 5) = *((_QWORD *)v38 + 5);
  v37[48] = v38[48];
  *(_OWORD *)(v37 + 56) = *(_OWORD *)(v38 + 56);
  *((_QWORD *)v37 + 9) = *((_QWORD *)v38 + 9);
  return v46;
}

uint64_t sub_1000397AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000397B8);
}

uint64_t sub_1000397B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_100008EF4(&qword_100105F58);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100039868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100039874);
}

uint64_t sub_100039874(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_100008EF4(&qword_100105F58);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SportsWidgetSoccerClockView(uint64_t a1)
{
  return sub_100025CD0(a1, qword_100107960, (uint64_t)&nominal type descriptor for SportsWidgetSoccerClockView);
}

void sub_100039934(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_10000C6C4(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for SportsWidgetSoccerClockViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "P";
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000399C0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2304, 1);
}

uint64_t sub_1000399D0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v2 = v1;
  v4 = sub_100008EF4(&qword_1001079A0);
  __chkstk_darwin(v4);
  v41 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SportsWidgetSoccerClockView(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v34 - v10;
  v12 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000134DC(v2 + *(int *)(v6 + 20), (uint64_t)v14, v15);
  v16 = v2 + *(int *)(v6 + 24);
  v17 = *(_BYTE *)v16;
  v19 = *(_QWORD *)(v16 + 8);
  v18 = *(_QWORD *)(v16 + 16);
  v20 = *(_QWORD *)(v16 + 24);
  v37 = *(_QWORD *)(v16 + 32);
  v40 = *(_QWORD *)(v16 + 40);
  v39 = *(unsigned __int8 *)(v16 + 48);
  v38 = *(_OWORD *)(v16 + 56);
  v21 = *(_QWORD *)(v16 + 72);
  sub_1000134DC(v2, (uint64_t)v11, type metadata accessor for SportsWidgetSoccerClockView);
  sub_1000134DC(v2, (uint64_t)v9, type metadata accessor for SportsWidgetSoccerClockView);
  *a1 = swift_getKeyPath(&unk_1000C8BA8);
  v22 = sub_100008EF4(&qword_100105F38);
  swift_storeEnumTagMultiPayload(a1, v22, 0);
  v23 = (int *)sub_100008EF4(&qword_1001079A8);
  v24 = (_QWORD *)((char *)a1 + v23[9]);
  *v24 = swift_getKeyPath(&unk_1000C8BD8);
  v25 = sub_100008EF4(&qword_1001079B0);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  sub_1000134DC((uint64_t)v14, (uint64_t)a1 + v23[11], type metadata accessor for SportsWidgetGenericClockViewModel);
  v26 = (char *)a1 + v23[10];
  *v26 = v17;
  v35 = v18;
  v36 = v19;
  *((_QWORD *)v26 + 1) = v19;
  *((_QWORD *)v26 + 2) = v18;
  v27 = v18;
  v28 = v37;
  *((_QWORD *)v26 + 3) = v20;
  *((_QWORD *)v26 + 4) = v28;
  *((_QWORD *)v26 + 5) = v40;
  v26[48] = v39;
  *(_OWORD *)(v26 + 56) = v38;
  *((_QWORD *)v26 + 9) = v21;
  v29 = (uint64_t)a1 + v23[12];
  swift_retain_n(v19, 2);
  swift_retain_n(v27, 2);
  swift_retain_n(v20, 2);
  swift_retain_n(v28, 2);
  sub_100039D18((uint64_t)v11, v29);
  v30 = sub_100008EF4(&qword_1001079B8);
  v31 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v31(v29, 0, 1, v30);
  v32 = v41;
  sub_100039F74((uint64_t)v9, v41);
  sub_100013520((uint64_t)v9, type metadata accessor for SportsWidgetSoccerClockView);
  sub_100013520((uint64_t)v11, type metadata accessor for SportsWidgetSoccerClockView);
  swift_release(v28);
  swift_release(v20);
  swift_release(v35);
  swift_release(v36);
  sub_100013520((uint64_t)v14, type metadata accessor for SportsWidgetGenericClockViewModel);
  v31(v32, 0, 1, v30);
  return sub_100013880(v32, (uint64_t)a1 + v23[13], &qword_1001079A0);
}

uint64_t sub_100039D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  int v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v4 = type metadata accessor for Font.TextStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SportsWidgetSoccerClockView(0);
  v9 = a1 + *(int *)(v8 + 20);
  v10 = *(_QWORD *)(v9 + *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20));
  if (v10 && *(_QWORD *)(v10 + 16) == 2)
  {
    v11 = *(_QWORD *)(v10 + 32);
    v12 = (unsigned __int8 *)(a1 + *(int *)(v8 + 24));
    v30 = *v12;
    v13 = *((_QWORD *)v12 + 1);
    v14 = *((_QWORD *)v12 + 2);
    v15 = *((_QWORD *)v12 + 3);
    v16 = *((_QWORD *)v12 + 4);
    v29 = *((_QWORD *)v12 + 5);
    v28 = v12[48];
    v27 = *(_OWORD *)(v12 + 56);
    v17 = *((_QWORD *)v12 + 9);
    swift_bridgeObjectRetain(v11);
    swift_retain(v13);
    swift_retain(v14);
    swift_retain(v15);
    v18 = swift_retain(v16);
    v26 = static HierarchicalShapeStyle.primary.getter(v18);
    v19 = static HierarchicalShapeStyle.tertiary.getter();
    v31 = 0x4014000000000000;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Font.TextStyle.footnote(_:), v4);
    v20 = sub_10003A838();
    ScaledMetric.init(wrappedValue:relativeTo:)(&v31, v7, &type metadata for CGFloat, v20);
    v21 = (int *)type metadata accessor for CompetitorShootoutsView(0);
    v31 = 0x4010000000000000;
    ScaledMetric.init(wrappedValue:)(&v31, &type metadata for CGFloat, v20);
    *(_QWORD *)(a2 + v21[6]) = v11;
    v22 = a2 + v21[7];
    *(_BYTE *)v22 = v30;
    *(_QWORD *)(v22 + 8) = v13;
    *(_QWORD *)(v22 + 16) = v14;
    *(_QWORD *)(v22 + 24) = v15;
    *(_QWORD *)(v22 + 32) = v16;
    *(_QWORD *)(v22 + 40) = v29;
    *(_BYTE *)(v22 + 48) = v28;
    *(_OWORD *)(v22 + 56) = v27;
    *(_QWORD *)(v22 + 72) = v17;
    *(_QWORD *)(v22 + 80) = 0x3FF0000000000000;
    *(_DWORD *)(a2 + v21[8]) = v26;
    *(_DWORD *)(a2 + v21[9]) = v19;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v21 - 1) + 56))(a2, 0, 1, v21);
  }
  else
  {
    v24 = type metadata accessor for CompetitorShootoutsView(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a2, 1, 1, v24);
  }
}

uint64_t sub_100039F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  int v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v4 = type metadata accessor for Font.TextStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SportsWidgetSoccerClockView(0);
  v9 = a1 + *(int *)(v8 + 20);
  v10 = *(_QWORD *)(v9 + *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20));
  if (v10 && *(_QWORD *)(v10 + 16) == 2)
  {
    v11 = *(_QWORD *)(v10 + 40);
    v12 = (unsigned __int8 *)(a1 + *(int *)(v8 + 24));
    v30 = *v12;
    v13 = *((_QWORD *)v12 + 1);
    v14 = *((_QWORD *)v12 + 2);
    v15 = *((_QWORD *)v12 + 3);
    v16 = *((_QWORD *)v12 + 4);
    v29 = *((_QWORD *)v12 + 5);
    v28 = v12[48];
    v27 = *(_OWORD *)(v12 + 56);
    v17 = *((_QWORD *)v12 + 9);
    swift_bridgeObjectRetain(v11);
    swift_retain(v13);
    swift_retain(v14);
    swift_retain(v15);
    v18 = swift_retain(v16);
    v26 = static HierarchicalShapeStyle.primary.getter(v18);
    v19 = static HierarchicalShapeStyle.tertiary.getter();
    v31 = 0x4014000000000000;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Font.TextStyle.footnote(_:), v4);
    v20 = sub_10003A838();
    ScaledMetric.init(wrappedValue:relativeTo:)(&v31, v7, &type metadata for CGFloat, v20);
    v21 = (int *)type metadata accessor for CompetitorShootoutsView(0);
    v31 = 0x4010000000000000;
    ScaledMetric.init(wrappedValue:)(&v31, &type metadata for CGFloat, v20);
    *(_QWORD *)(a2 + v21[6]) = v11;
    v22 = a2 + v21[7];
    *(_BYTE *)v22 = v30;
    *(_QWORD *)(v22 + 8) = v13;
    *(_QWORD *)(v22 + 16) = v14;
    *(_QWORD *)(v22 + 24) = v15;
    *(_QWORD *)(v22 + 32) = v16;
    *(_QWORD *)(v22 + 40) = v29;
    *(_BYTE *)(v22 + 48) = v28;
    *(_OWORD *)(v22 + 56) = v27;
    *(_QWORD *)(v22 + 72) = v17;
    *(_QWORD *)(v22 + 80) = 0x3FF0000000000000;
    *(_DWORD *)(a2 + v21[8]) = v26;
    *(_DWORD *)(a2 + v21[9]) = v19;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v21 - 1) + 56))(a2, 0, 1, v21);
  }
  else
  {
    v24 = type metadata accessor for CompetitorShootoutsView(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a2, 1, 1, v24);
  }
}

uint64_t sub_10003A1D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];

  v3 = type metadata accessor for CompetitorShootoutsView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = sub_100008EF4(&qword_100107A80);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + *(int *)(v3 + 28)) == 2)
    v10 = 0x4004000000000000;
  else
    v10 = 0x4010000000000000;
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v7);
  *((_QWORD *)v9 + 1) = v10;
  v9[16] = 0;
  sub_100008EF4(&qword_100107A88);
  v11 = *(_QWORD *)(*(_QWORD *)(v1 + *(int *)(v3 + 24)) + 16);
  v21[0] = 0;
  v21[1] = v11;
  KeyPath = swift_getKeyPath(&unk_1000C8C98);
  sub_1000134DC(v1, (uint64_t)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CompetitorShootoutsView);
  v13 = *(unsigned __int8 *)(v4 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_1000FA1C0, v14 + v5, v13 | 7);
  sub_10003B150((uint64_t)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14);
  v16 = sub_100008EF4(&qword_100107A90);
  v17 = sub_100008EF4(&qword_100107A98);
  v18 = sub_10003B1E0();
  v19 = sub_10003B290();
  ForEach<>.init(_:id:content:)(v21, KeyPath, sub_10003B194, v15, v16, v17, v18, &protocol witness table for Int, v19);
  return sub_100013880((uint64_t)v9, a1, &qword_100107A80);
}

int *sub_10003A3A4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v5;
  int *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  _BYTE v35[128];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  unsigned __int8 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[48];
  __int128 v54;
  _OWORD v55[2];

  v5 = *a1;
  result = (int *)type metadata accessor for CompetitorShootoutsView(0);
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + result[6]);
    if (v5 < *(_QWORD *)(v7 + 16))
    {
      v8 = *(unsigned __int8 *)(v7 + v5 + 32);
      if (v8)
      {
        if (v8 == 1)
        {
          sub_10003A6B8((uint64_t)&v51);
          v36 = v51;
          v37 = v52;
          v38 = *(_OWORD *)v53;
          LOWORD(v39) = *(_WORD *)&v53[16];
          v40 = *(_OWORD *)&v53[24];
          v41 = *(_QWORD *)&v53[40];
          v42 = v54;
          v43 = *((_QWORD *)&v54 + 1);
          v44 = v55[0];
          v45 = *(_OWORD *)((char *)v55 + 8);
          sub_10003B468((uint64_t)&v36);
LABEL_9:
          sub_100013880((uint64_t)&v36, (uint64_t)v35, &qword_100107B08);
          v23 = sub_100008EF4(&qword_100107AC0);
          v24 = sub_100008EF4(&qword_100107AF0);
          v25 = sub_10003B2FC();
          v26 = sub_10003B3E4();
          result = (int *)_ConditionalContent<>.init(storage:)(v35, v23, v24, v25, v26);
          v27 = v54;
          a3[4] = *(_OWORD *)&v53[32];
          a3[5] = v27;
          a3[6] = v55[0];
          *(_OWORD *)((char *)a3 + 105) = *(_OWORD *)((char *)v55 + 9);
          v28 = v52;
          *a3 = v51;
          a3[1] = v28;
          v29 = *(_OWORD *)&v53[16];
          a3[2] = *(_OWORD *)v53;
          a3[3] = v29;
          return result;
        }
        v15 = *(unsigned int *)(a2 + result[8]);
        sub_100008EF4(&qword_1001079C8);
        ScaledMetric.wrappedValue.getter(&v51);
        v16 = v51;
        v17 = ScaledMetric.wrappedValue.getter(&v51);
        v18 = v51;
        v19 = static Alignment.center.getter(v17);
        _FrameLayout.init(width:height:alignment:)(&v46, v16, 0, v18, 0, v19, v20);
        *(_QWORD *)&v51 = v15 | 0x10000000000;
        *((_QWORD *)&v51 + 1) = v46;
        *(_QWORD *)&v52 = v47;
        *((_QWORD *)&v52 + 1) = v48;
        *(_QWORD *)v53 = v49;
        *(_OWORD *)&v53[8] = v50;
        v53[24] = 1;
      }
      else
      {
        v9 = *(unsigned int *)(a2 + result[9]);
        sub_100008EF4(&qword_1001079C8);
        ScaledMetric.wrappedValue.getter(&v51);
        v10 = v51;
        v11 = ScaledMetric.wrappedValue.getter(&v51);
        v12 = v51;
        v13 = static Alignment.center.getter(v11);
        _FrameLayout.init(width:height:alignment:)(&v46, v10, 0, v12, 0, v13, v14);
        *(_QWORD *)&v51 = v9 | 0x10000000000;
        *((_QWORD *)&v51 + 1) = v46;
        *(_QWORD *)&v52 = v47;
        *((_QWORD *)&v52 + 1) = v48;
        *(_QWORD *)v53 = v49;
        *(_OWORD *)&v53[8] = v50;
        v53[24] = 0;
      }
      v21 = sub_100008EF4(&qword_100107AD0);
      v22 = sub_10003B360();
      _ConditionalContent<>.init(storage:)(&v51, v21, v21, v22, v22);
      v36 = v30;
      v37 = v31;
      v38 = v32;
      v39 = v33;
      LOBYTE(v40) = v34;
      sub_10003B474((uint64_t)&v36);
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

double sub_10003A6B8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  double result;
  _QWORD v23[5];
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  __int128 v28;

  v3 = type metadata accessor for CompetitorShootoutsView(0);
  v4 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v23, 0, 0, &_swiftEmptyArrayStorage, *(double *)(v1 + *(int *)(v3 + 28) + 80), 10.0, 0.0);
  v5 = *(double *)v23;
  v6 = v23[1];
  v7 = v23[2];
  v8 = v23[3];
  v9 = v23[4];
  v10 = static Alignment.center.getter(v4);
  v12 = v11;
  sub_100008EF4(&qword_1001079C8);
  ScaledMetric.wrappedValue.getter(&v24);
  v13 = v24;
  v14 = ScaledMetric.wrappedValue.getter(&v24);
  v15 = v24;
  v16 = static Alignment.center.getter(v14);
  _FrameLayout.init(width:height:alignment:)(&v24, v13, 0, v15, 0, v16, v17);
  v18 = v24;
  v19 = v25;
  v20 = v26;
  v21 = v27;
  *(double *)a1 = v5 * 0.5;
  *(double *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_WORD *)(a1 + 48) = 256;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v18;
  *(_BYTE *)(a1 + 80) = v19;
  *(_QWORD *)(a1 + 88) = v20;
  *(_BYTE *)(a1 + 96) = v21;
  result = *(double *)&v28;
  *(_OWORD *)(a1 + 104) = v28;
  return result;
}

uint64_t type metadata accessor for CompetitorShootoutsView(uint64_t a1)
{
  return sub_100025CD0(a1, (uint64_t *)&unk_100107A28, (uint64_t)&nominal type descriptor for CompetitorShootoutsView);
}

unint64_t sub_10003A838()
{
  unint64_t result;

  result = qword_1001079C0;
  if (!qword_1001079C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1001079C0);
  }
  return result;
}

uint64_t *sub_10003A87C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100008EF4(&qword_1001079C8);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(v4, a2, v7);
    v8((uint64_t *)((char *)v4 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)v4 + v9) = v11;
    v12 = (char *)v4 + v10;
    v13 = (char *)a2 + v10;
    *v12 = *v13;
    v14 = *((_QWORD *)v13 + 1);
    v15 = *((_QWORD *)v13 + 2);
    *((_QWORD *)v12 + 1) = v14;
    *((_QWORD *)v12 + 2) = v15;
    v17 = *((_QWORD *)v13 + 3);
    v16 = *((_QWORD *)v13 + 4);
    *((_QWORD *)v12 + 3) = v17;
    *((_QWORD *)v12 + 4) = v16;
    *((_QWORD *)v12 + 5) = *((_QWORD *)v13 + 5);
    v12[48] = v13[48];
    *(_OWORD *)(v12 + 56) = *(_OWORD *)(v13 + 56);
    *(_OWORD *)(v12 + 72) = *(_OWORD *)(v13 + 72);
    v18 = a3[9];
    *(_DWORD *)((char *)v4 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
    *(_DWORD *)((char *)v4 + v18) = *(_DWORD *)((char *)a2 + v18);
    swift_bridgeObjectRetain(v11);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v17);
  }
  swift_retain(v16);
  return v4;
}

uint64_t sub_10003A9A4(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;

  v4 = sub_100008EF4(&qword_1001079C8);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6]));
  v6 = (_QWORD *)(a1 + a2[7]);
  swift_release(v6[1]);
  swift_release(v6[2]);
  swift_release(v6[3]);
  return swift_release(v6[4]);
}

uint64_t sub_10003AA30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_100008EF4(&qword_1001079C8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_BYTE *)v11 = *(_BYTE *)v12;
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(v11 + 8) = v13;
  *(_QWORD *)(v11 + 16) = v14;
  v15 = *(_QWORD *)(v12 + 24);
  v16 = *(_QWORD *)(v12 + 32);
  *(_QWORD *)(v11 + 24) = v15;
  *(_QWORD *)(v11 + 32) = v16;
  *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
  *(_BYTE *)(v11 + 48) = *(_BYTE *)(v12 + 48);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v12 + 56);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(v12 + 72);
  v17 = a3[9];
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  *(_DWORD *)(a1 + v17) = *(_DWORD *)(a2 + v17);
  swift_bridgeObjectRetain(v10);
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v15);
  swift_retain(v16);
  return a1;
}

uint64_t sub_10003AB30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_100008EF4(&qword_1001079C8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)v12 = *(_BYTE *)(a2 + v11);
  v14 = *(_QWORD *)(a2 + v11 + 8);
  v15 = *(_QWORD *)(a1 + v11 + 8);
  *(_QWORD *)(v12 + 8) = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(v12 + 16) = v16;
  swift_retain(v16);
  swift_release(v17);
  v18 = *(_QWORD *)(v13 + 24);
  v19 = *(_QWORD *)(v12 + 24);
  *(_QWORD *)(v12 + 24) = v18;
  swift_retain(v18);
  swift_release(v19);
  v20 = *(_QWORD *)(v13 + 32);
  v21 = *(_QWORD *)(v12 + 32);
  *(_QWORD *)(v12 + 32) = v20;
  swift_retain(v20);
  swift_release(v21);
  *(_QWORD *)(v12 + 40) = *(_QWORD *)(v13 + 40);
  *(_BYTE *)(v12 + 48) = *(_BYTE *)(v13 + 48);
  *(_QWORD *)(v12 + 56) = *(_QWORD *)(v13 + 56);
  *(_QWORD *)(v12 + 64) = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v12 + 72) = *(_QWORD *)(v13 + 72);
  *(_QWORD *)(v12 + 80) = *(_QWORD *)(v13 + 80);
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10003AC7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v6 = sub_100008EF4(&qword_1001079C8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 80) = *(_QWORD *)(v10 + 80);
  v12 = *(_OWORD *)(v10 + 64);
  v13 = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 64) = v12;
  *(_OWORD *)(v9 + 32) = v13;
  v14 = a3[9];
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  *(_DWORD *)(a1 + v14) = *(_DWORD *)(a2 + v14);
  return a1;
}

uint64_t sub_10003AD38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_100008EF4(&qword_1001079C8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_BYTE *)v11 = *(_BYTE *)(a2 + v10);
  v13 = *(_QWORD *)(a1 + v10 + 8);
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(a2 + v10 + 8);
  swift_release(v13);
  v14 = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
  swift_release(v14);
  v15 = *(_QWORD *)(v11 + 24);
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
  swift_release(v15);
  v16 = *(_QWORD *)(v11 + 32);
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
  swift_release(v16);
  *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
  *(_BYTE *)(v11 + 48) = *(_BYTE *)(v12 + 48);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v12 + 56);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(v12 + 72);
  v17 = a3[9];
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  *(_DWORD *)(a1 + v17) = *(_DWORD *)(a2 + v17);
  return a1;
}

uint64_t sub_10003AE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003AE54);
}

uint64_t sub_10003AE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100008EF4(&qword_1001079C8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10003AED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003AEE0);
}

uint64_t sub_10003AEE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100008EF4(&qword_1001079C8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void sub_10003AF5C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  sub_10003AFEC(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = "X";
    v4[4] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int32 + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

void sub_10003AFEC(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100107A38)
  {
    v2 = sub_10003A838();
    v3 = type metadata accessor for ScaledMetric(a1, &type metadata for CGFloat, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100107A38);
  }
}

uint64_t sub_10003B044()
{
  return sub_100013840(&qword_100107A78, &qword_1001079A8, (uint64_t)&unk_1000CB2B8);
}

uint64_t sub_10003B070(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D232C, 1);
}

uint64_t sub_10003B080()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;

  v1 = (int *)type metadata accessor for CompetitorShootoutsView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = sub_100008EF4(&qword_1001079C8);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6]));
  v10 = (_QWORD *)(v7 + v1[7]);
  swift_release(v10[1]);
  swift_release(v10[2]);
  swift_release(v10[3]);
  swift_release(v10[4]);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10003B150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CompetitorShootoutsView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

int *sub_10003B194@<X0>(unint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CompetitorShootoutsView(0) - 8) + 80);
  return sub_10003A3A4(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_10003B1E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100107AA0;
  if (!qword_100107AA0)
  {
    v1 = sub_100008F80(&qword_100107A90);
    sub_10003B24C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100107AA0);
  }
  return result;
}

unint64_t sub_10003B24C()
{
  unint64_t result;

  result = qword_100107AA8;
  if (!qword_100107AA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100107AA8);
  }
  return result;
}

unint64_t sub_10003B290()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100107AB0;
  if (!qword_100107AB0)
  {
    v1 = sub_100008F80(&qword_100107A98);
    sub_10003B2FC();
    sub_10003B3E4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100107AB0);
  }
  return result;
}

unint64_t sub_10003B2FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100107AB8;
  if (!qword_100107AB8)
  {
    v1 = sub_100008F80(&qword_100107AC0);
    sub_10003B360();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100107AB8);
  }
  return result;
}

unint64_t sub_10003B360()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100107AC8;
  if (!qword_100107AC8)
  {
    v1 = sub_100008F80(&qword_100107AD0);
    sub_100013840(&qword_100107AD8, &qword_100107AE0, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100107AC8);
  }
  return result;
}

unint64_t sub_10003B3E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100107AE8;
  if (!qword_100107AE8)
  {
    v1 = sub_100008F80(&qword_100107AF0);
    sub_100013840(&qword_100107AF8, &qword_100107B00, (uint64_t)&protocol conformance descriptor for StrokeBorderShapeView<A, B, C>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100107AE8);
  }
  return result;
}

uint64_t sub_10003B468(uint64_t result)
{
  *(_BYTE *)(result + 120) = 1;
  return result;
}

uint64_t sub_10003B474(uint64_t result)
{
  *(_BYTE *)(result + 120) = 0;
  return result;
}

uint64_t sub_10003B47C()
{
  return sub_100013840(&qword_100107B10, &qword_100107A80, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

double sub_10003B4A8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v2 = Color.init(hex:)(0x334133413341uLL, 0xE600000000000000);
  if (!v2)
    v2 = static Color.gray.getter();
  v3 = v2;
  v4 = Color.init(hex:)(0x433341334133uLL, 0xE600000000000000);
  if (!v4)
    v4 = static Color.gray.getter();
  v5 = v4;
  v6 = Color.init(hex:)(0x413141314131uLL, 0xE600000000000000);
  *(_OWORD *)a1 = xmmword_1000C8CB0;
  *(_OWORD *)(a1 + 16) = xmmword_1000C8CC0;
  result = 2.0;
  *(_OWORD *)(a1 + 32) = xmmword_1000C8CD0;
  *(_OWORD *)(a1 + 48) = xmmword_1000C8CE0;
  *(_QWORD *)(a1 + 64) = 0x4008000000000000;
  *(_QWORD *)(a1 + 72) = v3;
  *(_QWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 88) = v6;
  return result;
}

uint64_t destroy for SportsWidgetStaleViewLayout(_QWORD *a1)
{
  swift_release(a1[9]);
  swift_release(a1[10]);
  return swift_release(a1[11]);
}

uint64_t initializeWithCopy for SportsWidgetStaleViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v3;
  *(_QWORD *)(a1 + 80) = v4;
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

_QWORD *assignWithCopy for SportsWidgetStaleViewLayout(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v4 = a2[9];
  v5 = a1[9];
  a1[9] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[10];
  v7 = a1[10];
  a1[10] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[11];
  v9 = a2[11];
  a1[11] = v9;
  swift_retain(v9);
  swift_release(v8);
  return a1;
}

uint64_t assignWithTake for SportsWidgetStaleViewLayout(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release(*(_QWORD *)(a1 + 72));
  v6 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetStaleViewLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetStaleViewLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetStaleViewLayout()
{
  return &type metadata for SportsWidgetStaleViewLayout;
}

unint64_t sub_10003B7CC()
{
  unint64_t result;

  result = qword_100107B18;
  if (!qword_100107B18)
  {
    result = swift_getWitnessTable(&unk_1000C8DA0, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100107B18);
  }
  return result;
}

uint64_t sub_10003B810()
{
  return sub_100013840(&qword_100107B20, &qword_100107B28, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

void sub_10003B83C()
{
  qword_10011EDC0 = (uint64_t)&off_1000F6C00;
}

uint64_t sub_10003B850()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011EDC8);
  sub_10000909C(v16, (uint64_t)qword_10011EDC8);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001000BFDA0);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_10003BA78()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000905C(v0, qword_10011EDE0);
  sub_10000909C(v0, (uint64_t)qword_10011EDE0);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000026, 0x80000001000BFEF0);
}

uint64_t sub_10003BAD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008EF4(&qword_100106608);
  sub_10000905C(v0, qword_10011EDF8);
  v1 = sub_10000909C(v0, (uint64_t)qword_10011EDF8);
  IntentDescription.init(stringLiteral:)(0xD000000000000053, 0x80000001000BFE90);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_10003BB60()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1000C9358);
  qword_10011EE10 = result;
  return result;
}

uint64_t sub_10003BB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[15] = a2;
  v3[16] = a3;
  v3[14] = a1;
  return swift_task_switch(sub_10003BBA0, 0, 0);
}

uint64_t sub_10003BBA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 56) = v2;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 226));
  *(_BYTE *)(v0 + 225) = *(_BYTE *)(v0 + 226);
  if (qword_100105CB0 != -1)
    swift_once(&qword_100105CB0, sub_10003BB60);
  v3 = qword_10011EE10;
  *(_QWORD *)(v0 + 152) = qword_10011EE10;
  v4 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v3);
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 160) = v5;
  v6 = sub_100013840(&qword_100107CE0, &qword_100107CE8, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 168) = v6;
  *v5 = v0;
  v5[1] = sub_10003BCA8;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 225, v3, &type metadata for Bool, v6);
}

uint64_t sub_10003BCA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v6 = sub_100017850;
  else
    v6 = sub_10003BD30;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10003BD30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  IntentParameter.wrappedValue.getter(v0 + 11);
  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[13];
  v0[23] = v2;
  v0[24] = v3;
  v0[8] = v1;
  v0[9] = v2;
  v0[10] = v3;
  v4 = qword_10011EE10;
  v0[25] = qword_10011EE10;
  v5 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain(v4);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[26] = v6;
  *v6 = v0;
  v6[1] = sub_100017770;
  return AppEntity._value<A, B>(for:)(v0 + 28, v4, v0[21]);
}

double sub_10003BDD0()
{
  double result;

  if (qword_100105CB0 != -1)
    swift_once(&qword_100105CB0, sub_10003BB60);
  *(_QWORD *)&result = swift_retain(qword_10011EE10).n128_u64[0];
  return result;
}

unint64_t sub_10003BE14()
{
  unint64_t result;

  result = qword_100107B30;
  if (!qword_100107B30)
  {
    result = swift_getWitnessTable(&unk_1000C8E30, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100107B30);
  }
  return result;
}

unint64_t sub_10003BE5C()
{
  unint64_t result;

  result = qword_100107B38;
  if (!qword_100107B38)
  {
    result = swift_getWitnessTable(&unk_1000C8E58, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100107B38);
  }
  return result;
}

uint64_t sub_10003BEA0(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000D23C4, 1) + 8);
}

uint64_t sub_10003BEC4(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10003B7CC();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10003BF04@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105CA0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10011EDE0, (uint64_t)sub_10003BA78, a1);
}

uint64_t sub_10003BF28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100105CA8 != -1)
    swift_once(&qword_100105CA8, sub_10003BAD8);
  v2 = sub_100008EF4(&qword_100106608);
  v3 = sub_10000909C(v2, (uint64_t)qword_10011EDF8);
  return sub_100016518(v3, a1);
}

uint64_t sub_10003BF88(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_100107CFC);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_1000145D8;
  *(_OWORD *)(v4 + 120) = *v1;
  *(_QWORD *)(v4 + 112) = a1;
  return swift_task_switch(sub_10003BBA0, 0, 0);
}

uint64_t sub_10003BFF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10003CFD0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_10003C014()
{
  return 0xD000000000000044;
}

unint64_t sub_10003C034()
{
  unint64_t result;

  result = qword_100107B48;
  if (!qword_100107B48)
  {
    result = swift_getWitnessTable(&unk_1000C8EB4, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100107B48);
  }
  return result;
}

unint64_t sub_10003C07C()
{
  unint64_t result;

  result = qword_100107B50;
  if (!qword_100107B50)
  {
    result = swift_getWitnessTable(&unk_1000C9324, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity);
    atomic_store(result, (unint64_t *)&qword_100107B50);
  }
  return result;
}

uint64_t sub_10003C0C0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10003C0D8, 0, 0);
}

uint64_t sub_10003C0D8()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = sub_1000776BC() & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C130(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_10003C14C, 0, 0);
}

uint64_t sub_10003C14C()
{
  uint64_t v0;

  sub_10007882C(*(_BYTE *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C198(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10003C1B0, 0, 0);
}

uint64_t sub_10003C1B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(v0 + 16);
  *v1 = sub_10003D2F8();
  v1[1] = v2;
  v1[2] = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10003C1F0()
{
  unint64_t result;

  result = qword_100107B60;
  if (!qword_100107B60)
  {
    result = swift_getWitnessTable(&unk_1000C8EEC, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100107B60);
  }
  return result;
}

uint64_t sub_10003C234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10003CA88();
  *v4 = v2;
  v4[1] = sub_100014BF8;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_10003C2A0()
{
  unint64_t result;

  result = qword_100107B70;
  if (!qword_100107B70)
  {
    result = swift_getWitnessTable(&unk_1000C8F44, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100107B70);
  }
  return result;
}

unint64_t sub_10003C2E8()
{
  unint64_t result;

  result = qword_100107B78;
  if (!qword_100107B78)
  {
    result = swift_getWitnessTable(&unk_1000C8FA4, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100107B78);
  }
  return result;
}

unint64_t sub_10003C330()
{
  unint64_t result;

  result = qword_100107B80[0];
  if (!qword_100107B80[0])
  {
    result = swift_getWitnessTable(&unk_1000C92CC, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity);
    atomic_store(result, qword_100107B80);
  }
  return result;
}

uint64_t sub_10003C374(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10003CA88();
  *v5 = v2;
  v5[1] = sub_100014D9C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_10003C3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10003CA88();
  *v4 = v2;
  v4[1] = sub_100016564;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_10003C44C()
{
  unint64_t result;

  result = qword_100107B98;
  if (!qword_100107B98)
  {
    result = swift_getWitnessTable(&unk_1000C8FCC, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100107B98);
  }
  return result;
}

unint64_t sub_10003C494()
{
  unint64_t result;

  result = qword_100107BA0;
  if (!qword_100107BA0)
  {
    result = swift_getWitnessTable(&unk_1000C9274, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity);
    atomic_store(result, (unint64_t *)&qword_100107BA0);
  }
  return result;
}

unint64_t sub_10003C4DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100107BA8;
  if (!qword_100107BA8)
  {
    v1 = sub_100008F80(qword_100107BB0);
    sub_10003C494();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100107BA8);
  }
  return result;
}

uint64_t sub_10003C540(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10003C1F0();
  *v5 = v2;
  v5[1] = sub_100016560;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity.Query()
{
  return &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity.Query;
}

ValueMetadata *type metadata accessor for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity()
{
  return &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity;
}

ValueMetadata *type metadata accessor for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity.UpdateIntent_value()
{
  return &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity.UpdateIntent_value;
}

uint64_t sub_10003C5E0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10003C8D4();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100015960(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_10003C628@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105C98, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10011EDC8, (uint64_t)sub_10003B850, a1);
}

uint64_t sub_10003C64C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003C330();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10003C684(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003C07C();
  return _UniqueEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_10003C6BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003C740();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10003C6F8()
{
  unint64_t result;

  result = qword_100107BC8;
  if (!qword_100107BC8)
  {
    result = swift_getWitnessTable(&unk_1000C9064, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity);
    atomic_store(result, (unint64_t *)&qword_100107BC8);
  }
  return result;
}

unint64_t sub_10003C740()
{
  unint64_t result;

  result = qword_100107BD8;
  if (!qword_100107BD8)
  {
    result = swift_getWitnessTable(&unk_1000C908C, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity);
    atomic_store(result, (unint64_t *)&qword_100107BD8);
  }
  return result;
}

unint64_t sub_10003C788()
{
  unint64_t result;

  result = qword_100107BE0;
  if (!qword_100107BE0)
  {
    result = swift_getWitnessTable(&unk_1000C90BC, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity);
    atomic_store(result, (unint64_t *)&qword_100107BE0);
  }
  return result;
}

unint64_t sub_10003C7D0()
{
  unint64_t result;

  result = qword_100107BE8;
  if (!qword_100107BE8)
  {
    result = swift_getWitnessTable(&unk_1000C90E4, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity);
    atomic_store(result, (unint64_t *)&qword_100107BE8);
  }
  return result;
}

unint64_t sub_10003C818()
{
  unint64_t result;

  result = qword_100107BF0;
  if (!qword_100107BF0)
  {
    result = swift_getWitnessTable(&unk_1000C910C, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity);
    atomic_store(result, (unint64_t *)&qword_100107BF0);
  }
  return result;
}

unint64_t sub_10003C85C(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_10003C890();
  a1[2] = sub_10003C8D4();
  result = sub_10003C07C();
  a1[3] = result;
  return result;
}

unint64_t sub_10003C890()
{
  unint64_t result;

  result = qword_100107C40;
  if (!qword_100107C40)
  {
    result = swift_getWitnessTable(&unk_1000C920C, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity);
    atomic_store(result, (unint64_t *)&qword_100107C40);
  }
  return result;
}

unint64_t sub_10003C8D4()
{
  unint64_t result;

  result = qword_100107C48;
  if (!qword_100107C48)
  {
    result = swift_getWitnessTable(&unk_1000C91D4, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity);
    atomic_store(result, (unint64_t *)&qword_100107C48);
  }
  return result;
}

unint64_t sub_10003C918(uint64_t a1)
{
  unint64_t result;

  result = sub_10003C93C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003C93C()
{
  unint64_t result;

  result = qword_100107C90;
  if (!qword_100107C90)
  {
    result = swift_getWitnessTable(&unk_1000C923C, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity);
    atomic_store(result, (unint64_t *)&qword_100107C90);
  }
  return result;
}

uint64_t sub_10003C980()
{
  return sub_100013840(&qword_100107C98, &qword_100107CA0, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

unint64_t sub_10003C9B0()
{
  unint64_t result;

  result = qword_100107CA8;
  if (!qword_100107CA8)
  {
    result = swift_getWitnessTable(&unk_1000C919C, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity);
    atomic_store(result, (unint64_t *)&qword_100107CA8);
  }
  return result;
}

unint64_t sub_10003C9F8()
{
  unint64_t result;

  result = qword_100107CB0;
  if (!qword_100107CB0)
  {
    result = swift_getWitnessTable(&unk_1000C916C, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity);
    atomic_store(result, (unint64_t *)&qword_100107CB0);
  }
  return result;
}

unint64_t sub_10003CA40()
{
  unint64_t result;

  result = qword_100107CB8;
  if (!qword_100107CB8)
  {
    result = swift_getWitnessTable(&unk_1000C9134, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity);
    atomic_store(result, (unint64_t *)&qword_100107CB8);
  }
  return result;
}

unint64_t sub_10003CA88()
{
  unint64_t result;

  result = qword_100107CC0;
  if (!qword_100107CC0)
  {
    result = swift_getWitnessTable(&unk_1000C8E74, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100107CC0);
  }
  return result;
}

uint64_t sub_10003CACC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  unint64_t v52;
  _QWORD v53[2];
  unint64_t v54;
  unint64_t v55;

  v49 = a1;
  v1 = sub_100008EF4(&qword_100106888);
  v42 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100106890);
  v5 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  v44 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008EF4(&qword_100106898);
  v9 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  v46 = v9;
  __chkstk_darwin(v8);
  v40 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008EF4(&qword_1001068A0);
  v12 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  v48 = v12;
  __chkstk_darwin(v11);
  v41 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v50, "com.apple.tv.");
  HIWORD(v50[1]) = -4864;
  v54 = (unint64_t)&type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesWidget;
  v14 = sub_100008EF4(&qword_100107D58);
  v15._countAndFlagsBits = String.init<A>(describing:)(&v54, v14);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17 = v50[0];
  v18 = v50[1];
  KeyPath = swift_getKeyPath(&unk_1000C9358);
  v20 = sub_100008EF4(&qword_1001068B0);
  v21 = sub_10003C07C();
  v22 = sub_100013840(&qword_1001068B8, &qword_1001068B0, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  ControlToggle.init<A, B, C, D, E, F>(kind:intentUpdatableProperty:content:value:)(v17, v18, KeyPath, sub_10003CF0C, 0, sub_100018B14, 0, v20, &type metadata for Text, v21, v22, &protocol witness table for Text);
  v50[0] = &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesWidget;
  v23 = String.init<A>(describing:)(v50, v14);
  v25 = v24;
  v50[0] = v23;
  v50[1] = v24;
  v54 = 0x746567646957;
  v55 = 0xE600000000000000;
  v53[0] = 0x656C67676F54;
  v53[1] = 0xE600000000000000;
  v26 = sub_100013080();
  v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v54, v53, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v26, v26, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v25);
  v50[0] = v27;
  v50[1] = v29;
  v30 = sub_100013840(&qword_1001068C0, &qword_100106888, (uint64_t)&protocol conformance descriptor for ControlToggle<A>);
  WidgetConfiguration.configurationDisplayName<A>(_:)(v50, v1, &type metadata for String, v30, v26);
  swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v3, v1);
  v54 = 0xD000000000000040;
  v55 = 0x80000001000BFF20;
  v50[0] = v1;
  v50[1] = &type metadata for String;
  v51 = v30;
  v52 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v32 = v40;
  v33 = v43;
  WidgetConfiguration.description<A>(_:)(&v54, v43, &type metadata for String, OpaqueTypeConformance2, v26);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v33);
  v50[0] = v33;
  v50[1] = &type metadata for String;
  v51 = OpaqueTypeConformance2;
  v52 = v26;
  v34 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v35 = v41;
  v36 = v45;
  WidgetConfiguration.disablesControlStateCaching()(v45, v34);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v36);
  v50[0] = v36;
  v50[1] = v34;
  v37 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v38 = v47;
  WidgetConfiguration.hiddenControl()(v47, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v35, v38);
}

uint64_t sub_10003CF0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  _QWORD v8[2];

  v2 = sub_100008EF4(&qword_1001068B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[0] = 0xD000000000000015;
  v8[1] = 0x80000001000BFF70;
  v6 = sub_100013080();
  Label<>.init<A>(_:systemImage:)(v8, 1918985575, 0xE400000000000000, &type metadata for String, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
}

uint64_t sub_10003CFD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD v33[3];

  v0 = sub_100008EF4(&qword_100106808);
  __chkstk_darwin(v0);
  v32 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for InputConnectionBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v31 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_1001065E0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  v30 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008EF4(&qword_100107CF0);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000029, 0x80000001000BFE10);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v29(v13, 1, 1, v14);
  v18 = type metadata accessor for IntentDialog(0);
  memset(v33, 0, sizeof(v33));
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v10, 1, 1, v18);
  v19(v8, 1, 1, v18);
  v20 = enum case for InputConnectionBehavior.default(_:);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v21 = v31;
  v28(v31, enum case for InputConnectionBehavior.default(_:), v2);
  v22 = sub_10003C330();
  v27 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v17, v13, v33, v10, v8, v21, v22);
  sub_100008EF4(&qword_100106818);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000004CLL, 0x80000001000BFE40);
  v29(v13, 1, 1, v30);
  LOBYTE(v33[0]) = 2;
  v23 = type metadata accessor for Bool.IntentDisplayName(0);
  v24 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v32, 1, 1, v23);
  v19(v10, 1, 1, v18);
  v28(v21, v20, v2);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v17, v13, v33, v24, v10, v21);
  return v27;
}

uint64_t sub_10003D2F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  ValueMetadata *v19;

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity;
  v13 = sub_100008EF4(&qword_100107CC8);
  v14 = String.init<A>(describing:)(&v19, v13);
  sub_100008EF4(&qword_100107B28);
  v15 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001000BFDA0);
  static Locale.current.getter(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0xD000000000000012, 0x80000001000BF530, v6, v3, 0, 0, 256);
  v16 = sub_100013840(&qword_100107CE0, &qword_100107CE8, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v12, &unk_100107CD0, 0, &unk_100107CD8, 0, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity.UpdateIntent_value, v16);
  return v14;
}

double sub_10003D524@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for TVSettingsDownloadUseDefaultSubtitleLanguagesWidget()
{
  return &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesWidget;
}

uint64_t sub_10003D540(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2414, 1);
}

unint64_t sub_10003D550(uint64_t a1)
{
  unint64_t result;

  result = sub_10003D574();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003D574()
{
  unint64_t result;

  result = qword_100107D48;
  if (!qword_100107D48)
  {
    result = swift_getWitnessTable(&unk_1000C93B4, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesWidget);
    atomic_store(result, (unint64_t *)&qword_100107D48);
  }
  return result;
}

unint64_t sub_10003D5B8(uint64_t a1)
{
  unint64_t result;

  result = sub_10003D5DC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003D5DC()
{
  unint64_t result;

  result = qword_100107D50;
  if (!qword_100107D50)
  {
    result = swift_getWitnessTable(&unk_1000C93F4, &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesWidget);
    atomic_store(result, (unint64_t *)&qword_100107D50);
  }
  return result;
}

uint64_t *sub_10003D620(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = a3[7];
    v13 = *(uint64_t *)((char *)a2 + v11);
    *(uint64_t *)((char *)v4 + v11) = v13;
    v14 = (char *)v4 + v12;
    v15 = (char *)a2 + v12;
    v16 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v16;
    v14[32] = v15[32];
    *((_DWORD *)v14 + 9) = *((_DWORD *)v15 + 9);
    v17 = *((_QWORD *)v15 + 5);
    *((_QWORD *)v14 + 5) = v17;
    *((_OWORD *)v14 + 3) = *((_OWORD *)v15 + 3);
    v14[64] = v15[64];
    *((_QWORD *)v14 + 9) = *((_QWORD *)v15 + 9);
    v14[80] = v15[80];
    v14[81] = v15[81];
    v14[82] = v15[82];
    *((_QWORD *)v14 + 11) = *((_QWORD *)v15 + 11);
    swift_retain(v13);
  }
  swift_retain(v17);
  return v4;
}

uint64_t sub_10003D72C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release(*(_QWORD *)(a1 + a2[6]));
  return swift_release(*(_QWORD *)(a1 + a2[7] + 40));
}

_BYTE *sub_10003D790(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = *(_QWORD *)&a2[v10];
  *(_QWORD *)&a1[v10] = v12;
  v13 = &a1[v11];
  v14 = &a2[v11];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  v13[32] = v14[32];
  *((_DWORD *)v13 + 9) = *((_DWORD *)v14 + 9);
  v16 = *((_QWORD *)v14 + 5);
  *((_QWORD *)v13 + 5) = v16;
  *((_OWORD *)v13 + 3) = *((_OWORD *)v14 + 3);
  v13[64] = v14[64];
  *((_QWORD *)v13 + 9) = *((_QWORD *)v14 + 9);
  v13[80] = v14[80];
  v13[81] = v14[81];
  v13[82] = v14[82];
  *((_QWORD *)v13 + 11) = *((_QWORD *)v14 + 11);
  swift_retain(v12);
  swift_retain(v16);
  return a1;
}

_BYTE *sub_10003D874(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(_QWORD *)&a2[v10];
  v12 = *(_QWORD *)&a1[v10];
  *(_QWORD *)&a1[v10] = v11;
  swift_retain(v11);
  swift_release(v12);
  v13 = a3[7];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
  *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
  *((_QWORD *)v14 + 3) = *((_QWORD *)v15 + 3);
  v14[32] = v15[32];
  *((_DWORD *)v14 + 9) = *((_DWORD *)v15 + 9);
  v16 = *((_QWORD *)v15 + 5);
  v17 = *(_QWORD *)&a1[v13 + 40];
  *((_QWORD *)v14 + 5) = v16;
  swift_retain(v16);
  swift_release(v17);
  *((_QWORD *)v14 + 6) = *((_QWORD *)v15 + 6);
  *((_QWORD *)v14 + 7) = *((_QWORD *)v15 + 7);
  v14[64] = v15[64];
  *((_QWORD *)v14 + 9) = *((_QWORD *)v15 + 9);
  v14[80] = v15[80];
  v14[81] = v15[81];
  v14[82] = v15[82];
  *((_QWORD *)v14 + 11) = *((_QWORD *)v15 + 11);
  return a1;
}

_BYTE *sub_10003D990(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = v12[3];
  v11[2] = v12[2];
  v11[3] = v13;
  v14 = v12[5];
  v11[4] = v12[4];
  v11[5] = v14;
  v15 = v12[1];
  *v11 = *v12;
  v11[1] = v15;
  return a1;
}

_BYTE *sub_10003DA28(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(_QWORD *)&a1[v10];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  swift_release(v11);
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  v13[32] = v14[32];
  *((_DWORD *)v13 + 9) = *((_DWORD *)v14 + 9);
  v16 = *(_QWORD *)&a1[v12 + 40];
  *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
  swift_release(v16);
  *((_OWORD *)v13 + 3) = *((_OWORD *)v14 + 3);
  v13[64] = v14[64];
  *((_QWORD *)v13 + 9) = *((_QWORD *)v14 + 9);
  v13[80] = v14[80];
  v13[81] = v14[81];
  v13[82] = v14[82];
  *((_QWORD *)v13 + 11) = *((_QWORD *)v14 + 11);
  return a1;
}

uint64_t sub_10003DB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003DB20);
}

uint64_t sub_10003DB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for WidgetFamily(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10003DBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003DBAC);
}

uint64_t sub_10003DBAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for WidgetFamily(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TVWidgetContentView(uint64_t a1)
{
  return sub_100025CD0(a1, qword_100107DB8, (uint64_t)&nominal type descriptor for TVWidgetContentView);
}

uint64_t sub_10003DC3C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1000C9488;
  result = type metadata accessor for WidgetFamily(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = &unk_1000C94A0;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10003DCC8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2510, 1);
}

void sub_10003DCD8(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[18];
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v107 = a1;
  v83 = type metadata accessor for TVWidgetLockscreenCell(0);
  __chkstk_darwin(v83);
  v65 = (char *)v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100008EF4(&qword_100107DF8);
  __chkstk_darwin(v80);
  v81 = (char *)v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100008EF4(&qword_100107E00);
  v62 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v61 = (char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100008EF4(&qword_100107E08);
  __chkstk_darwin(v100);
  v84 = (char *)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100008EF4(&qword_100107E10);
  __chkstk_darwin(v98);
  v99 = (char *)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100008EF4(&qword_100107E18);
  __chkstk_darwin(v108);
  v101 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100008EF4(&qword_100107E20);
  __chkstk_darwin(v87);
  v89 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100008EF4(&qword_100107E28);
  v50[15] = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v50[14] = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100008EF4(&qword_100107E30);
  __chkstk_darwin(v63);
  v66 = (char *)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for TVWidgetFeatured(0);
  __chkstk_darwin(v86);
  v72 = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100008EF4(&qword_100107E38);
  v50[17] = *(_QWORD *)(v64 - 8);
  v12 = __chkstk_darwin(v64);
  v50[13] = (char *)v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v50[16] = (char *)v50 - v14;
  v85 = sub_100008EF4(&qword_100107E40);
  __chkstk_darwin(v85);
  v67 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100008EF4(&qword_100107E48);
  __chkstk_darwin(v97);
  v88 = (char *)v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100008EF4(&qword_100107E50);
  __chkstk_darwin(v75);
  v79 = (char *)v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100008EF4(&qword_100107E58);
  v50[10] = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v50[9] = (char *)v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100008EF4(&qword_100107E60);
  __chkstk_darwin(v56);
  v58 = (char *)v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for TVWidgetCell(0);
  __chkstk_darwin(v92);
  v71 = (char *)v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100008EF4(&qword_100107E68);
  v50[12] = *(_QWORD *)(v57 - 8);
  v21 = __chkstk_darwin(v57);
  v50[8] = (char *)v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v50[11] = (char *)v50 - v23;
  v77 = sub_100008EF4(&qword_100107E70);
  __chkstk_darwin(v77);
  v59 = (char *)v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100008EF4(&qword_100107E78);
  __chkstk_darwin(v93);
  v78 = (char *)v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100008EF4(&qword_100107E80);
  __chkstk_darwin(v105);
  v106 = (char *)v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100008EF4(&qword_100107E88);
  __chkstk_darwin(v95);
  v96 = (char *)v50 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100008EF4(&qword_100107E90);
  __chkstk_darwin(v109);
  v94 = (char *)v50 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100008EF4(&qword_100107E98);
  __chkstk_darwin(v73);
  v74 = (char *)v50 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100008EF4(&qword_100107EA0);
  v50[6] = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v50[4] = (char *)v50 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100008EF4(&qword_100107EA8);
  __chkstk_darwin(v51);
  v54 = (char *)v50 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for WidgetFamily(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v102 = (char *)v50 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for TVWidgetLockup(0);
  __chkstk_darwin(v91);
  v69 = (char *)v50 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100008EF4(&qword_100107EB0);
  v50[7] = *(_QWORD *)(v52 - 8);
  v34 = __chkstk_darwin(v52);
  v50[3] = (char *)v50 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v50[5] = (char *)v50 - v36;
  v76 = sub_100008EF4(&qword_100107EB8);
  __chkstk_darwin(v76);
  v53 = (char *)v50 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100008EF4(&qword_100105F50);
  v39 = __chkstk_darwin(v38);
  v40 = __chkstk_darwin(v39);
  v41 = __chkstk_darwin(v40);
  v42 = __chkstk_darwin(v41);
  v70 = (char *)v50 - v43;
  __chkstk_darwin(v42);
  v111 = type metadata accessor for URL(0);
  v110 = *(_QWORD *)(v111 - 8);
  v44 = __chkstk_darwin(v111);
  v45 = __chkstk_darwin(v44);
  v46 = __chkstk_darwin(v45);
  v47 = __chkstk_darwin(v46);
  v90 = (char *)v50 - v48;
  __chkstk_darwin(v47);
  v49 = sub_100008EF4(&qword_100107EC0);
  __chkstk_darwin(v49);
  __asm { BR              X10 }
}

uint64_t sub_10003E7C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t *v28;
  uint64_t v29;
  int *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t OpaqueTypeConformance2;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v94[22];

  *(_QWORD *)(v5 - 288) = v1;
  *(_QWORD *)(v5 - 280) = a1;
  v6 = (int *)type metadata accessor for TVWidgetContentView(0);
  v7 = v6[6];
  v8 = v4;
  v9 = *(_QWORD *)(v4 + v7);
  v10 = v9 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_actionURL;
  swift_beginAccess(v9 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_actionURL, v5 - 160, 0, 0);
  sub_10001355C(v10, v3, &qword_100105F50);
  v11 = *(_QWORD *)(v5 - 208);
  v12 = *(_QWORD *)(v5 - 192);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v3, 1, v12) == 1)
  {
    sub_1000135A0(v3, &qword_100105F50);
    v13 = v4 + v6[7];
    *(_OWORD *)(v5 - 192) = *(_OWORD *)v13;
    v14 = *(_QWORD *)(v13 + 16);
    v15 = *(_QWORD *)(v13 + 24);
    *(_DWORD *)(v5 - 208) = *(unsigned __int8 *)(v13 + 32);
    *(_DWORD *)(v5 - 296) = *(_DWORD *)(v13 + 36);
    v16 = *(_QWORD *)(v13 + 40);
    v17 = *(_QWORD *)(v13 + 48);
    v18 = *(_QWORD *)(v13 + 56);
    *(_DWORD *)(v5 - 304) = *(unsigned __int8 *)(v13 + 64);
    v19 = *(_QWORD *)(v13 + 72);
    *(_DWORD *)(v5 - 312) = *(unsigned __int8 *)(v13 + 80);
    v20 = *(_BYTE *)(v13 + 81);
    *(_DWORD *)(v5 - 368) = *(unsigned __int8 *)(v13 + 82);
    v21 = *(_QWORD *)(v13 + 88);
    v22 = v8 + v6[5];
    v23 = *(_QWORD *)(v5 - 264);
    v24 = *(_QWORD *)(v5 - 272);
    v25 = *(_QWORD *)(v5 - 256);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v24, v22, v25);
    v26 = *(_QWORD *)(v8 + v7);
    KeyPath = swift_getKeyPath(&unk_1000C9508);
    v28 = *(uint64_t **)(v5 - 576);
    *v28 = KeyPath;
    v29 = sub_100008EF4(&qword_100105F38);
    swift_storeEnumTagMultiPayload(v28, v29, 0);
    v30 = *(int **)(v5 - 384);
    v31 = (char *)v28 + v30[5];
    *(_OWORD *)v31 = *(_OWORD *)(v5 - 192);
    *((_QWORD *)v31 + 2) = v14;
    *((_QWORD *)v31 + 3) = v15;
    v31[32] = *(_DWORD *)(v5 - 208);
    *((_DWORD *)v31 + 9) = *(_DWORD *)(v5 - 296);
    *((_QWORD *)v31 + 5) = v16;
    *((_QWORD *)v31 + 6) = v17;
    *((_QWORD *)v31 + 7) = v18;
    v31[64] = *(_DWORD *)(v5 - 304);
    *((_QWORD *)v31 + 9) = v19;
    v31[80] = *(_DWORD *)(v5 - 312);
    v31[81] = v20;
    v31[82] = *(_DWORD *)(v5 - 368);
    *((_QWORD *)v31 + 11) = v21;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))((char *)v28 + v30[6], v24, v25);
    *(uint64_t *)((char *)v28 + v30[7]) = v26;
    v32 = *(_QWORD *)(v5 - 536);
    sub_1000134DC((uint64_t)v28, v32, type metadata accessor for TVWidgetLockup);
    swift_storeEnumTagMultiPayload(v32, *(_QWORD *)(v5 - 544), 1);
    v33 = sub_100040ACC();
    v34 = sub_1000139F8(&qword_100107F18, type metadata accessor for TVWidgetLockup, (uint64_t)&unk_1000C9640);
    swift_retain(v16);
    swift_retain(v26);
    v35 = *(_QWORD *)(v5 - 288);
    _ConditionalContent<>.init(storage:)(v32, *(_QWORD *)(v5 - 520), v30, v33, v34);
    sub_100013520((uint64_t)v28, type metadata accessor for TVWidgetLockup);
    v36 = v35;
    v37 = *(_QWORD *)(v5 - 224);
    v38 = *(_QWORD *)(v5 - 248);
    v39 = *(_QWORD *)(v5 - 240);
    v40 = *(_QWORD *)(v5 - 216);
    v41 = *(_QWORD *)(v5 - 336);
    v42 = *(_QWORD *)(v5 - 344);
    v43 = *(_QWORD *)(v5 - 328);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v2, v3, v12);
    v44 = v4 + v6[7];
    v45 = *(_BYTE *)(v44 + 32) == 1;
    *(_QWORD *)(v5 - 864) = v2;
    if (v45)
    {
      *(_OWORD *)(v5 - 416) = *(_OWORD *)v44;
      v46 = *(_QWORD *)(v44 + 16);
      v47 = *(_QWORD *)(v44 + 24);
      *(_DWORD *)(v5 - 296) = *(_DWORD *)(v44 + 36);
      v48 = *(_QWORD *)(v44 + 40);
      v49 = *(_QWORD *)(v44 + 48);
      v50 = *(_QWORD *)(v44 + 56);
      *(_DWORD *)(v5 - 304) = *(unsigned __int8 *)(v44 + 64);
      v51 = *(_QWORD *)(v44 + 72);
      *(_DWORD *)(v5 - 312) = *(unsigned __int8 *)(v44 + 80);
      *(_DWORD *)(v5 - 368) = *(unsigned __int8 *)(v44 + 81);
      *(_DWORD *)(v5 - 392) = *(unsigned __int8 *)(v44 + 82);
      v52 = *(_QWORD *)(v44 + 88);
      v53 = v8 + v6[5];
      v54 = *(_QWORD *)(v5 - 264);
      v55 = *(_QWORD *)(v5 - 272);
      v56 = *(_QWORD *)(v5 - 256);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v55, v53, v56);
      v57 = swift_getKeyPath(&unk_1000C9508);
      v58 = *(uint64_t **)(v5 - 576);
      *v58 = v57;
      v59 = sub_100008EF4(&qword_100105F38);
      swift_storeEnumTagMultiPayload(v58, v59, 0);
      v60 = *(int **)(v5 - 384);
      v61 = (char *)v58 + v60[5];
      *(_OWORD *)v61 = *(_OWORD *)(v5 - 416);
      *((_QWORD *)v61 + 2) = v46;
      *((_QWORD *)v61 + 3) = v47;
      v61[32] = 1;
      *((_DWORD *)v61 + 9) = *(_DWORD *)(v5 - 296);
      *((_QWORD *)v61 + 5) = v48;
      *((_QWORD *)v61 + 6) = v49;
      *((_QWORD *)v61 + 7) = v50;
      v61[64] = *(_DWORD *)(v5 - 304);
      *((_QWORD *)v61 + 9) = v51;
      v61[80] = *(_DWORD *)(v5 - 312);
      v61[81] = *(_DWORD *)(v5 - 368);
      v61[82] = *(_DWORD *)(v5 - 392);
      *((_QWORD *)v61 + 11) = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))((char *)v58 + v60[6], v55, v56);
      *(uint64_t *)((char *)v58 + v60[7]) = v9;
      v62 = *(_QWORD *)(v5 - 568);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v62, v2, v12);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v62, 0, 1, v12);
      v63 = sub_1000139F8(&qword_100107F18, type metadata accessor for TVWidgetLockup, (uint64_t)&unk_1000C9640);
      swift_retain(v48);
      swift_retain(v9);
      v64 = *(_QWORD *)(v5 - 840);
      View.widgetURL(_:)(v62, v60, v63);
      sub_1000135A0(v62, &qword_100105F50);
      sub_100013520((uint64_t)v58, type metadata accessor for TVWidgetLockup);
      v65 = *(_QWORD *)(v5 - 808);
      v66 = *(_QWORD *)(v5 - 824);
      v67 = *(_QWORD *)(v5 - 712);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v66, v64, v67);
      v68 = *(_QWORD *)(v5 - 696);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v68, v66, v67);
      swift_storeEnumTagMultiPayload(v68, *(_QWORD *)(v5 - 720), 0);
      *(_QWORD *)(v5 - 176) = v60;
      *(_QWORD *)(v5 - 168) = v63;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v5 - 176, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
      v70 = sub_100013840(&qword_100107F20, &qword_100107EA0, (uint64_t)&protocol conformance descriptor for Link<A>);
      v82 = *(_QWORD *)(v5 - 704);
      _ConditionalContent<>.init(storage:)(v68, v67, *(_QWORD *)(v5 - 688), OpaqueTypeConformance2, v70);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v67);
    }
    else
    {
      v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
      v72 = *(_QWORD *)(v5 - 392);
      v73 = v71(v72, v2, v12);
      __chkstk_darwin(v73);
      v94[2] = v4;
      v74 = sub_1000139F8(&qword_100107F18, type metadata accessor for TVWidgetLockup, (uint64_t)&unk_1000C9640);
      v75 = *(_QWORD *)(v5 - 832);
      v76 = *(_QWORD *)(v5 - 384);
      ((void (*)(uint64_t, void (*)(char *@<X8>), _QWORD *, uint64_t, uint64_t))Link.init(destination:label:))(v72, sub_100044A5C, v94, v76, v74);
      v77 = *(_QWORD *)(v5 - 816);
      v78 = *(_QWORD *)(v5 - 696);
      v79 = *(_QWORD *)(v5 - 688);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16))(v78, v75, v79);
      swift_storeEnumTagMultiPayload(v78, *(_QWORD *)(v5 - 720), 1);
      *(_QWORD *)(v5 - 176) = v76;
      *(_QWORD *)(v5 - 168) = v74;
      v80 = swift_getOpaqueTypeConformance2(v5 - 176, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
      v81 = sub_100013840(&qword_100107F20, &qword_100107EA0, (uint64_t)&protocol conformance descriptor for Link<A>);
      v82 = *(_QWORD *)(v5 - 704);
      _ConditionalContent<>.init(storage:)(v78, *(_QWORD *)(v5 - 712), v79, v80, v81);
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v75, v79);
    }
    v37 = *(_QWORD *)(v5 - 224);
    v38 = *(_QWORD *)(v5 - 248);
    v39 = *(_QWORD *)(v5 - 240);
    v41 = *(_QWORD *)(v5 - 336);
    v42 = *(_QWORD *)(v5 - 344);
    v83 = *(_QWORD *)(v5 - 536);
    v84 = *(_QWORD *)(v5 - 544);
    sub_10001355C(v82, v83, &qword_100107EB8);
    swift_storeEnumTagMultiPayload(v83, v84, 0);
    v85 = sub_100040ACC();
    v86 = sub_1000139F8(&qword_100107F18, type metadata accessor for TVWidgetLockup, (uint64_t)&unk_1000C9640);
    v87 = v82;
    v36 = *(_QWORD *)(v5 - 288);
    _ConditionalContent<>.init(storage:)(v83, *(_QWORD *)(v5 - 520), *(_QWORD *)(v5 - 384), v85, v86);
    sub_1000135A0(v87, &qword_100107EB8);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 208) + 8))(*(_QWORD *)(v5 - 864), *(_QWORD *)(v5 - 192));
    v43 = *(_QWORD *)(v5 - 328);
    v40 = *(_QWORD *)(v5 - 216);
  }
  v88 = *(_QWORD *)(v5 - 320);
  sub_10001355C(v36, v88, &qword_100107EC0);
  swift_storeEnumTagMultiPayload(v88, v43, 0);
  v89 = sub_100040A48();
  v90 = sub_100040B8C();
  _ConditionalContent<>.init(storage:)(v88, *(_QWORD *)(v5 - 280), v42, v89, v90);
  sub_10001355C(v41, v39, &qword_100107E90);
  swift_storeEnumTagMultiPayload(v39, v38, 0);
  v91 = sub_100040A24();
  v92 = sub_100040CD0();
  _ConditionalContent<>.init(storage:)(v39, v40, v37, v91, v92);
  sub_1000135A0(v41, &qword_100107E90);
  return sub_1000135A0(v36, &qword_100107EC0);
}

void sub_1000404F8(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  __int128 v31;

  v6 = type metadata accessor for WidgetFamily(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for TVWidgetContentView(0);
  v11 = (__int128 *)(a1 + v10[7]);
  v31 = *v11;
  v12 = *((_QWORD *)v11 + 2);
  v13 = *((_QWORD *)v11 + 3);
  v14 = *((_BYTE *)v11 + 32);
  v15 = *((_DWORD *)v11 + 9);
  v16 = *((_QWORD *)v11 + 5);
  v17 = *((_QWORD *)v11 + 6);
  v18 = *((_QWORD *)v11 + 7);
  v19 = *((unsigned __int8 *)v11 + 64);
  v20 = *((_QWORD *)v11 + 9);
  v29 = *((unsigned __int8 *)v11 + 80);
  v30 = v19;
  v21 = *((unsigned __int8 *)v11 + 81);
  v27 = *((unsigned __int8 *)v11 + 82);
  v28 = v21;
  v22 = *((_QWORD *)v11 + 11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1 + v10[5], v6);
  v23 = *(_QWORD *)(a1 + v10[6]);
  *(_QWORD *)a3 = swift_getKeyPath(&unk_1000C9508);
  v24 = sub_100008EF4(&qword_100105F38);
  swift_storeEnumTagMultiPayload(a3, v24, 0);
  v25 = (int *)a2(0);
  v26 = &a3[v25[5]];
  *(_OWORD *)v26 = v31;
  *((_QWORD *)v26 + 2) = v12;
  *((_QWORD *)v26 + 3) = v13;
  v26[32] = v14;
  *((_DWORD *)v26 + 9) = v15;
  *((_QWORD *)v26 + 5) = v16;
  *((_QWORD *)v26 + 6) = v17;
  *((_QWORD *)v26 + 7) = v18;
  v26[64] = v30;
  *((_QWORD *)v26 + 9) = v20;
  v26[80] = v29;
  v26[81] = v28;
  v26[82] = v27;
  *((_QWORD *)v26 + 11) = v22;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&a3[v25[6]], v9, v6);
  *(_QWORD *)&a3[v25[7]] = v23;
  swift_retain(v16);
  swift_retain(v23);
}

double sub_1000406B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  char v22;
  char v23;
  char v24;
  __int128 v25;

  v4 = type metadata accessor for TVWidgetContentView(0);
  v5 = (__int128 *)(a1 + *(int *)(v4 + 28));
  v25 = *v5;
  v6 = *((_QWORD *)v5 + 2);
  v7 = *((_QWORD *)v5 + 3);
  v8 = *((_BYTE *)v5 + 32);
  v9 = *((_DWORD *)v5 + 9);
  v10 = *((_QWORD *)v5 + 5);
  v11 = *((_QWORD *)v5 + 6);
  v12 = *((_QWORD *)v5 + 7);
  v13 = *((_BYTE *)v5 + 64);
  v14 = *((_QWORD *)v5 + 9);
  v23 = *((_BYTE *)v5 + 81);
  v24 = *((_BYTE *)v5 + 80);
  v22 = *((_BYTE *)v5 + 82);
  v15 = *((_QWORD *)v5 + 11);
  v16 = type metadata accessor for TVWidgetLockscreenCell(0);
  v17 = a2 + *(int *)(v16 + 20);
  v18 = enum case for WidgetFamily.systemSmall(_:);
  v19 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v18, v19);
  v20 = *(_QWORD *)(a1 + *(int *)(v4 + 24));
  *(_OWORD *)a2 = v25;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 36) = v9;
  *(_QWORD *)(a2 + 40) = v10;
  *(_QWORD *)(a2 + 48) = v11;
  *(_QWORD *)(a2 + 56) = v12;
  *(_BYTE *)(a2 + 64) = v13;
  *(_QWORD *)(a2 + 72) = v14;
  *(_BYTE *)(a2 + 80) = v24;
  *(_BYTE *)(a2 + 81) = v23;
  *(_BYTE *)(a2 + 82) = v22;
  *(_QWORD *)(a2 + 88) = v15;
  *(_QWORD *)(a2 + *(int *)(v16 + 24)) = v20;
  swift_retain(v10);
  *(_QWORD *)&result = swift_retain(v20).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for TVWidgetFeatured(uint64_t a1)
{
  return sub_100025CD0(a1, qword_100107FA8, (uint64_t)&nominal type descriptor for TVWidgetFeatured);
}

uint64_t type metadata accessor for TVWidgetCell(uint64_t a1)
{
  return sub_100025CD0(a1, qword_100108040, (uint64_t)&nominal type descriptor for TVWidgetCell);
}

uint64_t type metadata accessor for TVWidgetLockup(uint64_t a1)
{
  return sub_100025CD0(a1, qword_1001080D8, (uint64_t)&nominal type descriptor for TVWidgetLockup);
}

unint64_t sub_100040844()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100107ED8;
  if (!qword_100107ED8)
  {
    v1 = sub_100008F80(&qword_100107E48);
    sub_1000408C8();
    sub_1000139F8(&qword_100107EE8, type metadata accessor for TVWidgetFeatured, (uint64_t)&unk_1000C9690);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100107ED8);
  }
  return result;
}

unint64_t sub_1000408C8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100107EE0;
  if (!qword_100107EE0)
  {
    v1 = sub_100008F80(&qword_100107E40);
    v2[0] = type metadata accessor for TVWidgetFeatured(255);
    v2[1] = sub_1000139F8(&qword_100107EE8, type metadata accessor for TVWidgetFeatured, (uint64_t)&unk_1000C9690);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    sub_100013840(&qword_100107EF0, &qword_100107E28, (uint64_t)&protocol conformance descriptor for Link<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100107EE0);
  }
  return result;
}

unint64_t sub_100040988()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100107EF8;
  if (!qword_100107EF8)
  {
    v1 = sub_100008F80(&qword_100107E08);
    sub_100013840(&qword_100107EC8, &qword_100107E00, (uint64_t)&protocol conformance descriptor for Link<A>);
    sub_1000139F8(&qword_100107ED0, type metadata accessor for TVWidgetLockscreenCell, (uint64_t)&unk_1000D0210);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100107EF8);
  }
  return result;
}

uint64_t sub_100040A24()
{
  return sub_100045570(&qword_100107F00, &qword_100107E90, (void (*)(void))sub_100040A48, (void (*)(void))sub_100040B8C);
}

unint64_t sub_100040A48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100107F08;
  if (!qword_100107F08)
  {
    v1 = sub_100008F80(&qword_100107EC0);
    sub_100040ACC();
    sub_1000139F8(&qword_100107F18, type metadata accessor for TVWidgetLockup, (uint64_t)&unk_1000C9640);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100107F08);
  }
  return result;
}

unint64_t sub_100040ACC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100107F10;
  if (!qword_100107F10)
  {
    v1 = sub_100008F80(&qword_100107EB8);
    v2[0] = type metadata accessor for TVWidgetLockup(255);
    v2[1] = sub_1000139F8(&qword_100107F18, type metadata accessor for TVWidgetLockup, (uint64_t)&unk_1000C9640);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    sub_100013840(&qword_100107F20, &qword_100107EA0, (uint64_t)&protocol conformance descriptor for Link<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100107F10);
  }
  return result;
}

unint64_t sub_100040B8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100107F28;
  if (!qword_100107F28)
  {
    v1 = sub_100008F80(&qword_100107E78);
    sub_100040C10();
    sub_1000139F8(&qword_100107F38, type metadata accessor for TVWidgetCell, (uint64_t)&unk_1000C95F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100107F28);
  }
  return result;
}

unint64_t sub_100040C10()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100107F30;
  if (!qword_100107F30)
  {
    v1 = sub_100008F80(&qword_100107E70);
    v2[0] = type metadata accessor for TVWidgetCell(255);
    v2[1] = sub_1000139F8(&qword_100107F38, type metadata accessor for TVWidgetCell, (uint64_t)&unk_1000C95F0);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    sub_100013840(&qword_100107F40, &qword_100107E58, (uint64_t)&protocol conformance descriptor for Link<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100107F30);
  }
  return result;
}

uint64_t sub_100040CD0()
{
  return sub_100045570(&qword_100107F48, &qword_100107E18, (void (*)(void))sub_100040844, (void (*)(void))sub_100040988);
}

double sub_100040CF4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000406B8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100040CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];

  v39 = a2;
  v43 = a1;
  v50 = a3;
  v49 = type metadata accessor for _ContentTransitionModifier(0);
  __chkstk_darwin(v49);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ContentTransition(0);
  v47 = *(_QWORD *)(v6 - 8);
  v48 = v6;
  __chkstk_darwin(v6);
  v46 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessibilityTraits(0);
  v44 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AccessibilityChildBehavior(0);
  v40 = *(_QWORD *)(v11 - 8);
  v41 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008EF4(&qword_1001081C8);
  __chkstk_darwin(v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008EF4(&qword_1001081D0);
  v42 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008EF4(&qword_1001081D8);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v16 = static HorizontalAlignment.leading.getter(v21);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 1;
  v24 = sub_100008EF4(&qword_1001081E0);
  v25 = sub_100041090(a2, v43, &v16[*(int *)(v24 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v25);
  v26 = sub_100013840(&qword_1001081E8, &qword_1001081C8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibilityElement(children:)(v13, v14, v26);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v41);
  v27 = sub_1000135A0((uint64_t)v16, &qword_1001081C8);
  static AccessibilityTraits.isImage.getter(v27);
  v51[0] = v14;
  v51[1] = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v51, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibility(removeTraits:)(v10, v17, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v45);
  v29 = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v19, v17);
  v30 = v46;
  static ContentTransition.default.getter(v29);
  v31 = v39 + *(int *)(type metadata accessor for TVWidgetLockup(0) + 20);
  v32 = *(_QWORD *)(v31 + 40);
  LODWORD(v17) = *(_DWORD *)(v31 + 36);
  v34 = v47;
  v33 = v48;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v5, v30, v48);
  v35 = v49;
  *(_QWORD *)&v5[*(int *)(v49 + 20)] = v32;
  *(_DWORD *)&v5[*(int *)(v35 + 24)] = v17;
  v36 = v50;
  sub_10001355C((uint64_t)v23, v50, &qword_1001081D8);
  v37 = sub_100008EF4(&qword_1001081F0);
  sub_1000134DC((uint64_t)v5, v36 + *(int *)(v37 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for _ContentTransitionModifier);
  swift_retain(v32);
  sub_100013520((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for _ContentTransitionModifier);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v33);
  return sub_1000135A0((uint64_t)v23, &qword_1001081D8);
}

uint64_t sub_100041090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD v116[12];
  void *v117;
  char v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _BYTE v129[23];
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 v132;
  uint64_t v133;
  unsigned __int8 v134;
  uint64_t v135;
  uint64_t v136;
  _OWORD v137[3];
  _OWORD v138[2];
  _OWORD v139[11];
  _OWORD v140[12];

  v114 = a2;
  v5 = sub_100008EF4(&qword_100105F48);
  v6 = __chkstk_darwin(v5);
  v105 = (uint64_t)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v107 = (uint64_t)&v93 - v8;
  v106 = type metadata accessor for TVWidgetMetadataView(0);
  __chkstk_darwin(v106);
  v10 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008EF4(&qword_1001081F8);
  v12 = __chkstk_darwin(v11);
  v110 = (uint64_t)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v108 = (uint64_t)&v93 - v15;
  __chkstk_darwin(v14);
  v109 = (uint64_t)&v93 - v16;
  v17 = (int *)type metadata accessor for TVWidgetLockup(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008EF4(&qword_100108200);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v111 = (uint64_t)&v93 - v24;
  v104 = v17[7];
  v25 = *(_QWORD *)(a1 + v104);
  v26 = *(void **)(v25 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_image);
  v112 = *(unsigned __int8 *)(v25 + 73);
  v113 = v26;
  v27 = v26;
  sub_1000279D0((uint64_t)v139);
  *(_OWORD *)((char *)&v140[7] + 7) = v139[7];
  *(_OWORD *)((char *)&v140[8] + 7) = v139[8];
  *(_OWORD *)((char *)&v140[9] + 7) = v139[9];
  *(_OWORD *)((char *)&v140[10] + 7) = v139[10];
  *(_OWORD *)((char *)&v140[3] + 7) = v139[3];
  *(_OWORD *)((char *)&v140[4] + 7) = v139[4];
  *(_OWORD *)((char *)&v140[5] + 7) = v139[5];
  *(_OWORD *)((char *)&v140[6] + 7) = v139[6];
  *(_OWORD *)((char *)v140 + 7) = v139[0];
  *(_OWORD *)((char *)&v140[1] + 7) = v139[1];
  *(_OWORD *)((char *)&v140[2] + 7) = v139[2];
  v28 = *(_QWORD *)(v25 + 24);
  if (!v28)
  {
    sub_1000134DC(a1, (uint64_t)v19, type metadata accessor for TVWidgetLockup);
    goto LABEL_8;
  }
  if ((v28 & 0x2000000000000000) != 0)
    v29 = HIBYTE(v28) & 0xF;
  else
    v29 = *(_QWORD *)(v25 + 16) & 0xFFFFFFFFFFFFLL;
  sub_1000134DC(a1, (uint64_t)v19, type metadata accessor for TVWidgetLockup);
  if (!v29)
  {
LABEL_8:
    v31 = *(_QWORD *)&v19[v17[7]];
    v32 = *(_QWORD *)(v31 + 40);
    if (v32)
    {
      v33 = *(_QWORD *)(v31 + 32) & 0xFFFFFFFFFFFFLL;
      if ((v32 & 0x2000000000000000) != 0)
        v34 = HIBYTE(v32) & 0xF;
      else
        v34 = v33;
      v30 = sub_100013520((uint64_t)v19, type metadata accessor for TVWidgetLockup);
      if (v34)
        goto LABEL_13;
    }
    else
    {
      sub_100013520((uint64_t)v19, type metadata accessor for TVWidgetLockup);
    }
    v81 = sub_100008EF4(&qword_100108210);
    v80 = v111;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v111, 1, 1, v81);
    goto LABEL_26;
  }
  v30 = sub_100013520((uint64_t)v19, type metadata accessor for TVWidgetLockup);
LABEL_13:
  v103 = v10;
  GeometryProxy.size.getter(v30);
  v36 = v35;
  v38 = GeometryProxy.size.getter(v37);
  v39 = v17[6];
  v96 = v17[5];
  v40 = v36 - v38 / *(double *)(a1 + v96);
  v41 = a1 + v39;
  v42 = sub_100027884();
  v43 = v40 / v42;
  if (v40 >= v42)
    v43 = 1.0;
  if (v43 >= 1.0)
    v44 = v43;
  else
    v44 = v43 / 3.0;
  v95 = v41;
  v45 = sub_1000275B4() * v44;
  v47 = static Alignment.center.getter(v46);
  _FrameLayout.init(width:height:alignment:)(&v131, 0, 1, *(_QWORD *)&v45, 0, v47, v48);
  v102 = v131;
  v101 = v132;
  v100 = v133;
  v99 = v134;
  v97 = v136;
  v98 = v135;
  v49 = a1;
  v50 = *(_QWORD **)(a1 + v104);
  v51 = v50[3];
  v104 = v50[2];
  v52 = v50[5];
  v94 = v50[4];
  if (*((_BYTE *)v50 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_isExpiring) == 1)
  {
    v53 = (uint64_t)v50 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate;
    swift_beginAccess((char *)v50 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate, &v115, 0, 0);
    v54 = v107;
    sub_10001355C(v53, v107, &qword_100105F48);
  }
  else
  {
    v55 = type metadata accessor for Date(0);
    v54 = v107;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v107, 1, 1, v55);
  }
  v56 = (uint64_t)v50 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate;
  swift_beginAccess((char *)v50 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate, &v130, 0, 0);
  v57 = v105;
  sub_10001355C(v56, v105, &qword_100105F48);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v51);
  sub_1000418C8(v57, (uint64_t)v137);
  sub_1000135A0(v57, &qword_100105F48);
  v58 = v103;
  *v103 = v104;
  v58[1] = v51;
  v58[2] = v94;
  v58[3] = v52;
  v59 = v106;
  v60 = sub_100013880(v54, (uint64_t)v58 + *(int *)(v106 + 24), &qword_100105F48);
  v61 = (_OWORD *)((char *)v58 + *(int *)(v59 + 28));
  v62 = v138[0];
  v61[2] = v137[2];
  v61[3] = v62;
  *(_OWORD *)((char *)v61 + 57) = *(_OWORD *)((char *)v138 + 9);
  v63 = v137[1];
  *v61 = v137[0];
  v61[1] = v63;
  v64 = v114;
  GeometryProxy.size.getter(v60);
  v66 = v65;
  v68 = GeometryProxy.size.getter(v67);
  v69 = v66 - v68 / *(double *)(v49 + v96);
  v70 = sub_100027884();
  v71 = v69 / v70;
  if (v69 >= v70)
    v71 = 1.0;
  v72 = __chkstk_darwin(v71 < 1.0);
  *(&v93 - 2) = v49;
  *(&v93 - 1) = v64;
  v73 = v108;
  sub_100096C94(v72, (void (*)(uint64_t))sub_100045A24, v108);
  sub_100013520((uint64_t)v58, type metadata accessor for TVWidgetMetadataView);
  v74 = v73;
  v75 = v109;
  sub_100013880(v74, v109, &qword_1001081F8);
  v76 = v110;
  sub_10001355C(v75, v110, &qword_1001081F8);
  *(_QWORD *)v23 = 0;
  v23[8] = 1;
  *((_QWORD *)v23 + 2) = v102;
  v23[24] = v101;
  *((_QWORD *)v23 + 4) = v100;
  v23[40] = v99;
  v77 = v97;
  *((_QWORD *)v23 + 6) = v98;
  *((_QWORD *)v23 + 7) = v77;
  v78 = sub_100008EF4(&qword_100108208);
  sub_10001355C(v76, (uint64_t)&v23[*(int *)(v78 + 48)], &qword_1001081F8);
  sub_1000135A0(v75, &qword_1001081F8);
  sub_1000135A0(v76, &qword_1001081F8);
  v79 = sub_100008EF4(&qword_100108210);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v23, 0, 1, v79);
  v80 = v111;
  sub_100013880((uint64_t)v23, v111, &qword_100108200);
LABEL_26:
  v82 = v113;
  v83 = v112;
  sub_10001355C(v80, (uint64_t)v23, &qword_100108200);
  *(_QWORD *)&v116[0] = v82;
  BYTE8(v116[0]) = v83;
  *(_OWORD *)((char *)&v116[8] + 9) = v140[8];
  *(_OWORD *)((char *)&v116[9] + 9) = v140[9];
  *(_OWORD *)((char *)&v116[10] + 9) = v140[10];
  *((_QWORD *)&v116[11] + 1) = *(_QWORD *)((char *)&v140[10] + 15);
  *(_OWORD *)((char *)&v116[4] + 9) = v140[4];
  *(_OWORD *)((char *)&v116[5] + 9) = v140[5];
  *(_OWORD *)((char *)&v116[6] + 9) = v140[6];
  *(_OWORD *)((char *)&v116[7] + 9) = v140[7];
  *(_OWORD *)((char *)v116 + 9) = v140[0];
  *(_OWORD *)((char *)&v116[1] + 9) = v140[1];
  *(_OWORD *)((char *)&v116[2] + 9) = v140[2];
  *(_OWORD *)((char *)&v116[3] + 9) = v140[3];
  v84 = v116[9];
  v85 = v116[10];
  v86 = v116[7];
  a3[8] = v116[8];
  a3[9] = v84;
  v87 = v116[11];
  a3[10] = v85;
  a3[11] = v87;
  v88 = v116[5];
  a3[4] = v116[4];
  a3[5] = v88;
  a3[6] = v116[6];
  a3[7] = v86;
  v89 = v116[1];
  *a3 = v116[0];
  a3[1] = v89;
  v90 = v116[3];
  a3[2] = v116[2];
  a3[3] = v90;
  v91 = sub_100008EF4(&qword_100108218);
  sub_10001355C((uint64_t)v23, (uint64_t)a3 + *(int *)(v91 + 48), &qword_100108200);
  sub_100045A2C((uint64_t)v116);
  sub_1000135A0(v80, &qword_100108200);
  sub_1000135A0((uint64_t)v23, &qword_100108200);
  v127 = v140[8];
  v128 = v140[9];
  *(_OWORD *)v129 = v140[10];
  v123 = v140[4];
  v124 = v140[5];
  v125 = v140[6];
  v126 = v140[7];
  v119 = v140[0];
  v120 = v140[1];
  v121 = v140[2];
  v117 = v82;
  v118 = v83;
  *(_QWORD *)&v129[15] = *(_QWORD *)((char *)&v140[10] + 15);
  v122 = v140[3];
  return sub_10002A4D0((uint64_t)&v117);
}

uint64_t sub_1000418C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int HasExuberatedLineHeight;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  BOOL v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;

  v58 = a1;
  v4 = sub_100008EF4(&qword_100105F48);
  __chkstk_darwin(v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  v57 = v8;
  v9 = __chkstk_darwin(v7);
  v54 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v53 = (char *)&v51 - v12;
  __chkstk_darwin(v11);
  v52 = (char *)&v51 - v13;
  v55 = type metadata accessor for DynamicTypeSize(0);
  v14 = *(_QWORD *)(v55 - 8);
  v15 = __chkstk_darwin(v55);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = static Color.primary.getter(v15);
  v19 = static Color.secondary.getter();
  v20 = static Font.caption2.getter();
  v21 = static Font.caption2.getter();
  v22 = Font.smallCaps()();
  swift_release(v21);
  HasExuberatedLineHeight = CTFontHasExuberatedLineHeight(0);
  v62 = v18;
  v63 = 1;
  v64 = 0;
  v65 = v19;
  v66 = v20;
  v67 = v22;
  v68 = 0;
  v69 = 1;
  v70 = 0;
  v59 = HasExuberatedLineHeight;
  v71 = HasExuberatedLineHeight;
  v61 = 1;
  v24 = v2 + *(int *)(type metadata accessor for TVWidgetLockup(0) + 24);
  swift_retain_n(v18, 2);
  swift_retain_n(v20, 2);
  swift_retain_n(v22, 2);
  swift_retain(v19);
  sub_10009FD4C((uint64_t)v17);
  v25 = v24;
  v26 = v18;
  v27 = v56;
  v28 = sub_10007B240(v25, (uint64_t)v17);
  v60 = v22;
  swift_release(v22);
  swift_release(v20);
  swift_release(v19);
  swift_release(v26);
  v29 = v17;
  v30 = v57;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v29, v55);
  sub_10001355C(v58, (uint64_t)v6, &qword_100105F48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v6, 1, v27) == 1)
  {
    sub_1000135A0((uint64_t)v6, &qword_100105F48);
    v31 = 0;
  }
  else
  {
    v32 = v52;
    v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v30 + 32))(v52, v6, v27);
    v34 = v54;
    v35 = Date.init()(v33);
    v36 = v53;
    Date.advanced(by:)(v35, 172800.0);
    v37 = *(void (**)(char *, uint64_t))(v30 + 8);
    v37(v34, v27);
    v38 = static Date.< infix(_:_:)(v32, v36);
    v39 = ((uint64_t (*)(char *, uint64_t))v37)(v36, v27);
    if ((v38 & 1) != 0)
    {
      v40 = Date.init()(v39);
      Date.advanced(by:)(v40, 3600.0);
      v37(v34, v27);
      v41 = static Date.< infix(_:_:)(v32, v36);
      v39 = ((uint64_t (*)(char *, uint64_t))v37)(v36, v27);
      v42 = (v41 & 1) == 0;
      v43 = v34;
      if (v42)
        v31 = 32;
      else
        v31 = 64;
    }
    else
    {
      v43 = v34;
      v31 = 16;
    }
    v61 = 0;
    v44 = Date.init()(v39);
    Date.advanced(by:)(v44, 432000.0);
    v37(v43, v27);
    v45 = static Date.< infix(_:_:)(v32, v36);
    v46 = ((uint64_t (*)(char *, uint64_t))v37)(v36, v27);
    if ((v45 & 1) != 0)
    {
      v47 = static Color.red.getter(v46);
      v37(v32, v27);
      swift_release(v19);
      v19 = v47;
    }
    else
    {
      v37(v32, v27);
    }
  }
  v48 = v61;
  v49 = v60;
  swift_release(v60);
  swift_release(v20);
  result = swift_release(v26);
  *(_QWORD *)a2 = v26;
  *(_QWORD *)(a2 + 8) = 1;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 40) = v49;
  *(_QWORD *)(a2 + 48) = v31;
  *(_BYTE *)(a2 + 56) = v48;
  *(double *)(a2 + 64) = v28;
  *(_BYTE *)(a2 + 72) = v59;
  return result;
}

uint64_t sub_100041CE4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t *v14;
  uint64_t v16;

  v4 = sub_100008EF4(&qword_100108220);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100041E20();
  v9 = static Alignment.center.getter(v8);
  sub_1000960CC(0, 1, 0.0, 1, 0.0, 1, 0, 1, (uint64_t)v6, v11, 0.0, 1, v7, 0, v9, v10);
  v12 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TVWidgetLockup(0) + 20) + 48);
  KeyPath = swift_getKeyPath(&unk_1000C96E0);
  sub_10001355C((uint64_t)v6, a2, &qword_100108220);
  v14 = (uint64_t *)(a2 + *(int *)(sub_100008EF4(&qword_100108228) + 36));
  *v14 = KeyPath;
  v14[1] = v12;
  return sub_1000135A0((uint64_t)v6, &qword_100108220);
}

double sub_100041E20()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v1 = ((uint64_t (*)(void))GeometryProxy.size.getter)();
  v3 = v2;
  v4 = GeometryProxy.size.getter(v1);
  v5 = type metadata accessor for TVWidgetLockup(0);
  v6 = *(double *)(v0 + *(int *)(v5 + 20));
  GeometryProxy.size.getter(v5);
  v9 = v8 - GeometryProxy.size.getter(v7) / v6;
  v10 = sub_100027884();
  v11 = v9 / v10;
  if (v9 >= v10)
    v11 = 1.0;
  if (v11 >= 1.0)
    v12 = v11;
  else
    v12 = v11 / 3.0;
  return v3 - v4 / v6 - sub_1000275B4() * v12;
}

uint64_t sub_100041ED8@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_1000134DC(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TVWidgetLockup);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1000FA840, v7 + v5, v6 | 7);
  result = sub_10001303C((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for TVWidgetLockup);
  *a2 = sub_100045A10;
  a2[1] = (uint64_t (*)(uint64_t))v8;
  return result;
}

uint64_t sub_100041F8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;

  v25 = a1;
  v26 = type metadata accessor for AccessibilityTraits(0);
  v24 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v2 = (char *)v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TVWidgetCell(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = sub_100008EF4(&qword_100108230);
  v23 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000134DC(v22[1], (uint64_t)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TVWidgetCell);
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_1000FA868, v14 + v9, v13 | 7);
  v16 = sub_10001303C((uint64_t)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for TVWidgetCell);
  v27 = sub_100045B8C;
  v28 = v15;
  static AccessibilityChildBehavior.combine.getter(v16);
  v17 = sub_100008EF4(&qword_100108238);
  v18 = sub_100013840(&qword_100108240, &qword_100108238, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
  View.accessibilityElement(children:)(v6, v17, v18);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v19 = swift_release(v28);
  static AccessibilityTraits.isImage.getter(v19);
  v27 = (uint64_t (*)(uint64_t))v17;
  v28 = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v27, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibility(removeTraits:)(v2, v10, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v2, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v12, v10);
}

uint64_t sub_1000421E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (qword_100105CB8 != -1)
    swift_once(&qword_100105CB8, sub_1000449E8);
  v6 = qword_10011EE18;
  v7 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for TVWidgetCell(0) + 20) + 72);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = sub_100008EF4(&qword_100108248);
  return sub_100042278(a2, a1, a3 + *(int *)(v8 + 44));
}

uint64_t sub_100042278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v72 = a2;
  v82 = a3;
  v4 = type metadata accessor for Divider(0);
  v66 = *(_QWORD *)(v4 - 8);
  v67 = v4;
  __chkstk_darwin(v4);
  v64 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100008EF4(&qword_100108250);
  __chkstk_darwin(v65);
  v69 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100008EF4(&qword_100108258);
  __chkstk_darwin(v68);
  v71 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008EF4(&qword_100108260);
  v78 = *(_QWORD *)(v8 - 8);
  v79 = v8;
  __chkstk_darwin(v8);
  v70 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008EF4(&qword_100108268);
  v11 = __chkstk_darwin(v10);
  v81 = (uint64_t)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v80 = (uint64_t)&v63 - v13;
  v76 = type metadata accessor for _ContentTransitionModifier(0);
  __chkstk_darwin(v76);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for ContentTransition(0);
  v16 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100008EF4(&qword_100108270);
  __chkstk_darwin(v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100008EF4(&qword_100108278);
  v23 = __chkstk_darwin(v22);
  v77 = (uint64_t)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v63 - v26;
  v28 = __chkstk_darwin(v25);
  v74 = (char *)&v63 - v29;
  v30 = static VerticalAlignment.center.getter(v28);
  v31 = a1 + *(int *)(type metadata accessor for TVWidgetCell(0) + 20);
  v32 = *(_QWORD *)(v31 + 56);
  *(_QWORD *)v21 = v30;
  *((_QWORD *)v21 + 1) = v32;
  v21[16] = 0;
  v33 = &v21[*(int *)(sub_100008EF4(&qword_100108280) + 44)];
  v73 = a1;
  v34 = sub_1000428A0(a1, v33);
  static ContentTransition.default.getter(v34);
  v35 = *(_QWORD *)(v31 + 40);
  LODWORD(a1) = *(_DWORD *)(v31 + 36);
  v36 = v75;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v15, v18, v75);
  v37 = v76;
  *(_QWORD *)&v15[*(int *)(v76 + 20)] = v35;
  *(_DWORD *)&v15[*(int *)(v37 + 24)] = a1;
  sub_10001355C((uint64_t)v21, (uint64_t)v27, &qword_100108270);
  sub_1000134DC((uint64_t)v15, (uint64_t)&v27[*(int *)(v22 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _ContentTransitionModifier);
  swift_retain(v35);
  sub_100013520((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for _ContentTransitionModifier);
  v38 = *(void (**)(char *, uint64_t))(v16 + 8);
  v39 = (uint64_t)v74;
  v38(v18, v36);
  sub_1000135A0((uint64_t)v21, &qword_100108270);
  v40 = sub_100013880((uint64_t)v27, v39, &qword_100108278);
  if (*(_BYTE *)(v31 + 64) == 1)
  {
    v41 = v64;
    Divider.init()(v40);
    if (qword_100105CB8 != -1)
      swift_once(&qword_100105CB8, sub_1000449E8);
    v42 = qword_10011EE18;
    v44 = v66;
    v43 = v67;
    v45 = (uint64_t)v69;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v69, v41, v67);
    v46 = (uint64_t *)(v45 + *(int *)(v65 + 36));
    *v46 = v42;
    v46[1] = (uint64_t)sub_100045EE8;
    v46[2] = 0;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v41, v43);
    type metadata accessor for CGColor(0);
    _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)(&v83, 0.29412, 0.29412, 0.30196, 1.0);
    v47 = Color.init(_:)(v83);
    LOBYTE(v43) = static Edge.Set.all.getter();
    v48 = v71;
    sub_10001355C(v45, v71, &qword_100108250);
    v49 = v48 + *(int *)(v68 + 36);
    *(_QWORD *)v49 = v47;
    *(_BYTE *)(v49 + 8) = v43;
    sub_1000135A0(v45, &qword_100108250);
    v50 = sub_100042E58(v72);
    v52 = v51;
    v53 = static Alignment.center.getter(v50);
    v54 = v70;
    sub_100096288(0.0, 1, 0.0, 1, v52, 0, 0.0, 1, v70, 0.0, 1, 0.0, 1, v53, v55);
    sub_1000135A0(v48, &qword_100108258);
    v56 = v80;
    sub_100013880(v54, v80, &qword_100108260);
    v57 = 0;
  }
  else
  {
    v57 = 1;
    v56 = v80;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v56, v57, 1, v79);
  v58 = v77;
  sub_10001355C(v39, v77, &qword_100108278);
  v59 = v81;
  sub_10001355C(v56, v81, &qword_100108268);
  v60 = v82;
  sub_10001355C(v58, v82, &qword_100108278);
  v61 = sub_100008EF4(&qword_100108288);
  sub_10001355C(v59, v60 + *(int *)(v61 + 48), &qword_100108268);
  sub_1000135A0(v56, &qword_100108268);
  sub_1000135A0(v39, &qword_100108278);
  sub_1000135A0(v59, &qword_100108268);
  return sub_1000135A0(v58, &qword_100108278);
}

uint64_t sub_1000428A0@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  void *v98;
  char v99;
  _BYTE v100[7];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  _BYTE v109[7];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[7];
  unsigned __int8 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD v135[3];
  _BYTE v136[25];
  _BYTE v137[7];
  _DWORD v138[3];

  v4 = sub_100008EF4(&qword_100105F48);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  *(_QWORD *)&v76 = (char *)&v64 - v8;
  v9 = type metadata accessor for TVWidgetMetadataView(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v68 = sub_100008EF4(&qword_1001082A0);
  v12 = __chkstk_darwin(v68);
  v75 = (uint64_t)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v64 - v15;
  __chkstk_darwin(v14);
  v73 = (uint64_t)&v64 - v17;
  v18 = *(int *)(type metadata accessor for TVWidgetCell(0) + 28);
  v67 = a1;
  v19 = *(_QWORD *)(a1 + v18);
  v20 = *(void **)(v19 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_image);
  v80 = *(unsigned __int8 *)(v19 + 73);
  v81 = v20;
  v21 = v20;
  sub_1000279D0((uint64_t)v123);
  v22 = v134;
  v23 = v133;
  v24 = v132;
  v74 = v131;
  v71 = v126;
  v72 = v125;
  v69 = v128;
  v70 = v127;
  v82 = v130;
  v83 = v129;
  v79 = v124;
  v25 = v123[6];
  v26 = v123[5];
  v27 = v123[3];
  v28 = v123[2];
  v77 = v123[1];
  v78 = v123[4];
  v29 = v123[0];
  v30 = *(_QWORD *)(v19 + 16);
  v31 = *(_QWORD *)(v19 + 24);
  v32 = *(_QWORD *)(v19 + 40);
  v65 = *(_QWORD *)(v19 + 32);
  v66 = v30;
  if (*(_BYTE *)(v19 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_isExpiring) == 1)
  {
    v33 = v19 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate;
    swift_beginAccess(v19 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate, &v84, 0, 0);
    sub_10001355C(v33, v76, &qword_100105F48);
  }
  else
  {
    v34 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v76, 1, 1, v34);
  }
  v35 = v19 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate;
  swift_beginAccess(v19 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate, &v85, 0, 0);
  sub_10001355C(v35, (uint64_t)v7, &qword_100105F48);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v31);
  sub_1000445AC((uint64_t)v7, type metadata accessor for TVWidgetCell, (uint64_t)v135);
  sub_1000135A0((uint64_t)v7, &qword_100105F48);
  *v11 = v66;
  v11[1] = v31;
  v11[2] = v65;
  v11[3] = v32;
  sub_100013880(v76, (uint64_t)v11 + *(int *)(v9 + 24), &qword_100105F48);
  v36 = (_OWORD *)((char *)v11 + *(int *)(v9 + 28));
  v37 = *(_OWORD *)v136;
  v36[2] = v135[2];
  v36[3] = v37;
  *(_OWORD *)((char *)v36 + 57) = *(_OWORD *)&v136[9];
  v38 = v135[1];
  *v36 = v135[0];
  v36[1] = v38;
  if (qword_100105CB8 != -1)
    swift_once(&qword_100105CB8, sub_1000449E8);
  v39 = qword_10011EE18;
  sub_1000134DC((uint64_t)v11, (uint64_t)v16, type metadata accessor for TVWidgetMetadataView);
  v40 = (uint64_t *)&v16[*(int *)(v68 + 36)];
  *v40 = v39;
  v40[1] = (uint64_t)sub_100042E34;
  v40[2] = 0;
  sub_100013520((uint64_t)v11, type metadata accessor for TVWidgetMetadataView);
  v41 = v73;
  sub_100013880((uint64_t)v16, v73, &qword_1001082A0);
  v42 = v75;
  sub_10001355C(v41, v75, &qword_1001082A0);
  *(_QWORD *)&v86 = v81;
  BYTE8(v86) = v80;
  *(_DWORD *)((char *)&v86 + 9) = v138[0];
  HIDWORD(v86) = *(_DWORD *)((char *)v138 + 3);
  *(_QWORD *)&v87 = v29;
  *((_QWORD *)&v87 + 1) = v77;
  *(_QWORD *)&v88 = v28;
  *((_QWORD *)&v88 + 1) = v27;
  *(_QWORD *)&v89 = v78;
  *((_QWORD *)&v89 + 1) = v26;
  *(_QWORD *)&v90 = v25;
  BYTE8(v90) = v79;
  *(_DWORD *)((char *)&v90 + 9) = *(_DWORD *)v137;
  HIDWORD(v90) = *(_DWORD *)&v137[3];
  v44 = v71;
  v43 = v72;
  *(_QWORD *)&v91 = v72;
  *((_QWORD *)&v91 + 1) = v71;
  v45 = v69;
  v46 = v70;
  *(_QWORD *)&v92 = v70;
  *((_QWORD *)&v92 + 1) = v69;
  *(_QWORD *)&v93 = v83;
  *((_QWORD *)&v93 + 1) = v82;
  v47 = v74;
  *(_QWORD *)&v94 = v74;
  *((_QWORD *)&v94 + 1) = v24;
  __asm { FMOV            V0.2D, #6.0 }
  v76 = _Q0;
  v95 = _Q0;
  v96 = 0uLL;
  *(_QWORD *)&v97 = v23;
  *((_QWORD *)&v97 + 1) = v22;
  v53 = v86;
  v54 = v87;
  v55 = v89;
  a2[2] = v88;
  a2[3] = v55;
  *a2 = v53;
  a2[1] = v54;
  v56 = v90;
  v57 = v91;
  v58 = v93;
  a2[6] = v92;
  a2[7] = v58;
  a2[4] = v56;
  a2[5] = v57;
  v59 = v94;
  v60 = v95;
  v61 = v97;
  a2[10] = v96;
  a2[11] = v61;
  a2[8] = v59;
  a2[9] = v60;
  v62 = sub_100008EF4(&qword_1001082A8);
  sub_10001355C(v42, (uint64_t)a2 + *(int *)(v62 + 48), &qword_1001082A0);
  sub_100045A2C((uint64_t)&v86);
  sub_1000135A0(v41, &qword_1001082A0);
  sub_1000135A0(v42, &qword_1001082A0);
  v98 = v81;
  v99 = v80;
  *(_DWORD *)v100 = v138[0];
  *(_DWORD *)&v100[3] = *(_DWORD *)((char *)v138 + 3);
  v101 = v29;
  v102 = v77;
  v103 = v28;
  v104 = v27;
  v105 = v78;
  v106 = v26;
  v107 = v25;
  v108 = v79;
  *(_DWORD *)v109 = *(_DWORD *)v137;
  *(_DWORD *)&v109[3] = *(_DWORD *)&v137[3];
  v110 = v43;
  v111 = v44;
  v112 = v46;
  v113 = v45;
  v114 = v83;
  v115 = v82;
  v116 = v47;
  v117 = v24;
  v118 = v76;
  v120 = 0;
  v119 = 0;
  v121 = v23;
  v122 = v22;
  return sub_10002A4D0((uint64_t)&v98);
}

uint64_t sub_100042E34()
{
  uint64_t v0;

  v0 = static HorizontalAlignment.leading.getter();
  return ViewDimensions.subscript.getter(v0);
}

id sub_100042E58(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id result;
  double v16;
  double v17;
  double v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _QWORD v34[2];
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  _QWORD v48[2];
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  char v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  _QWORD v59[2];
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  _QWORD v70[2];
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;

  GeometryProxy.size.getter(a1);
  v3 = v2 + -1.0;
  v4 = type metadata accessor for TVWidgetCell(0);
  v5 = v1 + *(int *)(v4 + 20);
  v6 = *(double *)(v5 + 72);
  v7 = v3 - v6;
  v8 = GeometryProxy.size.getter(v4);
  sub_1000279D0((uint64_t)v48);
  v9 = *(double *)v48;
  v70[0] = v48[0];
  v70[1] = v48[1];
  v71 = v49;
  v72 = v50;
  v73 = v51;
  v74 = v52;
  v75 = v53;
  v76 = v54;
  v77 = v55;
  v78 = v56;
  v79 = v57;
  __asm { FMOV            V0.2D, #6.0 }
  v33 = _Q0;
  v80 = _Q0;
  v82 = 0;
  v81 = 0;
  v83 = v58;
  result = (id)sub_100045988((uint64_t)v70);
  v16 = v8 - ceil(v7 * v9);
  v17 = *(double *)(v5 + 56);
  v18 = v16 - v17;
  if (v16 - v17 < 0.0)
  {
    sub_100045BFC();
    v19 = (void *)static OS_os_log.default.getter();
    v20 = static os_log_type_t.default.getter(v19);
    os_log(_:dso:log:type:_:)("TVWidgetContentView::getDividerWidth dimensions/configuration details", 69, 2, &_mh_execute_header, v19, v20, &_swiftEmptyArrayStorage);

    result = sub_100006398();
    if (result)
    {
      v21 = result;
      v22 = sub_100008EF4(&qword_100106918);
      v23 = swift_allocObject(v22, 152, 7);
      *(_OWORD *)(v23 + 16) = xmmword_1000C9760;
      *(_QWORD *)(v23 + 56) = &type metadata for CGFloat;
      v24 = sub_100045C38();
      *(_QWORD *)(v23 + 64) = v24;
      *(double *)(v23 + 32) = v18;
      GeometryProxy.size.getter(v24);
      *(_QWORD *)(v23 + 96) = &type metadata for CGFloat;
      *(_QWORD *)(v23 + 104) = v24;
      *(_QWORD *)(v23 + 72) = v25;
      *(_QWORD *)(v23 + 136) = &type metadata for CGFloat;
      *(_QWORD *)(v23 + 144) = v24;
      *(double *)(v23 + 112) = v6;
      v27 = static os_log_type_t.default.getter(v26);
      os_log(_:dso:log:type:_:)("TVWidgetContentView::width=%{public}.5f, geometry height=%{public}.5f, margin=%{public}.5f", 90, 2, &_mh_execute_header, v21, v27, v23);

      swift_bridgeObjectRelease(v23);
      result = sub_100006398();
      if (result)
      {
        v28 = result;
        v29 = swift_allocObject(v22, 112, 7);
        *(_OWORD *)(v29 + 16) = xmmword_1000C8170;
        *(_QWORD *)(v29 + 56) = &type metadata for CGFloat;
        *(_QWORD *)(v29 + 64) = v24;
        *(double *)(v29 + 32) = v17;
        sub_1000279D0((uint64_t)v59);
        v30 = v59[0];
        v34[0] = v59[0];
        v34[1] = v59[1];
        v35 = v60;
        v36 = v61;
        v37 = v62;
        v38 = v63;
        v39 = v64;
        v40 = v65;
        v41 = v66;
        v42 = v67;
        v43 = v68;
        v44 = v33;
        v45 = 0;
        v46 = 0;
        v47 = v69;
        v31 = sub_100045988((uint64_t)v34);
        *(_QWORD *)(v29 + 96) = &type metadata for CGFloat;
        *(_QWORD *)(v29 + 104) = v24;
        *(_QWORD *)(v29 + 72) = v30;
        v32 = static os_log_type_t.default.getter(v31);
        os_log(_:dso:log:type:_:)("TVWidgetContentView::spacing=%{public}.5f, ratio=%{public}.5f", 61, 2, &_mh_execute_header, v28, v32, v29);

        return (id)swift_bridgeObjectRelease(v29);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10004317C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];

  v2 = v1;
  v65 = a1;
  v64 = type metadata accessor for _ContentTransitionModifier(0);
  __chkstk_darwin(v64);
  v63 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ContentTransition(0);
  v61 = *(_QWORD *)(v4 - 8);
  v62 = v4;
  __chkstk_darwin(v4);
  v60 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessibilityTraits(0);
  v58 = *(_QWORD *)(v6 - 8);
  v59 = v6;
  __chkstk_darwin(v6);
  v57 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessibilityChildBehavior(0);
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_100008EF4(&qword_100108130);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_100008EF4(&qword_100108138);
  __chkstk_darwin(v17);
  v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008EF4(&qword_100108140);
  v21 = *(_QWORD *)(v20 - 8);
  v53 = v20;
  v54 = v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100008EF4(&qword_100108148);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v16 = static Alignment.bottomLeading.getter(v25);
  v16[1] = v28;
  v29 = sub_100008EF4(&qword_100108150);
  sub_100043610(v2, (char *)v16 + *(int *)(v29 + 44));
  v30 = v2 + *(int *)(type metadata accessor for TVWidgetFeatured(0) + 20);
  v31 = *(_QWORD *)(v30 + 88);
  v32 = (char *)v13 + *(int *)(v11 + 20);
  v33 = enum case for RoundedCornerStyle.continuous(_:);
  v34 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v32, v33, v34);
  *v13 = v31;
  v13[1] = v31;
  v35 = (uint64_t)&v19[*(int *)(v17 + 36)];
  sub_1000134DC((uint64_t)v13, v35, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v35 + *(int *)(sub_100008EF4(&qword_100107208) + 36)) = 256;
  sub_10001355C((uint64_t)v16, (uint64_t)v19, &qword_100108130);
  sub_100013520((uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v36 = sub_1000135A0((uint64_t)v16, &qword_100108130);
  static AccessibilityChildBehavior.combine.getter(v36);
  v37 = sub_100045658();
  View.accessibilityElement(children:)(v10, v17, v37);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v56);
  v38 = sub_1000135A0((uint64_t)v19, &qword_100108138);
  v39 = v57;
  static AccessibilityTraits.isImage.getter(v38);
  v66[0] = v17;
  v66[1] = v37;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v66, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v41 = v53;
  View.accessibility(removeTraits:)(v39, v53, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v39, v59);
  v42 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v23, v41);
  v43 = v60;
  static ContentTransition.default.getter(v42);
  v44 = *(_QWORD *)(v30 + 40);
  LODWORD(v39) = *(_DWORD *)(v30 + 36);
  v46 = v61;
  v45 = v62;
  v47 = (uint64_t)v63;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v63, v43, v62);
  v48 = v64;
  *(_QWORD *)(v47 + *(int *)(v64 + 20)) = v44;
  *(_DWORD *)(v47 + *(int *)(v48 + 24)) = (_DWORD)v39;
  v49 = v65;
  sub_10001355C((uint64_t)v27, v65, &qword_100108148);
  v50 = sub_100008EF4(&qword_100108168);
  sub_1000134DC(v47, v49 + *(int *)(v50 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for _ContentTransitionModifier);
  swift_retain(v44);
  sub_100013520(v47, (uint64_t (*)(_QWORD))&type metadata accessor for _ContentTransitionModifier);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v43, v45);
  return sub_1000135A0((uint64_t)v27, &qword_100108148);
}

uint64_t sub_100043610@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v46;
  int v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void *v53;
  _DWORD v54[66];
  _BYTE v55[264];
  _BYTE v56[257];
  _BYTE v57[257];
  _OWORD v58[11];
  _OWORD v59[12];

  v53 = a2;
  v3 = type metadata accessor for TVWidgetFeatured(0);
  __chkstk_darwin(v3);
  v50 = (uint64_t)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_100108170);
  v6 = __chkstk_darwin(v5);
  v52 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v51 = (char *)&v46 - v8;
  v9 = type metadata accessor for Color.RGBColorSpace(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + *(int *)(v3 + 28));
  v48 = *(id *)(v13 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_image);
  v49 = v13;
  v47 = *(unsigned __int8 *)(v13 + 73);
  v46 = v3;
  v14 = (_BYTE *)(a1 + *(int *)(v3 + 20));
  v15 = v14[81];
  LOBYTE(v3) = v14[82];
  v16 = v48;
  sub_100043B80(v15, v3, (uint64_t)v58);
  *(_OWORD *)((char *)&v59[7] + 7) = v58[7];
  *(_OWORD *)((char *)&v59[8] + 7) = v58[8];
  *(_OWORD *)((char *)&v59[9] + 7) = v58[9];
  *(_OWORD *)((char *)&v59[10] + 7) = v58[10];
  *(_OWORD *)((char *)&v59[3] + 7) = v58[3];
  *(_OWORD *)((char *)&v59[4] + 7) = v58[4];
  *(_OWORD *)((char *)&v59[5] + 7) = v58[5];
  *(_OWORD *)((char *)&v59[6] + 7) = v58[6];
  *(_OWORD *)((char *)v59 + 7) = v58[0];
  *(_OWORD *)((char *)&v59[1] + 7) = v58[1];
  *(_OWORD *)((char *)&v59[2] + 7) = v58[2];
  if (v14[80] == 1)
  {
    v18 = static Alignment.center.getter(v17);
    v20 = v19;
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for Color.RGBColorSpace.sRGB(_:), v9);
    v21 = Color.init(_:red:green:blue:opacity:)(v12, 0.0941176471, 0.0941176471, 0.0941176471, 1.0);
    *(_QWORD *)v56 = v48;
    v56[8] = v47;
    *(_OWORD *)&v56[137] = v59[8];
    *(_OWORD *)&v56[153] = v59[9];
    *(_OWORD *)&v56[169] = v59[10];
    *(_OWORD *)&v56[73] = v59[4];
    *(_OWORD *)&v56[89] = v59[5];
    *(_OWORD *)&v56[105] = v59[6];
    *(_OWORD *)&v56[121] = v59[7];
    *(_OWORD *)&v56[9] = v59[0];
    *(_OWORD *)&v56[25] = v59[1];
    *(_OWORD *)&v56[41] = v59[2];
    *(_OWORD *)&v56[57] = v59[3];
    *(_QWORD *)&v56[184] = *(_QWORD *)((char *)&v59[10] + 15);
    *(_QWORD *)&v56[192] = v18;
    *(_QWORD *)&v56[200] = v20;
    *(_QWORD *)&v56[208] = v21;
    v56[216] = 2;
    *(_DWORD *)&v56[217] = v54[0];
    *(_DWORD *)&v56[220] = *(_DWORD *)((char *)v54 + 3);
    __asm { FMOV            V1.2D, #1.0 }
    *(_OWORD *)&v56[224] = xmmword_1000C9770;
    *(_OWORD *)&v56[240] = _Q1;
    sub_100045930((uint64_t)v56);
  }
  else
  {
    *(_OWORD *)&v56[137] = v59[8];
    *(_OWORD *)&v56[153] = v59[9];
    *(_OWORD *)&v56[169] = v59[10];
    *(_OWORD *)&v56[73] = v59[4];
    *(_OWORD *)&v56[89] = v59[5];
    *(_OWORD *)&v56[105] = v59[6];
    *(_OWORD *)&v56[121] = v59[7];
    *(_OWORD *)&v56[9] = v59[0];
    *(_OWORD *)&v56[25] = v59[1];
    *(_OWORD *)&v56[41] = v59[2];
    *(_QWORD *)v56 = v48;
    v56[8] = v47;
    *(_QWORD *)&v56[184] = *(_QWORD *)((char *)&v59[10] + 15);
    *(_OWORD *)&v56[57] = v59[3];
    sub_1000456F4((uint64_t)v56);
  }
  sub_100013880((uint64_t)v56, (uint64_t)v55, &qword_100108178);
  v27 = sub_100008EF4(&qword_100108180);
  v28 = sub_100045700();
  v29 = sub_100045784();
  _ConditionalContent<>.init(storage:)(v55, v27, &type metadata for TVWidgetImageView, v28, v29);
  v31 = (uint64_t)v51;
  v30 = (uint64_t)v52;
  v32 = v50;
  memcpy(v56, v57, sizeof(v56));
  v33 = *(_QWORD *)(v49 + 24);
  if (!v33)
  {
    sub_1000134DC(a1, v50, type metadata accessor for TVWidgetFeatured);
    goto LABEL_11;
  }
  if ((v33 & 0x2000000000000000) != 0)
    v34 = HIBYTE(v33) & 0xF;
  else
    v34 = *(_QWORD *)(v49 + 16) & 0xFFFFFFFFFFFFLL;
  sub_1000134DC(a1, v50, type metadata accessor for TVWidgetFeatured);
  if (!v34)
  {
LABEL_11:
    v36 = *(_QWORD *)(v32 + *(int *)(v46 + 28));
    v37 = *(_QWORD *)(v36 + 40);
    if (v37)
    {
      v38 = *(_QWORD *)(v36 + 32) & 0xFFFFFFFFFFFFLL;
      if ((v37 & 0x2000000000000000) != 0)
        v39 = HIBYTE(v37) & 0xF;
      else
        v39 = v38;
      v35 = sub_100013520(v32, type metadata accessor for TVWidgetFeatured);
      if (v39)
        goto LABEL_16;
    }
    else
    {
      sub_100013520(v32, type metadata accessor for TVWidgetFeatured);
    }
    v42 = sub_100008EF4(&qword_1001081A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v31, 1, 1, v42);
    goto LABEL_19;
  }
  v35 = sub_100013520(v32, type metadata accessor for TVWidgetFeatured);
LABEL_16:
  *(_QWORD *)v31 = static HorizontalAlignment.center.getter(v35);
  *(_QWORD *)(v31 + 8) = 0;
  *(_BYTE *)(v31 + 16) = 1;
  v40 = sub_100008EF4(&qword_100108198);
  sub_100044060(a1, v31 + *(int *)(v40 + 44));
  v41 = sub_100008EF4(&qword_1001081A0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v31, 0, 1, v41);
LABEL_19:
  v43 = v53;
  sub_10001355C(v31, v30, &qword_100108170);
  memcpy(v54, v56, 0x101uLL);
  memcpy(v43, v56, 0x101uLL);
  v44 = sub_100008EF4(&qword_1001081A8);
  sub_10001355C(v30, (uint64_t)v43 + *(int *)(v44 + 48), &qword_100108170);
  sub_10004583C((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000457C8);
  sub_1000135A0(v31, &qword_100108170);
  sub_1000135A0(v30, &qword_100108170);
  memcpy(v55, v56, 0x101uLL);
  return sub_10004583C((uint64_t)v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000458C0);
}

__n128 sub_100043B80@<Q0>(int a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  void *v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __n128 result;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __n128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD v71[2];
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  char v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  double v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  char v92;
  _BYTE v93[48];
  void *v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _QWORD v99[8];
  _QWORD v100[8];
  __int128 v101;
  __int128 v102;
  _QWORD v103[7];

  LODWORD(v53) = a1;
  v55 = a3;
  v3 = a2 & 1;
  v4 = type metadata accessor for WidgetFamily(0);
  v54 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for Color.RGBColorSpace(0);
  v7 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000279D0((uint64_t)v99);
  v10 = v99[0];
  v11 = v99[1];
  v12 = v99[2];
  v13 = v99[3];
  v14 = v99[4];
  v15 = v99[5];
  v16 = (void *)v100[6];
  sub_100013880((uint64_t)v100, (uint64_t)v103, &qword_100107230);
  v87 = v10;
  v88 = v11;
  *(_QWORD *)&v89 = v12;
  *((_QWORD *)&v89 + 1) = v13;
  v90 = v14;
  *(_QWORD *)&v91 = v15;
  sub_100013880((uint64_t)v103, (uint64_t)v93, &qword_100107230);
  v94 = v16;
  v96 = v101;
  v97 = v102;
  *((_QWORD *)&v91 + 1) = 0;
  v59 = v3;
  v92 = v3;
  v57 = v14;
  v58 = v11;
  v56 = v16;
  if ((v53 & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Color.RGBColorSpace.sRGB(_:), v52);
    swift_retain(v11);
    swift_retain(v14);
    v17 = v16;
    v18 = Color.init(_:red:green:blue:opacity:)(v9, 0.0941176471, 0.0941176471, 0.0941176471, 1.0);
    sub_1000459DC(v103);
    *(_OWORD *)&v93[8] = xmmword_1000C9780;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)&v93[24] = _Q0;
    *(_QWORD *)v93 = v18;
    *(_QWORD *)&v93[40] = 0x3FD0000000000000;
  }
  else
  {
    swift_retain(v11);
    swift_retain(v14);
    v24 = v16;
  }
  v95 = 0x4034000000000000;
  v53 = xmmword_1000C9790;
  v98 = xmmword_1000C9790;
  type metadata accessor for TVWidgetFeatured(0);
  v25 = v54;
  v26 = *(void (**)(char *, _QWORD, uint64_t))(v54 + 104);
  v26(v6, enum case for WidgetFamily.systemLarge(_:), v4);
  v27 = sub_1000139F8((unint64_t *)&qword_100106F20, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(v71, v4, v27);
  dispatch thunk of RawRepresentable.rawValue.getter(&v60, v4, v27);
  v28 = v71[0];
  v29 = v60;
  v30 = *(void (**)(char *, uint64_t))(v25 + 8);
  v30(v6, v4);
  if (v28 == v29)
  {
    v96 = xmmword_1000C97A0;
    v97 = 0uLL;
    v31 = 11.0;
    v32 = 16.0;
    v33 = 0;
    v34 = 0;
  }
  else
  {
    v26(v6, enum case for WidgetFamily.systemExtraLarge(_:), v4);
    dispatch thunk of RawRepresentable.rawValue.getter(v71, v4, v27);
    dispatch thunk of RawRepresentable.rawValue.getter(&v60, v4, v27);
    v35 = v71[0];
    v36 = v60;
    v30(v6, v4);
    if (v35 == v36)
    {
      __asm { FMOV            V0.2D, #8.0 }
      v96 = _Q0;
      v97 = 0uLL;
      v32 = 8.0;
      v33 = 0;
      v34 = 0;
      v31 = 8.0;
    }
    else
    {
      v32 = *((double *)&v96 + 1);
      v31 = *(double *)&v96;
      v33 = *((_QWORD *)&v97 + 1);
      v34 = v97;
    }
  }
  v39 = v57;
  v38 = v58;
  v40 = *(_QWORD *)v93;
  v41 = *(_OWORD *)&v93[8];
  v42 = *(_OWORD *)&v93[24];
  v43 = *(_QWORD *)&v93[40];
  *(_QWORD *)&v60 = v10;
  *((_QWORD *)&v60 + 1) = v58;
  *(_QWORD *)&v61 = v12;
  *((_QWORD *)&v61 + 1) = v13;
  *(_QWORD *)&v62 = v57;
  *((_QWORD *)&v62 + 1) = v15;
  v63.n128_u64[0] = 0;
  v63.n128_u8[8] = v59;
  v64 = *(_OWORD *)v93;
  v65 = *(_OWORD *)&v93[16];
  v66 = *(_OWORD *)&v93[32];
  v44 = v56;
  *(_QWORD *)&v67 = v56;
  *((_QWORD *)&v67 + 1) = 0x4034000000000000;
  *(double *)&v68 = v31;
  *((double *)&v68 + 1) = v32;
  *(_QWORD *)&v69 = v34;
  *((_QWORD *)&v69 + 1) = v33;
  v70 = v53;
  sub_100045938(&v60);
  swift_release(v38);
  swift_release(v39);

  v71[0] = v87;
  v71[1] = v88;
  v72 = v89;
  v73 = v90;
  v74 = v91;
  v75 = v92;
  v76 = v40;
  v77 = v41;
  v78 = v42;
  v79 = v43;
  v80 = v94;
  v81 = v95;
  v82 = v31;
  v83 = v32;
  v84 = v34;
  v85 = v33;
  v86 = v98;
  sub_100045988((uint64_t)v71);
  v45 = v69;
  v46 = v55;
  *(_OWORD *)(v55 + 128) = v68;
  *(_OWORD *)(v46 + 144) = v45;
  *(_OWORD *)(v46 + 160) = v70;
  v47 = v65;
  *(_OWORD *)(v46 + 64) = v64;
  *(_OWORD *)(v46 + 80) = v47;
  v48 = v67;
  *(_OWORD *)(v46 + 96) = v66;
  *(_OWORD *)(v46 + 112) = v48;
  v49 = v61;
  *(_OWORD *)v46 = v60;
  *(_OWORD *)(v46 + 16) = v49;
  result = v63;
  *(_OWORD *)(v46 + 32) = v62;
  *(__n128 *)(v46 + 48) = result;
  return result;
}

uint64_t sub_100044060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[24];
  _BYTE v82[24];
  _OWORD v83[3];
  _OWORD v84[2];
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;

  v80 = a2;
  v3 = sub_100008EF4(&qword_100105F48);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v72 - v7;
  v9 = type metadata accessor for TVWidgetMetadataView(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v74 = sub_100008EF4(&qword_1001081B0);
  __chkstk_darwin(v74);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100008EF4(&qword_1001081B8);
  v14 = __chkstk_darwin(v77);
  v79 = (uint64_t)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v76 = (uint64_t)&v72 - v17;
  __chkstk_darwin(v16);
  v78 = (uint64_t)&v72 - v18;
  v75 = type metadata accessor for TVWidgetFeatured(0);
  v19 = a1;
  v20 = *(_QWORD **)(a1 + *(int *)(v75 + 28));
  v21 = v20[3];
  v73 = v20[2];
  v22 = v20[5];
  v72 = v20[4];
  if (*((_BYTE *)v20 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_isExpiring) == 1)
  {
    v23 = (uint64_t)v20 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate;
    swift_beginAccess((char *)v20 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate, v81, 0, 0);
    sub_10001355C(v23, (uint64_t)v8, &qword_100105F48);
  }
  else
  {
    v24 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 1, 1, v24);
  }
  v25 = (uint64_t)v20 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate;
  swift_beginAccess((char *)v20 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate, v82, 0, 0);
  sub_10001355C(v25, (uint64_t)v6, &qword_100105F48);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v21);
  sub_1000445AC((uint64_t)v6, type metadata accessor for TVWidgetFeatured, (uint64_t)v83);
  sub_1000135A0((uint64_t)v6, &qword_100105F48);
  *v11 = v73;
  v11[1] = v21;
  v11[2] = v72;
  v11[3] = v22;
  v26 = sub_100013880((uint64_t)v8, (uint64_t)v11 + *(int *)(v9 + 24), &qword_100105F48);
  v27 = (_OWORD *)((char *)v11 + *(int *)(v9 + 28));
  v28 = v84[0];
  v27[2] = v83[2];
  v27[3] = v28;
  *(_OWORD *)((char *)v27 + 57) = *(_OWORD *)((char *)v84 + 9);
  v29 = v83[1];
  *v27 = v83[0];
  v27[1] = v29;
  v30 = static Edge.Set.leading.getter(v26);
  v31 = Edge.Set.init(rawValue:)(0);
  v32 = v31;
  v33 = Edge.Set.init(rawValue:)(v31);
  if (Edge.Set.init(rawValue:)(v33 & v30) != v30)
    LOBYTE(v32) = Edge.Set.init(rawValue:)(v32 | v30);
  v34 = v75;
  v35 = v19 + *(int *)(v75 + 20);
  v36 = EdgeInsets.init(_all:)(*(double *)(v35 + 8));
  v38 = v37;
  v40 = v39;
  v42 = v41;
  sub_1000134DC((uint64_t)v11, (uint64_t)v13, type metadata accessor for TVWidgetMetadataView);
  v43 = &v13[*(int *)(v74 + 36)];
  *v43 = v32;
  *((double *)v43 + 1) = v36;
  *((_QWORD *)v43 + 2) = v38;
  *((_QWORD *)v43 + 3) = v40;
  *((_QWORD *)v43 + 4) = v42;
  v43[40] = 0;
  v44 = sub_100013520((uint64_t)v11, type metadata accessor for TVWidgetMetadataView);
  v45 = static Edge.Set.trailing.getter(v44);
  v46 = Edge.Set.init(rawValue:)(0);
  v47 = v46;
  v48 = Edge.Set.init(rawValue:)(v46);
  if (Edge.Set.init(rawValue:)(v48 & v45) != v45)
    LOBYTE(v47) = Edge.Set.init(rawValue:)(v47 | v45);
  v49 = EdgeInsets.init(_all:)(*(double *)(v35 + 16));
  v51 = v50;
  v53 = v52;
  v55 = v54;
  v56 = v76;
  sub_10001355C((uint64_t)v13, v76, &qword_1001081B0);
  v57 = v56 + *(int *)(v77 + 36);
  *(_BYTE *)v57 = v47;
  *(double *)(v57 + 8) = v49;
  *(_QWORD *)(v57 + 16) = v51;
  *(_QWORD *)(v57 + 24) = v53;
  *(_QWORD *)(v57 + 32) = v55;
  *(_BYTE *)(v57 + 40) = 0;
  sub_1000135A0((uint64_t)v13, &qword_1001081B0);
  v58 = v78;
  sub_100013880(v56, v78, &qword_1001081B8);
  v59 = sub_1000276F4(v19 + *(int *)(v34 + 24));
  v61 = static Alignment.center.getter(v60);
  _FrameLayout.init(width:height:alignment:)(&v85, 0, 1, *(_QWORD *)&v59, 0, v61, v62);
  v63 = v85;
  LOBYTE(v56) = v86;
  v64 = v87;
  v65 = v88;
  v66 = v89;
  v67 = v90;
  v68 = v79;
  sub_10001355C(v58, v79, &qword_1001081B8);
  v69 = v80;
  sub_10001355C(v68, v80, &qword_1001081B8);
  v70 = v69 + *(int *)(sub_100008EF4(&qword_1001081C0) + 48);
  *(_QWORD *)v70 = 0;
  *(_BYTE *)(v70 + 8) = 1;
  *(_QWORD *)(v70 + 16) = v63;
  *(_BYTE *)(v70 + 24) = v56;
  *(_QWORD *)(v70 + 32) = v64;
  *(_BYTE *)(v70 + 40) = v65;
  *(_QWORD *)(v70 + 48) = v66;
  *(_QWORD *)(v70 + 56) = v67;
  sub_1000135A0(v58, &qword_1001081B8);
  return sub_1000135A0(v68, &qword_1001081B8);
}

uint64_t sub_1000445AC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int HasExuberatedLineHeight;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  BOOL v45;
  char *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t (*v52)(_QWORD);
  uint64_t result;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t (*v63)(_QWORD);
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;

  v63 = a2;
  v61 = a1;
  v5 = sub_100008EF4(&qword_100105F48);
  __chkstk_darwin(v5);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v59 = v8;
  v60 = v9;
  v10 = __chkstk_darwin(v8);
  v57 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v56 = (char *)&v54 - v13;
  __chkstk_darwin(v12);
  v55 = (char *)&v54 - v14;
  v58 = type metadata accessor for DynamicTypeSize(0);
  v15 = *(_QWORD *)(v58 - 8);
  v16 = __chkstk_darwin(v58);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = static Color.primary.getter(v16);
  v20 = static Color.secondary.getter();
  v21 = static Font.caption2.getter();
  v22 = static Font.caption2.getter();
  v23 = Font.smallCaps()();
  swift_release(v22);
  HasExuberatedLineHeight = CTFontHasExuberatedLineHeight(0);
  v65 = v19;
  v66 = 1;
  v67 = 0;
  v68 = v20;
  v69 = v21;
  v70 = v23;
  v71 = 0;
  v72 = 1;
  v73 = 0;
  v62 = HasExuberatedLineHeight;
  v74 = HasExuberatedLineHeight;
  v64 = 1;
  v25 = v3 + *(int *)(v63(0) + 24);
  swift_retain_n(v19, 2);
  swift_retain_n(v23, 2);
  swift_retain(v20);
  swift_retain(v21);
  sub_10009FD4C((uint64_t)v18);
  v26 = v25;
  v27 = v19;
  v28 = v59;
  v29 = sub_10007B240(v26, (uint64_t)v18);
  v63 = (uint64_t (*)(_QWORD))v23;
  swift_release(v23);
  swift_release(v21);
  swift_release(v20);
  swift_release(v27);
  v30 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v58);
  v31 = static Font.subheadline.getter(v30);
  swift_retain(v31);
  v32 = v21;
  v33 = v60;
  swift_release(v32);
  sub_10001355C(v61, (uint64_t)v7, &qword_100105F48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v7, 1, v28) == 1)
  {
    sub_1000135A0((uint64_t)v7, &qword_100105F48);
    v34 = 0;
  }
  else
  {
    v35 = v55;
    v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v55, v7, v28);
    v37 = v57;
    v38 = Date.init()(v36);
    v39 = v56;
    Date.advanced(by:)(v38, 172800.0);
    v40 = *(void (**)(char *, uint64_t))(v33 + 8);
    v40(v37, v28);
    v41 = static Date.< infix(_:_:)(v35, v39);
    v42 = ((uint64_t (*)(char *, uint64_t))v40)(v39, v28);
    if ((v41 & 1) != 0)
    {
      v43 = Date.init()(v42);
      Date.advanced(by:)(v43, 3600.0);
      v40(v37, v28);
      v44 = static Date.< infix(_:_:)(v35, v39);
      v42 = ((uint64_t (*)(char *, uint64_t))v40)(v39, v28);
      v45 = (v44 & 1) == 0;
      v46 = v37;
      if (v45)
        v34 = 32;
      else
        v34 = 64;
    }
    else
    {
      v46 = v37;
      v34 = 16;
    }
    v64 = 0;
    v47 = Date.init()(v42);
    Date.advanced(by:)(v47, 432000.0);
    v40(v46, v28);
    v48 = static Date.< infix(_:_:)(v35, v39);
    v49 = ((uint64_t (*)(char *, uint64_t))v40)(v39, v28);
    if ((v48 & 1) != 0)
    {
      v50 = static Color.red.getter(v49);
      v40(v35, v28);
      swift_release(v20);
      v20 = v50;
    }
    else
    {
      v40(v35, v28);
    }
  }
  v51 = v64;
  v52 = v63;
  swift_release(v63);
  swift_release(v31);
  result = swift_release(v27);
  *(_QWORD *)a3 = v27;
  *(_QWORD *)(a3 + 8) = 1;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = v20;
  *(_QWORD *)(a3 + 32) = v31;
  *(_QWORD *)(a3 + 40) = v52;
  *(_QWORD *)(a3 + 48) = v34;
  *(_BYTE *)(a3 + 56) = v51;
  *(double *)(a3 + 64) = v29;
  *(_BYTE *)(a3 + 72) = v62;
  return result;
}

uint64_t sub_1000449E8()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_100045C7C();
  result = HorizontalAlignment.init(_:)(&_s16DividerAlignmentON, v0);
  qword_10011EE18 = result;
  return result;
}

void sub_100044A1C(char *a1@<X8>)
{
  uint64_t v1;

  sub_1000404F8(*(_QWORD *)(v1 + 16), type metadata accessor for TVWidgetFeatured, a1);
}

void sub_100044A3C(char *a1@<X8>)
{
  uint64_t v1;

  sub_1000404F8(*(_QWORD *)(v1 + 16), type metadata accessor for TVWidgetCell, a1);
}

void sub_100044A5C(char *a1@<X8>)
{
  uint64_t v1;

  sub_1000404F8(*(_QWORD *)(v1 + 16), type metadata accessor for TVWidgetLockup, a1);
}

uint64_t sub_100044A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100044AA0);
}

uint64_t sub_100044AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100044AB0);
}

_QWORD *sub_100044AB8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    sub_1000135A0((uint64_t)a1, &qword_100105F38);
    v6 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)((char *)a2 + v12);
  *((_QWORD *)v13 + 1) = *(_QWORD *)((char *)a2 + v12 + 8);
  *((_QWORD *)v13 + 2) = *(_QWORD *)((char *)a2 + v12 + 16);
  *((_QWORD *)v13 + 3) = *(_QWORD *)((char *)a2 + v12 + 24);
  v13[32] = *((_BYTE *)a2 + v12 + 32);
  *((_DWORD *)v13 + 9) = *(_DWORD *)((char *)a2 + v12 + 36);
  v15 = *(_QWORD *)((char *)a2 + v12 + 40);
  v16 = *(_QWORD *)((char *)a1 + v12 + 40);
  *((_QWORD *)v13 + 5) = v15;
  swift_retain(v15);
  swift_release(v16);
  *((_QWORD *)v13 + 6) = *((_QWORD *)v14 + 6);
  *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
  v13[64] = v14[64];
  *((_QWORD *)v13 + 9) = *((_QWORD *)v14 + 9);
  v13[80] = v14[80];
  v13[81] = v14[81];
  v13[82] = v14[82];
  *((_QWORD *)v13 + 11) = *((_QWORD *)v14 + 11);
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v21 = a3[7];
  v22 = *(_QWORD *)((char *)a2 + v21);
  v23 = *(_QWORD *)((char *)a1 + v21);
  *(_QWORD *)((char *)a1 + v21) = v22;
  swift_retain(v22);
  swift_release(v23);
  return a1;
}

char *sub_100044C54(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    sub_1000135A0((uint64_t)a1, &qword_100105F38);
    v6 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_OWORD *)&a2[v8 + 16];
  *(_OWORD *)v9 = *(_OWORD *)&a2[v8];
  *((_OWORD *)v9 + 1) = v11;
  v9[32] = a2[v8 + 32];
  *((_DWORD *)v9 + 9) = *(_DWORD *)&a2[v8 + 36];
  v12 = *(_QWORD *)&a1[v8 + 40];
  *((_QWORD *)v9 + 5) = *(_QWORD *)&a2[v8 + 40];
  swift_release(v12);
  *((_OWORD *)v9 + 3) = *((_OWORD *)v10 + 3);
  v9[64] = v10[64];
  *((_QWORD *)v9 + 9) = *((_QWORD *)v10 + 9);
  v9[80] = v10[80];
  v9[81] = v10[81];
  v9[82] = v10[82];
  v13 = *((_QWORD *)v10 + 11);
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *((_QWORD *)v9 + 11) = v13;
  v17 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = a3[7];
  v19 = *(_QWORD *)&a1[v18];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  swift_release(v19);
  return a1;
}

uint64_t sub_100044DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100044DC8);
}

uint64_t sub_100044DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100044DD8);
}

uint64_t *sub_100044DDC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    v18 = *((_OWORD *)v17 + 1);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + 1) = v18;
    v16[32] = v17[32];
    *((_DWORD *)v16 + 9) = *((_DWORD *)v17 + 9);
    v16[64] = v17[64];
    *((_QWORD *)v16 + 9) = *((_QWORD *)v17 + 9);
    v16[80] = v17[80];
    v16[81] = v17[81];
    v16[82] = v17[82];
    v19 = *((_QWORD *)v17 + 5);
    *((_QWORD *)v16 + 5) = v19;
    v20 = *((_OWORD *)v17 + 3);
    *((_QWORD *)v16 + 11) = *((_QWORD *)v17 + 11);
    v21 = (char *)a1 + v15;
    v22 = (char *)a2 + v15;
    *((_OWORD *)v16 + 3) = v20;
    v23 = type metadata accessor for WidgetFamily(0);
    v24 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v23 - 8) + 16);
    v25 = swift_retain(v19);
    v24(v21, v22, v23, v25);
    v26 = a3[7];
    v12 = *(uint64_t *)((char *)a2 + v26);
    *(uint64_t *)((char *)a1 + v26) = v12;
  }
  swift_retain(v12);
  return a1;
}

uint64_t sub_100044F5C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v4 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[5] + 40));
  v6 = (char *)a1 + a2[6];
  v7 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_release(*(_QWORD *)((char *)a1 + a2[7]));
}

uint64_t *sub_100045008(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;

  v6 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  v14[32] = v15[32];
  *((_DWORD *)v14 + 9) = *((_DWORD *)v15 + 9);
  v14[64] = v15[64];
  *((_QWORD *)v14 + 9) = *((_QWORD *)v15 + 9);
  v14[80] = v15[80];
  v14[81] = v15[81];
  v14[82] = v15[82];
  v17 = *((_QWORD *)v15 + 5);
  *((_QWORD *)v14 + 5) = v17;
  v18 = *((_OWORD *)v15 + 3);
  *((_QWORD *)v14 + 11) = *((_QWORD *)v15 + 11);
  v19 = (char *)a1 + v13;
  v20 = (char *)a2 + v13;
  *((_OWORD *)v14 + 3) = v18;
  v21 = type metadata accessor for WidgetFamily(0);
  v22 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v21 - 8) + 16);
  v23 = swift_retain(v17);
  v22(v19, v20, v21, v23);
  v24 = a3[7];
  v25 = *(uint64_t *)((char *)a2 + v24);
  *(uint64_t *)((char *)a1 + v24) = v25;
  swift_retain(v25);
  return a1;
}

char *sub_100045160(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *((_OWORD *)v11 + 3);
  *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
  *((_OWORD *)v10 + 3) = v12;
  v13 = *((_OWORD *)v11 + 5);
  *((_OWORD *)v10 + 4) = *((_OWORD *)v11 + 4);
  *((_OWORD *)v10 + 5) = v13;
  v14 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v14;
  v15 = &a1[v9];
  v16 = &a2[v9];
  v17 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

uint64_t sub_10004525C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100045268);
}

uint64_t sub_10004526C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_100008EF4(&qword_100105F58);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 40);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_10004531C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100045328);
}

uint64_t sub_10004532C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_100008EF4(&qword_100105F58);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 40) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for WidgetFamily(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000453D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_10000C6C4(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1000C94A0;
    v4 = type metadata accessor for WidgetFamily(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t storeEnumTagSinglePayload for TVWidgetContentViewType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000454BC + 4 * byte_1000C943D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000454F0 + 4 * byte_1000C9438[v4]))();
}

uint64_t sub_1000454F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000454F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100045500);
  return result;
}

uint64_t sub_10004550C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100045514);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100045518(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100045520(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TVWidgetContentViewType()
{
  return &type metadata for TVWidgetContentViewType;
}

uint64_t sub_10004553C()
{
  return sub_100045570(&qword_100108118, &qword_100108120, (void (*)(void))sub_100040A24, (void (*)(void))sub_100040CD0);
}

uint64_t sub_100045570(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100008F80(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000455E4()
{
  unint64_t result;

  result = qword_100108128;
  if (!qword_100108128)
  {
    result = swift_getWitnessTable(&unk_1000C95C8, &type metadata for TVWidgetContentViewType);
    atomic_store(result, (unint64_t *)&qword_100108128);
  }
  return result;
}

uint64_t sub_100045628(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D25B8, 1);
}

uint64_t sub_100045638(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2590, 1);
}

uint64_t sub_100045648(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2568, 1);
}

unint64_t sub_100045658()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108158;
  if (!qword_100108158)
  {
    v1 = sub_100008F80(&qword_100108138);
    sub_100013840(&qword_100108160, &qword_100108130, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_100013840(&qword_100107200, &qword_100107208, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100108158);
  }
  return result;
}

uint64_t sub_1000456F4(uint64_t result)
{
  *(_BYTE *)(result + 256) = 1;
  return result;
}

unint64_t sub_100045700()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108188;
  if (!qword_100108188)
  {
    v1 = sub_100008F80(&qword_100108180);
    sub_100045784();
    sub_100013840(&qword_100107220, &qword_100107228, (uint64_t)&protocol conformance descriptor for _MaskAlignmentEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100108188);
  }
  return result;
}

unint64_t sub_100045784()
{
  unint64_t result;

  result = qword_100108190;
  if (!qword_100108190)
  {
    result = swift_getWitnessTable(&unk_1000CEB74, &type metadata for TVWidgetImageView);
    atomic_store(result, (unint64_t *)&qword_100108190);
  }
  return result;
}

double sub_1000457C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  id v36;
  id v37;
  double result;

  swift_retain(a11);
  v36 = a17;
  if ((a33 & 1) == 0)
    swift_retain(a27);
  v37 = a1;
  swift_retain(a4);
  *(_QWORD *)&result = swift_retain(a7).n128_u64[0];
  return result;
}

uint64_t sub_10004583C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  __int128 v4;
  char v5;

  v5 = *(_BYTE *)(a1 + 256);
  v4 = *(_OWORD *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v5);
  return a1;
}

uint64_t sub_1000458C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  swift_release(a4);
  swift_release(a7);

  if ((a33 & 1) == 0)
    swift_release(a27);

  return swift_release(a11);
}

uint64_t sub_100045930(uint64_t result)
{
  *(_BYTE *)(result + 256) = 0;
  return result;
}

_QWORD *sub_100045938(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = a1[1];
  v3 = a1[4];
  v4 = (void *)a1[14];
  swift_retain(a1[8]);
  v5 = v4;
  swift_retain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_100045988(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 64);

  swift_release(v3);
  swift_release(v2);
  swift_release(v4);
  return a1;
}

_QWORD *sub_1000459DC(_QWORD *a1)
{
  swift_release(*a1);
  return a1;
}

uint64_t sub_100045A04()
{
  return sub_100045AA0(type metadata accessor for TVWidgetLockup);
}

uint64_t sub_100045A10(uint64_t a1)
{
  return sub_100045BA0(a1, type metadata accessor for TVWidgetLockup, (uint64_t (*)(uint64_t, uint64_t))sub_100040CFC);
}

uint64_t sub_100045A24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100041CE4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100045A2C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(void **)(a1 + 128);
  swift_retain(*(_QWORD *)(a1 + 80));
  v6 = v5;
  v7 = v2;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_100045A94()
{
  return sub_100045AA0(type metadata accessor for TVWidgetCell);
}

uint64_t sub_100045AA0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v2 = (int *)a1(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = (_QWORD *)(v1 + v5);
  v8 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(v1 + v5, v8) == 1)
  {
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v1 + v5, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = v5 + v6;
  swift_release(*(_QWORD *)((char *)v7 + v2[5] + 40));
  v11 = (char *)v7 + v2[6];
  v12 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_release(*(_QWORD *)((char *)v7 + v2[7]));
  return swift_deallocObject(v1, v10, v4 | 7);
}

uint64_t sub_100045B8C(uint64_t a1)
{
  return sub_100045BA0(a1, type metadata accessor for TVWidgetCell, (uint64_t (*)(uint64_t, uint64_t))sub_1000421E0);
}

uint64_t sub_100045BA0(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

unint64_t sub_100045BFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108290;
  if (!qword_100108290)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100108290);
  }
  return result;
}

unint64_t sub_100045C38()
{
  unint64_t result;

  result = qword_100108298;
  if (!qword_100108298)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100108298);
  }
  return result;
}

unint64_t sub_100045C7C()
{
  unint64_t result;

  result = qword_1001082B0;
  if (!qword_1001082B0)
  {
    result = swift_getWitnessTable(&unk_1000C9724, &_s16DividerAlignmentON);
    atomic_store(result, (unint64_t *)&qword_1001082B0);
  }
  return result;
}

ValueMetadata *_s16DividerAlignmentOMa()
{
  return &_s16DividerAlignmentON;
}

unint64_t sub_100045CD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001082B8;
  if (!qword_1001082B8)
  {
    v1 = sub_100008F80(&qword_100108168);
    sub_100045D40();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001082B8);
  }
  return result;
}

unint64_t sub_100045D40()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001082C0;
  if (!qword_1001082C0)
  {
    v1 = sub_100008F80(&qword_100108148);
    v2[0] = sub_100008F80(&qword_100108138);
    v2[1] = sub_100045658();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_1000139F8(&qword_1001063D0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001082C0);
  }
  return result;
}

uint64_t sub_100045DEC()
{
  return sub_100013840(&qword_1001082C8, &qword_1001082D0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

unint64_t sub_100045E1C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001082D8;
  if (!qword_1001082D8)
  {
    v1 = sub_100008F80(&qword_1001082E0);
    v2[0] = sub_100008F80(&qword_100108238);
    v2[1] = sub_100013840(&qword_100108240, &qword_100108238, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_1000139F8(&qword_1001063D0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001082D8);
  }
  return result;
}

id sub_100045EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id result;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __n128 v42;
  char *v43;
  id v44;
  Class isa;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void **aBlock;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  char v63[24];

  v56 = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v55 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URLRequest(0);
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  __chkstk_darwin(v10);
  v50 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008EF4(&qword_100105F50);
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v50 - v20;
  v22 = v2 + OBJC_IVAR____TtC17TVWidgetExtension19TVWidgetImageLoader_url;
  swift_beginAccess(v22, v63, 0, 0);
  sub_1000469A0(v22, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_1000469E8((uint64_t)v14);
    sub_100046A28();
    v24 = (void *)static OS_dispatch_queue.main.getter(v23);
    v25 = swift_allocObject(&unk_1000FA948, 32, 7);
    *(_QWORD *)(v25 + 16) = v56;
    *(_QWORD *)(v25 + 24) = a2;
    v61 = sub_100046C90;
    v62 = v25;
    aBlock = _NSConcreteStackBlock;
    v58 = 1107296256;
    v59 = sub_10006D250;
    v60 = &unk_1000FA960;
    v26 = _Block_copy(&aBlock);
    v27 = v62;
    swift_retain(a2);
    v28 = swift_release(v27);
    static DispatchQoS.unspecified.getter(v28);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v29 = sub_100046AA0();
    v30 = sub_100008EF4(&qword_100108410);
    v31 = sub_100046AE8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v30, v31, v4, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v26);
    _Block_release(v26);

    (*(void (**)(char *, uint64_t))(v55 + 8))(v6, v4);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v9, v54);
  }
  else
  {
    v33 = v56;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v14, v15);
    result = sub_100006398();
    if (result)
    {
      v34 = result;
      v35 = sub_100008EF4(&qword_100106918);
      v36 = swift_allocObject(v35, 72, 7);
      *(_OWORD *)(v36 + 16) = xmmword_1000C6710;
      v37 = URL.absoluteString.getter();
      v39 = v38;
      *(_QWORD *)(v36 + 56) = &type metadata for String;
      v40 = sub_10001A64C();
      *(_QWORD *)(v36 + 64) = v40;
      *(_QWORD *)(v36 + 32) = v37;
      *(_QWORD *)(v36 + 40) = v39;
      v41 = static os_log_type_t.default.getter(v40);
      os_log(_:dso:log:type:_:)("ImageLoader:: load - %@", 23, 2, &_mh_execute_header, v34, v41, v36);

      v42 = swift_bridgeObjectRelease(v36);
      (*(void (**)(char *, char *, uint64_t, __n128))(v16 + 16))(v19, v21, v15, v42);
      v43 = v50;
      URLRequest.init(url:cachePolicy:timeoutInterval:)(v19, 0, 10.0);
      v44 = objc_msgSend((id)objc_opt_self(NSURLSession), "sharedSession");
      isa = URLRequest._bridgeToObjectiveC()().super.isa;
      v46 = swift_allocObject(&unk_1000FA998, 32, 7);
      *(_QWORD *)(v46 + 16) = v33;
      *(_QWORD *)(v46 + 24) = a2;
      v61 = sub_100046B34;
      v62 = v46;
      aBlock = _NSConcreteStackBlock;
      v58 = 1107296256;
      v59 = sub_1000466D0;
      v60 = &unk_1000FA9B0;
      v47 = _Block_copy(&aBlock);
      v48 = v62;
      swift_retain(a2);
      swift_release(v48);
      v49 = objc_msgSend(v44, "dataTaskWithRequest:completionHandler:", isa, v47);
      _Block_release(v47);

      objc_msgSend(v49, "resume");
      (*(void (**)(char *, uint64_t))(v51 + 8))(v43, v52);
      return (id)(*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, v15);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000463CC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  void **aBlock;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  void *v42;
  uint64_t (*v43)();
  _QWORD *v44;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100046A28();
  if (a2 >> 60 == 15)
  {
    v18 = (void *)static OS_dispatch_queue.main.getter(v17);
    v19 = swift_allocObject(&unk_1000FA9E8, 32, 7);
    *(_QWORD *)(v19 + 16) = a5;
    *(_QWORD *)(v19 + 24) = a6;
    v43 = sub_100046B94;
    v44 = (_QWORD *)v19;
    aBlock = _NSConcreteStackBlock;
    v40 = 1107296256;
    v41 = sub_10006D250;
    v42 = &unk_1000FAA00;
    v20 = _Block_copy(&aBlock);
    v21 = v44;
    swift_retain(a6);
    v22 = swift_release(v21);
    static DispatchQoS.unspecified.getter(v22);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v23 = sub_100046AA0();
    v24 = sub_100008EF4(&qword_100108410);
    v25 = sub_100046AE8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v24, v25, v10, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v20);
    _Block_release(v20);

  }
  else
  {
    v26 = sub_100046BC0(a1, a2);
    v27 = static OS_dispatch_queue.main.getter(v26);
    v37 = v11;
    v28 = (void *)v27;
    v29 = (_QWORD *)swift_allocObject(&unk_1000FAA38, 48, 7);
    v29[2] = a5;
    v29[3] = a6;
    v29[4] = a1;
    v29[5] = a2;
    v43 = sub_100046C30;
    v44 = v29;
    aBlock = _NSConcreteStackBlock;
    v40 = 1107296256;
    v41 = sub_10006D250;
    v42 = &unk_1000FAA50;
    v30 = _Block_copy(&aBlock);
    v31 = v44;
    swift_retain(a6);
    sub_100046C5C(a1, a2);
    v32 = swift_release(v31);
    static DispatchQoS.unspecified.getter(v32);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v33 = sub_100046AA0();
    v34 = sub_100008EF4(&qword_100108410);
    v35 = sub_100046AE8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v34, v35, v10, v33);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v30);
    _Block_release(v30);

    v11 = v37;
    sub_100046B3C(a1, a2);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v38);
}

uint64_t sub_1000466D0(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v6;
  uint64_t v7;
  void (*v8)(void *, unint64_t, void *, void *);
  id v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  id v13;

  v6 = a2;
  v8 = *(void (**)(void *, unint64_t, void *, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    swift_retain(v7);
    v9 = v6;
    v6 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v11 = v10;

  }
  else
  {
    swift_retain(v7);
    v11 = 0xF000000000000000;
  }
  v12 = a3;
  v13 = a4;
  v8(v6, v11, a3, a4);

  sub_100046B3C((uint64_t)v6, v11);
  return swift_release(v7);
}

uint64_t sub_100046780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC17TVWidgetExtension19TVWidgetImageLoader__identifier;
  v2 = sub_100008EF4(&qword_100108420);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1000469E8(v0 + OBJC_IVAR____TtC17TVWidgetExtension19TVWidgetImageLoader_url);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000467E4()
{
  return type metadata accessor for TVWidgetImageLoader(0);
}

uint64_t type metadata accessor for TVWidgetImageLoader(uint64_t a1)
{
  uint64_t result;

  result = qword_100108318;
  if (!qword_100108318)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TVWidgetImageLoader);
  return result;
}

void sub_100046828(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_1000468B0();
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100046904(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

void sub_1000468B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100108328)
  {
    v0 = type metadata accessor for Published(0, &type metadata for String);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100108328);
  }
}

void sub_100046904(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100106A88)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100106A88);
  }
}

void *sub_100046958()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_100046964@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for TVWidgetImageLoader(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000469A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008EF4(&qword_100105F50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000469E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008EF4(&qword_100105F50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100046A28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108400;
  if (!qword_100108400)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100108400);
  }
  return result;
}

uint64_t sub_100046A64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

double sub_100046A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_100046A98(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100046AA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108408;
  if (!qword_100108408)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100108408);
  }
  return result;
}

unint64_t sub_100046AE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108418;
  if (!qword_100108418)
  {
    v1 = sub_100008F80(&qword_100108410);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100108418);
  }
  return result;
}

uint64_t sub_100046B34(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000463CC(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_100046B3C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100046B50(result, a2);
  return result;
}

uint64_t sub_100046B50(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100046B94()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, unint64_t))(v0 + 16))(0, 0, 0xF000000000000000);
}

double sub_100046BC0(uint64_t a1, unint64_t a2)
{
  double result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(a1);
  }
  *(_QWORD *)&result = swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL).n128_u64[0];
  return result;
}

uint64_t sub_100046C04()
{
  _QWORD *v0;

  swift_release(v0[3]);
  sub_100046B50(v0[4], v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100046C30()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v0 + 16))(1, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

double sub_100046C5C(uint64_t a1, unint64_t a2)
{
  double result;

  if (a2 >> 60 != 15)
    return sub_100046BC0(a1, a2);
  return result;
}

_QWORD *sub_100046C94(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v3 = a2;
  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = a3;
    v7 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(v3, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, v3, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *v3;
      *v4 = *v3;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(v6 + 20);
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (char *)v3 + v14;
    v17 = type metadata accessor for SportsWidgetClock(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v17);
    v19 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v68 = v17;
      v70 = v6;
      v24 = *((_QWORD *)v16 + 1);
      *v15 = *(_QWORD *)v16;
      v15[1] = v24;
      v25 = *((_QWORD *)v16 + 3);
      v15[2] = *((_QWORD *)v16 + 2);
      v15[3] = v25;
      v65 = *((_QWORD *)v16 + 5);
      v15[4] = *((_QWORD *)v16 + 4);
      v15[5] = v65;
      v26 = *((_QWORD *)v16 + 7);
      v15[6] = *((_QWORD *)v16 + 6);
      v15[7] = v26;
      v27 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v28 = v27[8];
      v61 = &v16[v28];
      v63 = (char *)v15 + v28;
      v29 = type metadata accessor for Date(0);
      v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
      v31 = v24;
      v32 = *(_QWORD *)(v29 - 8);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRetain(v26);
      v30(v63, v61, v29);
      v33 = sub_100008EF4(&qword_100105F40);
      v30(&v63[*(int *)(v33 + 36)], &v61[*(int *)(v33 + 36)], v29);
      v34 = v27[9];
      v35 = (char *)v15 + v34;
      v36 = &v16[v34];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(&v16[v34], 1, v29))
      {
        v37 = sub_100008EF4(&qword_100105F48);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        v30(v35, v36, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v35, 0, 1, v29);
      }
      *((_BYTE *)v15 + v27[10]) = v16[v27[10]];
      *((_BYTE *)v15 + v27[11]) = v16[v27[11]];
      v52 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
      v53 = *(_QWORD *)&v16[v52];
      *(_QWORD *)((char *)v15 + v52) = v53;
      swift_bridgeObjectRetain(v53);
      v17 = v68;
      v6 = v70;
      v19 = 2;
    }
    else if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      v20 = *(_QWORD *)v16;
      v21 = *((_QWORD *)v16 + 1);
      *v15 = *(_QWORD *)v16;
      v15[1] = v21;
      v22 = *((_QWORD *)v16 + 3);
      v15[2] = *((_QWORD *)v16 + 2);
      v15[3] = v22;
      v23 = *((_QWORD *)v16 + 5);
      v15[4] = *((_QWORD *)v16 + 4);
      v15[5] = v23;
      *((_BYTE *)v15 + 48) = v16[48];
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
    }
    else
    {
      v60 = v3;
      v67 = EnumCaseMultiPayload;
      v69 = v17;
      v71 = v6;
      v38 = *((_QWORD *)v16 + 1);
      *v15 = *(_QWORD *)v16;
      v15[1] = v38;
      v39 = *((_QWORD *)v16 + 3);
      v15[2] = *((_QWORD *)v16 + 2);
      v15[3] = v39;
      v40 = *((_QWORD *)v16 + 5);
      v15[4] = *((_QWORD *)v16 + 4);
      v15[5] = v40;
      v41 = *((_QWORD *)v16 + 7);
      v15[6] = *((_QWORD *)v16 + 6);
      v15[7] = v41;
      v42 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v43 = *(int *)(v42 + 32);
      v64 = (char *)v15 + v43;
      v66 = (int *)v42;
      v62 = &v16[v43];
      v44 = type metadata accessor for Date(0);
      v45 = *(_QWORD *)(v44 - 8);
      v46 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(v41);
      v46(v64, v62, v44);
      v47 = sub_100008EF4(&qword_100105F40);
      v46(&v64[*(int *)(v47 + 36)], &v62[*(int *)(v47 + 36)], v44);
      v48 = v66[9];
      v49 = (char *)v15 + v48;
      v50 = &v16[v48];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(&v16[v48], 1, v44))
      {
        v51 = sub_100008EF4(&qword_100105F48);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        v46(v49, v50, v44);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v49, 0, 1, v44);
      }
      v17 = v69;
      v6 = v71;
      v19 = v67;
      v3 = v60;
      *((_BYTE *)v15 + v66[10]) = v16[v66[10]];
      *((_BYTE *)v15 + v66[11]) = v16[v66[11]];
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
    v54 = *(int *)(v6 + 24);
    v55 = (char *)v4 + v54;
    v56 = (char *)v3 + v54;
    *v55 = *v56;
    v57 = *((_QWORD *)v56 + 1);
    v58 = *((_QWORD *)v56 + 2);
    *((_QWORD *)v55 + 1) = v57;
    *((_QWORD *)v55 + 2) = v58;
    v12 = *((_QWORD *)v56 + 3);
    *((_QWORD *)v55 + 3) = v12;
    swift_retain(v57);
    swift_retain(v58);
  }
  swift_retain(v12);
  return v4;
}

uint64_t sub_1000470E8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;

  v4 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = type metadata accessor for SportsWidgetClock(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v7);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease(v6[1]);
      swift_bridgeObjectRelease(v6[3]);
      swift_bridgeObjectRelease(v6[5]);
      swift_bridgeObjectRelease(v6[7]);
      v16 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v17 = (char *)v6 + *(int *)(v16 + 32);
      v18 = type metadata accessor for Date(0);
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(void (**)(char *, uint64_t))(v19 + 8);
      v20(v17, v18);
      v21 = sub_100008EF4(&qword_100105F40);
      v20(&v17[*(int *)(v21 + 36)], v18);
      v22 = (char *)v6 + *(int *)(v16 + 36);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v22, 1, v18))
        v20(v22, v18);
      v23 = *(_QWORD *)((char *)v6 + *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20));
      goto LABEL_13;
    case 1:
      swift_bridgeObjectRelease(*v6);
      swift_bridgeObjectRelease(v6[1]);
      swift_bridgeObjectRelease(v6[3]);
      v23 = v6[5];
LABEL_13:
      swift_bridgeObjectRelease(v23);
      break;
    case 0:
      swift_bridgeObjectRelease(v6[1]);
      swift_bridgeObjectRelease(v6[3]);
      swift_bridgeObjectRelease(v6[5]);
      swift_bridgeObjectRelease(v6[7]);
      v9 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v10 = (char *)v6 + *(int *)(v9 + 32);
      v11 = type metadata accessor for Date(0);
      v12 = *(_QWORD *)(v11 - 8);
      v13 = *(void (**)(char *, uint64_t))(v12 + 8);
      v13(v10, v11);
      v14 = sub_100008EF4(&qword_100105F40);
      v13(&v10[*(int *)(v14 + 36)], v11);
      v15 = (char *)v6 + *(int *)(v9 + 36);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v15, 1, v11))
        v13(v15, v11);
      break;
  }
  v24 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  swift_release(v24[1]);
  swift_release(v24[2]);
  return swift_release(v24[3]);
}

_QWORD *sub_100047324(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v61;
  char *v62;
  int *v63;
  char *v64;
  _QWORD *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;

  v6 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for SportsWidgetClock(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v15);
  v17 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v67 = v15;
    v69 = a3;
    v71 = a2;
    v22 = *((_QWORD *)v14 + 1);
    *v13 = *(_QWORD *)v14;
    v13[1] = v22;
    v23 = *((_QWORD *)v14 + 3);
    v13[2] = *((_QWORD *)v14 + 2);
    v13[3] = v23;
    v24 = *((_QWORD *)v14 + 5);
    v13[4] = *((_QWORD *)v14 + 4);
    v13[5] = v24;
    v25 = *((_QWORD *)v14 + 7);
    v13[6] = *((_QWORD *)v14 + 6);
    v13[7] = v25;
    v26 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v27 = v26[8];
    v62 = &v14[v27];
    v64 = (char *)v13 + v27;
    v28 = type metadata accessor for Date(0);
    v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
    v30 = v22;
    v31 = *(_QWORD *)(v28 - 8);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    v29(v64, v62, v28);
    v32 = sub_100008EF4(&qword_100105F40);
    v29(&v64[*(int *)(v32 + 36)], &v62[*(int *)(v32 + 36)], v28);
    v33 = v26[9];
    v34 = (char *)v13 + v33;
    v35 = &v14[v33];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(&v14[v33], 1, v28))
    {
      v36 = sub_100008EF4(&qword_100105F48);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v29(v34, v35, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v34, 0, 1, v28);
    }
    *((_BYTE *)v13 + v26[10]) = v14[v26[10]];
    *((_BYTE *)v13 + v26[11]) = v14[v26[11]];
    v52 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
    v53 = *(_QWORD *)&v14[v52];
    *(_QWORD *)((char *)v13 + v52) = v53;
    swift_bridgeObjectRetain(v53);
    a3 = v69;
    a2 = v71;
    v15 = v67;
    v17 = 2;
  }
  else if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v18 = *(_QWORD *)v14;
    v19 = *((_QWORD *)v14 + 1);
    *v13 = *(_QWORD *)v14;
    v13[1] = v19;
    v20 = *((_QWORD *)v14 + 3);
    v13[2] = *((_QWORD *)v14 + 2);
    v13[3] = v20;
    v21 = *((_QWORD *)v14 + 5);
    v13[4] = *((_QWORD *)v14 + 4);
    v13[5] = v21;
    *((_BYTE *)v13 + 48) = v14[48];
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
  }
  else
  {
    v65 = a1;
    v66 = EnumCaseMultiPayload;
    v68 = v15;
    v70 = a3;
    v72 = a2;
    v37 = *((_QWORD *)v14 + 1);
    *v13 = *(_QWORD *)v14;
    v13[1] = v37;
    v38 = *((_QWORD *)v14 + 3);
    v13[2] = *((_QWORD *)v14 + 2);
    v13[3] = v38;
    v39 = *((_QWORD *)v14 + 5);
    v13[4] = *((_QWORD *)v14 + 4);
    v13[5] = v39;
    v40 = *((_QWORD *)v14 + 7);
    v13[6] = *((_QWORD *)v14 + 6);
    v13[7] = v40;
    v41 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v42 = *(int *)(v41 + 32);
    v61 = (char *)v13 + v42;
    v63 = (int *)v41;
    v43 = &v14[v42];
    v44 = type metadata accessor for Date(0);
    v45 = *(_QWORD *)(v44 - 8);
    v46 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    v46(v61, v43, v44);
    v47 = *(int *)(sub_100008EF4(&qword_100105F40) + 36);
    v46(&v61[v47], &v43[v47], v44);
    v48 = v63[9];
    v49 = (char *)v13 + v48;
    v50 = &v14[v48];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(&v14[v48], 1, v44))
    {
      v51 = sub_100008EF4(&qword_100105F48);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      v46(v49, v50, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v49, 0, 1, v44);
    }
    a3 = v70;
    a2 = v72;
    v15 = v68;
    v17 = v66;
    *((_BYTE *)v13 + v63[10]) = v14[v63[10]];
    *((_BYTE *)v13 + v63[11]) = v14[v63[11]];
    a1 = v65;
  }
  swift_storeEnumTagMultiPayload(v13, v15, v17);
  v54 = *(int *)(a3 + 24);
  v55 = (char *)a1 + v54;
  v56 = (char *)a2 + v54;
  *v55 = *v56;
  v57 = *((_QWORD *)v56 + 1);
  v58 = *((_QWORD *)v56 + 2);
  *((_QWORD *)v55 + 1) = v57;
  *((_QWORD *)v55 + 2) = v58;
  v59 = *((_QWORD *)v56 + 3);
  *((_QWORD *)v55 + 3) = v59;
  swift_retain(v57);
  swift_retain(v58);
  swift_retain(v59);
  return a1;
}

_QWORD *sub_100047754(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  if (a1 != a2)
  {
    sub_1000135A0((uint64_t)a1, &qword_100105F38);
    v6 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = *(int *)(a3 + 20);
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (char *)a2 + v12;
    sub_100013520((uint64_t)a1 + v12, type metadata accessor for SportsWidgetClock);
    v15 = type metadata accessor for SportsWidgetClock(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v15);
    v17 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v70 = 2;
      v71 = v15;
      v73 = a3;
      *v13 = *(_QWORD *)v14;
      v22 = *((_QWORD *)v14 + 1);
      v13[1] = v22;
      v13[2] = *((_QWORD *)v14 + 2);
      v23 = *((_QWORD *)v14 + 3);
      v13[3] = v23;
      v13[4] = *((_QWORD *)v14 + 4);
      v68 = *((_QWORD *)v14 + 5);
      v13[5] = v68;
      v13[6] = *((_QWORD *)v14 + 6);
      v24 = *((_QWORD *)v14 + 7);
      v13[7] = v24;
      v25 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v26 = v25[8];
      v64 = &v14[v26];
      v66 = (char *)v13 + v26;
      v27 = type metadata accessor for Date(0);
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      v29 = v22;
      v30 = *(_QWORD *)(v27 - 8);
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRetain(v24);
      v28(v66, v64, v27);
      v31 = sub_100008EF4(&qword_100105F40);
      v28(&v66[*(int *)(v31 + 36)], &v64[*(int *)(v31 + 36)], v27);
      v32 = v25[9];
      v33 = (char *)v13 + v32;
      v34 = &v14[v32];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(&v14[v32], 1, v27))
      {
        v35 = sub_100008EF4(&qword_100105F48);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v28(v33, v34, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v33, 0, 1, v27);
      }
      *((_BYTE *)v13 + v25[10]) = v14[v25[10]];
      *((_BYTE *)v13 + v25[11]) = v14[v25[11]];
      v51 = *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20);
      v52 = *(_QWORD *)&v14[v51];
      *(_QWORD *)((char *)v13 + v51) = v52;
      swift_bridgeObjectRetain(v52);
      v15 = v71;
      a3 = v73;
    }
    else
    {
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v18 = *(_QWORD *)v14;
        *v13 = *(_QWORD *)v14;
        v19 = *((_QWORD *)v14 + 1);
        v13[1] = v19;
        v13[2] = *((_QWORD *)v14 + 2);
        v20 = *((_QWORD *)v14 + 3);
        v13[3] = v20;
        v13[4] = *((_QWORD *)v14 + 4);
        v21 = *((_QWORD *)v14 + 5);
        v13[5] = v21;
        *((_BYTE *)v13 + 48) = v14[48];
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
LABEL_17:
        swift_storeEnumTagMultiPayload(v13, v15, v17);
        goto LABEL_18;
      }
      v70 = EnumCaseMultiPayload;
      v72 = v15;
      v74 = a3;
      *v13 = *(_QWORD *)v14;
      v36 = *((_QWORD *)v14 + 1);
      v13[1] = v36;
      v13[2] = *((_QWORD *)v14 + 2);
      v37 = *((_QWORD *)v14 + 3);
      v13[3] = v37;
      v13[4] = *((_QWORD *)v14 + 4);
      v69 = *((_QWORD *)v14 + 5);
      v13[5] = v69;
      v13[6] = *((_QWORD *)v14 + 6);
      v67 = *((_QWORD *)v14 + 7);
      v13[7] = v67;
      v38 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v39 = *(int *)(v38 + 32);
      v63 = &v14[v39];
      v65 = (char *)v13 + v39;
      v40 = type metadata accessor for Date(0);
      v41 = *(_QWORD *)(v40 - 8);
      v42 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      v43 = v38;
      v44 = v42;
      swift_bridgeObjectRetain(v69);
      swift_bridgeObjectRetain(v67);
      v42(v65, v63, v40);
      v45 = sub_100008EF4(&qword_100105F40);
      v42(&v65[*(int *)(v45 + 36)], &v63[*(int *)(v45 + 36)], v40);
      v46 = v43;
      v47 = *(int *)(v43 + 36);
      v48 = (char *)v13 + v47;
      v49 = &v14[v47];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(&v14[v47], 1, v40))
      {
        v50 = sub_100008EF4(&qword_100105F48);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        v44(v48, v49, v40);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v48, 0, 1, v40);
      }
      v15 = v72;
      a3 = v74;
      *((_BYTE *)v13 + *(int *)(v46 + 40)) = v14[*(int *)(v46 + 40)];
      *((_BYTE *)v13 + *(int *)(v46 + 44)) = v14[*(int *)(v46 + 44)];
    }
    v17 = v70;
    goto LABEL_17;
  }
LABEL_18:
  v53 = *(int *)(a3 + 24);
  v54 = (char *)a1 + v53;
  v55 = (char *)a2 + v53;
  *v54 = *((_BYTE *)a2 + v53);
  v56 = *(_QWORD *)((char *)a2 + v53 + 8);
  v57 = *(_QWORD *)((char *)a1 + v53 + 8);
  *((_QWORD *)v54 + 1) = v56;
  swift_retain(v56);
  swift_release(v57);
  v58 = *((_QWORD *)v55 + 2);
  v59 = *((_QWORD *)v54 + 2);
  *((_QWORD *)v54 + 2) = v58;
  swift_retain(v58);
  swift_release(v59);
  v60 = *((_QWORD *)v55 + 3);
  v61 = *((_QWORD *)v54 + 3);
  *((_QWORD *)v54 + 3) = v60;
  swift_retain(v60);
  swift_release(v61);
  return a1;
}

char *sub_100047C24(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  __int128 v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for SportsWidgetClock(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
  if (EnumCaseMultiPayload == 2)
  {
    v48 = v11;
    v50 = a3;
    v27 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v27;
    v28 = *((_OWORD *)v10 + 3);
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    *((_OWORD *)v9 + 3) = v28;
    v29 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v30 = v29[8];
    v31 = &v9[v30];
    v32 = &v10[v30];
    v33 = type metadata accessor for Date(0);
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    v35(v31, v32, v33);
    v36 = sub_100008EF4(&qword_100105F40);
    v35(&v31[*(int *)(v36 + 36)], &v32[*(int *)(v36 + 36)], v33);
    v37 = v29[9];
    v38 = &v9[v37];
    v39 = &v10[v37];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(&v10[v37], 1, v33))
    {
      v40 = sub_100008EF4(&qword_100105F48);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v35(v38, v39, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v38, 0, 1, v33);
    }
    v9[v29[10]] = v10[v29[10]];
    v9[v29[11]] = v10[v29[11]];
    v41 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
    *(_QWORD *)&v9[*(int *)(v41 + 20)] = *(_QWORD *)&v10[*(int *)(v41 + 20)];
    swift_storeEnumTagMultiPayload(v9, v48, 2);
    a3 = v50;
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v47 = v11;
    v49 = a3;
    v13 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v13;
    v14 = *((_OWORD *)v10 + 3);
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    *((_OWORD *)v9 + 3) = v14;
    v15 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    v16 = v15[8];
    v17 = &v9[v16];
    v18 = &v10[v16];
    v19 = type metadata accessor for Date(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v21(v17, v18, v19);
    v22 = sub_100008EF4(&qword_100105F40);
    v21(&v17[*(int *)(v22 + 36)], &v18[*(int *)(v22 + 36)], v19);
    v23 = v15[9];
    v24 = &v9[v23];
    v25 = &v10[v23];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(&v10[v23], 1, v19))
    {
      v26 = sub_100008EF4(&qword_100105F48);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v21(v24, v25, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v24, 0, 1, v19);
    }
    a3 = v49;
    v9[v15[10]] = v10[v15[10]];
    v9[v15[11]] = v10[v15[11]];
    swift_storeEnumTagMultiPayload(v9, v47, 0);
  }
  v42 = *(int *)(a3 + 24);
  v43 = &a1[v42];
  v44 = &a2[v42];
  v45 = *((_OWORD *)v44 + 1);
  *(_OWORD *)v43 = *(_OWORD *)v44;
  *((_OWORD *)v43 + 1) = v45;
  return a1;
}

char *sub_100047F68(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  __int128 v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (a1 != a2)
  {
    sub_1000135A0((uint64_t)a1, &qword_100105F38);
    v6 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100013520((uint64_t)&a1[v8], type metadata accessor for SportsWidgetClock);
    v11 = type metadata accessor for SportsWidgetClock(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
    if (EnumCaseMultiPayload == 2)
    {
      v50 = v11;
      v52 = a3;
      v27 = *((_OWORD *)v10 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v27;
      v28 = *((_OWORD *)v10 + 3);
      *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
      *((_OWORD *)v9 + 3) = v28;
      v29 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v30 = v29[8];
      v31 = &v9[v30];
      v32 = &v10[v30];
      v33 = type metadata accessor for Date(0);
      v34 = *(_QWORD *)(v33 - 8);
      v35 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      v35(v31, v32, v33);
      v36 = sub_100008EF4(&qword_100105F40);
      v35(&v31[*(int *)(v36 + 36)], &v32[*(int *)(v36 + 36)], v33);
      v37 = v29[9];
      v38 = &v9[v37];
      v39 = &v10[v37];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(&v10[v37], 1, v33))
      {
        v40 = sub_100008EF4(&qword_100105F48);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        v35(v38, v39, v33);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v38, 0, 1, v33);
      }
      v9[v29[10]] = v10[v29[10]];
      v9[v29[11]] = v10[v29[11]];
      v41 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
      *(_QWORD *)&v9[*(int *)(v41 + 20)] = *(_QWORD *)&v10[*(int *)(v41 + 20)];
      swift_storeEnumTagMultiPayload(v9, v50, 2);
      a3 = v52;
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v49 = v11;
      v51 = a3;
      v13 = *((_OWORD *)v10 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v13;
      v14 = *((_OWORD *)v10 + 3);
      *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
      *((_OWORD *)v9 + 3) = v14;
      v15 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
      v16 = v15[8];
      v17 = &v9[v16];
      v18 = &v10[v16];
      v19 = type metadata accessor for Date(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
      v21(v17, v18, v19);
      v22 = sub_100008EF4(&qword_100105F40);
      v21(&v17[*(int *)(v22 + 36)], &v18[*(int *)(v22 + 36)], v19);
      v23 = v15[9];
      v24 = &v9[v23];
      v25 = &v10[v23];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(&v10[v23], 1, v19))
      {
        v26 = sub_100008EF4(&qword_100105F48);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        v21(v24, v25, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v24, 0, 1, v19);
      }
      a3 = v51;
      v9[v15[10]] = v10[v15[10]];
      v9[v15[11]] = v10[v15[11]];
      swift_storeEnumTagMultiPayload(v9, v49, 0);
    }
  }
  v42 = *(int *)(a3 + 24);
  v43 = &a1[v42];
  v44 = &a2[v42];
  *v43 = *v44;
  v45 = *(_QWORD *)&a1[v42 + 8];
  *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
  swift_release(v45);
  v46 = *((_QWORD *)v43 + 2);
  *((_QWORD *)v43 + 2) = *((_QWORD *)v44 + 2);
  swift_release(v46);
  v47 = *((_QWORD *)v43 + 3);
  *((_QWORD *)v43 + 3) = *((_QWORD *)v44 + 3);
  swift_release(v47);
  return a1;
}

uint64_t sub_100048304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100048310);
}

uint64_t sub_100048310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_100008EF4(&qword_100105F58);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for SportsWidgetClock(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1000483C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000483CC);
}

uint64_t sub_1000483CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_100008EF4(&qword_100105F58);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for SportsWidgetClock(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SportsWidgetClockView(uint64_t a1)
{
  uint64_t result;

  result = qword_100108480;
  if (!qword_100108480)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SportsWidgetClockView);
  return result;
}

void sub_1000484B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_10000C6C4(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for SportsWidgetClock(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = " ";
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_100048540(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D26A0, 1);
}

uint64_t sub_100048550@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int EnumCaseMultiPayload;
  char *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t);
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  id v97;
  uint64_t v98;
  int *v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  char *v122;
  uint64_t OpaqueTypeConformance2;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t result;
  uint64_t v131;
  char *v132;
  char v133;
  void *v134;
  id v135;
  void (*v136)(_QWORD, _QWORD, _QWORD);
  uint64_t KeyPath;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  void (*v166)(char *, uint64_t, uint64_t);
  char *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  void (*v184)(char *, uint64_t, uint64_t);
  void (*v185)(char *, uint64_t, uint64_t);
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  void (*v191)(char *, uint64_t);
  void (*v192)(char *, uint64_t);
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _BOOL8 v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void (*v203)(uint64_t, uint64_t);
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void (*v236)(uint64_t, uint64_t);
  _QWORD *v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;

  v2 = v1;
  v258 = a1;
  v219 = sub_100008EF4(&qword_1001084C0);
  v3 = __chkstk_darwin(v219);
  v220 = (char *)&v215 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v216 = (char *)&v215 - v5;
  v217 = sub_100008EF4(&qword_1001084C8);
  v6 = __chkstk_darwin(v217);
  v218 = (char *)&v215 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v221 = (uint64_t)&v215 - v8;
  v233 = sub_100008EF4(&qword_1001084D0);
  v224 = *(_QWORD *)(v233 - 8);
  __chkstk_darwin(v233);
  v223 = (char *)&v215 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = sub_100008EF4(&qword_1001084D8);
  v226 = *(_QWORD *)(v234 - 8);
  v10 = __chkstk_darwin(v234);
  v222 = (char *)&v215 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v225 = (char *)&v215 - v12;
  v230 = sub_100008EF4(&qword_1001084E0);
  __chkstk_darwin(v230);
  v232 = (uint64_t)&v215 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v240 = type metadata accessor for Font.TextStyle(0);
  v239 = *(_QWORD *)(v240 - 8);
  __chkstk_darwin(v240);
  v241 = (char *)&v215 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = type metadata accessor for SportsWidgetBaseballClockView(0);
  __chkstk_darwin(v244);
  v253 = (uint64_t *)((char *)&v215 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for DynamicTypeSize(0);
  v262 = *(_QWORD *)(v16 - 8);
  v263 = v16;
  v17 = __chkstk_darwin(v16);
  v243 = (uint64_t)&v215 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v242 = (uint64_t)&v215 - v19;
  v257 = sub_100008EF4(&qword_1001084E8);
  __chkstk_darwin(v257);
  v231 = (char *)&v215 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v260 = type metadata accessor for SportsWidgetSoccerClockView(0);
  __chkstk_darwin(v260);
  v238 = (uint64_t *)((char *)&v215 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v250 = sub_100008EF4(&qword_1001084F0);
  v229 = *(_QWORD *)(v250 - 8);
  v22 = __chkstk_darwin(v250);
  v227 = (char *)&v215 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v228 = (char *)&v215 - v24;
  v25 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
  v26 = __chkstk_darwin(v25);
  v237 = (uint64_t *)((char *)&v215 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v26);
  v251 = (char *)&v215 - v28;
  v254 = sub_100008EF4(&qword_1001084F8);
  __chkstk_darwin(v254);
  v256 = (uint64_t)&v215 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v245 = sub_100008EF4(&qword_100108500);
  __chkstk_darwin(v245);
  v248 = (char *)&v215 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v255 = sub_100008EF4(&qword_100108508);
  __chkstk_darwin(v255);
  v249 = (char *)&v215 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = sub_100008EF4(&qword_100106618);
  __chkstk_darwin(v246);
  v252 = (char *)&v215 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v259 = sub_100008EF4(&qword_100108510);
  v33 = __chkstk_darwin(v259);
  v35 = (uint64_t *)((char *)&v215 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v33);
  v236 = (void (*)(uint64_t, uint64_t))((char *)&v215 - v36);
  v247 = sub_100008EF4(&qword_100108518);
  v37 = *(uint64_t **)(v247 - 8);
  v38 = __chkstk_darwin(v247);
  v40 = (char *)&v215 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v42 = (char *)&v215 - v41;
  v43 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v44 = __chkstk_darwin(v43);
  v235 = (uint64_t)&v215 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v47 = (char *)&v215 - v46;
  v48 = type metadata accessor for SportsWidgetClock(0);
  __chkstk_darwin(v48);
  v50 = (char *)&v215 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for SportsWidgetClockView(0);
  v52 = *(int *)(v51 + 20);
  v261 = v2;
  sub_1000134DC((uint64_t)v2 + v52, (uint64_t)v50, type metadata accessor for SportsWidgetClock);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v50, v48);
  if (!EnumCaseMultiPayload)
  {
    v251 = v40;
    v244 = (uint64_t)v42;
    v253 = v37;
    v89 = v47;
    sub_10001303C((uint64_t)v50, (uint64_t)v47, type metadata accessor for SportsWidgetGenericClockViewModel);
    v90 = (uint64_t)v47;
    v91 = v235;
    sub_1000134DC(v90, v235, type metadata accessor for SportsWidgetGenericClockViewModel);
    v92 = (_QWORD *)((char *)v261 + *(int *)(v51 + 24));
    LODWORD(v261) = *(unsigned __int8 *)v92;
    v94 = v92[1];
    v93 = v92[2];
    v95 = v92[3];
    v96 = (void *)objc_opt_self(UIColor);
    swift_retain(v93);
    swift_retain(v94);
    v97 = objc_msgSend(v96, "labelColor", swift_retain(v95).n128_f64[0]);
    v58 = Color.init(uiColor:)(v97);
    *v35 = swift_getKeyPath(&unk_1000C98F0);
    v98 = sub_100008EF4(&qword_100105F38);
    swift_storeEnumTagMultiPayload(v35, v98, 0);
    v99 = (int *)v259;
    v100 = (_QWORD *)((char *)v35 + *(int *)(v259 + 36));
    *v100 = swift_getKeyPath(&unk_1000C9920);
    v101 = sub_100008EF4(&qword_1001079B0);
    swift_storeEnumTagMultiPayload(v100, v101, 0);
    sub_10001303C(v91, (uint64_t)v35 + v99[11], type metadata accessor for SportsWidgetGenericClockViewModel);
    v102 = (char *)v35 + v99[10];
    *v102 = (char)v261;
    *((_QWORD *)v102 + 1) = v93;
    *((_QWORD *)v102 + 2) = v94;
    *((_QWORD *)v102 + 3) = v58;
    *((_QWORD *)v102 + 4) = v95;
    *((_QWORD *)v102 + 5) = 1;
    v102[48] = 1;
    *(_OWORD *)(v102 + 56) = xmmword_1000C9830;
    *((_QWORD *)v102 + 9) = 0x4014000000000000;
    *(_QWORD *)((char *)v35 + v99[12]) = 0;
    *(_QWORD *)((char *)v35 + v99[13]) = 0;
    v103 = v236;
    sub_100013880((uint64_t)v35, (uint64_t)v236, &qword_100108510);
    v104 = (uint64_t)v89;
    if (qword_100105BB0 != -1)
      swift_once(&qword_100105BB0, sub_100008B4C);
    v105 = v263;
    v106 = sub_10000909C(v263, (uint64_t)qword_10011EBE8);
    v107 = (uint64_t)v252;
    (*(void (**)(char *, uint64_t, uint64_t))(v262 + 16))(v252, v106, v105);
    v108 = sub_1000139F8(&qword_100106068, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
    v109 = dispatch thunk of static Equatable.== infix(_:_:)(v107, v107, v105, v108);
    v110 = v253;
    v111 = (uint64_t)v251;
    if ((v109 & 1) != 0)
    {
      v112 = sub_100013840(&qword_100108530, &qword_100108510, (uint64_t)&unk_1000CB2B8);
      v113 = (uint64_t)v103;
      v114 = sub_100013840(&qword_100108538, &qword_100106618, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
      v115 = v259;
      v116 = v246;
      View.dynamicTypeSize<A>(_:)(v107, v259, v246, v112, v114);
      sub_1000135A0(v107, &qword_100106618);
      sub_1000135A0(v113, &qword_100108510);
      v117 = (void (*)(uint64_t, uint64_t, uint64_t))v110[4];
      v263 = v104;
      v118 = v244;
      v119 = v111;
      v120 = v110;
      v121 = v247;
      v117(v244, v119, v247);
      v122 = v248;
      ((void (*)(char *, uint64_t, uint64_t))v120[2])(v248, v118, v121);
      swift_storeEnumTagMultiPayload(v122, v245, 0);
      v264 = v115;
      v265 = v116;
      v266 = v112;
      v267 = v114;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v264, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
      v124 = sub_1000139F8(&qword_100108540, type metadata accessor for SportsWidgetSoccerClockView, (uint64_t)&unk_1000C8B58);
      v264 = v260;
      v265 = v116;
      v266 = v124;
      v267 = v114;
      v125 = swift_getOpaqueTypeConformance2(&v264, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
      v126 = (uint64_t)v249;
      _ConditionalContent<>.init(storage:)(v122, v121, v250, OpaqueTypeConformance2, v125);
      v127 = v256;
      sub_10001355C(v126, v256, &qword_100108508);
      swift_storeEnumTagMultiPayload(v127, v254, 0);
      v128 = sub_100049E2C();
      v129 = sub_100049F60();
      _ConditionalContent<>.init(storage:)(v127, v255, v257, v128, v129);
      sub_1000135A0(v126, &qword_100108508);
      ((void (*)(uint64_t, uint64_t))v120[1])(v118, v121);
      return sub_100013520(v263, type metadata accessor for SportsWidgetGenericClockViewModel);
    }
    __break(1u);
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v131 = (uint64_t)v251;
    sub_10001303C((uint64_t)v50, (uint64_t)v251, type metadata accessor for SportsWidgetSoccerClockViewModel);
    v132 = (char *)v261 + *(int *)(v51 + 24);
    v133 = *v132;
    v110 = (uint64_t *)*((_QWORD *)v132 + 1);
    v35 = (_QWORD *)*((_QWORD *)v132 + 2);
    v111 = *((_QWORD *)v132 + 3);
    v134 = (void *)objc_opt_self(UIColor);
    swift_retain(v35);
    swift_retain(v110);
    v135 = objc_msgSend(v134, "labelColor", swift_retain(v111).n128_f64[0]);
    v104 = Color.init(uiColor:)(v135);
    v136 = (void (*)(_QWORD, _QWORD, _QWORD))v237;
    sub_1000134DC(v131, (uint64_t)v237, type metadata accessor for SportsWidgetSoccerClockViewModel);
    KeyPath = swift_getKeyPath(&unk_1000C98F0);
    v58 = (uint64_t)v238;
    *v238 = KeyPath;
    v138 = sub_100008EF4(&qword_100105F38);
    swift_storeEnumTagMultiPayload(v58, v138, 0);
    v139 = v260;
    sub_10001303C((uint64_t)v136, v58 + *(int *)(v260 + 20), type metadata accessor for SportsWidgetSoccerClockViewModel);
    v140 = v58 + *(int *)(v139 + 24);
    *(_BYTE *)v140 = v133;
    *(_QWORD *)(v140 + 8) = v35;
    *(_QWORD *)(v140 + 16) = v110;
    *(_QWORD *)(v140 + 24) = v104;
    *(_QWORD *)(v140 + 32) = v111;
    *(_QWORD *)(v140 + 40) = 1;
    *(_BYTE *)(v140 + 48) = 1;
    *(_OWORD *)(v140 + 56) = xmmword_1000C9830;
    *(_QWORD *)(v140 + 72) = 0x4014000000000000;
    v141 = qword_100105BB0;
    swift_retain(v35);
    swift_retain(v110);
    swift_retain(v104);
    swift_retain(v111);
    if (v141 == -1)
    {
LABEL_10:
      v142 = v263;
      v143 = sub_10000909C(v263, (uint64_t)qword_10011EBE8);
      v144 = v252;
      (*(void (**)(char *, uint64_t, uint64_t))(v262 + 16))(v252, v143, v142);
      v145 = sub_1000139F8(&qword_100106068, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v144, v144, v142, v145) & 1) != 0)
      {
        v263 = v111;
        v146 = (uint64_t)v144;
        v147 = sub_1000139F8(&qword_100108540, type metadata accessor for SportsWidgetSoccerClockView, (uint64_t)&unk_1000C8B58);
        v262 = v104;
        v148 = v147;
        v149 = sub_100013840(&qword_100108538, &qword_100106618, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
        v253 = v110;
        v150 = v227;
        v151 = v144;
        v152 = v260;
        v261 = v35;
        v153 = v246;
        View.dynamicTypeSize<A>(_:)(v151, v260, v246, v148, v149);
        sub_1000135A0(v146, &qword_100106618);
        sub_100013520(v58, type metadata accessor for SportsWidgetSoccerClockView);
        v154 = v229;
        v155 = v228;
        v156 = v250;
        (*(void (**)(char *, char *, uint64_t))(v229 + 32))(v228, v150, v250);
        v157 = v248;
        (*(void (**)(char *, char *, uint64_t))(v154 + 16))(v248, v155, v156);
        swift_storeEnumTagMultiPayload(v157, v245, 1);
        v158 = sub_100013840(&qword_100108530, &qword_100108510, (uint64_t)&unk_1000CB2B8);
        v264 = v259;
        v265 = v153;
        v266 = v158;
        v267 = v149;
        v159 = swift_getOpaqueTypeConformance2(&v264, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
        v264 = v152;
        v265 = v153;
        v266 = v148;
        v267 = v149;
        v160 = swift_getOpaqueTypeConformance2(&v264, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
        v161 = (uint64_t)v249;
        _ConditionalContent<>.init(storage:)(v157, v247, v156, v159, v160);
        v162 = v256;
        sub_10001355C(v161, v256, &qword_100108508);
        swift_storeEnumTagMultiPayload(v162, v254, 0);
        v163 = sub_100049E2C();
        v164 = sub_100049F60();
        _ConditionalContent<>.init(storage:)(v162, v255, v257, v163, v164);
        swift_release(v263);
        swift_release(v262);
        swift_release(v253);
        swift_release(v261);
        sub_1000135A0(v161, &qword_100108508);
        (*(void (**)(char *, uint64_t))(v154 + 8))(v155, v156);
        return sub_100013520((uint64_t)v251, type metadata accessor for SportsWidgetSoccerClockViewModel);
      }
      __break(1u);
LABEL_19:
      swift_once(&qword_100105BB0, sub_100008B4C);
      goto LABEL_13;
    }
LABEL_17:
    swift_once(&qword_100105BB0, sub_100008B4C);
    goto LABEL_10;
  }
  v238 = *(uint64_t **)v50;
  v245 = *((_QWORD *)v50 + 1);
  v246 = *((_QWORD *)v50 + 2);
  v54 = (char *)*((_QWORD *)v50 + 4);
  v247 = *((_QWORD *)v50 + 3);
  v248 = v54;
  v249 = (char *)*((_QWORD *)v50 + 5);
  LODWORD(v250) = v50[48];
  v55 = (unsigned __int8 *)v261 + *(int *)(v51 + 24);
  LODWORD(v251) = *v55;
  v56 = *((_QWORD *)v55 + 3);
  v57 = (void *)objc_opt_self(UIColor);
  v259 = v56;
  swift_retain_n(v56, 2);
  v260 = Color.init(uiColor:)(objc_msgSend(v57, "labelColor"));
  v252 = (char *)Color.init(uiColor:)(objc_msgSend(v57, "labelColor"));
  v58 = v242;
  sub_10009FD4C(v242);
  v60 = v262;
  v59 = v263;
  v61 = *(_QWORD **)(v262 + 104);
  v62 = v243;
  ((void (*)(uint64_t, _QWORD, uint64_t))v61)(v243, enum case for DynamicTypeSize.accessibility2(_:), v263);
  v63 = sub_1000139F8((unint64_t *)&qword_1001060F0, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  LOBYTE(v56) = dispatch thunk of static Comparable.< infix(_:_:)(v62, v58, v59, v63);
  v64 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
  v64(v62, v59);
  v64(v58, v59);
  v65 = swift_getKeyPath(&unk_1000C98F0);
  v66 = (uint64_t)v253;
  *v253 = v65;
  v67 = sub_100008EF4(&qword_100105F38);
  swift_storeEnumTagMultiPayload(v66, v67, 0);
  v68 = v244;
  v69 = (_QWORD *)(v66 + *(int *)(v244 + 20));
  *v69 = swift_getKeyPath(&unk_1000C9920);
  v70 = sub_100008EF4(&qword_1001079B0);
  swift_storeEnumTagMultiPayload(v69, v70, 0);
  if ((v56 & 1) != 0)
  {
    v264 = 0x4032000000000000;
    v71 = enum case for Font.TextStyle.footnote(_:);
    v72 = *(void (**)(char *, _QWORD, uint64_t))(v239 + 104);
    v73 = v241;
    v74 = v240;
    v72(v241, enum case for Font.TextStyle.footnote(_:), v240);
    v75 = sub_10003A838();
    v76 = v260;
    swift_retain(v260);
    v77 = v259;
    swift_retain_n(v259, 2);
    swift_retain(v252);
    ScaledMetric.init(wrappedValue:relativeTo:)(&v264, v73, &type metadata for CGFloat, v75);
    v264 = 0x4010000000000000;
    v72(v73, v71, v74);
    ScaledMetric.init(wrappedValue:relativeTo:)(&v264, v73, &type metadata for CGFloat, v75);
    v78 = v66 + *(int *)(v68 + 28);
    v79 = v245;
    *(_QWORD *)v78 = v238;
    *(_QWORD *)(v78 + 8) = v79;
    v80 = v247;
    *(_QWORD *)(v78 + 16) = v246;
    *(_QWORD *)(v78 + 24) = v80;
    v81 = v249;
    *(_QWORD *)(v78 + 32) = v248;
    *(_QWORD *)(v78 + 40) = v81;
    *(_BYTE *)(v78 + 48) = v250;
    v82 = v66 + *(int *)(v68 + 24);
    *(_BYTE *)v82 = (_BYTE)v251;
    *(_QWORD *)(v82 + 8) = v76;
    *(_QWORD *)(v82 + 16) = 1;
    *(_QWORD *)(v82 + 24) = v77;
    *(_BYTE *)(v82 + 32) = 1;
    v83 = v252;
    *(_QWORD *)(v82 + 40) = v252;
    *(_QWORD *)(v82 + 48) = 1;
    *(_QWORD *)(v82 + 56) = v77;
    *(_BYTE *)(v82 + 64) = 1;
    *(_OWORD *)(v82 + 72) = xmmword_1000C9840;
    *(_QWORD *)(v82 + 88) = 0;
    v84 = v232;
    sub_1000134DC(v66, v232, type metadata accessor for SportsWidgetBaseballClockView);
    swift_storeEnumTagMultiPayload(v84, v230, 0);
    v85 = sub_1000139F8(&qword_100108520, type metadata accessor for SportsWidgetBaseballClockView, (uint64_t)&unk_1000C9A60);
    v264 = v68;
    v265 = v85;
    v86 = swift_getOpaqueTypeConformance2(&v264, &opaque type descriptor for <<opaque return type of View.conditionalDynamicTypeSize(_:condition:)>>, 1);
    v264 = v233;
    v265 = v86;
    v87 = swift_getOpaqueTypeConformance2(&v264, &opaque type descriptor for <<opaque return type of View.conditionalDynamicTypeSize(_:condition:)>>, 1);
    v88 = (uint64_t)v231;
    _ConditionalContent<>.init(storage:)(v84, v68, v234, v85, v87);
    sub_100013520(v66, type metadata accessor for SportsWidgetBaseballClockView);
LABEL_15:
    v212 = v256;
    sub_10001355C(v88, v256, &qword_1001084E8);
    swift_storeEnumTagMultiPayload(v212, v254, 1);
    v213 = sub_100049E2C();
    v214 = sub_100049F60();
    _ConditionalContent<>.init(storage:)(v212, v255, v257, v213, v214);
    swift_release(v83);
    swift_release_n(v259, 2);
    swift_release(v260);
    return sub_1000135A0(v88, &qword_1001084E8);
  }
  v235 = v63;
  v237 = v61;
  v236 = v64;
  v264 = 0x4032000000000000;
  v165 = enum case for Font.TextStyle.footnote(_:);
  v166 = *(void (**)(char *, _QWORD, uint64_t))(v239 + 104);
  v167 = v241;
  v168 = v240;
  v166(v241, enum case for Font.TextStyle.footnote(_:), v240);
  v169 = sub_10003A838();
  swift_retain(v260);
  v170 = v259;
  swift_retain_n(v259, 2);
  v171 = v252;
  swift_retain(v252);
  ScaledMetric.init(wrappedValue:relativeTo:)(&v264, v167, &type metadata for CGFloat, v169);
  v264 = 0x4010000000000000;
  v166(v167, v165, v168);
  v172 = v253;
  ScaledMetric.init(wrappedValue:relativeTo:)(&v264, v167, &type metadata for CGFloat, v169);
  v173 = (char *)v172 + *(int *)(v68 + 28);
  v174 = v245;
  *(_QWORD *)v173 = v238;
  *((_QWORD *)v173 + 1) = v174;
  v175 = v247;
  *((_QWORD *)v173 + 2) = v246;
  *((_QWORD *)v173 + 3) = v175;
  v176 = v249;
  *((_QWORD *)v173 + 4) = v248;
  *((_QWORD *)v173 + 5) = v176;
  v173[48] = v250;
  v177 = (char *)v172 + *(int *)(v68 + 24);
  *v177 = (char)v251;
  *((_QWORD *)v177 + 1) = v260;
  *((_QWORD *)v177 + 2) = 1;
  *((_QWORD *)v177 + 3) = v170;
  v177[32] = 1;
  *((_QWORD *)v177 + 5) = v171;
  *((_QWORD *)v177 + 6) = 1;
  *((_QWORD *)v177 + 7) = v170;
  v177[64] = 1;
  *(_OWORD *)(v177 + 72) = xmmword_1000C9840;
  *((_QWORD *)v177 + 11) = 0;
  if (qword_100105BB0 != -1)
    goto LABEL_19;
LABEL_13:
  v178 = v263;
  v179 = sub_10000909C(v263, (uint64_t)qword_10011EBE8);
  ((void (*)(uint64_t, _QWORD, uint64_t))v237)(v58, enum case for DynamicTypeSize.xLarge(_:), v178);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v179, v58, v178, v235);
  if ((result & 1) != 0)
  {
    v180 = v219;
    v181 = v216;
    v182 = &v216[*(int *)(v219 + 48)];
    v183 = v262;
    v184 = *(void (**)(char *, uint64_t, uint64_t))(v262 + 16);
    v184(v216, v179, v178);
    v185 = *(void (**)(char *, uint64_t, uint64_t))(v183 + 32);
    v185(v182, v58, v178);
    v186 = v58;
    v187 = v220;
    v188 = &v220[*(int *)(v180 + 48)];
    v184(v220, (uint64_t)v181, v178);
    v184(v188, (uint64_t)v182, v178);
    v189 = (uint64_t)v218;
    v185(v218, (uint64_t)v187, v178);
    v190 = v188;
    v191 = (void (*)(char *, uint64_t))v236;
    v236((uint64_t)v190, v178);
    v192 = v191;
    v193 = &v187[*(int *)(v180 + 48)];
    v185(v187, (uint64_t)v181, v178);
    v185(v193, (uint64_t)v182, v178);
    v185((char *)(v189 + *(int *)(v217 + 36)), (uint64_t)v193, v178);
    v192(v187, v178);
    v194 = v221;
    sub_100013880(v189, v221, &qword_1001084C8);
    v195 = sub_10009FD4C(v186);
    LOBYTE(v193) = DynamicTypeSize.isAccessibilitySize.getter(v195);
    v192((char *)v186, v178);
    v196 = sub_1000139F8(&qword_100108520, type metadata accessor for SportsWidgetBaseballClockView, (uint64_t)&unk_1000C9A60);
    v197 = (v193 & 1) == 0;
    v198 = v223;
    v199 = v244;
    v200 = (uint64_t)v253;
    View.conditionalDynamicTypeSize(_:condition:)(v194, v197, v244, v196);
    sub_1000135A0(v194, &qword_1001084C8);
    sub_100013520(v200, type metadata accessor for SportsWidgetBaseballClockView);
    ((void (*)(uint64_t, _QWORD, uint64_t))v237)(v186, enum case for DynamicTypeSize.accessibility1(_:), v178);
    v201 = v243;
    v202 = sub_10009FD4C(v243);
    LOBYTE(v200) = DynamicTypeSize.isAccessibilitySize.getter(v202);
    v203 = v236;
    v236(v201, v178);
    v264 = v199;
    v265 = v196;
    v204 = swift_getOpaqueTypeConformance2(&v264, &opaque type descriptor for <<opaque return type of View.conditionalDynamicTypeSize(_:condition:)>>, 1);
    v205 = v222;
    v206 = v233;
    View.conditionalDynamicTypeSize(_:condition:)(v186, v200 & 1, v233, v204);
    v203(v186, v178);
    (*(void (**)(char *, uint64_t))(v224 + 8))(v198, v206);
    v207 = v226;
    v208 = v225;
    v209 = v234;
    (*(void (**)(char *, char *, uint64_t))(v226 + 32))(v225, v205, v234);
    v210 = v232;
    (*(void (**)(uint64_t, char *, uint64_t))(v207 + 16))(v232, v208, v209);
    swift_storeEnumTagMultiPayload(v210, v230, 1);
    v264 = v206;
    v265 = v204;
    v211 = swift_getOpaqueTypeConformance2(&v264, &opaque type descriptor for <<opaque return type of View.conditionalDynamicTypeSize(_:condition:)>>, 1);
    v88 = (uint64_t)v231;
    _ConditionalContent<>.init(storage:)(v210, v199, v209, v196, v211);
    (*(void (**)(char *, uint64_t))(v207 + 8))(v208, v209);
    v83 = v252;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_100049D68()
{
  return EnvironmentValues.legibilityWeight.getter();
}

uint64_t sub_100049D88()
{
  return EnvironmentValues.legibilityWeight.getter();
}

uint64_t sub_100049DA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100008EF4(&qword_100108550);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001355C(a1, (uint64_t)v4, &qword_100108550);
  return EnvironmentValues.legibilityWeight.setter(v4);
}

unint64_t sub_100049E2C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = qword_100108528;
  if (!qword_100108528)
  {
    v1 = sub_100008F80(&qword_100108508);
    v2 = sub_100008F80(&qword_100108510);
    v3 = sub_100008F80(&qword_100106618);
    v4 = sub_100013840(&qword_100108530, &qword_100108510, (uint64_t)&unk_1000CB2B8);
    v5 = sub_100013840(&qword_100108538, &qword_100106618, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
    v8 = v2;
    v9 = v3;
    v10 = v4;
    v11 = v5;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v6 = type metadata accessor for SportsWidgetSoccerClockView(255);
    v7 = sub_1000139F8(&qword_100108540, type metadata accessor for SportsWidgetSoccerClockView, (uint64_t)&unk_1000C8B58);
    v8 = v6;
    v9 = v3;
    v10 = v7;
    v11 = v5;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100108528);
  }
  return result;
}

unint64_t sub_100049F60()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;

  result = qword_100108548;
  if (!qword_100108548)
  {
    v1 = sub_100008F80(&qword_1001084E8);
    v2 = sub_1000139F8(&qword_100108520, type metadata accessor for SportsWidgetBaseballClockView, (uint64_t)&unk_1000C9A60);
    v3 = sub_100008F80(&qword_1001084D0);
    v5 = type metadata accessor for SportsWidgetBaseballClockView(255);
    v6 = v2;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.conditionalDynamicTypeSize(_:condition:)>>, 1);
    v5 = v3;
    v6 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.conditionalDynamicTypeSize(_:condition:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100108548);
  }
  return result;
}

unint64_t sub_10004A034()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108558;
  if (!qword_100108558)
  {
    v1 = sub_100008F80(&qword_100108560);
    sub_100049E2C();
    sub_100049F60();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100108558);
  }
  return result;
}

_QWORD *sub_10004A0A0(_QWORD *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v45;
  char *v46;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *(_QWORD *)a2;
      *a1 = *(_QWORD *)a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (uint64_t *)&a2[v14];
    v17 = sub_100008EF4(&qword_1001079B0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for LegibilityWeight(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
      {
        v20 = sub_100008EF4(&qword_100108550);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v19 + 16))(v15, v16, v18);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
      }
      v22 = v15;
      v23 = v17;
      v24 = 1;
    }
    else
    {
      v21 = *v16;
      *v15 = *v16;
      swift_retain(v21);
      v22 = v15;
      v23 = v17;
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v23, v24);
    v25 = a3[6];
    v26 = a3[7];
    v27 = (char *)a1 + v25;
    v28 = &a2[v25];
    *v27 = *v28;
    v29 = *((_QWORD *)v28 + 1);
    v30 = *((_QWORD *)v28 + 2);
    *((_QWORD *)v27 + 1) = v29;
    *((_QWORD *)v27 + 2) = v30;
    v31 = *((_QWORD *)v28 + 3);
    *((_QWORD *)v27 + 3) = v31;
    v27[32] = v28[32];
    v33 = *((_QWORD *)v28 + 5);
    v32 = *((_QWORD *)v28 + 6);
    *((_QWORD *)v27 + 5) = v33;
    *((_QWORD *)v27 + 6) = v32;
    v34 = *((_QWORD *)v28 + 7);
    *((_QWORD *)v27 + 7) = v34;
    v27[64] = v28[64];
    *(_OWORD *)(v27 + 72) = *(_OWORD *)(v28 + 72);
    *((_QWORD *)v27 + 11) = *((_QWORD *)v28 + 11);
    v35 = (char *)a1 + v26;
    v36 = &a2[v26];
    v37 = *(_QWORD *)v36;
    v38 = *((_QWORD *)v36 + 1);
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *((_QWORD *)v35 + 1) = v38;
    v39 = *((_QWORD *)v36 + 3);
    *((_QWORD *)v35 + 2) = *((_QWORD *)v36 + 2);
    *((_QWORD *)v35 + 3) = v39;
    v40 = *((_QWORD *)v36 + 5);
    *((_QWORD *)v35 + 4) = *((_QWORD *)v36 + 4);
    *((_QWORD *)v35 + 5) = v40;
    v35[48] = v36[48];
    v41 = a3[8];
    v45 = (char *)a1 + v41;
    v46 = &a2[v41];
    swift_retain(v29);
    swift_retain(v31);
    swift_retain(v33);
    swift_retain(v34);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    v42 = sub_100008EF4(&qword_1001079C8);
    v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
    v43(v45, v46, v42);
    v43((char *)a1 + a3[9], &a2[a3[9]], v42);
  }
  return a1;
}

uint64_t sub_10004A360(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  void (*v15)(char *, uint64_t);

  v4 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_100008EF4(&qword_1001079B0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for LegibilityWeight(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
      (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v10 = (_QWORD *)((char *)a1 + a2[6]);
  swift_release(v10[1]);
  swift_release(v10[3]);
  swift_release(v10[5]);
  swift_release(v10[7]);
  v11 = (_QWORD *)((char *)a1 + a2[7]);
  swift_bridgeObjectRelease(*v11);
  swift_bridgeObjectRelease(v11[1]);
  swift_bridgeObjectRelease(v11[3]);
  swift_bridgeObjectRelease(v11[5]);
  v12 = (char *)a1 + a2[8];
  v13 = sub_100008EF4(&qword_1001079C8);
  v15 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v15(v12, v13);
  return ((uint64_t (*)(char *, uint64_t))v15)((char *)a1 + a2[9], v13);
}

_QWORD *sub_10004A4E0(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v44;
  char *v45;

  v6 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (uint64_t *)&a2[v12];
  v15 = sub_100008EF4(&qword_1001079B0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for LegibilityWeight(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
    {
      v18 = sub_100008EF4(&qword_100108550);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v17 + 16))(v13, v14, v16);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    }
    v20 = v13;
    v21 = v15;
    v22 = 1;
  }
  else
  {
    v19 = *v14;
    *v13 = *v14;
    swift_retain(v19);
    v20 = v13;
    v21 = v15;
    v22 = 0;
  }
  swift_storeEnumTagMultiPayload(v20, v21, v22);
  v23 = a3[6];
  v24 = a3[7];
  v25 = (char *)a1 + v23;
  v26 = &a2[v23];
  *v25 = *v26;
  v27 = *((_QWORD *)v26 + 1);
  v28 = *((_QWORD *)v26 + 2);
  *((_QWORD *)v25 + 1) = v27;
  *((_QWORD *)v25 + 2) = v28;
  v29 = *((_QWORD *)v26 + 3);
  *((_QWORD *)v25 + 3) = v29;
  v25[32] = v26[32];
  v31 = *((_QWORD *)v26 + 5);
  v30 = *((_QWORD *)v26 + 6);
  *((_QWORD *)v25 + 5) = v31;
  *((_QWORD *)v25 + 6) = v30;
  v32 = *((_QWORD *)v26 + 7);
  *((_QWORD *)v25 + 7) = v32;
  v25[64] = v26[64];
  *(_OWORD *)(v25 + 72) = *(_OWORD *)(v26 + 72);
  *((_QWORD *)v25 + 11) = *((_QWORD *)v26 + 11);
  v33 = (char *)a1 + v24;
  v34 = &a2[v24];
  v35 = a3;
  v36 = *(_QWORD *)v34;
  v37 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = v37;
  v38 = *((_QWORD *)v34 + 3);
  *((_QWORD *)v33 + 2) = *((_QWORD *)v34 + 2);
  *((_QWORD *)v33 + 3) = v38;
  v39 = *((_QWORD *)v34 + 5);
  *((_QWORD *)v33 + 4) = *((_QWORD *)v34 + 4);
  *((_QWORD *)v33 + 5) = v39;
  v33[48] = v34[48];
  v40 = v35[8];
  v44 = (char *)a1 + v40;
  v45 = &a2[v40];
  swift_retain(v27);
  swift_retain(v29);
  swift_retain(v31);
  swift_retain(v32);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v39);
  v41 = sub_100008EF4(&qword_1001079C8);
  v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
  v42(v44, v45, v41);
  v42((char *)a1 + v35[9], &a2[v35[9]], v41);
  return a1;
}

_QWORD *sub_10004A778(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    sub_1000135A0((uint64_t)a1, &qword_100105F38);
    v6 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_1000135A0((uint64_t)a1 + v12, &qword_1001079B0);
    v15 = sub_100008EF4(&qword_1001079B0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for LegibilityWeight(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      {
        v18 = sub_100008EF4(&qword_100108550);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v17 + 16))(v13, v14, v16);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
      }
      v20 = v13;
      v21 = v15;
      v22 = 1;
    }
    else
    {
      v19 = *v14;
      *v13 = *v14;
      swift_retain(v19);
      v20 = v13;
      v21 = v15;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
  }
  v23 = a3[6];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  *v24 = *((_BYTE *)a2 + v23);
  v26 = *(_QWORD *)((char *)a2 + v23 + 8);
  v27 = *(_QWORD *)((char *)a1 + v23 + 8);
  *((_QWORD *)v24 + 1) = v26;
  swift_retain(v26);
  swift_release(v27);
  *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
  v28 = *((_QWORD *)v25 + 3);
  v29 = *((_QWORD *)v24 + 3);
  *((_QWORD *)v24 + 3) = v28;
  swift_retain(v28);
  swift_release(v29);
  v24[32] = v25[32];
  v30 = *((_QWORD *)v25 + 5);
  v31 = *((_QWORD *)v24 + 5);
  *((_QWORD *)v24 + 5) = v30;
  swift_retain(v30);
  swift_release(v31);
  *((_QWORD *)v24 + 6) = *((_QWORD *)v25 + 6);
  v32 = *((_QWORD *)v25 + 7);
  v33 = *((_QWORD *)v24 + 7);
  *((_QWORD *)v24 + 7) = v32;
  swift_retain(v32);
  swift_release(v33);
  v24[64] = v25[64];
  *((_QWORD *)v24 + 9) = *((_QWORD *)v25 + 9);
  *((_QWORD *)v24 + 10) = *((_QWORD *)v25 + 10);
  *((_QWORD *)v24 + 11) = *((_QWORD *)v25 + 11);
  v34 = a3[7];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = *(_QWORD *)((char *)a2 + v34);
  v38 = *(_QWORD *)((char *)a1 + v34);
  *(_QWORD *)((char *)a1 + v34) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v39 = *((_QWORD *)v36 + 1);
  v40 = *((_QWORD *)v35 + 1);
  *((_QWORD *)v35 + 1) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  *((_QWORD *)v35 + 2) = *((_QWORD *)v36 + 2);
  v41 = *((_QWORD *)v36 + 3);
  v42 = *((_QWORD *)v35 + 3);
  *((_QWORD *)v35 + 3) = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  *((_QWORD *)v35 + 4) = *((_QWORD *)v36 + 4);
  v43 = *((_QWORD *)v36 + 5);
  v44 = *((_QWORD *)v35 + 5);
  *((_QWORD *)v35 + 5) = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  v35[48] = v36[48];
  v45 = a3[8];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = sub_100008EF4(&qword_1001079C8);
  v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 24);
  v49(v46, v47, v48);
  v49((char *)a1 + a3[9], (char *)a2 + a3[9], v48);
  return a1;
}

char *sub_10004AA9C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);

  v6 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100008EF4(&qword_1001079B0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for LegibilityWeight(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      v14 = sub_100008EF4(&qword_100108550);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v9, v10, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v15 = a3[6];
  v16 = a3[7];
  v17 = &a1[v15];
  v18 = &a2[v15];
  v19 = *((_OWORD *)v18 + 3);
  *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
  *((_OWORD *)v17 + 3) = v19;
  v20 = *((_OWORD *)v18 + 5);
  *((_OWORD *)v17 + 4) = *((_OWORD *)v18 + 4);
  *((_OWORD *)v17 + 5) = v20;
  v21 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v21;
  v22 = &a1[v16];
  v23 = &a2[v16];
  v24 = *((_OWORD *)v23 + 1);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v24;
  *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
  v22[48] = v23[48];
  v25 = a3[8];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = sub_100008EF4(&qword_1001079C8);
  v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32);
  v29(v26, v27, v28);
  v29(&a1[a3[9]], &a2[a3[9]], v28);
  return a1;
}

char *sub_10004ACA4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    sub_1000135A0((uint64_t)a1, &qword_100105F38);
    v6 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_1000135A0((uint64_t)&a1[v8], &qword_1001079B0);
    v11 = sub_100008EF4(&qword_1001079B0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for LegibilityWeight(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        v14 = sub_100008EF4(&qword_100108550);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *v16 = a2[v15];
  v18 = *(_QWORD *)&a1[v15 + 8];
  *((_QWORD *)v16 + 1) = *(_QWORD *)&a2[v15 + 8];
  swift_release(v18);
  v19 = *((_QWORD *)v17 + 3);
  v20 = *((_QWORD *)v16 + 3);
  *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
  *((_QWORD *)v16 + 3) = v19;
  swift_release(v20);
  v16[32] = v17[32];
  v21 = *((_QWORD *)v16 + 5);
  *((_QWORD *)v16 + 5) = *((_QWORD *)v17 + 5);
  swift_release(v21);
  v22 = *((_QWORD *)v17 + 7);
  v23 = *((_QWORD *)v16 + 7);
  *((_QWORD *)v16 + 6) = *((_QWORD *)v17 + 6);
  *((_QWORD *)v16 + 7) = v22;
  swift_release(v23);
  v16[64] = v17[64];
  *(_OWORD *)(v16 + 72) = *(_OWORD *)(v17 + 72);
  *((_QWORD *)v16 + 11) = *((_QWORD *)v17 + 11);
  v24 = a3[7];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *(_QWORD *)&a1[v24];
  *(_QWORD *)&a1[v24] = *(_QWORD *)&a2[v24];
  swift_bridgeObjectRelease(v27);
  v28 = *((_QWORD *)v25 + 1);
  *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
  swift_bridgeObjectRelease(v28);
  v29 = *((_QWORD *)v26 + 3);
  v30 = *((_QWORD *)v25 + 3);
  *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
  *((_QWORD *)v25 + 3) = v29;
  swift_bridgeObjectRelease(v30);
  v31 = *((_QWORD *)v26 + 5);
  v32 = *((_QWORD *)v25 + 5);
  *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
  *((_QWORD *)v25 + 5) = v31;
  swift_bridgeObjectRelease(v32);
  v25[48] = v26[48];
  v33 = a3[8];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = sub_100008EF4(&qword_1001079C8);
  v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 40);
  v37(v34, v35, v36);
  v37(&a1[a3[9]], &a2[a3[9]], v36);
  return a1;
}

uint64_t sub_10004AF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004AF64);
}

uint64_t sub_10004AF64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = sub_100008EF4(&qword_100105F58);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100008EF4(&qword_100108568);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_100008EF4(&qword_1001079C8);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[8];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10004B040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004B04C);
}

uint64_t sub_10004B04C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_100008EF4(&qword_100105F58);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_100008EF4(&qword_100108568);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6] + 8) = (a2 - 1);
        return result;
      }
      v10 = sub_100008EF4(&qword_1001079C8);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[8];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SportsWidgetBaseballClockView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001085C8;
  if (!qword_1001085C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SportsWidgetBaseballClockView);
  return result;
}

void sub_10004B160(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];
  uint64_t v9;
  uint64_t v10;

  sub_10000C6C4(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10004B214(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[3] = &unk_1000C9A48;
      sub_10003AFEC(319);
      if (v7 <= 0x3F)
      {
        v9 = *(_QWORD *)(v6 - 8) + 64;
        v10 = v9;
        swift_initStructMetadata(a1, 256, 6, v8, a1 + 16);
      }
    }
  }
}

void sub_10004B214(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001085D8)
  {
    v2 = sub_100008F80(&qword_100108550);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001085D8);
  }
}

uint64_t sub_10004B26C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2790, 1);
}

uint64_t sub_10004B27C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t KeyPath;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  int v131;
  unsigned __int8 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t OpaqueTypeConformance2;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  char v200;

  v186 = a2;
  v188 = sub_100008EF4(&qword_100108630);
  __chkstk_darwin(v188);
  v189 = (char *)&v167 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_100008EF4(&qword_100106138);
  v191 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v190 = (char *)&v167 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_100108638);
  __chkstk_darwin(v5);
  v176 = (uint64_t *)((char *)&v167 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v180 = sub_100008EF4(&qword_100108640);
  v7 = __chkstk_darwin(v180);
  v175 = (uint64_t)&v167 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v177 = (uint64_t)&v167 - v9;
  v182 = sub_100008EF4(&qword_100108648);
  __chkstk_darwin(v182);
  v184 = (uint64_t)&v167 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100008EF4(&qword_100108650);
  __chkstk_darwin(v178);
  v179 = (uint64_t)&v167 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_100008EF4(&qword_100108658);
  __chkstk_darwin(v183);
  v181 = (char *)&v167 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DynamicTypeSize(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v167 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008EF4(&qword_100108660);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v167 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_100008EF4(&qword_100108668);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v167 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v167 - v24;
  v187 = sub_100008EF4(&qword_100108670);
  __chkstk_darwin(v187);
  v27 = (char *)&v167 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for SportsWidgetBaseballClockView(0);
  v29 = v28;
  v30 = a1 + *(int *)(v28 + 28);
  if (*(_BYTE *)(v30 + 48) == 1)
  {
    v167 = v23;
    v174 = v19;
    v168 = v25;
    v169 = v16;
    v170 = v14;
    v171 = v13;
    v172 = v20;
    v31 = v190;
    v32 = v191;
    v173 = v27;
    if (*(unsigned __int8 *)(a1 + *(int *)(v28 + 24)) - 1 >= 2)
    {
      if (*(_BYTE *)(a1 + *(int *)(v28 + 24)))
      {
        sub_10004CB34();
        v158 = v184;
        v52 = v185;
        (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v184, v31, v185);
        swift_storeEnumTagMultiPayload(v158, v182, 1);
        v159 = sub_10004E230();
        v160 = sub_100008F80(&qword_100106150);
        v161 = sub_10004E43C((unint64_t *)&qword_100106158, &qword_100106150, &qword_100106180, &qword_100106188);
        v192 = v160;
        v193 = v161;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v192, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
        v75 = (uint64_t)v173;
        _ConditionalContent<>.init(storage:)(v158, v183, v52, v159, OpaqueTypeConformance2);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v52);
      }
      else
      {
        v122 = static VerticalAlignment.center.getter(v28);
        v123 = (uint64_t)v176;
        *v176 = v122;
        *(_QWORD *)(v123 + 8) = 0;
        *(_BYTE *)(v123 + 16) = 1;
        v124 = sub_100008EF4(&qword_1001086A8);
        v125 = sub_10004BFC0(a1, v123 + *(int *)(v124 + 44));
        v126 = static Edge.Set.top.getter(v125);
        v127 = v126;
        v128 = static Edge.Set.bottom.getter(v126);
        v129 = Edge.Set.init(rawValue:)(0);
        v130 = Edge.Set.init(rawValue:)(v129);
        if (Edge.Set.init(rawValue:)(v130 & v127) != v127)
          v129 = Edge.Set.init(rawValue:)(v129 | v127);
        v131 = Edge.Set.init(rawValue:)(v129);
        v132 = Edge.Set.init(rawValue:)(v131 & v128);
        v133 = v184;
        v75 = (uint64_t)v173;
        v134 = (uint64_t)v181;
        v135 = v180;
        v136 = v178;
        if (v132 != v128)
          LOBYTE(v129) = Edge.Set.init(rawValue:)(v129 | v128);
        v137 = (uint64_t)v169;
        sub_10009FD4C((uint64_t)v169);
        sub_100016568(v137);
        v139 = v138;
        (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v137, v171);
        v140 = EdgeInsets.init(_all:)(v139);
        v142 = v141;
        v144 = v143;
        v146 = v145;
        v147 = v175;
        sub_10001355C(v123, v175, &qword_100108638);
        v148 = v147 + *(int *)(v135 + 36);
        *(_BYTE *)v148 = v129;
        *(double *)(v148 + 8) = v140;
        *(_QWORD *)(v148 + 16) = v142;
        *(_QWORD *)(v148 + 24) = v144;
        *(_QWORD *)(v148 + 32) = v146;
        *(_BYTE *)(v148 + 40) = 0;
        sub_1000135A0(v123, &qword_100108638);
        v149 = v177;
        sub_100013880(v147, v177, &qword_100108640);
        v150 = v179;
        sub_10001355C(v149, v179, &qword_100108640);
        swift_storeEnumTagMultiPayload(v150, v136, 1);
        v151 = sub_10004E29C();
        v152 = sub_10004E320();
        _ConditionalContent<>.init(storage:)(v150, v172, v135, v151, v152);
        sub_10001355C(v134, v133, &qword_100108658);
        swift_storeEnumTagMultiPayload(v133, v182, 0);
        v153 = sub_10004E230();
        v154 = v134;
        v155 = sub_100008F80(&qword_100106150);
        v156 = sub_10004E43C((unint64_t *)&qword_100106158, &qword_100106150, &qword_100106180, &qword_100106188);
        v192 = v155;
        v193 = v156;
        v157 = swift_getOpaqueTypeConformance2(&v192, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
        v52 = v185;
        _ConditionalContent<>.init(storage:)(v133, v183, v185, v153, v157);
        sub_1000135A0(v154, &qword_100108658);
        sub_1000135A0(v149, &qword_100108640);
      }
      v76 = v188;
      v77 = (uint64_t)v189;
      v78 = v187;
    }
    else
    {
      sub_100008EF4(&qword_1001079C8);
      v33 = ScaledMetric.wrappedValue.getter(&v192);
      v34 = v192;
      v35 = static HorizontalAlignment.center.getter(v33);
      v36 = v174;
      *v174 = v35;
      v36[1] = v34;
      *((_BYTE *)v36 + 16) = 0;
      v37 = sub_100008EF4(&qword_1001086B0);
      v38 = sub_10004D00C(a1, (uint64_t)v36 + *(int *)(v37 + 44));
      v39 = static Edge.Set.top.getter(v38);
      v40 = v39;
      v41 = static Edge.Set.bottom.getter(v39);
      v42 = Edge.Set.init(rawValue:)(0);
      v43 = Edge.Set.init(rawValue:)(v42);
      if (Edge.Set.init(rawValue:)(v43 & v40) != v40)
        v42 = Edge.Set.init(rawValue:)(v42 | v40);
      v44 = Edge.Set.init(rawValue:)(v42);
      v45 = Edge.Set.init(rawValue:)(v44 & v41);
      v46 = v182;
      v47 = v179;
      v48 = v178;
      v49 = v171;
      v50 = v170;
      v51 = (uint64_t)v169;
      if (v45 != v41)
        LOBYTE(v42) = Edge.Set.init(rawValue:)(v42 | v41);
      v52 = v185;
      sub_10009FD4C(v51);
      sub_100016568(v51);
      v54 = v53;
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v51, v49);
      v55 = EdgeInsets.init(_all:)(v54);
      v57 = v56;
      v59 = v58;
      v61 = v60;
      v62 = v174;
      v63 = (uint64_t)v167;
      sub_10001355C((uint64_t)v174, (uint64_t)v167, &qword_100108660);
      v64 = v172;
      v65 = v63 + *(int *)(v172 + 36);
      *(_BYTE *)v65 = v42;
      *(double *)(v65 + 8) = v55;
      *(_QWORD *)(v65 + 16) = v57;
      *(_QWORD *)(v65 + 24) = v59;
      *(_QWORD *)(v65 + 32) = v61;
      *(_BYTE *)(v65 + 40) = 0;
      sub_1000135A0((uint64_t)v62, &qword_100108660);
      v66 = (uint64_t)v168;
      sub_100013880(v63, (uint64_t)v168, &qword_100108668);
      sub_10001355C(v66, v47, &qword_100108668);
      swift_storeEnumTagMultiPayload(v47, v48, 0);
      v67 = sub_10004E29C();
      v68 = sub_10004E320();
      v69 = (uint64_t)v181;
      _ConditionalContent<>.init(storage:)(v47, v64, v180, v67, v68);
      v70 = v184;
      sub_10001355C(v69, v184, &qword_100108658);
      swift_storeEnumTagMultiPayload(v70, v46, 0);
      v71 = sub_10004E230();
      v72 = sub_100008F80(&qword_100106150);
      v73 = sub_10004E43C((unint64_t *)&qword_100106158, &qword_100106150, &qword_100106180, &qword_100106188);
      v192 = v72;
      v193 = v73;
      v74 = swift_getOpaqueTypeConformance2(&v192, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
      v75 = (uint64_t)v173;
      _ConditionalContent<>.init(storage:)(v70, v183, v52, v71, v74);
      sub_1000135A0(v69, &qword_100108658);
      sub_1000135A0(v66, &qword_100108668);
      v76 = v188;
      v77 = (uint64_t)v189;
      v78 = v187;
    }
    sub_10001355C(v75, v77, &qword_100108670);
    swift_storeEnumTagMultiPayload(v77, v76, 0);
    v163 = sub_10004E214();
    v164 = sub_100008F80(&qword_100106150);
    v165 = sub_10004E43C((unint64_t *)&qword_100106158, &qword_100106150, &qword_100106180, &qword_100106188);
    v192 = v164;
    v193 = v165;
    v166 = swift_getOpaqueTypeConformance2(&v192, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
    _ConditionalContent<>.init(storage:)(v77, v78, v52, v163, v166);
    return sub_1000135A0(v75, &qword_100108670);
  }
  else
  {
    v79 = *(_QWORD *)(v30 + 24);
    v192 = *(_QWORD *)(v30 + 16);
    v193 = v79;
    v80 = sub_100013080();
    swift_bridgeObjectRetain(v79);
    v81 = Text.init<A>(_:)(&v192, &type metadata for String, v80);
    v83 = v82;
    v85 = v84;
    v87 = v86 & 1;
    v184 = a1 + *(int *)(v29 + 24);
    v88 = Text.foregroundColor(_:)(*(_QWORD *)(v184 + 40), v81, v82, v87, v84);
    v90 = v89;
    v92 = v91;
    v94 = v93 & 1;
    sub_1000130C4(v81, v83, v87);
    swift_bridgeObjectRelease(v85);
    v95 = Text.monospacedDigit()(v88, v90, v94, v92);
    v97 = v96;
    v99 = v98;
    v101 = v100 & 1;
    sub_1000130C4(v88, v90, v94);
    swift_bridgeObjectRelease(v92);
    v102 = v184;
    v103 = Text.font(_:)(*(_QWORD *)(v184 + 56), v95, v97, v101, v99);
    v105 = v104;
    v107 = v106;
    LOBYTE(v85) = v108 & 1;
    sub_1000130C4(v95, v97, v101);
    swift_bridgeObjectRelease(v99);
    v109 = *(_QWORD *)(v102 + 48);
    v110 = v102;
    KeyPath = swift_getKeyPath(&unk_1000C9AE0);
    LOBYTE(v99) = *(_BYTE *)(v110 + 64);
    v112 = swift_getKeyPath(&unk_1000C9B10);
    v192 = v103;
    v193 = v105;
    v194 = v85;
    v195 = v107;
    v196 = KeyPath;
    v197 = v109;
    v198 = 0;
    v199 = v112;
    v200 = v99;
    v113 = sub_100008EF4(&qword_100106150);
    v114 = sub_10004E43C((unint64_t *)&qword_100106158, &qword_100106150, &qword_100106180, &qword_100106188);
    v115 = v190;
    View.accessibilityIdentifier(key:location:)(10, 0, 14, 2, v113, v114);
    sub_1000130C4(v103, v105, v85);
    swift_release(v112);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v107);
    v116 = v191;
    v117 = v189;
    v118 = v185;
    (*(void (**)(char *, char *, uint64_t))(v191 + 16))(v189, v115, v185);
    swift_storeEnumTagMultiPayload(v117, v188, 1);
    v119 = sub_10004E214();
    v192 = v113;
    v193 = v114;
    v120 = swift_getOpaqueTypeConformance2(&v192, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
    _ConditionalContent<>.init(storage:)(v117, v187, v118, v119, v120);
    return (*(uint64_t (**)(char *, uint64_t))(v116 + 8))(v115, v118);
  }
}

uint64_t sub_10004BFC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  void (*v40)(char *, uint64_t);
  uint64_t (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int (*v122)(char *, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD v146[3];
  uint64_t v147;
  unsigned __int8 v148;
  uint64_t v149;
  unsigned __int8 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 v154;
  uint64_t v155;
  unsigned __int8 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int8 v160;
  uint64_t v161;
  unsigned __int8 v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD v165[3];

  v139 = a2;
  v136 = sub_100008EF4(&qword_1001086D8);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v144 = (uint64_t)&v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100008EF4(&qword_100108788);
  v4 = __chkstk_darwin(v134);
  v138 = (uint64_t)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v133 = (char *)&v107 - v7;
  __chkstk_darwin(v6);
  v137 = (uint64_t)&v107 - v8;
  v9 = type metadata accessor for SportsWidgetBaseballClockView(0);
  v125 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v126 = v10;
  v127 = (uint64_t)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008EF4(&qword_100108550);
  v12 = __chkstk_darwin(v11);
  v130 = (uint64_t)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v107 - v14;
  v142 = type metadata accessor for LegibilityWeight(0);
  v16 = *(_QWORD *)(v142 - 8);
  v17 = __chkstk_darwin(v142);
  v129 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v107 - v19;
  v141 = type metadata accessor for DynamicTypeSize(0);
  v119 = *(_QWORD *)(v141 - 8);
  v21 = __chkstk_darwin(v141);
  v140 = (char *)&v107 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v124 = (uint64_t)&v107 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v107 - v25;
  v121 = sub_100008EF4(&qword_100106138);
  v120 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v28 = (char *)&v107 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100008EF4(&qword_100108790);
  v29 = __chkstk_darwin(v118);
  v132 = (uint64_t)&v107 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v107 - v32;
  __chkstk_darwin(v31);
  v143 = (uint64_t)&v107 - v34;
  sub_10004CB34();
  v35 = (_QWORD *)(a1 + *(int *)(v9 + 28));
  v117 = v35[2];
  v116 = v35[3];
  v36 = v35[5];
  v115 = v35[4];
  sub_10009FD4C((uint64_t)v26);
  v128 = v9;
  v37 = *(int *)(v9 + 20);
  v131 = a1;
  v123 = a1 + v37;
  sub_10009FF0C((uint64_t)v15);
  v38 = v142;
  v145 = v16;
  v122 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v122(v15, 1, v142) == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v145 + 104))(v20, enum case for LegibilityWeight.regular(_:), v38);
    sub_1000135A0((uint64_t)v15, &qword_100108550);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v145 + 32))(v20, v15, v38);
  }
  v39 = sub_100016B60(v117, v116, v115, v36, v26, (uint64_t)v20);
  v40 = *(void (**)(char *, uint64_t))(v145 + 8);
  v40(v20, v38);
  v41 = *(uint64_t (**)(char *, uint64_t))(v119 + 8);
  v42 = v26;
  v43 = v141;
  v44 = v41(v42, v141);
  v45 = static Alignment.center.getter(v44);
  _FrameLayout.init(width:height:alignment:)(v146, *(_QWORD *)&v39, 0, 0, 1, v45, v46);
  v47 = v120;
  v48 = v121;
  (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v33, v28, v121);
  v49 = &v33[*(int *)(v118 + 36)];
  v50 = v146[1];
  *(_OWORD *)v49 = v146[0];
  *((_OWORD *)v49 + 1) = v50;
  *((_OWORD *)v49 + 2) = v146[2];
  (*(void (**)(char *, uint64_t))(v47 + 8))(v28, v48);
  sub_100013880((uint64_t)v33, v143, &qword_100108790);
  v51 = v124;
  v52 = v131;
  sub_10009FD4C(v124);
  sub_100016884(v51);
  v54 = v53;
  v55 = v41((char *)v51, v43);
  v56 = static Alignment.center.getter(v55);
  v58 = _FrameLayout.init(width:height:alignment:)(&v147, v54, 0, 0, 1, v56, v57);
  v121 = v147;
  LODWORD(v120) = v148;
  v119 = v149;
  LODWORD(v118) = v150;
  v117 = v151;
  v116 = v152;
  v115 = static Alignment.center.getter(v58);
  v114 = v59;
  v60 = v127;
  sub_10004E3A4(v52, v127);
  v61 = *(unsigned __int8 *)(v125 + 80);
  v62 = (v61 + 16) & ~v61;
  v63 = swift_allocObject(&unk_1000FAB20, v62 + v126, v61 | 7);
  sub_10004E3EC(v60, v63 + v62);
  sub_100008EF4(&qword_1001079C8);
  ScaledMetric.wrappedValue.getter(v165);
  v64 = *(_QWORD *)&v165[0];
  v65 = ScaledMetric.wrappedValue.getter(v165);
  v66 = *(_QWORD *)&v165[0];
  v67 = static Alignment.center.getter(v65);
  _FrameLayout.init(width:height:alignment:)(&v153, v64, 0, v66, 0, v67, v68);
  v128 = v153;
  LODWORD(v127) = v154;
  v126 = v155;
  LODWORD(v125) = v156;
  v113 = v157;
  v112 = v158;
  sub_10009FD4C(v51);
  sub_100016884(v51);
  v70 = v69;
  v71 = v41((char *)v51, v43);
  v72 = static Alignment.center.getter(v71);
  _FrameLayout.init(width:height:alignment:)(&v159, v70, 0, 0, 1, v72, v73);
  v124 = v159;
  v111 = v160;
  v110 = v161;
  v109 = v162;
  v108 = v163;
  v107 = v164;
  sub_10004CD58(v144);
  v74 = v35[2];
  v75 = v35[3];
  v76 = v35[4];
  v77 = v35[5];
  sub_10009FD4C((uint64_t)v140);
  v78 = v130;
  sub_10009FF0C(v130);
  v79 = v142;
  if (v122((char *)v78, 1, v142) == 1)
  {
    v80 = (uint64_t)v129;
    (*(void (**)(char *, _QWORD, uint64_t))(v145 + 104))(v129, enum case for LegibilityWeight.regular(_:), v79);
    sub_1000135A0(v78, &qword_100108550);
  }
  else
  {
    v80 = (uint64_t)v129;
    (*(void (**)(char *, uint64_t, uint64_t))(v145 + 32))(v129, v78, v79);
  }
  v81 = v74;
  v82 = v140;
  v83 = sub_100016B60(v81, v75, v76, v77, v140, v80);
  v40((char *)v80, v79);
  v84 = v41(v82, v141);
  v85 = static Alignment.center.getter(v84);
  _FrameLayout.init(width:height:alignment:)(v165, *(_QWORD *)&v83, 0, 0, 1, v85, v86);
  v87 = v135;
  v88 = (uint64_t)v133;
  v89 = v144;
  v90 = v136;
  (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v133, v144, v136);
  v91 = (_OWORD *)(v88 + *(int *)(v134 + 36));
  v92 = v165[1];
  *v91 = v165[0];
  v91[1] = v92;
  v91[2] = v165[2];
  (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v89, v90);
  v93 = v137;
  sub_100013880(v88, v137, &qword_100108788);
  v94 = v143;
  v95 = v132;
  sub_10001355C(v143, v132, &qword_100108790);
  v96 = v138;
  sub_10001355C(v93, v138, &qword_100108788);
  v97 = v139;
  sub_10001355C(v95, v139, &qword_100108790);
  v98 = (int *)sub_100008EF4(&qword_100108798);
  v99 = v97 + v98[12];
  *(_QWORD *)v99 = 0;
  *(_BYTE *)(v99 + 8) = 1;
  *(_QWORD *)(v99 + 16) = v121;
  *(_BYTE *)(v99 + 24) = v120;
  *(_QWORD *)(v99 + 32) = v119;
  *(_BYTE *)(v99 + 40) = v118;
  v100 = v116;
  *(_QWORD *)(v99 + 48) = v117;
  *(_QWORD *)(v99 + 56) = v100;
  v101 = v97 + v98[16];
  v102 = v114;
  *(_QWORD *)v101 = v115;
  *(_QWORD *)(v101 + 8) = v102;
  *(_QWORD *)(v101 + 16) = sub_10004E430;
  *(_QWORD *)(v101 + 24) = v63;
  *(_QWORD *)(v101 + 32) = v128;
  *(_BYTE *)(v101 + 40) = v127;
  *(_QWORD *)(v101 + 48) = v126;
  *(_BYTE *)(v101 + 56) = v125;
  v103 = v112;
  *(_QWORD *)(v101 + 64) = v113;
  *(_QWORD *)(v101 + 72) = v103;
  v104 = v97 + v98[20];
  *(_QWORD *)v104 = 0;
  *(_BYTE *)(v104 + 8) = 1;
  *(_QWORD *)(v104 + 16) = v124;
  *(_BYTE *)(v104 + 24) = v111;
  *(_QWORD *)(v104 + 32) = v110;
  *(_BYTE *)(v104 + 40) = v109;
  v105 = v107;
  *(_QWORD *)(v104 + 48) = v108;
  *(_QWORD *)(v104 + 56) = v105;
  sub_10001355C(v96, v97 + v98[24], &qword_100108788);
  swift_retain(v63);
  sub_1000135A0(v93, &qword_100108788);
  sub_1000135A0(v94, &qword_100108790);
  sub_1000135A0(v96, &qword_100108788);
  swift_release(v63);
  return sub_1000135A0(v95, &qword_100108790);
}

uint64_t sub_10004CB34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;

  v1 = type metadata accessor for SportsWidgetBaseballClockView(0);
  v2 = v0 + *(int *)(v1 + 28);
  v3 = *(_QWORD *)(v2 + 24);
  v39 = *(_QWORD *)(v2 + 16);
  v40 = v3;
  v4 = sub_100013080();
  swift_bridgeObjectRetain(v3);
  v5 = Text.init<A>(_:)(&v39, &type metadata for String, v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v38 = v0 + *(int *)(v1 + 24);
  v12 = Text.foregroundColor(_:)(*(_QWORD *)(v38 + 40), v5, v6, v11, v8);
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  sub_1000130C4(v5, v7, v11);
  swift_bridgeObjectRelease(v9);
  v19 = Text.monospacedDigit()(v12, v14, v18, v16);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  sub_1000130C4(v12, v14, v18);
  swift_bridgeObjectRelease(v16);
  v26 = Text.font(_:)(*(_QWORD *)(v38 + 56), v19, v21, v25, v23);
  v28 = v27;
  v30 = v29;
  LOBYTE(v9) = v31 & 1;
  sub_1000130C4(v19, v21, v25);
  swift_bridgeObjectRelease(v23);
  v32 = *(_QWORD *)(v38 + 48);
  KeyPath = swift_getKeyPath(&unk_1000C9AE0);
  LOBYTE(v25) = *(_BYTE *)(v38 + 64);
  v34 = swift_getKeyPath(&unk_1000C9B10);
  v39 = v26;
  v40 = v28;
  v41 = v9;
  v42 = v30;
  v43 = KeyPath;
  v44 = v32;
  v45 = 0;
  v46 = v34;
  v47 = v25;
  v35 = sub_100008EF4(&qword_100106150);
  v36 = sub_10004E43C((unint64_t *)&qword_100106158, &qword_100106150, &qword_100106180, &qword_100106188);
  View.accessibilityIdentifier(key:location:)(32, 0, 14, 2, v35, v36);
  sub_1000130C4(v26, v28, v9);
  swift_release(v34);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v30);
}

uint64_t sub_10004CD58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE v39[12];
  int v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;

  v46 = a1;
  v2 = sub_100008EF4(&qword_100108708);
  v44 = *(_QWORD *)(v2 - 8);
  v45 = v2;
  __chkstk_darwin(v2);
  v41 = &v39[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v43 = sub_100008EF4(&qword_100108710);
  __chkstk_darwin(v43);
  v42 = &v39[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for SportsWidgetBaseballClockView(0);
  v6 = v1 + *(int *)(v5 + 28);
  v7 = *(_QWORD *)(v6 + 40);
  v47 = *(_QWORD *)(v6 + 32);
  v48 = v7;
  v8 = sub_100013080();
  swift_bridgeObjectRetain(v7);
  v9 = Text.init<A>(_:)(&v47, &type metadata for String, v8);
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  v16 = v1 + *(int *)(v5 + 24);
  v17 = Text.foregroundColor(_:)(*(_QWORD *)(v16 + 8), v9, v10, v15, v12);
  v19 = v18;
  v21 = v20;
  LOBYTE(v5) = v22 & 1;
  v40 = v22 & 1;
  sub_1000130C4(v9, v11, v15);
  swift_bridgeObjectRelease(v13);
  v23 = *(_QWORD *)(v16 + 16);
  KeyPath = swift_getKeyPath(&unk_1000C9AE0);
  v25 = *(_QWORD *)(v16 + 24);
  v26 = swift_getKeyPath(&unk_1000C9B40);
  v47 = v17;
  v48 = v19;
  v49 = v5;
  v50 = v21;
  v51 = KeyPath;
  v27 = KeyPath;
  v52 = v23;
  v53 = 0;
  v54 = v26;
  v55 = v25;
  swift_retain(v25);
  v28 = sub_100008EF4(&qword_100108718);
  v29 = sub_10004E43C(&qword_100108720, &qword_100108718, &qword_100108728, &qword_100108730);
  v30 = v41;
  View.monospacedDigit()(v28, v29);
  sub_1000130C4(v17, v19, v40);
  swift_release(v25);
  swift_release(v26);
  swift_release(v27);
  swift_bridgeObjectRelease(v21);
  LOBYTE(v23) = *(_BYTE *)(v16 + 32);
  v31 = swift_getKeyPath(&unk_1000C9B10);
  v33 = v44;
  v32 = v45;
  v34 = (uint64_t)v42;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v44 + 16))(v42, v30, v45);
  v35 = v43;
  v36 = v34 + *(int *)(v43 + 36);
  *(_QWORD *)v36 = v31;
  *(_BYTE *)(v36 + 8) = v23;
  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v30, v32);
  v37 = sub_10004E4C4();
  View.accessibilityIdentifier(key:location:)(33, 0, 14, 2, v35, v37);
  return sub_1000135A0(v34, &qword_100108710);
}

uint64_t sub_10004D00C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;

  v4 = sub_100008EF4(&qword_1001086B8);
  v5 = __chkstk_darwin(v4);
  v40 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - v7;
  v9 = type metadata accessor for SportsWidgetBaseballClockView(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = static Alignment.center.getter(v12);
  v38 = v14;
  v39 = v13;
  sub_10004E3A4(a1, (uint64_t)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_1000FAAF8, v16 + v11, v15 | 7);
  sub_10004E3EC((uint64_t)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16);
  sub_100008EF4(&qword_1001079C8);
  ScaledMetric.wrappedValue.getter(&v42);
  v18 = v42;
  v19 = ScaledMetric.wrappedValue.getter(&v42);
  v20 = v42;
  v21 = static Alignment.center.getter(v19);
  _FrameLayout.init(width:height:alignment:)(&v42, v18, 0, v20, 0, v21, v22);
  v23 = v42;
  v24 = v43;
  v25 = v44;
  v37 = v45;
  v35 = v47;
  v36 = v46;
  v26 = ScaledMetric.wrappedValue.getter(&v41);
  v27 = v41;
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v26);
  *((_QWORD *)v8 + 1) = v27;
  v8[16] = 0;
  v28 = sub_100008EF4(&qword_1001086C0);
  sub_10004D27C(a1, &v8[*(int *)(v28 + 44)]);
  v29 = v40;
  sub_10001355C((uint64_t)v8, v40, &qword_1001086B8);
  v30 = v38;
  *(_QWORD *)a2 = v39;
  *(_QWORD *)(a2 + 8) = v30;
  *(_QWORD *)(a2 + 16) = sub_10004E430;
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = v23;
  *(_BYTE *)(a2 + 40) = v24;
  *(_QWORD *)(a2 + 48) = v25;
  *(_BYTE *)(a2 + 56) = v37;
  v31 = v35;
  *(_QWORD *)(a2 + 64) = v36;
  *(_QWORD *)(a2 + 72) = v31;
  v32 = sub_100008EF4(&qword_1001086C8);
  sub_10001355C(v29, a2 + *(int *)(v32 + 48), &qword_1001086B8);
  swift_retain(v17);
  sub_1000135A0((uint64_t)v8, &qword_1001086B8);
  sub_1000135A0(v29, &qword_1001086B8);
  return swift_release(v17);
}

uint64_t sub_10004D27C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;

  v4 = sub_100008EF4(&qword_1001086D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008EF4(&qword_1001086D8);
  v59 = *(_QWORD *)(v7 - 8);
  v60 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v53 - v11;
  v63 = sub_100008EF4(&qword_1001086E0);
  __chkstk_darwin(v63);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008EF4(&qword_1001086E8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v53 - v19;
  v21 = sub_100008EF4(&qword_100106138);
  v65 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v64 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v62 = (char *)&v53 - v24;
  sub_10004CB34();
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for SportsWidgetBaseballClockView(0) + 24)) == 2)
  {
    swift_storeEnumTagMultiPayload(v14, v63, 0);
    v25 = sub_100013840(&qword_1001086F8, &qword_1001086D0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v14, &type metadata for EmptyView, v4, &protocol witness table for EmptyView, v25);
  }
  else
  {
    v26 = LocalizedStringKey.init(stringLiteral:)(47042, 0xA200000000000000);
    v27 = Text.init(_:tableName:bundle:comment:)(v26);
    v57 = v18;
    v58 = a2;
    v28 = v27;
    v55 = v12;
    v56 = v4;
    v30 = v29;
    v61 = v20;
    v32 = v31;
    v34 = v33 & 1;
    sub_10004CD58((uint64_t)v12);
    v54 = v14;
    v35 = v59;
    v36 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
    v37 = v12;
    v38 = v60;
    v36(v10, v37, v60);
    *(_QWORD *)v6 = v28;
    *((_QWORD *)v6 + 1) = v30;
    v6[16] = v34;
    *((_QWORD *)v6 + 3) = v32;
    v39 = sub_100008EF4(&qword_1001086F0);
    v36(&v6[*(int *)(v39 + 48)], v10, v38);
    sub_10003258C(v28, v30, v34);
    swift_bridgeObjectRetain(v32);
    sub_10003258C(v28, v30, v34);
    v40 = *(void (**)(char *, uint64_t))(v35 + 8);
    swift_bridgeObjectRetain(v32);
    v40(v10, v38);
    sub_1000130C4(v28, v30, v34);
    swift_bridgeObjectRelease(v32);
    v41 = (uint64_t)v54;
    sub_10001355C((uint64_t)v6, (uint64_t)v54, &qword_1001086D0);
    swift_storeEnumTagMultiPayload(v41, v63, 1);
    v42 = sub_100013840(&qword_1001086F8, &qword_1001086D0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v41, &type metadata for EmptyView, v56, &protocol witness table for EmptyView, v42);
    sub_1000135A0((uint64_t)v6, &qword_1001086D0);
    v40(v55, v38);
    v43 = v28;
    v44 = v34;
    v18 = v57;
    a2 = v58;
    sub_1000130C4(v43, v30, v44);
    v45 = v32;
    v20 = v61;
    swift_bridgeObjectRelease(v45);
  }
  v47 = v64;
  v46 = v65;
  v48 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  v49 = v62;
  v48(v64, v62, v21);
  sub_10001355C((uint64_t)v20, (uint64_t)v18, &qword_1001086E8);
  v48(a2, v47, v21);
  v50 = sub_100008EF4(&qword_100108700);
  sub_10001355C((uint64_t)v18, (uint64_t)&a2[*(int *)(v50 + 48)], &qword_1001086E8);
  sub_1000135A0((uint64_t)v20, &qword_1001086E8);
  v51 = *(void (**)(char *, uint64_t))(v46 + 8);
  v51(v49, v21);
  sub_1000135A0((uint64_t)v18, &qword_1001086E8);
  return ((uint64_t (*)(char *, uint64_t))v51)(v47, v21);
}

uint64_t sub_10004D6FC@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  double v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  void (*v44)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD v56[15];
  double v57;
  _OWORD v58[15];
  _OWORD v59[14];
  _BYTE v60[231];
  char v61;

  v52 = a2;
  v3 = sub_100008EF4(&qword_100108740);
  v50 = *(_QWORD *)(v3 - 8);
  v51 = v3;
  v4 = __chkstk_darwin(v3);
  v49 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v53 = (char *)&v46 - v6;
  v47 = sub_100008EF4(&qword_100108748);
  v7 = *(_QWORD *)(v47 - 8);
  v8 = __chkstk_darwin(v47);
  v48 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - v10;
  v12 = type metadata accessor for SportsWidgetBaseballClockView(0);
  v13 = a1 + *(int *)(v12 + 24);
  v14 = *(double *)(v13 + 80);
  v15 = GeometryProxy.size.getter(v12) * 0.5 - v14;
  v16 = *(double *)(v13 + 72) * v15;
  v18 = static Alignment.center.getter(v17);
  v20 = v19;
  sub_10004DB00(a1, (uint64_t)v58, v15, v16, v14);
  v56[12] = v58[12];
  v56[13] = v58[13];
  v56[14] = v58[14];
  v56[8] = v58[8];
  v56[9] = v58[9];
  v56[10] = v58[10];
  v56[11] = v58[11];
  v56[4] = v58[4];
  v56[5] = v58[5];
  v56[6] = v58[6];
  v56[7] = v58[7];
  v56[0] = v58[0];
  v56[1] = v58[1];
  v56[2] = v58[2];
  v56[3] = v58[3];
  v54 = v18;
  v55 = v20;
  v21 = sub_100008EF4(&qword_100108750);
  v22 = sub_100013840(&qword_100108758, &qword_100108750, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v46 = v11;
  View.accessibilityIdentifier(key:location:)(30, 0, 14, 2, v21, v22);
  v23 = sub_10004E61C((uint64_t *)v58);
  v24 = ceil(GeometryProxy.size.getter(v23) / 5.0);
  v26 = static VerticalAlignment.center.getter(v25);
  v27 = sub_10004DDE0(a1, (uint64_t)v59, v24);
  *(_OWORD *)&v60[167] = v59[10];
  *(_OWORD *)&v60[183] = v59[11];
  *(_OWORD *)&v60[199] = v59[12];
  *(_OWORD *)&v60[215] = v59[13];
  *(_OWORD *)&v60[103] = v59[6];
  *(_OWORD *)&v60[119] = v59[7];
  *(_OWORD *)&v60[135] = v59[8];
  *(_OWORD *)&v60[151] = v59[9];
  *(_OWORD *)&v60[39] = v59[2];
  *(_OWORD *)&v60[55] = v59[3];
  *(_OWORD *)&v60[71] = v59[4];
  *(_OWORD *)&v60[87] = v59[5];
  *(_OWORD *)&v60[7] = v59[0];
  v61 = 0;
  *(_OWORD *)&v60[23] = v59[1];
  GeometryProxy.size.getter(v27);
  *(_OWORD *)((char *)&v56[11] + 1) = *(_OWORD *)&v60[176];
  *(_OWORD *)((char *)&v56[12] + 1) = *(_OWORD *)&v60[192];
  *(_OWORD *)((char *)&v56[13] + 1) = *(_OWORD *)&v60[208];
  *(_OWORD *)((char *)&v56[7] + 1) = *(_OWORD *)&v60[112];
  *(_OWORD *)((char *)&v56[8] + 1) = *(_OWORD *)&v60[128];
  *(_OWORD *)((char *)&v56[9] + 1) = *(_OWORD *)&v60[144];
  *(_OWORD *)((char *)&v56[10] + 1) = *(_OWORD *)&v60[160];
  *(_OWORD *)((char *)&v56[3] + 1) = *(_OWORD *)&v60[48];
  *(_OWORD *)((char *)&v56[4] + 1) = *(_OWORD *)&v60[64];
  *(_OWORD *)((char *)&v56[5] + 1) = *(_OWORD *)&v60[80];
  *(_OWORD *)((char *)&v56[6] + 1) = *(_OWORD *)&v60[96];
  *(_OWORD *)((char *)v56 + 1) = *(_OWORD *)v60;
  *(_OWORD *)((char *)&v56[1] + 1) = *(_OWORD *)&v60[16];
  v54 = v26;
  v55 = 0;
  LOBYTE(v56[0]) = 0;
  *(_OWORD *)((char *)&v56[2] + 1) = *(_OWORD *)&v60[32];
  v56[14] = *(unint64_t *)&v60[223];
  v57 = v28 - v24;
  v29 = sub_100008EF4(&qword_100108760);
  v30 = sub_10004E598();
  v31 = v53;
  View.accessibilityIdentifier(key:location:)(31, 0, 14, 2, v29, v30);
  sub_10004E61C((uint64_t *)v59);
  v32 = v7;
  v33 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v34 = v48;
  v35 = v11;
  v36 = v47;
  v33(v48, v35, v47);
  v37 = v49;
  v38 = v50;
  v39 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v40 = v51;
  v39(v49, v31, v51);
  v41 = v52;
  v33(v52, v34, v36);
  v42 = sub_100008EF4(&qword_100108780);
  v39(&v41[*(int *)(v42 + 48)], v37, v40);
  v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v53, v40);
  v44 = *(void (**)(char *, uint64_t))(v32 + 8);
  v44(v46, v36);
  v43(v37, v40);
  return ((uint64_t (*)(char *, uint64_t))v44)(v34, v36);
}

_QWORD *sub_10004DB00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  _QWORD *result;
  uint64_t v11;
  int v12;
  void *v13;
  char **v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  void *v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  int v31;
  void *v32;
  char **v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  __int128 v66;

  result = (_QWORD *)type metadata accessor for SportsWidgetBaseballClockView(0);
  v11 = *(_QWORD *)(a1 + *((int *)result + 7));
  if (*(_QWORD *)(v11 + 16) < 2uLL)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  v12 = *(unsigned __int8 *)(v11 + 33);
  v13 = (void *)objc_opt_self(UIColor);
  v14 = &selRef_labelColor;
  if (!v12)
    v14 = &selRef_tertiaryLabelColor;
  v49 = Color.init(uiColor:)(objc_msgSend(v13, *v14));
  v15 = a4;
  v16 = static Alignment.center.getter(v49);
  result = _FrameLayout.init(width:height:alignment:)(&v50, *(_QWORD *)&a3, 0, *(_QWORD *)&a4, 0, v16, v17);
  if (*(_QWORD *)(v11 + 16) < 3uLL)
    goto LABEL_12;
  v18 = v50;
  v19 = v51;
  v20 = v52;
  v21 = v53;
  v22 = v54;
  v48 = v55;
  v23 = *(unsigned __int8 *)(v11 + 34);
  v24 = (void *)objc_opt_self(UIColor);
  v25 = &selRef_labelColor;
  if (!v23)
    v25 = &selRef_tertiaryLabelColor;
  v26 = Color.init(uiColor:)(objc_msgSend(v24, *v25));
  v27 = static Alignment.center.getter(v26);
  result = _FrameLayout.init(width:height:alignment:)(&v56, *(_QWORD *)&a3, 0, *(_QWORD *)&a4, 0, v27, v28);
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_13;
  v46 = v60;
  v47 = v61;
  v42 = v22;
  v43 = v26;
  v29 = v59;
  v30 = v57;
  v44 = v56;
  v45 = v58;
  v31 = *(unsigned __int8 *)(v11 + 32);
  v32 = (void *)objc_opt_self(UIColor);
  v33 = &selRef_labelColor;
  if (!v31)
    v33 = &selRef_tertiaryLabelColor;
  v34 = Color.init(uiColor:)(objc_msgSend(v32, *v33));
  v35 = a4 * 0.5 + a5;
  v36 = static Alignment.center.getter(v34);
  result = _FrameLayout.init(width:height:alignment:)(&v62, *(_QWORD *)&a3, 0, *(_QWORD *)&v15, 0, v36, v37);
  v38 = v62;
  v39 = v63;
  v40 = v64;
  v41 = v65;
  *(_QWORD *)a2 = v49;
  *(_WORD *)(a2 + 8) = 256;
  *(_QWORD *)(a2 + 16) = v18;
  *(_BYTE *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v20;
  *(_BYTE *)(a2 + 40) = v21;
  *(_QWORD *)(a2 + 48) = v42;
  *(_QWORD *)(a2 + 56) = v48;
  *(double *)(a2 + 64) = a3 * 0.5 + a5;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = v43;
  *(_WORD *)(a2 + 88) = 256;
  *(_QWORD *)(a2 + 96) = v44;
  *(_BYTE *)(a2 + 104) = v30;
  *(_QWORD *)(a2 + 112) = v45;
  *(_BYTE *)(a2 + 120) = v29;
  *(_QWORD *)(a2 + 128) = v46;
  *(_QWORD *)(a2 + 136) = v47;
  *(_QWORD *)(a2 + 144) = 0;
  *(double *)(a2 + 152) = v35;
  *(_QWORD *)(a2 + 160) = v34;
  *(_WORD *)(a2 + 168) = 256;
  *(_QWORD *)(a2 + 176) = v38;
  *(_BYTE *)(a2 + 184) = v39;
  *(_QWORD *)(a2 + 192) = v40;
  *(_BYTE *)(a2 + 200) = v41;
  *(_OWORD *)(a2 + 208) = v66;
  *(double *)(a2 + 224) = a5 + a5 + a3;
  *(double *)(a2 + 232) = v35;
  return result;
}

_QWORD *sub_10004DDE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  _QWORD *result;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  void *v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  int v27;
  void *v28;
  char **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  __int128 v68;

  result = (_QWORD *)type metadata accessor for SportsWidgetBaseballClockView(0);
  v7 = *(_QWORD *)(a1 + *((int *)result + 7) + 8);
  if (!*(_QWORD *)(v7 + 16))
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  v8 = result;
  v9 = *(unsigned __int8 *)(v7 + 32);
  v10 = (void *)objc_opt_self(UIColor);
  v11 = &selRef_labelColor;
  if (!v9)
    v11 = &selRef_tertiaryLabelColor;
  v12 = Color.init(uiColor:)(objc_msgSend(v10, *v11));
  v13 = static Alignment.center.getter(v12);
  result = _FrameLayout.init(width:height:alignment:)(&v52, *(_QWORD *)&a3, 0, *(_QWORD *)&a3, 0, v13, v14);
  if (*(_QWORD *)(v7 + 16) < 2uLL)
    goto LABEL_12;
  v15 = v52;
  v16 = v53;
  v17 = v54;
  v49 = v55;
  v47 = v57;
  v48 = v56;
  v18 = *(_QWORD *)(a1 + *((int *)v8 + 6) + 88);
  v19 = *(unsigned __int8 *)(v7 + 33);
  v20 = (void *)objc_opt_self(UIColor);
  v21 = &selRef_labelColor;
  if (!v19)
    v21 = &selRef_tertiaryLabelColor;
  v22 = Color.init(uiColor:)(objc_msgSend(v20, *v21));
  v23 = static Alignment.center.getter(v22);
  result = _FrameLayout.init(width:height:alignment:)(&v58, *(_QWORD *)&a3, 0, *(_QWORD *)&a3, 0, v23, v24);
  if (*(_QWORD *)(v7 + 16) < 3uLL)
    goto LABEL_13;
  v43 = v62;
  v45 = v63;
  v39 = v22;
  v25 = v61;
  v41 = v60;
  v35 = v17;
  v26 = v59;
  v37 = v58;
  v27 = *(unsigned __int8 *)(v7 + 34);
  v28 = (void *)objc_opt_self(UIColor);
  v29 = &selRef_labelColor;
  if (!v27)
    v29 = &selRef_tertiaryLabelColor;
  v30 = Color.init(uiColor:)(objc_msgSend(v28, *v29, v35, v37, v39, v41, v43, v45));
  v31 = static Alignment.center.getter(v30);
  result = _FrameLayout.init(width:height:alignment:)(&v64, *(_QWORD *)&a3, 0, *(_QWORD *)&a3, 0, v31, v32);
  v33 = v64;
  v34 = v66;
  v51 = v65;
  v50 = v67;
  *(_QWORD *)a2 = v12;
  *(_WORD *)(a2 + 8) = 256;
  *(_QWORD *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 32) = v36;
  *(_BYTE *)(a2 + 40) = v49;
  *(_QWORD *)(a2 + 48) = v48;
  *(_QWORD *)(a2 + 56) = v47;
  *(_QWORD *)(a2 + 64) = v18;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = v40;
  *(_WORD *)(a2 + 88) = 256;
  *(_QWORD *)(a2 + 96) = v38;
  *(_BYTE *)(a2 + 104) = v26;
  *(_QWORD *)(a2 + 112) = v42;
  *(_BYTE *)(a2 + 120) = v25;
  *(_QWORD *)(a2 + 128) = v44;
  *(_QWORD *)(a2 + 136) = v46;
  *(_QWORD *)(a2 + 144) = v18;
  *(_BYTE *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = v30;
  *(_WORD *)(a2 + 168) = 256;
  *(_QWORD *)(a2 + 176) = v33;
  *(_BYTE *)(a2 + 184) = v51;
  *(_QWORD *)(a2 + 192) = v34;
  *(_BYTE *)(a2 + 200) = v50;
  *(_OWORD *)(a2 + 208) = v68;
  return result;
}

uint64_t sub_10004E0C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;

  v2 = v1;
  v4 = type metadata accessor for ContentTransition(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008EF4(&qword_100108618);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10004B27C(v2, (uint64_t)v10);
  static ContentTransition.identity.getter(v11);
  KeyPath = swift_getKeyPath(&unk_1000C9AB0);
  v13 = (uint64_t *)(a1 + *(int *)(sub_100008EF4(&qword_100108620) + 36));
  v14 = sub_100008EF4(&qword_100108628);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)v13 + *(int *)(v14 + 28), v7, v4);
  *v13 = KeyPath;
  sub_10001355C((uint64_t)v10, a1, &qword_100108618);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_1000135A0((uint64_t)v10, &qword_100108618);
}

uint64_t sub_10004E214()
{
  return sub_10004E968(&qword_100108678, &qword_100108670, (void (*)(void))sub_10004E230);
}

unint64_t sub_10004E230()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108680;
  if (!qword_100108680)
  {
    v1 = sub_100008F80(&qword_100108658);
    sub_10004E29C();
    sub_10004E320();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100108680);
  }
  return result;
}

unint64_t sub_10004E29C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108688;
  if (!qword_100108688)
  {
    v1 = sub_100008F80(&qword_100108668);
    sub_100013840(&qword_100108690, &qword_100108660, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100108688);
  }
  return result;
}

unint64_t sub_10004E320()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108698;
  if (!qword_100108698)
  {
    v1 = sub_100008F80(&qword_100108640);
    sub_100013840(&qword_1001086A0, &qword_100108638, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100108698);
  }
  return result;
}

uint64_t sub_10004E3A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SportsWidgetBaseballClockView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E3EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SportsWidgetBaseballClockView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E43C(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100008F80(a2);
    sub_100013168();
    sub_100013840(a3, a4, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004E4C4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100108738;
  if (!qword_100108738)
  {
    v1 = sub_100008F80(&qword_100108710);
    v2[0] = sub_100008F80(&qword_100108718);
    v2[1] = sub_10004E43C(&qword_100108720, &qword_100108718, &qword_100108728, &qword_100108730);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.monospacedDigit()>>, 1);
    sub_100013840(&qword_100106180, &qword_100106188, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100108738);
  }
  return result;
}

unint64_t sub_10004E598()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108768;
  if (!qword_100108768)
  {
    v1 = sub_100008F80(&qword_100108760);
    sub_100013840(&qword_100108770, &qword_100108778, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100108768);
  }
  return result;
}

uint64_t *sub_10004E61C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[10];
  swift_release(a1[20]);
  swift_release(v3);
  swift_release(v2);
  return a1;
}

uint64_t sub_10004E668()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);

  v1 = (int *)type metadata accessor for SportsWidgetBaseballClockView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (char *)(v0 + v4);
  v7 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*(_QWORD *)v6);
  }
  v9 = &v6[v1[5]];
  v10 = sub_100008EF4(&qword_1001079B0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for LegibilityWeight(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
  }
  else
  {
    swift_release(*(_QWORD *)v9);
  }
  v13 = v3 | 7;
  v14 = v4 + v5;
  v15 = &v6[v1[6]];
  swift_release(*((_QWORD *)v15 + 1));
  swift_release(*((_QWORD *)v15 + 3));
  swift_release(*((_QWORD *)v15 + 5));
  swift_release(*((_QWORD *)v15 + 7));
  v16 = &v6[v1[7]];
  swift_bridgeObjectRelease(*(_QWORD *)v16);
  swift_bridgeObjectRelease(*((_QWORD *)v16 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v16 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v16 + 5));
  v17 = &v6[v1[8]];
  v18 = sub_100008EF4(&qword_1001079C8);
  v19 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  v19(&v6[v1[9]], v18);
  return swift_deallocObject(v0, v14, v13);
}

uint64_t sub_10004E818@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SportsWidgetBaseballClockView(0) - 8) + 80);
  return sub_10004D6FC(v1 + ((v3 + 16) & ~v3), a1);
}

unint64_t sub_10004E868()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001087A0;
  if (!qword_1001087A0)
  {
    v1 = sub_100008F80(&qword_100108620);
    sub_10004E8EC();
    sub_100013840(&qword_1001087C0, &qword_100108628, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001087A0);
  }
  return result;
}

unint64_t sub_10004E8EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001087A8;
  if (!qword_1001087A8)
  {
    v1 = sub_100008F80(&qword_100108618);
    sub_10004E968(&qword_1001087B0, &qword_1001087B8, (void (*)(void))sub_10004E214);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001087A8);
  }
  return result;
}

uint64_t sub_10004E968(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = sub_100008F80(a2);
    a3();
    v7[0] = sub_100008F80(&qword_100106150);
    v7[1] = sub_10004E43C((unint64_t *)&qword_100106158, &qword_100106150, &qword_100106180, &qword_100106188);
    swift_getOpaqueTypeConformance2(v7, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004EA24()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  Swift::String v23;
  void *object;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  Swift::String v39;
  void *v40;
  Swift::String v41;
  void *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  Swift::String v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  Swift::String v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  Swift::String v75;
  void *v76;
  uint64_t v77;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  _BYTE v84[24];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;

  v1 = v0;
  v2 = sub_100008EF4(&qword_100105F50);
  __chkstk_darwin(v2);
  v80 = (uint64_t)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v81 = *(_QWORD *)(v4 - 8);
  v82 = v4;
  __chkstk_darwin(v4);
  v79 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SportsWidgetClock(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = 0x203A416E6F43;
  v97 = 0xE600000000000000;
  v9 = *v0;
  v10 = v0[1];
  v11 = v1[2];
  v12 = v1[3];
  v13 = v1[4];
  v14 = v1[5];
  v15 = v1[6];
  v16 = v1[7];
  v17 = v1[8];
  v18 = v1[11];
  v19 = *((_BYTE *)v1 + 96);
  v20 = v1[13];
  v21 = *((_BYTE *)v1 + 112);
  *(_QWORD *)v84 = v9;
  *(_QWORD *)&v84[8] = v10;
  *(_QWORD *)&v84[16] = v11;
  v85 = v12;
  v86 = v13;
  v87 = v14;
  v88 = v15;
  v89 = v16;
  v90 = v17;
  v91 = *(_OWORD *)(v1 + 9);
  v92 = v18;
  v93 = v19;
  v94 = v20;
  v22 = v91;
  v95 = v21;
  swift_bridgeObjectRetain(v18);
  swift_retain(v20);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v22);
  v23._countAndFlagsBits = String.init<A>(reflecting:)(v84, &type metadata for SportsWidgetContender);
  object = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(object);
  v25._countAndFlagsBits = 8236;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v83._countAndFlagsBits = 0x203A426E6F43;
  v83._object = (void *)0xE600000000000000;
  v26 = v1[16];
  v27 = v1[17];
  v28 = v1[18];
  v29 = v1[19];
  v30 = v1[20];
  v31 = v1[21];
  v32 = v1[22];
  v33 = v1[23];
  v34 = v1[26];
  v35 = *((_BYTE *)v1 + 216);
  v36 = v1[28];
  v37 = *((_BYTE *)v1 + 232);
  *(_QWORD *)v84 = v1[15];
  *(_QWORD *)&v84[8] = v26;
  *(_QWORD *)&v84[16] = v27;
  v85 = v28;
  v86 = v29;
  v87 = v30;
  v88 = v31;
  v89 = v32;
  v90 = v33;
  v91 = *((_OWORD *)v1 + 12);
  v92 = v34;
  v93 = v35;
  v94 = v36;
  v38 = v91;
  v95 = v37;
  swift_bridgeObjectRetain(v34);
  swift_retain(v36);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v38);
  v39._countAndFlagsBits = String.init<A>(reflecting:)(v84, &type metadata for SportsWidgetContender);
  v40 = v39._object;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v40);
  v41._countAndFlagsBits = 8236;
  v41._object = (void *)0xE200000000000000;
  String.append(_:)(v41);
  v42 = v83._object;
  String.append(_:)(v83);
  swift_bridgeObjectRelease(v42);
  v43 = type metadata accessor for SportsWidgetContentViewModel(0);
  v44 = (int *)v43;
  if (*((_BYTE *)v1 + *(int *)(v43 + 36)) == 1)
  {
    sub_1000134DC((uint64_t)v1 + *(int *)(v43 + 24), (uint64_t)v8, type metadata accessor for SportsWidgetClock);
    *(_QWORD *)v84 = String.init<A>(reflecting:)(v8, v6);
    *(_QWORD *)&v84[8] = v45;
    v46._countAndFlagsBits = 8236;
    v46._object = (void *)0xE200000000000000;
    String.append(_:)(v46);
    v47 = *(_QWORD *)&v84[8];
    String.append(_:)(*(Swift::String *)v84);
    swift_bridgeObjectRelease(v47);
  }
  if (*((_BYTE *)v1 + v44[10]) == 1)
  {
    v48 = (char *)v1 + v44[7];
    v49 = *((_QWORD *)v48 + 3);
    *(_QWORD *)v84 = *(_QWORD *)v48;
    *(_OWORD *)&v84[8] = *(_OWORD *)(v48 + 8);
    v85 = v49;
    v50 = *(_QWORD *)&v84[8];
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v50);
    *(_QWORD *)v84 = String.init<A>(reflecting:)(v84, &type metadata for SportsWidgetEventInfoViewModel);
    *(_QWORD *)&v84[8] = v51;
    v52._countAndFlagsBits = 8236;
    v52._object = (void *)0xE200000000000000;
    String.append(_:)(v52);
    v53 = *(_QWORD *)&v84[8];
    String.append(_:)(*(Swift::String *)v84);
    swift_bridgeObjectRelease(v53);
  }
  *(_QWORD *)v84 = 0;
  *(_QWORD *)&v84[8] = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(*(_QWORD *)&v84[8]);
  strcpy(v84, "PbP enabled: ");
  *(_WORD *)&v84[14] = -4864;
  v54 = *((unsigned __int8 *)v1 + v44[12]);
  if (*((_BYTE *)v1 + v44[12]))
    v55 = 1702195828;
  else
    v55 = 0x65736C6166;
  if (*((_BYTE *)v1 + v44[12]))
    v56 = 0xE400000000000000;
  else
    v56 = 0xE500000000000000;
  v57 = v56;
  String.append(_:)(*(Swift::String *)&v55);
  swift_bridgeObjectRelease(v56);
  v58._countAndFlagsBits = 8236;
  v58._object = (void *)0xE200000000000000;
  String.append(_:)(v58);
  v59 = *(_QWORD *)&v84[8];
  String.append(_:)(*(Swift::String *)v84);
  swift_bridgeObjectRelease(v59);
  v60 = v81;
  if (v54 == 1)
  {
    v61 = (char *)v1 + v44[8];
    v63 = *(_QWORD *)v61;
    v62 = *((_QWORD *)v61 + 1);
    v64 = v61[16];
    v65 = *((_QWORD *)v61 + 3);
    v66 = v61[32];
    v67 = *((_QWORD *)v61 + 5);
    LOBYTE(v61) = v61[48];
    *(_QWORD *)v84 = v63;
    *(_QWORD *)&v84[8] = v62;
    v84[16] = v64;
    v85 = v65;
    LOBYTE(v86) = v66;
    v87 = v67;
    LOBYTE(v88) = (_BYTE)v61;
    swift_bridgeObjectRetain(v62);
    swift_retain(v65);
    swift_retain(v67);
    *(_QWORD *)v84 = String.init<A>(reflecting:)(v84, &type metadata for SportsWidgetPlay);
    *(_QWORD *)&v84[8] = v68;
    v69._countAndFlagsBits = 8236;
    v69._object = (void *)0xE200000000000000;
    String.append(_:)(v69);
    v70 = *(_QWORD *)&v84[8];
    String.append(_:)(*(Swift::String *)v84);
    swift_bridgeObjectRelease(v70);
  }
  v71 = v80;
  sub_10001355C((uint64_t)v1 + v44[13], v80, &qword_100105F50);
  v72 = v82;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v71, 1, v82) == 1)
  {
    sub_1000135A0(v71, &qword_100105F50);
  }
  else
  {
    v73 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v79, v71, v72);
    strcpy(v84, "Event url: ");
    *(_DWORD *)&v84[12] = -352321536;
    v74 = sub_1000139F8(&qword_1001087C8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v75._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v72, v74);
    v76 = v75._object;
    String.append(_:)(v75);
    swift_bridgeObjectRelease(v76);
    v77 = *(_QWORD *)&v84[8];
    String.append(_:)(*(Swift::String *)v84);
    swift_bridgeObjectRelease(v77);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v73, v72);
  }
  return v96;
}

uint64_t sub_10004EFF4()
{
  uint64_t v0;
  Swift::String v1;
  void *v2;
  Swift::String v3;
  void *object;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v11;
  __int128 v12;
  __int128 v13;

  v12 = *(_OWORD *)(v0 + 32);
  v13 = v12;
  sub_10004FE50((uint64_t)&v13);
  v1._countAndFlagsBits = 32;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2 = *(void **)(v0 + 24);
  v11._countAndFlagsBits = *(_QWORD *)(v0 + 16);
  v11._object = v2;
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = String.init<A>(reflecting:)(&v11, &type metadata for SportsWidgetScoreViewModel);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 0x203A656D6F48202CLL;
  v11._object = (void *)0xE800000000000000;
  if ((*(_BYTE *)(v0 + 96) & 1) != 0)
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 96) & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(v6);
  v8 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v8);
  if ((*(_BYTE *)(v0 + 112) & 1) != 0)
  {
    v9._countAndFlagsBits = 0x72656E6E695720;
    v9._object = (void *)0xE700000000000000;
    String.append(_:)(v9);
  }
  return v12;
}

uint64_t sub_10004F114()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_10004F140()
{
  Swift::String *v0;
  Swift::String *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int *v10;
  void *object;
  uint64_t countAndFlagsBits;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  char *v16;
  Swift::String v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String v25;
  void *v26;
  void *v27;
  uint64_t v28;
  Swift::String v29;
  void *v30;
  int v31;
  char *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v37;
  Swift::String v38;
  void *v39;
  Swift::String v40;
  void *v41;
  uint64_t v42;
  char *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v46;
  unint64_t v47;

  v1 = v0;
  v2 = sub_100008EF4(&qword_100105F48);
  __chkstk_darwin(v2);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = 0;
  v47 = 0xE000000000000000;
  v9 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
  if (*((_BYTE *)&v1->_countAndFlagsBits + *(int *)(v9 + 44)) == 1)
  {
    v10 = (int *)v9;
    v43 = v8;
    v45._countAndFlagsBits = 0;
    v45._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease(v45._object);
    v45._countAndFlagsBits = 0x203A786966657250;
    v45._object = (void *)0xE800000000000000;
    object = v1[2]._object;
    if (object)
      countAndFlagsBits = v1[2]._countAndFlagsBits;
    else
      countAndFlagsBits = 0;
    if (object)
      v13 = v1[2]._object;
    else
      v13 = (void *)0xE000000000000000;
    swift_bridgeObjectRetain(object);
    v14._countAndFlagsBits = countAndFlagsBits;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v13);
    v15._countAndFlagsBits = 0x767265746E49202CLL;
    v15._object = (void *)0xEC000000203A6C61;
    String.append(_:)(v15);
    v16 = (char *)v1 + v10[8];
    v44._countAndFlagsBits = 0;
    v44._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)(v16, &v44, v5, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v17._countAndFlagsBits = 3026478;
    v17._object = (void *)0xE300000000000000;
    String.append(_:)(v17);
    v18 = sub_100008EF4(&qword_100105F40);
    _print_unlocked<A, B>(_:_:)(&v16[*(int *)(v18 + 36)], &v44, v5, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v19 = v44._object;
    String.append(_:)(v44);
    swift_bridgeObjectRelease(v19);
    v20._countAndFlagsBits = 8236;
    v20._object = (void *)0xE200000000000000;
    String.append(_:)(v20);
    v21 = v45._object;
    String.append(_:)(v45);
    swift_bridgeObjectRelease(v21);
    v45._countAndFlagsBits = 0;
    v45._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease(v45._object);
    v45._countAndFlagsBits = 0x676E69746E756F43;
    v45._object = (void *)0xEF203A6E776F6420;
    if (*((_BYTE *)&v1->_countAndFlagsBits + v10[10]))
      v22 = 1702195828;
    else
      v22 = 0x65736C6166;
    if (*((_BYTE *)&v1->_countAndFlagsBits + v10[10]))
      v23 = 0xE400000000000000;
    else
      v23 = 0xE500000000000000;
    v24 = v23;
    String.append(_:)(*(Swift::String *)&v22);
    swift_bridgeObjectRelease(v23);
    v25._countAndFlagsBits = 8236;
    v25._object = (void *)0xE200000000000000;
    String.append(_:)(v25);
    v26 = v45._object;
    String.append(_:)(v45);
    swift_bridgeObjectRelease(v26);
    v27 = v1[3]._object;
    if (v27)
    {
      v28 = v1[3]._countAndFlagsBits;
      v45._countAndFlagsBits = 0x203A786966667553;
      v45._object = (void *)0xE800000000000000;
      String.append(_:)(*(Swift::String *)(&v27 - 1));
      v29._countAndFlagsBits = 8236;
      v29._object = (void *)0xE200000000000000;
      String.append(_:)(v29);
      v30 = v45._object;
      String.append(_:)(v45);
      swift_bridgeObjectRelease(v30);
    }
    sub_10001355C((uint64_t)v1 + v10[9], (uint64_t)v4, &qword_100105F48);
    v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
    v32 = v43;
    if (v31 == 1)
    {
      sub_1000135A0((uint64_t)v4, &qword_100105F48);
      v33 = v1[1]._object;
      if (!v33)
        return v46;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v43, v4, v5);
      v45._countAndFlagsBits = 0x7461206573756150;
      v45._object = (void *)0xEA0000000000203ALL;
      v37 = sub_1000139F8(&qword_1001087D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v37);
      v39 = v38._object;
      String.append(_:)(v38);
      swift_bridgeObjectRelease(v39);
      v40._countAndFlagsBits = 8236;
      v40._object = (void *)0xE200000000000000;
      String.append(_:)(v40);
      v41 = v45._object;
      String.append(_:)(v45);
      swift_bridgeObjectRelease(v41);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v32, v5);
      v33 = v1[1]._object;
      if (!v33)
        return v46;
    }
    goto LABEL_20;
  }
  String.append(_:)(*v1);
  v33 = v1[1]._object;
  if (v33)
  {
LABEL_20:
    v34 = v1[1]._countAndFlagsBits;
    v45._countAndFlagsBits = 0x203A726564616548;
    v45._object = (void *)0xE800000000000000;
    String.append(_:)(*(Swift::String *)(&v33 - 1));
    v35 = v45._object;
    String.append(_:)(v45);
    swift_bridgeObjectRelease(v35);
  }
  return v46;
}

uint64_t sub_10004F590()
{
  Swift::String *v0;
  uint64_t v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  void *v5;
  Swift::String v6;
  void *v7;
  Swift::String v8;
  void *v9;
  void *v10;
  uint64_t v11;
  Swift::String v12;
  void *v13;
  uint64_t countAndFlagsBits;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;

  v17 = 0;
  v18 = 0xE000000000000000;
  if ((v0[3]._countAndFlagsBits & 1) != 0)
  {
    v16._countAndFlagsBits = 0x203A7365736142;
    v16._object = (void *)0xE700000000000000;
    countAndFlagsBits = v0->_countAndFlagsBits;
    swift_bridgeObjectRetain(countAndFlagsBits);
    v1 = sub_100008EF4(&qword_1001087D8);
    v2._countAndFlagsBits = String.init<A>(reflecting:)(&countAndFlagsBits, v1);
    object = v2._object;
    String.append(_:)(v2);
    swift_bridgeObjectRelease(object);
    v4._countAndFlagsBits = 8236;
    v4._object = (void *)0xE200000000000000;
    String.append(_:)(v4);
    v5 = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v5);
    v16._countAndFlagsBits = 0x203A7374754FLL;
    v16._object = (void *)0xE600000000000000;
    countAndFlagsBits = (uint64_t)v0->_object;
    swift_bridgeObjectRetain(countAndFlagsBits);
    v6._countAndFlagsBits = String.init<A>(reflecting:)(&countAndFlagsBits, v1);
    v7 = v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(v7);
    v8._countAndFlagsBits = 8236;
    v8._object = (void *)0xE200000000000000;
    String.append(_:)(v8);
    v9 = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v9);
    v16._countAndFlagsBits = 0x3A73656B69727453;
    v16._object = (void *)0xE900000000000020;
    v11 = v0[2]._countAndFlagsBits;
    v10 = v0[2]._object;
    swift_bridgeObjectRetain(v10);
    v12._countAndFlagsBits = v11;
    v12._object = v10;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v10);
    v13 = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    String.append(_:)(v0[1]);
  }
  return v17;
}

uint64_t sub_10004F720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *object;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000134DC(v1, (uint64_t)v4, v5);
  v6 = String.init<A>(reflecting:)(v4, v2);
  v15 = v6;
  v16 = v7;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for SportsWidgetSoccerClockViewModel(0) + 20));
  if (v8)
  {
    v14 = v8;
    swift_bridgeObjectRetain(v8);
    v9 = sub_100008EF4(&qword_1001087E0);
    v10._countAndFlagsBits = String.init<A>(reflecting:)(&v14, v9);
    object = v10._object;
    String.append(_:)(v10);
    swift_bridgeObjectRelease(object);
    return v15;
  }
  return v6;
}

uint64_t sub_10004F808()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = *v0;
  swift_bridgeObjectRetain(v3);
  v1 = sub_100008EF4(&qword_1001087E8);
  return String.init<A>(reflecting:)(&v3, v1);
}

uint64_t sub_10004F844()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1936943469;
  if (*v0 != 1)
    v1 = 1818324839;
  if (*v0)
    return v1;
  else
    return 0x7974706D65;
}

uint64_t sub_10004F88C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  void *v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  Swift::String v12;
  _QWORD v14[2];

  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v14, "Event info: ");
  HIWORD(v14[1]) = -5120;
  if (a2)
  {
    v8 = a2;
  }
  else
  {
    a1 = 0;
    v8 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain(a2);
  v9._countAndFlagsBits = a1;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 8236;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  if (a4)
  {
    v11 = a4;
  }
  else
  {
    a3 = 0;
    v11 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain(a4);
  v12._countAndFlagsBits = a3;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  return v14[0];
}

uint64_t sub_10004F97C()
{
  uint64_t v0;

  return sub_10004F88C(*(_QWORD *)v0, *(void **)(v0 + 8), *(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10004F988()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  __n128 v5;
  Swift::String v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  Swift::String v11;
  void *object;
  unint64_t v13;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)&v16 = 0x203A79616C50;
  *((_QWORD *)&v16 + 1) = 0xE600000000000000;
  v1 = *(_QWORD *)v0;
  v2 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v16 = *(_OWORD *)(v0 + 16);
  if ((v16 & 1) != 0)
  {
    *(_QWORD *)&v15 = 0x203A7466654CLL;
    *((_QWORD *)&v15 + 1) = 0xE600000000000000;
    v10 = swift_retain(*((_QWORD *)&v16 + 1));
    v11._countAndFlagsBits = Color.description.getter(v10);
    object = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(object);
    sub_10004FE78((uint64_t)&v16);
    v9 = 0xE600000000000000;
    v8 = 0x203A7466654CLL;
    goto LABEL_5;
  }
  v15 = *(_OWORD *)(v0 + 32);
  if ((v15 & 1) != 0)
  {
    v5 = swift_retain(*((_QWORD *)&v15 + 1));
    v6._countAndFlagsBits = Color.description.getter(v5);
    v7 = v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(v7);
    sub_10004FE78((uint64_t)&v15);
    v8 = 0x203A6874676952;
    v9 = 0xE700000000000000;
LABEL_5:
    v13 = v9;
    String.append(_:)(*(Swift::String *)&v8);
    swift_bridgeObjectRelease(v9);
  }
  return 0x203A79616C50;
}

unint64_t sub_10004FACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  Swift::String v22;
  void *v23;
  uint64_t v24;
  Swift::String v25;
  void *object;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  Swift::String v29;
  void *v30;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;

  v1 = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v32 - v5;
  v7 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v32 - v11;
  v13 = type metadata accessor for SportsWidgetClock(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000134DC(v0, (uint64_t)v15, v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v13);
  if (!EnumCaseMultiPayload)
  {
    sub_10001303C((uint64_t)v15, (uint64_t)v12, type metadata accessor for SportsWidgetGenericClockViewModel);
    *(_QWORD *)&v34[0] = 0;
    *((_QWORD *)&v34[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(*((_QWORD *)&v34[0] + 1));
    *(_QWORD *)&v34[0] = 0x20636972656E6547;
    *((_QWORD *)&v34[0] + 1) = 0xEF203A6B636F6C63;
    sub_1000134DC((uint64_t)v12, (uint64_t)v10, type metadata accessor for SportsWidgetGenericClockViewModel);
    v25._countAndFlagsBits = String.init<A>(reflecting:)(v10, v7);
    object = v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(object);
    v24 = *(_QWORD *)&v34[0];
    v27 = (uint64_t)v12;
    v28 = type metadata accessor for SportsWidgetGenericClockViewModel;
LABEL_6:
    sub_100013520(v27, v28);
    return v24;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_10001303C((uint64_t)v15, (uint64_t)v6, type metadata accessor for SportsWidgetSoccerClockViewModel);
    *(_QWORD *)&v34[0] = 0;
    *((_QWORD *)&v34[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease(*((_QWORD *)&v34[0] + 1));
    strcpy((char *)v34, "Soccer clock: ");
    HIBYTE(v34[0]) = -18;
    sub_1000134DC((uint64_t)v6, (uint64_t)v4, type metadata accessor for SportsWidgetSoccerClockViewModel);
    v29._countAndFlagsBits = String.init<A>(reflecting:)(v4, v1);
    v30 = v29._object;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(v30);
    v24 = *(_QWORD *)&v34[0];
    v27 = (uint64_t)v6;
    v28 = type metadata accessor for SportsWidgetSoccerClockViewModel;
    goto LABEL_6;
  }
  v18 = *((_QWORD *)v15 + 4);
  v19 = *((_QWORD *)v15 + 5);
  v20 = v15[48];
  *(_QWORD *)&v34[0] = 0;
  *((_QWORD *)&v34[0] + 1) = 0xE000000000000000;
  v21 = *((_OWORD *)v15 + 1);
  v32 = *(_OWORD *)v15;
  v33 = v21;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease(*((_QWORD *)&v34[0] + 1));
  v38 = 0xD000000000000010;
  v39 = 0x80000001000C0110;
  v34[0] = v32;
  v34[1] = v33;
  v35 = v18;
  v36 = v19;
  v37 = v20;
  v22._countAndFlagsBits = String.init<A>(reflecting:)(v34, &type metadata for SportsWidgetBaseballClockViewModel);
  v23 = v22._object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v23);
  return v38;
}

uint64_t sub_10004FDD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1)
    v2 = *(_QWORD *)(v0 + 32);
  else
    v2 = 0;
  if (v1)
    v3 = *(void **)(v0 + 40);
  else
    v3 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v1);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  return 0x6C7275206F676F4CLL;
}

uint64_t sub_10004FE50(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10004FE78(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return a1;
}

ValueMetadata *type metadata accessor for VideosDownloadWiFiQuality()
{
  return &type metadata for VideosDownloadWiFiQuality;
}

uint64_t _s17TVWidgetExtension25VideosDownloadWiFiQualityOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10004FF00 + 4 * byte_1000C9D55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10004FF34 + 4 * byte_1000C9D50[v4]))();
}

uint64_t sub_10004FF34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004FF3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004FF44);
  return result;
}

uint64_t sub_10004FF50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004FF58);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10004FF5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004FF64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VideosDownloadCellularQuality()
{
  return &type metadata for VideosDownloadCellularQuality;
}

Swift::Int sub_10004FF80(char a1)
{
  unint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  if ((a1 & 1) != 0)
    v2 = 0x80000001000BEFF0;
  else
    v2 = 0x80000001000BEFD0;
  String.hash(into:)(v4, 0xD000000000000013, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

Swift::Int sub_100050000(uint64_t a1, char a2)
{
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  if ((a2 & 1) != 0)
    v3 = 0x80000001000BEFF0;
  else
    v3 = 0x80000001000BEFD0;
  String.hash(into:)(v5, 0xD000000000000013, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100050078(uint64_t a1)
{
  return sub_1000507F4(a1, qword_10011EE98, 0xD000000000000015, 0x80000001000C0130);
}

unint64_t sub_10005009C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t, uint64_t);
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_BYTE *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t result;
  _BYTE v49[12];
  unsigned int v50;
  uint64_t v51;
  void (*v52)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_BYTE *, uint64_t, uint64_t, uint64_t);
  void (*v58)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;

  v0 = sub_100008EF4(&qword_1001074F8);
  __chkstk_darwin(v0);
  v66 = &v49[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v2 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v2);
  v65 = &v49[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = v4;
  __chkstk_darwin(v4);
  v8 = &v49[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v49[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v49[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v67 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v53 = &v49[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_100008EF4(&qword_1001088E0);
  v18 = sub_100008EF4(&qword_100107530);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = v18;
  v21 = *(_QWORD *)(v19 + 72);
  v61 = v18;
  v62 = v21;
  v22 = *(unsigned __int8 *)(v19 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(v17, v23 + 2 * v21, v22 | 7);
  v63 = xmmword_1000C8170;
  v64 = v24;
  *(_OWORD *)(v24 + 16) = xmmword_1000C8170;
  v59 = v24 + v23 + *(int *)(v20 + 48);
  v60 = v24 + v23;
  *(_BYTE *)(v24 + v23) = 0;
  v25 = String.LocalizationValue.init(stringLiteral:)(0x776F442074736146, 0xEE007364616F6C6ELL);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 104);
  v50 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v51 = v6;
  v27(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v6);
  v52 = v27;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0xD000000000000012, 0x80000001000BF530, v11, v8, 0, 0, 256);
  v28 = String.LocalizationValue.init(stringLiteral:)(0x1000000000000030, 0x80000001000C0150);
  static Locale.current.getter(v28);
  v27(v8, v26, v6);
  v29 = v65;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0xD000000000000012, 0x80000001000BF530, v11, v8, 0, 0, 256);
  v58 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56);
  v58(v29, 0, 1, v67);
  v30 = type metadata accessor for DisplayRepresentation.Image(0);
  v57 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v31 = v66;
  v57(v66, 1, 1, v30);
  v32 = sub_100008EF4(&qword_1001078F8);
  v33 = *(_QWORD *)(v15 + 72);
  v55 = v32;
  v56 = v33;
  v34 = *(unsigned __int8 *)(v15 + 80);
  v35 = (v34 + 32) & ~v34;
  v54 = v34 | 7;
  v36 = swift_allocObject(v32, v35 + v33, v34 | 7);
  *(_OWORD *)(v36 + 16) = xmmword_1000C6710;
  LocalizedStringResource.init(stringLiteral:)(0x6F7453207373654CLL, 0xEC00000065676172);
  v37 = v53;
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v53, v29, v31, v36);
  v38 = (_BYTE *)(v60 + v62);
  v62 += v60 + *(int *)(v61 + 48);
  *v38 = 1;
  v39 = String.LocalizationValue.init(stringLiteral:)(0x6175512068676948, 0xEC0000007974696CLL);
  static Locale.current.getter(v39);
  v40 = v50;
  v42 = v51;
  v41 = v52;
  v52(v8, v50, v51);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0xD000000000000012, 0x80000001000BF530, v11, v8, 0, 0, 256);
  v43 = String.LocalizationValue.init(stringLiteral:)(0x100000000000002ELL, 0x80000001000C0190);
  static Locale.current.getter(v43);
  v41(v8, v40, v42);
  v44 = v65;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0xD000000000000012, 0x80000001000BF530, v11, v8, 0, 0, 256);
  v45 = v44;
  v58(v44, 0, 1, v67);
  v46 = v66;
  v57(v66, 1, 1, v30);
  v47 = swift_allocObject(v55, v35 + 2 * v56, v54);
  *(_OWORD *)(v47 + 16) = v63;
  LocalizedStringResource.init(stringLiteral:)(0x44207265776F6C53, 0xEF64616F6C6E776FLL);
  LocalizedStringResource.init(stringLiteral:)(0x6F74532065726F4DLL, 0xEC00000065676172);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v37, v45, v46, v47);
  result = sub_10002CD7C(v64);
  qword_10011EEB0 = result;
  return result;
}

uint64_t sub_10005063C(char *a1, char *a2)
{
  return sub_10001933C(*a1, *a2);
}

Swift::Int sub_100050648()
{
  char *v0;

  return sub_10004FF80(*v0);
}

uint64_t sub_100050660(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;

  if (*v1)
    v2 = 0x80000001000BEFF0;
  else
    v2 = 0x80000001000BEFD0;
  String.hash(into:)(a1, 0xD000000000000013, v2);
  return swift_bridgeObjectRelease(v2);
}

Swift::Int sub_1000506B8(uint64_t a1)
{
  char *v1;

  return sub_100050000(a1, *v1);
}

uint64_t sub_1000506D0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1000F6DD0;
  return sub_100037E64(v2, a1, a2);
}

void sub_1000506DC(_QWORD *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;

  v2 = 0x80000001000BEFD0;
  if (*v1)
    v2 = 0x80000001000BEFF0;
  *a1 = 0xD000000000000013;
  a1[1] = v2;
}

void sub_100050718(_QWORD *a1@<X8>)
{
  *a1 = &off_1000F6FA0;
}

uint64_t sub_100050728@<X0>(uint64_t a1@<X8>)
{
  return sub_100037EE8(&qword_100105CC0, (uint64_t)qword_10011EE98, (uint64_t)sub_100050078, a1);
}

uint64_t sub_100050744(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005142C();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10005077C(uint64_t a1, uint64_t a2)
{
  return sub_100037FA8(a1, a2, &qword_100105CC8, &qword_10011EEB0, (uint64_t)sub_10005009C);
}

uint64_t sub_100050798(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000514BC();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_1000507D0(uint64_t a1)
{
  return sub_1000507F4(a1, qword_10011EEB8, 0xD000000000000019, 0x80000001000C01C0);
}

uint64_t sub_1000507F4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v7 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v14, a2);
  sub_10000909C(v14, (uint64_t)a2);
  LocalizedStringResource.init(stringLiteral:)(a3, a4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v13, v9);
}

unint64_t sub_100050900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t, uint64_t);
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_BYTE *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t result;
  _BYTE v49[12];
  unsigned int v50;
  uint64_t v51;
  void (*v52)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_BYTE *, uint64_t, uint64_t, uint64_t);
  void (*v58)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;

  v0 = sub_100008EF4(&qword_1001074F8);
  __chkstk_darwin(v0);
  v66 = &v49[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v2 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v2);
  v65 = &v49[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = v4;
  __chkstk_darwin(v4);
  v8 = &v49[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v49[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v49[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v67 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v53 = &v49[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_100008EF4(&qword_1001088E8);
  v18 = sub_100008EF4(&qword_100107540);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = v18;
  v21 = *(_QWORD *)(v19 + 72);
  v61 = v18;
  v62 = v21;
  v22 = *(unsigned __int8 *)(v19 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(v17, v23 + 2 * v21, v22 | 7);
  v63 = xmmword_1000C8170;
  v64 = v24;
  *(_OWORD *)(v24 + 16) = xmmword_1000C8170;
  v59 = v24 + v23 + *(int *)(v20 + 48);
  v60 = v24 + v23;
  *(_BYTE *)(v24 + v23) = 0;
  v25 = String.LocalizationValue.init(stringLiteral:)(0x776F442074736146, 0xEE007364616F6C6ELL);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 104);
  v50 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v51 = v6;
  v27(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v6);
  v52 = v27;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0xD000000000000012, 0x80000001000BF530, v11, v8, 0, 0, 256);
  v28 = String.LocalizationValue.init(stringLiteral:)(0x1000000000000030, 0x80000001000C01E0);
  static Locale.current.getter(v28);
  v27(v8, v26, v6);
  v29 = v65;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0xD000000000000012, 0x80000001000BF530, v11, v8, 0, 0, 256);
  v58 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56);
  v58(v29, 0, 1, v67);
  v30 = type metadata accessor for DisplayRepresentation.Image(0);
  v57 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v31 = v66;
  v57(v66, 1, 1, v30);
  v32 = sub_100008EF4(&qword_1001078F8);
  v33 = *(_QWORD *)(v15 + 72);
  v55 = v32;
  v56 = v33;
  v34 = *(unsigned __int8 *)(v15 + 80);
  v35 = (v34 + 32) & ~v34;
  v54 = v34 | 7;
  v36 = swift_allocObject(v32, v35 + v33, v34 | 7);
  *(_OWORD *)(v36 + 16) = xmmword_1000C6710;
  LocalizedStringResource.init(stringLiteral:)(0x6F7453207373654CLL, 0xEC00000065676172);
  v37 = v53;
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v53, v29, v31, v36);
  v38 = (_BYTE *)(v60 + v62);
  v62 += v60 + *(int *)(v61 + 48);
  *v38 = 1;
  v39 = String.LocalizationValue.init(stringLiteral:)(0x6175512068676948, 0xEC0000007974696CLL);
  static Locale.current.getter(v39);
  v40 = v50;
  v42 = v51;
  v41 = v52;
  v52(v8, v50, v51);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0xD000000000000012, 0x80000001000BF530, v11, v8, 0, 0, 256);
  v43 = String.LocalizationValue.init(stringLiteral:)(0x100000000000002ELL, 0x80000001000C0220);
  static Locale.current.getter(v43);
  v41(v8, v40, v42);
  v44 = v65;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0xD000000000000012, 0x80000001000BF530, v11, v8, 0, 0, 256);
  v45 = v44;
  v58(v44, 0, 1, v67);
  v46 = v66;
  v57(v66, 1, 1, v30);
  v47 = swift_allocObject(v55, v35 + 2 * v56, v54);
  *(_OWORD *)(v47 + 16) = v63;
  LocalizedStringResource.init(stringLiteral:)(0x44207265776F6C53, 0xEF64616F6C6E776FLL);
  LocalizedStringResource.init(stringLiteral:)(0x6F74532065726F4DLL, 0xEC00000065676172);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v37, v45, v46, v47);
  result = sub_10002CD98(v64);
  qword_10011EED0 = result;
  return result;
}

uint64_t sub_100050EA0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1000F6D80;
  return sub_100037E64(v2, a1, a2);
}

void sub_100050EAC(_QWORD *a1@<X8>)
{
  *a1 = &off_1000F6FC8;
}

uint64_t sub_100050EBC@<X0>(uint64_t a1@<X8>)
{
  return sub_100037EE8(&qword_100105CD0, (uint64_t)qword_10011EEB8, (uint64_t)sub_1000507D0, a1);
}

uint64_t sub_100050ED8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100051048();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100050F10(uint64_t a1, uint64_t a2)
{
  return sub_100037FA8(a1, a2, &qword_100105CD8, &qword_10011EED0, (uint64_t)sub_100050900);
}

uint64_t sub_100050F2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000510D8();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100050F68()
{
  unint64_t result;

  result = qword_1001087F0;
  if (!qword_1001087F0)
  {
    result = swift_getWitnessTable(&unk_1000C9DC0, &type metadata for VideosDownloadCellularQuality);
    atomic_store(result, (unint64_t *)&qword_1001087F0);
  }
  return result;
}

unint64_t sub_100050FB0()
{
  unint64_t result;

  result = qword_1001087F8;
  if (!qword_1001087F8)
  {
    result = swift_getWitnessTable(&unk_1000C9F70, &type metadata for VideosDownloadCellularQuality);
    atomic_store(result, (unint64_t *)&qword_1001087F8);
  }
  return result;
}

unint64_t sub_100050FF8()
{
  unint64_t result;

  result = qword_100108800;
  if (!qword_100108800)
  {
    result = swift_getWitnessTable(&unk_1000CA03C, &type metadata for VideosDownloadCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100108800);
  }
  return result;
}

uint64_t sub_10005103C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000384E4(a1, a2, a3, (uint64_t (*)(void))sub_100051048);
}

unint64_t sub_100051048()
{
  unint64_t result;

  result = qword_100108808;
  if (!qword_100108808)
  {
    result = swift_getWitnessTable(&unk_1000C9FA8, &type metadata for VideosDownloadCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100108808);
  }
  return result;
}

unint64_t sub_100051090()
{
  unint64_t result;

  result = qword_100108810;
  if (!qword_100108810)
  {
    result = swift_getWitnessTable(&unk_1000C9E28, &type metadata for VideosDownloadCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100108810);
  }
  return result;
}

unint64_t sub_1000510D8()
{
  unint64_t result;

  result = qword_100108818;
  if (!qword_100108818)
  {
    result = swift_getWitnessTable(&unk_1000C9DE8, &type metadata for VideosDownloadCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100108818);
  }
  return result;
}

unint64_t sub_100051120()
{
  unint64_t result;

  result = qword_100108820;
  if (!qword_100108820)
  {
    result = swift_getWitnessTable(&unk_1000C9E80, &type metadata for VideosDownloadCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100108820);
  }
  return result;
}

unint64_t sub_100051168()
{
  unint64_t result;

  result = qword_100108828;
  if (!qword_100108828)
  {
    result = swift_getWitnessTable(&unk_1000C9EA8, &type metadata for VideosDownloadCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100108828);
  }
  return result;
}

uint64_t sub_1000511AC()
{
  return sub_1000386AC(&qword_100108830, &qword_100108838);
}

unint64_t sub_1000511D4()
{
  unint64_t result;

  result = qword_100108840;
  if (!qword_100108840)
  {
    result = swift_getWitnessTable(&unk_1000C9F00, &type metadata for VideosDownloadCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100108840);
  }
  return result;
}

unint64_t sub_10005121C()
{
  unint64_t result;

  result = qword_100108848;
  if (!qword_100108848)
  {
    result = swift_getWitnessTable(&unk_1000C9ED0, &type metadata for VideosDownloadCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100108848);
  }
  return result;
}

unint64_t sub_100051264()
{
  unint64_t result;

  result = qword_100108850;
  if (!qword_100108850)
  {
    result = swift_getWitnessTable(&unk_1000CA004, &type metadata for VideosDownloadCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100108850);
  }
  return result;
}

uint64_t sub_1000512A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000387D8(a1, a2, a3, (uint64_t (*)(void))sub_100051048, (uint64_t (*)(void))sub_1000512BC);
}

unint64_t sub_1000512BC()
{
  unint64_t result;

  result = qword_100108858;
  if (!qword_100108858)
  {
    result = swift_getWitnessTable(&unk_1000C9F38, &type metadata for VideosDownloadCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100108858);
  }
  return result;
}

unint64_t sub_100051304()
{
  unint64_t result;

  result = qword_100108860;
  if (!qword_100108860)
  {
    result = swift_getWitnessTable(&unk_1000CA07C, &type metadata for VideosDownloadCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100108860);
  }
  return result;
}

unint64_t sub_10005134C()
{
  unint64_t result;

  result = qword_100108868;
  if (!qword_100108868)
  {
    result = swift_getWitnessTable(&unk_1000CA0A4, &type metadata for VideosDownloadWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_100108868);
  }
  return result;
}

unint64_t sub_100051394()
{
  unint64_t result;

  result = qword_100108870;
  if (!qword_100108870)
  {
    result = swift_getWitnessTable(&unk_1000CA254, &type metadata for VideosDownloadWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_100108870);
  }
  return result;
}

unint64_t sub_1000513DC()
{
  unint64_t result;

  result = qword_100108878;
  if (!qword_100108878)
  {
    result = swift_getWitnessTable(&unk_1000CA320, &type metadata for VideosDownloadWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_100108878);
  }
  return result;
}

uint64_t sub_100051420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000384E4(a1, a2, a3, (uint64_t (*)(void))sub_10005142C);
}

unint64_t sub_10005142C()
{
  unint64_t result;

  result = qword_100108880;
  if (!qword_100108880)
  {
    result = swift_getWitnessTable(&unk_1000CA28C, &type metadata for VideosDownloadWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_100108880);
  }
  return result;
}

unint64_t sub_100051474()
{
  unint64_t result;

  result = qword_100108888;
  if (!qword_100108888)
  {
    result = swift_getWitnessTable(&unk_1000CA10C, &type metadata for VideosDownloadWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_100108888);
  }
  return result;
}

unint64_t sub_1000514BC()
{
  unint64_t result;

  result = qword_100108890;
  if (!qword_100108890)
  {
    result = swift_getWitnessTable(&unk_1000CA0CC, &type metadata for VideosDownloadWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_100108890);
  }
  return result;
}

unint64_t sub_100051504()
{
  unint64_t result;

  result = qword_100108898;
  if (!qword_100108898)
  {
    result = swift_getWitnessTable(&unk_1000CA164, &type metadata for VideosDownloadWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_100108898);
  }
  return result;
}

unint64_t sub_10005154C()
{
  unint64_t result;

  result = qword_1001088A0;
  if (!qword_1001088A0)
  {
    result = swift_getWitnessTable(&unk_1000CA18C, &type metadata for VideosDownloadWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_1001088A0);
  }
  return result;
}

uint64_t sub_100051590()
{
  return sub_1000386AC(&qword_1001088A8, &qword_1001088B0);
}

unint64_t sub_1000515B8()
{
  unint64_t result;

  result = qword_1001088B8;
  if (!qword_1001088B8)
  {
    result = swift_getWitnessTable(&unk_1000CA1E4, &type metadata for VideosDownloadWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_1001088B8);
  }
  return result;
}

unint64_t sub_100051600()
{
  unint64_t result;

  result = qword_1001088C0;
  if (!qword_1001088C0)
  {
    result = swift_getWitnessTable(&unk_1000CA1B4, &type metadata for VideosDownloadWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_1001088C0);
  }
  return result;
}

unint64_t sub_100051648()
{
  unint64_t result;

  result = qword_1001088C8;
  if (!qword_1001088C8)
  {
    result = swift_getWitnessTable(&unk_1000CA2E8, &type metadata for VideosDownloadWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_1001088C8);
  }
  return result;
}

uint64_t sub_10005168C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000387D8(a1, a2, a3, (uint64_t (*)(void))sub_10005142C, (uint64_t (*)(void))sub_1000516A0);
}

unint64_t sub_1000516A0()
{
  unint64_t result;

  result = qword_1001088D0;
  if (!qword_1001088D0)
  {
    result = swift_getWitnessTable(&unk_1000CA21C, &type metadata for VideosDownloadWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_1001088D0);
  }
  return result;
}

unint64_t sub_1000516E8()
{
  unint64_t result;

  result = qword_1001088D8;
  if (!qword_1001088D8)
  {
    result = swift_getWitnessTable(&unk_1000CA360, &type metadata for VideosDownloadWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_1001088D8);
  }
  return result;
}

unint64_t sub_100051740()
{
  unint64_t result;

  result = qword_1001088F0;
  if (!qword_1001088F0)
  {
    result = swift_getWitnessTable(&unk_1000CA400, &type metadata for TVSettingsDownloadUseCellularEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1001088F0);
  }
  return result;
}

uint64_t sub_100051784()
{
  return sub_100013840(&qword_1001088F8, &qword_100108900, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

void sub_1000517B0()
{
  qword_10011EED8 = (uint64_t)&off_1000F6B88;
}

uint64_t sub_1000517C4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011EEE0);
  sub_10000909C(v16, (uint64_t)qword_10011EEE0);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001000C0250);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_1000519EC()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000905C(v0, qword_10011EEF8);
  sub_10000909C(v0, (uint64_t)qword_10011EEF8);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000026, 0x80000001000C0390);
}

uint64_t sub_100051A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008EF4(&qword_100106608);
  sub_10000905C(v0, qword_10011EF10);
  v1 = sub_10000909C(v0, (uint64_t)qword_10011EF10);
  IntentDescription.init(stringLiteral:)(0xD000000000000053, 0x80000001000C0330);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_100051AD4()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1000CA9A8);
  qword_10011EF28 = result;
  return result;
}

uint64_t sub_100051AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[15] = a2;
  v3[16] = a3;
  v3[14] = a1;
  return swift_task_switch(sub_100051B14, 0, 0);
}

uint64_t sub_100051B14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 56) = v2;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 226));
  *(_BYTE *)(v0 + 225) = *(_BYTE *)(v0 + 226);
  if (qword_100105D00 != -1)
    swift_once(&qword_100105D00, sub_100051AD4);
  v3 = qword_10011EF28;
  *(_QWORD *)(v0 + 152) = qword_10011EF28;
  v4 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v3);
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 160) = v5;
  v6 = sub_100013840(&qword_100108AB8, &qword_100108AC0, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 168) = v6;
  *v5 = v0;
  v5[1] = sub_100051C1C;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 225, v3, &type metadata for Bool, v6);
}

uint64_t sub_100051C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v6 = sub_100017850;
  else
    v6 = sub_100051CA4;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100051CA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  IntentParameter.wrappedValue.getter(v0 + 11);
  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[13];
  v0[23] = v2;
  v0[24] = v3;
  v0[8] = v1;
  v0[9] = v2;
  v0[10] = v3;
  v4 = qword_10011EF28;
  v0[25] = qword_10011EF28;
  v5 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain(v4);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[26] = v6;
  *v6 = v0;
  v6[1] = sub_100017770;
  return AppEntity._value<A, B>(for:)(v0 + 28, v4, v0[21]);
}

double sub_100051D44()
{
  double result;

  if (qword_100105D00 != -1)
    swift_once(&qword_100105D00, sub_100051AD4);
  *(_QWORD *)&result = swift_retain(qword_10011EF28).n128_u64[0];
  return result;
}

unint64_t sub_100051D88()
{
  unint64_t result;

  result = qword_100108908;
  if (!qword_100108908)
  {
    result = swift_getWitnessTable(&unk_1000CA490, &type metadata for TVSettingsDownloadUseCellularEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100108908);
  }
  return result;
}

unint64_t sub_100051DD0()
{
  unint64_t result;

  result = qword_100108910;
  if (!qword_100108910)
  {
    result = swift_getWitnessTable(&unk_1000CA4B8, &type metadata for TVSettingsDownloadUseCellularEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100108910);
  }
  return result;
}

uint64_t sub_100051E14(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000D2844, 1) + 8);
}

uint64_t sub_100051E38(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100051740();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_100051E78@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105CF0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10011EEF8, (uint64_t)sub_1000519EC, a1);
}

uint64_t sub_100051E9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100105CF8 != -1)
    swift_once(&qword_100105CF8, sub_100051A4C);
  v2 = sub_100008EF4(&qword_100106608);
  v3 = sub_10000909C(v2, (uint64_t)qword_10011EF10);
  return sub_100016518(v3, a1);
}

uint64_t sub_100051EFC(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_100108AD4);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_1000145D8;
  *(_OWORD *)(v4 + 120) = *v1;
  *(_QWORD *)(v4 + 112) = a1;
  return swift_task_switch(sub_100051B14, 0, 0);
}

uint64_t sub_100051F64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100052F44();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100051F88()
{
  return 0xD000000000000034;
}

unint64_t sub_100051FA8()
{
  unint64_t result;

  result = qword_100108920;
  if (!qword_100108920)
  {
    result = swift_getWitnessTable(&unk_1000CA514, &type metadata for TVSettingsDownloadUseCellularEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100108920);
  }
  return result;
}

unint64_t sub_100051FF0()
{
  unint64_t result;

  result = qword_100108928;
  if (!qword_100108928)
  {
    result = swift_getWitnessTable(&unk_1000CA974, &type metadata for TVSettingsDownloadUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_100108928);
  }
  return result;
}

uint64_t sub_100052034(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10005204C, 0, 0);
}

uint64_t sub_10005204C()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = sub_1000776E4() & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000520A4(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_1000520C0, 0, 0);
}

uint64_t sub_1000520C0()
{
  uint64_t v0;

  sub_100078860(*(_BYTE *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005210C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100052124, 0, 0);
}

uint64_t sub_100052124()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(v0 + 16);
  *v1 = sub_10005326C();
  v1[1] = v2;
  v1[2] = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100052164()
{
  unint64_t result;

  result = qword_100108938;
  if (!qword_100108938)
  {
    result = swift_getWitnessTable(&unk_1000CA54C, &type metadata for TVSettingsDownloadUseCellularEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100108938);
  }
  return result;
}

uint64_t sub_1000521A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000529FC();
  *v4 = v2;
  v4[1] = sub_100014BF8;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_100052214()
{
  unint64_t result;

  result = qword_100108948;
  if (!qword_100108948)
  {
    result = swift_getWitnessTable(&unk_1000CA5A4, &type metadata for TVSettingsDownloadUseCellularEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100108948);
  }
  return result;
}

unint64_t sub_10005225C()
{
  unint64_t result;

  result = qword_100108950;
  if (!qword_100108950)
  {
    result = swift_getWitnessTable(&unk_1000CA604, &type metadata for TVSettingsDownloadUseCellularEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100108950);
  }
  return result;
}

unint64_t sub_1000522A4()
{
  unint64_t result;

  result = qword_100108958[0];
  if (!qword_100108958[0])
  {
    result = swift_getWitnessTable(&unk_1000CA91C, &type metadata for TVSettingsDownloadUseCellularEntity);
    atomic_store(result, qword_100108958);
  }
  return result;
}

uint64_t sub_1000522E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000529FC();
  *v5 = v2;
  v5[1] = sub_100014D9C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100052354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000529FC();
  *v4 = v2;
  v4[1] = sub_100016564;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_1000523C0()
{
  unint64_t result;

  result = qword_100108970;
  if (!qword_100108970)
  {
    result = swift_getWitnessTable(&unk_1000CA62C, &type metadata for TVSettingsDownloadUseCellularEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100108970);
  }
  return result;
}

unint64_t sub_100052408()
{
  unint64_t result;

  result = qword_100108978;
  if (!qword_100108978)
  {
    result = swift_getWitnessTable(&unk_1000CA8C4, &type metadata for TVSettingsDownloadUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_100108978);
  }
  return result;
}

unint64_t sub_100052450()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108980;
  if (!qword_100108980)
  {
    v1 = sub_100008F80(qword_100108988);
    sub_100052408();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100108980);
  }
  return result;
}

uint64_t sub_1000524B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100052164();
  *v5 = v2;
  v5[1] = sub_100016560;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for TVSettingsDownloadUseCellularEntity.Query()
{
  return &type metadata for TVSettingsDownloadUseCellularEntity.Query;
}

ValueMetadata *type metadata accessor for TVSettingsDownloadUseCellularEntity()
{
  return &type metadata for TVSettingsDownloadUseCellularEntity;
}

ValueMetadata *type metadata accessor for TVSettingsDownloadUseCellularEntity.UpdateIntent_value()
{
  return &type metadata for TVSettingsDownloadUseCellularEntity.UpdateIntent_value;
}

uint64_t sub_100052554(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100052848();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100015960(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_10005259C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105CE8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10011EEE0, (uint64_t)sub_1000517C4, a1);
}

uint64_t sub_1000525C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000522A4();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_1000525F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100051FF0();
  return _UniqueEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_100052630(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000526B4();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10005266C()
{
  unint64_t result;

  result = qword_1001089A0;
  if (!qword_1001089A0)
  {
    result = swift_getWitnessTable(&unk_1000CA6B4, &type metadata for TVSettingsDownloadUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_1001089A0);
  }
  return result;
}

unint64_t sub_1000526B4()
{
  unint64_t result;

  result = qword_1001089B0;
  if (!qword_1001089B0)
  {
    result = swift_getWitnessTable(&unk_1000CA6DC, &type metadata for TVSettingsDownloadUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_1001089B0);
  }
  return result;
}

unint64_t sub_1000526FC()
{
  unint64_t result;

  result = qword_1001089B8;
  if (!qword_1001089B8)
  {
    result = swift_getWitnessTable(&unk_1000CA70C, &type metadata for TVSettingsDownloadUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_1001089B8);
  }
  return result;
}

unint64_t sub_100052744()
{
  unint64_t result;

  result = qword_1001089C0;
  if (!qword_1001089C0)
  {
    result = swift_getWitnessTable(&unk_1000CA734, &type metadata for TVSettingsDownloadUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_1001089C0);
  }
  return result;
}

unint64_t sub_10005278C()
{
  unint64_t result;

  result = qword_1001089C8;
  if (!qword_1001089C8)
  {
    result = swift_getWitnessTable(&unk_1000CA75C, &type metadata for TVSettingsDownloadUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_1001089C8);
  }
  return result;
}

unint64_t sub_1000527D0(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_100052804();
  a1[2] = sub_100052848();
  result = sub_100051FF0();
  a1[3] = result;
  return result;
}

unint64_t sub_100052804()
{
  unint64_t result;

  result = qword_100108A18;
  if (!qword_100108A18)
  {
    result = swift_getWitnessTable(&unk_1000CA85C, &type metadata for TVSettingsDownloadUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_100108A18);
  }
  return result;
}

unint64_t sub_100052848()
{
  unint64_t result;

  result = qword_100108A20;
  if (!qword_100108A20)
  {
    result = swift_getWitnessTable(&unk_1000CA824, &type metadata for TVSettingsDownloadUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_100108A20);
  }
  return result;
}

unint64_t sub_10005288C(uint64_t a1)
{
  unint64_t result;

  result = sub_1000528B0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000528B0()
{
  unint64_t result;

  result = qword_100108A68;
  if (!qword_100108A68)
  {
    result = swift_getWitnessTable(&unk_1000CA88C, &type metadata for TVSettingsDownloadUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_100108A68);
  }
  return result;
}

uint64_t sub_1000528F4()
{
  return sub_100013840(&qword_100108A70, &qword_100108A78, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

unint64_t sub_100052924()
{
  unint64_t result;

  result = qword_100108A80;
  if (!qword_100108A80)
  {
    result = swift_getWitnessTable(&unk_1000CA7EC, &type metadata for TVSettingsDownloadUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_100108A80);
  }
  return result;
}

unint64_t sub_10005296C()
{
  unint64_t result;

  result = qword_100108A88;
  if (!qword_100108A88)
  {
    result = swift_getWitnessTable(&unk_1000CA7BC, &type metadata for TVSettingsDownloadUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_100108A88);
  }
  return result;
}

unint64_t sub_1000529B4()
{
  unint64_t result;

  result = qword_100108A90;
  if (!qword_100108A90)
  {
    result = swift_getWitnessTable(&unk_1000CA784, &type metadata for TVSettingsDownloadUseCellularEntity);
    atomic_store(result, (unint64_t *)&qword_100108A90);
  }
  return result;
}

unint64_t sub_1000529FC()
{
  unint64_t result;

  result = qword_100108A98;
  if (!qword_100108A98)
  {
    result = swift_getWitnessTable(&unk_1000CA4D4, &type metadata for TVSettingsDownloadUseCellularEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100108A98);
  }
  return result;
}

uint64_t sub_100052A40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  unint64_t v52;
  _QWORD v53[2];
  unint64_t v54;
  unint64_t v55;

  v49 = a1;
  v1 = sub_100008EF4(&qword_100106888);
  v42 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100106890);
  v5 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  v44 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008EF4(&qword_100106898);
  v9 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  v46 = v9;
  __chkstk_darwin(v8);
  v40 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008EF4(&qword_1001068A0);
  v12 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  v48 = v12;
  __chkstk_darwin(v11);
  v41 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v50, "com.apple.tv.");
  HIWORD(v50[1]) = -4864;
  v54 = (unint64_t)&type metadata for TVSettingsDownloadUseCellularWidget;
  v14 = sub_100008EF4(&qword_100108B30);
  v15._countAndFlagsBits = String.init<A>(describing:)(&v54, v14);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17 = v50[0];
  v18 = v50[1];
  KeyPath = swift_getKeyPath(&unk_1000CA9A8);
  v20 = sub_100008EF4(&qword_1001068B0);
  v21 = sub_100051FF0();
  v22 = sub_100013840(&qword_1001068B8, &qword_1001068B0, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  ControlToggle.init<A, B, C, D, E, F>(kind:intentUpdatableProperty:content:value:)(v17, v18, KeyPath, sub_100052E80, 0, sub_100018B14, 0, v20, &type metadata for Text, v21, v22, &protocol witness table for Text);
  v50[0] = &type metadata for TVSettingsDownloadUseCellularWidget;
  v23 = String.init<A>(describing:)(v50, v14);
  v25 = v24;
  v50[0] = v23;
  v50[1] = v24;
  v54 = 0x746567646957;
  v55 = 0xE600000000000000;
  v53[0] = 0x656C67676F54;
  v53[1] = 0xE600000000000000;
  v26 = sub_100013080();
  v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v54, v53, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v26, v26, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v25);
  v50[0] = v27;
  v50[1] = v29;
  v30 = sub_100013840(&qword_1001068C0, &qword_100106888, (uint64_t)&protocol conformance descriptor for ControlToggle<A>);
  WidgetConfiguration.configurationDisplayName<A>(_:)(v50, v1, &type metadata for String, v30, v26);
  swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v3, v1);
  v54 = 0xD000000000000033;
  v55 = 0x80000001000C03C0;
  v50[0] = v1;
  v50[1] = &type metadata for String;
  v51 = v30;
  v52 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v32 = v40;
  v33 = v43;
  WidgetConfiguration.description<A>(_:)(&v54, v43, &type metadata for String, OpaqueTypeConformance2, v26);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v33);
  v50[0] = v33;
  v50[1] = &type metadata for String;
  v51 = OpaqueTypeConformance2;
  v52 = v26;
  v34 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v35 = v41;
  v36 = v45;
  WidgetConfiguration.disablesControlStateCaching()(v45, v34);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v36);
  v50[0] = v36;
  v50[1] = v34;
  v37 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v38 = v47;
  WidgetConfiguration.hiddenControl()(v47, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v35, v38);
}

uint64_t sub_100052E80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  _QWORD v8[2];

  v2 = sub_100008EF4(&qword_1001068B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[0] = 0xD00000000000001FLL;
  v8[1] = 0x80000001000C0250;
  v6 = sub_100013080();
  Label<>.init<A>(_:systemImage:)(v8, 1918985575, 0xE400000000000000, &type metadata for String, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
}

uint64_t sub_100052F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD v33[3];

  v0 = sub_100008EF4(&qword_100106808);
  __chkstk_darwin(v0);
  v32 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for InputConnectionBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v31 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_1001065E0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  v30 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008EF4(&qword_100108AC8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000029, 0x80000001000C02B0);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v29(v13, 1, 1, v14);
  v18 = type metadata accessor for IntentDialog(0);
  memset(v33, 0, sizeof(v33));
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v10, 1, 1, v18);
  v19(v8, 1, 1, v18);
  v20 = enum case for InputConnectionBehavior.default(_:);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v21 = v31;
  v28(v31, enum case for InputConnectionBehavior.default(_:), v2);
  v22 = sub_1000522A4();
  v27 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v17, v13, v33, v10, v8, v21, v22);
  sub_100008EF4(&qword_100106818);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000004CLL, 0x80000001000C02E0);
  v29(v13, 1, 1, v30);
  LOBYTE(v33[0]) = 2;
  v23 = type metadata accessor for Bool.IntentDisplayName(0);
  v24 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v32, 1, 1, v23);
  v19(v10, 1, 1, v18);
  v28(v21, v20, v2);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v17, v13, v33, v24, v10, v21);
  return v27;
}

uint64_t sub_10005326C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  ValueMetadata *v19;

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &type metadata for TVSettingsDownloadUseCellularEntity;
  v13 = sub_100008EF4(&qword_100108AA0);
  v14 = String.init<A>(describing:)(&v19, v13);
  sub_100008EF4(&qword_100108900);
  v15 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001000C0250);
  static Locale.current.getter(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0xD000000000000012, 0x80000001000BF530, v6, v3, 0, 0, 256);
  v16 = sub_100013840(&qword_100108AB8, &qword_100108AC0, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v12, &unk_100108AA8, 0, &unk_100108AB0, 0, &type metadata for TVSettingsDownloadUseCellularEntity.UpdateIntent_value, v16);
  return v14;
}

double sub_100053498@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for TVSettingsDownloadUseCellularWidget()
{
  return &type metadata for TVSettingsDownloadUseCellularWidget;
}

uint64_t sub_1000534B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2894, 1);
}

unint64_t sub_1000534C4(uint64_t a1)
{
  unint64_t result;

  result = sub_1000534E8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000534E8()
{
  unint64_t result;

  result = qword_100108B20;
  if (!qword_100108B20)
  {
    result = swift_getWitnessTable(&unk_1000CA9F4, &type metadata for TVSettingsDownloadUseCellularWidget);
    atomic_store(result, (unint64_t *)&qword_100108B20);
  }
  return result;
}

unint64_t sub_10005352C(uint64_t a1)
{
  unint64_t result;

  result = sub_100053550();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100053550()
{
  unint64_t result;

  result = qword_100108B28;
  if (!qword_100108B28)
  {
    result = swift_getWitnessTable(&unk_1000CAA34, &type metadata for TVSettingsDownloadUseCellularWidget);
    atomic_store(result, (unint64_t *)&qword_100108B28);
  }
  return result;
}

uint64_t sub_100053594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  *(_QWORD *)a2 = 0;
  v3 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = v3;
  *(int64x2_t *)(a2 + 16) = vdupq_n_s64(0x7FF0000000000000uLL);
  *(_OWORD *)(a2 + 32) = xmmword_1000CAA70;
  *(_OWORD *)(a2 + 48) = xmmword_1000CAA80;
  *(_OWORD *)(a2 + 64) = xmmword_1000CAA90;
  *(_OWORD *)(a2 + 80) = xmmword_1000CAAA0;
  *(_QWORD *)(a2 + 96) = static HorizontalAlignment.center.getter(v3);
  *(_QWORD *)(a2 + 104) = 0;
  v4 = (void *)objc_opt_self(UIColor);
  *(_QWORD *)(a2 + 112) = Color.init(uiColor:)(objc_msgSend(v4, "labelColor"));
  *(_QWORD *)(a2 + 120) = static Font.caption.getter();
  v5 = static Font.title.getter();
  *(_QWORD *)(a2 + 128) = v5;
  *(double *)(a2 + 136) = static Font.Weight.semibold.getter(v5);
  *(_QWORD *)(a2 + 144) = 1;
  *(_BYTE *)(a2 + 152) = 1;
  *(_QWORD *)(a2 + 160) = 0x3FE0000000000000;
  *(_QWORD *)(a2 + 168) = static Alignment.bottom.getter();
  *(_QWORD *)(a2 + 176) = v6;
  *(_QWORD *)(a2 + 184) = 0xD000000000000015;
  *(_QWORD *)(a2 + 192) = 0x80000001000BF940;
  *(_QWORD *)(a2 + 200) = static Font.caption2.getter();
  *(_QWORD *)(a2 + 208) = Color.init(uiColor:)(objc_msgSend(v4, "labelColor"));
  v7 = (int *)type metadata accessor for SportsWidgetContentViewLayout(0);
  v8 = a2 + v7[29];
  v9 = enum case for Image.Scale.small(_:);
  v10 = type metadata accessor for Image.Scale(0);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  *(_QWORD *)(a2 + v7[30]) = 0;
  *(_QWORD *)(a2 + v7[31]) = 0x4024000000000000;
  *(_QWORD *)(a2 + v7[32]) = 0x4010000000000000;
  *(_QWORD *)(a2 + v7[33]) = 0x4010000000000000;
  *(_QWORD *)(a2 + v7[34]) = 0x7FF0000000000000;
  *(_QWORD *)(a2 + v7[35]) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + v7[36]) = 0x3FF0000000000000;
  v12 = v7[37];
  *(_QWORD *)(a2 + v12) = static Font.footnote.getter(v11);
  v13 = v7[38];
  result = Color.init(uiColor:)(objc_msgSend(v4, "labelColor"));
  *(_QWORD *)(a2 + v13) = result;
  *(_QWORD *)(a2 + v7[39]) = 1;
  *(_BYTE *)(a2 + v7[40]) = 1;
  *(_QWORD *)(a2 + v7[41]) = 0x4050000000000000;
  return result;
}

uint64_t type metadata accessor for SportsWidgetContentViewLayout(uint64_t a1)
{
  uint64_t result;

  result = qword_100108B90;
  if (!qword_100108B90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SportsWidgetContentViewLayout);
  return result;
}

uint64_t sub_1000537B8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v29)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v30;
  uint64_t v31;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = v26 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    v8 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v8;
    v9 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v9;
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    v10 = a2[14];
    v11 = a2[15];
    *(_QWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 120) = v11;
    v12 = a2[16];
    *(_QWORD *)(a1 + 128) = v12;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
    *(_QWORD *)(a1 + 160) = a2[20];
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    v13 = a2[24];
    *(_QWORD *)(a1 + 184) = a2[23];
    *(_QWORD *)(a1 + 192) = v13;
    v14 = a2[25];
    v15 = a2[26];
    v16 = a3[29];
    v30 = (uint64_t)a2 + v16;
    v31 = a1 + v16;
    *(_QWORD *)(a1 + 200) = v14;
    *(_QWORD *)(a1 + 208) = v15;
    v17 = type metadata accessor for Image.Scale(0);
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
    swift_retain(v10);
    swift_retain(v11);
    swift_retain(v12);
    swift_bridgeObjectRetain(v13);
    swift_retain(v14);
    v18 = swift_retain(v15);
    v29(v31, v30, v17, v18);
    v19 = a3[31];
    *(_QWORD *)(v4 + a3[30]) = *(uint64_t *)((char *)a2 + a3[30]);
    *(_QWORD *)(v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    v20 = a3[33];
    *(_QWORD *)(v4 + a3[32]) = *(uint64_t *)((char *)a2 + a3[32]);
    *(_QWORD *)(v4 + v20) = *(uint64_t *)((char *)a2 + v20);
    v21 = a3[35];
    *(_QWORD *)(v4 + a3[34]) = *(uint64_t *)((char *)a2 + a3[34]);
    *(_QWORD *)(v4 + v21) = *(uint64_t *)((char *)a2 + v21);
    v22 = a3[37];
    *(_QWORD *)(v4 + a3[36]) = *(uint64_t *)((char *)a2 + a3[36]);
    v23 = *(uint64_t *)((char *)a2 + v22);
    *(_QWORD *)(v4 + v22) = v23;
    v24 = a3[38];
    v25 = a3[39];
    v26 = *(uint64_t *)((char *)a2 + v24);
    *(_QWORD *)(v4 + v24) = v26;
    *(_QWORD *)(v4 + v25) = *(uint64_t *)((char *)a2 + v25);
    v27 = a3[41];
    *(_BYTE *)(v4 + a3[40]) = *((_BYTE *)a2 + a3[40]);
    *(_QWORD *)(v4 + v27) = *(uint64_t *)((char *)a2 + v27);
    swift_retain(v23);
  }
  swift_retain(v26);
  return v4;
}

uint64_t sub_10005397C(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;

  swift_release(a1[14]);
  swift_release(a1[15]);
  swift_release(a1[16]);
  swift_bridgeObjectRelease(a1[24]);
  swift_release(a1[25]);
  swift_release(a1[26]);
  v4 = (char *)a1 + a2[29];
  v5 = type metadata accessor for Image.Scale(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release(*(_QWORD *)((char *)a1 + a2[37]));
  return swift_release(*(_QWORD *)((char *)a1 + a2[38]));
}

uint64_t sub_100053A0C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v28)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v29;
  uint64_t v30;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 120) = v10;
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  v12 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v12;
  v13 = *(_QWORD *)(a2 + 200);
  v14 = *(_QWORD *)(a2 + 208);
  v15 = a3[29];
  v29 = a2 + v15;
  v30 = a1 + v15;
  *(_QWORD *)(a1 + 200) = v13;
  *(_QWORD *)(a1 + 208) = v14;
  v16 = type metadata accessor for Image.Scale(0);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v11);
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  v17 = swift_retain(v14);
  v28(v30, v29, v16, v17);
  v18 = a3[31];
  *(_QWORD *)(a1 + a3[30]) = *(_QWORD *)(a2 + a3[30]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  v19 = a3[33];
  *(_QWORD *)(a1 + a3[32]) = *(_QWORD *)(a2 + a3[32]);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  v20 = a3[35];
  *(_QWORD *)(a1 + a3[34]) = *(_QWORD *)(a2 + a3[34]);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  v21 = a3[37];
  *(_QWORD *)(a1 + a3[36]) = *(_QWORD *)(a2 + a3[36]);
  v22 = *(_QWORD *)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v22;
  v23 = a3[38];
  v24 = a3[39];
  v25 = *(_QWORD *)(a2 + v23);
  *(_QWORD *)(a1 + v23) = v25;
  *(_QWORD *)(a1 + v24) = *(_QWORD *)(a2 + v24);
  v26 = a3[41];
  *(_BYTE *)(a1 + a3[40]) = *(_BYTE *)(a2 + a3[40]);
  *(_QWORD *)(a1 + v26) = *(_QWORD *)(a2 + v26);
  swift_retain(v22);
  swift_retain(v25);
  return a1;
}

uint64_t sub_100053BA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v6 = *(_QWORD *)(a2 + 112);
  v7 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 120);
  v9 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(_QWORD *)(a2 + 128);
  v11 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v10;
  swift_retain(v10);
  swift_release(v11);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v12 = *(_QWORD *)(a2 + 192);
  v13 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 200);
  v15 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = *(_QWORD *)(a2 + 208);
  v17 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v16;
  swift_retain(v16);
  swift_release(v17);
  v18 = a3[29];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  *(_QWORD *)(a1 + a3[30]) = *(_QWORD *)(a2 + a3[30]);
  *(_QWORD *)(a1 + a3[31]) = *(_QWORD *)(a2 + a3[31]);
  *(_QWORD *)(a1 + a3[32]) = *(_QWORD *)(a2 + a3[32]);
  *(_QWORD *)(a1 + a3[33]) = *(_QWORD *)(a2 + a3[33]);
  *(_QWORD *)(a1 + a3[34]) = *(_QWORD *)(a2 + a3[34]);
  *(_QWORD *)(a1 + a3[35]) = *(_QWORD *)(a2 + a3[35]);
  *(_QWORD *)(a1 + a3[36]) = *(_QWORD *)(a2 + a3[36]);
  v22 = a3[37];
  v23 = *(_QWORD *)(a2 + v22);
  v24 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  swift_retain(v23);
  swift_release(v24);
  v25 = a3[38];
  v26 = *(_QWORD *)(a2 + v25);
  v27 = *(_QWORD *)(a1 + v25);
  *(_QWORD *)(a1 + v25) = v26;
  swift_retain(v26);
  swift_release(v27);
  *(_QWORD *)(a1 + a3[39]) = *(_QWORD *)(a2 + a3[39]);
  *(_BYTE *)(a1 + a3[40]) = *(_BYTE *)(a2 + a3[40]);
  *(_QWORD *)(a1 + a3[41]) = *(_QWORD *)(a2 + a3[41]);
  return a1;
}

uint64_t sub_100053DF4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  v10 = a3[29];
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  v13 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[31];
  *(_QWORD *)(a1 + a3[30]) = *(_QWORD *)(a2 + a3[30]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[33];
  *(_QWORD *)(a1 + a3[32]) = *(_QWORD *)(a2 + a3[32]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[35];
  *(_QWORD *)(a1 + a3[34]) = *(_QWORD *)(a2 + a3[34]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  v17 = a3[37];
  *(_QWORD *)(a1 + a3[36]) = *(_QWORD *)(a2 + a3[36]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v18 = a3[39];
  *(_QWORD *)(a1 + a3[38]) = *(_QWORD *)(a2 + a3[38]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  v19 = a3[41];
  *(_BYTE *)(a1 + a3[40]) = *(_BYTE *)(a2 + a3[40]);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  return a1;
}

uint64_t sub_100053F28(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_release(v9);
  v10 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release(v10);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  v11 = *(_QWORD *)(a2 + 192);
  v12 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_release(v13);
  v14 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release(v14);
  v15 = a3[29];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[31];
  *(_QWORD *)(a1 + a3[30]) = *(_QWORD *)(a2 + a3[30]);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  v20 = a3[33];
  *(_QWORD *)(a1 + a3[32]) = *(_QWORD *)(a2 + a3[32]);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  v21 = a3[35];
  *(_QWORD *)(a1 + a3[34]) = *(_QWORD *)(a2 + a3[34]);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  v22 = a3[37];
  *(_QWORD *)(a1 + a3[36]) = *(_QWORD *)(a2 + a3[36]);
  v23 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  swift_release(v23);
  v24 = a3[38];
  v25 = *(_QWORD *)(a1 + v24);
  *(_QWORD *)(a1 + v24) = *(_QWORD *)(a2 + v24);
  swift_release(v25);
  v26 = a3[40];
  *(_QWORD *)(a1 + a3[39]) = *(_QWORD *)(a2 + a3[39]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  *(_QWORD *)(a1 + a3[41]) = *(_QWORD *)(a2 + a3[41]);
  return a1;
}

uint64_t sub_1000540D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000540E4);
}

uint64_t sub_1000540E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 112);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Image.Scale(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 116), a2, v8);
  }
}

uint64_t sub_100054160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005416C);
}

uint64_t sub_10005416C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 112) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Image.Scale(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 116), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000541E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[38];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[13] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[14] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[15] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[16] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[17] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[18] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[19] = &unk_1000CAAF0;
  v4[20] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[21] = &unk_1000CAB08;
  v4[22] = &unk_1000CAB20;
  v4[23] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[24] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Image.Scale(319);
  if (v3 <= 0x3F)
  {
    v4[25] = *(_QWORD *)(result - 8) + 64;
    v4[26] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[27] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[28] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[29] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[30] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[31] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[32] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[33] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[34] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[35] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[36] = &unk_1000CAAF0;
    v4[37] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 38, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1000542D8()
{
  unint64_t result;

  result = qword_100108C80;
  if (!qword_100108C80)
  {
    result = swift_getWitnessTable(&unk_1000CAC2C, &type metadata for TVSettingsDeeplinks.AvailableTVSettingsDestinationQuery);
    atomic_store(result, (unint64_t *)&qword_100108C80);
  }
  return result;
}

unint64_t sub_100054320()
{
  unint64_t result;

  result = qword_100108C88;
  if (!qword_100108C88)
  {
    result = swift_getWitnessTable(&unk_1000CAC8C, &type metadata for TVSettingsDeeplinks.AvailableTVSettingsDestinationQuery);
    atomic_store(result, (unint64_t *)&qword_100108C88);
  }
  return result;
}

unint64_t sub_100054368()
{
  unint64_t result;

  result = qword_100108C90[0];
  if (!qword_100108C90[0])
  {
    result = swift_getWitnessTable(&unk_1000CAD38, &type metadata for TVSettingsDeeplinks);
    atomic_store(result, qword_100108C90);
  }
  return result;
}

uint64_t sub_1000543AC(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 24) = *a2;
  return swift_task_switch(sub_1000543CC, 0, 0);
}

uint64_t sub_1000543CC()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;

  v1 = *(unint64_t **)(v0 + 16);
  *v1 = sub_10008DC90(*(_BYTE *)(v0 + 24));
  v1[1] = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100054408(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[23];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;

  v60 = a1;
  v65 = a2;
  v2 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  v3 = __chkstk_darwin(v2);
  v59[8] = (char *)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v59[7] = (char *)v59 - v6;
  v7 = __chkstk_darwin(v5);
  v59[9] = (char *)v59 - v8;
  v9 = __chkstk_darwin(v7);
  v59[11] = (char *)v59 - v10;
  v11 = __chkstk_darwin(v9);
  v59[4] = (char *)v59 - v12;
  v13 = __chkstk_darwin(v11);
  v14 = __chkstk_darwin(v13);
  v59[10] = (char *)v59 - v15;
  v16 = __chkstk_darwin(v14);
  v59[3] = (char *)v59 - v17;
  __chkstk_darwin(v16);
  v18 = sub_100008EF4(&qword_1001074F8);
  v19 = __chkstk_darwin(v18);
  v59[6] = (char *)v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v59[5] = (char *)v59 - v22;
  v23 = __chkstk_darwin(v21);
  v59[17] = (char *)v59 - v24;
  v25 = __chkstk_darwin(v23);
  v59[19] = (char *)v59 - v26;
  v27 = __chkstk_darwin(v25);
  v59[18] = (char *)v59 - v28;
  __chkstk_darwin(v27);
  v59[22] = (char *)v59 - v29;
  v30 = sub_100008EF4(&qword_100106598);
  v31 = __chkstk_darwin(v30);
  v59[13] = (char *)v59 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v59[12] = (char *)v59 - v34;
  v35 = __chkstk_darwin(v33);
  v59[14] = (char *)v59 - v36;
  v37 = __chkstk_darwin(v35);
  v59[16] = (char *)v59 - v38;
  v39 = __chkstk_darwin(v37);
  v59[15] = (char *)v59 - v40;
  __chkstk_darwin(v39);
  v59[21] = (char *)v59 - v41;
  v67 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v61 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v64 = (char *)v59 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for Locale(0);
  __chkstk_darwin(v43);
  v66 = (char *)v59 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v45);
  v46 = type metadata accessor for LocalizedStringResource(0);
  v47 = *(_QWORD *)(v46 - 8);
  v62 = v46;
  v63 = v47;
  v48 = __chkstk_darwin(v46);
  v49 = __chkstk_darwin(v48);
  v50 = __chkstk_darwin(v49);
  v51 = __chkstk_darwin(v50);
  v52 = __chkstk_darwin(v51);
  v53 = __chkstk_darwin(v52);
  v54 = __chkstk_darwin(v53);
  v55 = __chkstk_darwin(v54);
  v56 = __chkstk_darwin(v55);
  v57 = __chkstk_darwin(v56);
  v58 = __chkstk_darwin(v57);
  __chkstk_darwin(v58);
  __asm { BR              X10 }
}

uint64_t sub_100054990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v2;
  v5 = v0;
  *(_QWORD *)(v3 - 216) = v1;
  v6 = String.LocalizationValue.init(stringLiteral:)(22100, 0xE200000000000000);
  v7 = *(_QWORD *)(v3 - 168);
  static Locale.current.getter(v6);
  v8 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 208) + 104);
  v10 = *(_QWORD *)(v3 - 184);
  v11 = *(_QWORD *)(v3 - 160);
  v9(v10, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v2, 0xD000000000000012, 0x80000001000BF530, v7, v10, 0, 0, 256);
  v12 = *(_QWORD *)(v3 - 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 - 192) + 56))(v12, 1, 1, *(_QWORD *)(v3 - 200));
  v13 = *(_QWORD *)(v3 - 224);
  ((void (*)(uint64_t, unint64_t))DisplayRepresentation.Image.init(appBundleIdentifier:))(0x6C7070612E6D6F63, 0xEC00000076742E65);
  v14 = type metadata accessor for DisplayRepresentation.Image(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 0, 1, v14);
  v15 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001000C1F10);
  static Locale.current.getter(v15);
  v9(v10, v8, v11);
  v16 = *(_QWORD *)(v3 - 216);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v4, 0xD000000000000012, 0x80000001000BF530, v7, v10, 0, 0, 256);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:))(v5, v12, v13, _swiftEmptyArrayStorage, v16);
}

uint64_t sub_100057D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD v21[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v21[0] = (char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011EF30);
  sub_10000909C(v16, (uint64_t)qword_10011EF30);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x6974746553205654, 0xEA0000000000676ELL);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v2);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  v18 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v19 = v21[0];
  v18(v21[0], 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v19);
}

uint64_t sub_100057F5C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_100108E38 + dword_100108E38);
  v3 = (_QWORD *)swift_task_alloc(unk_100108E3C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100014D9C;
  return v5(a1);
}

uint64_t sub_100057FBC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&dword_100108E28 + dword_100108E28);
  v2 = (_QWORD *)swift_task_alloc(unk_100108E2C);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100016564;
  return v4();
}

unint64_t sub_10005801C()
{
  unint64_t result;

  result = qword_100108CA8;
  if (!qword_100108CA8)
  {
    result = swift_getWitnessTable(&unk_1000CAB9C, &type metadata for TVSettingsDeeplinks.AvailableTVSettingsDestinationQuery);
    atomic_store(result, (unint64_t *)&qword_100108CA8);
  }
  return result;
}

uint64_t sub_100058060(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&dword_100108E18 + dword_100108E18);
  v2 = (_QWORD *)swift_task_alloc(unk_100108E1C);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100014BF8;
  return v4();
}

unint64_t sub_1000580C0()
{
  unint64_t result;

  result = qword_100108CB8;
  if (!qword_100108CB8)
  {
    result = swift_getWitnessTable(&unk_1000CACB4, &type metadata for TVSettingsDeeplinks.AvailableTVSettingsDestinationQuery);
    atomic_store(result, (unint64_t *)&qword_100108CB8);
  }
  return result;
}

unint64_t sub_100058108()
{
  unint64_t result;

  result = qword_100108CC0;
  if (!qword_100108CC0)
  {
    result = swift_getWitnessTable(&unk_1000CAEA8, &type metadata for TVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108CC0);
  }
  return result;
}

unint64_t sub_100058150()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108CC8;
  if (!qword_100108CC8)
  {
    v1 = sub_100008F80(qword_100108CD0);
    sub_100058108();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100108CC8);
  }
  return result;
}

uint64_t sub_1000581B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10005801C();
  *v5 = v2;
  v5[1] = sub_1000145D8;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_100058220(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_task_switch(sub_100058238, 0, 0);
}

uint64_t sub_100058238()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v0 + 16) = &off_1000F6FF0;
  v1 = sub_1000595E8((uint64_t)&off_1000F6FF0);
  v3 = v2 & 1;
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v0 + 16;
  v5 = sub_100059AB0((_QWORD *(*)(uint64_t *__return_ptr, uint64_t *))sub_10005A99C, v4, v1, v3);
  swift_task_dealloc(v4);
  v6 = 0;
  v7 = 0;
  if (v5 != 21)
  {
    v8 = sub_100008EF4(&qword_100108E00);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v7 = _EntityDeferredPropertyValue.init(get:)(&unk_100108E08, 0);
    v6 = v5;
  }
  v9 = *(_QWORD **)(v0 + 32);
  *v9 = v6;
  v9[1] = v7;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100058324()
{
  unint64_t result;

  result = qword_100108CE8;
  if (!qword_100108CE8)
  {
    result = swift_getWitnessTable(&unk_1000CAD90, &type metadata for TVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108CE8);
  }
  return result;
}

uint64_t sub_100058368(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  Swift::String v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v12;

  v2 = sub_100008EF4(&qword_100108DE8);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100054368();
  _EntityURLRepresentation.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1, a1, v5);
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  _EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(v6);
  KeyPath = swift_getKeyPath(&unk_1000CB1B8);
  v8 = sub_100008EF4(&qword_100108DF0);
  v9 = sub_100013840(&qword_100108DF8, &qword_100108E00, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  _EntityURLRepresentation.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v2, v8, v9);
  swift_release(KeyPath);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  _EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(v10);
  return _EntityURLRepresentation.init(stringInterpolation:)(v4, a1, v5);
}

uint64_t sub_10005848C()
{
  uint64_t v0;

  v0 = qword_100108C58;
  swift_bridgeObjectRetain(off_100108C60);
  return v0;
}

unint64_t sub_1000584C4()
{
  unint64_t result;

  result = qword_100108CF0;
  if (!qword_100108CF0)
  {
    result = swift_getWitnessTable(&unk_1000CADB8, &type metadata for TVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108CF0);
  }
  return result;
}

unint64_t sub_10005850C()
{
  unint64_t result;

  result = qword_100108CF8;
  if (!qword_100108CF8)
  {
    result = swift_getWitnessTable(&unk_1000CADF0, &type metadata for TVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108CF8);
  }
  return result;
}

unint64_t sub_100058554()
{
  unint64_t result;

  result = qword_100108D00;
  if (!qword_100108D00)
  {
    result = swift_getWitnessTable(&unk_1000CAE20, &type metadata for TVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108D00);
  }
  return result;
}

unint64_t sub_10005859C()
{
  unint64_t result;

  result = qword_100108D08;
  if (!qword_100108D08)
  {
    result = swift_getWitnessTable(&unk_1000CEEBC, &type metadata for TVSettingsDestination);
    atomic_store(result, (unint64_t *)&qword_100108D08);
  }
  return result;
}

uint64_t sub_1000585E0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10005A958();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100015960(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_10005862C()
{
  unint64_t result;

  result = qword_100108D18;
  if (!qword_100108D18)
  {
    result = swift_getWitnessTable(&unk_1000CAE58, &type metadata for TVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108D18);
  }
  return result;
}

unint64_t sub_100058674()
{
  unint64_t result;

  result = qword_100108D20;
  if (!qword_100108D20)
  {
    result = swift_getWitnessTable(&unk_1000CAE80, &type metadata for TVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108D20);
  }
  return result;
}

unint64_t sub_1000586BC()
{
  unint64_t result;

  result = qword_100108D28;
  if (!qword_100108D28)
  {
    result = swift_getWitnessTable(&unk_1000CAF00, &type metadata for TVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108D28);
  }
  return result;
}

unint64_t sub_100058704()
{
  unint64_t result;

  result = qword_100108D30;
  if (!qword_100108D30)
  {
    result = swift_getWitnessTable(&unk_1000CEE0C, &type metadata for TVSettingsDestination);
    atomic_store(result, (unint64_t *)&qword_100108D30);
  }
  return result;
}

uint64_t sub_100058748@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105D08, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10011EF30, (uint64_t)sub_100057D34, a1);
}

uint64_t sub_10005876C()
{
  return sub_100013840(&qword_100108D38, &qword_100108D40, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_100058798(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100054368();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000587D4()
{
  unint64_t result;

  result = qword_100108D48;
  if (!qword_100108D48)
  {
    result = swift_getWitnessTable(&unk_1000CAF30, &type metadata for TVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108D48);
  }
  return result;
}

void sub_100058818(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;

  sub_100054408(*v1, a1);
}

uint64_t sub_100058820(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000586BC();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10005885C()
{
  unint64_t result;

  result = qword_100108D50;
  if (!qword_100108D50)
  {
    result = swift_getWitnessTable(&unk_1000CB028, &type metadata for OpenTVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108D50);
  }
  return result;
}

void *sub_1000588A0()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *result;
  ValueMetadata *v31;
  _BYTE v32[368];

  v0 = sub_100008EF4(&qword_100108D80);
  inited = swift_initStackObject(v0, v32);
  *(_OWORD *)(inited + 16) = xmmword_1000CAB60;
  v31 = (ValueMetadata *)type metadata accessor for TVSettingsPlaybackWifiQualityEntity(0);
  v2 = sub_100008EF4(&qword_100108D88);
  *(_QWORD *)(inited + 32) = String.init<A>(describing:)(&v31, v2);
  *(_QWORD *)(inited + 40) = v3;
  *(_BYTE *)(inited + 48) = 1;
  v31 = (ValueMetadata *)type metadata accessor for TVSettingsDownloadWifiQualityEntity(0);
  v4 = sub_100008EF4(&qword_100108D90);
  *(_QWORD *)(inited + 56) = String.init<A>(describing:)(&v31, v4);
  *(_QWORD *)(inited + 64) = v5;
  *(_BYTE *)(inited + 72) = 2;
  v31 = &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity;
  v6 = sub_100008EF4(&qword_100107CC8);
  *(_QWORD *)(inited + 80) = String.init<A>(describing:)(&v31, v6);
  *(_QWORD *)(inited + 88) = v7;
  *(_BYTE *)(inited + 96) = 5;
  v31 = &type metadata for TVSettingsSelectedAudioLanguageEntity;
  v8 = sub_100008EF4(&qword_1001065A0);
  *(_QWORD *)(inited + 104) = String.init<A>(describing:)(&v31, v8);
  *(_QWORD *)(inited + 112) = v9;
  *(_BYTE *)(inited + 120) = 6;
  v31 = &type metadata for TVSettingsPurchaseDefinitionEntity;
  v10 = sub_100008EF4(&qword_100108D98);
  *(_QWORD *)(inited + 128) = String.init<A>(describing:)(&v31, v10);
  *(_QWORD *)(inited + 136) = v11;
  *(_BYTE *)(inited + 144) = 7;
  v31 = &type metadata for TVSettingsPlaybackUseCellularEntity;
  v12 = sub_100008EF4(&qword_1001067E0);
  *(_QWORD *)(inited + 152) = String.init<A>(describing:)(&v31, v12);
  *(_QWORD *)(inited + 160) = v13;
  *(_BYTE *)(inited + 168) = 8;
  v31 = &type metadata for TVSettingsDownloadUseCellularEntity;
  v14 = sub_100008EF4(&qword_100108AA0);
  *(_QWORD *)(inited + 176) = String.init<A>(describing:)(&v31, v14);
  *(_QWORD *)(inited + 184) = v15;
  *(_BYTE *)(inited + 192) = 9;
  v31 = &type metadata for TVSettingsPlaybackCellularQualityEntity;
  v16 = sub_100008EF4(&qword_100108DA0);
  *(_QWORD *)(inited + 200) = String.init<A>(describing:)(&v31, v16);
  *(_QWORD *)(inited + 208) = v17;
  *(_BYTE *)(inited + 216) = 10;
  v31 = &type metadata for TVSettingsDownloadCellularQualityEntity;
  v18 = sub_100008EF4(&qword_100108DA8);
  *(_QWORD *)(inited + 224) = String.init<A>(describing:)(&v31, v18);
  *(_QWORD *)(inited + 232) = v19;
  *(_BYTE *)(inited + 240) = 11;
  v31 = &type metadata for TVSettingsShowSportsScoresEntity;
  v20 = sub_100008EF4(&qword_1001070D8);
  *(_QWORD *)(inited + 248) = String.init<A>(describing:)(&v31, v20);
  *(_QWORD *)(inited + 256) = v21;
  *(_BYTE *)(inited + 264) = 12;
  v31 = &type metadata for TVSettingsUsePlayHistoryEntity;
  v22 = sub_100008EF4(&qword_100108DB0);
  *(_QWORD *)(inited + 272) = String.init<A>(describing:)(&v31, v22);
  *(_QWORD *)(inited + 280) = v23;
  *(_BYTE *)(inited + 288) = 13;
  v31 = &type metadata for TVSettingsUpNextDisplayEntity;
  v24 = sub_100008EF4(&qword_100108DB8);
  *(_QWORD *)(inited + 296) = String.init<A>(describing:)(&v31, v24);
  *(_QWORD *)(inited + 304) = v25;
  *(_BYTE *)(inited + 312) = 14;
  v31 = &type metadata for TVSettingsUseDownloadAVAdapterEntity;
  v26 = sub_100008EF4(&qword_1001073E8);
  *(_QWORD *)(inited + 320) = String.init<A>(describing:)(&v31, v26);
  *(_QWORD *)(inited + 328) = v27;
  *(_BYTE *)(inited + 336) = 18;
  v31 = &type metadata for TVSettingsAutoPlayNextVideoEntity;
  v28 = sub_100008EF4(&qword_100108DC0);
  *(_QWORD *)(inited + 344) = String.init<A>(describing:)(&v31, v28);
  *(_QWORD *)(inited + 352) = v29;
  *(_BYTE *)(inited + 360) = 15;
  result = (void *)sub_10002CC20(inited);
  off_100108C68 = result;
  return result;
}

uint64_t sub_100058B94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10000905C(v10, qword_10011EF48);
  sub_10000909C(v10, (uint64_t)qword_10011EF48);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x80000001000C0400);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0xD000000000000012, 0x80000001000BF530, v6, v3, 0, 0, 256);
}

_QWORD *sub_100058D18@<X0>(uint64_t a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[2];

  result = IntentParameter.wrappedValue.getter(v4);
  v3 = v4[1];
  *(_BYTE *)a1 = v4[0];
  *(_QWORD *)(a1 + 8) = v3;
  return result;
}

uint64_t sub_100058D58(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[8];
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v3[0] = *(_BYTE *)a1;
  v4 = v1;
  swift_retain(v1);
  IntentParameter.wrappedValue.setter(v3);
  return swift_release(v1);
}

void (*sub_100058DA4(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100014378;
}

unint64_t sub_100058DF0()
{
  unint64_t result;

  result = qword_100108D58;
  if (!qword_100108D58)
  {
    result = swift_getWitnessTable(&unk_1000CB050, &type metadata for OpenTVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108D58);
  }
  return result;
}

unint64_t sub_100058E38()
{
  unint64_t result;

  result = qword_100108D60;
  if (!qword_100108D60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Never, &type metadata for Never);
    atomic_store(result, (unint64_t *)&qword_100108D60);
  }
  return result;
}

uint64_t sub_100058E7C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10005A8D0();
  v5 = sub_10005A958();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_100058ED4()
{
  uint64_t v0;

  v0 = qword_100108C70;
  swift_bridgeObjectRetain(off_100108C78);
  return v0;
}

unint64_t sub_100058F10()
{
  unint64_t result;

  result = qword_100108D68;
  if (!qword_100108D68)
  {
    result = swift_getWitnessTable(&unk_1000CB0E0, &type metadata for OpenTVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108D68);
  }
  return result;
}

unint64_t sub_100058F58()
{
  unint64_t result;

  result = qword_100108D70;
  if (!qword_100108D70)
  {
    result = swift_getWitnessTable(&unk_1000CB108, &type metadata for OpenTVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108D70);
  }
  return result;
}

uint64_t sub_100058F9C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100058DF0();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_100058FDC@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105D18, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10011EF48, (uint64_t)sub_100058B94, a1);
}

uint64_t sub_100059000()
{
  return 0;
}

uint64_t sub_10005900C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10005A8D0();
  v7 = sub_10005A914();
  v8 = sub_10005A958();
  *v5 = v2;
  v5[1] = sub_100059098;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_100059098()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*v1 + 16);
  v3 = *v1;
  result = swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  return result;
}

uint64_t sub_1000590F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10005A5BC();
  *a1 = result;
  return result;
}

uint64_t sub_100059118(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100058DF0();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenTVSettingsDeeplinks()
{
  return &type metadata for OpenTVSettingsDeeplinks;
}

ValueMetadata *type metadata accessor for TVSettingsDeeplinks()
{
  return &type metadata for TVSettingsDeeplinks;
}

ValueMetadata *type metadata accessor for TVSettingsDeeplinks.AvailableTVSettingsDestinationQuery()
{
  return &type metadata for TVSettingsDeeplinks.AvailableTVSettingsDestinationQuery;
}

char *sub_100059170(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_10005920C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_10005918C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_10005940C(a1, a2, a3, *v3, &qword_100108E30);
  *v3 = result;
  return result;
}

char *sub_1000591B0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_10005930C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1000591CC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_10005940C(a1, a2, a3, *v3, &qword_100108E40);
  *v3 = result;
  return result;
}

char *sub_1000591F0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000594F0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_10005920C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008EF4(&qword_100108E20);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for TVSettingsDeeplinks);
  }
  swift_release(a4);
  return v11;
}

char *sub_10005930C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008EF4(&qword_100108E48);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for CompetitorShootoutsViewModel);
  }
  swift_release(a4);
  return v11;
}

char *sub_10005940C(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_100008EF4(a5);
    v12 = (char *)swift_allocObject(v11, v10 + 32, 7);
    v13 = j__malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * v13 - 64;
  }
  else
  {
    v12 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[v9])
      memmove(v14, v15, v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, v9);
  }
  swift_release(a4);
  return v12;
}

char *sub_1000594F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008EF4(&qword_100108E50);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_release(a4);
  return v11;
}

uint64_t sub_1000595E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100008EF4(&qword_100108E10);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  if (*(_QWORD *)(a1 + 16))
    __asm { BR              X9 }
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_100059AB0(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t var1;

  if ((a4 & 1) != 0)
    return 21;
  v6 = a3;
  result = (uint64_t)a1(&var1, &v6);
  if (!v4)
    return var1;
  return result;
}

uint64_t sub_100059B04()
{
  return swift_task_switch(sub_100059B18, 0, 0);
}

uint64_t sub_100059B18()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  int64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if ((TVAppFeature.isEnabled.getter(16) & 1) != 0)
  {
    v1 = sub_100059CC8((uint64_t)&off_1000F6FF0);
    v2 = v1;
    v3 = v1[2];
    if (v3)
    {
      v15 = v0;
      sub_100059170(0, v3, 0);
      v4 = 0;
      do
      {
        v5 = *((_BYTE *)v2 + v4 + 32);
        v6 = sub_100008EF4(&qword_100108E00);
        swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
        v7 = _EntityDeferredPropertyValue.init(get:)(&unk_100108E08, 0);
        v9 = _swiftEmptyArrayStorage[2];
        v8 = _swiftEmptyArrayStorage[3];
        if (v9 >= v8 >> 1)
          sub_100059170((char *)(v8 > 1), v9 + 1, 1);
        ++v4;
        _swiftEmptyArrayStorage[2] = v9 + 1;
        v10 = &_swiftEmptyArrayStorage[2 * v9];
        *((_BYTE *)v10 + 32) = v5;
        v10[5] = v7;
      }
      while (v3 != v4);
      swift_bridgeObjectRelease(v2);
      v0 = v15;
    }
    else
    {
      swift_bridgeObjectRelease(v1);
    }
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  else
  {
    v11 = type metadata accessor for AppIntentError(0);
    v12 = sub_100016474();
    swift_allocError(v11, v12, 0, 0);
    v13 = static AppIntentError.Unrecoverable.featureCurrentlyRestricted.getter();
    swift_willThrow(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

void *sub_100059CC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[8];

  v2 = sub_100008EF4(&qword_100108E10);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v7[5] = (char *)v7 - v4;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7[7] = kCFAllocatorDefault;
    v7[3] = "ps section of general Settings.";
    v7[1] = v5;
    v7[2] = 0x80000001000C1F50;
    v7[0] = a1 + 32;
    v7[6] = &_swiftEmptyArrayStorage;
    __asm { BR              X8 }
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_10005A254(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10005A26C, 0, 0);
}

uint64_t sub_10005A26C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if ((TVAppFeature.isEnabled.getter(16) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 16);
    v2 = swift_bridgeObjectRetain(v1);
    v3 = sub_100059CC8(v2);
    swift_bridgeObjectRelease(v1);
    v4 = v3[2];
    if (v4)
    {
      v16 = v0;
      sub_100059170(0, v4, 0);
      v5 = 0;
      do
      {
        v6 = *((_BYTE *)v3 + v5 + 32);
        v7 = sub_100008EF4(&qword_100108E00);
        swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
        v8 = _EntityDeferredPropertyValue.init(get:)(&unk_100108E08, 0);
        v10 = _swiftEmptyArrayStorage[2];
        v9 = _swiftEmptyArrayStorage[3];
        if (v10 >= v9 >> 1)
          sub_100059170((char *)(v9 > 1), v10 + 1, 1);
        ++v5;
        _swiftEmptyArrayStorage[2] = v10 + 1;
        v11 = (char *)&_swiftEmptyArrayStorage[2 * v10];
        v11[32] = v6;
        *((_QWORD *)v11 + 5) = v8;
      }
      while (v4 != v5);
      swift_bridgeObjectRelease(v3);
      v0 = v16;
    }
    else
    {
      swift_bridgeObjectRelease(v3);
    }
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  else
  {
    v12 = type metadata accessor for AppIntentError(0);
    v13 = sub_100016474();
    swift_allocError(v12, v13, 0, 0);
    v14 = static AppIntentError.Unrecoverable.featureCurrentlyRestricted.getter();
    swift_willThrow(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10005A428()
{
  return swift_task_switch(sub_10005A43C, 0, 0);
}

uint64_t sub_10005A43C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if ((TVAppFeature.isEnabled.getter(16) & 1) != 0)
  {
    v1 = 21;
    sub_100059170(0, 21, 0);
    v2 = &byte_1000F7010;
    do
    {
      v4 = *v2++;
      v3 = v4;
      v5 = sub_100008EF4(&qword_100108E00);
      swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
      v6 = _EntityDeferredPropertyValue.init(get:)(&unk_100108E08, 0);
      v8 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1)
        sub_100059170((char *)(v7 > 1), v8 + 1, 1);
      _swiftEmptyArrayStorage[2] = v8 + 1;
      v9 = &_swiftEmptyArrayStorage[2 * v8];
      *((_BYTE *)v9 + 32) = v3;
      v9[5] = v6;
      --v1;
    }
    while (v1);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  else
  {
    v10 = type metadata accessor for AppIntentError(0);
    v11 = sub_100016474();
    swift_allocError(v10, v11, 0, 0);
    v12 = static AppIntentError.Unrecoverable.featureCurrentlyRestricted.getter();
    swift_willThrow(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10005A5BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v34 = *(_QWORD *)(v0 - 8);
  v35 = v0;
  __chkstk_darwin(v0);
  v33 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100008EF4(&qword_1001065E0);
  v3 = __chkstk_darwin(v2);
  v32 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v31 - v5;
  v7 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Locale(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for LocalizedStringResource(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100008EF4(&qword_100108DC8);
  v24 = String.LocalizationValue.init(stringLiteral:)(0x6974746553205654, 0xEA0000000000676ELL);
  static Locale.current.getter(v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for LocalizedStringResource.BundleDescription.main(_:), v10);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0xD000000000000012, 0x80000001000BF530, v16, v13, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v9, 1, 1, v20);
  v25 = type metadata accessor for IntentDialog(0);
  v36[0] = 0;
  v36[1] = 0;
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v6, 1, 1, v25);
  v27 = v32;
  v26(v32, 1, 1, v25);
  v28 = v33;
  (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v33, enum case for InputConnectionBehavior.default(_:), v35);
  v29 = sub_100054368();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v23, v9, v36, v6, v27, v28, v29);
}

unint64_t sub_10005A8D0()
{
  unint64_t result;

  result = qword_100108DD0;
  if (!qword_100108DD0)
  {
    result = swift_getWitnessTable(&unk_1000CAF58, &type metadata for OpenTVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108DD0);
  }
  return result;
}

unint64_t sub_10005A914()
{
  unint64_t result;

  result = qword_100108DD8;
  if (!qword_100108DD8)
  {
    result = swift_getWitnessTable(&unk_1000CAFA8, &type metadata for OpenTVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108DD8);
  }
  return result;
}

unint64_t sub_10005A958()
{
  unint64_t result;

  result = qword_100108DE0;
  if (!qword_100108DE0)
  {
    result = swift_getWitnessTable(&unk_1000CACD0, &type metadata for TVSettingsDeeplinks);
    atomic_store(result, (unint64_t *)&qword_100108DE0);
  }
  return result;
}

unint64_t *sub_10005A99C@<X0>(unint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v3 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = **(_QWORD **)(v2 + 16);
    if (v3 < *(_QWORD *)(v4 + 16))
    {
      *a2 = *(_BYTE *)(v4 + v3 + 32);
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10005A9D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008EF4(&qword_100108E10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10005AA14()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;

  v0 = (void *)objc_opt_self(WLKSettingsLanguageUtilities);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "userFacingAudioLanguageTitles:", v1);

  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, &type metadata for String, &protocol witness table for String);
  qword_10011EF60 = v3;
}

BOOL sub_10005AAA0()
{
  NSString v0;
  uint64_t v1;
  char v3;
  _OWORD v4[2];
  uint64_t v5;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  v0 = String._bridgeToObjectiveC()();
  v1 = _CTServerConnectionCreateAndLaunchWithIdentifier(kCFAllocatorDefault, v0, nullsub_2, v4);

  if (v1)
  {
    v3 = 0;
    _CTServerConnectionGetCellularDataIsEnabled(v1, &v3);
    return v3 != 0;
  }
  else
  {
    NSLog(_:_:)(0xD000000000000034, 0x80000001000C1F50, &_swiftEmptyArrayStorage);
    return 0;
  }
}

uint64_t sub_10005AB94(char a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = sub_100008EF4(qword_100108E58);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AppIntentError(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((TVAppFeature.isEnabled.getter(16) & 1) != 0)
  {
    sub_10008E074(a1, (uint64_t)v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      return sub_10005AD08((uint64_t)v4);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
      v12 = sub_100016474();
      swift_allocError(v5, v12, 0, 0);
      v14 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 16))(v13, v8, v5);
      swift_willThrow(v14);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  else
  {
    v10 = sub_100016474();
    swift_allocError(v5, v10, 0, 0);
    v11 = static AppIntentError.Unrecoverable.featureCurrentlyRestricted.getter();
    return swift_willThrow(v11);
  }
}

uint64_t sub_10005AD08(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008EF4(qword_100108E58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10005AD48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  char v16;
  uint64_t v18;
  int64_t v19;

  if (qword_100105D20 == -1)
    goto LABEL_2;
LABEL_33:
  swift_once(&qword_100105D20, sub_10005AA14);
LABEL_2:
  v0 = qword_10011EF60;
  v18 = qword_10011EF60 + 64;
  v1 = 1 << *(_BYTE *)(qword_10011EF60 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(qword_10011EF60 + 64);
  v19 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain(qword_10011EF60);
  v4 = 0;
  if (v3)
  {
LABEL_5:
    v5 = __clz(__rbit64(v3));
    v3 &= v3 - 1;
    v6 = v5 | (v4 << 6);
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (v7 >= v19)
      goto LABEL_29;
    v8 = *(_QWORD *)(v18 + 8 * v7);
    ++v4;
    if (!v8)
    {
      v4 = v7 + 1;
      if (v7 + 1 >= v19)
        goto LABEL_29;
      v8 = *(_QWORD *)(v18 + 8 * v4);
      if (!v8)
      {
        v4 = v7 + 2;
        if (v7 + 2 >= v19)
          goto LABEL_29;
        v8 = *(_QWORD *)(v18 + 8 * v4);
        if (!v8)
        {
          v9 = v7 + 3;
          if (v9 >= v19)
          {
LABEL_29:
            swift_release(v0);
            return 0;
          }
          v8 = *(_QWORD *)(v18 + 8 * v9);
          if (!v8)
          {
            while (1)
            {
              v4 = v9 + 1;
              if (__OFADD__(v9, 1))
                goto LABEL_32;
              if (v4 >= v19)
                goto LABEL_29;
              v8 = *(_QWORD *)(v18 + 8 * v4);
              ++v9;
              if (v8)
                goto LABEL_19;
            }
          }
          v4 = v9;
        }
      }
    }
LABEL_19:
    v3 = (v8 - 1) & v8;
    v6 = __clz(__rbit64(v8)) + (v4 << 6);
LABEL_20:
    v10 = (uint64_t *)(*(_QWORD *)(v0 + 48) + 16 * v6);
    v11 = *v10;
    v12 = v10[1];
    v13 = String.lowercased()();
    v14 = String.lowercased()();
    if (v13._countAndFlagsBits == v14._countAndFlagsBits && v13._object == v14._object)
      break;
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v13._countAndFlagsBits, v13._object);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRelease(v13._object);
    swift_bridgeObjectRelease(v14._object);
    if ((v16 & 1) != 0)
      goto LABEL_28;
    swift_bridgeObjectRelease(v12);
    if (v3)
      goto LABEL_5;
  }
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease_n(v13._object, 2);
LABEL_28:
  swift_release(v0);
  return v11;
}

uint64_t sub_10005AFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

void sub_10005AFA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;

  sub_10000C6C4(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10004B214(319);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = "P";
      v6 = type metadata accessor for SportsWidgetGenericClockViewModel(319);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 16));
        if (v9 <= 0x3F)
        {
          v11 = *(_QWORD *)(v8 - 8) + 64;
          v12 = v11;
          swift_initStructMetadata(a1, 0, 6, v10, a1 + 32);
        }
      }
    }
  }
}

uint64_t *sub_10005B070(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t *, uint64_t *, uint64_t);
  uint64_t *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, const void *, uint64_t);
  uint64_t v64;
  void (*v65)(char *, const void *, uint64_t);
  char *v66;
  const void *v67;
  size_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void *v72;
  const void *v73;
  unsigned int (*v74)(const void *, uint64_t, uint64_t);
  void *v75;
  const void *v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  size_t v85;
  size_t v86;
  size_t v87;
  size_t __n;
  size_t __na;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;

  v5 = type metadata accessor for DynamicTypeSize(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for LegibilityWeight(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 & 0xF8;
  if (*(_DWORD *)(v9 + 84))
    v12 = *(_QWORD *)(v9 + 64);
  else
    v12 = *(_QWORD *)(v9 + 64) + 1;
  __n = v12;
  v90 = v8;
  if (v12 <= 8)
    v13 = 8;
  else
    v13 = v12;
  v92 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v92 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = *(_QWORD *)(v14 + 64);
  if (*(_DWORD *)(v14 + 84))
    v17 = *(_QWORD *)(v14 + 64);
  else
    v17 = v16 + 1;
  v94 = *(_QWORD *)(a3 + 16);
  v18 = *(_QWORD *)(v94 - 8);
  v20 = *(_DWORD *)(v18 + 80);
  v19 = *(_DWORD *)(v18 + 84);
  v21 = v20;
  v93 = v18;
  v22 = *(_QWORD *)(v18 + 64);
  if (v19)
    v23 = v22;
  else
    v23 = v22 + 1;
  v24 = v15 | *(_DWORD *)(v6 + 80) & 0xF8 | v11 | v20;
  if (v24 > 7
    || ((*(_DWORD *)(v14 + 80) | v10 | *(_DWORD *)(v6 + 80) | v20) & 0x100000) != 0
    || (v25 = v11 | 7,
        v26 = v7 + (v11 | 7) + 1,
        v95 = v15 | 7,
        v27 = v16 + v15,
        v28 = v16 + v15 + ((v16 + v15) & ~v15),
        ((v23
        + v20
        + ((v17
          + v20
          + ((v28 + ((v15 + 64) & ~v15)) & ~v15)
          + 2
          + ((v15 + ((v13 + (v26 & ~v25) + 8) & 0xFFFFFFFFFFFFFFF8) + 80) & ~(v15 | 7))) & ~(unint64_t)v20)) & ~(unint64_t)v20)
      + v23 > 0x18))
  {
    v31 = *a2;
    *a1 = *a2;
    v32 = v31 + (((v24 | 7) + 16) & ~(unint64_t)(v24 | 7));
    swift_retain(v31);
  }
  else
  {
    v29 = *((unsigned __int8 *)a2 + v7);
    v86 = v23 + v20;
    v82 = v28;
    v83 = v17 + v20 + ((v28 + ((v15 + 64) & ~v15)) & ~v15) + 2;
    if (v29 >= 2)
    {
      if (v7 <= 3)
        v30 = v7;
      else
        v30 = 4;
      __asm { BR              X13 }
    }
    v81 = v27;
    v84 = *(_QWORD *)(v92 - 8);
    v85 = v17;
    v87 = v23;
    v33 = ~v25;
    if (v29 == 1)
    {
      v34 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
      v35 = a1;
      v34(a1, a2, v5);
      v36 = 1;
    }
    else
    {
      v37 = *a2;
      v35 = a1;
      *a1 = *a2;
      swift_retain(v37);
      v36 = 0;
    }
    *((_BYTE *)v35 + v7) = v36;
    v38 = ((unint64_t)v35 + v26) & v33;
    v39 = ((unint64_t)a2 + v26) & v33;
    v40 = *(unsigned __int8 *)(v39 + v13);
    if (v40 >= 2)
    {
      if (v13 <= 3)
        v41 = v13;
      else
        v41 = 4;
      __asm { BR              X12 }
    }
    v42 = v13 + 1;
    v43 = ~v95;
    v80 = ~v15;
    if (v40 == 1)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v39, 1, v90))
      {
        memcpy((void *)v38, (const void *)v39, __n);
      }
      else
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))(v38, v39, v90);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v90);
      }
      *(_BYTE *)(v38 + v13) = 1;
    }
    else
    {
      v44 = *(_QWORD *)v39;
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *(_BYTE *)(v38 + v13) = 0;
      swift_retain(v44);
    }
    v91 = ~v21;
    v45 = ((v38 | 7) + v42) & 0xFFFFFFFFFFFFFFF8;
    v46 = ((v39 | 7) + v42) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v45 = *(_BYTE *)v46;
    v47 = *(_QWORD *)(v46 + 8);
    *(_QWORD *)(v45 + 8) = v47;
    v48 = *(_QWORD *)(v46 + 16);
    *(_QWORD *)(v45 + 16) = v48;
    v78 = *(_QWORD *)(v46 + 24);
    *(_QWORD *)(v45 + 24) = v78;
    v79 = *(_QWORD *)(v46 + 32);
    *(_QWORD *)(v45 + 32) = v79;
    *(_QWORD *)(v45 + 40) = *(_QWORD *)(v46 + 40);
    *(_BYTE *)(v45 + 48) = *(_BYTE *)(v46 + 48);
    *(_QWORD *)(v45 + 56) = *(_QWORD *)(v46 + 56);
    *(_QWORD *)(v45 + 64) = *(_QWORD *)(v46 + 64);
    *(_QWORD *)(v45 + 72) = *(_QWORD *)(v46 + 72);
    v49 = (_QWORD *)((v45 + v95 + 80) & v43);
    v50 = (_QWORD *)((v46 + v95 + 80) & v43);
    *v49 = *v50;
    v51 = v50[1];
    v49[1] = v51;
    __na = (size_t)v49;
    v52 = (_QWORD *)(((unint64_t)v49 + 23) & 0xFFFFFFFFFFFFFFF8);
    v96 = v50;
    v53 = (_QWORD *)(((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v52 = *v53;
    v54 = v53[1];
    v52[1] = v54;
    v55 = (_QWORD *)(((unint64_t)v52 + 23) & 0xFFFFFFFFFFFFFFF8);
    v56 = (_QWORD *)(((unint64_t)v53 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v55 = *v56;
    v57 = v56[1];
    v55[1] = v57;
    v58 = (_QWORD *)(((unint64_t)v55 + 23) & 0xFFFFFFFFFFFFFFF8);
    v59 = (_QWORD *)(((unint64_t)v56 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v58 = *v59;
    v60 = v59[1];
    v58[1] = v60;
    v61 = ((unint64_t)v58 + v15 + 16) & v80;
    v62 = ((unint64_t)v59 + v15 + 16) & v80;
    v63 = *(void (**)(char *, const void *, uint64_t))(v84 + 16);
    swift_retain(v47);
    swift_retain(v48);
    swift_retain(v78);
    swift_retain(v79);
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v57);
    v64 = v60;
    v65 = v63;
    swift_bridgeObjectRetain(v64);
    v63((char *)v61, (const void *)v62, v92);
    v63((char *)((v81 + v61) & v80), (const void *)((v81 + v62) & v80), v92);
    v66 = (char *)((v82 + v61) & v80);
    v67 = (const void *)((v82 + v62) & v80);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v84 + 48))(v67, 1, v92))
    {
      v68 = v85;
      memcpy(v66, v67, v85);
      v69 = v94;
      v70 = v93;
    }
    else
    {
      v65(v66, v67, v92);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v66, 0, 1, v92);
      v69 = v94;
      v70 = v93;
      v68 = v85;
    }
    v71 = &v66[v68];
    *v71 = *((_BYTE *)v67 + v68);
    v71[1] = *((_BYTE *)v67 + v68 + 1);
    v72 = (void *)((v83 + __na) & v91);
    v73 = (const void *)(((unint64_t)v96 + v83) & v91);
    v74 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v70 + 48);
    if (v74(v73, 1, v69))
    {
      memcpy(v72, v73, v87);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v70 + 16))(v72, v73, v69);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v72, 0, 1, v69);
    }
    v75 = (void *)(((unint64_t)v72 + v86) & v91);
    v76 = (const void *)(((unint64_t)v73 + v86) & v91);
    if (v74(v76, 1, v69))
    {
      memcpy(v75, v76, v87);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v70 + 16))(v75, v76, v69);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v75, 0, 1, v69);
    }
    return a1;
  }
  return (uint64_t *)v32;
}

uint64_t sub_10005B744(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t result;

  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a1 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, v4);
  else
    swift_release(*a1);
  v9 = type metadata accessor for LegibilityWeight(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v12 = (_QWORD *)(((unint64_t)a1 + v6 + v11 + 1) & ~v11);
  v13 = *(_QWORD *)(v10 + 64);
  if (!*(_DWORD *)(v10 + 84))
    ++v13;
  if (v13 <= 8)
    v14 = 8;
  else
    v14 = v13;
  v15 = *((unsigned __int8 *)v12 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X12 }
  }
  if (v15 == 1)
  {
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9))
      (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    swift_release(*v12);
  }
  v17 = (_QWORD *)(((unint64_t)v12 + v14 + 8) & 0xFFFFFFFFFFFFFFF8);
  swift_release(v17[1]);
  swift_release(v17[2]);
  swift_release(v17[3]);
  swift_release(v17[4]);
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = ((unint64_t)v17 + (v20 | 7) + 80) & ~(v20 | 7);
  swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8));
  v22 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v22 + 8));
  v23 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v23 + 8));
  v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v24 + 8));
  v25 = (v20 + v24 + 16) & ~v20;
  v26 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v26(v25, v18);
  v27 = *(_QWORD *)(v19 + 64);
  v26((v27 + v20 + v25) & ~v20, v18);
  v28 = ((v27 + v20) & ~v20) + v27;
  v29 = (v28 + v20 + v25) & ~v20;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v29, 1, v18))
    v26(v29, v18);
  v30 = (((v20 + 64) | v20) + v28) & ~v20;
  v31 = *(_QWORD *)(a2 + 16);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned __int8 *)(v32 + 80);
  v34 = (v21 | 2) + v27 + v30;
  if (!*(_DWORD *)(v19 + 84))
    ++v34;
  v35 = v34 + v33;
  v36 = ~v33;
  v37 = (v34 + v33) & ~v33;
  v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  if (!v38(v37, 1, v31))
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v37, v31);
  v39 = (v35 | v33) + *(_QWORD *)(v32 + 64);
  if (!*(_DWORD *)(v32 + 84))
    ++v39;
  v40 = v39 & v36;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v38)(v39 & v36, 1, v31);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v40, v31);
  return result;
}

uint64_t *sub_10005BB14(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(size_t, const void *, uint64_t);
  uint64_t v45;
  void (*v46)(size_t, const void *, uint64_t);
  size_t v47;
  size_t v48;
  char *v49;
  const void *v50;
  int v51;
  size_t v52;
  size_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  const void *v63;
  int v64;
  size_t v65;
  size_t v66;
  size_t v67;
  void *v68;
  const void *v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unsigned int (*v78)(const void *, uint64_t, uint64_t);
  uint64_t *v79;

  v5 = type metadata accessor for DynamicTypeSize(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *((unsigned __int8 *)a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X13 }
  }
  if (v8 == 1)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v10 = 0;
  }
  *((_BYTE *)a1 + v7) = v10;
  v12 = type metadata accessor for LegibilityWeight(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  v15 = v7 + v14 + 1;
  v79 = a1;
  v16 = ((unint64_t)a1 + v15) & ~v14;
  v17 = ((unint64_t)a2 + v15) & ~v14;
  if (*(_DWORD *)(v13 + 84))
    v18 = *(_QWORD *)(v13 + 64);
  else
    v18 = *(_QWORD *)(v13 + 64) + 1;
  if (v18 <= 8)
    v19 = 8;
  else
    v19 = v18;
  v20 = *(unsigned __int8 *)(v17 + v19);
  if (v20 >= 2)
  {
    if (v19 <= 3)
      v21 = v19;
    else
      v21 = 4;
    __asm { BR              X12 }
  }
  if (v20 == 1)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v17, 1, v12))
    {
      memcpy((void *)v16, (const void *)v17, v18);
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))(v16, v17, v12);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
    }
    *(_BYTE *)(v16 + v19) = 1;
  }
  else
  {
    v22 = *(_QWORD *)v17;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *(_BYTE *)(v16 + v19) = 0;
    swift_retain(v22);
  }
  v23 = v19 + 1;
  v24 = ((v16 | 7) + v19 + 1) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((v17 | 7) + v23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v24 = *(_BYTE *)v25;
  v71 = *(_QWORD *)(v25 + 8);
  *(_QWORD *)(v24 + 8) = v71;
  v72 = *(_QWORD *)(v25 + 16);
  *(_QWORD *)(v24 + 16) = v72;
  v73 = *(_QWORD *)(v25 + 24);
  *(_QWORD *)(v24 + 24) = v73;
  v74 = *(_QWORD *)(v25 + 32);
  *(_QWORD *)(v24 + 32) = v74;
  *(_QWORD *)(v24 + 40) = *(_QWORD *)(v25 + 40);
  *(_BYTE *)(v24 + 48) = *(_BYTE *)(v25 + 48);
  *(_QWORD *)(v24 + 56) = *(_QWORD *)(v25 + 56);
  *(_QWORD *)(v24 + 64) = *(_QWORD *)(v25 + 64);
  *(_QWORD *)(v24 + 72) = *(_QWORD *)(v25 + 72);
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(_DWORD *)(v27 + 80);
  v29 = *(_DWORD *)(v27 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v30 = (_QWORD *)((v28 + 80 + v24) & v29);
  v31 = (_QWORD *)((v28 + 80 + v25) & v29);
  *v30 = *v31;
  v32 = v31[1];
  v30[1] = v32;
  v75 = v30;
  v76 = v31;
  v33 = (_QWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  v34 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v33 = *v34;
  v35 = v34[1];
  v33[1] = v35;
  v36 = (_QWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
  v37 = (_QWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v36 = *v37;
  v38 = v37[1];
  v36[1] = v38;
  v39 = (_QWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  v40 = (_QWORD *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v39 = *v40;
  v41 = v40[1];
  v39[1] = v41;
  v42 = ((unint64_t)v39 + v28 + 16) & ~v28;
  v43 = ((unint64_t)v40 + v28 + 16) & ~v28;
  v44 = *(void (**)(size_t, const void *, uint64_t))(v27 + 16);
  swift_retain(v71);
  swift_retain(v72);
  swift_retain(v73);
  swift_retain(v74);
  swift_bridgeObjectRetain(v32);
  v45 = v35;
  v46 = v44;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v41);
  v44(v42, (const void *)v43, v26);
  v47 = *(_QWORD *)(v27 + 64);
  v44((v47 + v28 + v42) & ~v28, (const void *)((v47 + v28 + v43) & ~v28), v26);
  v48 = ((v47 + v28) & ~v28) + v47;
  v49 = (char *)((v48 + v28 + v42) & ~v28);
  v50 = (const void *)((v48 + v28 + v43) & ~v28);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v50, 1, v26))
  {
    v51 = *(_DWORD *)(v27 + 84);
    if (v51)
      v52 = v47;
    else
      v52 = v47 + 1;
    memcpy(v49, v50, v52);
  }
  else
  {
    v46((v48 + v28 + v42) & ~v28, v50, v26);
    (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v27 + 56))((v48 + v28 + v42) & ~v28, 0, 1, v26);
    v51 = *(_DWORD *)(v27 + 84);
  }
  if (v51)
    v53 = v47;
  else
    v53 = v47 + 1;
  v54 = &v49[v53];
  *v54 = *((_BYTE *)v50 + v53);
  v54[1] = *((_BYTE *)v50 + v53 + 1);
  v55 = *(_QWORD *)(a3 + 16);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(unsigned __int8 *)(v56 + 80);
  v58 = ((((v28 + 64) | v28) + v48) & ~v28) + v53 + v57 + 2;
  v59 = (unint64_t)v75 + v58;
  v60 = ~v57;
  v61 = (void *)(((unint64_t)v75 + v58) & ~v57);
  v62 = (unint64_t)v76 + v58;
  v63 = (const void *)(((unint64_t)v76 + v58) & ~v57);
  v78 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v56 + 48);
  if (v78(v63, 1, v55))
  {
    v64 = *(_DWORD *)(v56 + 84);
    v65 = *(_QWORD *)(v56 + 64);
    if (v64)
      v66 = *(_QWORD *)(v56 + 64);
    else
      v66 = v65 + 1;
    memcpy(v61, v63, v66);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v56 + 16))(v61, v63, v55);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v61, 0, 1, v55);
    v64 = *(_DWORD *)(v56 + 84);
    v65 = *(_QWORD *)(v56 + 64);
  }
  if (v64)
    v67 = v65;
  else
    v67 = v65 + 1;
  v68 = (void *)(((v59 | v57) + v67) & v60);
  v69 = (const void *)(((v62 | v57) + v67) & v60);
  if (v78(v69, 1, v55))
  {
    memcpy(v68, v69, v67);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v56 + 16))(v68, v69, v55);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v68, 0, 1, v55);
  }
  return v79;
}

uint64_t *sub_10005C124(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  size_t v66;
  char *v67;
  char *v68;
  uint64_t (*v69)(char *, uint64_t, uint64_t);
  int v70;
  int v71;
  size_t v72;
  size_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  const void *v83;
  uint64_t (*v84)(unint64_t, uint64_t, uint64_t);
  int v85;
  int v86;
  size_t v87;
  size_t v88;
  void *v89;
  const void *v90;
  int v91;
  int v92;
  size_t v94;
  _QWORD *v95;
  uint64_t *v97;

  if (a1 != a2)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(a1, v5);
    else
      swift_release(*a1);
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v7) = 0;
      swift_retain(v12);
    }
  }
  v13 = type metadata accessor for DynamicTypeSize(0);
  if (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) <= 8uLL)
    v14 = 8;
  else
    v14 = *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64);
  v15 = type metadata accessor for LegibilityWeight(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_DWORD *)(v16 + 84);
  v18 = *(_DWORD *)(v16 + 80) & 0xF8 | 7;
  v19 = v14 + v18 + 1;
  v20 = ((unint64_t)a1 + v19) & ~v18;
  v21 = ((unint64_t)a2 + v19) & ~v18;
  v22 = *(_QWORD *)(v16 + 64);
  if (v20 != v21)
  {
    v23 = v15;
    if (v17)
      v24 = *(_QWORD *)(v16 + 64);
    else
      v24 = v22 + 1;
    if (v24 <= 8)
      v25 = 8;
    else
      v25 = v24;
    v26 = *(unsigned __int8 *)(v20 + v25);
    if (v26 >= 2)
    {
      if (v25 <= 3)
        v27 = v25;
      else
        v27 = 4;
      __asm { BR              X12 }
    }
    if (v26 == 1)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(v20, 1, v15))
        (*(void (**)(unint64_t, uint64_t))(v16 + 8))(v20, v23);
    }
    else
    {
      swift_release(*(_QWORD *)v20);
    }
    v28 = *(unsigned __int8 *)(v21 + v25);
    if (v28 >= 2)
    {
      if (v25 <= 3)
        v29 = v25;
      else
        v29 = 4;
      __asm { BR              X12 }
    }
    if (v28 == 1)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(v21, 1, v23))
      {
        memcpy((void *)v20, (const void *)v21, v24);
      }
      else
      {
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16))(v20, v21, v23);
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v20, 0, 1, v23);
      }
      *(_BYTE *)(v20 + v25) = 1;
    }
    else
    {
      v30 = *(_QWORD *)v21;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + v25) = 0;
      swift_retain(v30);
    }
  }
  v97 = a1;
  if (v17)
    v31 = v22;
  else
    v31 = v22 + 1;
  if (v31 <= 8)
    v31 = 8;
  v32 = v31 + 1;
  v33 = ((v20 | 7) + v32) & 0xFFFFFFFFFFFFFFF8;
  v34 = ((v21 | 7) + v32) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v33 = *(_BYTE *)v34;
  v35 = *(_QWORD *)(v34 + 8);
  v36 = *(_QWORD *)(v33 + 8);
  *(_QWORD *)(v33 + 8) = v35;
  swift_retain(v35);
  swift_release(v36);
  v37 = *(_QWORD *)(v34 + 16);
  v38 = *(_QWORD *)(v33 + 16);
  *(_QWORD *)(v33 + 16) = v37;
  swift_retain(v37);
  swift_release(v38);
  v39 = *(_QWORD *)(v34 + 24);
  v40 = *(_QWORD *)(v33 + 24);
  *(_QWORD *)(v33 + 24) = v39;
  swift_retain(v39);
  swift_release(v40);
  v41 = *(_QWORD *)(v34 + 32);
  v42 = *(_QWORD *)(v33 + 32);
  *(_QWORD *)(v33 + 32) = v41;
  swift_retain(v41);
  swift_release(v42);
  *(_QWORD *)(v33 + 40) = *(_QWORD *)(v34 + 40);
  *(_BYTE *)(v33 + 48) = *(_BYTE *)(v34 + 48);
  *(_QWORD *)(v33 + 56) = *(_QWORD *)(v34 + 56);
  *(_QWORD *)(v33 + 64) = *(_QWORD *)(v34 + 64);
  *(_QWORD *)(v33 + 72) = *(_QWORD *)(v34 + 72);
  v43 = type metadata accessor for Date(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(_DWORD *)(v44 + 80);
  v46 = *(_DWORD *)(v44 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v47 = (_QWORD *)((v45 + 80 + v33) & v46);
  v48 = (_QWORD *)((v45 + 80 + v34) & v46);
  *v47 = *v48;
  v49 = v48[1];
  v50 = v47[1];
  v47[1] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  v51 = (_QWORD *)(((unint64_t)v47 + 23) & 0xFFFFFFFFFFFFFFF8);
  v95 = v48;
  v52 = (_QWORD *)(((unint64_t)v48 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v51 = *v52;
  v53 = v52[1];
  v54 = v51[1];
  v51[1] = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  v55 = (_QWORD *)(((unint64_t)v51 + 23) & 0xFFFFFFFFFFFFFFF8);
  v56 = (_QWORD *)(((unint64_t)v52 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v55 = *v56;
  v57 = v56[1];
  v58 = v55[1];
  v55[1] = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  v59 = (_QWORD *)(((unint64_t)v55 + 23) & 0xFFFFFFFFFFFFFFF8);
  v60 = (_QWORD *)(((unint64_t)v56 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v59 = *v60;
  v61 = v60[1];
  v62 = v59[1];
  v59[1] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  v63 = ((unint64_t)v59 + v45 + 16) & ~v45;
  v64 = ((unint64_t)v60 + v45 + 16) & ~v45;
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 24);
  v65(v63, v64, v43);
  v66 = *(_QWORD *)(v44 + 64);
  v65((v66 + v45 + v63) & ~v45, (v66 + v45 + v64) & ~v45, v43);
  v94 = ((v66 + v45) & ~v45) + v66;
  v67 = (char *)((v94 + v45 + v63) & ~v45);
  v68 = (char *)((v94 + v45 + v64) & ~v45);
  v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
  v70 = v69(v67, 1, v43);
  v71 = v69(v68, 1, v43);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v67, v68, v43);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v67, 0, 1, v43);
      goto LABEL_65;
    }
  }
  else
  {
    if (!v71)
    {
      v65((uint64_t)v67, (uint64_t)v68, v43);
      goto LABEL_65;
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v67, v43);
  }
  if (*(_DWORD *)(v44 + 84))
    v72 = v66;
  else
    v72 = v66 + 1;
  memcpy(v67, v68, v72);
LABEL_65:
  if (*(_DWORD *)(v44 + 84))
    v73 = v66;
  else
    v73 = v66 + 1;
  v74 = &v67[v73];
  *v74 = v68[v73];
  v74[1] = v68[v73 + 1];
  v75 = (((v45 + 64) | v45) + v94) & ~v45;
  v76 = *(_QWORD *)(a3 + 16);
  v77 = *(_QWORD *)(v76 - 8);
  v78 = *(unsigned __int8 *)(v77 + 80);
  v79 = v75 + v73 + v78 + 2;
  v80 = (unint64_t)v47 + v79;
  v81 = ~v78;
  v82 = (unint64_t)v95 + v79;
  v83 = (const void *)(((unint64_t)v95 + v79) & ~v78);
  v84 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v77 + 48);
  v85 = v84(v80 & ~v78, 1, v76);
  v86 = v84((unint64_t)v83, 1, v76);
  if (v85)
  {
    if (!v86)
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v77 + 16))(v80 & ~v78, v83, v76);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v77 + 56))(v80 & ~v78, 0, 1, v76);
      goto LABEL_77;
    }
  }
  else
  {
    if (!v86)
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v77 + 24))(v80 & ~v78, v83, v76);
      goto LABEL_77;
    }
    (*(void (**)(unint64_t, uint64_t))(v77 + 8))(v80 & ~v78, v76);
  }
  if (*(_DWORD *)(v77 + 84))
    v87 = *(_QWORD *)(v77 + 64);
  else
    v87 = *(_QWORD *)(v77 + 64) + 1;
  memcpy((void *)(v80 & ~v78), v83, v87);
LABEL_77:
  if (*(_DWORD *)(v77 + 84))
    v88 = *(_QWORD *)(v77 + 64);
  else
    v88 = *(_QWORD *)(v77 + 64) + 1;
  v89 = (void *)(((v80 | v78) + v88) & v81);
  v90 = (const void *)(((v82 | v78) + v88) & v81);
  v91 = v84((unint64_t)v89, 1, v76);
  v92 = v84((unint64_t)v90, 1, v76);
  if (!v91)
  {
    if (!v92)
    {
      (*(void (**)(void *, const void *, uint64_t))(v77 + 24))(v89, v90, v76);
      return v97;
    }
    (*(void (**)(void *, uint64_t))(v77 + 8))(v89, v76);
    goto LABEL_85;
  }
  if (v92)
  {
LABEL_85:
    memcpy(v89, v90, v88);
    return v97;
  }
  (*(void (**)(void *, const void *, uint64_t))(v77 + 16))(v89, v90, v76);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v89, 0, 1, v76);
  return v97;
}

_QWORD *sub_10005C9E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  _OWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  size_t v42;
  size_t v43;
  char *v44;
  const void *v45;
  int v46;
  size_t v47;
  size_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  const void *v58;
  int v59;
  size_t v60;
  size_t v61;
  size_t v62;
  void *v63;
  const void *v64;
  unsigned int (*v67)(const void *, uint64_t, uint64_t);
  _QWORD *v68;

  v5 = type metadata accessor for DynamicTypeSize(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *((unsigned __int8 *)a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X13 }
  }
  if (v8 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
    v10 = 1;
  }
  else
  {
    v10 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v7) = v10;
  v11 = type metadata accessor for LegibilityWeight(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  v14 = v7 + v13 + 1;
  v15 = ((unint64_t)a1 + v14) & ~v13;
  v16 = ((unint64_t)a2 + v14) & ~v13;
  if (*(_DWORD *)(v12 + 84))
    v17 = *(_QWORD *)(v12 + 64);
  else
    v17 = *(_QWORD *)(v12 + 64) + 1;
  if (v17 <= 8)
    v18 = 8;
  else
    v18 = v17;
  v19 = *(unsigned __int8 *)(v16 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  v68 = a1;
  if (v19 == 1)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11))
    {
      memcpy((void *)v15, (const void *)v16, v17);
      v21 = 1;
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 32))(v15, v16, v11);
      v21 = 1;
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    }
  }
  else
  {
    v21 = 0;
    *(_QWORD *)v15 = *(_QWORD *)v16;
  }
  *(_BYTE *)(v15 + v18) = v21;
  v22 = (_OWORD *)(((v15 | 7) + v18 + 1) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_OWORD *)(((v16 | 7) + v18 + 1) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = v23[1];
  v25 = v23[2];
  v26 = v23[4];
  v22[3] = v23[3];
  v22[4] = v26;
  v22[1] = v24;
  v22[2] = v25;
  v27 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(_DWORD *)(v28 + 80);
  v30 = *(_DWORD *)(v28 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v31 = (_OWORD *)(((unint64_t)v22 + v29 + 80) & v30);
  v32 = (_OWORD *)(((unint64_t)v23 + v29 + 80) & v30);
  *v31 = *v32;
  v33 = (_OWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  v34 = (_OWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v33 = *v34;
  v35 = (_OWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_OWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v36;
  v37 = (_OWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_OWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v37 = *v38;
  v39 = ((unint64_t)v37 + v29 + 16) & ~v29;
  v40 = ((unint64_t)v38 + v29 + 16) & ~v29;
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32);
  v41(v39, v40, v27);
  v42 = *(_QWORD *)(v28 + 64);
  v41((v42 + v29 + v39) & ~v29, (v42 + v29 + v40) & ~v29, v27);
  v43 = ((v42 + v29) & ~v29) + v42;
  v44 = (char *)((v43 + v29 + v39) & ~v29);
  v45 = (const void *)((v43 + v29 + v40) & ~v29);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v45, 1, v27))
  {
    v46 = *(_DWORD *)(v28 + 84);
    if (v46)
      v47 = v42;
    else
      v47 = v42 + 1;
    memcpy(v44, v45, v47);
  }
  else
  {
    v41((uint64_t)v44, (uint64_t)v45, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v44, 0, 1, v27);
    v46 = *(_DWORD *)(v28 + 84);
  }
  if (v46)
    v48 = v42;
  else
    v48 = v42 + 1;
  v49 = &v44[v48];
  *v49 = *((_BYTE *)v45 + v48);
  v49[1] = *((_BYTE *)v45 + v48 + 1);
  v50 = (((v29 + 64) | v29) + v43) & ~v29;
  v51 = *(_QWORD *)(a3 + 16);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = *(unsigned __int8 *)(v52 + 80);
  v54 = v50 + v48 + v53 + 2;
  v55 = (unint64_t)v31 + v54;
  v56 = ~v53;
  v57 = (unint64_t)v32 + v54;
  v58 = (const void *)(((unint64_t)v32 + v54) & ~v53);
  v67 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v52 + 48);
  if (v67(v58, 1, v51))
  {
    v59 = *(_DWORD *)(v52 + 84);
    v60 = *(_QWORD *)(v52 + 64);
    if (v59)
      v61 = *(_QWORD *)(v52 + 64);
    else
      v61 = v60 + 1;
    memcpy((void *)(v55 & ~v53), v58, v61);
  }
  else
  {
    (*(void (**)(unint64_t, const void *, uint64_t))(v52 + 32))(v55 & ~v53, v58, v51);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v55 & ~v53, 0, 1, v51);
    v59 = *(_DWORD *)(v52 + 84);
    v60 = *(_QWORD *)(v52 + 64);
  }
  if (v59)
    v62 = v60;
  else
    v62 = v60 + 1;
  v63 = (void *)(((v55 | v53) + v62) & v56);
  v64 = (const void *)(((v57 | v53) + v62) & v56);
  if (v67(v64, 1, v51))
  {
    memcpy(v63, v64, v62);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v52 + 32))(v63, v64, v51);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v63, 0, 1, v51);
  }
  return v68;
}

_QWORD *sub_10005CF24(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  size_t v58;
  char *v59;
  char *v60;
  uint64_t (*v61)(char *, uint64_t, uint64_t);
  int v62;
  int v63;
  size_t v64;
  size_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  const void *v75;
  uint64_t (*v76)(unint64_t, uint64_t, uint64_t);
  int v77;
  int v78;
  size_t v79;
  size_t v80;
  void *v81;
  const void *v82;
  int v83;
  int v84;
  size_t v86;
  _QWORD *v87;
  _QWORD *v89;

  if (a1 != a2)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
    else
      swift_release(*a1);
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 1;
    }
    else
    {
      v12 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  v13 = type metadata accessor for DynamicTypeSize(0);
  if (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) <= 8uLL)
    v14 = 8;
  else
    v14 = *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64);
  v15 = type metadata accessor for LegibilityWeight(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_DWORD *)(v16 + 84);
  v18 = *(_DWORD *)(v16 + 80) & 0xF8 | 7;
  v19 = v14 + v18 + 1;
  v20 = ((unint64_t)a1 + v19) & ~v18;
  v21 = ((unint64_t)a2 + v19) & ~v18;
  v22 = *(_QWORD *)(v16 + 64);
  if (v20 != v21)
  {
    v23 = v15;
    if (v17)
      v24 = *(_QWORD *)(v16 + 64);
    else
      v24 = v22 + 1;
    if (v24 <= 8)
      v25 = 8;
    else
      v25 = v24;
    v26 = *(unsigned __int8 *)(v20 + v25);
    if (v26 >= 2)
    {
      if (v25 <= 3)
        v27 = v25;
      else
        v27 = 4;
      __asm { BR              X12 }
    }
    if (v26 == 1)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(v20, 1, v15))
        (*(void (**)(unint64_t, uint64_t))(v16 + 8))(v20, v23);
    }
    else
    {
      swift_release(*(_QWORD *)v20);
    }
    v28 = *(unsigned __int8 *)(v21 + v25);
    if (v28 >= 2)
    {
      if (v25 <= 3)
        v29 = v25;
      else
        v29 = 4;
      __asm { BR              X12 }
    }
    if (v28 == 1)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(v21, 1, v23))
      {
        memcpy((void *)v20, (const void *)v21, v24);
        v30 = 1;
      }
      else
      {
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32))(v20, v21, v23);
        v30 = 1;
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v20, 0, 1, v23);
      }
    }
    else
    {
      v30 = 0;
      *(_QWORD *)v20 = *(_QWORD *)v21;
    }
    *(_BYTE *)(v20 + v25) = v30;
  }
  v89 = a1;
  if (v17)
    v31 = v22;
  else
    v31 = v22 + 1;
  if (v31 <= 8)
    v31 = 8;
  v32 = v31 + 1;
  v33 = ((v20 | 7) + v32) & 0xFFFFFFFFFFFFFFF8;
  v34 = ((v21 | 7) + v32) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v33 = *(_BYTE *)v34;
  v35 = *(_QWORD *)(v33 + 8);
  *(_QWORD *)(v33 + 8) = *(_QWORD *)(v34 + 8);
  swift_release(v35);
  v36 = *(_QWORD *)(v33 + 16);
  *(_QWORD *)(v33 + 16) = *(_QWORD *)(v34 + 16);
  swift_release(v36);
  v37 = *(_QWORD *)(v33 + 24);
  *(_QWORD *)(v33 + 24) = *(_QWORD *)(v34 + 24);
  swift_release(v37);
  v38 = *(_QWORD *)(v33 + 32);
  *(_QWORD *)(v33 + 32) = *(_QWORD *)(v34 + 32);
  swift_release(v38);
  *(_QWORD *)(v33 + 40) = *(_QWORD *)(v34 + 40);
  *(_BYTE *)(v33 + 48) = *(_BYTE *)(v34 + 48);
  *(_QWORD *)(v33 + 56) = *(_QWORD *)(v34 + 56);
  *(_QWORD *)(v33 + 64) = *(_QWORD *)(v34 + 64);
  *(_QWORD *)(v33 + 72) = *(_QWORD *)(v34 + 72);
  v39 = type metadata accessor for Date(0);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(_DWORD *)(v40 + 80);
  v42 = *(_DWORD *)(v40 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v43 = (_QWORD *)((v41 + 80 + v33) & v42);
  v44 = (_QWORD *)((v41 + 80 + v34) & v42);
  *v43 = *v44;
  v45 = v43[1];
  v43[1] = v44[1];
  swift_bridgeObjectRelease(v45);
  v46 = (_QWORD *)(((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8);
  v87 = v44;
  v47 = (_QWORD *)(((unint64_t)v44 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v46 = *v47;
  v48 = v46[1];
  v46[1] = v47[1];
  swift_bridgeObjectRelease(v48);
  v49 = (_QWORD *)(((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF8);
  v50 = (_QWORD *)(((unint64_t)v47 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v49 = *v50;
  v51 = v49[1];
  v49[1] = v50[1];
  swift_bridgeObjectRelease(v51);
  v52 = (_QWORD *)(((unint64_t)v49 + 23) & 0xFFFFFFFFFFFFFFF8);
  v53 = (_QWORD *)(((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v52 = *v53;
  v54 = v52[1];
  v52[1] = v53[1];
  swift_bridgeObjectRelease(v54);
  v55 = ((unint64_t)v52 + v41 + 16) & ~v41;
  v56 = ((unint64_t)v53 + v41 + 16) & ~v41;
  v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 40);
  v57(v55, v56, v39);
  v58 = *(_QWORD *)(v40 + 64);
  v57((v58 + v41 + v55) & ~v41, (v58 + v41 + v56) & ~v41, v39);
  v86 = ((v58 + v41) & ~v41) + v58;
  v59 = (char *)((v86 + v41 + v55) & ~v41);
  v60 = (char *)((v86 + v41 + v56) & ~v41);
  v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  v62 = v61(v59, 1, v39);
  v63 = v61(v60, 1, v39);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v59, v60, v39);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v59, 0, 1, v39);
      goto LABEL_66;
    }
  }
  else
  {
    if (!v63)
    {
      v57((uint64_t)v59, (uint64_t)v60, v39);
      goto LABEL_66;
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v59, v39);
  }
  if (*(_DWORD *)(v40 + 84))
    v64 = v58;
  else
    v64 = v58 + 1;
  memcpy(v59, v60, v64);
LABEL_66:
  if (*(_DWORD *)(v40 + 84))
    v65 = v58;
  else
    v65 = v58 + 1;
  v66 = &v59[v65];
  *v66 = v60[v65];
  v66[1] = v60[v65 + 1];
  v67 = (((v41 + 64) | v41) + v86) & ~v41;
  v68 = *(_QWORD *)(a3 + 16);
  v69 = *(_QWORD *)(v68 - 8);
  v70 = *(unsigned __int8 *)(v69 + 80);
  v71 = v67 + v65 + v70 + 2;
  v72 = (unint64_t)v43 + v71;
  v73 = ~v70;
  v74 = (unint64_t)v87 + v71;
  v75 = (const void *)(((unint64_t)v87 + v71) & ~v70);
  v76 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v69 + 48);
  v77 = v76(v72 & ~v70, 1, v68);
  v78 = v76((unint64_t)v75, 1, v68);
  if (v77)
  {
    if (!v78)
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v69 + 32))(v72 & ~v70, v75, v68);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v72 & ~v70, 0, 1, v68);
      goto LABEL_78;
    }
  }
  else
  {
    if (!v78)
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v69 + 40))(v72 & ~v70, v75, v68);
      goto LABEL_78;
    }
    (*(void (**)(unint64_t, uint64_t))(v69 + 8))(v72 & ~v70, v68);
  }
  if (*(_DWORD *)(v69 + 84))
    v79 = *(_QWORD *)(v69 + 64);
  else
    v79 = *(_QWORD *)(v69 + 64) + 1;
  memcpy((void *)(v72 & ~v70), v75, v79);
LABEL_78:
  if (*(_DWORD *)(v69 + 84))
    v80 = *(_QWORD *)(v69 + 64);
  else
    v80 = *(_QWORD *)(v69 + 64) + 1;
  v81 = (void *)(((v72 | v70) + v80) & v73);
  v82 = (const void *)(((v74 | v70) + v80) & v73);
  v83 = v76((unint64_t)v81, 1, v68);
  v84 = v76((unint64_t)v82, 1, v68);
  if (!v83)
  {
    if (!v84)
    {
      (*(void (**)(void *, const void *, uint64_t))(v69 + 40))(v81, v82, v68);
      return v89;
    }
    (*(void (**)(void *, uint64_t))(v69 + 8))(v81, v68);
    goto LABEL_86;
  }
  if (v84)
  {
LABEL_86:
    memcpy(v81, v82, v80);
    return v89;
  }
  (*(void (**)(void *, const void *, uint64_t))(v69 + 32))(v81, v82, v68);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v81, 0, 1, v68);
  return v89;
}

uint64_t sub_10005D7A0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  char v31;
  int v32;
  unsigned int v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;

  v6 = type metadata accessor for DynamicTypeSize(0);
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v8 = *(_QWORD *)(type metadata accessor for LegibilityWeight(0) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v12 = *(_DWORD *)(v11 + 84);
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = *(_DWORD *)(v11 + 84);
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v15 = *(_DWORD *)(v14 + 84);
  if (v15)
    v16 = v15 - 1;
  else
    v16 = 0;
  if (v16 <= v13)
    v17 = v13;
  else
    v17 = v16;
  if (v9)
    v18 = v10;
  else
    v18 = v10 + 1;
  if (v18 <= 8)
    v18 = 8;
  if (v12)
    v19 = 2;
  else
    v19 = 3;
  if (v15)
    v20 = *(_QWORD *)(v14 + 64);
  else
    v20 = *(_QWORD *)(v14 + 64) + 1;
  if (!a2)
    return 0;
  v21 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v22 = v7 + v21 + 1;
  v23 = v18 + 8;
  v24 = *(_DWORD *)(v11 + 80);
  v25 = *(_DWORD *)(v11 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v26 = v24 + 80;
  v27 = v19
      + *(_QWORD *)(v11 + 64)
      + ((*(_QWORD *)(v11 + 64) + v24 + ((*(_QWORD *)(v11 + 64) + v24) & ~v24) + ((v24 + 64) & ~v24)) & ~v24);
  v28 = *(unsigned __int8 *)(v14 + 80);
  v29 = a2 - v17;
  if (a2 <= v17)
    goto LABEL_44;
  v30 = ((v20 + v28 + ((v27 + v28 + ((v26 + ((v23 + (v22 & ~v21)) & 0xFFFFFFFFFFFFFFF8)) & v25)) & ~v28)) & ~v28)
      + v20;
  v31 = 8 * v30;
  if (v30 > 3)
    goto LABEL_27;
  v34 = ((v29 + ~(-1 << v31)) >> v31) + 1;
  if (HIWORD(v34))
  {
    v32 = *(_DWORD *)(a1 + v30);
    if (v32)
      goto LABEL_35;
  }
  else
  {
    if (v34 <= 0xFF)
    {
      if (v34 < 2)
        goto LABEL_44;
LABEL_27:
      v32 = *(unsigned __int8 *)(a1 + v30);
      if (!*(_BYTE *)(a1 + v30))
        goto LABEL_44;
LABEL_35:
      v35 = (v32 - 1) << v31;
      if (v30 > 3)
        v35 = 0;
      if ((_DWORD)v30)
      {
        if (v30 <= 3)
          v36 = v30;
        else
          v36 = 4;
        __asm { BR              X12 }
      }
      return v17 + v35 + 1;
    }
    v32 = *(unsigned __int16 *)(a1 + v30);
    if (*(_WORD *)(a1 + v30))
      goto LABEL_35;
  }
LABEL_44:
  v37 = (v23 + ((v22 + a1) & ~v21)) & 0xFFFFFFFFFFFFFFF8;
  if (v17 == 0x7FFFFFFF)
  {
    v38 = *(_QWORD *)(v37 + 8);
  }
  else
  {
    v39 = (v26 + v37) & v25;
    if (v13 < v16)
    {
      v40 = (*(uint64_t (**)(unint64_t, _QWORD))(v14 + 48))((v39 + v28 + v27) & ~v28, *(unsigned int *)(v14 + 84));
      if (v40 >= 2)
        return v40 - 1;
      else
        return 0;
    }
    if ((v12 & 0x80000000) != 0)
      return (*(uint64_t (**)(unint64_t))(v11 + 48))((v24
                                                                     + ((((((v39 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                       + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                     + 16) & ~v24);
    v38 = *(_QWORD *)(((v26 + v37) & v25) + 8);
  }
  if (v38 >= 0xFFFFFFFF)
    LODWORD(v38) = -1;
  return (v38 + 1);
}

void sub_10005DAA4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;

  v8 = type metadata accessor for DynamicTypeSize(0);
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) <= 8uLL)
    v9 = 8;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v10 = *(_QWORD *)(type metadata accessor for LegibilityWeight(0) - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = 0;
  v14 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v15 = *(_DWORD *)(v14 + 84);
  if (v15 <= 0x7FFFFFFF)
    v16 = 0x7FFFFFFF;
  else
    v16 = *(_DWORD *)(v14 + 84);
  v17 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v18 = *(_DWORD *)(v17 + 84);
  v19 = v18 - 1;
  if (!v18)
    v19 = 0;
  if (v19 <= v16)
    v20 = v16;
  else
    v20 = v19;
  if (v11)
    v21 = v12;
  else
    v21 = v12 + 1;
  if (v21 <= 8)
    v21 = 8;
  v22 = *(_QWORD *)(v14 + 64);
  if (v15)
    v23 = *(_QWORD *)(v14 + 64);
  else
    v23 = v22 + 1;
  v24 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v25 = (v21 + 8 + ((v9 + v24 + 1) & ~v24)) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)(v17 + 64);
  if (!v18)
    ++v28;
  v27 = *(unsigned __int8 *)(v17 + 80);
  v26 = *(_DWORD *)(v14 + 80);
  v29 = ((v28
        + v27
        + ((v23
          + ((((v26 + 64) | v26) + ((v22 + v26) & ~v26) + v22) & ~v26)
          + 2
          + v27
          + ((v26 + 80 + v25) & (*(_DWORD *)(v14 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8))) & ~v27)) & ~v27)
      + v28;
  v30 = a3 >= v20;
  v31 = a3 - v20;
  if (v31 != 0 && v30)
  {
    if (v29 > 3)
    {
      v13 = &_mh_execute_header.magic + 1;
      if (v20 < a2)
        goto LABEL_31;
      goto LABEL_26;
    }
    v32 = ((v31 + ~(-1 << (8 * v29))) >> (8 * v29)) + 1;
    if (HIWORD(v32))
    {
      v13 = &dword_100000004;
      if (v20 < a2)
      {
LABEL_31:
        v33 = ~v20 + a2;
        if (v29 < 4)
        {
          if ((_DWORD)v29)
          {
            v34 = v33 & ~(-1 << (8 * v29));
            bzero(a1, v29);
            if ((_DWORD)v29 == 3)
            {
              *(_WORD *)a1 = v34;
              a1[2] = BYTE2(v34);
            }
            else if ((_DWORD)v29 == 2)
            {
              *(_WORD *)a1 = v34;
            }
            else
            {
              *a1 = v34;
            }
          }
        }
        else
        {
          bzero(a1, v29);
          *(_DWORD *)a1 = v33;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X28 }
    }
    v13 = v32 > 1;
    if (v32 >= 0x100)
      v13 = 2;
  }
  if (v20 < a2)
    goto LABEL_31;
  goto LABEL_26;
}

uint64_t type metadata accessor for SportsWidgetGenericClockView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100064B74(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SportsWidgetGenericClockView);
}

uint64_t sub_10005DFA8(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1000D2974, 1);
}

uint64_t sub_10005DFDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_10005DFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin();
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v14 - v11, a1, a2);
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_10005E0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin();
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v14 - v11, a1, a3);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_10005E17C(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    __chkstk_darwin();
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *a1++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return TupleView.init(_:)(v8, TupleTypeMetadata);
  }
  __chkstk_darwin();
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2);
  __chkstk_darwin();
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)(v8, TupleTypeMetadata);
}

uint64_t sub_10005E330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_1000CB308);
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);
  return swift_release(KeyPath);
}

uint64_t sub_10005E394@<X0>(uint64_t a1@<X8>)
{
  return sub_10009FF0C(a1);
}

uint64_t sub_10005E3B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  Swift::String v4;
  uint64_t v5;

  v2 = v1 + *(int *)(a1 + 44);
  result = *(_QWORD *)(v2 + 40);
  if (result)
  {
    v5 = *(_QWORD *)(v2 + 32);
    swift_bridgeObjectRetain(result);
    v4._countAndFlagsBits = 32;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    return v5;
  }
  return result;
}

uint64_t sub_10005E410(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1 + *(int *)(a1 + 44);
  v3 = *(_QWORD *)(v2 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v2 + 48);
  String.append(_:)(*(Swift::String *)(&v3 - 1));
  return 32;
}

uint64_t sub_10005E468@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t OpaqueTypeConformance2;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, char *, uint64_t);
  char *v111;
  void (*v112)(char *, uint64_t);
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t WitnessTable;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char v142[16];
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;

  v136 = a1;
  v141 = a2;
  v140 = type metadata accessor for ContentTransition(0);
  v139 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v138 = (char *)&v114 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for Optional(255, v135);
  v5 = sub_100008F80(&qword_100108EE0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v4, v5, v4, 0, 0);
  v7 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v7);
  v8 = type metadata accessor for HStack(255, v7);
  v9 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v4, v4, 0, 0);
  v11 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v11);
  v12 = type metadata accessor for HStack(255, v11);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _PaddingLayout);
  v14 = swift_getTupleTypeMetadata2(255, v5, v13, 0, 0);
  v15 = type metadata accessor for TupleView(255, v14);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v15);
  v16 = type metadata accessor for VStack(255, v15);
  v17 = type metadata accessor for _ConditionalContent(255, v9, v16);
  v18 = type metadata accessor for _ConditionalContent(255, v17, &type metadata for EmptyView);
  v19 = type metadata accessor for _ConditionalContent(255, v18, &type metadata for Text);
  v20 = type metadata accessor for Optional(255, v19);
  v21 = sub_100008F80(&qword_100108EE8);
  v22 = swift_getTupleTypeMetadata2(255, v20, v21, 0, 0);
  v23 = type metadata accessor for TupleView(255, v22);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v23);
  v24 = type metadata accessor for VStack(255, v23);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v24);
  v167 = v24;
  v168 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v167, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 0);
  v26 = sub_100008F80(&qword_100108EF0);
  v27 = sub_100008F80(&qword_100108EF8);
  v28 = swift_getTupleTypeMetadata3(255, v20, v26, v27, 0, 0);
  v29 = type metadata accessor for TupleView(255, v28);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v29);
  v30 = type metadata accessor for VStack(255, v29);
  v31 = type metadata accessor for _ConditionalContent(255, OpaqueTypeMetadata2, v30);
  v129 = v31;
  v32 = sub_100008F80(&qword_100108F00);
  v33 = type metadata accessor for _ConditionalContent(255, v31, v32);
  v34 = sub_100008F80(&qword_100108F08);
  v35 = swift_getTupleTypeMetadata2(255, v20, v34, 0, 0);
  v36 = type metadata accessor for TupleView(255, v35);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v36);
  v37 = type metadata accessor for VStack(255, v36);
  v128 = (char *)v37;
  v38 = swift_getTupleTypeMetadata3(255, v20, v26, v34, 0, 0);
  v39 = type metadata accessor for TupleView(255, v38);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v39);
  v40 = type metadata accessor for VStack(255, v39);
  v41 = type metadata accessor for _ConditionalContent(255, v37, v40);
  v42 = sub_100008F80(&qword_100108F10);
  v43 = type metadata accessor for _ConditionalContent(255, v41, v42);
  v44 = v33;
  v45 = type metadata accessor for _ConditionalContent(255, v33, v43);
  v122 = v45;
  v46 = type metadata accessor for Group(0, v45);
  v134 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v132 = (char *)&v114 - v47;
  v48 = sub_100008F80(&qword_100108F18);
  v123 = v46;
  v49 = type metadata accessor for ModifiedContent(0, v46, v48);
  v133 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v131 = (char *)&v114 - v50;
  v167 = v24;
  v168 = WitnessTable;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v167, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
  v52 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v30);
  v165 = OpaqueTypeConformance2;
  v166 = v52;
  v53 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v129);
  v54 = sub_100064834();
  v163 = v53;
  v164 = v54;
  v55 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v44);
  v56 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v128);
  v57 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v40);
  v161 = v56;
  v162 = v57;
  v58 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v41);
  v59 = sub_1000648BC();
  v159 = v58;
  v160 = v59;
  v60 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v43);
  v157 = v55;
  v158 = v60;
  v61 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v45);
  v156 = v61;
  v62 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v46);
  v118 = v62;
  v63 = sub_100013840(&qword_100108F30, &qword_100108F18, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v154 = v62;
  v155 = v63;
  v120 = v49;
  v119 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v49);
  v167 = v49;
  v168 = v119;
  v64 = swift_getOpaqueTypeMetadata2(0, &v167, &opaque type descriptor for <<opaque return type of View.monospacedDigit()>>, 0);
  v124 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v66 = (char *)&v114 - v65;
  v67 = sub_100008F80(&qword_100108730);
  v68 = type metadata accessor for ModifiedContent(0, v64, v67);
  v126 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v115 = (char *)&v114 - v69;
  v70 = sub_100008F80(&qword_100106178);
  v71 = type metadata accessor for ModifiedContent(0, v68, v70);
  v127 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v116 = (char *)&v114 - v72;
  v73 = sub_100008F80(&qword_100106188);
  v74 = type metadata accessor for ModifiedContent(0, v71, v73);
  v75 = *(_QWORD *)(v74 - 8);
  v125 = v74;
  WitnessTable = v75;
  __chkstk_darwin(v74);
  v117 = (char *)&v114 - v76;
  v77 = sub_100008F80(&qword_100108628);
  v78 = type metadata accessor for ModifiedContent(0, v74, v77);
  v129 = *(_QWORD *)(v78 - 8);
  v79 = __chkstk_darwin(v78);
  v121 = (char *)&v114 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v79);
  v128 = (char *)&v114 - v81;
  v82 = v136;
  v83 = *(_QWORD *)(v136 + 24);
  v143 = v135;
  v144 = v83;
  v84 = v137;
  v145 = v137;
  v85 = v132;
  Group<A>.init(content:)(sub_100064944, v142, v122, v61);
  v86 = v84 + *(int *)(v82 + 40);
  v87 = v131;
  v88 = v123;
  View.foregroundColor(_:)(*(_QWORD *)(v86 + 24), v123, v118);
  (*(void (**)(char *, uint64_t))(v134 + 8))(v85, v88);
  v89 = v120;
  v90 = v119;
  View.monospacedDigit()(v120, v119);
  (*(void (**)(char *, uint64_t))(v133 + 8))(v87, v89);
  v91 = *(_QWORD *)(v86 + 32);
  v167 = v89;
  v168 = v90;
  v92 = swift_getOpaqueTypeConformance2(&v167, &opaque type descriptor for <<opaque return type of View.monospacedDigit()>>, 1);
  v93 = v115;
  View.font(_:)(v91, v64, v92);
  (*(void (**)(char *, uint64_t))(v124 + 8))(v66, v64);
  v94 = *(_QWORD *)(v86 + 40);
  v95 = sub_100013840(&qword_100108728, &qword_100108730, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v152 = v92;
  v153 = v95;
  v96 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v68);
  v97 = v116;
  View.lineLimit(_:)(v94, 0, v68, v96);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v93, v68);
  v98 = *(unsigned __int8 *)(v86 + 48);
  v99 = sub_100013840(&qword_100106170, &qword_100106178, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v150 = v96;
  v151 = v99;
  v100 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v71);
  v101 = v117;
  View.multilineTextAlignment(_:)(v98, v71, v100);
  v102 = (*(uint64_t (**)(char *, uint64_t))(v127 + 8))(v97, v71);
  v103 = (uint64_t)v138;
  static ContentTransition.identity.getter(v102);
  v104 = sub_100013840(&qword_100106180, &qword_100106188, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v148 = v100;
  v149 = v104;
  v105 = v125;
  v106 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v125);
  v107 = v121;
  sub_10005E330(v103, v105, v106);
  (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v103, v140);
  (*(void (**)(char *, uint64_t))(WitnessTable + 8))(v101, v105);
  v108 = sub_100013840(&qword_1001087C0, &qword_100108628, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v146 = v106;
  v147 = v108;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v78);
  v109 = v129;
  v110 = *(void (**)(char *, char *, uint64_t))(v129 + 16);
  v111 = v128;
  v110(v128, v107, v78);
  v112 = *(void (**)(char *, uint64_t))(v109 + 8);
  v112(v107, v78);
  v110(v141, v111, v78);
  return ((uint64_t (*)(char *, uint64_t))v112)(v111, v78);
}

uint64_t sub_10005EFD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata3;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t WitnessTable;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t OpaqueTypeConformance2;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  char *v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v104 = a3;
  v105 = a4;
  v6 = type metadata accessor for Optional(255, a2);
  v7 = sub_100008F80(&qword_100108EE0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v6, v7, v6, 0, 0);
  v9 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v9);
  v10 = type metadata accessor for HStack(255, v9);
  v11 = type metadata accessor for ModifiedContent(255, v10, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v6, v6, 0, 0);
  v13 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v13);
  v14 = type metadata accessor for HStack(255, v13);
  v15 = type metadata accessor for ModifiedContent(255, v14, &type metadata for _PaddingLayout);
  v16 = swift_getTupleTypeMetadata2(255, v7, v15, 0, 0);
  v17 = type metadata accessor for TupleView(255, v16);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v17);
  v18 = type metadata accessor for VStack(255, v17);
  v19 = type metadata accessor for _ConditionalContent(255, v11, v18);
  v20 = type metadata accessor for _ConditionalContent(255, v19, &type metadata for EmptyView);
  v21 = type metadata accessor for _ConditionalContent(255, v20, &type metadata for Text);
  v22 = type metadata accessor for Optional(255, v21);
  v23 = sub_100008F80(&qword_100108F08);
  v24 = swift_getTupleTypeMetadata2(255, v22, v23, 0, 0);
  v25 = type metadata accessor for TupleView(255, v24);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v25);
  v26 = type metadata accessor for VStack(255, v25);
  v27 = sub_100008F80(&qword_100108EF0);
  v28 = swift_getTupleTypeMetadata3(255, v22, v27, v23, 0, 0);
  v29 = type metadata accessor for TupleView(255, v28);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v29);
  v111 = v26;
  v109 = type metadata accessor for VStack(255, v29);
  v30 = type metadata accessor for _ConditionalContent(255, v26, v109);
  v31 = sub_100008F80(&qword_100108F10);
  v110 = v30;
  v32 = type metadata accessor for _ConditionalContent(0, v30, v31);
  v99 = *(_QWORD *)(v32 - 8);
  v33 = __chkstk_darwin(v32);
  v35 = (char *)&v99 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v100 = (char *)&v99 - v36;
  v37 = sub_100008F80(&qword_100108EE8);
  v38 = swift_getTupleTypeMetadata2(255, v22, v37, 0, 0);
  v39 = type metadata accessor for TupleView(255, v38);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v39);
  v40 = type metadata accessor for VStack(255, v39);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v40);
  v103 = v40;
  v138 = v40;
  v139 = WitnessTable;
  v108 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v138, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 0);
  v43 = sub_100008F80(&qword_100108EF8);
  v44 = swift_getTupleTypeMetadata3(255, v22, v27, v43, 0, 0);
  v45 = type metadata accessor for TupleView(255, v44);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v45);
  v106 = type metadata accessor for VStack(255, v45);
  v46 = type metadata accessor for _ConditionalContent(255, OpaqueTypeMetadata2, v106);
  v47 = sub_100008F80(&qword_100108F00);
  v107 = v46;
  v48 = type metadata accessor for _ConditionalContent(0, v46, v47);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = __chkstk_darwin(v48);
  v52 = (char *)&v99 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v54 = (char *)&v99 - v53;
  v102 = type metadata accessor for _ConditionalContent(0, v48, v32);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v56 = (char *)&v99 - v55;
  v58 = type metadata accessor for SportsWidgetGenericClockView(0, a2, v104, v57);
  v59 = a1 + *(int *)(v58 + 44);
  if (*(_BYTE *)(v59 + *(int *)(type metadata accessor for SportsWidgetGenericClockViewModel(0) + 44)) == 1)
  {
    sub_10005F8EC(v58, (uint64_t)v52);
    v60 = v103;
    v138 = v103;
    v139 = v108;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v138, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
    v62 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v106);
    v118 = OpaqueTypeConformance2;
    v119 = v62;
    v63 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v107);
    v64 = sub_100064834();
    v116 = v63;
    v117 = v64;
    v104 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v48);
    v65 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
    v65(v54, v52, v48);
    v66 = *(void (**)(char *, uint64_t))(v49 + 8);
    v66(v52, v48);
    v65(v52, v54, v48);
    v67 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v111);
    v68 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v109);
    v114 = v67;
    v115 = v68;
    v69 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v110);
    v70 = sub_1000648BC();
    v112 = v69;
    v113 = v70;
    v71 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v32);
    sub_10005DFF4((uint64_t)v52, v48, v32, v104, v71);
    v66(v52, v48);
    v66(v54, v48);
  }
  else
  {
    sub_1000604BC(v58, (uint64_t)v35);
    v72 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v111);
    v73 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v109);
    v136 = v72;
    v137 = v73;
    v74 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v110);
    v75 = sub_1000648BC();
    v134 = v74;
    v135 = v75;
    v76 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v32);
    v77 = v99;
    v78 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
    v79 = v100;
    v78(v100, v35, v32);
    v80 = *(void (**)(char *, uint64_t))(v77 + 8);
    v80(v35, v32);
    v78(v35, v79, v32);
    v60 = v103;
    v138 = v103;
    v139 = v108;
    v81 = swift_getOpaqueTypeConformance2(&v138, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
    v82 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v106);
    v132 = v81;
    v133 = v82;
    v83 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v107);
    v84 = sub_100064834();
    v130 = v83;
    v131 = v84;
    v85 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v48);
    sub_10005E0B8((uint64_t)v35, v48, v32, v85, v76);
    v80(v35, v32);
    v80(v79, v32);
  }
  v138 = v60;
  v139 = v108;
  v86 = swift_getOpaqueTypeConformance2(&v138, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
  v87 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v106);
  v128 = v86;
  v129 = v87;
  v88 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v107);
  v89 = sub_100064834();
  v126 = v88;
  v127 = v89;
  v90 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v48);
  v91 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v111);
  v92 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v109);
  v124 = v91;
  v125 = v92;
  v93 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v110);
  v94 = sub_1000648BC();
  v122 = v93;
  v123 = v94;
  v95 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v32);
  v120 = v90;
  v121 = v95;
  v96 = v102;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v102);
  v97 = v101;
  (*(void (**)(uint64_t, char *, uint64_t))(v101 + 16))(v105, v56, v96);
  return (*(uint64_t (**)(char *, uint64_t))(v97 + 8))(v56, v96);
}

uint64_t sub_10005F8EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata3;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t WitnessTable;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v39;
  uint64_t v40;
  void (**v41)(char *, void *);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unsigned __int8 *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  char *v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char v108;
  char *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t OpaqueTypeConformance2;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  char *v141;
  void (**v142)(char *, void *);
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  void *v169;
  char v170;
  uint64_t v171;

  v153 = a2;
  v138 = sub_100008EF4(&qword_100108F38);
  __chkstk_darwin(v138);
  v139 = (uint64_t *)((char *)&v133 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v140 = sub_100008EF4(&qword_100108F08);
  v136 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v135 = (char *)&v133 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_100108F00);
  __chkstk_darwin(v5);
  v141 = (char *)&v133 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for Optional(255, v150);
  v8 = sub_100008F80(&qword_100108EE0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v7, v8, v7, 0, 0);
  v10 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  v11 = type metadata accessor for HStack(255, v10);
  v12 = type metadata accessor for ModifiedContent(255, v11, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v7, v7, 0, 0);
  v14 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v14);
  v15 = type metadata accessor for HStack(255, v14);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _PaddingLayout);
  v17 = swift_getTupleTypeMetadata2(255, v8, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, v17);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v19 = type metadata accessor for VStack(255, v18);
  v20 = type metadata accessor for _ConditionalContent(255, v12, v19);
  v21 = type metadata accessor for _ConditionalContent(255, v20, &type metadata for EmptyView);
  v22 = type metadata accessor for _ConditionalContent(255, v21, &type metadata for Text);
  v23 = type metadata accessor for Optional(255, v22);
  v24 = sub_100008F80(&qword_100108EF0);
  v25 = sub_100008F80(&qword_100108EF8);
  v26 = swift_getTupleTypeMetadata3(255, v23, v24, v25, 0, 0);
  v27 = type metadata accessor for TupleView(255, v26);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v27);
  v144 = (char *)v27;
  v143 = WitnessTable;
  v29 = type metadata accessor for VStack(0, v27);
  v145 = *(char **)(v29 - 8);
  v30 = __chkstk_darwin(v29);
  v142 = (void (**)(char *, void *))((char *)&v133 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v30);
  v146 = (char *)&v133 - v32;
  v33 = sub_100008F80(&qword_100108EE8);
  v34 = swift_getTupleTypeMetadata2(255, v23, v33, 0, 0);
  v35 = type metadata accessor for TupleView(255, v34);
  v137 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v35);
  v36 = type metadata accessor for VStack(255, v35);
  v37 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v36);
  v168 = (void *)v36;
  v169 = (void *)v37;
  v157 = (void *)v37;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v168, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 0);
  v39 = type metadata accessor for _ConditionalContent(0, OpaqueTypeMetadata2, v29);
  v149 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v148 = (char *)&v133 - v40;
  v151 = swift_checkMetadataState(0, v36);
  v41 = *(void (***)(char *, void *))(v151 - 8);
  v42 = __chkstk_darwin(v151);
  v44 = (char *)&v133 - v43;
  v147 = OpaqueTypeMetadata2;
  v45 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v46 = __chkstk_darwin(v42);
  v48 = (char *)&v133 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v50 = (char *)&v133 - v49;
  v152 = v5;
  v51 = type metadata accessor for _ConditionalContent(0, v39, v5);
  v52 = v154;
  v53 = __chkstk_darwin(v51);
  v56 = (char *)&v133 - v55;
  v57 = (unsigned __int8 *)(v52 + *(int *)(v54 + 40));
  v58 = *v57;
  v155 = v59;
  v156 = v53;
  if ((v58 - 1) >= 2)
  {
    v142 = v41;
    v143 = v45;
    v144 = v48;
    v134 = v50;
    v145 = v56;
    v146 = (char *)v29;
    if (v58)
    {
      v97 = v54;
      v98 = sub_10005E3B8(v54);
      v100 = v99;
      swift_bridgeObjectRelease(v99);
      v101 = HIBYTE(v100) & 0xF;
      if ((v100 & 0x2000000000000000) == 0)
        v101 = v98 & 0xFFFFFFFFFFFFLL;
      if (v101)
      {
        v102 = sub_1000625A0(v97);
        v104 = (uint64_t)v103;
        v106 = v105;
        v168 = (void *)v102;
        v169 = v103;
        v108 = v107 & 1;
        v170 = v107 & 1;
        v171 = v105;
        v109 = v135;
        View.accessibilityIdentifier(key:location:)(11, 0, 14, 2, &type metadata for Text, &protocol witness table for Text);
        sub_1000130C4(v102, v104, v108);
        swift_bridgeObjectRelease(v106);
        v110 = v136;
        v111 = v139;
        v112 = v140;
        (*(void (**)(uint64_t *, char *, uint64_t))(v136 + 16))(v139, v109, v140);
        swift_storeEnumTagMultiPayload(v111, v138, 0);
        v168 = &type metadata for Text;
        v169 = &protocol witness table for Text;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
        v114 = (uint64_t)v141;
        _ConditionalContent<>.init(storage:)(v111, v112, &type metadata for Text, OpaqueTypeConformance2, &protocol witness table for Text);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v109, v112);
      }
      else
      {
        v115 = sub_1000626AC(v97);
        v116 = v139;
        *v139 = v115;
        v116[1] = v117;
        *((_BYTE *)v116 + 16) = v118 & 1;
        v116[3] = v119;
        swift_storeEnumTagMultiPayload(v116, v138, 1);
        v168 = &type metadata for Text;
        v169 = &protocol witness table for Text;
        v120 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
        v114 = (uint64_t)v141;
        _ConditionalContent<>.init(storage:)(v116, v140, &type metadata for Text, v120, &protocol witness table for Text);
      }
      v121 = v152;
      v76 = v153;
      v29 = (uint64_t)v146;
      v77 = v157;
      v78 = (void *)v151;
      v168 = (void *)v151;
      v169 = v157;
      v122 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
      v123 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v29);
      v166 = v122;
      v167 = v123;
      v124 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v39);
      v125 = sub_100064834();
      v56 = v145;
      sub_10005E0B8(v114, v39, v121, v124, v125);
      sub_1000135A0(v114, &qword_100108F00);
    }
    else
    {
      v79 = *((_QWORD *)v57 + 7);
      v80 = __chkstk_darwin(v53);
      v82 = *(_QWORD *)(v81 + 24);
      *(&v133 - 4) = v83;
      *(&v133 - 3) = v82;
      *(&v133 - 2) = v52;
      v84 = static HorizontalAlignment.center.getter(v80);
      v85 = swift_checkMetadataState(0, v35);
      VStack.init(alignment:spacing:content:)(v84, v79, 0, sub_100064964, &v133 - 6, v85, v137);
      v86 = (uint64_t)v144;
      v78 = (void *)v151;
      v77 = v157;
      View.accessibilityIdentifier(key:location:)(10, 0, 14, 2, v151, v157);
      v142[1](v44, v78);
      v168 = v78;
      v169 = v77;
      v87 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
      v88 = v143;
      v89 = *(void (**)(char *, uint64_t, uint64_t))(v143 + 16);
      v90 = v134;
      v91 = v147;
      v89(v134, v86, v147);
      v92 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
      v92(v86, v91);
      v89((char *)v86, (uint64_t)v90, v91);
      v29 = (uint64_t)v146;
      v93 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v146);
      v94 = (uint64_t)v148;
      sub_10005DFF4(v86, v91, v29, v87, v93);
      v92(v86, v91);
      v158 = v87;
      v159 = v93;
      v95 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v39);
      v96 = sub_100064834();
      v56 = v145;
      sub_10005DFF4(v94, v39, v152, v95, v96);
      (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v94, v39);
      v92((uint64_t)v134, v91);
      v76 = v153;
    }
  }
  else
  {
    v60 = *((_QWORD *)v57 + 7);
    v61 = __chkstk_darwin(v53);
    v63 = *(_QWORD *)(v62 + 24);
    *(&v133 - 4) = v150;
    *(&v133 - 3) = v63;
    *(&v133 - 2) = v52;
    v64 = static HorizontalAlignment.center.getter(v61);
    v65 = (uint64_t)v142;
    VStack.init(alignment:spacing:content:)(v64, v60, 0, sub_100064958, &v133 - 6, v144, v143);
    v66 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v29);
    v67 = v145;
    v68 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v145 + 2);
    v69 = v146;
    v68(v146, v65, v29);
    v70 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v67 + 1);
    v70(v65, v29);
    v68((char *)v65, (uint64_t)v69, v29);
    v71 = v151;
    v168 = (void *)v151;
    v169 = v157;
    v72 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
    v73 = (uint64_t)v148;
    sub_10005E0B8(v65, v147, v29, v72, v66);
    v70(v65, v29);
    v160 = v72;
    v161 = v66;
    v74 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v39);
    v75 = sub_100064834();
    sub_10005DFF4(v73, v39, v152, v74, v75);
    (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v73, v39);
    v70((uint64_t)v69, v29);
    v76 = v153;
    v77 = v157;
    v78 = (void *)v71;
  }
  v168 = v78;
  v169 = v77;
  v126 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
  v127 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v29);
  v164 = v126;
  v165 = v127;
  v128 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v39);
  v129 = sub_100064834();
  v162 = v128;
  v163 = v129;
  v130 = v156;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v156);
  v131 = v155;
  (*(void (**)(uint64_t, char *, uint64_t))(v155 + 16))(v76, v56, v130);
  return (*(uint64_t (**)(char *, uint64_t))(v131 + 8))(v56, v130);
}

uint64_t sub_1000604BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata3;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t WitnessTable;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  char *v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char v111;
  char *v112;
  uint64_t OpaqueTypeConformance2;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  void *v157;
  char v158;
  uint64_t v159;

  v142 = a1;
  v141 = a2;
  v128 = sub_100008EF4(&qword_100108F68);
  __chkstk_darwin(v128);
  v129 = (char *)&v127 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100108F08);
  v130 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v127 = (char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008EF4(&qword_100108F10);
  __chkstk_darwin(v6);
  v132 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = *(char **)(a1 + 16);
  v8 = type metadata accessor for Optional(255, v139);
  v9 = sub_100008F80(&qword_100108EE0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v8, v9, v8, 0, 0);
  v11 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v11);
  v12 = type metadata accessor for HStack(255, v11);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v8, v8, 0, 0);
  v15 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v15);
  v16 = type metadata accessor for HStack(255, v15);
  v17 = type metadata accessor for ModifiedContent(255, v16, &type metadata for _PaddingLayout);
  v18 = swift_getTupleTypeMetadata2(255, v9, v17, 0, 0);
  v19 = type metadata accessor for TupleView(255, v18);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v19);
  v20 = type metadata accessor for VStack(255, v19);
  v21 = type metadata accessor for _ConditionalContent(255, v13, v20);
  v22 = type metadata accessor for _ConditionalContent(255, v21, &type metadata for EmptyView);
  v23 = type metadata accessor for _ConditionalContent(255, v22, &type metadata for Text);
  v24 = type metadata accessor for Optional(255, v23);
  v25 = sub_100008F80(&qword_100108EF0);
  v26 = swift_getTupleTypeMetadata3(255, v24, v25, v4, 0, 0);
  v27 = type metadata accessor for TupleView(255, v26);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v27);
  v133 = v27;
  v134 = (char *)WitnessTable;
  v29 = type metadata accessor for VStack(0, v27);
  v135 = *(_QWORD *)(v29 - 8);
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v127 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v136 = (char *)&v127 - v33;
  v131 = v4;
  v34 = swift_getTupleTypeMetadata2(255, v24, v4, 0, 0);
  v35 = type metadata accessor for TupleView(255, v34);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v35);
  v37 = type metadata accessor for VStack(255, v35);
  v38 = type metadata accessor for _ConditionalContent(0, v37, v29);
  v138 = *(_QWORD *)(v38 - 8);
  v39 = __chkstk_darwin(v38);
  v137 = (char *)&v127 - v40;
  v41 = *(_QWORD *)(v37 - 8);
  v42 = __chkstk_darwin(v39);
  v44 = (char *)&v127 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v46 = (char *)&v127 - v45;
  v140 = v6;
  v47 = type metadata accessor for _ConditionalContent(0, v38, v6);
  v48 = v143;
  v49 = __chkstk_darwin(v47);
  v52 = (char *)&v127 - v51;
  v53 = &v48[*(int *)(v50 + 40)];
  v54 = *v53;
  v144 = v55;
  v145 = v49;
  if ((v54 - 1) >= 2)
  {
    v133 = v41;
    v134 = v52;
    v135 = v37;
    v136 = (char *)v29;
    if (v54)
    {
      v88 = v50;
      v89 = sub_10005E3B8(v50);
      v91 = v90;
      swift_bridgeObjectRelease(v90);
      v92 = HIBYTE(v91) & 0xF;
      if ((v91 & 0x2000000000000000) == 0)
        v92 = v89 & 0xFFFFFFFFFFFFLL;
      if (v92)
      {
        v93 = sub_1000625A0(v88);
        v95 = (uint64_t)v94;
        v97 = v96;
        v156 = (void *)v93;
        v157 = v94;
        v99 = v98 & 1;
        v158 = v98 & 1;
        v159 = v96;
        v100 = v127;
        View.accessibilityIdentifier(key:location:)(10, 0, 14, 2, &type metadata for Text, &protocol witness table for Text);
        v101 = v100;
        sub_1000130C4(v93, v95, v99);
        swift_bridgeObjectRelease(v97);
        v102 = v130;
        v103 = v129;
        v104 = v131;
        (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v129, v100, v131);
        swift_storeEnumTagMultiPayload(v103, v128, 0);
      }
      else
      {
        v105 = sub_100063854(v88);
        v107 = (uint64_t)v106;
        v109 = v108;
        v156 = (void *)v105;
        v157 = v106;
        v111 = v110 & 1;
        v158 = v110 & 1;
        v159 = v108;
        v112 = v127;
        View.accessibilityIdentifier(key:location:)(10, 0, 14, 2, &type metadata for Text, &protocol witness table for Text);
        v101 = v112;
        sub_1000130C4(v105, v107, v111);
        swift_bridgeObjectRelease(v109);
        v102 = v130;
        v103 = v129;
        v104 = v131;
        (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v129, v112, v131);
        swift_storeEnumTagMultiPayload(v103, v128, 1);
      }
      v156 = &type metadata for Text;
      v157 = &protocol witness table for Text;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v156, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
      v114 = (uint64_t)v132;
      _ConditionalContent<>.init(storage:)(v103, v104, v104, OpaqueTypeConformance2, OpaqueTypeConformance2);
      v115 = v140;
      (*(void (**)(char *, uint64_t))(v102 + 8))(v101, v104);
      v37 = v135;
      v116 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v135);
      v72 = (uint64_t)v136;
      v117 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v136);
      v154 = v116;
      v155 = v117;
      v118 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v38);
      v119 = sub_1000648BC();
      v57 = v134;
      sub_10005E0B8(v114, v38, v115, v118, v119);
      sub_1000135A0(v114, &qword_100108F10);
    }
    else
    {
      v73 = *((_QWORD *)v53 + 7);
      v74 = __chkstk_darwin(v49);
      v76 = *(char **)(v75 + 24);
      *(&v127 - 4) = v77;
      *(&v127 - 3) = v76;
      *(&v127 - 2) = v48;
      v78 = static HorizontalAlignment.center.getter(v74);
      VStack.init(alignment:spacing:content:)(v78, v73, 0, sub_100064B68, &v127 - 6, v35, v36);
      v37 = v135;
      v79 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v135);
      v80 = v133;
      v81 = *(void (**)(char *, char *, uint64_t))(v133 + 16);
      v82 = v46;
      v81(v46, v44, v37);
      v83 = *(void (**)(char *, uint64_t))(v80 + 8);
      v83(v44, v37);
      v81(v44, v82, v37);
      v72 = (uint64_t)v136;
      v84 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v136);
      v85 = (uint64_t)v137;
      sub_10005DFF4((uint64_t)v44, v37, v72, v79, v84);
      v83(v44, v37);
      v146 = v79;
      v147 = v84;
      v86 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v38);
      v87 = sub_1000648BC();
      v57 = v134;
      sub_10005DFF4(v85, v38, v140, v86, v87);
      (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v85, v38);
      v83(v82, v37);
    }
    v71 = v141;
  }
  else
  {
    v56 = *((_QWORD *)v53 + 7);
    v57 = v52;
    v58 = __chkstk_darwin(v49);
    v60 = *(char **)(v59 + 24);
    *(&v127 - 4) = v139;
    *(&v127 - 3) = v60;
    *(&v127 - 2) = v48;
    v61 = static HorizontalAlignment.center.getter(v58);
    VStack.init(alignment:spacing:content:)(v61, v56, 0, sub_100064B5C, &v127 - 6, v133, v134);
    v62 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v29);
    v63 = v135;
    v64 = *(void (**)(char *, char *, uint64_t))(v135 + 16);
    v65 = v136;
    v64(v136, v32, v29);
    v66 = *(void (**)(char *, uint64_t))(v63 + 8);
    v66(v32, v29);
    v64(v32, v65, v29);
    v67 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v37);
    v68 = (uint64_t)v137;
    sub_10005E0B8((uint64_t)v32, v37, v29, v67, v62);
    v66(v32, v29);
    v148 = v67;
    v149 = v62;
    v69 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v38);
    v70 = sub_1000648BC();
    sub_10005DFF4(v68, v38, v140, v69, v70);
    (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v68, v38);
    v66(v65, v29);
    v71 = v141;
    v72 = v29;
  }
  v120 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v37);
  v121 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v72);
  v152 = v120;
  v153 = v121;
  v122 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v38);
  v123 = sub_1000648BC();
  v150 = v122;
  v151 = v123;
  v124 = v145;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v145);
  v125 = v144;
  (*(void (**)(uint64_t, char *, uint64_t))(v144 + 16))(v71, v57, v124);
  return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v57, v124);
}

uint64_t sub_100060F78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata3;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t WitnessTable;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD v90[2];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char *v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103[11];
  char *v104;
  char v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;

  v84 = a4;
  v85 = a3;
  v6 = sub_100008EF4(&qword_100108550);
  __chkstk_darwin(v6);
  v80 = (uint64_t)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for LegibilityWeight(0);
  v76 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v83 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DynamicTypeSize(0);
  v81 = *(_QWORD *)(v9 - 8);
  v82 = v9;
  __chkstk_darwin(v9);
  v77 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = a2;
  v11 = type metadata accessor for Optional(255, a2);
  v12 = sub_100008F80(&qword_100108EE0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v11, v12, v11, 0, 0);
  v14 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v14);
  v87 = type metadata accessor for HStack(255, v14);
  v15 = type metadata accessor for ModifiedContent(255, v87, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v11, v11, 0, 0);
  v17 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v17);
  v18 = type metadata accessor for HStack(255, v17);
  v19 = type metadata accessor for ModifiedContent(255, v18, &type metadata for _PaddingLayout);
  v20 = swift_getTupleTypeMetadata2(255, v12, v19, 0, 0);
  v21 = type metadata accessor for TupleView(255, v20);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v21);
  v22 = type metadata accessor for VStack(255, v21);
  v23 = type metadata accessor for _ConditionalContent(255, v15, v22);
  v78 = type metadata accessor for _ConditionalContent(255, v23, &type metadata for EmptyView);
  v86 = type metadata accessor for _ConditionalContent(255, v78, &type metadata for Text);
  v24 = type metadata accessor for Optional(0, v86);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v68 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v68 - v29;
  v32 = type metadata accessor for SportsWidgetGenericClockView(0, a2, v85, v31);
  sub_1000615B8(v32, v28);
  v103[9] = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v87);
  v103[10] = (uint64_t)&protocol witness table for _PaddingLayout;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v22);
  v103[7] = WitnessTable;
  v103[8] = v34;
  v103[5] = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v23);
  v103[6] = (uint64_t)&protocol witness table for EmptyView;
  v103[3] = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v78);
  v103[4] = (uint64_t)&protocol witness table for Text;
  v103[2] = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v86);
  v74 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v24);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
  v87 = (uint64_t)v30;
  v71 = v35;
  v35((uint64_t)v30, (uint64_t)v28, v24);
  v36 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8);
  v37 = v76;
  v78 = (uint64_t)v28;
  v86 = v24;
  v75 = v36;
  v38 = v36((uint64_t)v28, v24);
  v39 = static Alignment.center.getter(v38);
  v69 = v40;
  v70 = v39;
  sub_10006241C(v73, v85, v41, (uint64_t)&v91);
  v85 = v91;
  v73 = v92;
  v72 = v93;
  v42 = v94;
  v43 = (_QWORD *)(a1 + *(int *)(v32 + 44));
  v44 = (void *)v43[5];
  v68 = v43[4];
  v45 = v43[6];
  v46 = (void *)v43[7];
  v47 = v77;
  sub_10009FD4C((uint64_t)v77);
  v48 = v80;
  sub_10009FF0C(v80);
  v49 = v79;
  v50 = v48;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v48, 1, v79) == 1)
  {
    v51 = (uint64_t)v83;
    (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v83, enum case for LegibilityWeight.regular(_:), v49);
    sub_1000135A0(v50, &qword_100108550);
  }
  else
  {
    v51 = (uint64_t)v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v83, v50, v49);
  }
  v52 = sub_10007B7A8(v68, v44, v45, v46, v47, v51);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v51, v49);
  v53 = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v47, v82);
  v54 = static Alignment.center.getter(v53);
  _FrameLayout.init(width:height:alignment:)(&v104, *(_QWORD *)&v52, 0, 0, 1, v54, v55);
  v56 = v105;
  v82 = v106;
  v83 = v104;
  v57 = v107;
  v58 = v108;
  v59 = v109;
  v60 = v78;
  v71(v78, v87, v86);
  v91 = v70;
  v92 = v69;
  v61 = v85;
  v62 = v73;
  v93 = v85;
  v94 = v73;
  v63 = v72;
  v95 = v72;
  v96 = v42;
  v97 = v83;
  v98 = v56;
  v99 = v82;
  v100 = v57;
  v101 = v58;
  v102 = v59;
  v103[0] = v60;
  v103[1] = (uint64_t)&v91;
  sub_10003258C(v85, v73, v72);
  swift_bridgeObjectRetain(v42);
  v64 = v86;
  v90[0] = v86;
  v90[1] = sub_100008EF4(&qword_100108EE8);
  v88 = v74;
  v89 = sub_100064970();
  sub_10005E17C(v103, 2uLL, (uint64_t)v90);
  sub_1000130C4(v61, v62, v63);
  swift_bridgeObjectRelease(v42);
  v65 = v75;
  v75(v87, v64);
  v66 = v96;
  sub_1000130C4(v93, v94, v95);
  swift_bridgeObjectRelease(v66);
  return v65(v60, v64);
}

uint64_t sub_1000615B8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata3;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  int v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  char *v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(char *, uint64_t, uint64_t);
  char *v133;
  void (*v134)(uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  void (*v155)(char *, char *, uint64_t);
  uint64_t v156;
  void (*v157)(char *, uint64_t);
  uint64_t v158;
  uint64_t v159;
  uint64_t v161;
  uint64_t v162;
  uint64_t (*v163)(char *, uint64_t, uint64_t);
  uint64_t WitnessTable;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  uint64_t v246;
  void *v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;

  v192 = a2;
  v3 = sub_100008F80(&qword_100108EE0);
  v187 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for Optional(255, v187);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v4, v4, 0, 0);
  v6 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v6);
  v7 = type metadata accessor for HStack(255, v6);
  v8 = type metadata accessor for ModifiedContent(255, v7, &type metadata for _PaddingLayout);
  v9 = swift_getTupleTypeMetadata2(255, v3, v8, 0, 0);
  v10 = type metadata accessor for TupleView(255, v9);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  v165 = v10;
  v11 = type metadata accessor for VStack(0, v10);
  v166 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v167 = (char *)&v161 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v168 = (char *)&v161 - v14;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v4, v3, v4, 0, 0);
  v16 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v169 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v16);
  v170 = v16;
  v17 = type metadata accessor for HStack(255, v16);
  v18 = type metadata accessor for ModifiedContent(255, v17, &type metadata for _PaddingLayout);
  v197 = v11;
  v19 = type metadata accessor for _ConditionalContent(0, v18, v11);
  v182 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v181 = (char *)&v161 - v21;
  v22 = v17;
  v173 = *(_QWORD *)(v17 - 8);
  v23 = __chkstk_darwin(v20);
  v171 = (char *)&v161 - v24;
  v200 = v18;
  v174 = *(_QWORD *)(v18 - 8);
  v25 = __chkstk_darwin(v23);
  v175 = (char *)&v161 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v172 = (char *)&v161 - v28;
  __chkstk_darwin(v27);
  v176 = (char *)&v161 - v29;
  v199 = v30;
  v31 = type metadata accessor for _ConditionalContent(0, v30, &type metadata for EmptyView);
  v184 = *(_QWORD *)(v31 - 8);
  v32 = __chkstk_darwin(v31);
  v183 = (char *)&v161 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v185 = (char *)&v161 - v35;
  v186 = *(_QWORD *)(a1 - 8);
  v36 = __chkstk_darwin(v34);
  v193 = (char *)&v161 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = v4;
  v38 = *(_QWORD *)(v4 - 8);
  v39 = __chkstk_darwin(v36);
  v180 = (char *)&v161 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v42 = (char *)&v161 - v41;
  v43 = type metadata accessor for _ConditionalContent(0, v31, &type metadata for Text);
  v44 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v194 = (char *)&v161 - v45;
  v46 = type metadata accessor for Optional(0, v43);
  v189 = *(_QWORD *)(v46 - 8);
  v47 = __chkstk_darwin(v46);
  v49 = (char *)&v161 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __chkstk_darwin(v47);
  v190 = (char *)&v161 - v51;
  v52 = a1;
  v53 = v195 + *(int *)(a1 + 44);
  v54 = *(_QWORD *)(v53 + 24);
  v198 = v22;
  v196 = v31;
  v191 = v50;
  if (v54)
  {
    v178 = v44;
    v179 = v49;
    v177 = v43;
    v162 = *(_QWORD *)(v53 + 16);
    v55 = v52;
    v56 = v195;
    v57 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
    v58 = v188;
    v57(v42, v195 + *(int *)(v52 + 48), v188);
    v59 = v187;
    v163 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v187 - 8) + 48);
    v60 = v163(v42, 1, v187);
    v61 = *(void (**)(char *, uint64_t))(v38 + 8);
    swift_bridgeObjectRetain(v54);
    v61(v42, v58);
    v62 = v186;
    (*(void (**)(char *, uint64_t, uint64_t))(v186 + 16))(v193, v56, v55);
    if (v60 == 1)
    {
      v63 = v193;
      v64 = v180;
      v65 = v188;
      v57(v180, (uint64_t)&v193[*(int *)(v55 + 52)], v188);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v55);
      v66 = v59;
      v67 = v163(v64, 1, v59);
      v68 = v64;
      v69 = v195;
      v61(v68, v65);
      v70 = v197;
      if (v67 == 1)
      {
        v233 = v162;
        v234 = v54;
        v71 = sub_100013080();
        v72 = Text.init<A>(_:)(&v233, &type metadata for String, v71);
        v74 = v73;
        v76 = v75;
        v233 = v72;
        v234 = v73;
        v78 = v77 & 1;
        v235 = v77 & 1;
        v236 = v75;
        v79 = v198;
        v231 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v198);
        v232 = &protocol witness table for _PaddingLayout;
        v80 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v200);
        v81 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v70);
        v229 = v80;
        v230 = v81;
        v82 = v199;
        v227 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v199);
        v228 = &protocol witness table for EmptyView;
        v83 = v196;
        v84 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v196);
        sub_10005E0B8((uint64_t)&v233, v83, (uint64_t)&type metadata for Text, v84, (uint64_t)&protocol witness table for Text);
        v85 = v72;
        v86 = v82;
        v87 = v74;
        v88 = v79;
        v89 = v83;
        sub_1000130C4(v85, v87, v78);
        swift_bridgeObjectRelease(v76);
        v43 = v177;
LABEL_15:
        v149 = v178;
        v49 = v179;
        v225 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v88);
        v226 = &protocol witness table for _PaddingLayout;
        v150 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v200);
        v91 = v197;
        v151 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v197);
        v223 = v150;
        v224 = v151;
        v221 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v86);
        v222 = &protocol witness table for EmptyView;
        v219 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v89);
        v220 = &protocol witness table for Text;
        swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v43);
        v152 = v194;
        (*(void (**)(char *, char *, uint64_t))(v149 + 16))(v49, v194, v43);
        (*(void (**)(char *, uint64_t))(v149 + 8))(v152, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v149 + 56))(v49, 0, 1, v43);
        goto LABEL_16;
      }
    }
    else
    {
      v69 = v56;
      v66 = v59;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v193, v55);
      v70 = v197;
    }
    v93 = swift_bridgeObjectRelease(v54);
    v94 = (unsigned __int8 *)(v69 + *(int *)(v55 + 40));
    v95 = *v94;
    v86 = v199;
    if (v95 >= 2)
    {
      v117 = v70;
      v122 = v200;
      v107 = v185;
      if (v95 == 2)
      {
        v123 = __chkstk_darwin(v93);
        v124 = v86;
        v126 = *(_QWORD *)(v125 + 24);
        *(&v161 - 4) = v66;
        *(&v161 - 3) = v126;
        *(&v161 - 2) = v127;
        v128 = static HorizontalAlignment.center.getter(v123);
        v129 = (uint64_t)v167;
        VStack.init(alignment:spacing:content:)(v128, 0, 1, sub_1000649F4, &v161 - 6, v165, WitnessTable);
        v130 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v70);
        v131 = v166;
        v132 = *(void (**)(char *, uint64_t, uint64_t))(v166 + 16);
        v133 = v168;
        v132(v168, v129, v117);
        v134 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
        v134(v129, v117);
        v132((char *)v129, (uint64_t)v133, v117);
        v207 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v198);
        v208 = &protocol witness table for _PaddingLayout;
        v135 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v122);
        v136 = v122;
        v137 = (uint64_t)v181;
        sub_10005E0B8(v129, v136, v117, v135, v130);
        v134(v129, v117);
        v205 = v135;
        v206 = v130;
        v138 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v124);
        v107 = v185;
        sub_10005DFF4(v137, v124, (uint64_t)&type metadata for EmptyView, v138, (uint64_t)&protocol witness table for EmptyView);
        v86 = v124;
        (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v137, v124);
        v134((uint64_t)v133, v117);
      }
      else
      {
        v217 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v198);
        v218 = &protocol witness table for _PaddingLayout;
        v139 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v122);
        v140 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v117);
        v215 = v139;
        v216 = v140;
        v141 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v86);
        sub_10005E0B8(v141, v86, (uint64_t)&type metadata for EmptyView, v141, (uint64_t)&protocol witness table for EmptyView);
      }
    }
    else
    {
      v96 = static VerticalAlignment.center.getter(v93);
      v97 = __chkstk_darwin(v96);
      v98 = *(_QWORD *)(v55 + 24);
      *(&v161 - 4) = v66;
      *(&v161 - 3) = v98;
      *(&v161 - 2) = v69;
      v99 = v171;
      v100 = HStack.init(alignment:spacing:content:)(v97);
      v101 = static Edge.Set.horizontal.getter(v100);
      v102 = Edge.Set.init(rawValue:)(0);
      v103 = Edge.Set.init(rawValue:)(v102);
      v104 = Edge.Set.init(rawValue:)(v103 & v101);
      v105 = v200;
      v106 = v198;
      v107 = v185;
      if (v104 != v101)
        v102 = Edge.Set.init(rawValue:)(v102 | v101);
      v108 = *((_QWORD *)v94 + 9);
      v109 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v106);
      v110 = v172;
      View.padding(_:_:)(v102, v108, 0, v106, v109);
      (*(void (**)(char *, uint64_t))(v173 + 8))(v99, v106);
      v203 = v109;
      v204 = &protocol witness table for _PaddingLayout;
      v111 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v105);
      v112 = v174;
      v113 = *(void (**)(char *, char *, uint64_t))(v174 + 16);
      v114 = v176;
      v113(v176, v110, v105);
      v115 = *(void (**)(char *, uint64_t))(v112 + 8);
      v115(v110, v105);
      v116 = (uint64_t)v175;
      v113(v175, v114, v105);
      v117 = v197;
      v118 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v197);
      v119 = (uint64_t)v181;
      sub_10005DFF4(v116, v105, v117, v111, v118);
      v115((char *)v116, v105);
      v201 = v111;
      v202 = v118;
      v120 = v199;
      v121 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v199);
      sub_10005DFF4(v119, v120, (uint64_t)&type metadata for EmptyView, v121, (uint64_t)&protocol witness table for EmptyView);
      v86 = v120;
      (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v119, v120);
      v115(v114, v105);
    }
    v43 = v177;
    v142 = v198;
    v213 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v198);
    v214 = &protocol witness table for _PaddingLayout;
    v143 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v200);
    v144 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v117);
    v211 = v143;
    v212 = v144;
    v209 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v86);
    v210 = &protocol witness table for EmptyView;
    v89 = v196;
    v145 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v196);
    v147 = (uint64_t)v183;
    v146 = v184;
    (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v183, v107, v89);
    sub_10005DFF4(v147, v89, (uint64_t)&type metadata for Text, v145, (uint64_t)&protocol witness table for Text);
    v148 = *(void (**)(uint64_t, uint64_t))(v146 + 8);
    v148(v147, v89);
    v148((uint64_t)v107, v89);
    v88 = v142;
    goto LABEL_15;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v49, 1, 1, v43);
  v252 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v22);
  v253 = &protocol witness table for _PaddingLayout;
  v90 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v200);
  v91 = v197;
  v92 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v197);
  v250 = v90;
  v251 = v92;
  v248 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v199);
  v249 = &protocol witness table for EmptyView;
  v246 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v31);
  v247 = &protocol witness table for Text;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v43);
LABEL_16:
  v153 = v189;
  v154 = v190;
  v155 = *(void (**)(char *, char *, uint64_t))(v189 + 16);
  v156 = v191;
  v155(v190, v49, v191);
  v157 = *(void (**)(char *, uint64_t))(v153 + 8);
  v157(v49, v156);
  v244 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v198);
  v245 = &protocol witness table for _PaddingLayout;
  v158 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v200);
  v159 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v91);
  v242 = v158;
  v243 = v159;
  v240 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v199);
  v241 = &protocol witness table for EmptyView;
  v238 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v196);
  v239 = &protocol witness table for Text;
  v237 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v43);
  swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v156);
  v155(v192, v154, v156);
  return ((uint64_t (*)(char *, uint64_t))v157)(v154, v156);
}

uint64_t sub_10006241C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for SportsWidgetGenericClockView(0, a1, a2, a3);
  v5 = sub_1000625A0(v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = sub_1000626AC(v4);
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  v19 = static Text.+ infix(_:_:)(v5, v7, v11, v9, v12, v13, v18, v15);
  v38 = v20;
  v39 = v19;
  v40 = v21;
  v37 = v22 & 1;
  sub_1000130C4(v12, v14, v18);
  swift_bridgeObjectRelease(v16);
  sub_1000130C4(v5, v7, v11);
  swift_bridgeObjectRelease(v9);
  v23 = sub_1000627B0(v4);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v35 = static Text.+ infix(_:_:)(v39, v38, v37, v40, v23, v24, v29, v26);
  v36 = v30;
  v32 = v31;
  LOBYTE(v4) = v33;
  sub_1000130C4(v23, v25, v29);
  swift_bridgeObjectRelease(v27);
  sub_1000130C4(v39, v38, v37);
  result = swift_bridgeObjectRelease(v40);
  *(_QWORD *)a4 = v35;
  *(_QWORD *)(a4 + 8) = v32;
  *(_BYTE *)(a4 + 16) = v4 & 1;
  *(_QWORD *)(a4 + 24) = v36;
  return result;
}

uint64_t sub_1000625A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  v22[0] = sub_10005E3B8(a1);
  v22[1] = v3;
  v4 = sub_100013080();
  v5 = Text.init<A>(_:)(v22, &type metadata for String, v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = v1 + *(int *)(a1 + 40);
  v13 = Text.font(_:)(*(_QWORD *)(v12 + 16), v5, v6, v11, v8);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  sub_1000130C4(v5, v7, v11);
  swift_bridgeObjectRelease(v9);
  v20 = Text.foregroundColor(_:)(*(_QWORD *)(v12 + 8), v13, v15, v19, v17);
  sub_1000130C4(v13, v15, v19);
  swift_bridgeObjectRelease(v17);
  return v20;
}

uint64_t sub_1000626AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int *v10;
  _BYTE v12[16];

  v3 = sub_100008EF4(&qword_100105F48);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100008EF4(&qword_100105F40);
  __chkstk_darwin(v6);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = v1 + *(int *)(a1 + 44);
  v10 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
  sub_10001355C(v9 + v10[8], (uint64_t)v8, &qword_100105F40);
  sub_10001355C(v9 + v10[9], (uint64_t)v5, &qword_100105F48);
  return Text.init(timerInterval:pauseTime:countsDown:showsHours:)(v8, v5, *(unsigned __int8 *)(v9 + v10[10]), 0);
}

uint64_t sub_1000627B0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[2];

  v4[0] = sub_10005E410(a1);
  v4[1] = v1;
  v2 = sub_100013080();
  return Text.init<A>(_:)(v4, &type metadata for String, v2);
}

uint64_t sub_1000627EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata3;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char *v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  void (*v102)(char *, uint64_t);
  uint64_t (*v103)(uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  _QWORD v133[5];
  _QWORD v134[3];
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  char v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t WitnessTable;
  void *v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  char v158;
  __int128 v159;

  v131 = a3;
  v111 = a1;
  v128 = a4;
  v5 = sub_100008EF4(&qword_100108550);
  __chkstk_darwin(v5);
  v118 = (uint64_t)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LegibilityWeight(0);
  v120 = *(_QWORD *)(v7 - 8);
  v121 = v7;
  __chkstk_darwin(v7);
  v107 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for DynamicTypeSize(0);
  v106 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v132 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100008EF4(&qword_100108EF8);
  v126 = *(_QWORD *)(v108 - 8);
  v10 = __chkstk_darwin(v108);
  v127 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v122 = (char *)&v105 - v13;
  __chkstk_darwin(v12);
  v124 = (char *)&v105 - v14;
  v123 = sub_100008EF4(&qword_100108EF0);
  v15 = __chkstk_darwin(v123);
  v125 = (uint64_t)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v129 = (uint64_t)&v105 - v17;
  v18 = type metadata accessor for Optional(255, a2);
  v19 = sub_100008F80(&qword_100108EE0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v18, v19, v18, 0, 0);
  v21 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v21);
  v130 = type metadata accessor for HStack(255, v21);
  v22 = type metadata accessor for ModifiedContent(255, v130, &type metadata for _PaddingLayout);
  v114 = (uint64_t (*)(uint64_t, uint64_t))v22;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v18, v18, 0, 0);
  v24 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v24);
  v25 = type metadata accessor for HStack(255, v24);
  v26 = type metadata accessor for ModifiedContent(255, v25, &type metadata for _PaddingLayout);
  v27 = swift_getTupleTypeMetadata2(255, v19, v26, 0, 0);
  v28 = type metadata accessor for TupleView(255, v27);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v28);
  v29 = type metadata accessor for VStack(255, v28);
  v30 = type metadata accessor for _ConditionalContent(255, v22, v29);
  v115 = type metadata accessor for _ConditionalContent(255, v30, &type metadata for EmptyView);
  v116 = type metadata accessor for _ConditionalContent(255, v115, &type metadata for Text);
  v31 = type metadata accessor for Optional(0, v116);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v105 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v37 = (char *)&v105 - v36;
  v117 = a2;
  v39 = type metadata accessor for SportsWidgetGenericClockView(0, a2, v131, v38);
  v40 = v111;
  sub_1000615B8(v39, v35);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v130);
  v154 = &protocol witness table for _PaddingLayout;
  v41 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v114);
  v42 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v29);
  v151 = v41;
  v152 = v42;
  v149 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v30);
  v150 = &protocol witness table for EmptyView;
  v147 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v115);
  v148 = &protocol witness table for Text;
  v146 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v116);
  v113 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v31);
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
  v130 = (uint64_t)v37;
  v44 = v37;
  v45 = v39;
  v112 = v43;
  v43((uint64_t)v44, (uint64_t)v35, v31);
  v46 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8);
  v115 = (uint64_t)v35;
  v116 = v31;
  v114 = v46;
  v46((uint64_t)v35, v31);
  v47 = sub_10005E3B8(v39);
  v49 = v48;
  swift_bridgeObjectRelease(v48);
  v50 = HIBYTE(v49) & 0xF;
  if ((v49 & 0x2000000000000000) == 0)
    v50 = v47 & 0xFFFFFFFFFFFFLL;
  if (v50)
  {
    v51 = sub_1000625A0(v39);
    v53 = v52;
    v55 = v54;
    v135 = v51;
    v136 = v52;
    v57 = v56 & 1;
    LOBYTE(v137) = v56 & 1;
    v138 = v54;
    v58 = v129;
    View.accessibilityIdentifier(key:location:)(11, 0, 14, 2, &type metadata for Text, &protocol witness table for Text);
    sub_1000130C4(v51, v53, v57);
    swift_bridgeObjectRelease(v55);
    v59 = sub_100008EF4(&qword_100108F08);
    v60 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v58, 0, 1, v59);
  }
  else
  {
    v61 = sub_100008EF4(&qword_100108F08);
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v129, 1, 1, v61);
  }
  v105 = static Alignment.center.getter(v60);
  v109 = v62;
  sub_1000630C8(v117, v131, v63, (uint64_t)&v135);
  v64 = v135;
  v131 = v136;
  v65 = v40;
  v66 = v137;
  v67 = v138;
  v68 = v65 + *(int *)(v45 + 44);
  v69 = *(_QWORD *)(v68 + 48);
  v70 = *(void **)(v68 + 56);
  sub_10009FD4C((uint64_t)v132);
  v71 = v118;
  sub_10009FF0C(v118);
  v73 = v120;
  v72 = v121;
  v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v71, 1, v121);
  v117 = v67;
  v110 = v66;
  v75 = v64;
  if (v74 == 1)
  {
    v76 = v71;
    v77 = (uint64_t)v107;
    (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v107, enum case for LegibilityWeight.regular(_:), v72);
    sub_1000135A0(v76, &qword_100108550);
  }
  else
  {
    v78 = v71;
    v77 = (uint64_t)v107;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(v107, v78, v72);
  }
  v79 = v108;
  v81 = v105;
  v80 = v106;
  v82 = v70;
  v83 = v132;
  v84 = sub_10007B7A8(0, 0, v69, v82, v132, v77);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v77, v72);
  v85 = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v83, v119);
  v86 = static Alignment.center.getter(v85);
  _FrameLayout.init(width:height:alignment:)(&v155, *(_QWORD *)&v84, 0, 0, 1, v86, v87);
  v135 = v81;
  v136 = v109;
  v88 = v75;
  v137 = (char *)v75;
  v89 = v131;
  v138 = v131;
  LOBYTE(v81) = v110;
  v139 = v110;
  v90 = v117;
  v140 = v117;
  v141 = v155;
  v142 = v156;
  v143 = v157;
  v144 = v158;
  v145 = v159;
  v91 = (char *)sub_100008EF4(&qword_100108EE8);
  v132 = v91;
  v92 = sub_100064970();
  v93 = v122;
  View.accessibilityIdentifier(key:location:)(12, 0, 14, 2, v91, v92);
  sub_1000130C4(v88, v89, v81);
  swift_bridgeObjectRelease(v90);
  v94 = v126;
  v95 = v124;
  (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v124, v93, v79);
  v96 = v79;
  v98 = v115;
  v97 = v116;
  v112(v115, v130, v116);
  v135 = v98;
  v99 = v129;
  v100 = v125;
  sub_10001355C(v129, v125, &qword_100108EF0);
  v136 = v100;
  v101 = v127;
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v127, v95, v96);
  v137 = v101;
  v134[0] = v97;
  v134[1] = v123;
  v134[2] = v96;
  v133[2] = v113;
  v133[3] = sub_100064AD4();
  v133[0] = v132;
  v133[1] = v92;
  v133[4] = swift_getOpaqueTypeConformance2(v133, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
  sub_10005E17C(&v135, 3uLL, (uint64_t)v134);
  v102 = *(void (**)(char *, uint64_t))(v94 + 8);
  v102(v95, v96);
  sub_1000135A0(v99, &qword_100108EF0);
  v103 = v114;
  v114(v130, v97);
  v102(v101, v96);
  sub_1000135A0(v100, &qword_100108EF0);
  return v103(v98, v97);
}

uint64_t sub_1000630C8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t result;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v5 = type metadata accessor for SportsWidgetGenericClockView(0, a1, a2, a3);
  v6 = sub_1000626AC(v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = sub_1000627B0(v5);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  v20 = static Text.+ infix(_:_:)(v6, v8, v12, v10, v13, v14, v19, v16);
  v26 = v21;
  v27 = v22;
  v25 = v23;
  sub_1000130C4(v13, v15, v19);
  swift_bridgeObjectRelease(v17);
  sub_1000130C4(v6, v8, v12);
  result = swift_bridgeObjectRelease(v10);
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 16) = v25 & 1;
  *(_QWORD *)(a4 + 24) = v27;
  return result;
}

uint64_t sub_1000631C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata3;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t (*v76)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  void (*v85)(char *, char *, uint64_t);
  char *v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[4];
  _QWORD v97[2];
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t WitnessTable;
  void *v110;

  v88 = a3;
  v95 = a1;
  v93 = a4;
  v92 = sub_100008EF4(&qword_100108F08);
  v91 = *(_QWORD *)(v92 - 8);
  v5 = __chkstk_darwin(v92);
  v90 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v89 = (char *)&v78 - v7;
  v8 = type metadata accessor for Optional(255, a2);
  v9 = sub_100008F80(&qword_100108EE0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v8, v9, v8, 0, 0);
  v11 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v11);
  v87 = type metadata accessor for HStack(255, v11);
  v12 = type metadata accessor for ModifiedContent(255, v87, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v8, v8, 0, 0);
  v14 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v14);
  v15 = type metadata accessor for HStack(255, v14);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _PaddingLayout);
  v17 = swift_getTupleTypeMetadata2(255, v9, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, v17);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v19 = type metadata accessor for VStack(255, v18);
  v20 = type metadata accessor for _ConditionalContent(255, v12, v19);
  v21 = type metadata accessor for _ConditionalContent(255, v20, &type metadata for EmptyView);
  v22 = type metadata accessor for _ConditionalContent(255, v21, &type metadata for Text);
  v94 = type metadata accessor for Optional(0, v22);
  v23 = *(_QWORD *)(v94 - 8);
  v24 = __chkstk_darwin(v94);
  v26 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v78 - v27;
  v86 = (char *)&v78 - v27;
  v30 = type metadata accessor for SportsWidgetGenericClockView(0, a2, (uint64_t)v88, v29);
  sub_1000615B8(v30, v26);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v87);
  v110 = &protocol witness table for _PaddingLayout;
  v31 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v19);
  v107 = v31;
  v108 = v32;
  v105 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v20);
  v106 = &protocol witness table for EmptyView;
  v103 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v21);
  v104 = &protocol witness table for Text;
  v102 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v22);
  v33 = v94;
  v87 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v94);
  v85 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v84 = v26;
  v85(v28, v26, v33);
  v88 = *(void (**)(char *, uint64_t))(v23 + 8);
  v88(v26, v33);
  v83 = v30;
  v34 = sub_1000625A0(v30);
  v36 = v35;
  v38 = v37;
  v40 = v39 & 1;
  v41 = sub_100063854(v30);
  v43 = v42;
  v45 = v44;
  v47 = v46 & 1;
  v82 = static Text.+ infix(_:_:)(v34, v36, v40, v38, v41, v42, v47, v44);
  v81 = v48;
  v50 = v49;
  v79 = v49;
  v80 = v51 & 1;
  sub_1000130C4(v41, v43, v47);
  swift_bridgeObjectRelease(v45);
  sub_1000130C4(v34, v36, v40);
  swift_bridgeObjectRelease(v38);
  v52 = sub_1000627B0(v83);
  v54 = v53;
  v56 = v55;
  v58 = v57 & 1;
  v59 = v82;
  v60 = v81;
  LOBYTE(v47) = v80;
  v61 = static Text.+ infix(_:_:)(v82, v81, v80, v50, v52, v53, v58, v55);
  v63 = v62;
  v95 = v64;
  LOBYTE(v41) = v65 & 1;
  sub_1000130C4(v52, v54, v58);
  swift_bridgeObjectRelease(v56);
  sub_1000130C4(v59, v60, v47);
  swift_bridgeObjectRelease(v79);
  v98 = v61;
  v99 = v63;
  v100 = v41;
  v66 = v95;
  v101 = v95;
  v67 = v89;
  View.accessibilityIdentifier(key:location:)(10, 0, 14, 2, &type metadata for Text, &protocol witness table for Text);
  sub_1000130C4(v61, v63, v41);
  swift_bridgeObjectRelease(v66);
  v68 = (uint64_t)v84;
  v69 = v86;
  v70 = v94;
  v85(v84, v86, v94);
  v98 = v68;
  v71 = v91;
  v72 = v90;
  v73 = v92;
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v90, v67, v92);
  v99 = (uint64_t)v72;
  v97[0] = v70;
  v97[1] = v73;
  v74 = v73;
  v96[2] = v87;
  v96[0] = &type metadata for Text;
  v96[1] = &protocol witness table for Text;
  v96[3] = swift_getOpaqueTypeConformance2(v96, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
  sub_10005E17C(&v98, 2uLL, (uint64_t)v97);
  v75 = *(void (**)(char *, uint64_t))(v71 + 8);
  v75(v67, v74);
  v76 = (uint64_t (*)(uint64_t, uint64_t))v88;
  v88(v69, v70);
  v75(v72, v74);
  return v76(v68, v70);
}

uint64_t sub_100063854(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[2];

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 44));
  v3 = v2[1];
  v6[0] = *v2;
  v6[1] = v3;
  v4 = sub_100013080();
  swift_bridgeObjectRetain(v3);
  return Text.init<A>(_:)(v6, &type metadata for String, v4);
}

uint64_t sub_1000638AC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata3;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t (*v82)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[5];
  _QWORD v101[5];
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t WitnessTable;
  void *v114;

  v91 = a2;
  v95 = a3;
  v98 = sub_100008EF4(&qword_100108F08);
  v99 = *(_QWORD *)(v98 - 8);
  v4 = __chkstk_darwin(v98);
  v96 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v93 = (char *)&v84 - v6;
  v92 = sub_100008EF4(&qword_100108EF0);
  v7 = __chkstk_darwin(v92);
  v94 = (uint64_t)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v97 = (uint64_t)&v84 - v9;
  v10 = type metadata accessor for Optional(255, a1);
  v11 = sub_100008F80(&qword_100108EE0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v10, v11, v10, 0, 0);
  v13 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v13);
  v90 = type metadata accessor for HStack(255, v13);
  v14 = type metadata accessor for ModifiedContent(255, v90, &type metadata for _PaddingLayout);
  v88 = (uint64_t (*)(uint64_t, uint64_t))v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v10, v10, 0, 0);
  v16 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v16);
  v17 = type metadata accessor for HStack(255, v16);
  v18 = type metadata accessor for ModifiedContent(255, v17, &type metadata for _PaddingLayout);
  v19 = swift_getTupleTypeMetadata2(255, v11, v18, 0, 0);
  v20 = type metadata accessor for TupleView(255, v19);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v20);
  v21 = type metadata accessor for VStack(255, v20);
  v22 = type metadata accessor for _ConditionalContent(255, v14, v21);
  v23 = type metadata accessor for _ConditionalContent(255, v22, &type metadata for EmptyView);
  v89 = type metadata accessor for _ConditionalContent(255, v23, &type metadata for Text);
  v24 = type metadata accessor for Optional(0, v89);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v84 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v84 - v29;
  v32 = type metadata accessor for SportsWidgetGenericClockView(0, a1, v91, v31);
  sub_1000615B8(v32, v28);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v90);
  v114 = &protocol witness table for _PaddingLayout;
  v33 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v88);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v21);
  v111 = v33;
  v112 = v34;
  v109 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v22);
  v110 = &protocol witness table for EmptyView;
  v107 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v23);
  v108 = &protocol witness table for Text;
  v106 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v89);
  v87 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v24);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
  v89 = (uint64_t)v30;
  v86 = v35;
  v35((uint64_t)v30, (uint64_t)v28, v24);
  v36 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8);
  v90 = (uint64_t)v28;
  v91 = v24;
  v88 = v36;
  v36((uint64_t)v28, v24);
  v37 = sub_10005E3B8(v32);
  v39 = v38;
  swift_bridgeObjectRelease(v38);
  v40 = HIBYTE(v39) & 0xF;
  if ((v39 & 0x2000000000000000) == 0)
    v40 = v37 & 0xFFFFFFFFFFFFLL;
  if (v40)
  {
    v41 = sub_1000625A0(v32);
    v43 = v42;
    v45 = v44;
    v102 = v41;
    v103 = v42;
    v47 = v46 & 1;
    LOBYTE(v104) = v46 & 1;
    v105 = v44;
    v48 = v97;
    View.accessibilityIdentifier(key:location:)(11, 0, 14, 2, &type metadata for Text, &protocol witness table for Text);
    sub_1000130C4(v41, v43, v47);
    swift_bridgeObjectRelease(v45);
    v49 = 0;
    v50 = v48;
  }
  else
  {
    v49 = 1;
    v50 = v97;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56))(v50, v49, 1, v98);
  v51 = sub_100063854(v32);
  v53 = v52;
  v55 = v54;
  v57 = v56 & 1;
  v58 = sub_1000627B0(v32);
  v60 = v59;
  v62 = v61;
  v64 = v63 & 1;
  v84 = static Text.+ infix(_:_:)(v51, v53, v57, v55, v58, v59, v64, v61);
  v66 = v65;
  v85 = v67;
  v69 = v68 & 1;
  sub_1000130C4(v58, v60, v64);
  swift_bridgeObjectRelease(v62);
  sub_1000130C4(v51, v53, v57);
  swift_bridgeObjectRelease(v55);
  v70 = v84;
  v102 = v84;
  v103 = v66;
  LOBYTE(v104) = v69;
  v71 = v85;
  v105 = v85;
  v72 = v93;
  View.accessibilityIdentifier(key:location:)(12, 0, 14, 2, &type metadata for Text, &protocol witness table for Text);
  sub_1000130C4(v70, v66, v69);
  swift_bridgeObjectRelease(v71);
  v73 = v90;
  v74 = v89;
  v75 = v91;
  v86(v90, v89, v91);
  v102 = v73;
  v76 = v97;
  v77 = v94;
  sub_10001355C(v97, v94, &qword_100108EF0);
  v103 = v77;
  v78 = v99;
  v79 = v96;
  v80 = v98;
  (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v96, v72, v98);
  v104 = v79;
  v101[0] = v75;
  v101[1] = v92;
  v101[2] = v80;
  v100[2] = v87;
  v100[3] = sub_100064AD4();
  v100[0] = &type metadata for Text;
  v100[1] = &protocol witness table for Text;
  v100[4] = swift_getOpaqueTypeConformance2(v100, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
  sub_10005E17C(&v102, 3uLL, (uint64_t)v101);
  v81 = *(void (**)(char *, uint64_t))(v78 + 8);
  v81(v72, v80);
  sub_1000135A0(v76, &qword_100108EF0);
  v82 = v88;
  v88(v74, v75);
  v81(v79, v80);
  sub_1000135A0(v77, &qword_100108EF0);
  return v82(v73, v75);
}

uint64_t sub_10006402C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t WitnessTable;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[5];

  v60 = a4;
  v7 = type metadata accessor for Optional(255, a2);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v7, v7, 0, 0);
  v9 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v9);
  v10 = type metadata accessor for HStack(0, v9);
  v56 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&WitnessTable - v11;
  v13 = type metadata accessor for ModifiedContent(0, v10, &type metadata for _PaddingLayout);
  v57 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v59 = (char *)&WitnessTable - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&WitnessTable - v17;
  __chkstk_darwin(v16);
  v58 = (char *)&WitnessTable - v19;
  v51 = a3;
  v21 = type metadata accessor for SportsWidgetGenericClockView(0, a2, a3, v20);
  v22 = v21;
  v23 = a1 + *(int *)(v21 + 44);
  v24 = *(_QWORD *)(v23 + 24);
  if (v24)
  {
    v64 = *(_QWORD *)(v23 + 16);
    v65 = v24;
    v25 = sub_100013080();
    swift_bridgeObjectRetain(v24);
    v21 = Text.init<A>(_:)(&v64, &type metadata for String, v25);
    v54 = v26;
    v55 = v21;
    v52 = v27 & 1;
    v53 = v28;
  }
  else
  {
    v54 = 0;
    v55 = 0;
    v52 = 0;
    v53 = 0;
  }
  v29 = static VerticalAlignment.center.getter(v21);
  v30 = a1 + *(int *)(v22 + 40);
  v31 = __chkstk_darwin(v29);
  v32 = v51;
  *(&WitnessTable - 4) = a2;
  *(&WitnessTable - 3) = v32;
  *(&WitnessTable - 2) = a1;
  v33 = HStack.init(alignment:spacing:content:)(v31);
  v34 = static Edge.Set.horizontal.getter(v33);
  v35 = Edge.Set.init(rawValue:)(0);
  v36 = Edge.Set.init(rawValue:)(v35);
  if (Edge.Set.init(rawValue:)(v36 & v34) != v34)
    v35 = Edge.Set.init(rawValue:)(v35 | v34);
  v37 = *(_QWORD *)(v30 + 72);
  v38 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v10);
  View.padding(_:_:)(v35, v37, 0, v10, v38);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v12, v10);
  v68[2] = v38;
  v68[3] = (uint64_t)&protocol witness table for _PaddingLayout;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v40 = v57;
  v41 = v58;
  v42 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  v42(v58, v18, v13);
  v43 = *(void (**)(char *, uint64_t))(v40 + 8);
  v43(v18, v13);
  v45 = v54;
  v44 = v55;
  v64 = v55;
  v65 = v54;
  v47 = v52;
  v46 = v53;
  v66 = v52;
  v67 = v53;
  v68[0] = (uint64_t)&v64;
  v48 = (uint64_t)v59;
  v42(v59, v41, v13);
  v68[1] = v48;
  sub_100064A0C(v44, v45, v47, v46);
  v63[0] = sub_100008EF4(&qword_100108EE0);
  v63[1] = v13;
  v61 = sub_100064A3C();
  v62 = v39;
  sub_10005E17C(v68, 2uLL, (uint64_t)v63);
  sub_100064A98(v44, v45, v47, v46);
  v43(v41, v13);
  v43((char *)v48, v13);
  return sub_100064A98(v64, v65, v66, v67);
}

uint64_t sub_1000643D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t WitnessTable;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34[3];

  v30 = a4;
  v7 = type metadata accessor for Optional(0, a2);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v29 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v28 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v28 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v28 - v17;
  v20 = type metadata accessor for SportsWidgetGenericClockView(0, a2, a3, v19);
  v21 = a1 + *(int *)(v20 + 48);
  v34[2] = a3;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v7);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v23(v18, v21, v7);
  v23(v16, a1 + *(int *)(v20 + 52), v7);
  v23(v13, (uint64_t)v18, v7);
  v34[0] = (uint64_t)v13;
  v24 = (uint64_t)v29;
  v23(v29, (uint64_t)v16, v7);
  v34[1] = v24;
  v25 = v24;
  v33[0] = v7;
  v33[1] = v7;
  v31 = WitnessTable;
  v32 = WitnessTable;
  sub_10005E17C(v34, 2uLL, (uint64_t)v33);
  v26 = *(void (**)(char *, uint64_t))(v8 + 8);
  v26(v16, v7);
  v26(v18, v7);
  v26((char *)v25, v7);
  return ((uint64_t (*)(char *, uint64_t))v26)(v13, v7);
}

uint64_t sub_10006459C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t WitnessTable;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[5];

  v41 = a4;
  v7 = type metadata accessor for Optional(0, a2);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v40 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v43 = (char *)&v37 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v37 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v37 - v16;
  v19 = (int *)type metadata accessor for SportsWidgetGenericClockView(0, a2, a3, v18);
  v20 = a1 + v19[12];
  v52[3] = a3;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v7);
  v42 = v8;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v22 = v17;
  v21(v17, v20, v7);
  v23 = a1 + v19[11];
  v24 = *(_QWORD *)(v23 + 24);
  if (v24)
  {
    v48 = *(_QWORD *)(v23 + 16);
    v49 = v24;
    v25 = sub_100013080();
    swift_bridgeObjectRetain(v24);
    v26 = Text.init<A>(_:)(&v48, &type metadata for String, v25);
    v28 = v27;
    v24 = v29;
    v31 = v30 & 1;
  }
  else
  {
    v26 = 0;
    v28 = 0;
    v31 = 0;
  }
  v21(v15, a1 + v19[13], v7);
  v32 = (uint64_t)v43;
  v38 = v22;
  v21(v43, (uint64_t)v22, v7);
  v48 = v26;
  v49 = v28;
  v50 = v31;
  v51 = v24;
  v52[0] = v32;
  v52[1] = (uint64_t)&v48;
  v33 = (uint64_t)v40;
  v21(v40, (uint64_t)v15, v7);
  v52[2] = v33;
  sub_100064A0C(v26, v28, v31, v24);
  v47[0] = v7;
  v47[1] = sub_100008EF4(&qword_100108EE0);
  v47[2] = v7;
  v34 = WitnessTable;
  v44 = WitnessTable;
  v45 = sub_100064A3C();
  v46 = v34;
  sub_10005E17C(v52, 3uLL, (uint64_t)v47);
  sub_100064A98(v26, v28, v31, v24);
  v35 = *(void (**)(char *, uint64_t))(v42 + 8);
  v35(v15, v7);
  v35(v38, v7);
  v35((char *)v33, v7);
  sub_100064A98(v48, v49, v50, v51);
  return ((uint64_t (*)(uint64_t, uint64_t))v35)(v32, v7);
}

unint64_t sub_100064834()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100108F20;
  if (!qword_100108F20)
  {
    v1 = sub_100008F80(&qword_100108F00);
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100108F20);
  }
  return result;
}

unint64_t sub_1000648BC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100108F28;
  if (!qword_100108F28)
  {
    v1 = sub_100008F80(&qword_100108F10);
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100108F28);
  }
  return result;
}

uint64_t sub_100064944@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10005EFD0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100064958@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000627EC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100064964@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100060F78(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100064970()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108F40;
  if (!qword_100108F40)
  {
    v1 = sub_100008F80(&qword_100108EE8);
    sub_100013840(&qword_100108F48, &qword_100108F50, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100108F40);
  }
  return result;
}

uint64_t sub_1000649F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10006402C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100064A00@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10006459C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100064A0C(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10003258C(result, a2, a3 & 1);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

unint64_t sub_100064A3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100108F58;
  if (!qword_100108F58)
  {
    v1 = sub_100008F80(&qword_100108EE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100108F58);
  }
  return result;
}

uint64_t sub_100064A98(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1000130C4(result, a2, a3 & 1);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_100064AC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000643D8(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100064AD4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100108F60;
  if (!qword_100108F60)
  {
    v1 = sub_100008F80(&qword_100108EF0);
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100108F60);
  }
  return result;
}

uint64_t sub_100064B5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000638AC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100064B68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000631C4(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), *(void (**)(char *, uint64_t))(v1 + 24), a1);
}

uint64_t sub_100064B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100064BA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t WitnessTable;
  uint64_t v57;
  uint64_t v58;

  v1 = type metadata accessor for Optional(255, *a1);
  v2 = sub_100008F80(&qword_100108EE0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v1, v2, v1, 0, 0);
  v4 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v4);
  v5 = type metadata accessor for HStack(255, v4);
  v6 = type metadata accessor for ModifiedContent(255, v5, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v1, v1, 0, 0);
  v8 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v8);
  v9 = type metadata accessor for HStack(255, v8);
  v10 = type metadata accessor for ModifiedContent(255, v9, &type metadata for _PaddingLayout);
  v11 = swift_getTupleTypeMetadata2(255, v2, v10, 0, 0);
  v12 = type metadata accessor for TupleView(255, v11);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v12);
  v13 = type metadata accessor for VStack(255, v12);
  v14 = type metadata accessor for _ConditionalContent(255, v6, v13);
  v15 = type metadata accessor for _ConditionalContent(255, v14, &type metadata for EmptyView);
  v16 = type metadata accessor for _ConditionalContent(255, v15, &type metadata for Text);
  v17 = type metadata accessor for Optional(255, v16);
  v18 = sub_100008F80(&qword_100108EE8);
  v19 = swift_getTupleTypeMetadata2(255, v17, v18, 0, 0);
  v20 = type metadata accessor for TupleView(255, v19);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v20);
  v21 = type metadata accessor for VStack(255, v20);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v21);
  v57 = v21;
  v58 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v57, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 0);
  v23 = sub_100008F80(&qword_100108EF0);
  v24 = sub_100008F80(&qword_100108EF8);
  v25 = swift_getTupleTypeMetadata3(255, v17, v23, v24, 0, 0);
  v26 = type metadata accessor for TupleView(255, v25);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v26);
  v27 = type metadata accessor for VStack(255, v26);
  v55 = type metadata accessor for _ConditionalContent(255, OpaqueTypeMetadata2, v27);
  v28 = sub_100008F80(&qword_100108F00);
  v29 = type metadata accessor for _ConditionalContent(255, v55, v28);
  v30 = sub_100008F80(&qword_100108F08);
  v31 = swift_getTupleTypeMetadata2(255, v17, v30, 0, 0);
  v32 = type metadata accessor for TupleView(255, v31);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v32);
  v33 = type metadata accessor for VStack(255, v32);
  v34 = swift_getTupleTypeMetadata3(255, v17, v23, v30, 0, 0);
  v35 = type metadata accessor for TupleView(255, v34);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v35);
  v36 = type metadata accessor for VStack(255, v35);
  v37 = type metadata accessor for _ConditionalContent(255, v33, v36);
  v38 = sub_100008F80(&qword_100108F10);
  v39 = type metadata accessor for _ConditionalContent(255, v37, v38);
  v40 = type metadata accessor for _ConditionalContent(255, v29, v39);
  v41 = type metadata accessor for Group(255, v40);
  v42 = sub_100008F80(&qword_100108F18);
  v54 = type metadata accessor for ModifiedContent(255, v41, v42);
  v57 = v21;
  v58 = WitnessTable;
  swift_getOpaqueTypeConformance2(&v57, &opaque type descriptor for <<opaque return type of View.accessibilityIdentifier(key:location:)>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v27);
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v55);
  sub_100064834();
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v29);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v33);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v36);
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v37);
  sub_1000648BC();
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v39);
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v40);
  swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v41);
  sub_100013840(&qword_100108F30, &qword_100108F18, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v43 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v54);
  v57 = v54;
  v58 = v43;
  v44 = swift_getOpaqueTypeMetadata2(255, &v57, &opaque type descriptor for <<opaque return type of View.monospacedDigit()>>, 0);
  v45 = sub_100008F80(&qword_100108730);
  v46 = type metadata accessor for ModifiedContent(255, v44, v45);
  v47 = sub_100008F80(&qword_100106178);
  v48 = type metadata accessor for ModifiedContent(255, v46, v47);
  v49 = sub_100008F80(&qword_100106188);
  v50 = type metadata accessor for ModifiedContent(255, v48, v49);
  v51 = sub_100008F80(&qword_100108628);
  v52 = type metadata accessor for ModifiedContent(255, v50, v51);
  v57 = v54;
  v58 = v43;
  swift_getOpaqueTypeConformance2(&v57, &opaque type descriptor for <<opaque return type of View.monospacedDigit()>>, 1);
  sub_100013840(&qword_100108728, &qword_100108730, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v46);
  sub_100013840(&qword_100106170, &qword_100106178, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v48);
  sub_100013840(&qword_100106180, &qword_100106188, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v50);
  sub_100013840(&qword_1001087C0, &qword_100108628, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v52);
}

unint64_t sub_100065240()
{
  unint64_t result;

  result = qword_100108F70;
  if (!qword_100108F70)
  {
    result = swift_getWitnessTable(&unk_1000CB3F0, &type metadata for TVSettingsUsePlayHistoryEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100108F70);
  }
  return result;
}

uint64_t sub_100065284()
{
  return sub_100013840(&qword_100108F78, &qword_100108F80, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

void sub_1000652B0()
{
  qword_10011EFB0 = (uint64_t)&off_1000F6B10;
}

uint64_t sub_1000652C4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011EFB8);
  sub_10000909C(v16, (uint64_t)qword_10011EFB8);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x80000001000C0D20);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_1000654E8()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000905C(v0, qword_10011EFD0);
  sub_10000909C(v0, (uint64_t)qword_10011EFD0);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000017, 0x80000001000C2050);
}

uint64_t sub_100065548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008EF4(&qword_100106608);
  sub_10000905C(v0, qword_10011EFE8);
  v1 = sub_10000909C(v0, (uint64_t)qword_10011EFE8);
  IntentDescription.init(stringLiteral:)(0xD000000000000035, 0x80000001000C2010);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_1000655D0()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1000CB988);
  qword_10011F000 = result;
  return result;
}

uint64_t sub_1000655F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[15] = a2;
  v3[16] = a3;
  v3[14] = a1;
  return swift_task_switch(sub_100065610, 0, 0);
}

uint64_t sub_100065610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 56) = v2;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 226));
  *(_BYTE *)(v0 + 225) = *(_BYTE *)(v0 + 226);
  if (qword_100105D48 != -1)
    swift_once(&qword_100105D48, sub_1000655D0);
  v3 = qword_10011F000;
  *(_QWORD *)(v0 + 152) = qword_10011F000;
  v4 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v3);
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 160) = v5;
  v6 = sub_100013840(&qword_100109130, &qword_100109138, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 168) = v6;
  *v5 = v0;
  v5[1] = sub_100065718;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 225, v3, &type metadata for Bool, v6);
}

uint64_t sub_100065718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v6 = sub_100017850;
  else
    v6 = sub_1000657A0;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000657A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  IntentParameter.wrappedValue.getter(v0 + 11);
  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[13];
  v0[23] = v2;
  v0[24] = v3;
  v0[8] = v1;
  v0[9] = v2;
  v0[10] = v3;
  v4 = qword_10011F000;
  v0[25] = qword_10011F000;
  v5 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain(v4);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[26] = v6;
  *v6 = v0;
  v6[1] = sub_100017770;
  return AppEntity._value<A, B>(for:)(v0 + 28, v4, v0[21]);
}

double sub_100065840()
{
  double result;

  if (qword_100105D48 != -1)
    swift_once(&qword_100105D48, sub_1000655D0);
  *(_QWORD *)&result = swift_retain(qword_10011F000).n128_u64[0];
  return result;
}

unint64_t sub_100065884()
{
  unint64_t result;

  result = qword_100108F88;
  if (!qword_100108F88)
  {
    result = swift_getWitnessTable(&unk_1000CB480, &type metadata for TVSettingsUsePlayHistoryEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100108F88);
  }
  return result;
}

unint64_t sub_1000658CC()
{
  unint64_t result;

  result = qword_100108F90;
  if (!qword_100108F90)
  {
    result = swift_getWitnessTable(&unk_1000CB4A8, &type metadata for TVSettingsUsePlayHistoryEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100108F90);
  }
  return result;
}

uint64_t sub_100065910(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000D2A48, 1) + 8);
}

uint64_t sub_100065934(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100065240();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_100065974@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105D38, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10011EFD0, (uint64_t)sub_1000654E8, a1);
}

uint64_t sub_100065998@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100105D40 != -1)
    swift_once(&qword_100105D40, sub_100065548);
  v2 = sub_100008EF4(&qword_100106608);
  v3 = sub_10000909C(v2, (uint64_t)qword_10011EFE8);
  return sub_100016518(v3, a1);
}

uint64_t sub_1000659F8(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_10010914C);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_1000145D8;
  *(_OWORD *)(v4 + 120) = *v1;
  *(_QWORD *)(v4 + 112) = a1;
  return swift_task_switch(sub_100065610, 0, 0);
}

uint64_t sub_100065A60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100066A4C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100065A84()
{
  return 0xD00000000000002FLL;
}

unint64_t sub_100065AA4()
{
  unint64_t result;

  result = qword_100108FA0;
  if (!qword_100108FA0)
  {
    result = swift_getWitnessTable(&unk_1000CB504, &type metadata for TVSettingsUsePlayHistoryEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100108FA0);
  }
  return result;
}

unint64_t sub_100065AEC()
{
  unint64_t result;

  result = qword_100108FA8;
  if (!qword_100108FA8)
  {
    result = swift_getWitnessTable(&unk_1000CB954, &type metadata for TVSettingsUsePlayHistoryEntity);
    atomic_store(result, (unint64_t *)&qword_100108FA8);
  }
  return result;
}

uint64_t sub_100065B30(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100065B48, 0, 0);
}

uint64_t sub_100065B48()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = (sub_10007770C() & 1) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100065BA4(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_100065BC0, 0, 0);
}

uint64_t sub_100065BC0()
{
  uint64_t v0;

  sub_100078894((*(_BYTE *)(v0 + 16) & 1) == 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100065C14(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100065C2C, 0, 0);
}

uint64_t sub_100065C2C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(v0 + 16);
  *v1 = sub_100066D74();
  v1[1] = v2;
  v1[2] = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100065C6C()
{
  unint64_t result;

  result = qword_100108FB8;
  if (!qword_100108FB8)
  {
    result = swift_getWitnessTable(&unk_1000CB53C, &type metadata for TVSettingsUsePlayHistoryEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100108FB8);
  }
  return result;
}

uint64_t sub_100065CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100066504();
  *v4 = v2;
  v4[1] = sub_100014BF8;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_100065D1C()
{
  unint64_t result;

  result = qword_100108FC8;
  if (!qword_100108FC8)
  {
    result = swift_getWitnessTable(&unk_1000CB594, &type metadata for TVSettingsUsePlayHistoryEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100108FC8);
  }
  return result;
}

unint64_t sub_100065D64()
{
  unint64_t result;

  result = qword_100108FD0;
  if (!qword_100108FD0)
  {
    result = swift_getWitnessTable(&unk_1000CB5F4, &type metadata for TVSettingsUsePlayHistoryEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100108FD0);
  }
  return result;
}

unint64_t sub_100065DAC()
{
  unint64_t result;

  result = qword_100108FD8[0];
  if (!qword_100108FD8[0])
  {
    result = swift_getWitnessTable(&unk_1000CB8FC, &type metadata for TVSettingsUsePlayHistoryEntity);
    atomic_store(result, qword_100108FD8);
  }
  return result;
}

uint64_t sub_100065DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100066504();
  *v5 = v2;
  v5[1] = sub_100014D9C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100065E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100066504();
  *v4 = v2;
  v4[1] = sub_100016564;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_100065EC8()
{
  unint64_t result;

  result = qword_100108FF0;
  if (!qword_100108FF0)
  {
    result = swift_getWitnessTable(&unk_1000CB61C, &type metadata for TVSettingsUsePlayHistoryEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100108FF0);
  }
  return result;
}

unint64_t sub_100065F10()
{
  unint64_t result;

  result = qword_100108FF8;
  if (!qword_100108FF8)
  {
    result = swift_getWitnessTable(&unk_1000CB8A4, &type metadata for TVSettingsUsePlayHistoryEntity);
    atomic_store(result, (unint64_t *)&qword_100108FF8);
  }
  return result;
}

unint64_t sub_100065F58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100109000;
  if (!qword_100109000)
  {
    v1 = sub_100008F80(qword_100109008);
    sub_100065F10();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100109000);
  }
  return result;
}

uint64_t sub_100065FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100065C6C();
  *v5 = v2;
  v5[1] = sub_100016560;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for TVSettingsUsePlayHistoryEntity.Query()
{
  return &type metadata for TVSettingsUsePlayHistoryEntity.Query;
}

ValueMetadata *type metadata accessor for TVSettingsUsePlayHistoryEntity()
{
  return &type metadata for TVSettingsUsePlayHistoryEntity;
}

ValueMetadata *type metadata accessor for TVSettingsUsePlayHistoryEntity.UpdateIntent_value()
{
  return &type metadata for TVSettingsUsePlayHistoryEntity.UpdateIntent_value;
}

uint64_t sub_10006605C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100066350();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100015960(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_1000660A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105D30, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10011EFB8, (uint64_t)sub_1000652C4, a1);
}

uint64_t sub_1000660C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100065DAC();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100066100(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100065AEC();
  return _UniqueEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_100066138(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000661BC();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100066174()
{
  unint64_t result;

  result = qword_100109020;
  if (!qword_100109020)
  {
    result = swift_getWitnessTable(&unk_1000CB694, &type metadata for TVSettingsUsePlayHistoryEntity);
    atomic_store(result, (unint64_t *)&qword_100109020);
  }
  return result;
}

unint64_t sub_1000661BC()
{
  unint64_t result;

  result = qword_100109030;
  if (!qword_100109030)
  {
    result = swift_getWitnessTable(&unk_1000CB6BC, &type metadata for TVSettingsUsePlayHistoryEntity);
    atomic_store(result, (unint64_t *)&qword_100109030);
  }
  return result;
}

unint64_t sub_100066204()
{
  unint64_t result;

  result = qword_100109038;
  if (!qword_100109038)
  {
    result = swift_getWitnessTable(&unk_1000CB6EC, &type metadata for TVSettingsUsePlayHistoryEntity);
    atomic_store(result, (unint64_t *)&qword_100109038);
  }
  return result;
}

unint64_t sub_10006624C()
{
  unint64_t result;

  result = qword_100109040;
  if (!qword_100109040)
  {
    result = swift_getWitnessTable(&unk_1000CB714, &type metadata for TVSettingsUsePlayHistoryEntity);
    atomic_store(result, (unint64_t *)&qword_100109040);
  }
  return result;
}

unint64_t sub_100066294()
{
  unint64_t result;

  result = qword_100109048;
  if (!qword_100109048)
  {
    result = swift_getWitnessTable(&unk_1000CB73C, &type metadata for TVSettingsUsePlayHistoryEntity);
    atomic_store(result, (unint64_t *)&qword_100109048);
  }
  return result;
}

unint64_t sub_1000662D8(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_10006630C();
  a1[2] = sub_100066350();
  result = sub_100065AEC();
  a1[3] = result;
  return result;
}

unint64_t sub_10006630C()
{
  unint64_t result;

  result = qword_100109098;
  if (!qword_100109098)
  {
    result = swift_getWitnessTable(&unk_1000CB83C, &type metadata for TVSettingsUsePlayHistoryEntity);
    atomic_store(result, (unint64_t *)&qword_100109098);
  }
  return result;
}

unint64_t sub_100066350()
{
  unint64_t result;

  result = qword_1001090A0;
  if (!qword_1001090A0)
  {
    result = swift_getWitnessTable(&unk_1000CB804, &type metadata for TVSettingsUsePlayHistoryEntity);
    atomic_store(result, (unint64_t *)&qword_1001090A0);
  }
  return result;
}

unint64_t sub_100066394(uint64_t a1)
{
  unint64_t result;

  result = sub_1000663B8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000663B8()
{
  unint64_t result;

  result = qword_1001090E8;
  if (!qword_1001090E8)
  {
    result = swift_getWitnessTable(&unk_1000CB86C, &type metadata for TVSettingsUsePlayHistoryEntity);
    atomic_store(result, (unint64_t *)&qword_1001090E8);
  }
  return result;
}

uint64_t sub_1000663FC()
{
  return sub_100013840(&qword_1001090F0, &qword_1001090F8, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

unint64_t sub_10006642C()
{
  unint64_t result;

  result = qword_100109100;
  if (!qword_100109100)
  {
    result = swift_getWitnessTable(&unk_1000CB7CC, &type metadata for TVSettingsUsePlayHistoryEntity);
    atomic_store(result, (unint64_t *)&qword_100109100);
  }
  return result;
}

unint64_t sub_100066474()
{
  unint64_t result;

  result = qword_100109108;
  if (!qword_100109108)
  {
    result = swift_getWitnessTable(&unk_1000CB79C, &type metadata for TVSettingsUsePlayHistoryEntity);
    atomic_store(result, (unint64_t *)&qword_100109108);
  }
  return result;
}

unint64_t sub_1000664BC()
{
  unint64_t result;

  result = qword_100109110;
  if (!qword_100109110)
  {
    result = swift_getWitnessTable(&unk_1000CB764, &type metadata for TVSettingsUsePlayHistoryEntity);
    atomic_store(result, (unint64_t *)&qword_100109110);
  }
  return result;
}

unint64_t sub_100066504()
{
  unint64_t result;

  result = qword_100109118;
  if (!qword_100109118)
  {
    result = swift_getWitnessTable(&unk_1000CB4C4, &type metadata for TVSettingsUsePlayHistoryEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109118);
  }
  return result;
}

uint64_t sub_100066548@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  unint64_t v52;
  _QWORD v53[2];
  unint64_t v54;
  unint64_t v55;

  v49 = a1;
  v1 = sub_100008EF4(&qword_100106888);
  v42 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100106890);
  v5 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  v44 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008EF4(&qword_100106898);
  v9 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  v46 = v9;
  __chkstk_darwin(v8);
  v40 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008EF4(&qword_1001068A0);
  v12 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  v48 = v12;
  __chkstk_darwin(v11);
  v41 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v50, "com.apple.tv.");
  HIWORD(v50[1]) = -4864;
  v54 = (unint64_t)&type metadata for TVSettingsUsePlayHistoryWidget;
  v14 = sub_100008EF4(&qword_1001091A8);
  v15._countAndFlagsBits = String.init<A>(describing:)(&v54, v14);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17 = v50[0];
  v18 = v50[1];
  KeyPath = swift_getKeyPath(&unk_1000CB988);
  v20 = sub_100008EF4(&qword_1001068B0);
  v21 = sub_100065AEC();
  v22 = sub_100013840(&qword_1001068B8, &qword_1001068B0, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  ControlToggle.init<A, B, C, D, E, F>(kind:intentUpdatableProperty:content:value:)(v17, v18, KeyPath, sub_100066988, 0, sub_100018B14, 0, v20, &type metadata for Text, v21, v22, &protocol witness table for Text);
  v50[0] = &type metadata for TVSettingsUsePlayHistoryWidget;
  v23 = String.init<A>(describing:)(v50, v14);
  v25 = v24;
  v50[0] = v23;
  v50[1] = v24;
  v54 = 0x746567646957;
  v55 = 0xE600000000000000;
  v53[0] = 0x656C67676F54;
  v53[1] = 0xE600000000000000;
  v26 = sub_100013080();
  v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v54, v53, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v26, v26, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v25);
  v50[0] = v27;
  v50[1] = v29;
  v30 = sub_100013840(&qword_1001068C0, &qword_100106888, (uint64_t)&protocol conformance descriptor for ControlToggle<A>);
  WidgetConfiguration.configurationDisplayName<A>(_:)(v50, v1, &type metadata for String, v30, v26);
  swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v3, v1);
  v54 = 0xD000000000000026;
  v55 = 0x80000001000C2070;
  v50[0] = v1;
  v50[1] = &type metadata for String;
  v51 = v30;
  v52 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v32 = v40;
  v33 = v43;
  WidgetConfiguration.description<A>(_:)(&v54, v43, &type metadata for String, OpaqueTypeConformance2, v26);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v33);
  v50[0] = v33;
  v50[1] = &type metadata for String;
  v51 = OpaqueTypeConformance2;
  v52 = v26;
  v34 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v35 = v41;
  v36 = v45;
  WidgetConfiguration.disablesControlStateCaching()(v45, v34);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v36);
  v50[0] = v36;
  v50[1] = v34;
  v37 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v38 = v47;
  WidgetConfiguration.hiddenControl()(v47, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v35, v38);
}

uint64_t sub_100066988@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  _QWORD v8[2];

  v2 = sub_100008EF4(&qword_1001068B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[0] = 0xD000000000000010;
  v8[1] = 0x80000001000C0D20;
  v6 = sub_100013080();
  Label<>.init<A>(_:systemImage:)(v8, 1918985575, 0xE400000000000000, &type metadata for String, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
}

uint64_t sub_100066A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD v33[3];

  v0 = sub_100008EF4(&qword_100106808);
  __chkstk_darwin(v0);
  v32 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for InputConnectionBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v31 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_1001065E0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  v30 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008EF4(&qword_100109140);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000C1FC0);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v29(v13, 1, 1, v14);
  v18 = type metadata accessor for IntentDialog(0);
  memset(v33, 0, sizeof(v33));
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v10, 1, 1, v18);
  v19(v8, 1, 1, v18);
  v20 = enum case for InputConnectionBehavior.default(_:);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v21 = v31;
  v28(v31, enum case for InputConnectionBehavior.default(_:), v2);
  v22 = sub_100065DAC();
  v27 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v17, v13, v33, v10, v8, v21, v22);
  sub_100008EF4(&qword_100106818);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000002ELL, 0x80000001000C1FE0);
  v29(v13, 1, 1, v30);
  LOBYTE(v33[0]) = 2;
  v23 = type metadata accessor for Bool.IntentDisplayName(0);
  v24 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v32, 1, 1, v23);
  v19(v10, 1, 1, v18);
  v28(v21, v20, v2);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v17, v13, v33, v24, v10, v21);
  return v27;
}

uint64_t sub_100066D74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  ValueMetadata *v19;

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &type metadata for TVSettingsUsePlayHistoryEntity;
  v13 = sub_100008EF4(&qword_100108DB0);
  v14 = String.init<A>(describing:)(&v19, v13);
  sub_100008EF4(&qword_100108F80);
  v15 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x80000001000C0D20);
  static Locale.current.getter(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0xD000000000000012, 0x80000001000BF530, v6, v3, 0, 0, 256);
  v16 = sub_100013840(&qword_100109130, &qword_100109138, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v12, &unk_100109120, 0, &unk_100109128, 0, &type metadata for TVSettingsUsePlayHistoryEntity.UpdateIntent_value, v16);
  return v14;
}

double sub_100066F9C@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for TVSettingsUsePlayHistoryWidget()
{
  return &type metadata for TVSettingsUsePlayHistoryWidget;
}

uint64_t sub_100066FB8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2A98, 1);
}

unint64_t sub_100066FC8(uint64_t a1)
{
  unint64_t result;

  result = sub_100066FEC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100066FEC()
{
  unint64_t result;

  result = qword_100109198;
  if (!qword_100109198)
  {
    result = swift_getWitnessTable(&unk_1000CB9D0, &type metadata for TVSettingsUsePlayHistoryWidget);
    atomic_store(result, (unint64_t *)&qword_100109198);
  }
  return result;
}

unint64_t sub_100067030(uint64_t a1)
{
  unint64_t result;

  result = sub_100067054();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100067054()
{
  unint64_t result;

  result = qword_1001091A0;
  if (!qword_1001091A0)
  {
    result = swift_getWitnessTable(&unk_1000CBA10, &type metadata for TVSettingsUsePlayHistoryWidget);
    atomic_store(result, (unint64_t *)&qword_1001091A0);
  }
  return result;
}

uint64_t destroy for SportsWidgetScoreView(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

uint64_t initializeWithCopy for SportsWidgetScoreView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t assignWithCopy for SportsWidgetScoreView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for SportsWidgetScoreView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SportsWidgetScoreView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetScoreView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetScoreView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetScoreView()
{
  return &type metadata for SportsWidgetScoreView;
}

uint64_t sub_1000672F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2ADC, 1);
}

uint64_t sub_100067300@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t KeyPath;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[3];

  v73 = a1;
  v2 = sub_100008EF4(&qword_100108628);
  __chkstk_darwin(v2);
  v61 = (uint64_t *)((char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = type metadata accessor for ContentTransition(0);
  v4 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100008EF4(&qword_1001091B0);
  __chkstk_darwin(v59);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100008EF4(&qword_1001091B8);
  __chkstk_darwin(v65);
  v62 = (uint64_t)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100008EF4(&qword_1001091C0);
  __chkstk_darwin(v67);
  v63 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008EF4(&qword_1001091C8);
  v71 = *(_QWORD *)(v11 - 8);
  v72 = v11;
  __chkstk_darwin(v11);
  v64 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100008EF4(&qword_1001091D0);
  __chkstk_darwin(v69);
  v66 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100008EF4(&qword_1001091D8);
  __chkstk_darwin(v70);
  v68 = (uint64_t)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = v1;
  v15 = v1[1];
  v74[0] = *v1;
  v74[1] = v15;
  v16 = sub_100013080();
  swift_bridgeObjectRetain(v15);
  v17 = Text.init<A>(_:)(v74, &type metadata for String, v16);
  v19 = v18;
  v21 = v20;
  LOBYTE(v15) = v22 & 1;
  v57 = v6;
  static ContentTransition.numericText(countsDown:)(0);
  KeyPath = swift_getKeyPath(&unk_1000CBAD8);
  v24 = v61;
  v25 = (char *)v61 + *(int *)(v2 + 28);
  v26 = v4;
  v27 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v28 = v60;
  v27(v25, v6, v60);
  *v24 = KeyPath;
  sub_10001355C((uint64_t)v24, (uint64_t)&v8[*(int *)(v59 + 36)], &qword_100108628);
  *(_QWORD *)v8 = v17;
  *((_QWORD *)v8 + 1) = v19;
  v8[16] = v15;
  *((_QWORD *)v8 + 3) = v21;
  *((_WORD *)v8 + 16) = 0;
  sub_10003258C(v17, v19, v15);
  swift_bridgeObjectRetain(v21);
  sub_1000135A0((uint64_t)v24, &qword_100108628);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v57, v28);
  sub_1000130C4(v17, v19, v15);
  swift_bridgeObjectRelease(v21);
  v29 = v58[2];
  v30 = v58[3];
  v31 = v58[4];
  LOBYTE(v21) = *((_BYTE *)v58 + 40);
  v32 = v58[6];
  v33 = swift_getKeyPath(&unk_1000CBB08);
  v34 = v62;
  sub_10001355C((uint64_t)v8, v62, &qword_1001091B0);
  v35 = (uint64_t *)(v34 + *(int *)(v65 + 36));
  *v35 = v33;
  v35[1] = v30;
  swift_retain(v30);
  sub_1000135A0((uint64_t)v8, &qword_1001091B0);
  v36 = swift_getKeyPath(&unk_1000CBB38);
  v37 = v63;
  sub_10001355C(v34, v63, &qword_1001091B8);
  v38 = v67;
  v39 = (uint64_t *)(v37 + *(int *)(v67 + 36));
  *v39 = v36;
  v39[1] = v29;
  swift_retain(v29);
  sub_1000135A0(v34, &qword_1001091B8);
  v40 = sub_10006783C();
  v41 = v64;
  View.monospacedDigit()(v38, v40);
  sub_1000135A0(v37, &qword_1001091C0);
  v42 = swift_getKeyPath(&unk_1000CBB68);
  v44 = v71;
  v43 = v72;
  v45 = v66;
  v46 = v41;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v66, v41, v72);
  v47 = &v45[*(int *)(v69 + 36)];
  v48 = (uint64_t)v45;
  *(_QWORD *)v47 = v42;
  *((_QWORD *)v47 + 1) = v31;
  v47[16] = 0;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v43);
  v49 = swift_getKeyPath(&unk_1000CBB98);
  v50 = (uint64_t)v45;
  v51 = v68;
  sub_10001355C(v50, v68, &qword_1001091D0);
  v52 = v51 + *(int *)(v70 + 36);
  *(_QWORD *)v52 = v49;
  *(_BYTE *)(v52 + 8) = v21;
  sub_1000135A0(v48, &qword_1001091D0);
  v53 = swift_getKeyPath(&unk_1000CBBC8);
  v54 = v73;
  sub_10001355C(v51, v73, &qword_1001091D8);
  v55 = (uint64_t *)(v54 + *(int *)(sub_100008EF4(&qword_100109218) + 36));
  *v55 = v53;
  v55[1] = v32;
  return sub_1000135A0(v51, &qword_1001091D8);
}

unint64_t sub_10006783C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001091E0;
  if (!qword_1001091E0)
  {
    v1 = sub_100008F80(&qword_1001091C0);
    sub_1000678C0();
    sub_100013840(&qword_100108728, &qword_100108730, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001091E0);
  }
  return result;
}

unint64_t sub_1000678C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001091E8;
  if (!qword_1001091E8)
  {
    v1 = sub_100008F80(&qword_1001091B8);
    sub_100067944();
    sub_100013840(&qword_100108F30, &qword_100108F18, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001091E8);
  }
  return result;
}

unint64_t sub_100067944()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001091F0;
  if (!qword_1001091F0)
  {
    v1 = sub_100008F80(&qword_1001091B0);
    sub_1000679C8();
    sub_100013840(&qword_1001087C0, &qword_100108628, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001091F0);
  }
  return result;
}

unint64_t sub_1000679C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001091F8;
  if (!qword_1001091F8)
  {
    v1 = sub_100008F80(&qword_100109200);
    sub_100013840(&qword_100109208, &qword_100109210, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001091F8);
  }
  return result;
}

unint64_t sub_100067A68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100109220;
  if (!qword_100109220)
  {
    v1 = sub_100008F80(&qword_100109218);
    sub_100067AEC();
    sub_100013840(&qword_100106278, &qword_100106280, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100109220);
  }
  return result;
}

unint64_t sub_100067AEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100109228;
  if (!qword_100109228)
  {
    v1 = sub_100008F80(&qword_1001091D8);
    sub_100067B70();
    sub_100013840(&qword_100106180, &qword_100106188, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100109228);
  }
  return result;
}

unint64_t sub_100067B70()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100109230;
  if (!qword_100109230)
  {
    v1 = sub_100008F80(&qword_1001091D0);
    v2[0] = sub_100008F80(&qword_1001091C0);
    v2[1] = sub_10006783C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.monospacedDigit()>>, 1);
    sub_100013840(&qword_100106170, &qword_100106178, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100109230);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TVWidgetHeaderView(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TVWidgetHeaderView(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100067D08 + 4 * byte_1000CBC05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100067D3C + 4 * byte_1000CBC00[v4]))();
}

uint64_t sub_100067D3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067D44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100067D4CLL);
  return result;
}

uint64_t sub_100067D58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100067D60);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100067D64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067D6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TVWidgetHeaderView()
{
  return &type metadata for TVWidgetHeaderView;
}

uint64_t sub_100067D88(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2B20, 1);
}

uint64_t sub_100067D98@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v24[3];

  v4 = sub_100008EF4(&qword_100109238);
  __chkstk_darwin(v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008EF4(&qword_100109240);
  __chkstk_darwin(v7);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008EF4(&qword_100109248);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v11);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  sub_100008EF4(&qword_100109250);
  v14 = sub_100067F88();
  if ((a1 & 1) != 0)
    v15 = 0x403C000000000000;
  else
    v15 = 0x4042000000000000;
  v16 = static Alignment.center.getter(v14);
  _FrameLayout.init(width:height:alignment:)(v24, 0, 1, v15, 0, v16, v17);
  sub_1000681AC((uint64_t)v6, (uint64_t)v9);
  v18 = &v9[*(int *)(v7 + 36)];
  v19 = v24[1];
  *(_OWORD *)v18 = v24[0];
  *((_OWORD *)v18 + 1) = v19;
  *((_OWORD *)v18 + 2) = v24[2];
  v20 = sub_1000135A0((uint64_t)v6, &qword_100109238);
  if ((a1 & 1) != 0)
    v21 = static Alignment.leading.getter(v20);
  else
    v21 = static Alignment.trailing.getter(v20);
  sub_1000962E0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, 0.0, 1, v21, v22);
  sub_1000135A0((uint64_t)v9, &qword_100109240);
  return sub_1000681F4((uint64_t)v13, a2);
}

uint64_t sub_100067F88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  __int128 v30;

  v0 = type metadata accessor for Image.ResizingMode(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100109258);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = Image.init(_:bundle:)(0xD000000000000011, 0x80000001000C20A0, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Image.ResizingMode.stretch(_:), v0);
  v9 = Image.resizable(capInsets:resizingMode:)(v3, v8, 0.0, 0.0, 0.0, 0.0);
  swift_release(v8);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v11 = static Alignment.center.getter(v10);
  _FrameLayout.init(width:height:alignment:)(&v26, 0, 1, 0x402A000000000000, 0, v11, v12);
  v18 = v9;
  v19 = 0;
  v20 = 1;
  v21 = v26;
  v22 = v27;
  v23 = v28;
  v24 = v29;
  v25 = v30;
  v13 = sub_100008EF4(&qword_100109260);
  v14 = sub_10002A36C(&qword_100109268, &qword_100109260, (void (*)(void))sub_10006823C);
  View.unredacted()(v13, v14);
  swift_release(v9);
  v18 = v13;
  v19 = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v18, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
  View.widgetAccentable(_:)(1, v4, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1000681A4@<X0>(uint64_t a1@<X8>)
{
  char *v1;

  return sub_100067D98(*v1, a1);
}

uint64_t sub_1000681AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008EF4(&qword_100109238);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000681F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008EF4(&qword_100109248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006823C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100109270;
  if (!qword_100109270)
  {
    v1 = sub_100008F80(&qword_100109278);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100109270);
  }
  return result;
}

uint64_t sub_1000682A0()
{
  return sub_10002A36C(&qword_100109280, &qword_100109248, (void (*)(void))sub_1000682D4);
}

uint64_t sub_1000682D4()
{
  return sub_10002A36C(&qword_100109288, &qword_100109240, (void (*)(void))sub_1000682F8);
}

unint64_t sub_1000682F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100109290;
  if (!qword_100109290)
  {
    v1 = sub_100008F80(&qword_100109238);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100109290);
  }
  return result;
}

uint64_t *sub_100068344(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t, __n128);
  __n128 v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = *(int *)(a3 + 24);
    v16 = (char *)v4 + v14;
    v17 = (char *)a2 + v14;
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v18;
    v16[16] = v17[16];
    v19 = *((_QWORD *)v17 + 3);
    *((_QWORD *)v16 + 3) = v19;
    v16[32] = v17[32];
    v20 = *((_QWORD *)v17 + 5);
    *((_QWORD *)v16 + 5) = v20;
    v16[48] = v17[48];
    v21 = (char *)v4 + v15;
    v22 = (char *)a2 + v15;
    v23 = type metadata accessor for ContentTransition(0);
    v24 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v23 - 8) + 16);
    swift_bridgeObjectRetain(v18);
    swift_retain(v19);
    v25 = swift_retain(v20);
    v24(v21, v22, v23, v25);
    v26 = (int *)type metadata accessor for SportsWidgetPlayByPlayLayout(0);
    *(_QWORD *)&v21[v26[5]] = *(_QWORD *)&v22[v26[5]];
    *(_QWORD *)&v21[v26[6]] = *(_QWORD *)&v22[v26[6]];
    v27 = v26[7];
    v28 = *(_QWORD *)&v22[v27];
    *(_QWORD *)&v21[v27] = v28;
    v29 = v26[8];
    v30 = *(_QWORD *)&v22[v29];
    *(_QWORD *)&v21[v29] = v30;
    *(_QWORD *)&v21[v26[9]] = *(_QWORD *)&v22[v26[9]];
    *(_QWORD *)&v21[v26[10]] = *(_QWORD *)&v22[v26[10]];
    *(_QWORD *)&v21[v26[11]] = *(_QWORD *)&v22[v26[11]];
    v31 = v26[12];
    v12 = *(_QWORD *)&v22[v31];
    *(_QWORD *)&v21[v31] = v12;
    *(_QWORD *)&v21[v26[13]] = *(_QWORD *)&v22[v26[13]];
    *(_QWORD *)&v21[v26[14]] = *(_QWORD *)&v22[v26[14]];
    swift_retain(v28);
    swift_retain(v30);
  }
  swift_retain(v12);
  return v4;
}

uint64_t sub_100068534(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  int *v9;

  v4 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v6[1]);
  swift_release(v6[3]);
  swift_release(v6[5]);
  v7 = (char *)a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for ContentTransition(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (int *)type metadata accessor for SportsWidgetPlayByPlayLayout(0);
  swift_release(*(_QWORD *)&v7[v9[7]]);
  swift_release(*(_QWORD *)&v7[v9[8]]);
  return swift_release(*(_QWORD *)&v7[v9[12]]);
}

uint64_t *sub_100068614(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t, __n128);
  __n128 v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v14[16] = v15[16];
  v17 = *((_QWORD *)v15 + 3);
  *((_QWORD *)v14 + 3) = v17;
  v14[32] = v15[32];
  v18 = *((_QWORD *)v15 + 5);
  *((_QWORD *)v14 + 5) = v18;
  v14[48] = v15[48];
  v19 = (char *)a1 + v13;
  v20 = (char *)a2 + v13;
  v21 = type metadata accessor for ContentTransition(0);
  v22 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v21 - 8) + 16);
  swift_bridgeObjectRetain(v16);
  swift_retain(v17);
  v23 = swift_retain(v18);
  v22(v19, v20, v21, v23);
  v24 = (int *)type metadata accessor for SportsWidgetPlayByPlayLayout(0);
  *(_QWORD *)&v19[v24[5]] = *(_QWORD *)&v20[v24[5]];
  *(_QWORD *)&v19[v24[6]] = *(_QWORD *)&v20[v24[6]];
  v25 = v24[7];
  v26 = *(_QWORD *)&v20[v25];
  *(_QWORD *)&v19[v25] = v26;
  v27 = v24[8];
  v28 = *(_QWORD *)&v20[v27];
  *(_QWORD *)&v19[v27] = v28;
  *(_QWORD *)&v19[v24[9]] = *(_QWORD *)&v20[v24[9]];
  *(_QWORD *)&v19[v24[10]] = *(_QWORD *)&v20[v24[10]];
  *(_QWORD *)&v19[v24[11]] = *(_QWORD *)&v20[v24[11]];
  v29 = v24[12];
  v30 = *(_QWORD *)&v20[v29];
  *(_QWORD *)&v19[v29] = v30;
  *(_QWORD *)&v19[v24[13]] = *(_QWORD *)&v20[v24[13]];
  *(_QWORD *)&v19[v24[14]] = *(_QWORD *)&v20[v24[14]];
  swift_retain(v26);
  swift_retain(v28);
  swift_retain(v30);
  return a1;
}

uint64_t *sub_1000687DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a1 != a2)
  {
    sub_1000135A0((uint64_t)a1, &qword_100105F38);
    v6 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(uint64_t *)((char *)a2 + v12);
  v15 = *(uint64_t *)((char *)a2 + v12 + 8);
  v16 = *(uint64_t *)((char *)a1 + v12 + 8);
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v13[16] = v14[16];
  v17 = *((_QWORD *)v14 + 3);
  v18 = *((_QWORD *)v13 + 3);
  *((_QWORD *)v13 + 3) = v17;
  swift_retain(v17);
  swift_release(v18);
  v13[32] = v14[32];
  v19 = *((_QWORD *)v14 + 5);
  v20 = *((_QWORD *)v13 + 5);
  *((_QWORD *)v13 + 5) = v19;
  swift_retain(v19);
  swift_release(v20);
  v13[48] = v14[48];
  v21 = *(int *)(a3 + 24);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for ContentTransition(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  v25 = (int *)type metadata accessor for SportsWidgetPlayByPlayLayout(0);
  *(_QWORD *)&v22[v25[5]] = *(_QWORD *)&v23[v25[5]];
  *(_QWORD *)&v22[v25[6]] = *(_QWORD *)&v23[v25[6]];
  v26 = v25[7];
  v27 = *(_QWORD *)&v23[v26];
  v28 = *(_QWORD *)&v22[v26];
  *(_QWORD *)&v22[v26] = v27;
  swift_retain(v27);
  swift_release(v28);
  v29 = v25[8];
  v30 = *(_QWORD *)&v23[v29];
  v31 = *(_QWORD *)&v22[v29];
  *(_QWORD *)&v22[v29] = v30;
  swift_retain(v30);
  swift_release(v31);
  *(_QWORD *)&v22[v25[9]] = *(_QWORD *)&v23[v25[9]];
  *(_QWORD *)&v22[v25[10]] = *(_QWORD *)&v23[v25[10]];
  *(_QWORD *)&v22[v25[11]] = *(_QWORD *)&v23[v25[11]];
  v32 = v25[12];
  v33 = *(_QWORD *)&v23[v32];
  v34 = *(_QWORD *)&v22[v32];
  *(_QWORD *)&v22[v32] = v33;
  swift_retain(v33);
  swift_release(v34);
  *(_QWORD *)&v22[v25[13]] = *(_QWORD *)&v23[v25[13]];
  *(_QWORD *)&v22[v25[14]] = *(_QWORD *)&v23[v25[14]];
  return a1;
}

char *sub_1000689F0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;

  v6 = sub_100008EF4(&qword_100105F38);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
  v10[48] = v11[48];
  v13 = &a1[v9];
  v14 = &a2[v9];
  v15 = type metadata accessor for ContentTransition(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = (int *)type metadata accessor for SportsWidgetPlayByPlayLayout(0);
  *(_QWORD *)&v13[v16[5]] = *(_QWORD *)&v14[v16[5]];
  *(_QWORD *)&v13[v16[6]] = *(_QWORD *)&v14[v16[6]];
  *(_QWORD *)&v13[v16[7]] = *(_QWORD *)&v14[v16[7]];
  *(_QWORD *)&v13[v16[8]] = *(_QWORD *)&v14[v16[8]];
  *(_QWORD *)&v13[v16[9]] = *(_QWORD *)&v14[v16[9]];
  *(_QWORD *)&v13[v16[10]] = *(_QWORD *)&v14[v16[10]];
  *(_QWORD *)&v13[v16[11]] = *(_QWORD *)&v14[v16[11]];
  *(_QWORD *)&v13[v16[12]] = *(_QWORD *)&v14[v16[12]];
  *(_QWORD *)&v13[v16[13]] = *(_QWORD *)&v14[v16[13]];
  *(_QWORD *)&v13[v16[14]] = *(_QWORD *)&v14[v16[14]];
  return a1;
}

char *sub_100068B58(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    sub_1000135A0((uint64_t)a1, &qword_100105F38);
    v6 = sub_100008EF4(&qword_100105F38);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a2[v8 + 8];
  v12 = *(_QWORD *)&a1[v8 + 8];
  *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease(v12);
  v9[16] = v10[16];
  v13 = *((_QWORD *)v9 + 3);
  *((_QWORD *)v9 + 3) = *((_QWORD *)v10 + 3);
  swift_release(v13);
  v9[32] = v10[32];
  v14 = *((_QWORD *)v9 + 5);
  *((_QWORD *)v9 + 5) = *((_QWORD *)v10 + 5);
  swift_release(v14);
  v9[48] = v10[48];
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for ContentTransition(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = (int *)type metadata accessor for SportsWidgetPlayByPlayLayout(0);
  *(_QWORD *)&v16[v19[5]] = *(_QWORD *)&v17[v19[5]];
  *(_QWORD *)&v16[v19[6]] = *(_QWORD *)&v17[v19[6]];
  v20 = v19[7];
  v21 = *(_QWORD *)&v16[v20];
  *(_QWORD *)&v16[v20] = *(_QWORD *)&v17[v20];
  swift_release(v21);
  v22 = v19[8];
  v23 = *(_QWORD *)&v16[v22];
  *(_QWORD *)&v16[v22] = *(_QWORD *)&v17[v22];
  swift_release(v23);
  *(_QWORD *)&v16[v19[9]] = *(_QWORD *)&v17[v19[9]];
  *(_QWORD *)&v16[v19[10]] = *(_QWORD *)&v17[v19[10]];
  *(_QWORD *)&v16[v19[11]] = *(_QWORD *)&v17[v19[11]];
  v24 = v19[12];
  v25 = *(_QWORD *)&v16[v24];
  *(_QWORD *)&v16[v24] = *(_QWORD *)&v17[v24];
  swift_release(v25);
  *(_QWORD *)&v16[v19[13]] = *(_QWORD *)&v17[v19[13]];
  *(_QWORD *)&v16[v19[14]] = *(_QWORD *)&v17[v19[14]];
  return a1;
}

uint64_t sub_100068D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100068D3C);
}

uint64_t sub_100068D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_100008EF4(&qword_100105F58);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for SportsWidgetPlayByPlayLayout(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100068DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100068DF8);
}

uint64_t sub_100068DF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_100008EF4(&qword_100105F58);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for SportsWidgetPlayByPlayLayout(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SportsWidgetPlayByPlayView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001092F0;
  if (!qword_1001092F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SportsWidgetPlayByPlayView);
  return result;
}

void sub_100068EE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_10000C6C4(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "1";
    v4 = type metadata accessor for SportsWidgetPlayByPlayLayout(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_100068F6C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2B94, 1);
}

uint64_t sub_100068F7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v2 = v1;
  v4 = sub_100008EF4(&qword_100109330);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008EF4(&qword_100109338);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008EF4(&qword_100109340);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v11);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v14 = sub_100008EF4(&qword_100109348);
  sub_10006916C(v2, &v6[*(int *)(v14 + 44)]);
  sub_10001355C((uint64_t)v6, (uint64_t)v9, &qword_100109330);
  sub_1000135A0((uint64_t)v6, &qword_100109330);
  v15 = v2 + *(int *)(type metadata accessor for SportsWidgetPlayByPlayView(0) + 24);
  v16 = type metadata accessor for SportsWidgetPlayByPlayLayout(0);
  v17 = static Animation.easeInOut(duration:)(*(double *)(v15 + *(int *)(v16 + 20)));
  v18 = static ContentTransition.Options.animatesDifferentContent.getter();
  v19 = static ContentTransition.Options.addsDrawingGroup.getter();
  if (v18)
  {
    if ((v19 & ~v18) == 0)
      goto LABEL_7;
  }
  else if (!v19)
  {
    v18 = 0;
    goto LABEL_7;
  }
  v18 |= v19;
LABEL_7:
  v20 = &v13[*(int *)(v10 + 36)];
  v21 = type metadata accessor for ContentTransition(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v20, v15, v21);
  v22 = type metadata accessor for _ContentTransitionModifier(0);
  *(_QWORD *)&v20[*(int *)(v22 + 20)] = v17;
  *(_DWORD *)&v20[*(int *)(v22 + 24)] = v18;
  sub_100013880((uint64_t)v9, (uint64_t)v13, &qword_100109338);
  return sub_100013880((uint64_t)v13, a1, &qword_100109340);
}

uint64_t sub_10006916C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t (*v146)(char *, uint64_t);
  uint64_t v147;
  _OWORD v148[9];
  uint64_t v149;
  _OWORD v150[9];
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 v153;
  uint64_t v154;
  unsigned __int8 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;

  v145 = a2;
  v3 = sub_100008EF4(&qword_100109350);
  v126 = *(_QWORD *)(v3 - 8);
  v127 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v123 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100008EF4(&qword_100109358);
  __chkstk_darwin(v125);
  v7 = (char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100008EF4(&qword_100109360);
  __chkstk_darwin(v128);
  v130 = (uint64_t)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100008EF4(&qword_100109368);
  __chkstk_darwin(v129);
  v140 = (uint64_t)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100008EF4(&qword_100109370);
  __chkstk_darwin(v137);
  v142 = (uint64_t)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100008EF4(&qword_100109378);
  v11 = __chkstk_darwin(v141);
  v144 = (uint64_t)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v139 = (uint64_t)&v123 - v14;
  __chkstk_darwin(v13);
  v143 = (uint64_t)&v123 - v15;
  v16 = type metadata accessor for DynamicTypeSize(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v138 = (uint64_t)&v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v123 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v123 - v23;
  v25 = sub_10009FD4C((uint64_t)&v123 - v23);
  v26 = DynamicTypeSize.isAccessibilitySize.getter(v25);
  v146 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
  v147 = v16;
  v27 = v146(v24, v16);
  if ((v26 & 1) != 0)
    v28 = 0x4032000000000000;
  else
    v28 = 0;
  v29 = static Alignment.center.getter(v27);
  _FrameLayout.init(width:height:alignment:)(&v152, 0, 1, v28, 0, v29, v30);
  v136 = v152;
  v135 = v153;
  v134 = v154;
  v133 = v155;
  v131 = v157;
  v132 = v156;
  v31 = a1;
  v32 = sub_100069990((uint64_t)v5);
  v33 = static Edge.Set.leading.getter(v32);
  v34 = v33;
  v35 = static Edge.Set.trailing.getter(v33);
  v36 = Edge.Set.init(rawValue:)(0);
  v37 = Edge.Set.init(rawValue:)(v36);
  if (Edge.Set.init(rawValue:)(v37 & v34) != v34)
    v36 = Edge.Set.init(rawValue:)(v36 | v34);
  v38 = Edge.Set.init(rawValue:)(v36);
  if (Edge.Set.init(rawValue:)(v38 & v35) != v35)
    LOBYTE(v36) = Edge.Set.init(rawValue:)(v36 | v35);
  v39 = type metadata accessor for SportsWidgetPlayByPlayView(0);
  v40 = a1 + *(int *)(v39 + 24);
  v41 = type metadata accessor for SportsWidgetPlayByPlayLayout(0);
  v42 = EdgeInsets.init(_all:)(*(double *)(v40 + *(int *)(v41 + 36)));
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v50 = v126;
  v49 = v127;
  (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v7, v5, v127);
  v51 = &v7[*(int *)(v125 + 36)];
  *v51 = v36;
  *((double *)v51 + 1) = v42;
  *((_QWORD *)v51 + 2) = v44;
  *((_QWORD *)v51 + 3) = v46;
  *((_QWORD *)v51 + 4) = v48;
  v51[40] = 0;
  v52 = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v5, v49);
  v53 = static Edge.Set.top.getter(v52);
  v54 = v53;
  v55 = static Edge.Set.bottom.getter(v53);
  v56 = Edge.Set.init(rawValue:)(0);
  v57 = Edge.Set.init(rawValue:)(v56);
  if (Edge.Set.init(rawValue:)(v57 & v54) != v54)
    v56 = Edge.Set.init(rawValue:)(v56 | v54);
  v58 = Edge.Set.init(rawValue:)(v56);
  if (Edge.Set.init(rawValue:)(v58 & v55) != v55)
    LOBYTE(v56) = Edge.Set.init(rawValue:)(v56 | v55);
  v59 = sub_10009FD4C((uint64_t)v22);
  if ((DynamicTypeSize.isAccessibilitySize.getter(v59) & 1) != 0)
    v60 = 0.0;
  else
    v60 = 10.0;
  v146(v22, v147);
  v61 = EdgeInsets.init(_all:)(v60);
  v63 = v62;
  v65 = v64;
  v67 = v66;
  v68 = v130;
  sub_10001355C((uint64_t)v7, v130, &qword_100109358);
  v69 = v68 + *(int *)(v128 + 36);
  *(_BYTE *)v69 = v56;
  *(double *)(v69 + 8) = v61;
  *(_QWORD *)(v69 + 16) = v63;
  *(_QWORD *)(v69 + 24) = v65;
  *(_QWORD *)(v69 + 32) = v67;
  *(_BYTE *)(v69 + 40) = 0;
  v70 = sub_1000135A0((uint64_t)v7, &qword_100109358);
  v71 = *(int *)(v39 + 20);
  v124 = v31;
  v72 = v31 + v71;
  v73 = *(_QWORD *)(v31 + v71 + 24);
  v74 = static Alignment.center.getter(v70);
  v76 = v75;
  sub_100069DF0(v31, 1, v73, (uint64_t)v150);
  v78 = 1.0;
  if (*(_BYTE *)(v72 + 16))
    v79 = 1.0;
  else
    v79 = 0.0;
  v80 = static Alignment.center.getter(v77);
  v82 = v81;
  v83 = v140;
  sub_10001355C(v68, v140, &qword_100109360);
  v84 = v83 + *(int *)(v129 + 36);
  *(_QWORD *)v84 = v74;
  *(_QWORD *)(v84 + 8) = v76;
  v85 = v150[7];
  *(_OWORD *)(v84 + 112) = v150[6];
  *(_OWORD *)(v84 + 128) = v85;
  *(_OWORD *)(v84 + 144) = v150[8];
  *(_QWORD *)(v84 + 160) = v151;
  v86 = v150[3];
  *(_OWORD *)(v84 + 48) = v150[2];
  *(_OWORD *)(v84 + 64) = v86;
  v87 = v150[5];
  *(_OWORD *)(v84 + 80) = v150[4];
  *(_OWORD *)(v84 + 96) = v87;
  v88 = v150[1];
  *(_OWORD *)(v84 + 16) = v150[0];
  *(_OWORD *)(v84 + 32) = v88;
  *(_BYTE *)(v84 + 168) = 1;
  *(double *)(v84 + 176) = v79;
  *(_QWORD *)(v84 + 184) = v80;
  *(_QWORD *)(v84 + 192) = v82;
  v89 = sub_1000135A0(v68, &qword_100109360);
  v90 = *(_QWORD *)(v72 + 40);
  v91 = static Alignment.center.getter(v89);
  v93 = v92;
  sub_100069DF0(v124, 3, v90, (uint64_t)v148);
  if (!*(_BYTE *)(v72 + 32))
    v78 = 0.0;
  v95 = static Alignment.center.getter(v94);
  v97 = v96;
  v98 = v142;
  sub_10001355C(v83, v142, &qword_100109368);
  v99 = v98 + *(int *)(v137 + 36);
  *(_QWORD *)v99 = v91;
  *(_QWORD *)(v99 + 8) = v93;
  v100 = v148[7];
  *(_OWORD *)(v99 + 112) = v148[6];
  *(_OWORD *)(v99 + 128) = v100;
  *(_OWORD *)(v99 + 144) = v148[8];
  *(_QWORD *)(v99 + 160) = v149;
  v101 = v148[3];
  *(_OWORD *)(v99 + 48) = v148[2];
  *(_OWORD *)(v99 + 64) = v101;
  v102 = v148[5];
  *(_OWORD *)(v99 + 80) = v148[4];
  *(_OWORD *)(v99 + 96) = v102;
  v103 = v148[1];
  *(_OWORD *)(v99 + 16) = v148[0];
  *(_OWORD *)(v99 + 32) = v103;
  *(_BYTE *)(v99 + 168) = 1;
  *(double *)(v99 + 176) = v78;
  *(_QWORD *)(v99 + 184) = v95;
  *(_QWORD *)(v99 + 192) = v97;
  sub_1000135A0(v83, &qword_100109368);
  v104 = v139;
  sub_10001355C(v98, v139, &qword_100109370);
  *(_WORD *)(v104 + *(int *)(v141 + 36)) = 0;
  sub_1000135A0(v98, &qword_100109370);
  v105 = v104;
  v106 = v143;
  sub_100013880(v105, v143, &qword_100109378);
  v107 = v138;
  v108 = sub_10009FD4C(v138);
  LOBYTE(v95) = DynamicTypeSize.isAccessibilitySize.getter(v108);
  v109 = v146((char *)v107, v147);
  if ((v95 & 1) != 0)
    v110 = 0x4032000000000000;
  else
    v110 = 0;
  v111 = static Alignment.center.getter(v109);
  _FrameLayout.init(width:height:alignment:)(&v158, 0, 1, v110, 0, v111, v112);
  v147 = v158;
  LODWORD(v146) = v159;
  v113 = v160;
  v114 = v161;
  v115 = v162;
  v116 = v163;
  v117 = v144;
  sub_10001355C(v106, v144, &qword_100109378);
  v118 = v145;
  *v145 = 0;
  *((_BYTE *)v118 + 8) = 1;
  v118[2] = v136;
  *((_BYTE *)v118 + 24) = v135;
  v118[4] = v134;
  *((_BYTE *)v118 + 40) = v133;
  v119 = v131;
  v118[6] = v132;
  v118[7] = v119;
  v120 = sub_100008EF4(&qword_100109380);
  sub_10001355C(v117, (uint64_t)v118 + *(int *)(v120 + 48), &qword_100109378);
  v121 = (char *)v118 + *(int *)(v120 + 64);
  *(_QWORD *)v121 = 0;
  v121[8] = 1;
  *((_QWORD *)v121 + 2) = v147;
  v121[24] = (char)v146;
  *((_QWORD *)v121 + 4) = v113;
  v121[40] = v114;
  *((_QWORD *)v121 + 6) = v115;
  *((_QWORD *)v121 + 7) = v116;
  sub_1000135A0(v106, &qword_100109378);
  return sub_1000135A0(v117, &qword_100109378);
}

uint64_t sub_100069990@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t (*v36)(char *, uint64_t, __n128);
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;

  v2 = v1;
  v64 = a1;
  v54 = type metadata accessor for DynamicTypeSize(0);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v51 = (uint64_t)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100008EF4(&qword_100109388);
  v56 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v53 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100008EF4(&qword_100109390);
  __chkstk_darwin(v55);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100008EF4(&qword_100109398);
  __chkstk_darwin(v57);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100008EF4(&qword_1001093A0);
  __chkstk_darwin(v63);
  v62 = (uint64_t)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008EF4(&qword_100109350);
  v60 = *(_QWORD *)(v10 - 8);
  v61 = v10;
  __chkstk_darwin(v10);
  v59 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SportsWidgetPlayByPlayView(0);
  v13 = v1 + *(int *)(v12 + 20);
  v14 = *(_QWORD *)(v13 + 8);
  v65 = *(_QWORD *)v13;
  v66 = v14;
  v15 = sub_100013080();
  swift_bridgeObjectRetain(v14);
  v16 = Text.init<A>(_:)(&v65, &type metadata for String, v15);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = (*(_BYTE *)(v13 + 48) & 1) == 0;
  KeyPath = swift_getKeyPath(&unk_1000CBD58);
  v65 = v16;
  v66 = v18;
  v67 = v20 & 1;
  v68 = v22;
  v69 = KeyPath;
  v70 = v23;
  v25 = v51;
  sub_10009FD4C(v51);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v25, v54);
  v26 = sub_100008EF4(&qword_1001093A8);
  v27 = sub_10006A40C();
  v28 = v53;
  View.lineLimit(_:reservesSpace:)(2, 1, v26, v27);
  sub_1000130C4(v65, v66, v67);
  swift_bridgeObjectRelease(v68);
  swift_release(v69);
  v29 = v2 + *(int *)(v12 + 24);
  v30 = type metadata accessor for SportsWidgetPlayByPlayLayout(0);
  v31 = *(_QWORD *)(v29 + *(int *)(v30 + 28));
  v32 = swift_getKeyPath(&unk_1000CBD88);
  v33 = v56;
  v34 = v58;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v6, v28, v58);
  v35 = (uint64_t *)&v6[*(int *)(v55 + 36)];
  *v35 = v32;
  v35[1] = v31;
  v36 = *(uint64_t (**)(char *, uint64_t, __n128))(v33 + 8);
  v37 = swift_retain(v31);
  v38 = v36(v28, v34, v37);
  v39 = static Font.subheadline.getter(v38);
  v40 = swift_getKeyPath(&unk_1000CBDB8);
  sub_10001355C((uint64_t)v6, (uint64_t)v8, &qword_100109390);
  v41 = (uint64_t *)&v8[*(int *)(v57 + 36)];
  *v41 = v40;
  v41[1] = v39;
  v42 = sub_1000135A0((uint64_t)v6, &qword_100109390);
  v43 = *(double *)(v29 + *(int *)(v30 + 24));
  if (*(_BYTE *)(v13 + 48) == 1)
    v44 = static Alignment.leading.getter(v42);
  else
    v44 = static Alignment.center.getter(v42);
  v46 = v62;
  sub_100096338(0.0, 1, 0.0, 1, v43, 0, 0.0, 1, v62, 0.0, 1, 0.0, 1, v44, v45);
  sub_1000135A0((uint64_t)v8, &qword_100109398);
  v47 = sub_10002A36C(&qword_1001093B8, &qword_1001093A0, (void (*)(void))sub_10006A4A0);
  v48 = v59;
  View.accessibilityIdentifier(key:location:)(18, 0, 14, 2, v63, v47);
  sub_1000135A0(v46, &qword_1001093A0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v60 + 32))(v64, v48, v61);
}

double sub_100069DF0@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  void (*v20)(char *, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  double result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  __int16 v44;
  _BYTE v45[11];
  __int16 v46;
  _BYTE v47[7];
  _QWORD v48[6];

  v40 = a3;
  v42 = a2;
  v39 = type metadata accessor for DynamicTypeSize(0);
  v6 = *(_QWORD *)(v39 - 8);
  v7 = __chkstk_darwin(v39);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v38 - v10;
  v12 = a1 + *(int *)(type metadata accessor for SportsWidgetPlayByPlayView(0) + 24);
  v13 = (int *)type metadata accessor for SportsWidgetPlayByPlayLayout(0);
  v14 = v13[10];
  v41 = *(_QWORD *)(v12 + v14);
  v15 = v13[14];
  v16 = *(_QWORD *)(v12 + v15);
  v17 = sub_10009FD4C((uint64_t)v11);
  v18 = 0.0;
  if ((DynamicTypeSize.isAccessibilitySize.getter(v17) & 1) != 0)
    v19 = 0.0;
  else
    v19 = 8.0;
  v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21 = v11;
  v22 = v39;
  v20(v21, v39);
  v23 = *(_QWORD *)(v12 + v14);
  v24 = *(_QWORD *)(v12 + v15);
  v25 = v40;
  swift_retain(v40);
  v26 = sub_10009FD4C((uint64_t)v9);
  if ((DynamicTypeSize.isAccessibilitySize.getter(v26) & 1) == 0)
    v18 = 8.0;
  v20(v9, v22);
  v27 = *(_QWORD *)(v12 + v13[12]);
  v28 = *(double *)(v12 + v13[13]);
  swift_retain(v27);
  v29 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v48, 0, 0, _swiftEmptyArrayStorage, v28, 10.0, 0.0);
  v30 = v48[0];
  v31 = v48[2];
  v32 = v48[3];
  v33 = v48[4];
  v34 = static Alignment.center.getter(v29);
  *(_DWORD *)(a4 + 9) = *(_DWORD *)v47;
  *(_DWORD *)(a4 + 12) = *(_DWORD *)&v47[3];
  *(_DWORD *)(a4 + 42) = *(_DWORD *)&v45[7];
  *(_WORD *)(a4 + 46) = v46;
  *(_DWORD *)(a4 + 57) = *(_DWORD *)v45;
  *(_DWORD *)(a4 + 60) = *(_DWORD *)&v45[3];
  *(_WORD *)(a4 + 134) = v44;
  v35 = v42;
  *(_DWORD *)(a4 + 130) = v43;
  *(_QWORD *)a4 = v41;
  *(_BYTE *)(a4 + 8) = v35;
  *(_QWORD *)(a4 + 16) = v16;
  *(double *)(a4 + 24) = v19;
  *(_QWORD *)(a4 + 32) = v25;
  *(_WORD *)(a4 + 40) = 256;
  *(_QWORD *)(a4 + 48) = v23;
  *(_BYTE *)(a4 + 56) = v35;
  *(_QWORD *)(a4 + 64) = v24;
  *(double *)(a4 + 72) = v18;
  result = *(double *)&v48[1];
  *(_QWORD *)(a4 + 80) = v30;
  *(double *)(a4 + 88) = result;
  *(_QWORD *)(a4 + 96) = v31;
  *(_QWORD *)(a4 + 104) = v32;
  *(_QWORD *)(a4 + 112) = v33;
  *(_QWORD *)(a4 + 120) = v27;
  *(_WORD *)(a4 + 128) = 256;
  *(_QWORD *)(a4 + 136) = v34;
  *(_QWORD *)(a4 + 144) = v37;
  return result;
}

void sub_10006A030(char a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedCornerStyle(0);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

uint64_t sub_10006A0D8()
{
  unsigned __int8 v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGRect v6;

  v6.origin.x = v4;
  v6.origin.y = v3;
  v6.size.width = v2;
  v6.size.height = v1;
  CGRectGetWidth(v6);
  return ((uint64_t (*)(void))((char *)sub_10006A110 + 4 * byte_1000CBCA4[v0]))();
}

__n128 sub_10006A110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  CGFloat v7;
  uint64_t v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  double MaxY;
  double v21;
  double Width;
  double v23;
  double v24;
  __n128 result;
  __int128 v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;

  *(_QWORD *)(v5 - 168) = v8;
  v27.origin.x = v11;
  v27.origin.y = v10;
  v27.size.width = v9;
  v27.size.height = v7;
  v13 = v12 + v12;
  v14 = CGRectGetHeight(v27) - (v12 + v12);
  if (v3 >= 3u)
  {
    v31.origin.x = v11;
    v31.origin.y = v10;
    v31.size.width = v9;
    v31.size.height = v7;
    *(CGFloat *)(v5 - 160) = CGRectGetMaxX(v31) - v6 - *(double *)(v5 - 160);
    v32.origin.x = v11;
    v32.origin.y = v10;
    v32.size.width = v9;
    v32.size.height = v7;
    v21 = CGRectGetMinY(v32) + v12;
    goto LABEL_7;
  }
  v15 = *(double *)(v5 - 168);
  v28.origin.x = v11;
  v28.origin.y = v10;
  v28.size.width = v9;
  v28.size.height = v7;
  *(CGFloat *)(v5 - 160) = CGRectGetMinX(v28) + *(double *)(v5 - 160);
  v16 = v11;
  v17 = v10;
  v18 = v9;
  v19 = v7;
  if (v3 == 2)
  {
    MaxY = CGRectGetMaxY(*(CGRect *)&v16);
    v29.origin.x = v11;
    v29.origin.y = v10;
    v29.size.width = v9;
    v29.size.height = v7;
    v21 = MaxY - CGRectGetWidth(v29);
    v30.origin.x = v11;
    v30.origin.y = v10;
    v30.size.width = v9;
    v30.size.height = v7;
    Width = CGRectGetWidth(v30);
    goto LABEL_9;
  }
  *(CGFloat *)(v5 - 176) = CGRectGetMinY(*(CGRect *)&v16) + v12;
  if (v3)
  {
    *(double *)(v5 - 168) = v15;
    v13 = v12 + v12;
    v21 = *(double *)(v5 - 176);
LABEL_7:
    v33.origin.x = v11;
    v33.origin.y = v10;
    v33.size.width = v9;
    v33.size.height = v7;
    Width = v6;
    v6 = CGRectGetHeight(v33) - v13;
    v15 = *(double *)(v5 - 168);
    goto LABEL_9;
  }
  v34.origin.x = v11;
  v34.origin.y = v10;
  v34.size.width = v9;
  v34.size.height = v7;
  Width = CGRectGetWidth(v34);
  v21 = *(double *)(v5 - 176);
LABEL_9:
  if (v14 >= v15)
    v23 = v15;
  else
    v23 = v14;
  v24 = v23 * 0.5;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, enum case for RoundedCornerStyle.continuous(_:), v1);
  ((void (*)(uint64_t, double, double, double, double, double))Path.init(roundedRect:cornerRadius:style:))(v2, *(double *)(v5 - 160), v21, Width, v6, v24);
  result = *(__n128 *)(v5 - 152);
  v26 = *(_OWORD *)(v5 - 136);
  *(__n128 *)v0 = result;
  *(_OWORD *)(v0 + 16) = v26;
  *(_BYTE *)(v0 + 32) = *(_BYTE *)(v5 - 120);
  return result;
}

double sub_10006A2E0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;
  __int128 v5;
  char v6;

  sub_10006A030(*(_BYTE *)(v1 + 8));
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_10006A32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006A7DC();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10006A37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006A7DC();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10006A3CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A7DC();
  return Shape.body.getter(a1, v2);
}

unint64_t sub_10006A40C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001093B0;
  if (!qword_1001093B0)
  {
    v1 = sub_100008F80(&qword_1001093A8);
    sub_100013840(&qword_100106180, &qword_100106188, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001093B0);
  }
  return result;
}

unint64_t sub_10006A4A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001093C0;
  if (!qword_1001093C0)
  {
    v1 = sub_100008F80(&qword_100109398);
    sub_10006A524();
    sub_100013840(&qword_100108728, &qword_100108730, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001093C0);
  }
  return result;
}

unint64_t sub_10006A524()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001093C8;
  if (!qword_1001093C8)
  {
    v1 = sub_100008F80(&qword_100109390);
    v2[0] = sub_100008F80(&qword_1001093A8);
    v2[1] = sub_10006A40C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.lineLimit(_:reservesSpace:)>>, 1);
    sub_100013840(&qword_100108F30, &qword_100108F18, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001093C8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CapsuleEdgeBorder(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CapsuleEdgeBorder(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for CapsuleEdgeBorder()
{
  return &type metadata for CapsuleEdgeBorder;
}

uint64_t sub_10006A668()
{
  return sub_10002A36C(&qword_1001093D0, &qword_100109340, (void (*)(void))sub_10006A69C);
}

unint64_t sub_10006A69C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001093D8;
  if (!qword_1001093D8)
  {
    v1 = sub_100008F80(&qword_100109338);
    sub_100013840(&qword_1001093E0, &qword_100109330, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001093D8);
  }
  return result;
}

uint64_t sub_10006A720()
{
  return sub_100013840(&qword_1001093E8, &qword_1001093F0, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
}

unint64_t sub_10006A750()
{
  unint64_t result;

  result = qword_1001093F8;
  if (!qword_1001093F8)
  {
    result = swift_getWitnessTable(&unk_1000CBE54, &type metadata for CapsuleEdgeBorder);
    atomic_store(result, (unint64_t *)&qword_1001093F8);
  }
  return result;
}

unint64_t sub_10006A798()
{
  unint64_t result;

  result = qword_100109400;
  if (!qword_100109400)
  {
    result = swift_getWitnessTable(&unk_1000CBE04, &type metadata for CapsuleEdgeBorder);
    atomic_store(result, (unint64_t *)&qword_100109400);
  }
  return result;
}

unint64_t sub_10006A7DC()
{
  unint64_t result;

  result = qword_100109408;
  if (!qword_100109408)
  {
    result = swift_getWitnessTable(&unk_1000CBEA4, &type metadata for CapsuleEdgeBorder);
    atomic_store(result, (unint64_t *)&qword_100109408);
  }
  return result;
}

id sub_10006A820()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TVWidgetCache(0)), "init");
  qword_10011F008 = (uint64_t)result;
  return result;
}

id sub_10006A8F0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TVWidgetCache(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10006A970()
{
  return type metadata accessor for TVWidgetCache(0);
}

uint64_t type metadata accessor for TVWidgetCache(uint64_t a1)
{
  uint64_t result;

  result = qword_100109448;
  if (!qword_100109448)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TVWidgetCache);
  return result;
}

void sub_10006A9B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_10001EBC0(319, &qword_100109458, type metadata accessor for TVWidgetEntry);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001EBC0(319, (unint64_t *)&qword_100106B58, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

uint64_t sub_10006AA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t result;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _BYTE v26[24];

  v1 = v0;
  v2 = sub_100008EF4(&qword_100105F48);
  __chkstk_darwin(v2);
  v4 = &v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = __chkstk_darwin(v7);
  v12 = &v26[-v11 - 8];
  __chkstk_darwin(v10);
  v14 = &v26[-v13 - 8];
  v15 = v1 + OBJC_IVAR____TtC17TVWidgetExtension13TVWidgetCache_lastKnownWidgetEntryDate;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17TVWidgetExtension13TVWidgetCache_lastKnownWidgetEntryDate, v26, 0, 0);
  sub_10001355C(v15, (uint64_t)v4, &qword_100105F48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000135A0((uint64_t)v4, &qword_100105F48);
  }
  else
  {
    v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v14, v4, v5);
    v17 = Date.init()(v16);
    Date.advanced(by:)(v17, 300.0);
    v18 = static Date.< infix(_:_:)(v12, v9);
    v19 = *(void (**)(char *, uint64_t))(v6 + 8);
    v19(v9, v5);
    v19(v12, v5);
    if ((v18 & 1) != 0)
    {
      result = (uint64_t)sub_100006398();
      if (result)
      {
        v21 = (void *)result;
        v22 = static os_log_type_t.default.getter(result);
        os_log(_:dso:log:type:_:)("WidgetCache::valid cached widget entry", 38, 2, &_mh_execute_header, v21, v22, _swiftEmptyArrayStorage);

        v19(v14, v5);
        return 1;
      }
      goto LABEL_11;
    }
    v19(v14, v5);
  }
  result = (uint64_t)sub_100006398();
  if (!result)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  v23 = (void *)result;
  v24 = static os_log_type_t.default.getter(result);
  os_log(_:dso:log:type:_:)("WidgetCache::expired cached widget entry", 40, 2, &_mh_execute_header, v23, v24, _swiftEmptyArrayStorage);

  sub_10006B028();
  return 0;
}

void sub_10006ACD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _BYTE v24[24];

  v3 = sub_100008EF4(&qword_100105F48);
  __chkstk_darwin(v3);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_100008EF4(&qword_100109460);
  v7 = __chkstk_darwin(v6);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v7);
  v11 = &v24[-v10 - 8];
  v12 = type metadata accessor for TVWidgetEntry(0);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48);
  v14 = v13(a1, 1, v12);
  v15 = sub_100006398();
  v23 = v15;
  if (v14 == 1)
  {
    if (v15)
    {
      v16 = static os_log_type_t.default.getter(v15);
      os_log(_:dso:log:type:_:)("WidgetCache::attempted to store nil widget entry, no-op", 55, 2, &_mh_execute_header, v23, v16, _swiftEmptyArrayStorage);

      return;
    }
    __break(1u);
    goto LABEL_10;
  }
  if (!v15)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v17 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:type:_:)("WidgetCache::storing widget entry in cache", 42, 2, &_mh_execute_header, v23, v17, _swiftEmptyArrayStorage);

  sub_10001355C(a1, (uint64_t)v11, &qword_100109460);
  v18 = v1 + OBJC_IVAR____TtC17TVWidgetExtension13TVWidgetCache_lastKnownWidgetEntry;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17TVWidgetExtension13TVWidgetCache_lastKnownWidgetEntry, v24, 33, 0);
  sub_10006AFA8((uint64_t)v11, v18, &qword_100109460);
  swift_endAccess(v24);
  sub_10001355C(a1, (uint64_t)v9, &qword_100109460);
  if (v13((uint64_t)v9, 1, v12) == 1)
  {
    sub_1000135A0((uint64_t)v9, &qword_100109460);
    v19 = type metadata accessor for Date(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v5, 1, 1, v19);
  }
  else
  {
    v20 = type metadata accessor for Date(0);
    v21 = *(_QWORD *)(v20 - 8);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 16))(v5, v9, v20);
    sub_10006AFEC((uint64_t)v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v5, 0, 1, v20);
  }
  v22 = v1 + OBJC_IVAR____TtC17TVWidgetExtension13TVWidgetCache_lastKnownWidgetEntryDate;
  swift_beginAccess(v22, v24, 33, 0);
  sub_10006AFA8((uint64_t)v5, v22, &qword_100105F48);
  swift_endAccess(v24);
}

uint64_t sub_10006AFA8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008EF4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006AFEC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TVWidgetEntry(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_10006B028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  id result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];

  v1 = sub_100008EF4(&qword_100105F48);
  __chkstk_darwin(v1);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = sub_100008EF4(&qword_100109460);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  result = sub_100006398();
  if (result)
  {
    v8 = result;
    v9 = static os_log_type_t.default.getter(result);
    os_log(_:dso:log:type:_:)("WidgetCache::purging cache", 26, 2, &_mh_execute_header, v8, v9, _swiftEmptyArrayStorage);

    v10 = type metadata accessor for TVWidgetEntry(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
    v11 = v0 + OBJC_IVAR____TtC17TVWidgetExtension13TVWidgetCache_lastKnownWidgetEntry;
    swift_beginAccess(v0 + OBJC_IVAR____TtC17TVWidgetExtension13TVWidgetCache_lastKnownWidgetEntry, v15, 33, 0);
    sub_10006AFA8((uint64_t)v6, v11, &qword_100109460);
    swift_endAccess(v15);
    v12 = type metadata accessor for Date(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v3, 1, 1, v12);
    v13 = v0 + OBJC_IVAR____TtC17TVWidgetExtension13TVWidgetCache_lastKnownWidgetEntryDate;
    swift_beginAccess(v13, v15, 33, 0);
    sub_10006AFA8((uint64_t)v3, v13, &qword_100105F48);
    return (id)swift_endAccess(v15);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_10006B1CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(_QWORD *)((char *)a2 + v8);
    *(_QWORD *)((char *)a1 + v8) = v10;
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    swift_bridgeObjectRetain(v10);
  }
  return a1;
}

uint64_t sub_10006B260(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_10006B2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_10006B30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10006B384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_10006B3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10006B458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006B464);
}

uint64_t sub_10006B464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10006B4EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B4F8);
}

uint64_t sub_10006B4F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for TVWidgetEntry(uint64_t a1)
{
  uint64_t result;

  result = qword_1001094C0;
  if (!qword_1001094C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TVWidgetEntry);
  return result;
}

uint64_t sub_10006B5AC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = &unk_1000CBF58;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10006B628()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10006B648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000324B4(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_10006B65C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v3 = *(_QWORD *)((char *)v1 + *(int *)(type metadata accessor for TVWidgetEntry(0) + 20));
  v4 = 0.0;
  if (v3)
  {
    if ((unint64_t)v3 >> 62)
    {
      if (v3 >= 0)
        v1 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFF8);
      else
        v1 = (_QWORD *)v3;
      swift_bridgeObjectRetain(v3);
      v5 = _CocoaArrayWrapper.endIndex.getter(v1);
      if (v5)
      {
LABEL_4:
        if (v5 < 1)
        {
          __break(1u);
        }
        else
        {
          if ((v3 & 0xC000000000000001) != 0)
          {
            for (i = 0; i != v5; ++i)
            {
              v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
              v9 = v7;
              v10 = *(unsigned __int8 *)(v7 + 74);
              if (v10 == 2 || (v10 & 1) == 0)
              {
                swift_unknownObjectRelease(v7);
              }
              else
              {
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
                v11 = _swiftEmptyArrayStorage[2];
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
                v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
                specialized ContiguousArray._endMutation()(v12);
              }
            }
          }
          else
          {
            v13 = (_QWORD *)(v3 + 32);
            do
            {
              v14 = *v13;
              if ((*(_BYTE *)(*v13 + 74) & 1) != 0)
              {
                v15 = swift_retain(*v13);
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
                v16 = _swiftEmptyArrayStorage[2];
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
                v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
                specialized ContiguousArray._endMutation()(v17);
              }
              ++v13;
              --v5;
            }
            while (v5);
          }
          swift_bridgeObjectRelease(v3);
          v1 = _swiftEmptyArrayStorage;
          if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0
            && ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
          {
            v18 = _swiftEmptyArrayStorage[2];
            goto LABEL_19;
          }
        }
        v21 = swift_bridgeObjectRetain(v1);
        v18 = _CocoaArrayWrapper.endIndex.getter(v21);
        swift_release(v1);
LABEL_19:
        swift_release(v1);
        if (v18)
          v4 = 2.0;
        else
          v4 = 1.0;
        goto LABEL_27;
      }
    }
    else
    {
      v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v3);
      if (v5)
        goto LABEL_4;
    }
    swift_bridgeObjectRelease(v3);
  }
LABEL_27:
  TimelineEntryRelevance.init(score:duration:)(v4, 0.0);
  v19 = type metadata accessor for TimelineEntryRelevance(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a1, 0, 1, v19);
}

uint64_t sub_10006B870@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

ValueMetadata *type metadata accessor for TVWidget()
{
  return &type metadata for TVWidget;
}

uint64_t sub_10006B8BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2C8C, 1);
}

id sub_10006B8CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id result;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;

  v38 = a4;
  v35 = a2;
  v36 = a3;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - v10;
  v12 = type metadata accessor for WidgetFamily(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a1;
  TimelineProviderContext.family.getter(v14);
  v17 = sub_1000139F8(&qword_100109580, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v18 = dispatch thunk of CustomStringConvertible.description.getter(v12, v17);
  v20 = v19;
  v21 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  Date.init()(v21);
  result = sub_100006398();
  if (result)
  {
    v23 = result;
    v24 = sub_100008EF4(&qword_100106918);
    v25 = swift_allocObject(v24, 72, 7);
    *(_OWORD *)(v25 + 16) = xmmword_1000C6710;
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    *(_QWORD *)(v25 + 64) = sub_10001A64C();
    *(_QWORD *)(v25 + 32) = v18;
    *(_QWORD *)(v25 + 40) = v20;
    v26 = swift_bridgeObjectRetain(v20);
    v27 = static os_log_type_t.default.getter(v26);
    os_log(_:dso:log:type:_:)("TVWidgetExtension::snapshot::[%{public}@] begin", 47, 2, &_mh_execute_header, v23, v27, v25);

    v28 = swift_bridgeObjectRelease(v25);
    (*(void (**)(char *, char *, uint64_t, __n128))(v6 + 16))(v9, v11, v5, v28);
    v29 = *(unsigned __int8 *)(v6 + 80);
    v30 = (v29 + 32) & ~v29;
    v31 = (v7 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v32 = swift_allocObject(&unk_1000FC188, v31 + 16, v29 | 7);
    *(_QWORD *)(v32 + 16) = v18;
    *(_QWORD *)(v32 + 24) = v20;
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v32 + v30, v9, v5);
    v33 = (_QWORD *)(v32 + v31);
    v34 = v36;
    *v33 = v35;
    v33[1] = v34;
    swift_retain(v34);
    sub_10006BCB0(v37, (uint64_t)sub_10006F248, v32, v38);
    swift_release(v32);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10006BB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, __n128))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id result;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, __n128);

  v24 = a6;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_100006398();
  if (result)
  {
    v15 = result;
    v16 = sub_100008EF4(&qword_100106918);
    v17 = swift_allocObject(v16, 112, 7);
    *(_OWORD *)(v17 + 16) = xmmword_1000C8170;
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 64) = sub_10001A64C();
    *(_QWORD *)(v17 + 32) = a3;
    *(_QWORD *)(v17 + 40) = a4;
    v18 = swift_bridgeObjectRetain(a4);
    Date.init()(v18);
    v19 = Date.timeIntervalSince(_:)(a5);
    v20 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *(_QWORD *)(v17 + 96) = &type metadata for Double;
    *(_QWORD *)(v17 + 104) = &protocol witness table for Double;
    *(double *)(v17 + 72) = v19;
    v21 = static os_log_type_t.default.getter(v20);
    os_log(_:dso:log:type:_:)("TVWidgetExtension::snapshot::[%{public}@] returning snapshot. elapsed:%{public}.5fs", 83, 2, &_mh_execute_header, v15, v21, v17);

    v22 = swift_bridgeObjectRelease(v17);
    return (id)v24(a1, v22);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10006BCB0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  char *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void *v50;
  uint64_t v51;
  char *v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void *v59;
  void *v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  id v64;
  uint64_t v65;
  double v66;
  double v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  id v71;
  void (**v72)(char *, _QWORD);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  void **aBlock;
  uint64_t v84;
  uint64_t (*v85)(uint64_t);
  void *v86;
  uint64_t (*v87)();
  _QWORD *v88;

  v81 = a2;
  v82 = a1;
  v6 = type metadata accessor for TimelineProviderContext(0);
  v78 = *(_QWORD *)(v6 - 8);
  v79 = v6;
  __chkstk_darwin(v6);
  *(_QWORD *)&v80 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v74 = *(_QWORD *)(v8 - 8);
  v75 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v72 = *(void (***)(char *, _QWORD))(v11 - 8);
  v73 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008EF4(&qword_100109460);
  __chkstk_darwin(v14);
  v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TVWidgetEntry(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = __chkstk_darwin(v17);
  v21 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v72 - v22;
  v76 = a4;
  sub_10006CBA8((uint64_t)v16);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
  v77 = a3;
  if (v24 == 1)
  {
    sub_1000135A0((uint64_t)v16, &qword_100109460);
  }
  else
  {
    sub_10006EFDC((uint64_t)v16, (uint64_t)v23);
    sub_10006F17C(0, (unint64_t *)&qword_100108400, OS_dispatch_queue_ptr);
    v25 = (void *)static OS_dispatch_queue.main.getter();
    sub_1000134DC((uint64_t)v23, (uint64_t)v21, type metadata accessor for TVWidgetEntry);
    v26 = *(unsigned __int8 *)(v18 + 80);
    v27 = (v26 + 32) & ~v26;
    v28 = swift_allocObject(&unk_1000FC0E8, v27 + v19, v26 | 7);
    *(_QWORD *)(v28 + 16) = v81;
    *(_QWORD *)(v28 + 24) = a3;
    sub_10006EFDC((uint64_t)v21, v28 + v27);
    v87 = sub_10006F0B0;
    v88 = (_QWORD *)v28;
    aBlock = _NSConcreteStackBlock;
    v84 = 1107296256;
    v85 = sub_10006D250;
    v86 = &unk_1000FC100;
    v29 = _Block_copy(&aBlock);
    v30 = v88;
    swift_retain(a3);
    v31 = swift_release(v30);
    static DispatchQoS.unspecified.getter(v31);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v32 = sub_1000139F8((unint64_t *)&qword_100108408, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v33 = sub_100008EF4(&qword_100108410);
    v34 = sub_100013840((unint64_t *)&qword_100108418, &qword_100108410, (uint64_t)&protocol conformance descriptor for [A]);
    v35 = v75;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v33, v34, v75, v32);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v29);
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v74 + 8))(v10, v35);
    v72[1](v13, v73);
    sub_100013520((uint64_t)v23, type metadata accessor for TVWidgetEntry);
  }
  v36 = v80;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v78 + 16))(v80, v82, v79);
  v37 = objc_allocWithZone((Class)type metadata accessor for TVWidgetFetchOperation(0));
  v38 = sub_100086E2C(v36);
  v39 = sub_100006398();
  if (!v39)
    goto LABEL_18;
  v40 = v39;
  v41 = sub_100008EF4(&qword_100106918);
  v42 = swift_allocObject(v41, 72, 7);
  *(_OWORD *)(v42 + 16) = xmmword_1000C6710;
  v43 = *(_QWORD *)&v38[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
  v44 = v77;
  v45 = v81;
  if (v43)
  {
    v46 = *(_QWORD *)&v38[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier];
    v47 = v38;
    v48 = v43;
  }
  else
  {
    v80 = xmmword_1000C6710;
    sub_10006F17C(0, (unint64_t *)&qword_100106920, NSString_ptr);
    v49 = v38;
    v50 = (void *)NSString.init(stringLiteral:)("%p", v72);
    v51 = swift_allocObject(v41, 72, 7);
    *(_OWORD *)(v51 + 16) = v80;
    *(_QWORD *)(v51 + 56) = type metadata accessor for TVWidgetAsyncOperation();
    *(_QWORD *)(v51 + 64) = sub_1000139F8((unint64_t *)&qword_100106928, (uint64_t (*)(uint64_t))type metadata accessor for TVWidgetAsyncOperation, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v51 + 32) = v49;
    v52 = v49;
    v53 = (void *)NSString.init(format:_:)(v50, v51);

    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v48 = v54;

    v43 = 0;
  }
  swift_bridgeObjectRetain(v43);

  *(_QWORD *)(v42 + 56) = &type metadata for String;
  v55 = sub_10001A64C();
  *(_QWORD *)(v42 + 64) = v55;
  *(_QWORD *)(v42 + 32) = v46;
  *(_QWORD *)(v42 + 40) = v48;
  v56 = static os_log_type_t.default.getter(v55);
  os_log(_:dso:log:type:_:)("TimeLineProvider::getWidgetEntry op:%{public}@", 46, 2, &_mh_execute_header, v40, v56, v42);

  swift_bridgeObjectRelease(v42);
  v57 = swift_allocObject(&unk_1000FC048, 17, 7);
  *(_BYTE *)(v57 + 16) = 0;
  v58 = (_QWORD *)swift_allocObject(&unk_1000FC070, 56, 7);
  v58[2] = v57;
  v58[3] = v38;
  v59 = v76;
  v58[4] = v76;
  v58[5] = v45;
  v58[6] = v44;
  v87 = sub_10006EF98;
  v88 = v58;
  aBlock = _NSConcreteStackBlock;
  v84 = 1107296256;
  v85 = sub_10006D250;
  v86 = &unk_1000FC0B0;
  v60 = _Block_copy(&aBlock);
  v61 = v88;
  v62 = v38;
  swift_retain(v44);
  v63 = v62;
  swift_retain(v57);
  v64 = v59;
  sub_10006EFCC((uint64_t)sub_10006EF98, (uint64_t)v58);
  swift_release(v61);
  objc_msgSend(v63, "setCompletionBlock:", v60);
  _Block_release(v60);

  v65 = swift_release(v58);
  if ((TimelineProviderContext.isPreview.getter(v65) & 1) != 0)
    static WidgetCenter.Private_Timeouts.placeholder.getter();
  else
    v66 = static WidgetCenter.Private_Timeouts.timeline.getter();
  v67 = (v66 + -3.0) * 1000.0;
  if ((~*(_QWORD *)&v67 & 0x7FF0000000000000) != 0)
  {
    if (v67 > -9.22337204e18)
    {
      if (v67 < 9.22337204e18)
      {
        v68 = (uint64_t)v67;
        v69 = (_QWORD *)swift_allocObject(&unk_1000FC098, 56, 7);
        v69[2] = v57;
        v69[3] = v63;
        v69[4] = v64;
        v69[5] = v45;
        v69[6] = v44;
        swift_retain(v44);
        v70 = v63;
        swift_retain(v57);
        v71 = v64;
        sub_1000A2E10((uint64_t)v70, v68, (uint64_t)sub_10006EFA8, (uint64_t)v69);

        swift_release(v57);
        swift_release(v69);
        return;
      }
      goto LABEL_17;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
}

id sub_10006C3C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id result;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;

  v40 = a4;
  v37 = a2;
  v38 = a3;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - v10;
  v12 = type metadata accessor for WidgetFamily(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = a1;
  TimelineProviderContext.family.getter(v14);
  v17 = sub_1000139F8(&qword_100109580, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v18 = dispatch thunk of CustomStringConvertible.description.getter(v12, v17);
  v20 = v19;
  v21 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  Date.init()(v21);
  result = sub_100006398();
  if (result)
  {
    v23 = result;
    v24 = sub_100008EF4(&qword_100106918);
    v25 = swift_allocObject(v24, 72, 7);
    *(_OWORD *)(v25 + 16) = xmmword_1000C6710;
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    *(_QWORD *)(v25 + 64) = sub_10001A64C();
    *(_QWORD *)(v25 + 32) = v18;
    *(_QWORD *)(v25 + 40) = v20;
    v26 = swift_bridgeObjectRetain(v20);
    v27 = static os_log_type_t.default.getter(v26);
    os_log(_:dso:log:type:_:)("TVWidgetExtension::timeline::[%{public}@] begin", 47, 2, &_mh_execute_header, v23, v27, v25);

    v28 = swift_bridgeObjectRelease(v25);
    (*(void (**)(char *, char *, uint64_t, __n128))(v6 + 16))(v9, v11, v5, v28);
    v29 = *(unsigned __int8 *)(v6 + 80);
    v30 = (v29 + 16) & ~v29;
    v31 = (v7 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v32 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
    v33 = swift_allocObject(&unk_1000FC020, v32 + 16, v29 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v33 + v30, v9, v5);
    v34 = (uint64_t *)(v33 + v31);
    *v34 = v18;
    v34[1] = v20;
    v35 = (_QWORD *)(v33 + v32);
    v36 = v38;
    *v35 = v37;
    v35[1] = v36;
    swift_retain(v36);
    sub_10006BCB0(v39, (uint64_t)sub_10006EF10, v33, v40);
    swift_release(v33);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10006C634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *), uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  double v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  void *v48;
  uint64_t v49;
  id result;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(char *, uint64_t);
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *);
  uint64_t v85;
  uint64_t v86;

  v83 = a7;
  v84 = a6;
  v75 = a4;
  v76 = a5;
  v10 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v10);
  v80 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008EF4(&qword_100109590);
  v81 = *(_QWORD *)(v12 - 8);
  v82 = v12;
  __chkstk_darwin(v12);
  v79 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for TimelineEntryRelevance(0);
  v14 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v16 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v73 - v22;
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v73 - v22, a2, v17);
  Date.init()(v24);
  v25 = Date.timeIntervalSince(_:)(a3);
  v26 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
  v27 = a1;
  v78 = v26;
  v26(v21, v17);
  v77 = type metadata accessor for TVWidgetEntry(0);
  v28 = *(_QWORD *)(a1 + *(int *)(v77 + 20));
  v29 = 0.0;
  if (v28)
  {
    if ((unint64_t)v28 >> 62)
    {
      if (v28 >= 0)
        v45 = v28 & 0xFFFFFFFFFFFFFF8;
      else
        v45 = v28;
      swift_bridgeObjectRetain(v28);
      v30 = _CocoaArrayWrapper.endIndex.getter(v45);
      if (v30)
      {
LABEL_4:
        v86 = (uint64_t)_swiftEmptyArrayStorage;
        if (v30 < 1)
        {
          __break(1u);
        }
        else
        {
          v74 = v27;
          if ((v28 & 0xC000000000000001) != 0)
          {
            for (i = 0; i != v30; ++i)
            {
              v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v28);
              v34 = v32;
              v35 = *(unsigned __int8 *)(v32 + 74);
              if (v35 == 2 || (v35 & 1) == 0)
              {
                swift_unknownObjectRelease(v32);
              }
              else
              {
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v33);
                v36 = *(_QWORD *)(v86 + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v36);
                v37 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
                specialized ContiguousArray._endMutation()(v37);
              }
            }
          }
          else
          {
            v38 = (_QWORD *)(v28 + 32);
            do
            {
              v39 = *v38;
              if ((*(_BYTE *)(*v38 + 74) & 1) != 0)
              {
                v40 = swift_retain(*v38);
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v40);
                v41 = *(_QWORD *)(v86 + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v41);
                v42 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v39);
                specialized ContiguousArray._endMutation()(v42);
              }
              ++v38;
              --v30;
            }
            while (v30);
          }
          swift_bridgeObjectRelease(v28);
          v30 = v86;
          if ((v86 & 0x8000000000000000) == 0 && (v86 & 0x4000000000000000) == 0)
          {
            v43 = *(_QWORD *)(v86 + 16);
            goto LABEL_19;
          }
        }
        v72 = swift_bridgeObjectRetain(v30);
        v43 = _CocoaArrayWrapper.endIndex.getter(v72);
        swift_release(v30);
LABEL_19:
        v27 = v74;
        v44 = v85;
        swift_release(v30);
        if (v43)
          v29 = 2.0;
        else
          v29 = 1.0;
        goto LABEL_28;
      }
    }
    else
    {
      v30 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v28);
      if (v30)
        goto LABEL_4;
    }
    swift_bridgeObjectRelease(v28);
  }
  v44 = v85;
LABEL_28:
  v46 = TimelineEntryRelevance.init(score:duration:)(v29, 0.0);
  v47 = TimelineEntryRelevance.score.getter(v46);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v44);
  sub_10006F17C(0, (unint64_t *)&qword_100108290, OS_os_log_ptr);
  v48 = (void *)static OS_os_log.default.getter();
  v49 = static os_log_type_t.default.getter(v48);
  os_log(_:dso:log:type:_:)("TVWidgetExtension::timeline::returning timeline.", 48, 2, &_mh_execute_header, v48, v49, _swiftEmptyArrayStorage);

  result = sub_100006398();
  if (result)
  {
    v51 = result;
    v52 = sub_100008EF4(&qword_100106918);
    v53 = swift_allocObject(v52, 232, 7);
    *(_OWORD *)(v53 + 16) = xmmword_1000CAB40;
    *(_QWORD *)(v53 + 56) = &type metadata for String;
    v54 = sub_10001A64C();
    *(_QWORD *)(v53 + 64) = v54;
    v55 = v76;
    *(_QWORD *)(v53 + 32) = v75;
    *(_QWORD *)(v53 + 40) = v55;
    v56 = swift_bridgeObjectRetain(v55);
    v57 = Date.description.getter(v56);
    *(_QWORD *)(v53 + 96) = &type metadata for String;
    *(_QWORD *)(v53 + 104) = v54;
    *(_QWORD *)(v53 + 72) = v57;
    *(_QWORD *)(v53 + 80) = v58;
    v59 = Date.timeIntervalSinceNow.getter();
    *(_QWORD *)(v53 + 136) = &type metadata for Double;
    *(_QWORD *)(v53 + 144) = &protocol witness table for Double;
    *(_QWORD *)(v53 + 112) = v60;
    *(_QWORD *)(v53 + 176) = &type metadata for Double;
    *(_QWORD *)(v53 + 184) = &protocol witness table for Double;
    *(double *)(v53 + 152) = v25;
    *(_QWORD *)(v53 + 216) = &type metadata for Float;
    *(_QWORD *)(v53 + 224) = &protocol witness table for Float;
    *(float *)(v53 + 192) = v47;
    v61 = static os_log_type_t.default.getter(v59);
    os_log(_:dso:log:type:_:)("TVWidgetExtension::timeline::[%{public}@] refreshDate: %{public}@ (%{public}.0fs) elapsed:%{public}.5fs relevance:%.0f", 118, 2, &_mh_execute_header, v51, v61, v53);

    swift_bridgeObjectRelease(v53);
    v62 = sub_100008EF4(&qword_100109598);
    v63 = v77;
    v64 = *(_QWORD *)(v77 - 8);
    v65 = *(_QWORD *)(v64 + 72);
    v66 = *(unsigned __int8 *)(v64 + 80);
    v67 = (v66 + 32) & ~v66;
    v68 = swift_allocObject(v62, v67 + v65, v66 | 7);
    *(_OWORD *)(v68 + 16) = xmmword_1000C6710;
    sub_1000134DC(v27, v68 + v67, type metadata accessor for TVWidgetEntry);
    v69 = v80;
    static TimelineReloadPolicy.after(_:)(v23);
    v70 = sub_1000139F8(qword_100109568, type metadata accessor for TVWidgetEntry, (uint64_t)&unk_1000CBF70);
    v71 = v79;
    Timeline.init(entries:policy:)(v68, v69, v63, v70);
    v84(v71);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v71, v82);
    return (id)v78(v23, v17);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10006CBA8@<X0>(uint64_t a1@<X8>)
{
  id v2;
  unsigned __int8 v3;
  void *v4;
  NSString v5;
  id result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v2 = objc_msgSend((id)objc_opt_self(WLKReachabilityMonitor), "sharedInstance");
  v3 = objc_msgSend(v2, "isNetworkReachable");

  if ((v3 & 1) != 0)
  {
    v4 = (void *)objc_opt_self(AMSAcknowledgePrivacyTask);
    v5 = String._bridgeToObjectiveC()();
    LODWORD(v4) = objc_msgSend(v4, "acknowledgementNeededForPrivacyIdentifier:", v5);

    if (!(_DWORD)v4)
    {
      v11 = type metadata accessor for TVWidgetEntry(0);
      v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
      v16 = a1;
      v17 = 1;
      return (id)v15(v16, v17, 1, v11);
    }
    result = sub_100006398();
    if (result)
    {
      v7 = result;
      v8 = static os_log_type_t.default.getter(result);
      os_log(_:dso:log:type:_:)("TimeLineProvider::contentPlaceholder - gdpr acceptance needed", 61, 2, &_mh_execute_header, v7, v8, _swiftEmptyArrayStorage);

      Date.init()(v9);
      v10 = type metadata accessor for TVWidgetEntry(0);
      v11 = v10;
      *(_QWORD *)(a1 + *(int *)(v10 + 20)) = 0;
      *(_BYTE *)(a1 + *(int *)(v10 + 24)) = 3;
LABEL_7:
      v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
      v16 = a1;
      v17 = 0;
      return (id)v15(v16, v17, 1, v11);
    }
  }
  else
  {
    result = sub_100006398();
    if (result)
    {
      v12 = result;
      v13 = static os_log_type_t.default.getter(result);
      os_log(_:dso:log:type:_:)("TVWidgetExtension::contentPlaceholder - network not reachable", 61, 2, &_mh_execute_header, v12, v13, _swiftEmptyArrayStorage);

      Date.init()(v14);
      v10 = type metadata accessor for TVWidgetEntry(0);
      v11 = v10;
      *(_QWORD *)(a1 + *(int *)(v10 + 20)) = 0;
      *(_BYTE *)(a1 + *(int *)(v10 + 24)) = 2;
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006CD78(void (*a1)(uint64_t, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin();
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v7);
  a1(a3, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10006CE0C(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  _QWORD *v32;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v13 - 8);
  v29 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006F17C(0, (unint64_t *)&qword_100108400, OS_dispatch_queue_ptr);
  v16 = (void *)static OS_dispatch_queue.main.getter();
  v17 = (_QWORD *)swift_allocObject(&unk_1000FC138, 56, 7);
  v17[2] = a1;
  v17[3] = a2;
  v17[4] = a3;
  v17[5] = a4;
  v17[6] = a5;
  aBlock[4] = sub_10006F15C;
  v32 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006D250;
  aBlock[3] = &unk_1000FC150;
  v18 = _Block_copy(aBlock);
  v19 = v32;
  swift_retain(a1);
  v20 = a2;
  v21 = a3;
  swift_retain(a5);
  v22 = swift_release(v19);
  static DispatchQoS.unspecified.getter(v22);
  aBlock[0] = _swiftEmptyArrayStorage;
  v23 = sub_1000139F8((unint64_t *)&qword_100108408, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100008EF4(&qword_100108410);
  v25 = sub_100013840((unint64_t *)&qword_100108418, &qword_100108410, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v10, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v15, v29);
}

id sub_10006D048(uint64_t a1, char *a2, uint64_t a3, void (*a4)(char *, char *), uint64_t a5)
{
  _BYTE *v9;
  id result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25[24];
  char v26[24];

  v9 = (_BYTE *)(a1 + 16);
  result = (id)swift_beginAccess(a1 + 16, v26, 0, 0);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    swift_beginAccess(v9, v25, 1, 0);
    *v9 = 1;
    result = sub_100006398();
    if (result)
    {
      v11 = result;
      v12 = sub_100008EF4(&qword_100106918);
      v13 = swift_allocObject(v12, 72, 7);
      *(_OWORD *)(v13 + 16) = xmmword_1000C6710;
      v14 = *(_QWORD *)&a2[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
      if (v14)
      {
        v15 = *(_QWORD *)&a2[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier];
        v16 = *(_QWORD *)&a2[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
      }
      else
      {
        *((_QWORD *)&v24 + 1) = 2;
        sub_10006F17C(0, (unint64_t *)&qword_100106920, NSString_ptr);
        v17 = (void *)NSString.init(stringLiteral:)("%p", (const void *)1);
        v18 = swift_allocObject(v12, 72, 7);
        *(_OWORD *)(v18 + 16) = v24;
        *(_QWORD *)(v18 + 56) = type metadata accessor for TVWidgetAsyncOperation();
        *(_QWORD *)(v18 + 64) = sub_1000139F8((unint64_t *)&qword_100106928, (uint64_t (*)(uint64_t))type metadata accessor for TVWidgetAsyncOperation, (uint64_t)&protocol conformance descriptor for NSObject);
        *(_QWORD *)(v18 + 32) = a2;
        v19 = a2;
        v20 = (void *)NSString.init(format:_:)(v17, v18);

        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v16 = v21;

        v14 = 0;
      }
      *(_QWORD *)(v13 + 56) = &type metadata for String;
      *(_QWORD *)(v13 + 64) = sub_10001A64C();
      *(_QWORD *)(v13 + 32) = v15;
      *(_QWORD *)(v13 + 40) = v16;
      v22 = swift_bridgeObjectRetain(v14);
      v23 = static os_log_type_t.default.getter(v22);
      os_log(_:dso:log:type:_:)("TimeLineProvider::getWidgetEntry completion handler for:[%{public}@]", 68, 2, &_mh_execute_header, v11, v23, v13);

      swift_bridgeObjectRelease(v13);
      return sub_10006E01C(a2, 0, a4, a5);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10006D250(uint64_t a1)
{
  void (*v1)(__n128);
  uint64_t v2;
  __n128 v3;

  v1 = *(void (**)(__n128))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

id sub_10006D27C(uint64_t a1, char *a2, uint64_t a3, void (*a4)(char *, char *), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  id result;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char v30[24];
  char v31[24];

  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  sub_10006F17C(0, (unint64_t *)&qword_100108400, OS_dispatch_queue_ptr);
  *(_QWORD *)v12 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v13 = _dispatchPreconditionTest(_:)(v12);
  result = (id)(*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v15 = (_BYTE *)(a1 + 16);
  result = (id)swift_beginAccess(a1 + 16, v31, 0, 0);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return result;
  swift_beginAccess(v15, v30, 1, 0);
  *v15 = 1;
  result = sub_100006398();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v16 = result;
  v17 = sub_100008EF4(&qword_100106918);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1000C6710;
  v19 = *(_QWORD *)&a2[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
  if (v19)
  {
    v20 = *(_QWORD *)&a2[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier];
    v21 = *(_QWORD *)&a2[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
  }
  else
  {
    v29 = xmmword_1000C6710;
    sub_10006F17C(0, (unint64_t *)&qword_100106920, NSString_ptr);
    v22 = (void *)NSString.init(stringLiteral:)("%p", (const void *)v29);
    v23 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v23 + 16) = v29;
    *(_QWORD *)(v23 + 56) = type metadata accessor for TVWidgetAsyncOperation();
    *(_QWORD *)(v23 + 64) = sub_1000139F8((unint64_t *)&qword_100106928, (uint64_t (*)(uint64_t))type metadata accessor for TVWidgetAsyncOperation, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v23 + 32) = a2;
    v24 = a2;
    v25 = (void *)NSString.init(format:_:)(v22, v23);

    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v21 = v26;

    v19 = 0;
  }
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001A64C();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v21;
  v27 = swift_bridgeObjectRetain(v19);
  v28 = static os_log_type_t.default.getter(v27);
  os_log(_:dso:log:type:_:)("TimeLineProvider::getWidgetEntry time-out handler for:[%{public}@]", 66, 2, &_mh_execute_header, v16, v28, v18);

  swift_bridgeObjectRelease(v18);
  return sub_10006E01C(a2, 1, a4, a5);
}

uint64_t sub_10006D520@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  TimelineProviderContext.family.getter(v4);
  v7 = sub_100076D54((uint64_t)v6);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  Date.init()(v8);
  result = type metadata accessor for TVWidgetEntry(0);
  *(_QWORD *)(a1 + *(int *)(result + 20)) = v7;
  *(_BYTE *)(a1 + *(int *)(result + 24)) = 4;
  return result;
}

id sub_10006D5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;

  return sub_10006B8CC(a1, a2, a3, *v3);
}

id sub_10006D5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;

  return sub_10006C3C4(a1, a2, a3, *v3);
}

uint64_t sub_10006D5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000145D8;
  return TimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_10006D650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100016560;
  return TimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_10006D6BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t OpaqueTypeConformance2;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, _QWORD, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v62 = a1;
  v1 = sub_100008EF4(&qword_100105ED0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_100109500);
  v56 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008EF4(&qword_100109508);
  v9 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  v59 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008EF4(&qword_100109510);
  v13 = *(_QWORD *)(v12 - 8);
  v60 = v12;
  v61 = v13;
  __chkstk_darwin(v12);
  v57 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v15, "setName:", v16);

  objc_msgSend(v15, "setMaxConcurrentOperationCount:", 1);
  objc_msgSend(v15, "setQualityOfService:", 25);
  v63 = (uint64_t)v15;
  v17 = sub_100008EF4(&qword_100109518);
  v18 = sub_10006DE68();
  v19 = sub_10006DF04();
  StaticConfiguration.init<A>(kind:provider:content:)(0x6C7070612E6D6F63, 0xEC00000076742E65, &v63, sub_10006DBD4, 0, v17, &type metadata for TVWidgetEntryProvider, v18, v19);
  v20 = sub_100013840((unint64_t *)&qword_100105ED8, &qword_100105ED0, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  WidgetConfiguration._containerBackgroundRemovable(_:)(1, v1, v20);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v21 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x80000001000C2250);
  v22 = Text.init(_:tableName:bundle:comment:)(v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v63 = v1;
  v64 = v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v63, &unk_1000D174C, 1);
  WidgetConfiguration.configurationDisplayName(_:)(v22, v24, v28, v26, v5, OpaqueTypeConformance2);
  sub_1000130C4(v22, v24, v28);
  v30 = swift_bridgeObjectRelease(v26);
  (*(void (**)(char *, uint64_t, __n128))(v56 + 8))(v7, v5, v30);
  v31 = sub_100008EF4(&qword_100109548);
  v32 = type metadata accessor for WidgetFamily(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_QWORD *)(v33 + 72);
  v35 = *(unsigned __int8 *)(v33 + 80);
  v36 = (v35 + 32) & ~v35;
  v37 = swift_allocObject(v31, v36 + 4 * v34, v35 | 7);
  *(_OWORD *)(v37 + 16) = xmmword_1000CAB50;
  v38 = *(void (**)(uint64_t, _QWORD, uint64_t))(v33 + 104);
  v38(v37 + v36, enum case for WidgetFamily.systemSmall(_:), v32);
  v38(v37 + v36 + v34, enum case for WidgetFamily.systemMedium(_:), v32);
  v38(v37 + v36 + 2 * v34, enum case for WidgetFamily.systemLarge(_:), v32);
  v38(v37 + v36 + 3 * v34, enum case for WidgetFamily.systemExtraLarge(_:), v32);
  v63 = v5;
  v64 = OpaqueTypeConformance2;
  v39 = swift_getOpaqueTypeConformance2(&v63, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v41 = v57;
  v40 = v58;
  WidgetConfiguration.supportedFamilies(_:)(v37, v58, v39);
  v42 = swift_bridgeObjectRelease(v37);
  v43 = v40;
  (*(void (**)(char *, uint64_t, __n128))(v59 + 8))(v11, v40, v42);
  v44 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x80000001000C22A0);
  v45 = Text.init(_:tableName:bundle:comment:)(v44);
  v47 = v46;
  v49 = v48;
  v51 = v50 & 1;
  v63 = v43;
  v64 = v39;
  v52 = swift_getOpaqueTypeConformance2(&v63, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v53 = v60;
  WidgetConfiguration.description(_:)(v45, v47, v51, v49, v60, v52);
  sub_1000130C4(v45, v47, v51);
  v54 = swift_bridgeObjectRelease(v49);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v61 + 8))(v41, v53, v54);
}

uint64_t sub_10006DBD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t KeyPath;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _OWORD v28[9];

  v4 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for TVWidgetView(0);
  __chkstk_darwin(v8);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TVWidgetEntry(0);
  v12 = *(_QWORD *)(a1 + *(int *)(v11 + 20));
  v13 = *(_BYTE *)(a1 + *(int *)(v11 + 24));
  swift_bridgeObjectRetain(v12);
  sub_1000869CC((uint64_t)v28);
  KeyPath = swift_getKeyPath(&unk_1000CBFF0);
  v15 = (uint64_t *)&v10[v8[7]];
  *v15 = KeyPath;
  v16 = sub_100008EF4(&qword_100109550);
  swift_storeEnumTagMultiPayload(v15, v16, 0);
  *(_QWORD *)v10 = v12;
  v10[8] = v13;
  v17 = v28[7];
  *((_OWORD *)v10 + 7) = v28[6];
  *((_OWORD *)v10 + 8) = v17;
  *((_OWORD *)v10 + 9) = v28[8];
  v18 = v28[3];
  *((_OWORD *)v10 + 3) = v28[2];
  *((_OWORD *)v10 + 4) = v18;
  v19 = v28[5];
  *((_OWORD *)v10 + 5) = v28[4];
  *((_OWORD *)v10 + 6) = v19;
  v20 = v28[1];
  *((_OWORD *)v10 + 1) = v28[0];
  *((_OWORD *)v10 + 2) = v20;
  v21 = &v10[v8[8]];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_1000CC020);
  v21[8] = 0;
  v22 = &v10[v8[9]];
  *(_QWORD *)v22 = swift_getKeyPath(&unk_1000CC048);
  v23 = sub_100008EF4(&qword_100109558);
  swift_storeEnumTagMultiPayload(v22, v23, 0);
  v24 = swift_getKeyPath(&unk_1000CC078);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ColorScheme.dark(_:), v4);
  v25 = (uint64_t *)(a2 + *(int *)(sub_100008EF4(&qword_100109518) + 36));
  v26 = sub_100008EF4(&qword_100109538);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)v25 + *(int *)(v26 + 28), v7, v4);
  *v25 = v24;
  sub_1000134DC((uint64_t)v10, a2, type metadata accessor for TVWidgetView);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_100013520((uint64_t)v10, type metadata accessor for TVWidgetView);
}

void sub_10006DE00()
{
  id v0;
  uint64_t v1;
  id v2;

  v0 = sub_100006398();
  v2 = v0;
  if (v0)
  {
    v1 = static os_log_type_t.default.getter(v0);
    os_log(_:dso:log:type:_:)("TVWidgetExtension::TVWidget::init", 33, 2, &_mh_execute_header, v2, v1, _swiftEmptyArrayStorage);

  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_10006DE68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100109520;
  if (!qword_100109520)
  {
    v1 = sub_100008F80(&qword_100109518);
    sub_1000139F8(&qword_100109528, type metadata accessor for TVWidgetView, (uint64_t)&unk_1000CF7D0);
    sub_100013840((unint64_t *)&qword_100109530, &qword_100109538, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100109520);
  }
  return result;
}

unint64_t sub_10006DF04()
{
  unint64_t result;

  result = qword_100109540;
  if (!qword_100109540)
  {
    result = swift_getWitnessTable(&unk_1000CC0C8, &type metadata for TVWidgetEntryProvider);
    atomic_store(result, (unint64_t *)&qword_100109540);
  }
  return result;
}

uint64_t sub_10006DF48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v1 = sub_1000139F8(&qword_100109560, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  EnvironmentValues.subscript.getter(&v3, v0, v0, v1);
  return v3;
}

_QWORD *sub_10006DFA8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v2 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v3 = sub_1000139F8(&qword_100109560, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  result = EnvironmentValues.subscript.getter(&v5, v2, v2, v3);
  *a1 = v5;
  return result;
}

id sub_10006E01C(char *a1, char a2, void (*a3)(char *, char *), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  id result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  void *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  char v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (**v81)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (**v89)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  char *v99;
  void *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  char *v109;
  void *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  void (*v120)(char *, uint64_t);
  void *v121;
  uint64_t *v122;
  char *v123;
  uint64_t v124;
  id v125;
  id v126;
  __int128 v127;
  void (*v128)(char *, char *, uint64_t);
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  void (*v134)(char *, char *);
  uint64_t (**v135)(char *, uint64_t, uint64_t, uint64_t);
  char *v136;
  char v137[24];
  char v138[24];
  uint64_t v139;
  __int128 v140;
  __int128 v141;

  v133 = a4;
  v134 = a3;
  v6 = sub_100008EF4(&qword_100109460);
  v7 = __chkstk_darwin(v6);
  v132 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v121 - v9;
  v11 = type metadata accessor for TVWidgetEntry(0);
  v135 = *(uint64_t (***)(char *, uint64_t, uint64_t, uint64_t))(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v131 = (uint64_t)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v121 - v14;
  v16 = sub_100008EF4(&qword_100105F48);
  __chkstk_darwin(v16);
  v18 = (char *)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v129 = (char *)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v130 = (char *)&v121 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v121 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v121 - v29;
  v31 = __chkstk_darwin(v28);
  v33.n128_u64[0] = 0x409C200000000000;
  if ((a2 & 1) != 0)
    v33.n128_f64[0] = 300.0;
  v136 = (char *)&v121 - v32;
  Date.init(timeIntervalSinceNow:)(v31, v33);
  if (a1)
  {
    objc_sync_enter(a1);
    v34 = (uint64_t)&a1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__suggestedRefreshDate];
    swift_beginAccess(&a1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__suggestedRefreshDate], v137, 0, 0);
    sub_10001355C(v34, (uint64_t)v18, &qword_100105F48);
    objc_sync_exit(a1);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v27, v136, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    v35 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v35(v30, v27, v19);
    sub_1000135A0((uint64_t)v18, &qword_100105F48);
    if (a1)
      goto LABEL_8;
LABEL_11:
    v37 = v135[7](v10, 1, 1, v11);
    goto LABEL_12;
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v27, v19);
  v35 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v35(v30, v18, v19);
  if (!a1)
    goto LABEL_11;
LABEL_8:
  objc_sync_enter(a1);
  v36 = (uint64_t)&a1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__widgetEntry];
  swift_beginAccess(&a1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__widgetEntry], v138, 0, 0);
  sub_10001355C(v36, (uint64_t)v10, &qword_100109460);
  objc_sync_exit(a1);
  v37 = ((uint64_t (*)(char *, uint64_t, uint64_t))v135[6])(v10, 1, v11);
  if ((_DWORD)v37 != 1)
  {
    sub_10006EFDC((uint64_t)v10, (uint64_t)v15);
    goto LABEL_13;
  }
LABEL_12:
  Date.init()(v37);
  *(_QWORD *)&v15[*(int *)(v11 + 20)] = 0;
  v15[*(int *)(v11 + 24)] = 2;
  sub_1000135A0((uint64_t)v10, &qword_100109460);
  if (!a1)
  {
LABEL_31:
    v134(v15, v30);
    sub_100013520((uint64_t)v15, type metadata accessor for TVWidgetEntry);
    v63 = *(void (**)(char *, uint64_t))(v20 + 8);
    v63(v30, v19);
    return (id)((uint64_t (*)(char *, uint64_t))v63)(v136, v19);
  }
LABEL_13:
  v38 = a1;
  objc_sync_enter(v38);
  v39 = *(_QWORD *)&v38[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__error];
  swift_errorRetain(v39);
  objc_sync_exit(v38);
  if (!v39)
  {

    goto LABEL_31;
  }
  v128 = v35;
  v40 = (void *)_convertErrorToNSError(_:)(v39);
  swift_errorRelease(v39);
  v41 = objc_msgSend(v40, "domain");
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v44 = v43;

  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorDomain);
  v47 = v46;
  if (v42 == v45 && v44 == v46)
  {
    swift_bridgeObjectRelease_n(v44, 2);
  }
  else
  {
    v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v44);
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRelease(v47);
    if ((v48 & 1) == 0)
    {
LABEL_30:

      goto LABEL_31;
    }
  }
  v49 = objc_msgSend(v40, "userInfo");
  v50 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v49, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorUserInfoKeyStatusCode);
  v53 = v52;
  if (*(_QWORD *)(v50 + 16) && (v54 = sub_10002D668(v51, v52), (v55 & 1) != 0))
  {
    sub_10006F0E0(*(_QWORD *)(v50 + 56) + 32 * v54, (uint64_t)&v140);
  }
  else
  {
    v140 = 0u;
    v141 = 0u;
  }
  swift_bridgeObjectRelease(v53);
  swift_bridgeObjectRelease(v50);
  if (!*((_QWORD *)&v141 + 1))
  {
    sub_1000135A0((uint64_t)&v140, &qword_100109588);
    goto LABEL_30;
  }
  if (!swift_dynamicCast(&v139, &v140, (char *)&type metadata for Any + 8, &type metadata for Int, 6)
    || v139 != 500)
  {
    goto LABEL_30;
  }
  v125 = v40;
  result = sub_100006398();
  if (!result)
  {
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v126 = result;
  v57 = sub_100008EF4(&qword_100106918);
  v58 = swift_allocObject(v57, 72, 7);
  *(_OWORD *)(v58 + 16) = xmmword_1000C6710;
  v59 = *(_QWORD *)&v38[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
  v124 = v57;
  v127 = xmmword_1000C6710;
  v122 = (uint64_t *)&v38[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier];
  if (v59)
  {
    v60 = *(_QWORD *)&v38[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier];
    v61 = v38;
    v62 = v59;
  }
  else
  {
    sub_10006F17C(0, (unint64_t *)&qword_100106920, NSString_ptr);
    v123 = v38;
    v64 = (void *)NSString.init(stringLiteral:)("%p", v121);
    v121 = v64;
    v65 = swift_allocObject(v57, 72, 7);
    *(_OWORD *)(v65 + 16) = v127;
    *(_QWORD *)(v65 + 56) = type metadata accessor for TVWidgetAsyncOperation();
    *(_QWORD *)(v65 + 64) = sub_1000139F8((unint64_t *)&qword_100106928, (uint64_t (*)(uint64_t))type metadata accessor for TVWidgetAsyncOperation, (uint64_t)&protocol conformance descriptor for NSObject);
    v66 = v123;
    *(_QWORD *)(v65 + 32) = v123;
    v67 = v66;
    v68 = (void *)NSString.init(format:_:)(v64, v65);

    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    v62 = v69;

    v59 = 0;
  }
  swift_bridgeObjectRetain(v59);

  *(_QWORD *)(v58 + 56) = &type metadata for String;
  v70 = sub_10001A64C();
  v123 = (char *)v70;
  *(_QWORD *)(v58 + 64) = v70;
  *(_QWORD *)(v58 + 32) = v60;
  *(_QWORD *)(v58 + 40) = v62;
  v71 = static os_log_type_t.default.getter(v70);
  v72 = v126;
  os_log(_:dso:log:type:_:)("finishOp::[%{public}@] handling 500 error", 41, 2, &_mh_execute_header, v126, v71, v58);

  swift_bridgeObjectRelease(v58);
  if (qword_100105D50 != -1)
    swift_once(&qword_100105D50, sub_10006A820);
  v73 = qword_10011F008;
  v74 = sub_10006AA5C();
  result = sub_100006398();
  v75 = result;
  if ((v74 & 1) == 0)
  {
    if (!result)
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    v87 = static os_log_type_t.default.getter(result);
    os_log(_:dso:log:type:_:)("WidgetCache::expired cached entry, returning nil", 48, 2, &_mh_execute_header, v75, v87, _swiftEmptyArrayStorage);

    v79 = (uint64_t)v132;
    v135[7](v132, 1, 1, v11);
LABEL_43:
    sub_1000135A0(v79, &qword_100109460);
    result = sub_100006398();
    v88 = v124;
    if (result)
    {
      v89 = (uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))result;
      v90 = swift_allocObject(v124, 72, 7);
      *(_OWORD *)(v90 + 16) = v127;
      v91 = v122[1];
      if (v91)
      {
        v92 = *v122;
        v93 = v38;
        v94 = v91;
      }
      else
      {
        sub_10006F17C(0, (unint64_t *)&qword_100106920, NSString_ptr);
        v95 = v38;
        v96 = NSString.init(stringLiteral:)("%p", v121);
        v135 = v89;
        v97 = (void *)v96;
        v98 = swift_allocObject(v88, 72, 7);
        *(_OWORD *)(v98 + 16) = v127;
        *(_QWORD *)(v98 + 56) = type metadata accessor for TVWidgetAsyncOperation();
        *(_QWORD *)(v98 + 64) = sub_1000139F8((unint64_t *)&qword_100106928, (uint64_t (*)(uint64_t))type metadata accessor for TVWidgetAsyncOperation, (uint64_t)&protocol conformance descriptor for NSObject);
        *(_QWORD *)(v98 + 32) = v95;
        v99 = v95;
        v100 = (void *)NSString.init(format:_:)(v97, v98);

        v89 = v135;
        v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
        v94 = v101;

        v91 = 0;
      }
      swift_bridgeObjectRetain(v91);

      v102 = v123;
      *(_QWORD *)(v90 + 56) = &type metadata for String;
      *(_QWORD *)(v90 + 64) = v102;
      *(_QWORD *)(v90 + 32) = v92;
      *(_QWORD *)(v90 + 40) = v94;
      v104 = static os_log_type_t.default.getter(v103);
      os_log(_:dso:log:type:_:)("finishOp::[%{public}@] cache is invalid, returning default error state", 70, 2, &_mh_execute_header, v89, v104, v90);

      swift_bridgeObjectRelease(v90);
      goto LABEL_31;
    }
    goto LABEL_51;
  }
  if (!result)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v76 = static os_log_type_t.default.getter(result);
  os_log(_:dso:log:type:_:)("WidgetCache::valid cached entry, returning the entry", 52, 2, &_mh_execute_header, v75, v76, _swiftEmptyArrayStorage);

  v77 = v73 + OBJC_IVAR____TtC17TVWidgetExtension13TVWidgetCache_lastKnownWidgetEntry;
  swift_beginAccess(v73 + OBJC_IVAR____TtC17TVWidgetExtension13TVWidgetCache_lastKnownWidgetEntry, &v140, 0, 0);
  v78 = v77;
  v79 = (uint64_t)v132;
  sub_10001355C(v78, (uint64_t)v132, &qword_100109460);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v135[6])(v79, 1, v11) == 1)
    goto LABEL_43;
  sub_10006EFDC(v79, v131);
  result = sub_100006398();
  v80 = v124;
  if (result)
  {
    v81 = (uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))result;
    v82 = swift_allocObject(v124, 72, 7);
    *(_OWORD *)(v82 + 16) = v127;
    v83 = v122[1];
    if (v83)
    {
      v84 = *v122;
      v85 = v38;
      v86 = v83;
    }
    else
    {
      sub_10006F17C(0, (unint64_t *)&qword_100106920, NSString_ptr);
      v105 = v38;
      v106 = NSString.init(stringLiteral:)("%p", v121);
      v135 = v81;
      v107 = (void *)v106;
      v108 = swift_allocObject(v80, 72, 7);
      *(_OWORD *)(v108 + 16) = v127;
      *(_QWORD *)(v108 + 56) = type metadata accessor for TVWidgetAsyncOperation();
      *(_QWORD *)(v108 + 64) = sub_1000139F8((unint64_t *)&qword_100106928, (uint64_t (*)(uint64_t))type metadata accessor for TVWidgetAsyncOperation, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v108 + 32) = v105;
      v109 = v105;
      v110 = (void *)NSString.init(format:_:)(v107, v108);

      v81 = v135;
      v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
      v86 = v111;

      v83 = 0;
    }
    swift_bridgeObjectRetain(v83);

    v112 = v123;
    *(_QWORD *)(v82 + 56) = &type metadata for String;
    *(_QWORD *)(v82 + 64) = v112;
    *(_QWORD *)(v82 + 32) = v84;
    *(_QWORD *)(v82 + 40) = v86;
    v114 = static os_log_type_t.default.getter(v113);
    os_log(_:dso:log:type:_:)("finishOp::[%{public}@] cache is valid, returning widget entry in cache", 70, 2, &_mh_execute_header, v81, v114, v82);

    swift_bridgeObjectRelease(v82);
    sub_100013520((uint64_t)v15, type metadata accessor for TVWidgetEntry);
    v115 = v131;
    v116 = sub_1000134DC(v131, (uint64_t)v15, type metadata accessor for TVWidgetEntry);
    v117 = v129;
    v118 = Date.init()(v116);
    v119 = v130;
    Date.advanced(by:)(v118, 300.0);

    v120 = *(void (**)(char *, uint64_t))(v20 + 8);
    v120(v117, v19);
    sub_100013520(v115, type metadata accessor for TVWidgetEntry);
    v120(v30, v19);
    v128(v30, v119, v19);
    goto LABEL_31;
  }
LABEL_54:
  __break(1u);
  return result;
}

uint64_t sub_10006ECA8()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_10006ECCC()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_10006ECEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000324B4(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_10006ED10()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10006ED30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000324B4(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

ValueMetadata *type metadata accessor for TVWidgetEntryProvider()
{
  return &type metadata for TVWidgetEntryProvider;
}

uint64_t sub_10006ED64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v0 = sub_100008F80(&qword_100109510);
  v1 = sub_100008F80(&qword_100109508);
  v2 = sub_100008F80(&qword_100109500);
  v7 = sub_100008F80(&qword_100105ED0);
  v8 = sub_100013840((unint64_t *)&qword_100105ED8, &qword_100105ED0, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &unk_1000D174C, 1);
  v7 = v2;
  v8 = OpaqueTypeConformance2;
  v4 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v7 = v1;
  v8 = v4;
  v5 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v7 = v0;
  v8 = v5;
  return swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
}

uint64_t sub_10006EE50()
{
  return sub_1000139F8(qword_100109568, type metadata accessor for TVWidgetEntry, (uint64_t)&unk_1000CBF70);
}

uint64_t sub_10006EE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

id sub_10006EF10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10006C634(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(void (**)(char *))(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10006EF84()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10006EF98()
{
  return sub_10006F168((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006CE0C);
}

uint64_t sub_10006EFA8()
{
  return sub_10006F168((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006D27C);
}

double sub_10006EFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_10006EFC4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

double sub_10006EFCC(uint64_t a1, uint64_t a2)
{
  double result;

  if (a1)
    *(_QWORD *)&result = swift_retain(a2).n128_u64[0];
  return result;
}

uint64_t sub_10006EFDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TVWidgetEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for TVWidgetEntry(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  v7 = v0 + v4;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 20)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10006F0B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TVWidgetEntry(0) - 8) + 80);
  return sub_10006CD78(*(void (**)(uint64_t, char *))(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_10006F0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10006F120()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10006F15C()
{
  return sub_10006F168((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006D048);
}

uint64_t sub_10006F168(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10006F17C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10006F1B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

id sub_10006F248(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_10006BB30(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v6, *(uint64_t (**)(uint64_t, __n128))(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

id sub_10006F2C0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id result;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v18;

  v0 = sub_100008EF4(&qword_1001095A8);
  __chkstk_darwin(v0);
  v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100008EF4(&qword_1001095B0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v18 - v8;
  result = sub_100006398();
  if (result)
  {
    v11 = result;
    v12 = static os_log_type_t.default.getter(result);
    os_log(_:dso:log:type:_:)("TVWidgetExtension::TVWidget::init", 33, 2, &_mh_execute_header, v11, v12, _swiftEmptyArrayStorage);

    result = sub_100006408();
    if (result)
    {
      v13 = result;
      v14 = static os_log_type_t.default.getter(result);
      os_log(_:dso:log:type:_:)("TVWidgetExtension::SportsWidget::init", 37, 2, &_mh_execute_header, v13, v14, _swiftEmptyArrayStorage);

      v15 = sub_100008EF4(&qword_1001095B8);
      TupleWidget.init(_:)(v15, v15);
      v16 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
      v16(v7, v9, v3);
      v16(v2, v7, v3);
      TupleWidget.init(_:)(v2, v0);
      v17 = *(void (**)(char *, uint64_t))(v4 + 8);
      v17(v9, v3);
      return (id)((uint64_t (*)(char *, uint64_t))v17)(v7, v3);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006F48C()
{
  uint64_t v0;

  v0 = sub_100008EF4(&qword_1001095B8);
  return TupleWidget.init(_:)(v0, v0);
}

int main(int argc, const char **argv, const char **envp)
{
  sub_10006F4F4();
  static WidgetBundle.main()();
  return 0;
}

unint64_t sub_10006F4F4()
{
  unint64_t result;

  result = qword_1001095A0;
  if (!qword_1001095A0)
  {
    result = swift_getWitnessTable(&unk_1000CC13C, &type metadata for TVWidgets);
    atomic_store(result, (unint64_t *)&qword_1001095A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for TVWidgets()
{
  return &type metadata for TVWidgets;
}

uint64_t sub_10006F548(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2CD0, 1);
}

unint64_t sub_10006F55C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001095C0;
  if (!qword_1001095C0)
  {
    v1 = sub_100008F80(&qword_1001095C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleWidget<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001095C0);
  }
  return result;
}

uint64_t initializeWithCopy for SportsWidgetScoreViewLayout(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for SportsWidgetScoreViewLayout(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for SportsWidgetScoreViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetScoreViewLayout(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetScoreViewLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetScoreViewLayout()
{
  return &type metadata for SportsWidgetScoreViewLayout;
}

unint64_t sub_10006F76C()
{
  unint64_t result;

  result = qword_1001095F0;
  if (!qword_1001095F0)
  {
    result = swift_getWitnessTable(&unk_1000CC230, &type metadata for TVSettingsPlaybackCellularQualityEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1001095F0);
  }
  return result;
}

uint64_t sub_10006F7B0()
{
  return sub_100013840(&qword_1001095F8, &qword_100109600, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_10006F7DC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011F010);
  sub_10000909C(v16, (uint64_t)qword_10011F010);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000C27C0);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_10006FA00()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000905C(v0, qword_10011F028);
  sub_10000909C(v0, (uint64_t)qword_10011F028);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000021, 0x80000001000C2920);
}

uint64_t sub_10006FA60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008EF4(&qword_100106608);
  sub_10000905C(v0, qword_10011F040);
  v1 = sub_10000909C(v0, (uint64_t)qword_10011F040);
  IntentDescription.init(stringLiteral:)(0xD000000000000049, 0x80000001000C28D0);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_10006FAE8()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1000CC7D8);
  qword_10011F058 = result;
  return result;
}

uint64_t sub_10006FB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[15] = a2;
  v3[16] = a3;
  v3[14] = a1;
  return swift_task_switch(sub_10006FB28, 0, 0);
}

uint64_t sub_10006FB28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 56) = v2;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 226));
  *(_BYTE *)(v0 + 225) = *(_BYTE *)(v0 + 226);
  if (qword_100105D70 != -1)
    swift_once(&qword_100105D70, sub_10006FAE8);
  v3 = qword_10011F058;
  *(_QWORD *)(v0 + 152) = qword_10011F058;
  v4 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v3);
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 160) = v5;
  v6 = sub_100013840(&qword_1001097B8, &qword_1001097C0, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 168) = v6;
  *v5 = v0;
  v5[1] = sub_10006FC30;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 225, v3, &type metadata for VideosPlaybackCellularQuality, v6);
}

uint64_t sub_10006FC30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v6 = sub_100017850;
  else
    v6 = sub_10006FCB8;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10006FCB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  IntentParameter.wrappedValue.getter(v0 + 11);
  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[13];
  v0[23] = v2;
  v0[24] = v3;
  v0[8] = v1;
  v0[9] = v2;
  v0[10] = v3;
  v4 = qword_10011F058;
  v0[25] = qword_10011F058;
  v5 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain(v4);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[26] = v6;
  *v6 = v0;
  v6[1] = sub_10006FD58;
  return AppEntity._value<A, B>(for:)(v0 + 28, v4, v0[21]);
}

uint64_t sub_10006FD58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v6 = sub_10001785C;
  else
    v6 = sub_10006FDE0;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10006FDE0()
{
  uint64_t v0;
  unint64_t v1;

  *(_BYTE *)(v0 + 227) = *(_BYTE *)(v0 + 224);
  v1 = sub_100038148();
  static IntentResult.result<A>(value:)(v0 + 227, &type metadata for VideosPlaybackCellularQuality, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_10006FE38()
{
  double result;

  if (qword_100105D70 != -1)
    swift_once(&qword_100105D70, sub_10006FAE8);
  *(_QWORD *)&result = swift_retain(qword_10011F058).n128_u64[0];
  return result;
}

unint64_t sub_10006FE7C()
{
  unint64_t result;

  result = qword_100109608;
  if (!qword_100109608)
  {
    result = swift_getWitnessTable(&unk_1000CC2C0, &type metadata for TVSettingsPlaybackCellularQualityEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100109608);
  }
  return result;
}

unint64_t sub_10006FEC4()
{
  unint64_t result;

  result = qword_100109610;
  if (!qword_100109610)
  {
    result = swift_getWitnessTable(&unk_1000CC2E8, &type metadata for TVSettingsPlaybackCellularQualityEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100109610);
  }
  return result;
}

uint64_t sub_10006FF08(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000D2D68, 1) + 8);
}

uint64_t sub_10006FF2C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10006F76C();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10006FF6C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105D60, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10011F028, (uint64_t)sub_10006FA00, a1);
}

uint64_t sub_10006FF90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100105D68 != -1)
    swift_once(&qword_100105D68, sub_10006FA60);
  v2 = sub_100008EF4(&qword_100106608);
  v3 = sub_10000909C(v2, (uint64_t)qword_10011F040);
  return sub_100016518(v3, a1);
}

uint64_t sub_10006FFF0(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_1001097DC);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_1000145D8;
  *(_OWORD *)(v4 + 120) = *v1;
  *(_QWORD *)(v4 + 112) = a1;
  return swift_task_switch(sub_10006FB28, 0, 0);
}

uint64_t sub_100070058@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100071440();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_10007007C()
{
  return 0xD000000000000038;
}

unint64_t sub_10007009C()
{
  unint64_t result;

  result = qword_100109620;
  if (!qword_100109620)
  {
    result = swift_getWitnessTable(&unk_1000CC344, &type metadata for TVSettingsPlaybackCellularQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109620);
  }
  return result;
}

unint64_t sub_1000700E4()
{
  unint64_t result;

  result = qword_100109628;
  if (!qword_100109628)
  {
    result = swift_getWitnessTable(&unk_1000CC7A4, &type metadata for TVSettingsPlaybackCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109628);
  }
  return result;
}

uint64_t sub_100070128(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100070140, 0, 0);
}

uint64_t sub_100070140()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = sub_1000926AC() & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100070198(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_1000701B4, 0, 0);
}

uint64_t sub_1000701B4()
{
  uint64_t v0;

  sub_1000918B4(*(_BYTE *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100070200(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100070218, 0, 0);
}

uint64_t sub_100070218()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(v0 + 16);
  *v1 = sub_100071734();
  v1[1] = v2;
  v1[2] = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100070258()
{
  unint64_t result;

  result = qword_100109638;
  if (!qword_100109638)
  {
    result = swift_getWitnessTable(&unk_1000CC37C, &type metadata for TVSettingsPlaybackCellularQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109638);
  }
  return result;
}

uint64_t sub_10007029C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100070B64();
  *v4 = v2;
  v4[1] = sub_100014BF8;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_100070308()
{
  unint64_t result;

  result = qword_100109648;
  if (!qword_100109648)
  {
    result = swift_getWitnessTable(&unk_1000CC3D4, &type metadata for TVSettingsPlaybackCellularQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109648);
  }
  return result;
}

unint64_t sub_100070350()
{
  unint64_t result;

  result = qword_100109650;
  if (!qword_100109650)
  {
    result = swift_getWitnessTable(&unk_1000CC434, &type metadata for TVSettingsPlaybackCellularQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109650);
  }
  return result;
}

unint64_t sub_100070398()
{
  unint64_t result;

  result = qword_100109658[0];
  if (!qword_100109658[0])
  {
    result = swift_getWitnessTable(&unk_1000CC74C, &type metadata for TVSettingsPlaybackCellularQualityEntity);
    atomic_store(result, qword_100109658);
  }
  return result;
}

uint64_t sub_1000703DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100070B64();
  *v5 = v2;
  v5[1] = sub_100014D9C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100070448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100070B64();
  *v4 = v2;
  v4[1] = sub_100016564;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_1000704B4()
{
  unint64_t result;

  result = qword_100109670;
  if (!qword_100109670)
  {
    result = swift_getWitnessTable(&unk_1000CC45C, &type metadata for TVSettingsPlaybackCellularQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109670);
  }
  return result;
}

unint64_t sub_1000704FC()
{
  unint64_t result;

  result = qword_100109678;
  if (!qword_100109678)
  {
    result = swift_getWitnessTable(&unk_1000CC6F4, &type metadata for TVSettingsPlaybackCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109678);
  }
  return result;
}

unint64_t sub_100070544()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100109680;
  if (!qword_100109680)
  {
    v1 = sub_100008F80(qword_100109688);
    sub_1000704FC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100109680);
  }
  return result;
}

uint64_t sub_1000705A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100070258();
  *v5 = v2;
  v5[1] = sub_100016560;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for TVSettingsPlaybackCellularQualityEntity.Query()
{
  return &type metadata for TVSettingsPlaybackCellularQualityEntity.Query;
}

ValueMetadata *type metadata accessor for TVSettingsPlaybackCellularQualityEntity()
{
  return &type metadata for TVSettingsPlaybackCellularQualityEntity;
}

ValueMetadata *type metadata accessor for TVSettingsPlaybackCellularQualityEntity.UpdateIntent_value()
{
  return &type metadata for TVSettingsPlaybackCellularQualityEntity.UpdateIntent_value;
}

uint64_t sub_100070644()
{
  return sub_100013840(&qword_1001096A0, &qword_1001096A8, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100070674(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100070968();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100015960(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_1000706BC@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105D58, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10011F010, (uint64_t)sub_10006F7DC, a1);
}

uint64_t sub_1000706E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100070398();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100070718(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000700E4();
  return _UniqueEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_100070750(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000707D4();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10007078C()
{
  unint64_t result;

  result = qword_1001096B0;
  if (!qword_1001096B0)
  {
    result = swift_getWitnessTable(&unk_1000CC4E4, &type metadata for TVSettingsPlaybackCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_1001096B0);
  }
  return result;
}

unint64_t sub_1000707D4()
{
  unint64_t result;

  result = qword_1001096C0;
  if (!qword_1001096C0)
  {
    result = swift_getWitnessTable(&unk_1000CC50C, &type metadata for TVSettingsPlaybackCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_1001096C0);
  }
  return result;
}

unint64_t sub_10007081C()
{
  unint64_t result;

  result = qword_1001096C8;
  if (!qword_1001096C8)
  {
    result = swift_getWitnessTable(&unk_1000CC53C, &type metadata for TVSettingsPlaybackCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_1001096C8);
  }
  return result;
}

unint64_t sub_100070864()
{
  unint64_t result;

  result = qword_1001096D0;
  if (!qword_1001096D0)
  {
    result = swift_getWitnessTable(&unk_1000CC564, &type metadata for TVSettingsPlaybackCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_1001096D0);
  }
  return result;
}

unint64_t sub_1000708AC()
{
  unint64_t result;

  result = qword_1001096D8;
  if (!qword_1001096D8)
  {
    result = swift_getWitnessTable(&unk_1000CC58C, &type metadata for TVSettingsPlaybackCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_1001096D8);
  }
  return result;
}

unint64_t sub_1000708F0(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_100070924();
  a1[2] = sub_100070968();
  result = sub_1000700E4();
  a1[3] = result;
  return result;
}

unint64_t sub_100070924()
{
  unint64_t result;

  result = qword_100109728;
  if (!qword_100109728)
  {
    result = swift_getWitnessTable(&unk_1000CC68C, &type metadata for TVSettingsPlaybackCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109728);
  }
  return result;
}

unint64_t sub_100070968()
{
  unint64_t result;

  result = qword_100109730;
  if (!qword_100109730)
  {
    result = swift_getWitnessTable(&unk_1000CC654, &type metadata for TVSettingsPlaybackCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109730);
  }
  return result;
}

unint64_t sub_1000709B0()
{
  unint64_t result;

  result = qword_100109738;
  if (!qword_100109738)
  {
    result = swift_getWitnessTable(&unk_1000C8758, &type metadata for VideosPlaybackCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100109738);
  }
  return result;
}

unint64_t sub_1000709F4(uint64_t a1)
{
  unint64_t result;

  result = sub_100070A18();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100070A18()
{
  unint64_t result;

  result = qword_100109770;
  if (!qword_100109770)
  {
    result = swift_getWitnessTable(&unk_1000CC6BC, &type metadata for TVSettingsPlaybackCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109770);
  }
  return result;
}

uint64_t sub_100070A5C()
{
  return sub_100013840(&qword_100109778, &qword_100109780, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

unint64_t sub_100070A8C()
{
  unint64_t result;

  result = qword_100109788;
  if (!qword_100109788)
  {
    result = swift_getWitnessTable(&unk_1000CC61C, &type metadata for TVSettingsPlaybackCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109788);
  }
  return result;
}

unint64_t sub_100070AD4()
{
  unint64_t result;

  result = qword_100109790;
  if (!qword_100109790)
  {
    result = swift_getWitnessTable(&unk_1000CC5EC, &type metadata for TVSettingsPlaybackCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109790);
  }
  return result;
}

unint64_t sub_100070B1C()
{
  unint64_t result;

  result = qword_100109798;
  if (!qword_100109798)
  {
    result = swift_getWitnessTable(&unk_1000CC5B4, &type metadata for TVSettingsPlaybackCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109798);
  }
  return result;
}

unint64_t sub_100070B64()
{
  unint64_t result;

  result = qword_1001097A0;
  if (!qword_1001097A0)
  {
    result = swift_getWitnessTable(&unk_1000CC304, &type metadata for TVSettingsPlaybackCellularQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_1001097A0);
  }
  return result;
}

uint64_t sub_100070BA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t KeyPath;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __n128 v39;
  uint64_t OpaqueTypeConformance2;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  uint64_t v66;
  unint64_t v67;
  _QWORD v68[2];
  uint64_t v69;
  char *v70;

  v64 = a1;
  v1 = type metadata accessor for ControlSize(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100008EF4(&qword_100109830);
  v57 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v52 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_100109838);
  v6 = *(_QWORD *)(v5 - 8);
  v58 = v5;
  v59 = v6;
  __chkstk_darwin(v5);
  v53 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008EF4(&qword_100109840);
  v9 = *(_QWORD *)(v8 - 8);
  v60 = v8;
  v61 = v9;
  __chkstk_darwin(v8);
  v54 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008EF4(&qword_100109848);
  v12 = *(_QWORD *)(v11 - 8);
  v62 = v11;
  v63 = v12;
  __chkstk_darwin(v11);
  v56 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v65, "com.apple.tv.");
  HIWORD(v65[1]) = -4864;
  v69 = (uint64_t)&type metadata for TVSettingsPlaybackCellularQualityWidget;
  v14 = sub_100008EF4(&qword_100109850);
  v15._countAndFlagsBits = String.init<A>(describing:)(&v69, v14);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17 = v65[1];
  v51 = v65[0];
  v18 = qword_1001095D0;
  v19 = off_1001095D8;
  KeyPath = swift_getKeyPath(&unk_1000CC7D8);
  v21 = swift_bridgeObjectRetain(v19);
  v22 = v3;
  static ControlSize._1x1.getter(v21);
  v23 = sub_100008EF4(&qword_100108EE0);
  v24 = sub_100038100();
  v25 = sub_100038374();
  v26 = sub_1000700E4();
  v27 = sub_100064A3C();
  v49 = v23;
  v28 = v52;
  ControlPicker.init<A, B, C, D, E, F, G>(kind:displayName:preferredSize:intentUpdatableProperty:title:value:affordances:)(v51, v17, v18, v19, v22, KeyPath, sub_100071064, 0, sub_1000710D4, 0, sub_10007138C, 0, &type metadata for Text, v49, v24, v25, v26, &protocol witness table for Text, v27);
  v65[0] = &type metadata for TVSettingsPlaybackCellularQualityWidget;
  v29 = String.init<A>(describing:)(v65, v14);
  v31 = v30;
  v65[0] = v29;
  v65[1] = v30;
  v69 = 0x746567646957;
  v70 = (char *)0xE600000000000000;
  v68[0] = 0x656C67676F54;
  v68[1] = 0xE600000000000000;
  v32 = sub_100013080();
  v33 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v32, v32, v32);
  v35 = v34;
  swift_bridgeObjectRelease(v31);
  v65[0] = v33;
  v65[1] = v35;
  v36 = sub_100013840(&qword_100109858, &qword_100109830, (uint64_t)&protocol conformance descriptor for ControlPicker<A>);
  v37 = v53;
  v38 = v55;
  WidgetConfiguration.configurationDisplayName<A>(_:)(v65, v55, &type metadata for String, v36, v32);
  v39 = swift_bridgeObjectRelease(v35);
  (*(void (**)(char *, uint64_t, __n128))(v57 + 8))(v28, v38, v39);
  v69 = qword_1001095E0;
  v70 = off_1001095E8;
  v65[0] = v38;
  v65[1] = &type metadata for String;
  v66 = v36;
  v67 = v32;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v65, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v41 = v54;
  v42 = v58;
  WidgetConfiguration.description<A>(_:)(&v69, v58, &type metadata for String, OpaqueTypeConformance2, v32);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v42);
  v65[0] = v42;
  v65[1] = &type metadata for String;
  v66 = OpaqueTypeConformance2;
  v67 = v32;
  v43 = swift_getOpaqueTypeConformance2(v65, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v44 = v56;
  v45 = v60;
  WidgetConfiguration.disablesControlStateCaching()(v60, v43);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v41, v45);
  v65[0] = v45;
  v65[1] = v43;
  v46 = swift_getOpaqueTypeConformance2(v65, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v47 = v62;
  WidgetConfiguration.hiddenControl()(v62, v46);
  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v44, v47);
}

uint64_t sub_100071064@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD v8[2];

  v2 = off_1001095D8;
  v8[0] = qword_1001095D0;
  v8[1] = off_1001095D8;
  v3 = sub_100013080();
  swift_bridgeObjectRetain(v2);
  result = Text.init<A>(_:)(v8, &type metadata for String, v3);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6 & 1;
  *(_QWORD *)(a1 + 24) = v7;
  return result;
}

uint64_t sub_1000710D4@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;

  v4 = sub_100008EF4(&qword_100109860);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizedStringResource(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v40 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v40 - v15;
  v17 = *a1;
  if (qword_100105C88 != -1)
    swift_once(&qword_100105C88, sub_1000377E4);
  v18 = qword_10011EDB8;
  if (*(_QWORD *)(qword_10011EDB8 + 16))
  {
    swift_bridgeObjectRetain(qword_10011EDB8);
    v19 = sub_10002D738(v17);
    if ((v20 & 1) != 0)
    {
      v21 = v19;
      v40 = v14;
      v22 = v16;
      v23 = v11;
      v24 = *(_QWORD *)(v18 + 56);
      v25 = type metadata accessor for DisplayRepresentation(0);
      v41 = v8;
      v26 = v7;
      v27 = *(_QWORD *)(v25 - 8);
      v28 = v24 + *(_QWORD *)(v27 + 72) * v21;
      v11 = v23;
      v16 = v22;
      v14 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v6, v28, v25);
      v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56);
      v7 = v26;
      v8 = v41;
      v29(v6, 0, 1, v25);
    }
    else
    {
      v25 = type metadata accessor for DisplayRepresentation(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v6, 1, 1, v25);
    }
    swift_bridgeObjectRelease(v18);
    type metadata accessor for DisplayRepresentation(0);
    v31 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v6, 1, v25) != 1)
    {
      DisplayRepresentation.title.getter();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v25);
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v14, v7);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v16, v7);
      v33 = Text.init(_:)(v11);
      v34 = v37;
      v36 = v38;
      v35 = v39 & 1;
      result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v7);
      goto LABEL_11;
    }
  }
  else
  {
    v30 = type metadata accessor for DisplayRepresentation(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v6, 1, 1, v30);
  }
  result = sub_1000719FC((uint64_t)v6);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
LABEL_11:
  *a2 = v33;
  a2[1] = v34;
  a2[2] = v35;
  a2[3] = v36;
  return result;
}

uint64_t sub_10007138C(_BYTE *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v1 = 0x6C617551646F6F47;
  if (*a1)
    v1 = 0x6C61755174736542;
  v8[0] = v1;
  v8[1] = 0xEB00000000797469;
  v2 = sub_100013080();
  v3 = Text.init<A>(_:)(v8, &type metadata for String, v2);
  return ControlAffordances.init(tint:status:actionHint:)(0, v3, v5, v4 & 1, v6, 0, 0, 0, 0);
}

uint64_t sub_100071440()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v30 = *(_QWORD *)(v0 - 8);
  v31 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100008EF4(&qword_1001065E0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v25 - v7;
  v9 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  v29 = v12;
  __chkstk_darwin(v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008EF4(&qword_1001097C8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000024, 0x80000001000C2850);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v28(v11, 1, 1, v12);
  v16 = type metadata accessor for IntentDialog(0);
  memset(v32, 0, sizeof(v32));
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v18 = v8;
  v17(v8, 1, 1, v16);
  v19 = v6;
  v17(v6, 1, 1, v16);
  v20 = enum case for InputConnectionBehavior.default(_:);
  v21 = v31;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 104);
  v26(v2, enum case for InputConnectionBehavior.default(_:), v31);
  v22 = sub_100070398();
  v30 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v15, v11, v32, v18, v19, v2, v22);
  sub_100008EF4(&qword_1001097D0);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000042, 0x80000001000C2880);
  v28(v11, 1, 1, v29);
  LOBYTE(v32[0]) = 2;
  v17(v18, 1, 1, v16);
  v17(v19, 1, 1, v16);
  v26(v2, v20, v21);
  v23 = sub_100038100();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v15, v11, v32, v18, v19, v2, &off_1000F7028, v23);
  return v30;
}

uint64_t sub_100071734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  ValueMetadata *v20;

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = &type metadata for TVSettingsPlaybackCellularQualityEntity;
  v13 = sub_100008EF4(&qword_100108DA0);
  v14 = String.init<A>(describing:)(&v20, v13);
  sub_100008EF4(&qword_100109600);
  v15 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000C27C0);
  static Locale.current.getter(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0xD000000000000012, 0x80000001000BF530, v6, v3, 0, 0, 256);
  v16 = sub_100013840(&qword_1001097B8, &qword_1001097C0, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v17 = sub_100038100();
  _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v12, &unk_1001097A8, 0, &unk_1001097B0, 0, &type metadata for TVSettingsPlaybackCellularQualityEntity.UpdateIntent_value, v16, v17);
  return v14;
}

double sub_100071968@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for TVSettingsPlaybackCellularQualityWidget()
{
  return &type metadata for TVSettingsPlaybackCellularQualityWidget;
}

uint64_t sub_100071984(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2DB8, 1);
}

unint64_t sub_100071994(uint64_t a1)
{
  unint64_t result;

  result = sub_1000719B8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000719B8()
{
  unint64_t result;

  result = qword_100109828;
  if (!qword_100109828)
  {
    result = swift_getWitnessTable(&unk_1000CC828, &type metadata for TVSettingsPlaybackCellularQualityWidget);
    atomic_store(result, (unint64_t *)&qword_100109828);
  }
  return result;
}

uint64_t sub_1000719FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008EF4(&qword_100109860);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100071A3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;

  v0 = sub_100008F80(&qword_100109848);
  v1 = sub_100008F80(&qword_100109840);
  v2 = sub_100008F80(&qword_100109838);
  v3 = sub_100008F80(&qword_100109830);
  v4 = sub_100013840(&qword_100109858, &qword_100109830, (uint64_t)&protocol conformance descriptor for ControlPicker<A>);
  v5 = sub_100013080();
  v10 = v3;
  v11 = &type metadata for String;
  v12 = v4;
  v13 = v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v10 = v2;
  v11 = &type metadata for String;
  v12 = OpaqueTypeConformance2;
  v13 = v5;
  v7 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v10 = v1;
  v11 = (void *)v7;
  v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v10 = v0;
  v11 = (void *)v8;
  return swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.hiddenControl()>>, 1);
}

unint64_t sub_100071B50()
{
  unint64_t result;

  result = qword_100109868;
  if (!qword_100109868)
  {
    result = swift_getWitnessTable(&unk_1000CC900, &type metadata for TVSettingsPlaybackWifiQualityEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100109868);
  }
  return result;
}

uint64_t sub_100071B94()
{
  return sub_100013840(&qword_100109870, &qword_100109878, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_100071BC0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011F060);
  sub_10000909C(v16, (uint64_t)qword_10011F060);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x80000001000C2950);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_100071DE8()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000905C(v0, qword_10011F078);
  sub_10000909C(v0, (uint64_t)qword_10011F078);
  return LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001000C2A70);
}

uint64_t sub_100071E48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008EF4(&qword_100106608);
  sub_10000905C(v0, qword_10011F090);
  v1 = sub_10000909C(v0, (uint64_t)qword_10011F090);
  IntentDescription.init(stringLiteral:)(0xD000000000000043, 0x80000001000C2A20);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_100071ED0()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1000CCEB8);
  qword_10011F0A8 = result;
  return result;
}

double sub_100071EF4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for TVSettingsPlaybackWifiQualityEntity(0);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0 + *(int *)(v1 + 24))).n128_u64[0];
  return result;
}

uint64_t sub_100071F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for TVSettingsPlaybackWifiQualityEntity(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[5] = swift_task_alloc(v4);
  v3[6] = swift_task_alloc(v4);
  return swift_task_switch(sub_100071F80, 0, 0);
}

uint64_t sub_100071F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  IntentParameter.wrappedValue.getter(*(_QWORD **)(v0 + 48));
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 112));
  *(_BYTE *)(v0 + 113) = *(_BYTE *)(v0 + 112);
  if (qword_100105D90 != -1)
    swift_once(&qword_100105D90, sub_100071ED0);
  v1 = qword_10011F0A8;
  *(_QWORD *)(v0 + 56) = qword_10011F0A8;
  v2 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 64) = v3;
  v4 = sub_100013840(&qword_100109AC8, &qword_100109AD0, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 72) = v4;
  *v3 = v0;
  v3[1] = sub_100072074;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 113, v1, &type metadata for VideosPlaybackWiFiQuality, v4);
}

uint64_t sub_100072074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  sub_1000745F0(v4);
  swift_release(v3);
  if (v0)
    v5 = sub_100072274;
  else
    v5 = sub_1000720F4;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000720F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  IntentParameter.wrappedValue.getter(*(_QWORD **)(v0 + 40));
  v1 = qword_10011F0A8;
  *(_QWORD *)(v0 + 88) = qword_10011F0A8;
  v2 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 96) = v3;
  *v3 = v0;
  v3[1] = sub_100072180;
  return AppEntity._value<A, B>(for:)(v0 + 114, v1, *(_QWORD *)(v0 + 72));
}

uint64_t sub_100072180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  sub_1000745F0(v4);
  swift_release(v3);
  if (v0)
    v5 = sub_1000722B0;
  else
    v5 = sub_100072200;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100072200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  *(_BYTE *)(v0 + 115) = *(_BYTE *)(v0 + 114);
  v3 = sub_10003856C();
  static IntentResult.result<A>(value:)(v0 + 115, &type metadata for VideosPlaybackWiFiQuality, v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072274()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000722B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1000722EC@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_10007230C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for TVSettingsPlaybackWifiQualityEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100074660(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_1000745F0(a1);
}

double sub_100072388()
{
  double result;

  if (qword_100105D90 != -1)
    swift_once(&qword_100105D90, sub_100071ED0);
  *(_QWORD *)&result = swift_retain(qword_10011F0A8).n128_u64[0];
  return result;
}

unint64_t sub_1000723CC()
{
  unint64_t result;

  result = qword_100109880;
  if (!qword_100109880)
  {
    result = swift_getWitnessTable(&unk_1000CC990, &type metadata for TVSettingsPlaybackWifiQualityEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100109880);
  }
  return result;
}

unint64_t sub_100072414()
{
  unint64_t result;

  result = qword_100109888;
  if (!qword_100109888)
  {
    result = swift_getWitnessTable(&unk_1000CC9B8, &type metadata for TVSettingsPlaybackWifiQualityEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100109888);
  }
  return result;
}

uint64_t sub_100072458(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000D2E40, 1) + 8);
}

uint64_t sub_10007247C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100071B50();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_1000724BC@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105D80, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10011F078, (uint64_t)sub_100071DE8, a1);
}

uint64_t sub_1000724E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100105D88 != -1)
    swift_once(&qword_100105D88, sub_100071E48);
  v2 = sub_100008EF4(&qword_100106608);
  v3 = sub_10000909C(v2, (uint64_t)qword_10011F090);
  return sub_100016518(v3, a1);
}

uint64_t sub_100072540(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_100109AF4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1000145D8;
  return sub_100071F14(a1, v5, v4);
}

uint64_t sub_1000725A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000742A0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_1000725C8()
{
  return 0xD000000000000034;
}

unint64_t sub_1000725E8()
{
  unint64_t result;

  result = qword_100109898;
  if (!qword_100109898)
  {
    result = swift_getWitnessTable(&unk_1000CCA14, &type metadata for TVSettingsPlaybackWifiQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109898);
  }
  return result;
}

uint64_t sub_10007262C()
{
  return sub_100073834((unint64_t *)&unk_1001098A0, (uint64_t)&unk_1000CCE84);
}

uint64_t type metadata accessor for TVSettingsPlaybackWifiQualityEntity(uint64_t a1)
{
  uint64_t result;

  result = qword_100109970;
  if (!qword_100109970)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TVSettingsPlaybackWifiQualityEntity);
  return result;
}

uint64_t sub_10007268C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000726A4, 0, 0);
}

uint64_t sub_1000726A4()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = sub_1000926D8() & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000726FC(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_100072718, 0, 0);
}

uint64_t sub_100072718()
{
  uint64_t v0;

  sub_100091B88(*(_BYTE *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072764@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t result;
  _QWORD v48[2];
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;

  v2 = sub_100008EF4(&qword_1001074F8);
  __chkstk_darwin(v2);
  v54 = (char *)v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v4);
  v53 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v8 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v15);
  v17 = (char *)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for LocalizedStringResource(0);
  v18 = *(_QWORD *)(v49 - 8);
  v19 = __chkstk_darwin(v49);
  v52 = (char *)v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)v48 - v21;
  v23 = type metadata accessor for TVSettingsPlaybackWifiQualityEntity(0);
  v55 = v23;
  v24 = sub_100008EF4(&qword_100108D88);
  *a1 = String.init<A>(describing:)(&v55, v24);
  a1[1] = v25;
  v50 = a1;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 1);
  v26._countAndFlagsBits = 0x6E696D6165727453;
  v26._object = (void *)0xEA00000000002067;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v26);
  v28 = WLKIsRegulatedSKU(v27);
  v29 = v28 == 0;
  if (v28)
    v30 = 1312902231;
  else
    v30 = 0x69462D6957;
  if (v29)
    v31 = 0xE500000000000000;
  else
    v31 = 0xE400000000000000;
  v48[1] = (char *)a1 + *(int *)(v23 + 20);
  v32 = v31;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease(v31);
  v33._countAndFlagsBits = 0x7974696C61755120;
  v33._object = (void *)0xE800000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v33);
  v34 = String.LocalizationValue.init(stringInterpolation:)(v17);
  static Locale.current.getter(v34);
  v35 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v48[0] = v8;
  v37 = v51;
  v36(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v51);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0xD000000000000012, 0x80000001000BF530, v11, v8, 0, 0, 256);
  v38 = v53;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v53, 1, 1, v49);
  v39 = type metadata accessor for DisplayRepresentation.Image(0);
  v40 = v54;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v54, 1, 1, v39);
  DisplayRepresentation.init(title:subtitle:image:)(v22, v38, v40);
  v41 = *(int *)(v23 + 24);
  sub_100008EF4(&qword_100109878);
  v42 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x80000001000C2950);
  static Locale.current.getter(v42);
  v43 = v48[0];
  v36((char *)v48[0], v35, v37);
  v44 = v52;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0xD000000000000012, 0x80000001000BF530, v11, v43, 0, 0, 256);
  v45 = sub_100013840(&qword_100109AC8, &qword_100109AD0, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v46 = sub_100038524();
  result = _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v44, &unk_100109AB8, 0, &unk_100109AC0, 0, &type metadata for TVSettingsPlaybackWifiQualityEntity.UpdateIntent_value, v45, v46);
  *(_QWORD *)((char *)v50 + v41) = result;
  return result;
}

uint64_t sub_100072BC4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100072BDC, 0, 0);
}

uint64_t sub_100072BDC()
{
  uint64_t v0;

  sub_100072764(*(_QWORD **)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100072C14()
{
  unint64_t result;

  result = qword_1001098B0;
  if (!qword_1001098B0)
  {
    result = swift_getWitnessTable(&unk_1000CCA4C, &type metadata for TVSettingsPlaybackWifiQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_1001098B0);
  }
  return result;
}

uint64_t sub_100072C58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100073878();
  *v4 = v2;
  v4[1] = sub_100014BF8;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_100072CC4()
{
  unint64_t result;

  result = qword_1001098C0;
  if (!qword_1001098C0)
  {
    result = swift_getWitnessTable(&unk_1000CCAA4, &type metadata for TVSettingsPlaybackWifiQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_1001098C0);
  }
  return result;
}

unint64_t sub_100072D0C()
{
  unint64_t result;

  result = qword_1001098C8;
  if (!qword_1001098C8)
  {
    result = swift_getWitnessTable(&unk_1000CCB04, &type metadata for TVSettingsPlaybackWifiQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_1001098C8);
  }
  return result;
}

uint64_t sub_100072D50()
{
  return sub_100073834(qword_1001098D0, (uint64_t)&unk_1000CCE2C);
}

uint64_t sub_100072D74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100073878();
  *v5 = v2;
  v5[1] = sub_100014D9C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100072DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100073878();
  *v4 = v2;
  v4[1] = sub_100016564;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_100072E4C()
{
  unint64_t result;

  result = qword_1001098E8;
  if (!qword_1001098E8)
  {
    result = swift_getWitnessTable(&unk_1000CCB2C, &type metadata for TVSettingsPlaybackWifiQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_1001098E8);
  }
  return result;
}

uint64_t sub_100072E90()
{
  return sub_100073834(&qword_1001098F0, (uint64_t)&unk_1000CCDD4);
}

unint64_t sub_100072EB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001098F8;
  if (!qword_1001098F8)
  {
    v1 = sub_100008F80(qword_100109900);
    sub_100073834(&qword_1001098F0, (uint64_t)&unk_1000CCDD4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001098F8);
  }
  return result;
}

uint64_t sub_100072F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100072C14();
  *v5 = v2;
  v5[1] = sub_100016560;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for TVSettingsPlaybackWifiQualityEntity.Query()
{
  return &type metadata for TVSettingsPlaybackWifiQualityEntity.Query;
}

uint64_t *sub_100072FA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DisplayRepresentation(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + v13) = v14;
  }
  swift_retain(v14);
  return v4;
}

uint64_t sub_100073060(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for DisplayRepresentation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

_QWORD *sub_1000730BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for DisplayRepresentation(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = *(_QWORD *)((char *)a2 + v12);
  *(_QWORD *)((char *)a1 + v12) = v13;
  swift_retain(v13);
  return a1;
}

_QWORD *sub_10007314C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for DisplayRepresentation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = *(_QWORD *)((char *)a2 + v12);
  v14 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = v13;
  swift_retain(v13);
  swift_release(v14);
  return a1;
}

_OWORD *sub_1000731EC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DisplayRepresentation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_100073264(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for DisplayRepresentation(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  swift_release(v13);
  return a1;
}

uint64_t sub_1000732EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000732F8);
}

uint64_t sub_1000732F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DisplayRepresentation(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100073374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100073380);
}

uint64_t sub_100073380(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DisplayRepresentation(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000733F4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1000CCB98;
  result = type metadata accessor for DisplayRepresentation(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TVSettingsPlaybackWifiQualityEntity.UpdateIntent_value()
{
  return &type metadata for TVSettingsPlaybackWifiQualityEntity.UpdateIntent_value;
}

uint64_t sub_100073484()
{
  return sub_100013840(&qword_1001099B0, &qword_1001099B8, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_1000734B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100073834(&qword_100109A40, (uint64_t)&unk_1000CCD34);
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100015960(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_10007350C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105D78, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10011F060, (uint64_t)sub_100071BC0, a1);
}

uint64_t sub_100073530(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100073834(qword_1001098D0, (uint64_t)&unk_1000CCE2C);
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100073578(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100073834((unint64_t *)&unk_1001098A0, (uint64_t)&unk_1000CCE84);
  return _UniqueEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_1000735C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100073834(&qword_1001099D0, (uint64_t)&unk_1000CCBEC);
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_100073608()
{
  return sub_100073834((unint64_t *)&unk_1001099C0, (uint64_t)&unk_1000CCBC4);
}

uint64_t sub_10007362C()
{
  return sub_100073834(&qword_1001099D0, (uint64_t)&unk_1000CCBEC);
}

uint64_t sub_100073650()
{
  return sub_100073834(&qword_1001099D8, (uint64_t)&unk_1000CCC1C);
}

uint64_t sub_100073674()
{
  return sub_100073834(&qword_1001099E0, (uint64_t)&unk_1000CCC44);
}

uint64_t sub_100073698()
{
  return sub_100073834(&qword_1001099E8, (uint64_t)&unk_1000CCC6C);
}

uint64_t sub_1000736BC(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_100073834(&qword_100109A38, (uint64_t)&unk_1000CCD6C);
  a1[2] = sub_100073834(&qword_100109A40, (uint64_t)&unk_1000CCD34);
  result = sub_100073834((unint64_t *)&unk_1001098A0, (uint64_t)&unk_1000CCE84);
  a1[3] = result;
  return result;
}

unint64_t sub_100073724()
{
  unint64_t result;

  result = qword_100109A48;
  if (!qword_100109A48)
  {
    result = swift_getWitnessTable(&unk_1000C8A3C, &type metadata for VideosPlaybackWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_100109A48);
  }
  return result;
}

uint64_t sub_100073768(uint64_t a1)
{
  uint64_t result;

  result = sub_100073834(&qword_100109A80, (uint64_t)&unk_1000CCD9C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10007379C()
{
  return sub_100013840(&qword_100109A88, &qword_100109A90, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_1000737C8()
{
  return sub_100073834(&qword_100109A98, (uint64_t)&unk_1000CCCFC);
}

uint64_t sub_1000737EC()
{
  return sub_100073834(&qword_100109AA0, (uint64_t)&unk_1000CCCCC);
}

uint64_t sub_100073810()
{
  return sub_100073834(&qword_100109AA8, (uint64_t)&unk_1000CCC94);
}

uint64_t sub_100073834(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for TVSettingsPlaybackWifiQualityEntity(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100073878()
{
  unint64_t result;

  result = qword_100109AB0;
  if (!qword_100109AB0)
  {
    result = swift_getWitnessTable(&unk_1000CC9D4, &type metadata for TVSettingsPlaybackWifiQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109AB0);
  }
  return result;
}

void sub_1000738BC()
{
  int v0;
  BOOL v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;

  _StringGuts.grow(_:)(20);
  v0 = WLKIsRegulatedSKU();
  v1 = v0 == 0;
  if (v0)
    v2 = 1312902231;
  else
    v2 = 0x69462D6957;
  if (v1)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE400000000000000;
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease(v3);
  v5._object = (void *)0x80000001000C2AB0;
  v5._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v5);
  qword_10011F0B0 = 0;
  *(_QWORD *)algn_10011F0B8 = 0xE000000000000000;
}

void sub_100073968()
{
  uint64_t v0;
  int v1;
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  _StringGuts.grow(_:)(35);
  v0 = swift_bridgeObjectRelease(0xE000000000000000);
  v1 = WLKIsRegulatedSKU(v0);
  v2 = v1 == 0;
  if (v1)
    v3 = 1312902231;
  else
    v3 = 0x69462D6957;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE400000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._object = (void *)0x80000001000C2A90;
  v6._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v6);
  qword_10011F0C0 = 0x742065736F6F6843;
  *(_QWORD *)algn_10011F0C8 = 0xEB00000000206568;
}

uint64_t sub_100073A34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *object;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  unint64_t v61;
  _QWORD v62[2];
  uint64_t v63;
  unint64_t v64;

  v58 = a1;
  v1 = type metadata accessor for ControlSize(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100109830);
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  __chkstk_darwin(v4);
  v47 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100008EF4(&qword_100109838);
  v50 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100008EF4(&qword_100109840);
  v53 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v51 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100008EF4(&qword_100109848);
  v55 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v54 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v59, "com.apple.tv.");
  HIWORD(v59[1]) = -4864;
  v63 = (uint64_t)&type metadata for TVSettingsPlaybackWifiQualityWidget;
  v9 = sub_100008EF4(&qword_100109B48);
  v10._countAndFlagsBits = String.init<A>(describing:)(&v63, v9);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v12 = v59[1];
  v45 = v59[0];
  if (qword_100105D98 != -1)
    swift_once(&qword_100105D98, sub_1000738BC);
  v13 = qword_10011F0B0;
  v14 = *(_QWORD *)algn_10011F0B8;
  KeyPath = swift_getKeyPath(&unk_1000CCEB8);
  v16 = swift_bridgeObjectRetain(v14);
  static ControlSize._1x1.getter(v16);
  v17 = sub_100008EF4(&qword_100108EE0);
  v18 = sub_100038524();
  v19 = sub_100038808();
  v20 = sub_100073834((unint64_t *)&unk_1001098A0, (uint64_t)&unk_1000CCE84);
  v21 = sub_100064A3C();
  v43 = v17;
  v22 = v47;
  ControlPicker.init<A, B, C, D, E, F, G>(kind:displayName:preferredSize:intentUpdatableProperty:title:value:affordances:)(v45, v12, v13, v14, v3, KeyPath, sub_100073F4C, 0, sub_100073FE4, 0, sub_10007138C, 0, &type metadata for Text, v43, v18, v19, v20, &protocol witness table for Text, v21);
  v59[0] = &type metadata for TVSettingsPlaybackWifiQualityWidget;
  v23 = String.init<A>(describing:)(v59, v9);
  v25 = v24;
  v59[0] = v23;
  v59[1] = v24;
  v63 = 0x746567646957;
  v64 = 0xE600000000000000;
  v62[0] = 0x656C67676F54;
  v62[1] = 0xE600000000000000;
  v26 = sub_100013080();
  v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v63, v62, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v26, v26, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v25);
  v59[0] = v27;
  v59[1] = v29;
  v30 = sub_100013840(&qword_100109858, &qword_100109830, (uint64_t)&protocol conformance descriptor for ControlPicker<A>);
  v31 = v46;
  v32 = v49;
  WidgetConfiguration.configurationDisplayName<A>(_:)(v59, v49, &type metadata for String, v30, v26);
  v33 = swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t, __n128))(v48 + 8))(v22, v32, v33);
  if (qword_100105DA0 != -1)
    swift_once(&qword_100105DA0, sub_100073968);
  v63 = qword_10011F0C0;
  v64 = *(_QWORD *)algn_10011F0C8;
  v59[0] = v32;
  v59[1] = &type metadata for String;
  v60 = v30;
  v61 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v59, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v36 = v51;
  v35 = v52;
  WidgetConfiguration.description<A>(_:)(&v63, v52, &type metadata for String, OpaqueTypeConformance2, v26);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v31, v35);
  v59[0] = v35;
  v59[1] = &type metadata for String;
  v60 = OpaqueTypeConformance2;
  v61 = v26;
  v37 = swift_getOpaqueTypeConformance2(v59, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v38 = v54;
  v39 = v56;
  WidgetConfiguration.disablesControlStateCaching()(v56, v37);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v36, v39);
  v59[0] = v39;
  v59[1] = v37;
  v40 = swift_getOpaqueTypeConformance2(v59, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v41 = v57;
  WidgetConfiguration.hiddenControl()(v57, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v38, v41);
}

uint64_t sub_100073F4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD v8[2];

  if (qword_100105D98 != -1)
    swift_once(&qword_100105D98, sub_1000738BC);
  v2 = *(_QWORD *)algn_10011F0B8;
  v8[0] = qword_10011F0B0;
  v8[1] = *(_QWORD *)algn_10011F0B8;
  v3 = sub_100013080();
  swift_bridgeObjectRetain(v2);
  result = Text.init<A>(_:)(v8, &type metadata for String, v3);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6 & 1;
  *(_QWORD *)(a1 + 24) = v7;
  return result;
}

uint64_t sub_100073FE4@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;

  v4 = sub_100008EF4(&qword_100109860);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizedStringResource(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v40 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v40 - v15;
  v17 = *a1;
  if (qword_100105C78 != -1)
    swift_once(&qword_100105C78, sub_100036F88);
  v18 = qword_10011ED98;
  if (*(_QWORD *)(qword_10011ED98 + 16))
  {
    swift_bridgeObjectRetain(qword_10011ED98);
    v19 = sub_10002D738(v17);
    if ((v20 & 1) != 0)
    {
      v21 = v19;
      v40 = v14;
      v22 = v16;
      v23 = v11;
      v24 = *(_QWORD *)(v18 + 56);
      v25 = type metadata accessor for DisplayRepresentation(0);
      v41 = v8;
      v26 = v7;
      v27 = *(_QWORD *)(v25 - 8);
      v28 = v24 + *(_QWORD *)(v27 + 72) * v21;
      v11 = v23;
      v16 = v22;
      v14 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v6, v28, v25);
      v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56);
      v7 = v26;
      v8 = v41;
      v29(v6, 0, 1, v25);
    }
    else
    {
      v25 = type metadata accessor for DisplayRepresentation(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v6, 1, 1, v25);
    }
    swift_bridgeObjectRelease(v18);
    type metadata accessor for DisplayRepresentation(0);
    v31 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v6, 1, v25) != 1)
    {
      DisplayRepresentation.title.getter();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v25);
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v14, v7);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v16, v7);
      v33 = Text.init(_:)(v11);
      v34 = v37;
      v36 = v38;
      v35 = v39 & 1;
      result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v7);
      goto LABEL_11;
    }
  }
  else
  {
    v30 = type metadata accessor for DisplayRepresentation(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v6, 1, 1, v30);
  }
  result = sub_1000719FC((uint64_t)v6);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
LABEL_11:
  *a2 = v33;
  a2[1] = v34;
  a2[2] = v35;
  a2[3] = v36;
  return result;
}

uint64_t sub_1000742A0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v33 = *(_QWORD *)(v0 - 8);
  v34 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100008EF4(&qword_1001065E0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v28 - v7;
  v9 = sub_100008EF4(&qword_100109AD8);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  v32 = v15;
  __chkstk_darwin(v15);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100008EF4(&qword_100109AE0);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000021, 0x80000001000C29B0);
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v31(v14, 1, 1, v15);
  v19 = type metadata accessor for TVSettingsPlaybackWifiQualityEntity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v11, 1, 1, v19);
  v20 = type metadata accessor for IntentDialog(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v8, 1, 1, v20);
  v22 = v6;
  v21(v6, 1, 1, v20);
  v23 = enum case for InputConnectionBehavior.default(_:);
  v24 = v34;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 104);
  v29(v2, enum case for InputConnectionBehavior.default(_:), v34);
  v25 = sub_100073834(qword_1001098D0, (uint64_t)&unk_1000CCE2C);
  v33 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v18, v14, v11, v8, v22, v2, v25);
  sub_100008EF4(&qword_100109AE8);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000003CLL, 0x80000001000C29E0);
  v31(v14, 1, 1, v32);
  v35 = 2;
  v21(v8, 1, 1, v20);
  v21(v22, 1, 1, v20);
  v29(v2, v23, v24);
  v26 = sub_100038524();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v18, v14, &v35, v8, v22, v2, &off_1000F7050, v26);
  return v33;
}

uint64_t sub_1000745F0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TVSettingsPlaybackWifiQualityEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_10007462C@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TVSettingsPlaybackWifiQualityEntity(0) + 24));
  *a2 = v3;
  *(_QWORD *)&result = swift_retain(v3).n128_u64[0];
  return result;
}

uint64_t sub_100074660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TVSettingsPlaybackWifiQualityEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for TVSettingsPlaybackWifiQualityWidget()
{
  return &type metadata for TVSettingsPlaybackWifiQualityWidget;
}

uint64_t sub_1000746B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2E90, 1);
}

unint64_t sub_1000746C4(uint64_t a1)
{
  unint64_t result;

  result = sub_1000746E8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000746E8()
{
  unint64_t result;

  result = qword_100109B40;
  if (!qword_100109B40)
  {
    result = swift_getWitnessTable(&unk_1000CCF04, &type metadata for TVSettingsPlaybackWifiQualityWidget);
    atomic_store(result, (unint64_t *)&qword_100109B40);
  }
  return result;
}

uint64_t sub_10007472C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;

  v0 = sub_100008F80(&qword_100109848);
  v1 = sub_100008F80(&qword_100109840);
  v2 = sub_100008F80(&qword_100109838);
  v3 = sub_100008F80(&qword_100109830);
  v4 = sub_100013840(&qword_100109858, &qword_100109830, (uint64_t)&protocol conformance descriptor for ControlPicker<A>);
  v5 = sub_100013080();
  v10 = v3;
  v11 = &type metadata for String;
  v12 = v4;
  v13 = v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v10 = v2;
  v11 = &type metadata for String;
  v12 = OpaqueTypeConformance2;
  v13 = v5;
  v7 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v10 = v1;
  v11 = (void *)v7;
  v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v10 = v0;
  v11 = (void *)v8;
  return swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.hiddenControl()>>, 1);
}

unint64_t sub_100074840()
{
  unint64_t result;

  result = qword_100109B70;
  if (!qword_100109B70)
  {
    result = swift_getWitnessTable(&unk_1000CCFD0, &type metadata for TVSettingsDownloadCellularQualityEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100109B70);
  }
  return result;
}

uint64_t sub_100074884()
{
  return sub_100013840(&qword_100109B78, &qword_100109B80, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_1000748B0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011F0D0);
  sub_10000909C(v16, (uint64_t)qword_10011F0D0);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000C2B20);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_100074AD4()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000905C(v0, qword_10011F0E8);
  sub_10000909C(v0, (uint64_t)qword_10011F0E8);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000021, 0x80000001000C2C50);
}

uint64_t sub_100074B34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008EF4(&qword_100106608);
  sub_10000905C(v0, qword_10011F100);
  v1 = sub_10000909C(v0, (uint64_t)qword_10011F100);
  IntentDescription.init(stringLiteral:)(0xD000000000000049, 0x80000001000C2C00);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_100074BBC()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1000CD578);
  qword_10011F118 = result;
  return result;
}

uint64_t sub_100074BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[15] = a2;
  v3[16] = a3;
  v3[14] = a1;
  return swift_task_switch(sub_100074BFC, 0, 0);
}

uint64_t sub_100074BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 56) = v2;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 226));
  *(_BYTE *)(v0 + 225) = *(_BYTE *)(v0 + 226);
  if (qword_100105DC0 != -1)
    swift_once(&qword_100105DC0, sub_100074BBC);
  v3 = qword_10011F118;
  *(_QWORD *)(v0 + 152) = qword_10011F118;
  v4 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v3);
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 160) = v5;
  v6 = sub_100013840(&qword_100109D38, &qword_100109D40, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 168) = v6;
  *v5 = v0;
  v5[1] = sub_100074D04;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 225, v3, &type metadata for VideosDownloadCellularQuality, v6);
}

uint64_t sub_100074D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v6 = sub_100017850;
  else
    v6 = sub_100074D8C;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100074D8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  IntentParameter.wrappedValue.getter(v0 + 11);
  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[13];
  v0[23] = v2;
  v0[24] = v3;
  v0[8] = v1;
  v0[9] = v2;
  v0[10] = v3;
  v4 = qword_10011F118;
  v0[25] = qword_10011F118;
  v5 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain(v4);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[26] = v6;
  *v6 = v0;
  v6[1] = sub_100074E2C;
  return AppEntity._value<A, B>(for:)(v0 + 28, v4, v0[21]);
}

uint64_t sub_100074E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v6 = sub_10001785C;
  else
    v6 = sub_100074EB4;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100074EB4()
{
  uint64_t v0;
  unint64_t v1;

  *(_BYTE *)(v0 + 227) = *(_BYTE *)(v0 + 224);
  v1 = sub_100051090();
  static IntentResult.result<A>(value:)(v0 + 227, &type metadata for VideosDownloadCellularQuality, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100074F0C()
{
  double result;

  if (qword_100105DC0 != -1)
    swift_once(&qword_100105DC0, sub_100074BBC);
  *(_QWORD *)&result = swift_retain(qword_10011F118).n128_u64[0];
  return result;
}

unint64_t sub_100074F50()
{
  unint64_t result;

  result = qword_100109B88;
  if (!qword_100109B88)
  {
    result = swift_getWitnessTable(&unk_1000CD060, &type metadata for TVSettingsDownloadCellularQualityEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100109B88);
  }
  return result;
}

unint64_t sub_100074F98()
{
  unint64_t result;

  result = qword_100109B90;
  if (!qword_100109B90)
  {
    result = swift_getWitnessTable(&unk_1000CD088, &type metadata for TVSettingsDownloadCellularQualityEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100109B90);
  }
  return result;
}

uint64_t sub_100074FDC(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000D2F0C, 1) + 8);
}

uint64_t sub_100075000(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100074840();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_100075040@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105DB0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10011F0E8, (uint64_t)sub_100074AD4, a1);
}

uint64_t sub_100075064@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100105DB8 != -1)
    swift_once(&qword_100105DB8, sub_100074B34);
  v2 = sub_100008EF4(&qword_100106608);
  v3 = sub_10000909C(v2, (uint64_t)qword_10011F100);
  return sub_100016518(v3, a1);
}

uint64_t sub_1000750C4(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_100109D5C);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_1000145D8;
  *(_OWORD *)(v4 + 120) = *v1;
  *(_QWORD *)(v4 + 112) = a1;
  return swift_task_switch(sub_100074BFC, 0, 0);
}

uint64_t sub_10007512C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100076510();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100075150()
{
  return 0xD000000000000038;
}

unint64_t sub_100075170()
{
  unint64_t result;

  result = qword_100109BA0;
  if (!qword_100109BA0)
  {
    result = swift_getWitnessTable(&unk_1000CD0E4, &type metadata for TVSettingsDownloadCellularQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109BA0);
  }
  return result;
}

unint64_t sub_1000751B8()
{
  unint64_t result;

  result = qword_100109BA8;
  if (!qword_100109BA8)
  {
    result = swift_getWitnessTable(&unk_1000CD544, &type metadata for TVSettingsDownloadCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109BA8);
  }
  return result;
}

uint64_t sub_1000751FC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100075214, 0, 0);
}

uint64_t sub_100075214()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = sub_100092704() & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007526C(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_100075288, 0, 0);
}

uint64_t sub_100075288()
{
  uint64_t v0;

  sub_100091E60(*(_BYTE *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000752D4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000752EC, 0, 0);
}

uint64_t sub_1000752EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(v0 + 16);
  *v1 = sub_100076804();
  v1[1] = v2;
  v1[2] = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10007532C()
{
  unint64_t result;

  result = qword_100109BB8;
  if (!qword_100109BB8)
  {
    result = swift_getWitnessTable(&unk_1000CD11C, &type metadata for TVSettingsDownloadCellularQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109BB8);
  }
  return result;
}

uint64_t sub_100075370(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100075C38();
  *v4 = v2;
  v4[1] = sub_100014BF8;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_1000753DC()
{
  unint64_t result;

  result = qword_100109BC8;
  if (!qword_100109BC8)
  {
    result = swift_getWitnessTable(&unk_1000CD174, &type metadata for TVSettingsDownloadCellularQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109BC8);
  }
  return result;
}

unint64_t sub_100075424()
{
  unint64_t result;

  result = qword_100109BD0;
  if (!qword_100109BD0)
  {
    result = swift_getWitnessTable(&unk_1000CD1D4, &type metadata for TVSettingsDownloadCellularQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109BD0);
  }
  return result;
}

unint64_t sub_10007546C()
{
  unint64_t result;

  result = qword_100109BD8[0];
  if (!qword_100109BD8[0])
  {
    result = swift_getWitnessTable(&unk_1000CD4EC, &type metadata for TVSettingsDownloadCellularQualityEntity);
    atomic_store(result, qword_100109BD8);
  }
  return result;
}

uint64_t sub_1000754B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100075C38();
  *v5 = v2;
  v5[1] = sub_100014D9C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_10007551C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100075C38();
  *v4 = v2;
  v4[1] = sub_100016564;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_100075588()
{
  unint64_t result;

  result = qword_100109BF0;
  if (!qword_100109BF0)
  {
    result = swift_getWitnessTable(&unk_1000CD1FC, &type metadata for TVSettingsDownloadCellularQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109BF0);
  }
  return result;
}

unint64_t sub_1000755D0()
{
  unint64_t result;

  result = qword_100109BF8;
  if (!qword_100109BF8)
  {
    result = swift_getWitnessTable(&unk_1000CD494, &type metadata for TVSettingsDownloadCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109BF8);
  }
  return result;
}

unint64_t sub_100075618()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100109C00;
  if (!qword_100109C00)
  {
    v1 = sub_100008F80(qword_100109C08);
    sub_1000755D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100109C00);
  }
  return result;
}

uint64_t sub_10007567C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10007532C();
  *v5 = v2;
  v5[1] = sub_100016560;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for TVSettingsDownloadCellularQualityEntity.Query()
{
  return &type metadata for TVSettingsDownloadCellularQualityEntity.Query;
}

ValueMetadata *type metadata accessor for TVSettingsDownloadCellularQualityEntity()
{
  return &type metadata for TVSettingsDownloadCellularQualityEntity;
}

ValueMetadata *type metadata accessor for TVSettingsDownloadCellularQualityEntity.UpdateIntent_value()
{
  return &type metadata for TVSettingsDownloadCellularQualityEntity.UpdateIntent_value;
}

uint64_t sub_100075718()
{
  return sub_100013840(&qword_100109C20, &qword_100109C28, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100075748(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100075A3C();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100015960(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_100075790@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105DA8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10011F0D0, (uint64_t)sub_1000748B0, a1);
}

uint64_t sub_1000757B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007546C();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_1000757EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000751B8();
  return _UniqueEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_100075824(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000758A8();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100075860()
{
  unint64_t result;

  result = qword_100109C30;
  if (!qword_100109C30)
  {
    result = swift_getWitnessTable(&unk_1000CD284, &type metadata for TVSettingsDownloadCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109C30);
  }
  return result;
}

unint64_t sub_1000758A8()
{
  unint64_t result;

  result = qword_100109C40;
  if (!qword_100109C40)
  {
    result = swift_getWitnessTable(&unk_1000CD2AC, &type metadata for TVSettingsDownloadCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109C40);
  }
  return result;
}

unint64_t sub_1000758F0()
{
  unint64_t result;

  result = qword_100109C48;
  if (!qword_100109C48)
  {
    result = swift_getWitnessTable(&unk_1000CD2DC, &type metadata for TVSettingsDownloadCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109C48);
  }
  return result;
}

unint64_t sub_100075938()
{
  unint64_t result;

  result = qword_100109C50;
  if (!qword_100109C50)
  {
    result = swift_getWitnessTable(&unk_1000CD304, &type metadata for TVSettingsDownloadCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109C50);
  }
  return result;
}

unint64_t sub_100075980()
{
  unint64_t result;

  result = qword_100109C58;
  if (!qword_100109C58)
  {
    result = swift_getWitnessTable(&unk_1000CD32C, &type metadata for TVSettingsDownloadCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109C58);
  }
  return result;
}

unint64_t sub_1000759C4(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1000759F8();
  a1[2] = sub_100075A3C();
  result = sub_1000751B8();
  a1[3] = result;
  return result;
}

unint64_t sub_1000759F8()
{
  unint64_t result;

  result = qword_100109CA8;
  if (!qword_100109CA8)
  {
    result = swift_getWitnessTable(&unk_1000CD42C, &type metadata for TVSettingsDownloadCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109CA8);
  }
  return result;
}

unint64_t sub_100075A3C()
{
  unint64_t result;

  result = qword_100109CB0;
  if (!qword_100109CB0)
  {
    result = swift_getWitnessTable(&unk_1000CD3F4, &type metadata for TVSettingsDownloadCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109CB0);
  }
  return result;
}

unint64_t sub_100075A84()
{
  unint64_t result;

  result = qword_100109CB8;
  if (!qword_100109CB8)
  {
    result = swift_getWitnessTable(&unk_1000C9FE8, &type metadata for VideosDownloadCellularQuality);
    atomic_store(result, (unint64_t *)&qword_100109CB8);
  }
  return result;
}

unint64_t sub_100075AC8(uint64_t a1)
{
  unint64_t result;

  result = sub_100075AEC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100075AEC()
{
  unint64_t result;

  result = qword_100109CF0;
  if (!qword_100109CF0)
  {
    result = swift_getWitnessTable(&unk_1000CD45C, &type metadata for TVSettingsDownloadCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109CF0);
  }
  return result;
}

uint64_t sub_100075B30()
{
  return sub_100013840(&qword_100109CF8, &qword_100109D00, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

unint64_t sub_100075B60()
{
  unint64_t result;

  result = qword_100109D08;
  if (!qword_100109D08)
  {
    result = swift_getWitnessTable(&unk_1000CD3BC, &type metadata for TVSettingsDownloadCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109D08);
  }
  return result;
}

unint64_t sub_100075BA8()
{
  unint64_t result;

  result = qword_100109D10;
  if (!qword_100109D10)
  {
    result = swift_getWitnessTable(&unk_1000CD38C, &type metadata for TVSettingsDownloadCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109D10);
  }
  return result;
}

unint64_t sub_100075BF0()
{
  unint64_t result;

  result = qword_100109D18;
  if (!qword_100109D18)
  {
    result = swift_getWitnessTable(&unk_1000CD354, &type metadata for TVSettingsDownloadCellularQualityEntity);
    atomic_store(result, (unint64_t *)&qword_100109D18);
  }
  return result;
}

unint64_t sub_100075C38()
{
  unint64_t result;

  result = qword_100109D20;
  if (!qword_100109D20)
  {
    result = swift_getWitnessTable(&unk_1000CD0A4, &type metadata for TVSettingsDownloadCellularQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109D20);
  }
  return result;
}

uint64_t sub_100075C7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t KeyPath;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __n128 v39;
  uint64_t OpaqueTypeConformance2;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  uint64_t v66;
  unint64_t v67;
  _QWORD v68[2];
  uint64_t v69;
  char *v70;

  v64 = a1;
  v1 = type metadata accessor for ControlSize(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100008EF4(&qword_100109830);
  v57 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v52 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_100109838);
  v6 = *(_QWORD *)(v5 - 8);
  v58 = v5;
  v59 = v6;
  __chkstk_darwin(v5);
  v53 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008EF4(&qword_100109840);
  v9 = *(_QWORD *)(v8 - 8);
  v60 = v8;
  v61 = v9;
  __chkstk_darwin(v8);
  v54 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008EF4(&qword_100109848);
  v12 = *(_QWORD *)(v11 - 8);
  v62 = v11;
  v63 = v12;
  __chkstk_darwin(v11);
  v56 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v65, "com.apple.tv.");
  HIWORD(v65[1]) = -4864;
  v69 = (uint64_t)&type metadata for TVSettingsDownloadCellularQualityWidget;
  v14 = sub_100008EF4(&qword_100109DB0);
  v15._countAndFlagsBits = String.init<A>(describing:)(&v69, v14);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17 = v65[1];
  v51 = v65[0];
  v18 = qword_100109B50;
  v19 = off_100109B58;
  KeyPath = swift_getKeyPath(&unk_1000CD578);
  v21 = swift_bridgeObjectRetain(v19);
  v22 = v3;
  static ControlSize._1x1.getter(v21);
  v23 = sub_100008EF4(&qword_100108EE0);
  v24 = sub_100051048();
  v25 = sub_1000512BC();
  v26 = sub_1000751B8();
  v27 = sub_100064A3C();
  v49 = v23;
  v28 = v52;
  ControlPicker.init<A, B, C, D, E, F, G>(kind:displayName:preferredSize:intentUpdatableProperty:title:value:affordances:)(v51, v17, v18, v19, v22, KeyPath, sub_100076138, 0, sub_1000761A8, 0, sub_100076460, 0, &type metadata for Text, v49, v24, v25, v26, &protocol witness table for Text, v27);
  v65[0] = &type metadata for TVSettingsDownloadCellularQualityWidget;
  v29 = String.init<A>(describing:)(v65, v14);
  v31 = v30;
  v65[0] = v29;
  v65[1] = v30;
  v69 = 0x746567646957;
  v70 = (char *)0xE600000000000000;
  v68[0] = 0x656C67676F54;
  v68[1] = 0xE600000000000000;
  v32 = sub_100013080();
  v33 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v69, v68, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v32, v32, v32);
  v35 = v34;
  swift_bridgeObjectRelease(v31);
  v65[0] = v33;
  v65[1] = v35;
  v36 = sub_100013840(&qword_100109858, &qword_100109830, (uint64_t)&protocol conformance descriptor for ControlPicker<A>);
  v37 = v53;
  v38 = v55;
  WidgetConfiguration.configurationDisplayName<A>(_:)(v65, v55, &type metadata for String, v36, v32);
  v39 = swift_bridgeObjectRelease(v35);
  (*(void (**)(char *, uint64_t, __n128))(v57 + 8))(v28, v38, v39);
  v69 = qword_100109B60;
  v70 = off_100109B68;
  v65[0] = v38;
  v65[1] = &type metadata for String;
  v66 = v36;
  v67 = v32;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v65, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v41 = v54;
  v42 = v58;
  WidgetConfiguration.description<A>(_:)(&v69, v58, &type metadata for String, OpaqueTypeConformance2, v32);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v42);
  v65[0] = v42;
  v65[1] = &type metadata for String;
  v66 = OpaqueTypeConformance2;
  v67 = v32;
  v43 = swift_getOpaqueTypeConformance2(v65, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v44 = v56;
  v45 = v60;
  WidgetConfiguration.disablesControlStateCaching()(v60, v43);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v41, v45);
  v65[0] = v45;
  v65[1] = v43;
  v46 = swift_getOpaqueTypeConformance2(v65, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v47 = v62;
  WidgetConfiguration.hiddenControl()(v62, v46);
  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v44, v47);
}

uint64_t sub_100076138@<X0>(uint64_t a1@<X8>)
{
  char *v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD v8[2];

  v2 = off_100109B58;
  v8[0] = qword_100109B50;
  v8[1] = off_100109B58;
  v3 = sub_100013080();
  swift_bridgeObjectRetain(v2);
  result = Text.init<A>(_:)(v8, &type metadata for String, v3);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6 & 1;
  *(_QWORD *)(a1 + 24) = v7;
  return result;
}

uint64_t sub_1000761A8@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;

  v4 = sub_100008EF4(&qword_100109860);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizedStringResource(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v40 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v40 - v15;
  v17 = *a1;
  if (qword_100105CD8 != -1)
    swift_once(&qword_100105CD8, sub_100050900);
  v18 = qword_10011EED0;
  if (*(_QWORD *)(qword_10011EED0 + 16))
  {
    swift_bridgeObjectRetain(qword_10011EED0);
    v19 = sub_10002D7E0(v17);
    if ((v20 & 1) != 0)
    {
      v21 = v19;
      v40 = v14;
      v22 = v16;
      v23 = v11;
      v24 = *(_QWORD *)(v18 + 56);
      v25 = type metadata accessor for DisplayRepresentation(0);
      v41 = v8;
      v26 = v7;
      v27 = *(_QWORD *)(v25 - 8);
      v28 = v24 + *(_QWORD *)(v27 + 72) * v21;
      v11 = v23;
      v16 = v22;
      v14 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v6, v28, v25);
      v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56);
      v7 = v26;
      v8 = v41;
      v29(v6, 0, 1, v25);
    }
    else
    {
      v25 = type metadata accessor for DisplayRepresentation(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v6, 1, 1, v25);
    }
    swift_bridgeObjectRelease(v18);
    type metadata accessor for DisplayRepresentation(0);
    v31 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v6, 1, v25) != 1)
    {
      DisplayRepresentation.title.getter();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v25);
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v14, v7);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v16, v7);
      v33 = Text.init(_:)(v11);
      v34 = v37;
      v36 = v38;
      v35 = v39 & 1;
      result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v7);
      goto LABEL_11;
    }
  }
  else
  {
    v30 = type metadata accessor for DisplayRepresentation(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v6, 1, 1, v30);
  }
  result = sub_1000719FC((uint64_t)v6);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
LABEL_11:
  *a2 = v33;
  a2[1] = v34;
  a2[2] = v35;
  a2[3] = v36;
  return result;
}

uint64_t sub_100076460(_BYTE *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v1 = 0x80000001000BEFD0;
  if (*a1)
    v1 = 0x80000001000BEFF0;
  v8[0] = 0xD000000000000013;
  v8[1] = v1;
  v2 = sub_100013080();
  v3 = Text.init<A>(_:)(v8, &type metadata for String, v2);
  return ControlAffordances.init(tint:status:actionHint:)(0, v3, v5, v4 & 1, v6, 0, 0, 0, 0);
}

uint64_t sub_100076510()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v30 = *(_QWORD *)(v0 - 8);
  v31 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100008EF4(&qword_1001065E0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v25 - v7;
  v9 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  v29 = v12;
  __chkstk_darwin(v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008EF4(&qword_100109D48);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000024, 0x80000001000C2B80);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v28(v11, 1, 1, v12);
  v16 = type metadata accessor for IntentDialog(0);
  memset(v32, 0, sizeof(v32));
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v18 = v8;
  v17(v8, 1, 1, v16);
  v19 = v6;
  v17(v6, 1, 1, v16);
  v20 = enum case for InputConnectionBehavior.default(_:);
  v21 = v31;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 104);
  v26(v2, enum case for InputConnectionBehavior.default(_:), v31);
  v22 = sub_10007546C();
  v30 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v15, v11, v32, v18, v19, v2, v22);
  sub_100008EF4(&qword_100109D50);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000042, 0x80000001000C2BB0);
  v28(v11, 1, 1, v29);
  LOBYTE(v32[0]) = 2;
  v17(v18, 1, 1, v16);
  v17(v19, 1, 1, v16);
  v26(v2, v20, v21);
  v23 = sub_100051048();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v15, v11, v32, v18, v19, v2, &off_1000F7078, v23);
  return v30;
}

uint64_t sub_100076804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  ValueMetadata *v20;

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = &type metadata for TVSettingsDownloadCellularQualityEntity;
  v13 = sub_100008EF4(&qword_100108DA8);
  v14 = String.init<A>(describing:)(&v20, v13);
  sub_100008EF4(&qword_100109B80);
  v15 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000C2B20);
  static Locale.current.getter(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0xD000000000000012, 0x80000001000BF530, v6, v3, 0, 0, 256);
  v16 = sub_100013840(&qword_100109D38, &qword_100109D40, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v17 = sub_100051048();
  _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v12, &unk_100109D28, 0, &unk_100109D30, 0, &type metadata for TVSettingsDownloadCellularQualityEntity.UpdateIntent_value, v16, v17);
  return v14;
}

double sub_100076A38@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for TVSettingsDownloadCellularQualityWidget()
{
  return &type metadata for TVSettingsDownloadCellularQualityWidget;
}

uint64_t sub_100076A54(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D2F5C, 1);
}

unint64_t sub_100076A64(uint64_t a1)
{
  unint64_t result;

  result = sub_100076A88();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100076A88()
{
  unint64_t result;

  result = qword_100109DA8;
  if (!qword_100109DA8)
  {
    result = swift_getWitnessTable(&unk_1000CD5C8, &type metadata for TVSettingsDownloadCellularQualityWidget);
    atomic_store(result, (unint64_t *)&qword_100109DA8);
  }
  return result;
}

UIImage sub_100076ACC()
{
  Swift::String v0;
  UIImage result;

  sub_100076B44();
  v0._object = (void *)0x80000001000C2CC0;
  v0._countAndFlagsBits = 0xD00000000000001DLL;
  result.super.isa = UIImage.init(imageLiteralResourceName:)(v0).super.isa;
  qword_10011F120 = (uint64_t)result.super.isa;
  return result;
}

uint64_t sub_100076B14()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for TVWidgetPlaceholderDataProvider()
{
  return objc_opt_self(_TtC17TVWidgetExtension31TVWidgetPlaceholderDataProvider);
}

unint64_t sub_100076B44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100109E50;
  if (!qword_100109E50)
  {
    v1 = objc_opt_self(UIImage);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100109E50);
  }
  return result;
}

void sub_100076B80(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100076BC0()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  if (qword_100105DC8 != -1)
    swift_once(&qword_100105DC8, sub_100076ACC);
  v0 = qword_10011F120;
  v1 = (id)qword_10011F120;
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  v8 = v0;
  v9 = xmmword_1000CD630;
  v10 = xmmword_1000CD650;
  v6 = type metadata accessor for TVWidgetContentViewModel(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  return sub_10007C4C0((uint64_t)&v8);
}

unint64_t sub_100076D54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;

  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = (unint64_t)_swiftEmptyArrayStorage;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for WidgetFamily.systemSmall(_:))
  {
    sub_100076B80(0);
    v8 = v7;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v10 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v9 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v10 >= v9 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
    v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
    specialized Array._endMutation()(v11);
    sub_100076B80(3);
    v13 = v12;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v15 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v14 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v15 >= v14 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
    v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
    specialized Array._endMutation()(v16);
    sub_100076B80(3);
    v18 = v17;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v20 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v19 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v20 >= v19 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
    v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
    specialized Array._endMutation()(v21);
    v22 = 3;
  }
  else if (v6 == enum case for WidgetFamily.systemMedium(_:))
  {
    sub_100076B80(0);
    v24 = v23;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v26 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v25 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v26 >= v25 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
    v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v24);
    specialized Array._endMutation()(v27);
    v22 = 0;
  }
  else
  {
    if (v6 == enum case for WidgetFamily.systemLarge(_:))
    {
      sub_100076B80(2);
      v29 = v28;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v31 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v30 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v31 >= v30 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
      v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
      specialized Array._endMutation()(v32);
      sub_100076B80(1);
      v34 = v33;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v36 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v35 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v36 >= v35 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
    }
    else
    {
      if (v6 != enum case for WidgetFamily.systemExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        return v72;
      }
      sub_100076B80(2);
      v45 = v44;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v47 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v46 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v47 >= v46 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
      v48 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v45);
      specialized Array._endMutation()(v48);
      sub_100076B80(1);
      v50 = v49;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v52 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v51 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v52 >= v51 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
      v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v50);
      specialized Array._endMutation()(v53);
      sub_100076B80(1);
      v55 = v54;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v57 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v56 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v57 >= v56 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
      v58 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v57, v55);
      specialized Array._endMutation()(v58);
      sub_100076B80(1);
      v60 = v59;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v62 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v61 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v62 >= v61 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
      v63 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v60);
      specialized Array._endMutation()(v63);
      sub_100076B80(1);
      v65 = v64;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v67 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v66 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v67 >= v66 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
      v68 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v67, v65);
      specialized Array._endMutation()(v68);
      sub_100076B80(1);
      v34 = v69;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v36 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v70 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v36 >= v70 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v36 + 1, 1);
    }
    v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
    specialized Array._endMutation()(v37);
    v22 = 1;
  }
  sub_100076B80(v22);
  v39 = v38;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v41 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v40 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v41 >= v40 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
  v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v39);
  specialized Array._endMutation()(v42);
  return v72;
}

unint64_t sub_100077294()
{
  unint64_t result;

  result = qword_100109E58;
  if (!qword_100109E58)
  {
    result = swift_getWitnessTable(&unk_1000CD720, &type metadata for TVSettingsAutoPlayNextVideoEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100109E58);
  }
  return result;
}

uint64_t sub_1000772D8()
{
  return sub_100013840(&qword_100109E60, &qword_100109E68, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_100077304(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000773C8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return v2 & 1;
  if (*(_BYTE *)(a2 + 32) == (result & 1))
    return 1;
  if (v2 == 1)
    return 0;
  v3 = 33;
  while (1)
  {
    v4 = v3 - 31;
    if (__OFADD__(v3 - 32, 1))
      break;
    v5 = *(_BYTE *)(a2 + v3) ^ result;
    if ((v5 & 1) != 0)
    {
      ++v3;
      if (v4 != v2)
        continue;
    }
    LOBYTE(v2) = v5 ^ 1;
    return v2 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_100077438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  char v15;
  unsigned __int8 v16;
  _QWORD v17[3];

  v17[0] = &type metadata for TVSettingsSelectedAudioLanguageEntity;
  v1 = sub_100008EF4(&qword_1001065A0);
  v2 = String.init<A>(describing:)(v17, v1);
  v4 = v3;
  if (qword_100105D10 != -1)
    swift_once(&qword_100105D10, sub_1000588A0);
  swift_beginAccess(&off_100108C68, v17, 32, 0);
  v5 = off_100108C68;
  if (*((_QWORD *)off_100108C68 + 2))
  {
    swift_bridgeObjectRetain(v4);
    v6 = sub_10002D668(v2, v4);
    if ((v7 & 1) != 0)
      v8 = *(_BYTE *)(v5[7] + v6);
    else
      v8 = 0;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v8 = 0;
  }
  swift_endAccess(v17);
  swift_bridgeObjectRelease(v4);
  result = sub_10005AB94(v8);
  if (!v0)
  {
    if (qword_100105DF8 != -1)
      swift_once(&qword_100105DF8, sub_10007A8A0);
    v17[0] = &type metadata for TVSettingsSelectedAudioLanguageEntity;
    v10 = String.init<A>(describing:)(v17, v1);
    v12 = v11;
    if (qword_100105E00 != -1)
      swift_once(&qword_100105E00, sub_10007AB20);
    swift_beginAccess(&off_10010A098, v17, 32, 0);
    v13 = off_10010A098;
    if (*((_QWORD *)off_10010A098 + 2))
    {
      swift_bridgeObjectRetain(v12);
      v14 = sub_10002D668(v10, v12);
      if ((v15 & 1) != 0)
        v16 = *(_BYTE *)(v13[7] + v14);
      else
        v16 = 0;
      swift_bridgeObjectRelease(v12);
    }
    else
    {
      v16 = 0;
    }
    swift_endAccess(v17);
    swift_bridgeObjectRelease(v12);
    return sub_1000A4838(v16);
  }
  return result;
}

uint64_t sub_100077644()
{
  return sub_100077734((uint64_t)&type metadata for TVSettingsPlaybackUseCellularEntity, &qword_1001067E0) & 1;
}

uint64_t sub_10007766C()
{
  return sub_100077734((uint64_t)&type metadata for TVSettingsShowSportsScoresEntity, &qword_1001070D8) & 1;
}

uint64_t sub_100077694()
{
  return sub_100077734((uint64_t)&type metadata for TVSettingsUseDownloadAVAdapterEntity, &qword_1001073E8) & 1;
}

uint64_t sub_1000776BC()
{
  return sub_100077734((uint64_t)&type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity, &qword_100107CC8) & 1;
}

uint64_t sub_1000776E4()
{
  return sub_100077734((uint64_t)&type metadata for TVSettingsDownloadUseCellularEntity, &qword_100108AA0) & 1;
}

uint64_t sub_10007770C()
{
  return sub_100077734((uint64_t)&type metadata for TVSettingsUsePlayHistoryEntity, &qword_100108DB0) & 1;
}

uint64_t sub_100077734(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  unsigned __int8 v19;
  _QWORD v21[3];

  v21[0] = a1;
  v4 = sub_100008EF4(a2);
  v5 = String.init<A>(describing:)(v21, v4);
  v7 = v6;
  if (qword_100105D10 != -1)
    swift_once(&qword_100105D10, sub_1000588A0);
  swift_beginAccess(&off_100108C68, v21, 32, 0);
  v8 = off_100108C68;
  if (*((_QWORD *)off_100108C68 + 2))
  {
    swift_bridgeObjectRetain(v7);
    v9 = sub_10002D668(v5, v7);
    if ((v10 & 1) != 0)
      v11 = *(_BYTE *)(v8[7] + v9);
    else
      v11 = 0;
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v11 = 0;
  }
  swift_endAccess(v21);
  swift_bridgeObjectRelease(v7);
  v12 = sub_10005AB94(v11);
  if (!v2)
  {
    if (qword_100105DF8 != -1)
      swift_once(&qword_100105DF8, sub_10007A8A0);
    v21[0] = a1;
    v13 = String.init<A>(describing:)(v21, v4);
    v15 = v14;
    if (qword_100105E00 != -1)
      swift_once(&qword_100105E00, sub_10007AB20);
    swift_beginAccess(&off_10010A098, v21, 32, 0);
    v16 = off_10010A098;
    if (*((_QWORD *)off_10010A098 + 2))
    {
      swift_bridgeObjectRetain(v15);
      v17 = sub_10002D668(v13, v15);
      if ((v18 & 1) != 0)
        v19 = *(_BYTE *)(v16[7] + v17);
      else
        v19 = 0;
      swift_bridgeObjectRelease(v15);
    }
    else
    {
      v19 = 0;
    }
    swift_endAccess(v21);
    swift_bridgeObjectRelease(v15);
    v12 = sub_1000A4ABC(v19);
  }
  return v12 & 1;
}

uint64_t sub_10007793C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  ValueMetadata *v18;
  void *v19;
  char v20;

  v18 = &type metadata for TVSettingsUsePlayHistoryEntity;
  v3 = sub_100008EF4(&qword_100108DB0);
  v4 = String.init<A>(describing:)(&v18, v3);
  v6 = v5;
  if (qword_100105D10 != -1)
    swift_once(&qword_100105D10, sub_1000588A0);
  swift_beginAccess(&off_100108C68, &v18, 32, 0);
  v7 = off_100108C68;
  if (*((_QWORD *)off_100108C68 + 2))
  {
    swift_bridgeObjectRetain(v6);
    v8 = sub_10002D668(v4, v6);
    if ((v9 & 1) != 0)
      v10 = *(_BYTE *)(v7[7] + v8);
    else
      v10 = 0;
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v10 = 0;
  }
  swift_endAccess(&v18);
  swift_bridgeObjectRelease(v6);
  result = sub_10005AB94(v10);
  if (!v1)
  {
    if (qword_100105D28 != -1)
      swift_once(&qword_100105D28, sub_1000652B0);
    v12 = a1 & 1;
    result = sub_1000773C8(v12, qword_10011EFB0);
    if ((result & 1) == 0)
    {
      v18 = 0;
      v19 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(17);
      v13._countAndFlagsBits = 0x2064696C61766E69;
      v13._object = (void *)0xEF203A65756C6176;
      String.append(_:)(v13);
      v20 = v12;
      _print_unlocked<A, B>(_:_:)(&v20, &v18, &type metadata for Bool, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v14 = v19;
      sub_1000A3EC0((uint64_t)v18, v19);
      swift_bridgeObjectRelease(v14);
      v15 = type metadata accessor for AppIntentError(0);
      v16 = sub_100016474();
      swift_allocError(v15, v16, 0, 0);
      v17 = static AppIntentError.Unrecoverable.notAllowed.getter();
      return swift_willThrow(v17);
    }
  }
  return result;
}

uint64_t sub_100077B48(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  ValueMetadata *v18;
  void *v19;
  char v20;

  v18 = &type metadata for TVSettingsShowSportsScoresEntity;
  v3 = sub_100008EF4(&qword_1001070D8);
  v4 = String.init<A>(describing:)(&v18, v3);
  v6 = v5;
  if (qword_100105D10 != -1)
    swift_once(&qword_100105D10, sub_1000588A0);
  swift_beginAccess(&off_100108C68, &v18, 32, 0);
  v7 = off_100108C68;
  if (*((_QWORD *)off_100108C68 + 2))
  {
    swift_bridgeObjectRetain(v6);
    v8 = sub_10002D668(v4, v6);
    if ((v9 & 1) != 0)
      v10 = *(_BYTE *)(v7[7] + v8);
    else
      v10 = 0;
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v10 = 0;
  }
  swift_endAccess(&v18);
  swift_bridgeObjectRelease(v6);
  result = sub_10005AB94(v10);
  if (!v1)
  {
    if (qword_100105C10 != -1)
      swift_once(&qword_100105C10, sub_100027F90);
    v12 = a1 & 1;
    result = sub_1000773C8(v12, qword_10011ECB0);
    if ((result & 1) == 0)
    {
      v18 = 0;
      v19 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(17);
      v13._countAndFlagsBits = 0x2064696C61766E69;
      v13._object = (void *)0xEF203A65756C6176;
      String.append(_:)(v13);
      v20 = v12;
      _print_unlocked<A, B>(_:_:)(&v20, &v18, &type metadata for Bool, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v14 = v19;
      sub_1000A3ED4((uint64_t)v18, v19);
      swift_bridgeObjectRelease(v14);
      v15 = type metadata accessor for AppIntentError(0);
      v16 = sub_100016474();
      swift_allocError(v15, v16, 0, 0);
      v17 = static AppIntentError.Unrecoverable.notAllowed.getter();
      return swift_willThrow(v17);
    }
  }
  return result;
}

uint64_t sub_100077D54(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  ValueMetadata *v18;
  void *v19;
  char v20;

  v18 = &type metadata for TVSettingsAutoPlayNextVideoEntity;
  v3 = sub_100008EF4(&qword_100108DC0);
  v4 = String.init<A>(describing:)(&v18, v3);
  v6 = v5;
  if (qword_100105D10 != -1)
    swift_once(&qword_100105D10, sub_1000588A0);
  swift_beginAccess(&off_100108C68, &v18, 32, 0);
  v7 = off_100108C68;
  if (*((_QWORD *)off_100108C68 + 2))
  {
    swift_bridgeObjectRetain(v6);
    v8 = sub_10002D668(v4, v6);
    if ((v9 & 1) != 0)
      v10 = *(_BYTE *)(v7[7] + v8);
    else
      v10 = 0;
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v10 = 0;
  }
  swift_endAccess(&v18);
  swift_bridgeObjectRelease(v6);
  result = sub_10005AB94(v10);
  if (!v1)
  {
    if (qword_100105DD0 != -1)
      swift_once(&qword_100105DD0, sub_100078A94);
    v12 = a1 & 1;
    result = sub_1000773C8(v12, qword_10011F128);
    if ((result & 1) == 0)
    {
      v18 = 0;
      v19 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(17);
      v13._countAndFlagsBits = 0x2064696C61766E69;
      v13._object = (void *)0xEF203A65756C6176;
      String.append(_:)(v13);
      v20 = v12;
      _print_unlocked<A, B>(_:_:)(&v20, &v18, &type metadata for Bool, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v14 = v19;
      sub_1000A3EE8((uint64_t)v18, v19);
      swift_bridgeObjectRelease(v14);
      v15 = type metadata accessor for AppIntentError(0);
      v16 = sub_100016474();
      swift_allocError(v15, v16, 0, 0);
      v17 = static AppIntentError.Unrecoverable.notAllowed.getter();
      return swift_willThrow(v17);
    }
  }
  return result;
}

uint64_t sub_100077F60(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  ValueMetadata *v18;
  void *v19;
  char v20;

  v18 = &type metadata for TVSettingsDownloadUseCellularEntity;
  v3 = sub_100008EF4(&qword_100108AA0);
  v4 = String.init<A>(describing:)(&v18, v3);
  v6 = v5;
  if (qword_100105D10 != -1)
    swift_once(&qword_100105D10, sub_1000588A0);
  swift_beginAccess(&off_100108C68, &v18, 32, 0);
  v7 = off_100108C68;
  if (*((_QWORD *)off_100108C68 + 2))
  {
    swift_bridgeObjectRetain(v6);
    v8 = sub_10002D668(v4, v6);
    if ((v9 & 1) != 0)
      v10 = *(_BYTE *)(v7[7] + v8);
    else
      v10 = 0;
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v10 = 0;
  }
  swift_endAccess(&v18);
  swift_bridgeObjectRelease(v6);
  result = sub_10005AB94(v10);
  if (!v1)
  {
    if (qword_100105CE0 != -1)
      swift_once(&qword_100105CE0, sub_1000517B0);
    v12 = a1 & 1;
    result = sub_1000773C8(v12, qword_10011EED8);
    if ((result & 1) == 0)
    {
      v18 = 0;
      v19 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(17);
      v13._countAndFlagsBits = 0x2064696C61766E69;
      v13._object = (void *)0xEF203A65756C6176;
      String.append(_:)(v13);
      v20 = v12;
      _print_unlocked<A, B>(_:_:)(&v20, &v18, &type metadata for Bool, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v14 = v19;
      sub_1000A3F10((uint64_t)v18, v19);
      swift_bridgeObjectRelease(v14);
      v15 = type metadata accessor for AppIntentError(0);
      v16 = sub_100016474();
      swift_allocError(v15, v16, 0, 0);
      v17 = static AppIntentError.Unrecoverable.notAllowed.getter();
      return swift_willThrow(v17);
    }
  }
  return result;
}

uint64_t sub_10007816C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  ValueMetadata *v18;
  void *v19;
  char v20;

  v18 = &type metadata for TVSettingsPlaybackUseCellularEntity;
  v3 = sub_100008EF4(&qword_1001067E0);
  v4 = String.init<A>(describing:)(&v18, v3);
  v6 = v5;
  if (qword_100105D10 != -1)
    swift_once(&qword_100105D10, sub_1000588A0);
  swift_beginAccess(&off_100108C68, &v18, 32, 0);
  v7 = off_100108C68;
  if (*((_QWORD *)off_100108C68 + 2))
  {
    swift_bridgeObjectRetain(v6);
    v8 = sub_10002D668(v4, v6);
    if ((v9 & 1) != 0)
      v10 = *(_BYTE *)(v7[7] + v8);
    else
      v10 = 0;
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v10 = 0;
  }
  swift_endAccess(&v18);
  swift_bridgeObjectRelease(v6);
  result = sub_10005AB94(v10);
  if (!v1)
  {
    if (qword_100105BE0 != -1)
      swift_once(&qword_100105BE0, sub_1000171DC);
    v12 = a1 & 1;
    result = sub_1000773C8(v12, qword_10011EC58);
    if ((result & 1) == 0)
    {
      v18 = 0;
      v19 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(17);
      v13._countAndFlagsBits = 0x2064696C61766E69;
      v13._object = (void *)0xEF203A65756C6176;
      String.append(_:)(v13);
      v20 = v12;
      _print_unlocked<A, B>(_:_:)(&v20, &v18, &type metadata for Bool, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v14 = v19;
      sub_1000A3F38((uint64_t)v18, v19);
      swift_bridgeObjectRelease(v14);
      v15 = type metadata accessor for AppIntentError(0);
      v16 = sub_100016474();
      swift_allocError(v15, v16, 0, 0);
      v17 = static AppIntentError.Unrecoverable.notAllowed.getter();
      return swift_willThrow(v17);
    }
  }
  return result;
}

uint64_t sub_100078378(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  ValueMetadata *v18;
  void *v19;
  char v20;

  v18 = &type metadata for TVSettingsUseDownloadAVAdapterEntity;
  v3 = sub_100008EF4(&qword_1001073E8);
  v4 = String.init<A>(describing:)(&v18, v3);
  v6 = v5;
  if (qword_100105D10 != -1)
    swift_once(&qword_100105D10, sub_1000588A0);
  swift_beginAccess(&off_100108C68, &v18, 32, 0);
  v7 = off_100108C68;
  if (*((_QWORD *)off_100108C68 + 2))
  {
    swift_bridgeObjectRetain(v6);
    v8 = sub_10002D668(v4, v6);
    if ((v9 & 1) != 0)
      v10 = *(_BYTE *)(v7[7] + v8);
    else
      v10 = 0;
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v10 = 0;
  }
  swift_endAccess(&v18);
  swift_bridgeObjectRelease(v6);
  result = sub_10005AB94(v10);
  if (!v1)
  {
    if (qword_100105C38 != -1)
      swift_once(&qword_100105C38, sub_10002A5D0);
    v12 = a1 & 1;
    result = sub_1000773C8(v12, qword_10011ED08);
    if ((result & 1) == 0)
    {
      v18 = 0;
      v19 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(17);
      v13._countAndFlagsBits = 0x2064696C61766E69;
      v13._object = (void *)0xEF203A65756C6176;
      String.append(_:)(v13);
      v20 = v12;
      _print_unlocked<A, B>(_:_:)(&v20, &v18, &type metadata for Bool, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v14 = v19;
      sub_1000A404C((uint64_t)v18, v19);
      swift_bridgeObjectRelease(v14);
      v15 = type metadata accessor for AppIntentError(0);
      v16 = sub_100016474();
      swift_allocError(v15, v16, 0, 0);
      v17 = static AppIntentError.Unrecoverable.notAllowed.getter();
      return swift_willThrow(v17);
    }
  }
  return result;
}

uint64_t sub_100078584(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  ValueMetadata *v18;
  void *v19;
  char v20;

  v18 = &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity;
  v3 = sub_100008EF4(&qword_100107CC8);
  v4 = String.init<A>(describing:)(&v18, v3);
  v6 = v5;
  if (qword_100105D10 != -1)
    swift_once(&qword_100105D10, sub_1000588A0);
  swift_beginAccess(&off_100108C68, &v18, 32, 0);
  v7 = off_100108C68;
  if (*((_QWORD *)off_100108C68 + 2))
  {
    swift_bridgeObjectRetain(v6);
    v8 = sub_10002D668(v4, v6);
    if ((v9 & 1) != 0)
      v10 = *(_BYTE *)(v7[7] + v8);
    else
      v10 = 0;
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v10 = 0;
  }
  swift_endAccess(&v18);
  swift_bridgeObjectRelease(v6);
  result = sub_10005AB94(v10);
  if (!v1)
  {
    if (qword_100105C90 != -1)
      swift_once(&qword_100105C90, sub_10003B83C);
    v12 = a1 & 1;
    result = sub_1000773C8(v12, qword_10011EDC0);
    if ((result & 1) == 0)
    {
      v18 = 0;
      v19 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(17);
      v13._countAndFlagsBits = 0x2064696C61766E69;
      v13._object = (void *)0xEF203A65756C6176;
      String.append(_:)(v13);
      v20 = v12;
      _print_unlocked<A, B>(_:_:)(&v20, &v18, &type metadata for Bool, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v14 = v19;
      sub_1000A4088((uint64_t)v18, v19);
      swift_bridgeObjectRelease(v14);
      v15 = type metadata accessor for AppIntentError(0);
      v16 = sub_100016474();
      swift_allocError(v15, v16, 0, 0);
      v17 = static AppIntentError.Unrecoverable.notAllowed.getter();
      return swift_willThrow(v17);
    }
  }
  return result;
}

void sub_100078790(char a1)
{
  sub_1000788C8(a1, (void (*)(void))sub_10007816C, (void (*)(uint64_t, unint64_t))sub_1000A3F38, (uint64_t)&type metadata for TVSettingsPlaybackUseCellularEntity, &qword_1001067E0);
}

void sub_1000787C4(char a1)
{
  sub_1000788C8(a1, (void (*)(void))sub_100077B48, (void (*)(uint64_t, unint64_t))sub_1000A3ED4, (uint64_t)&type metadata for TVSettingsShowSportsScoresEntity, &qword_1001070D8);
}

void sub_1000787F8(char a1)
{
  sub_1000788C8(a1, (void (*)(void))sub_100078378, (void (*)(uint64_t, unint64_t))sub_1000A404C, (uint64_t)&type metadata for TVSettingsUseDownloadAVAdapterEntity, &qword_1001073E8);
}

void sub_10007882C(char a1)
{
  sub_1000788C8(a1, (void (*)(void))sub_100078584, (void (*)(uint64_t, unint64_t))sub_1000A4088, (uint64_t)&type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity, &qword_100107CC8);
}

void sub_100078860(char a1)
{
  sub_1000788C8(a1, (void (*)(void))sub_100077F60, (void (*)(uint64_t, unint64_t))sub_1000A3F10, (uint64_t)&type metadata for TVSettingsDownloadUseCellularEntity, &qword_100108AA0);
}

void sub_100078894(char a1)
{
  sub_1000788C8(a1, (void (*)(void))sub_10007793C, (void (*)(uint64_t, unint64_t))sub_1000A3EC0, (uint64_t)&type metadata for TVSettingsUsePlayHistoryEntity, &qword_100108DB0);
}

void sub_1000788C8(char a1, void (*a2)(void), void (*a3)(uint64_t, unint64_t), uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  Swift::String v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  a2();
  if (!v5)
  {
    v20 = 0;
    v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v10._object = (void *)0x80000001000BF550;
    v10._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v10);
    v22 = a1 & 1;
    _print_unlocked<A, B>(_:_:)(&v22, &v20, &type metadata for Bool, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v11 = v21;
    a3(v20, v21);
    swift_bridgeObjectRelease(v11);
    if (qword_100105DF8 != -1)
      swift_once(&qword_100105DF8, sub_10007A8A0);
    v20 = a4;
    v12 = sub_100008EF4(a5);
    v13 = String.init<A>(describing:)(&v20, v12);
    v15 = v14;
    if (qword_100105E00 != -1)
      swift_once(&qword_100105E00, sub_10007AB20);
    swift_beginAccess(&off_10010A098, &v20, 32, 0);
    v16 = off_10010A098;
    if (*((_QWORD *)off_10010A098 + 2))
    {
      swift_bridgeObjectRetain(v15);
      v17 = sub_10002D668(v13, v15);
      if ((v18 & 1) != 0)
        v19 = *(_BYTE *)(v16[7] + v17);
      else
        v19 = 0;
      swift_bridgeObjectRelease(v15);
    }
    else
    {
      v19 = 0;
    }
    swift_endAccess(&v20);
    swift_bridgeObjectRelease(v15);
    sub_1000A46D0(v19, a1 & 1);
  }
}

void sub_100078A94()
{
  qword_10011F128 = (uint64_t)&off_1000F6B60;
}

uint64_t sub_100078AA8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011F130);
  sub_10000909C(v16, (uint64_t)qword_10011F130);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x80000001000C0700);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_100078CCC()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000905C(v0, qword_10011F148);
  sub_10000909C(v0, (uint64_t)qword_10011F148);
  return LocalizedStringResource.init(stringLiteral:)(0xD00000000000001BLL, 0x80000001000C2DC0);
}

uint64_t sub_100078D2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008EF4(&qword_100106608);
  sub_10000905C(v0, qword_10011F160);
  v1 = sub_10000909C(v0, (uint64_t)qword_10011F160);
  IntentDescription.init(stringLiteral:)(0xD00000000000003DLL, 0x80000001000C2D80);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_100078DB4()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1000CDCC8);
  qword_10011F178 = result;
  return result;
}

uint64_t sub_100078DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[15] = a2;
  v3[16] = a3;
  v3[14] = a1;
  return swift_task_switch(sub_100078DF4, 0, 0);
}

uint64_t sub_100078DF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 56) = v2;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 226));
  *(_BYTE *)(v0 + 225) = *(_BYTE *)(v0 + 226);
  if (qword_100105DF0 != -1)
    swift_once(&qword_100105DF0, sub_100078DB4);
  v3 = qword_10011F178;
  *(_QWORD *)(v0 + 152) = qword_10011F178;
  v4 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v3);
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 160) = v5;
  v6 = sub_100013840(&qword_10010A018, &qword_10010A020, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 168) = v6;
  *v5 = v0;
  v5[1] = sub_100078EFC;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 225, v3, &type metadata for Bool, v6);
}

uint64_t sub_100078EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  if (v0)
    v6 = sub_100017850;
  else
    v6 = sub_100078F84;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100078F84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  IntentParameter.wrappedValue.getter(v0 + 11);
  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[13];
  v0[23] = v2;
  v0[24] = v3;
  v0[8] = v1;
  v0[9] = v2;
  v0[10] = v3;
  v4 = qword_10011F178;
  v0[25] = qword_10011F178;
  v5 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain(v4);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[26] = v6;
  *v6 = v0;
  v6[1] = sub_100017770;
  return AppEntity._value<A, B>(for:)(v0 + 28, v4, v0[21]);
}

double sub_100079024()
{
  double result;

  if (qword_100105DF0 != -1)
    swift_once(&qword_100105DF0, sub_100078DB4);
  *(_QWORD *)&result = swift_retain(qword_10011F178).n128_u64[0];
  return result;
}

unint64_t sub_100079068()
{
  unint64_t result;

  result = qword_100109E70;
  if (!qword_100109E70)
  {
    result = swift_getWitnessTable(&unk_1000CD7B0, &type metadata for TVSettingsAutoPlayNextVideoEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100109E70);
  }
  return result;
}

unint64_t sub_1000790B0()
{
  unint64_t result;

  result = qword_100109E78;
  if (!qword_100109E78)
  {
    result = swift_getWitnessTable(&unk_1000CD7D8, &type metadata for TVSettingsAutoPlayNextVideoEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100109E78);
  }
  return result;
}

uint64_t sub_1000790F4(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000D3014, 1) + 8);
}

uint64_t sub_100079118(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100077294();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_100079158@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105DE0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10011F148, (uint64_t)sub_100078CCC, a1);
}

uint64_t sub_10007917C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100105DE8 != -1)
    swift_once(&qword_100105DE8, sub_100078D2C);
  v2 = sub_100008EF4(&qword_100106608);
  v3 = sub_10000909C(v2, (uint64_t)qword_10011F160);
  return sub_100016518(v3, a1);
}

uint64_t sub_1000791DC(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc(dword_10010A034);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_1000145D8;
  *(_OWORD *)(v4 + 120) = *v1;
  *(_QWORD *)(v4 + 112) = a1;
  return swift_task_switch(sub_100078DF4, 0, 0);
}

uint64_t sub_100079244@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10007A254();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100079268()
{
  return 0xD000000000000032;
}

unint64_t sub_100079288()
{
  unint64_t result;

  result = qword_100109E88;
  if (!qword_100109E88)
  {
    result = swift_getWitnessTable(&unk_1000CD834, &type metadata for TVSettingsAutoPlayNextVideoEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109E88);
  }
  return result;
}

unint64_t sub_1000792D0()
{
  unint64_t result;

  result = qword_100109E90;
  if (!qword_100109E90)
  {
    result = swift_getWitnessTable(&unk_1000CDC94, &type metadata for TVSettingsAutoPlayNextVideoEntity);
    atomic_store(result, (unint64_t *)&qword_100109E90);
  }
  return result;
}

uint64_t sub_100079314(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10007932C, 0, 0);
}

uint64_t sub_10007932C()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = sub_100077734((uint64_t)&type metadata for TVSettingsAutoPlayNextVideoEntity, &qword_100108DC0) & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100079394(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_1000793B0, 0, 0);
}

uint64_t sub_1000793B0()
{
  uint64_t v0;

  sub_1000788C8(*(_BYTE *)(v0 + 16), (void (*)(void))sub_100077D54, (void (*)(uint64_t, unint64_t))sub_1000A3EE8, (uint64_t)&type metadata for TVSettingsAutoPlayNextVideoEntity, &qword_100108DC0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007941C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100079434, 0, 0);
}

uint64_t sub_100079434()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(v0 + 16);
  *v1 = sub_10007A57C();
  v1[1] = v2;
  v1[2] = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100079474()
{
  unint64_t result;

  result = qword_100109EA0;
  if (!qword_100109EA0)
  {
    result = swift_getWitnessTable(&unk_1000CD86C, &type metadata for TVSettingsAutoPlayNextVideoEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109EA0);
  }
  return result;
}

uint64_t sub_1000794B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100079D0C();
  *v4 = v2;
  v4[1] = sub_100014BF8;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_100079524()
{
  unint64_t result;

  result = qword_100109EB0;
  if (!qword_100109EB0)
  {
    result = swift_getWitnessTable(&unk_1000CD8C4, &type metadata for TVSettingsAutoPlayNextVideoEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109EB0);
  }
  return result;
}

unint64_t sub_10007956C()
{
  unint64_t result;

  result = qword_100109EB8;
  if (!qword_100109EB8)
  {
    result = swift_getWitnessTable(&unk_1000CD924, &type metadata for TVSettingsAutoPlayNextVideoEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109EB8);
  }
  return result;
}

unint64_t sub_1000795B4()
{
  unint64_t result;

  result = qword_100109EC0[0];
  if (!qword_100109EC0[0])
  {
    result = swift_getWitnessTable(&unk_1000CDC3C, &type metadata for TVSettingsAutoPlayNextVideoEntity);
    atomic_store(result, qword_100109EC0);
  }
  return result;
}

uint64_t sub_1000795F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100079D0C();
  *v5 = v2;
  v5[1] = sub_100014D9C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100079664(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100079D0C();
  *v4 = v2;
  v4[1] = sub_100016564;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_1000796D0()
{
  unint64_t result;

  result = qword_100109ED8;
  if (!qword_100109ED8)
  {
    result = swift_getWitnessTable(&unk_1000CD94C, &type metadata for TVSettingsAutoPlayNextVideoEntity.Query);
    atomic_store(result, (unint64_t *)&qword_100109ED8);
  }
  return result;
}

unint64_t sub_100079718()
{
  unint64_t result;

  result = qword_100109EE0;
  if (!qword_100109EE0)
  {
    result = swift_getWitnessTable(&unk_1000CDBE4, &type metadata for TVSettingsAutoPlayNextVideoEntity);
    atomic_store(result, (unint64_t *)&qword_100109EE0);
  }
  return result;
}

unint64_t sub_100079760()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100109EE8;
  if (!qword_100109EE8)
  {
    v1 = sub_100008F80(qword_100109EF0);
    sub_100079718();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100109EE8);
  }
  return result;
}

uint64_t sub_1000797C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100079474();
  *v5 = v2;
  v5[1] = sub_100016560;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for TVSettingsAutoPlayNextVideoEntity.Query()
{
  return &type metadata for TVSettingsAutoPlayNextVideoEntity.Query;
}

ValueMetadata *type metadata accessor for TVSettingsAutoPlayNextVideoEntity()
{
  return &type metadata for TVSettingsAutoPlayNextVideoEntity;
}

ValueMetadata *type metadata accessor for TVSettingsAutoPlayNextVideoEntity.UpdateIntent_value()
{
  return &type metadata for TVSettingsAutoPlayNextVideoEntity.UpdateIntent_value;
}

uint64_t sub_100079864(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100079B58();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100015960(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_1000798AC@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105DD8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10011F130, (uint64_t)sub_100078AA8, a1);
}

uint64_t sub_1000798D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000795B4();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100079908(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000792D0();
  return _UniqueEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_100079940(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000799C4();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10007997C()
{
  unint64_t result;

  result = qword_100109F08;
  if (!qword_100109F08)
  {
    result = swift_getWitnessTable(&unk_1000CD9D4, &type metadata for TVSettingsAutoPlayNextVideoEntity);
    atomic_store(result, (unint64_t *)&qword_100109F08);
  }
  return result;
}

unint64_t sub_1000799C4()
{
  unint64_t result;

  result = qword_100109F18;
  if (!qword_100109F18)
  {
    result = swift_getWitnessTable(&unk_1000CD9FC, &type metadata for TVSettingsAutoPlayNextVideoEntity);
    atomic_store(result, (unint64_t *)&qword_100109F18);
  }
  return result;
}

unint64_t sub_100079A0C()
{
  unint64_t result;

  result = qword_100109F20;
  if (!qword_100109F20)
  {
    result = swift_getWitnessTable(&unk_1000CDA2C, &type metadata for TVSettingsAutoPlayNextVideoEntity);
    atomic_store(result, (unint64_t *)&qword_100109F20);
  }
  return result;
}

unint64_t sub_100079A54()
{
  unint64_t result;

  result = qword_100109F28;
  if (!qword_100109F28)
  {
    result = swift_getWitnessTable(&unk_1000CDA54, &type metadata for TVSettingsAutoPlayNextVideoEntity);
    atomic_store(result, (unint64_t *)&qword_100109F28);
  }
  return result;
}

unint64_t sub_100079A9C()
{
  unint64_t result;

  result = qword_100109F30;
  if (!qword_100109F30)
  {
    result = swift_getWitnessTable(&unk_1000CDA7C, &type metadata for TVSettingsAutoPlayNextVideoEntity);
    atomic_store(result, (unint64_t *)&qword_100109F30);
  }
  return result;
}

unint64_t sub_100079AE0(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_100079B14();
  a1[2] = sub_100079B58();
  result = sub_1000792D0();
  a1[3] = result;
  return result;
}

unint64_t sub_100079B14()
{
  unint64_t result;

  result = qword_100109F80;
  if (!qword_100109F80)
  {
    result = swift_getWitnessTable(&unk_1000CDB7C, &type metadata for TVSettingsAutoPlayNextVideoEntity);
    atomic_store(result, (unint64_t *)&qword_100109F80);
  }
  return result;
}

unint64_t sub_100079B58()
{
  unint64_t result;

  result = qword_100109F88;
  if (!qword_100109F88)
  {
    result = swift_getWitnessTable(&unk_1000CDB44, &type metadata for TVSettingsAutoPlayNextVideoEntity);
    atomic_store(result, (unint64_t *)&qword_100109F88);
  }
  return result;
}

unint64_t sub_100079B9C(uint64_t a1)
{
  unint64_t result;

  result = sub_100079BC0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100079BC0()
{
  unint64_t result;

  result = qword_100109FD0;
  if (!qword_100109FD0)
  {
    result = swift_getWitnessTable(&unk_1000CDBAC, &type metadata for TVSettingsAutoPlayNextVideoEntity);
    atomic_store(result, (unint64_t *)&qword_100109FD0);
  }
  return result;
}

uint64_t sub_100079C04()
{
  return sub_100013840(&qword_100109FD8, &qword_100109FE0, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

unint64_t sub_100079C34()
{
  unint64_t result;

  result = qword_100109FE8;
  if (!qword_100109FE8)
  {
    result = swift_getWitnessTable(&unk_1000CDB0C, &type metadata for TVSettingsAutoPlayNextVideoEntity);
    atomic_store(result, (unint64_t *)&qword_100109FE8);
  }
  return result;
}

unint64_t sub_100079C7C()
{
  unint64_t result;

  result = qword_100109FF0;
  if (!qword_100109FF0)
  {
    result = swift_getWitnessTable(&unk_1000CDADC, &type metadata for TVSettingsAutoPlayNextVideoEntity);
    atomic_store(result, (unint64_t *)&qword_100109FF0);
  }
  return result;
}

unint64_t sub_100079CC4()
{
  unint64_t result;

  result = qword_100109FF8;
  if (!qword_100109FF8)
  {
    result = swift_getWitnessTable(&unk_1000CDAA4, &type metadata for TVSettingsAutoPlayNextVideoEntity);
    atomic_store(result, (unint64_t *)&qword_100109FF8);
  }
  return result;
}

unint64_t sub_100079D0C()
{
  unint64_t result;

  result = qword_10010A000;
  if (!qword_10010A000)
  {
    result = swift_getWitnessTable(&unk_1000CD7F4, &type metadata for TVSettingsAutoPlayNextVideoEntity.Query);
    atomic_store(result, (unint64_t *)&qword_10010A000);
  }
  return result;
}

uint64_t sub_100079D50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t OpaqueTypeConformance2;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  _QWORD v54[2];
  unint64_t v55;
  unint64_t v56;

  v50 = a1;
  v1 = sub_100008EF4(&qword_100106888);
  v43 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100106890);
  v5 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  v45 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008EF4(&qword_100106898);
  v9 = *(_QWORD *)(v8 - 8);
  v46 = v8;
  v47 = v9;
  __chkstk_darwin(v8);
  v41 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008EF4(&qword_1001068A0);
  v12 = *(_QWORD *)(v11 - 8);
  v48 = v11;
  v49 = v12;
  __chkstk_darwin(v11);
  v42 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v51, "com.apple.tv.");
  HIWORD(v51[1]) = -4864;
  v55 = (unint64_t)&type metadata for TVSettingsAutoPlayNextVideoWidget;
  v14 = sub_100008EF4(&qword_10010A090);
  v15._countAndFlagsBits = String.init<A>(describing:)(&v55, v14);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17 = v51[0];
  v18 = v51[1];
  KeyPath = swift_getKeyPath(&unk_1000CDCC8);
  v20 = sub_100008EF4(&qword_1001068B0);
  v21 = sub_1000792D0();
  v22 = sub_100013840(&qword_1001068B8, &qword_1001068B0, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  ControlToggle.init<A, B, C, D, E, F>(kind:intentUpdatableProperty:content:value:)(v17, v18, KeyPath, sub_10007A190, 0, sub_100018B14, 0, v20, &type metadata for Text, v21, v22, &protocol witness table for Text);
  v51[0] = &type metadata for TVSettingsAutoPlayNextVideoWidget;
  v23 = String.init<A>(describing:)(v51, v14);
  v25 = v24;
  v51[0] = v23;
  v51[1] = v24;
  v55 = 0x746567646957;
  v56 = 0xE600000000000000;
  v54[0] = 0x656C67676F54;
  v54[1] = 0xE600000000000000;
  v26 = sub_100013080();
  v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v55, v54, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v26, v26, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v25);
  v51[0] = v27;
  v51[1] = v29;
  v30 = sub_100013840(&qword_1001068C0, &qword_100106888, (uint64_t)&protocol conformance descriptor for ControlToggle<A>);
  WidgetConfiguration.configurationDisplayName<A>(_:)(v51, v1, &type metadata for String, v30, v26);
  v31 = swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t, __n128))(v43 + 8))(v3, v1, v31);
  v55 = 0xD00000000000002CLL;
  v56 = 0x80000001000C2DE0;
  v51[0] = v1;
  v51[1] = &type metadata for String;
  v52 = v30;
  v53 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v51, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v33 = v41;
  v34 = v44;
  WidgetConfiguration.description<A>(_:)(&v55, v44, &type metadata for String, OpaqueTypeConformance2, v26);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v34);
  v51[0] = v34;
  v51[1] = &type metadata for String;
  v52 = OpaqueTypeConformance2;
  v53 = v26;
  v35 = swift_getOpaqueTypeConformance2(v51, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v36 = v42;
  v37 = v46;
  WidgetConfiguration.disablesControlStateCaching()(v46, v35);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v37);
  v51[0] = v37;
  v51[1] = v35;
  v38 = swift_getOpaqueTypeConformance2(v51, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v39 = v48;
  WidgetConfiguration.hiddenControl()(v48, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v36, v39);
}

uint64_t sub_10007A190@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  _QWORD v8[2];

  v2 = sub_100008EF4(&qword_1001068B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[0] = 0xD000000000000018;
  v8[1] = 0x80000001000C2E10;
  v6 = sub_100013080();
  Label<>.init<A>(_:systemImage:)(v8, 1918985575, 0xE400000000000000, &type metadata for String, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
}

uint64_t sub_10007A254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD v33[3];

  v0 = sub_100008EF4(&qword_100106808);
  __chkstk_darwin(v0);
  v32 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for InputConnectionBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v31 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008EF4(&qword_1001065E0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  v30 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008EF4(&qword_10010A028);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001000C2D20);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v29(v13, 1, 1, v14);
  v18 = type metadata accessor for IntentDialog(0);
  memset(v33, 0, sizeof(v33));
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v10, 1, 1, v18);
  v19(v8, 1, 1, v18);
  v20 = enum case for InputConnectionBehavior.default(_:);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v21 = v31;
  v28(v31, enum case for InputConnectionBehavior.default(_:), v2);
  v22 = sub_1000795B4();
  v27 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v17, v13, v33, v10, v8, v21, v22);
  sub_100008EF4(&qword_100106818);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000036, 0x80000001000C2D40);
  v29(v13, 1, 1, v30);
  LOBYTE(v33[0]) = 2;
  v23 = type metadata accessor for Bool.IntentDisplayName(0);
  v24 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v32, 1, 1, v23);
  v19(v10, 1, 1, v18);
  v28(v21, v20, v2);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v17, v13, v33, v24, v10, v21);
  return v27;
}

uint64_t sub_10007A57C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  ValueMetadata *v19;

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &type metadata for TVSettingsAutoPlayNextVideoEntity;
  v13 = sub_100008EF4(&qword_100108DC0);
  v14 = String.init<A>(describing:)(&v19, v13);
  sub_100008EF4(&qword_100109E68);
  v15 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x80000001000C0700);
  static Locale.current.getter(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0xD000000000000012, 0x80000001000BF530, v6, v3, 0, 0, 256);
  v16 = sub_100013840(&qword_10010A018, &qword_10010A020, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v12, &unk_10010A008, 0, &unk_10010A010, 0, &type metadata for TVSettingsAutoPlayNextVideoEntity.UpdateIntent_value, v16);
  return v14;
}

double sub_10007A7A4@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for TVSettingsAutoPlayNextVideoWidget()
{
  return &type metadata for TVSettingsAutoPlayNextVideoWidget;
}

uint64_t sub_10007A7C0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D3064, 1);
}

unint64_t sub_10007A7D0(uint64_t a1)
{
  unint64_t result;

  result = sub_10007A7F4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10007A7F4()
{
  unint64_t result;

  result = qword_10010A080;
  if (!qword_10010A080)
  {
    result = swift_getWitnessTable(&unk_1000CDD14, &type metadata for TVSettingsAutoPlayNextVideoWidget);
    atomic_store(result, (unint64_t *)&qword_10010A080);
  }
  return result;
}

unint64_t sub_10007A838(uint64_t a1)
{
  unint64_t result;

  result = sub_10007A85C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10007A85C()
{
  unint64_t result;

  result = qword_10010A088;
  if (!qword_10010A088)
  {
    result = swift_getWitnessTable(&unk_1000CDD54, &type metadata for TVSettingsAutoPlayNextVideoWidget);
    atomic_store(result, (unint64_t *)&qword_10010A088);
  }
  return result;
}

id sub_10007A8A0()
{
  uint64_t v0;
  uint64_t v1;
  id result;

  v0 = type metadata accessor for TVSettingsDataProxy();
  v1 = swift_allocObject(v0, 24, 7);
  result = objc_msgSend((id)objc_opt_self(WLKSystemPreferencesStore), "sharedPreferences");
  *(_QWORD *)(v1 + 16) = result;
  qword_10011F180 = v1;
  return result;
}

uint64_t sub_10007A8F8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for TVSettingsDataProxy()
{
  return objc_opt_self(_TtC17TVWidgetExtension19TVSettingsDataProxy);
}

uint64_t sub_10007A93C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10007A970 + 4 * byte_1000CDD90[a1]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

unint64_t sub_10007A970()
{
  return 0xD000000000000017;
}

unint64_t sub_10007A9E0()
{
  return 0xD000000000000011;
}

unint64_t sub_10007A9F8()
{
  return 0xD00000000000001ELL;
}

unint64_t sub_10007AA10()
{
  return 0xD00000000000001ELL;
}

unint64_t sub_10007AA28()
{
  return 0xD000000000000026;
}

unint64_t sub_10007AA40()
{
  return 0xD000000000000024;
}

unint64_t sub_10007AA58()
{
  return 0xD000000000000012;
}

unint64_t sub_10007AA70()
{
  return 0xD00000000000001ALL;
}

unint64_t sub_10007AA88()
{
  return 0xD000000000000019;
}

unint64_t sub_10007AAA0()
{
  return 0xD000000000000012;
}

unint64_t sub_10007AAB8()
{
  return 0xD000000000000018;
}

unint64_t sub_10007AAD0()
{
  return 0xD00000000000001FLL;
}

unint64_t sub_10007AAE8()
{
  return 0xD00000000000001DLL;
}

void sub_10007AB00()
{
  JUMPOUT(0x10007AB14);
}

void *sub_10007AB20()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *result;
  ValueMetadata *v31;
  _BYTE v32[368];

  v0 = sub_100008EF4(&qword_10010A160);
  inited = swift_initStackObject(v0, v32);
  *(_OWORD *)(inited + 16) = xmmword_1000CAB60;
  v31 = &type metadata for TVSettingsPlaybackUseCellularEntity;
  v2 = sub_100008EF4(&qword_1001067E0);
  *(_QWORD *)(inited + 32) = String.init<A>(describing:)(&v31, v2);
  *(_QWORD *)(inited + 40) = v3;
  *(_BYTE *)(inited + 48) = 1;
  v31 = (ValueMetadata *)type metadata accessor for TVSettingsPlaybackWifiQualityEntity(0);
  v4 = sub_100008EF4(&qword_100108D88);
  *(_QWORD *)(inited + 56) = String.init<A>(describing:)(&v31, v4);
  *(_QWORD *)(inited + 64) = v5;
  *(_BYTE *)(inited + 72) = 3;
  v31 = &type metadata for TVSettingsPlaybackCellularQualityEntity;
  v6 = sub_100008EF4(&qword_100108DA0);
  *(_QWORD *)(inited + 80) = String.init<A>(describing:)(&v31, v6);
  *(_QWORD *)(inited + 88) = v7;
  *(_BYTE *)(inited + 96) = 2;
  v31 = &type metadata for TVSettingsDownloadUseCellularEntity;
  v8 = sub_100008EF4(&qword_100108AA0);
  *(_QWORD *)(inited + 104) = String.init<A>(describing:)(&v31, v8);
  *(_QWORD *)(inited + 112) = v9;
  *(_BYTE *)(inited + 120) = 4;
  v31 = (ValueMetadata *)type metadata accessor for TVSettingsDownloadWifiQualityEntity(0);
  v10 = sub_100008EF4(&qword_100108D90);
  *(_QWORD *)(inited + 128) = String.init<A>(describing:)(&v31, v10);
  *(_QWORD *)(inited + 136) = v11;
  *(_BYTE *)(inited + 144) = 5;
  v31 = &type metadata for TVSettingsDownloadCellularQualityEntity;
  v12 = sub_100008EF4(&qword_100108DA8);
  *(_QWORD *)(inited + 152) = String.init<A>(describing:)(&v31, v12);
  *(_QWORD *)(inited + 160) = v13;
  *(_BYTE *)(inited + 168) = 6;
  v31 = &type metadata for TVSettingsDownloadUseDefaultSubtitleLanguagesEntity;
  v14 = sub_100008EF4(&qword_100107CC8);
  *(_QWORD *)(inited + 176) = String.init<A>(describing:)(&v31, v14);
  *(_QWORD *)(inited + 184) = v15;
  *(_BYTE *)(inited + 192) = 10;
  v31 = &type metadata for TVSettingsSelectedAudioLanguageEntity;
  v16 = sub_100008EF4(&qword_1001065A0);
  *(_QWORD *)(inited + 200) = String.init<A>(describing:)(&v31, v16);
  *(_QWORD *)(inited + 208) = v17;
  *(_BYTE *)(inited + 216) = 7;
  v31 = &type metadata for TVSettingsShowSportsScoresEntity;
  v18 = sub_100008EF4(&qword_1001070D8);
  *(_QWORD *)(inited + 224) = String.init<A>(describing:)(&v31, v18);
  *(_QWORD *)(inited + 232) = v19;
  *(_BYTE *)(inited + 240) = 13;
  v31 = &type metadata for TVSettingsUsePlayHistoryEntity;
  v20 = sub_100008EF4(&qword_100108DB0);
  *(_QWORD *)(inited + 248) = String.init<A>(describing:)(&v31, v20);
  *(_QWORD *)(inited + 256) = v21;
  *(_BYTE *)(inited + 264) = 12;
  v31 = &type metadata for TVSettingsUpNextDisplayEntity;
  v22 = sub_100008EF4(&qword_100108DB8);
  *(_QWORD *)(inited + 272) = String.init<A>(describing:)(&v31, v22);
  *(_QWORD *)(inited + 280) = v23;
  *(_BYTE *)(inited + 288) = 16;
  v31 = &type metadata for TVSettingsAutoPlayNextVideoEntity;
  v24 = sub_100008EF4(&qword_100108DC0);
  *(_QWORD *)(inited + 296) = String.init<A>(describing:)(&v31, v24);
  *(_QWORD *)(inited + 304) = v25;
  *(_BYTE *)(inited + 312) = 14;
  v31 = &type metadata for TVSettingsPurchaseDefinitionEntity;
  v26 = sub_100008EF4(&qword_100108D98);
  *(_QWORD *)(inited + 320) = String.init<A>(describing:)(&v31, v26);
  *(_QWORD *)(inited + 328) = v27;
  *(_BYTE *)(inited + 336) = 15;
  v31 = &type metadata for TVSettingsUseDownloadAVAdapterEntity;
  v28 = sub_100008EF4(&qword_1001073E8);
  *(_QWORD *)(inited + 344) = String.init<A>(describing:)(&v31, v28);
  *(_QWORD *)(inited + 352) = v29;
  *(_BYTE *)(inited + 360) = 19;
  result = (void *)sub_10002CC2C(inited);
  off_10010A098 = result;
  return result;
}

uint64_t sub_10007AE14(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v2 = *a2;
  v3 = sub_10007A93C(*a1);
  v5 = v4;
  if (v3 == sub_10007A93C(v2) && v5 == v6)
  {
    v9 = 1;
    v8 = v5;
  }
  else
  {
    v8 = v6;
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  return v9 & 1;
}

Swift::Int sub_10007AE9C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_10007A93C(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_10007AEFC(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = sub_10007A93C(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_10007AF3C(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_10007A93C(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10007AF98@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10007B1F0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10007AFC4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10007A93C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for TVPreferencesStoreKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TVPreferencesStoreKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_10007B0C8 + 4 * byte_1000CDDA9[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_10007B0FC + 4 * byte_1000CDDA4[v4]))();
}

uint64_t sub_10007B0FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007B104(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007B10CLL);
  return result;
}

uint64_t sub_10007B118(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007B120);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_10007B124(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007B12C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TVPreferencesStoreKey()
{
  return &type metadata for TVPreferencesStoreKey;
}

unint64_t sub_10007B14C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010A168;
  if (!qword_10010A168)
  {
    v1 = sub_100008F80(&qword_10010A170);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10010A168);
  }
  return result;
}

void sub_10007B198(_QWORD *a1@<X8>)
{
  *a1 = &off_1000F72A0;
}

unint64_t sub_10007B1AC()
{
  unint64_t result;

  result = qword_10010A178;
  if (!qword_10010A178)
  {
    result = swift_getWitnessTable(&unk_1000CDEC8, &type metadata for TVPreferencesStoreKey);
    atomic_store(result, (unint64_t *)&qword_10010A178);
  }
  return result;
}

uint64_t sub_10007B1F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1000F70A0, a1, a2, &unk_100105EB0);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x14)
    return 20;
  else
    return v3;
}

double sub_10007B240(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, _QWORD, uint64_t);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  double result;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSString *v22;
  char v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v24 = a2;
  v5 = type metadata accessor for WidgetFamily(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v25 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - v9;
  v11 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
  v11((char *)&v24 - v9, enum case for WidgetFamily.systemLarge(_:), v5);
  v12 = sub_1000270C4();
  dispatch thunk of RawRepresentable.rawValue.getter(&v27, v5, v12);
  dispatch thunk of RawRepresentable.rawValue.getter(&v26, v5, v12);
  v14 = v26;
  v13 = v27;
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v10, v5);
  result = 18.0;
  if (v13 != v14 && (*(_BYTE *)(v3 + 72) & 1) == 0)
  {
    ((void (*)(char *, _QWORD, uint64_t, double))v11)(v10, enum case for WidgetFamily.systemSmall(_:), v5, 18.0);
    dispatch thunk of RawRepresentable.rawValue.getter(&v27, v5, v12);
    dispatch thunk of RawRepresentable.rawValue.getter(&v26, v5, v12);
    v18 = v26;
    v17 = v27;
    v15(v10, v5);
    v19 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v25, a1, v5);
    if (v17 == v18)
    {
      v15(v19, v5);
    }
    else
    {
      v11(v10, enum case for WidgetFamily.systemMedium(_:), v5);
      dispatch thunk of RawRepresentable.rawValue.getter(&v27, v5, v12);
      dispatch thunk of RawRepresentable.rawValue.getter(&v26, v5, v12);
      v21 = v26;
      v20 = v27;
      v15(v10, v5);
      v15(v19, v5);
      result = 0.0;
      if (v20 != v21)
        return result;
    }
    v22 = sub_100026410();
    v23 = static UIContentSizeCategory.> infix(_:_:)(v22, UIContentSizeCategoryExtraExtraLarge);

    result = 14.0;
    if ((v23 & 1) != 0)
      return 17.0;
  }
  return result;
}

uint64_t destroy for TVWidgetMetadataViewLayout(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[3]);
  swift_release(a1[4]);
  return swift_release(a1[5]);
}

uint64_t initializeWithCopy for TVWidgetMetadataViewLayout(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v5 = a2[3];
  v6 = a2[4];
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v8 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v8);
  return a1;
}

uint64_t *assignWithCopy for TVWidgetMetadataViewLayout(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[6];
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  a1[6] = v12;
  a1[8] = a2[8];
  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  return a1;
}

__n128 initializeWithTake for TVWidgetMetadataViewLayout(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t *assignWithTake for TVWidgetMetadataViewLayout(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  swift_release(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  swift_release(v5);
  v6 = a1[5];
  a1[5] = a2[5];
  swift_release(v6);
  a1[6] = a2[6];
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  a1[8] = a2[8];
  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for TVWidgetMetadataViewLayout(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TVWidgetMetadataViewLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TVWidgetMetadataViewLayout()
{
  return &type metadata for TVWidgetMetadataViewLayout;
}

uint64_t sub_10007B740()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for DynamicTypeSize(0);
  sub_10000905C(v0, qword_10011F188);
  v1 = sub_10000909C(v0, (uint64_t)qword_10011F188);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for DynamicTypeSize.xxxLarge(_:), v0);
}

ValueMetadata *type metadata accessor for SportsWidgetViewLayout()
{
  return &type metadata for SportsWidgetViewLayout;
}

double sub_10007B7A8(uint64_t a1, void *a2, uint64_t a3, void *a4, char *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  void *object;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  unint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  NSString *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  double v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  Swift::String v58;
  uint64_t v59;
  unint64_t v60;

  v53 = a5;
  v54 = a6;
  v52 = a3;
  v9 = type metadata accessor for LegibilityWeight(0);
  v55 = *(_QWORD *)(v9 - 8);
  v56 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DynamicTypeSize(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v52 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v52 - v21;
  __chkstk_darwin(v20);
  v57 = (char *)&v52 - v23;
  v59 = 0;
  v60 = 0xE000000000000000;
  if (a2)
  {
    v24._countAndFlagsBits = a1;
    v24._object = a2;
    String.append(_:)(v24);
    v25._countAndFlagsBits = 32;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
  }
  v26._countAndFlagsBits = 0x38383A383838;
  v26._object = (void *)0xE600000000000000;
  String.append(_:)(v26);
  if (a4)
  {
    v58._countAndFlagsBits = 32;
    v58._object = (void *)0xE100000000000000;
    v27._countAndFlagsBits = v52;
    v27._object = a4;
    String.append(_:)(v27);
    object = v58._object;
    String.append(_:)(v58);
    swift_bridgeObjectRelease(object);
  }
  v29 = v53;
  if (qword_100105BB0 != -1)
    swift_once(&qword_100105BB0, sub_100008B4C);
  v30 = sub_10000909C(v12, (uint64_t)qword_10011EBE8);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v31(v19, v30, v12);
  v32 = sub_10007BBF8();
  if ((dispatch thunk of static Comparable.>= infix(_:_:)(v19, v29, v12, v32) & 1) != 0)
  {
    v33 = v22;
    v34 = v19;
  }
  else
  {
    v33 = v22;
    v34 = v29;
  }
  v31(v33, (uint64_t)v34, v12);
  v35 = *(void (**)(char *, uint64_t))(v13 + 8);
  v35(v19, v12);
  if (qword_100105E08 != -1)
    swift_once(&qword_100105E08, sub_10007B740);
  v36 = sub_10000909C(v12, (uint64_t)qword_10011F188);
  v31(v16, v36, v12);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v16, v22, v12, v32) & 1) != 0)
    v37 = v16;
  else
    v37 = v22;
  v38 = v57;
  v31(v57, (uint64_t)v37, v12);
  v35(v16, v12);
  v35(v22, v12);
  v39 = sub_100026410();
  v40 = v55;
  v41 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v11, v54, v56);
  v42 = (*(uint64_t (**)(char *, uint64_t))(v40 + 88))(v11, v41);
  if (v42 != enum case for LegibilityWeight.regular(_:) && v42 != enum case for LegibilityWeight.bold(_:))
    (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v41);
  v43 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", v39);
  v44 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleFootnote, v43);
  v45 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v44, "pointSize");
  v46 = objc_msgSend(v45, "monospacedDigitSystemFontOfSize:weight:");

  v47 = v59;
  v48 = v60;
  v49 = v46;
  v50 = String.widthOfString(usingFont:)(v46, v47, v48);
  swift_bridgeObjectRelease(v48);

  v35(v38, v12);
  return v50;
}

unint64_t sub_10007BBF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001060F0;
  if (!qword_1001060F0)
  {
    v1 = type metadata accessor for DynamicTypeSize(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DynamicTypeSize, v1);
    atomic_store(result, (unint64_t *)&qword_1001060F0);
  }
  return result;
}

uint64_t destroy for SportsWidgetGenericClockViewLayout(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  return swift_release(a1[4]);
}

uint64_t initializeWithCopy for SportsWidgetGenericClockViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t assignWithCopy for SportsWidgetGenericClockViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  swift_retain(v10);
  swift_release(v11);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

__n128 initializeWithTake for SportsWidgetGenericClockViewLayout(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for SportsWidgetGenericClockViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  swift_release(*(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v5);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetGenericClockViewLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetGenericClockViewLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetGenericClockViewLayout()
{
  return &type metadata for SportsWidgetGenericClockViewLayout;
}

uint64_t initializeWithCopy for TVWidgetGradientViewLayout(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v4 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v4;
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for TVWidgetGradientViewLayout(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t *assignWithTake for TVWidgetGradientViewLayout(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  v5 = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + 2) = v5;
  return a1;
}

ValueMetadata *type metadata accessor for TVWidgetGradientViewLayout()
{
  return &type metadata for TVWidgetGradientViewLayout;
}

uint64_t storeEnumTagSinglePayload for TVWidgetGradientViewDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10007C03C + 4 * byte_1000CDFC5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10007C070 + 4 * asc_1000CDFC0[v4]))();
}

uint64_t sub_10007C070(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007C078(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007C080);
  return result;
}

uint64_t sub_10007C08C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007C094);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10007C098(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007C0A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TVWidgetGradientViewDirection()
{
  return &type metadata for TVWidgetGradientViewDirection;
}

unint64_t sub_10007C0C0()
{
  unint64_t result;

  result = qword_10010A180;
  if (!qword_10010A180)
  {
    result = swift_getWitnessTable(&unk_1000CE070, &type metadata for TVWidgetGradientViewDirection);
    atomic_store(result, (unint64_t *)&qword_10010A180);
  }
  return result;
}

unint64_t sub_10007C104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v11 = sub_10007C240();
    v12 = v4;
    v5._countAndFlagsBits = 45;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    if (*(_BYTE *)(v0 + 24))
      v6 = 1702195828;
    else
      v6 = 0x65736C6166;
    if (*(_BYTE *)(v0 + 24))
      v7 = 0xE400000000000000;
    else
      v7 = 0xE500000000000000;
    v8 = v7;
    String.append(_:)(*(Swift::String *)&v6);
    swift_bridgeObjectRelease(v7);
    v3 = v11;
    v9 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 32) = v11;
    *(_QWORD *)(v1 + 40) = v12;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRelease(v9);
    v2 = 0;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_10007C1CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for TVWidgetContentRefinedViewModel()
{
  return objc_opt_self(_TtC17TVWidgetExtension31TVWidgetContentRefinedViewModel);
}

unint64_t sub_10007C218@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;
  unint64_t v3;

  result = sub_10007C104();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_10007C240()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel____lazy_storage___id);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel____lazy_storage___id + 8);
  if (v2)
  {
    v3 = *v1;
  }
  else
  {
    v3 = sub_10007C2B8(v0);
    v4 = v1[1];
    *v1 = v3;
    v1[1] = v5;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRelease(v4);
    v2 = 0;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

unint64_t sub_10007C2B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[24];

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008EF4(&qword_100105F50);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_BYTE *)(a1 + 73);
  v10 = a1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_actionURL;
  swift_beginAccess(a1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_actionURL, v30, 0, 0);
  sub_10001355C(v10, (uint64_t)v8, &qword_100105F50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2))
  {
    v11 = 0xD00000000000001ELL;
    sub_1000135A0((uint64_t)v8, &qword_100105F50);
    v12 = *(_QWORD *)(a1 + 24);
    if (!v12)
      return v11;
    v13 = *(void **)(a1 + 40);
    if (!v13)
      return v11;
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_QWORD *)(a1 + 32);
    v28 = v14;
    v29 = v12;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v16._countAndFlagsBits = 45;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = v15;
    v17._object = v13;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    v18 = sub_1000135A0((uint64_t)v8, &qword_100105F50);
    v19 = URL.lastPathComponent.getter(v18);
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v28 = v19;
    v29 = v21;
  }
  v22._countAndFlagsBits = 45;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  if ((v9 & 1) != 0)
    v23 = 1702195828;
  else
    v23 = 0x65736C6166;
  if ((v9 & 1) != 0)
    v24 = 0xE400000000000000;
  else
    v24 = 0xE500000000000000;
  v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease(v24);
  return v28;
}

uint64_t sub_10007C4C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BYTE v16[8];
  _BYTE v17[16];
  _BYTE v18[16];

  *(_QWORD *)(v1 + 64) = 0;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_BYTE *)(v1 + 72) = 1;
  *(_WORD *)(v1 + 73) = 514;
  v3 = v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_actionURL;
  v4 = type metadata accessor for URL(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v6 = v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate;
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  v9 = (void **)(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_image);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_image) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_isExpiring) = 0;
  v8(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_refreshDate, 1, 1, v7);
  v10 = (_QWORD *)(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_cropCode);
  *v10 = 0;
  v10[1] = 0;
  v5(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_imageUrl, 1, 1, v4);
  v11 = (_QWORD *)(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel____lazy_storage___id);
  *v11 = 0;
  v11[1] = 0;
  sub_100013880(a1 + 8, (uint64_t)v18, &qword_10010A4D8);
  v12 = *(_QWORD *)(v1 + 24);
  sub_100013880((uint64_t)v18, v1 + 16, &qword_10010A4D8);
  sub_10004FE50((uint64_t)v18);
  swift_bridgeObjectRelease(v12);
  sub_100013880(a1 + 24, (uint64_t)v17, &qword_10010A4D8);
  v13 = *(_QWORD *)(v1 + 40);
  sub_100013880((uint64_t)v17, v1 + 32, &qword_10010A4D8);
  sub_10004FE50((uint64_t)v17);
  swift_bridgeObjectRelease(v13);
  sub_100013880(a1, (uint64_t)v16, &qword_10010A4E0);
  v14 = *v9;
  sub_100013880((uint64_t)v16, (uint64_t)v9, &qword_10010A4E0);

  sub_10007D3BC((uint64_t)v18);
  sub_10007D3BC((uint64_t)v17);
  return v1;
}

uint64_t sub_10007C6C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v4 = type metadata accessor for URLQueryItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v34 - v9;
  v11 = sub_100008EF4(&qword_10010A4F0);
  __chkstk_darwin(v11);
  v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URLComponents(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)(a1, 0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1000135A0((uint64_t)v13, &qword_10010A4F0);
    v18 = type metadata accessor for URL(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(a2, a1, v18);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(a2, 0, 1, v18);
  }
  else
  {
    v34[0] = v8;
    v34[1] = a2;
    v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    v22 = URLComponents.queryItems.getter(v21);
    if (v22)
      v23 = (_QWORD *)v22;
    else
      v23 = _swiftEmptyArrayStorage;
    v24 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v25 = objc_msgSend(v24, "bundleIdentifier");

    if (v25)
    {
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

    }
    else
    {
      v26 = 0;
      v28 = 0;
    }
    URLQueryItem.init(name:value:)(0x707041666572, 0xE600000000000000, v26, v28);
    v29 = swift_bridgeObjectRelease(v28);
    v30 = v34[0];
    (*(void (**)(_QWORD, char *, uint64_t, __n128))(v5 + 16))(v34[0], v10, v4, v29);
    if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
      v23 = (_QWORD *)sub_10007D3E4(0, v23[2] + 1, 1, v23);
    v32 = v23[2];
    v31 = v23[3];
    if (v32 >= v31 >> 1)
      v23 = (_QWORD *)sub_10007D3E4(v31 > 1, v32 + 1, 1, v23);
    v23[2] = v32 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))((unint64_t)v23+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v32, v30, v4);
    v33 = URLComponents.queryItems.setter(v23);
    URLComponents.url.getter(v33);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
}

id sub_10007C9D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  id result;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v66)(char *, uint64_t);
  char *v67;
  uint64_t v68;
  char *v69;
  _BYTE v70[24];
  char v71[24];

  v1 = v0;
  v2 = sub_100008EF4(&qword_10010A4E8);
  __chkstk_darwin(v2);
  v67 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100105F48);
  v5 = __chkstk_darwin(v4);
  v68 = (uint64_t)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v69 = (char *)&v64 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v64 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v64 - v12;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v64 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v64 - v22;
  v24 = v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate, v71, 0, 0);
  sub_10001355C(v24, (uint64_t)v13, &qword_100105F48);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v25(v13, 1, v14) == 1)
    return (id)sub_1000135A0((uint64_t)v13, &qword_100105F48);
  v65 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v25;
  v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v23, v13, v14);
  v28 = Date.init()(v27);
  Date.advanced(by:)(v28, 172800.0);
  v29 = *(void (**)(char *, uint64_t))(v15 + 8);
  v29(v18, v14);
  v30 = static Date.< infix(_:_:)(v23, v21);
  v31 = ((uint64_t (*)(char *, uint64_t))v29)(v21, v14);
  v66 = (uint64_t (*)(char *, uint64_t))v29;
  if ((v30 & 1) != 0)
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_isExpiring) = 1;
    v32 = Date.init()(v31);
    Date.advanced(by:)(v32, 3600.0);
    v29(v18, v14);
    v33 = static Date.< infix(_:_:)(v23, v21);
    v31 = ((uint64_t (*)(char *, uint64_t))v29)(v21, v14);
    if ((v33 & 1) != 0)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v11, v23, v14);
      goto LABEL_9;
    }
    v34 = -3600.0;
  }
  else
  {
    v34 = -172800.0;
  }
  Date.advanced(by:)(v31, v34);
LABEL_9:
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
  v35 = (uint64_t)v69;
  sub_100013880((uint64_t)v11, (uint64_t)v69, &qword_100105F48);
  v36 = v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_refreshDate;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_refreshDate, v70, 33, 0);
  sub_10006AFA8(v35, v36, &qword_100105F48);
  swift_endAccess(v70);
  v69 = v23;
  result = sub_100006398();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v37 = result;
  v38 = sub_100008EF4(&qword_100106918);
  v39 = swift_allocObject(v38, 152, 7);
  *(_OWORD *)(v39 + 16) = xmmword_1000C9760;
  v40 = *(_QWORD *)(v1 + 16);
  v41 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v39 + 56) = &type metadata for String;
  v42 = sub_10001A64C();
  *(_QWORD *)(v39 + 64) = v42;
  if (v41)
    v43 = v40;
  else
    v43 = 7104878;
  v44 = 0xE300000000000000;
  if (v41)
    v44 = v41;
  *(_QWORD *)(v39 + 32) = v43;
  *(_QWORD *)(v39 + 40) = v44;
  v45 = v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_refreshDate;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_refreshDate, v70, 0, 0);
  v46 = v45;
  v47 = v68;
  sub_10001355C(v46, v68, &qword_100105F48);
  if (v65(v47, 1, v14))
  {
    swift_bridgeObjectRetain(v41);
    v48 = sub_1000135A0(v47, &qword_100105F48);
    v49 = (uint64_t *)(v39 + 72);
    *(_QWORD *)(v39 + 96) = &type metadata for String;
    *(_QWORD *)(v39 + 104) = v42;
    v50 = (uint64_t)v67;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v21, v47, v14);
    swift_bridgeObjectRetain(v41);
    v52 = sub_1000135A0(v47, &qword_100105F48);
    v50 = (uint64_t)v67;
    static Locale.current.getter(v52);
    v53 = type metadata accessor for Locale(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v50, 0, 1, v53);
    v54 = Date.description(with:)(v50);
    v51 = v55;
    sub_1000135A0(v50, &qword_10010A4E8);
    v48 = v66(v21, v14);
    v49 = (uint64_t *)(v39 + 72);
    *(_QWORD *)(v39 + 96) = &type metadata for String;
    *(_QWORD *)(v39 + 104) = v42;
    if (v51)
    {
      *v49 = v54;
      goto LABEL_20;
    }
  }
  *v49 = 7104878;
  v51 = 0xE300000000000000;
LABEL_20:
  *(_QWORD *)(v39 + 80) = v51;
  static Locale.current.getter(v48);
  v56 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v50, 0, 1, v56);
  v57 = (uint64_t)v69;
  v58 = Date.description(with:)(v50);
  v60 = v59;
  v61 = sub_1000135A0(v50, &qword_10010A4E8);
  *(_QWORD *)(v39 + 136) = &type metadata for String;
  *(_QWORD *)(v39 + 144) = v42;
  *(_QWORD *)(v39 + 112) = v58;
  *(_QWORD *)(v39 + 120) = v60;
  v62 = static os_log_type_t.default.getter(v61);
  os_log(_:dso:log:type:_:)("TVWidgetContentViewModel::computeRefreshDate:: title: %@, refreshDate: %@, rentalExpirationDate: %@", 99, 2, &_mh_execute_header, v37, v62, v39);

  v63 = swift_bridgeObjectRelease(v39);
  return (id)((uint64_t (*)(uint64_t, uint64_t, __n128))v66)(v57, v14, v63);
}

double sub_10007CF7C(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  double result;
  double v6;
  double v7;
  double v8;

  if ((a2 & 1) != 0)
    goto LABEL_6;
  result = *(double *)&a1;
  if ((a4 & 1) == 0 && *(double *)&a1 > 0.0)
  {
    v6 = *(double *)&a3;
    if (*(double *)&a3 > 0.0)
      goto LABEL_15;
  }
  if ((*(_BYTE *)(v4 + 72) & 1) != 0 || *(double *)&a1 <= 0.0 || (v8 = *(double *)(v4 + 64), v8 <= 0.0))
  {
LABEL_6:
    result = 0.0;
    if ((a4 & 1) != 0)
      return result;
    if ((*(_BYTE *)(v4 + 72) & 1) != 0)
      return result;
    if (*(double *)&a3 <= 0.0)
      return result;
    v7 = *(double *)(v4 + 64);
    if (v7 <= 0.0)
      return result;
    result = v7 * *(double *)&a3;
    v6 = *(double *)&a3;
  }
  else
  {
    v6 = *(double *)&a1 / v8;
  }
LABEL_15:
  if (v6 <= 624.0)
  {
    if (result <= 1296.0)
      return result;
  }
  else
  {
    result = result / v6 * 624.0;
  }
  if (result > 1296.0)
    return 1296.0;
  return result;
}

uint64_t sub_10007D058(char a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  id v9;
  Class isa;
  id v11;
  uint64_t v12;
  uint64_t Strong;
  void *v14;
  _BYTE v16[24];

  if ((a1 & 1) != 0 && a3 >> 60 != 15)
  {
    v9 = objc_allocWithZone((Class)UIImage);
    sub_100046BC0(a2, a3);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v11 = objc_msgSend(v9, "initWithData:", isa);

    if (v11)
    {
      v12 = a4 + 16;
      swift_beginAccess(v12, v16, 0, 0);
      Strong = swift_weakLoadStrong(v12);
      sub_100046B3C(a2, a3);
      if (Strong)
      {
        v14 = *(void **)(Strong + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_image);
        *(_QWORD *)(Strong + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_image) = v11;
        swift_release(Strong);

      }
      else
      {

      }
    }
    else
    {
      sub_100046B3C(a2, a3);
    }
  }
  return a5();
}

_QWORD *sub_10007D16C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  sub_1000135A0((uint64_t)v0 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_actionURL, &qword_100105F50);
  sub_1000135A0((uint64_t)v0 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate, &qword_100105F48);

  sub_1000135A0((uint64_t)v0 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_refreshDate, &qword_100105F48);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_cropCode
                                      + 8));
  sub_1000135A0((uint64_t)v0 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_imageUrl, &qword_100105F50);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel____lazy_storage___id
                                      + 8));
  return v0;
}

uint64_t sub_10007D240()
{
  uint64_t v0;

  sub_10007D16C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10007D264()
{
  return type metadata accessor for TVWidgetContentViewModel(0);
}

uint64_t type metadata accessor for TVWidgetContentViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10010A288;
  if (!qword_10010A288)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TVWidgetContentViewModel);
  return result;
}

void sub_10007D2A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[7];
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;

  v7[0] = &unk_1000CE150;
  v7[1] = &unk_1000CE150;
  v7[2] = &unk_1000CE150;
  v7[3] = &unk_1000CE168;
  v7[4] = &unk_1000CE180;
  v7[5] = &unk_1000CE180;
  sub_10001EBC0(319, (unint64_t *)&qword_100106A88, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v7[6] = v4;
    sub_10001EBC0(319, (unint64_t *)&qword_100106B58, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v6 <= 0x3F)
    {
      v8 = *(_QWORD *)(v5 - 8) + 64;
      v9 = &unk_1000CE198;
      v10 = &unk_1000CE1B0;
      v11 = v8;
      v12 = &unk_1000CE150;
      v13 = v4;
      v14 = &unk_1000CE150;
      swift_updateClassMetadata2(a1, 256, 14, v7, a1 + 80);
    }
  }
}

unint64_t sub_10007D394@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;
  unint64_t v3;

  result = sub_10007C240();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10007D3BC(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

size_t sub_10007D3E4(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100008EF4(&qword_10010A4F8);
  v11 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = type metadata accessor for URLQueryItem(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v15 + v19;
  v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v20, v21, v8, v17);
  }
  swift_bridgeObjectRelease(a4);
  return (size_t)v15;
}

uint64_t sub_10007D558(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  char **v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _BYTE v65[24];

  v3 = sub_100008EF4(&qword_100105F48);
  __chkstk_darwin(v3);
  v63 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v58 = *(_QWORD *)(v5 - 8);
  v6 = v58;
  __chkstk_darwin(v5);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008EF4(&qword_100105F50);
  __chkstk_darwin(v9);
  v59 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 64) = 0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_BYTE *)(v1 + 72) = 1;
  *(_WORD *)(v1 + 73) = 514;
  v60 = v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_actionURL;
  v11 = *(void (**)(void))(v6 + 56);
  v11();
  v12 = v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_rentalExpirationDate;
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v62 = v12;
  v14(v12, 1, 1, v13);
  v64 = OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_image;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_image) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_isExpiring) = 0;
  v61 = v14;
  v14(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_refreshDate, 1, 1, v13);
  v15 = (uint64_t *)(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_cropCode);
  *v15 = 0;
  v15[1] = 0;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11)(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_imageUrl, 1, 1, v5);
  v16 = (_QWORD *)(v1 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel____lazy_storage___id);
  *v16 = 0;
  v16[1] = 0;
  v17 = objc_msgSend(a1, "title");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 16) = v18;
  *(_QWORD *)(v1 + 24) = v20;
  v22 = objc_msgSend(a1, "subtitleComposed", swift_bridgeObjectRelease(v21).n128_f64[0]);
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  *(_QWORD *)&v26 = swift_bridgeObjectRelease(v25).n128_u64[0];
  v27 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0)
    v27 = v23 & 0xFFFFFFFFFFFFLL;
  if (v27)
    v28 = &selRef_subtitleComposed;
  else
    v28 = &selRef_subtitle;
  v29 = objc_msgSend(a1, *v28, v26);
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  v33 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 32) = v30;
  *(_QWORD *)(v1 + 40) = v32;
  v34 = objc_msgSend(a1, "imageURLTemplate", swift_bridgeObjectRelease(v33).n128_f64[0]);
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v37 = v36;

  v38 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 48) = v35;
  *(_QWORD *)(v1 + 56) = v37;
  objc_msgSend(a1, "imageAspectRatio", swift_bridgeObjectRelease(v38).n128_f64[0]);
  *(_QWORD *)(v1 + 64) = v39;
  *(_BYTE *)(v1 + 72) = 0;
  v40 = objc_msgSend(a1, "actionURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v41 = v59;
  sub_10007C6C0((uint64_t)v8, v59);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v8, v5);
  v42 = v60;
  swift_beginAccess(v60, v65, 33, 0);
  sub_10006AFA8(v41, v42, &qword_100105F50);
  swift_endAccess(v65);
  *(_BYTE *)(v1 + 73) = objc_msgSend(a1, "isLiveEvent");
  v43 = objc_msgSend(a1, "rentalExpirationDate");
  if (v43)
  {
    v44 = v43;
    v45 = (uint64_t)v63;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v46 = 0;
  }
  else
  {
    v45 = (uint64_t)v63;
    v46 = 1;
  }
  v61(v45, v46, 1, v13);
  v47 = v62;
  swift_beginAccess(v62, v65, 33, 0);
  sub_10006AFA8(v45, v47, &qword_100105F48);
  swift_endAccess(v65);
  *(_BYTE *)(v1 + 74) = objc_msgSend(a1, "isNewEpisode");
  v48 = objc_msgSend(a1, "cropCode");
  if (v48)
  {
    v49 = v48;
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v52 = v51;

  }
  else
  {
    v50 = 0;
    v52 = 0;
  }
  v53 = v15[1];
  *v15 = v50;
  v15[1] = v52;
  swift_bridgeObjectRelease(v53);
  if (qword_100105DC8 != -1)
    swift_once(&qword_100105DC8, sub_100076ACC);
  v54 = (void *)qword_10011F120;
  v55 = *(void **)(v1 + v64);
  *(_QWORD *)(v1 + v64) = qword_10011F120;
  v56 = v54;

  sub_10007C9D0();
  return v1;
}

uint64_t sub_10007DA20(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, NSObject *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  NSString v32;
  uint64_t v33;
  NSString v34;
  NSObject *v35;
  NSObject *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  id v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD v66[3];
  _BYTE v67[24];

  v16 = sub_100008EF4(&qword_100105F50);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v64 = (uint64_t)&v60 - v21;
  __chkstk_darwin(v20);
  v61 = (char *)&v60 - v22;
  v23 = (_QWORD *)swift_allocObject(&unk_1000FD9D8, 40, 7);
  v23[2] = a6;
  v23[3] = a7;
  v63 = a7;
  v65 = v23;
  v23[4] = a8;
  v24 = *(_QWORD *)(a5 + 56);
  if (v24)
  {
    v62 = a6;
    v25 = sub_10007CF7C(a1, a2 & 1, a3, a4 & 1);
    if (v25 <= 0.0)
    {
      v29 = v62;
      swift_retain(v62);
      v30 = a8;
      v36 = a8;
    }
    else
    {
      v27 = v25;
      v28 = v26;
      v29 = v62;
      swift_retain(v62);
      v30 = a8;
      v31 = a8;
      if (v28 > 0.0)
      {
        swift_bridgeObjectRetain(v24);
        v32 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v24);
        v33 = *(_QWORD *)(a5 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_cropCode + 8);
        if (v33)
        {
          swift_bridgeObjectRetain(*(_QWORD *)(a5
                                             + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_cropCode
                                             + 8));
          v34 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v33);
        }
        else
        {
          v34 = 0;
        }
        v37 = (uint64_t)v61;
        v38 = objc_msgSend((id)objc_opt_self(TVUNContentItem), "artworkURLFromTemplate:forSize:cropCode:format:", v32, v34, 0, v27, v28);

        if (v38)
        {
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v38);

          v39 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v37, 0, 1, v39);
        }
        else
        {
          v40 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v37, 1, 1, v40);
        }
        v29 = v62;
        v41 = v64;
        sub_100013880(v37, v64, &qword_100105F50);
        v42 = a5 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_imageUrl;
        swift_beginAccess(a5 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_imageUrl, v67, 33, 0);
        sub_10006AFA8(v41, v42, &qword_100105F50);
        swift_endAccess(v67);
      }
    }
  }
  else
  {
    swift_retain(a6);
    v35 = a8;
    v30 = a8;
    v29 = a6;
  }
  v43 = a5 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_imageUrl;
  swift_beginAccess(a5 + OBJC_IVAR____TtC17TVWidgetExtension24TVWidgetContentViewModel_imageUrl, v67, 0, 0);
  sub_10001355C(v43, (uint64_t)v19, &qword_100105F50);
  v44 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v19, 1, v44);
  sub_1000135A0((uint64_t)v19, &qword_100105F50);
  if (v46 != 1)
  {
    v51 = v64;
    sub_10001355C(v43, v64, &qword_100105F50);
    v52 = type metadata accessor for TVWidgetImageLoader(0);
    v53 = swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
    v66[0] = 0xD000000000000013;
    v66[1] = 0x80000001000C3020;
    Published.init(initialValue:)(v66, &type metadata for String);
    v54 = v53 + OBJC_IVAR____TtC17TVWidgetExtension19TVWidgetImageLoader_url;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v53 + OBJC_IVAR____TtC17TVWidgetExtension19TVWidgetImageLoader_url, 1, 1, v44);
    swift_beginAccess(v54, v66, 33, 0);
    sub_10006AFA8(v51, v54, &qword_100105F50);
    swift_endAccess(v66);
    v55 = swift_allocObject(&unk_1000FDA00, 24, 7);
    swift_weakInit(v55 + 16, a5);
    v56 = (_QWORD *)swift_allocObject(&unk_1000FDA28, 40, 7);
    v56[2] = v55;
    v56[3] = sub_10007DFA8;
    v50 = v65;
    v56[4] = v65;
    swift_retain(v55);
    swift_retain(v50);
    sub_100045EEC((uint64_t)sub_10007E004, (uint64_t)v56);
    swift_release(v55);
    swift_release(v56);
    swift_setDeallocating(v53);
    v57 = v53 + OBJC_IVAR____TtC17TVWidgetExtension19TVWidgetImageLoader__identifier;
    v58 = sub_100008EF4(&qword_100108420);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v57, v58);
    sub_1000135A0(v53 + OBJC_IVAR____TtC17TVWidgetExtension19TVWidgetImageLoader_url, &qword_100105F50);
    swift_deallocClassInstance(v53, *(unsigned int *)(*(_QWORD *)v53 + 48), *(unsigned __int16 *)(*(_QWORD *)v53 + 52));
    return swift_release(v50);
  }
  v47 = sub_100006398();
  if (v47)
  {
    v48 = v47;
    v49 = static os_log_type_t.default.getter(v47);
    os_log(_:dso:log:type:_:)("TVWidgetContentViewModel::loadImage:: imageUrl is nil, keeping fallback image", 77, 2, &_mh_execute_header, v48, v49, _swiftEmptyArrayStorage);

    sub_100089D48(v29, v63, v30);
    v50 = v65;
    return swift_release(v50);
  }

  result = swift_release(v29);
  __break(1u);
  return result;
}

uint64_t sub_10007DF7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10007DFA8()
{
  uint64_t v0;

  sub_100089D48(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(NSObject **)(v0 + 32));
}

uint64_t sub_10007DFB4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007DFD8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10007E004(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return sub_10007D058(a1, a2, a3, *(_QWORD *)(v3 + 16), *(uint64_t (**)(void))(v3 + 24));
}

id sub_10007E010(void *a1, CGFloat a2, CGFloat a3)
{
  uint64_t v3;
  UIImage *v7;
  CGImage *v8;
  CGImage *v9;
  id v10;
  CGRect v12;

  UIGraphicsBeginImageContextWithOptions(*(CGSize *)&a2, 0, 0.0);
  objc_msgSend(a1, "setFill");
  v12.origin.x = 0.0;
  v12.origin.y = 0.0;
  v12.size.width = a2;
  v12.size.height = a3;
  UIRectFill(v12);
  v7 = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  if (!v7)
    goto LABEL_5;
  v8 = -[UIImage CGImage](v7, "CGImage");
  if (!v8)
  {

LABEL_5:
    return 0;
  }
  v9 = v8;
  v10 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithCGImage:", v8);

  return v10;
}

unint64_t sub_10007E0F0()
{
  unint64_t result;

  result = qword_10010A500;
  if (!qword_10010A500)
  {
    result = swift_getWitnessTable(&unk_1000CE2B0, &type metadata for TVSettingsDownloadWifiQualityEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_10010A500);
  }
  return result;
}

uint64_t sub_10007E134()
{
  return sub_100013840(&qword_10010A508, &qword_10010A510, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_10007E160()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000905C(v16, qword_10011F1D0);
  sub_10000909C(v16, (uint64_t)qword_10011F1D0);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x80000001000C30D0);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0xD000000000000012, 0x80000001000BF530, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_10007E388()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000905C(v0, qword_10011F1E8);
  sub_10000909C(v0, (uint64_t)qword_10011F1E8);
  return LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001000C31F0);
}

uint64_t sub_10007E3E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100008EF4(&qword_100106608);
  sub_10000905C(v0, qword_10011F200);
  v1 = sub_10000909C(v0, (uint64_t)qword_10011F200);
  IntentDescription.init(stringLiteral:)(0xD000000000000043, 0x80000001000C31A0);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_10007E470()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1000CE868);
  qword_10011F218 = result;
  return result;
}

double sub_10007E494()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for TVSettingsDownloadWifiQualityEntity(0);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0 + *(int *)(v1 + 24))).n128_u64[0];
  return result;
}

uint64_t sub_10007E4B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for TVSettingsDownloadWifiQualityEntity(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[5] = swift_task_alloc(v4);
  v3[6] = swift_task_alloc(v4);
  return swift_task_switch(sub_10007E520, 0, 0);
}

uint64_t sub_10007E520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  IntentParameter.wrappedValue.getter(*(_QWORD **)(v0 + 48));
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 112));
  *(_BYTE *)(v0 + 113) = *(_BYTE *)(v0 + 112);
  if (qword_100105E28 != -1)
    swift_once(&qword_100105E28, sub_10007E470);
  v1 = qword_10011F218;
  *(_QWORD *)(v0 + 56) = qword_10011F218;
  v2 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 64) = v3;
  v4 = sub_100013840(&qword_10010A760, &qword_10010A768, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *(_QWORD *)(v0 + 72) = v4;
  *v3 = v0;
  v3[1] = sub_10007E614;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 113, v1, &type metadata for VideosDownloadWiFiQuality, v4);
}

uint64_t sub_10007E614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  sub_1000807B4(v4);
  swift_release(v3);
  if (v0)
    v5 = sub_100072274;
  else
    v5 = sub_10007E694;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10007E694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  IntentParameter.wrappedValue.getter(*(_QWORD **)(v0 + 40));
  v1 = qword_10011F218;
  *(_QWORD *)(v0 + 88) = qword_10011F218;
  v2 = async function pointer to AppEntity._value<A, B>(for:)[1];
  swift_retain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 96) = v3;
  *v3 = v0;
  v3[1] = sub_10007E720;
  return AppEntity._value<A, B>(for:)(v0 + 114, v1, *(_QWORD *)(v0 + 72));
}

uint64_t sub_10007E720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  sub_1000807B4(v4);
  swift_release(v3);
  if (v0)
    v5 = sub_1000722B0;
  else
    v5 = sub_10007E7A0;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10007E7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  *(_BYTE *)(v0 + 115) = *(_BYTE *)(v0 + 114);
  v3 = sub_100051474();
  static IntentResult.result<A>(value:)(v0 + 115, &type metadata for VideosDownloadWiFiQuality, v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007E814(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for TVSettingsDownloadWifiQualityEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080824(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_1000807B4(a1);
}

double sub_10007E890()
{
  double result;

  if (qword_100105E28 != -1)
    swift_once(&qword_100105E28, sub_10007E470);
  *(_QWORD *)&result = swift_retain(qword_10011F218).n128_u64[0];
  return result;
}

unint64_t sub_10007E8D4()
{
  unint64_t result;

  result = qword_10010A518;
  if (!qword_10010A518)
  {
    result = swift_getWitnessTable(&unk_1000CE340, &type metadata for TVSettingsDownloadWifiQualityEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_10010A518);
  }
  return result;
}

unint64_t sub_10007E91C()
{
  unint64_t result;

  result = qword_10010A520;
  if (!qword_10010A520)
  {
    result = swift_getWitnessTable(&unk_1000CE368, &type metadata for TVSettingsDownloadWifiQualityEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_10010A520);
  }
  return result;
}

uint64_t sub_10007E960(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000D33EC, 1) + 8);
}

uint64_t sub_10007E984(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10007E0F0();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10007E9C4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105E18, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10011F1E8, (uint64_t)sub_10007E388, a1);
}

uint64_t sub_10007E9E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100105E20 != -1)
    swift_once(&qword_100105E20, sub_10007E3E8);
  v2 = sub_100008EF4(&qword_100106608);
  v3 = sub_10000909C(v2, (uint64_t)qword_10011F200);
  return sub_100016518(v3, a1);
}

uint64_t sub_10007EA48(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_10010A78C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1000145D8;
  return sub_10007E4B4(a1, v5, v4);
}

uint64_t sub_10007EAAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100080464();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_10007EAD0()
{
  return 0xD000000000000034;
}

unint64_t sub_10007EAF0()
{
  unint64_t result;

  result = qword_10010A530;
  if (!qword_10010A530)
  {
    result = swift_getWitnessTable(&unk_1000CE3C4, &type metadata for TVSettingsDownloadWifiQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_10010A530);
  }
  return result;
}

uint64_t sub_10007EB34()
{
  return sub_10007F9F8((unint64_t *)&unk_10010A538, (uint64_t)&unk_1000CE834);
}

uint64_t type metadata accessor for TVSettingsDownloadWifiQualityEntity(uint64_t a1)
{
  uint64_t result;

  result = qword_10010A608;
  if (!qword_10010A608)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TVSettingsDownloadWifiQualityEntity);
  return result;
}

uint64_t sub_10007EB94(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10007EBAC, 0, 0);
}

uint64_t sub_10007EBAC()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = sub_100092730() & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007EC04(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_10007EC20, 0, 0);
}

uint64_t sub_10007EC20()
{
  uint64_t v0;

  sub_100092130(*(_BYTE *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007EC6C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t result;
  _QWORD v48[2];
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;

  v2 = sub_100008EF4(&qword_1001074F8);
  __chkstk_darwin(v2);
  v54 = (char *)v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v4);
  v53 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v8 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v15);
  v17 = (char *)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for LocalizedStringResource(0);
  v18 = *(_QWORD *)(v49 - 8);
  v19 = __chkstk_darwin(v49);
  v52 = (char *)v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)v48 - v21;
  v23 = type metadata accessor for TVSettingsDownloadWifiQualityEntity(0);
  v55 = v23;
  v24 = sub_100008EF4(&qword_100108D90);
  *a1 = String.init<A>(describing:)(&v55, v24);
  a1[1] = v25;
  v50 = a1;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 1);
  v26._countAndFlagsBits = 0x64616F6C6E776F44;
  v26._object = (void *)0xEA00000000002073;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v26);
  v28 = WLKIsRegulatedSKU(v27);
  v29 = v28 == 0;
  if (v28)
    v30 = 1312902231;
  else
    v30 = 0x69462D6957;
  if (v29)
    v31 = 0xE500000000000000;
  else
    v31 = 0xE400000000000000;
  v48[1] = (char *)a1 + *(int *)(v23 + 20);
  v32 = v31;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease(v31);
  v33._countAndFlagsBits = 0x7974696C61755120;
  v33._object = (void *)0xE800000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v33);
  v34 = String.LocalizationValue.init(stringInterpolation:)(v17);
  static Locale.current.getter(v34);
  v35 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v48[0] = v8;
  v37 = v51;
  v36(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v51);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0xD000000000000012, 0x80000001000BF530, v11, v8, 0, 0, 256);
  v38 = v53;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v53, 1, 1, v49);
  v39 = type metadata accessor for DisplayRepresentation.Image(0);
  v40 = v54;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v54, 1, 1, v39);
  DisplayRepresentation.init(title:subtitle:image:)(v22, v38, v40);
  v41 = *(int *)(v23 + 24);
  sub_100008EF4(&qword_10010A510);
  v42 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x80000001000C30D0);
  static Locale.current.getter(v42);
  v43 = v48[0];
  v36((char *)v48[0], v35, v37);
  v44 = v52;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0xD000000000000012, 0x80000001000BF530, v11, v43, 0, 0, 256);
  v45 = sub_100013840(&qword_10010A760, &qword_10010A768, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v46 = sub_10005142C();
  result = _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v44, &unk_10010A750, 0, &unk_10010A758, 0, &type metadata for TVSettingsDownloadWifiQualityEntity.UpdateIntent_value, v45, v46);
  *(_QWORD *)((char *)v50 + v41) = result;
  return result;
}

uint64_t sub_10007F0CC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10007F0E4, 0, 0);
}

uint64_t sub_10007F0E4()
{
  uint64_t v0;

  sub_10007EC6C(*(_QWORD **)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10007F11C()
{
  unint64_t result;

  result = qword_10010A548;
  if (!qword_10010A548)
  {
    result = swift_getWitnessTable(&unk_1000CE3FC, &type metadata for TVSettingsDownloadWifiQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_10010A548);
  }
  return result;
}

uint64_t sub_10007F160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10007FA3C();
  *v4 = v2;
  v4[1] = sub_100014BF8;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_10007F1CC()
{
  unint64_t result;

  result = qword_10010A558;
  if (!qword_10010A558)
  {
    result = swift_getWitnessTable(&unk_1000CE454, &type metadata for TVSettingsDownloadWifiQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_10010A558);
  }
  return result;
}

unint64_t sub_10007F214()
{
  unint64_t result;

  result = qword_10010A560;
  if (!qword_10010A560)
  {
    result = swift_getWitnessTable(&unk_1000CE4B4, &type metadata for TVSettingsDownloadWifiQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_10010A560);
  }
  return result;
}

uint64_t sub_10007F258()
{
  return sub_10007F9F8(qword_10010A568, (uint64_t)&unk_1000CE7DC);
}

uint64_t sub_10007F27C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10007FA3C();
  *v5 = v2;
  v5[1] = sub_100014D9C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_10007F2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10007FA3C();
  *v4 = v2;
  v4[1] = sub_100016564;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_10007F354()
{
  unint64_t result;

  result = qword_10010A580;
  if (!qword_10010A580)
  {
    result = swift_getWitnessTable(&unk_1000CE4DC, &type metadata for TVSettingsDownloadWifiQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_10010A580);
  }
  return result;
}

uint64_t sub_10007F398()
{
  return sub_10007F9F8(&qword_10010A588, (uint64_t)&unk_1000CE784);
}

unint64_t sub_10007F3C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010A590;
  if (!qword_10010A590)
  {
    v1 = sub_100008F80(qword_10010A598);
    sub_10007F9F8(&qword_10010A588, (uint64_t)&unk_1000CE784);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10010A590);
  }
  return result;
}

uint64_t sub_10007F434(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10007F11C();
  *v5 = v2;
  v5[1] = sub_100016560;
  return EntityQuery.results()(a1, a2, v6);
}

ValueMetadata *type metadata accessor for TVSettingsDownloadWifiQualityEntity.Query()
{
  return &type metadata for TVSettingsDownloadWifiQualityEntity.Query;
}

uint64_t sub_10007F4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007F4BC);
}

uint64_t sub_10007F4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DisplayRepresentation(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10007F538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007F544);
}

uint64_t sub_10007F544(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DisplayRepresentation(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10007F5B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1000CE548;
  result = type metadata accessor for DisplayRepresentation(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TVSettingsDownloadWifiQualityEntity.UpdateIntent_value()
{
  return &type metadata for TVSettingsDownloadWifiQualityEntity.UpdateIntent_value;
}

uint64_t sub_10007F648()
{
  return sub_100013840(&qword_10010A648, &qword_10010A650, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_10007F678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10007F9F8(&qword_10010A6D8, (uint64_t)&unk_1000CE6E4);
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100015960(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_10007F6D0@<X0>(uint64_t a1@<X8>)
{
  return sub_10001544C(&qword_100105E10, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10011F1D0, (uint64_t)sub_10007E160, a1);
}

uint64_t sub_10007F6F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10007F9F8(qword_10010A568, (uint64_t)&unk_1000CE7DC);
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10007F73C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10007F9F8((unint64_t *)&unk_10010A538, (uint64_t)&unk_1000CE834);
  return _UniqueEntity.displayRepresentation.getter(a1, v2);
}

uint64_t sub_10007F784(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10007F9F8(&qword_10010A668, (uint64_t)&unk_1000CE59C);
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_10007F7CC()
{
  return sub_10007F9F8((unint64_t *)&unk_10010A658, (uint64_t)&unk_1000CE574);
}

uint64_t sub_10007F7F0()
{
  return sub_10007F9F8(&qword_10010A668, (uint64_t)&unk_1000CE59C);
}

uint64_t sub_10007F814()
{
  return sub_10007F9F8(&qword_10010A670, (uint64_t)&unk_1000CE5CC);
}

uint64_t sub_10007F838()
{
  return sub_10007F9F8(&qword_10010A678, (uint64_t)&unk_1000CE5F4);
}

uint64_t sub_10007F85C()
{
  return sub_10007F9F8(&qword_10010A680, (uint64_t)&unk_1000CE61C);
}

uint64_t sub_10007F880(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_10007F9F8(&qword_10010A6D0, (uint64_t)&unk_1000CE71C);
  a1[2] = sub_10007F9F8(&qword_10010A6D8, (uint64_t)&unk_1000CE6E4);
  result = sub_10007F9F8((unint64_t *)&unk_10010A538, (uint64_t)&unk_1000CE834);
  a1[3] = result;
  return result;
}

unint64_t sub_10007F8E8()
{
  unint64_t result;

  result = qword_10010A6E0;
  if (!qword_10010A6E0)
  {
    result = swift_getWitnessTable(&unk_1000CA2CC, &type metadata for VideosDownloadWiFiQuality);
    atomic_store(result, (unint64_t *)&qword_10010A6E0);
  }
  return result;
}

uint64_t sub_10007F92C(uint64_t a1)
{
  uint64_t result;

  result = sub_10007F9F8(&qword_10010A718, (uint64_t)&unk_1000CE74C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10007F960()
{
  return sub_100013840(&qword_10010A720, &qword_10010A728, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_10007F98C()
{
  return sub_10007F9F8(&qword_10010A730, (uint64_t)&unk_1000CE6AC);
}

uint64_t sub_10007F9B0()
{
  return sub_10007F9F8(&qword_10010A738, (uint64_t)&unk_1000CE67C);
}

uint64_t sub_10007F9D4()
{
  return sub_10007F9F8(&qword_10010A740, (uint64_t)&unk_1000CE644);
}

uint64_t sub_10007F9F8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for TVSettingsDownloadWifiQualityEntity(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10007FA3C()
{
  unint64_t result;

  result = qword_10010A748;
  if (!qword_10010A748)
  {
    result = swift_getWitnessTable(&unk_1000CE384, &type metadata for TVSettingsDownloadWifiQualityEntity.Query);
    atomic_store(result, (unint64_t *)&qword_10010A748);
  }
  return result;
}

void sub_10007FA80()
{
  uint64_t v0;
  int v1;
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  _StringGuts.grow(_:)(19);
  v1 = WLKIsRegulatedSKU(v0);
  v2 = v1 == 0;
  if (v1)
    v3 = 1312902231;
  else
    v3 = 0x69462D6957;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE400000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._object = (void *)0x80000001000C3230;
  v6._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v6);
  qword_10011F220 = 0;
  *(_QWORD *)algn_10011F228 = 0xE000000000000000;
}

void sub_10007FB2C()
{
  uint64_t v0;
  int v1;
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  _StringGuts.grow(_:)(35);
  v0 = swift_bridgeObjectRelease(0xE000000000000000);
  v1 = WLKIsRegulatedSKU(v0);
  v2 = v1 == 0;
  if (v1)
    v3 = 1312902231;
  else
    v3 = 0x69462D6957;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE400000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._object = (void *)0x80000001000C3210;
  v6._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v6);
  qword_10011F230 = 0x742065736F6F6843;
  *(_QWORD *)algn_10011F238 = 0xEB00000000206568;
}

uint64_t sub_10007FBF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *object;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  unint64_t v61;
  _QWORD v62[2];
  uint64_t v63;
  unint64_t v64;

  v58 = a1;
  v1 = type metadata accessor for ControlSize(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008EF4(&qword_100109830);
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  __chkstk_darwin(v4);
  v47 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100008EF4(&qword_100109838);
  v50 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100008EF4(&qword_100109840);
  v53 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v51 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100008EF4(&qword_100109848);
  v55 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v54 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v59, "com.apple.tv.");
  HIWORD(v59[1]) = -4864;
  v63 = (uint64_t)&type metadata for TVSettingsDownloadWifiQualityWidget;
  v9 = sub_100008EF4(&qword_10010A7E0);
  v10._countAndFlagsBits = String.init<A>(describing:)(&v63, v9);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v12 = v59[1];
  v45 = v59[0];
  if (qword_100105E30 != -1)
    swift_once(&qword_100105E30, sub_10007FA80);
  v13 = qword_10011F220;
  v14 = *(_QWORD *)algn_10011F228;
  KeyPath = swift_getKeyPath(&unk_1000CE868);
  v16 = swift_bridgeObjectRetain(v14);
  static ControlSize._1x1.getter(v16);
  v17 = sub_100008EF4(&qword_100108EE0);
  v18 = sub_10005142C();
  v19 = sub_1000516A0();
  v20 = sub_10007F9F8((unint64_t *)&unk_10010A538, (uint64_t)&unk_1000CE834);
  v21 = sub_100064A3C();
  v43 = v17;
  v22 = v47;
  ControlPicker.init<A, B, C, D, E, F, G>(kind:displayName:preferredSize:intentUpdatableProperty:title:value:affordances:)(v45, v12, v13, v14, v3, KeyPath, sub_100080110, 0, sub_1000801A8, 0, sub_100076460, 0, &type metadata for Text, v43, v18, v19, v20, &protocol witness table for Text, v21);
  v59[0] = &type metadata for TVSettingsDownloadWifiQualityWidget;
  v23 = String.init<A>(describing:)(v59, v9);
  v25 = v24;
  v59[0] = v23;
  v59[1] = v24;
  v63 = 0x746567646957;
  v64 = 0xE600000000000000;
  v62[0] = 0x656C67676F54;
  v62[1] = 0xE600000000000000;
  v26 = sub_100013080();
  v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v63, v62, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v26, v26, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v25);
  v59[0] = v27;
  v59[1] = v29;
  v30 = sub_100013840(&qword_100109858, &qword_100109830, (uint64_t)&protocol conformance descriptor for ControlPicker<A>);
  v31 = v46;
  v32 = v49;
  WidgetConfiguration.configurationDisplayName<A>(_:)(v59, v49, &type metadata for String, v30, v26);
  v33 = swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t, __n128))(v48 + 8))(v22, v32, v33);
  if (qword_100105E38 != -1)
    swift_once(&qword_100105E38, sub_10007FB2C);
  v63 = qword_10011F230;
  v64 = *(_QWORD *)algn_10011F238;
  v59[0] = v32;
  v59[1] = &type metadata for String;
  v60 = v30;
  v61 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v59, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v36 = v51;
  v35 = v52;
  WidgetConfiguration.description<A>(_:)(&v63, v52, &type metadata for String, OpaqueTypeConformance2, v26);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v31, v35);
  v59[0] = v35;
  v59[1] = &type metadata for String;
  v60 = OpaqueTypeConformance2;
  v61 = v26;
  v37 = swift_getOpaqueTypeConformance2(v59, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v38 = v54;
  v39 = v56;
  WidgetConfiguration.disablesControlStateCaching()(v56, v37);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v36, v39);
  v59[0] = v39;
  v59[1] = v37;
  v40 = swift_getOpaqueTypeConformance2(v59, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disablesControlStateCaching()>>, 1);
  v41 = v57;
  WidgetConfiguration.hiddenControl()(v57, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v38, v41);
}

uint64_t sub_100080110@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD v8[2];

  if (qword_100105E30 != -1)
    swift_once(&qword_100105E30, sub_10007FA80);
  v2 = *(_QWORD *)algn_10011F228;
  v8[0] = qword_10011F220;
  v8[1] = *(_QWORD *)algn_10011F228;
  v3 = sub_100013080();
  swift_bridgeObjectRetain(v2);
  result = Text.init<A>(_:)(v8, &type metadata for String, v3);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6 & 1;
  *(_QWORD *)(a1 + 24) = v7;
  return result;
}

uint64_t sub_1000801A8@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;

  v4 = sub_100008EF4(&qword_100109860);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizedStringResource(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v40 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v40 - v15;
  v17 = *a1;
  if (qword_100105CC8 != -1)
    swift_once(&qword_100105CC8, sub_10005009C);
  v18 = qword_10011EEB0;
  if (*(_QWORD *)(qword_10011EEB0 + 16))
  {
    swift_bridgeObjectRetain(qword_10011EEB0);
    v19 = sub_10002D7E0(v17);
    if ((v20 & 1) != 0)
    {
      v21 = v19;
      v40 = v14;
      v22 = v16;
      v23 = v11;
      v24 = *(_QWORD *)(v18 + 56);
      v25 = type metadata accessor for DisplayRepresentation(0);
      v41 = v8;
      v26 = v7;
      v27 = *(_QWORD *)(v25 - 8);
      v28 = v24 + *(_QWORD *)(v27 + 72) * v21;
      v11 = v23;
      v16 = v22;
      v14 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v6, v28, v25);
      v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56);
      v7 = v26;
      v8 = v41;
      v29(v6, 0, 1, v25);
    }
    else
    {
      v25 = type metadata accessor for DisplayRepresentation(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v6, 1, 1, v25);
    }
    swift_bridgeObjectRelease(v18);
    type metadata accessor for DisplayRepresentation(0);
    v31 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v6, 1, v25) != 1)
    {
      DisplayRepresentation.title.getter();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v25);
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v14, v7);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v16, v7);
      v33 = Text.init(_:)(v11);
      v34 = v37;
      v36 = v38;
      v35 = v39 & 1;
      result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v7);
      goto LABEL_11;
    }
  }
  else
  {
    v30 = type metadata accessor for DisplayRepresentation(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v6, 1, 1, v30);
  }
  result = sub_1000719FC((uint64_t)v6);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
LABEL_11:
  *a2 = v33;
  a2[1] = v34;
  a2[2] = v35;
  a2[3] = v36;
  return result;
}

uint64_t sub_100080464()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v33 = *(_QWORD *)(v0 - 8);
  v34 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100008EF4(&qword_1001065E0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v28 - v7;
  v9 = sub_100008EF4(&qword_10010A770);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008EF4(&qword_100106598);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  v32 = v15;
  __chkstk_darwin(v15);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100008EF4(&qword_10010A778);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000021, 0x80000001000C3130);
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v31(v14, 1, 1, v15);
  v19 = type metadata accessor for TVSettingsDownloadWifiQualityEntity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v11, 1, 1, v19);
  v20 = type metadata accessor for IntentDialog(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v8, 1, 1, v20);
  v22 = v6;
  v21(v6, 1, 1, v20);
  v23 = enum case for InputConnectionBehavior.default(_:);
  v24 = v34;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 104);
  v29(v2, enum case for InputConnectionBehavior.default(_:), v34);
  v25 = sub_10007F9F8(qword_10010A568, (uint64_t)&unk_1000CE7DC);
  v33 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v18, v14, v11, v8, v22, v2, v25);
  sub_100008EF4(&qword_10010A780);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000003CLL, 0x80000001000C3160);
  v31(v14, 1, 1, v32);
  v35 = 2;
  v21(v8, 1, 1, v20);
  v21(v22, 1, 1, v20);
  v29(v2, v23, v24);
  v26 = sub_10005142C();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v18, v14, &v35, v8, v22, v2, &off_1000F72D8, v26);
  return v33;
}

uint64_t sub_1000807B4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TVSettingsDownloadWifiQualityEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_1000807F0@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TVSettingsDownloadWifiQualityEntity(0) + 24));
  *a2 = v3;
  *(_QWORD *)&result = swift_retain(v3).n128_u64[0];
  return result;
}

uint64_t sub_100080824(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TVSettingsDownloadWifiQualityEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for TVSettingsDownloadWifiQualityWidget()
{
  return &type metadata for TVSettingsDownloadWifiQualityWidget;
}

uint64_t sub_100080878(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D343C, 1);
}

unint64_t sub_100080888(uint64_t a1)
{
  unint64_t result;

  result = sub_1000808AC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000808AC()
{
  unint64_t result;

  result = qword_10010A7D8;
  if (!qword_10010A7D8)
  {
    result = swift_getWitnessTable(&unk_1000CE8B4, &type metadata for TVSettingsDownloadWifiQualityWidget);
    atomic_store(result, (unint64_t *)&qword_10010A7D8);
  }
  return result;
}

uint64_t sub_1000808F0()
{
  id v0;
  uint64_t result;
  _BYTE v2[24];
  void *v3;
  unint64_t v4;

  SportsRunningClockLocalization.init()();
  v3 = &type metadata for SportsRunningClockLocalization;
  v4 = sub_100085190();
  v0 = objc_allocWithZone((Class)type metadata accessor for RunningClockComponentsFormatter(0));
  result = RunningClockComponentsFormatter.init(localizationProvider:)(v2);
  qword_10010A7E8 = result;
  return result;
}

uint64_t sub_100080948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v8[24];
  void *v9;
  unint64_t v10;

  v0 = type metadata accessor for RunningClockComponentsFormatter.StyleOptions(0);
  v1 = __chkstk_darwin(v0);
  v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  SportsRunningClockLocalization.init()(v1);
  v9 = &type metadata for SportsRunningClockLocalization;
  v10 = sub_100085190();
  v4 = objc_allocWithZone((Class)type metadata accessor for RunningClockComponentsFormatter(0));
  v5 = RunningClockComponentsFormatter.init(localizationProvider:)(v8);
  static RunningClockComponentsFormatter.StyleOptions.abbreviatedShootoutStyle.getter();
  result = RunningClockComponentsFormatter.styleOptions.setter(v3);
  qword_10010A7F0 = v5;
  return result;
}

id sub_1000809E8()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v0, "setDateStyle:", 0);
  result = objc_msgSend(v0, "setTimeStyle:", 1);
  qword_10010A7F8 = (uint64_t)v0;
  return result;
}

id sub_100080A48(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  id result;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  __n128 v62;
  void *v63;
  int v64;
  NSString v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  Swift::String v71;
  uint64_t v72;
  unint64_t v73;
  Swift::String v74;
  __n128 v75;
  uint64_t v76;
  char *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;

  v79 = a3;
  v78 = a2;
  v4 = type metadata accessor for SportingEventCompetitorScoreStatisticType.StatisticName(0);
  v80 = *(_QWORD *)(v4 - 8);
  v81 = v4;
  __chkstk_darwin(v4);
  v83 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008EF4(&qword_10010A808);
  __chkstk_darwin(v6);
  v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RunningClockComponentsFormatter.DataSource(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SportingEventClockPeriodType(0);
  v85 = *(_QWORD *)(v13 - 8);
  v86 = v13;
  v14 = __chkstk_darwin(v13);
  v82 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v84 = (char *)&v76 - v16;
  v17 = type metadata accessor for SportsActivitySoccerClock(0);
  v88 = *(_QWORD *)(v17 - 8);
  v89 = v17;
  __chkstk_darwin(v17);
  v87 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100008EF4(&qword_10010A800);
  __chkstk_darwin(v19);
  v21 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for SportsActivityClock(0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v76 - v26;
  v28 = a1;
  v30 = v29;
  sub_10001355C(v28, (uint64_t)v21, &qword_10010A800);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v21, 1, v22) == 1)
  {
    v31 = &qword_10010A800;
    v32 = (uint64_t)v21;
LABEL_3:
    sub_1000135A0(v32, v31);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v21, v22);
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v25, v27, v22);
  if ((*(unsigned int (**)(char *, uint64_t))(v30 + 88))(v25, v22) != enum case for SportsActivityClock.soccer(_:))
  {
    v41 = *(void (**)(char *, uint64_t))(v30 + 8);
    v41(v27, v22);
    v41(v25, v22);
    return 0;
  }
  v77 = v27;
  (*(void (**)(char *, uint64_t))(v30 + 96))(v25, v22);
  v33 = v88;
  v34 = v87;
  v35 = v89;
  v36 = (*(uint64_t (**)(void))(v88 + 32))();
  v37 = v30;
  v38 = SportsActivitySoccerClock.runningClockDataSource.getter(v36);
  RunningClockComponentsFormatter.DataSource.periodType.getter(v38);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v40 = v85;
  v39 = v86;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v8, 1, v86) == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v77, v22);
    v31 = &qword_10010A808;
    v32 = (uint64_t)v8;
    goto LABEL_3;
  }
  v44 = v84;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v84, v8, v39);
  v45 = v82;
  (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v82, enum case for SportingEventClockPeriodType.shootouts(_:), v39);
  v46 = sub_1000139F8(&qword_10010A810, (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventClockPeriodType, (uint64_t)&protocol conformance descriptor for SportingEventClockPeriodType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v92, v39, v46);
  dispatch thunk of RawRepresentable.rawValue.getter(&v90, v39, v46);
  v47 = v93;
  v48 = v91;
  if (v92 == v90 && v93 == v91)
  {
    swift_bridgeObjectRelease_n(v93, 2);
    v49 = *(uint64_t (**)(char *, uint64_t))(v40 + 8);
    v50 = v49(v45, v39);
    v51 = (uint64_t)v83;
  }
  else
  {
    v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v92, v93);
    swift_bridgeObjectRelease(v47);
    v53 = swift_bridgeObjectRelease(v48);
    v49 = *(uint64_t (**)(char *, uint64_t))(v40 + 8);
    v50 = ((uint64_t (*)(char *, uint64_t, __n128))v49)(v45, v39, v53);
    v54 = v88;
    v55 = v89;
    v51 = (uint64_t)v83;
    if ((v52 & 1) == 0)
    {
      v49(v44, v39);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v87, v55);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v77, v22);
      return 0;
    }
  }
  v56 = SportsActivityContender.scoreEntries.getter(v50);
  v58 = v80;
  v57 = v81;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v80 + 104))(v51, enum case for SportingEventCompetitorScoreStatisticType.StatisticName.shootout(_:), v81);
  if (*(_QWORD *)(v56 + 16) && (v59 = sub_10002D880(v51), (v60 & 1) != 0))
    v61 = *(_QWORD *)(*(_QWORD *)(v56 + 56) + 8 * v59);
  else
    v61 = 0;
  v62 = swift_bridgeObjectRelease(v56);
  (*(void (**)(uint64_t, uint64_t, __n128))(v58 + 8))(v51, v57, v62);
  result = objc_msgSend((id)objc_opt_self(VUILocalizationManager), "sharedInstance");
  if (result)
  {
    v63 = result;
    v64 = v78;
    v65 = String._bridgeToObjectiveC()();
    v66 = objc_msgSend(v63, "localizedStringForKey:", v65);

    if (v66)
    {
      v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
      v69 = v68;

      if (v64 == 2)
      {
LABEL_21:
        v92 = v67;
        v93 = v69;
        goto LABEL_27;
      }
    }
    else
    {
      v69 = 0xE100000000000000;
      v67 = 80;
      if (v64 == 2)
        goto LABEL_21;
    }
    if ((v64 & 1) == 0)
    {
      v90 = v61;
      v92 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v93 = v70;
      v71._countAndFlagsBits = 32;
      v71._object = (void *)0xE100000000000000;
      String.append(_:)(v71);
      v72 = v67;
      v73 = v69;
LABEL_28:
      String.append(_:)(*(Swift::String *)&v72);
      v75 = swift_bridgeObjectRelease(v69);
      v42 = v92;
      ((void (*)(char *, uint64_t, __n128))v49)(v44, v39, v75);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v89);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v77, v22);
      return (id)v42;
    }
    v92 = v67;
    v93 = v69;
    v74._countAndFlagsBits = 32;
    v74._object = (void *)0xE100000000000000;
    String.append(_:)(v74);
LABEL_27:
    v90 = v61;
    v72 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v69 = v73;
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000810D0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t result;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  char *v55;
  int *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  _OWORD v114[3];
  char v115;

  v112 = a3;
  v113 = a2;
  v106 = sub_100008EF4(&qword_10010A820);
  v4 = __chkstk_darwin(v106);
  v109 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v104 = (char *)&v86 - v6;
  v105 = sub_100008EF4(&qword_100105F40);
  __chkstk_darwin(v105);
  v108 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v107 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v86 - v12;
  v14 = sub_100008EF4(&qword_10010A828);
  __chkstk_darwin(v14);
  v87 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for SportsActivitySoccerClock(0);
  v90 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v88 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for SportsActivityBaseballClock(0);
  v93 = *(_QWORD *)(v94 - 8);
  v17 = __chkstk_darwin(v94);
  v91 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v92 = (char *)&v86 - v19;
  v111 = type metadata accessor for SportsWidgetClock(0);
  __chkstk_darwin(v111);
  v21 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for RunningClockComponentsFormatter.DataSource(0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v97 = (char *)&v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for RunningClockComponentsFormatter.FormattedComponents(0);
  v102 = *(_QWORD *)(v23 - 8);
  v103 = v23;
  v24 = __chkstk_darwin(v23);
  v100 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v101 = (char *)&v86 - v26;
  v96 = type metadata accessor for SportsActivityGenericClock(0);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v28 = (char *)&v86 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100008EF4(&qword_10010A800);
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v86 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v34 = (char *)&v86 - v33;
  v35 = a1;
  sub_10001355C(a1, (uint64_t)&v86 - v33, &qword_10010A800);
  v36 = type metadata accessor for SportsActivityClock(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48))(v34, 1, v36);
  v110 = v34;
  if ((_DWORD)v38 != 1)
  {
    v86 = v35;
    sub_10001355C((uint64_t)v34, (uint64_t)v32, &qword_10010A800);
    v58 = (*(uint64_t (**)(char *, uint64_t))(v37 + 88))(v32, v36);
    if (v58 == enum case for SportsActivityClock.generic(_:))
    {
      (*(void (**)(char *, uint64_t))(v37 + 96))(v32, v36);
      v59 = v95;
      v60 = v96;
      v61 = (*(uint64_t (**)(char *, char *, uint64_t))(v95 + 32))(v28, v32, v96);
      v62 = v97;
      SportsActivityGenericClock.runningClockDataSource.getter(v61);
      v63 = v101;
      v64 = v113;
      RunningClockComponentsFormatter.formattedComponents(dataSource:)(v62);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v62, v99);
      v66 = v102;
      v65 = v103;
      v67 = (uint64_t)v100;
      (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v100, v63, v103);
      sub_1000819CC(v67, v21);

      sub_1000135A0(v86, &qword_10010A800);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v63, v65);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v28, v60);
      v57 = 0;
      goto LABEL_10;
    }
    v68 = v113;
    if (v58 == enum case for SportsActivityClock.baseball(_:))
    {
      (*(void (**)(char *, uint64_t))(v37 + 96))(v32, v36);
      v69 = v93;
      v70 = v92;
      v71 = v94;
      (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v92, v32, v94);
      v72 = (uint64_t)v91;
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v91, v70, v71);
      sub_100084154(v72, (uint64_t)v114);

      sub_1000135A0(v86, &qword_10010A800);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
      v73 = v114[1];
      *(_OWORD *)v21 = v114[0];
      *((_OWORD *)v21 + 1) = v73;
      *((_OWORD *)v21 + 2) = v114[2];
      v21[48] = v115;
      v57 = 1;
      goto LABEL_10;
    }
    if (v58 == enum case for SportsActivityClock.soccer(_:))
    {
      (*(void (**)(char *, uint64_t))(v37 + 96))(v32, v36);
      v74 = v88;
      v75 = v89;
      v76 = (*(uint64_t (**)(char *, char *, uint64_t))(v90 + 32))(v88, v32, v89);
      v77 = v97;
      SportsActivitySoccerClock.runningClockDataSource.getter(v76);
      v78 = v101;
      RunningClockComponentsFormatter.formattedComponents(dataSource:)(v77);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v77, v99);
      v80 = v102;
      v79 = v103;
      v81 = (uint64_t)v100;
      v82 = (*(uint64_t (**)(char *, char *, uint64_t))(v102 + 16))(v100, v78, v103);
      v83 = (uint64_t)v87;
      SportsActivitySoccerClock.penaltyShootoutsViewModel.getter(v82);
      sub_10008203C(v81, v83, v21);

      sub_1000135A0(v86, &qword_10010A800);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v78, v79);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v74, v75);
      v57 = 2;
      goto LABEL_10;
    }
    v38 = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v32, v36);
    v35 = v86;
  }
  v39 = Date.init()(v38);
  Date.init()(v39);
  v40 = sub_1000139F8((unint64_t *)&qword_100106B50, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v41 = dispatch thunk of static Comparable.<= infix(_:_:)(v13, v11, v8, v40);

  result = sub_1000135A0(v35, &qword_10010A800);
  if ((v41 & 1) != 0)
  {
    v43 = v11;
    v113 = v21;
    v44 = v106;
    v45 = v107;
    v46 = v104;
    v47 = &v104[*(int *)(v106 + 48)];
    v48 = *(void (**)(char *, char *, uint64_t))(v107 + 32);
    v48(v104, v13, v8);
    v48(v47, v43, v8);
    v49 = v109;
    v50 = &v109[*(int *)(v44 + 48)];
    v51 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
    v51(v109, v46, v8);
    v51(v50, v47, v8);
    v52 = (uint64_t)v108;
    v48(v108, v49, v8);
    v53 = *(void (**)(char *, uint64_t))(v45 + 8);
    v53(v50, v8);
    v54 = *(int *)(v44 + 48);
    v21 = v113;
    v55 = &v49[v54];
    v48(v49, v46, v8);
    v48(v55, v47, v8);
    v48((char *)(v52 + *(int *)(v105 + 36)), v55, v8);
    v53(v49, v8);
    v56 = (int *)type metadata accessor for SportsWidgetGenericClockViewModel(0);
    sub_100013880(v52, (uint64_t)&v21[v56[8]], &qword_100105F40);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(&v21[v56[9]], 1, 1, v8);
    v57 = 0;
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = 0xE000000000000000;
    *((_QWORD *)v21 + 3) = 0;
    *((_QWORD *)v21 + 4) = 0;
    *((_QWORD *)v21 + 2) = 0;
    *(_OWORD *)(v21 + 40) = xmmword_1000CE910;
    *((_QWORD *)v21 + 7) = 0xE000000000000000;
    v21[v56[10]] = 0;
    v21[v56[11]] = 0;
LABEL_10:
    v84 = v112;
    v85 = (uint64_t)v110;
    swift_storeEnumTagMultiPayload(v21, v111, v57);
    sub_10008514C((uint64_t)v21, v84);
    return sub_1000135A0(v85, &qword_10010A800);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000819CC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  __n128 v50;
  char *v51;
  uint64_t v52;
  uint64_t result;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unsigned int (*v89)(char *, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v80 = sub_100008EF4(&qword_10010A820);
  v4 = __chkstk_darwin(v80);
  v78 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v79 = (char *)&v77 - v6;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v82 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v81 = (char *)&v77 - v11;
  v12 = sub_100008EF4(&qword_10010A830);
  __chkstk_darwin(v12);
  v92 = (uint64_t)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100008EF4(&qword_100105F40);
  v14 = *(_QWORD *)(v90 - 8);
  v15 = __chkstk_darwin(v90);
  v77 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v85 = (uint64_t)&v77 - v17;
  v18 = sub_100008EF4(&qword_10010A838);
  v19 = __chkstk_darwin(v18);
  v87 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v86 = (char *)&v77 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v77 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v77 - v26;
  v28 = sub_100008EF4(&qword_100105F48);
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v77 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a2 = RunningClockComponentsFormatter.FormattedComponents.clock.getter(v29);
  *((_QWORD *)a2 + 1) = v32;
  *((_QWORD *)a2 + 2) = RunningClockComponentsFormatter.FormattedComponents.headerTitle.getter();
  *((_QWORD *)a2 + 3) = v33;
  *((_QWORD *)a2 + 4) = RunningClockComponentsFormatter.FormattedComponents.prefix.getter();
  *((_QWORD *)a2 + 5) = v34;
  *((_QWORD *)a2 + 6) = RunningClockComponentsFormatter.FormattedComponents.suffix.getter();
  *((_QWORD *)a2 + 7) = v35;
  v91 = a1;
  ((void (*)(void))RunningClockComponentsFormatter.FormattedComponents.liveClock.getter)();
  v36 = type metadata accessor for RunningClockComponentsFormatter.LiveClockComponents(0);
  v37 = *(_QWORD *)(v36 - 8);
  v89 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
  v38 = v89(v27, 1, v36);
  v88 = v37;
  if (v38 == 1)
  {
    sub_1000135A0((uint64_t)v27, &qword_10010A838);
    v39 = v8;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v31, 1, 1, v7);
  }
  else
  {
    v39 = v8;
    RunningClockComponentsFormatter.LiveClockComponents.pauseAt.getter();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v36);
  }
  v83 = type metadata accessor for SportsWidgetGenericClockViewModel(0);
  v40 = sub_100013880((uint64_t)v31, (uint64_t)&a2[*(int *)(v83 + 36)], &qword_100105F48);
  v41 = v91;
  RunningClockComponentsFormatter.FormattedComponents.liveClock.getter(v40);
  v42 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v89;
  v43 = v89(v25, 1, v36);
  v84 = v36;
  if (v43 == 1)
  {
    sub_1000135A0((uint64_t)v25, &qword_10010A838);
    v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v92, 1, 1, v90);
    v45 = v39;
  }
  else
  {
    v46 = v92;
    RunningClockComponentsFormatter.LiveClockComponents.dateInterval.getter();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v25, v36);
    v47 = v90;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v46, 0, 1, v90);
    v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v46, 1, v47);
    v45 = v39;
    if ((_DWORD)v44 != 1)
    {
      v67 = v85;
      sub_100013880(v92, v85, &qword_100105F40);
      goto LABEL_10;
    }
  }
  v48 = v81;
  v49 = Date.init()(v44);
  v50.n128_u64[0] = 0x4059000000000000;
  v51 = v82;
  Date.init(timeIntervalSinceNow:)(v49, v50);
  v52 = sub_1000139F8((unint64_t *)&qword_100106B50, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v48, v51, v7, v52);
  if ((result & 1) == 0)
  {
    __break(1u);
    return result;
  }
  v55 = v78;
  v54 = v79;
  v56 = v80;
  v57 = &v79[*(int *)(v80 + 48)];
  v58 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
  v58(v79, v48, v7);
  v58(v57, v51, v7);
  v59 = &v55[*(int *)(v56 + 48)];
  v60 = (uint64_t)v77;
  v82 = a2;
  v61 = v45;
  v62 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  v62(v55, v54, v7);
  v62(v59, v57, v7);
  v58((char *)v60, v55, v7);
  v63 = *(void (**)(char *, uint64_t))(v61 + 8);
  a2 = v82;
  v63(v59, v7);
  v64 = *(int *)(v56 + 48);
  v42 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v89;
  v65 = &v55[v64];
  v58(v55, v54, v7);
  v58(v65, v57, v7);
  v58((char *)(v60 + *(int *)(v90 + 36)), v65, v7);
  v66 = v55;
  v41 = v91;
  v63(v66, v7);
  v67 = v85;
  sub_100013880(v60, v85, &qword_100105F40);
  sub_1000135A0(v92, &qword_10010A830);
LABEL_10:
  v68 = v83;
  v69 = sub_100013880(v67, (uint64_t)&a2[*(int *)(v83 + 32)], &qword_100105F40);
  v70 = (uint64_t)v86;
  RunningClockComponentsFormatter.FormattedComponents.liveClock.getter(v69);
  v71 = v84;
  if (v42(v70, 1, v84) == 1)
  {
    v72 = sub_1000135A0(v70, &qword_10010A838);
    v73 = 1;
  }
  else
  {
    v73 = RunningClockComponentsFormatter.LiveClockComponents.countdown.getter();
    v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 8))(v70, v71);
  }
  a2[*(int *)(v68 + 40)] = v73 & 1;
  v74 = (uint64_t)v87;
  RunningClockComponentsFormatter.FormattedComponents.liveClock.getter(v72);
  v75 = type metadata accessor for RunningClockComponentsFormatter.FormattedComponents(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 8))(v41, v75);
  v76 = v42(v74, 1, v71) != 1;
  result = sub_1000135A0(v74, &qword_10010A838);
  a2[*(int *)(v68 + 44)] = v76;
  return result;
}

uint64_t sub_10008203C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  int v44;
  char v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(char *, uint64_t);
  __n128 v50;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  _QWORD *v85;

  v63 = a2;
  v64 = a3;
  v4 = type metadata accessor for CompetitorShootoutsViewModel.ShootoutState(0);
  v79 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v83 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v58 - v7;
  v65 = type metadata accessor for CompetitorShootoutsViewModel(0);
  v72 = *(_QWORD *)(v65 - 8);
  v9 = __chkstk_darwin(v65);
  v76 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v75 = (char *)&v58 - v11;
  v12 = sub_100008EF4(&qword_10010A828);
  __chkstk_darwin(v12);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PenaltyShootoutsViewModel(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for RunningClockComponentsFormatter.FormattedComponents(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, v19);
  v23 = (uint64_t)v22;
  v24 = v16;
  v25 = v63;
  sub_1000819CC(v23, v64);
  sub_10001355C(v25, (uint64_t)v14, &qword_10010A828);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v14, 1, v15) == 1)
  {
    sub_1000135A0(v25, &qword_10010A828);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, v19);
    sub_1000135A0((uint64_t)v14, &qword_10010A828);
    v26 = 0;
    v27 = v64;
    goto LABEL_29;
  }
  v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v18, v14, v15);
  v62 = PenaltyShootoutsViewModel.competitorShootoutsViewModels.getter(v28);
  v29 = *(_QWORD *)(v62 + 16);
  v26 = _swiftEmptyArrayStorage;
  v30 = v20;
  if (v29)
  {
    v59 = v24;
    v60 = v15;
    v61 = a1;
    v85 = _swiftEmptyArrayStorage;
    v69 = v29;
    sub_1000591B0(0, v29, 0);
    v31 = 0;
    v68 = v62 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
    v32 = *(_QWORD *)(v72 + 72);
    v66 = *(uint64_t (**)(char *, char *, uint64_t))(v72 + 16);
    v67 = v32;
    v80 = enum case for CompetitorShootoutsViewModel.ShootoutState.empty(_:);
    v78 = enum case for CompetitorShootoutsViewModel.ShootoutState.miss(_:);
    v77 = enum case for CompetitorShootoutsViewModel.ShootoutState.goal(_:);
    v33 = v65;
    v70 = v19;
    v71 = v18;
    v81 = v30;
    while (1)
    {
      v74 = v31;
      v34 = v75;
      v35 = v66;
      v66(v75, (char *)(v68 + v67 * v31), v33);
      v36 = v35(v76, v34, v33);
      v37 = CompetitorShootoutsViewModel.shootouts.getter(v36);
      v38 = *(_QWORD *)(v37 + 16);
      if (v38)
        break;
      v46 = _swiftEmptyArrayStorage;
LABEL_21:
      v49 = *(void (**)(char *, uint64_t))(v72 + 8);
      v49(v76, v33);
      v50 = swift_bridgeObjectRelease(v37);
      ((void (*)(char *, uint64_t, __n128))v49)(v75, v33, v50);
      v26 = v85;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v85);
      v19 = v70;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000591B0(0, v26[2] + 1, 1);
        v26 = v85;
      }
      v52 = v74;
      v54 = v26[2];
      v53 = v26[3];
      if (v54 >= v53 >> 1)
      {
        sub_1000591B0((char *)(v53 > 1), v54 + 1, 1);
        v52 = v74;
        v26 = v85;
      }
      v31 = v52 + 1;
      v26[2] = v54 + 1;
      v26[v54 + 4] = v46;
      v18 = v71;
      if (v31 == v69)
      {
        v27 = v64;
        a1 = v61;
        v55 = v63;
        v15 = v60;
        v24 = v59;
        goto LABEL_28;
      }
    }
    v84 = _swiftEmptyArrayStorage;
    sub_1000591CC(0, v38, 0);
    v39 = v79;
    v40 = *(unsigned __int8 *)(v79 + 80);
    v73 = v37;
    v41 = v37 + ((v40 + 32) & ~v40);
    v82 = *(_QWORD *)(v79 + 72);
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 16);
    while (1)
    {
      v42(v8, v41, v4);
      v43 = v83;
      v42(v83, (uint64_t)v8, v4);
      v44 = (*(uint64_t (**)(char *, uint64_t))(v39 + 88))(v43, v4);
      if (v44 != v80)
      {
        if (v44 == v78)
        {
          v45 = 1;
          goto LABEL_13;
        }
        if (v44 == v77)
        {
          v45 = 2;
          goto LABEL_13;
        }
        (*(void (**)(char *, uint64_t))(v39 + 8))(v83, v4);
      }
      v45 = 0;
LABEL_13:
      (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v4);
      v46 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native(v84) & 1) == 0)
      {
        sub_1000591CC(0, v46[2] + 1, 1);
        v39 = v79;
        v46 = v84;
      }
      v48 = v46[2];
      v47 = v46[3];
      if (v48 >= v47 >> 1)
      {
        sub_1000591CC((char *)(v47 > 1), v48 + 1, 1);
        v39 = v79;
        v46 = v84;
      }
      v46[2] = v48 + 1;
      *((_BYTE *)v46 + v48 + 32) = v45;
      v30 = v81;
      v41 += v82;
      if (!--v38)
      {
        v33 = v65;
        v37 = v73;
        goto LABEL_21;
      }
    }
  }
  v27 = v64;
  v55 = v63;
LABEL_28:
  sub_1000135A0(v55, &qword_10010A828);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a1, v19);
  v56 = swift_bridgeObjectRelease(v62);
  (*(void (**)(char *, uint64_t, __n128))(v24 + 8))(v18, v15, v56);
LABEL_29:
  result = type metadata accessor for SportsWidgetSoccerClockViewModel(0);
  *(_QWORD *)&v27[*(int *)(result + 20)] = v26;
  return result;
}

uint64_t sub_10008263C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __n128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __n128 v48;
  __int128 v49;
  void *v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t result;
  uint64_t *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  void (*v90)(char *, unint64_t, uint64_t);
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD v105[7];
  char v106;
  __int128 v107;
  __n128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  char v114;
  _OWORD v115[3];
  char v116;

  v100 = a3;
  v7 = type metadata accessor for SportsActivityContentState(0);
  v98 = *(_QWORD *)(v7 - 8);
  v99 = v7;
  __chkstk_darwin(v7);
  v96 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for SportsActivityAttributes(0);
  v101 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v95 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008EF4(&qword_10010A818);
  __chkstk_darwin(v10);
  v92 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SportsActivityPlay(0);
  v93 = *(_QWORD *)(v12 - 8);
  v94 = v12;
  v13 = __chkstk_darwin(v12);
  v89 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v88 = (char *)&v87 - v15;
  v16 = sub_100008EF4(&qword_10010A800);
  __chkstk_darwin(v16);
  v18 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SportsActivityAttributes.Contender(0);
  v102 = *(_QWORD *)(v19 - 8);
  v103 = v19;
  __chkstk_darwin(v19);
  v21 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for SportsActivityContender(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Sport(0);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = SportsActivityAttributes.sport.getter(v26);
  v104 = a1;
  v30 = SportsActivityContentState.contenderA.getter(v29);
  v31 = a2;
  v32 = SportsActivityAttributes.contenders.getter(v30);
  if (*(_QWORD *)(v32 + 16))
  {
    v33 = v32;
    v34 = (*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
    v90 = *(void (**)(char *, unint64_t, uint64_t))(v102 + 16);
    v90(v21, v32 + v34, v103);
    v35 = swift_bridgeObjectRelease(v33);
    SportsActivityContentState.clock.getter(v35);
    v36 = sub_100083CB8((uint64_t)v28, (uint64_t)v24, (uint64_t)v21, 0, 0, (uint64_t)v18, 0, (uint64_t)v105);
    v37 = v105[5];
    *(_OWORD *)(a4 + 64) = v105[4];
    *(_OWORD *)(a4 + 80) = v37;
    *(_OWORD *)(a4 + 96) = v105[6];
    *(_BYTE *)(a4 + 112) = v106;
    v38 = v105[1];
    *(_OWORD *)a4 = v105[0];
    *(_OWORD *)(a4 + 16) = v38;
    v39 = v105[3];
    *(_OWORD *)(a4 + 32) = v105[2];
    *(_OWORD *)(a4 + 48) = v39;
    v40 = SportsActivityAttributes.sport.getter(v36);
    v41 = SportsActivityContentState.contenderB.getter(v40);
    v91 = a2;
    v42 = SportsActivityAttributes.contenders.getter(v41);
    if (*(_QWORD *)(v42 + 16) >= 2uLL)
    {
      v43 = v42;
      v90(v21, v42 + v34 + *(_QWORD *)(v102 + 72), v103);
      v44 = swift_bridgeObjectRelease(v43);
      v45 = v104;
      SportsActivityContentState.clock.getter(v44);
      sub_100083CB8((uint64_t)v28, (uint64_t)v24, (uint64_t)v21, 1, 0, (uint64_t)v18, 0, (uint64_t)&v107);
      v46 = v110;
      *(_OWORD *)(a4 + 184) = v111;
      v47 = v113;
      *(_OWORD *)(a4 + 200) = v112;
      *(_OWORD *)(a4 + 216) = v47;
      *(_OWORD *)(a4 + 120) = v107;
      v48 = v108;
      v49 = v109;
      *(__n128 *)(a4 + 136) = v108;
      *(_OWORD *)(a4 + 152) = v49;
      *(_BYTE *)(a4 + 232) = v114;
      *(_OWORD *)(a4 + 168) = v46;
      SportsActivityContentState.clock.getter(v48);
      v31 = v45;
      if (qword_100105E40 == -1)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  swift_once(&qword_100105E40, sub_1000808F0);
LABEL_4:
  v50 = (void *)qword_10010A7E8;
  v51 = (int *)type metadata accessor for SportsWidgetContentViewModel(0);
  v52 = sub_1000810D0((uint64_t)v18, (char *)v50, a4 + v51[6]);
  v53 = (uint64_t)v92;
  SportsActivityContentState.play.getter(v52);
  v55 = v93;
  v54 = v94;
  v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v53, 1, v94);
  v57 = v91;
  if (v56 == 1)
  {
    v58 = sub_1000135A0(v53, &qword_10010A818);
    v59 = static Color.clear.getter(v58);
    v60 = static Color.clear.getter(v59);
    v61 = a4 + v51[8];
    *(_QWORD *)v61 = 0;
    *(_QWORD *)(v61 + 8) = 0xE000000000000000;
    *(_BYTE *)(v61 + 16) = 0;
    *(_QWORD *)(v61 + 24) = v59;
    *(_BYTE *)(v61 + 32) = 0;
    *(_QWORD *)(v61 + 40) = v60;
    *(_BYTE *)(v61 + 48) = 0;
  }
  else
  {
    v62 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v88, v53, v54);
    v63 = (uint64_t)v89;
    v64 = (*(uint64_t (**)(char *, char *, uint64_t))(v55 + 16))(v89, v62, v54);
    v65 = SportsActivityAttributes.contenders.getter(v64);
    sub_100083F70(v63, v65, (uint64_t)v115);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v62, v54);
    v66 = a4 + v51[8];
    v67 = v115[1];
    *(_OWORD *)v66 = v115[0];
    *(_OWORD *)(v66 + 16) = v67;
    *(_OWORD *)(v66 + 32) = v115[2];
    *(_BYTE *)(v66 + 48) = v116;
  }
  v68 = (uint64_t)v95;
  v69 = v97;
  (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v95, v57, v97);
  v71 = v98;
  v70 = v99;
  v72 = (uint64_t)v96;
  (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v96, v31, v99);
  v73 = sub_1000842E4(v68, v72);
  v74 = (_QWORD *)(a4 + v51[7]);
  *v74 = v73;
  v74[1] = v75;
  v74[2] = v76;
  v74[3] = v77;
  *(_BYTE *)(a4 + v51[9]) = SportsActivityContentState.isClockVisible.getter() & 1;
  *(_BYTE *)(a4 + v51[10]) = SportsActivityContentState.isEventInfoVisible.getter() & 1;
  *(_BYTE *)(a4 + v51[11]) = SportsActivityContentState.isScoreVisible.getter() & 1;
  *(_BYTE *)(a4 + v51[12]) = SportsActivityContentState.shouldDisplayPlayByPlay.getter() & 1;
  v78 = SportsActivityAttributes.eventURL.getter();
  v80 = v79;
  URL.init(string:)(v78);
  v81 = swift_bridgeObjectRelease(v80);
  type metadata accessor for SportsVoiceOverUtility(0, v81);
  v82 = static SportsVoiceOverUtility.widgetScoreVoiceOverText(state:attributes:)(v31, v57);
  v84 = v83;
  (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v57, v69);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v31, v70);
  v86 = (uint64_t *)(a4 + v51[15]);
  *v86 = v82;
  v86[1] = v84;
  *(_BYTE *)(a4 + v51[14]) = v100 & 1;
  return result;
}

uint64_t sub_100082C74@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(char *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  __int128 v45;
  __int128 v46;
  __n128 v47;
  __int128 v48;
  void *v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  char *v79;
  char *v80;
  void (*v81)(char *, uint64_t, uint64_t, uint64_t (*)(char *, uint64_t, uint64_t), __n128);
  unint64_t v82;
  void (*v83)(char *, unint64_t, uint64_t);
  uint64_t (*v84)(char *, uint64_t, uint64_t);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD v101[7];
  char v102;
  __int128 v103;
  __n128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char v110;
  _OWORD v111[3];
  char v112;

  v96 = a4;
  v100 = a3;
  v8 = type metadata accessor for SportsActivityContentState(0);
  v94 = *(_QWORD *)(v8 - 8);
  v95 = v8;
  __chkstk_darwin(v8);
  v91 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SportsActivityAttributes(0);
  v92 = *(_QWORD *)(v10 - 8);
  v93 = v10;
  __chkstk_darwin(v10);
  v90 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008EF4(&qword_10010A818);
  __chkstk_darwin(v12);
  v86 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SportsActivityPlay(0);
  v87 = *(_QWORD *)(v14 - 8);
  v88 = v14;
  v15 = __chkstk_darwin(v14);
  v80 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v79 = (char *)&v79 - v17;
  v18 = sub_100008EF4(&qword_10010A800);
  __chkstk_darwin(v18);
  v20 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for SportsActivityAttributes.Contender(0);
  v97 = *(_QWORD *)(v21 - 8);
  v98 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for SportsActivityContender(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Sport(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v79 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = v30;
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v99 = a1;
  v32 = v31(v29, a1, v27);
  v33 = SportsActivityContentState.contenderA.getter(v32);
  v34 = SportsActivityAttributes.contenders.getter(v33);
  if (*(_QWORD *)(v34 + 16))
  {
    v35 = v34;
    v82 = (*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
    v83 = *(void (**)(char *, unint64_t, uint64_t))(v97 + 16);
    v83(v23, v34 + v82, v98);
    swift_bridgeObjectRelease(v35);
    v36 = v31;
    v31 = (uint64_t (*)(char *, uint64_t, uint64_t))type metadata accessor for SportsActivityClock(0);
    v81 = *(void (**)(char *, uint64_t, uint64_t, uint64_t (*)(char *, uint64_t, uint64_t), __n128))(*((_QWORD *)v31 - 1) + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t (*)(char *, uint64_t, uint64_t)))v81)(v20, 1, 1, v31);
    sub_100083CB8((uint64_t)v29, (uint64_t)v26, (uint64_t)v23, 0, 0, (uint64_t)v20, 0, (uint64_t)v101);
    v37 = v101[5];
    *(_OWORD *)(a5 + 64) = v101[4];
    *(_OWORD *)(a5 + 80) = v37;
    *(_OWORD *)(a5 + 96) = v101[6];
    *(_BYTE *)(a5 + 112) = v102;
    v38 = v101[1];
    *(_OWORD *)a5 = v101[0];
    *(_OWORD *)(a5 + 16) = v38;
    v39 = v101[3];
    *(_OWORD *)(a5 + 32) = v101[2];
    *(_OWORD *)(a5 + 48) = v39;
    v85 = v27;
    v40 = v36(v29, v99, v27);
    v84 = a2;
    v41 = SportsActivityContentState.contenderB.getter(v40);
    v42 = SportsActivityAttributes.contenders.getter(v41);
    if (*(_QWORD *)(v42 + 16) >= 2uLL)
    {
      v43 = v42;
      v83(v23, v42 + v82 + *(_QWORD *)(v97 + 72), v98);
      v44 = swift_bridgeObjectRelease(v43);
      v81(v20, 1, 1, v31, v44);
      sub_100083CB8((uint64_t)v29, (uint64_t)v26, (uint64_t)v23, 0, 0, (uint64_t)v20, 0, (uint64_t)&v103);
      v45 = v106;
      *(_OWORD *)(a5 + 184) = v107;
      v46 = v109;
      *(_OWORD *)(a5 + 200) = v108;
      *(_OWORD *)(a5 + 216) = v46;
      *(_OWORD *)(a5 + 120) = v103;
      v47 = v104;
      v48 = v105;
      *(__n128 *)(a5 + 136) = v104;
      *(_OWORD *)(a5 + 152) = v48;
      *(_BYTE *)(a5 + 232) = v110;
      *(_OWORD *)(a5 + 168) = v45;
      v31 = v84;
      SportsActivityContentState.clock.getter(v47);
      if (qword_100105E40 == -1)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  swift_once(&qword_100105E40, sub_1000808F0);
LABEL_4:
  v49 = (void *)qword_10010A7E8;
  v50 = (int *)type metadata accessor for SportsWidgetDynamicIslandExpandedViewModel(0);
  v51 = sub_1000810D0((uint64_t)v20, (char *)v49, a5 + v50[6]);
  v52 = (uint64_t)v86;
  SportsActivityContentState.play.getter(v51);
  v54 = v87;
  v53 = v88;
  v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v52, 1, v88);
  v56 = v100;
  if (v55 == 1)
  {
    v57 = sub_1000135A0(v52, &qword_10010A818);
    v58 = static Color.clear.getter(v57);
    v59 = static Color.clear.getter(v58);
    v60 = a5 + v50[7];
    *(_QWORD *)v60 = 0;
    *(_QWORD *)(v60 + 8) = 0xE000000000000000;
    *(_BYTE *)(v60 + 16) = 0;
    *(_QWORD *)(v60 + 24) = v58;
    *(_BYTE *)(v60 + 32) = 0;
    *(_QWORD *)(v60 + 40) = v59;
    *(_BYTE *)(v60 + 48) = 0;
  }
  else
  {
    v61 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v79, v52, v53);
    v62 = (uint64_t)v80;
    v63 = (*(uint64_t (**)(char *, char *, uint64_t))(v54 + 16))(v80, v61, v53);
    v64 = SportsActivityAttributes.contenders.getter(v63);
    sub_100083F70(v62, v64, (uint64_t)v111);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v61, v53);
    v65 = a5 + v50[7];
    v66 = v111[1];
    *(_OWORD *)v65 = v111[0];
    *(_OWORD *)(v65 + 16) = v66;
    *(_OWORD *)(v65 + 32) = v111[2];
    *(_BYTE *)(v65 + 48) = v112;
  }
  v68 = v92;
  v67 = v93;
  v69 = (uint64_t)v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v90, v56, v93);
  v71 = v94;
  v70 = v95;
  v72 = (uint64_t)v91;
  (*(void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v94 + 16))(v91, v31, v95);
  v73 = sub_1000842E4(v69, v72);
  v74 = (_QWORD *)(a5 + v50[8]);
  *v74 = v73;
  v74[1] = v75;
  v74[2] = v76;
  v74[3] = v77;
  *(_BYTE *)(a5 + v50[9]) = SportsActivityContentState.isClockVisible.getter() & 1;
  *(_BYTE *)(a5 + v50[10]) = SportsActivityContentState.isEventInfoVisible.getter() & 1;
  LOBYTE(v72) = SportsActivityContentState.isScoreVisible.getter();
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v100, v67);
  (*(void (**)(uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v71 + 8))(v31, v70);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 8))(v99, v85);
  *(_BYTE *)(a5 + v50[11]) = v72 & 1;
  *(_BYTE *)(a5 + v50[12]) = v96 & 1;
  return result;
}

uint64_t sub_1000832AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  char v36;
  char v37;
  __n128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  char v51;
  __n128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __n128 v57;
  uint64_t *v58;
  id v59;
  __n128 v60;
  int *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, char *);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(char *, uint64_t, uint64_t);
  _QWORD *v91;
  __n128 v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  uint64_t *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(_QWORD, uint64_t, uint64_t);
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  int v112;
  uint64_t (*v113)(char *, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  char *v121;
  _OWORD v122[7];
  char v123;
  _OWORD v124[7];
  char v125;
  _OWORD v126[3];
  char v127;

  v112 = a4;
  v9 = type metadata accessor for SportsActivityContentState(0);
  v116 = *(_QWORD *)(v9 - 8);
  v117 = v9;
  __chkstk_darwin(v9);
  v110 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SportsActivityAttributes(0);
  v114 = *(_QWORD *)(v11 - 8);
  v115 = v11;
  __chkstk_darwin(v11);
  v109 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008EF4(&qword_10010A818);
  __chkstk_darwin(v13);
  v106 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SportsActivityPlay(0);
  v107 = *(_QWORD *)(v15 - 8);
  v108 = (char *)v15;
  v16 = __chkstk_darwin(v15);
  v101 = (char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v100 = (char *)&v99 - v18;
  v19 = sub_100008EF4(&qword_10010A800);
  __chkstk_darwin(v19);
  v121 = (char *)&v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for SportsActivityAttributes.Contender(0);
  *(_QWORD *)&v120 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  *((_QWORD *)&v120 + 1) = (char *)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for SportsActivityContender(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Sport(0);
  __chkstk_darwin(v26);
  v28 = (char *)&v99 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = v29;
  v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v30 = v113(v28, a1, v26);
  v31 = SportsActivityContentState.contenderA.getter(v30);
  v32 = SportsActivityAttributes.contenders.getter(v31);
  if (!*(_QWORD *)(v32 + 16))
  {
    __break(1u);
    goto LABEL_20;
  }
  v33 = v32;
  v34 = *(unsigned __int8 *)(v120 + 80);
  v118 = a3;
  v103 = (v34 + 32) & ~v34;
  a3 = *((_QWORD *)&v120 + 1);
  v104 = *(void (**)(_QWORD, uint64_t, uint64_t))(v120 + 16);
  v105 = v21;
  v104(*((_QWORD *)&v120 + 1), v32 + v103, v21);
  v35 = swift_bridgeObjectRelease(v33);
  v36 = ((uint64_t (*)(__n128))SportsActivityContentState.shouldShowWatchAlertUI.getter)(v35);
  v119 = a1;
  v37 = v36;
  v21 = (uint64_t)v121;
  SportsActivityContentState.clock.getter(v38);
  sub_100083CB8((uint64_t)v28, (uint64_t)v25, a3, 0, v37 & 1, v21, 1, (uint64_t)v122);
  v39 = v122[5];
  v40 = v122[6];
  v41 = v122[3];
  *(_OWORD *)(a5 + 64) = v122[4];
  *(_OWORD *)(a5 + 80) = v39;
  *(_OWORD *)(a5 + 96) = v40;
  v42 = v122[1];
  v43 = v122[2];
  *(_OWORD *)a5 = v122[0];
  *(_OWORD *)(a5 + 16) = v42;
  v44 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)&v122[0] + 1);
  a1 = *(_QWORD *)&v122[0];
  *(_BYTE *)(a5 + 112) = v123;
  *(_OWORD *)(a5 + 32) = v43;
  *(_OWORD *)(a5 + 48) = v41;
  v113(v28, v119, v26);
  v113 = v44;
  v45 = swift_bridgeObjectRetain(v44);
  v46 = SportsActivityContentState.contenderB.getter(v45);
  v47 = SportsActivityAttributes.contenders.getter(v46);
  if (*(_QWORD *)(v47 + 16) < 2uLL)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v48 = v47;
  v99 = a1;
  v102 = v26;
  v49 = *((_QWORD *)&v120 + 1);
  v104(*((_QWORD *)&v120 + 1), v47 + v103 + *(_QWORD *)(v120 + 72), v105);
  v50 = swift_bridgeObjectRelease(v48);
  v51 = ((uint64_t (*)(__n128))SportsActivityContentState.shouldShowWatchAlertUI.getter)(v50);
  v21 = (uint64_t)v121;
  SportsActivityContentState.clock.getter(v52);
  sub_100083CB8((uint64_t)v28, (uint64_t)v25, v49, 0, v51 & 1, v21, 1, (uint64_t)v124);
  v53 = v124[3];
  *(_OWORD *)(a5 + 184) = v124[4];
  v54 = v124[6];
  *(_OWORD *)(a5 + 200) = v124[5];
  *(_OWORD *)(a5 + 216) = v54;
  *(_OWORD *)(a5 + 120) = v124[0];
  v55 = v124[2];
  *(_OWORD *)(a5 + 136) = v124[1];
  *(_OWORD *)(a5 + 152) = v55;
  v56 = *((_QWORD *)&v124[0] + 1);
  v120 = v124[0];
  *(_BYTE *)(a5 + 232) = v125;
  *(_OWORD *)(a5 + 168) = v53;
  swift_bridgeObjectRetain(v56);
  if ((((uint64_t (*)(__n128))SportsActivityContentState.shouldShowWatchAlertUI.getter)(v57) & 1) != 0)
  {
    a3 = v118;
    a1 = v107;
    v28 = v108;
    if (qword_100105E48 == -1)
    {
LABEL_5:
      v58 = &qword_10010A7F0;
      goto LABEL_9;
    }
LABEL_21:
    swift_once(&qword_100105E48, sub_100080948);
    goto LABEL_5;
  }
  a3 = v118;
  a1 = v107;
  v28 = v108;
  if (qword_100105E40 != -1)
    swift_once(&qword_100105E40, sub_1000808F0);
  v58 = &qword_10010A7E8;
LABEL_9:
  v59 = (id)*v58;
  SportsActivityContentState.clock.getter(v60);
  v61 = (int *)type metadata accessor for SportsWatchWidgetViewModel(0);
  v62 = a5 + v61[6];
  v63 = (char *)v59;
  v64 = sub_1000810D0(v21, v63, v62);
  v65 = (uint64_t)v106;
  SportsActivityContentState.play.getter(v64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(a1 + 48))(v65, 1, v28) == 1)
  {
    v66 = sub_1000135A0(v65, &qword_10010A818);
    v67 = static Color.clear.getter(v66);
    v68 = static Color.clear.getter(v67);
    v69 = a5 + v61[8];
    *(_QWORD *)v69 = 0;
    *(_QWORD *)(v69 + 8) = 0xE000000000000000;
    *(_BYTE *)(v69 + 16) = 0;
    *(_QWORD *)(v69 + 24) = v67;
    *(_BYTE *)(v69 + 32) = 0;
    *(_QWORD *)(v69 + 40) = v68;
    *(_BYTE *)(v69 + 48) = 0;
  }
  else
  {
    v70 = *(void (**)(char *, uint64_t, char *))(a1 + 32);
    v121 = v63;
    v71 = v100;
    v70(v100, v65, v28);
    v72 = (uint64_t)v101;
    v73 = (*(uint64_t (**)(char *, char *, char *))(a1 + 16))(v101, v71, v28);
    v74 = SportsActivityAttributes.contenders.getter(v73);
    sub_100083F70(v72, v74, (uint64_t)v126);
    v75 = v71;
    v63 = v121;
    (*(void (**)(char *, char *))(a1 + 8))(v75, v28);
    v76 = a5 + v61[8];
    v77 = v126[1];
    *(_OWORD *)v76 = v126[0];
    *(_OWORD *)(v76 + 16) = v77;
    *(_OWORD *)(v76 + 32) = v126[2];
    *(_BYTE *)(v76 + 48) = v127;
  }
  v78 = v123;
  v79 = (uint64_t)v109;
  (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v109, a3, v115);
  v80 = (uint64_t)v110;
  (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v110, a2, v117);
  v81 = sub_1000842E4(v79, v80);
  v82 = (_QWORD *)(a5 + v61[7]);
  *v82 = v81;
  v82[1] = v83;
  v82[2] = v84;
  v82[3] = v85;
  *(_BYTE *)(a5 + v61[9]) = SportsActivityContentState.isClockVisible.getter() & 1;
  *(_BYTE *)(a5 + v61[10]) = SportsActivityContentState.isEventInfoVisible.getter() & 1;
  *(_BYTE *)(a5 + v61[11]) = SportsActivityContentState.isScoreVisible.getter() & 1;
  if ((v78 & 1) != 0)
  {
    v86 = swift_bridgeObjectRelease(*((_QWORD *)&v120 + 1));
    v89 = v99;
    v88 = v119;
    v90 = v113;
LABEL_17:
    v91 = (_QWORD *)(a5 + v61[12]);
    *v91 = v89;
    v91[1] = v90;
    goto LABEL_18;
  }
  v86 = swift_bridgeObjectRelease(v113);
  if ((v125 & 1) != 0)
  {
    v90 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)&v120 + 1);
    v89 = v120;
    v88 = v119;
    goto LABEL_17;
  }
  v86 = swift_bridgeObjectRelease(*((_QWORD *)&v120 + 1));
  v87 = (_QWORD *)(a5 + v61[12]);
  *v87 = 0;
  v87[1] = 0;
  v88 = v119;
LABEL_18:
  *(_BYTE *)(a5 + v61[13]) = v112 & 1;
  v92.n128_f64[0] = SportsActivityContentState.shouldShowWatchAlertUI.getter(v86);
  *(_BYTE *)(a5 + v61[14]) = v93 & 1;
  type metadata accessor for SportsVoiceOverUtility(0, v92);
  v94 = static SportsVoiceOverUtility.widgetScoreVoiceOverText(state:attributes:)(a2, a3);
  v96 = v95;

  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(a3, v115);
  (*(void (**)(uint64_t, uint64_t))(v116 + 8))(a2, v117);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v111 + 8))(v88, v102);
  v98 = (uint64_t *)(a5 + v61[15]);
  *v98 = v94;
  v98[1] = v96;
  return result;
}

uint64_t sub_1000839F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, unsigned __int8 a11, unsigned __int8 a12)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;

  v66 = a8;
  v61 = a6;
  v62 = a7;
  v57 = a5;
  v58 = a12;
  v65 = a11;
  v64 = a10;
  v17 = type metadata accessor for SportsActivityAttributes.Contender.LogoFilePaths(0);
  v59 = *(_QWORD *)(v17 - 8);
  v60 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SportingEventCompetitorScoreStatisticType.StatisticName(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a2;
  v25 = a2;
  v26 = a4;
  v27 = sub_100080A48(v25, a3 & 1, a4);
  v63 = a1;
  if (v28)
  {
    v29 = v58;
    v30 = v57;
  }
  else
  {
    v31 = SportsActivityContender.scoreEntries.getter(v27);
    Sport.scoreStatisticName.getter();
    if (*(_QWORD *)(v31 + 16))
    {
      v32 = sub_10002D880((uint64_t)v23);
      v30 = v57;
      if ((v33 & 1) != 0)
        v34 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32);
      else
        v34 = 0;
    }
    else
    {
      v34 = 0;
      v30 = v57;
    }
    v35 = swift_bridgeObjectRelease(v31);
    (*(void (**)(char *, uint64_t, __n128))(v21 + 8))(v23, v20, v35);
    v67 = v34;
    v27 = (id)dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v29 = v58;
  }
  a9[6] = (uint64_t)v27;
  a9[7] = v28;
  v36 = SportsActivityContender.canonicalId.getter(v27);
  v38 = v37;
  v39 = SportsActivityAttributes.Contender.logoFilePaths.getter();
  v40 = SportsActivityAttributes.Contender.LogoFilePaths.defaultSize.getter(v39);
  v42 = v41;
  (*(void (**)(char *, uint64_t))(v59 + 8))(v19, v60);
  *a9 = v36;
  a9[1] = v38;
  a9[2] = 0;
  a9[3] = 0;
  a9[4] = v40;
  a9[5] = v42;
  v43 = (int *)type metadata accessor for SportsWidgetDynamicIslandCompactViewModel(0);
  v44 = v62;
  URL.init(string:)(v61);
  v45 = swift_bridgeObjectRelease(v44);
  v46 = SportsActivityAttributes.Contender.abbreviation.getter(v45);
  v48 = v47;
  v49 = type metadata accessor for SportsActivityAttributes.Contender(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v30, v49);
  v50 = type metadata accessor for SportsActivityContender(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v26, v50);
  sub_1000135A0(v24, &qword_10010A800);
  v51 = type metadata accessor for Sport(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v63, v51);
  v53 = (uint64_t *)((char *)a9 + v43[7]);
  *v53 = v46;
  v53[1] = v48;
  v54 = (uint64_t *)((char *)a9 + v43[8]);
  v55 = v64;
  *v54 = v66;
  v54[1] = v55;
  *((_BYTE *)a9 + v43[9]) = v65 & 1;
  *((_BYTE *)a9 + v43[10]) = v29 & 1;
  return result;
}

uint64_t sub_100083CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;

  LODWORD(v61) = a7;
  LODWORD(v60) = a4;
  v65 = a1;
  v13 = type metadata accessor for SportsActivityAttributes.Contender.LogoFilePaths(0);
  v57 = *(_QWORD *)(v13 - 8);
  v58 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SportingEventCompetitorScoreStatisticType.StatisticName(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (id)SportsActivityContender.canonicalId.getter(v18);
  v62 = v22;
  v63 = v21;
  v64 = a6;
  if ((a5 & 1) != 0 && (v21 = sub_100080A48(a6, v60 & 1, a2), v23))
  {
    v24 = v23;
    v59 = (uint64_t)v21;
  }
  else
  {
    v25 = SportsActivityContender.scoreEntries.getter(v21);
    Sport.scoreStatisticName.getter();
    if (*(_QWORD *)(v25 + 16) && (v26 = sub_10002D880((uint64_t)v20), (v27 & 1) != 0))
      v28 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v26);
    else
      v28 = 0;
    v29 = swift_bridgeObjectRelease(v25);
    (*(void (**)(char *, uint64_t, __n128))(v17 + 8))(v20, v16, v29);
    v66 = v28;
    v59 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v24 = v30;
  }
  v31 = v61;
  v32 = SportsActivityAttributes.Contender.abbreviation.getter();
  v34 = v33;
  v35 = SportsActivityAttributes.Contender.logoFilePaths.getter();
  v60 = v34;
  v61 = v32;
  if ((v31 & 1) != 0)
    v36 = SportsActivityAttributes.Contender.LogoFilePaths.smallSize.getter(v35);
  else
    v36 = SportsActivityAttributes.Contender.LogoFilePaths.defaultSize.getter(v35);
  v38 = v36;
  v39 = v37;
  v40 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v15, v58);
  v41 = SportsActivityContender.canonicalId.getter(v40);
  v43 = v42;
  v67 = SportsActivityContender.isWinnerIndicatorVisible.getter() & 1;
  v44 = SportsActivityAttributes.Contender.colorHex.getter();
  v46 = Color.init(hex:)(v44, v45);
  if (!v46)
    v46 = static Color.clear.getter();
  v47 = v46;
  v48 = SportsActivityAttributes.Contender.isHome.getter();
  sub_1000135A0(v64, &qword_10010A800);
  v49 = type metadata accessor for SportsActivityAttributes.Contender(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(a3, v49);
  v50 = type metadata accessor for SportsActivityContender(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(a2, v50);
  v51 = type metadata accessor for Sport(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v65, v51);
  v53 = v67;
  v54 = v62;
  *(_QWORD *)a8 = v63;
  *(_QWORD *)(a8 + 8) = v54;
  *(_QWORD *)(a8 + 16) = v59;
  *(_QWORD *)(a8 + 24) = v24;
  v55 = v60;
  *(_QWORD *)(a8 + 32) = v61;
  *(_QWORD *)(a8 + 40) = v55;
  *(_QWORD *)(a8 + 48) = v41;
  *(_QWORD *)(a8 + 56) = v43;
  *(_QWORD *)(a8 + 64) = 0;
  *(_QWORD *)(a8 + 72) = 0;
  *(_QWORD *)(a8 + 80) = v38;
  *(_QWORD *)(a8 + 88) = v39;
  *(_BYTE *)(a8 + 96) = v48 & 1;
  *(_QWORD *)(a8 + 104) = v47;
  *(_BYTE *)(a8 + 112) = v53;
  return result;
}

uint64_t sub_100083F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40;
  char v41;

  v6 = type metadata accessor for SportsActivityAttributes.Contender(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = SportsActivityPlay.text.getter(v8);
  v13 = v12;
  v39 = a1;
  result = SportsActivityPlay.isLeftBarVisible.getter();
  if (!*(_QWORD *)(a2 + 16))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  v38 = result;
  v36 = v13;
  v37 = v11;
  v15 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v17 = v16(v10, v15, v6);
  v18 = SportsActivityAttributes.Contender.colorHex.getter(v17);
  v20 = v19;
  v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v10, v6);
  v22 = Color.init(hex:)(v18, v20);
  if (!v22)
    v22 = static Color.gray.getter();
  v23 = v22;
  v41 = v38 & 1;
  result = SportsActivityPlay.isRightBarVisible.getter();
  if (*(_QWORD *)(a2 + 16) < 2uLL)
    goto LABEL_9;
  v38 = result;
  v16(v10, v15 + *(_QWORD *)(v7 + 72), v6);
  swift_bridgeObjectRelease(a2);
  v25 = SportsActivityAttributes.Contender.colorHex.getter(v24);
  v27 = v26;
  v21(v10, v6);
  v28 = Color.init(hex:)(v25, v27);
  if (!v28)
    v28 = static Color.gray.getter();
  v29 = v28;
  v30 = v36;
  v40 = v38 & 1;
  v31 = v39;
  v32 = SportsActivityPlay.isPlay.getter();
  v33 = type metadata accessor for SportsActivityPlay(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v31, v33);
  v34 = v41;
  v35 = v40;
  *(_QWORD *)a3 = v37;
  *(_QWORD *)(a3 + 8) = v30;
  *(_BYTE *)(a3 + 16) = v34;
  *(_QWORD *)(a3 + 24) = v23;
  *(_BYTE *)(a3 + 32) = v35;
  *(_QWORD *)(a3 + 40) = v29;
  *(_BYTE *)(a3 + 48) = v32 & 1;
  return result;
}

uint64_t sub_100084154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t active;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v4 = type metadata accessor for RunningClockComponentsFormatter.FormattedComponents(0);
  v27 = *(_QWORD *)(v4 - 8);
  v28 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RunningClockComponentsFormatter.DataSource(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = SportsActivityBaseballClock.ballsAndStrikes.getter(v9);
  v25 = v13;
  v26 = v12;
  SportsActivityBaseballClock.runningClockDataSource.getter();
  if (qword_100105E40 != -1)
    swift_once(&qword_100105E40, sub_1000808F0);
  v14 = RunningClockComponentsFormatter.formattedComponents(dataSource:)(v11);
  v15 = RunningClockComponentsFormatter.FormattedComponents.clock.getter(v14);
  v17 = v16;
  v29 = SportsActivityBaseballClock.isActiveBaseVisible.getter() & 1;
  active = SportsActivityBaseballClock.basesActiveStates.getter();
  v19 = SportsActivityBaseballClock.outsActiveStates.getter();
  v20 = type metadata accessor for SportsActivityBaseballClock(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a1, v20);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v28);
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v22 = v29;
  *(_QWORD *)a2 = active;
  *(_QWORD *)(a2 + 8) = v19;
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v17;
  v23 = v25;
  *(_QWORD *)(a2 + 32) = v26;
  *(_QWORD *)(a2 + 40) = v23;
  *(_BYTE *)(a2 + 48) = v22;
  return result;
}

id sub_1000842E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  id result;
  void *v25;
  NSString v26;
  id v27;
  uint64_t v28;
  int v29;
  void *v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *v38;
  NSString v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  Class isa;
  id v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = sub_100008EF4(&qword_100105F48);
  __chkstk_darwin(v4);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SportsActivityAttributes.EventInfo(0);
  v59 = *(_QWORD *)(v7 - 8);
  v60 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v57 = *(_QWORD *)(v10 - 8);
  v58 = v10;
  __chkstk_darwin(v10);
  v56 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Sport(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SportsActivityContentState.EventInfoState(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = a2;
  SportsActivityContentState.eventInfoState.getter(v18);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v20, v16);
  if (v21 != enum case for SportsActivityContentState.EventInfoState.preGame(_:))
  {
    if (v21 != enum case for SportsActivityContentState.EventInfoState.startingSoon(_:))
    {
      v35 = type metadata accessor for SportsActivityContentState(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v61, v35);
      v36 = type metadata accessor for SportsActivityAttributes(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(a1, v36);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
      return 0;
    }
    result = objc_msgSend((id)objc_opt_self(VUILocalizationManager), "sharedInstance");
    if (result)
    {
      v25 = result;
      v26 = String._bridgeToObjectiveC()();
      v27 = objc_msgSend(v25, "localizedStringForKey:", v26);

      if (v27)
      {
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);

      }
      else
      {
        v28 = 0;
      }
      v41 = type metadata accessor for SportsActivityContentState(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v61, v41);
      v42 = type metadata accessor for SportsActivityAttributes(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(a1, v42);
      return (id)v28;
    }
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  SportsActivityAttributes.sport.getter();
  v22 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v12);
  v23 = a1;
  if (v22 == enum case for Sport.baseball(_:))
  {
    result = objc_msgSend((id)objc_opt_self(VUILocalizationManager), "sharedInstance");
    if (result)
    {
LABEL_11:
      v30 = result;
      v31 = String._bridgeToObjectiveC()();
      v32 = objc_msgSend(v30, "localizedStringForKey:", v31);

      v34 = v57;
      v33 = v58;
      if (v32)
      {
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);

        goto LABEL_26;
      }
      goto LABEL_18;
    }
    __break(1u);
    goto LABEL_33;
  }
  v29 = v22;
  if (v22 == enum case for Sport.basketball(_:))
  {
    result = objc_msgSend((id)objc_opt_self(VUILocalizationManager), "sharedInstance");
    if (result)
      goto LABEL_11;
    goto LABEL_34;
  }
  v37 = enum case for Sport.soccer(_:);
  result = objc_msgSend((id)objc_opt_self(VUILocalizationManager), "sharedInstance");
  v38 = result;
  if (v29 == v37)
  {
    if (result)
    {
      v39 = String._bridgeToObjectiveC()();
      v40 = objc_msgSend(v38, "localizedStringForKey:", v39);

      v23 = a1;
      v34 = v57;
      v33 = v58;
      if (v40)
      {
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);

        goto LABEL_26;
      }
LABEL_18:
      v28 = 0;
LABEL_26:
      v46 = v59;
      v45 = v60;
      v47 = SportsActivityAttributes.eventInfo.getter();
      SportsActivityAttributes.EventInfo.startDate.getter(v47);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v45);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v6, 1, v33) == 1)
      {
        sub_1000135A0((uint64_t)v6, &qword_100105F48);
        v48 = type metadata accessor for SportsActivityContentState(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v61, v48);
        v49 = type metadata accessor for SportsActivityAttributes(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v23, v49);
      }
      else
      {
        v50 = v56;
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v56, v6, v33);
        if (qword_100105E50 != -1)
          swift_once(&qword_100105E50, sub_1000809E8);
        v51 = (void *)qword_10010A7F8;
        isa = Date._bridgeToObjectiveC()().super.isa;
        v53 = objc_msgSend(v51, "stringFromDate:", isa);

        static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
        v54 = type metadata accessor for SportsActivityContentState(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v61, v54);
        v55 = type metadata accessor for SportsActivityAttributes(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v23, v55);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v50, v33);
      }
      return (id)v28;
    }
    goto LABEL_35;
  }
  if (result)
  {
    v43 = String._bridgeToObjectiveC()();
    v44 = objc_msgSend(v38, "localizedStringForKey:", v43);

    v23 = a1;
    if (v44)
    {
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);

    }
    else
    {
      v28 = 0;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v34 = v57;
    v33 = v58;
    goto LABEL_26;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1000849E4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, char *, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t (*v26)(uint64_t, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  __n128 v55;
  uint64_t (*v56)(char *, uint64_t, __n128);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  __n128 v67;
  __n128 v68;
  double v69;
  double v70;
  double v71;
  double v72;
  uint64_t (*v73)(uint64_t, char *, uint64_t);
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, unint64_t, uint64_t);
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v96;
  uint64_t v97;
  void (*v98)(char *, unint64_t, uint64_t);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t (*v120)(uint64_t, char *, uint64_t);
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  _BYTE v131[7];
  _BYTE v132[7];
  _BYTE v133[7];
  _BYTE v134[7];
  char v135;
  char v136;
  char v137;
  char v138;
  _QWORD v139[12];
  char v140;
  uint64_t v141;
  char v142;
  _QWORD v143[12];
  char v144;
  char *v145;
  char v146;

  v130 = a1;
  v124 = type metadata accessor for SportingEventCompetitorScoreStatisticType.StatisticName(0);
  v119 = *(_QWORD *)(v124 - 8);
  v5 = __chkstk_darwin(v124);
  v123 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v122 = (char *)&v92 - v7;
  v8 = sub_100008EF4(&qword_10010A800);
  __chkstk_darwin(v8);
  v129 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for SportsActivityAttributes.Contender(0);
  v10 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v128 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for SportsActivityContender(0);
  v117 = *(_QWORD *)(v121 - 8);
  v12 = __chkstk_darwin(v121);
  v118 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v116 = (char *)&v92 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v92 - v16;
  v18 = type metadata accessor for Sport(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v92 - v24;
  SportsActivityAttributes.sport.getter(v23);
  v26 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 16);
  v125 = v22;
  v120 = v26;
  v27 = v26((uint64_t)v22, v25, v18);
  v126 = v17;
  v28 = SportsActivityContentState.contenderA.getter(v27);
  result = SportsActivityAttributes.contenders.getter(v28);
  if (!*(_QWORD *)(result + 16))
  {
    __break(1u);
    goto LABEL_26;
  }
  v30 = result;
  v114 = v19;
  v96 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v100 = v10;
  v31 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
  v32 = (uint64_t)v128;
  v98 = v31;
  v31(v128, result + v96, v127);
  swift_bridgeObjectRelease(v30);
  v33 = type metadata accessor for SportsActivityClock(0);
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v33 - 8) + 56);
  v35 = (uint64_t)v129;
  v97 = v33;
  v95 = v34;
  ((void (*)(char *, uint64_t, uint64_t))v34)(v129, 1, 1);
  v36 = (uint64_t)v125;
  sub_100083CB8((uint64_t)v125, (uint64_t)v126, v32, 0, 0, v35, 0, (uint64_t)v139);
  v111 = v139[1];
  v112 = v139[0];
  v109 = v139[3];
  v110 = v139[2];
  v107 = v139[5];
  v108 = v139[4];
  v105 = v139[7];
  v106 = v139[6];
  v103 = v139[9];
  v104 = v139[8];
  v101 = v139[11];
  v102 = v139[10];
  v138 = v140;
  v113 = v141;
  v137 = v142;
  v99 = v25;
  v115 = v18;
  v37 = v120(v36, v25, v18);
  v38 = v130;
  v39 = SportsActivityContentState.contenderB.getter(v37);
  v120 = a2;
  result = SportsActivityAttributes.contenders.getter(v39);
  if (*(_QWORD *)(result + 16) < 2uLL)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  v40 = result;
  v41 = (uint64_t)v128;
  v98(v128, result + v96 + *(_QWORD *)(v100 + 72), v127);
  v42 = swift_bridgeObjectRelease(v40);
  v43 = (uint64_t)v129;
  v95(v129, 1, 1, v97, v42);
  v44 = sub_100083CB8((uint64_t)v125, (uint64_t)v126, v41, 0, 0, v43, 0, (uint64_t)v143);
  v127 = v143[1];
  v128 = (char *)v143[0];
  v125 = (char *)v143[3];
  v126 = (char *)v143[2];
  v100 = v143[4];
  v97 = v143[6];
  v98 = (void (*)(char *, unint64_t, uint64_t))v143[5];
  v95 = (void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v143[8];
  v96 = v143[7];
  v93 = v143[10];
  v94 = v143[9];
  v92 = v143[11];
  v136 = v144;
  v129 = v145;
  v135 = v146;
  v45 = v116;
  v46 = SportsActivityContentState.contenderA.getter(v44);
  v47 = SportsActivityContender.scoreEntries.getter(v46);
  v48 = *(uint64_t (**)(char *, uint64_t))(v117 + 8);
  v49 = v48(v45, v121);
  v50 = (uint64_t)v122;
  v51 = v99;
  Sport.scoreStatisticName.getter(v49);
  if (*(_QWORD *)(v47 + 16) && (v52 = sub_10002D880(v50), (v53 & 1) != 0))
    v54 = *(_QWORD *)(*(_QWORD *)(v47 + 56) + 8 * v52);
  else
    v54 = 0;
  v55 = swift_bridgeObjectRelease(v47);
  v56 = *(uint64_t (**)(char *, uint64_t, __n128))(v119 + 8);
  v57 = v56(v122, v124, v55);
  v58 = v118;
  v59 = SportsActivityContentState.contenderB.getter(v57);
  v60 = SportsActivityContender.scoreEntries.getter(v59);
  v61 = v48(v58, v121);
  v62 = (uint64_t)v123;
  Sport.scoreStatisticName.getter(v61);
  if (*(_QWORD *)(v60 + 16))
  {
    v63 = sub_10002D880(v62);
    v64 = v114;
    if ((v65 & 1) != 0)
      v66 = *(_QWORD *)(*(_QWORD *)(v60 + 56) + 8 * v63);
    else
      v66 = 0;
  }
  else
  {
    v66 = 0;
    v64 = v114;
  }
  v67 = swift_bridgeObjectRelease(v60);
  v56(v123, v124, v67);
  if (v66 >= v54)
  {
    v74 = v54 < v66;
    v73 = v120;
    if (v74)
    {
      v69 = 2.0;
      v70 = 1.0;
      v72 = 0.6;
    }
    else
    {
      v68.n128_u64[0] = 2.0;
      v72 = 1.0;
      if ((v140 & 1) != 0)
        v70 = 2.0;
      else
        v70 = 1.0;
      if ((v140 & 1) != 0)
        v69 = 1.0;
      else
        v69 = 2.0;
    }
    v71 = 1.0;
  }
  else
  {
    v69 = 1.0;
    v70 = 2.0;
    v71 = 0.6;
    v72 = 1.0;
    v73 = v120;
  }
  type metadata accessor for SportsVoiceOverUtility(0, v68);
  v75 = static SportsVoiceOverUtility.widgetScoreVoiceOverText(state:attributes:)(v38, v73);
  v77 = v76;
  v78 = type metadata accessor for SportsActivityAttributes(0);
  (*(void (**)(uint64_t (*)(uint64_t, char *, uint64_t), uint64_t))(*(_QWORD *)(v78 - 8) + 8))(v73, v78);
  v79 = type metadata accessor for SportsActivityContentState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 8))(v38, v79);
  result = (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v51, v115);
  v80 = v111;
  *(_QWORD *)a3 = v112;
  *(_QWORD *)(a3 + 8) = v80;
  v81 = v109;
  *(_QWORD *)(a3 + 16) = v110;
  *(_QWORD *)(a3 + 24) = v81;
  v82 = v107;
  *(_QWORD *)(a3 + 32) = v108;
  *(_QWORD *)(a3 + 40) = v82;
  v83 = v105;
  *(_QWORD *)(a3 + 48) = v106;
  *(_QWORD *)(a3 + 56) = v83;
  v84 = v103;
  *(_QWORD *)(a3 + 64) = v104;
  *(_QWORD *)(a3 + 72) = v84;
  v85 = v101;
  *(_QWORD *)(a3 + 80) = v102;
  *(_QWORD *)(a3 + 88) = v85;
  *(_BYTE *)(a3 + 96) = v138;
  *(_DWORD *)(a3 + 100) = *(_DWORD *)&v134[3];
  *(_DWORD *)(a3 + 97) = *(_DWORD *)v134;
  *(_QWORD *)(a3 + 104) = v113;
  *(_BYTE *)(a3 + 112) = v137;
  *(_DWORD *)(a3 + 116) = *(_DWORD *)&v133[3];
  *(_DWORD *)(a3 + 113) = *(_DWORD *)v133;
  v86 = v127;
  *(_QWORD *)(a3 + 120) = v128;
  *(_QWORD *)(a3 + 128) = v86;
  v87 = (uint64_t)v125;
  *(_QWORD *)(a3 + 136) = v126;
  *(_QWORD *)(a3 + 144) = v87;
  v88 = v98;
  *(_QWORD *)(a3 + 152) = v100;
  *(_QWORD *)(a3 + 160) = v88;
  v89 = v96;
  *(_QWORD *)(a3 + 168) = v97;
  *(_QWORD *)(a3 + 176) = v89;
  v90 = v94;
  *(_QWORD *)(a3 + 184) = v95;
  *(_QWORD *)(a3 + 192) = v90;
  v91 = v92;
  *(_QWORD *)(a3 + 200) = v93;
  *(_QWORD *)(a3 + 208) = v91;
  *(_BYTE *)(a3 + 216) = v136;
  *(_DWORD *)(a3 + 220) = *(_DWORD *)&v132[3];
  *(_DWORD *)(a3 + 217) = *(_DWORD *)v132;
  *(_QWORD *)(a3 + 224) = v129;
  *(_BYTE *)(a3 + 232) = v135;
  *(_DWORD *)(a3 + 236) = *(_DWORD *)&v131[3];
  *(_DWORD *)(a3 + 233) = *(_DWORD *)v131;
  *(_QWORD *)(a3 + 272) = v75;
  *(_QWORD *)(a3 + 280) = v77;
  *(double *)(a3 + 240) = v70;
  *(double *)(a3 + 248) = v69;
  *(double *)(a3 + 256) = v72;
  *(double *)(a3 + 264) = v71;
  return result;
}

uint64_t sub_10008514C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SportsWidgetClock(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100085190()
{
  unint64_t result;

  result = qword_10010A840;
  if (!qword_10010A840)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SportsRunningClockLocalization, &type metadata for SportsRunningClockLocalization);
    atomic_store(result, (unint64_t *)&qword_10010A840);
  }
  return result;
}

uint64_t destroy for SportsWidgetStaleView(_QWORD *a1)
{
  swift_release(a1[10]);
  swift_release(a1[11]);
  return swift_release(a1[12]);
}

uint64_t initializeWithCopy for SportsWidgetStaleView(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 88) = v6;
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v7;
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t assignWithCopy for SportsWidgetStaleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 88);
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v9;
  swift_retain(v9);
  swift_release(v8);
  return a1;
}

__n128 initializeWithTake for SportsWidgetStaleView(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for SportsWidgetStaleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release(*(_QWORD *)(a1 + 80));
  v4 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsWidgetStaleView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsWidgetStaleView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetStaleView()
{
  return &type metadata for SportsWidgetStaleView;
}

uint64_t sub_10008548C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D349C, 1);
}

void sub_10008549C()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_100008EF4(&qword_10010A848);
  __chkstk_darwin(v3);
  v1 = sub_100008EF4(&qword_10010A850);
  __chkstk_darwin(v1);
  v4 = sub_100008EF4(&qword_10010A858);
  __chkstk_darwin(v4);
  v2 = sub_100008EF4(&qword_10010A860);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

uint64_t sub_1000855D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v11 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(v1 + 56) = v11;
  *(_QWORD *)(v1 + 64) = v4;
  v12 = v2[1];
  v13 = v2[3];
  *(_QWORD *)(v1 + 40) = v2[2];
  *(_QWORD *)(v1 + 48) = v13;
  v14 = v2[10];
  v15 = static Alignment.center.getter(v11);
  _FrameLayout.init(width:height:alignment:)((_QWORD *)(v10 - 192), 0, 1, v12, 0, v15, v16);
  v17 = *(_QWORD *)(v10 - 192);
  LOBYTE(v12) = *(_BYTE *)(v10 - 184);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)(v10 - 176);
  *(_QWORD *)(v1 + 32) = v17;
  v18 = *(_BYTE *)(v10 - 168);
  v19 = *(_QWORD *)(v10 - 160);
  *(_QWORD *)(v1 + 8) = *(_QWORD *)(v10 - 152);
  *(_QWORD *)(v1 + 16) = v19;
  swift_retain(v14);
  v21 = static Alignment.center.getter(v20);
  _FrameLayout.init(width:height:alignment:)((_QWORD *)(v10 - 144), *(_QWORD *)(v1 + 40), 0, *(_QWORD *)(v1 + 48), 0, v21, v22);
  v23 = *(_QWORD *)(v10 - 144);
  v24 = *(_BYTE *)(v10 - 136);
  v25 = *(_QWORD *)(v10 - 128);
  v26 = *(_BYTE *)(v10 - 120);
  *(_BYTE *)(v1 + 120) = 1;
  *(_BYTE *)(v1 + 112) = v12;
  *(_BYTE *)(v1 + 104) = v18;
  *(_BYTE *)(v1 + 96) = v24;
  *(_BYTE *)(v1 + 88) = v26;
  *(_QWORD *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 136) = 1;
  *(_QWORD *)(v1 + 144) = *(_QWORD *)(v1 + 32);
  *(_BYTE *)(v1 + 152) = v12;
  *(_QWORD *)(v1 + 160) = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(v1 + 168) = v18;
  v27 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 176) = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 184) = v27;
  *(_QWORD *)(v1 + 192) = v14;
  *(_WORD *)(v1 + 200) = 256;
  *(_QWORD *)(v1 + 208) = v23;
  *(_BYTE *)(v1 + 216) = v24;
  *(_QWORD *)(v1 + 224) = v25;
  *(_BYTE *)(v1 + 232) = v26;
  *(_OWORD *)(v9 + 112) = *(_OWORD *)(v9 + 352);
  *(_BYTE *)(v10 - 200) = 1;
  v28 = *(_OWORD *)(v1 + 192);
  v29 = *(_OWORD *)(v1 + 208);
  v30 = *(_OWORD *)(v9 + 96);
  *(_OWORD *)(v9 + 247) = *(_OWORD *)(v9 + 112);
  *(_OWORD *)(v9 + 231) = v30;
  *(_OWORD *)(v9 + 215) = v29;
  *(_OWORD *)(v9 + 199) = v28;
  v31 = *(_OWORD *)(v1 + 128);
  v32 = *(_OWORD *)(v1 + 144);
  v33 = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(v9 + 183) = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(v9 + 167) = v33;
  *(_OWORD *)(v9 + 151) = v32;
  *(_OWORD *)(v9 + 135) = v31;
  *(_QWORD *)v6 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) = 1;
  v34 = *(_OWORD *)(v9 + 144);
  *(_OWORD *)(v6 + 17) = *(_OWORD *)(v9 + 128);
  v35 = *(_OWORD *)(v9 + 208);
  *(_OWORD *)(v6 + 81) = *(_OWORD *)(v9 + 192);
  v36 = *(_OWORD *)(v9 + 160);
  *(_OWORD *)(v6 + 65) = *(_OWORD *)(v9 + 176);
  *(_OWORD *)(v6 + 49) = v36;
  *(_OWORD *)(v6 + 33) = v34;
  v37 = *(_OWORD *)(v9 + 224);
  v38 = *(_OWORD *)(v9 + 240);
  *(_QWORD *)(v6 + 144) = *(_QWORD *)(v9 + 255);
  *(_OWORD *)(v6 + 129) = v38;
  *(_OWORD *)(v6 + 113) = v37;
  *(_OWORD *)(v6 + 97) = v35;
  swift_storeEnumTagMultiPayload(v6, v8, 1);
  sub_100086444(v1 + 128);
  v39 = sub_100008EF4(&qword_10010A8A8);
  v40 = sub_100086378(&qword_10010A898, &qword_10010A860);
  v41 = sub_100086378(&qword_10010A8A0, &qword_10010A8A8);
  _ConditionalContent<>.init(storage:)(v6, v7, v39, v40, v41);
  sub_10001355C(v5, v3, &qword_10010A858);
  swift_storeEnumTagMultiPayload(v3, *(_QWORD *)(v1 + 72), 0);
  v42 = sub_100008EF4(&qword_10010A888);
  v43 = sub_1000862EC();
  v44 = sub_1000863B8();
  _ConditionalContent<>.init(storage:)(v3, *(_QWORD *)(v1 + 80), v42, v43, v44);
  sub_1000135A0(v5, &qword_10010A858);
  return swift_release(v14);
}

uint64_t sub_100085C80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[3];

  v43 = sub_100008EF4(&qword_100107208);
  __chkstk_darwin(v43);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100008EF4(&qword_10010A8C0);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100008EF4(&qword_10010A8C8);
  v12 = __chkstk_darwin(v44);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v34 - v16;
  v35 = a1[6];
  v18 = a1[8];
  v36 = a1[7];
  v19 = a1[9];
  v20 = a1[11];
  v21 = static Alignment.center.getter(v15);
  _FrameLayout.init(width:height:alignment:)(&v45, 0, 1, v18, 0, v21, v22);
  v42 = v45;
  v41 = v46;
  v40 = v47;
  v39 = v48;
  v38 = v49;
  v37 = v50;
  v23 = (char *)v8 + *(int *)(v6 + 20);
  v24 = enum case for RoundedCornerStyle.continuous(_:);
  v25 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v23, v24, v25);
  *v8 = v19;
  v8[1] = v19;
  sub_10008646C((uint64_t)v8, (uint64_t)v5);
  *(_WORD *)&v5[*(int *)(v43 + 36)] = 256;
  sub_10001355C((uint64_t)v5, (uint64_t)&v11[*(int *)(v9 + 36)], &qword_100107208);
  *(_QWORD *)v11 = v20;
  *((_WORD *)v11 + 4) = 256;
  swift_retain_n(v20, 2);
  sub_1000135A0((uint64_t)v5, &qword_100107208);
  sub_1000864B0((uint64_t)v8);
  v26 = swift_release(v20);
  v27 = static Alignment.center.getter(v26);
  _FrameLayout.init(width:height:alignment:)(v51, v35, 0, v36, 0, v27, v28);
  sub_10001355C((uint64_t)v11, (uint64_t)v14, &qword_10010A8C0);
  v29 = &v14[*(int *)(v44 + 36)];
  v30 = v51[1];
  *(_OWORD *)v29 = v51[0];
  *((_OWORD *)v29 + 1) = v30;
  *((_OWORD *)v29 + 2) = v51[2];
  sub_1000135A0((uint64_t)v11, &qword_10010A8C0);
  sub_1000864EC((uint64_t)v14, (uint64_t)v17);
  sub_10001355C((uint64_t)v17, (uint64_t)v14, &qword_10010A8C8);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v42;
  *(_BYTE *)(a2 + 24) = v41;
  *(_QWORD *)(a2 + 32) = v40;
  *(_BYTE *)(a2 + 40) = v39;
  v31 = v37;
  *(_QWORD *)(a2 + 48) = v38;
  *(_QWORD *)(a2 + 56) = v31;
  v32 = sub_100008EF4(&qword_10010A8D0);
  sub_10001355C((uint64_t)v14, a2 + *(int *)(v32 + 48), &qword_10010A8C8);
  sub_1000135A0((uint64_t)v17, &qword_10010A8C8);
  return sub_1000135A0((uint64_t)v14, &qword_10010A8C8);
}

double sub_100085FF8@<D0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  double result;
  id v52;
  unint64_t v53;
  char v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v59 = SportsDisplayError.title.getter();
  v60 = v3;
  v53 = sub_100013080();
  v4 = Text.init<A>(_:)(&v59, &type metadata for String, v53);
  v6 = v5;
  v8 = v7;
  v10 = v9 & 1;
  v52 = (id)objc_opt_self(UIColor);
  v11 = Color.init(uiColor:)(objc_msgSend(v52, "labelColor"));
  v12 = Text.foregroundColor(_:)(v11, v4, v6, v10, v8);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  swift_release(v11);
  v19 = v16 & 1;
  sub_1000130C4(v4, v6, v10);
  swift_bridgeObjectRelease(v8);
  v21 = static Font.subheadline.getter(v20);
  v22 = Text.font(_:)(v21, v12, v14, v19, v18);
  v56 = v23;
  v57 = v22;
  LOBYTE(v11) = v24;
  v58 = v25;
  swift_release(v21);
  v54 = v11 & 1;
  sub_1000130C4(v12, v14, v19);
  v26 = swift_bridgeObjectRelease(v18);
  v59 = SportsDisplayError.subtitle.getter(a1, v26);
  v60 = v27;
  v28 = Text.init<A>(_:)(&v59, &type metadata for String, v53);
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  v35 = Color.init(uiColor:)(objc_msgSend(v52, "labelColor"));
  v36 = Text.foregroundColor(_:)(v35, v28, v30, v34, v32);
  v38 = v37;
  LOBYTE(v8) = v39;
  v41 = v40;
  swift_release(v35);
  v42 = v8 & 1;
  sub_1000130C4(v28, v30, v34);
  swift_bridgeObjectRelease(v32);
  v44 = static Font.subheadline.getter(v43);
  v45 = Text.font(_:)(v44, v36, v38, v42, v41);
  v47 = v46;
  LOBYTE(v34) = v48;
  v50 = v49;
  swift_release(v44);
  sub_1000130C4(v36, v38, v42);
  swift_bridgeObjectRelease(v41);
  LOBYTE(v59) = v54;
  *(_QWORD *)a2 = v57;
  *(_QWORD *)(a2 + 8) = v56;
  *(_BYTE *)(a2 + 16) = v54;
  *(_QWORD *)(a2 + 24) = v58;
  *(_QWORD *)(a2 + 32) = v45;
  *(_QWORD *)(a2 + 40) = v47;
  *(_BYTE *)(a2 + 48) = v34 & 1;
  *(_QWORD *)(a2 + 56) = v50;
  sub_10003258C(v57, v56, v54);
  swift_bridgeObjectRetain(v58);
  sub_10003258C(v45, v47, v34 & 1);
  swift_bridgeObjectRetain(v50);
  sub_1000130C4(v45, v47, v34 & 1);
  swift_bridgeObjectRelease(v50);
  sub_1000130C4(v57, v56, v59);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v58).n128_u64[0];
  return result;
}

void sub_1000862A4()
{
  sub_10008549C();
}

unint64_t sub_1000862EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010A890;
  if (!qword_10010A890)
  {
    v1 = sub_100008F80(&qword_10010A858);
    sub_100086378(&qword_10010A898, &qword_10010A860);
    sub_100086378(&qword_10010A8A0, &qword_10010A8A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010A890);
  }
  return result;
}

uint64_t sub_100086378(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100008F80(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000863B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010A8B0;
  if (!qword_10010A8B0)
  {
    v1 = sub_100008F80(&qword_10010A888);
    sub_100086378(&qword_10010A878, &qword_10010A868);
    sub_100086378(&qword_10010A880, &qword_10010A870);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010A8B0);
  }
  return result;
}

uint64_t sub_100086444(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 64));
  return a1;
}

uint64_t sub_10008646C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000864B0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000864EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008EF4(&qword_10010A8C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for SportsWidgetStaleView.Position(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100086580 + 4 * byte_1000CE93D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000865B4 + 4 * byte_1000CE938[v4]))();
}

uint64_t sub_1000865B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000865BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000865C4);
  return result;
}

uint64_t sub_1000865D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000865D8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000865DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000865E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SportsWidgetStaleView.Position()
{
  return &type metadata for SportsWidgetStaleView.Position;
}

unint64_t sub_100086604()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010A8D8;
  if (!qword_10010A8D8)
  {
    v1 = sub_100008F80(&qword_10010A8E0);
    sub_1000862EC();
    sub_1000863B8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010A8D8);
  }
  return result;
}

unint64_t sub_100086674()
{
  unint64_t result;

  result = qword_10010A8E8;
  if (!qword_10010A8E8)
  {
    result = swift_getWitnessTable(&unk_1000CEA24, &type metadata for SportsWidgetStaleView.Position);
    atomic_store(result, (unint64_t *)&qword_10010A8E8);
  }
  return result;
}

uint64_t destroy for TVWidgetViewLayout(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_release(a1[17]);
}

uint64_t initializeWithCopy for TVWidgetViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v6 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  return a1;
}

_QWORD *assignWithCopy for TVWidgetViewLayout(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  v6 = a2[6];
  v7 = a1[6];
  a1[6] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  a1[16] = a2[16];
  v8 = a2[17];
  v9 = a1[17];
  a1[17] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

__n128 initializeWithTake for TVWidgetViewLayout(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for TVWidgetViewLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v6);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v7 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TVWidgetViewLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TVWidgetViewLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TVWidgetViewLayout()
{
  return &type metadata for TVWidgetViewLayout;
}

double sub_1000869CC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double result;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v2 = sub_100008EF4(&qword_10010A8F0);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1000C8170;
  type metadata accessor for CGColor(0);
  _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)(&v43, 0.1098, 0.1098, 0.1098, 1.0);
  *(_QWORD *)(v3 + 32) = Color.init(_:)(v43);
  _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)(&v43, 0.15294, 0.15294, 0.15294, 1.0);
  v4 = Color.init(_:)(v43);
  *(_QWORD *)(v3 + 40) = v4;
  v43 = v3;
  specialized Array._endMutation()(v4);
  v5 = Gradient.init(colors:)(v43);
  v6 = static UnitPoint.top.getter();
  v8 = v7;
  v9 = static UnitPoint.bottom.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)(&v39, v5, v6, v8, v9, v10);
  v11 = v39;
  v38 = v40;
  v12 = v41;
  v13 = v42;
  v14 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1000C8170;
  *(_QWORD *)(v14 + 32) = static Color.clear.getter();
  v15 = static Color.clear.getter();
  *(_QWORD *)(v14 + 40) = v15;
  v43 = v14;
  specialized Array._endMutation()(v15);
  v16 = Gradient.init(colors:)(v43);
  v17 = static UnitPoint.top.getter();
  v19 = v18;
  v20 = static UnitPoint.bottom.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)(&v43, v16, v17, v19, v20, v21);
  v22 = v43;
  v37 = v44;
  v23 = v45;
  v24 = v46;
  v25 = static AnyTransition.move(edge:)(0);
  v26 = static AnyTransition.move(edge:)(2);
  v27 = static AnyTransition.asymmetric(insertion:removal:)(v25, v26);
  swift_release(v25);
  v28 = swift_release(v26);
  v29 = static AnyTransition.opacity.getter(v28);
  v30 = AnyTransition.combined(with:)(v29, v27);
  swift_release(v27);
  swift_release(v29);
  *(_QWORD *)a1 = 0x3FFC71C71C71C71CLL;
  *(_QWORD *)(a1 + 8) = v11;
  *(_OWORD *)(a1 + 16) = v38;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v22;
  *(_OWORD *)(a1 + 56) = v37;
  *(_QWORD *)(a1 + 72) = v23;
  *(_QWORD *)(a1 + 80) = v24;
  *(_OWORD *)(a1 + 88) = xmmword_1000CEA50;
  __asm { FMOV            V0.2D, #16.0 }
  *(_OWORD *)(a1 + 104) = _Q0;
  result = 14.0;
  *(_OWORD *)(a1 + 120) = xmmword_1000CEA60;
  *(_QWORD *)(a1 + 136) = v30;
  return result;
}

double sub_100086C3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, _QWORD, uint64_t);
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v19 - v7;
  v9 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v9((char *)&v19 - v7, enum case for WidgetFamily.systemSmall(_:), v2);
  v10 = sub_1000270C4();
  dispatch thunk of RawRepresentable.rawValue.getter(&v20, v2, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v19, v2, v10);
  v12 = v19;
  v11 = v20;
  v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v8, v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  if (v11 == v12)
  {
    v13(v6, v2);
    return 16.0;
  }
  else
  {
    v9(v8, enum case for WidgetFamily.systemLarge(_:), v2);
    dispatch thunk of RawRepresentable.rawValue.getter(&v20, v2, v10);
    dispatch thunk of RawRepresentable.rawValue.getter(&v19, v2, v10);
    v16 = v19;
    v15 = v20;
    v13(v8, v2);
    v13(v6, v2);
    result = 16.0;
    if (v15 != v16)
    {
      ((void (*)(char *, _QWORD, uint64_t, double))v9)(v8, enum case for WidgetFamily.systemMedium(_:), v2, 16.0);
      dispatch thunk of RawRepresentable.rawValue.getter(&v20, v2, v10);
      dispatch thunk of RawRepresentable.rawValue.getter(&v19, v2, v10);
      v18 = v19;
      v17 = v20;
      v13(v8, v2);
      result = 0.0;
      if (v17 == v18)
        return 8.0;
    }
  }
  return result;
}

char *sub_100086E2C(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  objc_class *Operation;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  char *result;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  void *v49;
  uint64_t v50;
  char *v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  objc_super v60;

  v3 = type metadata accessor for WidgetFamily(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = &v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__widgetEntry];
  v8 = type metadata accessor for TVWidgetEntry(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = &v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__suggestedRefreshDate];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_QWORD *)&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__error] = 0;
  v11 = &v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation_context];
  v12 = type metadata accessor for TimelineProviderContext(0);
  v57 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v11, a1, v12);
  Operation = (objc_class *)type metadata accessor for TVWidgetFetchOperation(0);
  v60.receiver = v1;
  v60.super_class = Operation;
  v14 = (char *)objc_msgSendSuper2(&v60, "init");
  TimelineProviderContext.family.getter(v14);
  v15 = sub_1000139F8(&qword_100109580, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v16 = dispatch thunk of CustomStringConvertible.description.getter(v3, v15);
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v58 = v16;
  v59 = v18;
  swift_bridgeObjectRetain(v18);
  v19._countAndFlagsBits = 45;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v21 = v58;
  v20 = v59;
  v22 = (uint64_t *)&v14[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier];
  v23 = *(void **)&v14[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
  v24 = "SportsWidgetBaseballClockViewLayout";
  if (v23)
  {
    v25 = *v22;
    v26 = v14;
    v27 = v23;
  }
  else
  {
    sub_10006F17C(0, (unint64_t *)&qword_100106920, NSString_ptr);
    v28 = v14;
    v29 = (void *)NSString.init(stringLiteral:)("%p", (const void *)v56);
    v30 = sub_100008EF4(&qword_100106918);
    v31 = swift_allocObject(v30, 72, 7);
    *(_OWORD *)(v31 + 16) = xmmword_1000C6710;
    *(_QWORD *)(v31 + 56) = type metadata accessor for TVWidgetAsyncOperation();
    *(_QWORD *)(v31 + 64) = sub_1000139F8((unint64_t *)&qword_100106928, (uint64_t (*)(uint64_t))type metadata accessor for TVWidgetAsyncOperation, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v31 + 32) = v28;
    v32 = v28;
    v33 = v31;
    v24 = "SportsWidgetBaseballClockViewLayout";
    v34 = (void *)NSString.init(format:_:)(v29, v33);

    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v27 = v35;

    v23 = 0;
  }
  swift_bridgeObjectRetain(v23);

  v58 = v21;
  v59 = v20;
  swift_bridgeObjectRetain(v20);
  v36._countAndFlagsBits = v25;
  v36._object = v27;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v27);
  v37 = v59;
  v38 = v22[1];
  *v22 = v58;
  v22[1] = v37;

  swift_bridgeObjectRelease(v38);
  result = (char *)sub_100006398();
  if (result)
  {
    v40 = result;
    v41 = sub_100008EF4(&qword_100106918);
    v42 = swift_allocObject(v41, 72, 7);
    v43 = *((_OWORD *)v24 + 113);
    *(_OWORD *)(v42 + 16) = v43;
    v44 = v22[1];
    if (v44)
    {
      v45 = *v22;
      v46 = v14;
      v47 = v44;
    }
    else
    {
      v56 = v43;
      sub_10006F17C(0, (unint64_t *)&qword_100106920, NSString_ptr);
      v48 = v14;
      v49 = (void *)NSString.init(stringLiteral:)("%p", (const void *)v56);
      v50 = swift_allocObject(v41, 72, 7);
      *(_OWORD *)(v50 + 16) = v56;
      *(_QWORD *)(v50 + 56) = type metadata accessor for TVWidgetAsyncOperation();
      *(_QWORD *)(v50 + 64) = sub_1000139F8((unint64_t *)&qword_100106928, (uint64_t (*)(uint64_t))type metadata accessor for TVWidgetAsyncOperation, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v50 + 32) = v48;
      v51 = v48;
      v52 = (void *)NSString.init(format:_:)(v49, v50);

      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      v47 = v53;

      v44 = 0;
    }
    swift_bridgeObjectRetain(v44);

    *(_QWORD *)(v42 + 56) = &type metadata for String;
    v54 = sub_10001A64C();
    *(_QWORD *)(v42 + 64) = v54;
    *(_QWORD *)(v42 + 32) = v45;
    *(_QWORD *)(v42 + 40) = v47;
    v55 = static os_log_type_t.default.getter(v54);
    os_log(_:dso:log:type:_:)("FetchOp::[%{public}@] init", 26, 2, &_mh_execute_header, v40, v55, v42);

    swift_bridgeObjectRelease(v42);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(a1, v12);
    return v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000872B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation_context;
  v2 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1000135A0(v0 + OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__widgetEntry, &qword_100109460);
  sub_1000135A0(v0 + OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__suggestedRefreshDate, &qword_100105F48);
  return swift_errorRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__error));
}

id sub_100087334()
{
  char *v0;
  void *v1;
  id result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  objc_super v19;

  v1 = v0;
  result = sub_100006398();
  if (result)
  {
    v3 = result;
    v4 = sub_100008EF4(&qword_100106918);
    v5 = swift_allocObject(v4, 72, 7);
    *(_OWORD *)(v5 + 16) = xmmword_1000C6710;
    v6 = *(_QWORD *)&v0[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
    if (v6)
    {
      v7 = *(_QWORD *)&v0[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier];
      v8 = v1;
      v9 = v6;
    }
    else
    {
      *((_QWORD *)&v18 + 1) = 2;
      sub_10006F17C(0, (unint64_t *)&qword_100106920, NSString_ptr);
      v10 = v0;
      v11 = (void *)NSString.init(stringLiteral:)("%p", (const void *)1);
      v12 = swift_allocObject(v4, 72, 7);
      *(_OWORD *)(v12 + 16) = v18;
      *(_QWORD *)(v12 + 56) = type metadata accessor for TVWidgetAsyncOperation();
      *(_QWORD *)(v12 + 64) = sub_1000139F8((unint64_t *)&qword_100106928, (uint64_t (*)(uint64_t))type metadata accessor for TVWidgetAsyncOperation, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v12 + 32) = v10;
      v13 = v10;
      v14 = (void *)NSString.init(format:_:)(v11, v12);

      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v9 = v15;

      v6 = 0;
    }
    swift_bridgeObjectRetain(v6);

    *(_QWORD *)(v5 + 56) = &type metadata for String;
    v16 = sub_10001A64C();
    *(_QWORD *)(v5 + 64) = v16;
    *(_QWORD *)(v5 + 32) = v7;
    *(_QWORD *)(v5 + 40) = v9;
    v17 = static os_log_type_t.default.getter(v16);
    os_log(_:dso:log:type:_:)("FetchOp::[%{public}@] deinit", 28, 2, &_mh_execute_header, v3, v17, v5);

    swift_bridgeObjectRelease(v5);
    v19.receiver = v1;
    v19.super_class = (Class)type metadata accessor for TVWidgetFetchOperation(0);
    return objc_msgSendSuper2(&v19, "dealloc");
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000875B0()
{
  return type metadata accessor for TVWidgetFetchOperation(0);
}

uint64_t type metadata accessor for TVWidgetFetchOperation(uint64_t a1)
{
  uint64_t result;

  result = qword_10010A938;
  if (!qword_10010A938)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TVWidgetFetchOperation);
  return result;
}

void sub_1000875F4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  char *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  char *v71;
  _QWORD aBlock[5];
  uint64_t v73;

  v1 = v0;
  v2 = sub_100008EF4(&qword_100105F48);
  v3 = __chkstk_darwin(v2);
  v71 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v70 - v5;
  v7 = sub_100008EF4(&qword_100109460);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v70 - v11;
  v13 = type metadata accessor for WidgetFamily(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v70 - v18;
  v20 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  v21 = objc_msgSend(v20, "ams_activeiTunesAccount");

  if (!v21)
  {
    v26 = sub_100006398();
    if (v26)
    {
      v27 = v26;
      v28 = sub_100008EF4(&qword_100106918);
      v29 = swift_allocObject(v28, 72, 7);
      *(_OWORD *)(v29 + 16) = xmmword_1000C6710;
      v30 = *(_QWORD *)&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
      v31 = (uint64_t)v71;
      if (v30)
      {
        v32 = *(_QWORD *)&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier];
        v33 = *(_QWORD *)&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
      }
      else
      {
        v70 = xmmword_1000C6710;
        sub_10006F17C(0, (unint64_t *)&qword_100106920, NSString_ptr);
        v34 = (void *)NSString.init(stringLiteral:)("%p", (const void *)v70);
        v35 = swift_allocObject(v28, 72, 7);
        *(_OWORD *)(v35 + 16) = v70;
        *(_QWORD *)(v35 + 56) = type metadata accessor for TVWidgetAsyncOperation();
        *(_QWORD *)(v35 + 64) = sub_1000139F8((unint64_t *)&qword_100106928, (uint64_t (*)(uint64_t))type metadata accessor for TVWidgetAsyncOperation, (uint64_t)&protocol conformance descriptor for NSObject);
        *(_QWORD *)(v35 + 32) = v1;
        v36 = v1;
        v37 = (void *)NSString.init(format:_:)(v34, v35);

        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v33 = v38;

        v30 = 0;
      }
      *(_QWORD *)(v29 + 56) = &type metadata for String;
      *(_QWORD *)(v29 + 64) = sub_10001A64C();
      *(_QWORD *)(v29 + 32) = v32;
      *(_QWORD *)(v29 + 40) = v33;
      v39 = swift_bridgeObjectRetain(v30);
      v40 = static os_log_type_t.default.getter(v39);
      os_log(_:dso:log:type:_:)("FetchOp::[%{public}@] no active user", 36, 2, &_mh_execute_header, v27, v40, v29);

      swift_bridgeObjectRelease(v29);
      Date.init()(v41);
      v42 = type metadata accessor for TVWidgetEntry(0);
      v43 = v42;
      *(_QWORD *)&v12[*(int *)(v42 + 20)] = 0;
      v12[*(int *)(v42 + 24)] = 1;
      goto LABEL_13;
    }
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  TimelineProviderContext.family.getter(v22);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v19, v13);
  if (v23 != enum case for WidgetFamily.systemSmall(_:))
  {
    if (v23 == enum case for WidgetFamily.systemMedium(_:))
    {
      v25 = 2;
      v24 = 1;
      goto LABEL_16;
    }
    if (v23 == enum case for WidgetFamily.systemLarge(_:))
    {
      v25 = 3;
      v24 = 2;
      goto LABEL_16;
    }
    if (v23 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v25 = 7;
      v24 = 3;
      goto LABEL_16;
    }
    v53 = *(void (**)(char *, uint64_t))(v14 + 8);
    v53(v19, v13);
    *(_QWORD *)&v70 = sub_100006398();
    if ((_QWORD)v70)
    {
      v54 = sub_100008EF4(&qword_100106918);
      v55 = swift_allocObject(v54, 112, 7);
      *(_OWORD *)(v55 + 16) = xmmword_1000C8170;
      v56 = TimelineProviderContext.family.getter(v55);
      v57 = WidgetFamily.rawValue.getter(v56);
      v53(v17, v13);
      *(_QWORD *)(v55 + 56) = &type metadata for Int;
      *(_QWORD *)(v55 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v55 + 32) = v57;
      v58 = *(_QWORD *)&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
      if (v58)
      {
        v59 = *(_QWORD *)&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier];
        v60 = *(_QWORD *)&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetAsyncOperation__logIdentifier + 8];
      }
      else
      {
        sub_10006F17C(0, (unint64_t *)&qword_100106920, NSString_ptr);
        v61 = (void *)NSString.init(stringLiteral:)("%p", (const void *)v70);
        v62 = swift_allocObject(v54, 72, 7);
        *(_OWORD *)(v62 + 16) = xmmword_1000C6710;
        *(_QWORD *)(v62 + 56) = type metadata accessor for TVWidgetAsyncOperation();
        *(_QWORD *)(v62 + 64) = sub_1000139F8((unint64_t *)&qword_100106928, (uint64_t (*)(uint64_t))type metadata accessor for TVWidgetAsyncOperation, (uint64_t)&protocol conformance descriptor for NSObject);
        *(_QWORD *)(v62 + 32) = v1;
        v63 = v1;
        v64 = (void *)NSString.init(format:_:)(v61, v62);

        v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        v60 = v65;

        v58 = 0;
      }
      v31 = (uint64_t)v71;
      v66 = (void *)v70;
      *(_QWORD *)(v55 + 96) = &type metadata for String;
      *(_QWORD *)(v55 + 104) = sub_10001A64C();
      *(_QWORD *)(v55 + 72) = v59;
      *(_QWORD *)(v55 + 80) = v60;
      v67 = swift_bridgeObjectRetain(v58);
      v68 = static os_log_type_t.default.getter(v67);
      os_log(_:dso:log:type:_:)("FetchOp::[%{public}@] max item count is zero. unknown widget family: %@", 71, 2, &_mh_execute_header, v66, v68, v55);

      swift_bridgeObjectRelease(v55);
      Date.init()(v69);
      v42 = type metadata accessor for TVWidgetEntry(0);
      v43 = v42;
      *(_QWORD *)&v12[*(int *)(v42 + 20)] = 0;
      v12[*(int *)(v42 + 24)] = 2;
LABEL_13:
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v12, 0, 1, v43);
      objc_sync_enter(v1);
      sub_10001355C((uint64_t)v12, (uint64_t)v10, &qword_100109460);
      v44 = (uint64_t)&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__widgetEntry];
      swift_beginAccess(&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__widgetEntry], aBlock, 33, 0);
      sub_10006AFA8((uint64_t)v10, v44, &qword_100109460);
      swift_endAccess(aBlock);
      objc_sync_exit(v1);
      v45 = sub_1000135A0((uint64_t)v12, &qword_100109460);
      v46.n128_u64[0] = 0x409C200000000000;
      Date.init(timeIntervalSinceNow:)(v45, v46);
      v47 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v6, 0, 1, v47);
      objc_sync_enter(v1);
      sub_10001355C((uint64_t)v6, v31, &qword_100105F48);
      v48 = (uint64_t)&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__suggestedRefreshDate];
      swift_beginAccess(&v1[OBJC_IVAR____TtC17TVWidgetExtension22TVWidgetFetchOperation__suggestedRefreshDate], aBlock, 33, 0);
      sub_10006AFA8(v31, v48, &qword_100105F48);
      swift_endAccess(aBlock);
      objc_sync_exit(v1);
      sub_1000135A0((uint64_t)v6, &qword_100105F48);
      sub_10001A078();
      return;
    }
    goto LABEL_24;
  }
  v24 = 0;
  v25 = 3;
LABEL_16:
  v49 = (void *)objc_opt_self(TVUNUpNextWidgetDataSource);
  v50 = swift_allocObject(&unk_1000FE0C8, 24, 7);
  swift_unknownObjectWeakInit(v50 + 16, v1);
  v51 = swift_allocObject(&unk_1000FE0F0, 32, 7);
  *(_QWORD *)(v51 + 16) = v50;
  *(_QWORD *)(v51 + 24) = v25;
  aBlock[4] = sub_10008A3AC;
  v73 = v51;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10008A1FC;
  aBlock[3] = &unk_1000FE108;
  v52 = _Block_copy(aBlock);
  swift_release(v73);
  objc_msgSend(v49, "fetchUpNext:withCompletion:", v24, v52);
  _Block_release(v52);
}

