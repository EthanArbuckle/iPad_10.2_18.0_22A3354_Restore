uint64_t sub_1001EFD20(float a1, double a2, double a3, double a4, __n128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  int v10;
  uint64_t result;
  int v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x8_t v15;
  int8x8_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  int8x16_t v19;
  int8x16_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  int16x8_t v23;
  int16x8_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  int v33;
  __int128 v34;
  int v35;
  int v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x8_t v42;
  int8x8_t v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  int8x16_t v46;
  int8x16_t v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  int16x8_t v50;
  int16x8_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  int v58;
  __int128 v59;
  int v60;
  __int128 v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int8x8_t v90;
  int8x8_t v91;
  int8x8_t v92;
  int8x8_t v93;
  int8x8_t v94;
  int8x8_t v95;
  int8x8_t v96;
  int8x8_t v97;
  int8x8_t v98;
  int8x8_t v99;
  int8x8_t v100;
  int8x8_t v101;
  int8x8_t v102;
  int8x8_t v103;
  int8x8_t v104;
  int8x8_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  a5.n128_f32[0] = a1;
  if (a1 == 1.0)
  {
    v10 = a10 - 8;
    if (a10 >= 8)
    {
      result = 0;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      do
      {
        v15 = *(int8x8_t *)(a7 + result);
        v16 = *(int8x8_t *)(a8 + result);
        v17 = atomic_load((unsigned __int8 *)qword_10048AA60);
        if ((v17 & 1) == 0)
        {
          v74 = result;
          v106 = a8;
          v114 = a9;
          v122 = a7;
          v82 = v10;
          v90 = *(int8x8_t *)(a7 + result);
          v98 = *(int8x8_t *)(a8 + result);
          v27 = __cxa_guard_acquire(qword_10048AA60);
          *(_QWORD *)&v28 = 0x8000000080000000;
          *((_QWORD *)&v28 + 1) = 0x8000000080000000;
          v15 = v90;
          v16 = v98;
          v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v10 = v82;
          a9 = v114;
          a7 = v122;
          a8 = v106;
          v29 = v27;
          result = v74;
          if (v29)
          {
            xmmword_10048AA50 = v28;
            __cxa_guard_release(qword_10048AA60);
            v15 = v90;
            v16 = v98;
            v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v10 = v82;
            result = v74;
            a9 = v114;
            a7 = v122;
            a8 = v106;
          }
        }
        v18 = atomic_load((unsigned __int8 *)&qword_10048AA80);
        if ((v18 & 1) == 0)
        {
          v75 = result;
          v107 = a8;
          v115 = a9;
          v123 = a7;
          v83 = v10;
          v91 = v15;
          v99 = v16;
          v30 = __cxa_guard_acquire(&qword_10048AA80);
          *(_QWORD *)&v31 = 0x3F0000003F000000;
          *((_QWORD *)&v31 + 1) = 0x3F0000003F000000;
          v15 = v91;
          v16 = v99;
          v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v10 = v83;
          a9 = v115;
          a7 = v123;
          a8 = v107;
          v32 = v30;
          result = v75;
          if (v32)
          {
            xmmword_10048AA70 = v31;
            __cxa_guard_release(&qword_10048AA80);
            v15 = v91;
            v16 = v99;
            v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v10 = v83;
            result = v75;
            a9 = v115;
            a7 = v123;
            a8 = v107;
          }
        }
        v19 = v14[167];
        v20 = v13[165];
        v21 = atomic_load((unsigned __int8 *)qword_10048AA60);
        if ((v21 & 1) == 0)
        {
          v76 = result;
          v108 = a8;
          v116 = a9;
          v124 = a7;
          v84 = v10;
          v92 = v15;
          v100 = v16;
          v64 = v13[165];
          v68 = v14[167];
          v33 = __cxa_guard_acquire(qword_10048AA60);
          v20 = v64;
          v19 = v68;
          *(_QWORD *)&v34 = 0x8000000080000000;
          *((_QWORD *)&v34 + 1) = 0x8000000080000000;
          v15 = v92;
          v16 = v100;
          v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v10 = v84;
          a9 = v116;
          a7 = v124;
          a8 = v108;
          v35 = v33;
          result = v76;
          if (v35)
          {
            xmmword_10048AA50 = v34;
            __cxa_guard_release(qword_10048AA60);
            v20 = v64;
            v19 = v68;
            v15 = v92;
            v16 = v100;
            v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v10 = v84;
            result = v76;
            a9 = v116;
            a7 = v124;
            a8 = v108;
          }
        }
        v22 = atomic_load((unsigned __int8 *)&qword_10048AA80);
        if ((v22 & 1) == 0)
        {
          v77 = result;
          v109 = a8;
          v117 = a9;
          v125 = a7;
          v85 = v10;
          v93 = v15;
          v101 = v16;
          v65 = v20;
          v69 = v19;
          v36 = __cxa_guard_acquire(&qword_10048AA80);
          v20 = v65;
          v19 = v69;
          *(_QWORD *)&v37 = 0x3F0000003F000000;
          *((_QWORD *)&v37 + 1) = 0x3F0000003F000000;
          v15 = v93;
          v16 = v101;
          v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v10 = v85;
          a9 = v117;
          a7 = v125;
          a8 = v109;
          v38 = v36;
          result = v77;
          if (v38)
          {
            xmmword_10048AA70 = v37;
            __cxa_guard_release(&qword_10048AA80);
            v20 = v65;
            v19 = v69;
            v15 = v93;
            v16 = v101;
            v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v10 = v85;
            result = v77;
            a9 = v117;
            a7 = v125;
            a8 = v109;
          }
        }
        v23 = vmovl_s8(v15);
        v24 = vmovl_s8(v16);
        v25 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v23.i8)), vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v24.i8)));
        v26 = vmulq_f32(vcvtq_f32_s32(vmovl_high_s16(v23)), vcvtq_f32_s32(vmovl_high_s16(v24)));
        *(int8x8_t *)(a9 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v25, (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v25), v19)))), vcvtq_s32_f32(vaddq_f32(v26, (float32x4_t)vorrq_s8(vandq_s8(v13[165], (int8x16_t)v26), v14[167])))));
        result += 8;
      }
      while (v10 >= (int)result);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v12 = a10 - 8;
    if (a10 >= 8)
    {
      v39 = 0;
      v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v41 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      do
      {
        v42 = *(int8x8_t *)(a7 + v39);
        v43 = *(int8x8_t *)(a8 + v39);
        v44 = atomic_load((unsigned __int8 *)qword_10048AA60);
        if ((v44 & 1) == 0)
        {
          v110 = a8;
          v118 = a9;
          v126 = a7;
          v78 = v12;
          v86 = v39;
          v94 = *(int8x8_t *)(a7 + v39);
          v102 = *(int8x8_t *)(a8 + v39);
          v70 = a5;
          v54 = __cxa_guard_acquire(qword_10048AA60);
          *(_QWORD *)&v55 = 0x8000000080000000;
          *((_QWORD *)&v55 + 1) = 0x8000000080000000;
          a5 = v70;
          v42 = v94;
          v43 = v102;
          v41 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v39 = v86;
          v12 = v78;
          a9 = v118;
          a7 = v126;
          a8 = v110;
          if (v54)
          {
            xmmword_10048AA50 = v55;
            __cxa_guard_release(qword_10048AA60);
            a5 = v70;
            v42 = v94;
            v43 = v102;
            v41 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v39 = v86;
            v12 = v78;
            a9 = v118;
            a7 = v126;
            a8 = v110;
          }
        }
        v45 = atomic_load((unsigned __int8 *)&qword_10048AA80);
        if ((v45 & 1) == 0)
        {
          v111 = a8;
          v119 = a9;
          v127 = a7;
          v79 = v12;
          v87 = v39;
          v95 = v42;
          v103 = v43;
          v71 = a5;
          v56 = __cxa_guard_acquire(&qword_10048AA80);
          *(_QWORD *)&v57 = 0x3F0000003F000000;
          *((_QWORD *)&v57 + 1) = 0x3F0000003F000000;
          a5 = v71;
          v42 = v95;
          v43 = v103;
          v41 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v39 = v87;
          v12 = v79;
          a9 = v119;
          a7 = v127;
          a8 = v111;
          if (v56)
          {
            xmmword_10048AA70 = v57;
            __cxa_guard_release(&qword_10048AA80);
            a5 = v71;
            v42 = v95;
            v43 = v103;
            v41 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v39 = v87;
            v12 = v79;
            a9 = v119;
            a7 = v127;
            a8 = v111;
          }
        }
        v46 = v41[167];
        v47 = v40[165];
        v48 = atomic_load((unsigned __int8 *)qword_10048AA60);
        if ((v48 & 1) == 0)
        {
          v112 = a8;
          v120 = a9;
          v128 = a7;
          v80 = v12;
          v88 = v39;
          v96 = v42;
          v104 = v43;
          v66 = v41[167];
          v72 = a5;
          v62 = v40[165];
          v58 = __cxa_guard_acquire(qword_10048AA60);
          v47 = v62;
          v46 = v66;
          *(_QWORD *)&v59 = 0x8000000080000000;
          *((_QWORD *)&v59 + 1) = 0x8000000080000000;
          a5 = v72;
          v42 = v96;
          v43 = v104;
          v41 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v39 = v88;
          v12 = v80;
          a9 = v120;
          a7 = v128;
          a8 = v112;
          if (v58)
          {
            xmmword_10048AA50 = v59;
            __cxa_guard_release(qword_10048AA60);
            v47 = v62;
            v46 = v66;
            a5 = v72;
            v42 = v96;
            v43 = v104;
            v41 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v39 = v88;
            v12 = v80;
            a9 = v120;
            a7 = v128;
            a8 = v112;
          }
        }
        v49 = atomic_load((unsigned __int8 *)&qword_10048AA80);
        if ((v49 & 1) == 0)
        {
          v113 = a8;
          v121 = a9;
          v129 = a7;
          v81 = v12;
          v89 = v39;
          v97 = v42;
          v105 = v43;
          v67 = v46;
          v73 = a5;
          v63 = v47;
          v60 = __cxa_guard_acquire(&qword_10048AA80);
          v47 = v63;
          v46 = v67;
          *(_QWORD *)&v61 = 0x3F0000003F000000;
          *((_QWORD *)&v61 + 1) = 0x3F0000003F000000;
          a5 = v73;
          v42 = v97;
          v43 = v105;
          v41 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v39 = v89;
          v12 = v81;
          a9 = v121;
          a7 = v129;
          a8 = v113;
          if (v60)
          {
            xmmword_10048AA70 = v61;
            __cxa_guard_release(&qword_10048AA80);
            v47 = v63;
            v46 = v67;
            a5 = v73;
            v42 = v97;
            v43 = v105;
            v41 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v39 = v89;
            v12 = v81;
            a9 = v121;
            a7 = v129;
            a8 = v113;
          }
        }
        v50 = vmovl_s8(v42);
        v51 = vmovl_s8(v43);
        v52 = vmulq_n_f32(vmulq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v50.i8)), vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v51.i8))), a5.n128_f32[0]);
        v53 = vmulq_n_f32(vmulq_f32(vcvtq_f32_s32(vmovl_high_s16(v50)), vcvtq_f32_s32(vmovl_high_s16(v51))), a5.n128_f32[0]);
        *(int8x8_t *)(a9 + v39) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v52, (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v52), v46)))), vcvtq_s32_f32(vaddq_f32(v53, (float32x4_t)vorrq_s8(vandq_s8(v40[165], (int8x16_t)v53), v41[167])))));
        v39 += 8;
      }
      while (v12 >= (int)v39);
      return v39;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001F041C(__n128 a1, uint64_t a2, uint16x8_t *a3, uint16x8_t *a4, uint16x8_t *a5, int a6)
{
  uint64_t result;
  int v7;
  float32x4_t *v8;
  uint16x8_t v9;
  uint16x8_t v10;
  unsigned __int8 v11;
  float32x4_t v12;
  unsigned __int8 v13;
  __int128 v14;
  int v15;
  __int128 v16;
  int v17;
  int v18;
  float32x4_t *v19;
  uint16x8_t v20;
  uint16x8_t v21;
  unsigned __int8 v22;
  float32x4_t v23;
  unsigned __int8 v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  float32x4_t v29;
  float32x4_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  __n128 v39;
  __n128 v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint16x8_t *v45;
  uint16x8_t *v46;
  uint16x8_t *v47;
  uint16x8_t *v48;
  uint16x8_t *v49;
  uint16x8_t *v50;
  uint16x8_t *v51;
  uint16x8_t *v52;
  uint16x8_t *v53;
  uint16x8_t *v54;
  uint16x8_t *v55;
  uint16x8_t *v56;
  int v57;
  int v58;
  int v59;
  int v60;

  result = 0;
  if (a1.n128_f32[0] == 1.0)
  {
    v7 = a6 - 8;
    if (a6 >= 8)
    {
      v8 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      do
      {
        v9 = *a3;
        v10 = *a4;
        v11 = atomic_load((unsigned __int8 *)qword_10048AA40);
        if ((v11 & 1) == 0)
        {
          v57 = result;
          v45 = a4;
          v49 = a5;
          v53 = a3;
          v41 = v7;
          v33 = *a4;
          v37 = *a3;
          LODWORD(result) = __cxa_guard_acquire(qword_10048AA40);
          v10 = v33;
          v9 = v37;
          *(_QWORD *)&v14 = 0x3F0000003F000000;
          *((_QWORD *)&v14 + 1) = 0x3F0000003F000000;
          v8 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v7 = v41;
          a5 = v49;
          a3 = v53;
          a4 = v45;
          v15 = result;
          LODWORD(result) = v57;
          if (v15)
          {
            xmmword_10048AA30 = v14;
            __cxa_guard_release(qword_10048AA40);
            v10 = v33;
            v9 = v37;
            v8 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v7 = v41;
            LODWORD(result) = v57;
            a5 = v49;
            a3 = v53;
            a4 = v45;
          }
        }
        v12 = v8[163];
        v13 = atomic_load((unsigned __int8 *)qword_10048AA40);
        if ((v13 & 1) == 0)
        {
          v58 = result;
          v46 = a4;
          v50 = a5;
          v54 = a3;
          v42 = v7;
          v34 = v10;
          v38 = v9;
          v30 = v8[163];
          LODWORD(result) = __cxa_guard_acquire(qword_10048AA40);
          v12 = v30;
          v10 = v34;
          v9 = v38;
          *(_QWORD *)&v16 = 0x3F0000003F000000;
          *((_QWORD *)&v16 + 1) = 0x3F0000003F000000;
          v8 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v7 = v42;
          a5 = v50;
          a3 = v54;
          a4 = v46;
          v17 = result;
          LODWORD(result) = v58;
          if (v17)
          {
            xmmword_10048AA30 = v16;
            __cxa_guard_release(qword_10048AA40);
            v12 = v30;
            v10 = v34;
            v9 = v38;
            v8 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v7 = v42;
            LODWORD(result) = v58;
            a5 = v50;
            a3 = v54;
            a4 = v46;
          }
        }
        *a5++ = vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v9.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v10.i8))), v12))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_high_u16(v9)), vcvtq_f32_u32(vmovl_high_u16(v10))), v8[163])));
        ++a4;
        ++a3;
        result = (result + 8);
      }
      while (v7 >= (int)result);
    }
  }
  else
  {
    v18 = a6 - 8;
    if (a6 >= 8)
    {
      v19 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      do
      {
        v20 = *a3;
        v21 = *a4;
        v22 = atomic_load((unsigned __int8 *)qword_10048AA40);
        if ((v22 & 1) == 0)
        {
          v59 = result;
          v47 = a4;
          v51 = a5;
          v55 = a3;
          v43 = v18;
          v35 = *a3;
          v39 = a1;
          v31 = *a4;
          LODWORD(result) = __cxa_guard_acquire(qword_10048AA40);
          v21 = v31;
          v20 = v35;
          *(_QWORD *)&v25 = 0x3F0000003F000000;
          *((_QWORD *)&v25 + 1) = 0x3F0000003F000000;
          a1 = v39;
          v19 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v18 = v43;
          a5 = v51;
          a3 = v55;
          a4 = v47;
          v26 = result;
          LODWORD(result) = v59;
          if (v26)
          {
            xmmword_10048AA30 = v25;
            __cxa_guard_release(qword_10048AA40);
            v21 = v31;
            v20 = v35;
            a1 = v39;
            v19 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v18 = v43;
            LODWORD(result) = v59;
            a5 = v51;
            a3 = v55;
            a4 = v47;
          }
        }
        v23 = v19[163];
        v24 = atomic_load((unsigned __int8 *)qword_10048AA40);
        if ((v24 & 1) == 0)
        {
          v60 = result;
          v48 = a4;
          v52 = a5;
          v56 = a3;
          v44 = v18;
          v36 = v20;
          v40 = a1;
          v29 = v19[163];
          v32 = v21;
          LODWORD(result) = __cxa_guard_acquire(qword_10048AA40);
          v23 = v29;
          v21 = v32;
          v20 = v36;
          a1 = v40;
          *(_QWORD *)&v27 = 0x3F0000003F000000;
          *((_QWORD *)&v27 + 1) = 0x3F0000003F000000;
          v19 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v18 = v44;
          a5 = v52;
          a3 = v56;
          a4 = v48;
          v28 = result;
          LODWORD(result) = v60;
          if (v28)
          {
            xmmword_10048AA30 = v27;
            __cxa_guard_release(qword_10048AA40);
            v23 = v29;
            v21 = v32;
            v20 = v36;
            a1 = v40;
            v19 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v18 = v44;
            LODWORD(result) = v60;
            a5 = v52;
            a3 = v56;
            a4 = v48;
          }
        }
        *a5++ = vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_n_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v20.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v21.i8))), a1.n128_f32[0]), v23))), vcvtq_u32_f32(vaddq_f32(vmulq_n_f32(vmulq_f32(vcvtq_f32_u32(vmovl_high_u16(v20)), vcvtq_f32_u32(vmovl_high_u16(v21))), a1.n128_f32[0]), v19[163])));
        ++a4;
        ++a3;
        result = (result + 8);
      }
      while (v18 >= (int)result);
    }
  }
  return result;
}

uint64_t sub_1001F0770(__n128 a1, uint64_t a2, int16x8_t *a3, int16x8_t *a4, int16x8_t *a5, int a6)
{
  uint64_t result;
  int v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int16x8_t v10;
  int16x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  float32x4_t v18;
  float32x4_t v19;
  __int128 v20;
  int v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  int v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int16x8_t v31;
  int16x8_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  int8x16_t v35;
  int8x16_t v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  float32x4_t v39;
  float32x4_t v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  __int128 v47;
  int v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int16x8_t *v85;
  int16x8_t *v86;
  int16x8_t *v87;
  int16x8_t *v88;
  int16x8_t *v89;
  int16x8_t *v90;
  int16x8_t *v91;
  int16x8_t *v92;
  int16x8_t *v93;
  int16x8_t *v94;
  int16x8_t *v95;
  int16x8_t *v96;
  int16x8_t *v97;
  int16x8_t *v98;
  int16x8_t *v99;
  int16x8_t *v100;
  int16x8_t *v101;
  int16x8_t *v102;
  int16x8_t *v103;
  int16x8_t *v104;
  int16x8_t *v105;
  int16x8_t *v106;
  int16x8_t *v107;
  int16x8_t *v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;

  result = 0;
  if (a1.n128_f32[0] == 1.0)
  {
    v7 = a6 - 8;
    if (a6 >= 8)
    {
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      do
      {
        v10 = *a3;
        v11 = *a4;
        v12 = atomic_load((unsigned __int8 *)qword_10048AA60);
        if ((v12 & 1) == 0)
        {
          v109 = result;
          v85 = a4;
          v93 = a5;
          v101 = a3;
          v77 = v7;
          v61 = *a4;
          v69 = *a3;
          LODWORD(result) = __cxa_guard_acquire(qword_10048AA60);
          v11 = v61;
          v10 = v69;
          *(_QWORD *)&v20 = 0x8000000080000000;
          *((_QWORD *)&v20 + 1) = 0x8000000080000000;
          v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v7 = v77;
          a5 = v93;
          a3 = v101;
          a4 = v85;
          v21 = result;
          LODWORD(result) = v109;
          if (v21)
          {
            xmmword_10048AA50 = v20;
            __cxa_guard_release(qword_10048AA60);
            v11 = v61;
            v10 = v69;
            v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v7 = v77;
            LODWORD(result) = v109;
            a5 = v93;
            a3 = v101;
            a4 = v85;
          }
        }
        v13 = atomic_load((unsigned __int8 *)&qword_10048AA80);
        if ((v13 & 1) == 0)
        {
          v110 = result;
          v86 = a4;
          v94 = a5;
          v102 = a3;
          v78 = v7;
          v62 = v11;
          v70 = v10;
          LODWORD(result) = __cxa_guard_acquire(&qword_10048AA80);
          v11 = v62;
          v10 = v70;
          *(_QWORD *)&v22 = 0x3F0000003F000000;
          *((_QWORD *)&v22 + 1) = 0x3F0000003F000000;
          v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v7 = v78;
          a5 = v94;
          a3 = v102;
          a4 = v86;
          v23 = result;
          LODWORD(result) = v110;
          if (v23)
          {
            xmmword_10048AA70 = v22;
            __cxa_guard_release(&qword_10048AA80);
            v11 = v62;
            v10 = v70;
            v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v7 = v78;
            LODWORD(result) = v110;
            a5 = v94;
            a3 = v102;
            a4 = v86;
          }
        }
        v14 = v9[167];
        v15 = v8[165];
        v16 = atomic_load((unsigned __int8 *)qword_10048AA60);
        if ((v16 & 1) == 0)
        {
          v111 = result;
          v87 = a4;
          v95 = a5;
          v103 = a3;
          v79 = v7;
          v63 = v11;
          v71 = v10;
          v51 = v8[165];
          v55 = v9[167];
          LODWORD(result) = __cxa_guard_acquire(qword_10048AA60);
          v15 = v51;
          v14 = v55;
          v11 = v63;
          v10 = v71;
          *(_QWORD *)&v24 = 0x8000000080000000;
          *((_QWORD *)&v24 + 1) = 0x8000000080000000;
          v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v7 = v79;
          a5 = v95;
          a3 = v103;
          a4 = v87;
          v25 = result;
          LODWORD(result) = v111;
          if (v25)
          {
            xmmword_10048AA50 = v24;
            __cxa_guard_release(qword_10048AA60);
            v15 = v51;
            v14 = v55;
            v11 = v63;
            v10 = v71;
            v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v7 = v79;
            LODWORD(result) = v111;
            a5 = v95;
            a3 = v103;
            a4 = v87;
          }
        }
        v17 = atomic_load((unsigned __int8 *)&qword_10048AA80);
        if ((v17 & 1) == 0)
        {
          v112 = result;
          v88 = a4;
          v96 = a5;
          v104 = a3;
          v80 = v7;
          v64 = v11;
          v72 = v10;
          v52 = v15;
          v56 = v14;
          LODWORD(result) = __cxa_guard_acquire(&qword_10048AA80);
          v15 = v52;
          v14 = v56;
          v11 = v64;
          v10 = v72;
          *(_QWORD *)&v26 = 0x3F0000003F000000;
          *((_QWORD *)&v26 + 1) = 0x3F0000003F000000;
          v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v7 = v80;
          a5 = v96;
          a3 = v104;
          a4 = v88;
          v27 = result;
          LODWORD(result) = v112;
          if (v27)
          {
            xmmword_10048AA70 = v26;
            __cxa_guard_release(&qword_10048AA80);
            v15 = v52;
            v14 = v56;
            v11 = v64;
            v10 = v72;
            v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v7 = v80;
            LODWORD(result) = v112;
            a5 = v96;
            a3 = v104;
            a4 = v88;
          }
        }
        v18 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v10.i8)), vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v11.i8)));
        v19 = vmulq_f32(vcvtq_f32_s32(vmovl_high_s16(v10)), vcvtq_f32_s32(vmovl_high_s16(v11)));
        *a5++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v18), v14)))), vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v8[165], (int8x16_t)v19), v9[167]))));
        ++a4;
        ++a3;
        result = (result + 8);
      }
      while (v7 >= (int)result);
    }
  }
  else
  {
    v28 = a6 - 8;
    if (a6 >= 8)
    {
      v29 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v30 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      do
      {
        v31 = *a3;
        v32 = *a4;
        v33 = atomic_load((unsigned __int8 *)qword_10048AA60);
        if ((v33 & 1) == 0)
        {
          v113 = result;
          v89 = a4;
          v97 = a5;
          v105 = a3;
          v81 = v28;
          v65 = *a3;
          v73 = a1;
          v57 = *a4;
          LODWORD(result) = __cxa_guard_acquire(qword_10048AA60);
          v32 = v57;
          v31 = v65;
          *(_QWORD *)&v41 = 0x8000000080000000;
          *((_QWORD *)&v41 + 1) = 0x8000000080000000;
          a1 = v73;
          v30 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v29 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v28 = v81;
          a5 = v97;
          a3 = v105;
          a4 = v89;
          v42 = result;
          LODWORD(result) = v113;
          if (v42)
          {
            xmmword_10048AA50 = v41;
            __cxa_guard_release(qword_10048AA60);
            v32 = v57;
            v31 = v65;
            a1 = v73;
            v30 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v29 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v28 = v81;
            LODWORD(result) = v113;
            a5 = v97;
            a3 = v105;
            a4 = v89;
          }
        }
        v34 = atomic_load((unsigned __int8 *)&qword_10048AA80);
        if ((v34 & 1) == 0)
        {
          v114 = result;
          v90 = a4;
          v98 = a5;
          v106 = a3;
          v82 = v28;
          v66 = v31;
          v74 = a1;
          v58 = v32;
          LODWORD(result) = __cxa_guard_acquire(&qword_10048AA80);
          v32 = v58;
          v31 = v66;
          *(_QWORD *)&v43 = 0x3F0000003F000000;
          *((_QWORD *)&v43 + 1) = 0x3F0000003F000000;
          a1 = v74;
          v30 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v29 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v28 = v82;
          a5 = v98;
          a3 = v106;
          a4 = v90;
          v44 = result;
          LODWORD(result) = v114;
          if (v44)
          {
            xmmword_10048AA70 = v43;
            __cxa_guard_release(&qword_10048AA80);
            v32 = v58;
            v31 = v66;
            a1 = v74;
            v30 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v29 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v28 = v82;
            LODWORD(result) = v114;
            a5 = v98;
            a3 = v106;
            a4 = v90;
          }
        }
        v35 = v30[167];
        v36 = v29[165];
        v37 = atomic_load((unsigned __int8 *)qword_10048AA60);
        if ((v37 & 1) == 0)
        {
          v115 = result;
          v91 = a4;
          v99 = a5;
          v107 = a3;
          v83 = v28;
          v67 = v31;
          v75 = a1;
          v53 = v30[167];
          v59 = v32;
          v49 = v29[165];
          LODWORD(result) = __cxa_guard_acquire(qword_10048AA60);
          v36 = v49;
          v35 = v53;
          v32 = v59;
          v31 = v67;
          *(_QWORD *)&v45 = 0x8000000080000000;
          *((_QWORD *)&v45 + 1) = 0x8000000080000000;
          a1 = v75;
          v30 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v29 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v28 = v83;
          a5 = v99;
          a3 = v107;
          a4 = v91;
          v46 = result;
          LODWORD(result) = v115;
          if (v46)
          {
            xmmword_10048AA50 = v45;
            __cxa_guard_release(qword_10048AA60);
            v36 = v49;
            v35 = v53;
            v32 = v59;
            v31 = v67;
            a1 = v75;
            v30 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v29 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v28 = v83;
            LODWORD(result) = v115;
            a5 = v99;
            a3 = v107;
            a4 = v91;
          }
        }
        v38 = atomic_load((unsigned __int8 *)&qword_10048AA80);
        if ((v38 & 1) == 0)
        {
          v116 = result;
          v92 = a4;
          v100 = a5;
          v108 = a3;
          v84 = v28;
          v68 = v31;
          v76 = a1;
          v54 = v35;
          v60 = v32;
          v50 = v36;
          LODWORD(result) = __cxa_guard_acquire(&qword_10048AA80);
          v36 = v50;
          v35 = v54;
          v32 = v60;
          v31 = v68;
          *(_QWORD *)&v47 = 0x3F0000003F000000;
          *((_QWORD *)&v47 + 1) = 0x3F0000003F000000;
          a1 = v76;
          v30 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v29 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v28 = v84;
          a5 = v100;
          a3 = v108;
          a4 = v92;
          v48 = result;
          LODWORD(result) = v116;
          if (v48)
          {
            xmmword_10048AA70 = v47;
            __cxa_guard_release(&qword_10048AA80);
            v36 = v50;
            v35 = v54;
            v32 = v60;
            v31 = v68;
            a1 = v76;
            v30 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v29 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v28 = v84;
            LODWORD(result) = v116;
            a5 = v100;
            a3 = v108;
            a4 = v92;
          }
        }
        v39 = vmulq_n_f32(vmulq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v31.i8)), vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v32.i8))), a1.n128_f32[0]);
        v40 = vmulq_n_f32(vmulq_f32(vcvtq_f32_s32(vmovl_high_s16(v31)), vcvtq_f32_s32(vmovl_high_s16(v32))), a1.n128_f32[0]);
        *a5++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v39, (float32x4_t)vorrq_s8(vandq_s8(v36, (int8x16_t)v39), v35)))), vcvtq_s32_f32(vaddq_f32(v40, (float32x4_t)vorrq_s8(vandq_s8(v29[165], (int8x16_t)v40), v30[167]))));
        ++a4;
        ++a3;
        result = (result + 8);
      }
      while (v28 >= (int)result);
    }
  }
  return result;
}

uint64_t sub_1001F0E08(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, double a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  int v11;
  uint64_t result;
  int8x16_t *v13;
  int8x16_t *v14;
  uint8x8_t v15;
  int8x8_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  int8x16_t v19;
  int8x16_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint16x8_t v23;
  uint16x8_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  int v33;
  __int128 v34;
  int v35;
  int v36;
  __int128 v37;
  int v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int8x8_t v67;
  int8x8_t v68;
  int8x8_t v69;
  int8x8_t v70;
  uint8x8_t v71;
  uint8x8_t v72;
  uint8x8_t v73;
  uint8x8_t v74;

  if (!*a1)
    return 0;
  v11 = a5 - 8;
  if (a5 < 8)
    return 0;
  result = 0;
  a11.n128_f32[0] = a6;
  v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v15 = *(uint8x8_t *)(a2 + result);
    v16 = *(int8x8_t *)(a3 + result);
    v17 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v17 & 1) == 0)
    {
      v59 = result;
      v51 = a4;
      v47 = a3;
      v55 = a2;
      v63 = v11;
      v67 = *(int8x8_t *)(a3 + result);
      v71 = *(uint8x8_t *)(a2 + result);
      v43 = a11;
      v27 = __cxa_guard_acquire(qword_10048AA00);
      a11 = v43;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      v16 = v67;
      v15 = v71;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v63;
      a4 = v51;
      a2 = v55;
      a3 = v47;
      v29 = v27;
      result = v59;
      if (v29)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        a11 = v43;
        v16 = v67;
        v15 = v71;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v63;
        a2 = v55;
        result = v59;
        a3 = v47;
        a4 = v51;
      }
    }
    v18 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v18 & 1) == 0)
    {
      v60 = result;
      v52 = a4;
      v48 = a3;
      v56 = a2;
      v64 = v11;
      v68 = v16;
      v72 = v15;
      v44 = a11;
      v30 = __cxa_guard_acquire(qword_10048AA20);
      a11 = v44;
      *(_QWORD *)&v31 = 0x3F0000003F000000;
      *((_QWORD *)&v31 + 1) = 0x3F0000003F000000;
      v16 = v68;
      v15 = v72;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v64;
      a4 = v52;
      a2 = v56;
      a3 = v48;
      v32 = v30;
      result = v60;
      if (v32)
      {
        xmmword_10048AA10 = v31;
        __cxa_guard_release(qword_10048AA20);
        a11 = v44;
        v16 = v68;
        v15 = v72;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v64;
        a2 = v56;
        result = v60;
        a3 = v48;
        a4 = v52;
      }
    }
    v19 = v14[161];
    v20 = v13[159];
    v21 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v21 & 1) == 0)
    {
      v61 = result;
      v53 = a4;
      v49 = a3;
      v57 = a2;
      v65 = v11;
      v69 = v16;
      v73 = v15;
      v41 = v14[161];
      v45 = a11;
      v39 = v13[159];
      v33 = __cxa_guard_acquire(qword_10048AA00);
      v20 = v39;
      v19 = v41;
      a11 = v45;
      *(_QWORD *)&v34 = 0x8000000080000000;
      *((_QWORD *)&v34 + 1) = 0x8000000080000000;
      v16 = v69;
      v15 = v73;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v65;
      a4 = v53;
      a2 = v57;
      a3 = v49;
      v35 = v33;
      result = v61;
      if (v35)
      {
        xmmword_10048A9F0 = v34;
        __cxa_guard_release(qword_10048AA00);
        v20 = v39;
        v19 = v41;
        a11 = v45;
        v16 = v69;
        v15 = v73;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v65;
        a2 = v57;
        result = v61;
        a3 = v49;
        a4 = v53;
      }
    }
    v22 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v22 & 1) == 0)
    {
      v62 = result;
      v54 = a4;
      v50 = a3;
      v58 = a2;
      v66 = v11;
      v70 = v16;
      v74 = v15;
      v42 = v19;
      v46 = a11;
      v40 = v20;
      v36 = __cxa_guard_acquire(qword_10048AA20);
      v20 = v40;
      v19 = v42;
      a11 = v46;
      *(_QWORD *)&v37 = 0x3F0000003F000000;
      *((_QWORD *)&v37 + 1) = 0x3F0000003F000000;
      v16 = v70;
      v15 = v74;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v66;
      a4 = v54;
      a2 = v58;
      a3 = v50;
      v38 = v36;
      result = v62;
      if (v38)
      {
        xmmword_10048AA10 = v37;
        __cxa_guard_release(qword_10048AA20);
        v20 = v40;
        v19 = v42;
        a11 = v46;
        v16 = v70;
        v15 = v74;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v66;
        a2 = v58;
        result = v62;
        a3 = v50;
        a4 = v54;
      }
    }
    v23 = vmovl_u8(v15);
    v24 = vmovl_u8((uint8x8_t)v16);
    v25 = vdivq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v23.i8)), a11.n128_f32[0]), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v24.i8)));
    v26 = vdivq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v23)), a11.n128_f32[0]), vcvtq_f32_u32(vmovl_high_u16(v24)));
    *(uint8x8_t *)(a4 + result) = vqmovn_u16((uint16x8_t)vbicq_s8((int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v25, (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v25), v19)))), vcvtq_s32_f32(vaddq_f32(v26, (float32x4_t)vorrq_s8(vandq_s8(v13[159], (int8x16_t)v26), v14[161])))), (int8x16_t)vmovl_s8(vceqz_s8(v16))));
    result += 8;
  }
  while (v11 >= (int)result);
  return result;
}

uint64_t sub_1001F11D8(_BYTE *a1, uint64_t a2, uint64_t a3, int a4, double a5)
{
  int v5;
  uint64_t result;
  float32x4_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int8x8_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int8x16_t v13;
  int8x16_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint16x8_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  __int128 v21;
  int v22;
  int v23;
  __int128 v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int8x8_t v56;
  int8x8_t v57;
  int8x8_t v58;
  int8x8_t v59;

  if (!*a1)
    return 0;
  v5 = a4 - 8;
  if (a4 < 8)
    return 0;
  result = 0;
  *(float *)&a5 = a5;
  v7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
  v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v10 = *(int8x8_t *)(a2 + result);
    v11 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v11 & 1) == 0)
    {
      v44 = a3;
      v48 = result;
      v40 = a2;
      v52 = v5;
      v56 = *(int8x8_t *)(a2 + result);
      v36 = v7;
      v20 = __cxa_guard_acquire(qword_10048AA00);
      v7 = v36;
      *(_QWORD *)&v21 = 0x8000000080000000;
      *((_QWORD *)&v21 + 1) = 0x8000000080000000;
      v10 = v56;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v5 = v52;
      a2 = v40;
      a3 = v44;
      v22 = v20;
      result = v48;
      if (v22)
      {
        xmmword_10048A9F0 = v21;
        __cxa_guard_release(qword_10048AA00);
        v7 = v36;
        v10 = v56;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v5 = v52;
        a2 = v40;
        a3 = v44;
        result = v48;
      }
    }
    v12 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v12 & 1) == 0)
    {
      v45 = a3;
      v49 = result;
      v41 = a2;
      v53 = v5;
      v57 = v10;
      v37 = v7;
      v23 = __cxa_guard_acquire(qword_10048AA20);
      v7 = v37;
      *(_QWORD *)&v24 = 0x3F0000003F000000;
      *((_QWORD *)&v24 + 1) = 0x3F0000003F000000;
      v10 = v57;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v5 = v53;
      a2 = v41;
      a3 = v45;
      v25 = v23;
      result = v49;
      if (v25)
      {
        xmmword_10048AA10 = v24;
        __cxa_guard_release(qword_10048AA20);
        v7 = v37;
        v10 = v57;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v5 = v53;
        a2 = v41;
        a3 = v45;
        result = v49;
      }
    }
    v13 = v9[161];
    v14 = v8[159];
    v15 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v15 & 1) == 0)
    {
      v46 = a3;
      v50 = result;
      v42 = a2;
      v54 = v5;
      v58 = v10;
      v34 = v9[161];
      v38 = v7;
      v32 = v8[159];
      v26 = __cxa_guard_acquire(qword_10048AA00);
      v14 = v32;
      v13 = v34;
      v7 = v38;
      *(_QWORD *)&v27 = 0x8000000080000000;
      *((_QWORD *)&v27 + 1) = 0x8000000080000000;
      v10 = v58;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v5 = v54;
      a2 = v42;
      a3 = v46;
      v28 = v26;
      result = v50;
      if (v28)
      {
        xmmword_10048A9F0 = v27;
        __cxa_guard_release(qword_10048AA00);
        v14 = v32;
        v13 = v34;
        v7 = v38;
        v10 = v58;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v5 = v54;
        a2 = v42;
        a3 = v46;
        result = v50;
      }
    }
    v16 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v16 & 1) == 0)
    {
      v47 = a3;
      v51 = result;
      v43 = a2;
      v55 = v5;
      v59 = v10;
      v35 = v13;
      v39 = v7;
      v33 = v14;
      v29 = __cxa_guard_acquire(qword_10048AA20);
      v14 = v33;
      v13 = v35;
      v7 = v39;
      *(_QWORD *)&v30 = 0x3F0000003F000000;
      *((_QWORD *)&v30 + 1) = 0x3F0000003F000000;
      v10 = v59;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v5 = v55;
      a2 = v43;
      a3 = v47;
      v31 = v29;
      result = v51;
      if (v31)
      {
        xmmword_10048AA10 = v30;
        __cxa_guard_release(qword_10048AA20);
        v14 = v33;
        v13 = v35;
        v7 = v39;
        v10 = v59;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v5 = v55;
        a2 = v43;
        a3 = v47;
        result = v51;
      }
    }
    v17 = vmovl_u8((uint8x8_t)v10);
    v18 = vdivq_f32(v7, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v17.i8)));
    v19 = vdivq_f32(v7, vcvtq_f32_u32(vmovl_high_u16(v17)));
    *(uint8x8_t *)(a3 + result) = vqmovn_u16((uint16x8_t)vbicq_s8((int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v14, (int8x16_t)v18), v13)))), vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v8[159], (int8x16_t)v19), v9[161])))), (int8x16_t)vmovl_s8(vceqz_s8(v10))));
    result += 8;
  }
  while (v5 >= (int)result);
  return result;
}

uint64_t sub_1001F154C(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, double a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  int v11;
  uint64_t result;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x8_t v15;
  int8x8_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  int8x16_t v19;
  int8x16_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  int16x8_t v23;
  int16x8_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  int v33;
  __int128 v34;
  int v35;
  int v36;
  __int128 v37;
  int v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int8x8_t v67;
  int8x8_t v68;
  int8x8_t v69;
  int8x8_t v70;
  int8x8_t v71;
  int8x8_t v72;
  int8x8_t v73;
  int8x8_t v74;

  if (!*a1)
    return 0;
  v11 = a5 - 8;
  if (a5 < 8)
    return 0;
  result = 0;
  a11.n128_f32[0] = a6;
  v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v15 = *(int8x8_t *)(a2 + result);
    v16 = *(int8x8_t *)(a3 + result);
    v17 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v17 & 1) == 0)
    {
      v59 = result;
      v51 = a4;
      v47 = a3;
      v55 = a2;
      v63 = v11;
      v67 = *(int8x8_t *)(a3 + result);
      v71 = *(int8x8_t *)(a2 + result);
      v43 = a11;
      v27 = __cxa_guard_acquire(qword_10048AA00);
      a11 = v43;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      v16 = v67;
      v15 = v71;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v63;
      a4 = v51;
      a2 = v55;
      a3 = v47;
      v29 = v27;
      result = v59;
      if (v29)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        a11 = v43;
        v16 = v67;
        v15 = v71;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v63;
        a2 = v55;
        result = v59;
        a3 = v47;
        a4 = v51;
      }
    }
    v18 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v18 & 1) == 0)
    {
      v60 = result;
      v52 = a4;
      v48 = a3;
      v56 = a2;
      v64 = v11;
      v68 = v16;
      v72 = v15;
      v44 = a11;
      v30 = __cxa_guard_acquire(qword_10048AA20);
      a11 = v44;
      *(_QWORD *)&v31 = 0x3F0000003F000000;
      *((_QWORD *)&v31 + 1) = 0x3F0000003F000000;
      v16 = v68;
      v15 = v72;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v64;
      a4 = v52;
      a2 = v56;
      a3 = v48;
      v32 = v30;
      result = v60;
      if (v32)
      {
        xmmword_10048AA10 = v31;
        __cxa_guard_release(qword_10048AA20);
        a11 = v44;
        v16 = v68;
        v15 = v72;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v64;
        a2 = v56;
        result = v60;
        a3 = v48;
        a4 = v52;
      }
    }
    v19 = v14[161];
    v20 = v13[159];
    v21 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v21 & 1) == 0)
    {
      v61 = result;
      v53 = a4;
      v49 = a3;
      v57 = a2;
      v65 = v11;
      v69 = v16;
      v73 = v15;
      v41 = v14[161];
      v45 = a11;
      v39 = v13[159];
      v33 = __cxa_guard_acquire(qword_10048AA00);
      v20 = v39;
      v19 = v41;
      a11 = v45;
      *(_QWORD *)&v34 = 0x8000000080000000;
      *((_QWORD *)&v34 + 1) = 0x8000000080000000;
      v16 = v69;
      v15 = v73;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v65;
      a4 = v53;
      a2 = v57;
      a3 = v49;
      v35 = v33;
      result = v61;
      if (v35)
      {
        xmmword_10048A9F0 = v34;
        __cxa_guard_release(qword_10048AA00);
        v20 = v39;
        v19 = v41;
        a11 = v45;
        v16 = v69;
        v15 = v73;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v65;
        a2 = v57;
        result = v61;
        a3 = v49;
        a4 = v53;
      }
    }
    v22 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v22 & 1) == 0)
    {
      v62 = result;
      v54 = a4;
      v50 = a3;
      v58 = a2;
      v66 = v11;
      v70 = v16;
      v74 = v15;
      v42 = v19;
      v46 = a11;
      v40 = v20;
      v36 = __cxa_guard_acquire(qword_10048AA20);
      v20 = v40;
      v19 = v42;
      a11 = v46;
      *(_QWORD *)&v37 = 0x3F0000003F000000;
      *((_QWORD *)&v37 + 1) = 0x3F0000003F000000;
      v16 = v70;
      v15 = v74;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v66;
      a4 = v54;
      a2 = v58;
      a3 = v50;
      v38 = v36;
      result = v62;
      if (v38)
      {
        xmmword_10048AA10 = v37;
        __cxa_guard_release(qword_10048AA20);
        v20 = v40;
        v19 = v42;
        a11 = v46;
        v16 = v70;
        v15 = v74;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v66;
        a2 = v58;
        result = v62;
        a3 = v50;
        a4 = v54;
      }
    }
    v23 = vmovl_s8(v15);
    v24 = vmovl_s8(v16);
    v25 = vdivq_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v23.i8)), a11.n128_f32[0]), vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v24.i8)));
    v26 = vdivq_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v23)), a11.n128_f32[0]), vcvtq_f32_s32(vmovl_high_s16(v24)));
    *(int8x8_t *)(a4 + result) = vqmovn_s16((int16x8_t)vbicq_s8((int8x16_t)vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v25, (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v25), v19)))), vcvtq_s32_f32(vaddq_f32(v26, (float32x4_t)vorrq_s8(vandq_s8(v13[159], (int8x16_t)v26), v14[161])))), (int8x16_t)vmovl_s8(vceqz_s8(v16))));
    result += 8;
  }
  while (v11 >= (int)result);
  return result;
}

uint64_t sub_1001F191C(_BYTE *a1, uint16x8_t *a2, int16x8_t *a3, int8x16_t *a4, int a5, double a6, double a7, double a8, double a9, __n128 a10)
{
  uint64_t result;
  int v11;
  int8x16_t *v12;
  int8x16_t *v13;
  uint16x8_t v14;
  int16x8_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int8x16_t v18;
  int8x16_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  float32x4_t v22;
  float32x4_t v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  int16x8_t *v48;
  int16x8_t *v49;
  int16x8_t *v50;
  int16x8_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  uint16x8_t *v56;
  uint16x8_t *v57;
  uint16x8_t *v58;
  uint16x8_t *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;

  if (!*a1)
    return 0;
  result = 0;
  v11 = a5 - 8;
  if (a5 >= 8)
  {
    a10.n128_f32[0] = a6;
    v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    do
    {
      v14 = *a2;
      v15 = *a3;
      v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
      if ((v16 & 1) == 0)
      {
        v60 = result;
        v64 = v11;
        v48 = a3;
        v52 = a4;
        v56 = a2;
        v44 = a10;
        v36 = *a2;
        v40 = *a3;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
        v14 = v36;
        v15 = v40;
        a10 = v44;
        *(_QWORD *)&v24 = 0x8000000080000000;
        *((_QWORD *)&v24 + 1) = 0x8000000080000000;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a4 = v52;
        a2 = v56;
        a3 = v48;
        v25 = result;
        LODWORD(result) = v60;
        v11 = v64;
        if (v25)
        {
          xmmword_10048A9F0 = v24;
          __cxa_guard_release(qword_10048AA00);
          v14 = v36;
          v15 = v40;
          a10 = v44;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v60;
          v11 = v64;
          a4 = v52;
          a2 = v56;
          a3 = v48;
        }
      }
      v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
      if ((v17 & 1) == 0)
      {
        v61 = result;
        v65 = v11;
        v49 = a3;
        v53 = a4;
        v57 = a2;
        v45 = a10;
        v37 = v14;
        v41 = v15;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
        v14 = v37;
        v15 = v41;
        a10 = v45;
        *(_QWORD *)&v26 = 0x3F0000003F000000;
        *((_QWORD *)&v26 + 1) = 0x3F0000003F000000;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a4 = v53;
        a2 = v57;
        a3 = v49;
        v27 = result;
        LODWORD(result) = v61;
        v11 = v65;
        if (v27)
        {
          xmmword_10048AA10 = v26;
          __cxa_guard_release(qword_10048AA20);
          v14 = v37;
          v15 = v41;
          a10 = v45;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v61;
          v11 = v65;
          a4 = v53;
          a2 = v57;
          a3 = v49;
        }
      }
      v18 = v13[161];
      v19 = v12[159];
      v20 = atomic_load((unsigned __int8 *)qword_10048AA00);
      if ((v20 & 1) == 0)
      {
        v62 = result;
        v66 = v11;
        v50 = a3;
        v54 = a4;
        v58 = a2;
        v46 = a10;
        v38 = v14;
        v42 = v15;
        v32 = v12[159];
        v34 = v13[161];
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
        v19 = v32;
        v18 = v34;
        v14 = v38;
        v15 = v42;
        a10 = v46;
        *(_QWORD *)&v28 = 0x8000000080000000;
        *((_QWORD *)&v28 + 1) = 0x8000000080000000;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a4 = v54;
        a2 = v58;
        a3 = v50;
        v29 = result;
        LODWORD(result) = v62;
        v11 = v66;
        if (v29)
        {
          xmmword_10048A9F0 = v28;
          __cxa_guard_release(qword_10048AA00);
          v19 = v32;
          v18 = v34;
          v14 = v38;
          v15 = v42;
          a10 = v46;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v62;
          v11 = v66;
          a4 = v54;
          a2 = v58;
          a3 = v50;
        }
      }
      v21 = atomic_load((unsigned __int8 *)qword_10048AA20);
      if ((v21 & 1) == 0)
      {
        v63 = result;
        v67 = v11;
        v51 = a3;
        v55 = a4;
        v59 = a2;
        v47 = a10;
        v39 = v14;
        v43 = v15;
        v33 = v19;
        v35 = v18;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
        v19 = v33;
        v18 = v35;
        v14 = v39;
        v15 = v43;
        a10 = v47;
        *(_QWORD *)&v30 = 0x3F0000003F000000;
        *((_QWORD *)&v30 + 1) = 0x3F0000003F000000;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a4 = v55;
        a2 = v59;
        a3 = v51;
        v31 = result;
        LODWORD(result) = v63;
        v11 = v67;
        if (v31)
        {
          xmmword_10048AA10 = v30;
          __cxa_guard_release(qword_10048AA20);
          v19 = v33;
          v18 = v35;
          v14 = v39;
          v15 = v43;
          a10 = v47;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v63;
          v11 = v67;
          a4 = v55;
          a2 = v59;
          a3 = v51;
        }
      }
      v22 = vdivq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v14.i8)), a10.n128_f32[0]), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v15.i8)));
      v23 = vdivq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v14)), a10.n128_f32[0]), vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v15)));
      *a4++ = vbicq_s8((int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v22, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)v22), v18)))), vcvtq_s32_f32(vaddq_f32(v23, (float32x4_t)vorrq_s8(vandq_s8(v12[159], (int8x16_t)v23), v13[161])))), (int8x16_t)vceqzq_s16(v15));
      ++a3;
      ++a2;
      result = (result + 8);
    }
    while (v11 >= (int)result);
  }
  return result;
}

uint64_t sub_1001F1C94(_BYTE *a1, int16x8_t *a2, int16x8_t *a3, int8x16_t *a4, int a5, double a6, double a7, double a8, double a9, __n128 a10)
{
  uint64_t result;
  int v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int16x8_t v14;
  int16x8_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int8x16_t v18;
  int8x16_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  float32x4_t v22;
  float32x4_t v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  int16x8_t *v48;
  int16x8_t *v49;
  int16x8_t *v50;
  int16x8_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  int16x8_t *v56;
  int16x8_t *v57;
  int16x8_t *v58;
  int16x8_t *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;

  if (!*a1)
    return 0;
  result = 0;
  v11 = a5 - 8;
  if (a5 >= 8)
  {
    a10.n128_f32[0] = a6;
    v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    do
    {
      v14 = *a2;
      v15 = *a3;
      v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
      if ((v16 & 1) == 0)
      {
        v60 = result;
        v64 = v11;
        v48 = a3;
        v52 = a4;
        v56 = a2;
        v44 = a10;
        v36 = *a2;
        v40 = *a3;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
        v14 = v36;
        v15 = v40;
        a10 = v44;
        *(_QWORD *)&v24 = 0x8000000080000000;
        *((_QWORD *)&v24 + 1) = 0x8000000080000000;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a4 = v52;
        a2 = v56;
        a3 = v48;
        v25 = result;
        LODWORD(result) = v60;
        v11 = v64;
        if (v25)
        {
          xmmword_10048A9F0 = v24;
          __cxa_guard_release(qword_10048AA00);
          v14 = v36;
          v15 = v40;
          a10 = v44;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v60;
          v11 = v64;
          a4 = v52;
          a2 = v56;
          a3 = v48;
        }
      }
      v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
      if ((v17 & 1) == 0)
      {
        v61 = result;
        v65 = v11;
        v49 = a3;
        v53 = a4;
        v57 = a2;
        v45 = a10;
        v37 = v14;
        v41 = v15;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
        v14 = v37;
        v15 = v41;
        a10 = v45;
        *(_QWORD *)&v26 = 0x3F0000003F000000;
        *((_QWORD *)&v26 + 1) = 0x3F0000003F000000;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a4 = v53;
        a2 = v57;
        a3 = v49;
        v27 = result;
        LODWORD(result) = v61;
        v11 = v65;
        if (v27)
        {
          xmmword_10048AA10 = v26;
          __cxa_guard_release(qword_10048AA20);
          v14 = v37;
          v15 = v41;
          a10 = v45;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v61;
          v11 = v65;
          a4 = v53;
          a2 = v57;
          a3 = v49;
        }
      }
      v18 = v13[161];
      v19 = v12[159];
      v20 = atomic_load((unsigned __int8 *)qword_10048AA00);
      if ((v20 & 1) == 0)
      {
        v62 = result;
        v66 = v11;
        v50 = a3;
        v54 = a4;
        v58 = a2;
        v46 = a10;
        v38 = v14;
        v42 = v15;
        v32 = v12[159];
        v34 = v13[161];
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
        v19 = v32;
        v18 = v34;
        v14 = v38;
        v15 = v42;
        a10 = v46;
        *(_QWORD *)&v28 = 0x8000000080000000;
        *((_QWORD *)&v28 + 1) = 0x8000000080000000;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a4 = v54;
        a2 = v58;
        a3 = v50;
        v29 = result;
        LODWORD(result) = v62;
        v11 = v66;
        if (v29)
        {
          xmmword_10048A9F0 = v28;
          __cxa_guard_release(qword_10048AA00);
          v19 = v32;
          v18 = v34;
          v14 = v38;
          v15 = v42;
          a10 = v46;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v62;
          v11 = v66;
          a4 = v54;
          a2 = v58;
          a3 = v50;
        }
      }
      v21 = atomic_load((unsigned __int8 *)qword_10048AA20);
      if ((v21 & 1) == 0)
      {
        v63 = result;
        v67 = v11;
        v51 = a3;
        v55 = a4;
        v59 = a2;
        v47 = a10;
        v39 = v14;
        v43 = v15;
        v33 = v19;
        v35 = v18;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
        v19 = v33;
        v18 = v35;
        v14 = v39;
        v15 = v43;
        a10 = v47;
        *(_QWORD *)&v30 = 0x3F0000003F000000;
        *((_QWORD *)&v30 + 1) = 0x3F0000003F000000;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a4 = v55;
        a2 = v59;
        a3 = v51;
        v31 = result;
        LODWORD(result) = v63;
        v11 = v67;
        if (v31)
        {
          xmmword_10048AA10 = v30;
          __cxa_guard_release(qword_10048AA20);
          v19 = v33;
          v18 = v35;
          v14 = v39;
          v15 = v43;
          a10 = v47;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v63;
          v11 = v67;
          a4 = v55;
          a2 = v59;
          a3 = v51;
        }
      }
      v22 = vdivq_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v14.i8)), a10.n128_f32[0]), vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v15.i8)));
      v23 = vdivq_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v14)), a10.n128_f32[0]), vcvtq_f32_s32(vmovl_high_s16(v15)));
      *a4++ = vbicq_s8((int8x16_t)vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v22, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)v22), v18)))), vcvtq_s32_f32(vaddq_f32(v23, (float32x4_t)vorrq_s8(vandq_s8(v12[159], (int8x16_t)v23), v13[161])))), (int8x16_t)vceqzq_s16(v15));
      ++a3;
      ++a2;
      result = (result + 8);
    }
    while (v11 >= (int)result);
  }
  return result;
}

uint64_t sub_1001F200C(_BYTE *a1, int32x4_t *a2, int32x4_t *a3, int8x16_t *a4, int a5, double a6, double a7, double a8, double a9, __n128 a10)
{
  uint64_t result;
  int v11;
  int8x16_t *v12;
  int32x4_t *v13;
  int32x4_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  int8x16_t v23;
  int8x16_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  __int128 v36;
  int v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int8x16_t *v70;
  int8x16_t *v71;
  int8x16_t *v72;
  int8x16_t *v73;
  int32x4_t *v74;
  int32x4_t *v75;
  int32x4_t *v76;
  int32x4_t *v77;
  int32x4_t *v78;
  int32x4_t *v79;
  int32x4_t *v80;
  int32x4_t *v81;

  if (!*a1)
    return 0;
  result = 0;
  v11 = a5 - 8;
  if (a5 >= 8)
  {
    v12 = a4 + 1;
    a10.n128_f32[0] = a6;
    v13 = a3 + 1;
    v14 = a2 + 1;
    v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    v16 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    do
    {
      v17 = v14[-1];
      v18 = *v14;
      v19 = v13[-1];
      v20 = *v13;
      v21 = atomic_load((unsigned __int8 *)qword_10048AA00);
      if ((v21 & 1) == 0)
      {
        v62 = v11;
        v66 = result;
        v70 = v12;
        v74 = v13;
        v78 = v14;
        v54 = v13[-1];
        v58 = a10;
        v46 = v14[-1];
        v50 = *v13;
        v42 = *v14;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
        v18 = v42;
        v17 = v46;
        v20 = v50;
        v19 = v54;
        a10 = v58;
        *(_QWORD *)&v30 = 0x8000000080000000;
        *((_QWORD *)&v30 + 1) = 0x8000000080000000;
        v16 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = v74;
        v14 = v78;
        v12 = v70;
        v31 = result;
        v11 = v62;
        LODWORD(result) = v66;
        if (v31)
        {
          xmmword_10048A9F0 = v30;
          __cxa_guard_release(qword_10048AA00);
          v18 = v42;
          v17 = v46;
          v20 = v50;
          v19 = v54;
          a10 = v58;
          v16 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v13 = v74;
          v14 = v78;
          v12 = v70;
          v11 = v62;
          LODWORD(result) = v66;
        }
      }
      v22 = atomic_load((unsigned __int8 *)qword_10048AA20);
      if ((v22 & 1) == 0)
      {
        v63 = v11;
        v67 = result;
        v71 = v12;
        v75 = v13;
        v79 = v14;
        v55 = v19;
        v59 = a10;
        v47 = v17;
        v51 = v20;
        v43 = v18;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
        v18 = v43;
        v17 = v47;
        v20 = v51;
        v19 = v55;
        a10 = v59;
        *(_QWORD *)&v32 = 0x3F0000003F000000;
        *((_QWORD *)&v32 + 1) = 0x3F0000003F000000;
        v16 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = v75;
        v14 = v79;
        v12 = v71;
        v33 = result;
        v11 = v63;
        LODWORD(result) = v67;
        if (v33)
        {
          xmmword_10048AA10 = v32;
          __cxa_guard_release(qword_10048AA20);
          v18 = v43;
          v17 = v47;
          v20 = v51;
          v19 = v55;
          a10 = v59;
          v16 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v13 = v75;
          v14 = v79;
          v12 = v71;
          v11 = v63;
          LODWORD(result) = v67;
        }
      }
      v23 = v16[161];
      v24 = v15[159];
      v25 = atomic_load((unsigned __int8 *)qword_10048AA00);
      if ((v25 & 1) == 0)
      {
        v64 = v11;
        v68 = result;
        v72 = v12;
        v76 = v13;
        v80 = v14;
        v56 = v19;
        v60 = a10;
        v48 = v17;
        v52 = v20;
        v40 = v16[161];
        v44 = v18;
        v38 = v15[159];
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
        v24 = v38;
        v23 = v40;
        v18 = v44;
        v17 = v48;
        v20 = v52;
        v19 = v56;
        a10 = v60;
        *(_QWORD *)&v34 = 0x8000000080000000;
        *((_QWORD *)&v34 + 1) = 0x8000000080000000;
        v16 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = v76;
        v14 = v80;
        v12 = v72;
        v35 = result;
        v11 = v64;
        LODWORD(result) = v68;
        if (v35)
        {
          xmmword_10048A9F0 = v34;
          __cxa_guard_release(qword_10048AA00);
          v24 = v38;
          v23 = v40;
          v18 = v44;
          v17 = v48;
          v20 = v52;
          v19 = v56;
          a10 = v60;
          v16 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v13 = v76;
          v14 = v80;
          v12 = v72;
          v11 = v64;
          LODWORD(result) = v68;
        }
      }
      v26 = atomic_load((unsigned __int8 *)qword_10048AA20);
      if ((v26 & 1) == 0)
      {
        v65 = v11;
        v69 = result;
        v73 = v12;
        v77 = v13;
        v81 = v14;
        v57 = v19;
        v61 = a10;
        v49 = v17;
        v53 = v20;
        v41 = v23;
        v45 = v18;
        v39 = v24;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
        v24 = v39;
        v23 = v41;
        v18 = v45;
        v17 = v49;
        v20 = v53;
        v19 = v57;
        a10 = v61;
        *(_QWORD *)&v36 = 0x3F0000003F000000;
        *((_QWORD *)&v36 + 1) = 0x3F0000003F000000;
        v16 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = v77;
        v14 = v81;
        v12 = v73;
        v37 = result;
        v11 = v65;
        LODWORD(result) = v69;
        if (v37)
        {
          xmmword_10048AA10 = v36;
          __cxa_guard_release(qword_10048AA20);
          v24 = v39;
          v23 = v41;
          v18 = v45;
          v17 = v49;
          v20 = v53;
          v19 = v57;
          a10 = v61;
          v16 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v13 = v77;
          v14 = v81;
          v12 = v73;
          v11 = v65;
          LODWORD(result) = v69;
        }
      }
      v27 = vdivq_f32(vmulq_n_f32(vcvtq_f32_s32(v17), a10.n128_f32[0]), vcvtq_f32_s32(v19));
      v28 = vdivq_f32(vmulq_n_f32(vcvtq_f32_s32(v18), a10.n128_f32[0]), vcvtq_f32_s32(v20));
      v29 = vbicq_s8((int8x16_t)vcvtq_s32_f32(vaddq_f32(v28, (float32x4_t)vorrq_s8(vandq_s8(v15[159], (int8x16_t)v28), v16[161]))), (int8x16_t)vceqzq_s32(v20));
      v12[-1] = vbicq_s8((int8x16_t)vcvtq_s32_f32(vaddq_f32(v27, (float32x4_t)vorrq_s8(vandq_s8(v24, (int8x16_t)v27), v23))), (int8x16_t)vceqzq_s32(v19));
      *v12 = v29;
      v12 += 2;
      v13 += 2;
      v14 += 2;
      result = (result + 8);
    }
    while (v11 >= (int)result);
  }
  return result;
}

uint64_t sub_1001F23B4(_BYTE *a1, uint64_t a2, uint64_t a3, int a4, double a5)
{
  int v5;
  uint64_t result;
  float32x4_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int8x8_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int8x16_t v13;
  int8x16_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  int16x8_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  __int128 v21;
  int v22;
  int v23;
  __int128 v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int8x8_t v56;
  int8x8_t v57;
  int8x8_t v58;
  int8x8_t v59;

  if (!*a1)
    return 0;
  v5 = a4 - 8;
  if (a4 < 8)
    return 0;
  result = 0;
  *(float *)&a5 = a5;
  v7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
  v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v10 = *(int8x8_t *)(a2 + result);
    v11 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v11 & 1) == 0)
    {
      v44 = a3;
      v48 = result;
      v40 = a2;
      v52 = v5;
      v56 = *(int8x8_t *)(a2 + result);
      v36 = v7;
      v20 = __cxa_guard_acquire(qword_10048AA00);
      v7 = v36;
      *(_QWORD *)&v21 = 0x8000000080000000;
      *((_QWORD *)&v21 + 1) = 0x8000000080000000;
      v10 = v56;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v5 = v52;
      a2 = v40;
      a3 = v44;
      v22 = v20;
      result = v48;
      if (v22)
      {
        xmmword_10048A9F0 = v21;
        __cxa_guard_release(qword_10048AA00);
        v7 = v36;
        v10 = v56;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v5 = v52;
        a2 = v40;
        a3 = v44;
        result = v48;
      }
    }
    v12 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v12 & 1) == 0)
    {
      v45 = a3;
      v49 = result;
      v41 = a2;
      v53 = v5;
      v57 = v10;
      v37 = v7;
      v23 = __cxa_guard_acquire(qword_10048AA20);
      v7 = v37;
      *(_QWORD *)&v24 = 0x3F0000003F000000;
      *((_QWORD *)&v24 + 1) = 0x3F0000003F000000;
      v10 = v57;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v5 = v53;
      a2 = v41;
      a3 = v45;
      v25 = v23;
      result = v49;
      if (v25)
      {
        xmmword_10048AA10 = v24;
        __cxa_guard_release(qword_10048AA20);
        v7 = v37;
        v10 = v57;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v5 = v53;
        a2 = v41;
        a3 = v45;
        result = v49;
      }
    }
    v13 = v9[161];
    v14 = v8[159];
    v15 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v15 & 1) == 0)
    {
      v46 = a3;
      v50 = result;
      v42 = a2;
      v54 = v5;
      v58 = v10;
      v34 = v9[161];
      v38 = v7;
      v32 = v8[159];
      v26 = __cxa_guard_acquire(qword_10048AA00);
      v14 = v32;
      v13 = v34;
      v7 = v38;
      *(_QWORD *)&v27 = 0x8000000080000000;
      *((_QWORD *)&v27 + 1) = 0x8000000080000000;
      v10 = v58;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v5 = v54;
      a2 = v42;
      a3 = v46;
      v28 = v26;
      result = v50;
      if (v28)
      {
        xmmword_10048A9F0 = v27;
        __cxa_guard_release(qword_10048AA00);
        v14 = v32;
        v13 = v34;
        v7 = v38;
        v10 = v58;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v5 = v54;
        a2 = v42;
        a3 = v46;
        result = v50;
      }
    }
    v16 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v16 & 1) == 0)
    {
      v47 = a3;
      v51 = result;
      v43 = a2;
      v55 = v5;
      v59 = v10;
      v35 = v13;
      v39 = v7;
      v33 = v14;
      v29 = __cxa_guard_acquire(qword_10048AA20);
      v14 = v33;
      v13 = v35;
      v7 = v39;
      *(_QWORD *)&v30 = 0x3F0000003F000000;
      *((_QWORD *)&v30 + 1) = 0x3F0000003F000000;
      v10 = v59;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v5 = v55;
      a2 = v43;
      a3 = v47;
      v31 = v29;
      result = v51;
      if (v31)
      {
        xmmword_10048AA10 = v30;
        __cxa_guard_release(qword_10048AA20);
        v14 = v33;
        v13 = v35;
        v7 = v39;
        v10 = v59;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v5 = v55;
        a2 = v43;
        a3 = v47;
        result = v51;
      }
    }
    v17 = vmovl_s8(v10);
    v18 = vdivq_f32(v7, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v17.i8)));
    v19 = vdivq_f32(v7, vcvtq_f32_s32(vmovl_high_s16(v17)));
    *(int8x8_t *)(a3 + result) = vqmovn_s16((int16x8_t)vbicq_s8((int8x16_t)vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v14, (int8x16_t)v18), v13)))), vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v8[159], (int8x16_t)v19), v9[161])))), (int8x16_t)vmovl_s8(vceqz_s8(v10))));
    result += 8;
  }
  while (v5 >= (int)result);
  return result;
}

uint64_t sub_1001F2728(_BYTE *a1, int16x8_t *a2, int8x16_t *a3, int a4, double a5)
{
  uint64_t result;
  int v6;
  float32x4_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int16x8_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int8x16_t v13;
  int8x16_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  float32x4_t v17;
  float32x4_t v18;
  __int128 v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int16x8_t *v39;
  int16x8_t *v40;
  int16x8_t *v41;
  int16x8_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;

  if (!*a1)
    return 0;
  result = 0;
  v6 = a4 - 8;
  if (a4 >= 8)
  {
    *(float *)&a5 = a5;
    v7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
    v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    do
    {
      v10 = *a2;
      v11 = atomic_load((unsigned __int8 *)qword_10048AA00);
      if ((v11 & 1) == 0)
      {
        v47 = result;
        v51 = v6;
        v39 = a2;
        v43 = a3;
        v31 = *a2;
        v35 = v7;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
        v10 = v31;
        v7 = v35;
        *(_QWORD *)&v19 = 0x8000000080000000;
        *((_QWORD *)&v19 + 1) = 0x8000000080000000;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a2 = v39;
        a3 = v43;
        v20 = result;
        LODWORD(result) = v47;
        v6 = v51;
        if (v20)
        {
          xmmword_10048A9F0 = v19;
          __cxa_guard_release(qword_10048AA00);
          v10 = v31;
          v7 = v35;
          v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v47;
          v6 = v51;
          a2 = v39;
          a3 = v43;
        }
      }
      v12 = atomic_load((unsigned __int8 *)qword_10048AA20);
      if ((v12 & 1) == 0)
      {
        v48 = result;
        v52 = v6;
        v40 = a2;
        v44 = a3;
        v32 = v10;
        v36 = v7;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
        v10 = v32;
        v7 = v36;
        *(_QWORD *)&v21 = 0x3F0000003F000000;
        *((_QWORD *)&v21 + 1) = 0x3F0000003F000000;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a2 = v40;
        a3 = v44;
        v22 = result;
        LODWORD(result) = v48;
        v6 = v52;
        if (v22)
        {
          xmmword_10048AA10 = v21;
          __cxa_guard_release(qword_10048AA20);
          v10 = v32;
          v7 = v36;
          v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v48;
          v6 = v52;
          a2 = v40;
          a3 = v44;
        }
      }
      v13 = v9[161];
      v14 = v8[159];
      v15 = atomic_load((unsigned __int8 *)qword_10048AA00);
      if ((v15 & 1) == 0)
      {
        v49 = result;
        v53 = v6;
        v41 = a2;
        v45 = a3;
        v33 = v10;
        v37 = v7;
        v27 = v8[159];
        v29 = v9[161];
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
        v14 = v27;
        v13 = v29;
        v10 = v33;
        v7 = v37;
        *(_QWORD *)&v23 = 0x8000000080000000;
        *((_QWORD *)&v23 + 1) = 0x8000000080000000;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a2 = v41;
        a3 = v45;
        v24 = result;
        LODWORD(result) = v49;
        v6 = v53;
        if (v24)
        {
          xmmword_10048A9F0 = v23;
          __cxa_guard_release(qword_10048AA00);
          v14 = v27;
          v13 = v29;
          v10 = v33;
          v7 = v37;
          v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v49;
          v6 = v53;
          a2 = v41;
          a3 = v45;
        }
      }
      v16 = atomic_load((unsigned __int8 *)qword_10048AA20);
      if ((v16 & 1) == 0)
      {
        v50 = result;
        v54 = v6;
        v42 = a2;
        v46 = a3;
        v34 = v10;
        v38 = v7;
        v28 = v14;
        v30 = v13;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
        v14 = v28;
        v13 = v30;
        v10 = v34;
        v7 = v38;
        *(_QWORD *)&v25 = 0x3F0000003F000000;
        *((_QWORD *)&v25 + 1) = 0x3F0000003F000000;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a2 = v42;
        a3 = v46;
        v26 = result;
        LODWORD(result) = v50;
        v6 = v54;
        if (v26)
        {
          xmmword_10048AA10 = v25;
          __cxa_guard_release(qword_10048AA20);
          v14 = v28;
          v13 = v30;
          v10 = v34;
          v7 = v38;
          v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v50;
          v6 = v54;
          a2 = v42;
          a3 = v46;
        }
      }
      v17 = vdivq_f32(v7, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v10.i8)));
      v18 = vdivq_f32(v7, vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v10)));
      *a3++ = vbicq_s8((int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v17, (float32x4_t)vorrq_s8(vandq_s8(v14, (int8x16_t)v17), v13)))), vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v8[159], (int8x16_t)v18), v9[161])))), (int8x16_t)vceqzq_s16(v10));
      ++a2;
      result = (result + 8);
    }
    while (v6 >= (int)result);
  }
  return result;
}

uint64_t sub_1001F2A24(_BYTE *a1, int16x8_t *a2, int8x16_t *a3, int a4, double a5)
{
  uint64_t result;
  int v6;
  float32x4_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int16x8_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int8x16_t v13;
  int8x16_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  float32x4_t v17;
  float32x4_t v18;
  __int128 v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int16x8_t *v39;
  int16x8_t *v40;
  int16x8_t *v41;
  int16x8_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;

  if (!*a1)
    return 0;
  result = 0;
  v6 = a4 - 8;
  if (a4 >= 8)
  {
    *(float *)&a5 = a5;
    v7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
    v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    do
    {
      v10 = *a2;
      v11 = atomic_load((unsigned __int8 *)qword_10048AA00);
      if ((v11 & 1) == 0)
      {
        v47 = result;
        v51 = v6;
        v39 = a2;
        v43 = a3;
        v31 = *a2;
        v35 = v7;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
        v10 = v31;
        v7 = v35;
        *(_QWORD *)&v19 = 0x8000000080000000;
        *((_QWORD *)&v19 + 1) = 0x8000000080000000;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a2 = v39;
        a3 = v43;
        v20 = result;
        LODWORD(result) = v47;
        v6 = v51;
        if (v20)
        {
          xmmword_10048A9F0 = v19;
          __cxa_guard_release(qword_10048AA00);
          v10 = v31;
          v7 = v35;
          v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v47;
          v6 = v51;
          a2 = v39;
          a3 = v43;
        }
      }
      v12 = atomic_load((unsigned __int8 *)qword_10048AA20);
      if ((v12 & 1) == 0)
      {
        v48 = result;
        v52 = v6;
        v40 = a2;
        v44 = a3;
        v32 = v10;
        v36 = v7;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
        v10 = v32;
        v7 = v36;
        *(_QWORD *)&v21 = 0x3F0000003F000000;
        *((_QWORD *)&v21 + 1) = 0x3F0000003F000000;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a2 = v40;
        a3 = v44;
        v22 = result;
        LODWORD(result) = v48;
        v6 = v52;
        if (v22)
        {
          xmmword_10048AA10 = v21;
          __cxa_guard_release(qword_10048AA20);
          v10 = v32;
          v7 = v36;
          v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v48;
          v6 = v52;
          a2 = v40;
          a3 = v44;
        }
      }
      v13 = v9[161];
      v14 = v8[159];
      v15 = atomic_load((unsigned __int8 *)qword_10048AA00);
      if ((v15 & 1) == 0)
      {
        v49 = result;
        v53 = v6;
        v41 = a2;
        v45 = a3;
        v33 = v10;
        v37 = v7;
        v27 = v8[159];
        v29 = v9[161];
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
        v14 = v27;
        v13 = v29;
        v10 = v33;
        v7 = v37;
        *(_QWORD *)&v23 = 0x8000000080000000;
        *((_QWORD *)&v23 + 1) = 0x8000000080000000;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a2 = v41;
        a3 = v45;
        v24 = result;
        LODWORD(result) = v49;
        v6 = v53;
        if (v24)
        {
          xmmword_10048A9F0 = v23;
          __cxa_guard_release(qword_10048AA00);
          v14 = v27;
          v13 = v29;
          v10 = v33;
          v7 = v37;
          v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v49;
          v6 = v53;
          a2 = v41;
          a3 = v45;
        }
      }
      v16 = atomic_load((unsigned __int8 *)qword_10048AA20);
      if ((v16 & 1) == 0)
      {
        v50 = result;
        v54 = v6;
        v42 = a2;
        v46 = a3;
        v34 = v10;
        v38 = v7;
        v28 = v14;
        v30 = v13;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
        v14 = v28;
        v13 = v30;
        v10 = v34;
        v7 = v38;
        *(_QWORD *)&v25 = 0x3F0000003F000000;
        *((_QWORD *)&v25 + 1) = 0x3F0000003F000000;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        a2 = v42;
        a3 = v46;
        v26 = result;
        LODWORD(result) = v50;
        v6 = v54;
        if (v26)
        {
          xmmword_10048AA10 = v25;
          __cxa_guard_release(qword_10048AA20);
          v14 = v28;
          v13 = v30;
          v10 = v34;
          v7 = v38;
          v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          LODWORD(result) = v50;
          v6 = v54;
          a2 = v42;
          a3 = v46;
        }
      }
      v17 = vdivq_f32(v7, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v10.i8)));
      v18 = vdivq_f32(v7, vcvtq_f32_s32(vmovl_high_s16(v10)));
      *a3++ = vbicq_s8((int8x16_t)vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v17, (float32x4_t)vorrq_s8(vandq_s8(v14, (int8x16_t)v17), v13)))), vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v8[159], (int8x16_t)v18), v9[161])))), (int8x16_t)vceqzq_s16(v10));
      ++a2;
      result = (result + 8);
    }
    while (v6 >= (int)result);
  }
  return result;
}

uint64_t sub_1001F2D20(_BYTE *a1, int32x4_t *a2, int8x16_t *a3, int a4, double a5)
{
  uint64_t result;
  int v6;
  float32x4_t v7;
  int8x16_t *v8;
  int32x4_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int32x4_t v12;
  int32x4_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  int8x16_t v16;
  int8x16_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int8x16_t *v55;
  int8x16_t *v56;
  int8x16_t *v57;
  int8x16_t *v58;
  int32x4_t *v59;
  int32x4_t *v60;
  int32x4_t *v61;
  int32x4_t *v62;

  if (!*a1)
    return 0;
  result = 0;
  v6 = a4 - 8;
  if (a4 >= 8)
  {
    *(float *)&a5 = a5;
    v7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
    v8 = a3 + 1;
    v9 = a2 + 1;
    v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    do
    {
      v12 = v9[-1];
      v13 = *v9;
      v14 = atomic_load((unsigned __int8 *)qword_10048AA00);
      if ((v14 & 1) == 0)
      {
        v47 = v6;
        v51 = result;
        v55 = v8;
        v59 = v9;
        v43 = v7;
        v35 = *v9;
        v39 = v9[-1];
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
        v13 = v35;
        v12 = v39;
        *(_QWORD *)&v23 = 0x8000000080000000;
        *((_QWORD *)&v23 + 1) = 0x8000000080000000;
        v7 = v43;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = v55;
        v9 = v59;
        v24 = result;
        v6 = v47;
        LODWORD(result) = v51;
        if (v24)
        {
          xmmword_10048A9F0 = v23;
          __cxa_guard_release(qword_10048AA00);
          v13 = v35;
          v12 = v39;
          v7 = v43;
          v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = v55;
          v9 = v59;
          v6 = v47;
          LODWORD(result) = v51;
        }
      }
      v15 = atomic_load((unsigned __int8 *)qword_10048AA20);
      if ((v15 & 1) == 0)
      {
        v48 = v6;
        v52 = result;
        v56 = v8;
        v60 = v9;
        v44 = v7;
        v36 = v13;
        v40 = v12;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
        v13 = v36;
        v12 = v40;
        v7 = v44;
        *(_QWORD *)&v25 = 0x3F0000003F000000;
        *((_QWORD *)&v25 + 1) = 0x3F0000003F000000;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = v56;
        v9 = v60;
        v26 = result;
        v6 = v48;
        LODWORD(result) = v52;
        if (v26)
        {
          xmmword_10048AA10 = v25;
          __cxa_guard_release(qword_10048AA20);
          v13 = v36;
          v12 = v40;
          v7 = v44;
          v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = v56;
          v9 = v60;
          v6 = v48;
          LODWORD(result) = v52;
        }
      }
      v16 = v11[161];
      v17 = v10[159];
      v18 = atomic_load((unsigned __int8 *)qword_10048AA00);
      if ((v18 & 1) == 0)
      {
        v49 = v6;
        v53 = result;
        v57 = v8;
        v61 = v9;
        v45 = v7;
        v37 = v13;
        v41 = v12;
        v31 = v10[159];
        v33 = v11[161];
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
        v17 = v31;
        v16 = v33;
        v13 = v37;
        v12 = v41;
        *(_QWORD *)&v27 = 0x8000000080000000;
        *((_QWORD *)&v27 + 1) = 0x8000000080000000;
        v7 = v45;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = v57;
        v9 = v61;
        v28 = result;
        v6 = v49;
        LODWORD(result) = v53;
        if (v28)
        {
          xmmword_10048A9F0 = v27;
          __cxa_guard_release(qword_10048AA00);
          v17 = v31;
          v16 = v33;
          v13 = v37;
          v12 = v41;
          v7 = v45;
          v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = v57;
          v9 = v61;
          v6 = v49;
          LODWORD(result) = v53;
        }
      }
      v19 = atomic_load((unsigned __int8 *)qword_10048AA20);
      if ((v19 & 1) == 0)
      {
        v50 = v6;
        v54 = result;
        v58 = v8;
        v62 = v9;
        v46 = v7;
        v38 = v13;
        v42 = v12;
        v32 = v17;
        v34 = v16;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
        v17 = v32;
        v16 = v34;
        v13 = v38;
        v12 = v42;
        v7 = v46;
        *(_QWORD *)&v29 = 0x3F0000003F000000;
        *((_QWORD *)&v29 + 1) = 0x3F0000003F000000;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v8 = v58;
        v9 = v62;
        v30 = result;
        v6 = v50;
        LODWORD(result) = v54;
        if (v30)
        {
          xmmword_10048AA10 = v29;
          __cxa_guard_release(qword_10048AA20);
          v17 = v32;
          v16 = v34;
          v13 = v38;
          v12 = v42;
          v7 = v46;
          v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v8 = v58;
          v9 = v62;
          v6 = v50;
          LODWORD(result) = v54;
        }
      }
      v20 = vdivq_f32(v7, vcvtq_f32_s32(v12));
      v21 = vdivq_f32(v7, vcvtq_f32_s32(v13));
      v22 = vbicq_s8((int8x16_t)vcvtq_s32_f32(vaddq_f32(v21, (float32x4_t)vorrq_s8(vandq_s8(v10[159], (int8x16_t)v21), v11[161]))), (int8x16_t)vceqzq_s32(v13));
      v8[-1] = vbicq_s8((int8x16_t)vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v20), v16))), (int8x16_t)vceqzq_s32(v12));
      *v8 = v22;
      v8 += 2;
      v9 += 2;
      result = (result + 8);
    }
    while (v6 >= (int)result);
  }
  return result;
}

uint64_t sub_1001F3050(float a1, __n128 a2, int32x2_t a3, double a4, double a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  int v11;
  uint64_t result;
  float32x4_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x8_t v16;
  int8x8_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  int8x16_t v20;
  int8x16_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  int16x8_t v24;
  float32x4_t v25;
  int16x8_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int v29;
  __int128 v30;
  int v31;
  int v32;
  __int128 v33;
  int v34;
  int v35;
  __int128 v36;
  int v37;
  int v38;
  __int128 v39;
  int v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int8x8_t v77;
  int8x8_t v78;
  int8x8_t v79;
  int8x8_t v80;
  int8x8_t v81;
  int8x8_t v82;
  int8x8_t v83;
  int8x8_t v84;

  v11 = a11 - 8;
  if (a11 < 8)
    return 0;
  a6.n128_f32[0] = a1;
  result = 0;
  v13 = (float32x4_t)vdupq_lane_s32(a3, 0);
  v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v16 = *(int8x8_t *)(a8 + result);
    v17 = *(int8x8_t *)(a9 + result);
    v18 = atomic_load((unsigned __int8 *)qword_10048AA60);
    if ((v18 & 1) == 0)
    {
      v65 = a8;
      v69 = result;
      v57 = a9;
      v61 = a10;
      v73 = v11;
      v77 = *(int8x8_t *)(a9 + result);
      v81 = *(int8x8_t *)(a8 + result);
      v49 = a6;
      v53 = a2;
      v45 = v13;
      v29 = __cxa_guard_acquire(qword_10048AA60);
      v13 = v45;
      a6 = v49;
      *(_QWORD *)&v30 = 0x8000000080000000;
      *((_QWORD *)&v30 + 1) = 0x8000000080000000;
      a2 = v53;
      v17 = v77;
      v16 = v81;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v73;
      a10 = v61;
      a8 = v65;
      a9 = v57;
      v31 = v29;
      result = v69;
      if (v31)
      {
        xmmword_10048AA50 = v30;
        __cxa_guard_release(qword_10048AA60);
        v13 = v45;
        a6 = v49;
        a2 = v53;
        v17 = v77;
        v16 = v81;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v73;
        a10 = v61;
        a8 = v65;
        a9 = v57;
        result = v69;
      }
    }
    v19 = atomic_load((unsigned __int8 *)&qword_10048AA80);
    if ((v19 & 1) == 0)
    {
      v66 = a8;
      v70 = result;
      v58 = a9;
      v62 = a10;
      v74 = v11;
      v78 = v17;
      v82 = v16;
      v50 = a6;
      v54 = a2;
      v46 = v13;
      v32 = __cxa_guard_acquire(&qword_10048AA80);
      v13 = v46;
      a6 = v50;
      *(_QWORD *)&v33 = 0x3F0000003F000000;
      *((_QWORD *)&v33 + 1) = 0x3F0000003F000000;
      a2 = v54;
      v17 = v78;
      v16 = v82;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v74;
      a10 = v62;
      a8 = v66;
      a9 = v58;
      v34 = v32;
      result = v70;
      if (v34)
      {
        xmmword_10048AA70 = v33;
        __cxa_guard_release(&qword_10048AA80);
        v13 = v46;
        a6 = v50;
        a2 = v54;
        v17 = v78;
        v16 = v82;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v74;
        a10 = v62;
        a8 = v66;
        a9 = v58;
        result = v70;
      }
    }
    v20 = v15[167];
    v21 = v14[165];
    v22 = atomic_load((unsigned __int8 *)qword_10048AA60);
    if ((v22 & 1) == 0)
    {
      v67 = a8;
      v71 = result;
      v59 = a9;
      v63 = a10;
      v75 = v11;
      v79 = v17;
      v83 = v16;
      v51 = a6;
      v55 = a2;
      v43 = v15[167];
      v47 = v13;
      v41 = v14[165];
      v35 = __cxa_guard_acquire(qword_10048AA60);
      v21 = v41;
      v20 = v43;
      v13 = v47;
      a6 = v51;
      *(_QWORD *)&v36 = 0x8000000080000000;
      *((_QWORD *)&v36 + 1) = 0x8000000080000000;
      a2 = v55;
      v17 = v79;
      v16 = v83;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v75;
      a10 = v63;
      a8 = v67;
      a9 = v59;
      v37 = v35;
      result = v71;
      if (v37)
      {
        xmmword_10048AA50 = v36;
        __cxa_guard_release(qword_10048AA60);
        v21 = v41;
        v20 = v43;
        v13 = v47;
        a6 = v51;
        a2 = v55;
        v17 = v79;
        v16 = v83;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v75;
        a10 = v63;
        a8 = v67;
        a9 = v59;
        result = v71;
      }
    }
    v23 = atomic_load((unsigned __int8 *)&qword_10048AA80);
    if ((v23 & 1) == 0)
    {
      v68 = a8;
      v72 = result;
      v60 = a9;
      v64 = a10;
      v76 = v11;
      v80 = v17;
      v84 = v16;
      v52 = a6;
      v56 = a2;
      v44 = v20;
      v48 = v13;
      v42 = v21;
      v38 = __cxa_guard_acquire(&qword_10048AA80);
      v21 = v42;
      v20 = v44;
      v13 = v48;
      a6 = v52;
      *(_QWORD *)&v39 = 0x3F0000003F000000;
      *((_QWORD *)&v39 + 1) = 0x3F0000003F000000;
      a2 = v56;
      v17 = v80;
      v16 = v84;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v76;
      a10 = v64;
      a8 = v68;
      a9 = v60;
      v40 = v38;
      result = v72;
      if (v40)
      {
        xmmword_10048AA70 = v39;
        __cxa_guard_release(&qword_10048AA80);
        v21 = v42;
        v20 = v44;
        v13 = v48;
        a6 = v52;
        a2 = v56;
        v17 = v80;
        v16 = v84;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v76;
        a10 = v64;
        a8 = v68;
        a9 = v60;
        result = v72;
      }
    }
    v24 = vmovl_s8(v16);
    v25 = vcvtq_f32_s32(vmovl_high_s16(v24));
    v26 = vmovl_s8(v17);
    v27 = vaddq_f32(v13, vaddq_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v24.i8)), a6.n128_f32[0]), vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v26.i8)), a2.n128_f32[0])));
    v28 = vaddq_f32(v13, vaddq_f32(vmulq_n_f32(v25, a6.n128_f32[0]), vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v26)), a2.n128_f32[0])));
    *(int8x8_t *)(a10 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v27, (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v27), v20)))), vcvtq_s32_f32(vaddq_f32(v28, (float32x4_t)vorrq_s8(vandq_s8(v14[165], (int8x16_t)v28), v15[167])))));
    result += 8;
  }
  while (v11 >= (int)result);
  return result;
}

uint64_t sub_1001F3424(__n128 a1, float a2, int32x2_t a3, double a4, __n128 a5, uint64_t a6, int16x8_t *a7, int16x8_t *a8, int16x8_t *a9, int a10)
{
  int v10;
  uint64_t result;
  float32x4_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int16x8_t v15;
  int16x8_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  int8x16_t v19;
  int8x16_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  float32x4_t v23;
  float32x4_t v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  int16x8_t *v57;
  int16x8_t *v58;
  int16x8_t *v59;
  int16x8_t *v60;
  int16x8_t *v61;
  int16x8_t *v62;
  int16x8_t *v63;
  int16x8_t *v64;
  int16x8_t *v65;
  int16x8_t *v66;
  int16x8_t *v67;
  int16x8_t *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;

  v10 = a10 - 8;
  if (a10 < 8)
    return 0;
  a5.n128_f32[0] = a2;
  LODWORD(result) = 0;
  v12 = (float32x4_t)vdupq_lane_s32(a3, 0);
  v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v15 = *a7;
    v16 = *a8;
    v17 = atomic_load((unsigned __int8 *)qword_10048AA60);
    if ((v17 & 1) == 0)
    {
      v69 = result;
      v73 = v10;
      v57 = a8;
      v61 = a9;
      v65 = a7;
      v49 = a1;
      v53 = a5;
      v41 = *a8;
      v45 = v12;
      v37 = *a7;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA60);
      v15 = v37;
      v16 = v41;
      v12 = v45;
      *(_QWORD *)&v25 = 0x8000000080000000;
      *((_QWORD *)&v25 + 1) = 0x8000000080000000;
      a1 = v49;
      a5 = v53;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a9 = v61;
      a7 = v65;
      a8 = v57;
      v26 = result;
      LODWORD(result) = v69;
      v10 = v73;
      if (v26)
      {
        xmmword_10048AA50 = v25;
        __cxa_guard_release(qword_10048AA60);
        v15 = v37;
        v16 = v41;
        v12 = v45;
        a1 = v49;
        a5 = v53;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v69;
        v10 = v73;
        a9 = v61;
        a7 = v65;
        a8 = v57;
      }
    }
    v18 = atomic_load((unsigned __int8 *)&qword_10048AA80);
    if ((v18 & 1) == 0)
    {
      v70 = result;
      v74 = v10;
      v58 = a8;
      v62 = a9;
      v66 = a7;
      v50 = a1;
      v54 = a5;
      v42 = v16;
      v46 = v12;
      v38 = v15;
      LODWORD(result) = __cxa_guard_acquire(&qword_10048AA80);
      v15 = v38;
      v16 = v42;
      v12 = v46;
      *(_QWORD *)&v27 = 0x3F0000003F000000;
      *((_QWORD *)&v27 + 1) = 0x3F0000003F000000;
      a1 = v50;
      a5 = v54;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a9 = v62;
      a7 = v66;
      a8 = v58;
      v28 = result;
      LODWORD(result) = v70;
      v10 = v74;
      if (v28)
      {
        xmmword_10048AA70 = v27;
        __cxa_guard_release(&qword_10048AA80);
        v15 = v38;
        v16 = v42;
        v12 = v46;
        a1 = v50;
        a5 = v54;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v70;
        v10 = v74;
        a9 = v62;
        a7 = v66;
        a8 = v58;
      }
    }
    v19 = v14[167];
    v20 = v13[165];
    v21 = atomic_load((unsigned __int8 *)qword_10048AA60);
    if ((v21 & 1) == 0)
    {
      v71 = result;
      v75 = v10;
      v59 = a8;
      v63 = a9;
      v67 = a7;
      v51 = a1;
      v55 = a5;
      v43 = v16;
      v47 = v12;
      v35 = v14[167];
      v39 = v15;
      v33 = v13[165];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA60);
      v20 = v33;
      v19 = v35;
      v15 = v39;
      v16 = v43;
      v12 = v47;
      *(_QWORD *)&v29 = 0x8000000080000000;
      *((_QWORD *)&v29 + 1) = 0x8000000080000000;
      a1 = v51;
      a5 = v55;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a9 = v63;
      a7 = v67;
      a8 = v59;
      v30 = result;
      LODWORD(result) = v71;
      v10 = v75;
      if (v30)
      {
        xmmword_10048AA50 = v29;
        __cxa_guard_release(qword_10048AA60);
        v20 = v33;
        v19 = v35;
        v15 = v39;
        v16 = v43;
        v12 = v47;
        a1 = v51;
        a5 = v55;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v71;
        v10 = v75;
        a9 = v63;
        a7 = v67;
        a8 = v59;
      }
    }
    v22 = atomic_load((unsigned __int8 *)&qword_10048AA80);
    if ((v22 & 1) == 0)
    {
      v72 = result;
      v76 = v10;
      v60 = a8;
      v64 = a9;
      v68 = a7;
      v52 = a1;
      v56 = a5;
      v44 = v16;
      v48 = v12;
      v36 = v19;
      v40 = v15;
      v34 = v20;
      LODWORD(result) = __cxa_guard_acquire(&qword_10048AA80);
      v20 = v34;
      v19 = v36;
      v15 = v40;
      v16 = v44;
      v12 = v48;
      *(_QWORD *)&v31 = 0x3F0000003F000000;
      *((_QWORD *)&v31 + 1) = 0x3F0000003F000000;
      a1 = v52;
      a5 = v56;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a9 = v64;
      a7 = v68;
      a8 = v60;
      v32 = result;
      LODWORD(result) = v72;
      v10 = v76;
      if (v32)
      {
        xmmword_10048AA70 = v31;
        __cxa_guard_release(&qword_10048AA80);
        v20 = v34;
        v19 = v36;
        v15 = v40;
        v16 = v44;
        v12 = v48;
        a1 = v52;
        a5 = v56;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v72;
        v10 = v76;
        a9 = v64;
        a7 = v68;
        a8 = v60;
      }
    }
    v23 = vaddq_f32(v12, vaddq_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v15.i8)), a1.n128_f32[0]), vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v16.i8)), a5.n128_f32[0])));
    v24 = vaddq_f32(v12, vaddq_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v15)), a1.n128_f32[0]), vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v16)), a5.n128_f32[0])));
    *a9++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v23, (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v23), v19)))), vcvtq_s32_f32(vaddq_f32(v24, (float32x4_t)vorrq_s8(vandq_s8(v13[165], (int8x16_t)v24), v14[167]))));
    ++a8;
    ++a7;
    result = (result + 8);
  }
  while (v10 >= (int)result);
  return result;
}

_QWORD *sub_1001F37D4(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;

  *a1 = 0;
  a1[1] = 0;
  if (__s)
  {
    v4 = strlen(__s);
    if (v4)
    {
      v5 = v4;
      v6 = (void *)sub_10029430C(a1, v4);
      memcpy(v6, __s, v5);
    }
  }
  return a1;
}

uint64_t sub_1001F3830(int a1, int a2, unsigned int a3)
{
  uint64_t v3;

  v3 = sub_1001F3858(a1, a2, a3);
  sub_1001F396C(v3);
  return v3;
}

uint64_t sub_1001F3858(int a1, int a2, unsigned int a3)
{
  __int16 v3;
  int v6;
  uint64_t result;
  uint64_t v8[2];

  v3 = a3;
  if ((a2 | a1) < 0)
  {
    v8[0] = 0;
    v8[1] = 0;
    qmemcpy((void *)sub_10029430C(v8, 28), "Non-positive width or height", 28);
    sub_100294B74(-201, v8, "cvCreateMatHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 119);
  }
  v6 = ((((a3 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a3 & 7))) & 3)) * a2;
  result = sub_1001D450C(0x28uLL);
  *(_DWORD *)result = v3 & 0xFFF | 0x42424000;
  *(_DWORD *)(result + 4) = v6;
  *(_DWORD *)(result + 32) = a1;
  *(_DWORD *)(result + 36) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 1;
  if (v6 * (uint64_t)a1 >= 0x80000000)
    *(_DWORD *)result = v3 & 0xFFF | 0x42420000;
  return result;
}

void sub_1001F3954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F396C(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  size_t v7;
  void *v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  const float *v25;
  const float *v26;
  int8x16_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x4x2_t v37;
  float32x4x2_t v38;

  if (!result)
    goto LABEL_28;
  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = *(_DWORD *)result & 0xFFFF0000;
  if (v3 != 1111621632)
  {
    if (v2 == 144)
    {
      if (*(_QWORD *)(result + 88))
      {
        v35 = 0;
        v36 = 0;
        qmemcpy((void *)sub_10029430C(&v35, 25), "Data is already allocated", 25);
        sub_100294B74(-2, &v35, "cvCreateData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 824);
      }
      v8 = off_100497A88;
      if (off_100497A88)
      {
        v9 = *(_DWORD *)(result + 16);
        v10 = *(_DWORD *)(result + 40);
        if (v9 == 64 || v9 == 32)
        {
          if (v9 == 32)
            v11 = 2;
          else
            v11 = 3;
          *(_DWORD *)(result + 40) = v10 << v11;
          *(_DWORD *)(result + 16) = 8;
        }
        result = ((uint64_t (*)(uint64_t, _QWORD, _QWORD))v8)(result, 0, 0);
        *(_DWORD *)(v1 + 40) = v10;
        *(_DWORD *)(v1 + 16) = v9;
      }
      else
      {
        v12 = *(int *)(result + 44) * (uint64_t)*(int *)(result + 96);
        v13 = *(int *)(result + 80);
        if (v12 != v13)
        {
          v35 = 0;
          v36 = 0;
          qmemcpy((void *)sub_10029430C(&v35, 22), "Overflow for imageSize", 22);
          sub_100294B74(-4, &v35, "cvCreateData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 830);
        }
        result = sub_1001D450C(v13);
        *(_QWORD *)(v1 + 136) = result;
        *(_QWORD *)(v1 + 88) = result;
      }
      return result;
    }
    if (v3 == 1111687168)
    {
      if (!*(_DWORD *)(result + 32))
        return result;
      if (*(_QWORD *)(result + 24))
      {
        sub_1001F37D4(&v35, "Data is already allocated");
        sub_100294B74(-2, &v35, "cvCreateData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 860);
      }
      v14 = (((v2 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v2 & 7))) & 3);
      if ((v2 & 0x4000) != 0)
      {
        v17 = *(int *)(result + 36);
        if (!(_DWORD)v17)
          v17 = (((v2 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v2 & 7))) & 3);
        v14 = v17 * *(int *)(result + 32);
        goto LABEL_46;
      }
      v15 = *(unsigned int *)(result + 4);
      if ((int)v15 >= 1)
      {
        if (v15 < 0xC)
        {
          v16 = *(unsigned int *)(result + 4);
          goto LABEL_42;
        }
        v16 = v15 & 7;
        v18 = (int8x16_t)vdupq_n_s64(v14);
        v19 = v15 + 4294967291;
        v20 = result + 4;
        v21 = v15 & 0xFFFFFFF8;
        v22 = v18;
        v23 = v18;
        v24 = v18;
        do
        {
          v25 = (const float *)(v20 + 8 * (v19 + 4) + 4);
          v37 = vld2q_f32(v25);
          v26 = (const float *)(v20 + 8 * v19 + 4);
          v38 = vld2q_f32(v26);
          v27 = (int8x16_t)vrev64q_s32((int32x4_t)v37.val[0]);
          v28 = (int32x4_t)vextq_s8(v27, v27, 8uLL);
          v29 = (int8x16_t)vrev64q_s32((int32x4_t)v38.val[0]);
          v30 = (int32x4_t)vextq_s8(v29, v29, 8uLL);
          v37.val[0] = (float32x4_t)vrev64q_s32((int32x4_t)v37.val[1]);
          v37.val[0] = (float32x4_t)vextq_s8((int8x16_t)v37.val[0], (int8x16_t)v37.val[0], 8uLL);
          v37.val[1] = (float32x4_t)vrev64q_s32((int32x4_t)v38.val[1]);
          v37.val[1] = (float32x4_t)vextq_s8((int8x16_t)v37.val[1], (int8x16_t)v37.val[1], 8uLL);
          v38.val[0] = (float32x4_t)vmull_s32(*(int32x2_t *)v28.i8, *(int32x2_t *)v37.val[0].f32);
          v37.val[0] = (float32x4_t)vmull_high_s32(v28, (int32x4_t)v37.val[0]);
          v38.val[1] = (float32x4_t)vmull_s32(*(int32x2_t *)v30.i8, *(int32x2_t *)v37.val[1].f32);
          v37.val[1] = (float32x4_t)vmull_high_s32(v30, (int32x4_t)v37.val[1]);
          v22 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v22, (uint64x2_t)v37.val[0]), v22, (int8x16_t)v37.val[0]);
          v18 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v18, (uint64x2_t)v38.val[0]), v18, (int8x16_t)v38.val[0]);
          v24 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v24, (uint64x2_t)v37.val[1]), v24, (int8x16_t)v37.val[1]);
          v23 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v23, (uint64x2_t)v38.val[1]), v23, (int8x16_t)v38.val[1]);
          v19 -= 8;
          v21 -= 8;
        }
        while (v21);
        v31 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v18, (uint64x2_t)v23), v18, v23);
        v32 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v22, (uint64x2_t)v24), v22, v24);
        v33 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v31, (uint64x2_t)v32), v31, v32);
        v32.i64[0] = vextq_s8(v33, v33, 8uLL).u64[0];
        v14 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v33.u64[0], v32.u64[0]), *(int8x8_t *)v33.i8, *(int8x8_t *)v32.i8);
        if ((v15 & 0x7FFFFFF8) != v15)
        {
LABEL_42:
          v34 = v16 + 1;
          do
          {
            if (v14 <= *(int *)(result + 8 * (v34 - 2) + 32)
                      * (uint64_t)*(int *)(result + 8 * (v34 - 2) + 36))
              v14 = *(int *)(result + 8 * (v34 - 2) + 32)
                  * (uint64_t)*(int *)(result + 8 * (v34 - 2) + 36);
            --v34;
          }
          while (v34 > 1);
        }
      }
LABEL_46:
      v7 = v14 + 68;
LABEL_47:
      result = sub_1001D450C(v7);
      *(_QWORD *)(v1 + 8) = result;
      *(_QWORD *)(v1 + 24) = (result + 67) & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)result = 1;
      return result;
    }
LABEL_28:
    v35 = 0;
    v36 = 0;
    qmemcpy((void *)sub_10029430C(&v35, 38), "unrecognized or unsupported array type", 38);
    sub_100294B74(-5, &v35, "cvCreateData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 885);
  }
  v4 = *(_DWORD *)(result + 36);
  if (v4 < 0)
    goto LABEL_28;
  v5 = *(_DWORD *)(result + 32);
  if (v5 < 0)
    goto LABEL_28;
  if (v4 && v5)
  {
    v6 = *(_DWORD *)(result + 4);
    if (*(_QWORD *)(result + 24))
    {
      v35 = 0;
      v36 = 0;
      qmemcpy((void *)sub_10029430C(&v35, 25), "Data is already allocated", 25);
      sub_100294B74(-2, &v35, "cvCreateData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 806);
    }
    if (!v6)
      v6 = ((((*(_DWORD *)result >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_BYTE *)result & 7))) & 3))
         * *(_DWORD *)(result + 36);
    v7 = *(int *)(result + 32) * (uint64_t)v6 + 68;
    goto LABEL_47;
  }
  return result;
}

void sub_1001F3DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F3E54(uint64_t result, int a2, int a3, unsigned int a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a6;
  if (!result)
  {
    v11 = 0;
    v12 = 0;
    sub_100294B74(-27, &v11, "cvInitMatHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 147);
  }
  if ((a3 | a2) < 0)
  {
    v11 = 0;
    v12 = 0;
    qmemcpy((void *)sub_10029430C(&v11, 25), "Non-positive cols or rows", 25);
    sub_100294B74(-201, &v11, "cvInitMatHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 153);
  }
  v7 = a4 & 0xFFF | 0x42420000;
  *(_DWORD *)result = v7;
  *(_DWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 36) = a3;
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  v8 = ((((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3)) * a3;
  if (a6 && a6 != 0x7FFFFFFF)
  {
    if (v8 > a6)
    {
      v11 = 0;
      v12 = 0;
      sub_100294B74(-13, &v11, "cvInitMatHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 169);
    }
  }
  else
  {
    v6 = ((((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3)) * a3;
  }
  if (v6 == v8 || a2 == 1)
    v10 = 0x4000;
  else
    v10 = 0;
  if (v6 * (uint64_t)a2 > 0x7FFFFFFF)
    v10 = 0;
  *(_DWORD *)result = v7 | v10;
  *(_DWORD *)(result + 4) = v6;
  return result;
}

void sub_1001F3FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  JUMPOUT(0x1001F3F60);
}

void sub_1001F3FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_1001F4030(void **a1)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  _DWORD *v5;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
  {
    v7 = 0;
    v8 = 0;
    sub_100294B74(-9, &v7, "cvReleaseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 190);
  }
  v1 = *a1;
  if (*a1)
  {
    v2 = *v1;
    v3 = *v1 & 0xFFFF0000;
    if (v3 != 1111687168 && (v3 != 1111621632 || (v1[9] & 0x80000000) != 0 || (v1[8] & 0x80000000) != 0))
    {
      v7 = 0;
      v8 = 0;
      sub_100294B74(-206, &v7, "cvReleaseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 197);
    }
    *a1 = 0;
    v4 = v2 & 0xFFFF0000;
    if ((v4 == 1111687168 || v4 == 1111621632 && (int)v1[9] >= 1 && (int)v1[8] >= 1) && *((_QWORD *)v1 + 3))
    {
      v5 = (_DWORD *)*((_QWORD *)v1 + 1);
      *((_QWORD *)v1 + 3) = 0;
      if (v5)
      {
        if ((*v5)-- == 1)
          j__free(v5);
      }
      *((_QWORD *)v1 + 1) = 0;
    }
    j__free(v1);
  }
}

void sub_1001F4164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F4194(uint64_t a1)
{
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[2];

  if (!a1
    || (v2 = *(_DWORD *)a1, HIWORD(*(_DWORD *)a1) != 16962)
    || (v3 = *(_DWORD *)(a1 + 36), v3 < 1)
    || (v4 = *(_DWORD *)(a1 + 32), v4 <= 0))
  {
    v8[0] = 0;
    v8[1] = 0;
    *(_OWORD *)sub_10029430C(v8, 16) = *(_OWORD *)"Bad CvMat header";
    sub_100294B74(-5, v8, "cvCloneMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 212);
  }
  v5 = sub_1001F3858(v4, v3, v2);
  v6 = v5;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_1001F396C(v5);
    sub_10021D4FC(a1, v6, 0);
  }
  return v6;
}

void sub_1001F4264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F427C(uint64_t result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  if (!result)
  {
    v13 = 0;
    v14 = 0;
    qmemcpy((void *)sub_10029430C(&v13, 26), "NULL matrix header pointer", 26);
    sub_100294B74(-27, &v13, "cvInitMatNDHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 238);
  }
  if (!a3)
  {
    v13 = 0;
    v14 = 0;
    v5 = sub_10029430C(&v13, 20);
    *(_DWORD *)(v5 + 16) = 1919251566;
    *(_OWORD *)v5 = *(_OWORD *)"NULL <sizes> pointer";
    sub_100294B74(-27, &v13, "cvInitMatNDHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 244);
  }
  v6 = (((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3);
  if (a2 - 33 <= 0xFFFFFFDF)
  {
    v13 = 0;
    v14 = 0;
    qmemcpy((void *)sub_10029430C(&v13, 46), "non-positive or too large number of dimensions", 46);
    sub_100294B74(-211, &v13, "cvInitMatNDHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 248);
  }
  v7 = a2 + 1;
  do
  {
    v8 = (v7 - 2);
    v9 = *(_DWORD *)(a3 + 4 * v8);
    if (v9 < 0)
    {
      v13 = 0;
      v14 = 0;
      qmemcpy((void *)sub_10029430C(&v13, 37), "one of dimesion sizes is non-positive", 37);
      sub_100294B74(-201, &v13, "cvInitMatNDHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 253);
    }
    v10 = result + 8 * v8;
    *(_DWORD *)(v10 + 32) = v9;
    if (v6 >= 0x80000000)
    {
      v13 = 0;
      v14 = 0;
      v11 = sub_10029430C(&v13, 20);
      *(_DWORD *)(v11 + 16) = 1734959648;
      *(_OWORD *)v11 = *(_OWORD *)"The array is too big";
      sub_100294B74(-211, &v13, "cvInitMatNDHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 256);
    }
    *(_DWORD *)(v10 + 36) = v6;
    v6 *= *(int *)(a3 + 4 * v8);
    --v7;
  }
  while (v7 > 1);
  if (v6 >= 0x80000000)
    v12 = 1111687168;
  else
    v12 = 1111703552;
  *(_DWORD *)result = v12 & 0xFFFFF000 | a4 & 0xFFF;
  *(_DWORD *)(result + 4) = a2;
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_1001F454C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F45C4(unsigned int a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;

  v3 = sub_1001F45EC(a1, a2, a3);
  sub_1001F396C(v3);
  return v3;
}

uint64_t sub_1001F45EC(unsigned int a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8[2];

  if (a1 - 33 <= 0xFFFFFFDF)
  {
    v8[0] = 0;
    v8[1] = 0;
    qmemcpy((void *)sub_10029430C(v8, 46), "non-positive or too large number of dimensions", 46);
    sub_100294B74(-211, v8, "cvCreateMatNDHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 287);
  }
  v6 = sub_1001D450C(0x120uLL);
  result = sub_1001F427C(v6, a1, a2, a3, 0);
  *(_DWORD *)(result + 16) = 1;
  return result;
}

void sub_1001F46A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F46BC(uint64_t a1)
{
  uint64_t v2;
  signed int v3;
  uint64_t v4;
  uint64_t v5;
  const float *v6;
  unsigned __int128 *v7;
  uint64_t v8;
  const float *v9;
  unsigned __int128 v10;
  unsigned __int128 v11;
  _DWORD *v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE v34[4];
  int v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[4];
  int v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (!a1 || *(_WORD *)(a1 + 2) != 16963)
  {
    v50 = 0;
    v51 = 0;
    v2 = sub_10029430C(&v50, 18);
    *(_WORD *)(v2 + 16) = 29285;
    *(_OWORD *)v2 = *(_OWORD *)"Bad CvMatND header";
    sub_100294B74(-5, &v50, "cvCloneMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 302);
  }
  v3 = *(_DWORD *)(a1 + 4);
  if (v3 >= 33)
  {
    v50 = 0;
    v51 = 0;
    qmemcpy((void *)sub_10029430C(&v50, 15), "src->dims <= 32", 15);
    sub_100294B74(-215, &v50, "cvCloneMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 304);
  }
  if (v3 >= 1)
  {
    if (v3 > 8)
    {
      v5 = v3 & 7;
      if ((v3 & 7) == 0)
        v5 = 8;
      v4 = v3 - v5;
      v6 = (const float *)(a1 + 64);
      v7 = (unsigned __int128 *)&v52;
      v8 = v4;
      do
      {
        v9 = v6 - 8;
        v10 = (unsigned __int128)vld2q_f32(v9);
        v11 = (unsigned __int128)vld2q_f32(v6);
        *(v7 - 1) = v10;
        *v7 = v11;
        v6 += 16;
        v7 += 2;
        v8 -= 8;
      }
      while (v8);
    }
    else
    {
      v4 = 0;
    }
    v12 = (_DWORD *)&v50 + v4;
    v13 = (int *)(a1 + 8 * v4 + 32);
    v14 = v3 - v4;
    do
    {
      v15 = *v13;
      v13 += 2;
      *v12++ = v15;
      --v14;
    }
    while (v14);
  }
  v16 = sub_1001F45EC(v3, (uint64_t)&v50, *(_DWORD *)a1);
  v17 = v16;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_1001F396C(v16);
    sub_100257E00(a1, 0, 0, 0, (uint64_t)v42);
    sub_100257E00(v17, 0, 0, 0, (uint64_t)v34);
    v18 = *(_QWORD *)(v17 + 24);
    LODWORD(v31) = 33619968;
    v32 = v34;
    v33 = 0;
    sub_1002181EC((uint64_t)v42, (uint64_t)&v31);
    if ((_QWORD)v36 != v18)
    {
      v31 = 0;
      v32 = 0;
      v19 = sub_10029430C(&v31, 18);
      *(_WORD *)(v19 + 16) = 12385;
      *(_OWORD *)v19 = *(_OWORD *)"_dst.data == data0";
      sub_100294B74(-215, &v31, "cvCloneMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 319);
    }
    if (v38)
    {
      v20 = (unsigned int *)(v38 + 20);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
        sub_100256C90((uint64_t)v34);
    }
    v38 = 0;
    v36 = 0u;
    v37 = 0u;
    if (v35 >= 1)
    {
      v23 = 0;
      v24 = v39;
      do
        *(_DWORD *)(v24 + 4 * v23++) = 0;
      while (v23 < v35);
    }
    if (v40 != &v41)
      j__free(v40);
    if (v46)
    {
      v25 = (unsigned int *)(v46 + 20);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
        sub_100256C90((uint64_t)v42);
    }
    v46 = 0;
    v44 = 0u;
    v45 = 0u;
    if (v43 >= 1)
    {
      v28 = 0;
      v29 = v47;
      do
        *(_DWORD *)(v29 + 4 * v28++) = 0;
      while (v28 < v43);
    }
    if (v48 != &v49)
      j__free(v48);
  }
  return v17;
}

void sub_1001F4A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F4ABC(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t result;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  const float *v35;
  unsigned __int128 *v36;
  uint64_t v37;
  const float *v38;
  unsigned __int128 v39;
  unsigned __int128 v40;
  int *v41;
  _DWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t v49;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v6 = a6;
  v7 = a5;
  if (a1 - 11 <= 0xFFFFFFF5)
  {
    v52 = 0;
    v53 = 0;
    qmemcpy((void *)sub_10029430C(&v52, 26), "Incorrect number of arrays", 26);
    sub_100294B74(-211, &v52, "cvInitNArrayIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 394);
  }
  if (!a2 || !a4)
  {
    v52 = 0;
    v53 = 0;
    qmemcpy((void *)sub_10029430C(&v52, 39), "Some of required array pointers is NULL", 39);
    sub_100294B74(-27, &v52, "cvInitNArrayIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 397);
  }
  if (!a5)
  {
    v52 = 0;
    v53 = 0;
    qmemcpy((void *)sub_10029430C(&v52, 24), "Iterator pointer is NULL", 24);
    sub_100294B74(-27, &v52, "cvInitNArrayIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 400);
  }
  if (a3)
  {
    v52 = 0;
    v53 = 0;
    qmemcpy((void *)sub_10029430C(&v52, 35), "Iterator with mask is not supported", 35);
    sub_100294B74(-5, &v52, "cvInitNArrayIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 403);
  }
  v8 = 0;
  v9 = 0;
  v10 = a6 & 3;
  v49 = a1;
  v11 = -1;
  do
  {
    v15 = v9;
    v16 = *(_QWORD *)(a2 + 8 * v8);
    if (!v16)
    {
      v52 = 0;
      v53 = 0;
      qmemcpy((void *)sub_10029430C(&v52, 39), "Some of required array pointers is NULL", 39);
      sub_100294B74(-27, &v52, "cvInitNArrayIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 411);
    }
    if (*(_WORD *)(v16 + 2) != 16963 || !*(_QWORD *)(v16 + 24))
    {
      v51 = 0;
      v16 = sub_1001F5330(v16, a4 + 288 * v8, &v51);
      if (v51)
      {
        v52 = 0;
        v53 = 0;
        qmemcpy((void *)sub_10029430C(&v52, 27), "COI set is not allowed here", 27);
        sub_100294B74(-24, &v52, "cvInitNArrayIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 420);
      }
    }
    v17 = v7 + 8 * v8;
    *(_QWORD *)(v17 + 224) = v16;
    v18 = (uint64_t *)(v17 + 224);
    v9 = (_DWORD *)v16;
    if (v8)
    {
      if (*(_DWORD *)(v16 + 4) != v15[1])
      {
        v52 = 0;
        v53 = 0;
        qmemcpy((void *)sub_10029430C(&v52, 47), "Number of dimensions is the same for all arrays", 47);
        sub_100294B74(-209, &v52, "cvInitNArrayIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 429);
      }
      if (v10 == 2)
      {
        if (((*v15 ^ *(_DWORD *)v16) & 0xFF8) != 0)
        {
          v52 = 0;
          v53 = 0;
          qmemcpy((void *)sub_10029430C(&v52, 36), "Depth is not the same for all arrays", 36);
          sub_100294B74(-205, &v52, "cvInitNArrayIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 446);
        }
      }
      else if (v10 == 1)
      {
        if (((*v15 ^ *(_DWORD *)v16) & 0xFF8) != 0)
        {
          v52 = 0;
          v53 = 0;
          qmemcpy((void *)sub_10029430C(&v52, 49), "Number of channels is not the same for all arrays", 49);
          sub_100294B74(-205, &v52, "cvInitNArrayIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 441);
        }
      }
      else if (!v10 && ((*v15 ^ *(_DWORD *)v16) & 0xFFF) != 0)
      {
        v52 = 0;
        v53 = 0;
        qmemcpy((void *)sub_10029430C(&v52, 40), "Data type is not the same for all arrays", 40);
        sub_100294B74(-205, &v52, "cvInitNArrayIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 436);
      }
      if ((v6 & 4) != 0 || (v19 = *(_DWORD *)(v16 + 4), v19 < 1))
      {
        v9 = v15;
      }
      else
      {
        v20 = 0;
        v21 = 8;
        do
        {
          if (*(_DWORD *)(v16 + v21 * 4) != v15[v21])
          {
            v52 = 0;
            v53 = 0;
            qmemcpy((void *)sub_10029430C(&v52, 43), "Dimension sizes are the same for all arrays", 43);
            sub_100294B74(-209, &v52, "cvInitNArrayIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 455);
          }
          ++v20;
          v21 += 2;
        }
        while (v20 < v19);
        v9 = v15;
        v7 = a5;
        v6 = a6;
      }
    }
    v12 = *(_DWORD *)(v16 + 4);
    v22 = (((*(_DWORD *)v16 >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * (*(_BYTE *)v16 & 7))) & 3);
    v13 = (v12 - 1);
    if ((int)v13 > v11 && (_DWORD)v22 == *(_DWORD *)(v16 + 8 * v13 + 36))
    {
      do
      {
        v22 *= *(int *)(v16 + 8 * v13 + 32);
        v13 = (v12 - 2);
        if ((int)v13 <= v11)
        {
          v12 = v11 + 1;
          LODWORD(v13) = v11;
          goto LABEL_12;
        }
        --v12;
      }
      while (v22 == *(_DWORD *)(v16 + 8 * v13 + 36));
      LODWORD(v13) = v12 - 1;
    }
LABEL_12:
    if (v22 <= 0x7FFFFFFF || (_DWORD)v13 != v11)
      v12 = v13;
    if (v12 > v11)
      v11 = v12;
    *v18 = v16;
    *(_QWORD *)(v7 + 8 * v8++ + 16) = *(_QWORD *)(v16 + 24);
  }
  while (v8 != v49);
  v23 = v9[1];
  v24 = v23 - 1;
  if (v23 - 1 <= v11)
  {
    result = (v11 + 1);
    *(_DWORD *)v7 = a1;
    *(_DWORD *)(v7 + 4) = result;
    *(_QWORD *)(v7 + 8) = 0x100000001;
    if (v11 < 0)
      return result;
    goto LABEL_64;
  }
  v25 = v23 + ~v11;
  if (v25 < 2)
  {
    v26 = 1;
    v27 = v23 - 1;
    v28 = a1;
    goto LABEL_62;
  }
  v28 = a1;
  if (v11 + 1 > (v23 - 1))
  {
    v26 = 1;
    v27 = v23 - 1;
    do
LABEL_62:
      v26 *= v9[2 * v27-- + 8];
    while (v27 > v11);
    goto LABEL_63;
  }
  v27 = v24 - (v25 & 0xFFFFFFFE);
  v30 = 1;
  v31 = v25 & 0xFFFFFFFE;
  v32 = 1;
  do
  {
    v30 *= v9[2 * v24 + 8];
    v32 *= v9[2 * (v24 - 1) + 8];
    v24 -= 2;
    v31 -= 2;
  }
  while (v31);
  v26 = v32 * v30;
  if (v25 != (v25 & 0xFFFFFFFE))
    goto LABEL_62;
LABEL_63:
  result = (v11 + 1);
  *(_DWORD *)v7 = v28;
  *(_DWORD *)(v7 + 4) = result;
  *(_QWORD *)(v7 + 8) = v26 | (unint64_t)&_mh_execute_header;
  if (v11 < 0)
    return result;
LABEL_64:
  if (result >= 0xD
    && (v7 + 96 >= (unint64_t)&v9[2 * result + 7] || (unint64_t)(v9 + 8) >= v7 + 96 + 4 * result))
  {
    v34 = result & 7;
    if ((result & 7) == 0)
      v34 = 8;
    v33 = result - v34;
    v35 = (const float *)(v9 + 16);
    v36 = (unsigned __int128 *)(v7 + 112);
    v37 = v33;
    do
    {
      v38 = v35 - 8;
      v39 = (unsigned __int128)vld2q_f32(v38);
      v40 = (unsigned __int128)vld2q_f32(v35);
      *(v36 - 1) = v39;
      *v36 = v40;
      v35 += 16;
      v36 += 2;
      v37 -= 8;
    }
    while (v37);
  }
  else
  {
    v33 = 0;
  }
  v41 = &v9[2 * v33 + 8];
  v42 = (_DWORD *)(v7 + 4 * v33 + 96);
  v43 = result - v33;
  do
  {
    v44 = *v41;
    v41 += 2;
    *v42++ = v44;
    --v43;
  }
  while (v43);
  return result;
}

void sub_1001F5228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F5330(uint64_t result, uint64_t a2, _DWORD *a3)
{
  _DWORD *v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (_DWORD *)result;
  if (a3)
    *a3 = 0;
  if (!result || !a2)
  {
    v11 = 0;
    v12 = 0;
    qmemcpy((void *)sub_10029430C(&v11, 28), "NULL array pointer is passed", 28);
    sub_100294B74(-27, &v11, "cvGetMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 336);
  }
  v5 = *(_DWORD *)result;
  if (HIWORD(*(_DWORD *)result) == 16963)
  {
    if (!*(_QWORD *)(result + 24))
    {
      v11 = 0;
      v12 = 0;
      qmemcpy((void *)sub_10029430C(&v11, 32), "The matrix has NULL data pointer", 32);
      sub_100294B74(-27, &v11, "cvGetMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 341);
    }
    return result;
  }
  if (v5 == 144)
  {
    v6 = (_DWORD *)sub_1001F68F4(result, (uint64_t)&v11, a3, 0);
    v4 = v6;
    if (!v6)
      goto LABEL_16;
    v5 = *v6;
  }
  if (HIWORD(v5) != 16962 || (int)v4[9] < 1 || (int)v4[8] <= 0)
  {
LABEL_16:
    v9 = 0;
    v10 = 0;
    qmemcpy((void *)sub_10029430C(&v9, 38), "Unrecognized or unsupported array type", 38);
    sub_100294B74(-5, &v9, "cvGetMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 353);
  }
  v7 = *((_QWORD *)v4 + 3);
  if (!v7)
  {
    v9 = 0;
    v10 = 0;
    qmemcpy((void *)sub_10029430C(&v9, 33), "Input array has NULL data pointer", 33);
    sub_100294B74(-27, &v9, "cvGetMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 356);
  }
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  v8 = *v4;
  *(_DWORD *)a2 = *v4;
  *(_DWORD *)(a2 + 4) = 2;
  *(_DWORD *)(a2 + 32) = v4[8];
  *(_DWORD *)(a2 + 36) = v4[1];
  *(_DWORD *)(a2 + 40) = v4[9];
  *(_DWORD *)(a2 + 44) = (((v8 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v8 & 7))) & 3);
  return a2;
}

void sub_1001F5590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F55F0(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  int v26;
  BOOL v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;

  v1 = a1[1];
  if ((int)v1 >= 1)
  {
    v2 = *a1;
    if ((int)v2 >= 1)
    {
      v3 = v2 & 0xFFFFFFFE;
      v4 = a1 + 56;
      while (1)
      {
        v6 = (v1 - 1);
        v7 = 8 * v6;
        if ((_DWORD)v2 == 1)
          break;
        v9 = v2 & 0xFFFFFFFE;
        v10 = a1 + 58;
        do
        {
          v11 = *(v10 - 26) + *(int *)(*v10 + v7 + 36);
          *(v10 - 27) += *(int *)(*(v10 - 1) + v7 + 36);
          *(v10 - 26) = v11;
          v10 += 2;
          v9 -= 2;
        }
        while (v9);
        v8 = v2 & 0xFFFFFFFE;
        if (v3 != v2)
          goto LABEL_10;
LABEL_12:
        v14 = &a1[v6];
        v16 = v14[24];
        v15 = v14 + 24;
        *v15 = v16 - 1;
        if (v16 > 1)
          return 1;
        v17 = *(_DWORD *)(*((_QWORD *)a1 + 28) + 8 * v6 + 32);
        if ((_DWORD)v2 == 1)
        {
          v18 = 0;
        }
        else
        {
          v19 = v2 & 0xFFFFFFFE;
          v20 = a1 + 58;
          do
          {
            v21 = *(v20 - 26) - v17 * (uint64_t)*(int *)(*v20 + v7 + 36);
            *(v20 - 27) -= v17 * (uint64_t)*(int *)(*(v20 - 1) + v7 + 36);
            *(v20 - 26) = v21;
            v20 += 2;
            v19 -= 2;
          }
          while (v19);
          v18 = v2 & 0xFFFFFFFE;
          if (v3 == v2)
            goto LABEL_4;
        }
        v22 = &v4[2 * v18];
        v23 = v2 - v18;
        do
        {
          *((_QWORD *)v22 - 26) -= v17 * (uint64_t)*(int *)(*(_QWORD *)v22 + 8 * v6 + 36);
          v22 += 2;
          --v23;
        }
        while (v23);
LABEL_4:
        *v15 = v17;
        if (v1-- <= 1)
          return 0;
      }
      v8 = 0;
LABEL_10:
      v12 = &v4[2 * v8];
      v13 = v2 - v8;
      do
      {
        *((_QWORD *)v12 - 26) += *(int *)(*(_QWORD *)v12 + 8 * v6 + 36);
        v12 += 2;
        --v13;
      }
      while (v13);
      goto LABEL_12;
    }
    v24 = (v1 - 1);
    v25 = &a1[v24];
    v26 = v25[24];
    v27 = __OFSUB__(v26--, 1);
    v25[24] = v26;
    if (!((v26 < 0) ^ v27 | (v26 == 0)))
      return 1;
    v28 = (unsigned int *)(*((_QWORD *)a1 + 28) + 8 * v24 + 32);
    while (1)
    {
      v29 = &a1[v24];
      v30 = *v28;
      v28 -= 2;
      v29[24] = v30;
      if (v24 <= 0)
        break;
      --v24;
      v31 = v29[23];
      v27 = __OFSUB__(v31--, 1);
      v29[23] = v31;
      if (!((v31 < 0) ^ v27 | (v31 == 0)))
        return 1;
    }
  }
  return 0;
}

uint64_t sub_1001F57B8(int a1, int *a2, unsigned int a3)
{
  __int16 v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  size_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;

  v3 = a3;
  v6 = (0x88442211 >> (4 * (a3 & 7))) & 0xF;
  if (!v6)
  {
    v21 = 0;
    v22 = 0;
    qmemcpy((void *)sub_10029430C(&v21, 23), "invalid array data type", 23);
    sub_100294B74(-210, &v21, "cvCreateSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 537);
  }
  if ((a1 - 33) <= 0xFFFFFFDF)
  {
    v21 = 0;
    v22 = 0;
    qmemcpy((void *)sub_10029430C(&v21, 24), "bad number of dimensions", 24);
    sub_100294B74(-211, &v21, "cvCreateSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 540);
  }
  if (!a2)
  {
    v21 = 0;
    v22 = 0;
    v7 = sub_10029430C(&v21, 20);
    *(_DWORD *)(v7 + 16) = 1919251566;
    *(_OWORD *)v7 = *(_OWORD *)"NULL <sizes> pointer";
    sub_100294B74(-27, &v21, "cvCreateSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 543);
  }
  if (a1 >= 1)
  {
    v8 = a1;
    v9 = a2;
    do
    {
      v10 = *v9++;
      if (v10 <= 0)
      {
        v21 = 0;
        v22 = 0;
        qmemcpy((void *)sub_10029430C(&v21, 37), "one of dimesion sizes is non-positive", 37);
        sub_100294B74(-201, &v21, "cvCreateSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 548);
      }
      --v8;
    }
    while (v8);
  }
  v11 = v6 + v6 * ((a3 >> 3) & 0x1FF);
  if (a1 <= 32)
    v12 = 32;
  else
    v12 = a1;
  v13 = sub_1001D450C(4 * (v12 - 32) + 184);
  *(_DWORD *)v13 = v3 & 0xFFF | 0x42440000;
  *(_DWORD *)(v13 + 4) = a1;
  *(_QWORD *)(v13 + 8) = 0;
  *(_DWORD *)(v13 + 16) = 1;
  v14 = 4 * a1;
  memcpy((void *)(v13 + 52), a2, v14);
  v15 = (v6 + 15) & -v6;
  v16 = ((_WORD)v11 + (_WORD)v15 + 3) & 0xFFFC;
  *(_DWORD *)(v13 + 44) = v15;
  *(_DWORD *)(v13 + 48) = v16;
  v17 = (v14 + v16 + 15) & 0xFFFFFFF0;
  sub_10021E0DC(4096);
  *(_QWORD *)(v13 + 24) = sub_100222C34(0, 112, v17, v18);
  *(_DWORD *)(v13 + 40) = 1024;
  v19 = (void *)sub_1001D450C(0x2000uLL);
  *(_QWORD *)(v13 + 32) = v19;
  bzero(v19, 0x2000uLL);
  return v13;
}

void sub_1001F5A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_1001F5AC4(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!a1)
  {
    v2 = 0;
    v3 = 0;
    sub_100294B74(-9, (uint64_t *)&v2, "cvReleaseSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 581);
  }
  v1 = *a1;
  if (*a1)
  {
    if (*(_WORD *)(v1 + 2) != 16964)
    {
      v2 = 0;
      v3 = 0;
      sub_100294B74(-206, (uint64_t *)&v2, "cvReleaseSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 588);
    }
    *a1 = 0;
    v2 = *(_QWORD **)(*(_QWORD *)(v1 + 24) + 72);
    sub_10021E204(&v2);
    j__free(*(void **)(v1 + 32));
    *(_QWORD *)(v1 + 32) = 0;
    j__free((void *)v1);
  }
}

void sub_1001F5B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F5BBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4[2];

  if (!a1 || HIWORD(*(_DWORD *)a1) != 16964)
  {
    v4[0] = 0;
    v4[1] = 0;
    qmemcpy((void *)sub_10029430C(v4, 27), "Invalid sparse array header", 27);
    sub_100294B74(-5, v4, "cvCloneSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 605);
  }
  v2 = sub_1001F57B8(*(_DWORD *)(a1 + 4), (int *)(a1 + 52), *(_DWORD *)a1);
  sub_10021D4FC(a1, v2, 0);
  return v2;
}

void sub_1001F5C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F5C88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (!a1 || *(_WORD *)(a1 + 2) != 16964)
  {
    v6 = 0;
    v7 = 0;
    qmemcpy((void *)sub_10029430C(&v6, 28), "Invalid sparse matrix header", 28);
    sub_100294B74(-5, &v6, "cvInitSparseMatIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 620);
  }
  if (!a2)
  {
    v6 = 0;
    v7 = 0;
    qmemcpy((void *)sub_10029430C(&v6, 21), "NULL iterator pointer", 21);
    sub_100294B74(-27, &v6, "cvInitSparseMatIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 623);
  }
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(unsigned int *)(a1 + 40);
  if ((int)v3 < 1)
  {
    result = 0;
    *(_DWORD *)(a2 + 16) = 0;
  }
  else
  {
    v4 = 0;
    while (1)
    {
      result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v4);
      if (result)
        break;
      if (v3 == ++v4)
      {
        result = 0;
        *(_DWORD *)(a2 + 16) = v3;
        return result;
      }
    }
    *(_QWORD *)(a2 + 8) = result;
    *(_DWORD *)(a2 + 16) = v4;
  }
  return result;
}

void sub_1001F5DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_1001F5E08(uint64_t a1)
{
  unsigned int v2;
  _DWORD *v3;
  void *v5;
  uint64_t v6[2];

  if (!a1)
    goto LABEL_15;
  v2 = *(_DWORD *)a1 & 0xFFFF0000;
  if (v2 == 1111687168)
    goto LABEL_6;
  if (v2 != 1111621632)
  {
    if (*(_DWORD *)a1 == 144)
    {
      if (off_100497A90)
      {
        off_100497A90(a1, 2);
      }
      else
      {
        v5 = *(void **)(a1 + 136);
        *(_QWORD *)(a1 + 136) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        j__free(v5);
      }
      return;
    }
LABEL_15:
    v6[0] = 0;
    v6[1] = 0;
    qmemcpy((void *)sub_10029430C(v6, 38), "unrecognized or unsupported array type", 38);
    sub_100294B74(-5, v6, "cvReleaseData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 1001);
  }
  if (*(int *)(a1 + 36) < 1 || *(int *)(a1 + 32) < 1)
    goto LABEL_15;
LABEL_6:
  if (*(_QWORD *)(a1 + 24))
  {
    *(_QWORD *)(a1 + 24) = 0;
    v3 = *(_DWORD **)(a1 + 8);
    if (v3)
    {
      if ((*v3)-- == 1)
        j__free(v3);
    }
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1001F5F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F5F58(uint64_t a1, unsigned int a2, unsigned int a3, int *a4)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  unint64_t __src;
  uint64_t v20;

  if (!a1)
    goto LABEL_30;
  v4 = *(_DWORD *)a1;
  v5 = *(_DWORD *)a1 & 0xFFFF0000;
  if (v5 == 1111621632)
  {
    v6 = *(_DWORD *)(a1 + 36);
    if (v6 >= 1)
    {
      v7 = *(_DWORD *)(a1 + 32);
      if (v7 >= 1)
      {
        if (*(_QWORD *)(a1 + 24))
        {
          if (v6 <= a3 || v7 <= a2)
          {
            __src = 0;
            v20 = 0;
            qmemcpy((void *)sub_10029430C(&__src, 21), "index is out of range", 21);
            sub_100294B74(-211, (uint64_t *)&__src, "cvPtr2D", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 1762);
          }
          if (a4)
            *a4 = *(_DWORD *)a1 & 0xFFF;
          return *(_QWORD *)(a1 + 24)
               + *(int *)(a1 + 4) * (uint64_t)(int)a2
               + (int)(((((v4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3)) * a3);
        }
      }
    }
LABEL_30:
    __src = 0;
    v20 = 0;
    qmemcpy((void *)sub_10029430C(&__src, 38), "unrecognized or unsupported array type", 38);
    sub_100294B74(-5, (uint64_t *)&__src, "cvPtr2D", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 1839);
  }
  if (v4 == 144)
  {
    v9 = *(_QWORD *)(a1 + 88);
    if (!v9)
      goto LABEL_30;
    v10 = *(_DWORD *)(a1 + 16) >> 3;
    v11 = *(_DWORD *)(a1 + 28);
    if (!v11)
      v10 *= *(_DWORD *)(a1 + 8);
    v12 = *(int **)(a1 + 48);
    if (v12)
    {
      v13 = v12[3];
      v14 = v12[4];
      v9 += *(_DWORD *)(a1 + 96) * v12[2] + v12[1] * v10;
      if (v11)
      {
        v15 = *v12;
        if (!(_DWORD)v15)
        {
          sub_1001F37D4(&__src, "COI must be non-null in case of planar images");
          sub_100294B74(-24, (uint64_t *)&__src, "cvPtr2D", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 1793);
        }
        v9 += *(int *)(a1 + 80) * (v15 - 1);
      }
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 40);
      v14 = *(_DWORD *)(a1 + 44);
    }
    if (v14 <= a2 || v13 <= a3)
    {
      __src = 0;
      v20 = 0;
      qmemcpy((void *)sub_10029430C(&__src, 21), "index is out of range", 21);
      sub_100294B74(-211, (uint64_t *)&__src, "cvPtr2D", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 1805);
    }
    v8 = v9 + (int)(v10 * a3 + *(_DWORD *)(a1 + 96) * a2);
    if (a4)
    {
      v18 = *(_DWORD *)(a1 + 8);
      if ((v18 - 5) <= 0xFFFFFFFB)
      {
        __src = 0;
        v20 = 0;
        sub_100294B74(-210, (uint64_t *)&__src, "cvPtr2D", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 1813);
      }
      *a4 = ((0x43160520u >> (((*(_DWORD *)(a1 + 16) >> 2) & 0x3C) + ((*(int *)(a1 + 16) >> 31) & 0x14))) & 7 | (8 * v18))
          - 8;
    }
  }
  else if (v5 == 1111752704)
  {
    if (*(_DWORD *)(a1 + 4) != 2)
    {
      sub_1001F37D4(&__src, "((CvSparseMat*)arr)->dims == 2");
      sub_100294B74(-215, (uint64_t *)&__src, "cvPtr2D", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 1833);
    }
    __src = __PAIR64__(a3, a2);
    return sub_1001F6FD4(a1, &__src, a4, 1, 0);
  }
  else
  {
    if (v5 != 1111687168)
      goto LABEL_30;
    v16 = *(_QWORD *)(a1 + 24);
    if (!v16)
      goto LABEL_30;
    if (*(_DWORD *)(a1 + 4) != 2 || *(_DWORD *)(a1 + 32) <= a2 || *(_DWORD *)(a1 + 40) <= a3)
    {
      __src = 0;
      v20 = 0;
      qmemcpy((void *)sub_10029430C(&__src, 21), "index is out of range", 21);
      sub_100294B74(-211, (uint64_t *)&__src, "cvPtr2D", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 1825);
    }
    v8 = v16 + *(int *)(a1 + 36) * (uint64_t)(int)a2 + *(int *)(a1 + 44) * (uint64_t)(int)a3;
    if (a4)
      *a4 = *(_DWORD *)a1 & 0xFFF;
  }
  return v8;
}

void sub_1001F63B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F6478(int *a1)
{
  int v1;
  unsigned int v2;
  uint64_t v5[2];

  if (!a1)
    goto LABEL_15;
  v1 = *a1;
  v2 = *a1 & 0xFFFF0000;
  if (v2 == 1111752704 || v2 == 1111687168)
    return v1 & 0xFFF;
  if (v2 == 1111621632)
  {
    if (a1[9] < 1 || a1[8] < 1)
      goto LABEL_15;
    return v1 & 0xFFF;
  }
  if (v1 != 144 || !*((_QWORD *)a1 + 11))
  {
LABEL_15:
    v5[0] = 0;
    v5[1] = 0;
    qmemcpy((void *)sub_10029430C(v5, 38), "unrecognized or unsupported array type", 38);
    sub_100294B74(-5, v5, "cvGetElemType", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 1094);
  }
  return ((0x43160520u >> (((a1[4] >> 2) & 0x3C) + ((a1[4] >> 31) & 0x14))) & 7 | (8 * a1[2])) - 8;
}

uint64_t sub_1001F657C()
{
  uint64_t v1;

  sub_10029434C(&v1);
  return 0xFFFFFFFFLL;
}

void sub_1001F659C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F65B4(uint64_t a1, int *__dst)
{
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  const float *v11;
  unsigned __int128 *v12;
  uint64_t v13;
  const float *v14;
  unsigned __int128 v15;
  unsigned __int128 v16;
  int *v17;
  int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21[2];

  if (!a1)
    goto LABEL_28;
  v2 = *(_DWORD *)a1 & 0xFFFF0000;
  if (v2 == 1111621632)
  {
    if (*(int *)(a1 + 36) >= 1)
    {
      v3 = *(_DWORD *)(a1 + 32);
      if (v3 >= 1)
      {
        if (__dst)
        {
          *__dst = v3;
          v4 = *(_DWORD *)(a1 + 36);
LABEL_11:
          __dst[1] = v4;
          return 2;
        }
        return 2;
      }
    }
    goto LABEL_28;
  }
  if (*(_DWORD *)a1 == 144)
  {
    if (*(_QWORD *)(a1 + 88))
    {
      if (__dst)
      {
        *__dst = *(_DWORD *)(a1 + 44);
        v4 = *(_DWORD *)(a1 + 40);
        goto LABEL_11;
      }
      return 2;
    }
LABEL_28:
    v21[0] = 0;
    v21[1] = 0;
    qmemcpy((void *)sub_10029430C(v21, 38), "unrecognized or unsupported array type", 38);
    sub_100294B74(-5, v21, "cvGetDims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 1148);
  }
  if (v2 == 1111752704)
  {
    v5 = *(unsigned int *)(a1 + 4);
    if (!__dst)
      return v5;
    memcpy(__dst, (const void *)(a1 + 52), 4 * (int)v5);
    return v5;
  }
  else
  {
    if (v2 != 1111687168)
      goto LABEL_28;
    v7 = *(unsigned int *)(a1 + 4);
    if (__dst && (int)v7 >= 1)
    {
      if (v7 >= 0xD
        && (a1 + 8 * v7 + 28 > (unint64_t)__dst ? (v8 = a1 + 32 >= (unint64_t)&__dst[v7]) : (v8 = 1), v8))
      {
        v9 = v7 & 7;
        if ((v7 & 7) == 0)
          v9 = 8;
        v10 = v7 - v9;
        v11 = (const float *)(a1 + 64);
        v12 = (unsigned __int128 *)(__dst + 4);
        v13 = v10;
        do
        {
          v14 = v11 - 8;
          v15 = (unsigned __int128)vld2q_f32(v14);
          v16 = (unsigned __int128)vld2q_f32(v11);
          *(v12 - 1) = v15;
          *v12 = v16;
          v11 += 16;
          v12 += 2;
          v13 -= 8;
        }
        while (v13);
      }
      else
      {
        v10 = 0;
      }
      v17 = &__dst[v10];
      v18 = (int *)(a1 + 8 * v10 + 32);
      v19 = v7 - v10;
      do
      {
        v20 = *v18;
        v18 += 2;
        *v17++ = v20;
        --v19;
      }
      while (v19);
    }
    return v7;
  }
}

void sub_1001F67BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_1001F67D4(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5[2];

  if (!a1)
    goto LABEL_10;
  if (HIWORD(*(_DWORD *)a1) == 16962)
  {
    v1 = *(_DWORD *)(a1 + 36);
    if ((v1 & 0x80000000) == 0)
    {
      v2 = *(unsigned int *)(a1 + 32);
      if ((v2 & 0x80000000) == 0)
        return v1 | (unint64_t)(v2 << 32);
    }
LABEL_10:
    v5[0] = 0;
    v5[1] = 0;
    qmemcpy((void *)sub_10029430C(v5, 33), "Array should be CvMat or IplImage", 33);
    sub_100294B74(-5, v5, "cvGetSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 1246);
  }
  if (*(_DWORD *)a1 != 144)
    goto LABEL_10;
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    return *(unsigned int *)(v4 + 12) | ((unint64_t)*(unsigned int *)(v4 + 16) << 32);
  else
    return *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned int *)(a1 + 44) << 32);
}

void sub_1001F68DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F68F4(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  const float *v26;
  int32x4_t v27;
  int32x4_t v28;
  const float *v29;
  unsigned __int128 v30;
  unsigned __int128 v31;
  int8x16_t v32;
  int *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v39;
  uint64_t v40;

  v5 = a2;
  if (!a1 || !a2)
  {
    v39 = 0;
    v40 = 0;
    qmemcpy((void *)sub_10029430C(&v39, 28), "NULL array pointer is passed", 28);
    sub_100294B74(-27, &v39, "cvGetMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2391);
  }
  v7 = *(_DWORD *)a1;
  v8 = *(_DWORD *)a1 & 0xFFFF0000;
  if (v8 == 1111621632)
  {
    if (*(int *)(a1 + 36) >= 1 && *(int *)(a1 + 32) >= 1)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v39 = 0;
        v40 = 0;
        qmemcpy((void *)sub_10029430C(&v39, 32), "The matrix has NULL data pointer", 32);
        sub_100294B74(-27, &v39, "cvGetMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2396);
      }
      v9 = 0;
      v5 = a1;
      if (!a3)
        return v5;
LABEL_59:
      *a3 = v9;
      return v5;
    }
LABEL_22:
    if (!a4 || v8 != 1111687168)
    {
      v39 = 0;
      v40 = 0;
      qmemcpy((void *)sub_10029430C(&v39, 38), "Unrecognized or unsupported array type", 38);
      sub_100294B74(-206, &v39, "cvGetMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2493);
    }
    v20 = *(_DWORD *)(a1 + 32);
    if (!*(_QWORD *)(a1 + 24))
    {
      v39 = 0;
      v40 = 0;
      qmemcpy((void *)sub_10029430C(&v39, 33), "Input array has NULL data pointer", 33);
      sub_100294B74(-27, &v39, "cvGetMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2466);
    }
    if ((v7 & 0x4000) == 0)
    {
      v39 = 0;
      v40 = 0;
      qmemcpy((void *)sub_10029430C(&v39, 44), "Only continuous nD arrays are supported here", 44);
      sub_100294B74(-5, &v39, "cvGetMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2469);
    }
    v21 = *(unsigned int *)(a1 + 4);
    if ((int)v21 < 3)
    {
      if ((_DWORD)v21 == 1)
        v23 = 1;
      else
        v23 = *(_DWORD *)(a1 + 40);
    }
    else
    {
      if (v21 >= 0xA)
      {
        v24 = (v21 - 1) & 7;
        if (!v24)
          v24 = 8;
        v25 = v21 - 1 - v24;
        v22 = v21 - v24;
        v26 = (const float *)(a1 + 72);
        v27.i64[0] = 0x100000001;
        v27.i64[1] = 0x100000001;
        v28.i64[0] = 0x100000001;
        v28.i64[1] = 0x100000001;
        do
        {
          v29 = v26 - 8;
          v30 = (unsigned __int128)vld2q_f32(v29);
          v31 = (unsigned __int128)vld2q_f32(v26);
          v27 = vmulq_s32((int32x4_t)v30, v27);
          v28 = vmulq_s32((int32x4_t)v31, v28);
          v26 += 16;
          v25 -= 8;
        }
        while (v25);
        v32 = (int8x16_t)vmulq_s32(v28, v27);
        *(int32x2_t *)v32.i8 = vmul_s32(*(int32x2_t *)v32.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
        v23 = v32.i32[0] * v32.i32[1];
      }
      else
      {
        v22 = 1;
        v23 = 1;
      }
      v33 = (int *)(a1 + 8 * v22 + 32);
      v34 = v21 - v22;
      do
      {
        v35 = *v33;
        v33 += 2;
        v23 *= v35;
        --v34;
      }
      while (v34);
    }
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 32) = v20;
    *(_DWORD *)(a2 + 36) = v23;
    v36 = *(_DWORD *)a1;
    v37 = ((((v36 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v36 & 7))) & 3)) * v23;
    if (v20 <= 1)
      v37 = 0;
    *(_DWORD *)a2 = *(_DWORD *)a1 & 0xFFF | 0x42424000;
    *(_DWORD *)(a2 + 4) = v37;
    if (v20 * (uint64_t)v37 < 0x80000000)
    {
      v9 = 0;
      if (!a3)
        return v5;
    }
    else
    {
      v9 = 0;
      *(_DWORD *)a2 = v36 & 0xFFF | 0x42420000;
      if (!a3)
        return v5;
    }
    goto LABEL_59;
  }
  if (v7 != 144)
    goto LABEL_22;
  if (!*(_QWORD *)(a1 + 88))
  {
    v39 = 0;
    v40 = 0;
    qmemcpy((void *)sub_10029430C(&v39, 31), "The image has NULL data pointer", 31);
    sub_100294B74(-27, &v39, "cvGetMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2406);
  }
  v10 = (0x43160520u >> (((*(_DWORD *)(a1 + 16) >> 2) & 0x3C) + ((*(int *)(a1 + 16) >> 31) & 0x14))) & 7;
  v11 = *(_DWORD *)(a1 + 8);
  if (v11 <= 1)
    v12 = 0;
  else
    v12 = *(_DWORD *)(a1 + 28);
  v13 = *(int **)(a1 + 48);
  if (!v13)
  {
    if (v12)
    {
      v39 = 0;
      v40 = 0;
      qmemcpy((void *)sub_10029430C(&v39, 40), "Pixel order should be used with coi == 0", 40);
      sub_100294B74(-206, &v39, "cvGetMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2452);
    }
    v19 = (v10 | (8 * v11)) - 8;
    v15 = *(_DWORD *)(a1 + 40);
    v14 = *(_DWORD *)(a1 + 44);
    v17 = *(_QWORD *)(a1 + 88);
    v16 = *(_DWORD *)(a1 + 96);
    v18 = v5;
LABEL_38:
    sub_1001F3E54(v18, v14, v15, v19, v17, v16);
    v9 = 0;
    if (!a3)
      return v5;
    goto LABEL_59;
  }
  if (v12 == 1)
  {
    if (!*v13)
    {
      sub_1001F37D4(&v39, "Images with planar data layout should be used with COI selected");
      sub_100294B74(-206, &v39, "cvGetMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2422);
    }
    v15 = v13[3];
    v14 = v13[4];
    v16 = *(_DWORD *)(a1 + 96);
    v17 = *(_QWORD *)(a1 + 88)
        + (*v13 - 1) * *(int *)(a1 + 80)
        + v16 * (uint64_t)v13[2]
        + ((uint64_t)v13[1] << ((0xFA50u >> (2
                                          * ((0x43160520u >> (((*(_DWORD *)(a1 + 16) >> 2) & 0x3C)
                                                            + ((*(int *)(a1 + 16) >> 31) & 0x14))) & 7))) & 3));
    v18 = v5;
    v19 = (0x43160520u >> (((*(_DWORD *)(a1 + 16) >> 2) & 0x3C) + ((*(int *)(a1 + 16) >> 31) & 0x14))) & 7;
    goto LABEL_38;
  }
  v9 = *v13;
  if (v11 >= 513)
  {
    v39 = 0;
    v40 = 0;
    qmemcpy((void *)sub_10029430C(&v39, 56), "The image is interleaved and has over CV_CN_MAX channels", 56);
    sub_100294B74(-15, &v39, "cvGetMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2438);
  }
  sub_1001F3E54(a2, v13[4], v13[3], v10 | (8 * v11 - 8), *(_QWORD *)(a1 + 88)+ *(int *)(a1 + 96) * (uint64_t)v13[2]+ v13[1] * (uint64_t)(int)(((((8 * v11 - 8) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * v10)) & 3)), *(_DWORD *)(a1 + 96));
  if (a3)
    goto LABEL_59;
  return v5;
}

void sub_1001F6EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F6FD4(uint64_t a1, _DWORD *__src, int *a3, int a4, int *a5)
{
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t i;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v36;
  uint64_t v37;
  int v38;

  if (a5)
  {
    v7 = *a5;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 4);
    if (v14 < 1)
    {
      v7 = 0;
    }
    else
    {
      v15 = 0;
      v7 = 0;
      do
      {
        v16 = __src[v15];
        if (v16 >= *(_DWORD *)(a1 + 52 + 4 * v15))
        {
          v36 = 0;
          v37 = 0;
          qmemcpy((void *)sub_10029430C(&v36, 30), "One of indices is out of range", 30);
          sub_100294B74(-211, &v36, "icvGetNodePtr", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 657);
        }
        v7 = v16 + 1540483477 * v7;
        ++v15;
      }
      while (v15 < v14);
    }
  }
  v8 = *(_DWORD *)(a1 + 40);
  v9 = (v8 - 1) & v7;
  v10 = v7 & 0x7FFFFFFF;
  if (a4 >= -1 && (v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9)) != 0)
  {
    v12 = a3;
    do
    {
      if (*(_DWORD *)v11 == v10)
      {
        v18 = *(unsigned int *)(a1 + 4);
        if ((int)v18 < 1)
        {
          LODWORD(v17) = 0;
        }
        else
        {
          v17 = 0;
          while (__src[v17] == *(_DWORD *)(v11 + *(int *)(a1 + 48) + 4 * v17))
          {
            if (v18 == ++v17)
              goto LABEL_21;
          }
        }
        if ((_DWORD)v17 == (_DWORD)v18)
        {
LABEL_21:
          v13 = v11 + *(int *)(a1 + 44);
          if (!a4)
            goto LABEL_42;
          goto LABEL_22;
        }
      }
      v11 = *(_QWORD *)(v11 + 8);
    }
    while (v11);
    v13 = 0;
    if (a4)
      goto LABEL_22;
  }
  else
  {
    v13 = 0;
    v12 = a3;
    if (a4)
    {
LABEL_22:
      if (!v13)
      {
        v19 = *(_QWORD *)(a1 + 24);
        if (*(_DWORD *)(v19 + 104) >= 3 * v8)
        {
          if (v8 >= 512)
            v20 = 2 * v8;
          else
            v20 = 1024;
          v21 = (char *)sub_1001D450C(8 * v20);
          bzero(v21, 8 * v20);
          v22 = sub_1001F5C88(a1, (uint64_t)&v36);
          if (v22)
          {
            v23 = v20 - 1;
            v24 = v38;
            for (i = v37; ; v22 = i)
            {
              i = *(_QWORD *)(i + 8);
              if (!i)
              {
                v27 = v24 + 1;
                v28 = *(_DWORD *)(v36 + 40);
                if (v24 + 1 >= v28)
                {
LABEL_35:
                  v38 = v27;
                  v30 = 8 * (*(_DWORD *)v22 & v23);
                  *(_QWORD *)(v22 + 8) = *(_QWORD *)&v21[v30];
                  *(_QWORD *)&v21[v30] = v22;
                  break;
                }
                v29 = (uint64_t *)(*(_QWORD *)(v36 + 32) + 8 * v24++ + 8);
                while (1)
                {
                  i = *v29;
                  if (*v29)
                    break;
                  ++v24;
                  ++v29;
                  if (v28 == v24)
                    goto LABEL_35;
                }
              }
              v37 = i;
              v26 = 8 * (*(_DWORD *)v22 & v23);
              *(_QWORD *)(v22 + 8) = *(_QWORD *)&v21[v26];
              *(_QWORD *)&v21[v26] = v22;
            }
          }
          j__free(*(void **)(a1 + 32));
          *(_QWORD *)(a1 + 32) = v21;
          *(_DWORD *)(a1 + 40) = v20;
          v9 = (v20 - 1) & v10;
          v19 = *(_QWORD *)(a1 + 24);
        }
        v31 = *(_QWORD *)(v19 + 96);
        v36 = v31;
        if (v31)
        {
          *(_QWORD *)(v19 + 96) = *(_QWORD *)(v31 + 8);
          *(_DWORD *)v31 &= 0x3FFFFFFu;
          ++*(_DWORD *)(v19 + 104);
        }
        else
        {
          sub_100222D30(v19, 0, &v36);
          v31 = v36;
        }
        *(_DWORD *)v31 = v10;
        v32 = *(_QWORD *)(a1 + 32);
        v33 = 8 * v9;
        *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + v33);
        *(_QWORD *)(v32 + v33) = v31;
        memcpy((void *)(v31 + *(int *)(a1 + 48)), __src, 4 * *(int *)(a1 + 4));
        v13 = v31 + *(int *)(a1 + 44);
        if (a4 >= 1)
          bzero((void *)(v31 + *(int *)(a1 + 44)), (((*(_DWORD *)a1 >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * (*(_BYTE *)a1 & 7))) & 3));
      }
    }
  }
LABEL_42:
  if (v12)
    *v12 = *(_DWORD *)a1 & 0xFFF;
  return v13;
}

void sub_1001F7348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F7364(uint64_t a1, unsigned int *__src, int *a3, int a4, int *a5)
{
  unsigned int v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int *v10;
  int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;

  if (!__src)
  {
    v14 = 0;
    v15 = 0;
    qmemcpy((void *)sub_10029430C(&v14, 23), "NULL pointer to indices", 23);
    sub_100294B74(-27, &v14, "cvPtrND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 1888);
  }
  if (!a1)
    goto LABEL_20;
  v5 = *(_DWORD *)a1 & 0xFFFF0000;
  if (v5 == 1111621632)
  {
    if (*(int *)(a1 + 36) >= 1 && *(int *)(a1 + 32) >= 1)
      return sub_1001F5F58(a1, *__src, __src[1], a3);
    goto LABEL_20;
  }
  if (v5 != 1111687168)
  {
    if (v5 == 1111752704)
      return sub_1001F6FD4(a1, __src, a3, a4, a5);
    if (*(_DWORD *)a1 == 144)
      return sub_1001F5F58(a1, *__src, __src[1], a3);
LABEL_20:
    v14 = 0;
    v15 = 0;
    qmemcpy((void *)sub_10029430C(&v14, 38), "unrecognized or unsupported array type", 38);
    sub_100294B74(-5, &v14, "cvPtrND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 1912);
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    goto LABEL_20;
  v8 = *(_DWORD *)(a1 + 4);
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = (int *)(a1 + 36);
    do
    {
      v12 = __src[v9];
      if (v12 >= *(v10 - 1))
      {
        v14 = 0;
        v15 = 0;
        qmemcpy((void *)sub_10029430C(&v14, 21), "index is out of range", 21);
        sub_100294B74(-211, &v14, "cvPtrND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 1902);
      }
      v11 = *v10;
      v10 += 2;
      v7 += v11 * (uint64_t)(int)v12;
      ++v9;
    }
    while (v9 < v8);
  }
  if (a3)
    *a3 = *(_DWORD *)a1 & 0xFFF;
  return v7;
}

void sub_1001F75B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F75F8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v7 = a1;
  if (!a2)
  {
    v19 = 0;
    v20 = 0;
    sub_100294B74(-27, &v19, "cvReshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2719);
  }
  if (!a1 || *(_WORD *)(a1 + 2) != 16962 || *(int *)(a1 + 36) < 1 || *(int *)(a1 + 32) < 1 || !*(_QWORD *)(a1 + 24))
  {
    v18 = 0;
    v7 = sub_1001F68F4(a1, a2, &v18, 1);
    if (v18)
    {
      v19 = 0;
      v20 = 0;
      v8 = sub_10029430C(&v19, 20);
      *(_DWORD *)(v8 + 16) = 1684370546;
      *(_OWORD *)v8 = *(_OWORD *)"COI is not supported";
      sub_100294B74(-24, &v19, "cvReshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2726);
    }
  }
  if (a3)
  {
    if ((a3 - 5) <= 0xFFFFFFFB)
    {
      v19 = 0;
      v20 = 0;
      sub_100294B74(-15, &v19, "cvReshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2732);
    }
    if (v7 != a2)
      goto LABEL_14;
  }
  else
  {
    a3 = ((*(_DWORD *)v7 >> 3) & 0x1FF) + 1;
    if (v7 != a2)
    {
LABEL_14:
      v9 = *(_DWORD *)(a2 + 16);
      v10 = *(_QWORD *)(v7 + 32);
      v11 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)a2 = *(_OWORD *)v7;
      *(_OWORD *)(a2 + 16) = v11;
      *(_QWORD *)(a2 + 32) = v10;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = v9;
    }
  }
  v12 = *(_DWORD *)(v7 + 36) + *(_DWORD *)(v7 + 36) * ((*(_DWORD *)v7 >> 3) & 0x1FF);
  if (a3 > v12)
  {
    if (a4)
      goto LABEL_22;
    goto LABEL_20;
  }
  if (!a4 && v12 % a3)
LABEL_20:
    a4 = *(_DWORD *)(v7 + 32) * v12 / a3;
  if (!a4)
  {
    a4 = *(_DWORD *)(v7 + 32);
LABEL_34:
    *(_DWORD *)(a2 + 32) = a4;
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(v7 + 4);
    v16 = v12 / a3;
    if (v12 / a3 * a3 == v12)
      goto LABEL_36;
LABEL_35:
    v19 = 0;
    v20 = 0;
    qmemcpy((void *)sub_10029430C(&v19, 62), "The total width is not divisible by the new number of channels", 62);
    sub_100294B74(-15, &v19, "cvReshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2776);
  }
LABEL_22:
  v13 = *(_DWORD *)(v7 + 32);
  if (a4 == v13)
    goto LABEL_34;
  if ((*(_DWORD *)v7 & 0x4000) == 0)
  {
    v19 = 0;
    v20 = 0;
    qmemcpy((void *)sub_10029430C(&v19, 72), "The matrix is not continuous, thus its number of rows can not be changed", 72);
    sub_100294B74(-13, &v19, "cvReshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2757);
  }
  v14 = v13 * v12;
  if (a4 > v14)
  {
    v19 = 0;
    v20 = 0;
    qmemcpy((void *)sub_10029430C(&v19, 22), "Bad new number of rows", 22);
    sub_100294B74(-211, &v19, "cvReshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2760);
  }
  v15 = v14 / a4;
  if (v14 / a4 * a4 != v14)
  {
    v19 = 0;
    v20 = 0;
    qmemcpy((void *)sub_10029430C(&v19, 78), "The total number of matrix elements is not divisible by the new number of rows", 78);
    sub_100294B74(-5, &v19, "cvReshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2766);
  }
  *(_DWORD *)(a2 + 32) = a4;
  *(_DWORD *)(a2 + 4) = ((0x88442211 >> (4 * (*(_BYTE *)v7 & 7))) & 0xF) * v15;
  v16 = v15 / a3;
  if (v15 / a3 * a3 != v15)
    goto LABEL_35;
LABEL_36:
  *(_DWORD *)(a2 + 36) = v16;
  *(_DWORD *)a2 = *(_DWORD *)v7 & 0xFFFFF007 | (8 * a3 - 8);
  return a2;
}

void sub_1001F79CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F7A74(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, int a6)
{
  char **v12;
  const char *v13;
  const char *v14;
  int v15;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  if (!a1)
  {
    v27 = 0;
    v28 = 0;
    qmemcpy((void *)sub_10029430C(&v27, 22), "null pointer to header", 22);
    sub_100294B74(-9, &v27, "cvInitImageHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2918);
  }
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)a1 = 144;
  if ((a4 - 1) > 3)
  {
    v13 = "";
    v14 = "";
  }
  else
  {
    v12 = &off_10044CCA8[2 * (a4 - 1)];
    v13 = *v12;
    v14 = v12[1];
  }
  strncpy((char *)(a1 + 20), v13, 4uLL);
  strncpy((char *)(a1 + 24), v14, 4uLL);
  if ((a2 & 0x8000000080000000) != 0)
  {
    v27 = 0;
    v28 = 0;
    qmemcpy((void *)sub_10029430C(&v27, 13), "Bad input roi", 13);
    sub_100294B74(-25, &v27, "cvInitImageHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2928);
  }
  v15 = a3 & 0x7FFFFFFF;
  v20 = a3 != 1 && v15 != 8 && v15 != 16 && v15 != 32 && a3 != 64;
  if (a4 < 0 || v20)
  {
    v27 = 0;
    v28 = 0;
    v21 = sub_10029430C(&v27, 18);
    *(_WORD *)(v21 + 16) = 29793;
    *(_OWORD *)v21 = *(_OWORD *)"Unsupported format";
    sub_100294B74(-17, &v27, "cvInitImageHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2935);
  }
  if (a5 >= 2)
  {
    v27 = 0;
    v28 = 0;
    *(_OWORD *)sub_10029430C(&v27, 16) = *(_OWORD *)"Bad input origin";
    sub_100294B74(-20, &v27, "cvInitImageHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2937);
  }
  if (a6 != 4 && a6 != 8)
  {
    v27 = 0;
    v28 = 0;
    qmemcpy((void *)sub_10029430C(&v27, 15), "Bad input align", 15);
    sub_100294B74(-21, &v27, "cvInitImageHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2940);
  }
  *(_QWORD *)(a1 + 40) = a2;
  v22 = *(_QWORD *)(a1 + 48);
  if (v22)
  {
    *(_QWORD *)v22 = 0;
    *(_DWORD *)(v22 + 8) = 0;
    *(_QWORD *)(v22 + 12) = a2;
  }
  if (a4 <= 1)
    v23 = 1;
  else
    v23 = a4;
  *(_DWORD *)(a1 + 8) = v23;
  *(_DWORD *)(a1 + 16) = a3;
  v24 = (a6 + ((v15 * a2 * v23 + 7) >> 3) - 1) & -a6;
  *(_DWORD *)(a1 + 96) = v24;
  *(_DWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 36) = a6;
  v25 = SHIDWORD(a2) * (uint64_t)v24;
  *(_DWORD *)(a1 + 80) = v25;
  if (v25 != (int)v25)
  {
    v27 = 0;
    v28 = 0;
    qmemcpy((void *)sub_10029430C(&v27, 22), "Overflow for imageSize", 22);
    sub_100294B74(-4, &v27, "cvInitImageHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2962);
  }
  return a1;
}

void sub_1001F7DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F7E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  char **v6;
  const char *v7;
  const char *v8;
  uint64_t v9;

  v3 = a3;
  v4 = a2;
  if (off_100497A80)
  {
    if ((a3 - 1) > 3)
    {
      v7 = "";
      v8 = "";
    }
    else
    {
      v6 = &off_10044CCA8[2 * (a3 - 1)];
      v7 = *v6;
      v8 = v6[1];
    }
    v9 = off_100497A80(a3, 0, a2, v7, v8, 0, 0, 4, a1, 0, 0, 0, 0);
  }
  else
  {
    v9 = sub_1001D450C(0x90uLL);
    sub_1001F7A74(v9, a1, v4, v3, 0, 4);
  }
  sub_1001F396C(v9);
  return v9;
}

void sub_1001F7F24(void ***a1)
{
  void **v1;
  uint64_t v2[2];

  if (!a1)
  {
    v2[0] = 0;
    v2[1] = 0;
    sub_100294B74(-27, v2, "cvReleaseImage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 2996);
  }
  v1 = *a1;
  if (*a1)
  {
    *a1 = 0;
    sub_1001F5E08((uint64_t)v1);
    if (off_100497A90)
    {
      off_100497A90(v1, 5);
    }
    else
    {
      j__free(v1[6]);
      v1[6] = 0;
      j__free(v1);
    }
  }
}

void sub_1001F7FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F7FE4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  if (!result)
  {
    v11 = 0;
    v12 = 0;
    sub_100294B74(-9, &v11, "cvSetImageROI", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 3013);
  }
  if ((a3 & 0x8000000080000000) != 0
    || (v4 = *(_DWORD *)(result + 40), v4 <= (int)a2)
    || (v5 = *(_DWORD *)(result + 44), v5 <= SHIDWORD(a2))
    || (int)a2 + (int)a3 < ((_DWORD)a3 != 0)
    || HIDWORD(a2) + HIDWORD(a3) < (HIDWORD(a3) != 0))
  {
    v11 = 0;
    v12 = 0;
    qmemcpy((void *)sub_10029430C(&v11, 184), "rect.width >= 0 && rect.height >= 0 && rect.x < image->width && rect.y < image->height && rect.x + rect.width >= (int)(rect.width > 0) && rect.y + rect.height >= (int)(rect.height > 0)", 184);
    sub_100294B74(-215, &v11, "cvSetImageROI", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 3019);
  }
  v6 = a2 & ~((int)a2 >> 31);
  v7 = HIDWORD(a2) & ~(SHIDWORD(a2) >> 31);
  if (v4 >= (int)a2 + (int)a3)
    v4 = a2 + a3;
  if (v5 >= HIDWORD(a2) + HIDWORD(a3))
    v5 = HIDWORD(a2) + HIDWORD(a3);
  v8 = (v4 - v6);
  v9 = v5 - v7;
  v10 = *(_DWORD **)(result + 48);
  if (v10)
  {
    v10[1] = v6;
    v10[2] = v7;
    v10[3] = v8;
    v10[4] = v9;
  }
  else
  {
    if (off_100497A98)
    {
      result = off_100497A98(0, v6, v7, v8, (v5 - v7));
    }
    else
    {
      result = sub_1001D450C(0x14uLL);
      *(_DWORD *)result = 0;
      *(_DWORD *)(result + 4) = v6;
      *(_DWORD *)(result + 8) = v7;
      *(_DWORD *)(result + 12) = v8;
      *(_DWORD *)(result + 16) = v9;
    }
    *(_QWORD *)(v3 + 48) = result;
  }
  return result;
}

void sub_1001F81B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F81E0(uint64_t result, uint64_t a2)
{
  int v2;
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a2;
  if (!result)
  {
    v7 = 0;
    v8 = 0;
    sub_100294B74(-9, &v7, "cvSetImageCOI", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 3086);
  }
  if (*(_DWORD *)(result + 8) < a2)
  {
    v7 = 0;
    v8 = 0;
    sub_100294B74(-24, &v7, "cvSetImageCOI", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 3089);
  }
  v4 = (uint64_t *)(result + 48);
  v3 = *(_DWORD **)(result + 48);
  if ((_DWORD)a2 || v3)
  {
    if (v3)
    {
      *v3 = a2;
    }
    else
    {
      v6 = *(unsigned int *)(result + 40);
      v5 = *(unsigned int *)(result + 44);
      if (off_100497A98)
      {
        result = off_100497A98(a2, 0, 0, v6, v5);
      }
      else
      {
        result = sub_1001D450C(0x14uLL);
        *(_DWORD *)result = v2;
        *(_DWORD *)(result + 4) = 0;
        *(_DWORD *)(result + 8) = 0;
        *(_DWORD *)(result + 12) = v6;
        *(_DWORD *)(result + 16) = v5;
      }
      *v4 = result;
    }
  }
  return result;
}

void sub_1001F830C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F833C(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v3[2];

  if (!a1)
  {
    v3[0] = 0;
    v3[1] = 0;
    sub_100294B74(-9, v3, "cvGetImageCOI", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 3109);
  }
  v1 = *(unsigned int **)(a1 + 48);
  if (v1)
    return *v1;
  else
    return 0;
}

void sub_1001F83B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F83CC(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  size_t v17;
  uint64_t v19[2];

  if (!a1 || *(_DWORD *)a1 != 144)
  {
    v19[0] = 0;
    v19[1] = 0;
    *(_OWORD *)sub_10029430C(v19, 16) = *(_OWORD *)"Bad image header";
    sub_100294B74(-5, v19, "cvCloneImage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/array.cpp", 3121);
  }
  if (off_100497AA0)
    return off_100497AA0(a1);
  v2 = sub_1001D450C(0x90uLL);
  v3 = *((_QWORD *)a1 + 16);
  v5 = a1[6];
  v4 = a1[7];
  *(_OWORD *)(v2 + 80) = a1[5];
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[4];
  *(_OWORD *)(v2 + 48) = a1[3];
  *(_OWORD *)(v2 + 96) = v5;
  *(_OWORD *)(v2 + 112) = v4;
  *(_QWORD *)(v2 + 128) = v3;
  v9 = *a1;
  *(_OWORD *)(v2 + 64) = v8;
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v7;
  *(_OWORD *)v2 = v9;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  v10 = (unsigned int *)*((_QWORD *)a1 + 6);
  if (v10)
  {
    v12 = *v10;
    v11 = v10[1];
    v14 = v10[2];
    v13 = v10[3];
    v15 = v10[4];
    if (off_100497A98)
    {
      v16 = (_DWORD *)off_100497A98(v12, v11, v14, v13, v15);
    }
    else
    {
      v16 = (_DWORD *)sub_1001D450C(0x14uLL);
      *v16 = v12;
      v16[1] = v11;
      v16[2] = v14;
      v16[3] = v13;
      v16[4] = v15;
    }
    *(_QWORD *)(v2 + 48) = v16;
  }
  if (*((_QWORD *)a1 + 11))
  {
    v17 = *((int *)a1 + 20);
    sub_1001F396C(v2);
    memcpy(*(void **)(v2 + 88), *((const void **)a1 + 11), v17);
  }
  return v2;
}

void sub_1001F8548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_1001F8560(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;

  v2 = a2;
  sub_10021E204(&v2);
}

void sub_1001F8584(uint64_t a1, void *a2)
{
  void *v2;

  v2 = a2;
  sub_10026FCA4(&v2);
}

void sub_1001F85A8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  BOOL v38;
  BOOL v39;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int32x4_t v49;
  float *v50;
  float *v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t i;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int64x2_t *v84;
  unint64_t v85;
  uint64_t v86;
  int64x2_t v87;
  int64x2_t v88;
  _QWORD *v89;
  unint64_t v90;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  int v100[2];
  int v101;
  unint64_t v102;
  uint64_t (*v104)();
  _BYTE v105[32];
  unint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  void *v114;
  _QWORD v115[2];
  char v116[8];
  int v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120[132];
  float32x4x2_t v121;
  float32x4x2_t v122;

  sub_100298C2C(v116, &off_10044CCE8);
  if (!a1 || !a2)
  {
    v118 = 0;
    v119 = 0;
    v5 = sub_10029430C(&v118, 11);
    *(_DWORD *)(v5 + 7) = 807419424;
    *(_QWORD *)v5 = *(_QWORD *)"mv && n > 0";
    sub_100294B74(-215, (uint64_t *)&v118, "merge", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/convert.cpp", 328);
  }
  v98 = a3;
  v101 = *(_DWORD *)a1 & 7;
  v6 = 0;
  LODWORD(v7) = 0;
  v8 = 1;
  do
  {
    v10 = a1 + 96 * v6;
    v11 = *(_DWORD **)(v10 + 64);
    v12 = *(v11 - 1);
    v13 = *(_DWORD **)(a1 + 64);
    if ((_DWORD)v12 != *(v13 - 1))
    {
LABEL_18:
      v118 = 0;
      v119 = 0;
      qmemcpy((void *)sub_10029430C(&v118, 50), "mv[i].size == mv[0].size && mv[i].depth() == depth", 50);
      sub_100294B74(-215, (uint64_t *)&v118, "merge", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/convert.cpp", 337);
    }
    if ((_DWORD)v12 == 2)
    {
      if (*v11 != *v13 || v11[1] != v13[1])
        goto LABEL_18;
    }
    else if ((int)v12 >= 1)
    {
      if (*v11 != *v13)
        goto LABEL_18;
      v14 = 1;
      do
      {
        v15 = v14;
        if (v12 == v14)
          break;
        v16 = v11[v14];
        v17 = v13[v14++];
      }
      while (v16 == v17);
      if (v15 < v12)
        goto LABEL_18;
    }
    if ((*(_DWORD *)v10 & 7) != v101)
      goto LABEL_18;
    v8 &= (*(_DWORD *)v10 & 0xFF8) == 0;
    v9 = v7 + ((*(_DWORD *)v10 >> 3) & 0x1FF);
    v7 = v9 + 1;
    ++v6;
  }
  while (v6 != a2);
  if (v9 >= 0x200)
  {
    v118 = 0;
    v119 = 0;
    v18 = sub_10029430C(&v118, 19);
    *(_DWORD *)(v18 + 15) = 842085664;
    *(_OWORD *)v18 = *(_OWORD *)"0 < cn && cn <= 512";
    sub_100294B74(-215, (uint64_t *)&v118, "merge", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/convert.cpp", 342);
  }
  sub_100258F0C((int *)v98, *(_DWORD *)(a1 + 4), *(uint64_t **)(a1 + 64), (v101 | (8 * (v9 + 1))) - 8, 0xFFFFFFFF, 0, 0);
  v19 = sub_10025D914((_DWORD *)v98);
  if (v19 == 0x10000)
  {
    v20 = *(_QWORD *)(v98 + 8);
    v21 = *(_OWORD *)(v20 + 16);
    v108 = *(_OWORD *)v20;
    v109 = v21;
    v110 = *(_OWORD *)(v20 + 32);
    v22 = *(_QWORD *)(v20 + 56);
    v111 = *(_QWORD *)(v20 + 48);
    v112 = v22;
    v113 = (char *)&v108 + 8;
    v114 = v115;
    v115[0] = 0;
    v115[1] = 0;
    if (v22)
    {
      v23 = (unsigned int *)(v22 + 20);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
    }
    if (*(int *)(v20 + 4) > 2)
    {
      DWORD1(v108) = 0;
      sub_100256B48((uint64_t)&v108, v20);
    }
    else
    {
      v25 = *(_QWORD **)(v20 + 72);
      v26 = v114;
      *(_QWORD *)v114 = *v25;
      v26[1] = v25[1];
    }
  }
  else
  {
    sub_10025CCB8(v98, -1, (uint64_t)&v108);
  }
  if (a2 == 1)
  {
    LODWORD(v118) = 33619968;
    v119 = (uint64_t)&v108;
    v120[0] = 0;
    sub_1002181EC(a1, (uint64_t)&v118);
    goto LABEL_129;
  }
  if ((v8 & 1) == 0)
  {
    v118 = v120;
    v119 = (2 * v7);
    if (v7 >= 0x85)
      operator new[]();
    v28 = 0;
    v29 = 0;
    while (1)
    {
      v30 = *(unsigned int *)(a1 + 96 * v29);
      v31 = (v30 >> 3) & 0x1FF;
      if (v31 < 0x1F)
        goto LABEL_55;
      v32 = v28;
      v33 = &v120[v32];
      v34 = (8 * v31);
      v35 = (char *)&v120[v32] + v34;
      v36 = (char *)&v120[v32] + 4;
      v37 = &v36[v34];
      v38 = 2 * v28 <= 2 * (v28 + v31) && ((2 * v28) ^ 0xFFFFFFFE) >= 2 * (int)v31;
      v39 = v38 && v35 >= (char *)v33;
      if (v39 && v37 >= v36)
      {
        v46 = 0;
        v41 = (v31 + 1) & 0x3F8;
        v47 = vdupq_n_s32(v28);
        do
        {
          v48 = (int8x16_t)vdupq_n_s32(v46);
          v49.i32[0] = v46;
          v49.i32[1] = v46 + 1;
          v49.u64[1] = (unint64_t)vorr_s8(*(int8x8_t *)v48.i8, (int8x8_t)0x300000002);
          v121.val[0] = (float32x4_t)vaddq_s32(v47, v49);
          v121.val[1] = v121.val[0];
          v122.val[0] = (float32x4_t)vaddq_s32(v47, (int32x4_t)vorrq_s8(v48, (int8x16_t)xmmword_1003BCA80));
          v122.val[1] = v122.val[0];
          v50 = (float *)&v119 + ((2 * v121.val[0].i32[0]) | 1u) + 1;
          v51 = (float *)&v119 + ((2 * v122.val[0].i32[0]) | 1u) + 1;
          vst2q_f32(v50, v121);
          vst2q_f32(v51, v122);
          v46 += 8;
        }
        while (v41 != v46);
        if (v41 == v31 + 1)
          goto LABEL_43;
      }
      else
      {
LABEL_55:
        v41 = 0;
      }
      v42 = v30;
      v43 = v28 + v41;
      v44 = v28 + v41;
      v45 = ((v42 >> 3) & 0x1FF) - v41 + 1;
      do
      {
        LODWORD(v120[v44]) = v43;
        HIDWORD(v120[v44++]) = v43++;
        --v45;
      }
      while (v45);
LABEL_43:
      ++v29;
      v28 += v31 + 1;
      if (v29 == a2)
      {
        sub_1001F91C0(a1, a2, (unsigned int *)&v108, 1uLL, (uint64_t)v120, v7);
        if (v118 != v120 && v118)
          goto LABEL_128;
        goto LABEL_129;
      }
    }
  }
  v104 = off_10044CFA8[v101];
  if (v101 == 7)
  {
    v118 = 0;
    v119 = 0;
    v27 = sub_10029430C(&v118, 9);
    *(_BYTE *)(v27 + 8) = 48;
    *(_QWORD *)v27 = *(_QWORD *)"func != 0";
    sub_100294B74(-215, (uint64_t *)&v118, "merge", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/convert.cpp", 373);
  }
  if (SDWORD1(v108) < 1)
    v102 = 0;
  else
    v102 = *((_QWORD *)v114 + (DWORD1(v108) - 1));
  v52 = v7 + 1;
  v118 = v120;
  v119 = 16 * (v7 + 1) + 16;
  v99 = v108;
  if (v7 >= 0x3F)
    operator new[]();
  v54 = (_QWORD *)(((unint64_t)&v120[v7 + 2] + 7) & 0xFFFFFFFFFFFFFFF0);
  v120[0] = (uint64_t)&v108;
  if ((_DWORD)v7)
  {
    v55 = v7;
    if (v7 < 4uLL)
    {
      v53 = 0;
    }
    else
    {
      v56 = 0;
      v53 = v7 & 0xFFFFFFFC;
      v57 = (int64x2_t)xmmword_1003BA9E0;
      v58 = vdupq_n_s64(a1);
      v59 = vdupq_n_s64(0xC0uLL);
      v60 = vdupq_n_s64(4uLL);
      do
      {
        v61.i64[0] = 96 * v57.i64[0];
        v61.i64[1] = 96 * v57.i64[1];
        v62 = vaddq_s64(v58, v61);
        v63 = &v120[v56 / 8];
        *(int64x2_t *)(v63 + 1) = v62;
        *(int64x2_t *)(v63 + 3) = vaddq_s64(v62, v59);
        v57 = vaddq_s64(v57, v60);
        v56 += 32;
      }
      while (((8 * v7) & 0x7FFFFFFE0) != v56);
      if (v7 == v53)
      {
        v64 = v7;
        v65 = 0;
        goto LABEL_77;
      }
    }
    v64 = v7;
    v66 = a1 + 96 * v53;
    do
    {
      v120[v53 + 1] = v66;
      v66 += 96;
      ++v53;
    }
    while (v7 != v53);
    v65 = 0;
  }
  else
  {
    v64 = v7;
    v55 = 0;
    v65 = 1;
  }
LABEL_77:
  sub_100254D30((uint64_t)v105, v120, (uint64_t)v54, v52);
  v67 = (int)((v102 + 1023) / v102);
  v68 = (int)v107;
  if (v67 >= (int)v107)
    v67 = (int)v107;
  if (v64 < 5)
    v67 = (int)v107;
  if (v67 >= 0x1FFFFFFF / v64)
    v69 = 0x1FFFFFFF / v64;
  else
    v69 = v67;
  if (v107 << 32)
  {
    if (v65)
    {
      for (i = 0; i < v106; ++i)
      {
        v71 = 0;
        while (1)
        {
          v72 = v69 >= v68 - v71 ? v68 - v71 : v69;
          ((void (*)(_QWORD *, _QWORD, unint64_t, _QWORD))v104)(v54 + 1, *v54, v72, 0);
          v71 += v69;
          if (v71 >= v68)
            break;
          *v54 += v72 * v102;
        }
        sub_100254D78((uint64_t)v105);
      }
    }
    else
    {
      v74 = v64;
      v75 = (0x88442211uLL >> (4 * (v99 & 7u))) & 0xF;
      if (v55 >= 4)
      {
        v81 = 0;
        while (v81 < v106)
        {
          v97 = v81;
          v82 = 0;
          while (1)
          {
            v83 = v69 >= v68 - v82 ? v68 - v82 : v69;
            ((void (*)(_QWORD *, _QWORD, unint64_t, uint64_t))v104)(v54 + 1, *v54, v83, v74);
            v82 += v69;
            if (v82 >= v68)
              break;
            v84 = (int64x2_t *)(v54 + 3);
            *v54 += v83 * v102;
            v85 = v83 * v75;
            v86 = v55 & 0xFFFFFFFC;
            do
            {
              v87 = vdupq_n_s64(v85);
              v88 = vaddq_s64(*v84, v87);
              v84[-1] = vaddq_s64(v84[-1], v87);
              *v84 = v88;
              v84 += 2;
              v86 -= 4;
            }
            while (v86);
            if (v55 != (v55 & 0xFFFFFFFC))
            {
              v89 = (_QWORD *)((char *)v54 + ((8 * v55) & 0x7FFFFFFE0) + 8);
              v90 = v55 - (v55 & 0xFFFFFFFC);
              do
              {
                *v89++ += v85;
                --v90;
              }
              while (v90);
            }
          }
          v81 = v97 + 1;
          sub_100254D78((uint64_t)v105);
        }
      }
      else
      {
        v76 = 0;
        while (v76 < v106)
        {
          *(_QWORD *)v100 = v76;
          v77 = 0;
          while (1)
          {
            v78 = v69 >= v68 - v77 ? v68 - v77 : v69;
            ((void (*)(_QWORD *, _QWORD, unint64_t, uint64_t))v104)(v54 + 1, *v54, v78, v74);
            v77 += v69;
            if (v77 >= v68)
              break;
            *v54 += v78 * v102;
            v79 = v54 + 1;
            v80 = v55;
            do
            {
              *v79++ += v78 * v75;
              --v80;
            }
            while (v80);
          }
          v76 = *(_QWORD *)v100 + 1;
          sub_100254D78((uint64_t)v105);
        }
      }
    }
  }
  else
  {
    v73 = -1;
    while (++v73 < v106)
      sub_100254D78((uint64_t)v105);
  }
  if (v118 != v120 && v118 != 0)
LABEL_128:
    operator delete[]();
LABEL_129:
  if (v112)
  {
    v92 = (unsigned int *)(v112 + 20);
    do
    {
      v93 = __ldaxr(v92);
      v94 = v93 - 1;
    }
    while (__stlxr(v94, v92));
    if (!v94)
      sub_100256C90((uint64_t)&v108);
  }
  v112 = 0;
  v109 = 0u;
  v110 = 0u;
  if (SDWORD1(v108) >= 1)
  {
    v95 = 0;
    v96 = v113;
    do
      *(_DWORD *)&v96[4 * v95++] = 0;
    while (v95 < SDWORD1(v108));
  }
  if (v114 != v115)
    j__free(v114);
  if (v117)
    sub_1002989D0(v116);
}

void sub_1001F9038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_100006BE4((uint64_t)&a25);
  sub_1001D40CC((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_1001F91C0(unint64_t a1, unint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  int64x2_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  unint64_t v20;
  int64x2_t v21;
  int64x2_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  int64x2_t *v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  unint64_t v32;
  int64x2_t v33;
  int64x2_t v34;
  unint64_t v35;
  uint64_t *v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  char *v41;
  int *v42;
  int v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  char v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  char *v52;
  unsigned int *v53;
  char v54;
  unsigned int v55;
  int v56;
  int v57;
  signed int v58;
  unint64_t v59;
  uint64_t (*v60)();
  uint64_t *v61;
  unint64_t v62;
  BOOL v63;
  int32x4_t v64;
  int64x2_t v65;
  char v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  int *v73;
  char *v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  int64x2_t v84;
  __int32 v85;
  __int32 v86;
  int64x2_t v87;
  int64x2_t *v88;
  int64x2_t v89;
  int64x2_t v90;
  __int32 v91;
  __int32 v92;
  int64x2_t *v93;
  int64x2_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  char *v102;
  uint64_t v103;
  unint64_t i;
  int *v105;
  char *v106;
  unint64_t v107;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  int64x2_t v116;
  unint64_t v117;
  int32x4_t v118;
  uint64_t v119;
  char *v121;
  char *v123;
  uint64_t *v125;
  char *v126;
  char *v127;
  char *v128;
  unint64_t v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136[8];
  int v137;
  uint64_t *v138;
  unint64_t v139;
  uint64_t v140[2];
  uint64_t v141;

  sub_100298C2C(v136, &off_10044CD28);
  if (!a6)
    goto LABEL_84;
  if (!a1 || !a2 || !a3 || !a4 || !a5)
  {
    v138 = 0;
    v139 = 0;
    qmemcpy((void *)sub_10029430C(&v138, 60), "src && nsrcs > 0 && dst && ndsts > 0 && fromTo && npairs > 0", 60);
    sub_100294B74(-215, (uint64_t *)&v138, "mixChannels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/convert.cpp", 574);
  }
  v9 = *a3;
  v117 = a4 + a2;
  v138 = v140;
  v139 = 16 * (a4 + a2) + 40 * a6 + 16;
  if (v139 >= 0x409)
    operator new[]();
  v10 = (0x88442211uLL >> (4 * (v9 & 7))) & 0xF;
  v11 = 8 * a2 + 8 * a4;
  v12 = (char *)v140 + v11;
  v128 = (char *)&v140[1] + v11 + v11;
  v126 = &v128[8 * a6];
  v112 = a6;
  v13 = &v126[8 * a6];
  v130 = &v13[16 * a6];
  if (a2 < 4)
  {
    v14 = 0;
LABEL_15:
    v23 = a2 - v14;
    v24 = &v140[v14];
    v25 = a1 + 96 * v14;
    do
    {
      *v24++ = v25;
      v25 += 96;
      --v23;
    }
    while (v23);
    goto LABEL_17;
  }
  v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v15 = (int64x2_t)xmmword_1003BA9E0;
  v16 = (int64x2_t *)&v141;
  v17 = vdupq_n_s64(a1);
  v18 = vdupq_n_s64(0xC0uLL);
  v19 = vdupq_n_s64(4uLL);
  v20 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v21.i64[0] = 96 * v15.i64[0];
    v21.i64[1] = 96 * v15.i64[1];
    v22 = vaddq_s64(v17, v21);
    v16[-1] = v22;
    *v16 = vaddq_s64(v22, v18);
    v15 = vaddq_s64(v15, v19);
    v16 += 2;
    v20 -= 4;
  }
  while (v20);
  if (v14 != a2)
    goto LABEL_15;
LABEL_17:
  v119 = v9 & 7;
  v127 = &v130[4 * a6];
  if (a4 >= 4)
  {
    v26 = a4 & 0xFFFFFFFFFFFFFFFCLL;
    v27 = (int64x2_t *)&v140[a2 + 2];
    v28 = (int64x2_t)xmmword_1003BA9E0;
    v29 = vdupq_n_s64((unint64_t)a3);
    v30 = vdupq_n_s64(0xC0uLL);
    v31 = vdupq_n_s64(4uLL);
    v32 = a4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v33.i64[0] = 96 * v28.i64[0];
      v33.i64[1] = 96 * v28.i64[1];
      v34 = vaddq_s64(v29, v33);
      v27[-1] = v34;
      *v27 = vaddq_s64(v34, v30);
      v28 = vaddq_s64(v28, v31);
      v27 += 2;
      v32 -= 4;
    }
    while (v32);
    if (v26 == a4)
      goto LABEL_24;
  }
  else
  {
    v26 = 0;
  }
  v35 = a4 - v26;
  v36 = &v140[v26 + a2];
  v37 = &a3[24 * v26];
  do
  {
    *v36++ = (uint64_t)v37;
    v37 += 24;
    --v35;
  }
  while (v35);
LABEL_24:
  v115 = 2 * (a4 + a2);
  v38 = 0;
  *(_QWORD *)&v12[8 * v117] = 0;
  v129 = a6;
  if (a6 <= 1)
    v39 = 1;
  else
    v39 = a6;
  v131 = v39;
  v40 = a3;
  do
  {
    v42 = (int *)(a5 + 8 * v38);
    v43 = *v42;
    v44 = v42[1];
    if (*v42 < 0)
    {
      *(_QWORD *)&v13[16 * v38] = v117;
      *(_DWORD *)&v130[4 * v38] = 0;
      v51 = 0;
    }
    else
    {
      v45 = a4;
      v46 = 0;
      v47 = (unsigned int *)a1;
      while (1)
      {
        v49 = *v47;
        v47 += 24;
        v48 = v49;
        v50 = (v49 >> 3) & 0x1FF;
        if (v43 <= v50)
          break;
        v43 += ~v50;
        if (a2 == ++v46)
          goto LABEL_36;
      }
      if ((v48 & 7) != (_DWORD)v119)
      {
LABEL_36:
        v132 = 0;
        v133 = 0;
        qmemcpy((void *)sub_10029430C(&v132, 36), "j < nsrcs && src[j].depth() == depth", 36);
        sub_100294B74(-215, &v132, "mixChannels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/convert.cpp", 601);
      }
      v52 = &v13[16 * v38];
      *(_DWORD *)v52 = v46;
      *((_DWORD *)v52 + 1) = v43 * v10;
      LODWORD(v52) = ((*(_DWORD *)(a1 + 96 * v46) >> 3) & 0x1FF) + 1;
      a4 = v45;
      v40 = a3;
      *(_DWORD *)&v130[4 * v38] = (_DWORD)v52;
      v51 = 0;
    }
    v53 = v40;
    while (1)
    {
      v55 = *v53;
      v53 += 24;
      v54 = v55;
      v56 = (v55 >> 3) & 0x1FF;
      if (v44 <= v56)
        break;
      v44 += ~v56;
      if (a4 == ++v51)
        goto LABEL_44;
    }
    if (v44 < 0 || (v54 & 7) != (_DWORD)v119)
    {
LABEL_44:
      v132 = 0;
      v133 = 0;
      qmemcpy((void *)sub_10029430C(&v132, 47), "i1 >= 0 && j < ndsts && dst[j].depth() == depth", 47);
      sub_100294B74(-215, &v132, "mixChannels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/convert.cpp", 614);
    }
    v41 = &v13[16 * v38];
    *((_DWORD *)v41 + 2) = v51 + a2;
    *((_DWORD *)v41 + 3) = v44 * v10;
    *(_DWORD *)&v127[4 * v38++] = ((v40[24 * v51] >> 3) & 0x1FF) + 1;
  }
  while (v38 != v131);
  sub_100254D30((uint64_t)&v132, v140, (uint64_t)v12, v117);
  v57 = v135;
  if ((int)((v10 + 1023) / v10) >= (int)v135)
    v58 = v135;
  else
    v58 = (v10 + 1023) / v10;
  if ((int)v135 <= 0)
  {
    for (i = 0; ; ++i)
    {
      v105 = (int *)&v140[2 * v129 + 1 + 2 * a4 + 2 * a2] + 1;
      v106 = v128;
      v107 = v131;
      if (i >= v134)
        break;
      do
      {
        *(_QWORD *)v106 = *(_QWORD *)&v12[8 * *(v105 - 1)] + *v105;
        *(_QWORD *)&v106[8 * v129] = *(_QWORD *)&v12[8 * v105[1]] + v105[2];
        v106 += 8;
        v105 += 4;
        --v107;
      }
      while (v107);
      sub_100254D78((uint64_t)&v132);
    }
  }
  else
  {
    v59 = 0;
    v60 = off_10044CFE8[v119];
    v61 = &v140[v131 + 1 + v115];
    v62 = v112 * 8;
    v63 = v128 >= (char *)&v61[v112] || v126 >= (char *)v61;
    v64 = vdupq_n_s32(v58);
    v65 = vdupq_n_s64(v10);
    v67 = !v63 || v131 < 4;
    v68 = 2 * a4;
    v69 = &v140[2 * a4 + 2 * a2];
    v109 = (uint64_t)&v69[2 * v129 + 1] + 4;
    v70 = (16 * a2) | 8;
    v71 = a4;
    v72 = (char *)&v140[2 * a4] + v70;
    v114 = (char *)v140 + v70;
    v111 = &v140[2 * a2 + 1 + v112];
    v113 = 4 * (v112 * 8 + v129);
    v125 = v69 + 1;
    v123 = (char *)v69 + v62 + 8;
    v121 = (char *)&v140[2 * v71 + 1 + 2 * a2] + v113;
    v116 = v65;
    v118 = v64;
LABEL_60:
    v73 = (int *)v109;
    v74 = v128;
    v75 = v131;
    if (v59 < v134)
    {
      do
      {
        *(_QWORD *)v74 = *(_QWORD *)&v12[8 * *(v73 - 1)] + *v73;
        *(_QWORD *)&v74[8 * v129] = *(_QWORD *)&v12[8 * v73[1]] + v73[2];
        v74 += 8;
        v73 += 4;
        --v75;
      }
      while (v75);
      v110 = v59;
      v76 = 0;
      while (1)
      {
        if (v58 >= v57 - v76)
          v77 = (v57 - v76);
        else
          v77 = v58;
        ((void (*)(char *, char *, char *, char *, uint64_t, unint64_t))v60)(v128, v130, v126, v127, v77, v129);
        v76 += v58;
        if (v76 >= v57)
        {
          v59 = v110 + 1;
          sub_100254D78((uint64_t)&v132);
          goto LABEL_60;
        }
        if ((v67 & 1) != 0)
          break;
        v79 = v131 & 0xFFFFFFFFFFFFFFFCLL;
        v80 = v111;
        v81 = v113;
        v82 = v114;
        v83 = &v140[4 * v129 + 1 + 2 * a2];
        do
        {
          v84 = (int64x2_t)vmulq_s32(*(int32x4_t *)&v83[v68], v118);
          v85 = v84.i32[1];
          v86 = v84.i32[0];
          v84.i64[0] = v116.i32[0] * (uint64_t)v84.i32[2];
          v87.i64[0] = v116.i32[0] * (uint64_t)v86;
          v84.i64[1] = v116.i32[2] * (uint64_t)v84.i32[3];
          v87.i64[1] = v116.i32[2] * (uint64_t)v85;
          v88 = (int64x2_t *)&v82[v68 * 8];
          v89 = vaddq_s64(*(int64x2_t *)&v82[v68 * 8 + 16], v84);
          *v88 = vaddq_s64(*(int64x2_t *)&v82[v68 * 8], v87);
          v88[1] = v89;
          v90 = (int64x2_t)vmulq_s32(*(int32x4_t *)&v72[v81], v118);
          v91 = v90.i32[0];
          v92 = v90.i32[1];
          v90.i64[0] = v116.i32[0] * (uint64_t)v90.i32[2];
          v90.i64[1] = v116.i32[2] * (uint64_t)v90.i32[3];
          v87.i64[0] = v116.i32[0] * (uint64_t)v91;
          v87.i64[1] = v116.i32[2] * (uint64_t)v92;
          v93 = (int64x2_t *)&v80[v68];
          v94 = vaddq_s64(*(int64x2_t *)&v80[v68 + 2], v90);
          v83 += 2;
          *v93 = vaddq_s64(*(int64x2_t *)&v80[v68], v87);
          v93[1] = v94;
          v82 += 32;
          v81 += 16;
          v80 += 4;
          v79 -= 4;
        }
        while (v79);
        v78 = v131 & 0xFFFFFFFFFFFFFFFCLL;
        if (v131 != (v131 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_72:
          v95 = 0;
          v96 = v131 - v78;
          v97 = v78;
          v98 = &v123[8 * v78];
          v99 = 4 * v78;
          v100 = &v121[4 * v78];
          v101 = &v125[v97];
          v102 = (char *)&v140[4 * v129 + 1 + 2 * a2 + v68] + v99;
          do
          {
            v103 = v95;
            v101[v103] = v101[v95] + v10 * *(int *)&v102[4 * v95] * (uint64_t)v58;
            *(_QWORD *)&v98[v103 * 8] = *(_QWORD *)&v98[8 * v95] + v10 * *(int *)&v100[4 * v95] * (uint64_t)v58;
            ++v95;
          }
          while (v96 != v95);
        }
      }
      v78 = 0;
      goto LABEL_72;
    }
  }
  if (v138 != v140 && v138 != 0)
    operator delete[]();
LABEL_84:
  if (v137)
    sub_1002989D0(v136);
}

void sub_1001F9AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  sub_1001D40CC((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_1001F9AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_100008C88(exception_object);
}

void sub_1001F9B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a42 != a10 && a42 != 0)
    operator delete[]();
  sub_1001D40CC(&a40);
  _Unwind_Resume(a1);
}

void sub_1001F9B88(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  int v9;
  void **v10;

  sub_100298C2C(v8, &off_10044CD08);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10025EBD0(a1, (uint64_t *)&v5);
  if (v6 == v5)
    v4 = 0;
  else
    v4 = v5;
  sub_1001F85A8(v4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v5) >> 5), a2);
  v10 = (void **)&v5;
  sub_100216D7C(&v10);
  if (v9)
    sub_1002989D0(v8);
}

void sub_1001F9C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_100216D7C((void ***)va1);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001F9C48(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  _DWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  _QWORD v40[2];
  int v41[4];
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  void *__src;
  void *v47;
  _QWORD v48[2];
  _BYTE v49[8];
  int v50;
  _DWORD v51[2];

  sub_100298C2C(v49, &off_10044CD48);
  v6 = sub_10025E20C((int *)a1, -1);
  v7 = v6;
  if ((a3 & 0x80000000) != 0 || ((v6 >> 3) & 0x1FF) < a3)
  {
    memset(v41, 0, sizeof(v41));
    v8 = sub_10029430C(v41, 20);
    *(_DWORD *)(v8 + 16) = 1851990076;
    *(_OWORD *)v8 = *(_OWORD *)"0 <= coi && coi < cn";
    sub_100294B74(-215, (uint64_t *)v41, "extractChannel", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/convert.cpp", 898);
  }
  v51[0] = a3;
  v51[1] = 0;
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)v41 = *(_OWORD *)v9;
    v42 = v10;
    v43 = *(_OWORD *)(v9 + 32);
    v11 = *(_QWORD *)(v9 + 56);
    v44 = *(_QWORD *)(v9 + 48);
    v45 = v11;
    __src = &v41[2];
    v47 = v48;
    v48[0] = 0;
    v48[1] = 0;
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 20);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
    if (*(int *)(v9 + 4) > 2)
    {
      v41[1] = 0;
      sub_100256B48((uint64_t)v41, v9);
    }
    else
    {
      v14 = *(_QWORD **)(v9 + 72);
      v15 = v47;
      *(_QWORD *)v47 = *v14;
      v15[1] = v14[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)v41);
  }
  sub_100258F0C((int *)a2, v41[1], (uint64_t *)__src, v7 & 7, 0xFFFFFFFF, 0, 0);
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(_OWORD *)(v16 + 16);
    v33 = *(_OWORD *)v16;
    v34 = v17;
    v35 = *(_OWORD *)(v16 + 32);
    v18 = *(_QWORD *)(v16 + 56);
    v36 = *(_QWORD *)(v16 + 48);
    v37 = v18;
    v38 = (char *)&v33 + 8;
    v39 = v40;
    v40[0] = 0;
    v40[1] = 0;
    if (v18)
    {
      v19 = (unsigned int *)(v18 + 20);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
    if (*(int *)(v16 + 4) > 2)
    {
      DWORD1(v33) = 0;
      sub_100256B48((uint64_t)&v33, v16);
    }
    else
    {
      v21 = *(_QWORD **)(v16 + 72);
      v22 = v39;
      *(_QWORD *)v39 = *v21;
      v22[1] = v21[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v33);
  }
  sub_1001F91C0((unint64_t)v41, 1uLL, (unsigned int *)&v33, 1uLL, (uint64_t)v51, 1uLL);
  if (v37)
  {
    v23 = (unsigned int *)(v37 + 20);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      sub_100256C90((uint64_t)&v33);
  }
  v37 = 0;
  v34 = 0u;
  v35 = 0u;
  if (SDWORD1(v33) >= 1)
  {
    v26 = 0;
    v27 = v38;
    do
      *(_DWORD *)&v27[4 * v26++] = 0;
    while (v26 < SDWORD1(v33));
  }
  if (v39 != v40)
    j__free(v39);
  if (v45)
  {
    v28 = (unsigned int *)(v45 + 20);
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      sub_100256C90((uint64_t)v41);
  }
  v45 = 0;
  v42 = 0u;
  v43 = 0u;
  if (v41[1] >= 1)
  {
    v31 = 0;
    v32 = __src;
    do
      v32[v31++] = 0;
    while (v31 < v41[1]);
  }
  if (v47 != v48)
    j__free(v47);
  if (v50)
    sub_1002989D0(v49);
}

void sub_1001F9FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001FA068(char a1, char a2)
{
  return (uint64_t)*(&off_10044CD68 + 8 * (unint64_t)(a2 & 7) + (a1 & 7));
}

char *sub_1001FA084(char *__src, uint64_t a2, int a3, int a4, char *__dst, uint64_t a6, int *a7)
{
  int v7;
  char *v11;
  size_t v12;

  v7 = a7[1];
  if (v7)
  {
    v11 = __src;
    v12 = *a7;
    do
    {
      --v7;
      __src = (char *)memcpy(__dst, v11, v12);
      v11 += a2;
      __dst += a6;
    }
    while (v7);
  }
  return __src;
}

unint64_t sub_1001FA0E8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _BYTE *v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  _BYTE *v54;
  char v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int8x16_t v62;
  int8x16_t *v63;
  unint64_t v64;
  unint64_t v65;
  int8x16x4_t v66;
  int8x16x4_t v67;

  v7 = a7[1];
  if (!v7)
    return result;
  v8 = *a7;
  v9 = v8 - 4;
  if ((int)v8 >= 8)
  {
    v12 = 0;
    v13 = result;
    v14 = a5;
    while (1)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        *(int8x8_t *)(v14 + v16) = vqmovun_s16(vmovl_s8(*(int8x8_t *)(v13 + v16)));
        v16 += 8;
        v15 += 0x800000000;
      }
      while (v16 <= (v8 - 8));
      if ((int)v9 >= (int)v16)
        break;
      if ((int)v16 < (int)v8)
        goto LABEL_20;
LABEL_11:
      v13 += a2;
      v14 += a6;
      ++v12;
      if (!--v7)
        return result;
    }
    v17 = 0;
    v18 = v13 + (int)v16;
    do
    {
      v19 = *(char *)(v18 + v17 + 1) & ~(*(char *)(v18 + v17 + 1) >> 31);
      v20 = (_BYTE *)(v14 + (int)v16 + v17);
      *v20 = *(_BYTE *)(v18 + v17) & ~(*(char *)(v18 + v17) >> 7);
      v20[1] = v19;
      v21 = *(_BYTE *)(v18 + v17 + 3) & ~(*(char *)(v18 + v17 + 3) >> 7);
      v20[2] = *(_BYTE *)(v18 + v17 + 2) & ~(*(char *)(v18 + v17 + 2) >> 31);
      v20[3] = v21;
      v17 += 4;
    }
    while ((int)v16 + v17 <= v9);
    LODWORD(v16) = v16 + v17;
    if ((int)v16 >= (int)v8)
      goto LABEL_11;
LABEL_20:
    v22 = (int)v16;
    v23 = v8 - (int)v16;
    if (v23 < 8)
    {
      v24 = v22;
      goto LABEL_35;
    }
    if (a5 + v12 * a6 - (result + v12 * a2) < 0x20)
    {
      v24 = v22;
      goto LABEL_35;
    }
    if (v23 >= 0x20)
    {
      v25 = v23 & 0xFFFFFFFFFFFFFFE0;
      v26 = v22;
      v27 = v23 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v28 = vmaxq_s8(*(int8x16_t *)(v13 + v26 + 16), (int8x16_t)0);
        v29 = (int8x16_t *)(v14 + v26);
        *v29 = vmaxq_s8(*(int8x16_t *)(v13 + v26), (int8x16_t)0);
        v29[1] = v28;
        v26 += 32;
        v27 -= 32;
      }
      while (v27);
      if (v23 == v25)
        goto LABEL_11;
      if ((v23 & 0x18) == 0)
      {
        v24 = v25 + v22;
        do
        {
LABEL_35:
          *(_BYTE *)(v14 + v24) = *(_BYTE *)(v13 + v24) & ~(*(char *)(v13 + v24) >> 31);
          ++v24;
        }
        while (v8 != v24);
        goto LABEL_11;
      }
    }
    else
    {
      v25 = 0;
    }
    v24 = (v23 & 0xFFFFFFFFFFFFFFF8) + v22;
    v30 = v25 - (v23 & 0xFFFFFFFFFFFFFFF8);
    v31 = v25 + v22;
    do
    {
      *(int8x8_t *)(v14 + v31) = vmax_s8(*(int8x8_t *)(v13 + v31), 0);
      v31 += 8;
      v30 += 8;
    }
    while (v30);
    if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_11;
    goto LABEL_35;
  }
  if ((int)v8 >= 4)
  {
    v32 = 0;
    v33 = 3;
    if (v9 > 3)
      v33 = v8 - 4;
    v34 = (((v33 << 32) & 0x7FFFFFFC00000000) + 0x400000000) >> 32;
    v35 = v34 | 1;
    if ((uint64_t)(v34 | 1) <= v8)
      v35 = *a7;
    v36 = v35 - v34;
    v37 = (v33 & 0xFFFFFFFC) + 4;
    v38 = (v33 >> 2) + 1;
    v39 = v36 & 0xFFFFFFFFFFFFFFE0;
    v40 = v36 & 0xFFFFFFFFFFFFFFF8;
    v41 = result;
    v42 = a5;
    while (1)
    {
      v43 = v32 * a6;
      v44 = v32 * a2;
      if (v33 < 0x3C)
        break;
      if (v42 < result + v37 + v44 && v41 < a5 + v37 + v43)
        break;
      v46 = 0;
      v47 = v38 & 0x7FFFFFF0;
      do
      {
        v48 = (const char *)(v41 + v46);
        v66 = vld4q_s8(v48);
        v67.val[0] = vmaxq_s8(v66.val[0], (int8x16_t)0);
        v67.val[1] = vmaxq_s8(v66.val[1], (int8x16_t)0);
        v67.val[2] = vmaxq_s8(v66.val[2], (int8x16_t)0);
        v67.val[3] = vmaxq_s8(v66.val[3], (int8x16_t)0);
        v49 = (char *)(v42 + v46);
        vst4q_s8(v49, v67);
        v46 += 64;
        v47 -= 16;
      }
      while (v47);
      v50 = 4 * (v38 & 0x7FFFFFF0);
      v51 = 4 * (v38 & 0x7FFFFFF0);
      if (v38 != (v38 & 0x7FFFFFF0))
        goto LABEL_55;
      if ((int)v8 > (int)(4 * (v38 & 0x7FFFFFF0)))
        goto LABEL_58;
LABEL_42:
      v41 += a2;
      v42 += a6;
      ++v32;
      if (!--v7)
        return result;
    }
    v50 = 0;
LABEL_55:
    v52 = v50 + 1;
    do
    {
      v53 = *(char *)(v41 + v52) & ~(*(char *)(v41 + v52) >> 31);
      v54 = (_BYTE *)(v42 + v52);
      *(v54 - 1) = *(_BYTE *)(v41 + v52 - 1) & ~(*(char *)(v41 + v52 - 1) >> 7);
      *v54 = v53;
      v55 = *(_BYTE *)(v41 + v52 + 2) & ~(*(char *)(v41 + v52 + 2) >> 7);
      v54[1] = *(_BYTE *)(v41 + v52 + 1) & ~(*(char *)(v41 + v52 + 1) >> 7);
      v54[2] = v55;
      v56 = v52 + 4;
      v57 = v52 + 3;
      v52 += 4;
    }
    while (v57 <= v9);
    v51 = v56 - 1;
    if ((int)v8 <= v56 - 1)
      goto LABEL_42;
LABEL_58:
    if (v36 < 8)
    {
      v58 = v51;
      goto LABEL_73;
    }
    if (v43 + a5 - (v44 + result) < 0x20)
    {
      v58 = v51;
      goto LABEL_73;
    }
    if (v36 >= 0x20)
    {
      v60 = v51;
      v61 = v36 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v62 = vmaxq_s8(*(int8x16_t *)(v41 + v60 + 16), (int8x16_t)0);
        v63 = (int8x16_t *)(v42 + v60);
        *v63 = vmaxq_s8(*(int8x16_t *)(v41 + v60), (int8x16_t)0);
        v63[1] = v62;
        v60 += 32;
        v61 -= 32;
      }
      while (v61);
      if (v36 == v39)
        goto LABEL_42;
      v59 = v36 & 0xFFFFFFFFFFFFFFE0;
      if ((v36 & 0x18) == 0)
      {
        v58 = v51 + v39;
        do
        {
LABEL_73:
          *(_BYTE *)(v42 + v58) = *(_BYTE *)(v41 + v58) & ~(*(char *)(v41 + v58) >> 31);
          ++v58;
        }
        while (v58 < v8);
        goto LABEL_42;
      }
    }
    else
    {
      v59 = 0;
    }
    v58 = v51 + v40;
    v64 = v59 - (v36 & 0xFFFFFFFFFFFFFFF8);
    v65 = v59 + v51;
    do
    {
      *(int8x8_t *)(v42 + v65) = vmax_s8(*(int8x8_t *)(v41 + v65), 0);
      v65 += 8;
      v64 += 8;
    }
    while (v64);
    if (v36 == v40)
      goto LABEL_42;
    goto LABEL_73;
  }
  if ((int)v8 >= 1)
  {
    v10 = (_BYTE *)(result + 2);
    v11 = (_BYTE *)(a5 + 2);
    do
    {
      *(v11 - 2) = *(v10 - 2) & ~((char)*(v10 - 2) >> 31);
      if ((_DWORD)v8 != 1)
      {
        *(v11 - 1) = *(v10 - 1) & ~((char)*(v10 - 1) >> 31);
        if ((_DWORD)v8 != 2)
          *v11 = *v10 & ~((char)*v10 >> 31);
      }
      v10 += a2;
      v11 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

int64_t sub_1001FA570(int64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  char *v19;
  uint16x8_t *v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  uint16x8_t v24;
  unint64_t v25;
  uint16x8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int64_t v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  uint16x8_t *v38;
  unint64_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int64_t v59;
  int64_t v60;
  uint16x8_t v61;
  uint64_t v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  const __int16 *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned __int16 *v71;
  unsigned int v72;
  unsigned int v73;
  char *v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  int8x16_t *v80;
  uint16x8_t *v81;
  unint64_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  int64_t v93;
  int16x8x4_t v94;
  int16x8x4_t v95;
  int8x16x4_t v96;

  v92 = a5;
  v93 = result;
  v7 = a7[1];
  if (!v7)
    return result;
  v8 = *a7;
  v9 = a2 >> 1;
  v10 = v8 - 4;
  if ((int)v8 >= 16)
  {
    v16 = 0;
    v17 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v19 = a5;
    v18 = result;
    v20 = (uint16x8_t *)(result + 16);
    v21 = 2 * v9;
    v22 = result + 4;
    v23 = result + 32;
    v24.i64[0] = 0xFF00FF00FF00FFLL;
    v24.i64[1] = 0xFF00FF00FF00FFLL;
    while (1)
    {
      result = 0;
      v25 = 0;
      v26 = v20;
      do
      {
        *(uint8x16_t *)&v19[v25] = vqmovn_high_u16(vqmovn_u16(v26[-1]), *v26);
        v25 += 16;
        result += 0x1000000000;
        v26 += 2;
      }
      while (v25 <= (v8 - 16));
      if ((int)v10 >= (int)v25)
      {
        v27 = 0;
        result = (int)v25;
        v28 = 2 * (int)v25;
        v29 = (unsigned __int16 *)(v22 + v28);
        v30 = v18 + v28;
        do
        {
          v31 = *(v29 - 2);
          if (v31 >= 0xFF)
            LOBYTE(v31) = -1;
          v32 = *(unsigned __int16 *)(v30 + 2 * v27 + 2);
          if (v32 >= 0xFF)
            LOBYTE(v32) = -1;
          v33 = &v19[(int)v25 + v27];
          *v33 = v31;
          v33[1] = v32;
          v34 = *v29;
          if (v34 >= 0xFF)
            LOBYTE(v34) = -1;
          v35 = v29[1];
          if (v35 >= 0xFF)
            LOBYTE(v35) = -1;
          v33[2] = v34;
          v33[3] = v35;
          v27 += 4;
          v29 += 4;
        }
        while ((int)v25 + v27 <= v10);
        LODWORD(v25) = v25 + v27;
        if ((int)v25 >= (int)v8)
          goto LABEL_17;
      }
      else if ((int)v25 >= (int)v8)
      {
        goto LABEL_17;
      }
      v25 = (int)v25;
      v36 = v8 - (int)v25;
      if (v36 < 8
        || (unint64_t)&v19[(int)v25] < v93 + 2 * v8 + v17 * v16
        && v18 + 2 * (int)v25 < (unint64_t)&v92[v8 + v16 * a6])
      {
        goto LABEL_48;
      }
      if (v36 >= 0x20)
      {
        v37 = v36 & 0xFFFFFFFFFFFFFFE0;
        result = (int64_t)&v19[(int)v25];
        v38 = (uint16x8_t *)(v23 + 2 * (int)v25);
        v39 = v36 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v40 = v38[-2];
          v41 = v38[-1];
          v42 = *v38;
          v43 = v38[1];
          v38 += 4;
          *(int8x16_t *)result = vuzp1q_s8((int8x16_t)vminq_u16(v40, v24), (int8x16_t)vminq_u16(v41, v24));
          *(int8x16_t *)(result + 16) = vuzp1q_s8((int8x16_t)vminq_u16(v42, v24), (int8x16_t)vminq_u16(v43, v24));
          result += 32;
          v39 -= 32;
        }
        while (v39);
        if (v36 == v37)
          goto LABEL_17;
        if ((v36 & 0x18) == 0)
        {
          v25 = v37 + (int)v25;
          do
          {
LABEL_48:
            if (*(unsigned __int16 *)(v18 + 2 * v25) >= 0xFFu)
              result = 255;
            else
              result = *(unsigned __int16 *)(v18 + 2 * v25);
            v19[v25++] = result;
          }
          while (v8 != v25);
          goto LABEL_17;
        }
      }
      else
      {
        v37 = 0;
      }
      result = v36 & 0xFFFFFFFFFFFFFFF8;
      v44 = (v36 & 0xFFFFFFFFFFFFFFF8) + (int)v25;
      v45 = v37 - (v36 & 0xFFFFFFFFFFFFFFF8);
      v46 = v37 + (int)v25;
      v47 = 2 * v46;
      do
      {
        *(uint8x8_t *)&v19[v46] = vqmovn_u16(*(uint16x8_t *)(v18 + v47));
        v47 += 16;
        v46 += 8;
        v45 += 8;
      }
      while (v45);
      v25 = v44;
      if (v36 != result)
        goto LABEL_48;
LABEL_17:
      v18 += v21;
      v19 += a6;
      ++v16;
      v20 = (uint16x8_t *)((char *)v20 + v21);
      v22 += v21;
      v23 += v21;
      if (!--v7)
        return result;
    }
  }
  if ((int)v8 >= 4)
  {
    v48 = 0;
    v49 = 3;
    if (v10 > 3)
      v49 = v8 - 4;
    v50 = ((v49 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    v51 = HIDWORD(v50) | 1;
    if (v51 <= v8)
      v51 = *a7;
    v52 = v51 - HIDWORD(v50);
    v53 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v54 = (v49 >> 2) + 1;
    v55 = v50 >> 31;
    v56 = v52 & 0xFFFFFFFFFFFFFFF8;
    v57 = 2 * v9;
    v58 = v93;
    v59 = v93 + 4;
    v60 = v93 + 32;
    v91 = v52 & 0xFFFFFFFFFFFFFFE0;
    v61.i64[0] = 0xFF00FF00FF00FFLL;
    v61.i64[1] = 0xFF00FF00FF00FFLL;
    while (1)
    {
      v62 = v48 * a6;
      v63 = v53 * v48;
      if (v49 >= 0x3C
        && ((unint64_t)a5 < v93 + ((2 * v49) & 0x1FFFFFFF8) + 8 + v63
          ? (v64 = v58 >= (unint64_t)&v92[(v49 & 0xFFFFFFFC) + 4 + v62])
          : (v64 = 1),
            v64))
      {
        v65 = v54 & 0x7FFFFFF0;
        v66 = a5;
        result = v58;
        do
        {
          v67 = (const __int16 *)result;
          v94 = vld4q_s16(v67);
          v67 += 32;
          v95 = vld4q_s16(v67);
          v96.val[0] = vuzp1q_s8((int8x16_t)vminq_u16((uint16x8_t)v94.val[0], v61), (int8x16_t)vminq_u16((uint16x8_t)v95.val[0], v61));
          v96.val[1] = vuzp1q_s8((int8x16_t)vminq_u16((uint16x8_t)v94.val[1], v61), (int8x16_t)vminq_u16((uint16x8_t)v95.val[1], v61));
          v96.val[2] = vuzp1q_s8((int8x16_t)vminq_u16((uint16x8_t)v94.val[2], v61), (int8x16_t)vminq_u16((uint16x8_t)v95.val[2], v61));
          v96.val[3] = vuzp1q_s8((int8x16_t)vminq_u16((uint16x8_t)v94.val[3], v61), (int8x16_t)vminq_u16((uint16x8_t)v95.val[3], v61));
          vst4q_s8(v66, v96);
          v66 += 64;
          result += 128;
          v65 -= 16;
        }
        while (v65);
        v68 = 4 * (v54 & 0x7FFFFFF0);
        v69 = 4 * (v54 & 0x7FFFFFF0);
        if (v54 == (v54 & 0x7FFFFFF0))
        {
          if ((int)v8 <= (int)(4 * (v54 & 0x7FFFFFF0)))
            goto LABEL_58;
          goto LABEL_82;
        }
      }
      else
      {
        v68 = 0;
      }
      v70 = v68 + 1;
      v71 = (unsigned __int16 *)(v59 + 2 * v68);
      do
      {
        v72 = *(v71 - 2);
        if (v72 >= 0xFF)
          LOBYTE(v72) = -1;
        v73 = *(unsigned __int16 *)(v58 + 2 * v70);
        if (v73 >= 0xFF)
          LOBYTE(v73) = -1;
        v74 = &a5[v70];
        *(v74 - 1) = v72;
        *v74 = v73;
        v75 = *v71;
        if (v75 >= 0xFF)
          LOBYTE(v75) = -1;
        v76 = v71[1];
        if (v76 >= 0xFF)
          LOBYTE(v76) = -1;
        v74[1] = v75;
        v74[2] = v76;
        v77 = v70 + 4;
        result = v70 + 3;
        v71 += 4;
        v70 += 4;
      }
      while (result <= v10);
      v69 = v77 - 1;
      if ((int)v8 <= v77 - 1)
        goto LABEL_58;
LABEL_82:
      v78 = v69;
      if (v52 < 8
        || (unint64_t)&a5[v69] < v93 + v63 - v55 + 2 * (v51 + v69)
        && v58 + 2 * v69 < (unint64_t)&v92[v52 + v62 + v69])
      {
        goto LABEL_96;
      }
      if (v52 >= 0x20)
      {
        v80 = (int8x16_t *)&a5[v69];
        v81 = (uint16x8_t *)(v60 + 2 * v78);
        v82 = v52 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v83 = v81[-2];
          v84 = v81[-1];
          v85 = *v81;
          v86 = v81[1];
          v81 += 4;
          *v80 = vuzp1q_s8((int8x16_t)vminq_u16(v83, v61), (int8x16_t)vminq_u16(v84, v61));
          v80[1] = vuzp1q_s8((int8x16_t)vminq_u16(v85, v61), (int8x16_t)vminq_u16(v86, v61));
          v80 += 2;
          v82 -= 32;
        }
        while (v82);
        result = v52 & 0xFFFFFFFFFFFFFFE0;
        if (v52 == v91)
          goto LABEL_58;
        v79 = v52 & 0xFFFFFFFFFFFFFFE0;
        if ((v52 & 0x18) == 0)
        {
          v78 += v91;
          do
          {
LABEL_96:
            if (*(unsigned __int16 *)(v58 + 2 * v78) >= 0xFFu)
              result = 255;
            else
              result = *(unsigned __int16 *)(v58 + 2 * v78);
            a5[v78++] = result;
          }
          while (v78 < v8);
          goto LABEL_58;
        }
      }
      else
      {
        v79 = 0;
      }
      v87 = v78 + v56;
      result = -(uint64_t)(v52 & 0xFFFFFFFFFFFFFFF8);
      v88 = v79 - (v52 & 0xFFFFFFFFFFFFFFF8);
      v89 = v79 + v78;
      v90 = 2 * v89;
      do
      {
        *(uint8x8_t *)&a5[v89] = vqmovn_u16(*(uint16x8_t *)(v58 + v90));
        v90 += 16;
        v89 += 8;
        v88 += 8;
      }
      while (v88);
      v78 = v87;
      if (v52 != v56)
        goto LABEL_96;
LABEL_58:
      v58 += v57;
      a5 += a6;
      ++v48;
      v59 += v57;
      v60 += v57;
      if (!--v7)
        return result;
    }
  }
  if ((int)v8 >= 1)
  {
    v11 = (unsigned __int16 *)(result + 4);
    v12 = a5 + 2;
    do
    {
      v13 = *(v11 - 2);
      if (v13 >= 0xFF)
        LOBYTE(v13) = -1;
      *(v12 - 2) = v13;
      if ((_DWORD)v8 != 1)
      {
        v14 = *(v11 - 1);
        if (v14 >= 0xFF)
          LOBYTE(v14) = -1;
        *(v12 - 1) = v14;
        if ((_DWORD)v8 != 2)
        {
          v15 = *v11;
          if (v15 >= 0xFF)
            LOBYTE(v15) = -1;
          *v12 = v15;
        }
      }
      v11 += v9;
      v12 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

int16x8_t *sub_1001FAB40(int16x8_t *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int16x8_t *v12;
  uint64_t v13;
  uint64_t v14;
  int16x8_t *v15;
  int32x4_t v16;
  int16x8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int16x8_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int16 *v28;
  _BYTE *v29;
  int32x2_t v30;
  int32x2_t v31;
  int32x2_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const __int16 *v41;
  uint16x8_t v42;
  uint16x8_t v43;
  int8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  char *v51;
  int8x16_t *v52;
  int16x8_t *v53;
  unint64_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint16x8_t v67;
  int v68;
  int8x16x2_t v69;
  int8x16x4_t v70;
  int16x8x4_t v71;
  int16x8x4_t v72;
  int8x16x4_t v73;
  int8x16x4_t v74;
  int8x16x4_t v75;

  v7 = a7[1];
  if (v7)
  {
    v8 = 0;
    v9 = *a7;
    v10 = v9 - 4;
    v11 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v12 = result + 1;
    v13 = 2 * (a2 >> 1);
    v14 = (uint64_t)result->i64 + 4;
    v15 = result + 2;
    v16.i64[0] = 0xFF000000FFLL;
    v16.i64[1] = 0xFF000000FFLL;
    v17 = result;
    v18 = a5;
    do
    {
      if ((int)v9 >= 16)
      {
        v22 = 0;
        v23 = v12;
        do
        {
          *(int8x16_t *)(v18 + v22) = vqmovun_high_s16(vqmovun_s16(v23[-1]), *v23);
          v22 += 16;
          v23 += 2;
        }
        while (v22 <= (v9 - 16));
        LODWORD(v19) = v22;
        v20 = a5 + v8 * a6;
        v21 = (uint64_t)result->i64 + v11 * v8;
        if ((int)v19 > (int)v10)
          goto LABEL_16;
      }
      else
      {
        LODWORD(v19) = 0;
        v20 = a5 + v8 * a6;
        v21 = (uint64_t)result->i64 + v11 * v8;
        if ((int)v10 < 0)
          goto LABEL_16;
      }
      v24 = (int)v19;
      v25 = v10 - (int)v19;
      if (v25 < 0x3C
        || (v26 = v25 >> 2, v27 = v24, v18 + v24 < v21 + 8 + 2 * v24 + 8 * (v25 >> 2))
        && (unint64_t)v17->u64 + v27 * 2 < v20 + 4 + (v25 & 0xFFFFFFFFFFFFFFFCLL) + v24)
      {
        v19 = v24;
LABEL_14:
        v28 = (__int16 *)(v14 + 2 * v19);
        do
        {
          v29 = (_BYTE *)(v18 + v19);
          v30.i32[0] = *(v28 - 2);
          v30.i32[1] = *(v28 - 1);
          v31 = vmin_s32(vmax_s32(v30, 0), (int32x2_t)0xFF000000FFLL);
          v29[1] = v31.i8[4];
          *v29 = v31.i8[0];
          v31.i32[0] = *v28;
          v31.i32[1] = v28[1];
          v32 = vmin_s32(vmax_s32(v31, 0), (int32x2_t)0xFF000000FFLL);
          v29[3] = v32.i8[4];
          v29[2] = v32.i8[0];
          v19 += 4;
          v28 += 4;
        }
        while (v19 <= v10);
        goto LABEL_16;
      }
      v38 = v26 + 1;
      v39 = (v26 + 1) & 0x7FFFFFFFFFFFFFF0;
      v19 = v24 + 4 * v39;
      v40 = v39;
      do
      {
        v41 = &v17->i16[v27];
        v71 = vld4q_s16(v41);
        v41 += 32;
        v42 = (uint16x8_t)vmaxq_s16(v71.val[0], (int16x8_t)0);
        v72 = vld4q_s16(v41);
        v43 = (uint16x8_t)vmaxq_s16(v72.val[0], (int16x8_t)0);
        v74.val[1] = (int8x16_t)vminq_s32((int32x4_t)vmovl_high_u16(v42), v16);
        v74.val[3] = (int8x16_t)vminq_s32((int32x4_t)vmovl_high_u16(v43), v16);
        v74.val[0] = (int8x16_t)vminq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v42.i8), v16);
        v74.val[2] = (int8x16_t)vminq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v43.i8), v16);
        v44 = vqtbl4q_s8(v74, (int8x16_t)xmmword_1003BC960);
        v45 = (uint16x8_t)vmaxq_s16(v71.val[1], (int16x8_t)0);
        v46 = (uint16x8_t)vmaxq_s16(v72.val[1], (int16x8_t)0);
        v70.val[1] = (int8x16_t)vminq_s32((int32x4_t)vmovl_high_u16(v45), v16);
        v70.val[3] = (int8x16_t)vminq_s32((int32x4_t)vmovl_high_u16(v46), v16);
        v70.val[0] = (int8x16_t)vminq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v45.i8), v16);
        v70.val[2] = (int8x16_t)vminq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v46.i8), v16);
        v74.val[0] = vqtbl4q_s8(v70, (int8x16_t)xmmword_1003BC960);
        v47 = (uint16x8_t)vmaxq_s16(v71.val[2], (int16x8_t)0);
        v48 = (uint16x8_t)vmaxq_s16(v72.val[2], (int16x8_t)0);
        v70.val[1] = (int8x16_t)vminq_s32((int32x4_t)vmovl_high_u16(v47), v16);
        v70.val[3] = (int8x16_t)vminq_s32((int32x4_t)vmovl_high_u16(v48), v16);
        v70.val[0] = (int8x16_t)vminq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v47.i8), v16);
        v70.val[2] = (int8x16_t)vminq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v48.i8), v16);
        v74.val[1] = vqtbl4q_s8(v70, (int8x16_t)xmmword_1003BC960);
        v49 = (uint16x8_t)vmaxq_s16(v71.val[3], (int16x8_t)0);
        v50 = (uint16x8_t)vmaxq_s16(v72.val[3], (int16x8_t)0);
        v71.val[2] = (int16x8_t)vminq_s32((int32x4_t)vmovl_high_u16(v49), v16);
        v72.val[0] = (int16x8_t)vminq_s32((int32x4_t)vmovl_high_u16(v50), v16);
        v71.val[1] = (int16x8_t)vminq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v49.i8), v16);
        v71.val[3] = (int16x8_t)vminq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v50.i8), v16);
        v74.val[2] = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v71 + 16), (int8x16_t)xmmword_1003BC960);
        v51 = (char *)(v18 + v24);
        vst4q_s8(v51, v74);
        v24 += 64;
        v27 += 64;
        v40 -= 16;
      }
      while (v40);
      if (v38 != v39)
        goto LABEL_14;
LABEL_16:
      if ((int)v19 < (int)v9)
      {
        v33 = (int)v19;
        v34 = v9 - (int)v19;
        if (v34 < 8)
          goto LABEL_38;
        v35 = v20 + v9;
        if (v18 + v33 < (unint64_t)(v21 + 2 * v9) && (unint64_t)v17 + 2 * v33 < v35)
          goto LABEL_38;
        if (v34 >= 0x20)
        {
          v37 = v34 & 0xFFFFFFFFFFFFFFE0;
          v52 = (int8x16_t *)(v18 + v33);
          v53 = (int16x8_t *)((char *)v15 + 2 * v33);
          v54 = v34 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v55 = v53[-2];
            v56 = v53[-1];
            v57 = *v53;
            v58 = v53[1];
            v53 += 4;
            v59 = (uint16x8_t)vmaxq_s16(v56, (int16x8_t)0);
            v60 = (uint16x8_t)vmaxq_s16(v55, (int16x8_t)0);
            v61 = (uint16x8_t)vmaxq_s16(v58, (int16x8_t)0);
            v62 = (uint16x8_t)vmaxq_s16(v57, (int16x8_t)0);
            v73.val[3] = (int8x16_t)vminq_s32((int32x4_t)vmovl_high_u16(v59), v16);
            v73.val[1] = (int8x16_t)vminq_s32((int32x4_t)vmovl_high_u16(v60), v16);
            v73.val[2] = (int8x16_t)vminq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v59.i8), v16);
            v73.val[0] = (int8x16_t)vminq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v60.i8), v16);
            v75.val[3] = (int8x16_t)vminq_s32((int32x4_t)vmovl_high_u16(v61), v16);
            v75.val[1] = (int8x16_t)vminq_s32((int32x4_t)vmovl_high_u16(v62), v16);
            v75.val[2] = (int8x16_t)vminq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v61.i8), v16);
            v75.val[0] = (int8x16_t)vminq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v62.i8), v16);
            *v52 = vqtbl4q_s8(v73, (int8x16_t)xmmword_1003BC960);
            v52[1] = vqtbl4q_s8(v75, (int8x16_t)xmmword_1003BC960);
            v52 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v34 == v37)
            goto LABEL_3;
          if ((v34 & 0x18) == 0)
          {
            v33 += v37;
            do
            {
LABEL_38:
              v68 = v17->i16[v33] & ~(v17->i16[v33] >> 31);
              if (v68 >= 255)
                LOBYTE(v68) = -1;
              *(_BYTE *)(v18 + v33++) = v68;
            }
            while (v9 != v33);
            goto LABEL_3;
          }
        }
        else
        {
          v37 = 0;
        }
        v63 = (v34 & 0xFFFFFFFFFFFFFFF8) + v33;
        v64 = v37 - (v34 & 0xFFFFFFFFFFFFFFF8);
        v65 = v37 + v33;
        v66 = 2 * v65;
        do
        {
          v67 = (uint16x8_t)vmaxq_s16(*(int16x8_t *)((char *)v17 + v66), (int16x8_t)0);
          v69.val[1] = (int8x16_t)vminq_s32((int32x4_t)vmovl_high_u16(v67), v16);
          v69.val[0] = (int8x16_t)vminq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v67.i8), v16);
          *(_QWORD *)(v18 + v65) = vqtbl2q_s8(v69, (int8x16_t)xmmword_1003BC970).u64[0];
          v66 += 16;
          v65 += 8;
          v64 += 8;
        }
        while (v64);
        v33 = v63;
        if (v34 != (v34 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_38;
      }
LABEL_3:
      v17 = (int16x8_t *)((char *)v17 + v13);
      v18 += a6;
      ++v8;
      v12 = (int16x8_t *)((char *)v12 + v13);
      v14 += v13;
      v15 = (int16x8_t *)((char *)v15 + v13);
      --v7;
    }
    while (v7);
  }
  return result;
}

int32x4_t *sub_1001FAF44(int32x4_t *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int32x4_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int32x4_t *v15;
  int32x4_t v16;
  int32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int32x4_t *v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int32x2_t *v32;
  _BYTE *v33;
  int32x2_t v34;
  int32x2_t v35;
  int32x2_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const float *v45;
  const float *v46;
  const float *v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  char *v51;
  int8x16_t *v52;
  int32x4_t *v53;
  unint64_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int8x16x2_t v68;
  int8x16x4_t v69;
  int8x16x4_t v70;
  int8x16x4_t v71;
  float32x4x4_t v72;
  int8x16x4_t v73;
  float32x4x4_t v74;
  int8x16x4_t v75;
  float32x4x4_t v76;

  v7 = a7[1];
  if (v7)
  {
    v8 = 0;
    v9 = *a7;
    v10 = v9 - 4;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = result + 2;
    v13 = 4 * (a2 >> 2);
    v14 = &result->i64[1];
    v15 = result + 4;
    v16.i64[0] = 0xFF000000FFLL;
    v16.i64[1] = 0xFF000000FFLL;
    v17 = result;
    v18 = a5;
    do
    {
      if ((int)v9 >= 16)
      {
        v22 = 0;
        v23 = v12;
        do
        {
          v24 = v23[-2];
          v25 = v23[-1];
          v26 = *v23;
          v27 = v23[1];
          v23 += 4;
          *(uint8x16_t *)(v18 + v22) = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(v24), v25)), (uint16x8_t)vqmovun_high_s32(vqmovun_s32(v26), v27));
          v22 += 16;
        }
        while (v22 <= (v9 - 16));
        LODWORD(v19) = v22;
        v20 = a5 + v8 * a6;
        v21 = (uint64_t)result->i64 + v11 * v8;
        if ((int)v19 > (int)v10)
          goto LABEL_16;
      }
      else
      {
        LODWORD(v19) = 0;
        v20 = a5 + v8 * a6;
        v21 = (uint64_t)result->i64 + v11 * v8;
        if ((int)v10 < 0)
          goto LABEL_16;
      }
      v28 = (int)v19;
      v29 = v10 - (int)v19;
      if (v29 < 0x3C
        || (v30 = v29 >> 2, v31 = v28, v18 + v28 < v21 + 16 + 4 * v28 + 16 * (v29 >> 2))
        && (unint64_t)v17->u64 + v31 * 4 < v20 + 4 + (v29 & 0xFFFFFFFFFFFFFFFCLL) + v28)
      {
        v19 = v28;
LABEL_14:
        v32 = (int32x2_t *)((char *)v14 + 4 * v19);
        do
        {
          v33 = (_BYTE *)(v18 + v19);
          v34 = vmin_s32(vmax_s32(v32[-1], 0), (int32x2_t)0xFF000000FFLL);
          v33[1] = v34.i8[4];
          *v33 = v34.i8[0];
          v35 = *v32;
          v32 += 2;
          v36 = vmin_s32(vmax_s32(v35, 0), (int32x2_t)0xFF000000FFLL);
          v33[3] = v36.i8[4];
          v33[2] = v36.i8[0];
          v19 += 4;
        }
        while (v19 <= v10);
        goto LABEL_16;
      }
      v42 = v30 + 1;
      v43 = (v30 + 1) & 0x7FFFFFFFFFFFFFF0;
      v19 = v28 + 4 * v43;
      v44 = v43;
      do
      {
        v45 = (const float *)&v17->i32[v31];
        v46 = (const float *)&v17[8].i32[v31];
        v47 = (const float *)&v17[12].i32[v31];
        v71 = (int8x16x4_t)vld4q_f32(v45);
        v45 += 16;
        v72 = vld4q_f32(v45);
        v74 = vld4q_f32(v46);
        v76 = vld4q_f32(v47);
        v69.val[0] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v71.val[0], (int32x4_t)0), v16);
        v69.val[3] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v76.val[0], (int32x4_t)0), v16);
        v69.val[2] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v74.val[0], (int32x4_t)0), v16);
        v69.val[1] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v72.val[0], (int32x4_t)0), v16);
        v48 = vqtbl4q_s8(v69, (int8x16_t)xmmword_1003BC960);
        v70.val[0] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v71.val[1], (int32x4_t)0), v16);
        v70.val[3] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v76.val[1], (int32x4_t)0), v16);
        v70.val[2] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v74.val[1], (int32x4_t)0), v16);
        v70.val[1] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v72.val[1], (int32x4_t)0), v16);
        v49 = vqtbl4q_s8(v70, (int8x16_t)xmmword_1003BC960);
        v70.val[0] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v71.val[2], (int32x4_t)0), v16);
        v70.val[3] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v76.val[2], (int32x4_t)0), v16);
        v70.val[2] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v74.val[2], (int32x4_t)0), v16);
        v70.val[1] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v72.val[2], (int32x4_t)0), v16);
        v50 = vqtbl4q_s8(v70, (int8x16_t)xmmword_1003BC960);
        v71.val[0] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v71.val[3], (int32x4_t)0), v16);
        v71.val[3] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v76.val[3], (int32x4_t)0), v16);
        v71.val[2] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v74.val[3], (int32x4_t)0), v16);
        v71.val[1] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v72.val[3], (int32x4_t)0), v16);
        v69.val[0] = vqtbl4q_s8(v71, (int8x16_t)xmmword_1003BC960);
        v51 = (char *)(v18 + v28);
        vst4q_s8(v51, v69);
        v28 += 64;
        v31 += 64;
        v44 -= 16;
      }
      while (v44);
      if (v42 != v43)
        goto LABEL_14;
LABEL_16:
      if ((int)v19 < (int)v9)
      {
        v37 = (int)v19;
        v38 = v9 - (int)v19;
        if (v38 < 8)
          goto LABEL_38;
        v39 = v20 + v9;
        if (v18 + v37 < (unint64_t)(v21 + 4 * v9) && (unint64_t)v17 + 4 * v37 < v39)
          goto LABEL_38;
        if (v38 >= 0x20)
        {
          v41 = v38 & 0xFFFFFFFFFFFFFFE0;
          v52 = (int8x16_t *)(v18 + v37);
          v53 = (int32x4_t *)((char *)v15 + 4 * v37);
          v54 = v38 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v56 = v53[-2];
            v55 = v53[-1];
            v58 = v53[-4];
            v57 = v53[-3];
            v60 = v53[2];
            v59 = v53[3];
            v62 = *v53;
            v61 = v53[1];
            v53 += 8;
            v73.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(v55, (int32x4_t)0), v16);
            v73.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(v56, (int32x4_t)0), v16);
            v73.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(v57, (int32x4_t)0), v16);
            v73.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(v58, (int32x4_t)0), v16);
            v75.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(v59, (int32x4_t)0), v16);
            v75.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(v60, (int32x4_t)0), v16);
            v75.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(v61, (int32x4_t)0), v16);
            v75.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(v62, (int32x4_t)0), v16);
            *v52 = vqtbl4q_s8(v73, (int8x16_t)xmmword_1003BC960);
            v52[1] = vqtbl4q_s8(v75, (int8x16_t)xmmword_1003BC960);
            v52 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v38 == v41)
            goto LABEL_3;
          if ((v38 & 0x18) == 0)
          {
            v37 += v41;
            do
            {
LABEL_38:
              v67 = v17->i32[v37] & ~(v17->i32[v37] >> 31);
              if (v67 >= 255)
                LOBYTE(v67) = -1;
              *(_BYTE *)(v18 + v37++) = v67;
            }
            while (v9 != v37);
            goto LABEL_3;
          }
        }
        else
        {
          v41 = 0;
        }
        v63 = (v38 & 0xFFFFFFFFFFFFFFF8) + v37;
        v64 = v41 - (v38 & 0xFFFFFFFFFFFFFFF8);
        v65 = v41 + v37;
        v66 = 4 * v65;
        do
        {
          v68.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(*(int32x4_t *)((char *)&v17[1] + v66), (int32x4_t)0), v16);
          v68.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(*(int32x4_t *)((char *)v17 + v66), (int32x4_t)0), v16);
          *(_QWORD *)(v18 + v65) = vqtbl2q_s8(v68, (int8x16_t)xmmword_1003BC970).u64[0];
          v66 += 32;
          v65 += 8;
          v64 += 8;
        }
        while (v64);
        v37 = v63;
        if (v38 != (v38 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_38;
      }
LABEL_3:
      v17 = (int32x4_t *)((char *)v17 + v13);
      v18 += a6;
      ++v8;
      v12 = (int32x4_t *)((char *)v12 + v13);
      v14 = (uint64_t *)((char *)v14 + v13);
      v15 = (int32x4_t *)((char *)v15 + v13);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1001FB33C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  float32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t v16;
  _BYTE *v17;
  int32x2_t v18;
  uint64_t v19;
  float v20;
  int v21;
  char v22;

  v7 = a7[1];
  if (v7)
  {
    v10 = (float32x4_t *)result;
    v11 = *a7;
    v12 = v11 - 4;
    v13 = 4 * (a2 >> 2);
    do
    {
      result = sub_1002054F0((uint64_t)&v22, v10, a5, v11);
      if ((int)result <= (int)v12)
      {
        v14 = (int)result;
        v15 = 4 * (int)result + 8;
        do
        {
          v16 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v10->f32[v14 + 1]), (uint64_t)rintf(*(float *)((char *)&v10->f32[-2] + v15))), 0), (int32x2_t)0xFF000000FFLL);
          v17 = (_BYTE *)(a5 + v14);
          v17[1] = v16.i8[4];
          *v17 = v16.i8[0];
          v18 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(*(float *)((char *)&v10->f32[1] + v15)), (uint64_t)rintf(*(float *)((char *)v10->f32 + v15))), 0), (int32x2_t)0xFF000000FFLL);
          v17[3] = v18.i8[4];
          v17[2] = v18.i8[0];
          v14 += 4;
          v15 += 16;
        }
        while (v14 <= v12);
        result = v14;
      }
      if ((int)result < (int)v11)
      {
        v19 = (int)result;
        do
        {
          v20 = rintf(v10->f32[v19]);
          v21 = (uint64_t)v20 & ~((int)(uint64_t)v20 >> 31);
          if (v21 >= 255)
            LOBYTE(v21) = -1;
          *(_BYTE *)(a5 + v19++) = v21;
        }
        while (v11 != v19);
      }
      v10 = (float32x4_t *)((char *)v10 + v13);
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1001FB4AC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  float64x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t v16;
  _BYTE *v17;
  int32x2_t v18;
  uint64_t v19;
  double v20;
  int v21;
  char v22;

  v7 = a7[1];
  if (v7)
  {
    v10 = (float64x2_t *)result;
    v11 = *a7;
    v12 = v11 - 4;
    v13 = 8 * (a2 >> 3);
    do
    {
      result = sub_10020585C((uint64_t)&v22, v10, a5, v11);
      if ((int)result <= (int)v12)
      {
        v14 = (int)result;
        v15 = 8 * (int)result + 16;
        do
        {
          v16 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v10->f64[v14 + 1]), (uint64_t)rint(*(double *)((char *)v10[-1].f64 + v15))), 0), (int32x2_t)0xFF000000FFLL);
          v17 = (_BYTE *)(a5 + v14);
          v17[1] = v16.i8[4];
          *v17 = v16.i8[0];
          v18 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(*(double *)((char *)&v10->f64[1] + v15)), (uint64_t)rint(*(double *)((char *)v10->f64 + v15))), 0), (int32x2_t)0xFF000000FFLL);
          v17[3] = v18.i8[4];
          v17[2] = v18.i8[0];
          v14 += 4;
          v15 += 32;
        }
        while (v14 <= v12);
        result = v14;
      }
      if ((int)result < (int)v11)
      {
        v19 = (int)result;
        do
        {
          v20 = rint(v10->f64[v19]);
          v21 = (uint64_t)v20 & ~((int)(uint64_t)v20 >> 31);
          if (v21 >= 255)
            LOBYTE(v21) = -1;
          *(_BYTE *)(a5 + v19++) = v21;
        }
        while (v11 != v19);
      }
      v10 = (float64x2_t *)((char *)v10 + v13);
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

unint64_t sub_1001FB61C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint8x16_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x16_t v35;
  uint8x16_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint8x16_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  char *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  unsigned int v64;
  _BYTE *v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint8x16_t v74;
  uint8x16_t *v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  int8x16x4_t v79;
  int8x16x4_t v80;

  v7 = a7[1];
  if (!v7)
    return result;
  v8 = *a7;
  v9 = v8 - 4;
  if ((int)v8 >= 8)
  {
    v15 = 0;
    v16.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
    v16.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
    v17 = result;
    v18 = a5;
    while (1)
    {
      v19 = 0;
      v20 = 0;
      do
      {
        *(int8x8_t *)(v18 + v20) = vqmovn_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)(v17 + v20)));
        v20 += 8;
        v19 += 0x800000000;
      }
      while (v20 <= (v8 - 8));
      if ((int)v9 >= (int)v20)
      {
        v21 = 0;
        v22 = v17 + (int)v20;
        do
        {
          v23 = (unsigned __int8 *)(v22 + v21);
          v24 = *(unsigned __int8 *)(v22 + v21);
          if (v24 >= 0x7F)
            LOBYTE(v24) = 127;
          v25 = v23[1];
          if (v25 >= 0x7F)
            LOBYTE(v25) = 127;
          v26 = (_BYTE *)(v18 + (int)v20 + v21);
          *v26 = v24;
          v26[1] = v25;
          v27 = v23[2];
          if (v27 >= 0x7F)
            LOBYTE(v27) = 127;
          v28 = v23[3];
          if (v28 >= 0x7F)
            LOBYTE(v28) = 127;
          v26[2] = v27;
          v26[3] = v28;
          v21 += 4;
        }
        while ((int)v20 + v21 <= v9);
        LODWORD(v20) = v20 + v21;
        if ((int)v20 >= (int)v8)
          goto LABEL_17;
      }
      else if ((int)v20 >= (int)v8)
      {
        goto LABEL_17;
      }
      v29 = (int)v20;
      v30 = v8 - (int)v20;
      if (v30 < 8)
      {
        v31 = v29;
        goto LABEL_49;
      }
      if (a5 + v15 * a6 - (result + v15 * a2) < 0x20)
      {
        v31 = v29;
        goto LABEL_49;
      }
      if (v30 >= 0x20)
      {
        v32 = v30 & 0xFFFFFFFFFFFFFFE0;
        v33 = v29;
        v34 = v30 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v35 = vminq_u8(*(uint8x16_t *)(v17 + v33 + 16), v16);
          v36 = (uint8x16_t *)(v18 + v33);
          *v36 = vminq_u8(*(uint8x16_t *)(v17 + v33), v16);
          v36[1] = v35;
          v33 += 32;
          v34 -= 32;
        }
        while (v34);
        if (v30 == v32)
          goto LABEL_17;
        if ((v30 & 0x18) == 0)
        {
          v31 = v32 + v29;
          do
          {
LABEL_49:
            v39 = *(unsigned __int8 *)(v17 + v31);
            if (v39 >= 0x7F)
              LOBYTE(v39) = 127;
            *(_BYTE *)(v18 + v31++) = v39;
          }
          while (v8 != v31);
          goto LABEL_17;
        }
      }
      else
      {
        v32 = 0;
      }
      v31 = (v30 & 0xFFFFFFFFFFFFFFF8) + v29;
      v37 = v32 - (v30 & 0xFFFFFFFFFFFFFFF8);
      v38 = v32 + v29;
      do
      {
        *(uint8x8_t *)(v18 + v38) = vmin_u8(*(uint8x8_t *)(v17 + v38), (uint8x8_t)0x7F7F7F7F7F7F7F7FLL);
        v38 += 8;
        v37 += 8;
      }
      while (v37);
      if (v30 != (v30 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_49;
LABEL_17:
      v17 += a2;
      v18 += a6;
      ++v15;
      if (!--v7)
        return result;
    }
  }
  if ((int)v8 >= 4)
  {
    v40 = 0;
    v41 = 3;
    if (v9 > 3)
      v41 = v8 - 4;
    v42 = (((v41 << 32) & 0x7FFFFFFC00000000) + 0x400000000) >> 32;
    v43 = v42 | 1;
    if ((uint64_t)(v42 | 1) <= v8)
      v43 = *a7;
    v44 = v43 - v42;
    v45 = (v41 & 0xFFFFFFFC) + 4;
    v46 = (v41 >> 2) + 1;
    v47 = v44 & 0xFFFFFFFFFFFFFFE0;
    v48 = v44 & 0xFFFFFFFFFFFFFFF8;
    v49.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
    v49.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
    v50 = result;
    v51 = a5;
    while (1)
    {
      v52 = v40 * a6;
      v53 = v40 * a2;
      if (v41 >= 0x3C && (v51 < result + v45 + v53 ? (v54 = v50 >= a5 + v45 + v52) : (v54 = 1), v54))
      {
        v55 = 0;
        v56 = v46 & 0x7FFFFFF0;
        do
        {
          v57 = (const char *)(v50 + v55);
          v79 = vld4q_s8(v57);
          v80.val[0] = (int8x16_t)vminq_u8((uint8x16_t)v79.val[0], v49);
          v80.val[1] = (int8x16_t)vminq_u8((uint8x16_t)v79.val[1], v49);
          v80.val[2] = (int8x16_t)vminq_u8((uint8x16_t)v79.val[2], v49);
          v80.val[3] = (int8x16_t)vminq_u8((uint8x16_t)v79.val[3], v49);
          v58 = (char *)(v51 + v55);
          vst4q_s8(v58, v80);
          v55 += 64;
          v56 -= 16;
        }
        while (v56);
        v59 = 4 * (v46 & 0x7FFFFFF0);
        v60 = 4 * (v46 & 0x7FFFFFF0);
        if (v46 == (v46 & 0x7FFFFFF0))
        {
          if ((int)v8 <= (int)(4 * (v46 & 0x7FFFFFF0)))
            goto LABEL_58;
          goto LABEL_82;
        }
      }
      else
      {
        v59 = 0;
      }
      v61 = v59 + 1;
      do
      {
        v62 = (unsigned __int8 *)(v50 + v61);
        v63 = *(unsigned __int8 *)(v50 + v61 - 1);
        if (v63 >= 0x7F)
          LOBYTE(v63) = 127;
        v64 = *v62;
        if (v64 >= 0x7F)
          LOBYTE(v64) = 127;
        v65 = (_BYTE *)(v51 + v61);
        *(v65 - 1) = v63;
        *v65 = v64;
        v66 = v62[1];
        if (v66 >= 0x7F)
          LOBYTE(v66) = 127;
        v67 = v62[2];
        if (v67 >= 0x7F)
          LOBYTE(v67) = 127;
        v65[1] = v66;
        v65[2] = v67;
        v68 = v61 + 4;
        v69 = v61 + 3;
        v61 += 4;
      }
      while (v69 <= v9);
      v60 = v68 - 1;
      if ((int)v8 <= v68 - 1)
        goto LABEL_58;
LABEL_82:
      if (v44 < 8)
      {
        v70 = v60;
        goto LABEL_97;
      }
      if (v52 + a5 - (v53 + result) < 0x20)
      {
        v70 = v60;
        goto LABEL_97;
      }
      if (v44 >= 0x20)
      {
        v72 = v60;
        v73 = v44 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v74 = vminq_u8(*(uint8x16_t *)(v50 + v72 + 16), v49);
          v75 = (uint8x16_t *)(v51 + v72);
          *v75 = vminq_u8(*(uint8x16_t *)(v50 + v72), v49);
          v75[1] = v74;
          v72 += 32;
          v73 -= 32;
        }
        while (v73);
        if (v44 == v47)
          goto LABEL_58;
        v71 = v44 & 0xFFFFFFFFFFFFFFE0;
        if ((v44 & 0x18) == 0)
        {
          v70 = v60 + v47;
          do
          {
LABEL_97:
            v78 = *(unsigned __int8 *)(v50 + v70);
            if (v78 >= 0x7F)
              LOBYTE(v78) = 127;
            *(_BYTE *)(v51 + v70++) = v78;
          }
          while (v70 < v8);
          goto LABEL_58;
        }
      }
      else
      {
        v71 = 0;
      }
      v70 = v60 + v48;
      v76 = v71 - (v44 & 0xFFFFFFFFFFFFFFF8);
      v77 = v71 + v60;
      do
      {
        *(uint8x8_t *)(v51 + v77) = vmin_u8(*(uint8x8_t *)(v50 + v77), (uint8x8_t)0x7F7F7F7F7F7F7F7FLL);
        v77 += 8;
        v76 += 8;
      }
      while (v76);
      if (v44 != v48)
        goto LABEL_97;
LABEL_58:
      v50 += a2;
      v51 += a6;
      ++v40;
      if (!--v7)
        return result;
    }
  }
  if ((int)v8 >= 1)
  {
    v10 = (unsigned __int8 *)(result + 2);
    v11 = (_BYTE *)(a5 + 2);
    do
    {
      v12 = *(v10 - 2);
      if (v12 >= 0x7F)
        LOBYTE(v12) = 127;
      *(v11 - 2) = v12;
      if ((_DWORD)v8 != 1)
      {
        v13 = *(v10 - 1);
        if (v13 >= 0x7F)
          LOBYTE(v13) = 127;
        *(v11 - 1) = v13;
        if ((_DWORD)v8 != 2)
        {
          v14 = *v10;
          if (v14 >= 0x7F)
            LOBYTE(v14) = 127;
          *v11 = v14;
        }
      }
      v10 += a2;
      v11 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

int64_t sub_1001FBAEC(int64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  uint16x8_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int64_t v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  uint16x8_t *v38;
  unint64_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int64_t v59;
  int64_t v60;
  uint16x8_t v61;
  uint64_t v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  const __int16 *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned __int16 *v71;
  unsigned int v72;
  unsigned int v73;
  char *v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  int8x16_t *v80;
  uint16x8_t *v81;
  unint64_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  int64_t v93;
  int16x8x4_t v94;
  int16x8x4_t v95;
  int8x16x4_t v96;

  v92 = a5;
  v93 = result;
  v7 = a7[1];
  if (!v7)
    return result;
  v8 = *a7;
  v9 = a2 >> 1;
  v10 = v8 - 4;
  if ((int)v8 >= 16)
  {
    v16 = 0;
    v17 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v19 = a5;
    v18 = result;
    v20 = result + 16;
    v21 = 2 * v9;
    v22 = result + 4;
    v23 = result + 32;
    v24.i64[0] = 0x7F007F007F007FLL;
    v24.i64[1] = 0x7F007F007F007FLL;
    while (1)
    {
      v25 = 0;
      v26 = 0;
      result = v20;
      do
      {
        *(int8x16_t *)&v19[v26] = vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)(result - 16))), (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(result - 16)))), vqmovn_high_s32(vqmovn_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)result)), (int32x4_t)vmovl_high_u16(*(uint16x8_t *)result)));
        v26 += 16;
        v25 += 0x1000000000;
        result += 32;
      }
      while (v26 <= (v8 - 16));
      if ((int)v10 >= (int)v26)
      {
        v27 = 0;
        result = (int)v26;
        v28 = 2 * (int)v26;
        v29 = (unsigned __int16 *)(v22 + v28);
        v30 = v18 + v28;
        do
        {
          v31 = *(v29 - 2);
          if (v31 >= 0x7F)
            LOBYTE(v31) = 127;
          v32 = *(unsigned __int16 *)(v30 + 2 * v27 + 2);
          if (v32 >= 0x7F)
            LOBYTE(v32) = 127;
          v33 = &v19[(int)v26 + v27];
          *v33 = v31;
          v33[1] = v32;
          v34 = *v29;
          if (v34 >= 0x7F)
            LOBYTE(v34) = 127;
          v35 = v29[1];
          if (v35 >= 0x7F)
            LOBYTE(v35) = 127;
          v33[2] = v34;
          v33[3] = v35;
          v27 += 4;
          v29 += 4;
        }
        while ((int)v26 + v27 <= v10);
        LODWORD(v26) = v26 + v27;
        if ((int)v26 >= (int)v8)
          goto LABEL_17;
      }
      else if ((int)v26 >= (int)v8)
      {
        goto LABEL_17;
      }
      v26 = (int)v26;
      v36 = v8 - (int)v26;
      if (v36 < 8
        || (unint64_t)&v19[(int)v26] < v93 + 2 * v8 + v17 * v16
        && v18 + 2 * (int)v26 < (unint64_t)&v92[v8 + v16 * a6])
      {
        goto LABEL_48;
      }
      if (v36 >= 0x20)
      {
        v37 = v36 & 0xFFFFFFFFFFFFFFE0;
        result = (int64_t)&v19[(int)v26];
        v38 = (uint16x8_t *)(v23 + 2 * (int)v26);
        v39 = v36 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v40 = v38[-2];
          v41 = v38[-1];
          v42 = *v38;
          v43 = v38[1];
          v38 += 4;
          *(int8x16_t *)result = vuzp1q_s8((int8x16_t)vminq_u16(v40, v24), (int8x16_t)vminq_u16(v41, v24));
          *(int8x16_t *)(result + 16) = vuzp1q_s8((int8x16_t)vminq_u16(v42, v24), (int8x16_t)vminq_u16(v43, v24));
          result += 32;
          v39 -= 32;
        }
        while (v39);
        if (v36 == v37)
          goto LABEL_17;
        if ((v36 & 0x18) == 0)
        {
          v26 = v37 + (int)v26;
          do
          {
LABEL_48:
            if (*(unsigned __int16 *)(v18 + 2 * v26) >= 0x7Fu)
              result = 127;
            else
              result = *(unsigned __int16 *)(v18 + 2 * v26);
            v19[v26++] = result;
          }
          while (v8 != v26);
          goto LABEL_17;
        }
      }
      else
      {
        v37 = 0;
      }
      result = v36 & 0xFFFFFFFFFFFFFFF8;
      v44 = (v36 & 0xFFFFFFFFFFFFFFF8) + (int)v26;
      v45 = v37 - (v36 & 0xFFFFFFFFFFFFFFF8);
      v46 = v37 + (int)v26;
      v47 = 2 * v46;
      do
      {
        *(int8x8_t *)&v19[v46] = vmovn_s16((int16x8_t)vminq_u16(*(uint16x8_t *)(v18 + v47), v24));
        v47 += 16;
        v46 += 8;
        v45 += 8;
      }
      while (v45);
      v26 = v44;
      if (v36 != result)
        goto LABEL_48;
LABEL_17:
      v18 += v21;
      v19 += a6;
      ++v16;
      v20 += v21;
      v22 += v21;
      v23 += v21;
      if (!--v7)
        return result;
    }
  }
  if ((int)v8 >= 4)
  {
    v48 = 0;
    v49 = 3;
    if (v10 > 3)
      v49 = v8 - 4;
    v50 = ((v49 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    v51 = HIDWORD(v50) | 1;
    if (v51 <= v8)
      v51 = *a7;
    v52 = v51 - HIDWORD(v50);
    v53 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v54 = (v49 >> 2) + 1;
    v55 = v50 >> 31;
    v56 = v52 & 0xFFFFFFFFFFFFFFF8;
    v57 = 2 * v9;
    v58 = v93;
    v59 = v93 + 4;
    v60 = v93 + 32;
    v91 = v52 & 0xFFFFFFFFFFFFFFE0;
    v61.i64[0] = 0x7F007F007F007FLL;
    v61.i64[1] = 0x7F007F007F007FLL;
    while (1)
    {
      v62 = v48 * a6;
      v63 = v53 * v48;
      if (v49 >= 0x3C
        && ((unint64_t)a5 < v93 + ((2 * v49) & 0x1FFFFFFF8) + 8 + v63
          ? (v64 = v58 >= (unint64_t)&v92[(v49 & 0xFFFFFFFC) + 4 + v62])
          : (v64 = 1),
            v64))
      {
        v65 = v54 & 0x7FFFFFF0;
        v66 = a5;
        result = v58;
        do
        {
          v67 = (const __int16 *)result;
          v94 = vld4q_s16(v67);
          v67 += 32;
          v95 = vld4q_s16(v67);
          v96.val[0] = vuzp1q_s8((int8x16_t)vminq_u16((uint16x8_t)v94.val[0], v61), (int8x16_t)vminq_u16((uint16x8_t)v95.val[0], v61));
          v96.val[1] = vuzp1q_s8((int8x16_t)vminq_u16((uint16x8_t)v94.val[1], v61), (int8x16_t)vminq_u16((uint16x8_t)v95.val[1], v61));
          v96.val[2] = vuzp1q_s8((int8x16_t)vminq_u16((uint16x8_t)v94.val[2], v61), (int8x16_t)vminq_u16((uint16x8_t)v95.val[2], v61));
          v96.val[3] = vuzp1q_s8((int8x16_t)vminq_u16((uint16x8_t)v94.val[3], v61), (int8x16_t)vminq_u16((uint16x8_t)v95.val[3], v61));
          vst4q_s8(v66, v96);
          v66 += 64;
          result += 128;
          v65 -= 16;
        }
        while (v65);
        v68 = 4 * (v54 & 0x7FFFFFF0);
        v69 = 4 * (v54 & 0x7FFFFFF0);
        if (v54 == (v54 & 0x7FFFFFF0))
        {
          if ((int)v8 <= (int)(4 * (v54 & 0x7FFFFFF0)))
            goto LABEL_58;
          goto LABEL_82;
        }
      }
      else
      {
        v68 = 0;
      }
      v70 = v68 + 1;
      v71 = (unsigned __int16 *)(v59 + 2 * v68);
      do
      {
        v72 = *(v71 - 2);
        if (v72 >= 0x7F)
          LOBYTE(v72) = 127;
        v73 = *(unsigned __int16 *)(v58 + 2 * v70);
        if (v73 >= 0x7F)
          LOBYTE(v73) = 127;
        v74 = &a5[v70];
        *(v74 - 1) = v72;
        *v74 = v73;
        v75 = *v71;
        if (v75 >= 0x7F)
          LOBYTE(v75) = 127;
        v76 = v71[1];
        if (v76 >= 0x7F)
          LOBYTE(v76) = 127;
        v74[1] = v75;
        v74[2] = v76;
        v77 = v70 + 4;
        result = v70 + 3;
        v71 += 4;
        v70 += 4;
      }
      while (result <= v10);
      v69 = v77 - 1;
      if ((int)v8 <= v77 - 1)
        goto LABEL_58;
LABEL_82:
      v78 = v69;
      if (v52 < 8
        || (unint64_t)&a5[v69] < v93 + v63 - v55 + 2 * (v51 + v69)
        && v58 + 2 * v69 < (unint64_t)&v92[v52 + v62 + v69])
      {
        goto LABEL_96;
      }
      if (v52 >= 0x20)
      {
        v80 = (int8x16_t *)&a5[v69];
        v81 = (uint16x8_t *)(v60 + 2 * v78);
        v82 = v52 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v83 = v81[-2];
          v84 = v81[-1];
          v85 = *v81;
          v86 = v81[1];
          v81 += 4;
          *v80 = vuzp1q_s8((int8x16_t)vminq_u16(v83, v61), (int8x16_t)vminq_u16(v84, v61));
          v80[1] = vuzp1q_s8((int8x16_t)vminq_u16(v85, v61), (int8x16_t)vminq_u16(v86, v61));
          v80 += 2;
          v82 -= 32;
        }
        while (v82);
        result = v52 & 0xFFFFFFFFFFFFFFE0;
        if (v52 == v91)
          goto LABEL_58;
        v79 = v52 & 0xFFFFFFFFFFFFFFE0;
        if ((v52 & 0x18) == 0)
        {
          v78 += v91;
          do
          {
LABEL_96:
            if (*(unsigned __int16 *)(v58 + 2 * v78) >= 0x7Fu)
              result = 127;
            else
              result = *(unsigned __int16 *)(v58 + 2 * v78);
            a5[v78++] = result;
          }
          while (v78 < v8);
          goto LABEL_58;
        }
      }
      else
      {
        v79 = 0;
      }
      v87 = v78 + v56;
      result = -(uint64_t)(v52 & 0xFFFFFFFFFFFFFFF8);
      v88 = v79 - (v52 & 0xFFFFFFFFFFFFFFF8);
      v89 = v79 + v78;
      v90 = 2 * v89;
      do
      {
        *(int8x8_t *)&a5[v89] = vmovn_s16((int16x8_t)vminq_u16(*(uint16x8_t *)(v58 + v90), v61));
        v90 += 16;
        v89 += 8;
        v88 += 8;
      }
      while (v88);
      v78 = v87;
      if (v52 != v56)
        goto LABEL_96;
LABEL_58:
      v58 += v57;
      a5 += a6;
      ++v48;
      v59 += v57;
      v60 += v57;
      if (!--v7)
        return result;
    }
  }
  if ((int)v8 >= 1)
  {
    v11 = (unsigned __int16 *)(result + 4);
    v12 = a5 + 2;
    do
    {
      v13 = *(v11 - 2);
      if (v13 >= 0x7F)
        LOBYTE(v13) = 127;
      *(v12 - 2) = v13;
      if ((_DWORD)v8 != 1)
      {
        v14 = *(v11 - 1);
        if (v14 >= 0x7F)
          LOBYTE(v14) = 127;
        *(v12 - 1) = v14;
        if ((_DWORD)v8 != 2)
        {
          v15 = *v11;
          if (v15 >= 0x7F)
            LOBYTE(v15) = 127;
          *v12 = v15;
        }
      }
      v11 += v9;
      v12 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

int16x8_t *sub_1001FC0E8(int16x8_t *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  int16x8_t *v12;
  uint64_t v13;
  int16x8_t *v14;
  int16x8_t *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int16x8_t *v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  _BYTE *v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const __int16 *v40;
  char *v41;
  int8x16_t *v42;
  int16x8_t *v43;
  unint64_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int16x8x4_t v54;
  int16x8x4_t v55;
  int8x16x4_t v56;

  v7 = a7[1];
  if (v7)
  {
    v8 = 0;
    v9 = *a7;
    v10 = v9 - 4;
    v11 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v12 = result + 1;
    v13 = 2 * (a2 >> 1);
    v14 = result + 2;
    v15 = result;
    v16 = a5;
    do
    {
      if ((int)v9 >= 16)
      {
        v20 = 0;
        v21 = v12;
        do
        {
          *(int8x16_t *)(v16 + v20) = vqmovn_high_s16(vqmovn_s16(v21[-1]), *v21);
          v20 += 16;
          v21 += 2;
        }
        while (v20 <= (v9 - 16));
        LODWORD(v17) = v20;
        v18 = a5 + v8 * a6;
        v19 = (uint64_t)result->i64 + v11 * v8;
        if ((int)v17 > (int)v10)
          goto LABEL_32;
      }
      else
      {
        LODWORD(v17) = 0;
        v18 = a5 + v8 * a6;
        v19 = (uint64_t)result->i64 + v11 * v8;
        if ((int)v10 < 0)
          goto LABEL_32;
      }
      v22 = (int)v17;
      v23 = v10 - (int)v17;
      if (v23 >= 0x3C
        && ((v24 = v23 >> 2, v25 = v22, v16 + v22 >= v19 + 8 + 2 * v22 + 8 * (v23 >> 2))
         || (unint64_t)v15->u64 + v25 * 2 >= v18 + 4 + (v23 & 0xFFFFFFFFFFFFFFFCLL) + v22))
      {
        v37 = v24 + 1;
        v38 = (v24 + 1) & 0x7FFFFFFFFFFFFFF0;
        v17 = v22 + 4 * v38;
        v39 = v38;
        do
        {
          v40 = &v15->i16[v25];
          v54 = vld4q_s16(v40);
          v40 += 32;
          v55 = vld4q_s16(v40);
          v56.val[0] = vqmovn_high_s16(vqmovn_s16(v54.val[0]), v55.val[0]);
          v56.val[1] = vqmovn_high_s16(vqmovn_s16(v54.val[1]), v55.val[1]);
          v56.val[2] = vqmovn_high_s16(vqmovn_s16(v54.val[2]), v55.val[2]);
          v56.val[3] = vqmovn_high_s16(vqmovn_s16(v54.val[3]), v55.val[3]);
          v41 = (char *)(v16 + v22);
          vst4q_s8(v41, v56);
          v22 += 64;
          v25 += 64;
          v39 -= 16;
        }
        while (v39);
        if (v37 == v38)
          goto LABEL_32;
      }
      else
      {
        v17 = v22;
      }
      v26 = 2 * v17 + 6;
      do
      {
        v27 = *(__int16 *)((char *)&v15->i16[-3] + v26);
        if (v27 <= -128)
          v27 = -128;
        if (v27 >= 127)
          LOBYTE(v27) = 127;
        v28 = (uint64_t)v15->i64 + 2 * v17;
        v29 = *(__int16 *)(v28 + 2);
        if (v29 <= -128)
          v29 = -128;
        if (v29 >= 127)
          LOBYTE(v29) = 127;
        v30 = (_BYTE *)(v16 + v17);
        *v30 = v27;
        v30[1] = v29;
        v31 = *(__int16 *)(v28 + 4);
        if (v31 <= -128)
          v31 = -128;
        if (v31 >= 127)
          LOBYTE(v31) = 127;
        v32 = *(__int16 *)((char *)v15->i16 + v26);
        if (v32 <= -128)
          v32 = -128;
        if (v32 >= 127)
          LOBYTE(v32) = 127;
        v30[2] = v31;
        v30[3] = v32;
        v17 += 4;
        v26 += 8;
      }
      while (v17 <= v10);
LABEL_32:
      if ((int)v17 < (int)v9)
      {
        v17 = (int)v17;
        v33 = v9 - (int)v17;
        if (v33 < 8)
          goto LABEL_54;
        v34 = v18 + v9;
        if (v16 + (int)v17 < (unint64_t)(v19 + 2 * v9) && (unint64_t)v15 + 2 * (int)v17 < v34)
          goto LABEL_54;
        if (v33 >= 0x20)
        {
          v36 = v33 & 0xFFFFFFFFFFFFFFE0;
          v42 = (int8x16_t *)(v16 + (int)v17);
          v43 = (int16x8_t *)((char *)v14 + 2 * (int)v17);
          v44 = v33 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v46 = v43[-2];
            v45 = v43[-1];
            v48 = *v43;
            v47 = v43[1];
            v43 += 4;
            *v42 = vqmovn_high_s16(vqmovn_s16(v46), v45);
            v42[1] = vqmovn_high_s16(vqmovn_s16(v48), v47);
            v42 += 2;
            v44 -= 32;
          }
          while (v44);
          if (v33 == v36)
            goto LABEL_3;
          if ((v33 & 0x18) == 0)
          {
            v17 = v36 + (int)v17;
            do
            {
LABEL_54:
              v53 = v15->i16[v17];
              if (v53 <= -128)
                v53 = -128;
              if (v53 >= 127)
                LOBYTE(v53) = 127;
              *(_BYTE *)(v16 + v17++) = v53;
            }
            while (v9 != v17);
            goto LABEL_3;
          }
        }
        else
        {
          v36 = 0;
        }
        v49 = (v33 & 0xFFFFFFFFFFFFFFF8) + (int)v17;
        v50 = v36 - (v33 & 0xFFFFFFFFFFFFFFF8);
        v51 = v36 + (int)v17;
        v52 = 2 * v51;
        do
        {
          *(int8x8_t *)(v16 + v51) = vqmovn_s16(*(int16x8_t *)((char *)v15 + v52));
          v52 += 16;
          v51 += 8;
          v50 += 8;
        }
        while (v50);
        v17 = v49;
        if (v33 != (v33 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_54;
      }
LABEL_3:
      v15 = (int16x8_t *)((char *)v15 + v13);
      v16 += a6;
      ++v8;
      v12 = (int16x8_t *)((char *)v12 + v13);
      v14 = (int16x8_t *)((char *)v14 + v13);
      --v7;
    }
    while (v7);
  }
  return result;
}

int32x4_t *sub_1001FC3F0(int32x4_t *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int32x4_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int32x4_t *v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int32x4_t *v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int32x2_t *v33;
  _BYTE *v34;
  int32x2_t v35;
  int32x2_t v36;
  int32x2_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const float *v46;
  const float *v47;
  const float *v48;
  int8x16_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int8x16_t v52;
  char *v53;
  int8x16_t *v54;
  int32x4_t *v55;
  unint64_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int8x16x2_t v70;
  int8x16x4_t v71;
  int8x16x4_t v72;
  int8x16x4_t v73;
  int8x16x4_t v74;
  int8x16x4_t v75;
  float32x4x4_t v76;
  float32x4x4_t v77;
  float32x4x4_t v78;

  v7 = a7[1];
  if (v7)
  {
    v8 = 0;
    v9 = *a7;
    v10 = v9 - 4;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = result + 2;
    v13 = 4 * (a2 >> 2);
    v14 = &result->i64[1];
    v15 = result + 4;
    v16.i64[0] = 0x7F0000007FLL;
    v16.i64[1] = 0x7F0000007FLL;
    v17.i64[0] = 0x7F0000007FLL;
    v17.i64[1] = 0x7F0000007FLL;
    v18 = result;
    v19 = a5;
    do
    {
      if ((int)v9 >= 16)
      {
        v23 = 0;
        v24 = v12;
        do
        {
          v25 = v24[-2];
          v26 = v24[-1];
          v27 = *v24;
          v28 = v24[1];
          v24 += 4;
          *(int8x16_t *)(v19 + v23) = vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32(v25), v26)), vqmovn_high_s32(vqmovn_s32(v27), v28));
          v23 += 16;
        }
        while (v23 <= (v9 - 16));
        LODWORD(v20) = v23;
        v21 = a5 + v8 * a6;
        v22 = (uint64_t)result->i64 + v11 * v8;
        if ((int)v20 > (int)v10)
          goto LABEL_16;
      }
      else
      {
        LODWORD(v20) = 0;
        v21 = a5 + v8 * a6;
        v22 = (uint64_t)result->i64 + v11 * v8;
        if ((int)v10 < 0)
          goto LABEL_16;
      }
      v29 = (int)v20;
      v30 = v10 - (int)v20;
      if (v30 < 0x3C
        || (v31 = v30 >> 2, v32 = v29, v19 + v29 < v22 + 16 + 4 * v29 + 16 * (v30 >> 2))
        && (unint64_t)v18->u64 + v32 * 4 < v21 + 4 + (v30 & 0xFFFFFFFFFFFFFFFCLL) + v29)
      {
        v20 = v29;
LABEL_14:
        v33 = (int32x2_t *)((char *)v14 + 4 * v20);
        do
        {
          v34 = (_BYTE *)(v19 + v20);
          v35 = vmin_s32(vmax_s32(v33[-1], (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v34[1] = v35.i8[4];
          *v34 = v35.i8[0];
          v36 = *v33;
          v33 += 2;
          v37 = vmin_s32(vmax_s32(v36, (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v34[3] = v37.i8[4];
          v34[2] = v37.i8[0];
          v20 += 4;
        }
        while (v20 <= v10);
        goto LABEL_16;
      }
      v43 = v31 + 1;
      v44 = (v31 + 1) & 0x7FFFFFFFFFFFFFF0;
      v20 = v29 + 4 * v44;
      v45 = v44;
      do
      {
        v46 = (const float *)&v18->i32[v32];
        v47 = (const float *)&v18[8].i32[v32];
        v48 = (const float *)&v18[12].i32[v32];
        v74 = (int8x16x4_t)vld4q_f32(v46);
        v46 += 16;
        v76 = vld4q_f32(v46);
        v77 = vld4q_f32(v47);
        v78 = vld4q_f32(v48);
        v73.val[0] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v74.val[0], v16), v17);
        v73.val[3] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v78.val[0], v16), v17);
        v73.val[2] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v77.val[0], v16), v17);
        v73.val[1] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v76.val[0], v16), v17);
        v49 = vqtbl4q_s8(v73, (int8x16_t)xmmword_1003BC960);
        v71.val[0] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v74.val[1], v16), v17);
        v71.val[3] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v78.val[1], v16), v17);
        v71.val[2] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v77.val[1], v16), v17);
        v71.val[1] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v76.val[1], v16), v17);
        v50 = vqtbl4q_s8(v71, (int8x16_t)xmmword_1003BC960);
        v73.val[1] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v74.val[2], v16), v17);
        v51 = vminq_s32(vmaxq_s32((int32x4_t)v78.val[2], v16), v17);
        v73.val[3] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v77.val[2], v16), v17);
        v73.val[2] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v76.val[2], v16), v17);
        v52 = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v73 + 16), (int8x16_t)xmmword_1003BC960);
        v74.val[0] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v74.val[3], v16), v17);
        v74.val[3] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v78.val[3], v16), v17);
        v74.val[2] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v77.val[3], v16), v17);
        v74.val[1] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v76.val[3], v16), v17);
        v73.val[0] = vqtbl4q_s8(v74, (int8x16_t)xmmword_1003BC960);
        v53 = (char *)(v19 + v29);
        vst4q_s8(v53, v73);
        v29 += 64;
        v32 += 64;
        v45 -= 16;
      }
      while (v45);
      if (v43 != v44)
        goto LABEL_14;
LABEL_16:
      if ((int)v20 < (int)v9)
      {
        v38 = (int)v20;
        v39 = v9 - (int)v20;
        if (v39 < 8)
          goto LABEL_38;
        v40 = v21 + v9;
        if (v19 + v38 < (unint64_t)(v22 + 4 * v9) && (unint64_t)v18 + 4 * v38 < v40)
          goto LABEL_38;
        if (v39 >= 0x20)
        {
          v42 = v39 & 0xFFFFFFFFFFFFFFE0;
          v54 = (int8x16_t *)(v19 + v38);
          v55 = (int32x4_t *)((char *)v15 + 4 * v38);
          v56 = v39 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v58 = v55[-2];
            v57 = v55[-1];
            v60 = v55[-4];
            v59 = v55[-3];
            v62 = v55[2];
            v61 = v55[3];
            v64 = *v55;
            v63 = v55[1];
            v55 += 8;
            v75.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(v57, v16), v17);
            v75.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(v58, v16), v17);
            v75.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(v59, v16), v17);
            v75.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(v60, v16), v17);
            v72.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(v61, v16), v17);
            v72.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(v62, v16), v17);
            v72.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(v63, v16), v17);
            v72.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(v64, v16), v17);
            *v54 = vqtbl4q_s8(v75, (int8x16_t)xmmword_1003BC960);
            v54[1] = vqtbl4q_s8(v72, (int8x16_t)xmmword_1003BC960);
            v54 += 2;
            v56 -= 32;
          }
          while (v56);
          if (v39 == v42)
            goto LABEL_3;
          if ((v39 & 0x18) == 0)
          {
            v38 += v42;
            do
            {
LABEL_38:
              v69 = v18->i32[v38];
              if (v69 <= -128)
                v69 = -128;
              if (v69 >= 127)
                LOBYTE(v69) = 127;
              *(_BYTE *)(v19 + v38++) = v69;
            }
            while (v9 != v38);
            goto LABEL_3;
          }
        }
        else
        {
          v42 = 0;
        }
        v65 = (v39 & 0xFFFFFFFFFFFFFFF8) + v38;
        v66 = v42 - (v39 & 0xFFFFFFFFFFFFFFF8);
        v67 = v42 + v38;
        v68 = 4 * v67;
        do
        {
          v70.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(*(int32x4_t *)((char *)&v18[1] + v68), v16), v17);
          v70.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(*(int32x4_t *)((char *)v18 + v68), v16), v17);
          *(_QWORD *)(v19 + v67) = vqtbl2q_s8(v70, (int8x16_t)xmmword_1003BC970).u64[0];
          v68 += 32;
          v67 += 8;
          v66 += 8;
        }
        while (v66);
        v38 = v65;
        if (v39 != (v39 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_38;
      }
LABEL_3:
      v18 = (int32x4_t *)((char *)v18 + v13);
      v19 += a6;
      ++v8;
      v12 = (int32x4_t *)((char *)v12 + v13);
      v14 = (uint64_t *)((char *)v14 + v13);
      v15 = (int32x4_t *)((char *)v15 + v13);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1001FC804(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  float32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t v16;
  _BYTE *v17;
  int32x2_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v7 = a7[1];
  if (v7)
  {
    v10 = (float32x4_t *)result;
    v11 = *a7;
    v12 = v11 - 4;
    v13 = 4 * (a2 >> 2);
    do
    {
      result = sub_100205BD8((uint64_t)&v21, v10, a5, v11);
      if ((int)result <= (int)v12)
      {
        v14 = (int)result;
        v15 = 4 * (int)result + 8;
        do
        {
          v16 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v10->f32[v14 + 1]), (uint64_t)rintf(*(float *)((char *)&v10->f32[-2] + v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v17 = (_BYTE *)(a5 + v14);
          v17[1] = v16.i8[4];
          *v17 = v16.i8[0];
          v18 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(*(float *)((char *)&v10->f32[1] + v15)), (uint64_t)rintf(*(float *)((char *)v10->f32 + v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v17[3] = v18.i8[4];
          v17[2] = v18.i8[0];
          v14 += 4;
          v15 += 16;
        }
        while (v14 <= v12);
        result = v14;
      }
      if ((int)result < (int)v11)
      {
        v19 = (int)result;
        do
        {
          v20 = (uint64_t)rintf(v10->f32[v19]);
          if ((int)v20 <= -128)
            LODWORD(v20) = -128;
          if ((int)v20 >= 127)
            LOBYTE(v20) = 127;
          *(_BYTE *)(a5 + v19++) = v20;
        }
        while (v11 != v19);
      }
      v10 = (float32x4_t *)((char *)v10 + v13);
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1001FC984(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  float64x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t v16;
  _BYTE *v17;
  int32x2_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v7 = a7[1];
  if (v7)
  {
    v10 = (float64x2_t *)result;
    v11 = *a7;
    v12 = v11 - 4;
    v13 = 8 * (a2 >> 3);
    do
    {
      result = sub_100205F44((uint64_t)&v21, v10, a5, v11);
      if ((int)result <= (int)v12)
      {
        v14 = (int)result;
        v15 = 8 * (int)result + 16;
        do
        {
          v16 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v10->f64[v14 + 1]), (uint64_t)rint(*(double *)((char *)v10[-1].f64 + v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v17 = (_BYTE *)(a5 + v14);
          v17[1] = v16.i8[4];
          *v17 = v16.i8[0];
          v18 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(*(double *)((char *)&v10->f64[1] + v15)), (uint64_t)rint(*(double *)((char *)v10->f64 + v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v17[3] = v18.i8[4];
          v17[2] = v18.i8[0];
          v14 += 4;
          v15 += 32;
        }
        while (v14 <= v12);
        result = v14;
      }
      if ((int)result < (int)v11)
      {
        v19 = (int)result;
        do
        {
          v20 = (uint64_t)rint(v10->f64[v19]);
          if ((int)v20 <= -128)
            LODWORD(v20) = -128;
          if ((int)v20 >= 127)
            LOBYTE(v20) = 127;
          *(_BYTE *)(a5 + v19++) = v20;
        }
        while (v11 != v19);
      }
      v10 = (float64x2_t *)((char *)v10 + v13);
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

unint64_t sub_1001FCB04(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint16x8_t *a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint16x8_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint16x8_t *v26;
  uint64_t v27;
  _WORD *v28;
  unint64_t v29;
  __int8 *v30;
  __int16 v31;
  char *v32;
  __int16 v33;
  unint64_t v34;
  unint64_t v35;
  uint8x8_t *v36;
  unint64_t v37;
  uint8x16_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  __int16 *v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v67;
  __int16 *v68;
  __int16 *v69;
  __int16 *v70;
  unint64_t v71;
  __int16 v72;
  __int16 v73;
  unint64_t v74;
  unint64_t v75;
  uint8x8_t *v76;
  unint64_t v77;
  uint8x16_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  unint64_t v81;
  uint16x8_t *v82;
  uint8x8_t v83;
  uint64_t v84;
  int8x16x4_t v85;
  int16x8x4_t v86;
  int16x8x4_t v87;

  v7 = a7[1];
  if (!v7)
    return result;
  v10 = result;
  v11 = *a7;
  v12 = a6 >> 1;
  v13 = v7 - 1;
  if ((int)v11 >= 8)
  {
    v16 = 0;
    v17 = (v11 - 4);
    v18 = a6 & 0xFFFFFFFFFFFFFFFELL;
    v19 = 2 * v12;
    v20 = (uint64_t)a5->i64 + 6;
    v21 = result + 16;
    v22 = a5;
    v23 = result;
    while (1)
    {
      result = 0;
      v24 = 0;
      v25 = v13;
      v26 = v22;
      do
      {
        *v26++ = vmovl_u8(*(uint8x8_t *)(v23 + v24));
        v24 += 8;
        result += 0x800000000;
      }
      while (v24 <= (v11 - 8));
      if ((int)v17 >= (int)v24)
        break;
      if ((int)v24 < (int)v11)
        goto LABEL_20;
LABEL_11:
      v23 += a2;
      v22 = (uint16x8_t *)((char *)v22 + v19);
      v13 = v25 - 1;
      ++v16;
      v20 += v19;
      v21 += a2;
      if (!v25)
        return result;
    }
    result = 0;
    v27 = 2 * (int)v24;
    v28 = (_WORD *)(v20 + v27);
    v29 = v23 + (int)v24;
    v30 = &v22->i8[v27];
    do
    {
      v31 = *(unsigned __int8 *)(v29 + result + 1);
      *(v28 - 3) = *(unsigned __int8 *)(v29 + result);
      v32 = &v30[2 * result];
      *((_WORD *)v32 + 1) = v31;
      v33 = *(unsigned __int8 *)(v29 + result + 3);
      *((_WORD *)v32 + 2) = *(unsigned __int8 *)(v29 + result + 2);
      *v28 = v33;
      v28 += 4;
      result += 4;
    }
    while ((uint64_t)((int)v24 + result) <= v17);
    LODWORD(v24) = v24 + result;
    if ((int)v24 >= (int)v11)
      goto LABEL_11;
LABEL_20:
    v24 = (int)v24;
    v34 = v11 - (int)v24;
    if (v34 >= 8
      && ((unint64_t)v22 + 2 * (int)v24 >= v10 + v11 + v16 * a2
       || v23 + (int)v24 >= (unint64_t)a5 + 2 * v11 + v18 * v16))
    {
      if (v34 < 0x20)
      {
        v35 = 0;
        goto LABEL_29;
      }
      v35 = v34 & 0xFFFFFFFFFFFFFFE0;
      result = (unint64_t)v22 + 2 * (int)v24;
      v36 = (uint8x8_t *)(v21 + (int)v24);
      v37 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v38 = *(uint8x16_t *)v36[-2].i8;
        v39 = vmovl_u8(*v36);
        v40 = vmovl_high_u8(*(uint8x16_t *)v36->i8);
        *(uint16x8_t *)result = vmovl_u8(*(uint8x8_t *)v38.i8);
        *(uint16x8_t *)(result + 16) = vmovl_high_u8(v38);
        *(uint16x8_t *)(result + 32) = v39;
        *(uint16x8_t *)(result + 48) = v40;
        result += 64;
        v36 += 4;
        v37 -= 32;
      }
      while (v37);
      if (v34 == v35)
        goto LABEL_11;
      if ((v34 & 0x18) != 0)
      {
LABEL_29:
        result = v34 & 0xFFFFFFFFFFFFFFF8;
        v41 = (v34 & 0xFFFFFFFFFFFFFFF8) + (int)v24;
        v42 = v35 - (v34 & 0xFFFFFFFFFFFFFFF8);
        v43 = v35 + (int)v24;
        v44 = 2 * v43;
        do
        {
          *(uint16x8_t *)((char *)v22 + v44) = vmovl_u8(*(uint8x8_t *)(v23 + v43));
          v43 += 8;
          v44 += 16;
          v42 += 8;
        }
        while (v42);
        v24 = v41;
        if (v34 == result)
          goto LABEL_11;
        goto LABEL_34;
      }
      v24 = v35 + (int)v24;
    }
    do
    {
LABEL_34:
      result = *(unsigned __int8 *)(v23 + v24);
      v22->i16[v24++] = result;
    }
    while (v11 != v24);
    goto LABEL_11;
  }
  if ((int)v11 >= 4)
  {
    v45 = 0;
    v46 = (v11 - 4);
    v47 = v46 & 0xFFFFFFFC;
    v48 = v47 + 4;
    v49 = a6 & 0xFFFFFFFFFFFFFFFELL;
    if (v47 + 5 <= v11)
      v50 = *a7;
    else
      v50 = (v46 & 0xFFFFFFFC) + 5;
    v51 = v50 - v47 - 4;
    v52 = v46 >> 2;
    v53 = v52 * 8 + 8;
    v54 = (v46 >> 2) + 1;
    v55 = 2 * v12;
    v56 = (uint64_t)&a5[2].i64[v52 + 1];
    v57 = v47 + result + 20;
    v58 = result + v48;
    v59 = &a5->i64[v52 + 1];
    v84 = (uint64_t)a5->i64 + 2 * v50;
    v60 = result + v50;
    v61 = result + v48;
    v62 = (__int16 *)a5;
    while (1)
    {
      v63 = v13;
      v64 = v49 * v45;
      v65 = v58 + v45 * a2;
      if (v46 < 0x3C)
        break;
      if ((unint64_t)v62 < v65 && v10 < (unint64_t)a5->u64 + v53 + v64)
        break;
      v67 = v54 & 0x7FFFFFF0;
      v68 = v62;
      result = v10;
      do
      {
        v85 = vld4q_s8((const char *)result);
        result += 64;
        v86.val[0] = (int16x8_t)vmovl_high_u8((uint8x16_t)v85.val[0]);
        v86.val[1] = (int16x8_t)vmovl_high_u8((uint8x16_t)v85.val[1]);
        v86.val[2] = (int16x8_t)vmovl_high_u8((uint8x16_t)v85.val[2]);
        v86.val[3] = (int16x8_t)vmovl_high_u8((uint8x16_t)v85.val[3]);
        v87.val[0] = (int16x8_t)vmovl_u8(*(uint8x8_t *)v85.val[0].i8);
        v87.val[1] = (int16x8_t)vmovl_u8(*(uint8x8_t *)v85.val[1].i8);
        v87.val[2] = (int16x8_t)vmovl_u8(*(uint8x8_t *)v85.val[2].i8);
        v87.val[3] = (int16x8_t)vmovl_u8(*(uint8x8_t *)v85.val[3].i8);
        v69 = v68 + 64;
        vst4q_s16(v68, v87);
        v70 = v68 + 32;
        vst4q_s16(v70, v86);
        v68 = v69;
        v67 -= 16;
      }
      while (v67);
      v71 = 4 * (v54 & 0x7FFFFFF0);
      if (v54 != (v54 & 0x7FFFFFF0))
        goto LABEL_52;
LABEL_54:
      if ((int)v11 > (int)v71)
      {
        v74 = (v46 & 0xFFFFFFFC) + 4;
        if (v51 >= 8)
        {
          if ((unint64_t)&a5->u64[1] + ((2 * (v11 - 4)) & 0x1FFFFFFF8) + v64 >= v60 + v45 * a2
            || (v74 = (v46 & 0xFFFFFFFC) + 4, v65 >= v84 + v64))
          {
            if (v51 >= 0x20)
            {
              v76 = (uint8x8_t *)v57;
              result = v56;
              v77 = v51 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v78 = *(uint8x16_t *)v76[-2].i8;
                v79 = vmovl_u8(*v76);
                v80 = vmovl_high_u8(*(uint8x16_t *)v76->i8);
                *(uint16x8_t *)(result - 32) = vmovl_u8(*(uint8x8_t *)v78.i8);
                *(uint16x8_t *)(result - 16) = vmovl_high_u8(v78);
                *(uint16x8_t *)result = v79;
                *(uint16x8_t *)(result + 16) = v80;
                result += 64;
                v76 += 4;
                v77 -= 32;
              }
              while (v77);
              if (v51 == (v51 & 0xFFFFFFFFFFFFFFE0))
                goto LABEL_40;
              v75 = v51 & 0xFFFFFFFFFFFFFFE0;
              v74 = v48 + (v51 & 0xFFFFFFFFFFFFFFE0);
              if ((v51 & 0x18) != 0)
                goto LABEL_64;
            }
            else
            {
              v75 = 0;
LABEL_64:
              v81 = v75 - (v51 & 0xFFFFFFFFFFFFFFF8);
              result = v61 + v75;
              v82 = (uint16x8_t *)((char *)v59 + 2 * v75);
              do
              {
                v83 = *(uint8x8_t *)result;
                result += 8;
                *v82++ = vmovl_u8(v83);
                v81 += 8;
              }
              while (v81);
              v74 = v48 + (v51 & 0xFFFFFFFFFFFFFFF8);
              if (v51 == (v51 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_40;
            }
          }
        }
        do
        {
          v62[v74] = *(unsigned __int8 *)(v10 + v74);
          ++v74;
        }
        while (v74 < v11);
      }
LABEL_40:
      v10 += a2;
      v62 = (__int16 *)((char *)v62 + v55);
      v13 = v63 - 1;
      ++v45;
      v56 += v55;
      v57 += a2;
      v61 += a2;
      v59 = (uint64_t *)((char *)v59 + v55);
      if (!v63)
        return result;
    }
    v71 = 0;
LABEL_52:
    result = (unint64_t)&v62[v71];
    do
    {
      v72 = *(unsigned __int8 *)(v10 + v71 + 1);
      *(_WORD *)result = *(unsigned __int8 *)(v10 + v71);
      *(_WORD *)(result + 2) = v72;
      v73 = *(unsigned __int8 *)(v10 + v71 + 3);
      *(_WORD *)(result + 4) = *(unsigned __int8 *)(v10 + v71 + 2);
      *(_WORD *)(result + 6) = v73;
      v71 += 4;
      result += 8;
    }
    while (v71 <= v46);
    goto LABEL_54;
  }
  if ((int)v11 >= 1)
  {
    v14 = (unsigned __int8 *)(result + 2);
    v15 = &a5->i16[2];
    do
    {
      *(v15 - 2) = *(v14 - 2);
      if ((_DWORD)v11 != 1)
      {
        *(v15 - 1) = *(v14 - 1);
        if ((_DWORD)v11 != 2)
          *v15 = *v14;
      }
      v14 += a2;
      v15 += v12;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1001FD01C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5, unint64_t a6, int *a7)
{
  int v7;
  __int16 *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  _WORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  int16x8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int16x8_t *v23;
  int16x8_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 *v27;
  uint64_t v28;
  __int8 *v29;
  __int16 v30;
  char *v31;
  __int16 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint16x8_t *v36;
  int8x16_t *v37;
  unint64_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __int16 *v53;
  uint64_t v54;
  const char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v59;
  __int16 *v60;
  const char *v61;
  uint8x16_t v62;
  uint8x16_t v63;
  uint8x16_t v64;
  uint16x8_t v65;
  __int16 *v66;
  __int16 *v67;
  uint64_t v68;
  __int16 *v69;
  __int16 v70;
  __int16 *v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  uint16x8_t *v75;
  int8x16_t *v76;
  unint64_t v77;
  uint8x16_t v78;
  uint8x16_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int8x16x4_t v84;
  int16x8x4_t v85;

  v7 = a7[1];
  if (!v7)
    return result;
  v8 = a5;
  v9 = *a7;
  v10 = a6 >> 1;
  v11 = v9 - 4;
  if ((int)v9 >= 8)
  {
    v14 = 0;
    v15 = a6 & 0xFFFFFFFFFFFFFFFELL;
    v16 = 2 * v10;
    v17 = a5 + 3;
    v18 = result + 16;
    v19 = (int16x8_t *)a5;
    v20 = result;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = v19;
      do
      {
        v24 = vmovl_s8(*(int8x8_t *)(v20 + v22));
        *v23++ = vqmovun_high_s32(vqmovun_s32(vmovl_s16(*(int16x4_t *)v24.i8)), vmovl_high_s16(v24));
        v22 += 8;
        v21 += 0x800000000;
      }
      while (v22 <= (v9 - 8));
      if ((int)v11 >= (int)v22)
        break;
      if ((int)v22 < (int)v9)
        goto LABEL_20;
LABEL_11:
      v20 += a2;
      v19 = (int16x8_t *)((char *)v19 + v16);
      ++v14;
      v17 = (__int16 *)((char *)v17 + v16);
      v18 += a2;
      if (!--v7)
        return result;
    }
    v25 = 0;
    v26 = (int)v22;
    v27 = &v17[v26];
    v28 = v20 + (int)v22;
    v29 = &v19->i8[v26 * 2];
    do
    {
      v30 = *(char *)(v28 + v25 + 1) & (unsigned __int16)~(unsigned __int16)(*(char *)(v28 + v25 + 1) >> 31);
      *(v27 - 3) = *(char *)(v28 + v25) & (unsigned __int16)~(unsigned __int16)(*(char *)(v28 + v25) >> 31);
      v31 = &v29[2 * v25];
      *((_WORD *)v31 + 1) = v30;
      v32 = *(char *)(v28 + v25 + 3) & (unsigned __int16)~(unsigned __int16)(*(char *)(v28 + v25 + 3) >> 31);
      *((_WORD *)v31 + 2) = *(char *)(v28 + v25 + 2) & (unsigned __int16)~(unsigned __int16)(*(char *)(v28 + v25 + 2) >> 31);
      *v27 = v32;
      v27 += 4;
      v25 += 4;
    }
    while ((int)v22 + v25 <= v11);
    LODWORD(v22) = v22 + v25;
    if ((int)v22 >= (int)v9)
      goto LABEL_11;
LABEL_20:
    v33 = (int)v22;
    v34 = v9 - (int)v22;
    if (v34 >= 8
      && ((unint64_t)v19 + 2 * v33 >= result + v9 + v14 * a2 || v20 + v33 >= (unint64_t)&v8[v9]
                                                                                  + v15 * v14))
    {
      if (v34 < 0x20)
      {
        v35 = 0;
        goto LABEL_29;
      }
      v35 = v34 & 0xFFFFFFFFFFFFFFE0;
      v36 = (uint16x8_t *)((char *)v19 + 2 * v33);
      v37 = (int8x16_t *)(v18 + v33);
      v38 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v39 = (uint8x16_t)vmaxq_s8(v37[-1], (int8x16_t)0);
        v40 = (uint8x16_t)vmaxq_s8(*v37, (int8x16_t)0);
        *v36 = vmovl_u8(*(uint8x8_t *)v39.i8);
        v36[1] = vmovl_high_u8(v39);
        v36[2] = vmovl_u8(*(uint8x8_t *)v40.i8);
        v36[3] = vmovl_high_u8(v40);
        v36 += 4;
        v37 += 2;
        v38 -= 32;
      }
      while (v38);
      if (v34 == v35)
        goto LABEL_11;
      if ((v34 & 0x18) != 0)
      {
LABEL_29:
        v41 = (v34 & 0xFFFFFFFFFFFFFFF8) + v33;
        v42 = v35 - (v34 & 0xFFFFFFFFFFFFFFF8);
        v43 = v35 + v33;
        v44 = 2 * v43;
        do
        {
          *(uint16x8_t *)((char *)v19 + v44) = vmovl_u8((uint8x8_t)vmax_s8(*(int8x8_t *)(v20 + v43), 0));
          v43 += 8;
          v44 += 16;
          v42 += 8;
        }
        while (v42);
        v33 = v41;
        if (v34 == (v34 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_11;
        goto LABEL_34;
      }
      v33 += v35;
    }
    do
    {
LABEL_34:
      v19->i16[v33] = *(char *)(v20 + v33) & (unsigned __int16)~(unsigned __int16)(*(char *)(v20 + v33) >> 31);
      ++v33;
    }
    while (v9 != v33);
    goto LABEL_11;
  }
  if ((int)v9 >= 4)
  {
    v45 = 0;
    v46 = 3;
    if (v11 > 3)
      v46 = v9 - 4;
    v47 = ((v46 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    v48 = v9 - HIDWORD(v47);
    v49 = (v46 >> 2) + 1;
    v50 = v47 >> 31;
    v51 = v48 & 0xFFFFFFFFFFFFFFF8;
    v52 = 2 * v10;
    v53 = a5 + 3;
    v54 = result + 16;
    v83 = v48 & 0xFFFFFFFFFFFFFFE0;
    v55 = (const char *)result;
    while (1)
    {
      v56 = (a6 & 0xFFFFFFFFFFFFFFFELL) * v45;
      v57 = v45 * a2;
      if (v46 < 0x3C)
        break;
      if ((unint64_t)a5 < result + (unint64_t)(v46 & 0xFFFFFFFC) + 4 + v57
        && v55 < (const char *)v8 + ((2 * v46) & 0x1FFFFFFF8) + v56 + 8)
      {
        break;
      }
      v59 = v49 & 0x7FFFFFF0;
      v60 = a5;
      v61 = v55;
      do
      {
        v84 = vld4q_s8(v61);
        v61 += 64;
        v62 = (uint8x16_t)vmaxq_s8(v84.val[0], (int8x16_t)0);
        v85.val[0] = (int16x8_t)vmovl_high_u8(v62);
        v63 = (uint8x16_t)vmaxq_s8(v84.val[1], (int8x16_t)0);
        v85.val[1] = (int16x8_t)vmovl_high_u8(v63);
        v64 = (uint8x16_t)vmaxq_s8(v84.val[2], (int8x16_t)0);
        v85.val[2] = (int16x8_t)vmovl_high_u8(v64);
        v84.val[0] = vmaxq_s8(v84.val[3], (int8x16_t)0);
        v85.val[3] = (int16x8_t)vmovl_high_u8((uint8x16_t)v84.val[0]);
        v84.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v62.i8);
        v84.val[2] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v63.i8);
        v84.val[3] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v64.i8);
        v65 = vmovl_u8(*(uint8x8_t *)v84.val[0].i8);
        v66 = v60 + 64;
        vst4q_s16(v60, *(int16x8x4_t *)((char *)&v84 + 16));
        v67 = v60 + 32;
        vst4q_s16(v67, v85);
        v60 = v66;
        v59 -= 16;
      }
      while (v59);
      v68 = 4 * (v49 & 0x7FFFFFF0);
      if (v49 != (v49 & 0x7FFFFFF0))
        goto LABEL_51;
LABEL_53:
      if ((int)v9 > (int)v68)
      {
        v73 = (int)v68;
        if (v48 >= 8
          && ((unint64_t)&a5[(int)v68] >= result + v48 + v57 + (int)v68
           || &v55[(int)v68] >= (const char *)&v8[(int)v68 + v9] + v56 - v50))
        {
          if (v48 >= 0x20)
          {
            v75 = (uint16x8_t *)&a5[(int)v68];
            v76 = (int8x16_t *)(v54 + (int)v68);
            v77 = v48 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v78 = (uint8x16_t)vmaxq_s8(v76[-1], (int8x16_t)0);
              v79 = (uint8x16_t)vmaxq_s8(*v76, (int8x16_t)0);
              *v75 = vmovl_u8(*(uint8x8_t *)v78.i8);
              v75[1] = vmovl_high_u8(v78);
              v75[2] = vmovl_u8(*(uint8x8_t *)v79.i8);
              v75[3] = vmovl_high_u8(v79);
              v75 += 4;
              v76 += 2;
              v77 -= 32;
            }
            while (v77);
            if (v48 == v83)
              goto LABEL_39;
            v74 = v48 & 0xFFFFFFFFFFFFFFE0;
            if ((v48 & 0x18) != 0)
              goto LABEL_63;
            v73 = (int)v68 + v83;
          }
          else
          {
            v74 = 0;
LABEL_63:
            v80 = v74 - (v48 & 0xFFFFFFFFFFFFFFF8);
            v81 = v74 + (int)v68;
            v82 = v81;
            do
            {
              *(uint16x8_t *)&a5[v82] = vmovl_u8((uint8x8_t)vmax_s8(*(int8x8_t *)&v55[v81], 0));
              v81 += 8;
              v82 += 8;
              v80 += 8;
            }
            while (v80);
            v73 = (int)v68 + v51;
            if (v48 == v51)
              goto LABEL_39;
          }
        }
        do
        {
          a5[v73] = v55[v73] & (unsigned __int16)~(unsigned __int16)(v55[v73] >> 31);
          ++v73;
        }
        while (v9 != v73);
      }
LABEL_39:
      v55 += a2;
      a5 = (__int16 *)((char *)a5 + v52);
      ++v45;
      v53 = (__int16 *)((char *)v53 + v52);
      v54 += a2;
      if (!--v7)
        return result;
    }
    v68 = 0;
LABEL_51:
    v69 = &v53[v68];
    do
    {
      v70 = v55[v68 + 1] & (unsigned __int16)~(unsigned __int16)(v55[v68 + 1] >> 31);
      *(v69 - 3) = v55[v68] & (unsigned __int16)~(unsigned __int16)(v55[v68] >> 31);
      v71 = &a5[v68];
      v71[1] = v70;
      v72 = v55[v68 + 3] & ~(v55[v68 + 3] >> 31);
      v71[2] = v55[v68 + 2] & (unsigned __int16)~(unsigned __int16)(v55[v68 + 2] >> 31);
      *v69 = v72;
      v69 += 4;
      v68 += 4;
    }
    while (v68 <= v11);
    goto LABEL_53;
  }
  if ((int)v9 >= 1)
  {
    v12 = (char *)(result + 2);
    v13 = a5 + 2;
    do
    {
      *(v13 - 2) = *(v12 - 2) & (unsigned __int16)~(unsigned __int16)(*(v12 - 2) >> 31);
      if ((_DWORD)v9 != 1)
      {
        *(v13 - 1) = *(v12 - 1) & (unsigned __int16)~(unsigned __int16)(*(v12 - 1) >> 31);
        if ((_DWORD)v9 != 2)
          *v13 = *v12 & (unsigned __int16)~(unsigned __int16)(*v12 >> 31);
      }
      v12 += a2;
      v13 += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

char *sub_1001FD580(char *__src, unint64_t a2, int a3, int a4, char *__dst, unint64_t a6, int *a7)
{
  int v7;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = a7[1];
  if (v7)
  {
    v9 = __src;
    v10 = 2 * *a7;
    v11 = 2 * (a2 >> 1);
    v12 = 2 * (a6 >> 1);
    do
    {
      --v7;
      __src = (char *)memcpy(__dst, v9, v10);
      v9 += v11;
      __dst += v12;
    }
    while (v7);
  }
  return __src;
}

unint64_t sub_1001FD5F0(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  __int16 *v13;
  _WORD *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  _WORD *v32;
  __int16 v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int16x8_t v37;
  int16x8_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  const __int16 *v58;
  __int16 *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  BOOL v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int16x8_t v71;
  int16x8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int16x8x4_t v76;
  int16x8x4_t v77;

  v7 = a7[1];
  if (!v7)
    return result;
  v8 = result;
  v9 = *a7;
  v10 = a2 >> 1;
  v11 = a6 >> 1;
  v12 = v7 - 1;
  if ((int)v9 >= 8)
  {
    v15 = 0;
    v16 = (v9 - 4);
    v17 = a6 & 0xFFFFFFFFFFFFFFFELL;
    v18 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v19 = 2 * v11;
    v20 = 2 * v10;
    v21 = result;
    v22 = a5;
    while (1)
    {
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = v12;
      do
      {
        *(int16x8_t *)(v22 + v23) = vqmovun_high_s32(vqmovun_s32(vmovl_s16(*(int16x4_t *)(v21 + v23))), vmovl_high_s16(*(int16x8_t *)(v21 + v23)));
        v25 += 8;
        v24 += 0x800000000;
        v23 += 16;
      }
      while (v25 <= (v9 - 8));
      if ((int)v16 >= (int)v25)
      {
        v27 = 0;
        v28 = 2 * (int)v25;
        v29 = v21;
        v30 = v22;
        do
        {
          v31 = *(__int16 *)(v29 + v28 + 2) & ~(*(__int16 *)(v29 + v28 + 2) >> 31);
          v32 = (_WORD *)(v30 + v28);
          *(_WORD *)(v30 + 2 * (int)v25) = *(_WORD *)(v29 + 2 * (int)v25) & ~(*(__int16 *)(v29 + 2 * (int)v25) >> 15);
          v32[1] = v31;
          v33 = *(_WORD *)(v29 + v28 + 6) & ~(*(__int16 *)(v29 + v28 + 6) >> 15);
          v32[2] = *(_WORD *)(v29 + v28 + 4) & ~(*(__int16 *)(v29 + v28 + 4) >> 15);
          v32[3] = v33;
          v27 += 4;
          result = (int)v25 + v27;
          v30 += 8;
          v29 += 8;
        }
        while ((uint64_t)result <= v16);
        LODWORD(v25) = v25 + v27;
        if ((int)v25 < (int)v9)
        {
LABEL_20:
          v25 = (int)v25;
          v34 = v9 - (int)v25;
          if (v34 < 0x10)
            goto LABEL_54;
          v35 = 2 * (int)v25;
          if (a5 + v17 * v15 - (v8 + v18 * v15) < 0x20)
            goto LABEL_54;
          result = v34 & 0xFFFFFFFFFFFFFFF0;
          v25 = (v34 & 0xFFFFFFFFFFFFFFF0) + (int)v25;
          v36 = v34 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = vmaxq_s16(*(int16x8_t *)(v21 + v35 + 16), (int16x8_t)0);
            v38 = (int16x8_t *)(v22 + v35);
            *v38 = vmaxq_s16(*(int16x8_t *)(v21 + v35), (int16x8_t)0);
            v38[1] = v37;
            v35 += 32;
            v36 -= 16;
          }
          while (v36);
          if (v34 != result)
          {
LABEL_54:
            do
            {
              result = 2 * v25;
              *(_WORD *)(v22 + 2 * v25) = *(_WORD *)(v21 + 2 * v25) & ~(*(__int16 *)(v21 + 2 * v25) >> 15);
              ++v25;
            }
            while (v9 != v25);
          }
        }
      }
      else if ((int)v25 < (int)v9)
      {
        goto LABEL_20;
      }
      v12 = v26 - 1;
      ++v15;
      v22 += v19;
      v21 += v20;
      if (!v26)
        return result;
    }
  }
  if ((int)v9 >= 4)
  {
    v39 = 0;
    v40 = (v9 - 4);
    v41 = (2 * v40) & 0x1FFFFFFF8;
    v75 = v41 + a5 + 8;
    v42 = v41 + v8 + 8;
    v43 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v44 = (v40 & 0xFFFFFFFC) + 5;
    if (v44 <= v9)
      v44 = *a7;
    v45 = v44 - (v40 & 0xFFFFFFFC) - 4;
    v46 = 8 * (v40 >> 2) + 8;
    v74 = (v40 >> 2) + 1;
    v47 = 2 * v10;
    v48 = 2 * v11;
    v49 = a5 + 4;
    v73 = v41 + 24;
    v50 = a5;
    result = v8;
    v51 = v8;
    while (1)
    {
      v52 = v12;
      v53 = (a6 & 0xFFFFFFFFFFFFFFFELL) * v39;
      v54 = v43 * v39;
      if (v40 >= 0x1C && (v50 < v8 + v46 + v54 ? (v55 = result >= a5 + v46 + v53) : (v55 = 1), v55))
      {
        v56 = 0;
        v57 = v74 & 0x7FFFFFF8;
        do
        {
          v58 = (const __int16 *)(result + v56);
          v76 = vld4q_s16(v58);
          v77.val[0] = vmaxq_s16(v76.val[0], (int16x8_t)0);
          v77.val[1] = vmaxq_s16(v76.val[1], (int16x8_t)0);
          v77.val[2] = vmaxq_s16(v76.val[2], (int16x8_t)0);
          v77.val[3] = vmaxq_s16(v76.val[3], (int16x8_t)0);
          v59 = (__int16 *)(v50 + v56);
          vst4q_s16(v59, v77);
          v56 += 64;
          v57 -= 8;
        }
        while (v57);
        v60 = 4 * (v74 & 0x7FFFFFF8);
        if (v74 == (v74 & 0x7FFFFFF8))
          goto LABEL_44;
      }
      else
      {
        v60 = 0;
      }
      v61 = 2 * v60;
      v62 = v49;
      v63 = result;
      do
      {
        v64 = *(__int16 *)(v63 + v61 + 2) & ~(*(__int16 *)(v63 + v61 + 2) >> 31);
        v65 = v62 + v61;
        *(_WORD *)(v65 - 4) = *(_WORD *)(v63 + v61) & ~(*(__int16 *)(v63 + v61) >> 15);
        *(_WORD *)(v65 - 2) = v64;
        v66 = *(__int16 *)(v63 + v61 + 6);
        *(_WORD *)(v62 + v61) = *(_WORD *)(v63 + v61 + 4) & ~(*(__int16 *)(v63 + v61 + 4) >> 15);
        *(_WORD *)(v65 + 2) = v66 & ~(unsigned __int16)(v66 >> 31);
        v60 += 4;
        v63 += 8;
        v62 += 8;
      }
      while (v60 <= v40);
LABEL_44:
      v67 = (int)v9 <= (int)v60;
      v8 = v51;
      if (!v67)
      {
        v68 = (v40 & 0xFFFFFFFC) + 4;
        if (v45 < 0x10)
          goto LABEL_55;
        v68 = (v40 & 0xFFFFFFFC) + 4;
        if (v75 + v53 - (v42 + v54) < 0x20)
          goto LABEL_55;
        v69 = v73;
        v70 = v45 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v71 = vmaxq_s16(*(int16x8_t *)(result + v69), (int16x8_t)0);
          v72 = (int16x8_t *)(v50 + v69);
          v72[-1] = vmaxq_s16(*(int16x8_t *)(result + v69 - 16), (int16x8_t)0);
          *v72 = v71;
          v69 += 32;
          v70 -= 16;
        }
        while (v70);
        v68 = (v40 & 0xFFFFFFFC) + 4 + (v45 & 0xFFFFFFFFFFFFFFF0);
        if (v45 != (v45 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_55:
          do
          {
            *(_WORD *)(v50 + 2 * v68) = *(_WORD *)(result + 2 * v68) & ~(*(__int16 *)(result + 2 * v68) >> 15);
            ++v68;
          }
          while (v68 < v9);
        }
      }
      result += v47;
      v50 += v48;
      v12 = v52 - 1;
      ++v39;
      v49 += v48;
      if (!v52)
        return result;
    }
  }
  if ((int)v9 >= 1)
  {
    v13 = (__int16 *)(result + 4);
    v14 = (_WORD *)(a5 + 4);
    do
    {
      *(v14 - 2) = *(v13 - 2) & ~(*(v13 - 2) >> 15);
      if ((_DWORD)v9 != 1)
      {
        *(v14 - 1) = *(v13 - 1) & ~(*(v13 - 1) >> 15);
        if ((_DWORD)v9 != 2)
          *v14 = *v13 & ~(*v13 >> 15);
      }
      v13 += v10;
      v14 += v11;
      --v7;
    }
    while (v7);
  }
  return result;
}

int32x4_t *sub_1001FDA58(int32x4_t *result, unint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, unint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t *v11;
  uint64_t v12;
  int32x4_t *v13;
  int32x4_t v14;
  uint64_t v15;
  int32x4_t *v16;
  int16x8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const float *v24;
  __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int16x8_t *v30;
  int32x4_t *v31;
  unint64_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int v37;
  float32x4x4_t v38;
  float32x4x4_t v39;
  int16x8x4_t v40;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = v8 - 4;
    v10 = 2 * (a6 >> 1);
    v11 = result + 1;
    v12 = 4 * (a2 >> 2);
    v13 = result + 2;
    v14.i64[0] = 0xFFFF0000FFFFLL;
    v14.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if ((int)v8 >= 8)
      {
        v15 = 0;
        v16 = v11;
        v17 = a5;
        do
        {
          *v17++ = vqmovun_high_s32(vqmovun_s32(v16[-1]), *v16);
          v15 += 8;
          v16 += 2;
        }
        while (v15 <= (unint64_t)(v8 - 8));
        if ((int)v15 <= (int)v9)
        {
LABEL_10:
          v18 = (int)v15;
          v19 = v9 - (int)v15;
          v15 = (int)v15;
          if (v19 < 0x1C)
            goto LABEL_14;
          v20 = (v19 >> 2) + 1;
          v15 = (int)v15 + 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          v21 = v18;
          v22 = v18;
          v23 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v24 = (const float *)&result->i32[v22];
            v38 = vld4q_f32(v24);
            v24 += 16;
            v39 = vld4q_f32(v24);
            v40.val[0] = vuzp1q_s16((int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v38.val[0], (int32x4_t)0), v14), (int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v39.val[0], (int32x4_t)0), v14));
            v40.val[1] = vuzp1q_s16((int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v38.val[1], (int32x4_t)0), v14), (int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v39.val[1], (int32x4_t)0), v14));
            v40.val[2] = vuzp1q_s16((int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v38.val[2], (int32x4_t)0), v14), (int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v39.val[2], (int32x4_t)0), v14));
            v40.val[3] = vuzp1q_s16((int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v38.val[3], (int32x4_t)0), v14), (int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v39.val[3], (int32x4_t)0), v14));
            v25 = &a5->i16[v21];
            vst4q_s16(v25, v40);
            v21 += 32;
            v22 += 32;
            v23 -= 8;
          }
          while (v23);
          if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_14:
            v26 = 2 * v15;
            v27 = 4 * v15;
            do
            {
              *(int16x4_t *)&a5->i8[v26] = vmovn_s32(vminq_s32(vmaxq_s32(*(int32x4_t *)((char *)result + v27), (int32x4_t)0), v14));
              v15 += 4;
              v26 += 8;
              v27 += 16;
            }
            while (v15 <= v9);
          }
        }
      }
      else
      {
        LODWORD(v15) = 0;
        if ((int)v9 >= 0)
          goto LABEL_10;
      }
      if ((int)v15 < (int)v8)
      {
        v28 = (int)v15;
        v29 = v8 - (int)v15;
        v15 = (int)v15;
        if (v29 < 0x10)
          goto LABEL_27;
        v15 = (v29 & 0xFFFFFFFFFFFFFFF0) + (int)v15;
        v30 = (int16x8_t *)((char *)a5 + 2 * v28);
        v31 = (int32x4_t *)((char *)v13 + 4 * v28);
        v32 = v29 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v34 = v31[-2];
          v33 = v31[-1];
          v36 = *v31;
          v35 = v31[1];
          v31 += 4;
          *v30 = vuzp1q_s16((int16x8_t)vminq_s32(vmaxq_s32(v34, (int32x4_t)0), v14), (int16x8_t)vminq_s32(vmaxq_s32(v33, (int32x4_t)0), v14));
          v30[1] = vuzp1q_s16((int16x8_t)vminq_s32(vmaxq_s32(v36, (int32x4_t)0), v14), (int16x8_t)vminq_s32(vmaxq_s32(v35, (int32x4_t)0), v14));
          v30 += 2;
          v32 -= 16;
        }
        while (v32);
        if (v29 != (v29 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_27:
          do
          {
            v37 = result->i32[v15] & ~(result->i32[v15] >> 31);
            if (v37 >= 0xFFFF)
              LOWORD(v37) = -1;
            a5->i16[v15++] = v37;
          }
          while (v8 != v15);
        }
      }
      a5 = (int16x8_t *)((char *)a5 + v10);
      v11 = (int32x4_t *)((char *)v11 + v12);
      result = (int32x4_t *)((char *)result + v12);
      v13 = (int32x4_t *)((char *)v13 + v12);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1001FDC70(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, unint64_t a6, int *a7)
{
  int v7;
  float32x4_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  float v20;
  int v21;
  char v22;

  v7 = a7[1];
  if (v7)
  {
    v9 = (float32x4_t *)result;
    v10 = *a7;
    v11 = v10 - 4;
    v12 = 4 * (a2 >> 2);
    v13 = 2 * (a6 >> 1);
    do
    {
      result = sub_1002062C0((uint64_t)&v22, v9, a5, v10);
      if ((int)result <= (int)v11)
      {
        v14 = (int)result;
        v15 = 4 * (int)result + 8;
        v16 = 2 * (int)result;
        v17.i64[0] = 0xFFFF0000FFFFLL;
        v17.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          v18.i32[0] = (uint64_t)rintf(*(float *)((char *)&v9->f32[-2] + v15));
          v18.i32[1] = (uint64_t)rintf(v9->f32[v14 + 1]);
          v18.i64[1] = __PAIR64__((uint64_t)rintf(*(float *)((char *)&v9->f32[1] + v15)), (uint64_t)rintf(*(float *)((char *)v9->f32 + v15)));
          *(int16x4_t *)&a5->i8[v16] = vmovn_s32(vminq_s32(vmaxq_s32(v18, (int32x4_t)0), v17));
          v14 += 4;
          v15 += 16;
          v16 += 8;
        }
        while (v14 <= v11);
        result = v14;
      }
      if ((int)result < (int)v10)
      {
        v19 = (int)result;
        do
        {
          v20 = rintf(v9->f32[v19]);
          v21 = (uint64_t)v20 & ~((int)(uint64_t)v20 >> 31);
          if (v21 >= 0xFFFF)
            LOWORD(v21) = -1;
          a5->i16[v19++] = v21;
        }
        while (v10 != v19);
      }
      v9 = (float32x4_t *)((char *)v9 + v12);
      a5 = (int16x8_t *)((char *)a5 + v13);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1001FDDC0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, unint64_t a6, int *a7)
{
  int v7;
  float64x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  double v20;
  int v21;
  char v22;

  v7 = a7[1];
  if (v7)
  {
    v9 = (float64x2_t *)result;
    v10 = *a7;
    v11 = v10 - 4;
    v12 = 8 * (a2 >> 3);
    v13 = 2 * (a6 >> 1);
    do
    {
      result = sub_1002065F8((uint64_t)&v22, v9, a5, v10);
      if ((int)result <= (int)v11)
      {
        v14 = (int)result;
        v15 = 8 * (int)result + 16;
        v16 = 2 * (int)result;
        v17.i64[0] = 0xFFFF0000FFFFLL;
        v17.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          v18.i32[0] = (uint64_t)rint(*(double *)((char *)v9[-1].f64 + v15));
          v18.i32[1] = (uint64_t)rint(v9->f64[v14 + 1]);
          v18.i64[1] = __PAIR64__((uint64_t)rint(*(double *)((char *)&v9->f64[1] + v15)), (uint64_t)rint(*(double *)((char *)v9->f64 + v15)));
          *(int16x4_t *)&a5->i8[v16] = vmovn_s32(vminq_s32(vmaxq_s32(v18, (int32x4_t)0), v17));
          v14 += 4;
          v15 += 32;
          v16 += 8;
        }
        while (v14 <= v11);
        result = v14;
      }
      if ((int)result < (int)v10)
      {
        v19 = (int)result;
        do
        {
          v20 = rint(v9->f64[v19]);
          v21 = (uint64_t)v20 & ~((int)(uint64_t)v20 >> 31);
          if (v21 >= 0xFFFF)
            LOWORD(v21) = -1;
          a5->i16[v19++] = v21;
        }
        while (v10 != v19);
      }
      v9 = (float64x2_t *)((char *)v9 + v12);
      a5 = (int16x8_t *)((char *)a5 + v13);
      --v7;
    }
    while (v7);
  }
  return result;
}

unint64_t sub_1001FDF10(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint16x8_t *a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint16x8_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint16x8_t *v26;
  uint64_t v27;
  _WORD *v28;
  unint64_t v29;
  __int8 *v30;
  __int16 v31;
  char *v32;
  __int16 v33;
  unint64_t v34;
  unint64_t v35;
  uint8x8_t *v36;
  unint64_t v37;
  uint8x16_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  __int16 *v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v67;
  __int16 *v68;
  __int16 *v69;
  __int16 *v70;
  unint64_t v71;
  __int16 v72;
  __int16 v73;
  unint64_t v74;
  unint64_t v75;
  uint8x8_t *v76;
  unint64_t v77;
  uint8x16_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  unint64_t v81;
  uint16x8_t *v82;
  uint8x8_t v83;
  uint64_t v84;
  int8x16x4_t v85;
  int16x8x4_t v86;
  int16x8x4_t v87;

  v7 = a7[1];
  if (!v7)
    return result;
  v10 = result;
  v11 = *a7;
  v12 = a6 >> 1;
  v13 = v7 - 1;
  if ((int)v11 >= 8)
  {
    v16 = 0;
    v17 = (v11 - 4);
    v18 = a6 & 0xFFFFFFFFFFFFFFFELL;
    v19 = 2 * v12;
    v20 = (uint64_t)a5->i64 + 6;
    v21 = result + 16;
    v22 = a5;
    v23 = result;
    while (1)
    {
      result = 0;
      v24 = 0;
      v25 = v13;
      v26 = v22;
      do
      {
        *v26++ = vmovl_u8(*(uint8x8_t *)(v23 + v24));
        v24 += 8;
        result += 0x800000000;
      }
      while (v24 <= (v11 - 8));
      if ((int)v17 >= (int)v24)
        break;
      if ((int)v24 < (int)v11)
        goto LABEL_20;
LABEL_11:
      v23 += a2;
      v22 = (uint16x8_t *)((char *)v22 + v19);
      v13 = v25 - 1;
      ++v16;
      v20 += v19;
      v21 += a2;
      if (!v25)
        return result;
    }
    result = 0;
    v27 = 2 * (int)v24;
    v28 = (_WORD *)(v20 + v27);
    v29 = v23 + (int)v24;
    v30 = &v22->i8[v27];
    do
    {
      v31 = *(unsigned __int8 *)(v29 + result + 1);
      *(v28 - 3) = *(unsigned __int8 *)(v29 + result);
      v32 = &v30[2 * result];
      *((_WORD *)v32 + 1) = v31;
      v33 = *(unsigned __int8 *)(v29 + result + 3);
      *((_WORD *)v32 + 2) = *(unsigned __int8 *)(v29 + result + 2);
      *v28 = v33;
      v28 += 4;
      result += 4;
    }
    while ((uint64_t)((int)v24 + result) <= v17);
    LODWORD(v24) = v24 + result;
    if ((int)v24 >= (int)v11)
      goto LABEL_11;
LABEL_20:
    v24 = (int)v24;
    v34 = v11 - (int)v24;
    if (v34 >= 8
      && ((unint64_t)v22 + 2 * (int)v24 >= v10 + v11 + v16 * a2
       || v23 + (int)v24 >= (unint64_t)a5 + 2 * v11 + v18 * v16))
    {
      if (v34 < 0x20)
      {
        v35 = 0;
        goto LABEL_29;
      }
      v35 = v34 & 0xFFFFFFFFFFFFFFE0;
      result = (unint64_t)v22 + 2 * (int)v24;
      v36 = (uint8x8_t *)(v21 + (int)v24);
      v37 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v38 = *(uint8x16_t *)v36[-2].i8;
        v39 = vmovl_u8(*v36);
        v40 = vmovl_high_u8(*(uint8x16_t *)v36->i8);
        *(uint16x8_t *)result = vmovl_u8(*(uint8x8_t *)v38.i8);
        *(uint16x8_t *)(result + 16) = vmovl_high_u8(v38);
        *(uint16x8_t *)(result + 32) = v39;
        *(uint16x8_t *)(result + 48) = v40;
        result += 64;
        v36 += 4;
        v37 -= 32;
      }
      while (v37);
      if (v34 == v35)
        goto LABEL_11;
      if ((v34 & 0x18) != 0)
      {
LABEL_29:
        result = v34 & 0xFFFFFFFFFFFFFFF8;
        v41 = (v34 & 0xFFFFFFFFFFFFFFF8) + (int)v24;
        v42 = v35 - (v34 & 0xFFFFFFFFFFFFFFF8);
        v43 = v35 + (int)v24;
        v44 = 2 * v43;
        do
        {
          *(uint16x8_t *)((char *)v22 + v44) = vmovl_u8(*(uint8x8_t *)(v23 + v43));
          v43 += 8;
          v44 += 16;
          v42 += 8;
        }
        while (v42);
        v24 = v41;
        if (v34 == result)
          goto LABEL_11;
        goto LABEL_34;
      }
      v24 = v35 + (int)v24;
    }
    do
    {
LABEL_34:
      result = *(unsigned __int8 *)(v23 + v24);
      v22->i16[v24++] = result;
    }
    while (v11 != v24);
    goto LABEL_11;
  }
  if ((int)v11 >= 4)
  {
    v45 = 0;
    v46 = (v11 - 4);
    v47 = v46 & 0xFFFFFFFC;
    v48 = v47 + 4;
    v49 = a6 & 0xFFFFFFFFFFFFFFFELL;
    if (v47 + 5 <= v11)
      v50 = *a7;
    else
      v50 = (v46 & 0xFFFFFFFC) + 5;
    v51 = v50 - v47 - 4;
    v52 = v46 >> 2;
    v53 = v52 * 8 + 8;
    v54 = (v46 >> 2) + 1;
    v55 = 2 * v12;
    v56 = (uint64_t)&a5[2].i64[v52 + 1];
    v57 = v47 + result + 20;
    v58 = result + v48;
    v59 = &a5->i64[v52 + 1];
    v84 = (uint64_t)a5->i64 + 2 * v50;
    v60 = result + v50;
    v61 = result + v48;
    v62 = (__int16 *)a5;
    while (1)
    {
      v63 = v13;
      v64 = v49 * v45;
      v65 = v58 + v45 * a2;
      if (v46 < 0x3C)
        break;
      if ((unint64_t)v62 < v65 && v10 < (unint64_t)a5->u64 + v53 + v64)
        break;
      v67 = v54 & 0x7FFFFFF0;
      v68 = v62;
      result = v10;
      do
      {
        v85 = vld4q_s8((const char *)result);
        result += 64;
        v86.val[0] = (int16x8_t)vmovl_high_u8((uint8x16_t)v85.val[0]);
        v86.val[1] = (int16x8_t)vmovl_high_u8((uint8x16_t)v85.val[1]);
        v86.val[2] = (int16x8_t)vmovl_high_u8((uint8x16_t)v85.val[2]);
        v86.val[3] = (int16x8_t)vmovl_high_u8((uint8x16_t)v85.val[3]);
        v87.val[0] = (int16x8_t)vmovl_u8(*(uint8x8_t *)v85.val[0].i8);
        v87.val[1] = (int16x8_t)vmovl_u8(*(uint8x8_t *)v85.val[1].i8);
        v87.val[2] = (int16x8_t)vmovl_u8(*(uint8x8_t *)v85.val[2].i8);
        v87.val[3] = (int16x8_t)vmovl_u8(*(uint8x8_t *)v85.val[3].i8);
        v69 = v68 + 64;
        vst4q_s16(v68, v87);
        v70 = v68 + 32;
        vst4q_s16(v70, v86);
        v68 = v69;
        v67 -= 16;
      }
      while (v67);
      v71 = 4 * (v54 & 0x7FFFFFF0);
      if (v54 != (v54 & 0x7FFFFFF0))
        goto LABEL_52;
LABEL_54:
      if ((int)v11 > (int)v71)
      {
        v74 = (v46 & 0xFFFFFFFC) + 4;
        if (v51 >= 8)
        {
          if ((unint64_t)&a5->u64[1] + ((2 * (v11 - 4)) & 0x1FFFFFFF8) + v64 >= v60 + v45 * a2
            || (v74 = (v46 & 0xFFFFFFFC) + 4, v65 >= v84 + v64))
          {
            if (v51 >= 0x20)
            {
              v76 = (uint8x8_t *)v57;
              result = v56;
              v77 = v51 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v78 = *(uint8x16_t *)v76[-2].i8;
                v79 = vmovl_u8(*v76);
                v80 = vmovl_high_u8(*(uint8x16_t *)v76->i8);
                *(uint16x8_t *)(result - 32) = vmovl_u8(*(uint8x8_t *)v78.i8);
                *(uint16x8_t *)(result - 16) = vmovl_high_u8(v78);
                *(uint16x8_t *)result = v79;
                *(uint16x8_t *)(result + 16) = v80;
                result += 64;
                v76 += 4;
                v77 -= 32;
              }
              while (v77);
              if (v51 == (v51 & 0xFFFFFFFFFFFFFFE0))
                goto LABEL_40;
              v75 = v51 & 0xFFFFFFFFFFFFFFE0;
              v74 = v48 + (v51 & 0xFFFFFFFFFFFFFFE0);
              if ((v51 & 0x18) != 0)
                goto LABEL_64;
            }
            else
            {
              v75 = 0;
LABEL_64:
              v81 = v75 - (v51 & 0xFFFFFFFFFFFFFFF8);
              result = v61 + v75;
              v82 = (uint16x8_t *)((char *)v59 + 2 * v75);
              do
              {
                v83 = *(uint8x8_t *)result;
                result += 8;
                *v82++ = vmovl_u8(v83);
                v81 += 8;
              }
              while (v81);
              v74 = v48 + (v51 & 0xFFFFFFFFFFFFFFF8);
              if (v51 == (v51 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_40;
            }
          }
        }
        do
        {
          v62[v74] = *(unsigned __int8 *)(v10 + v74);
          ++v74;
        }
        while (v74 < v11);
      }
LABEL_40:
      v10 += a2;
      v62 = (__int16 *)((char *)v62 + v55);
      v13 = v63 - 1;
      ++v45;
      v56 += v55;
      v57 += a2;
      v61 += a2;
      v59 = (uint64_t *)((char *)v59 + v55);
      if (!v63)
        return result;
    }
    v71 = 0;
LABEL_52:
    result = (unint64_t)&v62[v71];
    do
    {
      v72 = *(unsigned __int8 *)(v10 + v71 + 1);
      *(_WORD *)result = *(unsigned __int8 *)(v10 + v71);
      *(_WORD *)(result + 2) = v72;
      v73 = *(unsigned __int8 *)(v10 + v71 + 3);
      *(_WORD *)(result + 4) = *(unsigned __int8 *)(v10 + v71 + 2);
      *(_WORD *)(result + 6) = v73;
      v71 += 4;
      result += 8;
    }
    while (v71 <= v46);
    goto LABEL_54;
  }
  if ((int)v11 >= 1)
  {
    v14 = (unsigned __int8 *)(result + 2);
    v15 = &a5->i16[2];
    do
    {
      *(v15 - 2) = *(v14 - 2);
      if ((_DWORD)v11 != 1)
      {
        *(v15 - 1) = *(v14 - 1);
        if ((_DWORD)v11 != 2)
          *v15 = *v14;
      }
      v14 += a2;
      v15 += v12;
      --v7;
    }
    while (v7);
  }
  return result;
}

unint64_t sub_1001FE428(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  char *v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int16x8_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int16x8_t *v26;
  uint64_t v27;
  _WORD *v28;
  unint64_t v29;
  __int8 *v30;
  __int16 v31;
  char *v32;
  __int16 v33;
  unint64_t v34;
  unint64_t v35;
  int8x8_t *v36;
  unint64_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int16x8_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  __int16 *v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v67;
  __int16 *v68;
  __int16 *v69;
  __int16 *v70;
  unint64_t v71;
  __int16 v72;
  __int16 v73;
  unint64_t v74;
  unint64_t v75;
  int8x8_t *v76;
  unint64_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int16x8_t v80;
  unint64_t v81;
  int16x8_t *v82;
  int8x8_t v83;
  uint64_t v84;
  int8x16x4_t v85;
  int16x8x4_t v86;
  int16x8x4_t v87;

  v7 = a7[1];
  if (!v7)
    return result;
  v10 = result;
  v11 = *a7;
  v12 = a6 >> 1;
  v13 = v7 - 1;
  if ((int)v11 >= 8)
  {
    v16 = 0;
    v17 = (v11 - 4);
    v18 = a6 & 0xFFFFFFFFFFFFFFFELL;
    v19 = 2 * v12;
    v20 = (uint64_t)a5->i64 + 6;
    v21 = result + 16;
    v22 = a5;
    v23 = result;
    while (1)
    {
      result = 0;
      v24 = 0;
      v25 = v13;
      v26 = v22;
      do
      {
        *v26++ = vmovl_s8(*(int8x8_t *)(v23 + v24));
        v24 += 8;
        result += 0x800000000;
      }
      while (v24 <= (v11 - 8));
      if ((int)v17 >= (int)v24)
        break;
      if ((int)v24 < (int)v11)
        goto LABEL_20;
LABEL_11:
      v23 += a2;
      v22 = (int16x8_t *)((char *)v22 + v19);
      v13 = v25 - 1;
      ++v16;
      v20 += v19;
      v21 += a2;
      if (!v25)
        return result;
    }
    result = 0;
    v27 = 2 * (int)v24;
    v28 = (_WORD *)(v20 + v27);
    v29 = v23 + (int)v24;
    v30 = &v22->i8[v27];
    do
    {
      v31 = *(char *)(v29 + result + 1);
      *(v28 - 3) = *(char *)(v29 + result);
      v32 = &v30[2 * result];
      *((_WORD *)v32 + 1) = v31;
      v33 = *(char *)(v29 + result + 3);
      *((_WORD *)v32 + 2) = *(char *)(v29 + result + 2);
      *v28 = v33;
      v28 += 4;
      result += 4;
    }
    while ((uint64_t)((int)v24 + result) <= v17);
    LODWORD(v24) = v24 + result;
    if ((int)v24 >= (int)v11)
      goto LABEL_11;
LABEL_20:
    v24 = (int)v24;
    v34 = v11 - (int)v24;
    if (v34 >= 8
      && ((unint64_t)v22 + 2 * (int)v24 >= v10 + v11 + v16 * a2
       || v23 + (int)v24 >= (unint64_t)a5 + 2 * v11 + v18 * v16))
    {
      if (v34 < 0x20)
      {
        v35 = 0;
        goto LABEL_29;
      }
      v35 = v34 & 0xFFFFFFFFFFFFFFE0;
      result = (unint64_t)v22 + 2 * (int)v24;
      v36 = (int8x8_t *)(v21 + (int)v24);
      v37 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v38 = *(int8x16_t *)v36[-2].i8;
        v39 = vmovl_s8(*v36);
        v40 = vmovl_high_s8(*(int8x16_t *)v36->i8);
        *(int16x8_t *)result = vmovl_s8(*(int8x8_t *)v38.i8);
        *(int16x8_t *)(result + 16) = vmovl_high_s8(v38);
        *(int16x8_t *)(result + 32) = v39;
        *(int16x8_t *)(result + 48) = v40;
        result += 64;
        v36 += 4;
        v37 -= 32;
      }
      while (v37);
      if (v34 == v35)
        goto LABEL_11;
      if ((v34 & 0x18) != 0)
      {
LABEL_29:
        result = v34 & 0xFFFFFFFFFFFFFFF8;
        v41 = (v34 & 0xFFFFFFFFFFFFFFF8) + (int)v24;
        v42 = v35 - (v34 & 0xFFFFFFFFFFFFFFF8);
        v43 = v35 + (int)v24;
        v44 = 2 * v43;
        do
        {
          *(int16x8_t *)((char *)v22 + v44) = vmovl_s8(*(int8x8_t *)(v23 + v43));
          v43 += 8;
          v44 += 16;
          v42 += 8;
        }
        while (v42);
        v24 = v41;
        if (v34 == result)
          goto LABEL_11;
        goto LABEL_34;
      }
      v24 = v35 + (int)v24;
    }
    do
    {
LABEL_34:
      result = *(char *)(v23 + v24);
      v22->i16[v24] = *(char *)(v23 + v24);
      ++v24;
    }
    while (v11 != v24);
    goto LABEL_11;
  }
  if ((int)v11 >= 4)
  {
    v45 = 0;
    v46 = (v11 - 4);
    v47 = v46 & 0xFFFFFFFC;
    v48 = v47 + 4;
    v49 = a6 & 0xFFFFFFFFFFFFFFFELL;
    if (v47 + 5 <= v11)
      v50 = *a7;
    else
      v50 = (v46 & 0xFFFFFFFC) + 5;
    v51 = v50 - v47 - 4;
    v52 = v46 >> 2;
    v53 = v52 * 8 + 8;
    v54 = (v46 >> 2) + 1;
    v55 = 2 * v12;
    v56 = (uint64_t)&a5[2].i64[v52 + 1];
    v57 = v47 + result + 20;
    v58 = result + v48;
    v59 = &a5->i64[v52 + 1];
    v84 = (uint64_t)a5->i64 + 2 * v50;
    v60 = result + v50;
    v61 = result + v48;
    v62 = (__int16 *)a5;
    while (1)
    {
      v63 = v13;
      v64 = v49 * v45;
      v65 = v58 + v45 * a2;
      if (v46 < 0x3C)
        break;
      if ((unint64_t)v62 < v65 && v10 < (unint64_t)a5->u64 + v53 + v64)
        break;
      v67 = v54 & 0x7FFFFFF0;
      v68 = v62;
      result = v10;
      do
      {
        v85 = vld4q_s8((const char *)result);
        result += 64;
        v86.val[0] = vmovl_high_s8(v85.val[0]);
        v86.val[1] = vmovl_high_s8(v85.val[1]);
        v86.val[2] = vmovl_high_s8(v85.val[2]);
        v86.val[3] = vmovl_high_s8(v85.val[3]);
        v87.val[0] = vmovl_s8(*(int8x8_t *)v85.val[0].i8);
        v87.val[1] = vmovl_s8(*(int8x8_t *)v85.val[1].i8);
        v87.val[2] = vmovl_s8(*(int8x8_t *)v85.val[2].i8);
        v87.val[3] = vmovl_s8(*(int8x8_t *)v85.val[3].i8);
        v69 = v68 + 64;
        vst4q_s16(v68, v87);
        v70 = v68 + 32;
        vst4q_s16(v70, v86);
        v68 = v69;
        v67 -= 16;
      }
      while (v67);
      v71 = 4 * (v54 & 0x7FFFFFF0);
      if (v54 != (v54 & 0x7FFFFFF0))
        goto LABEL_52;
LABEL_54:
      if ((int)v11 > (int)v71)
      {
        v74 = (v46 & 0xFFFFFFFC) + 4;
        if (v51 >= 8)
        {
          if ((unint64_t)&a5->u64[1] + ((2 * (v11 - 4)) & 0x1FFFFFFF8) + v64 >= v60 + v45 * a2
            || (v74 = (v46 & 0xFFFFFFFC) + 4, v65 >= v84 + v64))
          {
            if (v51 >= 0x20)
            {
              v76 = (int8x8_t *)v57;
              result = v56;
              v77 = v51 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v78 = *(int8x16_t *)v76[-2].i8;
                v79 = vmovl_s8(*v76);
                v80 = vmovl_high_s8(*(int8x16_t *)v76->i8);
                *(int16x8_t *)(result - 32) = vmovl_s8(*(int8x8_t *)v78.i8);
                *(int16x8_t *)(result - 16) = vmovl_high_s8(v78);
                *(int16x8_t *)result = v79;
                *(int16x8_t *)(result + 16) = v80;
                result += 64;
                v76 += 4;
                v77 -= 32;
              }
              while (v77);
              if (v51 == (v51 & 0xFFFFFFFFFFFFFFE0))
                goto LABEL_40;
              v75 = v51 & 0xFFFFFFFFFFFFFFE0;
              v74 = v48 + (v51 & 0xFFFFFFFFFFFFFFE0);
              if ((v51 & 0x18) != 0)
                goto LABEL_64;
            }
            else
            {
              v75 = 0;
LABEL_64:
              v81 = v75 - (v51 & 0xFFFFFFFFFFFFFFF8);
              result = v61 + v75;
              v82 = (int16x8_t *)((char *)v59 + 2 * v75);
              do
              {
                v83 = *(int8x8_t *)result;
                result += 8;
                *v82++ = vmovl_s8(v83);
                v81 += 8;
              }
              while (v81);
              v74 = v48 + (v51 & 0xFFFFFFFFFFFFFFF8);
              if (v51 == (v51 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_40;
            }
          }
        }
        do
        {
          v62[v74] = *(char *)(v10 + v74);
          ++v74;
        }
        while (v74 < v11);
      }
LABEL_40:
      v10 += a2;
      v62 = (__int16 *)((char *)v62 + v55);
      v13 = v63 - 1;
      ++v45;
      v56 += v55;
      v57 += a2;
      v61 += a2;
      v59 = (uint64_t *)((char *)v59 + v55);
      if (!v63)
        return result;
    }
    v71 = 0;
LABEL_52:
    result = (unint64_t)&v62[v71];
    do
    {
      v72 = *(char *)(v10 + v71 + 1);
      *(_WORD *)result = *(char *)(v10 + v71);
      *(_WORD *)(result + 2) = v72;
      v73 = *(char *)(v10 + v71 + 3);
      *(_WORD *)(result + 4) = *(char *)(v10 + v71 + 2);
      *(_WORD *)(result + 6) = v73;
      v71 += 4;
      result += 8;
    }
    while (v71 <= v46);
    goto LABEL_54;
  }
  if ((int)v11 >= 1)
  {
    v14 = (char *)(result + 2);
    v15 = &a5->i16[2];
    do
    {
      *(v15 - 2) = *(v14 - 2);
      if ((_DWORD)v11 != 1)
      {
        *(v15 - 1) = *(v14 - 1);
        if ((_DWORD)v11 != 2)
          *v15 = *v14;
      }
      v14 += a2;
      v15 += v12;
      --v7;
    }
    while (v7);
  }
  return result;
}

unint64_t sub_1001FE940(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned __int16 *v12;
  _WORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint16x8_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint16x8_t v43;
  uint16x8_t *v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint16x8_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v64;
  uint64_t v65;
  const __int16 *v66;
  __int16 *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  __int16 v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint16x8_t v82;
  uint16x8_t *v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int16x8x4_t v89;
  int16x8x4_t v90;

  v7 = a7[1];
  if (!v7)
    return result;
  v8 = *a7;
  v9 = a2 >> 1;
  v10 = a6 >> 1;
  v11 = v7 - 1;
  if ((int)v8 >= 8)
  {
    v17 = 0;
    v18 = (v8 - 4);
    v19 = a6 & 0xFFFFFFFFFFFFFFFELL;
    v20 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v21 = 2 * v10;
    v22 = 2 * v9;
    v23.i64[0] = 0x8000800080008000;
    v23.i64[1] = 0x8000800080008000;
    v24 = result;
    v25 = a5;
    while (1)
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = v11;
      do
      {
        *(int16x8_t *)(v25 + v26) = vqmovn_high_s32(vqmovn_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)(v24 + v26))), (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(v24 + v26)));
        v28 += 8;
        v27 += 0x800000000;
        v26 += 16;
      }
      while (v28 <= (v8 - 8));
      if ((int)v18 >= (int)v28)
        break;
      if ((int)v28 < (int)v8)
        goto LABEL_34;
LABEL_17:
      v11 = v29 - 1;
      ++v17;
      v25 += v21;
      v24 += v22;
      if (!v29)
        return result;
    }
    v30 = 0;
    v31 = 2 * (int)v28;
    v32 = v24;
    v33 = v25;
    do
    {
      v34 = (unsigned __int16 *)(v32 + v31);
      v35 = *(unsigned __int16 *)(v32 + 2 * (int)v28);
      if (v35 >= 0x7FFF)
        LOWORD(v35) = 0x7FFF;
      v36 = v34[1];
      if (v36 >= 0x7FFF)
        LOWORD(v36) = 0x7FFF;
      v37 = v33 + v31;
      *(_WORD *)(v33 + 2 * (int)v28) = v35;
      *(_WORD *)(v33 + v31 + 2) = v36;
      v38 = v34[2];
      if (v38 >= 0x7FFF)
        LOWORD(v38) = 0x7FFF;
      v39 = v34[3];
      if (v39 >= 0x7FFF)
        LOWORD(v39) = 0x7FFF;
      *(_WORD *)(v37 + 4) = v38;
      *(_WORD *)(v37 + 6) = v39;
      v30 += 4;
      v33 += 8;
      v32 += 8;
    }
    while ((int)v28 + v30 <= v18);
    LODWORD(v28) = v28 + v30;
    if ((int)v28 >= (int)v8)
      goto LABEL_17;
LABEL_34:
    v28 = (int)v28;
    v40 = v8 - (int)v28;
    if (v40 < 0x10)
      goto LABEL_81;
    v41 = 2 * (int)v28;
    if (a5 + v19 * v17 - (result + v20 * v17) < 0x20)
      goto LABEL_81;
    v28 = (v40 & 0xFFFFFFFFFFFFFFF0) + (int)v28;
    v42 = v40 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v43 = vminq_u16(*(uint16x8_t *)(v24 + v41 + 16), v23);
      v44 = (uint16x8_t *)(v25 + v41);
      *v44 = vminq_u16(*(uint16x8_t *)(v24 + v41), v23);
      v44[1] = v43;
      v41 += 32;
      v42 -= 16;
    }
    while (v42);
    if (v40 != (v40 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_81:
      do
      {
        v45 = *(unsigned __int16 *)(v24 + 2 * v28);
        if (v45 >= 0x7FFF)
          LOWORD(v45) = 0x7FFF;
        *(_WORD *)(v25 + 2 * v28++) = v45;
      }
      while (v8 != v28);
    }
    goto LABEL_17;
  }
  if ((int)v8 >= 4)
  {
    v46 = 0;
    v47 = (v8 - 4);
    v48 = (2 * v47) & 0x1FFFFFFF8;
    v87 = v48 + result + 8;
    v88 = v48 + a5 + 8;
    v49 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v50 = (v47 & 0xFFFFFFFC) + 5;
    if (v50 <= v8)
      v50 = *a7;
    v51 = v50 - (v47 & 0xFFFFFFFC) - 4;
    v52 = 8 * (v47 >> 2) + 8;
    v86 = (v47 >> 2) + 1;
    v53 = 2 * v9;
    v54 = 2 * v10;
    v55 = a5 + 4;
    v85 = v48 + 24;
    v56.i64[0] = 0x8000800080008000;
    v56.i64[1] = 0x8000800080008000;
    v57 = a5;
    v58 = result;
    v59 = result;
    while (1)
    {
      v60 = v11;
      v61 = (a6 & 0xFFFFFFFFFFFFFFFELL) * v46;
      v62 = v49 * v46;
      if (v47 < 0x1C)
        break;
      if (v57 < result + v52 + v62 && v58 < a5 + v52 + v61)
        break;
      v64 = 0;
      v65 = v86 & 0x7FFFFFF8;
      do
      {
        v66 = (const __int16 *)(v58 + v64);
        v89 = vld4q_s16(v66);
        v90.val[0] = (int16x8_t)vminq_u16((uint16x8_t)v89.val[0], v56);
        v90.val[1] = (int16x8_t)vminq_u16((uint16x8_t)v89.val[1], v56);
        v90.val[2] = (int16x8_t)vminq_u16((uint16x8_t)v89.val[2], v56);
        v90.val[3] = (int16x8_t)vminq_u16((uint16x8_t)v89.val[3], v56);
        v67 = (__int16 *)(v57 + v64);
        vst4q_s16(v67, v90);
        v64 += 64;
        v65 -= 8;
      }
      while (v65);
      v68 = 4 * (v86 & 0x7FFFFFF8);
      if (v86 != (v86 & 0x7FFFFFF8))
        goto LABEL_58;
LABEL_69:
      result = v59;
      if ((int)v8 > (int)v68)
      {
        v79 = (v47 & 0xFFFFFFFC) + 4;
        if (v51 < 0x10)
          goto LABEL_82;
        v79 = (v47 & 0xFFFFFFFC) + 4;
        if (v88 + v61 - (v87 + v62) < 0x20)
          goto LABEL_82;
        v80 = v85;
        v81 = v51 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v82 = vminq_u16(*(uint16x8_t *)(v58 + v80), v56);
          v83 = (uint16x8_t *)(v57 + v80);
          v83[-1] = vminq_u16(*(uint16x8_t *)(v58 + v80 - 16), v56);
          *v83 = v82;
          v80 += 32;
          v81 -= 16;
        }
        while (v81);
        v79 = (v47 & 0xFFFFFFFC) + 4 + (v51 & 0xFFFFFFFFFFFFFFF0);
        if (v51 != (v51 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_82:
          do
          {
            v84 = *(unsigned __int16 *)(v58 + 2 * v79);
            if (v84 >= 0x7FFF)
              LOWORD(v84) = 0x7FFF;
            *(_WORD *)(v57 + 2 * v79++) = v84;
          }
          while (v79 < v8);
        }
      }
      v58 += v53;
      v57 += v54;
      v11 = v60 - 1;
      ++v46;
      v55 += v54;
      if (!v60)
        return result;
    }
    v68 = 0;
LABEL_58:
    v69 = 2 * v68;
    v70 = v55;
    v71 = v58;
    do
    {
      v72 = *(unsigned __int16 *)(v71 + v69);
      if (v72 >= 0x7FFF)
        LOWORD(v72) = 0x7FFF;
      v73 = v71 + v69;
      v74 = *(unsigned __int16 *)(v71 + v69 + 2);
      if (v74 >= 0x7FFF)
        LOWORD(v74) = 0x7FFF;
      v75 = v70 + v69;
      *(_WORD *)(v75 - 4) = v72;
      *(_WORD *)(v75 - 2) = v74;
      v76 = *(unsigned __int16 *)(v73 + 4);
      if (v76 >= 0x7FFF)
        LOWORD(v76) = 0x7FFF;
      v77 = *(unsigned __int16 *)(v73 + 6);
      *(_WORD *)(v70 + v69) = v76;
      if (v77 >= 0x7FFF)
        v78 = 0x7FFF;
      else
        v78 = v77;
      *(_WORD *)(v75 + 2) = v78;
      v68 += 4;
      v71 += 8;
      v70 += 8;
    }
    while (v68 <= v47);
    goto LABEL_69;
  }
  if ((int)v8 >= 1)
  {
    v12 = (unsigned __int16 *)(result + 4);
    v13 = (_WORD *)(a5 + 4);
    do
    {
      v14 = *(v12 - 2);
      if (v14 >= 0x7FFF)
        LOWORD(v14) = 0x7FFF;
      *(v13 - 2) = v14;
      if ((_DWORD)v8 != 1)
      {
        v15 = *(v12 - 1);
        if (v15 >= 0x7FFF)
          LOWORD(v15) = 0x7FFF;
        *(v13 - 1) = v15;
        if ((_DWORD)v8 != 2)
        {
          v16 = *v12;
          if (v16 >= 0x7FFF)
            LOWORD(v16) = 0x7FFF;
          *v13 = v16;
        }
      }
      v12 += v9;
      v13 += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

int32x4_t *sub_1001FEDE8(int32x4_t *result, unint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, unint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t *v11;
  uint64_t v12;
  int32x4_t *v13;
  uint64_t v14;
  int32x4_t *v15;
  int16x8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const float *v23;
  __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int16x8_t *v29;
  int32x4_t *v30;
  unint64_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int v36;
  float32x4x4_t v37;
  float32x4x4_t v38;
  int16x8x4_t v39;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = v8 - 4;
    v10 = 2 * (a6 >> 1);
    v11 = result + 1;
    v12 = 4 * (a2 >> 2);
    v13 = result + 2;
    do
    {
      if ((int)v8 >= 8)
      {
        v14 = 0;
        v15 = v11;
        v16 = a5;
        do
        {
          *v16++ = vqmovn_high_s32(vqmovn_s32(v15[-1]), *v15);
          v14 += 8;
          v15 += 2;
        }
        while (v14 <= (unint64_t)(v8 - 8));
        if ((int)v14 <= (int)v9)
        {
LABEL_10:
          v17 = (int)v14;
          v18 = v9 - (int)v14;
          v14 = (int)v14;
          if (v18 < 0x1C)
            goto LABEL_14;
          v19 = (v18 >> 2) + 1;
          v14 = (int)v14 + 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
          v20 = v17;
          v21 = v17;
          v22 = v19 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v23 = (const float *)&result->i32[v21];
            v37 = vld4q_f32(v23);
            v23 += 16;
            v38 = vld4q_f32(v23);
            v39.val[0] = vqmovn_high_s32(vqmovn_s32((int32x4_t)v37.val[0]), (int32x4_t)v38.val[0]);
            v39.val[1] = vqmovn_high_s32(vqmovn_s32((int32x4_t)v37.val[1]), (int32x4_t)v38.val[1]);
            v39.val[2] = vqmovn_high_s32(vqmovn_s32((int32x4_t)v37.val[2]), (int32x4_t)v38.val[2]);
            v39.val[3] = vqmovn_high_s32(vqmovn_s32((int32x4_t)v37.val[3]), (int32x4_t)v38.val[3]);
            v24 = &a5->i16[v20];
            vst4q_s16(v24, v39);
            v20 += 32;
            v21 += 32;
            v22 -= 8;
          }
          while (v22);
          if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_14:
            v25 = 2 * v14;
            v26 = 4 * v14;
            do
            {
              *(int16x4_t *)&a5->i8[v25] = vqmovn_s32(*(int32x4_t *)((char *)result + v26));
              v14 += 4;
              v25 += 8;
              v26 += 16;
            }
            while (v14 <= v9);
          }
        }
      }
      else
      {
        LODWORD(v14) = 0;
        if ((int)v9 >= 0)
          goto LABEL_10;
      }
      if ((int)v14 < (int)v8)
      {
        v27 = (int)v14;
        v28 = v8 - (int)v14;
        v14 = (int)v14;
        if (v28 < 0x10)
          goto LABEL_29;
        v14 = (v28 & 0xFFFFFFFFFFFFFFF0) + (int)v14;
        v29 = (int16x8_t *)((char *)a5 + 2 * v27);
        v30 = (int32x4_t *)((char *)v13 + 4 * v27);
        v31 = v28 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v33 = v30[-2];
          v32 = v30[-1];
          v35 = *v30;
          v34 = v30[1];
          v30 += 4;
          *v29 = vqmovn_high_s32(vqmovn_s32(v33), v32);
          v29[1] = vqmovn_high_s32(vqmovn_s32(v35), v34);
          v29 += 2;
          v31 -= 16;
        }
        while (v31);
        if (v28 != (v28 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_29:
          do
          {
            v36 = result->i32[v14];
            if (v36 <= -32768)
              v36 = -32768;
            if (v36 >= 0x7FFF)
              LOWORD(v36) = 0x7FFF;
            a5->i16[v14++] = v36;
          }
          while (v8 != v14);
        }
      }
      a5 = (int16x8_t *)((char *)a5 + v10);
      v11 = (int32x4_t *)((char *)v11 + v12);
      result = (int32x4_t *)((char *)result + v12);
      v13 = (int32x4_t *)((char *)v13 + v12);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1001FEFB8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, unint64_t a6, int *a7)
{
  int v7;
  float32x4_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v7 = a7[1];
  if (v7)
  {
    v9 = (float32x4_t *)result;
    v10 = *a7;
    v11 = v10 - 4;
    v12 = 4 * (a2 >> 2);
    v13 = 2 * (a6 >> 1);
    do
    {
      result = sub_1002069A0((uint64_t)&v20, v9, a5, v10);
      if ((int)result <= (int)v11)
      {
        v14 = (int)result;
        v15 = 4 * (int)result + 8;
        v16 = 2 * (int)result;
        do
        {
          v17.i32[0] = (uint64_t)rintf(*(float *)((char *)&v9->f32[-2] + v15));
          v17.i32[1] = (uint64_t)rintf(v9->f32[v14 + 1]);
          v17.i32[2] = (uint64_t)rintf(*(float *)((char *)v9->f32 + v15));
          v17.i32[3] = (uint64_t)rintf(*(float *)((char *)&v9->f32[1] + v15));
          *(int16x4_t *)&a5->i8[v16] = vqmovn_s32(v17);
          v14 += 4;
          v15 += 16;
          v16 += 8;
        }
        while (v14 <= v11);
        result = v14;
      }
      if ((int)result < (int)v10)
      {
        v18 = (int)result;
        do
        {
          v19 = (uint64_t)rintf(v9->f32[v18]);
          if ((int)v19 <= -32768)
            LODWORD(v19) = -32768;
          if ((int)v19 >= 0x7FFF)
            LOWORD(v19) = 0x7FFF;
          a5->i16[v18++] = v19;
        }
        while (v10 != v18);
      }
      v9 = (float32x4_t *)((char *)v9 + v12);
      a5 = (int16x8_t *)((char *)a5 + v13);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1001FF108(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, unint64_t a6, int *a7)
{
  int v7;
  float64x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v7 = a7[1];
  if (v7)
  {
    v9 = (float64x2_t *)result;
    v10 = *a7;
    v11 = v10 - 4;
    v12 = 8 * (a2 >> 3);
    v13 = 2 * (a6 >> 1);
    do
    {
      result = sub_100206CD8((uint64_t)&v20, v9, a5, v10);
      if ((int)result <= (int)v11)
      {
        v14 = (int)result;
        v15 = 8 * (int)result + 16;
        v16 = 2 * (int)result;
        do
        {
          v17.i32[0] = (uint64_t)rint(*(double *)((char *)v9[-1].f64 + v15));
          v17.i32[1] = (uint64_t)rint(v9->f64[v14 + 1]);
          v17.i32[2] = (uint64_t)rint(*(double *)((char *)v9->f64 + v15));
          v17.i32[3] = (uint64_t)rint(*(double *)((char *)&v9->f64[1] + v15));
          *(int16x4_t *)&a5->i8[v16] = vqmovn_s32(v17);
          v14 += 4;
          v15 += 32;
          v16 += 8;
        }
        while (v14 <= v11);
        result = v14;
      }
      if ((int)result < (int)v10)
      {
        v18 = (int)result;
        do
        {
          v19 = (uint64_t)rint(v9->f64[v18]);
          if ((int)v19 <= -32768)
            LODWORD(v19) = -32768;
          if ((int)v19 >= 0x7FFF)
            LOWORD(v19) = 0x7FFF;
          a5->i16[v18++] = v19;
        }
        while (v10 != v18);
      }
      v9 = (float64x2_t *)((char *)v9 + v12);
      a5 = (int16x8_t *)((char *)a5 + v13);
      --v7;
    }
    while (v7);
  }
  return result;
}

unint64_t sub_1001FF258(unint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, int8x16_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, int *a12)
{
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  int8x16_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int8x16_t *v28;
  uint16x8_t v29;
  uint32x4_t v30;
  int8x16_t v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int8x16_t *v42;
  unint64_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x16_t v54;
  int8x16_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  float *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v71;
  float *v72;
  const char *v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float *v77;
  float *v78;
  float *v79;
  uint64_t v80;
  _DWORD *v81;
  int v82;
  float *v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  int8x16_t *v87;
  int8x16_t *v88;
  unint64_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int8x16_t v99;
  int8x16_t *v100;
  unint64_t v101;
  unint64_t v102;
  float32x4x4_t v103;
  float32x4x4_t v104;

  v12 = a12[1];
  if (!v12)
    return result;
  v13 = result;
  v14 = *a12;
  v15 = a11 >> 2;
  v16 = v14 - 4;
  if ((int)v14 >= 8)
  {
    v19 = 0;
    v20 = a11 & 0xFFFFFFFFFFFFFFFCLL;
    v21 = (int8x16_t *)(a10 + 16);
    v22 = 4 * v15;
    v23 = a10 + 12;
    v24 = result + 16;
    v25 = a10;
    v26 = result;
    while (1)
    {
      result = 0;
      v27 = 0;
      v28 = v21;
      do
      {
        v29 = vmovl_u8(*(uint8x8_t *)(v26 + v27));
        v30 = vmovl_u16(*(uint16x4_t *)v29.i8);
        v31 = (int8x16_t)vmovl_high_u16(v29);
        v28[-1] = (int8x16_t)v30;
        *v28 = v31;
        v27 += 8;
        result += 0x800000000;
        v28 += 2;
      }
      while (v27 <= (v14 - 8));
      if ((int)v16 >= (int)v27)
        break;
      if ((int)v27 < (int)v14)
        goto LABEL_20;
LABEL_11:
      v26 += a2;
      v25 += v22;
      ++v19;
      v21 = (int8x16_t *)((char *)v21 + v22);
      v23 += v22;
      v24 += a2;
      if (!--v12)
        return result;
    }
    result = 0;
    v32 = 4 * (int)v27;
    v33 = (_DWORD *)(v23 + v32);
    v34 = v26 + (int)v27;
    v35 = v25 + v32;
    do
    {
      v36 = *(unsigned __int8 *)(v34 + result + 1);
      *(v33 - 3) = *(unsigned __int8 *)(v34 + result);
      v37 = v35 + 4 * result;
      *(_DWORD *)(v37 + 4) = v36;
      v38 = *(unsigned __int8 *)(v34 + result + 3);
      *(_DWORD *)(v37 + 8) = *(unsigned __int8 *)(v34 + result + 2);
      *v33 = v38;
      v33 += 4;
      result += 4;
    }
    while ((uint64_t)((int)v27 + result) <= v16);
    LODWORD(v27) = v27 + result;
    if ((int)v27 >= (int)v14)
      goto LABEL_11;
LABEL_20:
    v39 = (int)v27;
    v40 = v14 - (int)v27;
    if (v40 >= 8 && (v25 + 4 * v39 >= v13 + v14 + v19 * a2 || v26 + v39 >= a10 + 4 * v14 + v20 * v19))
    {
      if (v40 < 0x20)
      {
        v41 = 0;
        goto LABEL_29;
      }
      v41 = v40 & 0xFFFFFFFFFFFFFFE0;
      result = v25 + 4 * v39;
      v42 = (int8x16_t *)(v24 + v39);
      v43 = v40 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v44 = v42[-1];
        v45 = *v42;
        v46 = vqtbl1q_s8(v44, (int8x16_t)xmmword_1003BCA90);
        v47 = vqtbl1q_s8(v44, (int8x16_t)xmmword_1003BCAA0);
        v48 = vqtbl1q_s8(*v42, (int8x16_t)xmmword_1003BCA90);
        v49 = vqtbl1q_s8(*v42, (int8x16_t)xmmword_1003BCAA0);
        *(int8x16_t *)(result + 32) = vqtbl1q_s8(v44, (int8x16_t)xmmword_1003BCAB0);
        *(int8x16_t *)(result + 48) = vqtbl1q_s8(v44, (int8x16_t)xmmword_1003BCAC0);
        v31 = vqtbl1q_s8(v45, (int8x16_t)xmmword_1003BCAB0);
        *(int8x16_t *)result = v46;
        *(int8x16_t *)(result + 16) = v47;
        *(int8x16_t *)(result + 96) = v31;
        *(int8x16_t *)(result + 112) = vqtbl1q_s8(v45, (int8x16_t)xmmword_1003BCAC0);
        *(int8x16_t *)(result + 64) = v48;
        *(int8x16_t *)(result + 80) = v49;
        result += 128;
        v42 += 2;
        v43 -= 32;
      }
      while (v43);
      if (v40 == v41)
        goto LABEL_11;
      if ((v40 & 0x18) != 0)
      {
LABEL_29:
        result = v40 & 0xFFFFFFFFFFFFFFF8;
        v50 = (v40 & 0xFFFFFFFFFFFFFFF8) + v39;
        v51 = v41 - (v40 & 0xFFFFFFFFFFFFFFF8);
        v52 = v41 + v39;
        v53 = 4 * (v41 + v39);
        do
        {
          v31.i64[0] = *(_QWORD *)(v26 + v52);
          v54 = vqtbl1q_s8(v31, (int8x16_t)xmmword_1003BCA90);
          v31 = vqtbl1q_s8(v31, (int8x16_t)xmmword_1003BCAA0);
          v55 = (int8x16_t *)(v25 + v53);
          *v55 = v54;
          v55[1] = v31;
          v52 += 8;
          v53 += 32;
          v51 += 8;
        }
        while (v51);
        v39 = v50;
        if (v40 == result)
          goto LABEL_11;
        goto LABEL_34;
      }
      v39 += v41;
    }
    do
    {
LABEL_34:
      result = *(unsigned __int8 *)(v26 + v39);
      *(_DWORD *)(v25 + 4 * v39++) = result;
    }
    while (v14 != v39);
    goto LABEL_11;
  }
  if ((int)v14 >= 4)
  {
    v56 = 0;
    v57 = 3;
    if (v16 > 3)
      v57 = v14 - 4;
    v58 = ((v57 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    v59 = HIDWORD(v58) | 1;
    if (v59 <= v14)
      v59 = *a12;
    v60 = v59 - HIDWORD(v58);
    v61 = (v57 >> 2) + 1;
    v101 = v60 & 0xFFFFFFFFFFFFFFE0;
    v102 = v58 >> 30;
    v62 = v60 & 0xFFFFFFFFFFFFFFF8;
    v63 = 4 * v15;
    v64 = a10 + 12;
    v65 = v13 + 16;
    v66 = (float *)a10;
    result = v13;
    v67 = a10;
    while (1)
    {
      v68 = (a11 & 0xFFFFFFFFFFFFFFFCLL) * v56;
      v69 = v56 * a2;
      if (v57 < 0x3C)
        break;
      if ((unint64_t)v66 < v13 + (v57 & 0xFFFFFFFC) + 4 + v69
        && result < a10 + ((4 * v57) & 0x3FFFFFFF0) + 16 + v68)
      {
        break;
      }
      v71 = v61 & 0x7FFFFFF0;
      v72 = v66;
      v73 = (const char *)result;
      do
      {
        *(int8x16x4_t *)a7.i8 = vld4q_s8(v73);
        v73 += 64;
        v103.val[0] = (float32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_1003BCAA0);
        v104.val[0] = (float32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_1003BCA90);
        v103.val[1] = (float32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_1003BCAA0);
        v104.val[1] = (float32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_1003BCA90);
        v103.val[2] = (float32x4_t)vqtbl1q_s8(v75, (int8x16_t)xmmword_1003BCAA0);
        v104.val[2] = (float32x4_t)vqtbl1q_s8(v75, (int8x16_t)xmmword_1003BCA90);
        v103.val[3] = (float32x4_t)vqtbl1q_s8(v76, (int8x16_t)xmmword_1003BCAA0);
        v104.val[3] = (float32x4_t)vqtbl1q_s8(v76, (int8x16_t)xmmword_1003BCA90);
        v77 = v72;
        vst4q_f32(v77, v104);
        v77 += 16;
        vst4q_f32(v77, v103);
        v103.val[0] = (float32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_1003BCAB0);
        v103.val[1] = (float32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_1003BCAB0);
        v103.val[2] = (float32x4_t)vqtbl1q_s8(v75, (int8x16_t)xmmword_1003BCAB0);
        v103.val[3] = (float32x4_t)vqtbl1q_s8(v76, (int8x16_t)xmmword_1003BCAB0);
        v78 = v72 + 32;
        vst4q_f32(v78, v103);
        v103.val[0] = (float32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_1003BCAC0);
        v103.val[1] = (float32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_1003BCAC0);
        v103.val[2] = (float32x4_t)vqtbl1q_s8(v75, (int8x16_t)xmmword_1003BCAC0);
        v103.val[3] = (float32x4_t)vqtbl1q_s8(v76, (int8x16_t)xmmword_1003BCAC0);
        v79 = v72 + 48;
        vst4q_f32(v79, v103);
        v72 += 64;
        v71 -= 16;
      }
      while (v71);
      v80 = 4 * (v61 & 0x7FFFFFF0);
      if (v61 != (v61 & 0x7FFFFFF0))
        goto LABEL_53;
LABEL_55:
      if ((int)v14 > (int)v80)
      {
        v85 = (int)v80;
        if (v60 >= 8
          && ((unint64_t)&v66[(int)v80] >= v13 + v60 + v69 + (int)v80
           || result + (int)v80 >= v67 + v68 - v102 + 4 * (v59 + (int)v80)))
        {
          if (v60 >= 0x20)
          {
            v87 = (int8x16_t *)&v66[(int)v80];
            v88 = (int8x16_t *)(v65 + v85);
            v89 = v60 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v90 = v88[-1];
              v91 = *v88;
              v92 = vqtbl1q_s8(v90, (int8x16_t)xmmword_1003BCA90);
              v93 = vqtbl1q_s8(v90, (int8x16_t)xmmword_1003BCAA0);
              v94 = vqtbl1q_s8(*v88, (int8x16_t)xmmword_1003BCA90);
              v95 = vqtbl1q_s8(*v88, (int8x16_t)xmmword_1003BCAA0);
              v87[2] = vqtbl1q_s8(v90, (int8x16_t)xmmword_1003BCAB0);
              v87[3] = vqtbl1q_s8(v90, (int8x16_t)xmmword_1003BCAC0);
              a7 = vqtbl1q_s8(v91, (int8x16_t)xmmword_1003BCAB0);
              *v87 = v92;
              v87[1] = v93;
              v87[6] = a7;
              v87[7] = vqtbl1q_s8(v91, (int8x16_t)xmmword_1003BCAC0);
              v87[4] = v94;
              v87[5] = v95;
              v87 += 8;
              v88 += 2;
              v89 -= 32;
            }
            while (v89);
            if (v60 == v101)
              goto LABEL_41;
            v86 = v60 & 0xFFFFFFFFFFFFFFE0;
            if ((v60 & 0x18) != 0)
              goto LABEL_65;
            v85 += v101;
          }
          else
          {
            v86 = 0;
LABEL_65:
            v96 = v86 - (v60 & 0xFFFFFFFFFFFFFFF8);
            v97 = v86 + v85;
            v98 = v97;
            do
            {
              a7.i64[0] = *(_QWORD *)(result + v97);
              v99 = vqtbl1q_s8(a7, (int8x16_t)xmmword_1003BCA90);
              a7 = vqtbl1q_s8(a7, (int8x16_t)xmmword_1003BCAA0);
              v100 = (int8x16_t *)&v66[v98];
              *v100 = v99;
              v100[1] = a7;
              v97 += 8;
              v98 += 8;
              v96 += 8;
            }
            while (v96);
            v85 += v62;
            if (v60 == v62)
              goto LABEL_41;
          }
        }
        do
        {
          LODWORD(v66[v85]) = *(unsigned __int8 *)(result + v85);
          ++v85;
        }
        while (v85 < v14);
      }
LABEL_41:
      result += a2;
      v66 = (float *)((char *)v66 + v63);
      ++v56;
      v64 += v63;
      v65 += a2;
      --v12;
      a10 = v67;
      if (!v12)
        return result;
    }
    v80 = 0;
LABEL_53:
    v81 = (_DWORD *)(v64 + 4 * v80);
    do
    {
      v82 = *(unsigned __int8 *)(result + v80 + 1);
      *(v81 - 3) = *(unsigned __int8 *)(result + v80);
      v83 = &v66[v80];
      *((_DWORD *)v83 + 1) = v82;
      v84 = *(unsigned __int8 *)(result + v80 + 3);
      *((_DWORD *)v83 + 2) = *(unsigned __int8 *)(result + v80 + 2);
      *v81 = v84;
      v81 += 4;
      v80 += 4;
    }
    while (v80 <= v16);
    goto LABEL_55;
  }
  if ((int)v14 >= 1)
  {
    v17 = (unsigned __int8 *)(result + 2);
    v18 = (_DWORD *)(a10 + 8);
    do
    {
      *(v18 - 2) = *(v17 - 2);
      if ((_DWORD)v14 != 1)
      {
        *(v18 - 1) = *(v17 - 1);
        if ((_DWORD)v14 != 2)
          *v18 = *v17;
      }
      v17 += a2;
      v18 += v15;
      --v12;
    }
    while (v12);
  }
  return result;
}

const char *sub_1001FF828(const char *result, uint64_t a2, uint64_t a3, uint64_t a4, int32x4_t *a5, unint64_t a6, int *a7)
{
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int32 *v12;
  uint64_t v13;
  unint64_t v14;
  int32x4_t *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int32x4_t *v19;
  const char *v20;
  unint64_t v21;
  int32x4_t *v22;
  int16x8_t v23;
  uint64_t v24;
  _DWORD *v25;
  const char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  int32x4_t *v33;
  int8x8_t *v34;
  unint64_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  int16x8_t v45;
  int32x4_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  float *v57;
  int32x4_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v62;
  float *v63;
  const char *v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  float *v72;
  float *v73;
  int32x4_t v74;
  float *v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  float *v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  int32x4_t *v83;
  int8x8_t *v84;
  unint64_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int16x8_t v95;
  int32x4_t *v96;
  unint64_t v97;
  unint64_t v98;
  int8x16x4_t v99;
  float32x4x4_t v100;
  float32x4x4_t v101;

  v7 = a7[1];
  if (!v7)
    return result;
  v8 = result;
  v9 = *a7;
  result = (const char *)(a6 >> 2);
  v10 = v9 - 4;
  if ((int)v9 >= 8)
  {
    v13 = 0;
    v14 = a6 & 0xFFFFFFFFFFFFFFFCLL;
    v15 = a5 + 1;
    v16 = 4 * (_QWORD)result;
    v17 = (uint64_t)&a5->i64[1] + 4;
    v18 = v8 + 16;
    v19 = a5;
    v20 = v8;
    while (1)
    {
      result = 0;
      v21 = 0;
      v22 = v15;
      do
      {
        v23 = vmovl_s8(*(int8x8_t *)&v20[v21]);
        v22[-1] = vmovl_s16(*(int16x4_t *)v23.i8);
        *v22 = vmovl_high_s16(v23);
        v21 += 8;
        result += 0x800000000;
        v22 += 2;
      }
      while (v21 <= (v9 - 8));
      if ((int)v10 >= (int)v21)
        break;
      if ((int)v21 < (int)v9)
        goto LABEL_20;
LABEL_11:
      v20 += a2;
      v19 = (int32x4_t *)((char *)v19 + v16);
      ++v13;
      v15 = (int32x4_t *)((char *)v15 + v16);
      v17 += v16;
      v18 += a2;
      if (!--v7)
        return result;
    }
    result = 0;
    v24 = 4 * (int)v21;
    v25 = (_DWORD *)(v17 + v24);
    v26 = &v20[(int)v21];
    v27 = (uint64_t)v19->i64 + v24;
    do
    {
      v28 = result[(_QWORD)v26 + 1];
      *(v25 - 3) = result[(_QWORD)v26];
      v29 = v27 + 4 * (_QWORD)result;
      *(_DWORD *)(v29 + 4) = v28;
      v30 = result[(_QWORD)v26 + 3];
      *(_DWORD *)(v29 + 8) = result[(_QWORD)v26 + 2];
      *v25 = v30;
      v25 += 4;
      result += 4;
    }
    while ((uint64_t)&result[(int)v21] <= v10);
    LODWORD(v21) = v21 + (_DWORD)result;
    if ((int)v21 >= (int)v9)
      goto LABEL_11;
LABEL_20:
    v31 = (int)v21;
    v32 = v9 - (int)v21;
    if (v32 >= 8 && ((char *)v19 + 4 * v31 >= &v8[v9 + v13 * a2] || &v20[v31] >= &a5->i8[4 * v9 + v14 * v13]))
    {
      if (v32 < 0x20)
      {
        result = 0;
        goto LABEL_29;
      }
      result = (const char *)(v32 & 0xFFFFFFFFFFFFFFE0);
      v33 = (int32x4_t *)((char *)v19 + 4 * v31);
      v34 = (int8x8_t *)&v18[v31];
      v35 = v32 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v36 = *(int8x16_t *)v34[-2].i8;
        v37 = *(int8x16_t *)v34->i8;
        v38 = vmovl_s8(*(int8x8_t *)v36.i8);
        v39 = vmovl_high_s8(v36);
        v40 = vmovl_s8(*v34);
        v33[2] = vmovl_s16(*(int16x4_t *)v39.i8);
        v33[3] = vmovl_high_s16(v39);
        v41 = vmovl_high_s8(v37);
        *v33 = vmovl_s16(*(int16x4_t *)v38.i8);
        v33[1] = vmovl_high_s16(v38);
        v33[6] = vmovl_s16(*(int16x4_t *)v41.i8);
        v33[7] = vmovl_high_s16(v41);
        v33[4] = vmovl_s16(*(int16x4_t *)v40.i8);
        v33[5] = vmovl_high_s16(v40);
        v33 += 8;
        v34 += 4;
        v35 -= 32;
      }
      while (v35);
      if ((const char *)v32 == result)
        goto LABEL_11;
      if ((v32 & 0x18) != 0)
      {
LABEL_29:
        v42 = (v32 & 0xFFFFFFFFFFFFFFF8) + v31;
        v43 = &result[-(v32 & 0xFFFFFFFFFFFFFFF8)];
        result += v31;
        v44 = 4 * (_QWORD)result;
        do
        {
          v45 = vmovl_s8(*(int8x8_t *)&result[(_QWORD)v20]);
          v46 = (int32x4_t *)((char *)v19 + v44);
          *v46 = vmovl_s16(*(int16x4_t *)v45.i8);
          v46[1] = vmovl_high_s16(v45);
          result += 8;
          v44 += 32;
          v43 += 8;
        }
        while (v43);
        v31 = v42;
        if (v32 == (v32 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_11;
        goto LABEL_34;
      }
      v31 += (uint64_t)result;
    }
    do
    {
LABEL_34:
      result = (const char *)v20[v31];
      v19->i32[v31++] = (int)result;
    }
    while (v9 != v31);
    goto LABEL_11;
  }
  if ((int)v9 >= 4)
  {
    v47 = 0;
    v48 = 3;
    if (v10 > 3)
      v48 = v9 - 4;
    v49 = ((v48 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    v50 = HIDWORD(v49) | 1;
    if (v50 <= v9)
      v50 = *a7;
    v51 = v50 - HIDWORD(v49);
    v52 = (v48 >> 2) + 1;
    v97 = v51 & 0xFFFFFFFFFFFFFFE0;
    v98 = v49 >> 30;
    v53 = v51 & 0xFFFFFFFFFFFFFFF8;
    v54 = 4 * (_QWORD)result;
    v55 = (uint64_t)&a5->i64[1] + 4;
    v56 = v8 + 16;
    v57 = (float *)a5;
    result = v8;
    v58 = a5;
    while (1)
    {
      v59 = (a6 & 0xFFFFFFFFFFFFFFFCLL) * v47;
      v60 = v47 * a2;
      if (v48 < 0x3C)
        break;
      if (v57 < (float *)&v8[(v48 & 0xFFFFFFFC) + 4 + v60]
        && result < &a5[1].i8[((4 * v48) & 0x3FFFFFFF0) + v59])
      {
        break;
      }
      v62 = v52 & 0x7FFFFFF0;
      v63 = v57;
      v64 = result;
      do
      {
        v99 = vld4q_s8(v64);
        v64 += 64;
        v65 = vmovl_high_s8(v99.val[0]);
        v66 = vmovl_high_s8(v99.val[1]);
        v67 = vmovl_high_s8(v99.val[2]);
        v68 = vmovl_s8(*(int8x8_t *)v99.val[0].i8);
        v100.val[0] = (float32x4_t)vmovl_high_s16(v68);
        v69 = vmovl_s8(*(int8x8_t *)v99.val[1].i8);
        v100.val[1] = (float32x4_t)vmovl_high_s16(v69);
        v70 = vmovl_s8(*(int8x8_t *)v99.val[2].i8);
        v100.val[2] = (float32x4_t)vmovl_high_s16(v70);
        v71 = vmovl_s8(*(int8x8_t *)v99.val[3].i8);
        v100.val[3] = (float32x4_t)vmovl_high_s16(v71);
        v101.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v68.i8);
        v101.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v69.i8);
        v101.val[2] = (float32x4_t)vmovl_s16(*(int16x4_t *)v70.i8);
        v101.val[3] = (float32x4_t)vmovl_s16(*(int16x4_t *)v71.i8);
        v72 = v63;
        vst4q_f32(v72, v101);
        v72 += 16;
        vst4q_f32(v72, v100);
        v99.val[0] = (int8x16_t)vmovl_high_s8(v99.val[3]);
        v100.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v65.i8);
        v100.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v66.i8);
        v100.val[2] = (float32x4_t)vmovl_s16(*(int16x4_t *)v67.i8);
        v100.val[3] = (float32x4_t)vmovl_s16(*(int16x4_t *)v99.val[0].i8);
        v73 = v63 + 32;
        vst4q_f32(v73, v100);
        v99.val[1] = (int8x16_t)vmovl_high_s16(v65);
        v99.val[2] = (int8x16_t)vmovl_high_s16(v66);
        v99.val[3] = (int8x16_t)vmovl_high_s16(v67);
        v74 = vmovl_high_s16((int16x8_t)v99.val[0]);
        v75 = v63 + 48;
        vst4q_f32(v75, *(float32x4x4_t *)((char *)&v99 + 16));
        v63 += 64;
        v62 -= 16;
      }
      while (v62);
      v76 = 4 * (v52 & 0x7FFFFFF0);
      if (v52 != (v52 & 0x7FFFFFF0))
        goto LABEL_53;
LABEL_55:
      if ((int)v9 > (int)v76)
      {
        v81 = (int)v76;
        if (v51 >= 8
          && (&v57[(int)v76] >= (float *)&v8[v51 + v60 + (int)v76]
           || &result[(int)v76] >= &v58->i8[4 * v50 + 4 * (int)v76 + v59 - v98]))
        {
          if (v51 >= 0x20)
          {
            v83 = (int32x4_t *)&v57[(int)v76];
            v84 = (int8x8_t *)&v56[v81];
            v85 = v51 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v86 = *(int8x16_t *)v84[-2].i8;
              v87 = *(int8x16_t *)v84->i8;
              v88 = vmovl_s8(*(int8x8_t *)v86.i8);
              v89 = vmovl_high_s8(v86);
              v90 = vmovl_s8(*v84);
              v83[2] = vmovl_s16(*(int16x4_t *)v89.i8);
              v83[3] = vmovl_high_s16(v89);
              v91 = vmovl_high_s8(v87);
              *v83 = vmovl_s16(*(int16x4_t *)v88.i8);
              v83[1] = vmovl_high_s16(v88);
              v83[6] = vmovl_s16(*(int16x4_t *)v91.i8);
              v83[7] = vmovl_high_s16(v91);
              v83[4] = vmovl_s16(*(int16x4_t *)v90.i8);
              v83[5] = vmovl_high_s16(v90);
              v83 += 8;
              v84 += 4;
              v85 -= 32;
            }
            while (v85);
            if (v51 == v97)
              goto LABEL_41;
            v82 = v51 & 0xFFFFFFFFFFFFFFE0;
            if ((v51 & 0x18) != 0)
              goto LABEL_65;
            v81 += v97;
          }
          else
          {
            v82 = 0;
LABEL_65:
            v92 = v82 - (v51 & 0xFFFFFFFFFFFFFFF8);
            v93 = v82 + v81;
            v94 = v93;
            do
            {
              v95 = vmovl_s8(*(int8x8_t *)&result[v93]);
              v96 = (int32x4_t *)&v57[v94];
              *v96 = vmovl_s16(*(int16x4_t *)v95.i8);
              v96[1] = vmovl_high_s16(v95);
              v93 += 8;
              v94 += 8;
              v92 += 8;
            }
            while (v92);
            v81 += v53;
            if (v51 == v53)
              goto LABEL_41;
          }
        }
        do
        {
          LODWORD(v57[v81]) = result[v81];
          ++v81;
        }
        while (v81 < v9);
      }
LABEL_41:
      result += a2;
      v57 = (float *)((char *)v57 + v54);
      ++v47;
      v55 += v54;
      v56 += a2;
      --v7;
      a5 = v58;
      if (!v7)
        return result;
    }
    v76 = 0;
LABEL_53:
    v77 = (_DWORD *)(v55 + 4 * v76);
    do
    {
      v78 = result[v76 + 1];
      *(v77 - 3) = result[v76];
      v79 = &v57[v76];
      *((_DWORD *)v79 + 1) = v78;
      v80 = result[v76 + 3];
      *((_DWORD *)v79 + 2) = result[v76 + 2];
      *v77 = v80;
      v77 += 4;
      v76 += 4;
    }
    while (v76 <= v10);
    goto LABEL_55;
  }
  if ((int)v9 >= 1)
  {
    v11 = (char *)(v8 + 2);
    v12 = &a5->i32[2];
    do
    {
      *(v12 - 2) = *(v11 - 2);
      if ((_DWORD)v9 != 1)
      {
        *(v12 - 1) = *(v11 - 1);
        if ((_DWORD)v9 != 2)
          *v12 = *v11;
      }
      v11 += a2;
      v12 += (uint64_t)result;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint16x8_t *sub_1001FFE00(uint16x8_t *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  _DWORD *v13;
  uint32x4_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint16x8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint16x8_t *v20;
  uint32x4_t *v21;
  uint16x8_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint32x4_t *v28;
  uint16x4_t *v29;
  unint64_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint16x4_t *v43;
  uint32x4_t *v44;
  uint16x4_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint16x8_t *v49;
  uint16x8_t v50;
  uint32x4_t v51;
  uint32x4_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint32x4_t *v56;
  uint16x8_t *v57;
  uint16x4_t *v58;
  unint64_t v59;
  float *v60;
  const __int16 *v61;
  float *v62;
  float *v63;
  uint64_t v64;
  uint16x4_t *v65;
  uint32x4_t *v66;
  uint16x4_t v67;
  uint64_t v68;
  uint32x4_t *v69;
  unint64_t v70;
  uint16x4_t *v71;
  uint16x8_t v72;
  uint32x4_t v73;
  uint32x4_t v74;
  int16x8x4_t v75;
  float32x4x4_t v76;
  float32x4x4_t v77;

  v7 = a7[1];
  if (!v7)
    return result;
  v8 = *a7;
  v9 = a2 >> 1;
  v10 = a6 >> 2;
  v11 = v8 - 4;
  if ((int)v8 >= 8)
  {
    v14 = (uint32x4_t *)(a5 + 16);
    v15 = 4 * v10;
    v16 = 2 * v9;
    v17 = result + 1;
    while (1)
    {
      v18 = 0;
      v19 = 0;
      v20 = result;
      v21 = v14;
      do
      {
        v22 = *v20++;
        v21[-1] = vmovl_u16(*(uint16x4_t *)v22.i8);
        *v21 = vmovl_high_u16(v22);
        v19 += 8;
        v18 += 0x800000000;
        v21 += 2;
      }
      while (v19 <= (v8 - 8));
      if ((int)v11 >= (int)v19)
      {
        v23 = 0;
        v24 = 4 * (int)v19;
        v25 = 2 * (int)v19;
        do
        {
          *(uint32x4_t *)(a5 + v24) = vmovl_u16(*(uint16x4_t *)&result->i8[v25]);
          v23 += 4;
          v24 += 16;
          v25 += 8;
        }
        while ((int)v19 + v23 <= v11);
        LODWORD(v19) = v19 + v23;
        if ((int)v19 < (int)v8)
        {
LABEL_20:
          v26 = (int)v19;
          v27 = v8 - (int)v19;
          v19 = (int)v19;
          if (v27 < 0x10)
            goto LABEL_59;
          v19 = (v27 & 0xFFFFFFFFFFFFFFF0) + (int)v19;
          v28 = (uint32x4_t *)(a5 + 4 * v26);
          v29 = (uint16x4_t *)((char *)v17 + 2 * v26);
          v30 = v27 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v31 = *(uint16x8_t *)v29[-2].i8;
            v32 = vmovl_u16(*v29);
            v33 = vmovl_high_u16(*(uint16x8_t *)v29->i8);
            *v28 = vmovl_u16(*(uint16x4_t *)v31.i8);
            v28[1] = vmovl_high_u16(v31);
            v28[2] = v32;
            v28[3] = v33;
            v28 += 4;
            v29 += 4;
            v30 -= 16;
          }
          while (v30);
          if (v27 != (v27 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_59:
            do
            {
              *(_DWORD *)(a5 + 4 * v19) = result->u16[v19];
              ++v19;
            }
            while (v8 != v19);
          }
        }
      }
      else if ((int)v19 < (int)v8)
      {
        goto LABEL_20;
      }
      v14 = (uint32x4_t *)((char *)v14 + v15);
      result = (uint16x8_t *)((char *)result + v16);
      a5 += v15;
      v17 = (uint16x8_t *)((char *)v17 + v16);
      if (!--v7)
        return result;
    }
  }
  if ((int)v8 >= 4)
  {
    if (v11 <= 3)
      v34 = 3;
    else
      v34 = v8 - 4;
    v35 = (((v34 << 32) & 0x7FFFFFFC00000000) + 0x400000000) >> 32;
    v36 = v35 | 1;
    if ((uint64_t)(v35 | 1) <= v8)
      v36 = *a7;
    v37 = v36 - v35;
    v38 = v37 & 0xFFFFFFFFFFFFFFF0;
    if (v34 >= 0x1C)
    {
      v53 = (v34 >> 2) + 1;
      v54 = 2 * v9;
      v55 = 4 * v10;
      v56 = (uint32x4_t *)(a5 + (v53 >> 3 << 7));
      v57 = result + 1;
      v58 = (uint16x4_t *)&result[4 * (v53 >> 3)];
      do
      {
        v59 = v53 & 0x7FFFFFF8;
        v60 = (float *)a5;
        v61 = (const __int16 *)result;
        do
        {
          v75 = vld4q_s16(v61);
          v61 += 32;
          v76.val[0] = (float32x4_t)vmovl_high_u16((uint16x8_t)v75.val[0]);
          v76.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v75.val[1]);
          v76.val[2] = (float32x4_t)vmovl_high_u16((uint16x8_t)v75.val[2]);
          v76.val[3] = (float32x4_t)vmovl_high_u16((uint16x8_t)v75.val[3]);
          v77.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v75.val[0].i8);
          v77.val[1] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v75.val[1].i8);
          v77.val[2] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v75.val[2].i8);
          v77.val[3] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v75.val[3].i8);
          v62 = v60 + 32;
          vst4q_f32(v60, v77);
          v63 = v60 + 16;
          vst4q_f32(v63, v76);
          v60 = v62;
          v59 -= 8;
        }
        while (v59);
        LODWORD(v64) = 4 * (v53 & 0x7FFFFFF8);
        if (v53 != (v53 & 0x7FFFFFF8))
        {
          v65 = v58;
          v66 = v56;
          v64 = 4 * (v53 & 0x7FFFFFF8);
          do
          {
            v67 = *v65++;
            *v66++ = vmovl_u16(v67);
            v64 += 4;
          }
          while (v64 <= v11);
        }
        if ((int)v8 > (int)v64)
        {
          v68 = (int)v64;
          v64 = (int)v64;
          if (v37 < 0x10)
            goto LABEL_60;
          v64 = (int)v64 + v38;
          v69 = (uint32x4_t *)(a5 + 4 * v68);
          v70 = v37 & 0xFFFFFFFFFFFFFFF0;
          v71 = (uint16x4_t *)((char *)v57 + 2 * v68);
          do
          {
            v72 = *(uint16x8_t *)v71[-2].i8;
            v73 = vmovl_u16(*v71);
            v74 = vmovl_high_u16(*(uint16x8_t *)v71->i8);
            *v69 = vmovl_u16(*(uint16x4_t *)v72.i8);
            v69[1] = vmovl_high_u16(v72);
            v69[2] = v73;
            v69[3] = v74;
            v69 += 4;
            v71 += 4;
            v70 -= 16;
          }
          while (v70);
          if (v37 != v38)
          {
LABEL_60:
            do
            {
              *(_DWORD *)(a5 + 4 * v64) = result->u16[v64];
              ++v64;
            }
            while (v64 < v8);
          }
        }
        result = (uint16x8_t *)((char *)result + v54);
        a5 += v55;
        v56 = (uint32x4_t *)((char *)v56 + v55);
        v58 = (uint16x4_t *)((char *)v58 + v54);
        v57 = (uint16x8_t *)((char *)v57 + v54);
        --v7;
      }
      while (v7);
    }
    else
    {
      v39 = 4 * v10;
      v40 = 2 * v9;
      do
      {
        v41 = 0;
        v42 = 0;
        v43 = (uint16x4_t *)result;
        v44 = (uint32x4_t *)a5;
        do
        {
          v45 = *v43++;
          *v44++ = vmovl_u16(v45);
          v42 += 4;
          v41 += 0x400000000;
        }
        while (v42 <= v11);
        if ((int)v8 > (int)v42)
        {
          v46 = v41 >> 32;
          v47 = v41 >> 32;
          if (v37 < 0x10)
            goto LABEL_61;
          v48 = 0;
          v47 = v46 + v38;
          do
          {
            v49 = (uint16x8_t *)((char *)result + 2 * v46 + 2 * v48);
            v50 = v49[1];
            v51 = vmovl_high_u16(*v49);
            v52 = (uint32x4_t *)(a5 + 4 * (v46 + v48));
            *v52 = vmovl_u16(*(uint16x4_t *)v49->i8);
            v52[1] = v51;
            v52[2] = vmovl_u16(*(uint16x4_t *)v50.i8);
            v52[3] = vmovl_high_u16(v50);
            v48 += 16;
          }
          while (v38 != v48);
          if (v37 != v38)
          {
LABEL_61:
            do
            {
              *(_DWORD *)(a5 + 4 * v47) = result->u16[v47];
              ++v47;
            }
            while (v47 < v8);
          }
        }
        result = (uint16x8_t *)((char *)result + v40);
        a5 += v39;
        --v7;
      }
      while (v7);
    }
  }
  else if ((int)v8 >= 1)
  {
    v12 = &result->u16[2];
    v13 = (_DWORD *)(a5 + 8);
    do
    {
      *(v13 - 2) = *(v12 - 2);
      if ((_DWORD)v8 != 1)
      {
        *(v13 - 1) = *(v12 - 1);
        if ((_DWORD)v8 != 2)
          *v13 = *v12;
      }
      v12 += v9;
      v13 += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

int16x8_t *sub_1002001E8(int16x8_t *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int16 *v12;
  _DWORD *v13;
  int32x4_t *v14;
  uint64_t v15;
  uint64_t v16;
  int16x8_t *v17;
  uint64_t v18;
  unint64_t v19;
  int16x8_t *v20;
  int32x4_t *v21;
  int16x8_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int32x4_t *v28;
  int16x4_t *v29;
  unint64_t v30;
  int16x8_t v31;
  int32x4_t v32;
  int32x4_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int16x4_t *v43;
  int32x4_t *v44;
  int16x4_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int16x8_t *v49;
  int16x8_t v50;
  int32x4_t v51;
  int32x4_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int32x4_t *v56;
  int16x8_t *v57;
  int16x4_t *v58;
  unint64_t v59;
  float *v60;
  const __int16 *v61;
  float *v62;
  float *v63;
  uint64_t v64;
  int16x4_t *v65;
  int32x4_t *v66;
  int16x4_t v67;
  uint64_t v68;
  int32x4_t *v69;
  unint64_t v70;
  int16x4_t *v71;
  int16x8_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int16x8x4_t v75;
  float32x4x4_t v76;
  float32x4x4_t v77;

  v7 = a7[1];
  if (!v7)
    return result;
  v8 = *a7;
  v9 = a2 >> 1;
  v10 = a6 >> 2;
  v11 = v8 - 4;
  if ((int)v8 >= 8)
  {
    v14 = (int32x4_t *)(a5 + 16);
    v15 = 4 * v10;
    v16 = 2 * v9;
    v17 = result + 1;
    while (1)
    {
      v18 = 0;
      v19 = 0;
      v20 = result;
      v21 = v14;
      do
      {
        v22 = *v20++;
        v21[-1] = vmovl_s16(*(int16x4_t *)v22.i8);
        *v21 = vmovl_high_s16(v22);
        v19 += 8;
        v18 += 0x800000000;
        v21 += 2;
      }
      while (v19 <= (v8 - 8));
      if ((int)v11 >= (int)v19)
      {
        v23 = 0;
        v24 = 4 * (int)v19;
        v25 = 2 * (int)v19;
        do
        {
          *(int32x4_t *)(a5 + v24) = vmovl_s16(*(int16x4_t *)&result->i8[v25]);
          v23 += 4;
          v24 += 16;
          v25 += 8;
        }
        while ((int)v19 + v23 <= v11);
        LODWORD(v19) = v19 + v23;
        if ((int)v19 < (int)v8)
        {
LABEL_20:
          v26 = (int)v19;
          v27 = v8 - (int)v19;
          v19 = (int)v19;
          if (v27 < 0x10)
            goto LABEL_59;
          v19 = (v27 & 0xFFFFFFFFFFFFFFF0) + (int)v19;
          v28 = (int32x4_t *)(a5 + 4 * v26);
          v29 = (int16x4_t *)((char *)v17 + 2 * v26);
          v30 = v27 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v31 = *(int16x8_t *)v29[-2].i8;
            v32 = vmovl_s16(*v29);
            v33 = vmovl_high_s16(*(int16x8_t *)v29->i8);
            *v28 = vmovl_s16(*(int16x4_t *)v31.i8);
            v28[1] = vmovl_high_s16(v31);
            v28[2] = v32;
            v28[3] = v33;
            v28 += 4;
            v29 += 4;
            v30 -= 16;
          }
          while (v30);
          if (v27 != (v27 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_59:
            do
            {
              *(_DWORD *)(a5 + 4 * v19) = result->i16[v19];
              ++v19;
            }
            while (v8 != v19);
          }
        }
      }
      else if ((int)v19 < (int)v8)
      {
        goto LABEL_20;
      }
      v14 = (int32x4_t *)((char *)v14 + v15);
      result = (int16x8_t *)((char *)result + v16);
      a5 += v15;
      v17 = (int16x8_t *)((char *)v17 + v16);
      if (!--v7)
        return result;
    }
  }
  if ((int)v8 >= 4)
  {
    if (v11 <= 3)
      v34 = 3;
    else
      v34 = v8 - 4;
    v35 = (((v34 << 32) & 0x7FFFFFFC00000000) + 0x400000000) >> 32;
    v36 = v35 | 1;
    if ((uint64_t)(v35 | 1) <= v8)
      v36 = *a7;
    v37 = v36 - v35;
    v38 = v37 & 0xFFFFFFFFFFFFFFF0;
    if (v34 >= 0x1C)
    {
      v53 = (v34 >> 2) + 1;
      v54 = 2 * v9;
      v55 = 4 * v10;
      v56 = (int32x4_t *)(a5 + (v53 >> 3 << 7));
      v57 = result + 1;
      v58 = (int16x4_t *)&result[4 * (v53 >> 3)];
      do
      {
        v59 = v53 & 0x7FFFFFF8;
        v60 = (float *)a5;
        v61 = (const __int16 *)result;
        do
        {
          v75 = vld4q_s16(v61);
          v61 += 32;
          v76.val[0] = (float32x4_t)vmovl_high_s16(v75.val[0]);
          v76.val[1] = (float32x4_t)vmovl_high_s16(v75.val[1]);
          v76.val[2] = (float32x4_t)vmovl_high_s16(v75.val[2]);
          v76.val[3] = (float32x4_t)vmovl_high_s16(v75.val[3]);
          v77.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v75.val[0].i8);
          v77.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v75.val[1].i8);
          v77.val[2] = (float32x4_t)vmovl_s16(*(int16x4_t *)v75.val[2].i8);
          v77.val[3] = (float32x4_t)vmovl_s16(*(int16x4_t *)v75.val[3].i8);
          v62 = v60 + 32;
          vst4q_f32(v60, v77);
          v63 = v60 + 16;
          vst4q_f32(v63, v76);
          v60 = v62;
          v59 -= 8;
        }
        while (v59);
        LODWORD(v64) = 4 * (v53 & 0x7FFFFFF8);
        if (v53 != (v53 & 0x7FFFFFF8))
        {
          v65 = v58;
          v66 = v56;
          v64 = 4 * (v53 & 0x7FFFFFF8);
          do
          {
            v67 = *v65++;
            *v66++ = vmovl_s16(v67);
            v64 += 4;
          }
          while (v64 <= v11);
        }
        if ((int)v8 > (int)v64)
        {
          v68 = (int)v64;
          v64 = (int)v64;
          if (v37 < 0x10)
            goto LABEL_60;
          v64 = (int)v64 + v38;
          v69 = (int32x4_t *)(a5 + 4 * v68);
          v70 = v37 & 0xFFFFFFFFFFFFFFF0;
          v71 = (int16x4_t *)((char *)v57 + 2 * v68);
          do
          {
            v72 = *(int16x8_t *)v71[-2].i8;
            v73 = vmovl_s16(*v71);
            v74 = vmovl_high_s16(*(int16x8_t *)v71->i8);
            *v69 = vmovl_s16(*(int16x4_t *)v72.i8);
            v69[1] = vmovl_high_s16(v72);
            v69[2] = v73;
            v69[3] = v74;
            v69 += 4;
            v71 += 4;
            v70 -= 16;
          }
          while (v70);
          if (v37 != v38)
          {
LABEL_60:
            do
            {
              *(_DWORD *)(a5 + 4 * v64) = result->i16[v64];
              ++v64;
            }
            while (v64 < v8);
          }
        }
        result = (int16x8_t *)((char *)result + v54);
        a5 += v55;
        v56 = (int32x4_t *)((char *)v56 + v55);
        v58 = (int16x4_t *)((char *)v58 + v54);
        v57 = (int16x8_t *)((char *)v57 + v54);
        --v7;
      }
      while (v7);
    }
    else
    {
      v39 = 4 * v10;
      v40 = 2 * v9;
      do
      {
        v41 = 0;
        v42 = 0;
        v43 = (int16x4_t *)result;
        v44 = (int32x4_t *)a5;
        do
        {
          v45 = *v43++;
          *v44++ = vmovl_s16(v45);
          v42 += 4;
          v41 += 0x400000000;
        }
        while (v42 <= v11);
        if ((int)v8 > (int)v42)
        {
          v46 = v41 >> 32;
          v47 = v41 >> 32;
          if (v37 < 0x10)
            goto LABEL_61;
          v48 = 0;
          v47 = v46 + v38;
          do
          {
            v49 = (int16x8_t *)((char *)result + 2 * v46 + 2 * v48);
            v50 = v49[1];
            v51 = vmovl_high_s16(*v49);
            v52 = (int32x4_t *)(a5 + 4 * (v46 + v48));
            *v52 = vmovl_s16(*(int16x4_t *)v49->i8);
            v52[1] = v51;
            v52[2] = vmovl_s16(*(int16x4_t *)v50.i8);
            v52[3] = vmovl_high_s16(v50);
            v48 += 16;
          }
          while (v38 != v48);
          if (v37 != v38)
          {
LABEL_61:
            do
            {
              *(_DWORD *)(a5 + 4 * v47) = result->i16[v47];
              ++v47;
            }
            while (v47 < v8);
          }
        }
        result = (int16x8_t *)((char *)result + v40);
        a5 += v39;
        --v7;
      }
      while (v7);
    }
  }
  else if ((int)v8 >= 1)
  {
    v12 = &result->i16[2];
    v13 = (_DWORD *)(a5 + 8);
    do
    {
      *(v13 - 2) = *(v12 - 2);
      if ((_DWORD)v8 != 1)
      {
        *(v13 - 1) = *(v12 - 1);
        if ((_DWORD)v8 != 2)
          *v13 = *v12;
      }
      v12 += v9;
      v13 += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

char *sub_1002005D0(char *__src, unint64_t a2, int a3, int a4, char *__dst, unint64_t a6, int *a7)
{
  int v7;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = a7[1];
  if (v7)
  {
    v9 = __src;
    v10 = 4 * *a7;
    v11 = 4 * (a2 >> 2);
    v12 = 4 * (a6 >> 2);
    do
    {
      --v7;
      __src = (char *)memcpy(__dst, v9, v10);
      v9 += v11;
      __dst += v12;
    }
    while (v7);
  }
  return __src;
}

void sub_100200640(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  float *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  float32x4_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;

  v7 = a7[1];
  if (v7)
  {
    v8 = a5;
    v9 = a1;
    v10 = *a7;
    v11 = a2 >> 2;
    v12 = a6 >> 2;
    v13 = v10 - 4;
    if ((int)v10 >= 4)
    {
      v18 = 4 * v11;
      v19 = 4 * v12;
      v20 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      do
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        do
        {
          v24 = *(float32x4_t *)(v9 + v21);
          v25 = atomic_load((unsigned __int8 *)qword_10048AA00);
          if ((v25 & 1) == 0)
          {
            v40 = v7;
            v36 = v18;
            v38 = v10;
            v34 = v19;
            v32 = *(float32x4_t *)(v9 + v21);
            v27 = __cxa_guard_acquire(qword_10048AA00);
            v24 = v32;
            *(_QWORD *)&v28 = 0x8000000080000000;
            *((_QWORD *)&v28 + 1) = 0x8000000080000000;
            v20 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v19 = v34;
            v18 = v36;
            v10 = v38;
            v7 = v40;
            if (v27)
            {
              xmmword_10048A9F0 = v28;
              __cxa_guard_release(qword_10048AA00);
              v24 = v32;
              v20 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
              v19 = v34;
              v18 = v36;
              v10 = v38;
              v7 = v40;
            }
          }
          v26 = atomic_load((unsigned __int8 *)qword_10048AA20);
          if ((v26 & 1) == 0)
          {
            v41 = v7;
            v37 = v18;
            v39 = v10;
            v35 = v19;
            v33 = v24;
            v29 = __cxa_guard_acquire(qword_10048AA20);
            v24 = v33;
            *(_QWORD *)&v30 = 0x3F0000003F000000;
            *((_QWORD *)&v30 + 1) = 0x3F0000003F000000;
            v20 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v19 = v35;
            v18 = v37;
            v10 = v39;
            v7 = v41;
            if (v29)
            {
              xmmword_10048AA10 = v30;
              __cxa_guard_release(qword_10048AA20);
              v24 = v33;
              v20 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
              v19 = v35;
              v18 = v37;
              v10 = v39;
              v7 = v41;
            }
          }
          *(int32x4_t *)(v8 + v21) = vcvtq_s32_f32(vaddq_f32(v24, (float32x4_t)vorrq_s8(vandq_s8(v20[159], (int8x16_t)v24), (int8x16_t)xmmword_10048AA10)));
          v23 += 0x400000000;
          v22 += 4;
          v21 += 16;
        }
        while (v13 >= v22);
        if ((int)v10 > v22)
        {
          v31 = v23 >> 32;
          do
          {
            *(_DWORD *)(v8 + 4 * v31) = (uint64_t)rintf(*(float *)(v9 + 4 * v31));
            ++v31;
          }
          while (v10 != v31);
        }
        v9 += v18;
        v8 += v19;
        --v7;
      }
      while (v7);
    }
    else if ((int)v10 >= 1)
    {
      v14 = (float *)(a1 + 8);
      v15 = 4 * v11;
      v16 = (_DWORD *)(a5 + 8);
      v17 = 4 * v12;
      do
      {
        *(v16 - 2) = (uint64_t)rintf(*(v14 - 2));
        if ((_DWORD)v10 != 1)
        {
          *(v16 - 1) = (uint64_t)rintf(*(v14 - 1));
          if ((_DWORD)v10 != 2)
            *v16 = (uint64_t)rintf(*v14);
        }
        v14 = (float *)((char *)v14 + v15);
        v16 = (_DWORD *)((char *)v16 + v17);
        --v7;
      }
      while (v7);
    }
  }
}

void sub_100200880(float64x2_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, int32x4_t *a5, unint64_t a6, int *a7)
{
  int v7;
  int32x4_t *v8;
  float64x2_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  double *f64;
  uint64_t v15;
  __int32 *v16;
  uint64_t v17;
  uint64_t v18;
  float64x2_t *v19;
  uint64_t v20;
  int8x16_t *v21;
  int v22;
  uint64_t v23;
  float64x2_t *v24;
  int32x4_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  float32x4_t v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  float64x2_t *v42;
  float64x2_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;

  v7 = a7[1];
  if (v7)
  {
    v8 = a5;
    v9 = a1;
    v10 = *a7;
    v11 = a2 >> 3;
    v12 = a6 >> 2;
    v13 = v10 - 4;
    if ((int)v10 >= 4)
    {
      v18 = 4 * v12;
      v19 = a1 + 1;
      v20 = 8 * v11;
      v21 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      do
      {
        v22 = 0;
        v23 = 0;
        v24 = v19;
        v25 = v8;
        do
        {
          v27 = v24[-1];
          v26 = *v24;
          v28 = atomic_load((unsigned __int8 *)qword_10048AA00);
          if ((v28 & 1) == 0)
          {
            v48 = v7;
            v44 = v18;
            v46 = v10;
            v40 = v20;
            v42 = v19;
            v36 = v24[-1];
            v38 = *v24;
            v31 = __cxa_guard_acquire(qword_10048AA00);
            v27 = v36;
            v26 = v38;
            *(_QWORD *)&v32 = 0x8000000080000000;
            *((_QWORD *)&v32 + 1) = 0x8000000080000000;
            v21 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v20 = v40;
            v19 = v42;
            v18 = v44;
            v10 = v46;
            v7 = v48;
            if (v31)
            {
              xmmword_10048A9F0 = v32;
              __cxa_guard_release(qword_10048AA00);
              v27 = v36;
              v26 = v38;
              v21 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
              v20 = v40;
              v19 = v42;
              v18 = v44;
              v10 = v46;
              v7 = v48;
            }
          }
          v29 = atomic_load((unsigned __int8 *)qword_10048AA20);
          if ((v29 & 1) == 0)
          {
            v49 = v7;
            v45 = v18;
            v47 = v10;
            v41 = v20;
            v43 = v19;
            v37 = v27;
            v39 = v26;
            v33 = __cxa_guard_acquire(qword_10048AA20);
            v27 = v37;
            v26 = v39;
            *(_QWORD *)&v34 = 0x3F0000003F000000;
            *((_QWORD *)&v34 + 1) = 0x3F0000003F000000;
            v21 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v20 = v41;
            v19 = v43;
            v18 = v45;
            v10 = v47;
            v7 = v49;
            if (v33)
            {
              xmmword_10048AA10 = v34;
              __cxa_guard_release(qword_10048AA20);
              v27 = v37;
              v26 = v39;
              v21 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
              v20 = v41;
              v19 = v43;
              v18 = v45;
              v10 = v47;
              v7 = v49;
            }
          }
          v30 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v27), v26);
          *v25++ = vcvtq_s32_f32(vaddq_f32(v30, (float32x4_t)vorrq_s8(vandq_s8(v21[159], (int8x16_t)v30), (int8x16_t)xmmword_10048AA10)));
          v23 += 0x400000000;
          v22 += 4;
          v24 += 2;
        }
        while (v13 >= v22);
        if ((int)v10 > v22)
        {
          v35 = v23 >> 32;
          do
          {
            v8->i32[v35] = (uint64_t)rint(v9->f64[v35]);
            ++v35;
          }
          while (v10 != v35);
        }
        v8 = (int32x4_t *)((char *)v8 + v18);
        v19 = (float64x2_t *)((char *)v19 + v20);
        v9 = (float64x2_t *)((char *)v9 + v20);
        --v7;
      }
      while (v7);
    }
    else if ((int)v10 >= 1)
    {
      f64 = a1[1].f64;
      v15 = 8 * v11;
      v16 = &a5->i32[2];
      v17 = 4 * v12;
      do
      {
        *(v16 - 2) = (uint64_t)rint(*(f64 - 2));
        if ((_DWORD)v10 != 1)
        {
          *(v16 - 1) = (uint64_t)rint(*(f64 - 1));
          if ((_DWORD)v10 != 2)
            *v16 = (uint64_t)rint(*f64);
        }
        f64 = (double *)((char *)f64 + v15);
        v16 = (__int32 *)((char *)v16 + v17);
        --v7;
      }
      while (v7);
    }
  }
}

unint64_t sub_100200AF0(unint64_t result, uint64_t a2, float a3, double a4, double a5, double a6, __n128 a7, int8x16_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unsigned int *a13)
{
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  _BYTE *v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int8x16_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int8x16_t *v30;
  uint16x8_t v31;
  float32x4_t v32;
  int8x16_t v33;
  uint64_t v34;
  float *v35;
  unint64_t v36;
  float v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint32x4_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int8x16_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  float *v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v75;
  uint64_t v76;
  float *v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  float *v81;
  float *v82;
  float *v83;
  unint64_t v84;
  float v85;
  float v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  __n128 *v91;
  unint64_t v92;
  uint32x4_t v93;
  uint64_t v94;
  unint64_t v95;
  int8x16_t v96;
  uint32x4_t v97;
  uint32x4_t v98;
  uint32x4_t v99;
  uint64_t v100;
  float32x4x4_t v101;
  float32x4x4_t v102;
  float32x4x4_t v103;

  v13 = a13[1];
  if (!v13)
    return result;
  v14 = result;
  v15 = *a13;
  v16 = a12 >> 2;
  v17 = v13 - 1;
  if ((int)v15 >= 8)
  {
    v20 = 0;
    v21 = (v15 - 4);
    v22 = a12 & 0xFFFFFFFFFFFFFFFCLL;
    v23 = (int8x16_t *)(a11 + 16);
    v24 = 4 * v16;
    v25 = a11 + 12;
    v26 = a11;
    v27 = result;
    while (1)
    {
      result = 0;
      v28 = 0;
      v29 = v17;
      v30 = v23;
      do
      {
        v31 = vmovl_u8(*(uint8x8_t *)(v27 + v28));
        v32 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v31.i8));
        v33 = (int8x16_t)vcvtq_f32_u32(vmovl_high_u16(v31));
        v30[-1] = (int8x16_t)v32;
        *v30 = v33;
        v28 += 8;
        result += 0x800000000;
        v30 += 2;
      }
      while (v28 <= (v15 - 8));
      if ((int)v21 >= (int)v28)
        break;
      if ((int)v28 < (int)v15)
        goto LABEL_20;
LABEL_11:
      v27 += a2;
      v26 += v24;
      --v17;
      ++v20;
      v23 = (int8x16_t *)((char *)v23 + v24);
      v25 += v24;
      if (!v29)
        return result;
    }
    result = 0;
    v34 = 4 * (int)v28;
    v35 = (float *)(v25 + v34);
    v36 = v27 + (int)v28;
    do
    {
      v33.i8[0] = *(_BYTE *)(v36 + result);
      v37 = (float)v33.u32[0];
      v32.i8[0] = *(_BYTE *)(v36 + result + 1);
      v38 = (float)v32.u32[0];
      *(v35 - 3) = v37;
      v39 = v26 + v34 + 4 * result;
      *(float *)(v39 + 4) = v38;
      LOBYTE(v37) = *(_BYTE *)(v36 + result + 2);
      *(float *)v33.i32 = (float)LODWORD(v37);
      LOBYTE(v38) = *(_BYTE *)(v36 + result + 3);
      v32.f32[0] = (float)LODWORD(v38);
      *(_DWORD *)(v39 + 8) = v33.i32[0];
      *v35 = v32.f32[0];
      v35 += 4;
      result += 4;
    }
    while ((uint64_t)((int)v28 + result) <= v21);
    LODWORD(v28) = v28 + result;
    if ((int)v28 >= (int)v15)
      goto LABEL_11;
LABEL_20:
    v40 = (int)v28;
    v41 = v15 - (int)v28;
    if (v41 < 8)
    {
      result = v40;
      goto LABEL_36;
    }
    if (v26 + 4 * v40 < v14 + v15 + v20 * a2 && v27 + v40 < a11 + 4 * v15 + v22 * v20)
    {
      result = v40;
      goto LABEL_36;
    }
    if (v41 >= 0x10)
    {
      v42 = v41 & 0xFFFFFFFFFFFFFFF0;
      result = 4 * v40;
      v48 = v40;
      v49 = v41 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v50 = *(int8x16_t *)(v27 + v48);
        v51 = (uint32x4_t)vqtbl1q_s8(v50, (int8x16_t)xmmword_1003BCAC0);
        v52 = (uint32x4_t)vqtbl1q_s8(v50, (int8x16_t)xmmword_1003BCAB0);
        v53 = (uint32x4_t)vqtbl1q_s8(v50, (int8x16_t)xmmword_1003BCAA0);
        v33 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v50, (int8x16_t)xmmword_1003BCA90));
        v54 = v26 + result;
        *(float32x4_t *)(v54 + 32) = vcvtq_f32_u32(v52);
        *(float32x4_t *)(v54 + 48) = vcvtq_f32_u32(v51);
        *(int8x16_t *)v54 = v33;
        *(float32x4_t *)(v54 + 16) = vcvtq_f32_u32(v53);
        v48 += 16;
        result += 64;
        v49 -= 16;
      }
      while (v49);
      if (v41 == v42)
        goto LABEL_11;
      if ((v41 & 8) == 0)
      {
        result = v42 + v40;
        do
        {
LABEL_36:
          v33.i8[0] = *(_BYTE *)(v27 + result);
          *(float *)v33.i32 = (float)v33.u32[0];
          *(_DWORD *)(v26 + 4 * result++) = v33.i32[0];
        }
        while (v15 != result);
        goto LABEL_11;
      }
    }
    else
    {
      v42 = 0;
    }
    result = (v41 & 0xFFFFFFFFFFFFFFF8) + v40;
    v43 = v42 - (v41 & 0xFFFFFFFFFFFFFFF8);
    v44 = v42 + v40;
    v45 = 4 * v44;
    do
    {
      v33.i64[0] = *(_QWORD *)(v27 + v44);
      v46 = (uint32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1003BCAA0);
      v33 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1003BCA90));
      v47 = v26 + v45;
      *(int8x16_t *)v47 = v33;
      *(float32x4_t *)(v47 + 16) = vcvtq_f32_u32(v46);
      v44 += 8;
      v45 += 32;
      v43 += 8;
    }
    while (v43);
    if (v41 == (v41 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_11;
    goto LABEL_36;
  }
  if ((int)v15 >= 4)
  {
    v55 = 0;
    v56 = (v15 - 4);
    v57 = (v56 & 0xFFFFFFFC) + 4;
    v58 = a12 & 0xFFFFFFFFFFFFFFFCLL;
    if ((unint64_t)(v56 & 0xFFFFFFFC) + 5 <= v15)
      v59 = *a13;
    else
      v59 = (v56 & 0xFFFFFFFC) + 5;
    v60 = v59 - (v56 & 0xFFFFFFFC) - 4;
    v61 = 16 * (v56 >> 2) + 16;
    v62 = (v56 >> 2) + 1;
    v63 = 4 * v16;
    v64 = result + v57;
    v65 = a11 + v61;
    v66 = a11 + ((4 * (v15 - 4)) & 0x3FFFFFFF0) + 16;
    v67 = a11 + 4 * v59;
    v68 = result + v59;
    v69 = result + v57;
    v70 = (float *)a11;
    while (1)
    {
      v71 = v17;
      v72 = v58 * v55;
      v73 = v64 + v55 * a2;
      if (v56 < 0x3C)
        break;
      if ((unint64_t)v70 < v73 && v14 < a11 + v61 + v72)
        break;
      v75 = a11;
      v76 = v62 & 0x7FFFFFF0;
      v77 = v70;
      result = v14;
      do
      {
        *(int8x16x4_t *)(&a8 - 1) = vld4q_s8((const char *)result);
        result += 64;
        v101.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_1003BCA90));
        v101.val[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1003BCA90));
        v101.val[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v79, (int8x16_t)xmmword_1003BCA90));
        v101.val[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v80, (int8x16_t)xmmword_1003BCA90));
        v81 = v77;
        vst4q_f32(v81, v101);
        v81 += 16;
        v101.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_1003BCAC0));
        v102.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_1003BCAB0));
        v103.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_1003BCAA0));
        v103.val[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1003BCAA0));
        v103.val[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v79, (int8x16_t)xmmword_1003BCAA0));
        v103.val[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v80, (int8x16_t)xmmword_1003BCAA0));
        vst4q_f32(v81, v103);
        v102.val[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1003BCAB0));
        v102.val[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v79, (int8x16_t)xmmword_1003BCAB0));
        v102.val[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v80, (int8x16_t)xmmword_1003BCAB0));
        v82 = v77 + 32;
        vst4q_f32(v82, v102);
        v101.val[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1003BCAC0));
        v101.val[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v79, (int8x16_t)xmmword_1003BCAC0));
        a7 = (__n128)vqtbl1q_s8(v80, (int8x16_t)xmmword_1003BCAC0);
        v101.val[3] = vcvtq_f32_u32((uint32x4_t)a7);
        v83 = v77 + 48;
        vst4q_f32(v83, v101);
        v77 += 64;
        v76 -= 16;
      }
      while (v76);
      v84 = 4 * (v62 & 0x7FFFFFF0);
      a11 = v75;
      if (v62 != (v62 & 0x7FFFFFF0))
        goto LABEL_54;
LABEL_56:
      if ((int)v15 > (int)v84)
      {
        v87 = (v56 & 0xFFFFFFFC) + 4;
        if (v60 >= 8)
        {
          if (v66 + v72 >= v68 + v55 * a2
            || (result = v67 + v72, v87 = (v56 & 0xFFFFFFFC) + 4, v73 >= v67 + v72))
          {
            if (v60 >= 0x10)
            {
              v94 = 16 * (v56 >> 2) + 16;
              result = (v56 & 0xFFFFFFFC) + 4;
              v95 = v60 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v96 = *(int8x16_t *)(v14 + result);
                v97 = (uint32x4_t)vqtbl1q_s8(v96, (int8x16_t)xmmword_1003BCAC0);
                v98 = (uint32x4_t)vqtbl1q_s8(v96, (int8x16_t)xmmword_1003BCAB0);
                v99 = (uint32x4_t)vqtbl1q_s8(v96, (int8x16_t)xmmword_1003BCAA0);
                a7 = (__n128)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v96, (int8x16_t)xmmword_1003BCA90));
                v100 = (uint64_t)v70 + v94;
                *(float32x4_t *)(v100 + 32) = vcvtq_f32_u32(v98);
                *(float32x4_t *)(v100 + 48) = vcvtq_f32_u32(v97);
                a8 = (int8x16_t)vcvtq_f32_u32(v99);
                *(__n128 *)v100 = a7;
                *(int8x16_t *)(v100 + 16) = a8;
                result += 16;
                v94 += 64;
                v95 -= 16;
              }
              while (v95);
              if (v60 == (v60 & 0xFFFFFFFFFFFFFFF0))
                goto LABEL_42;
              v88 = v60 & 0xFFFFFFFFFFFFFFF0;
              v87 = v57 + (v60 & 0xFFFFFFFFFFFFFFF0);
              if ((v60 & 8) != 0)
                goto LABEL_62;
            }
            else
            {
              v88 = 0;
LABEL_62:
              v89 = v88 - (v60 & 0xFFFFFFFFFFFFFFF8);
              v90 = (unint64_t *)(v69 + v88);
              v91 = (__n128 *)(v65 + 4 * v88);
              do
              {
                v92 = *v90++;
                a7.n128_u64[0] = v92;
                v93 = (uint32x4_t)vqtbl1q_s8((int8x16_t)a7, (int8x16_t)xmmword_1003BCAA0);
                a7 = (__n128)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, (int8x16_t)xmmword_1003BCA90));
                a8 = (int8x16_t)vcvtq_f32_u32(v93);
                *v91 = a7;
                v91[1] = (__n128)a8;
                v91 += 2;
                v89 += 8;
              }
              while (v89);
              v87 = v57 + (v60 & 0xFFFFFFFFFFFFFFF8);
              result = v60 & 0xFFFFFFFFFFFFFFF8;
              if (v60 == (v60 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_42;
            }
          }
        }
        do
        {
          a7.n128_u8[0] = *(_BYTE *)(v14 + v87);
          a7.n128_f32[0] = (float)a7.n128_u32[0];
          v70[v87++] = a7.n128_f32[0];
        }
        while (v87 < v15);
      }
LABEL_42:
      v14 += a2;
      v70 = (float *)((char *)v70 + v63);
      v17 = v71 - 1;
      ++v55;
      v69 += a2;
      v65 += v63;
      if (!v71)
        return result;
    }
    v84 = 0;
LABEL_54:
    result = (unint64_t)&v70[v84];
    do
    {
      a7.n128_u8[0] = *(_BYTE *)(v14 + v84);
      v85 = (float)a7.n128_u32[0];
      a8.i8[0] = *(_BYTE *)(v14 + v84 + 1);
      v86 = (float)a8.u32[0];
      *(float *)result = v85;
      *(float *)(result + 4) = v86;
      LOBYTE(v85) = *(_BYTE *)(v14 + v84 + 2);
      a7.n128_f32[0] = (float)LODWORD(v85);
      LOBYTE(v86) = *(_BYTE *)(v14 + v84 + 3);
      *(float *)a8.i32 = (float)LODWORD(v86);
      *(_DWORD *)(result + 8) = a7.n128_u32[0];
      *(_DWORD *)(result + 12) = a8.i32[0];
      v84 += 4;
      result += 16;
    }
    while (v84 <= v56);
    goto LABEL_56;
  }
  if ((int)v15 >= 1)
  {
    v18 = (_BYTE *)(result + 2);
    v19 = (float *)(a11 + 8);
    do
    {
      LOBYTE(a3) = *(v18 - 2);
      a3 = (float)LODWORD(a3);
      *(v19 - 2) = a3;
      if ((_DWORD)v15 != 1)
      {
        LOBYTE(a3) = *(v18 - 1);
        a3 = (float)LODWORD(a3);
        *(v19 - 1) = a3;
        if ((_DWORD)v15 != 2)
        {
          LOBYTE(a3) = *v18;
          a3 = (float)LODWORD(a3);
          *v19 = a3;
        }
      }
      v18 += a2;
      v19 += v16;
      --v13;
    }
    while (v13);
  }
  return result;
}

unint64_t sub_100201110(unint64_t result, uint64_t a2, __n128 a3, int32x4_t a4, uint64_t a5, uint64_t a6, float32x4_t *a7, unint64_t a8, unsigned int *a9)
{
  unsigned int v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  __int32 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  float32x4_t *v27;
  int16x8_t v28;
  float32x4_t v29;
  float32x4_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  int8x8_t v35;
  int8x8_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x8_t v45;
  float32x4_t v46;
  float32x4_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int8x16_t v51;
  int8x8_t v52;
  float32x4_t v53;
  float32x4_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float *v67;
  unint64_t v68;
  unint64_t v69;
  float *v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  float *v75;
  uint64_t v76;
  float *v77;
  const char *v78;
  int8x8_t v79;
  int8x8_t v80;
  int8x8_t v81;
  float32x4_t v82;
  int8x8_t v83;
  float *v84;
  float *v85;
  float32x4_t v86;
  float *v87;
  unint64_t v88;
  float *v89;
  int8x8_t v90;
  int8x8_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int8x8_t *v95;
  __n128 *v96;
  int8x8_t v97;
  int8x8_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int8x16_t v102;
  int8x8_t v103;
  float32x4_t v104;
  uint64_t v105;
  int8x16x4_t v106;
  float32x4x4_t v107;
  float32x4x4_t v108;
  float32x4x4_t v109;

  v9 = a9[1];
  if (!v9)
    return result;
  v10 = (float *)a7;
  v11 = result;
  v12 = *a9;
  v13 = a8 >> 2;
  result = v9 - 1;
  if ((int)v12 >= 8)
  {
    v16 = 0;
    v17 = (v12 - 4);
    v18 = a8 & 0xFFFFFFFFFFFFFFFCLL;
    v19 = a7 + 1;
    v20 = 4 * v13;
    v21 = (uint64_t)&a7->i64[1] + 4;
    v22 = a7;
    v23 = v11;
    while (1)
    {
      v24 = 0;
      v25 = 0;
      v26 = result;
      v27 = v19;
      do
      {
        v28 = vmovl_s8(*(int8x8_t *)(v23 + v25));
        v29 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v28.i8));
        v30 = vcvtq_f32_s32(vmovl_high_s16(v28));
        v27[-1] = v29;
        *v27 = v30;
        v25 += 8;
        v24 += 0x800000000;
        v27 += 2;
      }
      while (v25 <= (v12 - 8));
      if ((int)v17 >= (int)v25)
        break;
      if ((int)v25 < (int)v12)
        goto LABEL_20;
LABEL_11:
      v23 += a2;
      v22 = (float32x4_t *)((char *)v22 + v20);
      result = (v26 - 1);
      ++v16;
      v19 = (float32x4_t *)((char *)v19 + v20);
      v21 += v20;
      if (!v26)
        return result;
    }
    v31 = 0;
    v32 = 4 * (int)v25;
    v33 = (_DWORD *)(v21 + v32);
    v34 = v23 + (int)v25;
    do
    {
      v30.i8[0] = *(_BYTE *)(v34 + v31);
      v35 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v30.f32)).u64[0];
      *(float *)v35.i32 = (float)v35.i32[0];
      v29.i8[0] = *(_BYTE *)(v34 + v31 + 1);
      v36 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v29.f32)).u64[0];
      *(float *)v36.i32 = (float)v36.i32[0];
      *(v33 - 3) = v35.i32[0];
      v37 = (uint64_t)&v22[v31 / 4] + v32;
      *(_DWORD *)(v37 + 4) = v36.i32[0];
      v35.i8[0] = *(_BYTE *)(v34 + v31 + 2);
      v30.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v35)).u64[0];
      v30.f32[0] = (float)v30.i32[0];
      v36.i8[0] = *(_BYTE *)(v34 + v31 + 3);
      v29.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v36)).u64[0];
      v29.f32[0] = (float)v29.i32[0];
      *(_DWORD *)(v37 + 8) = v30.i32[0];
      *v33 = v29.i32[0];
      v33 += 4;
      v31 += 4;
    }
    while ((uint64_t)((int)v25 + v31) <= v17);
    LODWORD(v25) = v25 + v31;
    if ((int)v25 >= (int)v12)
      goto LABEL_11;
LABEL_20:
    v38 = (int)v25;
    v39 = v12 - (int)v25;
    if (v39 < 8)
    {
      v40 = v38;
      goto LABEL_36;
    }
    if ((unint64_t)v22->u64 + 4 * v38 < v11 + v12 + v16 * a2
      && v23 + v38 < (unint64_t)&v10[v12] + v18 * v16)
    {
      v40 = v38;
      goto LABEL_36;
    }
    if (v39 >= 0x10)
    {
      v41 = v39 & 0xFFFFFFFFFFFFFFF0;
      v48 = 4 * v38;
      v49 = v38;
      v50 = v39 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v51 = *(int8x16_t *)(v23 + v49);
        v52 = (int8x8_t)vextq_s8(v51, v51, 8uLL).u64[0];
        v53 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v52, *(int8x8_t *)v51.i8), 8uLL), 8uLL)));
        v54 = (float32x4_t *)((char *)v22 + v48);
        *v54 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v51.i8), 8uLL), 8uLL)));
        v54[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v51.i8), 8uLL), 8uLL)));
        v30 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v52, *(int8x8_t *)v51.i8), 8uLL), 8uLL)));
        v54[2] = v53;
        v54[3] = v30;
        v49 += 16;
        v48 += 64;
        v50 -= 16;
      }
      while (v50);
      if (v39 == v41)
        goto LABEL_11;
      if ((v39 & 8) == 0)
      {
        v40 = v41 + v38;
        do
        {
LABEL_36:
          v30.i8[0] = *(_BYTE *)(v23 + v40);
          v30.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v30.f32)).u64[0];
          v30.f32[0] = (float)v30.i32[0];
          v22->i32[v40++] = v30.i32[0];
        }
        while (v12 != v40);
        goto LABEL_11;
      }
    }
    else
    {
      v41 = 0;
    }
    v40 = (v39 & 0xFFFFFFFFFFFFFFF8) + v38;
    v42 = v41 - (v39 & 0xFFFFFFFFFFFFFFF8);
    v43 = v41 + v38;
    v44 = 4 * v43;
    do
    {
      v45 = *(int8x8_t *)(v23 + v43);
      v46 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v45, v45), 8uLL), 8uLL)));
      v30 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v45, v45), 8uLL), 8uLL)));
      v47 = (float32x4_t *)((char *)v22 + v44);
      *v47 = v46;
      v47[1] = v30;
      v43 += 8;
      v44 += 32;
      v42 += 8;
    }
    while (v42);
    if (v39 == (v39 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_11;
    goto LABEL_36;
  }
  if ((int)v12 >= 4)
  {
    v55 = 0;
    v56 = (v12 - 4);
    v57 = (v56 & 0xFFFFFFFC) + 4;
    v58 = a8 & 0xFFFFFFFFFFFFFFFCLL;
    if ((unint64_t)(v56 & 0xFFFFFFFC) + 5 <= v12)
      v59 = *a9;
    else
      v59 = (v56 & 0xFFFFFFFC) + 5;
    v60 = v59 - (v56 & 0xFFFFFFFC) - 4;
    v61 = 16 * (v56 >> 2) + 16;
    v62 = (v56 >> 2) + 1;
    v63 = 4 * v13;
    v64 = v11 + v57;
    v65 = (uint64_t)v10 + v61;
    v66 = (uint64_t)v10 + ((4 * (v12 - 4)) & 0x3FFFFFFF0) + 16;
    v67 = &v10[v59];
    v68 = v11 + v59;
    v69 = v11 + v57;
    v70 = v10;
    while (1)
    {
      v71 = result;
      v72 = v58 * v55;
      v73 = v64 + v55 * a2;
      if (v56 < 0x3C)
        break;
      if ((unint64_t)v70 < v73 && v11 < (unint64_t)v10 + v61 + v72)
        break;
      v75 = v10;
      v76 = v62 & 0x7FFFFFF0;
      v77 = v70;
      v78 = (const char *)v11;
      do
      {
        v106 = vld4q_s8(v78);
        v78 += 64;
        v79 = (int8x8_t)vextq_s8(v106.val[0], v106.val[0], 8uLL).u64[0];
        a3 = (__n128)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v79, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v80 = (int8x8_t)vextq_s8(v106.val[1], v106.val[1], 8uLL).u64[0];
        a4 = (int32x4_t)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v80, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v81 = (int8x8_t)vextq_s8(v106.val[2], v106.val[2], 8uLL).u64[0];
        v82 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v81, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v107.val[0] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v79, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v107.val[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v80, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v107.val[2] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v81, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v108.val[0] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v106.val[0].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v108.val[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v106.val[1].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v108.val[2] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v106.val[2].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v108.val[3] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v106.val[3].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v109.val[0] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v106.val[0].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v109.val[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v106.val[1].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v109.val[2] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v106.val[2].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v83 = (int8x8_t)vextq_s8(v106.val[3], v106.val[3], 8uLL).u64[0];
        v109.val[3] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v106.val[3].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v84 = v77;
        vst4q_f32(v84, v109);
        v84 += 16;
        vst4q_f32(v84, v108);
        v107.val[3] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v83, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v85 = v77 + 32;
        vst4q_f32(v85, v107);
        v86 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v83, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v87 = v77 + 48;
        vst4q_f32(v87, *(float32x4x4_t *)a3.n128_u64);
        v77 += 64;
        v76 -= 16;
      }
      while (v76);
      v88 = 4 * (v62 & 0x7FFFFFF0);
      v10 = v75;
      if (v62 != (v62 & 0x7FFFFFF0))
        goto LABEL_54;
LABEL_56:
      if ((int)v12 > (int)v88)
      {
        v92 = (v56 & 0xFFFFFFFC) + 4;
        if (v60 >= 8)
        {
          if (v66 + v72 >= v68 + v55 * a2
            || (v92 = (v56 & 0xFFFFFFFC) + 4, v73 >= (unint64_t)v67 + v72))
          {
            if (v60 >= 0x10)
            {
              v99 = 16 * (v56 >> 2) + 16;
              v100 = (v56 & 0xFFFFFFFC) + 4;
              v101 = v60 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v102 = *(int8x16_t *)(v11 + v100);
                v103 = (int8x8_t)vextq_s8(v102, v102, 8uLL).u64[0];
                v104 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v103, *(int8x8_t *)v102.i8), 8uLL), 8uLL)));
                a4 = vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v103, *(int8x8_t *)v102.i8), 8uLL), 8uLL));
                v105 = (uint64_t)v70 + v99;
                *(float32x4_t *)v105 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v102.i8, *(int8x8_t *)v102.i8), 8uLL), 8uLL)));
                *(float32x4_t *)(v105 + 16) = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v102.i8, *(int8x8_t *)v102.i8), 8uLL), 8uLL)));
                a3 = (__n128)vcvtq_f32_s32(a4);
                *(float32x4_t *)(v105 + 32) = v104;
                *(__n128 *)(v105 + 48) = a3;
                v100 += 16;
                v99 += 64;
                v101 -= 16;
              }
              while (v101);
              if (v60 == (v60 & 0xFFFFFFFFFFFFFFF0))
                goto LABEL_42;
              v93 = v60 & 0xFFFFFFFFFFFFFFF0;
              v92 = v57 + (v60 & 0xFFFFFFFFFFFFFFF0);
              if ((v60 & 8) != 0)
                goto LABEL_62;
            }
            else
            {
              v93 = 0;
LABEL_62:
              v94 = v93 - (v60 & 0xFFFFFFFFFFFFFFF8);
              v95 = (int8x8_t *)(v69 + v93);
              v96 = (__n128 *)(v65 + 4 * v93);
              do
              {
                v97 = *v95++;
                v98 = v97;
                a4 = (int32x4_t)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v98, v98), 8uLL), 8uLL)));
                a3 = (__n128)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v98, v98), 8uLL), 8uLL)));
                *v96 = (__n128)a4;
                v96[1] = a3;
                v96 += 2;
                v94 += 8;
              }
              while (v94);
              v92 = v57 + (v60 & 0xFFFFFFFFFFFFFFF8);
              if (v60 == (v60 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_42;
            }
          }
        }
        do
        {
          a3.n128_u8[0] = *(_BYTE *)(v11 + v92);
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = (float)a3.n128_i32[0];
          v70[v92++] = a3.n128_f32[0];
        }
        while (v92 < v12);
      }
LABEL_42:
      v11 += a2;
      v70 = (float *)((char *)v70 + v63);
      result = (v71 - 1);
      ++v55;
      v69 += a2;
      v65 += v63;
      if (!v71)
        return result;
    }
    v88 = 0;
LABEL_54:
    v89 = &v70[v88];
    do
    {
      a3.n128_u8[0] = *(_BYTE *)(v11 + v88);
      v90 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
      *(float *)v90.i32 = (float)v90.i32[0];
      a4.i8[0] = *(_BYTE *)(v11 + v88 + 1);
      v91 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a4.i8)).u64[0];
      *(float *)v91.i32 = (float)v91.i32[0];
      *v89 = *(float *)v90.i32;
      v89[1] = *(float *)v91.i32;
      v90.i8[0] = *(_BYTE *)(v11 + v88 + 2);
      a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v90)).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0];
      v91.i8[0] = *(_BYTE *)(v11 + v88 + 3);
      a4.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v91)).u64[0];
      *(float *)a4.i32 = (float)a4.i32[0];
      v89[2] = a3.n128_f32[0];
      v89[3] = *(float *)a4.i32;
      v88 += 4;
      v89 += 4;
    }
    while (v88 <= v56);
    goto LABEL_56;
  }
  if ((int)v12 >= 1)
  {
    v14 = (unsigned __int8 *)(v11 + 2);
    v15 = &a7->i32[2];
    do
    {
      a3.n128_u8[0] = *(v14 - 2);
      a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0];
      *(v15 - 2) = a3.n128_u32[0];
      if ((_DWORD)v12 != 1)
      {
        a3.n128_u8[0] = *(v14 - 1);
        a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
        a3.n128_f32[0] = (float)a3.n128_i32[0];
        *(v15 - 1) = a3.n128_u32[0];
        if ((_DWORD)v12 != 2)
        {
          a3.n128_u8[0] = *v14;
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = (float)a3.n128_i32[0];
          *v15 = a3.n128_u32[0];
        }
      }
      v14 += a2;
      v15 += v13;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint16x8_t *sub_1002018C4(uint16x8_t *result, unint64_t a2, uint32x4_t a3, uint32x4_t a4, uint64_t a5, uint64_t a6, float32x4_t *a7, unint64_t a8, unsigned int *a9)
{
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned __int16 *v14;
  __int32 *v15;
  uint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint16x8_t *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint16x8_t *v24;
  float32x4_t *v25;
  uint16x8_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float32x4_t *v33;
  uint16x4_t *v34;
  unint64_t v35;
  uint16x8_t v36;
  float32x4_t v37;
  uint32x4_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  float *v50;
  const __int16 *v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  float *v55;
  float *v56;
  uint64_t v57;
  float32x4_t *v58;
  float v59;
  uint64_t *v60;
  float v61;
  unint64_t v62;
  uint16x4_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint16x8_t v66;
  float32x4_t v67;
  float32x4x4_t v68;
  float32x4x4_t v69;

  v9 = a9[1];
  if (!v9)
    return result;
  v10 = *a9;
  v11 = a2 >> 1;
  v12 = a8 >> 2;
  v13 = v9 - 1;
  if ((int)v10 >= 8)
  {
    v16 = (v10 - 4);
    v17 = a7 + 1;
    v18 = 4 * v12;
    v19 = 2 * v11;
    v20 = result + 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = v13;
      v24 = result;
      v25 = v17;
      do
      {
        v26 = *v24++;
        v27 = vcvtq_f32_u32(vmovl_high_u16(v26));
        v25[-1] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v26.i8));
        *v25 = v27;
        v22 += 8;
        v21 += 0x800000000;
        v25 += 2;
      }
      while (v22 <= (v10 - 8));
      if ((int)v16 >= (int)v22)
      {
        v28 = 0;
        v29 = 4 * (int)v22;
        v30 = 2 * (int)v22;
        do
        {
          v27 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&result->i8[v30]));
          *(float32x4_t *)((char *)a7 + v29) = v27;
          v28 += 4;
          v29 += 16;
          v30 += 8;
        }
        while ((int)v22 + v28 <= v16);
        LODWORD(v22) = v22 + v28;
        if ((int)v22 < (int)v10)
        {
LABEL_20:
          v31 = (int)v22;
          v32 = v10 - (int)v22;
          v22 = (int)v22;
          if (v32 < 0x10)
            goto LABEL_47;
          v22 = (v32 & 0xFFFFFFFFFFFFFFF0) + (int)v22;
          v33 = (float32x4_t *)((char *)a7 + 4 * v31);
          v34 = (uint16x4_t *)((char *)v20 + 2 * v31);
          v35 = v32 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v36 = *(uint16x8_t *)v34[-2].i8;
            v37 = vcvtq_f32_u32(vmovl_u16(*v34));
            v38 = vmovl_high_u16(*(uint16x8_t *)v34->i8);
            *v33 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v36.i8));
            v33[1] = vcvtq_f32_u32(vmovl_high_u16(v36));
            v27 = vcvtq_f32_u32(v38);
            v33[2] = v37;
            v33[3] = v27;
            v33 += 4;
            v34 += 4;
            v35 -= 16;
          }
          while (v35);
          if (v32 != (v32 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_47:
            do
            {
              v27.i16[0] = result->i16[v22];
              v27.f32[0] = (float)v27.u32[0];
              a7->i32[v22++] = v27.i32[0];
            }
            while (v10 != v22);
          }
        }
      }
      else if ((int)v22 < (int)v10)
      {
        goto LABEL_20;
      }
      v13 = v23 - 1;
      v17 = (float32x4_t *)((char *)v17 + v18);
      result = (uint16x8_t *)((char *)result + v19);
      a7 = (float32x4_t *)((char *)a7 + v18);
      v20 = (uint16x8_t *)((char *)v20 + v19);
      if (!v23)
        return result;
    }
  }
  if ((int)v10 >= 4)
  {
    v39 = (v10 - 4);
    if ((unint64_t)(v39 & 0xFFFFFFFC) + 5 <= v10)
      v40 = v10;
    else
      v40 = (v39 & 0xFFFFFFFC) + 5;
    v41 = (v39 >> 2) + 1;
    v42 = v40 - (v39 & 0xFFFFFFFC) - 4;
    v43 = 2 * v11;
    v44 = 4 * v12;
    v45 = (uint64_t)&a7[(v39 >> 2) + 3];
    v46 = (uint64_t)&result[1].i64[(v39 >> 2) + 1];
    while (1)
    {
      v47 = v13;
      if (v39 >= 0x1C)
      {
        v49 = v41 & 0x7FFFFFF8;
        v50 = (float *)a7;
        v51 = (const __int16 *)result;
        do
        {
          *(int16x8x4_t *)(&a4 - 1) = vld4q_s16(v51);
          v51 += 32;
          v68.val[0] = vcvtq_f32_u32(vmovl_high_u16(v52));
          v68.val[1] = vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)a4));
          v68.val[2] = vcvtq_f32_u32(vmovl_high_u16(v53));
          v68.val[3] = vcvtq_f32_u32(vmovl_high_u16(v54));
          v69.val[0] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v52.i8));
          v69.val[1] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)a4.i8));
          v69.val[2] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v53.i8));
          a3 = vmovl_u16(*(uint16x4_t *)v54.i8);
          v69.val[3] = vcvtq_f32_u32(a3);
          v55 = v50 + 32;
          vst4q_f32(v50, v69);
          v56 = v50 + 16;
          vst4q_f32(v56, v68);
          v50 = v55;
          v49 -= 8;
        }
        while (v49);
        v48 = 4 * (v41 & 0x7FFFFFF8);
        if (v41 == (v41 & 0x7FFFFFF8))
          goto LABEL_38;
      }
      else
      {
        v48 = 0;
      }
      v57 = 2 * v48 + 6;
      v58 = &a7[v48 / 4];
      do
      {
        a3.i16[0] = *(__int16 *)((char *)&result->i16[-3] + v57);
        v59 = (float)a3.u32[0];
        v60 = &result->i64[v48 / 4];
        a4.i16[0] = *((_WORD *)v60 + 1);
        v61 = (float)a4.u32[0];
        v58->f32[0] = v59;
        v58->f32[1] = v61;
        LOWORD(v59) = *((_WORD *)v60 + 2);
        *(float *)a3.i32 = (float)LODWORD(v59);
        LOWORD(v61) = *(__int16 *)((char *)result->i16 + v57);
        *(float *)a4.i32 = (float)LODWORD(v61);
        v58->i32[2] = a3.i32[0];
        v58->i32[3] = a4.i32[0];
        v48 += 4;
        v57 += 8;
        ++v58;
      }
      while (v48 <= v39);
LABEL_38:
      if ((int)v10 > (int)v48)
      {
        v62 = (v39 & 0xFFFFFFFC) + 4;
        if (v42 < 0x10)
          goto LABEL_48;
        v63 = (uint16x4_t *)v46;
        v64 = v45;
        v65 = v42 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v66 = *(uint16x8_t *)v63[-2].i8;
          v67 = vcvtq_f32_u32(vmovl_u16(*v63));
          a4 = vmovl_high_u16(*(uint16x8_t *)v63->i8);
          *(float32x4_t *)(v64 - 32) = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v66.i8));
          *(float32x4_t *)(v64 - 16) = vcvtq_f32_u32(vmovl_high_u16(v66));
          a3 = (uint32x4_t)vcvtq_f32_u32(a4);
          *(float32x4_t *)v64 = v67;
          *(uint32x4_t *)(v64 + 16) = a3;
          v64 += 64;
          v63 += 4;
          v65 -= 16;
        }
        while (v65);
        v62 = (v39 & 0xFFFFFFFC) + 4 + (v42 & 0xFFFFFFFFFFFFFFF0);
        if (v42 != (v42 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_48:
          do
          {
            a3.i16[0] = result->i16[v62];
            *(float *)a3.i32 = (float)a3.u32[0];
            a7->i32[v62++] = a3.i32[0];
          }
          while (v62 < v10);
        }
      }
      v13 = v47 - 1;
      result = (uint16x8_t *)((char *)result + v43);
      a7 = (float32x4_t *)((char *)a7 + v44);
      v45 += v44;
      v46 += v43;
      if (!v47)
        return result;
    }
  }
  if ((int)v10 >= 1)
  {
    v14 = &result->u16[2];
    v15 = &a7->i32[2];
    do
    {
      a3.i16[0] = *(v14 - 2);
      *(float *)a3.i32 = (float)a3.u32[0];
      *(v15 - 2) = a3.i32[0];
      if ((_DWORD)v10 != 1)
      {
        a3.i16[0] = *(v14 - 1);
        *(float *)a3.i32 = (float)a3.u32[0];
        *(v15 - 1) = a3.i32[0];
        if ((_DWORD)v10 != 2)
        {
          a3.i16[0] = *v14;
          *(float *)a3.i32 = (float)a3.u32[0];
          *v15 = a3.i32[0];
        }
      }
      v14 += v11;
      v15 += v12;
      --v9;
    }
    while (v9);
  }
  return result;
}

int16x8_t *sub_100201C80(int16x8_t *result, unint64_t a2, int32x4_t a3, int32x4_t a4, uint64_t a5, uint64_t a6, float32x4_t *a7, unint64_t a8, unsigned int *a9)
{
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned __int16 *v14;
  __int32 *v15;
  uint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  int16x8_t *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int16x8_t *v24;
  float32x4_t *v25;
  int16x8_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float32x4_t *v33;
  int16x4_t *v34;
  unint64_t v35;
  int16x8_t v36;
  float32x4_t v37;
  int32x4_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  float *v50;
  const __int16 *v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  float *v55;
  float *v56;
  uint64_t v57;
  float32x4_t *v58;
  int16x4_t v59;
  uint64_t *v60;
  int16x4_t v61;
  unint64_t v62;
  int16x4_t *v63;
  uint64_t v64;
  unint64_t v65;
  int16x8_t v66;
  float32x4_t v67;
  float32x4x4_t v68;
  float32x4x4_t v69;

  v9 = a9[1];
  if (!v9)
    return result;
  v10 = *a9;
  v11 = a2 >> 1;
  v12 = a8 >> 2;
  v13 = v9 - 1;
  if ((int)v10 >= 8)
  {
    v16 = (v10 - 4);
    v17 = a7 + 1;
    v18 = 4 * v12;
    v19 = 2 * v11;
    v20 = result + 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = v13;
      v24 = result;
      v25 = v17;
      do
      {
        v26 = *v24++;
        v27 = vcvtq_f32_s32(vmovl_high_s16(v26));
        v25[-1] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v26.i8));
        *v25 = v27;
        v22 += 8;
        v21 += 0x800000000;
        v25 += 2;
      }
      while (v22 <= (v10 - 8));
      if ((int)v16 >= (int)v22)
      {
        v28 = 0;
        v29 = 4 * (int)v22;
        v30 = 2 * (int)v22;
        do
        {
          v27 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)&result->i8[v30]));
          *(float32x4_t *)((char *)a7 + v29) = v27;
          v28 += 4;
          v29 += 16;
          v30 += 8;
        }
        while ((int)v22 + v28 <= v16);
        LODWORD(v22) = v22 + v28;
        if ((int)v22 < (int)v10)
        {
LABEL_20:
          v31 = (int)v22;
          v32 = v10 - (int)v22;
          v22 = (int)v22;
          if (v32 < 0x10)
            goto LABEL_47;
          v22 = (v32 & 0xFFFFFFFFFFFFFFF0) + (int)v22;
          v33 = (float32x4_t *)((char *)a7 + 4 * v31);
          v34 = (int16x4_t *)((char *)v20 + 2 * v31);
          v35 = v32 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v36 = *(int16x8_t *)v34[-2].i8;
            v37 = vcvtq_f32_s32(vmovl_s16(*v34));
            v38 = vmovl_high_s16(*(int16x8_t *)v34->i8);
            *v33 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v36.i8));
            v33[1] = vcvtq_f32_s32(vmovl_high_s16(v36));
            v27 = vcvtq_f32_s32(v38);
            v33[2] = v37;
            v33[3] = v27;
            v33 += 4;
            v34 += 4;
            v35 -= 16;
          }
          while (v35);
          if (v32 != (v32 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_47:
            do
            {
              v27.i16[0] = result->i16[v22];
              v27.i64[0] = vmovl_s16(*(int16x4_t *)v27.f32).u64[0];
              v27.f32[0] = (float)v27.i32[0];
              a7->i32[v22++] = v27.i32[0];
            }
            while (v10 != v22);
          }
        }
      }
      else if ((int)v22 < (int)v10)
      {
        goto LABEL_20;
      }
      v13 = v23 - 1;
      v17 = (float32x4_t *)((char *)v17 + v18);
      result = (int16x8_t *)((char *)result + v19);
      a7 = (float32x4_t *)((char *)a7 + v18);
      v20 = (int16x8_t *)((char *)v20 + v19);
      if (!v23)
        return result;
    }
  }
  if ((int)v10 >= 4)
  {
    v39 = (v10 - 4);
    if ((unint64_t)(v39 & 0xFFFFFFFC) + 5 <= v10)
      v40 = v10;
    else
      v40 = (v39 & 0xFFFFFFFC) + 5;
    v41 = (v39 >> 2) + 1;
    v42 = v40 - (v39 & 0xFFFFFFFC) - 4;
    v43 = 2 * v11;
    v44 = 4 * v12;
    v45 = (uint64_t)&a7[(v39 >> 2) + 3];
    v46 = (uint64_t)&result[1].i64[(v39 >> 2) + 1];
    while (1)
    {
      v47 = v13;
      if (v39 >= 0x1C)
      {
        v49 = v41 & 0x7FFFFFF8;
        v50 = (float *)a7;
        v51 = (const __int16 *)result;
        do
        {
          *(int16x8x4_t *)(&a4 - 1) = vld4q_s16(v51);
          v51 += 32;
          v68.val[0] = vcvtq_f32_s32(vmovl_high_s16(v52));
          v68.val[1] = vcvtq_f32_s32(vmovl_high_s16((int16x8_t)a4));
          v68.val[2] = vcvtq_f32_s32(vmovl_high_s16(v53));
          v68.val[3] = vcvtq_f32_s32(vmovl_high_s16(v54));
          v69.val[0] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v52.i8));
          v69.val[1] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)a4.i8));
          v69.val[2] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v53.i8));
          a3 = vmovl_s16(*(int16x4_t *)v54.i8);
          v69.val[3] = vcvtq_f32_s32(a3);
          v55 = v50 + 32;
          vst4q_f32(v50, v69);
          v56 = v50 + 16;
          vst4q_f32(v56, v68);
          v50 = v55;
          v49 -= 8;
        }
        while (v49);
        v48 = 4 * (v41 & 0x7FFFFFF8);
        if (v41 == (v41 & 0x7FFFFFF8))
          goto LABEL_38;
      }
      else
      {
        v48 = 0;
      }
      v57 = 2 * v48 + 6;
      v58 = &a7[v48 / 4];
      do
      {
        a3.i16[0] = *(__int16 *)((char *)&result->i16[-3] + v57);
        v59 = (int16x4_t)vmovl_s16(*(int16x4_t *)a3.i8).u64[0];
        *(float *)v59.i32 = (float)v59.i32[0];
        v60 = &result->i64[v48 / 4];
        a4.i16[0] = *((_WORD *)v60 + 1);
        v61 = (int16x4_t)vmovl_s16(*(int16x4_t *)a4.i8).u64[0];
        *(float *)v61.i32 = (float)v61.i32[0];
        v58->i32[0] = v59.i32[0];
        v58->i32[1] = v61.i32[0];
        v59.i16[0] = *((_WORD *)v60 + 2);
        a3.i64[0] = vmovl_s16(v59).u64[0];
        *(float *)a3.i32 = (float)a3.i32[0];
        v61.i16[0] = *(__int16 *)((char *)result->i16 + v57);
        a4.i64[0] = vmovl_s16(v61).u64[0];
        *(float *)a4.i32 = (float)a4.i32[0];
        v58->i32[2] = a3.i32[0];
        v58->i32[3] = a4.i32[0];
        v48 += 4;
        v57 += 8;
        ++v58;
      }
      while (v48 <= v39);
LABEL_38:
      if ((int)v10 > (int)v48)
      {
        v62 = (v39 & 0xFFFFFFFC) + 4;
        if (v42 < 0x10)
          goto LABEL_48;
        v63 = (int16x4_t *)v46;
        v64 = v45;
        v65 = v42 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v66 = *(int16x8_t *)v63[-2].i8;
          v67 = vcvtq_f32_s32(vmovl_s16(*v63));
          a4 = vmovl_high_s16(*(int16x8_t *)v63->i8);
          *(float32x4_t *)(v64 - 32) = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v66.i8));
          *(float32x4_t *)(v64 - 16) = vcvtq_f32_s32(vmovl_high_s16(v66));
          a3 = (int32x4_t)vcvtq_f32_s32(a4);
          *(float32x4_t *)v64 = v67;
          *(int32x4_t *)(v64 + 16) = a3;
          v64 += 64;
          v63 += 4;
          v65 -= 16;
        }
        while (v65);
        v62 = (v39 & 0xFFFFFFFC) + 4 + (v42 & 0xFFFFFFFFFFFFFFF0);
        if (v42 != (v42 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_48:
          do
          {
            a3.i16[0] = result->i16[v62];
            a3.i64[0] = vmovl_s16(*(int16x4_t *)a3.i8).u64[0];
            *(float *)a3.i32 = (float)a3.i32[0];
            a7->i32[v62++] = a3.i32[0];
          }
          while (v62 < v10);
        }
      }
      v13 = v47 - 1;
      result = (int16x8_t *)((char *)result + v43);
      a7 = (float32x4_t *)((char *)a7 + v44);
      v45 += v44;
      v46 += v43;
      if (!v47)
        return result;
    }
  }
  if ((int)v10 >= 1)
  {
    v14 = &result->u16[2];
    v15 = &a7->i32[2];
    do
    {
      a3.i16[0] = *(v14 - 2);
      a3.i64[0] = vmovl_s16(*(int16x4_t *)a3.i8).u64[0];
      *(float *)a3.i32 = (float)a3.i32[0];
      *(v15 - 2) = a3.i32[0];
      if ((_DWORD)v10 != 1)
      {
        a3.i16[0] = *(v14 - 1);
        a3.i64[0] = vmovl_s16(*(int16x4_t *)a3.i8).u64[0];
        *(float *)a3.i32 = (float)a3.i32[0];
        *(v15 - 1) = a3.i32[0];
        if ((_DWORD)v10 != 2)
        {
          a3.i16[0] = *v14;
          a3.i64[0] = vmovl_s16(*(int16x4_t *)a3.i8).u64[0];
          *(float *)a3.i32 = (float)a3.i32[0];
          *v15 = a3.i32[0];
        }
      }
      v14 += v11;
      v15 += v12;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100202068(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;

  v7 = a7[1];
  if (!v7)
    return result;
  v8 = *a7;
  v9 = a2 >> 2;
  v10 = a6 >> 2;
  if ((int)v8 >= 4)
  {
    v15 = v7 - 1;
    v16 = (v8 - 4);
    v17 = 4 * v9;
    v18 = 4 * v10;
    while (1)
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = v15;
      do
      {
        *(float32x4_t *)(a5 + v19) = vcvtq_f32_s32(*(int32x4_t *)(result + v19));
        v21 += 4;
        v20 += 0x400000000;
        v19 += 16;
      }
      while (v21 <= v16);
      if ((int)v16 >= (int)v21)
      {
        v23 = 0;
        v24 = 4 * (int)v21;
        do
        {
          *(float32x4_t *)(a5 + v24) = vcvtq_f32_s32(*(int32x4_t *)(result + v24));
          v23 += 4;
          v24 += 16;
        }
        while ((int)v21 + v23 <= v16);
        LODWORD(v21) = v21 + v23;
        if ((int)v21 < (int)v8)
        {
LABEL_19:
          v25 = (int)v21;
          v26 = v8 - (int)v21;
          v21 = (int)v21;
          if (v26 < 8)
            goto LABEL_27;
          v21 = (v26 & 0xFFFFFFFFFFFFFFF8) + (int)v21;
          v27 = 4 * v25;
          v28 = v26 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v29 = vcvtq_f32_s32(*(int32x4_t *)(result + v27 + 16));
            v30 = (float32x4_t *)(a5 + v27);
            *v30 = vcvtq_f32_s32(*(int32x4_t *)(result + v27));
            v30[1] = v29;
            v27 += 32;
            v28 -= 8;
          }
          while (v28);
          if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_27:
            do
            {
              *(float *)(a5 + 4 * v21) = (float)*(int *)(result + 4 * v21);
              ++v21;
            }
            while (v8 != v21);
          }
        }
      }
      else if ((int)v21 < (int)v8)
      {
        goto LABEL_19;
      }
      v15 = v22 - 1;
      result += v17;
      a5 += v18;
      if (!v22)
        return result;
    }
  }
  if ((int)v8 >= 1)
  {
    v11 = (int *)(result + 8);
    v12 = 4 * v9;
    v13 = (float *)(a5 + 8);
    v14 = 4 * v10;
    do
    {
      *(v13 - 2) = (float)*(v11 - 2);
      if ((_DWORD)v8 != 1)
      {
        *(v13 - 1) = (float)*(v11 - 1);
        if ((_DWORD)v8 != 2)
          *v13 = (float)*v11;
      }
      v11 = (int *)((char *)v11 + v12);
      v13 = (float *)((char *)v13 + v14);
      --v7;
    }
    while (v7);
  }
  return result;
}

float64x2_t *sub_100202200(float64x2_t *result, unint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double *f64;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  uint64_t v22;
  float64x2_t *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  float64x2_t *v27;
  float32x4_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  float32x4_t *v34;
  float64x2_t *v35;
  unint64_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float32_t v41;

  v7 = a7[1];
  if (!v7)
    return result;
  v8 = *a7;
  v9 = a2 >> 3;
  v10 = a6 >> 2;
  if ((int)v8 >= 4)
  {
    v18 = v7 - 1;
    v19 = (v8 - 4);
    v20 = 4 * v10;
    v21 = result + 1;
    v22 = 8 * v9;
    v23 = result + 2;
    while (1)
    {
      v24 = 0;
      v25 = 0;
      v26 = v18;
      v27 = v21;
      v28 = a5;
      do
      {
        *v28++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v27[-1]), *v27);
        v25 += 4;
        v24 += 0x400000000;
        v27 += 2;
      }
      while (v25 <= v19);
      if ((int)v19 >= (int)v25)
      {
        v29 = 0;
        v30 = 4 * (int)v25;
        v31 = 8 * (int)v25;
        do
        {
          *(float32x4_t *)((char *)a5 + v30) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)((char *)result + v31)), *(float64x2_t *)((char *)result + v31 + 16));
          v29 += 4;
          v30 += 16;
          v31 += 32;
        }
        while ((int)v25 + v29 <= v19);
        LODWORD(v25) = v25 + v29;
        if ((int)v25 < (int)v8)
        {
LABEL_19:
          v32 = (int)v25;
          v33 = v8 - (int)v25;
          v25 = (int)v25;
          if (v33 < 8)
            goto LABEL_27;
          v25 = (v33 & 0xFFFFFFFFFFFFFFF8) + (int)v25;
          v34 = (float32x4_t *)((char *)a5 + 4 * v32);
          v35 = (float64x2_t *)((char *)v23 + 8 * v32);
          v36 = v33 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v38 = v35[-2];
            v37 = v35[-1];
            v40 = *v35;
            v39 = v35[1];
            v35 += 4;
            *v34 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v38), v37);
            v34[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v40), v39);
            v34 += 2;
            v36 -= 8;
          }
          while (v36);
          if (v33 != (v33 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_27:
            do
            {
              v41 = result->f64[v25];
              a5->f32[v25++] = v41;
            }
            while (v8 != v25);
          }
        }
      }
      else if ((int)v25 < (int)v8)
      {
        goto LABEL_19;
      }
      v18 = v26 - 1;
      a5 = (float32x4_t *)((char *)a5 + v20);
      v21 = (float64x2_t *)((char *)v21 + v22);
      result = (float64x2_t *)((char *)result + v22);
      v23 = (float64x2_t *)((char *)v23 + v22);
      if (!v26)
        return result;
    }
  }
  if ((int)v8 >= 1)
  {
    f64 = result[1].f64;
    v12 = 8 * v9;
    v13 = &a5->f32[2];
    v14 = 4 * v10;
    do
    {
      v15 = *(f64 - 2);
      *(v13 - 2) = v15;
      if ((_DWORD)v8 != 1)
      {
        v16 = *(f64 - 1);
        *(v13 - 1) = v16;
        if ((_DWORD)v8 != 2)
        {
          v17 = *f64;
          *v13 = v17;
        }
      }
      f64 = (double *)((char *)f64 + v12);
      v13 = (float *)((char *)v13 + v14);
      --v7;
    }
    while (v7);
  }
  return result;
}

unint64_t sub_1002023C0(unint64_t result, uint64_t a2, double a3, int8x16_t a4, uint64x2_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unint64_t a9, unsigned int *a10)
{
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float64x2_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  float64x2_t *v28;
  uint16x8_t v29;
  uint32x4_t v30;
  uint32x4_t v31;
  int64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  double v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x8_t v52;
  int8x8_t v53;
  uint64x2_t v54;
  float64x2_t v55;
  int8x8_t v56;
  int8x8_t v57;
  uint64x2_t v58;
  int8x8_t v59;
  int8x8_t v60;
  float64x2_t v61;
  int8x8_t v62;
  int8x8_t v63;
  float64x2_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int8x16_t v68;
  unint64_t v69;
  int8x8_t v70;
  int8x8_t v71;
  uint64x2_t v72;
  int8x8_t v73;
  float64x2_t v74;
  int8x8_t v75;
  int8x8_t v76;
  float64x2_t v77;
  int8x8_t v78;
  float64x2_t v79;
  int8x8_t v80;
  int8x8_t v81;
  uint64x2_t v82;
  int8x8_t v83;
  float64x2_t v84;
  int8x8_t v85;
  int8x8_t v86;
  int8x8_t v87;
  int8x8_t v88;
  float64x2_t v89;
  int8x8_t v90;
  float64x2_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned int v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v110;
  double *v111;
  int8x8_t v112;
  unint64_t v113;
  int8x8_t v114;
  int8x8_t v115;
  uint64x2_t v116;
  int8x16_t v117;
  int8x8_t v118;
  int8x16_t v119;
  int8x8_t v120;
  int8x16_t v121;
  int8x8_t v122;
  double *v123;
  int8x8_t v124;
  int8x8_t v125;
  int8x8_t v126;
  int8x8_t v127;
  int8x8_t v128;
  uint64x2_t v129;
  int8x8_t v130;
  int8x8_t v131;
  int8x8_t v132;
  int8x8_t v133;
  double *v134;
  unint64_t v135;
  double *v136;
  float64x2_t v137;
  double *v138;
  float64x2_t v139;
  double *v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  double *v144;
  double *v145;
  unint64_t v146;
  double v147;
  double v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  int8x8_t v155;
  int8x8_t v156;
  uint64x2_t v157;
  int8x8_t v158;
  int8x8_t v159;
  float64x2_t v160;
  int8x8_t v161;
  int8x8_t v162;
  int8x8_t v163;
  int8x8_t v164;
  uint64_t v165;
  unint64_t v166;
  int8x16_t v167;
  unint64_t v168;
  int8x8_t v169;
  int8x8_t v170;
  uint64x2_t v171;
  int8x8_t v172;
  float64x2_t v173;
  int8x8_t v174;
  int8x8_t v175;
  float64x2_t v176;
  int8x8_t v177;
  float64x2_t v178;
  int8x8_t v179;
  int8x8_t v180;
  int8x8_t v181;
  float64x2_t v182;
  int8x8_t v183;
  int8x8_t v184;
  int8x8_t v185;
  int8x8_t v186;
  float64x2_t v187;
  int8x8_t v188;
  unint64_t v189;
  unint64_t v190;
  float64x2x4_t v191;
  float64x2x4_t v192;

  v10 = a10[1];
  if (!v10)
    return result;
  v11 = a8;
  v12 = result;
  v13 = *a10;
  v14 = a9 >> 3;
  v15 = v10 - 1;
  if ((int)v13 >= 8)
  {
    v18 = 0;
    v19 = (v13 - 4);
    v20 = a9 & 0xFFFFFFFFFFFFFFF8;
    v21 = (float64x2_t *)(a8 + 32);
    v22 = 8 * v14;
    v23 = a8 + 24;
    result = a8;
    v24 = v12;
    while (1)
    {
      v25 = 0;
      v26 = 0;
      v27 = v15;
      v28 = v21;
      do
      {
        v29 = vmovl_u8(*(uint8x8_t *)(v24 + v26));
        v30 = vmovl_u16(*(uint16x4_t *)v29.i8);
        v31 = vmovl_high_u16(v29);
        v32.i64[0] = v30.u32[0];
        v32.i64[1] = v30.u32[1];
        v33 = vcvtq_f64_s64(v32);
        v32.i64[0] = v30.u32[2];
        v32.i64[1] = v30.u32[3];
        v28[-2] = v33;
        v28[-1] = vcvtq_f64_s64(v32);
        v32.i64[0] = v31.u32[0];
        v32.i64[1] = v31.u32[1];
        v34 = vcvtq_f64_s64(v32);
        v32.i64[0] = v31.u32[2];
        v32.i64[1] = v31.u32[3];
        v35 = vcvtq_f64_s64(v32);
        *v28 = v34;
        v28[1] = v35;
        v28 += 4;
        v26 += 8;
        v25 += 0x800000000;
      }
      while (v26 <= (v13 - 8));
      if ((int)v19 >= (int)v26)
        break;
      if ((int)v26 < (int)v13)
        goto LABEL_20;
LABEL_11:
      v24 += a2;
      result += v22;
      v15 = v27 - 1;
      ++v18;
      v21 = (float64x2_t *)((char *)v21 + v22);
      v23 += v22;
      if (!v27)
        return result;
    }
    v36 = 0;
    v37 = 8 * (int)v26;
    v38 = (double *)(v23 + v37);
    v39 = v24 + (int)v26;
    v40 = result + v37;
    do
    {
      LOBYTE(v35.f64[0]) = *(_BYTE *)(v39 + v36);
      v41 = (double)*(unint64_t *)&v35.f64[0];
      LOBYTE(v34.f64[0]) = *(_BYTE *)(v39 + v36 + 1);
      v42 = (double)*(unint64_t *)&v34.f64[0];
      *(v38 - 3) = v41;
      v43 = v40 + 8 * v36;
      *(double *)(v43 + 8) = v42;
      LOBYTE(v41) = *(_BYTE *)(v39 + v36 + 2);
      v35.f64[0] = (double)*(unint64_t *)&v41;
      LOBYTE(v42) = *(_BYTE *)(v39 + v36 + 3);
      v34.f64[0] = (double)*(unint64_t *)&v42;
      *(float64_t *)(v43 + 16) = v35.f64[0];
      *v38 = v34.f64[0];
      v38 += 4;
      v36 += 4;
    }
    while ((int)v26 + v36 <= v19);
    LODWORD(v26) = v26 + v36;
    if ((int)v26 >= (int)v13)
      goto LABEL_11;
LABEL_20:
    v44 = (int)v26;
    v45 = v13 - (int)v26;
    if (v45 < 8)
    {
      v46 = v44;
      goto LABEL_36;
    }
    if (result + 8 * v44 < v12 + v13 + v18 * a2 && v24 + v44 < v11 + 8 * v13 + v20 * v18)
    {
      v46 = v44;
      goto LABEL_36;
    }
    if (v45 >= 0x10)
    {
      v47 = v45 & 0xFFFFFFFFFFFFFFF0;
      v65 = 8 * v44;
      v66 = v44;
      v67 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v68 = *(int8x16_t *)(v24 + v66);
        v69 = vextq_s8(v68, v68, 8uLL).u64[0];
        v70.i32[0] = v69;
        v70.i32[1] = BYTE1(v69);
        v71 = vand_s8(v70, (int8x8_t)0xFF000000FFLL);
        v72.i64[0] = v71.u32[0];
        v72.i64[1] = v71.u32[1];
        v73.i32[0] = BYTE2(v69);
        v74 = vcvtq_f64_u64(v72);
        v73.i32[1] = BYTE3(v69);
        v75 = vand_s8(v73, (int8x8_t)0xFF000000FFLL);
        v72.i64[0] = v75.u32[0];
        v72.i64[1] = v75.u32[1];
        v76.i32[0] = BYTE4(v69);
        v76.i32[1] = BYTE5(v69);
        v77 = vcvtq_f64_u64(v72);
        v78 = vand_s8(v76, (int8x8_t)0xFF000000FFLL);
        v72.i64[0] = v78.u32[0];
        v72.i64[1] = v78.u32[1];
        v79 = vcvtq_f64_u64(v72);
        v80.i32[0] = BYTE6(v69);
        v80.i32[1] = HIBYTE(v69);
        v81 = vand_s8(v80, (int8x8_t)0xFF000000FFLL);
        v72.i64[0] = v81.u32[0];
        v72.i64[1] = v81.u32[1];
        v82 = v72;
        v80.i32[0] = v68.u8[0];
        v80.i32[1] = v68.u8[1];
        v83 = vand_s8(v80, (int8x8_t)0xFF000000FFLL);
        v72.i64[0] = v83.u32[0];
        v72.i64[1] = v83.u32[1];
        v84 = vcvtq_f64_u64(v72);
        v85.i32[0] = v68.u8[2];
        v85.i32[1] = v68.u8[3];
        v86 = vand_s8(v85, (int8x8_t)0xFF000000FFLL);
        v87.i32[0] = v68.u8[4];
        v87.i32[1] = v68.u8[5];
        v88 = vand_s8(v87, (int8x8_t)0xFF000000FFLL);
        v72.i64[0] = v88.u32[0];
        v72.i64[1] = v88.u32[1];
        v89 = vcvtq_f64_u64(v72);
        v90.i32[0] = v68.u8[6];
        v90.i32[1] = v68.u8[7];
        *(int8x8_t *)v68.i8 = vand_s8(v90, (int8x8_t)0xFF000000FFLL);
        v72.i64[0] = v68.u32[0];
        v72.i64[1] = v68.u32[1];
        v91 = (float64x2_t *)(result + v65);
        v91[2] = v89;
        v91[3] = vcvtq_f64_u64(v72);
        v72.i64[0] = v86.u32[0];
        v72.i64[1] = v86.u32[1];
        *v91 = v84;
        v91[1] = vcvtq_f64_u64(v72);
        v35 = vcvtq_f64_u64(v82);
        v91[6] = v79;
        v91[7] = v35;
        v91[4] = v74;
        v91[5] = v77;
        v66 += 16;
        v65 += 128;
        v67 -= 16;
      }
      while (v67);
      if (v45 == v47)
        goto LABEL_11;
      if ((v45 & 8) == 0)
      {
        v46 = v47 + v44;
        do
        {
LABEL_36:
          LOBYTE(v35.f64[0]) = *(_BYTE *)(v24 + v46);
          v35.f64[0] = (double)*(unint64_t *)&v35.f64[0];
          *(float64_t *)(result + 8 * v46++) = v35.f64[0];
        }
        while (v13 != v46);
        goto LABEL_11;
      }
    }
    else
    {
      v47 = 0;
    }
    v46 = (v45 & 0xFFFFFFFFFFFFFFF8) + v44;
    v48 = v47 - (v45 & 0xFFFFFFFFFFFFFFF8);
    v49 = v47 + v44;
    v50 = 8 * v49;
    do
    {
      v51 = *(_QWORD *)(v24 + v49);
      v52.i32[0] = v51;
      v52.i32[1] = BYTE1(v51);
      v53 = vand_s8(v52, (int8x8_t)0xFF000000FFLL);
      v54.i64[0] = v53.u32[0];
      v54.i64[1] = v53.u32[1];
      v55 = vcvtq_f64_u64(v54);
      v56.i32[0] = BYTE2(v51);
      v56.i32[1] = BYTE3(v51);
      v57 = vand_s8(v56, (int8x8_t)0xFF000000FFLL);
      v54.i64[0] = v57.u32[0];
      v54.i64[1] = v57.u32[1];
      v58 = v54;
      v59.i32[0] = BYTE4(v51);
      v59.i32[1] = BYTE5(v51);
      v60 = vand_s8(v59, (int8x8_t)0xFF000000FFLL);
      v54.i64[0] = v60.u32[0];
      v54.i64[1] = v60.u32[1];
      v61 = vcvtq_f64_u64(v54);
      v62.i32[0] = BYTE6(v51);
      v62.i32[1] = HIBYTE(v51);
      v63 = vand_s8(v62, (int8x8_t)0xFF000000FFLL);
      v54.i64[0] = v63.u32[0];
      v54.i64[1] = v63.u32[1];
      v64 = (float64x2_t *)(result + v50);
      v64[2] = v61;
      v64[3] = vcvtq_f64_u64(v54);
      v35 = vcvtq_f64_u64(v58);
      *v64 = v55;
      v64[1] = v35;
      v49 += 8;
      v50 += 64;
      v48 += 8;
    }
    while (v48);
    if (v45 == (v45 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_11;
    goto LABEL_36;
  }
  if ((int)v13 >= 4)
  {
    v92 = 0;
    v93 = (v13 - 4);
    v94 = (v93 & 0xFFFFFFFC) + 4;
    v95 = a9 & 0xFFFFFFFFFFFFFFF8;
    if ((unint64_t)(v93 & 0xFFFFFFFC) + 5 <= v13)
      v96 = *a10;
    else
      v96 = (v93 & 0xFFFFFFFC) + 5;
    v97 = v96 - (v93 & 0xFFFFFFFC) - 4;
    v98 = 32 * (v93 >> 2) + 32;
    v99 = (v93 >> 2) + 1;
    v100 = 8 * v14;
    v101 = result + v94;
    v102 = a8 + v98;
    v103 = a8 + ((8 * (v13 - 4)) & 0x7FFFFFFE0) + 32;
    v190 = a8 + 8 * v96;
    v104 = result + v96;
    v105 = result + v94;
    while (1)
    {
      v106 = v15;
      v107 = v95 * v92;
      v108 = v101 + v92 * a2;
      if (v93 < 0x3C)
        break;
      if (a8 < v108 && v12 < v11 + v98 + v107)
        break;
      v110 = v99 & 0x7FFFFFF0;
      v111 = (double *)a8;
      result = v12;
      do
      {
        *(int8x16x4_t *)a4.i8 = vld4q_s8((const char *)result);
        result += 64;
        v112.i32[0] = a4.u8[6];
        v112.i32[1] = a4.u8[7];
        v113 = vextq_s8(a4, a4, 8uLL).u64[0];
        v114.i32[0] = a4.u8[0];
        v114.i32[1] = a4.u8[1];
        v115 = vand_s8(v114, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v115.u32[0];
        v116.i64[1] = v115.u32[1];
        v192.val[0] = vcvtq_f64_u64(v116);
        v115.i32[0] = v117.u8[0];
        v115.i32[1] = v117.u8[1];
        v118 = vand_s8(v115, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v118.u32[0];
        v116.i64[1] = v118.u32[1];
        v192.val[1] = vcvtq_f64_u64(v116);
        v118.i32[0] = v119.u8[0];
        v118.i32[1] = v119.u8[1];
        v120 = vand_s8(v118, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v120.u32[0];
        v116.i64[1] = v120.u32[1];
        v192.val[2] = vcvtq_f64_u64(v116);
        v120.i32[0] = v121.u8[0];
        v120.i32[1] = v121.u8[1];
        v122 = vand_s8(v120, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v122.u32[0];
        v116.i64[1] = v122.u32[1];
        v192.val[3] = vcvtq_f64_u64(v116);
        v122.i32[0] = a4.u8[2];
        v122.i32[1] = a4.u8[3];
        v123 = v111;
        vst4q_f64(v123, v192);
        v123 += 8;
        v124 = vand_s8(v122, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v124.u32[0];
        v116.i64[1] = v124.u32[1];
        v192.val[0] = vcvtq_f64_u64(v116);
        v124.i32[0] = v117.u8[2];
        v124.i32[1] = v117.u8[3];
        v125 = vand_s8(v124, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v125.u32[0];
        v116.i64[1] = v125.u32[1];
        v192.val[1] = vcvtq_f64_u64(v116);
        v125.i32[0] = v119.u8[2];
        v125.i32[1] = v119.u8[3];
        v126 = vand_s8(v125, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v126.u32[0];
        v116.i64[1] = v126.u32[1];
        v192.val[2] = vcvtq_f64_u64(v116);
        v126.i32[0] = v121.u8[2];
        v126.i32[1] = v121.u8[3];
        v127 = vand_s8(v112, (int8x8_t)0xFF000000FFLL);
        v128 = vand_s8(v126, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v128.u32[0];
        v116.i64[1] = v128.u32[1];
        v192.val[3] = vcvtq_f64_u64(v116);
        vst4q_f64(v123, v192);
        v116.i64[0] = v127.u32[0];
        v116.i64[1] = v127.u32[1];
        v129 = v116;
        v128.i32[0] = a4.u8[4];
        v128.i32[1] = a4.u8[5];
        v130 = vand_s8(v128, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v130.u32[0];
        v116.i64[1] = v130.u32[1];
        v192.val[0] = vcvtq_f64_u64(v116);
        v130.i32[0] = v117.u8[4];
        v130.i32[1] = v117.u8[5];
        v131 = vand_s8(v130, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v131.u32[0];
        v116.i64[1] = v131.u32[1];
        v192.val[1] = vcvtq_f64_u64(v116);
        v131.i32[0] = v119.u8[4];
        v131.i32[1] = v119.u8[5];
        v132 = vand_s8(v131, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v132.u32[0];
        v116.i64[1] = v132.u32[1];
        v192.val[2] = vcvtq_f64_u64(v116);
        v132.i32[0] = v121.u8[4];
        v132.i32[1] = v121.u8[5];
        v133 = vand_s8(v132, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v133.u32[0];
        v116.i64[1] = v133.u32[1];
        v192.val[3] = vcvtq_f64_u64(v116);
        v134 = v111 + 16;
        vst4q_f64(v134, v192);
        v192.val[0] = vcvtq_f64_u64(v129);
        v129.i32[0] = v117.u8[6];
        v129.i32[1] = v117.u8[7];
        *(int8x8_t *)v129.i8 = vand_s8(*(int8x8_t *)v129.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v129.u32[0];
        v116.i64[1] = v129.u32[1];
        v192.val[1] = vcvtq_f64_u64(v116);
        v129.i32[0] = v119.u8[6];
        v129.i32[1] = v119.u8[7];
        v135 = vextq_s8(v117, v117, 8uLL).u64[0];
        *(int8x8_t *)v129.i8 = vand_s8(*(int8x8_t *)v129.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v129.u32[0];
        v116.i64[1] = v129.u32[1];
        v192.val[2] = vcvtq_f64_u64(v116);
        v129.i32[0] = v121.u8[6];
        v129.i32[1] = v121.u8[7];
        *(int8x8_t *)v129.i8 = vand_s8(*(int8x8_t *)v129.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v129.u32[0];
        v116.i64[1] = v129.u32[1];
        v192.val[3] = vcvtq_f64_u64(v116);
        v129.i32[0] = BYTE4(v113);
        v136 = v111 + 24;
        vst4q_f64(v136, v192);
        v129.i32[1] = BYTE5(v113);
        *(_QWORD *)&v192.val[0].f64[0] = vextq_s8(v119, v119, 8uLL).u64[0];
        LODWORD(v192.val[1].f64[0]) = v113;
        HIDWORD(v192.val[1].f64[0]) = BYTE1(v113);
        a4.i64[0] = vextq_s8(v121, v121, 8uLL).u64[0];
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)&v192.val[1].f64[0], (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v192.val[1] = vcvtq_f64_u64(v116);
        v117.i32[0] = v135;
        v117.i32[1] = BYTE1(v135);
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v117.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v119.i32[0] = LOBYTE(v192.val[0].f64[0]);
        v192.val[2] = vcvtq_f64_u64(v116);
        v119.i32[1] = BYTE1(v192.val[0].f64[0]);
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v119.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v119.i32[0] = a4.u8[0];
        v119.i32[1] = a4.u8[1];
        v192.val[3] = vcvtq_f64_u64(v116);
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v119.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v137 = vcvtq_f64_u64(v116);
        v117.i32[0] = BYTE2(v113);
        v117.i32[1] = BYTE3(v113);
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v117.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v138 = v111 + 32;
        vst4q_f64(v138, *(float64x2x4_t *)((char *)&v192 + 16));
        v192.val[1] = vcvtq_f64_u64(v116);
        v117.i32[0] = BYTE2(v135);
        v117.i32[1] = BYTE3(v135);
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v117.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v192.val[2] = vcvtq_f64_u64(v116);
        v117.i32[0] = BYTE2(v192.val[0].f64[0]);
        v117.i32[1] = BYTE3(v192.val[0].f64[0]);
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v117.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v192.val[3] = vcvtq_f64_u64(v116);
        v117.i32[0] = a4.u8[2];
        v117.i32[1] = a4.u8[3];
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v117.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v139 = vcvtq_f64_u64(v116);
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v129.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v140 = v111 + 40;
        vst4q_f64(v140, *(float64x2x4_t *)((char *)&v192 + 16));
        a5 = (uint64x2_t)vcvtq_f64_u64(v116);
        LODWORD(v192.val[1].f64[0]) = BYTE4(v135);
        HIDWORD(v192.val[1].f64[0]) = BYTE5(v135);
        *(int8x8_t *)&v192.val[1].f64[0] = vand_s8(*(int8x8_t *)&v192.val[1].f64[0], (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = LODWORD(v192.val[1].f64[0]);
        v116.i64[1] = HIDWORD(v192.val[1].f64[0]);
        v141 = vcvtq_f64_u64(v116);
        LODWORD(v192.val[1].f64[0]) = BYTE4(v192.val[0].f64[0]);
        HIDWORD(v192.val[1].f64[0]) = BYTE5(v192.val[0].f64[0]);
        *(int8x8_t *)&v192.val[1].f64[0] = vand_s8(*(int8x8_t *)&v192.val[1].f64[0], (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = LODWORD(v192.val[1].f64[0]);
        v116.i64[1] = HIDWORD(v192.val[1].f64[0]);
        v142 = vcvtq_f64_u64(v116);
        LODWORD(v192.val[1].f64[0]) = a4.u8[4];
        HIDWORD(v192.val[1].f64[0]) = a4.u8[5];
        *(int8x8_t *)&v192.val[1].f64[0] = vand_s8(*(int8x8_t *)&v192.val[1].f64[0], (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = LODWORD(v192.val[1].f64[0]);
        v116.i64[1] = HIDWORD(v192.val[1].f64[0]);
        v143 = vcvtq_f64_u64(v116);
        v144 = v111 + 48;
        vst4q_f64(v144, *(float64x2x4_t *)a5.i8);
        a5.i32[0] = BYTE6(v113);
        a5.i32[1] = HIBYTE(v113);
        *(int8x8_t *)a5.i8 = vand_s8(*(int8x8_t *)a5.i8, (int8x8_t)0xFF000000FFLL);
        LODWORD(v141.f64[0]) = BYTE6(v135);
        HIDWORD(v141.f64[0]) = HIBYTE(v135);
        v116.i64[0] = a5.u32[0];
        v116.i64[1] = a5.u32[1];
        v191.val[0] = vcvtq_f64_u64(v116);
        *(int8x8_t *)a5.i8 = vand_s8(*(int8x8_t *)&v141.f64[0], (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = a5.u32[0];
        v116.i64[1] = a5.u32[1];
        v191.val[1] = vcvtq_f64_u64(v116);
        a5.i32[0] = BYTE6(v192.val[0].f64[0]);
        a5.i32[1] = HIBYTE(v192.val[0].f64[0]);
        *(int8x8_t *)a5.i8 = vand_s8(*(int8x8_t *)a5.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = a5.u32[0];
        v116.i64[1] = a5.u32[1];
        a5.i64[0] = a5.u32[0];
        v191.val[2] = vcvtq_f64_u64(v116);
        a4.i32[0] = a4.u8[6];
        a4.i32[1] = a4.u8[7];
        *(int8x8_t *)a4.i8 = vand_s8(*(int8x8_t *)a4.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = a4.u32[0];
        v116.i64[1] = a4.u32[1];
        a4.i64[0] = a4.u32[0];
        v191.val[3] = vcvtq_f64_u64(v116);
        v145 = v111 + 56;
        vst4q_f64(v145, v191);
        v111 += 64;
        v110 -= 16;
      }
      while (v110);
      v146 = 4 * (v99 & 0x7FFFFFF0);
      if (v99 != (v99 & 0x7FFFFFF0))
        goto LABEL_54;
LABEL_56:
      if ((int)v13 > (int)v146)
      {
        v149 = (v93 & 0xFFFFFFFC) + 4;
        if (v97 >= 8)
        {
          if (v103 + v107 >= v104 + v92 * a2
            || (result = v190 + v107, v149 = (v93 & 0xFFFFFFFC) + 4, v108 >= v190 + v107))
          {
            if (v97 >= 0x10)
            {
              v165 = 32 * (v93 >> 2) + 32;
              result = (v93 & 0xFFFFFFFC) + 4;
              v166 = v97 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v167 = *(int8x16_t *)(v12 + result);
                v168 = vextq_s8(v167, v167, 8uLL).u64[0];
                v169.i32[0] = v168;
                v169.i32[1] = BYTE1(v168);
                v170 = vand_s8(v169, (int8x8_t)0xFF000000FFLL);
                v171.i64[0] = v170.u32[0];
                v171.i64[1] = v170.u32[1];
                v172.i32[0] = BYTE2(v168);
                v173 = vcvtq_f64_u64(v171);
                v172.i32[1] = BYTE3(v168);
                v174 = vand_s8(v172, (int8x8_t)0xFF000000FFLL);
                v171.i64[0] = v174.u32[0];
                v171.i64[1] = v174.u32[1];
                v175.i32[0] = BYTE4(v168);
                v175.i32[1] = BYTE5(v168);
                v176 = vcvtq_f64_u64(v171);
                v177 = vand_s8(v175, (int8x8_t)0xFF000000FFLL);
                v171.i64[0] = v177.u32[0];
                v171.i64[1] = v177.u32[1];
                v178 = vcvtq_f64_u64(v171);
                v179.i32[0] = BYTE6(v168);
                v179.i32[1] = HIBYTE(v168);
                v180 = vand_s8(v179, (int8x8_t)0xFF000000FFLL);
                v171.i64[0] = v180.u32[0];
                v171.i64[1] = v180.u32[1];
                a5 = v171;
                v179.i32[0] = v167.u8[0];
                v179.i32[1] = v167.u8[1];
                v181 = vand_s8(v179, (int8x8_t)0xFF000000FFLL);
                v171.i64[0] = v181.u32[0];
                v171.i64[1] = v181.u32[1];
                v182 = vcvtq_f64_u64(v171);
                v183.i32[0] = v167.u8[2];
                v183.i32[1] = v167.u8[3];
                v184 = vand_s8(v183, (int8x8_t)0xFF000000FFLL);
                v185.i32[0] = v167.u8[4];
                v185.i32[1] = v167.u8[5];
                v186 = vand_s8(v185, (int8x8_t)0xFF000000FFLL);
                v171.i64[0] = v186.u32[0];
                v171.i64[1] = v186.u32[1];
                v187 = vcvtq_f64_u64(v171);
                v188.i32[0] = v167.u8[6];
                v188.i32[1] = v167.u8[7];
                *(int8x8_t *)v167.i8 = vand_s8(v188, (int8x8_t)0xFF000000FFLL);
                v171.i64[0] = v167.u32[0];
                v171.i64[1] = v167.u32[1];
                v189 = a8 + v165;
                *(float64x2_t *)(v189 + 32) = v187;
                *(float64x2_t *)(v189 + 48) = vcvtq_f64_u64(v171);
                v171.i64[0] = v184.u32[0];
                v171.i64[1] = v184.u32[1];
                *(float64x2_t *)v189 = v182;
                *(float64x2_t *)(v189 + 16) = vcvtq_f64_u64(v171);
                a4 = (int8x16_t)vcvtq_f64_u64(a5);
                *(float64x2_t *)(v189 + 96) = v178;
                *(int8x16_t *)(v189 + 112) = a4;
                *(float64x2_t *)(v189 + 64) = v173;
                *(float64x2_t *)(v189 + 80) = v176;
                result += 16;
                v165 += 128;
                v166 -= 16;
              }
              while (v166);
              if (v97 == (v97 & 0xFFFFFFFFFFFFFFF0))
                goto LABEL_42;
              v150 = v97 & 0xFFFFFFFFFFFFFFF0;
              v149 = v94 + (v97 & 0xFFFFFFFFFFFFFFF0);
              if ((v97 & 8) != 0)
                goto LABEL_62;
            }
            else
            {
              v150 = 0;
LABEL_62:
              v151 = v150 - (v97 & 0xFFFFFFFFFFFFFFF8);
              v152 = (uint64_t *)(v105 + v150);
              v153 = v102 + 8 * v150;
              do
              {
                v154 = *v152++;
                v155.i32[0] = v154;
                v155.i32[1] = BYTE1(v154);
                v156 = vand_s8(v155, (int8x8_t)0xFF000000FFLL);
                v157.i64[0] = v156.u32[0];
                v157.i64[1] = v156.u32[1];
                v158.i32[0] = BYTE2(v154);
                v158.i32[1] = BYTE3(v154);
                a5 = (uint64x2_t)vcvtq_f64_u64(v157);
                v159 = vand_s8(v158, (int8x8_t)0xFF000000FFLL);
                v157.i64[0] = v159.u32[0];
                v157.i64[1] = v159.u32[1];
                v160 = vcvtq_f64_u64(v157);
                v161.i32[0] = BYTE4(v154);
                v161.i32[1] = BYTE5(v154);
                v162 = vand_s8(v161, (int8x8_t)0xFF000000FFLL);
                v157.i64[0] = v162.u32[0];
                v157.i64[1] = v162.u32[1];
                v163.i32[0] = BYTE6(v154);
                a4 = (int8x16_t)vcvtq_f64_u64(v157);
                v163.i32[1] = HIBYTE(v154);
                v164 = vand_s8(v163, (int8x8_t)0xFF000000FFLL);
                v157.i64[0] = v164.u32[0];
                v157.i64[1] = v164.u32[1];
                *(int8x16_t *)(v153 + 32) = a4;
                *(float64x2_t *)(v153 + 48) = vcvtq_f64_u64(v157);
                *(uint64x2_t *)v153 = a5;
                *(float64x2_t *)(v153 + 16) = v160;
                v153 += 64;
                v151 += 8;
              }
              while (v151);
              v149 = v94 + (v97 & 0xFFFFFFFFFFFFFFF8);
              result = v97 & 0xFFFFFFFFFFFFFFF8;
              if (v97 == (v97 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_42;
            }
          }
        }
        do
        {
          a4.i8[0] = *(_BYTE *)(v12 + v149);
          *(double *)a4.i64 = (double)a4.u64[0];
          *(_QWORD *)(a8 + 8 * v149++) = a4.i64[0];
        }
        while (v149 < v13);
      }
LABEL_42:
      v12 += a2;
      a8 += v100;
      v15 = v106 - 1;
      ++v92;
      v105 += a2;
      v102 += v100;
      if (!v106)
        return result;
    }
    v146 = 0;
LABEL_54:
    result = a8 + 8 * v146;
    do
    {
      a4.i8[0] = *(_BYTE *)(v12 + v146);
      v147 = (double)a4.u64[0];
      a5.i8[0] = *(_BYTE *)(v12 + v146 + 1);
      v148 = (double)a5.u64[0];
      *(double *)result = v147;
      *(double *)(result + 8) = v148;
      LOBYTE(v147) = *(_BYTE *)(v12 + v146 + 2);
      *(double *)a4.i64 = (double)*(unint64_t *)&v147;
      LOBYTE(v148) = *(_BYTE *)(v12 + v146 + 3);
      *(double *)a5.i64 = (double)*(unint64_t *)&v148;
      *(_QWORD *)(result + 16) = a4.i64[0];
      *(_QWORD *)(result + 24) = a5.i64[0];
      v146 += 4;
      result += 32;
    }
    while (v146 <= v93);
    goto LABEL_56;
  }
  if ((int)v13 >= 1)
  {
    v16 = (_BYTE *)(result + 2);
    v17 = (double *)(a8 + 16);
    do
    {
      LOBYTE(a3) = *(v16 - 2);
      a3 = (double)*(unint64_t *)&a3;
      *(v17 - 2) = a3;
      if ((_DWORD)v13 != 1)
      {
        LOBYTE(a3) = *(v16 - 1);
        a3 = (double)*(unint64_t *)&a3;
        *(v17 - 1) = a3;
        if ((_DWORD)v13 != 2)
        {
          LOBYTE(a3) = *v16;
          a3 = (double)*(unint64_t *)&a3;
          *v17 = a3;
        }
      }
      v16 += a2;
      v17 += v14;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_100202F54(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  char *v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float64x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  float64x2_t *v24;
  int16x8_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int32x2_t v43;
  int32x2_t v44;
  int64x2_t v45;
  float64x2_t v46;
  int32x2_t v47;
  int32x2_t v48;
  int64x2_t v49;
  int32x2_t v50;
  int32x2_t v51;
  float64x2_t v52;
  int32x2_t v53;
  int32x2_t v54;
  float64x2_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int8x16_t v59;
  unint64_t v60;
  int32x2_t v61;
  int32x2_t v62;
  int64x2_t v63;
  float64x2_t v64;
  int32x2_t v65;
  int32x2_t v66;
  int64x2_t v67;
  int32x2_t v68;
  int32x2_t v69;
  float64x2_t v70;
  int32x2_t v71;
  int32x2_t v72;
  float64x2_t v73;
  int32x2_t v74;
  int32x2_t v75;
  float64x2_t v76;
  int32x2_t v77;
  int32x2_t v78;
  int32x2_t v79;
  float64x2_t v80;
  int32x2_t v81;
  float64x2_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v102;
  double *v103;
  unint64_t v104;
  int32x2_t v105;
  int32x2_t v106;
  int32x2_t v107;
  int32x2_t v108;
  int64x2_t v109;
  int32x2_t v110;
  int32x2_t v111;
  int32x2_t v112;
  int32x2_t v113;
  int32x2_t v114;
  int32x2_t v115;
  double *v116;
  int32x2_t v117;
  int64x2_t v118;
  int32x2_t v119;
  int32x2_t v120;
  float64x2_t v121;
  double *v122;
  unint64_t v123;
  double *v124;
  float64x2_t v125;
  double *v126;
  float64x2_t v127;
  double *v128;
  float64x2_t v129;
  double *v130;
  int32x2_t v131;
  int32x2_t v132;
  int32x2_t v133;
  int32x2_t v134;
  float64x2_t v135;
  double *v136;
  unint64_t v137;
  double v138;
  double v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  float64x2_t *v143;
  uint64_t v144;
  int32x2_t v145;
  int32x2_t v146;
  int64x2_t v147;
  float64x2_t v148;
  int32x2_t v149;
  int32x2_t v150;
  int64x2_t v151;
  int32x2_t v152;
  int32x2_t v153;
  int32x2_t v154;
  float64x2_t v155;
  int32x2_t v156;
  uint64_t v157;
  unint64_t v158;
  int8x16_t v159;
  unint64_t v160;
  int32x2_t v161;
  int32x2_t v162;
  int64x2_t v163;
  float64x2_t v164;
  int32x2_t v165;
  int32x2_t v166;
  int64x2_t v167;
  int32x2_t v168;
  int32x2_t v169;
  float64x2_t v170;
  int32x2_t v171;
  int32x2_t v172;
  float64x2_t v173;
  int32x2_t v174;
  int32x2_t v175;
  float64x2_t v176;
  int32x2_t v177;
  int32x2_t v178;
  int32x2_t v179;
  float64x2_t v180;
  int32x2_t v181;
  float64x2_t *v182;
  uint64_t v183;
  int8x16x4_t v185;
  float64x2x4_t v186;
  float64x2x4_t v187;

  v7 = a7[1];
  if (!v7)
    return result;
  v8 = result;
  v9 = *a7;
  v10 = a6 >> 3;
  v11 = v7 - 1;
  if ((int)v9 >= 8)
  {
    v14 = 0;
    v15 = (v9 - 4);
    v16 = a6 & 0xFFFFFFFFFFFFFFF8;
    result = a5;
    v17 = (float64x2_t *)(a5 + 32);
    v18 = 8 * v10;
    v19 = a5 + 24;
    v20 = v8;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = v11;
      v24 = v17;
      do
      {
        v25 = vmovl_s8(*(int8x8_t *)(v20 + v22));
        v26 = (int8x16_t)vmovl_s16(*(int16x4_t *)v25.i8);
        v27 = (int8x16_t)vmovl_high_s16(v25);
        v24[-2] = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v26.i8));
        v24[-1] = vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)));
        *v24 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v27.i8));
        v24[1] = vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)));
        v24 += 4;
        v22 += 8;
        v21 += 0x800000000;
      }
      while (v22 <= (v9 - 8));
      if ((int)v15 >= (int)v22)
        break;
      if ((int)v22 < (int)v9)
        goto LABEL_20;
LABEL_11:
      v20 += a2;
      result += v18;
      --v11;
      ++v14;
      v17 = (float64x2_t *)((char *)v17 + v18);
      v19 += v18;
      if (!v23)
        return result;
    }
    v28 = 0;
    v29 = 8 * (int)v22;
    v30 = (double *)(v19 + v29);
    v31 = v20 + (int)v22;
    do
    {
      v32 = (double)*(char *)(v31 + v28 + 1);
      *(v30 - 3) = (double)*(char *)(v31 + v28);
      v33 = result + v29 + 8 * v28;
      *(double *)(v33 + 8) = v32;
      v34 = (double)*(char *)(v31 + v28 + 3);
      *(double *)(v33 + 16) = (double)*(char *)(v31 + v28 + 2);
      *v30 = v34;
      v30 += 4;
      v28 += 4;
    }
    while ((int)v22 + v28 <= v15);
    LODWORD(v22) = v22 + v28;
    if ((int)v22 >= (int)v9)
      goto LABEL_11;
LABEL_20:
    v35 = (int)v22;
    v36 = v9 - (int)v22;
    if (v36 < 8)
    {
      v37 = v35;
      goto LABEL_36;
    }
    if (result + 8 * v35 < v8 + v9 + v14 * a2 && v20 + v35 < a5 + 8 * v9 + v16 * v14)
    {
      v37 = v35;
      goto LABEL_36;
    }
    if (v36 >= 0x10)
    {
      v38 = v36 & 0xFFFFFFFFFFFFFFF0;
      v56 = 8 * v35;
      v57 = v35;
      v58 = v36 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v59 = *(int8x16_t *)(v20 + v57);
        v60 = vextq_s8(v59, v59, 8uLL).u64[0];
        v61.i32[0] = v60;
        v61.i32[1] = BYTE1(v60);
        v62 = vshr_n_s32(vshl_n_s32(v61, 0x18uLL), 0x18uLL);
        v63.i64[0] = v62.i32[0];
        v63.i64[1] = v62.i32[1];
        v64 = vcvtq_f64_s64(v63);
        v65.i32[0] = BYTE2(v60);
        v65.i32[1] = BYTE3(v60);
        v66 = vshr_n_s32(vshl_n_s32(v65, 0x18uLL), 0x18uLL);
        v63.i64[0] = v66.i32[0];
        v63.i64[1] = v66.i32[1];
        v67 = v63;
        v68.i32[0] = BYTE4(v60);
        v68.i32[1] = BYTE5(v60);
        v69 = vshr_n_s32(vshl_n_s32(v68, 0x18uLL), 0x18uLL);
        v63.i64[0] = v69.i32[0];
        v63.i64[1] = v69.i32[1];
        v70 = vcvtq_f64_s64(v63);
        v71.i32[0] = BYTE6(v60);
        v71.i32[1] = HIBYTE(v60);
        v72 = vshr_n_s32(vshl_n_s32(v71, 0x18uLL), 0x18uLL);
        v63.i64[0] = v72.i32[0];
        v63.i64[1] = v72.i32[1];
        v73 = vcvtq_f64_s64(v63);
        v71.i32[0] = v59.u8[0];
        v71.i32[1] = v59.u8[1];
        v74 = vshr_n_s32(vshl_n_s32(v71, 0x18uLL), 0x18uLL);
        v63.i64[0] = v74.i32[0];
        v63.i64[1] = v74.i32[1];
        v75.i32[0] = v59.u8[2];
        v76 = vcvtq_f64_s64(v63);
        v75.i32[1] = v59.u8[3];
        v77 = vshr_n_s32(vshl_n_s32(v75, 0x18uLL), 0x18uLL);
        v78.i32[0] = v59.u8[4];
        v78.i32[1] = v59.u8[5];
        v79 = vshr_n_s32(vshl_n_s32(v78, 0x18uLL), 0x18uLL);
        v63.i64[0] = v79.i32[0];
        v63.i64[1] = v79.i32[1];
        v80 = vcvtq_f64_s64(v63);
        v81.i32[0] = v59.u8[6];
        v81.i32[1] = v59.u8[7];
        *(int32x2_t *)v59.i8 = vshr_n_s32(vshl_n_s32(v81, 0x18uLL), 0x18uLL);
        v63.i64[0] = v59.i32[0];
        v63.i64[1] = v59.i32[1];
        v82 = (float64x2_t *)(result + v56);
        v82[2] = v80;
        v82[3] = vcvtq_f64_s64(v63);
        v63.i64[0] = v77.i32[0];
        v63.i64[1] = v77.i32[1];
        *v82 = v76;
        v82[1] = vcvtq_f64_s64(v63);
        v82[6] = v70;
        v82[7] = v73;
        v82[4] = v64;
        v82[5] = vcvtq_f64_s64(v67);
        v57 += 16;
        v56 += 128;
        v58 -= 16;
      }
      while (v58);
      if (v36 == v38)
        goto LABEL_11;
      if ((v36 & 8) == 0)
      {
        v37 = v38 + v35;
        do
        {
LABEL_36:
          *(double *)(result + 8 * v37) = (double)*(char *)(v20 + v37);
          ++v37;
        }
        while (v9 != v37);
        goto LABEL_11;
      }
    }
    else
    {
      v38 = 0;
    }
    v37 = (v36 & 0xFFFFFFFFFFFFFFF8) + v35;
    v39 = v38 - (v36 & 0xFFFFFFFFFFFFFFF8);
    v40 = v38 + v35;
    v41 = 8 * v40;
    do
    {
      v42 = *(_QWORD *)(v20 + v40);
      v43.i32[0] = v42;
      v43.i32[1] = BYTE1(v42);
      v44 = vshr_n_s32(vshl_n_s32(v43, 0x18uLL), 0x18uLL);
      v45.i64[0] = v44.i32[0];
      v45.i64[1] = v44.i32[1];
      v46 = vcvtq_f64_s64(v45);
      v47.i32[0] = BYTE2(v42);
      v47.i32[1] = BYTE3(v42);
      v48 = vshr_n_s32(vshl_n_s32(v47, 0x18uLL), 0x18uLL);
      v45.i64[0] = v48.i32[0];
      v45.i64[1] = v48.i32[1];
      v49 = v45;
      v50.i32[0] = BYTE4(v42);
      v50.i32[1] = BYTE5(v42);
      v51 = vshr_n_s32(vshl_n_s32(v50, 0x18uLL), 0x18uLL);
      v45.i64[0] = v51.i32[0];
      v45.i64[1] = v51.i32[1];
      v52 = vcvtq_f64_s64(v45);
      v53.i32[0] = BYTE6(v42);
      v53.i32[1] = HIBYTE(v42);
      v54 = vshr_n_s32(vshl_n_s32(v53, 0x18uLL), 0x18uLL);
      v45.i64[0] = v54.i32[0];
      v45.i64[1] = v54.i32[1];
      v55 = (float64x2_t *)(result + v41);
      v55[2] = v52;
      v55[3] = vcvtq_f64_s64(v45);
      *v55 = v46;
      v55[1] = vcvtq_f64_s64(v49);
      v40 += 8;
      v41 += 64;
      v39 += 8;
    }
    while (v39);
    if (v36 == (v36 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_11;
    goto LABEL_36;
  }
  if ((int)v9 >= 4)
  {
    v83 = 0;
    v84 = (v9 - 4);
    v85 = (v84 & 0xFFFFFFFC) + 4;
    v86 = a6 & 0xFFFFFFFFFFFFFFF8;
    if ((unint64_t)(v84 & 0xFFFFFFFC) + 5 <= v9)
      v87 = *a7;
    else
      v87 = (v84 & 0xFFFFFFFC) + 5;
    v88 = v87 - (v84 & 0xFFFFFFFC) - 4;
    v89 = 32 * (v84 >> 2) + 32;
    v90 = (v84 >> 2) + 1;
    v91 = 8 * v10;
    v92 = result + v85;
    v93 = (double *)a5;
    v94 = a5 + v89;
    v95 = a5 + ((8 * (v9 - 4)) & 0x7FFFFFFE0) + 32;
    v183 = a5 + 8 * v87;
    v96 = result + v87;
    v97 = result + v85;
    while (1)
    {
      v98 = v11;
      v99 = v86 * v83;
      v100 = v92 + v83 * a2;
      if (v84 < 0x3C)
        break;
      if ((unint64_t)v93 < v100 && v8 < a5 + v89 + v99)
        break;
      v102 = v90 & 0x7FFFFFF0;
      v103 = v93;
      result = v8;
      do
      {
        v185 = vld4q_s8((const char *)result);
        result += 64;
        v104 = vextq_s8(v185.val[0], v185.val[0], 8uLL).u64[0];
        v105.i32[0] = BYTE4(v104);
        v105.i32[1] = BYTE5(v104);
        v106.i32[0] = v185.val[0].u8[4];
        v106.i32[1] = v185.val[0].u8[5];
        v107.i32[0] = v185.val[0].u8[0];
        v107.i32[1] = v185.val[0].u8[1];
        v108 = vshr_n_s32(vshl_n_s32(v107, 0x18uLL), 0x18uLL);
        v109.i64[0] = v108.i32[0];
        v109.i64[1] = v108.i32[1];
        v110.i32[0] = v185.val[1].u8[0];
        v110.i32[1] = v185.val[1].u8[1];
        v186.val[0] = vcvtq_f64_s64(v109);
        v111 = vshr_n_s32(vshl_n_s32(v110, 0x18uLL), 0x18uLL);
        v109.i64[0] = v111.i32[0];
        v109.i64[1] = v111.i32[1];
        v186.val[1] = vcvtq_f64_s64(v109);
        v111.i32[0] = v185.val[2].u8[0];
        v111.i32[1] = v185.val[2].u8[1];
        v112 = vshr_n_s32(vshl_n_s32(v111, 0x18uLL), 0x18uLL);
        v109.i64[0] = v112.i32[0];
        v109.i64[1] = v112.i32[1];
        v186.val[2] = vcvtq_f64_s64(v109);
        v112.i32[0] = v185.val[3].u8[0];
        v112.i32[1] = v185.val[3].u8[1];
        v113 = vshr_n_s32(vshl_n_s32(v106, 0x18uLL), 0x18uLL);
        v114 = vshr_n_s32(vshl_n_s32(v112, 0x18uLL), 0x18uLL);
        v109.i64[0] = v114.i32[0];
        v109.i64[1] = v114.i32[1];
        v186.val[3] = vcvtq_f64_s64(v109);
        v114.i32[0] = v185.val[0].u8[2];
        v114.i32[1] = v185.val[0].u8[3];
        v115 = vshr_n_s32(vshl_n_s32(v114, 0x18uLL), 0x18uLL);
        v116 = v103;
        vst4q_f64(v116, v186);
        v116 += 8;
        v109.i64[0] = v115.i32[0];
        v109.i64[1] = v115.i32[1];
        v110.i32[0] = v185.val[1].u8[2];
        v110.i32[1] = v185.val[1].u8[3];
        v186.val[0] = vcvtq_f64_s64(v109);
        v117 = vshr_n_s32(vshl_n_s32(v110, 0x18uLL), 0x18uLL);
        v109.i64[0] = v117.i32[0];
        v109.i64[1] = v117.i32[1];
        v186.val[1] = vcvtq_f64_s64(v109);
        v117.i32[0] = v185.val[2].u8[2];
        v117.i32[1] = v185.val[2].u8[3];
        v109.i64[0] = v113.i32[0];
        v109.i64[1] = v113.i32[1];
        v118 = v109;
        v119 = vshr_n_s32(vshl_n_s32(v117, 0x18uLL), 0x18uLL);
        v109.i64[0] = v119.i32[0];
        v109.i64[1] = v119.i32[1];
        v186.val[2] = vcvtq_f64_s64(v109);
        v119.i32[0] = v185.val[3].u8[2];
        v119.i32[1] = v185.val[3].u8[3];
        v120 = vshr_n_s32(vshl_n_s32(v119, 0x18uLL), 0x18uLL);
        v109.i64[0] = v120.i32[0];
        v109.i64[1] = v120.i32[1];
        v186.val[3] = vcvtq_f64_s64(v109);
        vst4q_f64(v116, v186);
        v121 = vcvtq_f64_s64(v118);
        v118.i32[0] = v185.val[1].u8[4];
        v118.i32[1] = v185.val[1].u8[5];
        *(int32x2_t *)v118.i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v118.i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v118.i32[0];
        v109.i64[1] = v118.i32[1];
        v120.i32[0] = v185.val[2].u8[4];
        v120.i32[1] = v185.val[2].u8[5];
        v186.val[0] = vcvtq_f64_s64(v109);
        *(int32x2_t *)v118.i8 = vshr_n_s32(vshl_n_s32(v120, 0x18uLL), 0x18uLL);
        v109.i64[0] = v118.i32[0];
        v109.i64[1] = v118.i32[1];
        v186.val[1] = vcvtq_f64_s64(v109);
        v118.i32[0] = v185.val[3].u8[4];
        v118.i32[1] = v185.val[3].u8[5];
        *(int32x2_t *)v118.i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v118.i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v118.i32[0];
        v109.i64[1] = v118.i32[1];
        v186.val[2] = vcvtq_f64_s64(v109);
        LODWORD(v186.val[3].f64[0]) = BYTE2(v104);
        HIDWORD(v186.val[3].f64[0]) = BYTE3(v104);
        v122 = v103 + 16;
        vst4q_f64(v122, v186);
        LODWORD(v121.f64[0]) = v185.val[0].u8[6];
        HIDWORD(v121.f64[0]) = v185.val[0].u8[7];
        v123 = vextq_s8(v185.val[1], v185.val[1], 8uLL).u64[0];
        LODWORD(v186.val[0].f64[0]) = v185.val[1].u8[6];
        HIDWORD(v186.val[0].f64[0]) = v185.val[1].u8[7];
        v118.i64[0] = vextq_s8(v185.val[2], v185.val[2], 8uLL).u64[0];
        v185.val[0].i64[0] = vextq_s8(v185.val[3], v185.val[3], 8uLL).u64[0];
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v121.f64[0], 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v187.val[0] = vcvtq_f64_s64(v109);
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v186.val[0].f64[0], 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v187.val[1] = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v185.val[2].u8[6];
        v185.val[1].i32[1] = v185.val[2].u8[7];
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v187.val[2] = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v185.val[3].u8[6];
        v185.val[1].i32[1] = v185.val[3].u8[7];
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v187.val[3] = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v104;
        v185.val[1].i32[1] = BYTE1(v104);
        v124 = v103 + 24;
        vst4q_f64(v124, v187);
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v125 = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v123;
        v185.val[1].i32[1] = BYTE1(v123);
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v186.val[0] = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v118.u8[0];
        v185.val[1].i32[1] = v118.u8[1];
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v186.val[1] = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v185.val[0].u8[0];
        v185.val[1].i32[1] = v185.val[0].u8[1];
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v186.val[2] = vcvtq_f64_s64(v109);
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v186.val[3].f64[0], 0x18uLL), 0x18uLL);
        v126 = v103 + 32;
        vst4q_f64(v126, v186);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v185.val[2].i32[0] = BYTE2(v123);
        v185.val[2].i32[1] = BYTE3(v123);
        v127 = vcvtq_f64_s64(v109);
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[2].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v186.val[0] = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v118.u8[2];
        v185.val[1].i32[1] = v118.u8[3];
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v186.val[1] = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v185.val[0].u8[2];
        v185.val[1].i32[1] = v185.val[0].u8[3];
        *(int32x2_t *)v185.val[2].i8 = vshr_n_s32(vshl_n_s32(v105, 0x18uLL), 0x18uLL);
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v186.val[2] = vcvtq_f64_s64(v109);
        v128 = v103 + 40;
        vst4q_f64(v128, v186);
        v109.i64[0] = v185.val[2].i32[0];
        v109.i64[1] = v185.val[2].i32[1];
        v185.val[1] = (int8x16_t)vcvtq_f64_s64(v109);
        LODWORD(v127.f64[0]) = BYTE4(v123);
        HIDWORD(v127.f64[0]) = BYTE5(v123);
        *(int32x2_t *)&v127.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v127.f64[0], 0x18uLL), 0x18uLL);
        v109.i64[0] = SLODWORD(v127.f64[0]);
        v109.i64[1] = SHIDWORD(v127.f64[0]);
        v185.val[2] = (int8x16_t)vcvtq_f64_s64(v109);
        LODWORD(v127.f64[0]) = v118.u8[4];
        HIDWORD(v127.f64[0]) = v118.u8[5];
        *(int32x2_t *)&v127.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v127.f64[0], 0x18uLL), 0x18uLL);
        v109.i64[0] = SLODWORD(v127.f64[0]);
        v109.i64[1] = SHIDWORD(v127.f64[0]);
        LODWORD(v186.val[0].f64[0]) = v185.val[0].u8[4];
        HIDWORD(v186.val[0].f64[0]) = v185.val[0].u8[5];
        v185.val[3] = (int8x16_t)vcvtq_f64_s64(v109);
        *(int32x2_t *)&v127.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v186.val[0].f64[0], 0x18uLL), 0x18uLL);
        v109.i64[0] = SLODWORD(v127.f64[0]);
        v109.i64[1] = SHIDWORD(v127.f64[0]);
        v129 = vcvtq_f64_s64(v109);
        v130 = v103 + 48;
        vst4q_f64(v130, *(float64x2x4_t *)((char *)&v185 + 16));
        v185.val[1].i32[0] = BYTE6(v104);
        v185.val[1].i32[1] = HIBYTE(v104);
        v131 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v131.i32[0];
        v109.i64[1] = v131.i32[1];
        v185.val[1] = (int8x16_t)vcvtq_f64_s64(v109);
        v131.i32[0] = BYTE6(v123);
        v131.i32[1] = HIBYTE(v123);
        v132 = vshr_n_s32(vshl_n_s32(v131, 0x18uLL), 0x18uLL);
        v109.i64[0] = v132.i32[0];
        v109.i64[1] = v132.i32[1];
        v185.val[2] = (int8x16_t)vcvtq_f64_s64(v109);
        v132.i32[0] = v118.u8[6];
        v132.i32[1] = v118.u8[7];
        v185.val[0].i32[0] = v185.val[0].u8[6];
        v133 = vshr_n_s32(vshl_n_s32(v132, 0x18uLL), 0x18uLL);
        v109.i64[0] = v133.i32[0];
        v109.i64[1] = v133.i32[1];
        v185.val[0].i32[1] = v185.val[0].u8[7];
        v185.val[3] = (int8x16_t)vcvtq_f64_s64(v109);
        v134 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[0].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v134.i32[0];
        v109.i64[1] = v134.i32[1];
        v135 = vcvtq_f64_s64(v109);
        v136 = v103 + 56;
        vst4q_f64(v136, *(float64x2x4_t *)((char *)&v185 + 16));
        v103 += 64;
        v102 -= 16;
      }
      while (v102);
      v137 = 4 * (v90 & 0x7FFFFFF0);
      if (v90 != (v90 & 0x7FFFFFF0))
        goto LABEL_54;
LABEL_56:
      if ((int)v9 > (int)v137)
      {
        v140 = (v84 & 0xFFFFFFFC) + 4;
        if (v88 >= 8)
        {
          if (v95 + v99 >= v96 + v83 * a2 || (v140 = (v84 & 0xFFFFFFFC) + 4, v100 >= v183 + v99))
          {
            if (v88 >= 0x10)
            {
              v157 = 32 * (v84 >> 2) + 32;
              result = (v84 & 0xFFFFFFFC) + 4;
              v158 = v88 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v159 = *(int8x16_t *)(v8 + result);
                v160 = vextq_s8(v159, v159, 8uLL).u64[0];
                v161.i32[0] = v160;
                v161.i32[1] = BYTE1(v160);
                v162 = vshr_n_s32(vshl_n_s32(v161, 0x18uLL), 0x18uLL);
                v163.i64[0] = v162.i32[0];
                v163.i64[1] = v162.i32[1];
                v164 = vcvtq_f64_s64(v163);
                v165.i32[0] = BYTE2(v160);
                v165.i32[1] = BYTE3(v160);
                v166 = vshr_n_s32(vshl_n_s32(v165, 0x18uLL), 0x18uLL);
                v163.i64[0] = v166.i32[0];
                v163.i64[1] = v166.i32[1];
                v167 = v163;
                v168.i32[0] = BYTE4(v160);
                v168.i32[1] = BYTE5(v160);
                v169 = vshr_n_s32(vshl_n_s32(v168, 0x18uLL), 0x18uLL);
                v163.i64[0] = v169.i32[0];
                v163.i64[1] = v169.i32[1];
                v170 = vcvtq_f64_s64(v163);
                v171.i32[0] = BYTE6(v160);
                v171.i32[1] = HIBYTE(v160);
                v172 = vshr_n_s32(vshl_n_s32(v171, 0x18uLL), 0x18uLL);
                v163.i64[0] = v172.i32[0];
                v163.i64[1] = v172.i32[1];
                v173 = vcvtq_f64_s64(v163);
                v171.i32[0] = v159.u8[0];
                v171.i32[1] = v159.u8[1];
                v174 = vshr_n_s32(vshl_n_s32(v171, 0x18uLL), 0x18uLL);
                v163.i64[0] = v174.i32[0];
                v163.i64[1] = v174.i32[1];
                v175.i32[0] = v159.u8[2];
                v176 = vcvtq_f64_s64(v163);
                v175.i32[1] = v159.u8[3];
                v177 = vshr_n_s32(vshl_n_s32(v175, 0x18uLL), 0x18uLL);
                v178.i32[0] = v159.u8[4];
                v178.i32[1] = v159.u8[5];
                v179 = vshr_n_s32(vshl_n_s32(v178, 0x18uLL), 0x18uLL);
                v163.i64[0] = v179.i32[0];
                v163.i64[1] = v179.i32[1];
                v180 = vcvtq_f64_s64(v163);
                v181.i32[0] = v159.u8[6];
                v181.i32[1] = v159.u8[7];
                *(int32x2_t *)v159.i8 = vshr_n_s32(vshl_n_s32(v181, 0x18uLL), 0x18uLL);
                v163.i64[0] = v159.i32[0];
                v163.i64[1] = v159.i32[1];
                v182 = (float64x2_t *)((char *)v93 + v157);
                v182[2] = v180;
                v182[3] = vcvtq_f64_s64(v163);
                v163.i64[0] = v177.i32[0];
                v163.i64[1] = v177.i32[1];
                *v182 = v176;
                v182[1] = vcvtq_f64_s64(v163);
                v182[6] = v170;
                v182[7] = v173;
                v182[4] = v164;
                v182[5] = vcvtq_f64_s64(v167);
                result += 16;
                v157 += 128;
                v158 -= 16;
              }
              while (v158);
              if (v88 == (v88 & 0xFFFFFFFFFFFFFFF0))
                goto LABEL_42;
              v141 = v88 & 0xFFFFFFFFFFFFFFF0;
              v140 = v85 + (v88 & 0xFFFFFFFFFFFFFFF0);
              if ((v88 & 8) != 0)
                goto LABEL_62;
            }
            else
            {
              v141 = 0;
LABEL_62:
              v142 = v141 - (v88 & 0xFFFFFFFFFFFFFFF8);
              result = v97 + v141;
              v143 = (float64x2_t *)(v94 + 8 * v141);
              do
              {
                v144 = *(_QWORD *)result;
                result += 8;
                v145.i32[0] = v144;
                v145.i32[1] = BYTE1(v144);
                v146 = vshr_n_s32(vshl_n_s32(v145, 0x18uLL), 0x18uLL);
                v147.i64[0] = v146.i32[0];
                v147.i64[1] = v146.i32[1];
                v148 = vcvtq_f64_s64(v147);
                v149.i32[0] = BYTE2(v144);
                v149.i32[1] = BYTE3(v144);
                v150 = vshr_n_s32(vshl_n_s32(v149, 0x18uLL), 0x18uLL);
                v147.i64[0] = v150.i32[0];
                v147.i64[1] = v150.i32[1];
                v151 = v147;
                v152.i32[0] = BYTE4(v144);
                v152.i32[1] = BYTE5(v144);
                v153 = vshr_n_s32(vshl_n_s32(v152, 0x18uLL), 0x18uLL);
                v147.i64[0] = v153.i32[0];
                v147.i64[1] = v153.i32[1];
                v154.i32[0] = BYTE6(v144);
                v154.i32[1] = HIBYTE(v144);
                v155 = vcvtq_f64_s64(v147);
                v156 = vshr_n_s32(vshl_n_s32(v154, 0x18uLL), 0x18uLL);
                v147.i64[0] = v156.i32[0];
                v147.i64[1] = v156.i32[1];
                v143[2] = v155;
                v143[3] = vcvtq_f64_s64(v147);
                *v143 = v148;
                v143[1] = vcvtq_f64_s64(v151);
                v143 += 4;
                v142 += 8;
              }
              while (v142);
              v140 = v85 + (v88 & 0xFFFFFFFFFFFFFFF8);
              if (v88 == (v88 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_42;
            }
          }
        }
        do
        {
          v93[v140] = (double)*(char *)(v8 + v140);
          ++v140;
        }
        while (v140 < v9);
      }
LABEL_42:
      v8 += a2;
      v93 = (double *)((char *)v93 + v91);
      v11 = v98 - 1;
      ++v83;
      v97 += a2;
      v94 += v91;
      if (!v98)
        return result;
    }
    v137 = 0;
LABEL_54:
    result = (uint64_t)&v93[v137];
    do
    {
      v138 = (double)*(char *)(v8 + v137 + 1);
      *(double *)result = (double)*(char *)(v8 + v137);
      *(double *)(result + 8) = v138;
      v139 = (double)*(char *)(v8 + v137 + 3);
      *(double *)(result + 16) = (double)*(char *)(v8 + v137 + 2);
      *(double *)(result + 24) = v139;
      v137 += 4;
      result += 32;
    }
    while (v137 <= v84);
    goto LABEL_56;
  }
  if ((int)v9 >= 1)
  {
    v12 = (char *)(result + 2);
    v13 = (double *)(a5 + 16);
    do
    {
      *(v13 - 2) = (double)*(v12 - 2);
      if ((_DWORD)v9 != 1)
      {
        *(v13 - 1) = (double)*(v12 - 1);
        if ((_DWORD)v9 != 2)
          *v13 = (double)*v12;
      }
      v12 += a2;
      v13 += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint16x4_t *sub_100203BD8(uint16x4_t *result, unint64_t a2, double a3, double a4, __n128 a5, uint64_t a6, uint64_t a7, float64x2_t *a8, unint64_t a9, unsigned int *a10)
{
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _WORD *v14;
  uint64_t v15;
  double *f64;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  float64x2_t *v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint16x4_t *v28;
  float64x2_t *v29;
  uint16x4_t v30;
  uint32x4_t v31;
  int64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  _WORD *v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint16x8_t v49;
  uint32x4_t v50;
  uint64x2_t v51;
  uint64x2_t v52;
  uint32x4_t v53;
  float64x2_t v54;
  uint64_t v55;

  v10 = a10[1];
  if (!v10)
    return result;
  v11 = *a10;
  v12 = a2 >> 1;
  v13 = a9 >> 3;
  if ((int)v11 >= 4)
  {
    v18 = v10 - 1;
    v19 = (v11 - 4);
    v20 = a8 + 1;
    v21 = 8 * v13;
    v22 = 2 * v12;
    v23 = (float64x2_t *)((char *)a8 + 24);
    v24 = (uint64_t)result + 4;
    while (1)
    {
      v25 = 0;
      v26 = 0;
      v27 = v18;
      v28 = result;
      v29 = v20;
      do
      {
        v30 = *v28++;
        v31 = vmovl_u16(v30);
        v32.i64[0] = v31.u32[0];
        v32.i64[1] = v31.u32[1];
        v33 = vcvtq_f64_s64(v32);
        v32.i64[0] = v31.u32[2];
        v32.i64[1] = v31.u32[3];
        v34 = vcvtq_f64_s64(v32);
        v29[-1] = v33;
        *v29 = v34;
        v26 += 4;
        v25 += 0x400000000;
        v29 += 2;
      }
      while (v26 <= v19);
      if ((int)v19 >= (int)v26)
      {
        v35 = 0;
        v36 = (int)v26;
        v37 = &v23->f64[v36];
        v38 = 2 * (int)v26;
        v39 = (_WORD *)(v24 + v38);
        v40 = (uint64_t)a8 + v36 * 8;
        v41 = (uint64_t)result + v38;
        do
        {
          LOWORD(v34.f64[0]) = *(v39 - 2);
          v42 = (double)*(unint64_t *)&v34.f64[0];
          LOWORD(v33.f64[0]) = *(_WORD *)(v41 + 2 * v35 + 2);
          v33.f64[0] = (double)*(unint64_t *)&v33.f64[0];
          *(v37 - 3) = v42;
          v43 = v40 + 8 * v35;
          LOWORD(v42) = *v39;
          v34.f64[0] = (double)*(unint64_t *)&v42;
          a5.n128_u16[0] = v39[1];
          a5.n128_f64[0] = (double)a5.n128_u64[0];
          *(float64_t *)(v43 + 8) = v33.f64[0];
          *(float64_t *)(v43 + 16) = v34.f64[0];
          *v37 = a5.n128_f64[0];
          v37 += 4;
          v35 += 4;
          v39 += 4;
        }
        while ((int)v26 + v35 <= v19);
        LODWORD(v26) = v26 + v35;
        if ((int)v26 < (int)v11)
        {
LABEL_19:
          v44 = (int)v26;
          v45 = v11 - (int)v26;
          v26 = (int)v26;
          if (v45 < 8)
            goto LABEL_27;
          v26 = (v45 & 0xFFFFFFFFFFFFFFF8) + (int)v26;
          v46 = 2 * v44;
          v47 = 8 * v44;
          v48 = v45 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v49 = *(uint16x8_t *)&result->i8[v46];
            v50 = vmovl_u16(*(uint16x4_t *)v49.i8);
            v51.i64[0] = v50.u32[0];
            v51.i64[1] = v50.u32[1];
            a5 = (__n128)vcvtq_f64_u64(v51);
            v51.i64[0] = v50.u32[2];
            v51.i64[1] = v50.u32[3];
            v52 = v51;
            v53 = vmovl_high_u16(v49);
            v51.i64[0] = v53.u32[0];
            v51.i64[1] = v53.u32[1];
            v54 = vcvtq_f64_u64(v51);
            v51.i64[0] = v53.u32[2];
            v51.i64[1] = v53.u32[3];
            v55 = (uint64_t)a8 + v47;
            *(float64x2_t *)(v55 + 32) = v54;
            *(float64x2_t *)(v55 + 48) = vcvtq_f64_u64(v51);
            v34 = vcvtq_f64_u64(v52);
            *(__n128 *)v55 = a5;
            *(float64x2_t *)(v55 + 16) = v34;
            v46 += 16;
            v47 += 64;
            v48 -= 8;
          }
          while (v48);
          if (v45 != (v45 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_27:
            do
            {
              LOWORD(v34.f64[0]) = result->i16[v26];
              v34.f64[0] = (double)*(unint64_t *)&v34.f64[0];
              a8->f64[v26++] = v34.f64[0];
            }
            while (v11 != v26);
          }
        }
      }
      else if ((int)v26 < (int)v11)
      {
        goto LABEL_19;
      }
      v18 = v27 - 1;
      v20 = (float64x2_t *)((char *)v20 + v21);
      result = (uint16x4_t *)((char *)result + v22);
      v23 = (float64x2_t *)((char *)v23 + v21);
      v24 += v22;
      a8 = (float64x2_t *)((char *)a8 + v21);
      if (!v27)
        return result;
    }
  }
  if ((int)v11 >= 1)
  {
    v14 = (_WORD *)result + 2;
    v15 = 2 * v12;
    f64 = a8[1].f64;
    v17 = 8 * v13;
    do
    {
      LOWORD(a3) = *(v14 - 2);
      a3 = (double)*(unint64_t *)&a3;
      *(f64 - 2) = a3;
      if ((_DWORD)v11 != 1)
      {
        LOWORD(a3) = *(v14 - 1);
        a3 = (double)*(unint64_t *)&a3;
        *(f64 - 1) = a3;
        if ((_DWORD)v11 != 2)
        {
          LOWORD(a3) = *v14;
          a3 = (double)*(unint64_t *)&a3;
          *f64 = a3;
        }
      }
      v14 = (_WORD *)((char *)v14 + v15);
      f64 = (double *)((char *)f64 + v17);
      --v10;
    }
    while (v10);
  }
  return result;
}

int16x4_t *sub_100203E04(int16x4_t *result, unint64_t a2, double a3, double a4, __n128 a5, uint64_t a6, uint64_t a7, float64x2_t *a8, unint64_t a9, unsigned int *a10)
{
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _WORD *v14;
  uint64_t v15;
  double *f64;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  float64x2_t *v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int16x4_t *v28;
  float64x2_t *v29;
  int16x4_t v30;
  int8x16_t v31;
  float64x2_t v32;
  float64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int32x4_t v52;
  float64x2_t v53;
  uint64_t v54;

  v10 = a10[1];
  if (!v10)
    return result;
  v11 = *a10;
  v12 = a2 >> 1;
  v13 = a9 >> 3;
  if ((int)v11 >= 4)
  {
    v18 = v10 - 1;
    v19 = (v11 - 4);
    v20 = a8 + 1;
    v21 = 8 * v13;
    v22 = 2 * v12;
    v23 = (float64x2_t *)((char *)a8 + 24);
    v24 = (uint64_t)result + 4;
    while (1)
    {
      v25 = 0;
      v26 = 0;
      v27 = v18;
      v28 = result;
      v29 = v20;
      do
      {
        v30 = *v28++;
        v31 = (int8x16_t)vmovl_s16(v30);
        v32 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v31.i8));
        v33 = vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)));
        v29[-1] = v32;
        *v29 = v33;
        v26 += 4;
        v25 += 0x400000000;
        v29 += 2;
      }
      while (v26 <= v19);
      if ((int)v19 >= (int)v26)
      {
        v34 = 0;
        v35 = (int)v26;
        v36 = &v23->f64[v35];
        v37 = 2 * (int)v26;
        v38 = (_WORD *)(v24 + v37);
        v39 = (uint64_t)a8 + v35 * 8;
        v40 = (uint64_t)result + v37;
        do
        {
          LOWORD(v33.f64[0]) = *(v38 - 2);
          v41 = (double)vmovl_s16(*(int16x4_t *)&v33.f64[0]).i32[0];
          LOWORD(v32.f64[0]) = *(_WORD *)(v40 + 2 * v34 + 2);
          v32.f64[0] = (double)vmovl_s16(*(int16x4_t *)&v32.f64[0]).i32[0];
          *(v36 - 3) = v41;
          v42 = v39 + 8 * v34;
          LOWORD(v41) = *v38;
          v33.f64[0] = (double)vmovl_s16(*(int16x4_t *)&v41).i32[0];
          a5.n128_u16[0] = v38[1];
          a5.n128_f64[0] = (double)vmovl_s16((int16x4_t)a5.n128_u64[0]).i32[0];
          *(float64_t *)(v42 + 8) = v32.f64[0];
          *(float64_t *)(v42 + 16) = v33.f64[0];
          *v36 = a5.n128_f64[0];
          v36 += 4;
          v34 += 4;
          v38 += 4;
        }
        while ((int)v26 + v34 <= v19);
        LODWORD(v26) = v26 + v34;
        if ((int)v26 < (int)v11)
        {
LABEL_19:
          v43 = (int)v26;
          v44 = v11 - (int)v26;
          v26 = (int)v26;
          if (v44 < 8)
            goto LABEL_27;
          v26 = (v44 & 0xFFFFFFFFFFFFFFF8) + (int)v26;
          v45 = 2 * v43;
          v46 = 8 * v43;
          v47 = v44 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v48 = *(int16x8_t *)&result->i8[v45];
            v49 = vmovl_s16(*(int16x4_t *)v48.i8);
            v50.i64[0] = v49.i32[0];
            v50.i64[1] = v49.i32[1];
            a5 = (__n128)vcvtq_f64_s64(v50);
            v50.i64[0] = v49.i32[2];
            v50.i64[1] = v49.i32[3];
            v51 = v50;
            v52 = vmovl_high_s16(v48);
            v50.i64[0] = v52.i32[0];
            v50.i64[1] = v52.i32[1];
            v53 = vcvtq_f64_s64(v50);
            v50.i64[0] = v52.i32[2];
            v50.i64[1] = v52.i32[3];
            v54 = (uint64_t)a8 + v46;
            *(float64x2_t *)(v54 + 32) = v53;
            *(float64x2_t *)(v54 + 48) = vcvtq_f64_s64(v50);
            v33 = vcvtq_f64_s64(v51);
            *(__n128 *)v54 = a5;
            *(float64x2_t *)(v54 + 16) = v33;
            v45 += 16;
            v46 += 64;
            v47 -= 8;
          }
          while (v47);
          if (v44 != (v44 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_27:
            do
            {
              LOWORD(v33.f64[0]) = result->i16[v26];
              v33.f64[0] = (double)vmovl_s16(*(int16x4_t *)&v33.f64[0]).i32[0];
              a8->f64[v26++] = v33.f64[0];
            }
            while (v11 != v26);
          }
        }
      }
      else if ((int)v26 < (int)v11)
      {
        goto LABEL_19;
      }
      v18 = v27 - 1;
      v20 = (float64x2_t *)((char *)v20 + v21);
      result = (int16x4_t *)((char *)result + v22);
      v23 = (float64x2_t *)((char *)v23 + v21);
      v24 += v22;
      a8 = (float64x2_t *)((char *)a8 + v21);
      if (!v27)
        return result;
    }
  }
  if ((int)v11 >= 1)
  {
    v14 = (_WORD *)result + 2;
    v15 = 2 * v12;
    f64 = a8[1].f64;
    v17 = 8 * v13;
    do
    {
      LOWORD(a3) = *(v14 - 2);
      a3 = (double)vmovl_s16(*(int16x4_t *)&a3).i32[0];
      *(f64 - 2) = a3;
      if ((_DWORD)v11 != 1)
      {
        LOWORD(a3) = *(v14 - 1);
        a3 = (double)vmovl_s16(*(int16x4_t *)&a3).i32[0];
        *(f64 - 1) = a3;
        if ((_DWORD)v11 != 2)
        {
          LOWORD(a3) = *v14;
          a3 = (double)vmovl_s16(*(int16x4_t *)&a3).i32[0];
          *f64 = a3;
        }
      }
      v14 = (_WORD *)((char *)v14 + v15);
      f64 = (double *)((char *)f64 + v17);
      --v10;
    }
    while (v10);
  }
  return result;
}

int8x16_t *sub_100204074(int8x16_t *result, unint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  double *f64;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  float64x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  int8x16_t *v25;
  float64x2_t *v26;
  int v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  float64x2_t *v32;
  uint64_t v33;
  uint64_t v34;
  int64x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  unint64_t v38;
  float64x2_t *v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  int64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;

  v7 = a7[1];
  if (!v7)
    return result;
  v8 = *a7;
  v9 = a2 >> 2;
  v10 = a6 >> 3;
  if ((int)v8 >= 4)
  {
    v15 = v7 - 1;
    v16 = (v8 - 4);
    v17 = a5 + 1;
    v18 = 8 * v10;
    v19 = 4 * v9;
    v20 = result + 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = v15;
      v24 = 4;
      v25 = result;
      v26 = v17;
      do
      {
        v27 = v24;
        v28 = *v25++;
        v22 += 4;
        v26[-1] = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v28.i8));
        *v26 = vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)));
        v21 += 0x400000000;
        v26 += 2;
        v24 += 4;
      }
      while (v22 <= v16);
      if ((int)v16 >= (int)v22)
      {
        v29 = 0;
        v30 = v27;
        v31 = (uint64_t *)((char *)result->i64 + 4 * v27);
        v32 = (float64x2_t *)((char *)a5 + 8 * v27);
        do
        {
          v33 = *v31;
          v34 = v31[1];
          v31 += 2;
          v35.i64[0] = (int)v33;
          v35.i64[1] = SHIDWORD(v33);
          v36 = vcvtq_f64_s64(v35);
          v35.i64[0] = (int)v34;
          v35.i64[1] = SHIDWORD(v34);
          *v32 = v36;
          v32[1] = vcvtq_f64_s64(v35);
          v32 += 2;
          v29 += 4;
        }
        while (v30 + v29 <= (uint64_t)v16);
        LODWORD(v22) = v22 + v29;
        if ((int)v22 < (int)v8)
        {
LABEL_19:
          v37 = (int)v22;
          v38 = v8 - (int)v22;
          v22 = (int)v22;
          if (v38 < 8)
            goto LABEL_27;
          v22 = (v38 & 0xFFFFFFFFFFFFFFF8) + (int)v22;
          v39 = (float64x2_t *)((char *)a5 + 8 * v37);
          v40 = (uint64_t)v20->i64 + 4 * v37;
          v41 = v38 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v42 = *(_OWORD *)(v40 - 16);
            v43.i64[0] = (int)v42;
            v43.i64[1] = SDWORD1(v42);
            v44 = vcvtq_f64_s64(v43);
            v43.i64[0] = SDWORD2(v42);
            v43.i64[1] = SHIDWORD(v42);
            v45 = vcvtq_f64_s64(v43);
            v43.i64[0] = (int)*(_OWORD *)v40;
            v43.i64[1] = (int)HIDWORD(*(_QWORD *)v40);
            v46 = vcvtq_f64_s64(v43);
            v43.i64[0] = (int)*(_QWORD *)(v40 + 8);
            v43.i64[1] = (int)HIDWORD(*(_OWORD *)v40);
            *v39 = v44;
            v39[1] = v45;
            v39[2] = v46;
            v39[3] = vcvtq_f64_s64(v43);
            v39 += 4;
            v40 += 32;
            v41 -= 8;
          }
          while (v41);
          if (v38 != (v38 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_27:
            do
            {
              a5->f64[v22] = (double)result->i32[v22];
              ++v22;
            }
            while (v8 != v22);
          }
        }
      }
      else if ((int)v22 < (int)v8)
      {
        goto LABEL_19;
      }
      v15 = v23 - 1;
      v17 = (float64x2_t *)((char *)v17 + v18);
      result = (int8x16_t *)((char *)result + v19);
      a5 = (float64x2_t *)((char *)a5 + v18);
      v20 = (int8x16_t *)((char *)v20 + v19);
      if (!v23)
        return result;
    }
  }
  if ((int)v8 >= 1)
  {
    v11 = &result->i32[2];
    v12 = 4 * v9;
    f64 = a5[1].f64;
    v14 = 8 * v10;
    do
    {
      *(f64 - 2) = (double)*(v11 - 2);
      if ((_DWORD)v8 != 1)
      {
        *(f64 - 1) = (double)*(v11 - 1);
        if ((_DWORD)v8 != 2)
          *f64 = (double)*v11;
      }
      v11 = (int *)((char *)v11 + v12);
      f64 = (double *)((char *)f64 + v14);
      --v7;
    }
    while (v7);
  }
  return result;
}

float32x4_t *sub_100204270(float32x4_t *result, unint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float *v11;
  uint64_t v12;
  double *f64;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  float64x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  float32x4_t *v25;
  float64x2_t *v26;
  int v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x2_t *v31;
  float64x2_t *v32;
  float32x2_t v33;
  float32x2_t v34;
  uint64_t v35;
  unint64_t v36;
  float64x2_t *v37;
  float32x2_t *v38;
  unint64_t v39;
  float32x4_t v40;
  float64x2_t v41;
  float64x2_t v42;

  v7 = a7[1];
  if (!v7)
    return result;
  v8 = *a7;
  v9 = a2 >> 2;
  v10 = a6 >> 3;
  if ((int)v8 >= 4)
  {
    v15 = v7 - 1;
    v16 = (v8 - 4);
    v17 = a5 + 1;
    v18 = 8 * v10;
    v19 = 4 * v9;
    v20 = result + 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = v15;
      v24 = 4;
      v25 = result;
      v26 = v17;
      do
      {
        v27 = v24;
        v28 = *v25++;
        v22 += 4;
        v26[-1] = vcvtq_f64_f32(*(float32x2_t *)v28.f32);
        *v26 = vcvt_hight_f64_f32(v28);
        v21 += 0x400000000;
        v26 += 2;
        v24 += 4;
      }
      while (v22 <= v16);
      if ((int)v16 >= (int)v22)
      {
        v29 = 0;
        v30 = v27;
        v31 = (float32x2_t *)&result->f32[v27];
        v32 = (float64x2_t *)((char *)a5 + 8 * v27);
        do
        {
          v33 = *v31;
          v34 = v31[1];
          v31 += 2;
          *v32 = vcvtq_f64_f32(v33);
          v32[1] = vcvtq_f64_f32(v34);
          v32 += 2;
          v29 += 4;
        }
        while (v30 + v29 <= (uint64_t)v16);
        LODWORD(v22) = v22 + v29;
        if ((int)v22 < (int)v8)
        {
LABEL_19:
          v35 = (int)v22;
          v36 = v8 - (int)v22;
          v22 = (int)v22;
          if (v36 < 8)
            goto LABEL_27;
          v22 = (v36 & 0xFFFFFFFFFFFFFFF8) + (int)v22;
          v37 = (float64x2_t *)((char *)a5 + 8 * v35);
          v38 = (float32x2_t *)&v20->f32[v35];
          v39 = v36 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v40 = *(float32x4_t *)v38[-2].f32;
            v41 = vcvtq_f64_f32(*v38);
            v42 = vcvt_hight_f64_f32(*(float32x4_t *)v38->f32);
            *v37 = vcvtq_f64_f32(*(float32x2_t *)v40.f32);
            v37[1] = vcvt_hight_f64_f32(v40);
            v37[2] = v41;
            v37[3] = v42;
            v37 += 4;
            v38 += 4;
            v39 -= 8;
          }
          while (v39);
          if (v36 != (v36 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_27:
            do
            {
              a5->f64[v22] = result->f32[v22];
              ++v22;
            }
            while (v8 != v22);
          }
        }
      }
      else if ((int)v22 < (int)v8)
      {
        goto LABEL_19;
      }
      v15 = v23 - 1;
      v17 = (float64x2_t *)((char *)v17 + v18);
      result = (float32x4_t *)((char *)result + v19);
      a5 = (float64x2_t *)((char *)a5 + v18);
      v20 = (float32x4_t *)((char *)v20 + v19);
      if (!v23)
        return result;
    }
  }
  if ((int)v8 >= 1)
  {
    v11 = &result->f32[2];
    v12 = 4 * v9;
    f64 = a5[1].f64;
    v14 = 8 * v10;
    do
    {
      *(f64 - 2) = *(v11 - 2);
      if ((_DWORD)v8 != 1)
      {
        *(f64 - 1) = *(v11 - 1);
        if ((_DWORD)v8 != 2)
          *f64 = *v11;
      }
      v11 = (float *)((char *)v11 + v12);
      f64 = (double *)((char *)f64 + v14);
      --v7;
    }
    while (v7);
  }
  return result;
}

char *sub_100204438(char *__src, unint64_t a2, int a3, int a4, char *__dst, unint64_t a6, int *a7)
{
  int v7;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = a7[1];
  if (v7)
  {
    v9 = __src;
    v10 = 8 * *a7;
    v11 = 8 * (a2 >> 3);
    v12 = 8 * (a6 >> 3);
    do
    {
      --v7;
      __src = (char *)memcpy(__dst, v9, v10);
      v9 += v11;
      __dst += v12;
    }
    while (v7);
  }
  return __src;
}

void sub_1002044A8(unsigned int *a1, uint64_t a2, int a3, double a4, double a5)
{
  _BOOL4 v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  char v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t (**v33)();
  void (*v34)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _DWORD *, _QWORD *);
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  char *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  char *v50;
  _DWORD v51[2];
  uint64_t v52[5];
  int v53;
  _DWORD v54[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  void *v61;
  _QWORD v62[3];
  int32x2_t v63;
  int v64;
  uint64_t v65;
  signed int v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void *v72;
  _QWORD v73[2];
  _BYTE v74[8];
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[3];
  _QWORD v79[2];

  sub_100298C2C(v74, &off_10044CF68);
  v10 = fabs(a4 + -1.0) >= 2.22044605e-16;
  v11 = fabs(a5) >= 2.22044605e-16 || v10;
  if ((a3 & 0x80000000) == 0)
  {
    v12 = *a1;
    v13 = *a1 & 0xFF8 | a3 & 7;
    v14 = *a1 & 7;
    v15 = a3 & 7;
    if (v14 == (_DWORD)v15)
      v16 = v11;
    else
      v16 = 1;
    if ((v16 & 1) != 0)
      goto LABEL_9;
LABEL_24:
    sub_1002181EC(a1, a2);
    goto LABEL_67;
  }
  if (!sub_100262140((_DWORD *)a2))
  {
    v12 = *a1;
    v13 = *a1 & 0xFFF;
    v14 = *a1 & 7;
    v15 = v14;
    if ((v11 & 1) != 0)
      goto LABEL_9;
    goto LABEL_24;
  }
  v13 = sub_10025E20C((int *)a2, -1);
  v12 = *a1;
  v14 = *a1 & 7;
  v15 = v13 & 7;
  if (v14 == (_DWORD)v15)
    v24 = v11;
  else
    v24 = 1;
  if ((v24 & 1) == 0)
    goto LABEL_24;
LABEL_9:
  v64 = v12;
  v17 = *(_QWORD *)(a1 + 1);
  v65 = v17;
  v66 = a1[3];
  v18 = *((_OWORD *)a1 + 2);
  v67 = *((_OWORD *)a1 + 1);
  v68 = v18;
  v19 = *((_QWORD *)a1 + 7);
  v69 = *((_QWORD *)a1 + 6);
  v70 = v19;
  v71 = (char *)&v65 + 4;
  v72 = v73;
  v73[0] = 0;
  v73[1] = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    if ((int)a1[1] <= 2)
      goto LABEL_13;
  }
  else if ((int)v17 <= 2)
  {
LABEL_13:
    v22 = (_QWORD *)*((_QWORD *)a1 + 9);
    v23 = v72;
    *(_QWORD *)v72 = *v22;
    v23[1] = v22[1];
    goto LABEL_22;
  }
  LODWORD(v65) = 0;
  sub_100256B48((uint64_t)&v64, (uint64_t)a1);
  v25 = a1[1];
  if (v25 > 2)
  {
    sub_100258F0C((int *)a2, v25, *((uint64_t **)a1 + 8), v13, 0xFFFFFFFF, 0, 0);
    goto LABEL_26;
  }
LABEL_22:
  v63 = vrev64_s32(**((int32x2_t **)a1 + 8));
  sub_10026214C(a2, &v63, v13, -1, 0, 0);
LABEL_26:
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v26 = *(_QWORD *)(a2 + 8);
    v27 = *(_OWORD *)(v26 + 16);
    v55 = *(_OWORD *)v26;
    v56 = v27;
    v57 = *(_OWORD *)(v26 + 32);
    v28 = *(_QWORD *)(v26 + 56);
    v58 = *(_QWORD *)(v26 + 48);
    v59 = v28;
    v60 = (char *)&v55 + 8;
    v61 = v62;
    v62[0] = 0;
    v62[1] = 0;
    if (v28)
    {
      v29 = (unsigned int *)(v28 + 20);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
    }
    if (*(int *)(v26 + 4) > 2)
    {
      DWORD1(v55) = 0;
      sub_100256B48((uint64_t)&v55, v26);
    }
    else
    {
      v31 = *(_QWORD **)(v26 + 72);
      v32 = v61;
      *(_QWORD *)v61 = *v31;
      v32[1] = v31[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v55);
  }
  v33 = (uint64_t (**)())&off_10044CD68;
  if (v11)
    v33 = off_10044D028;
  v34 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _DWORD *, _QWORD *))*(&v33[8 * v15] + v14);
  *(double *)v79 = a4;
  *(double *)&v79[1] = a5;
  if (!v34)
  {
    v52[0] = 0;
    v52[1] = 0;
    v35 = sub_10029430C(v52, 9);
    *(_BYTE *)(v35 + 8) = 48;
    *(_QWORD *)v35 = *(_QWORD *)"func != 0";
    sub_100294B74(-215, v52, "convertTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/convert.cpp", 4175);
  }
  v36 = (((unint64_t)*a1 >> 3) & 0x1FF) + 1;
  if ((int)a1[1] > 2)
  {
    v78[0] = (uint64_t)&v64;
    v78[1] = (uint64_t)&v55;
    v78[2] = 0;
    v76 = 0;
    v77 = 0;
    sub_100254D30((uint64_t)v52, v78, (uint64_t)&v76, -1);
    v39 = v36 * v53;
    v40 = -1;
    while ((unint64_t)++v40 < v52[4])
    {
      v51[0] = v39;
      v51[1] = 1;
      v34(v76, 1, 0, 0, v77, 1, v51, v79);
      sub_100254D78((uint64_t)v52);
    }
  }
  else
  {
    v37 = HIDWORD(v65);
    if ((v64 & v55 & 0x4000) != 0 && (v38 = v66 * (uint64_t)(int)v36 * SHIDWORD(v65), v38 == (int)v38))
      v37 = 1;
    else
      LODWORD(v38) = v66 * v36;
    v54[0] = v38;
    v54[1] = v37;
    v34(v67, v73[0], 0, 0, v56, v62[0], v54, v79);
  }
  if (v59)
  {
    v41 = (unsigned int *)(v59 + 20);
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
      sub_100256C90((uint64_t)&v55);
  }
  v59 = 0;
  v56 = 0u;
  v57 = 0u;
  if (SDWORD1(v55) >= 1)
  {
    v44 = 0;
    v45 = v60;
    do
      *(_DWORD *)&v45[4 * v44++] = 0;
    while (v44 < SDWORD1(v55));
  }
  if (v61 != v62)
    j__free(v61);
  if (v70)
  {
    v46 = (unsigned int *)(v70 + 20);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
      sub_100256C90((uint64_t)&v64);
  }
  v70 = 0;
  v67 = 0u;
  v68 = 0u;
  if ((int)v65 >= 1)
  {
    v49 = 0;
    v50 = v71;
    do
      *(_DWORD *)&v50[4 * v49++] = 0;
    while (v49 < (int)v65);
  }
  if (v72 != v73)
    j__free(v72);
LABEL_67:
  if (v75)
    sub_1002989D0(v74);
}

void sub_1002049D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100204AA0(uint64_t a1, int *a2, int a3, int a4, uint64_t a5, double a6, double a7)
{
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  char v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _QWORD *v30;
  _QWORD *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  _BYTE *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  int v42;
  _BYTE *v43;
  uint64_t v44;
  _BYTE v45[64];
  _BYTE *v46;
  void *v47;
  _QWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void *v55;
  _QWORD v56[2];
  _BYTE v57[8];
  int v58;

  sub_100298C2C(v57, &off_10044CF88);
  if ((a3 - 1) < 2 || a3 == 4)
  {
    v20 = sub_10028DE28(a1, a3, a5);
    v21 = a6 / v20;
    v19 = 0.0;
    if (v20 <= 2.22044605e-16)
      v18 = 0.0;
    else
      v18 = v21;
  }
  else
  {
    if (a3 != 32)
    {
      v49 = 0uLL;
      qmemcpy((void *)sub_10029430C(&v49, 29), "Unknown/unsupported norm type", 29);
      sub_100294B74(-5, (uint64_t *)&v49, "normalize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/convert.cpp", 4717);
    }
    *(_QWORD *)&v49 = 0;
    *(_QWORD *)v45 = 0;
    sub_10028D5F8(a1, (double *)&v49, (unint64_t *)v45, 0, 0, a5);
    if (a6 <= a7)
      v14 = a6;
    else
      v14 = a7;
    if (a6 >= a7)
      v15 = a6;
    else
      v15 = a7;
    v16 = v15 - v14;
    v17 = 0.0;
    if (*(double *)v45 - *(double *)&v49 > 2.22044605e-16)
      v17 = 1.0 / (*(double *)v45 - *(double *)&v49);
    v18 = v16 * v17;
    v19 = v14 - *(double *)&v49 * (v16 * v17);
  }
  v22 = sub_10025E20C((int *)a1, -1);
  if (a4 < 0)
  {
    v23 = v22;
    if (sub_100262140(a2))
      a4 = sub_100261250(a2, -1);
    else
      a4 = v23 & 7;
  }
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v24 = *(_QWORD *)(a1 + 8);
    v25 = *(_OWORD *)(v24 + 16);
    v49 = *(_OWORD *)v24;
    v26 = *(_OWORD *)(v24 + 32);
    v50 = v25;
    v51 = v26;
    v27 = *(_QWORD *)(v24 + 56);
    v52 = *(_QWORD *)(v24 + 48);
    v53 = v27;
    v54 = (char *)&v49 + 8;
    v55 = v56;
    v56[0] = 0;
    v56[1] = 0;
    if (v27)
    {
      v28 = (unsigned int *)(v27 + 20);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
    }
    if (*(int *)(v24 + 4) > 2)
    {
      DWORD1(v49) = 0;
      sub_100256B48((uint64_t)&v49, v24);
    }
    else
    {
      v30 = *(_QWORD **)(v24 + 72);
      v31 = v55;
      *(_QWORD *)v55 = *v30;
      v31[1] = v30[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v49);
  }
  if (sub_100261284(a5))
  {
    sub_1002044A8((unsigned int *)&v49, (uint64_t)a2, a4, v18, v19);
  }
  else
  {
    *(_DWORD *)v45 = 1124007936;
    memset(&v45[4], 0, 60);
    v46 = &v45[8];
    v47 = v48;
    v48[0] = 0;
    v48[1] = 0;
    v42 = 33619968;
    v43 = v45;
    v44 = 0;
    sub_1002044A8((unsigned int *)&v49, (uint64_t)&v42, a4, v18, v19);
    sub_100218CC8((uint64_t)v45, (uint64_t)a2, a5);
    if (*(_QWORD *)&v45[56])
    {
      v32 = (unsigned int *)(*(_QWORD *)&v45[56] + 20);
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
        sub_100256C90((uint64_t)v45);
    }
    *(_QWORD *)&v45[56] = 0;
    memset(&v45[16], 0, 32);
    if (*(int *)&v45[4] >= 1)
    {
      v35 = 0;
      v36 = v46;
      do
        *(_DWORD *)&v36[4 * v35++] = 0;
      while (v35 < *(int *)&v45[4]);
    }
    if (v47 != v48)
      j__free(v47);
  }
  if (v53)
  {
    v37 = (unsigned int *)(v53 + 20);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
      sub_100256C90((uint64_t)&v49);
  }
  v53 = 0;
  v50 = 0u;
  v51 = 0u;
  if (SDWORD1(v49) >= 1)
  {
    v40 = 0;
    v41 = v54;
    do
      *(_DWORD *)&v41[4 * v40++] = 0;
    while (v40 < SDWORD1(v49));
  }
  if (v55 != v56)
    j__free(v55);
  if (v58)
    sub_1002989D0(v57);
}

void sub_100204E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_10029434C((uint64_t *)va);
  sub_1001D40CC(v17 - 80);
  _Unwind_Resume(a1);
}

_BYTE **sub_100204F30(_BYTE **result, uint64_t a2, _BYTE **a3, uint64_t a4, signed int a5, int a6)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  uint64_t j;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t i;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;

  if (a6 >= 1)
  {
    if (a5 > 1)
    {
      v9 = a5 - 2;
      v10 = a6;
      if (((a5 - 2) & 0xFFFFFFFE) + 2 >= a5)
      {
        for (i = 0; i != v10; ++i)
        {
          v19 = result[i];
          v20 = a3[i];
          v21 = *(int *)(a4 + 4 * i);
          if (v19)
          {
            v22 = 0;
            v23 = *(int *)(a2 + 4 * i);
            do
            {
              v24 = v19[v23];
              *v20 = *v19;
              v20[v21] = v24;
              v22 += 2;
              v19 += 2 * v23;
              v20 += 2 * v21;
            }
            while (v22 <= v9);
          }
          else
          {
            do
            {
              v20[v21] = 0;
              *v20 = 0;
              LODWORD(v19) = (_DWORD)v19 + 2;
              v20 += 2 * (int)v21;
            }
            while ((int)v19 <= v9);
          }
        }
      }
      else
      {
        for (j = 0; j != v10; ++j)
        {
          v12 = result[j];
          v13 = a3[j];
          v14 = *(int *)(a4 + 4 * j);
          if (v12)
          {
            v15 = 0;
            v16 = *(int *)(a2 + 4 * j);
            do
            {
              v17 = v12[v16];
              *v13 = *v12;
              v13[v14] = v17;
              v15 += 2;
              v12 += 2 * v16;
              v13 += 2 * v14;
            }
            while (v15 <= v9);
            *v13 = *v12;
          }
          else
          {
            do
            {
              v13[v14] = 0;
              *v13 = 0;
              LODWORD(v12) = (_DWORD)v12 + 2;
              v13 += 2 * (int)v14;
            }
            while ((int)v12 <= v9);
            *v13 = 0;
          }
        }
      }
    }
    else if (a5 == 1)
    {
      v6 = a6;
      do
      {
        v8 = *result;
        if (*result)
          LOBYTE(v8) = *v8;
        v7 = *a3++;
        *v7 = (_BYTE)v8;
        ++result;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

_WORD **sub_1002050A0(_WORD **result, uint64_t a2, _WORD **a3, uint64_t a4, signed int a5, int a6)
{
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  int v9;
  uint64_t v10;
  uint64_t j;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t i;
  _WORD *v19;
  _WORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;

  if (a6 >= 1)
  {
    if (a5 > 1)
    {
      v9 = a5 - 2;
      v10 = a6;
      if (((a5 - 2) & 0xFFFFFFFE) + 2 >= a5)
      {
        for (i = 0; i != v10; ++i)
        {
          v19 = result[i];
          v20 = a3[i];
          v21 = *(int *)(a4 + 4 * i);
          if (v19)
          {
            v22 = 0;
            v23 = *(int *)(a2 + 4 * i);
            do
            {
              v24 = v19[v23];
              *v20 = *v19;
              v20[v21] = v24;
              v22 += 2;
              v20 += 2 * v21;
              v19 += 2 * v23;
            }
            while (v22 <= v9);
          }
          else
          {
            do
            {
              v20[v21] = 0;
              *v20 = 0;
              LODWORD(v19) = (_DWORD)v19 + 2;
              v20 += 2 * (int)v21;
            }
            while ((int)v19 <= v9);
          }
        }
      }
      else
      {
        for (j = 0; j != v10; ++j)
        {
          v12 = result[j];
          v13 = a3[j];
          v14 = *(int *)(a4 + 4 * j);
          if (v12)
          {
            v15 = 0;
            v16 = *(int *)(a2 + 4 * j);
            do
            {
              v17 = v12[v16];
              *v13 = *v12;
              v13[v14] = v17;
              v15 += 2;
              v13 += 2 * v14;
              v12 += 2 * v16;
            }
            while (v15 <= v9);
            *v13 = *v12;
          }
          else
          {
            do
            {
              v13[v14] = 0;
              *v13 = 0;
              LODWORD(v12) = (_DWORD)v12 + 2;
              v13 += 2 * (int)v14;
            }
            while ((int)v12 <= v9);
            *v13 = 0;
          }
        }
      }
    }
    else if (a5 == 1)
    {
      v6 = a6;
      do
      {
        v8 = *result;
        if (*result)
          LOWORD(v8) = *v8;
        v7 = *a3++;
        *v7 = (_WORD)v8;
        ++result;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

_DWORD **sub_100205210(_DWORD **result, uint64_t a2, _DWORD **a3, uint64_t a4, signed int a5, int a6)
{
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t j;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t i;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;

  if (a6 >= 1)
  {
    if (a5 > 1)
    {
      v9 = a5 - 2;
      v10 = a6;
      if (((a5 - 2) & 0xFFFFFFFE) + 2 >= a5)
      {
        for (i = 0; i != v10; ++i)
        {
          v19 = result[i];
          v20 = a3[i];
          v21 = *(int *)(a4 + 4 * i);
          if (v19)
          {
            v22 = 0;
            v23 = *(int *)(a2 + 4 * i);
            do
            {
              v24 = v19[v23];
              *v20 = *v19;
              v20[v21] = v24;
              v22 += 2;
              v20 += 2 * v21;
              v19 += 2 * v23;
            }
            while (v22 <= v9);
          }
          else
          {
            do
            {
              v20[v21] = 0;
              *v20 = 0;
              LODWORD(v19) = (_DWORD)v19 + 2;
              v20 += 2 * (int)v21;
            }
            while ((int)v19 <= v9);
          }
        }
      }
      else
      {
        for (j = 0; j != v10; ++j)
        {
          v12 = result[j];
          v13 = a3[j];
          v14 = *(int *)(a4 + 4 * j);
          if (v12)
          {
            v15 = 0;
            v16 = *(int *)(a2 + 4 * j);
            do
            {
              v17 = v12[v16];
              *v13 = *v12;
              v13[v14] = v17;
              v15 += 2;
              v13 += 2 * v14;
              v12 += 2 * v16;
            }
            while (v15 <= v9);
            *v13 = *v12;
          }
          else
          {
            do
            {
              v13[v14] = 0;
              *v13 = 0;
              LODWORD(v12) = (_DWORD)v12 + 2;
              v13 += 2 * (int)v14;
            }
            while ((int)v12 <= v9);
            *v13 = 0;
          }
        }
      }
    }
    else if (a5 == 1)
    {
      v6 = a6;
      do
      {
        v8 = *result;
        if (*result)
          LODWORD(v8) = *v8;
        v7 = *a3++;
        *v7 = (_DWORD)v8;
        ++result;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

_QWORD **sub_100205380(_QWORD **result, uint64_t a2, _QWORD **a3, uint64_t a4, signed int a5, int a6)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t j;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  if (a6 >= 1)
  {
    if (a5 > 1)
    {
      v9 = a5 - 2;
      v10 = a6;
      if (((a5 - 2) & 0xFFFFFFFE) + 2 >= a5)
      {
        for (i = 0; i != v10; ++i)
        {
          v19 = result[i];
          v20 = a3[i];
          v21 = *(int *)(a4 + 4 * i);
          if (v19)
          {
            v22 = 0;
            v23 = *(int *)(a2 + 4 * i);
            do
            {
              v24 = v19[v23];
              *v20 = *v19;
              v20[v21] = v24;
              v22 += 2;
              v20 += 2 * v21;
              v19 += 2 * v23;
            }
            while (v22 <= v9);
          }
          else
          {
            do
            {
              v20[v21] = 0;
              *v20 = 0;
              LODWORD(v19) = (_DWORD)v19 + 2;
              v20 += 2 * (int)v21;
            }
            while ((int)v19 <= v9);
          }
        }
      }
      else
      {
        for (j = 0; j != v10; ++j)
        {
          v12 = result[j];
          v13 = a3[j];
          v14 = *(int *)(a4 + 4 * j);
          if (v12)
          {
            v15 = 0;
            v16 = *(int *)(a2 + 4 * j);
            do
            {
              v17 = v12[v16];
              *v13 = *v12;
              v13[v14] = v17;
              v15 += 2;
              v13 += 2 * v14;
              v12 += 2 * v16;
            }
            while (v15 <= v9);
            *v13 = *v12;
          }
          else
          {
            do
            {
              v13[v14] = 0;
              *v13 = 0;
              LODWORD(v12) = (_DWORD)v12 + 2;
              v13 += 2 * (int)v14;
            }
            while ((int)v12 <= v9);
            *v13 = 0;
          }
        }
      }
    }
    else if (a5 == 1)
    {
      v6 = a6;
      do
      {
        v8 = *result;
        if (*result)
          v8 = (_QWORD *)*v8;
        v7 = *a3++;
        *v7 = v8;
        ++result;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_1002054F0(uint64_t a1, float32x4_t *a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  float32x4_t *v8;
  float32x4_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  __int128 v36;
  int v37;
  __int128 v38;
  int v39;
  __int128 v40;
  int v41;
  __int128 v42;
  __int128 v43;
  int8x16_t v44;
  __int128 v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  __int128 v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  __int128 v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  __int128 v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  __int128 v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;

  v4 = a4 - 16;
  if (a4 < 16)
    return 0;
  v5 = 0;
  v8 = a2 + 2;
  do
  {
    v9 = v8[-2];
    v10 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v10 & 1) == 0)
    {
      v79 = v8[-2];
      v27 = __cxa_guard_acquire(qword_10048AA00);
      v9 = v79;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      if (v27)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        v9 = v79;
      }
    }
    v11 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v11 & 1) == 0)
    {
      v80 = v9;
      v29 = __cxa_guard_acquire(qword_10048AA20);
      v9 = v80;
      *(_QWORD *)&v30 = 0x3F0000003F000000;
      *((_QWORD *)&v30 + 1) = 0x3F0000003F000000;
      if (v29)
      {
        xmmword_10048AA10 = v30;
        __cxa_guard_release(qword_10048AA20);
        v9 = v80;
      }
    }
    v12 = (int8x16_t)xmmword_10048AA10;
    v13 = (int8x16_t)xmmword_10048A9F0;
    v14 = v8[-1];
    v15 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v15 & 1) == 0)
    {
      v73 = v8[-1];
      v81 = v9;
      v61 = xmmword_10048A9F0;
      v67 = xmmword_10048AA10;
      v31 = __cxa_guard_acquire(qword_10048AA00);
      v13 = (int8x16_t)v61;
      v12 = (int8x16_t)v67;
      v14 = v73;
      v9 = v81;
      *(_QWORD *)&v32 = 0x8000000080000000;
      *((_QWORD *)&v32 + 1) = 0x8000000080000000;
      if (v31)
      {
        xmmword_10048A9F0 = v32;
        __cxa_guard_release(qword_10048AA00);
        v13 = (int8x16_t)v61;
        v12 = (int8x16_t)v67;
        v14 = v73;
        v9 = v81;
      }
    }
    v16 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v16 & 1) == 0)
    {
      v74 = v14;
      v82 = v9;
      v62 = v13;
      v68 = v12;
      v33 = __cxa_guard_acquire(qword_10048AA20);
      v13 = v62;
      v12 = v68;
      v14 = v74;
      v9 = v82;
      *(_QWORD *)&v34 = 0x3F0000003F000000;
      *((_QWORD *)&v34 + 1) = 0x3F0000003F000000;
      if (v33)
      {
        xmmword_10048AA10 = v34;
        __cxa_guard_release(qword_10048AA20);
        v13 = v62;
        v12 = v68;
        v14 = v74;
        v9 = v82;
      }
    }
    v17 = (int8x16_t)xmmword_10048AA10;
    v18 = (int8x16_t)xmmword_10048A9F0;
    v19 = *v8;
    v20 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v20 & 1) == 0)
    {
      v75 = v14;
      v83 = v9;
      v63 = v13;
      v69 = v12;
      v53 = xmmword_10048AA10;
      v57 = *v8;
      v49 = xmmword_10048A9F0;
      v35 = __cxa_guard_acquire(qword_10048AA00);
      v18 = (int8x16_t)v49;
      v17 = (int8x16_t)v53;
      v19 = v57;
      v13 = v63;
      v12 = v69;
      v14 = v75;
      v9 = v83;
      *(_QWORD *)&v36 = 0x8000000080000000;
      *((_QWORD *)&v36 + 1) = 0x8000000080000000;
      if (v35)
      {
        xmmword_10048A9F0 = v36;
        __cxa_guard_release(qword_10048AA00);
        v18 = (int8x16_t)v49;
        v17 = (int8x16_t)v53;
        v19 = v57;
        v13 = v63;
        v12 = v69;
        v14 = v75;
        v9 = v83;
      }
    }
    v21 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v21 & 1) == 0)
    {
      v76 = v14;
      v84 = v9;
      v64 = v13;
      v70 = v12;
      v54 = v17;
      v58 = v19;
      v50 = v18;
      v37 = __cxa_guard_acquire(qword_10048AA20);
      v18 = v50;
      v17 = v54;
      v19 = v58;
      v13 = v64;
      v12 = v70;
      v14 = v76;
      v9 = v84;
      *(_QWORD *)&v38 = 0x3F0000003F000000;
      *((_QWORD *)&v38 + 1) = 0x3F0000003F000000;
      if (v37)
      {
        xmmword_10048AA10 = v38;
        __cxa_guard_release(qword_10048AA20);
        v18 = v50;
        v17 = v54;
        v19 = v58;
        v13 = v64;
        v12 = v70;
        v14 = v76;
        v9 = v84;
      }
    }
    v22 = (int8x16_t)xmmword_10048AA10;
    v23 = (int8x16_t)xmmword_10048A9F0;
    v24 = v8[1];
    v25 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v25 & 1) == 0)
    {
      v77 = v14;
      v85 = v9;
      v65 = v13;
      v71 = v12;
      v55 = v17;
      v59 = v19;
      v47 = v8[1];
      v51 = v18;
      v43 = xmmword_10048A9F0;
      v45 = xmmword_10048AA10;
      v39 = __cxa_guard_acquire(qword_10048AA00);
      v23 = (int8x16_t)v43;
      v22 = (int8x16_t)v45;
      v24 = v47;
      v18 = v51;
      v17 = v55;
      v19 = v59;
      v13 = v65;
      v12 = v71;
      v14 = v77;
      v9 = v85;
      *(_QWORD *)&v40 = 0x8000000080000000;
      *((_QWORD *)&v40 + 1) = 0x8000000080000000;
      if (v39)
      {
        xmmword_10048A9F0 = v40;
        __cxa_guard_release(qword_10048AA00);
        v23 = (int8x16_t)v43;
        v22 = (int8x16_t)v45;
        v24 = v47;
        v18 = v51;
        v17 = v55;
        v19 = v59;
        v13 = v65;
        v12 = v71;
        v14 = v77;
        v9 = v85;
      }
    }
    v26 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v26 & 1) == 0)
    {
      v78 = v14;
      v86 = v9;
      v66 = v13;
      v72 = v12;
      v56 = v17;
      v60 = v19;
      v48 = v24;
      v52 = v18;
      v44 = v23;
      v46 = v22;
      v41 = __cxa_guard_acquire(qword_10048AA20);
      v23 = v44;
      v22 = v46;
      v24 = v48;
      v18 = v52;
      v17 = v56;
      v19 = v60;
      v13 = v66;
      v12 = v72;
      v14 = v78;
      v9 = v86;
      *(_QWORD *)&v42 = 0x3F0000003F000000;
      *((_QWORD *)&v42 + 1) = 0x3F0000003F000000;
      if (v41)
      {
        xmmword_10048AA10 = v42;
        __cxa_guard_release(qword_10048AA20);
        v23 = v44;
        v22 = v46;
        v24 = v48;
        v18 = v52;
        v17 = v56;
        v19 = v60;
        v13 = v66;
        v12 = v72;
        v14 = v78;
        v9 = v86;
      }
    }
    *(uint8x16_t *)(a3 + v5) = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v9, (float32x4_t)vorrq_s8(vandq_s8(v13, (int8x16_t)v9), v12)))), vcvtq_s32_f32(vaddq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v18, (int8x16_t)v14), v17))))), (uint16x8_t)vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v23, (int8x16_t)v19), v22)))), vcvtq_s32_f32(vaddq_f32(v24,
                                                   (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)xmmword_10048A9F0, (int8x16_t)v24), (int8x16_t)xmmword_10048AA10)))));
    v5 += 16;
    v8 += 4;
  }
  while (v4 >= (int)v5);
  return v5;
}

uint64_t sub_10020585C(uint64_t a1, float64x2_t *a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t result;
  float64x2_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float64x2_t *v65;
  float64x2_t *v66;
  float64x2_t *v67;
  float64x2_t *v68;

  v4 = a4 - 8;
  if (a4 < 8)
    return 0;
  result = 0;
  v6 = a2 + 2;
  v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v9 = v6[-2];
    v10 = v6[-1];
    v12 = *v6;
    v11 = v6[1];
    v13 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v13 & 1) == 0)
    {
      v61 = result;
      v65 = v6;
      v53 = a3;
      v57 = v4;
      v49 = v6[-1];
      v41 = v6[-2];
      v45 = v6[1];
      v37 = *v6;
      v21 = __cxa_guard_acquire(qword_10048AA00);
      v12 = v37;
      v9 = v41;
      v11 = v45;
      v10 = v49;
      *(_QWORD *)&v22 = 0x8000000080000000;
      *((_QWORD *)&v22 + 1) = 0x8000000080000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v4 = v57;
      a3 = v53;
      v23 = v21;
      result = v61;
      v6 = v65;
      if (v23)
      {
        xmmword_10048A9F0 = v22;
        __cxa_guard_release(qword_10048AA00);
        v12 = v37;
        v9 = v41;
        v11 = v45;
        v10 = v49;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v61;
        v6 = v65;
        v4 = v57;
        a3 = v53;
      }
    }
    v14 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v14 & 1) == 0)
    {
      v62 = result;
      v66 = v6;
      v54 = a3;
      v58 = v4;
      v50 = v10;
      v42 = v9;
      v46 = v11;
      v38 = v12;
      v24 = __cxa_guard_acquire(qword_10048AA20);
      v12 = v38;
      v9 = v42;
      v11 = v46;
      v10 = v50;
      *(_QWORD *)&v25 = 0x3F0000003F000000;
      *((_QWORD *)&v25 + 1) = 0x3F0000003F000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v4 = v58;
      a3 = v54;
      v26 = v24;
      result = v62;
      v6 = v66;
      if (v26)
      {
        xmmword_10048AA10 = v25;
        __cxa_guard_release(qword_10048AA20);
        v12 = v38;
        v9 = v42;
        v11 = v46;
        v10 = v50;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v62;
        v6 = v66;
        v4 = v58;
        a3 = v54;
      }
    }
    v15 = v8[161];
    v16 = v7[159];
    v17 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v17 & 1) == 0)
    {
      v63 = result;
      v67 = v6;
      v55 = a3;
      v59 = v4;
      v51 = v10;
      v43 = v9;
      v47 = v11;
      v35 = v8[161];
      v39 = v12;
      v33 = v7[159];
      v27 = __cxa_guard_acquire(qword_10048AA00);
      v16 = v33;
      v15 = v35;
      v12 = v39;
      v9 = v43;
      v11 = v47;
      v10 = v51;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v4 = v59;
      a3 = v55;
      v29 = v27;
      result = v63;
      v6 = v67;
      if (v29)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        v16 = v33;
        v15 = v35;
        v12 = v39;
        v9 = v43;
        v11 = v47;
        v10 = v51;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v63;
        v6 = v67;
        v4 = v59;
        a3 = v55;
      }
    }
    v18 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v18 & 1) == 0)
    {
      v64 = result;
      v68 = v6;
      v56 = a3;
      v60 = v4;
      v52 = v10;
      v44 = v9;
      v48 = v11;
      v36 = v15;
      v40 = v12;
      v34 = v16;
      v30 = __cxa_guard_acquire(qword_10048AA20);
      v16 = v34;
      v15 = v36;
      v12 = v40;
      v9 = v44;
      v11 = v48;
      v10 = v52;
      *(_QWORD *)&v31 = 0x3F0000003F000000;
      *((_QWORD *)&v31 + 1) = 0x3F0000003F000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v4 = v60;
      a3 = v56;
      v32 = v30;
      result = v64;
      v6 = v68;
      if (v32)
      {
        xmmword_10048AA10 = v31;
        __cxa_guard_release(qword_10048AA20);
        v16 = v34;
        v15 = v36;
        v12 = v40;
        v9 = v44;
        v11 = v48;
        v10 = v52;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v64;
        v6 = v68;
        v4 = v60;
        a3 = v56;
      }
    }
    v19 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v10);
    v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v11);
    *(int8x8_t *)(a3 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v16, (int8x16_t)v19), v15)))), vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v7[159], (int8x16_t)v20), v8[161])))));
    result += 8;
    v6 += 4;
  }
  while (v4 >= (int)result);
  return result;
}

uint64_t sub_100205BD8(uint64_t a1, float32x4_t *a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  float32x4_t *v8;
  float32x4_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  __int128 v36;
  int v37;
  __int128 v38;
  int v39;
  __int128 v40;
  int v41;
  __int128 v42;
  __int128 v43;
  int8x16_t v44;
  __int128 v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  __int128 v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  __int128 v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  __int128 v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  __int128 v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;

  v4 = a4 - 16;
  if (a4 < 16)
    return 0;
  v5 = 0;
  v8 = a2 + 2;
  do
  {
    v9 = v8[-2];
    v10 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v10 & 1) == 0)
    {
      v79 = v8[-2];
      v27 = __cxa_guard_acquire(qword_10048AA00);
      v9 = v79;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      if (v27)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        v9 = v79;
      }
    }
    v11 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v11 & 1) == 0)
    {
      v80 = v9;
      v29 = __cxa_guard_acquire(qword_10048AA20);
      v9 = v80;
      *(_QWORD *)&v30 = 0x3F0000003F000000;
      *((_QWORD *)&v30 + 1) = 0x3F0000003F000000;
      if (v29)
      {
        xmmword_10048AA10 = v30;
        __cxa_guard_release(qword_10048AA20);
        v9 = v80;
      }
    }
    v12 = (int8x16_t)xmmword_10048AA10;
    v13 = (int8x16_t)xmmword_10048A9F0;
    v14 = v8[-1];
    v15 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v15 & 1) == 0)
    {
      v73 = v8[-1];
      v81 = v9;
      v61 = xmmword_10048A9F0;
      v67 = xmmword_10048AA10;
      v31 = __cxa_guard_acquire(qword_10048AA00);
      v13 = (int8x16_t)v61;
      v12 = (int8x16_t)v67;
      v14 = v73;
      v9 = v81;
      *(_QWORD *)&v32 = 0x8000000080000000;
      *((_QWORD *)&v32 + 1) = 0x8000000080000000;
      if (v31)
      {
        xmmword_10048A9F0 = v32;
        __cxa_guard_release(qword_10048AA00);
        v13 = (int8x16_t)v61;
        v12 = (int8x16_t)v67;
        v14 = v73;
        v9 = v81;
      }
    }
    v16 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v16 & 1) == 0)
    {
      v74 = v14;
      v82 = v9;
      v62 = v13;
      v68 = v12;
      v33 = __cxa_guard_acquire(qword_10048AA20);
      v13 = v62;
      v12 = v68;
      v14 = v74;
      v9 = v82;
      *(_QWORD *)&v34 = 0x3F0000003F000000;
      *((_QWORD *)&v34 + 1) = 0x3F0000003F000000;
      if (v33)
      {
        xmmword_10048AA10 = v34;
        __cxa_guard_release(qword_10048AA20);
        v13 = v62;
        v12 = v68;
        v14 = v74;
        v9 = v82;
      }
    }
    v17 = (int8x16_t)xmmword_10048AA10;
    v18 = (int8x16_t)xmmword_10048A9F0;
    v19 = *v8;
    v20 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v20 & 1) == 0)
    {
      v75 = v14;
      v83 = v9;
      v63 = v13;
      v69 = v12;
      v53 = xmmword_10048AA10;
      v57 = *v8;
      v49 = xmmword_10048A9F0;
      v35 = __cxa_guard_acquire(qword_10048AA00);
      v18 = (int8x16_t)v49;
      v17 = (int8x16_t)v53;
      v19 = v57;
      v13 = v63;
      v12 = v69;
      v14 = v75;
      v9 = v83;
      *(_QWORD *)&v36 = 0x8000000080000000;
      *((_QWORD *)&v36 + 1) = 0x8000000080000000;
      if (v35)
      {
        xmmword_10048A9F0 = v36;
        __cxa_guard_release(qword_10048AA00);
        v18 = (int8x16_t)v49;
        v17 = (int8x16_t)v53;
        v19 = v57;
        v13 = v63;
        v12 = v69;
        v14 = v75;
        v9 = v83;
      }
    }
    v21 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v21 & 1) == 0)
    {
      v76 = v14;
      v84 = v9;
      v64 = v13;
      v70 = v12;
      v54 = v17;
      v58 = v19;
      v50 = v18;
      v37 = __cxa_guard_acquire(qword_10048AA20);
      v18 = v50;
      v17 = v54;
      v19 = v58;
      v13 = v64;
      v12 = v70;
      v14 = v76;
      v9 = v84;
      *(_QWORD *)&v38 = 0x3F0000003F000000;
      *((_QWORD *)&v38 + 1) = 0x3F0000003F000000;
      if (v37)
      {
        xmmword_10048AA10 = v38;
        __cxa_guard_release(qword_10048AA20);
        v18 = v50;
        v17 = v54;
        v19 = v58;
        v13 = v64;
        v12 = v70;
        v14 = v76;
        v9 = v84;
      }
    }
    v22 = (int8x16_t)xmmword_10048AA10;
    v23 = (int8x16_t)xmmword_10048A9F0;
    v24 = v8[1];
    v25 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v25 & 1) == 0)
    {
      v77 = v14;
      v85 = v9;
      v65 = v13;
      v71 = v12;
      v55 = v17;
      v59 = v19;
      v47 = v8[1];
      v51 = v18;
      v43 = xmmword_10048A9F0;
      v45 = xmmword_10048AA10;
      v39 = __cxa_guard_acquire(qword_10048AA00);
      v23 = (int8x16_t)v43;
      v22 = (int8x16_t)v45;
      v24 = v47;
      v18 = v51;
      v17 = v55;
      v19 = v59;
      v13 = v65;
      v12 = v71;
      v14 = v77;
      v9 = v85;
      *(_QWORD *)&v40 = 0x8000000080000000;
      *((_QWORD *)&v40 + 1) = 0x8000000080000000;
      if (v39)
      {
        xmmword_10048A9F0 = v40;
        __cxa_guard_release(qword_10048AA00);
        v23 = (int8x16_t)v43;
        v22 = (int8x16_t)v45;
        v24 = v47;
        v18 = v51;
        v17 = v55;
        v19 = v59;
        v13 = v65;
        v12 = v71;
        v14 = v77;
        v9 = v85;
      }
    }
    v26 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v26 & 1) == 0)
    {
      v78 = v14;
      v86 = v9;
      v66 = v13;
      v72 = v12;
      v56 = v17;
      v60 = v19;
      v48 = v24;
      v52 = v18;
      v44 = v23;
      v46 = v22;
      v41 = __cxa_guard_acquire(qword_10048AA20);
      v23 = v44;
      v22 = v46;
      v24 = v48;
      v18 = v52;
      v17 = v56;
      v19 = v60;
      v13 = v66;
      v12 = v72;
      v14 = v78;
      v9 = v86;
      *(_QWORD *)&v42 = 0x3F0000003F000000;
      *((_QWORD *)&v42 + 1) = 0x3F0000003F000000;
      if (v41)
      {
        xmmword_10048AA10 = v42;
        __cxa_guard_release(qword_10048AA20);
        v23 = v44;
        v22 = v46;
        v24 = v48;
        v18 = v52;
        v17 = v56;
        v19 = v60;
        v13 = v66;
        v12 = v72;
        v14 = v78;
        v9 = v86;
      }
    }
    *(int8x16_t *)(a3 + v5) = vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v9, (float32x4_t)vorrq_s8(vandq_s8(v13, (int8x16_t)v9), v12)))), vcvtq_s32_f32(vaddq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v18, (int8x16_t)v14), v17))))), vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v23, (int8x16_t)v19), v22)))), vcvtq_s32_f32(vaddq_f32(v24, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)xmmword_10048A9F0, (int8x16_t)v24), (int8x16_t)xmmword_10048AA10)))));
    v5 += 16;
    v8 += 4;
  }
  while (v4 >= (int)v5);
  return v5;
}

uint64_t sub_100205F44(uint64_t a1, float64x2_t *a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t result;
  float64x2_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float64x2_t *v65;
  float64x2_t *v66;
  float64x2_t *v67;
  float64x2_t *v68;

  v4 = a4 - 8;
  if (a4 < 8)
    return 0;
  result = 0;
  v6 = a2 + 2;
  v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v9 = v6[-2];
    v10 = v6[-1];
    v12 = *v6;
    v11 = v6[1];
    v13 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v13 & 1) == 0)
    {
      v61 = result;
      v65 = v6;
      v53 = a3;
      v57 = v4;
      v49 = v6[-1];
      v41 = v6[-2];
      v45 = v6[1];
      v37 = *v6;
      v21 = __cxa_guard_acquire(qword_10048AA00);
      v12 = v37;
      v9 = v41;
      v11 = v45;
      v10 = v49;
      *(_QWORD *)&v22 = 0x8000000080000000;
      *((_QWORD *)&v22 + 1) = 0x8000000080000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v4 = v57;
      a3 = v53;
      v23 = v21;
      result = v61;
      v6 = v65;
      if (v23)
      {
        xmmword_10048A9F0 = v22;
        __cxa_guard_release(qword_10048AA00);
        v12 = v37;
        v9 = v41;
        v11 = v45;
        v10 = v49;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v61;
        v6 = v65;
        v4 = v57;
        a3 = v53;
      }
    }
    v14 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v14 & 1) == 0)
    {
      v62 = result;
      v66 = v6;
      v54 = a3;
      v58 = v4;
      v50 = v10;
      v42 = v9;
      v46 = v11;
      v38 = v12;
      v24 = __cxa_guard_acquire(qword_10048AA20);
      v12 = v38;
      v9 = v42;
      v11 = v46;
      v10 = v50;
      *(_QWORD *)&v25 = 0x3F0000003F000000;
      *((_QWORD *)&v25 + 1) = 0x3F0000003F000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v4 = v58;
      a3 = v54;
      v26 = v24;
      result = v62;
      v6 = v66;
      if (v26)
      {
        xmmword_10048AA10 = v25;
        __cxa_guard_release(qword_10048AA20);
        v12 = v38;
        v9 = v42;
        v11 = v46;
        v10 = v50;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v62;
        v6 = v66;
        v4 = v58;
        a3 = v54;
      }
    }
    v15 = v8[161];
    v16 = v7[159];
    v17 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v17 & 1) == 0)
    {
      v63 = result;
      v67 = v6;
      v55 = a3;
      v59 = v4;
      v51 = v10;
      v43 = v9;
      v47 = v11;
      v35 = v8[161];
      v39 = v12;
      v33 = v7[159];
      v27 = __cxa_guard_acquire(qword_10048AA00);
      v16 = v33;
      v15 = v35;
      v12 = v39;
      v9 = v43;
      v11 = v47;
      v10 = v51;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v4 = v59;
      a3 = v55;
      v29 = v27;
      result = v63;
      v6 = v67;
      if (v29)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        v16 = v33;
        v15 = v35;
        v12 = v39;
        v9 = v43;
        v11 = v47;
        v10 = v51;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v63;
        v6 = v67;
        v4 = v59;
        a3 = v55;
      }
    }
    v18 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v18 & 1) == 0)
    {
      v64 = result;
      v68 = v6;
      v56 = a3;
      v60 = v4;
      v52 = v10;
      v44 = v9;
      v48 = v11;
      v36 = v15;
      v40 = v12;
      v34 = v16;
      v30 = __cxa_guard_acquire(qword_10048AA20);
      v16 = v34;
      v15 = v36;
      v12 = v40;
      v9 = v44;
      v11 = v48;
      v10 = v52;
      *(_QWORD *)&v31 = 0x3F0000003F000000;
      *((_QWORD *)&v31 + 1) = 0x3F0000003F000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v4 = v60;
      a3 = v56;
      v32 = v30;
      result = v64;
      v6 = v68;
      if (v32)
      {
        xmmword_10048AA10 = v31;
        __cxa_guard_release(qword_10048AA20);
        v16 = v34;
        v15 = v36;
        v12 = v40;
        v9 = v44;
        v11 = v48;
        v10 = v52;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v64;
        v6 = v68;
        v4 = v60;
        a3 = v56;
      }
    }
    v19 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v10);
    v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v11);
    *(int8x8_t *)(a3 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v16, (int8x16_t)v19), v15)))), vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v7[159], (int8x16_t)v20), v8[161])))));
    result += 8;
    v6 += 4;
  }
  while (v4 >= (int)result);
  return result;
}

uint64_t sub_1002062C0(uint64_t a1, float32x4_t *a2, int16x8_t *a3, int a4)
{
  int v4;
  uint64_t result;
  float32x4_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  float32x4_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int16x8_t *v39;
  int16x8_t *v40;
  int16x8_t *v41;
  int16x8_t *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  float32x4_t *v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t *v50;

  v4 = a4 - 8;
  if (a4 < 8)
    return 0;
  LODWORD(result) = 0;
  v6 = a2 + 1;
  v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v9 = v6[-1];
    v10 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v10 & 1) == 0)
    {
      v43 = result;
      v39 = a3;
      v35 = v4;
      v47 = v6;
      v31 = v6[-1];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v9 = v31;
      *(_QWORD *)&v17 = 0x8000000080000000;
      *((_QWORD *)&v17 + 1) = 0x8000000080000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v47;
      v4 = v35;
      a3 = v39;
      v18 = result;
      LODWORD(result) = v43;
      if (v18)
      {
        xmmword_10048A9F0 = v17;
        __cxa_guard_release(qword_10048AA00);
        v9 = v31;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v47;
        v4 = v35;
        LODWORD(result) = v43;
        a3 = v39;
      }
    }
    v11 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v11 & 1) == 0)
    {
      v44 = result;
      v40 = a3;
      v36 = v4;
      v48 = v6;
      v32 = v9;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v9 = v32;
      *(_QWORD *)&v19 = 0x3F0000003F000000;
      *((_QWORD *)&v19 + 1) = 0x3F0000003F000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v48;
      v4 = v36;
      a3 = v40;
      v20 = result;
      LODWORD(result) = v44;
      if (v20)
      {
        xmmword_10048AA10 = v19;
        __cxa_guard_release(qword_10048AA20);
        v9 = v32;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v48;
        v4 = v36;
        LODWORD(result) = v44;
        a3 = v40;
      }
    }
    v12 = v8[161];
    v13 = v7[159];
    v14 = *v6;
    v15 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v15 & 1) == 0)
    {
      v45 = result;
      v41 = a3;
      v37 = v4;
      v49 = v6;
      v29 = *v6;
      v33 = v9;
      v25 = v7[159];
      v27 = v8[161];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v13 = v25;
      v12 = v27;
      v14 = v29;
      v9 = v33;
      *(_QWORD *)&v21 = 0x8000000080000000;
      *((_QWORD *)&v21 + 1) = 0x8000000080000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v49;
      v4 = v37;
      a3 = v41;
      v22 = result;
      LODWORD(result) = v45;
      if (v22)
      {
        xmmword_10048A9F0 = v21;
        __cxa_guard_release(qword_10048AA00);
        v13 = v25;
        v12 = v27;
        v14 = v29;
        v9 = v33;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v49;
        v4 = v37;
        LODWORD(result) = v45;
        a3 = v41;
      }
    }
    v16 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v16 & 1) == 0)
    {
      v46 = result;
      v42 = a3;
      v38 = v4;
      v50 = v6;
      v30 = v14;
      v34 = v9;
      v26 = v13;
      v28 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v13 = v26;
      v12 = v28;
      v14 = v30;
      v9 = v34;
      *(_QWORD *)&v23 = 0x3F0000003F000000;
      *((_QWORD *)&v23 + 1) = 0x3F0000003F000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v50;
      v4 = v38;
      a3 = v42;
      v24 = result;
      LODWORD(result) = v46;
      if (v24)
      {
        xmmword_10048AA10 = v23;
        __cxa_guard_release(qword_10048AA20);
        v13 = v26;
        v12 = v28;
        v14 = v30;
        v9 = v34;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v50;
        v4 = v38;
        LODWORD(result) = v46;
        a3 = v42;
      }
    }
    *a3++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v9, (float32x4_t)vorrq_s8(vandq_s8(v13, (int8x16_t)v9), v12)))), vcvtq_s32_f32(vaddq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v7[159], (int8x16_t)v14), v8[161]))));
    v6 += 2;
    result = (result + 8);
  }
  while (v4 >= (int)result);
  return result;
}

uint64_t sub_1002065F8(uint64_t a1, float64x2_t *a2, int16x8_t *a3, int a4)
{
  int v4;
  uint64_t result;
  float64x2_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  float32x4_t v19;
  float32x4_t v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int16x8_t *v53;
  int16x8_t *v54;
  int16x8_t *v55;
  int16x8_t *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  float64x2_t *v61;
  float64x2_t *v62;
  float64x2_t *v63;
  float64x2_t *v64;

  v4 = a4 - 8;
  if (a4 < 8)
    return 0;
  LODWORD(result) = 0;
  v6 = a2 + 2;
  v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v9 = v6[-2];
    v10 = v6[-1];
    v12 = *v6;
    v11 = v6[1];
    v13 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v13 & 1) == 0)
    {
      v57 = result;
      v53 = a3;
      v49 = v4;
      v61 = v6;
      v45 = v6[-1];
      v37 = v6[-2];
      v41 = v6[1];
      v33 = *v6;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v12 = v33;
      v9 = v37;
      v11 = v41;
      v10 = v45;
      *(_QWORD *)&v21 = 0x8000000080000000;
      *((_QWORD *)&v21 + 1) = 0x8000000080000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v61;
      v4 = v49;
      a3 = v53;
      v22 = result;
      LODWORD(result) = v57;
      if (v22)
      {
        xmmword_10048A9F0 = v21;
        __cxa_guard_release(qword_10048AA00);
        v12 = v33;
        v9 = v37;
        v11 = v41;
        v10 = v45;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v61;
        v4 = v49;
        LODWORD(result) = v57;
        a3 = v53;
      }
    }
    v14 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v14 & 1) == 0)
    {
      v58 = result;
      v54 = a3;
      v50 = v4;
      v62 = v6;
      v46 = v10;
      v38 = v9;
      v42 = v11;
      v34 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v12 = v34;
      v9 = v38;
      v11 = v42;
      v10 = v46;
      *(_QWORD *)&v23 = 0x3F0000003F000000;
      *((_QWORD *)&v23 + 1) = 0x3F0000003F000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v62;
      v4 = v50;
      a3 = v54;
      v24 = result;
      LODWORD(result) = v58;
      if (v24)
      {
        xmmword_10048AA10 = v23;
        __cxa_guard_release(qword_10048AA20);
        v12 = v34;
        v9 = v38;
        v11 = v42;
        v10 = v46;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v62;
        v4 = v50;
        LODWORD(result) = v58;
        a3 = v54;
      }
    }
    v15 = v8[161];
    v16 = v7[159];
    v17 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v17 & 1) == 0)
    {
      v59 = result;
      v55 = a3;
      v51 = v4;
      v63 = v6;
      v47 = v10;
      v39 = v9;
      v43 = v11;
      v31 = v8[161];
      v35 = v12;
      v29 = v7[159];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v16 = v29;
      v15 = v31;
      v12 = v35;
      v9 = v39;
      v11 = v43;
      v10 = v47;
      *(_QWORD *)&v25 = 0x8000000080000000;
      *((_QWORD *)&v25 + 1) = 0x8000000080000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v63;
      v4 = v51;
      a3 = v55;
      v26 = result;
      LODWORD(result) = v59;
      if (v26)
      {
        xmmword_10048A9F0 = v25;
        __cxa_guard_release(qword_10048AA00);
        v16 = v29;
        v15 = v31;
        v12 = v35;
        v9 = v39;
        v11 = v43;
        v10 = v47;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v63;
        v4 = v51;
        LODWORD(result) = v59;
        a3 = v55;
      }
    }
    v18 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v18 & 1) == 0)
    {
      v60 = result;
      v56 = a3;
      v52 = v4;
      v64 = v6;
      v48 = v10;
      v40 = v9;
      v44 = v11;
      v32 = v15;
      v36 = v12;
      v30 = v16;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v16 = v30;
      v15 = v32;
      v12 = v36;
      v9 = v40;
      v11 = v44;
      v10 = v48;
      *(_QWORD *)&v27 = 0x3F0000003F000000;
      *((_QWORD *)&v27 + 1) = 0x3F0000003F000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v64;
      v4 = v52;
      a3 = v56;
      v28 = result;
      LODWORD(result) = v60;
      if (v28)
      {
        xmmword_10048AA10 = v27;
        __cxa_guard_release(qword_10048AA20);
        v16 = v30;
        v15 = v32;
        v12 = v36;
        v9 = v40;
        v11 = v44;
        v10 = v48;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v64;
        v4 = v52;
        LODWORD(result) = v60;
        a3 = v56;
      }
    }
    v19 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v10);
    v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v11);
    *a3++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v16, (int8x16_t)v19), v15)))), vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v7[159], (int8x16_t)v20), v8[161]))));
    v6 += 4;
    result = (result + 8);
  }
  while (v4 >= (int)result);
  return result;
}

uint64_t sub_1002069A0(uint64_t a1, float32x4_t *a2, int16x8_t *a3, int a4)
{
  int v4;
  uint64_t result;
  float32x4_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  float32x4_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int16x8_t *v39;
  int16x8_t *v40;
  int16x8_t *v41;
  int16x8_t *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  float32x4_t *v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t *v50;

  v4 = a4 - 8;
  if (a4 < 8)
    return 0;
  LODWORD(result) = 0;
  v6 = a2 + 1;
  v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v9 = v6[-1];
    v10 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v10 & 1) == 0)
    {
      v43 = result;
      v39 = a3;
      v35 = v4;
      v47 = v6;
      v31 = v6[-1];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v9 = v31;
      *(_QWORD *)&v17 = 0x8000000080000000;
      *((_QWORD *)&v17 + 1) = 0x8000000080000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v47;
      v4 = v35;
      a3 = v39;
      v18 = result;
      LODWORD(result) = v43;
      if (v18)
      {
        xmmword_10048A9F0 = v17;
        __cxa_guard_release(qword_10048AA00);
        v9 = v31;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v47;
        v4 = v35;
        LODWORD(result) = v43;
        a3 = v39;
      }
    }
    v11 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v11 & 1) == 0)
    {
      v44 = result;
      v40 = a3;
      v36 = v4;
      v48 = v6;
      v32 = v9;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v9 = v32;
      *(_QWORD *)&v19 = 0x3F0000003F000000;
      *((_QWORD *)&v19 + 1) = 0x3F0000003F000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v48;
      v4 = v36;
      a3 = v40;
      v20 = result;
      LODWORD(result) = v44;
      if (v20)
      {
        xmmword_10048AA10 = v19;
        __cxa_guard_release(qword_10048AA20);
        v9 = v32;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v48;
        v4 = v36;
        LODWORD(result) = v44;
        a3 = v40;
      }
    }
    v12 = v8[161];
    v13 = v7[159];
    v14 = *v6;
    v15 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v15 & 1) == 0)
    {
      v45 = result;
      v41 = a3;
      v37 = v4;
      v49 = v6;
      v29 = *v6;
      v33 = v9;
      v25 = v7[159];
      v27 = v8[161];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v13 = v25;
      v12 = v27;
      v14 = v29;
      v9 = v33;
      *(_QWORD *)&v21 = 0x8000000080000000;
      *((_QWORD *)&v21 + 1) = 0x8000000080000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v49;
      v4 = v37;
      a3 = v41;
      v22 = result;
      LODWORD(result) = v45;
      if (v22)
      {
        xmmword_10048A9F0 = v21;
        __cxa_guard_release(qword_10048AA00);
        v13 = v25;
        v12 = v27;
        v14 = v29;
        v9 = v33;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v49;
        v4 = v37;
        LODWORD(result) = v45;
        a3 = v41;
      }
    }
    v16 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v16 & 1) == 0)
    {
      v46 = result;
      v42 = a3;
      v38 = v4;
      v50 = v6;
      v30 = v14;
      v34 = v9;
      v26 = v13;
      v28 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v13 = v26;
      v12 = v28;
      v14 = v30;
      v9 = v34;
      *(_QWORD *)&v23 = 0x3F0000003F000000;
      *((_QWORD *)&v23 + 1) = 0x3F0000003F000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v50;
      v4 = v38;
      a3 = v42;
      v24 = result;
      LODWORD(result) = v46;
      if (v24)
      {
        xmmword_10048AA10 = v23;
        __cxa_guard_release(qword_10048AA20);
        v13 = v26;
        v12 = v28;
        v14 = v30;
        v9 = v34;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v50;
        v4 = v38;
        LODWORD(result) = v46;
        a3 = v42;
      }
    }
    *a3++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v9, (float32x4_t)vorrq_s8(vandq_s8(v13, (int8x16_t)v9), v12)))), vcvtq_s32_f32(vaddq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v7[159], (int8x16_t)v14), v8[161]))));
    v6 += 2;
    result = (result + 8);
  }
  while (v4 >= (int)result);
  return result;
}

uint64_t sub_100206CD8(uint64_t a1, float64x2_t *a2, int16x8_t *a3, int a4)
{
  int v4;
  uint64_t result;
  float64x2_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  float32x4_t v19;
  float32x4_t v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int16x8_t *v53;
  int16x8_t *v54;
  int16x8_t *v55;
  int16x8_t *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  float64x2_t *v61;
  float64x2_t *v62;
  float64x2_t *v63;
  float64x2_t *v64;

  v4 = a4 - 8;
  if (a4 < 8)
    return 0;
  LODWORD(result) = 0;
  v6 = a2 + 2;
  v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v9 = v6[-2];
    v10 = v6[-1];
    v12 = *v6;
    v11 = v6[1];
    v13 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v13 & 1) == 0)
    {
      v57 = result;
      v53 = a3;
      v49 = v4;
      v61 = v6;
      v45 = v6[-1];
      v37 = v6[-2];
      v41 = v6[1];
      v33 = *v6;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v12 = v33;
      v9 = v37;
      v11 = v41;
      v10 = v45;
      *(_QWORD *)&v21 = 0x8000000080000000;
      *((_QWORD *)&v21 + 1) = 0x8000000080000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v61;
      v4 = v49;
      a3 = v53;
      v22 = result;
      LODWORD(result) = v57;
      if (v22)
      {
        xmmword_10048A9F0 = v21;
        __cxa_guard_release(qword_10048AA00);
        v12 = v33;
        v9 = v37;
        v11 = v41;
        v10 = v45;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v61;
        v4 = v49;
        LODWORD(result) = v57;
        a3 = v53;
      }
    }
    v14 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v14 & 1) == 0)
    {
      v58 = result;
      v54 = a3;
      v50 = v4;
      v62 = v6;
      v46 = v10;
      v38 = v9;
      v42 = v11;
      v34 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v12 = v34;
      v9 = v38;
      v11 = v42;
      v10 = v46;
      *(_QWORD *)&v23 = 0x3F0000003F000000;
      *((_QWORD *)&v23 + 1) = 0x3F0000003F000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v62;
      v4 = v50;
      a3 = v54;
      v24 = result;
      LODWORD(result) = v58;
      if (v24)
      {
        xmmword_10048AA10 = v23;
        __cxa_guard_release(qword_10048AA20);
        v12 = v34;
        v9 = v38;
        v11 = v42;
        v10 = v46;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v62;
        v4 = v50;
        LODWORD(result) = v58;
        a3 = v54;
      }
    }
    v15 = v8[161];
    v16 = v7[159];
    v17 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v17 & 1) == 0)
    {
      v59 = result;
      v55 = a3;
      v51 = v4;
      v63 = v6;
      v47 = v10;
      v39 = v9;
      v43 = v11;
      v31 = v8[161];
      v35 = v12;
      v29 = v7[159];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v16 = v29;
      v15 = v31;
      v12 = v35;
      v9 = v39;
      v11 = v43;
      v10 = v47;
      *(_QWORD *)&v25 = 0x8000000080000000;
      *((_QWORD *)&v25 + 1) = 0x8000000080000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v63;
      v4 = v51;
      a3 = v55;
      v26 = result;
      LODWORD(result) = v59;
      if (v26)
      {
        xmmword_10048A9F0 = v25;
        __cxa_guard_release(qword_10048AA00);
        v16 = v29;
        v15 = v31;
        v12 = v35;
        v9 = v39;
        v11 = v43;
        v10 = v47;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v63;
        v4 = v51;
        LODWORD(result) = v59;
        a3 = v55;
      }
    }
    v18 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v18 & 1) == 0)
    {
      v60 = result;
      v56 = a3;
      v52 = v4;
      v64 = v6;
      v48 = v10;
      v40 = v9;
      v44 = v11;
      v32 = v15;
      v36 = v12;
      v30 = v16;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v16 = v30;
      v15 = v32;
      v12 = v36;
      v9 = v40;
      v11 = v44;
      v10 = v48;
      *(_QWORD *)&v27 = 0x3F0000003F000000;
      *((_QWORD *)&v27 + 1) = 0x3F0000003F000000;
      v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v64;
      v4 = v52;
      a3 = v56;
      v28 = result;
      LODWORD(result) = v60;
      if (v28)
      {
        xmmword_10048AA10 = v27;
        __cxa_guard_release(qword_10048AA20);
        v16 = v30;
        v15 = v32;
        v12 = v36;
        v9 = v40;
        v11 = v44;
        v10 = v48;
        v8 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v7 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v64;
        v4 = v52;
        LODWORD(result) = v60;
        a3 = v56;
      }
    }
    v19 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v10);
    v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v11);
    *a3++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v16, (int8x16_t)v19), v15)))), vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v7[159], (int8x16_t)v20), v8[161]))));
    v6 += 4;
    result = (result + 8);
  }
  while (v4 >= (int)result);
  return result;
}

uint64_t sub_100207080(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float v16;
  float v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int32x2_t v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  char v25;

  v9 = a8[1];
  if (v9)
  {
    v13 = result;
    v14 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v15 = *(double *)(a9 + 8);
    v16 = *(double *)a9;
    v17 = v15;
    v18 = v14 - 4;
    do
    {
      a3.n128_f32[0] = v16;
      *(float *)&v15 = v17;
      result = sub_100210374(a3, *(int32x2_t *)&v15, (uint64_t)&v25, v13, a6, v14);
      if ((int)result <= (int)v18)
      {
        result = (int)result;
        do
        {
          a3.n128_u8[0] = *(_BYTE *)(v13 + result);
          *(float *)&v19 = rintf(v17 + (float)((float)a3.n128_u32[0] * v16));
          v20 = (uint64_t)*(float *)&v19;
          LOBYTE(v19) = *(_BYTE *)(v13 + result + 1);
          v21 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v17 + (float)((float)v19 * v16)), v20), 0), (int32x2_t)0xFF000000FFLL);
          v22 = (_BYTE *)(a6 + result);
          v22[1] = v21.i8[4];
          *v22 = v21.i8[0];
          v21.i8[0] = *(_BYTE *)(v13 + result + 2);
          LOBYTE(v15) = *(_BYTE *)(v13 + result + 3);
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v17 + (float)((float)LODWORD(v15) * v16)), (uint64_t)rintf(v17 + (float)((float)v21.u32[0] * v16))), 0), (int32x2_t)0xFF000000FFLL);
          v22[3] = a3.n128_u8[4];
          v22[2] = a3.n128_u8[0];
          result += 4;
        }
        while (result <= v18);
      }
      if ((int)result < (int)v14)
      {
        v23 = (int)result;
        do
        {
          a3.n128_u8[0] = *(_BYTE *)(v13 + v23);
          a3.n128_f32[0] = rintf(v17 + (float)((float)a3.n128_u32[0] * v16));
          v24 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          *(_BYTE *)(a6 + v23++) = v24;
        }
        while (v14 != v23);
      }
      v13 += a2;
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100207220(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  uint64_t v13;
  uint64_t v14;
  int32x2_t v15;
  float v16;
  float v17;
  uint64_t v18;
  int8x8_t v19;
  int32x2_t v20;
  _BYTE *v21;
  int8x8_t v22;
  uint64_t v23;
  int v24;
  char v25;

  v9 = a8[1];
  if (v9)
  {
    v13 = result;
    v14 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v15 = *(int32x2_t *)(a9 + 8);
    v16 = *(double *)a9;
    v17 = *(double *)v15.i32;
    v18 = v14 - 4;
    do
    {
      a3.n128_f32[0] = v16;
      *(float *)v15.i32 = v17;
      result = sub_1002106CC(a3, v15, (uint64_t)&v25, v13, a6, v14);
      if ((int)result <= (int)v18)
      {
        result = (int)result;
        do
        {
          a3.n128_u8[0] = *(_BYTE *)(v13 + result);
          v15.i8[0] = *(_BYTE *)(v13 + result + 1);
          v19 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)v15)).u64[0];
          *(float *)v19.i32 = rintf(v17 + (float)((float)v19.i32[0] * v16));
          v20.i32[0] = (uint64_t)rintf(v17+ (float)((float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).i32[0]* v16));
          v20.i32[1] = (uint64_t)*(float *)v19.i32;
          v21 = (_BYTE *)(a6 + result);
          v22 = (int8x8_t)vmin_s32(vmax_s32(v20, 0), (int32x2_t)0xFF000000FFLL);
          v21[1] = v22.i8[4];
          *v21 = v22.i8[0];
          v22.i8[0] = *(_BYTE *)(v13 + result + 2);
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v22));
          v19.i8[0] = *(_BYTE *)(v13 + result + 3);
          v15 = (int32x2_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v19)).u64[0];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v17 + (float)((float)v15.i32[0] * v16)), (uint64_t)rintf(v17 + (float)((float)a3.n128_i32[0] * v16))), 0), (int32x2_t)0xFF000000FFLL);
          v21[3] = a3.n128_u8[4];
          v21[2] = a3.n128_u8[0];
          result += 4;
        }
        while (result <= v18);
      }
      if ((int)result < (int)v14)
      {
        v23 = (int)result;
        do
        {
          a3.n128_u8[0] = *(_BYTE *)(v13 + v23);
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0]));
          a3.n128_f32[0] = rintf(v17 + (float)((float)a3.n128_i32[0] * v16));
          v24 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          *(_BYTE *)(a6 + v23++) = v24;
        }
        while (v14 != v23);
      }
      v13 += a2;
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1002073E8(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  uint16x8_t *v12;
  uint64_t v13;
  double v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int32x2_t v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  char v27;

  v9 = a8[1];
  if (v9)
  {
    v12 = (uint16x8_t *)result;
    v13 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v14 = *(double *)(a9 + 8);
    v15 = *(double *)a9;
    v16 = v14;
    v17 = v13 - 4;
    v18 = 2 * (a2 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&v14 = v16;
      result = sub_100210A24(a3, *(int32x2_t *)&v14, (uint64_t)&v27, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        v19 = (int)result;
        v20 = 2 * (int)result + 4;
        do
        {
          a3.n128_u16[0] = *(unsigned __int16 *)((char *)&v12->u16[-2] + v20);
          *(float *)&v21 = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          v22 = (uint64_t)*(float *)&v21;
          LOWORD(v21) = v12->i16[v19 + 1];
          v23 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)v21 * v15)), v22), 0), (int32x2_t)0xFF000000FFLL);
          v24 = (_BYTE *)(a6 + v19);
          v24[1] = v23.i8[4];
          *v24 = v23.i8[0];
          v23.i16[0] = *(__int16 *)((char *)v12->i16 + v20);
          LOWORD(v14) = *(__int16 *)((char *)&v12->i16[1] + v20);
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)LODWORD(v14) * v15)), (uint64_t)rintf(v16 + (float)((float)v23.u32[0] * v15))), 0), (int32x2_t)0xFF000000FFLL);
          v24[3] = a3.n128_u8[4];
          v24[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 8;
        }
        while (v19 <= v17);
        result = v19;
      }
      if ((int)result < (int)v13)
      {
        v25 = (int)result;
        do
        {
          a3.n128_u16[0] = v12->u16[v25];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          v26 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v26 >= 255)
            LOBYTE(v26) = -1;
          *(_BYTE *)(a6 + v25++) = v26;
        }
        while (v13 != v25);
      }
      v12 = (uint16x8_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1002075A0(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  int16x8_t *v12;
  uint64_t v13;
  int16x4_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int16x4_t v21;
  int16x4_t v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  char v26;

  v9 = a8[1];
  if (v9)
  {
    v12 = (int16x8_t *)result;
    v13 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v14 = *(int16x4_t *)(a9 + 8);
    v15 = *(double *)a9;
    v16 = *(double *)v14.i32;
    v17 = v13 - 4;
    v18 = 2 * (a2 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)v14.i32 = v16;
      result = sub_100210D7C(a3, (int32x2_t)v14, (uint64_t)&v26, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        v19 = (int)result;
        v20 = 2 * (int)result + 4;
        do
        {
          a3.n128_u16[0] = *(unsigned __int16 *)((char *)&v12->u16[-2] + v20);
          v14.i16[0] = v12->i16[v19 + 1];
          v21 = (int16x4_t)vmovl_s16(v14).u64[0];
          *(float *)v21.i32 = v16 + (float)((float)v21.i32[0] * v15);
          v22 = (int16x4_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(*(float *)v21.i32), (uint64_t)rintf(v16+ (float)((float)vmovl_s16((int16x4_t)a3.n128_u64[0]).i32[0] * v15))), 0), (int32x2_t)0xFF000000FFLL);
          v23 = (_BYTE *)(a6 + v19);
          v23[1] = v22.i8[4];
          *v23 = v22.i8[0];
          v22.i16[0] = *(__int16 *)((char *)v12->i16 + v20);
          a3 = (__n128)vmovl_s16(v22);
          v21.i16[0] = *(__int16 *)((char *)&v12->i16[1] + v20);
          v14 = (int16x4_t)vmovl_s16(v21).u64[0];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)v14.i32[0] * v15)), (uint64_t)rintf(v16 + (float)((float)a3.n128_i32[0] * v15))), 0), (int32x2_t)0xFF000000FFLL);
          v23[3] = a3.n128_u8[4];
          v23[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 8;
        }
        while (v19 <= v17);
        result = v19;
      }
      if ((int)result < (int)v13)
      {
        v24 = (int)result;
        do
        {
          a3.n128_u16[0] = v12->u16[v24];
          a3 = (__n128)vmovl_s16((int16x4_t)a3.n128_u64[0]);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          v25 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v25 >= 255)
            LOBYTE(v25) = -1;
          *(_BYTE *)(a6 + v24++) = v25;
        }
        while (v13 != v24);
      }
      v12 = (int16x8_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_10020776C(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  int32x4_t *v12;
  uint64_t v13;
  double v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x2_t v21;
  _BYTE *v22;
  uint64_t v23;
  float v24;
  int v25;
  char v26;

  v9 = a8[1];
  if (v9)
  {
    v12 = (int32x4_t *)result;
    v13 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v14 = *(double *)(a9 + 8);
    v15 = *(double *)a9;
    v16 = v14;
    v17 = v13 - 4;
    v18 = 4 * (a2 >> 2);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&v14 = v16;
      result = sub_1002110D4(a3, *(int32x2_t *)&v14, (uint64_t)&v26, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        v19 = (int)result;
        v20 = 4 * (int)result + 8;
        do
        {
          v21 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)v12->i32[v19 + 1] * v15)), (uint64_t)rintf(v16 + (float)((float)*(int *)((char *)&v12->i32[-2] + v20) * v15))), 0), (int32x2_t)0xFF000000FFLL);
          v22 = (_BYTE *)(a6 + v19);
          v22[1] = v21.i8[4];
          *v22 = v21.i8[0];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16+ (float)((float)*(int *)((char *)&v12->i32[1]+ v20)* v15)), (uint64_t)rintf(v16+ (float)((float)*(int *)((char *)v12->i32 + v20)* v15))), 0), (int32x2_t)0xFF000000FFLL);
          v22[3] = a3.n128_u8[4];
          v22[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 16;
        }
        while (v19 <= v17);
        result = v19;
      }
      if ((int)result < (int)v13)
      {
        v23 = (int)result;
        do
        {
          v24 = rintf(v16 + (float)((float)v12->i32[v23] * v15));
          v25 = (uint64_t)v24 & ~((int)(uint64_t)v24 >> 31);
          if (v25 >= 255)
            LOBYTE(v25) = -1;
          *(_BYTE *)(a6 + v23++) = v25;
        }
        while (v13 != v23);
      }
      v12 = (int32x4_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100207920(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  float32x4_t *v12;
  uint64_t v13;
  double v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  int32x2_t v22;
  uint64_t v23;
  float v24;
  int v25;
  char v26;

  v9 = a8[1];
  if (v9)
  {
    v12 = (float32x4_t *)result;
    v13 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v14 = *(double *)(a9 + 8);
    v15 = *(double *)a9;
    v16 = v14;
    v17 = v13 - 4;
    v18 = 4 * (a2 >> 2);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&v14 = v16;
      result = sub_100211458(a3, *(int32x2_t *)&v14, (uint64_t)&v26, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        v19 = (int)result;
        v20 = 4 * (int)result + 8;
        do
        {
          v21 = (_BYTE *)(a6 + v19);
          v22 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)(v12->f32[v19 + 1] * v15)), (uint64_t)rintf(v16 + (float)(*(float *)((char *)&v12->f32[-2] + v20) * v15))), 0), (int32x2_t)0xFF000000FFLL);
          *v21 = v22.i8[0];
          v21[1] = v22.i8[4];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16+ (float)(*(float *)((char *)&v12->f32[1] + v20)* v15)), (uint64_t)rintf(v16+ (float)(*(float *)((char *)v12->f32 + v20) * v15))), 0), (int32x2_t)0xFF000000FFLL);
          v21[3] = a3.n128_u8[4];
          v21[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 16;
        }
        while (v19 <= v17);
        result = v19;
      }
      if ((int)result < (int)v13)
      {
        v23 = (int)result;
        do
        {
          v24 = rintf(v16 + (float)(v12->f32[v23] * v15));
          v25 = (uint64_t)v24 & ~((int)(uint64_t)v24 >> 31);
          if (v25 >= 255)
            LOBYTE(v25) = -1;
          *(_BYTE *)(a6 + v23++) = v25;
        }
        while (v13 != v23);
      }
      v12 = (float32x4_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100207AC0(uint64_t result, unint64_t a2, double a3, double a4, double a5, double a6, double a7, __n128 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, double *a14)
{
  int v14;
  float64x2_t *v17;
  uint64_t v18;
  float v19;
  float v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  int32x2_t v28;
  int32x2_t v29;
  uint64_t v30;
  double v31;
  int v32;
  char v33;

  v14 = a13[1];
  if (v14)
  {
    v17 = (float64x2_t *)result;
    v18 = *a13;
    v19 = *a14;
    v20 = a14[1];
    v21 = v19;
    v22 = v20;
    v23 = v18 - 4;
    v24 = 8 * (a2 >> 3);
    do
    {
      result = sub_1002117D4(v19, v20, a5, a6, a7, a8, (uint64_t)&v33, v17, a11, v18);
      if ((int)result <= (int)v23)
      {
        v25 = (int)result;
        v26 = 8 * (int)result + 16;
        a5 = 0.0;
        do
        {
          v27 = (_BYTE *)(a11 + v25);
          v28 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v22 + v17->f64[v25 + 1] * v21), (uint64_t)rint(v22 + *(double *)((char *)v17[-1].f64 + v26) * v21)), 0), (int32x2_t)0xFF000000FFLL);
          *v27 = v28.i8[0];
          v27[1] = v28.i8[4];
          v29 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v22 + *(double *)((char *)&v17->f64[1] + v26) * v21), (uint64_t)rint(v22 + *(double *)((char *)v17->f64 + v26) * v21)), 0), (int32x2_t)0xFF000000FFLL);
          v27[3] = v29.i8[4];
          v27[2] = v29.i8[0];
          v25 += 4;
          v26 += 32;
        }
        while (v25 <= v23);
        result = v25;
      }
      if ((int)result < (int)v18)
      {
        v30 = (int)result;
        do
        {
          v31 = rint(v22 + v17->f64[v30] * v21);
          v32 = (uint64_t)v31 & ~((int)(uint64_t)v31 >> 31);
          if (v32 >= 255)
            LOBYTE(v32) = -1;
          *(_BYTE *)(a11 + v30++) = v32;
        }
        while (v18 != v30);
      }
      v17 = (float64x2_t *)((char *)v17 + v24);
      a11 += a12;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_100207C70(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float v16;
  float v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int32x2_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v9 = a8[1];
  if (v9)
  {
    v13 = result;
    v14 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v15 = *(double *)(a9 + 8);
    v16 = *(double *)a9;
    v17 = v15;
    v18 = v14 - 4;
    do
    {
      a3.n128_f32[0] = v16;
      *(float *)&v15 = v17;
      result = sub_100211B7C(a3, *(int32x2_t *)&v15, (uint64_t)&v25, v13, a6, v14);
      if ((int)result <= (int)v18)
      {
        result = (int)result;
        do
        {
          a3.n128_u8[0] = *(_BYTE *)(v13 + result);
          *(float *)&v19 = rintf(v17 + (float)((float)a3.n128_u32[0] * v16));
          v20 = (uint64_t)*(float *)&v19;
          LOBYTE(v19) = *(_BYTE *)(v13 + result + 1);
          v21 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v17 + (float)((float)v19 * v16)), v20), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v22 = (_BYTE *)(a6 + result);
          v22[1] = v21.i8[4];
          *v22 = v21.i8[0];
          v21.i8[0] = *(_BYTE *)(v13 + result + 2);
          LOBYTE(v15) = *(_BYTE *)(v13 + result + 3);
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v17 + (float)((float)LODWORD(v15) * v16)), (uint64_t)rintf(v17 + (float)((float)v21.u32[0] * v16))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v22[3] = a3.n128_u8[4];
          v22[2] = a3.n128_u8[0];
          result += 4;
        }
        while (result <= v18);
      }
      if ((int)result < (int)v14)
      {
        v23 = (int)result;
        do
        {
          a3.n128_u8[0] = *(_BYTE *)(v13 + v23);
          a3.n128_f32[0] = rintf(v17 + (float)((float)a3.n128_u32[0] * v16));
          v24 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -128)
            LODWORD(v24) = -128;
          if ((int)v24 >= 127)
            LOBYTE(v24) = 127;
          *(_BYTE *)(a6 + v23++) = v24;
        }
        while (v14 != v23);
      }
      v13 += a2;
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100207E20(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  uint64_t v13;
  uint64_t v14;
  int32x2_t v15;
  float v16;
  float v17;
  uint64_t v18;
  int8x8_t v19;
  int32x2_t v20;
  _BYTE *v21;
  int8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v9 = a8[1];
  if (v9)
  {
    v13 = result;
    v14 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v15 = *(int32x2_t *)(a9 + 8);
    v16 = *(double *)a9;
    v17 = *(double *)v15.i32;
    v18 = v14 - 4;
    do
    {
      a3.n128_f32[0] = v16;
      *(float *)v15.i32 = v17;
      result = sub_100211ED4(a3, v15, (uint64_t)&v25, v13, a6, v14);
      if ((int)result <= (int)v18)
      {
        result = (int)result;
        do
        {
          a3.n128_u8[0] = *(_BYTE *)(v13 + result);
          v15.i8[0] = *(_BYTE *)(v13 + result + 1);
          v19 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)v15)).u64[0];
          *(float *)v19.i32 = rintf(v17 + (float)((float)v19.i32[0] * v16));
          v20.i32[0] = (uint64_t)rintf(v17+ (float)((float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).i32[0]* v16));
          v20.i32[1] = (uint64_t)*(float *)v19.i32;
          v21 = (_BYTE *)(a6 + result);
          v22 = (int8x8_t)vmin_s32(vmax_s32(v20, (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v21[1] = v22.i8[4];
          *v21 = v22.i8[0];
          v22.i8[0] = *(_BYTE *)(v13 + result + 2);
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v22));
          v19.i8[0] = *(_BYTE *)(v13 + result + 3);
          v15 = (int32x2_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v19)).u64[0];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v17 + (float)((float)v15.i32[0] * v16)), (uint64_t)rintf(v17 + (float)((float)a3.n128_i32[0] * v16))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v21[3] = a3.n128_u8[4];
          v21[2] = a3.n128_u8[0];
          result += 4;
        }
        while (result <= v18);
      }
      if ((int)result < (int)v14)
      {
        v23 = (int)result;
        do
        {
          a3.n128_u8[0] = *(_BYTE *)(v13 + v23);
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0]));
          a3.n128_f32[0] = rintf(v17 + (float)((float)a3.n128_i32[0] * v16));
          v24 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -128)
            LODWORD(v24) = -128;
          if ((int)v24 >= 127)
            LOBYTE(v24) = 127;
          *(_BYTE *)(a6 + v23++) = v24;
        }
        while (v14 != v23);
      }
      v13 += a2;
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100207FF8(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  uint16x8_t *v12;
  uint64_t v13;
  double v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int32x2_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v9 = a8[1];
  if (v9)
  {
    v12 = (uint16x8_t *)result;
    v13 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v14 = *(double *)(a9 + 8);
    v15 = *(double *)a9;
    v16 = v14;
    v17 = v13 - 4;
    v18 = 2 * (a2 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&v14 = v16;
      result = sub_10021222C(a3, *(int32x2_t *)&v14, (uint64_t)&v27, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        v19 = (int)result;
        v20 = 2 * (int)result + 4;
        do
        {
          a3.n128_u16[0] = *(unsigned __int16 *)((char *)&v12->u16[-2] + v20);
          *(float *)&v21 = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          v22 = (uint64_t)*(float *)&v21;
          LOWORD(v21) = v12->i16[v19 + 1];
          v23 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)v21 * v15)), v22), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v24 = (_BYTE *)(a6 + v19);
          v24[1] = v23.i8[4];
          *v24 = v23.i8[0];
          v23.i16[0] = *(__int16 *)((char *)v12->i16 + v20);
          LOWORD(v14) = *(__int16 *)((char *)&v12->i16[1] + v20);
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)LODWORD(v14) * v15)), (uint64_t)rintf(v16 + (float)((float)v23.u32[0] * v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v24[3] = a3.n128_u8[4];
          v24[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 8;
        }
        while (v19 <= v17);
        result = v19;
      }
      if ((int)result < (int)v13)
      {
        v25 = (int)result;
        do
        {
          a3.n128_u16[0] = v12->u16[v25];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          v26 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -128)
            LODWORD(v26) = -128;
          if ((int)v26 >= 127)
            LOBYTE(v26) = 127;
          *(_BYTE *)(a6 + v25++) = v26;
        }
        while (v13 != v25);
      }
      v12 = (uint16x8_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1002081C0(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  int16x8_t *v12;
  uint64_t v13;
  int16x4_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int16x4_t v21;
  int16x4_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v9 = a8[1];
  if (v9)
  {
    v12 = (int16x8_t *)result;
    v13 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v14 = *(int16x4_t *)(a9 + 8);
    v15 = *(double *)a9;
    v16 = *(double *)v14.i32;
    v17 = v13 - 4;
    v18 = 2 * (a2 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)v14.i32 = v16;
      result = sub_100212584(a3, (int32x2_t)v14, (uint64_t)&v26, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        v19 = (int)result;
        v20 = 2 * (int)result + 4;
        do
        {
          a3.n128_u16[0] = *(unsigned __int16 *)((char *)&v12->u16[-2] + v20);
          v14.i16[0] = v12->i16[v19 + 1];
          v21 = (int16x4_t)vmovl_s16(v14).u64[0];
          *(float *)v21.i32 = v16 + (float)((float)v21.i32[0] * v15);
          v22 = (int16x4_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(*(float *)v21.i32), (uint64_t)rintf(v16+ (float)((float)vmovl_s16((int16x4_t)a3.n128_u64[0]).i32[0] * v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v23 = (_BYTE *)(a6 + v19);
          v23[1] = v22.i8[4];
          *v23 = v22.i8[0];
          v22.i16[0] = *(__int16 *)((char *)v12->i16 + v20);
          a3 = (__n128)vmovl_s16(v22);
          v21.i16[0] = *(__int16 *)((char *)&v12->i16[1] + v20);
          v14 = (int16x4_t)vmovl_s16(v21).u64[0];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)v14.i32[0] * v15)), (uint64_t)rintf(v16 + (float)((float)a3.n128_i32[0] * v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v23[3] = a3.n128_u8[4];
          v23[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 8;
        }
        while (v19 <= v17);
        result = v19;
      }
      if ((int)result < (int)v13)
      {
        v24 = (int)result;
        do
        {
          a3.n128_u16[0] = v12->u16[v24];
          a3 = (__n128)vmovl_s16((int16x4_t)a3.n128_u64[0]);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          v25 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -128)
            LODWORD(v25) = -128;
          if ((int)v25 >= 127)
            LOBYTE(v25) = 127;
          *(_BYTE *)(a6 + v24++) = v25;
        }
        while (v13 != v24);
      }
      v12 = (int16x8_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_10020839C(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  int32x4_t *v12;
  uint64_t v13;
  double v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x2_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v9 = a8[1];
  if (v9)
  {
    v12 = (int32x4_t *)result;
    v13 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v14 = *(double *)(a9 + 8);
    v15 = *(double *)a9;
    v16 = v14;
    v17 = v13 - 4;
    v18 = 4 * (a2 >> 2);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&v14 = v16;
      result = sub_1002128DC(a3, *(int32x2_t *)&v14, (uint64_t)&v25, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        v19 = (int)result;
        v20 = 4 * (int)result + 8;
        do
        {
          v21 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)v12->i32[v19 + 1] * v15)), (uint64_t)rintf(v16 + (float)((float)*(int *)((char *)&v12->i32[-2] + v20) * v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v22 = (_BYTE *)(a6 + v19);
          v22[1] = v21.i8[4];
          *v22 = v21.i8[0];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16+ (float)((float)*(int *)((char *)&v12->i32[1]+ v20)* v15)), (uint64_t)rintf(v16+ (float)((float)*(int *)((char *)v12->i32 + v20)* v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v22[3] = a3.n128_u8[4];
          v22[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 16;
        }
        while (v19 <= v17);
        result = v19;
      }
      if ((int)result < (int)v13)
      {
        v23 = (int)result;
        do
        {
          v24 = (uint64_t)rintf(v16 + (float)((float)v12->i32[v23] * v15));
          if ((int)v24 <= -128)
            LODWORD(v24) = -128;
          if ((int)v24 >= 127)
            LOBYTE(v24) = 127;
          *(_BYTE *)(a6 + v23++) = v24;
        }
        while (v13 != v23);
      }
      v12 = (int32x4_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100208560(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  float32x4_t *v12;
  uint64_t v13;
  double v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  int32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v9 = a8[1];
  if (v9)
  {
    v12 = (float32x4_t *)result;
    v13 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v14 = *(double *)(a9 + 8);
    v15 = *(double *)a9;
    v16 = v14;
    v17 = v13 - 4;
    v18 = 4 * (a2 >> 2);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&v14 = v16;
      result = sub_100212C60(a3, *(int32x2_t *)&v14, (uint64_t)&v25, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        v19 = (int)result;
        v20 = 4 * (int)result + 8;
        do
        {
          v21 = (_BYTE *)(a6 + v19);
          v22 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)(v12->f32[v19 + 1] * v15)), (uint64_t)rintf(v16 + (float)(*(float *)((char *)&v12->f32[-2] + v20) * v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          *v21 = v22.i8[0];
          v21[1] = v22.i8[4];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16+ (float)(*(float *)((char *)&v12->f32[1] + v20)* v15)), (uint64_t)rintf(v16+ (float)(*(float *)((char *)v12->f32 + v20) * v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v21[3] = a3.n128_u8[4];
          v21[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 16;
        }
        while (v19 <= v17);
        result = v19;
      }
      if ((int)result < (int)v13)
      {
        v23 = (int)result;
        do
        {
          v24 = (uint64_t)rintf(v16 + (float)(v12->f32[v23] * v15));
          if ((int)v24 <= -128)
            LODWORD(v24) = -128;
          if ((int)v24 >= 127)
            LOBYTE(v24) = 127;
          *(_BYTE *)(a6 + v23++) = v24;
        }
        while (v13 != v23);
      }
      v12 = (float32x4_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100208710(uint64_t result, unint64_t a2, double a3, double a4, double a5, double a6, double a7, __n128 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, double *a14)
{
  int v14;
  float64x2_t *v17;
  uint64_t v18;
  float v19;
  float v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  int32x2_t v28;
  int32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v14 = a13[1];
  if (v14)
  {
    v17 = (float64x2_t *)result;
    v18 = *a13;
    v19 = *a14;
    v20 = a14[1];
    v21 = v19;
    v22 = v20;
    v23 = v18 - 4;
    v24 = 8 * (a2 >> 3);
    do
    {
      result = sub_100212FDC(v19, v20, a5, a6, a7, a8, (uint64_t)&v32, v17, a11, v18);
      if ((int)result <= (int)v23)
      {
        v25 = (int)result;
        v26 = 8 * (int)result + 16;
        do
        {
          v27 = (_BYTE *)(a11 + v25);
          v28 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v22 + v17->f64[v25 + 1] * v21), (uint64_t)rint(v22 + *(double *)((char *)v17[-1].f64 + v26) * v21)), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          *v27 = v28.i8[0];
          v27[1] = v28.i8[4];
          v29 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v22 + *(double *)((char *)&v17->f64[1] + v26) * v21), (uint64_t)rint(v22 + *(double *)((char *)v17->f64 + v26) * v21)), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v27[3] = v29.i8[4];
          v27[2] = v29.i8[0];
          v25 += 4;
          v26 += 32;
        }
        while (v25 <= v23);
        result = v25;
      }
      if ((int)result < (int)v18)
      {
        v30 = (int)result;
        do
        {
          v31 = (uint64_t)rint(v22 + v17->f64[v30] * v21);
          if ((int)v31 <= -128)
            LODWORD(v31) = -128;
          if ((int)v31 >= 127)
            LOBYTE(v31) = 127;
          *(_BYTE *)(a11 + v30++) = v31;
        }
        while (v18 != v30);
      }
      v17 = (float64x2_t *)((char *)v17 + v24);
      a11 += a12;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_1002088D0(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  uint64_t v12;
  uint64_t v13;
  double v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29;

  v9 = a8[1];
  if (v9)
  {
    v12 = result;
    v13 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v14 = *(double *)(a9 + 8);
    v15 = *(double *)a9;
    v16 = v14;
    v17 = v13 - 4;
    v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&v14 = v16;
      result = sub_100213384(a3, *(int32x2_t *)&v14, (uint64_t)&v29, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        v19 = (int)result;
        v20 = &a6->i16[(int)result];
        do
        {
          v21 = v12 + v19;
          a3.n128_u8[0] = *(_BYTE *)(v12 + v19);
          *(float *)&v22 = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          v23 = (uint64_t)*(float *)&v22 & ~((int)(uint64_t)*(float *)&v22 >> 31);
          LOBYTE(v22) = *(_BYTE *)(v12 + v19 + 1);
          a3.n128_f32[0] = rintf(v16 + (float)((float)v22 * v15));
          if (v23 >= 0xFFFF)
            LOWORD(v23) = -1;
          v24 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v24 >= 0xFFFF)
            LOWORD(v24) = -1;
          *v20 = v23;
          v20[1] = v24;
          a3.n128_u8[0] = *(_BYTE *)(v21 + 2);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          v25 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v25 >= 0xFFFF)
            LOWORD(v25) = -1;
          a3.n128_u8[0] = *(_BYTE *)(v21 + 3);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          v26 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v26 >= 0xFFFF)
            LOWORD(v26) = -1;
          v20[2] = v25;
          v20[3] = v26;
          v19 += 4;
          v20 += 4;
        }
        while (v19 <= v17);
        result = v19;
      }
      if ((int)result < (int)v13)
      {
        v27 = (int)result;
        do
        {
          a3.n128_u8[0] = *(_BYTE *)(v12 + v27);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          v28 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v28 >= 0xFFFF)
            LOWORD(v28) = -1;
          a6->i16[v27++] = v28;
        }
        while (v13 != v27);
      }
      v12 += a2;
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100208A6C(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  uint64_t v12;
  uint64_t v13;
  double v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;

  v9 = a8[1];
  if (v9)
  {
    v12 = result;
    v13 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v14 = *(double *)(a9 + 8);
    v15 = *(double *)a9;
    v16 = v14;
    v17 = v13 - 4;
    v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&v14 = v16;
      result = sub_1002136D8(a3, *(int32x2_t *)&v14, (uint64_t)&v28, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        v19 = (int)result;
        v20 = &a6->i16[(int)result];
        do
        {
          v21 = (_BYTE *)(v12 + v19);
          a3.n128_u8[0] = *(_BYTE *)(v12 + v19);
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          v22 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v22 >= 0xFFFF)
            LOWORD(v22) = -1;
          a3.n128_u8[0] = v21[1];
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          v23 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v23 >= 0xFFFF)
            LOWORD(v23) = -1;
          *v20 = v22;
          v20[1] = v23;
          a3.n128_u8[0] = v21[2];
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          v24 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v24 >= 0xFFFF)
            LOWORD(v24) = -1;
          a3.n128_u8[0] = v21[3];
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0]));
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          v25 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v25 >= 0xFFFF)
            LOWORD(v25) = -1;
          v20[2] = v24;
          v20[3] = v25;
          v19 += 4;
          v20 += 4;
        }
        while (v19 <= v17);
        result = v19;
      }
      if ((int)result < (int)v13)
      {
        v26 = (int)result;
        do
        {
          a3.n128_u8[0] = *(_BYTE *)(v12 + v26);
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0]));
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          v27 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v27 >= 0xFFFF)
            LOWORD(v27) = -1;
          a6->i16[v26++] = v27;
        }
        while (v13 != v26);
      }
      v12 += a2;
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100208C30(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  uint16x8_t *v11;
  uint64_t v12;
  double v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int8 *v22;
  __int8 *v23;
  unsigned int v24;
  int v25;
  char *v26;
  int v27;
  char *v28;
  unsigned int v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;
  int v34;
  char v35;

  v9 = a8[1];
  if (v9)
  {
    v11 = (uint16x8_t *)result;
    v12 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v13 = *(double *)(a9 + 8);
    v14 = *(double *)a9;
    v15 = v13;
    v16 = v12 - 4;
    v17 = 2 * (a2 >> 1);
    v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v14;
      *(float *)&v13 = v15;
      result = sub_100213A2C(a3, *(int32x2_t *)&v13, (uint64_t)&v35, v11, a6, v12);
      if ((int)result <= (int)v16)
      {
        v19 = 0;
        v20 = 0;
        v21 = 2 * (int)result;
        v22 = &v11->i8[v21];
        v23 = &a6->i8[v21];
        do
        {
          a3.n128_u16[0] = *(_WORD *)&v22[v19];
          *(float *)&v24 = rintf(v15 + (float)((float)a3.n128_u32[0] * v14));
          v25 = (uint64_t)*(float *)&v24 & ~((int)(uint64_t)*(float *)&v24 >> 31);
          v26 = &v22[2 * v20];
          LOWORD(v24) = *((_WORD *)v26 + 1);
          a3.n128_f32[0] = rintf(v15 + (float)((float)v24 * v14));
          if (v25 >= 0xFFFF)
            LOWORD(v25) = -1;
          v27 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v27 >= 0xFFFF)
            LOWORD(v27) = -1;
          v28 = &v23[v19];
          *(_WORD *)v28 = v25;
          *((_WORD *)v28 + 1) = v27;
          a3.n128_u16[0] = *((_WORD *)v26 + 2);
          *(float *)&v29 = rintf(v15 + (float)((float)a3.n128_u32[0] * v14));
          v30 = (uint64_t)*(float *)&v29 & ~((int)(uint64_t)*(float *)&v29 >> 31);
          LOWORD(v29) = *(_WORD *)&v22[v19 + 6];
          a3.n128_f32[0] = v15 + (float)((float)v29 * v14);
          if (v30 >= 0xFFFF)
            v31 = -1;
          else
            v31 = v30;
          a3.n128_f32[0] = rintf(a3.n128_f32[0]);
          v32 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v32 >= 0xFFFF)
            LOWORD(v32) = -1;
          *((_WORD *)v28 + 2) = v31;
          *((_WORD *)v28 + 3) = v32;
          v20 += 4;
          v19 += 8;
        }
        while ((int)result + v20 <= v16);
        result = (result + v20);
      }
      if ((int)result < (int)v12)
      {
        v33 = (int)result;
        do
        {
          a3.n128_u16[0] = v11->u16[v33];
          a3.n128_f32[0] = rintf(v15 + (float)((float)a3.n128_u32[0] * v14));
          v34 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v34 >= 0xFFFF)
            LOWORD(v34) = -1;
          a6->i16[v33++] = v34;
        }
        while (v12 != v33);
      }
      v11 = (uint16x8_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100208DF0(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  int16x8_t *v11;
  uint64_t v12;
  double v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int8 *v22;
  __int8 *v23;
  int16x4_t v24;
  int v25;
  char *v26;
  int v27;
  char *v28;
  int16x4_t v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;
  int v34;
  char v35;

  v9 = a8[1];
  if (v9)
  {
    v11 = (int16x8_t *)result;
    v12 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v13 = *(double *)(a9 + 8);
    v14 = *(double *)a9;
    v15 = v13;
    v16 = v12 - 4;
    v17 = 2 * (a2 >> 1);
    v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v14;
      *(float *)&v13 = v15;
      result = sub_100213D50(a3, *(int32x2_t *)&v13, (uint64_t)&v35, v11, a6, v12);
      if ((int)result <= (int)v16)
      {
        v19 = 0;
        v20 = 0;
        v21 = 2 * (int)result;
        v22 = &v11->i8[v21];
        v23 = &a6->i8[v21];
        do
        {
          a3.n128_u16[0] = *(_WORD *)&v22[v19];
          v24 = (int16x4_t)vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
          *(float *)v24.i32 = rintf(v15 + (float)((float)v24.i32[0] * v14));
          v25 = (uint64_t)*(float *)v24.i32 & ~((int)(uint64_t)*(float *)v24.i32 >> 31);
          v26 = &v22[2 * v20];
          v24.i16[0] = *((_WORD *)v26 + 1);
          a3.n128_u64[0] = vmovl_s16(v24).u64[0];
          a3.n128_f32[0] = (float)a3.n128_i32[0];
          if (v25 >= 0xFFFF)
            LOWORD(v25) = -1;
          a3.n128_f32[0] = rintf(v15 + (float)(a3.n128_f32[0] * v14));
          v27 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v27 >= 0xFFFF)
            LOWORD(v27) = -1;
          v28 = &v23[v19];
          *(_WORD *)v28 = v25;
          *((_WORD *)v28 + 1) = v27;
          a3.n128_u16[0] = *((_WORD *)v26 + 2);
          v29 = (int16x4_t)vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
          *(float *)v29.i32 = rintf(v15 + (float)((float)v29.i32[0] * v14));
          v30 = (uint64_t)*(float *)v29.i32 & ~((int)(uint64_t)*(float *)v29.i32 >> 31);
          v29.i16[0] = *(_WORD *)&v22[v19 + 6];
          a3 = (__n128)vmovl_s16(v29);
          a3.n128_f32[0] = v15 + (float)((float)a3.n128_i32[0] * v14);
          if (v30 >= 0xFFFF)
            v31 = -1;
          else
            v31 = v30;
          a3.n128_f32[0] = rintf(a3.n128_f32[0]);
          v32 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v32 >= 0xFFFF)
            LOWORD(v32) = -1;
          *((_WORD *)v28 + 2) = v31;
          *((_WORD *)v28 + 3) = v32;
          v20 += 4;
          v19 += 8;
        }
        while ((int)result + v20 <= v16);
        result = (result + v20);
      }
      if ((int)result < (int)v12)
      {
        v33 = (int)result;
        do
        {
          a3.n128_u16[0] = v11->u16[v33];
          a3 = (__n128)vmovl_s16((int16x4_t)a3.n128_u64[0]);
          a3.n128_f32[0] = rintf(v15 + (float)((float)a3.n128_i32[0] * v14));
          v34 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v34 >= 0xFFFF)
            LOWORD(v34) = -1;
          a6->i16[v33++] = v34;
        }
        while (v12 != v33);
      }
      v11 = (int16x8_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100208FC4(uint64_t result, unint64_t a2, int32x4_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  int32x4_t *v11;
  uint64_t v12;
  double v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  uint64_t v24;
  float v25;
  int v26;
  char v27;

  v9 = a8[1];
  if (v9)
  {
    v11 = (int32x4_t *)result;
    v12 = *a8;
    a3.i64[0] = *(_QWORD *)a9;
    v13 = *(double *)(a9 + 8);
    v14 = *(double *)a9;
    v15 = v13;
    v16 = v12 - 4;
    v17 = 4 * (a2 >> 2);
    v18 = 2 * (a7 >> 1);
    do
    {
      *(float *)a3.i32 = v14;
      *(float *)&v13 = v15;
      result = sub_100214074((__n128)a3, *(int32x2_t *)&v13, (uint64_t)&v27, v11, a6, v12);
      if ((int)result <= (int)v16)
      {
        v19 = (int)result;
        v20 = 4 * (int)result + 8;
        v21 = 2 * (int)result;
        v22.i64[0] = 0xFFFF0000FFFFLL;
        v22.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          v23.i32[0] = (uint64_t)rintf(v15 + (float)((float)*(int *)((char *)&v11->i32[-2] + v20) * v14));
          v23.i32[1] = (uint64_t)rintf(v15 + (float)((float)v11->i32[v19 + 1] * v14));
          v23.i32[2] = (uint64_t)rintf(v15 + (float)((float)*(int *)((char *)v11->i32 + v20) * v14));
          v23.i32[3] = (uint64_t)rintf(v15 + (float)((float)*(int *)((char *)&v11->i32[1] + v20) * v14));
          a3 = vminq_s32(vmaxq_s32(v23, (int32x4_t)0), v22);
          *(int16x4_t *)a3.i8 = vmovn_s32(a3);
          *(uint64_t *)((char *)a6->i64 + v21) = a3.i64[0];
          v19 += 4;
          v20 += 16;
          v21 += 8;
        }
        while (v19 <= v16);
        result = v19;
      }
      if ((int)result < (int)v12)
      {
        v24 = (int)result;
        do
        {
          v25 = rintf(v15 + (float)((float)v11->i32[v24] * v14));
          v26 = (uint64_t)v25 & ~((int)(uint64_t)v25 >> 31);
          if (v26 >= 0xFFFF)
            LOWORD(v26) = -1;
          a6->i16[v24++] = v26;
        }
        while (v12 != v24);
      }
      v11 = (int32x4_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100209158(uint64_t result, unint64_t a2, int32x4_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  float32x4_t *v11;
  uint64_t v12;
  double v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  uint64_t v24;
  float v25;
  int v26;
  char v27;

  v9 = a8[1];
  if (v9)
  {
    v11 = (float32x4_t *)result;
    v12 = *a8;
    a3.i64[0] = *(_QWORD *)a9;
    v13 = *(double *)(a9 + 8);
    v14 = *(double *)a9;
    v15 = v13;
    v16 = v12 - 4;
    v17 = 4 * (a2 >> 2);
    v18 = 2 * (a7 >> 1);
    do
    {
      *(float *)a3.i32 = v14;
      *(float *)&v13 = v15;
      result = sub_100214424((__n128)a3, *(int32x2_t *)&v13, (uint64_t)&v27, v11, a6, v12);
      if ((int)result <= (int)v16)
      {
        v19 = (int)result;
        v20 = 4 * (int)result + 8;
        v21 = 2 * (int)result;
        v22.i64[0] = 0xFFFF0000FFFFLL;
        v22.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          v23.i32[0] = (uint64_t)rintf(v15 + (float)(*(float *)((char *)&v11->f32[-2] + v20) * v14));
          v23.i32[1] = (uint64_t)rintf(v15 + (float)(v11->f32[v19 + 1] * v14));
          v23.i64[1] = __PAIR64__((uint64_t)rintf(v15 + (float)(*(float *)((char *)&v11->f32[1] + v20) * v14)), (uint64_t)rintf(v15 + (float)(*(float *)((char *)v11->f32 + v20) * v14)));
          a3 = vminq_s32(vmaxq_s32(v23, (int32x4_t)0), v22);
          *(int16x4_t *)a3.i8 = vmovn_s32(a3);
          *(uint64_t *)((char *)a6->i64 + v21) = a3.i64[0];
          v19 += 4;
          v20 += 16;
          v21 += 8;
        }
        while (v19 <= v16);
        result = v19;
      }
      if ((int)result < (int)v12)
      {
        v24 = (int)result;
        do
        {
          v25 = rintf(v15 + (float)(v11->f32[v24] * v14));
          v26 = (uint64_t)v25 & ~((int)(uint64_t)v25 >> 31);
          if (v26 >= 0xFFFF)
            LOWORD(v26) = -1;
          a6->i16[v24++] = v26;
        }
        while (v12 != v24);
      }
      v11 = (float32x4_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1002092D8(uint64_t result, unint64_t a2, double a3, double a4, __n128 a5, int32x4_t a6, double a7, __n128 a8, uint64_t a9, uint64_t a10, int16x8_t *a11, unint64_t a12, int *a13, double *a14)
{
  int v14;
  float64x2_t *v16;
  uint64_t v17;
  float v18;
  float v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int32x4_t v28;
  uint64_t v29;
  double v30;
  int v31;
  char v32;

  v14 = a13[1];
  if (v14)
  {
    v16 = (float64x2_t *)result;
    v17 = *a13;
    v18 = *a14;
    v19 = a14[1];
    v20 = v18;
    v21 = v19;
    v22 = v17 - 4;
    v23 = 8 * (a2 >> 3);
    v24 = 2 * (a12 >> 1);
    do
    {
      result = sub_1002147CC(v18, v19, a5.n128_f64[0], *(double *)a6.i64, a7, a8, (uint64_t)&v32, v16, a11, v17);
      if ((int)result <= (int)v22)
      {
        v25 = (int)result;
        v26 = 8 * (int)result + 16;
        v27 = 2 * (int)result;
        a5 = 0uLL;
        a6.i64[0] = 0xFFFF0000FFFFLL;
        a6.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          v28.i32[0] = (uint64_t)rint(v21 + *(double *)((char *)v16[-1].f64 + v26) * v20);
          v28.i32[1] = (uint64_t)rint(v21 + v16->f64[v25 + 1] * v20);
          v28.i64[1] = __PAIR64__((uint64_t)rint(v21 + *(double *)((char *)&v16->f64[1] + v26) * v20), (uint64_t)rint(v21 + *(double *)((char *)v16->f64 + v26) * v20));
          *(int16x4_t *)&a11->i8[v27] = vmovn_s32(vminq_s32(vmaxq_s32(v28, (int32x4_t)0), a6));
          v25 += 4;
          v26 += 32;
          v27 += 8;
        }
        while (v25 <= v22);
        result = v25;
      }
      if ((int)result < (int)v17)
      {
        v29 = (int)result;
        do
        {
          v30 = rint(v21 + v16->f64[v29] * v20);
          v31 = (uint64_t)v30 & ~((int)(uint64_t)v30 >> 31);
          if (v31 >= 0xFFFF)
            LOWORD(v31) = -1;
          a11->i16[v29++] = v31;
        }
        while (v17 != v29);
      }
      v16 = (float64x2_t *)((char *)v16 + v23);
      a11 = (int16x8_t *)((char *)a11 + v24);
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_100209468(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  uint64_t v12;
  uint64_t v13;
  double v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v9 = a8[1];
  if (v9)
  {
    v12 = result;
    v13 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v14 = *(double *)(a9 + 8);
    v15 = *(double *)a9;
    v16 = v14;
    v17 = v13 - 4;
    v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&v14 = v16;
      result = sub_100214BA0(a3, *(int32x2_t *)&v14, (uint64_t)&v28, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        v19 = (int)result;
        v20 = &a6->i16[(int)result];
        do
        {
          v21 = (_BYTE *)(v12 + v19);
          a3.n128_u8[0] = *(_BYTE *)(v12 + v19);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          v22 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v22) = -32768;
          if ((int)v22 >= 0x7FFF)
            LOWORD(v22) = 0x7FFF;
          a3.n128_u8[0] = v21[1];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          v23 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v23) = -32768;
          if ((int)v23 >= 0x7FFF)
            LOWORD(v23) = 0x7FFF;
          *v20 = v22;
          v20[1] = v23;
          a3.n128_u8[0] = v21[2];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          v24 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v24) = -32768;
          if ((int)v24 >= 0x7FFF)
            LOWORD(v24) = 0x7FFF;
          a3.n128_u8[0] = v21[3];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          v25 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v25) = -32768;
          if ((int)v25 >= 0x7FFF)
            LOWORD(v25) = 0x7FFF;
          v20[2] = v24;
          v20[3] = v25;
          v19 += 4;
          v20 += 4;
        }
        while (v19 <= v17);
        result = v19;
      }
      if ((int)result < (int)v13)
      {
        v26 = (int)result;
        do
        {
          a3.n128_u8[0] = *(_BYTE *)(v12 + v26);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          v27 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v27) = -32768;
          if ((int)v27 >= 0x7FFF)
            LOWORD(v27) = 0x7FFF;
          a6->i16[v26++] = v27;
        }
        while (v13 != v26);
      }
      v12 += a2;
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100209624(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  uint64_t v12;
  uint64_t v13;
  double v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v9 = a8[1];
  if (v9)
  {
    v12 = result;
    v13 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v14 = *(double *)(a9 + 8);
    v15 = *(double *)a9;
    v16 = v14;
    v17 = v13 - 4;
    v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&v14 = v16;
      result = sub_100214EF4(a3, *(int32x2_t *)&v14, (uint64_t)&v28, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        v19 = (int)result;
        v20 = &a6->i16[(int)result];
        do
        {
          v21 = (_BYTE *)(v12 + v19);
          a3.n128_u8[0] = *(_BYTE *)(v12 + v19);
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          v22 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v22) = -32768;
          a3.n128_u8[0] = v21[1];
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          v23 = (uint64_t)a3.n128_f32[0];
          if ((int)v22 >= 0x7FFF)
            LOWORD(v22) = 0x7FFF;
          if ((int)v23 <= -32768)
            LODWORD(v23) = -32768;
          if ((int)v23 >= 0x7FFF)
            LOWORD(v23) = 0x7FFF;
          *v20 = v22;
          v20[1] = v23;
          a3.n128_u8[0] = v21[2];
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          v24 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v24) = -32768;
          if ((int)v24 >= 0x7FFF)
            LOWORD(v24) = 0x7FFF;
          a3.n128_u8[0] = v21[3];
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0]));
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          v25 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v25) = -32768;
          if ((int)v25 >= 0x7FFF)
            LOWORD(v25) = 0x7FFF;
          v20[2] = v24;
          v20[3] = v25;
          v19 += 4;
          v20 += 4;
        }
        while (v19 <= v17);
        result = v19;
      }
      if ((int)result < (int)v13)
      {
        v26 = (int)result;
        do
        {
          a3.n128_u8[0] = *(_BYTE *)(v12 + v26);
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0]));
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          v27 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v27) = -32768;
          if ((int)v27 >= 0x7FFF)
            LOWORD(v27) = 0x7FFF;
          a6->i16[v26++] = v27;
        }
        while (v13 != v26);
      }
      v12 += a2;
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100209808(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  uint16x8_t *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int8 *v22;
  __int8 *v23;
  uint64_t v24;
  char *v25;
  float v26;
  uint64_t v27;
  char *v28;
  float v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v9 = a8[1];
  if (v9)
  {
    v11 = (uint16x8_t *)result;
    v12 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v13 = *(double *)(a9 + 8);
    v14 = *(double *)a9;
    v15 = v12 - 4;
    v16 = v13;
    v17 = 2 * (a2 >> 1);
    v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v14;
      *(float *)&v13 = v16;
      result = sub_100215248(a3, *(int32x2_t *)&v13, (uint64_t)&v35, v11, a6, v12);
      if ((int)result <= (int)v15)
      {
        v19 = 0;
        v20 = 0;
        v21 = 2 * (int)result;
        v22 = &v11->i8[v21];
        v23 = &a6->i8[v21];
        do
        {
          a3.n128_u16[0] = *(_WORD *)&v22[v19];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v14));
          v24 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v24) = -32768;
          v25 = &v22[2 * v20];
          a3.n128_u16[0] = *((_WORD *)v25 + 1);
          a3.n128_f32[0] = v16 + (float)((float)a3.n128_u32[0] * v14);
          if ((int)v24 >= 0x7FFF)
            LOWORD(v24) = 0x7FFF;
          v26 = rintf(a3.n128_f32[0]);
          v27 = (uint64_t)v26;
          if ((int)(uint64_t)v26 <= -32768)
            LODWORD(v27) = -32768;
          if ((int)v27 >= 0x7FFF)
            LOWORD(v27) = 0x7FFF;
          v28 = &v23[v19];
          *(_WORD *)v28 = v24;
          *((_WORD *)v28 + 1) = v27;
          LOWORD(v26) = *((_WORD *)v25 + 2);
          v29 = rintf(v16 + (float)((float)LODWORD(v26) * v14));
          v30 = (uint64_t)v29;
          if ((int)(uint64_t)v29 <= -32768)
            LODWORD(v30) = -32768;
          LOWORD(v29) = *(_WORD *)&v22[v19 + 6];
          a3.n128_f32[0] = rintf(v16 + (float)((float)LODWORD(v29) * v14));
          if ((int)v30 >= 0x7FFF)
            v31 = 0x7FFF;
          else
            v31 = v30;
          v32 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v32) = -32768;
          if ((int)v32 >= 0x7FFF)
            LOWORD(v32) = 0x7FFF;
          *((_WORD *)v28 + 2) = v31;
          *((_WORD *)v28 + 3) = v32;
          v20 += 4;
          v19 += 8;
        }
        while ((int)result + v20 <= v15);
        result = (result + v20);
      }
      if ((int)result < (int)v12)
      {
        v33 = (int)result;
        do
        {
          a3.n128_u16[0] = v11->u16[v33];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v14));
          v34 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v34) = -32768;
          if ((int)v34 >= 0x7FFF)
            LOWORD(v34) = 0x7FFF;
          a6->i16[v33++] = v34;
        }
        while (v12 != v33);
      }
      v11 = (uint16x8_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1002099E8(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  int16x8_t *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int8 *v22;
  __int8 *v23;
  int16x4_t v24;
  uint64_t v25;
  BOOL v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v9 = a8[1];
  if (v9)
  {
    v11 = (int16x8_t *)result;
    v12 = *a8;
    a3.n128_u64[0] = *(_QWORD *)a9;
    v13 = *(double *)(a9 + 8);
    v14 = *(double *)a9;
    v15 = v12 - 4;
    v16 = v13;
    v17 = 2 * (a2 >> 1);
    v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v14;
      *(float *)&v13 = v16;
      result = sub_10021556C(a3, *(int32x2_t *)&v13, (uint64_t)&v35, v11, a6, v12);
      if ((int)result <= (int)v15)
      {
        v19 = 0;
        v20 = 0;
        v21 = 2 * (int)result;
        v22 = &v11->i8[v21];
        v23 = &a6->i8[v21];
        do
        {
          a3.n128_u16[0] = *(_WORD *)&v22[v19];
          v24 = (int16x4_t)vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
          *(float *)v24.i32 = rintf(v16 + (float)((float)v24.i32[0] * v14));
          v25 = (uint64_t)*(float *)v24.i32;
          v26 = (int)(uint64_t)*(float *)v24.i32 <= -32768;
          v27 = &v22[2 * v20];
          v24.i16[0] = *((_WORD *)v27 + 1);
          a3.n128_u64[0] = vmovl_s16(v24).u64[0];
          if (v26)
            LODWORD(v25) = -32768;
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v14));
          v28 = (uint64_t)a3.n128_f32[0];
          if ((int)v25 >= 0x7FFF)
            LOWORD(v25) = 0x7FFF;
          if ((int)v28 <= -32768)
            LODWORD(v28) = -32768;
          v29 = &v23[v19];
          if ((int)v28 >= 0x7FFF)
            LOWORD(v28) = 0x7FFF;
          *(_WORD *)v29 = v25;
          *((_WORD *)v29 + 1) = v28;
          a3.n128_u16[0] = *((_WORD *)v27 + 2);
          a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v14));
          v30 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v30) = -32768;
          a3.n128_u16[0] = *(_WORD *)&v22[v19 + 6];
          a3 = (__n128)vmovl_s16((int16x4_t)a3.n128_u64[0]);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v14));
          if ((int)v30 >= 0x7FFF)
            v31 = 0x7FFF;
          else
            v31 = v30;
          v32 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v32) = -32768;
          if ((int)v32 >= 0x7FFF)
            LOWORD(v32) = 0x7FFF;
          *((_WORD *)v29 + 2) = v31;
          *((_WORD *)v29 + 3) = v32;
          v20 += 4;
          v19 += 8;
        }
        while ((int)result + v20 <= v15);
        result = (result + v20);
      }
      if ((int)result < (int)v12)
      {
        v33 = (int)result;
        do
        {
          a3.n128_u16[0] = v11->u16[v33];
          a3 = (__n128)vmovl_s16((int16x4_t)a3.n128_u64[0]);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v14));
          v34 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768)
            LODWORD(v34) = -32768;
          if ((int)v34 >= 0x7FFF)
            LOWORD(v34) = 0x7FFF;
          a6->i16[v33++] = v34;
        }
        while (v12 != v33);
      }
      v11 = (int16x8_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100209BDC(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, unint64_t *a9)
{
  int v9;
  int32x4_t *v11;
  uint64_t v12;
  int32x4_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v9 = a8[1];
  if (v9)
  {
    v11 = (int32x4_t *)result;
    v12 = *a8;
    a3.n128_u64[0] = *a9;
    v13.i64[0] = a9[1];
    v14 = *(double *)a9;
    v15 = v12 - 4;
    v16 = *(double *)v13.i64;
    v17 = 4 * (a2 >> 2);
    v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v14;
      *(float *)v13.i32 = v16;
      result = sub_100215890(a3, *(int32x2_t *)v13.i8, (uint64_t)&v24, v11, a6, v12);
      if ((int)result <= (int)v15)
      {
        v19 = (int)result;
        v20 = 4 * (int)result + 8;
        v21 = 2 * (int)result;
        do
        {
          v13.i32[0] = (uint64_t)rintf(v16 + (float)((float)*(int *)((char *)&v11->i32[-2] + v20) * v14));
          v13.i32[1] = (uint64_t)rintf(v16 + (float)((float)v11->i32[v19 + 1] * v14));
          v13.i32[2] = (uint64_t)rintf(v16 + (float)((float)*(int *)((char *)v11->i32 + v20) * v14));
          v13.i32[3] = (uint64_t)rintf(v16 + (float)((float)*(int *)((char *)&v11->i32[1] + v20) * v14));
          a3.n128_u64[0] = (unint64_t)vqmovn_s32(v13);
          *(uint64_t *)((char *)a6->i64 + v21) = a3.n128_u64[0];
          v19 += 4;
          v20 += 16;
          v21 += 8;
        }
        while (v19 <= v15);
        result = v19;
      }
      if ((int)result < (int)v12)
      {
        v22 = (int)result;
        do
        {
          v23 = (uint64_t)rintf(v16 + (float)((float)v11->i32[v22] * v14));
          if ((int)v23 <= -32768)
            LODWORD(v23) = -32768;
          if ((int)v23 >= 0x7FFF)
            LOWORD(v23) = 0x7FFF;
          a6->i16[v22++] = v23;
        }
        while (v12 != v22);
      }
      v11 = (int32x4_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100209D70(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, unint64_t *a9)
{
  int v9;
  float32x4_t *v11;
  uint64_t v12;
  int32x4_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v9 = a8[1];
  if (v9)
  {
    v11 = (float32x4_t *)result;
    v12 = *a8;
    a3.n128_u64[0] = *a9;
    v13.i64[0] = a9[1];
    v14 = *(double *)a9;
    v15 = v12 - 4;
    v16 = *(double *)v13.i64;
    v17 = 4 * (a2 >> 2);
    v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v14;
      *(float *)v13.i32 = v16;
      result = sub_100215C40(a3, *(int32x2_t *)v13.i8, (uint64_t)&v24, v11, a6, v12);
      if ((int)result <= (int)v15)
      {
        v19 = (int)result;
        v20 = 4 * (int)result + 8;
        v21 = 2 * (int)result;
        do
        {
          v13.i32[0] = (uint64_t)rintf(v16 + (float)(*(float *)((char *)&v11->f32[-2] + v20) * v14));
          v13.i32[1] = (uint64_t)rintf(v16 + (float)(v11->f32[v19 + 1] * v14));
          v13.i32[2] = (uint64_t)rintf(v16 + (float)(*(float *)((char *)v11->f32 + v20) * v14));
          v13.i32[3] = (uint64_t)rintf(v16 + (float)(*(float *)((char *)&v11->f32[1] + v20) * v14));
          a3.n128_u64[0] = (unint64_t)vqmovn_s32(v13);
          *(uint64_t *)((char *)a6->i64 + v21) = a3.n128_u64[0];
          v19 += 4;
          v20 += 16;
          v21 += 8;
        }
        while (v19 <= v15);
        result = v19;
      }
      if ((int)result < (int)v12)
      {
        v22 = (int)result;
        do
        {
          v23 = (uint64_t)rintf(v16 + (float)(v11->f32[v22] * v14));
          if ((int)v23 <= -32768)
            LODWORD(v23) = -32768;
          if ((int)v23 >= 0x7FFF)
            LOWORD(v23) = 0x7FFF;
          a6->i16[v22++] = v23;
        }
        while (v12 != v22);
      }
      v11 = (float32x4_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100209EF0(uint64_t result, unint64_t a2, double a3, double a4, double a5, double a6, double a7, __n128 a8, uint64_t a9, uint64_t a10, int16x8_t *a11, unint64_t a12, int *a13, double *a14)
{
  int v14;
  float64x2_t *v16;
  uint64_t v17;
  float v18;
  float v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v14 = a13[1];
  if (v14)
  {
    v16 = (float64x2_t *)result;
    v17 = *a13;
    v18 = *a14;
    v19 = a14[1];
    v20 = v18;
    v21 = v17 - 4;
    v22 = v19;
    v23 = 8 * (a2 >> 3);
    v24 = 2 * (a12 >> 1);
    do
    {
      result = sub_100215FE8(v18, v19, a5, a6, a7, a8, (uint64_t)&v31, v16, a11, v17);
      if ((int)result <= (int)v21)
      {
        v25 = (int)result;
        v26 = 8 * (int)result + 16;
        v27 = 2 * (int)result;
        do
        {
          v28.i32[0] = (uint64_t)rint(v22 + *(double *)((char *)v16[-1].f64 + v26) * v20);
          v28.i32[1] = (uint64_t)rint(v22 + v16->f64[v25 + 1] * v20);
          v28.i32[2] = (uint64_t)rint(v22 + *(double *)((char *)v16->f64 + v26) * v20);
          v28.i32[3] = (uint64_t)rint(v22 + *(double *)((char *)&v16->f64[1] + v26) * v20);
          *(int16x4_t *)&a11->i8[v27] = vqmovn_s32(v28);
          v25 += 4;
          v26 += 32;
          v27 += 8;
        }
        while (v25 <= v21);
        result = v25;
      }
      if ((int)result < (int)v17)
      {
        v29 = (int)result;
        do
        {
          v30 = (uint64_t)rint(v22 + v16->f64[v29] * v20);
          if ((int)v30 <= -32768)
            LODWORD(v30) = -32768;
          if ((int)v30 >= 0x7FFF)
            LOWORD(v30) = 0x7FFF;
          a11->i16[v29++] = v30;
        }
        while (v17 != v29);
      }
      v16 = (float64x2_t *)((char *)v16 + v23);
      a11 = (int16x8_t *)((char *)a11 + v24);
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_10020A080(uint64_t result, uint64_t a2, double a3, double a4, double a5, __n128 a6, uint64_t a7, uint64_t a8, int32x4_t *a9, unint64_t a10, int *a11, double *a12)
{
  int v12;
  uint64_t v15;
  uint64_t v16;
  double v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  __int32 *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v12 = a11[1];
  if (v12)
  {
    v15 = result;
    v16 = *a11;
    v17 = a12[1];
    v18 = *a12;
    v19 = v17;
    v20 = v16 - 4;
    v21 = 4 * (a10 >> 2);
    do
    {
      *(float *)&v17 = v19;
      result = sub_1002163BC(v18, *(int32x2_t *)&v17, a5, a6, (uint64_t)&v31, v15, a9, v16);
      if ((int)result <= (int)v20)
      {
        v23 = (int)result;
        v24 = &a9->i32[(int)result];
        do
        {
          LOBYTE(v22) = *(_BYTE *)(v15 + v23);
          *(float *)&v25 = rintf(v19 + (float)((float)LODWORD(v22) * v18));
          v26 = (uint64_t)*(float *)&v25;
          LOBYTE(v25) = *(_BYTE *)(v15 + v23 + 1);
          *(float *)&v27 = rintf(v19 + (float)((float)v25 * v18));
          *v24 = v26;
          v24[1] = (uint64_t)*(float *)&v27;
          LOBYTE(v27) = *(_BYTE *)(v15 + v23 + 2);
          *(float *)&v28 = rintf(v19 + (float)((float)v27 * v18));
          v29 = (uint64_t)*(float *)&v28;
          LOBYTE(v28) = *(_BYTE *)(v15 + v23 + 3);
          v22 = rintf(v19 + (float)((float)v28 * v18));
          v24[2] = v29;
          v24[3] = (uint64_t)v22;
          v23 += 4;
          v24 += 4;
        }
        while (v23 <= v20);
        result = v23;
      }
      if ((int)result < (int)v16)
      {
        v30 = (int)result;
        do
        {
          LOBYTE(v22) = *(_BYTE *)(v15 + v30);
          v22 = rintf(v19 + (float)((float)LODWORD(v22) * v18));
          a9->i32[v30++] = (uint64_t)v22;
        }
        while (v16 != v30);
      }
      v15 += a2;
      a9 = (int32x4_t *)((char *)a9 + v21);
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_10020A1D4(uint64_t result, uint64_t a2, double a3, double a4, double a5, __n128 a6, uint64_t a7, uint64_t a8, int32x4_t *a9, unint64_t a10, int *a11, double *a12)
{
  int v12;
  uint64_t v15;
  uint64_t v16;
  double v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  uint64_t v23;
  __int32 *v24;
  int8x8_t v25;
  uint64_t v26;
  int8x8_t v27;
  int8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v12 = a11[1];
  if (v12)
  {
    v15 = result;
    v16 = *a11;
    v17 = a12[1];
    v18 = *a12;
    v19 = v17;
    v20 = v16 - 4;
    v21 = 4 * (a10 >> 2);
    do
    {
      *(float *)&v17 = v19;
      result = sub_1002166FC(v18, *(int32x2_t *)&v17, a5, a6, (uint64_t)&v31, v15, a9, v16);
      if ((int)result <= (int)v20)
      {
        v23 = (int)result;
        v24 = &a9->i32[(int)result];
        do
        {
          v22.i8[0] = *(_BYTE *)(v15 + v23);
          v25 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v22)).u64[0];
          *(float *)v25.i32 = rintf(v19 + (float)((float)v25.i32[0] * v18));
          v26 = (uint64_t)*(float *)v25.i32;
          v25.i8[0] = *(_BYTE *)(v15 + v23 + 1);
          v27 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v25)).u64[0];
          *(float *)v27.i32 = rintf(v19 + (float)((float)v27.i32[0] * v18));
          *v24 = v26;
          v24[1] = (uint64_t)*(float *)v27.i32;
          v27.i8[0] = *(_BYTE *)(v15 + v23 + 2);
          v28 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v27)).u64[0];
          *(float *)v28.i32 = rintf(v19 + (float)((float)v28.i32[0] * v18));
          v29 = (uint64_t)*(float *)v28.i32;
          v28.i8[0] = *(_BYTE *)(v15 + v23 + 3);
          v22 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v28)).u64[0];
          *(float *)v22.i32 = rintf(v19 + (float)((float)v22.i32[0] * v18));
          v24[2] = v29;
          v24[3] = (uint64_t)*(float *)v22.i32;
          v23 += 4;
          v24 += 4;
        }
        while (v23 <= v20);
        result = v23;
      }
      if ((int)result < (int)v16)
      {
        v30 = (int)result;
        do
        {
          v22.i8[0] = *(_BYTE *)(v15 + v30);
          v22 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v22)).u64[0];
          *(float *)v22.i32 = rintf(v19 + (float)((float)v22.i32[0] * v18));
          a9->i32[v30++] = (uint64_t)*(float *)v22.i32;
        }
        while (v16 != v30);
      }
      v15 += a2;
      a9 = (int32x4_t *)((char *)a9 + v21);
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_10020A350(uint64_t result, unint64_t a2, double a3, double a4, double a5, __n128 a6, uint64_t a7, uint64_t a8, int32x4_t *a9, unint64_t a10, int *a11, double *a12)
{
  int v12;
  uint16x8_t *v14;
  uint64_t v15;
  double v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  __int8 *v24;
  uint64_t v25;
  __int32 *v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v12 = a11[1];
  if (v12)
  {
    v14 = (uint16x8_t *)result;
    v15 = *a11;
    v16 = a12[1];
    v17 = *a12;
    v18 = v16;
    v19 = v15 - 4;
    v20 = 2 * (a2 >> 1);
    v21 = 4 * (a10 >> 2);
    do
    {
      *(float *)&v16 = v18;
      result = sub_100216A3C(v17, *(int32x2_t *)&v16, a5, a6, (uint64_t)&v34, v14, a9, v15);
      if ((int)result <= (int)v19)
      {
        v23 = 0;
        v24 = &v14->i8[2 * (int)result];
        v25 = 6;
        v26 = &a9->i32[(int)result];
        do
        {
          LOWORD(v22) = *(_WORD *)&v24[v25 - 6];
          *(float *)&v27 = rintf(v18 + (float)((float)LODWORD(v22) * v17));
          v28 = (uint64_t)*(float *)&v27;
          v29 = &v24[2 * v23];
          LOWORD(v27) = *((_WORD *)v29 + 1);
          *(float *)&v30 = rintf(v18 + (float)((float)v27 * v17));
          *v26 = v28;
          v26[1] = (uint64_t)*(float *)&v30;
          LOWORD(v30) = *((_WORD *)v29 + 2);
          *(float *)&v31 = rintf(v18 + (float)((float)v30 * v17));
          v32 = (uint64_t)*(float *)&v31;
          LOWORD(v31) = *(_WORD *)&v24[v25];
          v22 = rintf(v18 + (float)((float)v31 * v17));
          v26[2] = v32;
          v26[3] = (uint64_t)v22;
          v23 += 4;
          v25 += 8;
          v26 += 4;
        }
        while ((int)result + v23 <= v19);
        result = (result + v23);
      }
      if ((int)result < (int)v15)
      {
        v33 = (int)result;
        do
        {
          LOWORD(v22) = v14->i16[v33];
          v22 = rintf(v18 + (float)((float)LODWORD(v22) * v17));
          a9->i32[v33++] = (uint64_t)v22;
        }
        while (v15 != v33);
      }
      v14 = (uint16x8_t *)((char *)v14 + v20);
      a9 = (int32x4_t *)((char *)a9 + v21);
      --v12;
    }
    while (v12);
  }
  return result;
}

void sub_10020A4C0(int16x8_t *a1, unint64_t a2, double a3, double a4, double a5, __n128 a6, __n128 a7, uint64_t a8, uint64_t a9, int32x4_t *a10, unint64_t a11, int *a12, uint64_t a13)
{
  int v13;
  int16x8_t *v14;
  uint64_t v15;
  int16x4_t v16;
  unint64_t v17;
  unint64_t v18;
  __int32 *v19;
  uint64_t v20;
  __int16 *v21;
  uint64_t v22;
  int32x4_t *v23;
  uint64_t v24;
  float32x4_t v25;
  uint64_t v26;
  int32x4_t *v27;
  uint64_t v28;
  int32x4_t *v29;
  int16x8_t *v30;
  int32x4_t *v31;
  int32x4_t *v32;
  int16x8_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  float32x4_t v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  float32x4_t v39;
  int32x4_t v40;
  int v41;
  __int128 v42;
  int v43;
  __int128 v44;
  int v45;
  __int128 v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int32x4_t *v54;
  int32x4_t *v55;
  int32x4_t *v56;
  int32x4_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int32x4_t *v70;
  int32x4_t *v71;
  int32x4_t *v72;
  int32x4_t *v73;
  int16x8_t *v74;
  int16x8_t *v75;
  int16x8_t *v76;
  int16x8_t *v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  int v86;
  int v87;
  int v88;
  int v89;

  v13 = a12[1];
  if (v13)
  {
    v14 = a1;
    v15 = *a12;
    v16 = *(int16x4_t *)a13;
    a6.n128_f32[0] = *(double *)a13;
    a7.n128_f32[0] = *(double *)(a13 + 8);
    v17 = a2 >> 1;
    v18 = a11 >> 2;
    if ((int)v15 >= 8)
    {
      v23 = a10 + 1;
      v24 = 4 * v18;
      v25 = (float32x4_t)vdupq_lane_s32((int32x2_t)a7.n128_u64[0], 0);
      v26 = 2 * v17;
      v27 = a10 + 2;
      do
      {
        v28 = 0;
        v29 = v27;
        v30 = v14;
        v31 = v23;
        do
        {
          v32 = v29;
          v33 = *v30;
          v34 = atomic_load((unsigned __int8 *)qword_10048AA00);
          if ((v34 & 1) == 0)
          {
            v86 = v13;
            v78 = a7;
            v82 = a6;
            v70 = v23;
            v74 = v14;
            v66 = v24;
            v62 = v25;
            v54 = v27;
            v58 = v26;
            v50 = *v30;
            v41 = __cxa_guard_acquire(qword_10048AA00);
            v33 = v50;
            *(_QWORD *)&v42 = 0x8000000080000000;
            *((_QWORD *)&v42 + 1) = 0x8000000080000000;
            v27 = v54;
            v26 = v58;
            v25 = v62;
            v24 = v66;
            v23 = v70;
            v14 = v74;
            a7 = v78;
            a6 = v82;
            v13 = v86;
            if (v41)
            {
              xmmword_10048A9F0 = v42;
              __cxa_guard_release(qword_10048AA00);
              v33 = v50;
              v27 = v54;
              v26 = v58;
              v25 = v62;
              v24 = v66;
              v23 = v70;
              v14 = v74;
              a7 = v78;
              a6 = v82;
              v13 = v86;
            }
          }
          v35 = atomic_load((unsigned __int8 *)qword_10048AA20);
          if ((v35 & 1) == 0)
          {
            v87 = v13;
            v79 = a7;
            v83 = a6;
            v71 = v23;
            v75 = v14;
            v67 = v24;
            v63 = v25;
            v55 = v27;
            v59 = v26;
            v51 = v33;
            v43 = __cxa_guard_acquire(qword_10048AA20);
            v33 = v51;
            *(_QWORD *)&v44 = 0x3F0000003F000000;
            *((_QWORD *)&v44 + 1) = 0x3F0000003F000000;
            v27 = v55;
            v26 = v59;
            v25 = v63;
            v24 = v67;
            v23 = v71;
            v14 = v75;
            a7 = v79;
            a6 = v83;
            v13 = v87;
            if (v43)
            {
              xmmword_10048AA10 = v44;
              __cxa_guard_release(qword_10048AA20);
              v33 = v51;
              v27 = v55;
              v26 = v59;
              v25 = v63;
              v24 = v67;
              v23 = v71;
              v14 = v75;
              a7 = v79;
              a6 = v83;
              v13 = v87;
            }
          }
          v36 = vaddq_f32(v25, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v33.i8)), a6.n128_f32[0]));
          v31[-1] = vcvtq_s32_f32(vaddq_f32(v36, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)xmmword_10048A9F0, (int8x16_t)v36), (int8x16_t)xmmword_10048AA10)));
          v37 = atomic_load((unsigned __int8 *)qword_10048AA00);
          if ((v37 & 1) == 0)
          {
            v88 = v13;
            v80 = a7;
            v84 = a6;
            v72 = v23;
            v76 = v14;
            v68 = v24;
            v64 = v25;
            v56 = v27;
            v60 = v26;
            v52 = v33;
            v45 = __cxa_guard_acquire(qword_10048AA00);
            v33 = v52;
            *(_QWORD *)&v46 = 0x8000000080000000;
            *((_QWORD *)&v46 + 1) = 0x8000000080000000;
            v27 = v56;
            v26 = v60;
            v25 = v64;
            v24 = v68;
            v23 = v72;
            v14 = v76;
            a7 = v80;
            a6 = v84;
            v13 = v88;
            if (v45)
            {
              xmmword_10048A9F0 = v46;
              __cxa_guard_release(qword_10048AA00);
              v33 = v52;
              v27 = v56;
              v26 = v60;
              v25 = v64;
              v24 = v68;
              v23 = v72;
              v14 = v76;
              a7 = v80;
              a6 = v84;
              v13 = v88;
            }
          }
          v38 = atomic_load((unsigned __int8 *)qword_10048AA20);
          if ((v38 & 1) == 0)
          {
            v89 = v13;
            v81 = a7;
            v85 = a6;
            v73 = v23;
            v77 = v14;
            v69 = v24;
            v65 = v25;
            v57 = v27;
            v61 = v26;
            v53 = v33;
            v47 = __cxa_guard_acquire(qword_10048AA20);
            v33 = v53;
            *(_QWORD *)&v48 = 0x3F0000003F000000;
            *((_QWORD *)&v48 + 1) = 0x3F0000003F000000;
            v27 = v57;
            v26 = v61;
            v25 = v65;
            v24 = v69;
            v23 = v73;
            v14 = v77;
            a7 = v81;
            a6 = v85;
            v13 = v89;
            if (v47)
            {
              xmmword_10048AA10 = v48;
              __cxa_guard_release(qword_10048AA20);
              v33 = v53;
              v27 = v57;
              v26 = v61;
              v25 = v65;
              v24 = v69;
              v23 = v73;
              v14 = v77;
              a7 = v81;
              a6 = v85;
              v13 = v89;
            }
          }
          v39 = vaddq_f32(v25, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v33)), a6.n128_f32[0]));
          v40 = vcvtq_s32_f32(vaddq_f32(v39, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)xmmword_10048A9F0, (int8x16_t)v39), (int8x16_t)xmmword_10048AA10)));
          *v31 = v40;
          v31 += 2;
          v28 += 8;
          ++v30;
          v29 = v32 + 2;
        }
        while (v28 <= v15 - 8);
        if ((int)v15 > (int)v28)
        {
          v49 = 0;
          do
          {
            v40.i16[0] = v30->i16[v49];
            v40.i64[0] = vmovl_s16(*(int16x4_t *)v40.i8).u64[0];
            *(float *)v40.i32 = rintf(a7.n128_f32[0] + (float)((float)v40.i32[0] * a6.n128_f32[0]));
            v32->i32[0] = (uint64_t)*(float *)v40.i32;
            v32 = (int32x4_t *)((char *)v32 + 4);
            ++v49;
          }
          while (v28 + v49 < v15);
        }
        v23 = (int32x4_t *)((char *)v23 + v24);
        v14 = (int16x8_t *)((char *)v14 + v26);
        v27 = (int32x4_t *)((char *)v27 + v24);
        --v13;
      }
      while (v13);
    }
    else if ((int)v15 >= 1)
    {
      v19 = &a10->i32[3];
      v20 = 4 * v18;
      v21 = &a1->i16[3];
      v22 = 2 * v17;
      do
      {
        v16.i16[0] = *(v21 - 3);
        v16 = (int16x4_t)vmovl_s16(v16).u64[0];
        *(float *)v16.i32 = rintf(a7.n128_f32[0] + (float)((float)v16.i32[0] * a6.n128_f32[0]));
        *(v19 - 3) = (uint64_t)*(float *)v16.i32;
        if ((_DWORD)v15 != 1)
        {
          v16.i16[0] = *(v21 - 2);
          v16 = (int16x4_t)vmovl_s16(v16).u64[0];
          *(float *)v16.i32 = rintf(a7.n128_f32[0] + (float)((float)v16.i32[0] * a6.n128_f32[0]));
          *(v19 - 2) = (uint64_t)*(float *)v16.i32;
          if ((_DWORD)v15 != 2)
          {
            v16.i16[0] = *(v21 - 1);
            v16 = (int16x4_t)vmovl_s16(v16).u64[0];
            *(float *)v16.i32 = rintf(a7.n128_f32[0] + (float)((float)v16.i32[0] * a6.n128_f32[0]));
            *(v19 - 1) = (uint64_t)*(float *)v16.i32;
            if ((_DWORD)v15 != 3)
            {
              v16.i16[0] = *v21;
              v16 = (int16x4_t)vmovl_s16(v16).u64[0];
              *(float *)v16.i32 = rintf(a7.n128_f32[0] + (float)((float)v16.i32[0] * a6.n128_f32[0]));
              *v19 = (uint64_t)*(float *)v16.i32;
              if ((_DWORD)v15 != 4)
              {
                v16.i16[0] = v21[1];
                v16 = (int16x4_t)vmovl_s16(v16).u64[0];
                *(float *)v16.i32 = rintf(a7.n128_f32[0] + (float)((float)v16.i32[0] * a6.n128_f32[0]));
                v19[1] = (uint64_t)*(float *)v16.i32;
                if ((_DWORD)v15 != 5)
                {
                  v16.i16[0] = v21[2];
                  v16 = (int16x4_t)vmovl_s16(v16).u64[0];
                  *(float *)v16.i32 = rintf(a7.n128_f32[0] + (float)((float)v16.i32[0] * a6.n128_f32[0]));
                  v19[2] = (uint64_t)*(float *)v16.i32;
                  if ((_DWORD)v15 != 6)
                  {
                    v16.i16[0] = v21[3];
                    v16 = (int16x4_t)vmovl_s16(v16).u64[0];
                    *(float *)v16.i32 = rintf(a7.n128_f32[0] + (float)((float)v16.i32[0] * a6.n128_f32[0]));
                    v19[3] = (uint64_t)*(float *)v16.i32;
                  }
                }
              }
            }
          }
        }
        v19 = (__int32 *)((char *)v19 + v20);
        v21 = (__int16 *)((char *)v21 + v22);
        --v13;
      }
      while (v13);
    }
  }
}

void sub_10020A94C(uint64_t a1, unint64_t a2, double a3, double a4, __n128 a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, int *a11, unint64_t *a12)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  float64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  int64x2_t v32;
  float64x2_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float64x2_t v41;
  float64x2_t v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;

  v12 = a11[1];
  if (v12)
  {
    v13 = a9;
    v14 = a1;
    v15 = *a11;
    a5.n128_u64[0] = *a12;
    a6.n128_u64[0] = a12[1];
    v16 = a2 >> 2;
    v17 = a10 >> 2;
    if ((int)v15 >= 4)
    {
      v22 = (float64x2_t)vdupq_lane_s64(a6.n128_i64[0], 0);
      v23 = 4 * v17;
      v24 = 4 * v16;
      do
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        do
        {
          v29 = *(_QWORD *)(v14 + v25);
          v28 = *(_QWORD *)(v14 + v25 + 8);
          v30 = atomic_load((unsigned __int8 *)&qword_10048AB10);
          if ((v30 & 1) == 0)
          {
            v43 = a6;
            v45 = a5;
            v41 = v22;
            v37 = v24;
            v39 = v23;
            v34 = __cxa_guard_acquire(&qword_10048AB10);
            v24 = v37;
            v23 = v39;
            v22 = v41;
            a6 = v43;
            a5 = v45;
            if (v34)
            {
              qword_10048AB08 = 0;
              __cxa_guard_release(&qword_10048AB10);
              v24 = v37;
              v23 = v39;
              v22 = v41;
              a6 = v43;
              a5 = v45;
            }
          }
          v31 = atomic_load((unsigned __int8 *)&qword_10048AB10);
          if ((v31 & 1) == 0)
          {
            v44 = a6;
            v46 = a5;
            v42 = v22;
            v38 = v24;
            v40 = v23;
            v35 = __cxa_guard_acquire(&qword_10048AB10);
            v24 = v38;
            v23 = v40;
            v22 = v42;
            a6 = v44;
            a5 = v46;
            if (v35)
            {
              qword_10048AB08 = 0;
              __cxa_guard_release(&qword_10048AB10);
              v24 = v38;
              v23 = v40;
              v22 = v42;
              a6 = v44;
              a5 = v46;
            }
          }
          v32.i64[0] = (int)v29;
          v32.i64[1] = SHIDWORD(v29);
          v33 = vcvtq_f64_s64(v32);
          v32.i64[0] = (int)v28;
          v32.i64[1] = SHIDWORD(v28);
          *(int32x4_t *)(v13 + v25) = vmovn_hight_s64(vmovn_s64(vcvtaq_s64_f64(vaddq_f64(v22, vmulq_n_f64(v33, a5.n128_f64[0])))), vcvtaq_s64_f64(vaddq_f64(v22, vmulq_n_f64(vcvtq_f64_s64(v32), a5.n128_f64[0]))));
          v27 += 0x400000000;
          v26 += 4;
          v25 += 16;
        }
        while ((int)v15 - 4 >= v26);
        if ((int)v15 > v26)
        {
          v36 = v27 >> 32;
          do
          {
            *(_DWORD *)(v13 + 4 * v36) = (uint64_t)rint(a6.n128_f64[0] + (double)*(int *)(v14 + 4 * v36) * a5.n128_f64[0]);
            ++v36;
          }
          while (v15 != v36);
        }
        v13 += v23;
        v14 += v24;
        --v12;
      }
      while (v12);
    }
    else if ((int)v15 >= 1)
    {
      v18 = (int *)(a1 + 8);
      v19 = 4 * v16;
      v20 = (_DWORD *)(a9 + 8);
      v21 = 4 * v17;
      do
      {
        *(v20 - 2) = (uint64_t)rint(a6.n128_f64[0] + (double)*(v18 - 2) * a5.n128_f64[0]);
        if ((_DWORD)v15 != 1)
        {
          *(v20 - 1) = (uint64_t)rint(a6.n128_f64[0] + (double)*(v18 - 1) * a5.n128_f64[0]);
          if ((_DWORD)v15 != 2)
            *v20 = (uint64_t)rint(a6.n128_f64[0] + (double)*v18 * a5.n128_f64[0]);
        }
        v18 = (int *)((char *)v18 + v19);
        v20 = (_DWORD *)((char *)v20 + v21);
        --v12;
      }
      while (v12);
    }
  }
}

void sub_10020ABB8(uint64_t a1, unint64_t a2, double a3, double a4, double a5, __n128 a6, __n128 a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, int *a12, double *a13)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  float *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  uint64_t v26;
  int8x16_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  float32x4_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  float32x4_t v34;
  int v35;
  __int128 v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;

  v13 = a12[1];
  if (v13)
  {
    v14 = a10;
    v15 = a1;
    v16 = *a12;
    a6.n128_f32[0] = *a13;
    a7.n128_f32[0] = a13[1];
    v17 = a2 >> 2;
    v18 = a11 >> 2;
    v19 = v16 - 4;
    if ((int)v16 >= 4)
    {
      v24 = 4 * v17;
      v25 = (float32x4_t)vdupq_lane_s32((int32x2_t)a7.n128_u64[0], 0);
      v26 = 4 * v18;
      v27 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      do
      {
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v31 = *(float32x4_t *)(v15 + v28);
          v32 = atomic_load((unsigned __int8 *)qword_10048AA00);
          if ((v32 & 1) == 0)
          {
            v54 = v13;
            v52 = v16;
            v48 = a7;
            v50 = a6;
            v46 = v24;
            v44 = v25;
            v42 = v26;
            v40 = *(float32x4_t *)(v15 + v28);
            v35 = __cxa_guard_acquire(qword_10048AA00);
            v31 = v40;
            *(_QWORD *)&v36 = 0x8000000080000000;
            *((_QWORD *)&v36 + 1) = 0x8000000080000000;
            v27 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v26 = v42;
            v25 = v44;
            v24 = v46;
            a7 = v48;
            a6 = v50;
            v16 = v52;
            v13 = v54;
            if (v35)
            {
              xmmword_10048A9F0 = v36;
              __cxa_guard_release(qword_10048AA00);
              v31 = v40;
              v27 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
              v26 = v42;
              v25 = v44;
              v24 = v46;
              a7 = v48;
              a6 = v50;
              v16 = v52;
              v13 = v54;
            }
          }
          v33 = atomic_load((unsigned __int8 *)qword_10048AA20);
          if ((v33 & 1) == 0)
          {
            v55 = v13;
            v53 = v16;
            v49 = a7;
            v51 = a6;
            v47 = v24;
            v45 = v25;
            v43 = v26;
            v41 = v31;
            v37 = __cxa_guard_acquire(qword_10048AA20);
            v31 = v41;
            *(_QWORD *)&v38 = 0x3F0000003F000000;
            *((_QWORD *)&v38 + 1) = 0x3F0000003F000000;
            v27 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v26 = v43;
            v25 = v45;
            v24 = v47;
            a7 = v49;
            a6 = v51;
            v16 = v53;
            v13 = v55;
            if (v37)
            {
              xmmword_10048AA10 = v38;
              __cxa_guard_release(qword_10048AA20);
              v31 = v41;
              v27 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
              v26 = v43;
              v25 = v45;
              v24 = v47;
              a7 = v49;
              a6 = v51;
              v16 = v53;
              v13 = v55;
            }
          }
          v34 = vaddq_f32(v25, vmulq_n_f32(v31, a6.n128_f32[0]));
          *(int32x4_t *)(v14 + v28) = vcvtq_s32_f32(vaddq_f32(v34, (float32x4_t)vorrq_s8(vandq_s8(v27[159], (int8x16_t)v34), (int8x16_t)xmmword_10048AA10)));
          v30 += 0x400000000;
          v29 += 4;
          v28 += 16;
        }
        while (v19 >= v29);
        if ((int)v16 > v29)
        {
          v39 = v30 >> 32;
          do
          {
            *(_DWORD *)(v14 + 4 * v39) = (uint64_t)rintf(a7.n128_f32[0] + (float)(*(float *)(v15 + 4 * v39)
                                                                               * a6.n128_f32[0]));
            ++v39;
          }
          while (v16 != v39);
        }
        v15 += v24;
        v14 += v26;
        --v13;
      }
      while (v13);
    }
    else if ((int)v16 >= 1)
    {
      v20 = (float *)(a1 + 8);
      v21 = 4 * v17;
      v22 = (_DWORD *)(a10 + 8);
      v23 = 4 * v18;
      do
      {
        *(v22 - 2) = (uint64_t)rintf(a7.n128_f32[0] + (float)(*(v20 - 2) * a6.n128_f32[0]));
        if ((_DWORD)v16 != 1)
        {
          *(v22 - 1) = (uint64_t)rintf(a7.n128_f32[0] + (float)(*(v20 - 1) * a6.n128_f32[0]));
          if ((_DWORD)v16 != 2)
            *v22 = (uint64_t)rintf(a7.n128_f32[0] + (float)(*v20 * a6.n128_f32[0]));
        }
        v20 = (float *)((char *)v20 + v21);
        v22 = (_DWORD *)((char *)v22 + v23);
        --v13;
      }
      while (v13);
    }
  }
}

void sub_10020AE68(float64x2_t *a1, unint64_t a2, double a3, double a4, __n128 a5, __n128 a6, uint64_t a7, uint64_t a8, int32x4_t *a9, unint64_t a10, int *a11, unint64_t *a12)
{
  int v12;
  int32x4_t *v13;
  float64x2_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double *f64;
  uint64_t v19;
  __int32 *v20;
  uint64_t v21;
  float64x2_t v22;
  uint64_t v23;
  float64x2_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  float64x2_t *v28;
  int32x4_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  int v34;
  int v35;
  uint64_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  uint64_t v41;
  uint64_t v42;
  float64x2_t *v43;
  float64x2_t *v44;
  uint64_t v45;
  uint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  int v53;
  int v54;

  v12 = a11[1];
  if (v12)
  {
    v13 = a9;
    v14 = a1;
    v15 = *a11;
    a5.n128_u64[0] = *a12;
    a6.n128_u64[0] = a12[1];
    v16 = a2 >> 3;
    v17 = a10 >> 2;
    if ((int)v15 >= 4)
    {
      v22 = (float64x2_t)vdupq_lane_s64(a6.n128_i64[0], 0);
      v23 = 4 * v17;
      v24 = a1 + 1;
      v25 = 8 * v16;
      do
      {
        v26 = 0;
        v27 = 0;
        v28 = v24;
        v29 = v13;
        do
        {
          v30 = v28[-1];
          v31 = *v28;
          v32 = atomic_load((unsigned __int8 *)&qword_10048AB10);
          if ((v32 & 1) == 0)
          {
            v53 = v12;
            v49 = a6;
            v51 = a5;
            v47 = v22;
            v43 = v24;
            v45 = v23;
            v41 = v25;
            v37 = v28[-1];
            v39 = *v28;
            v34 = __cxa_guard_acquire(&qword_10048AB10);
            v30 = v37;
            v31 = v39;
            v25 = v41;
            v24 = v43;
            v23 = v45;
            v22 = v47;
            a6 = v49;
            a5 = v51;
            v12 = v53;
            if (v34)
            {
              qword_10048AB08 = 0;
              __cxa_guard_release(&qword_10048AB10);
              v30 = v37;
              v31 = v39;
              v25 = v41;
              v24 = v43;
              v23 = v45;
              v22 = v47;
              a6 = v49;
              a5 = v51;
              v12 = v53;
            }
          }
          v33 = atomic_load((unsigned __int8 *)&qword_10048AB10);
          if ((v33 & 1) == 0)
          {
            v54 = v12;
            v50 = a6;
            v52 = a5;
            v48 = v22;
            v44 = v24;
            v46 = v23;
            v42 = v25;
            v38 = v30;
            v40 = v31;
            v35 = __cxa_guard_acquire(&qword_10048AB10);
            v30 = v38;
            v31 = v40;
            v25 = v42;
            v24 = v44;
            v23 = v46;
            v22 = v48;
            a6 = v50;
            a5 = v52;
            v12 = v54;
            if (v35)
            {
              qword_10048AB08 = 0;
              __cxa_guard_release(&qword_10048AB10);
              v30 = v38;
              v31 = v40;
              v25 = v42;
              v24 = v44;
              v23 = v46;
              v22 = v48;
              a6 = v50;
              a5 = v52;
              v12 = v54;
            }
          }
          *v29++ = vmovn_hight_s64(vmovn_s64(vcvtaq_s64_f64(vaddq_f64(v22, vmulq_n_f64(v30, a5.n128_f64[0])))), vcvtaq_s64_f64(vaddq_f64(v22, vmulq_n_f64(v31, a5.n128_f64[0]))));
          v27 += 0x400000000;
          v26 += 4;
          v28 += 2;
        }
        while ((int)v15 - 4 >= v26);
        if ((int)v15 > v26)
        {
          v36 = v27 >> 32;
          do
          {
            v13->i32[v36] = (uint64_t)rint(a6.n128_f64[0] + v14->f64[v36] * a5.n128_f64[0]);
            ++v36;
          }
          while (v15 != v36);
        }
        v13 = (int32x4_t *)((char *)v13 + v23);
        v24 = (float64x2_t *)((char *)v24 + v25);
        v14 = (float64x2_t *)((char *)v14 + v25);
        --v12;
      }
      while (v12);
    }
    else if ((int)v15 >= 1)
    {
      f64 = a1[1].f64;
      v19 = 8 * v16;
      v20 = &a9->i32[2];
      v21 = 4 * v17;
      do
      {
        *(v20 - 2) = (uint64_t)rint(a6.n128_f64[0] + *(f64 - 2) * a5.n128_f64[0]);
        if ((_DWORD)v15 != 1)
        {
          *(v20 - 1) = (uint64_t)rint(a6.n128_f64[0] + *(f64 - 1) * a5.n128_f64[0]);
          if ((_DWORD)v15 != 2)
            *v20 = (uint64_t)rint(a6.n128_f64[0] + *f64 * a5.n128_f64[0]);
        }
        f64 = (double *)((char *)f64 + v19);
        v20 = (__int32 *)((char *)v20 + v21);
        --v12;
      }
      while (v12);
    }
  }
}

uint64_t sub_10020B0E8(uint64_t result, uint64_t a2, double a3, double a4, float a5, uint64_t a6, uint64_t a7, float32x4_t *a8, unint64_t a9, int *a10, uint64_t a11)
{
  float32x4_t v11;
  float32x4_t v12;
  int v13;
  uint64_t v14;
  int32x2_t v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  float *v20;
  uint64_t v21;
  float32x4_t v22;
  unint64_t v23;
  float32x4_t v24;
  float32x4_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float32x4_t *v33;
  uint16x8_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  float32x4_t *v47;
  uint64_t v48;
  __int32 *v49;
  unint64_t v50;
  float32x4_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float *v64;
  const char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v69;
  float *v70;
  const char *v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  float *v75;
  float *v76;
  float *v77;
  uint64_t v78;
  float *v79;
  unsigned int v80;
  unsigned int v81;
  float *v82;
  unint64_t v83;
  unint64_t v84;
  __int32 *v85;
  unint64_t v86;
  float32x4_t *v87;
  float32x4_t v88;
  float32x4x4_t v89;
  float32x4x4_t v90;
  float32x4x4_t v91;

  v13 = a10[1];
  if (!v13)
    return result;
  v14 = *a10;
  v15 = *(int32x2_t *)a11;
  v16 = *(double *)(a11 + 8);
  *(float *)v15.i32 = *(double *)a11;
  *(float *)&v16 = v16;
  v17 = a9 >> 2;
  v18 = v14 - 4;
  if ((int)v14 >= 8)
  {
    v21 = 0;
    v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v16, 0);
    v23 = a9 & 0xFFFFFFFFFFFFFFFCLL;
    v24 = (float32x4_t)vdupq_lane_s32(v15, 0);
    v25 = a8 + 1;
    v26 = 4 * v17;
    v27 = (uint64_t)&a8->i64[1] + 4;
    v28 = result + 4;
    v29 = a8;
    v30 = result;
    while (1)
    {
      v31 = 0;
      v32 = 0;
      v33 = v25;
      do
      {
        v34 = vmovl_u8(*(uint8x8_t *)(v30 + v32));
        v35 = vaddq_f32(v22, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v34.i8)), *(float *)v15.i32));
        v36 = vaddq_f32(v22, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v34)), *(float *)v15.i32));
        v33[-1] = v35;
        *v33 = v36;
        v32 += 8;
        v31 += 0x800000000;
        v33 += 2;
      }
      while (v32 <= (v14 - 8));
      if ((int)v18 >= (int)v32)
      {
        v37 = 0;
        v38 = 4 * (int)v32;
        v39 = (float *)(v27 + v38);
        v40 = v30 + (int)v32;
        v41 = (uint64_t)v29 + v38;
        do
        {
          v36.i8[0] = *(_BYTE *)(v40 + v37);
          *(float *)&v42 = *(float *)&v16 + (float)((float)v36.u32[0] * *(float *)v15.i32);
          v35.i8[0] = *(_BYTE *)(v40 + v37 + 1);
          *(float *)&v43 = *(float *)&v16 + (float)((float)v35.u32[0] * *(float *)v15.i32);
          *(v39 - 3) = *(float *)&v42;
          v44 = v41 + 4 * v37;
          *(float *)(v44 + 4) = *(float *)&v43;
          LOBYTE(v42) = *(_BYTE *)(v40 + v37 + 2);
          v36.f32[0] = *(float *)&v16 + (float)((float)v42 * *(float *)v15.i32);
          LOBYTE(v43) = *(_BYTE *)(v40 + v37 + 3);
          v35.f32[0] = *(float *)&v16 + (float)((float)v43 * *(float *)v15.i32);
          *(_DWORD *)(v44 + 8) = v36.i32[0];
          *v39 = v35.f32[0];
          v39 += 4;
          v37 += 4;
        }
        while ((int)v32 + v37 <= v18);
        LODWORD(v32) = v32 + v37;
        if ((int)v32 < (int)v14)
        {
LABEL_20:
          v45 = (int)v32;
          v46 = v14 - (int)v32;
          if (v46 < 8)
            goto LABEL_56;
          v47 = (float32x4_t *)((char *)v29 + 4 * v45);
          if ((unint64_t)v47 < result + v14 + v21 * a2
            && v30 + v45 < (unint64_t)a8->u64 + 4 * v14 + v23 * v21)
          {
            goto LABEL_56;
          }
          v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + v45;
          v49 = (__int32 *)(v28 + v45);
          v50 = v46 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v36.i32[0] = *(v49 - 1);
            v35.i32[0] = *v49;
            v35 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v35.f32)));
            v51 = vmlaq_f32(v22, v24, vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v36.f32))));
            v36 = vmlaq_f32(v22, v24, v35);
            *v47 = v51;
            v47[1] = v36;
            v47 += 2;
            v49 += 2;
            v50 -= 8;
          }
          while (v50);
          v45 = v48;
          if (v46 != (v46 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_56:
            do
            {
              v36.i8[0] = *(_BYTE *)(v30 + v45);
              v36.f32[0] = *(float *)&v16 + (float)((float)v36.u32[0] * *(float *)v15.i32);
              v29->i32[v45++] = v36.i32[0];
            }
            while (v14 != v45);
          }
        }
      }
      else if ((int)v32 < (int)v14)
      {
        goto LABEL_20;
      }
      v30 += a2;
      v29 = (float32x4_t *)((char *)v29 + v26);
      ++v21;
      v25 = (float32x4_t *)((char *)v25 + v26);
      v27 += v26;
      v28 += a2;
      if (!--v13)
        return result;
    }
  }
  if ((int)v14 >= 4)
  {
    v52 = 0;
    v53 = 3;
    if (v18 > 3)
      v53 = v14 - 4;
    v54 = ((v53 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    v55 = v14 - HIDWORD(v54);
    v56 = (v53 >> 2) + 1;
    v57 = v54 >> 30;
    v58 = (float32x4_t)vdupq_lane_s32(v15, 0);
    v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v16, 0);
    v60 = v55 & 0xFFFFFFFFFFFFFFF8;
    v61 = 4 * v17;
    v62 = (uint64_t)&a8->i64[1] + 4;
    v63 = result + 4;
    v64 = (float *)a8;
    v65 = (const char *)result;
    while (1)
    {
      v66 = (a9 & 0xFFFFFFFFFFFFFFFCLL) * v52;
      v67 = v52 * a2;
      if (v53 < 0x3C)
        break;
      if ((unint64_t)v64 < result + (unint64_t)(v53 & 0xFFFFFFFC) + 4 + v67
        && v65 < (const char *)&a8[1] + ((4 * v53) & 0x3FFFFFFF0) + v66)
      {
        break;
      }
      v69 = v56 & 0x7FFFFFF0;
      v70 = v64;
      v71 = v65;
      do
      {
        *(int8x16x4_t *)(&v12 - 1) = vld4q_s8(v71);
        v71 += 64;
        v90.val[0] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v72, (int8x16_t)xmmword_1003BCAC0)));
        v90.val[1] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_1003BCAC0)));
        v91.val[0] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v72, (int8x16_t)xmmword_1003BCAB0)));
        v89.val[0] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v72, (int8x16_t)xmmword_1003BCA90)));
        v89.val[1] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_1003BCA90)));
        v89.val[2] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v73, (int8x16_t)xmmword_1003BCA90)));
        v89.val[3] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_1003BCA90)));
        v75 = v70;
        vst4q_f32(v75, v89);
        v75 += 16;
        v91.val[1] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_1003BCAB0)));
        v89.val[0] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v72, (int8x16_t)xmmword_1003BCAA0)));
        v89.val[1] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_1003BCAA0)));
        v89.val[2] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v73, (int8x16_t)xmmword_1003BCAA0)));
        v89.val[3] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_1003BCAA0)));
        vst4q_f32(v75, v89);
        v91.val[2] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v73, (int8x16_t)xmmword_1003BCAB0)));
        v91.val[3] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_1003BCAB0)));
        v76 = v70 + 32;
        vst4q_f32(v76, v91);
        v90.val[2] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v73, (int8x16_t)xmmword_1003BCAC0)));
        v11 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_1003BCAC0));
        v90.val[3] = vmlaq_f32(v59, v58, v11);
        v77 = v70 + 48;
        vst4q_f32(v77, v90);
        v70 += 64;
        v69 -= 16;
      }
      while (v69);
      v78 = 4 * (v56 & 0x7FFFFFF0);
      if (v56 != (v56 & 0x7FFFFFF0))
        goto LABEL_43;
LABEL_45:
      if ((int)v14 > (int)v78)
      {
        v83 = (int)v78;
        if (v55 < 8
          || (unint64_t)&v64[(int)v78] < result + v55 + v67 + (int)v78
          && &v65[(int)v78] < &a8->i8[4 * (int)v78 + 4 * v14 + v66 - v57])
        {
          goto LABEL_57;
        }
        v84 = (int)v78 + v60;
        v85 = (__int32 *)(v63 + (int)v78);
        v86 = v55 & 0xFFFFFFFFFFFFFFF8;
        v87 = (float32x4_t *)&v64[v83];
        do
        {
          v11.i32[0] = *(v85 - 1);
          v12.i32[0] = *v85;
          v12 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v12.f32)));
          v88 = vmlaq_f32(v59, v58, vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v11.f32))));
          v11 = vmlaq_f32(v59, v58, v12);
          *v87 = v88;
          v87[1] = v11;
          v87 += 2;
          v85 += 2;
          v86 -= 8;
        }
        while (v86);
        v83 = v84;
        if (v55 != v60)
        {
LABEL_57:
          do
          {
            v11.i8[0] = v65[v83];
            v11.f32[0] = *(float *)&v16 + (float)((float)v11.u32[0] * *(float *)v15.i32);
            v64[v83++] = v11.f32[0];
          }
          while (v14 != v83);
        }
      }
      v65 += a2;
      v64 = (float *)((char *)v64 + v61);
      ++v52;
      v62 += v61;
      v63 += a2;
      if (!--v13)
        return result;
    }
    v78 = 0;
LABEL_43:
    v79 = (float *)(v62 + 4 * v78);
    do
    {
      v11.i8[0] = v65[v78];
      *(float *)&v80 = *(float *)&v16 + (float)((float)v11.u32[0] * *(float *)v15.i32);
      v12.i8[0] = v65[v78 + 1];
      *(float *)&v81 = *(float *)&v16 + (float)((float)v12.u32[0] * *(float *)v15.i32);
      *(v79 - 3) = *(float *)&v80;
      v82 = &v64[v78];
      v82[1] = *(float *)&v81;
      LOBYTE(v80) = v65[v78 + 2];
      v11.f32[0] = *(float *)&v16 + (float)((float)v80 * *(float *)v15.i32);
      LOBYTE(v81) = v65[v78 + 3];
      v12.f32[0] = *(float *)&v16 + (float)((float)v81 * *(float *)v15.i32);
      v82[2] = v11.f32[0];
      *v79 = v12.f32[0];
      v79 += 4;
      v78 += 4;
    }
    while (v78 <= v18);
    goto LABEL_45;
  }
  if ((int)v14 >= 1)
  {
    v19 = (_BYTE *)(result + 2);
    v20 = &a8->f32[2];
    do
    {
      LOBYTE(a5) = *(v19 - 2);
      a5 = *(float *)&v16 + (float)((float)LODWORD(a5) * *(float *)v15.i32);
      *(v20 - 2) = a5;
      if ((_DWORD)v14 != 1)
      {
        LOBYTE(a5) = *(v19 - 1);
        a5 = *(float *)&v16 + (float)((float)LODWORD(a5) * *(float *)v15.i32);
        *(v20 - 1) = a5;
        if ((_DWORD)v14 != 2)
        {
          LOBYTE(a5) = *v19;
          a5 = *(float *)&v16 + (float)((float)LODWORD(a5) * *(float *)v15.i32);
          *v20 = a5;
        }
      }
      v19 += a2;
      v20 += v17;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_10020B6EC(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, float32x4_t a7, float32x4_t a8, uint64_t a9, uint64_t a10, float32x4_t *a11, unint64_t a12, int *a13, uint64_t a14)
{
  int v14;
  uint64_t v15;
  int32x2_t v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  __int32 *v21;
  uint64_t v22;
  float32x4_t v23;
  unint64_t v24;
  float32x4_t v25;
  float32x4_t *v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float32x4_t *v33;
  int16x8_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t v42;
  int8x8_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x8_t v52;
  float32x4_t v53;
  float32x4_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int8x16_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float *v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v81;
  float *v82;
  const char *v83;
  float32x4_t v84;
  int8x8_t v85;
  float32x4_t v86;
  int8x8_t v87;
  int8x8_t v88;
  int8x8_t v89;
  int16x4_t v90;
  int16x4_t v91;
  float32x4_t v92;
  float *v93;
  float *v94;
  float *v95;
  uint64_t v96;
  _DWORD *v97;
  int8x8_t v98;
  int8x8_t v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int8x16_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int8x8_t v116;
  float32x4_t v117;
  float32x4_t *v118;
  int8x16x4_t v119;
  float32x4x4_t v120;
  float32x4x4_t v121;
  float32x4x4_t v122;

  v14 = a13[1];
  if (!v14)
    return result;
  v15 = *a13;
  v16 = *(int32x2_t *)a14;
  v17 = *(double *)(a14 + 8);
  *(float *)v16.i32 = *(double *)a14;
  *(float *)&v17 = v17;
  v18 = a12 >> 2;
  v19 = v15 - 4;
  if ((int)v15 >= 8)
  {
    v22 = 0;
    v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    v24 = a12 & 0xFFFFFFFFFFFFFFFCLL;
    v25 = (float32x4_t)vdupq_lane_s32(v16, 0);
    v26 = a11 + 1;
    v27 = 4 * v18;
    v28 = (uint64_t)&a11->i64[1] + 4;
    v29 = a11;
    v30 = result;
    while (1)
    {
      v31 = 0;
      v32 = 0;
      v33 = v26;
      do
      {
        v34 = vmovl_s8(*(int8x8_t *)(v30 + v32));
        v35 = vaddq_f32(v23, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v34.i8)), *(float *)v16.i32));
        v36 = vaddq_f32(v23, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v34)), *(float *)v16.i32));
        v33[-1] = v35;
        *v33 = v36;
        v32 += 8;
        v31 += 0x800000000;
        v33 += 2;
      }
      while (v32 <= (v15 - 8));
      if ((int)v19 >= (int)v32)
        break;
      if ((int)v32 < (int)v15)
        goto LABEL_20;
LABEL_11:
      v30 += a2;
      v29 = (float32x4_t *)((char *)v29 + v27);
      ++v22;
      v26 = (float32x4_t *)((char *)v26 + v27);
      v28 += v27;
      if (!--v14)
        return result;
    }
    v37 = 0;
    v38 = 4 * (int)v32;
    v39 = (_DWORD *)(v28 + v38);
    v40 = v30 + (int)v32;
    v41 = (uint64_t)v29 + v38;
    do
    {
      v36.i8[0] = *(_BYTE *)(v40 + v37);
      v42 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v36.f32)).u64[0];
      *(float *)v42.i32 = *(float *)&v17 + (float)((float)v42.i32[0] * *(float *)v16.i32);
      v35.i8[0] = *(_BYTE *)(v40 + v37 + 1);
      v43 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v35.f32)).u64[0];
      *(float *)v43.i32 = *(float *)&v17 + (float)((float)v43.i32[0] * *(float *)v16.i32);
      *(v39 - 3) = v42.i32[0];
      v44 = v41 + 4 * v37;
      *(_DWORD *)(v44 + 4) = v43.i32[0];
      v42.i8[0] = *(_BYTE *)(v40 + v37 + 2);
      v36.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v42)).u64[0];
      v36.f32[0] = *(float *)&v17 + (float)((float)v36.i32[0] * *(float *)v16.i32);
      v43.i8[0] = *(_BYTE *)(v40 + v37 + 3);
      v35.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v43)).u64[0];
      v35.f32[0] = *(float *)&v17 + (float)((float)v35.i32[0] * *(float *)v16.i32);
      *(_DWORD *)(v44 + 8) = v36.i32[0];
      *v39 = v35.i32[0];
      v39 += 4;
      v37 += 4;
    }
    while ((int)v32 + v37 <= v19);
    LODWORD(v32) = v32 + v37;
    if ((int)v32 >= (int)v15)
      goto LABEL_11;
LABEL_20:
    v45 = (int)v32;
    v46 = v15 - (int)v32;
    if (v46 < 8)
    {
      v47 = v45;
      goto LABEL_36;
    }
    if ((unint64_t)v29->u64 + 4 * v45 < result + v15 + v22 * a2
      && v30 + v45 < (unint64_t)a11->u64 + 4 * v15 + v24 * v22)
    {
      v47 = v45;
      goto LABEL_36;
    }
    if (v46 >= 0x10)
    {
      v48 = v46 & 0xFFFFFFFFFFFFFFF0;
      v55 = 4 * v45;
      v56 = v45;
      v57 = v46 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v58 = *(int8x16_t *)(v30 + v56);
        v59 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v58.i8, (int8x8_t)v16), 8uLL), 8uLL)));
        v60 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v58.i8, (int8x8_t)v16), 8uLL), 8uLL)));
        v58.i64[0] = vextq_s8(v58, v58, 8uLL).u64[0];
        v61 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v58.i8, (int8x8_t)v16), 8uLL), 8uLL)));
        v62 = vmlaq_f32(v23, v25, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v58.i8, (int8x8_t)v16), 8uLL), 8uLL))));
        v36 = vmlaq_f32(v23, v25, v60);
        v63 = (float32x4_t *)((char *)v29 + v55);
        *v63 = v36;
        v63[1] = vmlaq_f32(v23, v25, v59);
        v63[2] = v62;
        v63[3] = vmlaq_f32(v23, v25, v61);
        v56 += 16;
        v55 += 64;
        v57 -= 16;
      }
      while (v57);
      if (v46 == v48)
        goto LABEL_11;
      if ((v46 & 8) == 0)
      {
        v47 = v48 + v45;
        do
        {
LABEL_36:
          v36.i8[0] = *(_BYTE *)(v30 + v47);
          v36.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v36.f32)).u64[0];
          v36.f32[0] = *(float *)&v17 + (float)((float)v36.i32[0] * *(float *)v16.i32);
          v29->i32[v47++] = v36.i32[0];
        }
        while (v15 != v47);
        goto LABEL_11;
      }
    }
    else
    {
      v48 = 0;
    }
    v47 = (v46 & 0xFFFFFFFFFFFFFFF8) + v45;
    v49 = v48 - (v46 & 0xFFFFFFFFFFFFFFF8);
    v50 = v48 + v45;
    v51 = 4 * v50;
    do
    {
      v52 = *(int8x8_t *)(v30 + v50);
      v53 = vmlaq_f32(v23, v25, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v52, (int8x8_t)v16), 8uLL), 8uLL))));
      v36 = vmlaq_f32(v23, v25, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v52, (int8x8_t)v16), 8uLL), 8uLL))));
      v54 = (float32x4_t *)((char *)v29 + v51);
      *v54 = v53;
      v54[1] = v36;
      v50 += 8;
      v51 += 32;
      v49 += 8;
    }
    while (v49);
    if (v46 == (v46 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_11;
    goto LABEL_36;
  }
  if ((int)v15 >= 4)
  {
    v64 = 0;
    v65 = 3;
    if (v19 > 3)
      v65 = v15 - 4;
    v66 = ((v65 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    v67 = v15 - HIDWORD(v66);
    v68 = (v65 >> 2) + 1;
    v69 = v66 >> 30;
    v70 = (float32x4_t)vdupq_lane_s32(v16, 0);
    v71 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    v72 = v67 & 0xFFFFFFFFFFFFFFF0;
    v73 = v67 & 0xFFFFFFFFFFFFFFF8;
    v74 = 4 * v18;
    v75 = (uint64_t)&a11->i64[1] + 4;
    v76 = (float *)a11;
    v77 = (const char *)result;
    while (1)
    {
      v78 = (a12 & 0xFFFFFFFFFFFFFFFCLL) * v64;
      v79 = v64 * a2;
      if (v65 < 0x3C)
        break;
      if ((unint64_t)v76 < result + (unint64_t)(v65 & 0xFFFFFFFC) + 4 + v79
        && v77 < (const char *)&a11[1] + ((4 * v65) & 0x3FFFFFFF0) + v78)
      {
        break;
      }
      v81 = v68 & 0x7FFFFFF0;
      v82 = v76;
      v83 = v77;
      do
      {
        v119 = vld4q_s8(v83);
        v83 += 64;
        v84 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v119.val[0].i8, (int8x8_t)v16), 8uLL), 8uLL)));
        v85 = (int8x8_t)vextq_s8(v119.val[0], v119.val[0], 8uLL).u64[0];
        v86 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v85, (int8x8_t)v16), 8uLL), 8uLL)));
        v120.val[0] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v85, (int8x8_t)v16), 8uLL), 8uLL))));
        v87 = (int8x8_t)vextq_s8(v119.val[1], v119.val[1], 8uLL).u64[0];
        v120.val[1] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v87, (int8x8_t)v16), 8uLL), 8uLL))));
        v88 = (int8x8_t)vextq_s8(v119.val[2], v119.val[2], 8uLL).u64[0];
        v120.val[2] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v88, (int8x8_t)v16), 8uLL), 8uLL))));
        v89 = (int8x8_t)vextq_s8(v119.val[3], v119.val[3], 8uLL).u64[0];
        v121.val[0] = vmlaq_f32(v71, v70, v86);
        v121.val[1] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v87, (int8x8_t)v16), 8uLL), 8uLL))));
        v121.val[2] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v88, (int8x8_t)v16), 8uLL), 8uLL))));
        v122.val[0] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v119.val[0].i8, (int8x8_t)v16), 8uLL), 8uLL))));
        v122.val[1] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v119.val[1].i8, (int8x8_t)v16), 8uLL), 8uLL))));
        v122.val[2] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v119.val[2].i8, (int8x8_t)v16), 8uLL), 8uLL))));
        v122.val[3] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v119.val[3].i8, (int8x8_t)v16), 8uLL), 8uLL))));
        v90 = (int16x4_t)vzip1_s8(*(int8x8_t *)v119.val[1].i8, (int8x8_t)v16);
        v91 = (int16x4_t)vzip1_s8(*(int8x8_t *)v119.val[2].i8, (int8x8_t)v16);
        *(int8x8_t *)v119.val[0].i8 = vzip1_s8(*(int8x8_t *)v119.val[3].i8, (int8x8_t)v16);
        a8 = vmlaq_f32(v71, v70, v84);
        v119.val[2] = (int8x16_t)vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16(v90, 8uLL), 8uLL))));
        v119.val[3] = (int8x16_t)vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16(v91, 8uLL), 8uLL))));
        v92 = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16(*(int16x4_t *)v119.val[0].i8, 8uLL), 8uLL))));
        v93 = v82;
        vst4q_f32(v93, *(float32x4x4_t *)a8.f32);
        v93 += 16;
        vst4q_f32(v93, v122);
        v121.val[3] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v89, (int8x8_t)v16), 8uLL), 8uLL))));
        v94 = v82 + 32;
        vst4q_f32(v94, v121);
        a7 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v89, (int8x8_t)v16), 8uLL), 8uLL)));
        v120.val[3] = vmlaq_f32(v71, v70, a7);
        v95 = v82 + 48;
        vst4q_f32(v95, v120);
        v82 += 64;
        v81 -= 16;
      }
      while (v81);
      v96 = 4 * (v68 & 0x7FFFFFF0);
      if (v68 != (v68 & 0x7FFFFFF0))
        goto LABEL_53;
LABEL_55:
      if ((int)v15 > (int)v96)
      {
        v101 = (int)v96;
        if (v67 < 8)
        {
          v102 = (int)v96;
          goto LABEL_71;
        }
        if ((unint64_t)&v76[(int)v96] < result + v67 + v79 + (int)v96
          && &v77[(int)v96] < &a11->i8[4 * (int)v96 + 4 * v15 + v78 - v69])
        {
          v102 = (int)v96;
          goto LABEL_71;
        }
        if (v67 >= 0x10)
        {
          v104 = (int)v96;
          v105 = (int)v96;
          v106 = v67 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v107 = *(int8x16_t *)&v77[v105];
            v108 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v107.i8, (int8x8_t)v16), 8uLL), 8uLL)));
            v109 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v107.i8, (int8x8_t)v16), 8uLL), 8uLL)));
            v107.i64[0] = vextq_s8(v107, v107, 8uLL).u64[0];
            v110 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v107.i8, (int8x8_t)v16), 8uLL), 8uLL)));
            v111 = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v107.i8, (int8x8_t)v16), 8uLL), 8uLL))));
            a7 = vmlaq_f32(v71, v70, v109);
            v112 = (float32x4_t *)&v76[v104];
            *v112 = a7;
            v112[1] = vmlaq_f32(v71, v70, v108);
            a8 = vmlaq_f32(v71, v70, v110);
            v112[2] = v111;
            v112[3] = a8;
            v105 += 16;
            v104 += 16;
            v106 -= 16;
          }
          while (v106);
          if (v67 == v72)
            goto LABEL_41;
          v103 = v67 & 0xFFFFFFFFFFFFFFF0;
          if ((v67 & 8) == 0)
          {
            v102 = v101 + v72;
            do
            {
LABEL_71:
              a7.i8[0] = v77[v102];
              a7.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a7.f32)).u64[0];
              a7.f32[0] = *(float *)&v17 + (float)((float)a7.i32[0] * *(float *)v16.i32);
              v76[v102++] = a7.f32[0];
            }
            while (v15 != v102);
            goto LABEL_41;
          }
        }
        else
        {
          v103 = 0;
        }
        v102 = v101 + v73;
        v113 = v103 - (v67 & 0xFFFFFFFFFFFFFFF8);
        v114 = v103 + v101;
        v115 = v114;
        do
        {
          v116 = *(int8x8_t *)&v77[v114];
          a8 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v116, (int8x8_t)v16), 8uLL), 8uLL)));
          v117 = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v116, (int8x8_t)v16), 8uLL), 8uLL))));
          a7 = vmlaq_f32(v71, v70, a8);
          v118 = (float32x4_t *)&v76[v115];
          *v118 = v117;
          v118[1] = a7;
          v114 += 8;
          v115 += 8;
          v113 += 8;
        }
        while (v113);
        if (v67 == v73)
          goto LABEL_41;
        goto LABEL_71;
      }
LABEL_41:
      v77 += a2;
      v76 = (float *)((char *)v76 + v74);
      ++v64;
      v75 += v74;
      if (!--v14)
        return result;
    }
    v96 = 0;
LABEL_53:
    v97 = (_DWORD *)(v75 + 4 * v96);
    do
    {
      a7.i8[0] = v77[v96];
      v98 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a7.f32)).u64[0];
      *(float *)v98.i32 = *(float *)&v17 + (float)((float)v98.i32[0] * *(float *)v16.i32);
      a8.i8[0] = v77[v96 + 1];
      v99 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a8.f32)).u64[0];
      *(float *)v99.i32 = *(float *)&v17 + (float)((float)v99.i32[0] * *(float *)v16.i32);
      *(v97 - 3) = v98.i32[0];
      v100 = &v76[v96];
      v100[1] = *(float *)v99.i32;
      v98.i8[0] = v77[v96 + 2];
      a7.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v98)).u64[0];
      a7.f32[0] = *(float *)&v17 + (float)((float)a7.i32[0] * *(float *)v16.i32);
      v99.i8[0] = v77[v96 + 3];
      a8.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v99)).u64[0];
      a8.f32[0] = *(float *)&v17 + (float)((float)a8.i32[0] * *(float *)v16.i32);
      v100[2] = a7.f32[0];
      *v97 = a8.i32[0];
      v97 += 4;
      v96 += 4;
    }
    while (v96 <= v19);
    goto LABEL_55;
  }
  if ((int)v15 >= 1)
  {
    v20 = (_BYTE *)(result + 2);
    v21 = &a11->i32[2];
    do
    {
      LOBYTE(a5) = *(v20 - 2);
      *(_QWORD *)&a5 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a5)).u64[0];
      *(float *)&a5 = *(float *)&v17 + (float)((float)SLODWORD(a5) * *(float *)v16.i32);
      *(v21 - 2) = LODWORD(a5);
      if ((_DWORD)v15 != 1)
      {
        LOBYTE(a5) = *(v20 - 1);
        *(_QWORD *)&a5 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a5)).u64[0];
        *(float *)&a5 = *(float *)&v17 + (float)((float)SLODWORD(a5) * *(float *)v16.i32);
        *(v21 - 1) = LODWORD(a5);
        if ((_DWORD)v15 != 2)
        {
          LOBYTE(a5) = *v20;
          *(_QWORD *)&a5 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a5)).u64[0];
          *(float *)&a5 = *(float *)&v17 + (float)((float)SLODWORD(a5) * *(float *)v16.i32);
          *v21 = LODWORD(a5);
        }
      }
      v20 += a2;
      v21 += v18;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint16x8_t *sub_10020BFD8(uint16x8_t *result, unint64_t a2, double a3, double a4, float a5, double a6, float32x4_t a7, uint16x8_t a8, uint64_t a9, uint64_t a10, float *a11, unint64_t a12, unsigned int *a13, uint64_t a14)
{
  unsigned int v14;
  unint64_t v15;
  int32x2_t v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  __int16 *v21;
  float *v22;
  float32x4_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint16x8_t *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint16x8_t *v33;
  float32x4_t *v34;
  uint16x8_t v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  float32x4_t *v42;
  uint16x8_t *v43;
  unint64_t v44;
  uint16x8_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  float *v62;
  const __int16 *v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  float *v67;
  float *v68;
  uint64_t v69;
  float *v70;
  unsigned int v71;
  uint64_t *v72;
  unsigned int v73;
  unint64_t v74;
  uint16x8_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint16x8_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4x4_t v82;
  float32x4x4_t v83;

  v14 = a13[1];
  if (!v14)
    return result;
  v15 = *a13;
  v16 = *(int32x2_t *)a14;
  v17 = *(double *)(a14 + 8);
  *(float *)v16.i32 = *(double *)a14;
  *(float *)&v17 = v17;
  v18 = a2 >> 1;
  v19 = a12 >> 2;
  v20 = v14 - 1;
  if ((int)v15 >= 8)
  {
    v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    v24 = (v15 - 4);
    v25 = (float32x4_t)vdupq_lane_s32(v16, 0);
    v26 = (float32x4_t *)(a11 + 4);
    v27 = 4 * v19;
    v28 = 2 * v18;
    v29 = result + 1;
    while (1)
    {
      v30 = 0;
      v31 = 0;
      v32 = v20;
      v33 = result;
      v34 = v26;
      do
      {
        v35 = *v33++;
        v36 = vaddq_f32(v23, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v35)), *(float *)v16.i32));
        v34[-1] = vaddq_f32(v23, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v35.i8)), *(float *)v16.i32));
        *v34 = v36;
        v31 += 8;
        v30 += 0x800000000;
        v34 += 2;
      }
      while (v31 <= (v15 - 8));
      if ((int)v24 >= (int)v31)
      {
        v37 = 0;
        v38 = (int)v31;
        v39 = 2 * (int)v31;
        do
        {
          v36 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&result->i8[v39]));
          *(float32x4_t *)&a11[v38] = vmlaq_f32(v23, v25, v36);
          v37 += 4;
          v38 += 4;
          v39 += 8;
        }
        while ((int)v31 + v37 <= v24);
        LODWORD(v31) = v31 + v37;
        if ((int)v31 < (int)v15)
        {
LABEL_20:
          v40 = (int)v31;
          v41 = v15 - (int)v31;
          v31 = (int)v31;
          if (v41 < 0x10)
            goto LABEL_46;
          v31 = (v41 & 0xFFFFFFFFFFFFFFF0) + (int)v31;
          v42 = (float32x4_t *)&a11[v40];
          v43 = (uint16x8_t *)((char *)v29 + 2 * v40);
          v44 = v41 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v45 = v43[-1];
            v46 = vcvtq_f32_u32(vmovl_high_u16(*v43));
            v47 = vmlaq_f32(v23, v25, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v45.i8)));
            v36 = vmlaq_f32(v23, v25, vcvtq_f32_u32(vmovl_high_u16(v45)));
            v48 = vmlaq_f32(v23, v25, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v43->i8)));
            *v42 = v47;
            v42[1] = v36;
            v42[2] = v48;
            v42[3] = vmlaq_f32(v23, v25, v46);
            v42 += 4;
            v43 += 2;
            v44 -= 16;
          }
          while (v44);
          if (v41 != (v41 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_46:
            do
            {
              v36.i16[0] = result->i16[v31];
              v36.f32[0] = *(float *)&v17 + (float)((float)v36.u32[0] * *(float *)v16.i32);
              a11[v31++] = v36.f32[0];
            }
            while (v15 != v31);
          }
        }
      }
      else if ((int)v31 < (int)v15)
      {
        goto LABEL_20;
      }
      v20 = v32 - 1;
      v26 = (float32x4_t *)((char *)v26 + v27);
      result = (uint16x8_t *)((char *)result + v28);
      a11 = (float *)((char *)a11 + v27);
      v29 = (uint16x8_t *)((char *)v29 + v28);
      if (!v32)
        return result;
    }
  }
  if ((int)v15 >= 4)
  {
    v49 = (v15 - 4);
    v50 = (v49 & 0xFFFFFFFC) + 5;
    if (v50 <= v15)
      v50 = v15;
    v51 = v50 - (v49 & 0xFFFFFFFC) - 4;
    v52 = (v49 >> 2) + 1;
    v53 = (float32x4_t)vdupq_lane_s32(v16, 0);
    v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    v55 = 2 * v18;
    v56 = 4 * v19;
    v57 = (uint64_t)&a11[4 * (v49 >> 2) + 12];
    v58 = (uint64_t)&result[1].i64[(v49 >> 2) + 1];
    while (1)
    {
      v59 = v20;
      if (v49 >= 0x1C)
      {
        v61 = v52 & 0x7FFFFFF8;
        v62 = a11;
        v63 = (const __int16 *)result;
        do
        {
          *(int16x8x4_t *)(&a8 - 1) = vld4q_s16(v63);
          v63 += 32;
          v82.val[0] = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_high_u16(v64)));
          v82.val[1] = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_high_u16(a8)));
          v82.val[2] = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_high_u16(v65)));
          v82.val[3] = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_high_u16(v66)));
          v83.val[0] = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v64.i8)));
          v83.val[1] = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)a8.i8)));
          v83.val[2] = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v65.i8)));
          a7 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v66.i8));
          v83.val[3] = vmlaq_f32(v54, v53, a7);
          v67 = v62 + 32;
          vst4q_f32(v62, v83);
          v68 = v62 + 16;
          vst4q_f32(v68, v82);
          v62 = v67;
          v61 -= 8;
        }
        while (v61);
        v60 = 4 * (v52 & 0x7FFFFFF8);
        if (v52 == (v52 & 0x7FFFFFF8))
          goto LABEL_37;
      }
      else
      {
        v60 = 0;
      }
      v69 = 2 * v60 + 6;
      v70 = &a11[v60];
      do
      {
        a7.i16[0] = *(__int16 *)((char *)&result->i16[-3] + v69);
        *(float *)&v71 = *(float *)&v17 + (float)((float)a7.u32[0] * *(float *)v16.i32);
        v72 = &result->i64[v60 / 4];
        a8.i16[0] = *((_WORD *)v72 + 1);
        *(float *)&v73 = *(float *)&v17 + (float)((float)a8.u32[0] * *(float *)v16.i32);
        *v70 = *(float *)&v71;
        v70[1] = *(float *)&v73;
        LOWORD(v71) = *((_WORD *)v72 + 2);
        a7.f32[0] = *(float *)&v17 + (float)((float)v71 * *(float *)v16.i32);
        LOWORD(v73) = *(__int16 *)((char *)result->i16 + v69);
        *(float *)a8.i32 = *(float *)&v17 + (float)((float)v73 * *(float *)v16.i32);
        v70[2] = a7.f32[0];
        v70[3] = *(float *)a8.i32;
        v60 += 4;
        v69 += 8;
        v70 += 4;
      }
      while (v60 <= v49);
LABEL_37:
      if ((int)v15 > (int)v60)
      {
        v74 = (v49 & 0xFFFFFFFC) + 4;
        if (v51 < 0x10)
          goto LABEL_47;
        v75 = (uint16x8_t *)v58;
        v76 = v57;
        v77 = v51 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v78 = v75[-1];
          v79 = vcvtq_f32_u32(vmovl_high_u16(*v75));
          v80 = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v78.i8)));
          a7 = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_high_u16(v78)));
          v81 = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v75->i8)));
          *(float32x4_t *)(v76 - 32) = v80;
          *(float32x4_t *)(v76 - 16) = a7;
          a8 = (uint16x8_t)vmlaq_f32(v54, v53, v79);
          *(float32x4_t *)v76 = v81;
          *(uint16x8_t *)(v76 + 16) = a8;
          v76 += 64;
          v75 += 2;
          v77 -= 16;
        }
        while (v77);
        v74 = (v49 & 0xFFFFFFFC) + 4 + (v51 & 0xFFFFFFFFFFFFFFF0);
        if (v51 != (v51 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_47:
          do
          {
            a7.i16[0] = result->i16[v74];
            a7.f32[0] = *(float *)&v17 + (float)((float)a7.u32[0] * *(float *)v16.i32);
            a11[v74++] = a7.f32[0];
          }
          while (v74 < v15);
        }
      }
      v20 = v59 - 1;
      result = (uint16x8_t *)((char *)result + v55);
      a11 = (float *)((char *)a11 + v56);
      v57 += v56;
      v58 += v55;
      if (!v59)
        return result;
    }
  }
  if ((int)v15 >= 1)
  {
    v21 = &result->i16[2];
    v22 = a11 + 2;
    do
    {
      LOWORD(a5) = *(v21 - 2);
      a5 = *(float *)&v17 + (float)((float)LODWORD(a5) * *(float *)v16.i32);
      *(v22 - 2) = a5;
      if ((_DWORD)v15 != 1)
      {
        LOWORD(a5) = *(v21 - 1);
        a5 = *(float *)&v17 + (float)((float)LODWORD(a5) * *(float *)v16.i32);
        *(v22 - 1) = a5;
        if ((_DWORD)v15 != 2)
        {
          LOWORD(a5) = *v21;
          a5 = *(float *)&v17 + (float)((float)LODWORD(a5) * *(float *)v16.i32);
          *v22 = a5;
        }
      }
      v21 += v18;
      v22 += v19;
      --v14;
    }
    while (v14);
  }
  return result;
}

int16x8_t *sub_10020C470(int16x8_t *result, unint64_t a2, double a3, double a4, double a5, double a6, float32x4_t a7, int16x8_t a8, uint64_t a9, uint64_t a10, float32x4_t *a11, unint64_t a12, unsigned int *a13, uint64_t a14)
{
  unsigned int v14;
  unint64_t v15;
  int32x2_t v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  __int16 *v21;
  __int32 *v22;
  float32x4_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t *v26;
  uint64_t v27;
  uint64_t v28;
  int16x8_t *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int16x8_t *v33;
  float32x4_t *v34;
  int16x8_t v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  float32x4_t *v42;
  int16x8_t *v43;
  unint64_t v44;
  int16x8_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  float *v62;
  const __int16 *v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  float *v67;
  float *v68;
  uint64_t v69;
  float32x4_t *v70;
  int16x4_t v71;
  uint64_t *v72;
  int16x4_t v73;
  unint64_t v74;
  int16x8_t *v75;
  uint64_t v76;
  unint64_t v77;
  int16x8_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4x4_t v82;
  float32x4x4_t v83;

  v14 = a13[1];
  if (!v14)
    return result;
  v15 = *a13;
  v16 = *(int32x2_t *)a14;
  v17 = *(double *)(a14 + 8);
  *(float *)v16.i32 = *(double *)a14;
  *(float *)&v17 = v17;
  v18 = a2 >> 1;
  v19 = a12 >> 2;
  v20 = v14 - 1;
  if ((int)v15 >= 8)
  {
    v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    v24 = (v15 - 4);
    v25 = (float32x4_t)vdupq_lane_s32(v16, 0);
    v26 = a11 + 1;
    v27 = 4 * v19;
    v28 = 2 * v18;
    v29 = result + 1;
    while (1)
    {
      v30 = 0;
      v31 = 0;
      v32 = v20;
      v33 = result;
      v34 = v26;
      do
      {
        v35 = *v33++;
        v36 = vaddq_f32(v23, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v35)), *(float *)v16.i32));
        v34[-1] = vaddq_f32(v23, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v35.i8)), *(float *)v16.i32));
        *v34 = v36;
        v31 += 8;
        v30 += 0x800000000;
        v34 += 2;
      }
      while (v31 <= (v15 - 8));
      if ((int)v24 >= (int)v31)
      {
        v37 = 0;
        v38 = 4 * (int)v31;
        v39 = 2 * (int)v31;
        do
        {
          v36 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)&result->i8[v39]));
          *(float32x4_t *)((char *)a11 + v38) = vmlaq_f32(v23, v25, v36);
          v37 += 4;
          v38 += 16;
          v39 += 8;
        }
        while ((int)v31 + v37 <= v24);
        LODWORD(v31) = v31 + v37;
        if ((int)v31 < (int)v15)
        {
LABEL_20:
          v40 = (int)v31;
          v41 = v15 - (int)v31;
          v31 = (int)v31;
          if (v41 < 0x10)
            goto LABEL_46;
          v31 = (v41 & 0xFFFFFFFFFFFFFFF0) + (int)v31;
          v42 = (float32x4_t *)((char *)a11 + 4 * v40);
          v43 = (int16x8_t *)((char *)v29 + 2 * v40);
          v44 = v41 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v45 = v43[-1];
            v46 = vcvtq_f32_s32(vmovl_high_s16(*v43));
            v47 = vmlaq_f32(v23, v25, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v45.i8)));
            v36 = vmlaq_f32(v23, v25, vcvtq_f32_s32(vmovl_high_s16(v45)));
            v48 = vmlaq_f32(v23, v25, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v43->i8)));
            *v42 = v47;
            v42[1] = v36;
            v42[2] = v48;
            v42[3] = vmlaq_f32(v23, v25, v46);
            v42 += 4;
            v43 += 2;
            v44 -= 16;
          }
          while (v44);
          if (v41 != (v41 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_46:
            do
            {
              v36.i16[0] = result->i16[v31];
              v36.i64[0] = vmovl_s16(*(int16x4_t *)v36.f32).u64[0];
              v36.f32[0] = *(float *)&v17 + (float)((float)v36.i32[0] * *(float *)v16.i32);
              a11->i32[v31++] = v36.i32[0];
            }
            while (v15 != v31);
          }
        }
      }
      else if ((int)v31 < (int)v15)
      {
        goto LABEL_20;
      }
      v20 = v32 - 1;
      v26 = (float32x4_t *)((char *)v26 + v27);
      result = (int16x8_t *)((char *)result + v28);
      a11 = (float32x4_t *)((char *)a11 + v27);
      v29 = (int16x8_t *)((char *)v29 + v28);
      if (!v32)
        return result;
    }
  }
  if ((int)v15 >= 4)
  {
    v49 = (v15 - 4);
    v50 = (v49 & 0xFFFFFFFC) + 5;
    if (v50 <= v15)
      v50 = v15;
    v51 = v50 - (v49 & 0xFFFFFFFC) - 4;
    v52 = (v49 >> 2) + 1;
    v53 = (float32x4_t)vdupq_lane_s32(v16, 0);
    v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    v55 = 2 * v18;
    v56 = 4 * v19;
    v57 = (uint64_t)&a11[(v49 >> 2) + 3];
    v58 = (uint64_t)&result[1].i64[(v49 >> 2) + 1];
    while (1)
    {
      v59 = v20;
      if (v49 >= 0x1C)
      {
        v61 = v52 & 0x7FFFFFF8;
        v62 = (float *)a11;
        v63 = (const __int16 *)result;
        do
        {
          *(int16x8x4_t *)(&a8 - 1) = vld4q_s16(v63);
          v63 += 32;
          v82.val[0] = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_high_s16(v64)));
          v82.val[1] = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_high_s16(a8)));
          v82.val[2] = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_high_s16(v65)));
          v82.val[3] = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_high_s16(v66)));
          v83.val[0] = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v64.i8)));
          v83.val[1] = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)a8.i8)));
          v83.val[2] = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v65.i8)));
          a7 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v66.i8));
          v83.val[3] = vmlaq_f32(v54, v53, a7);
          v67 = v62 + 32;
          vst4q_f32(v62, v83);
          v68 = v62 + 16;
          vst4q_f32(v68, v82);
          v62 = v67;
          v61 -= 8;
        }
        while (v61);
        v60 = 4 * (v52 & 0x7FFFFFF8);
        if (v52 == (v52 & 0x7FFFFFF8))
          goto LABEL_37;
      }
      else
      {
        v60 = 0;
      }
      v69 = 2 * v60 + 6;
      v70 = &a11[v60 / 4];
      do
      {
        a7.i16[0] = *(__int16 *)((char *)&result->i16[-3] + v69);
        v71 = (int16x4_t)vmovl_s16(*(int16x4_t *)a7.f32).u64[0];
        *(float *)v71.i32 = *(float *)&v17 + (float)((float)v71.i32[0] * *(float *)v16.i32);
        v72 = &result->i64[v60 / 4];
        a8.i16[0] = *((_WORD *)v72 + 1);
        v73 = (int16x4_t)vmovl_s16(*(int16x4_t *)a8.i8).u64[0];
        *(float *)v73.i32 = *(float *)&v17 + (float)((float)v73.i32[0] * *(float *)v16.i32);
        v70->i32[0] = v71.i32[0];
        v70->i32[1] = v73.i32[0];
        v71.i16[0] = *((_WORD *)v72 + 2);
        a7.i64[0] = vmovl_s16(v71).u64[0];
        a7.f32[0] = *(float *)&v17 + (float)((float)a7.i32[0] * *(float *)v16.i32);
        v73.i16[0] = *(__int16 *)((char *)result->i16 + v69);
        a8.i64[0] = vmovl_s16(v73).u64[0];
        *(float *)a8.i32 = *(float *)&v17 + (float)((float)a8.i32[0] * *(float *)v16.i32);
        v70->i32[2] = a7.i32[0];
        v70->i32[3] = a8.i32[0];
        v60 += 4;
        v69 += 8;
        ++v70;
      }
      while (v60 <= v49);
LABEL_37:
      if ((int)v15 > (int)v60)
      {
        v74 = (v49 & 0xFFFFFFFC) + 4;
        if (v51 < 0x10)
          goto LABEL_47;
        v75 = (int16x8_t *)v58;
        v76 = v57;
        v77 = v51 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v78 = v75[-1];
          v79 = vcvtq_f32_s32(vmovl_high_s16(*v75));
          v80 = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v78.i8)));
          a7 = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_high_s16(v78)));
          v81 = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v75->i8)));
          *(float32x4_t *)(v76 - 32) = v80;
          *(float32x4_t *)(v76 - 16) = a7;
          a8 = (int16x8_t)vmlaq_f32(v54, v53, v79);
          *(float32x4_t *)v76 = v81;
          *(int16x8_t *)(v76 + 16) = a8;
          v76 += 64;
          v75 += 2;
          v77 -= 16;
        }
        while (v77);
        v74 = (v49 & 0xFFFFFFFC) + 4 + (v51 & 0xFFFFFFFFFFFFFFF0);
        if (v51 != (v51 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_47:
          do
          {
            a7.i16[0] = result->i16[v74];
            a7.i64[0] = vmovl_s16(*(int16x4_t *)a7.f32).u64[0];
            a7.f32[0] = *(float *)&v17 + (float)((float)a7.i32[0] * *(float *)v16.i32);
            a11->i32[v74++] = a7.i32[0];
          }
          while (v74 < v15);
        }
      }
      v20 = v59 - 1;
      result = (int16x8_t *)((char *)result + v55);
      a11 = (float32x4_t *)((char *)a11 + v56);
      v57 += v56;
      v58 += v55;
      if (!v59)
        return result;
    }
  }
  if ((int)v15 >= 1)
  {
    v21 = &result->i16[2];
    v22 = &a11->i32[2];
    do
    {
      LOWORD(a5) = *(v21 - 2);
      *(_QWORD *)&a5 = vmovl_s16(*(int16x4_t *)&a5).u64[0];
      *(float *)&a5 = *(float *)&v17 + (float)((float)SLODWORD(a5) * *(float *)v16.i32);
      *(v22 - 2) = LODWORD(a5);
      if ((_DWORD)v15 != 1)
      {
        LOWORD(a5) = *(v21 - 1);
        *(_QWORD *)&a5 = vmovl_s16(*(int16x4_t *)&a5).u64[0];
        *(float *)&a5 = *(float *)&v17 + (float)((float)SLODWORD(a5) * *(float *)v16.i32);
        *(v22 - 1) = LODWORD(a5);
        if ((_DWORD)v15 != 2)
        {
          LOWORD(a5) = *v21;
          *(_QWORD *)&a5 = vmovl_s16(*(int16x4_t *)&a5).u64[0];
          *(float *)&a5 = *(float *)&v17 + (float)((float)SLODWORD(a5) * *(float *)v16.i32);
          *v22 = LODWORD(a5);
        }
      }
      v21 += v18;
      v22 += v19;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_10020C934(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  float *v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float64x2_t v20;
  float64x2_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  float64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int64x2_t v33;
  float64x2_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  int64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float32x4_t *v45;
  float v46;

  v8 = a7[1];
  if (!v8)
    return result;
  v9 = *a7;
  v10 = *(uint64_t *)a8;
  v11 = *((uint64_t *)a8 + 1);
  v12 = a2 >> 2;
  v13 = a6 >> 2;
  if ((int)v9 >= 4)
  {
    v20 = (float64x2_t)vdupq_lane_s64(v11, 0);
    v21 = (float64x2_t)vdupq_lane_s64(v10, 0);
    v22 = (v9 - 4);
    while (1)
    {
      v23 = 0;
      v24 = 0;
      for (i = 0; i <= v22; i += 4)
      {
        v26 = *(_QWORD *)(result + v23);
        v27 = *(_QWORD *)(result + v23 + 8);
        v28.i64[0] = (int)v26;
        v28.i64[1] = SHIDWORD(v26);
        v29 = vcvtq_f64_s64(v28);
        v28.i64[0] = (int)v27;
        v28.i64[1] = SHIDWORD(v27);
        *(float32x4_t *)(a5 + v23) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v20, vmulq_n_f64(v29, *(double *)&v10))), vaddq_f64(v20, vmulq_n_f64(vcvtq_f64_s64(v28), *(double *)&v10)));
        v24 += 0x400000000;
        v23 += 16;
      }
      if ((int)v22 >= (int)i)
      {
        v30 = 0;
        v31 = 4 * (int)i;
        do
        {
          v32 = *(_OWORD *)(result + v31);
          v33.i64[0] = (int)v32;
          v33.i64[1] = SDWORD1(v32);
          v34 = vcvtq_f64_s64(v33);
          v33.i64[0] = SDWORD2(v32);
          v33.i64[1] = SHIDWORD(v32);
          *(float32x4_t *)(a5 + v31) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v20, v21, v34)), vmlaq_f64(v20, v21, vcvtq_f64_s64(v33)));
          v30 += 4;
          v31 += 16;
        }
        while ((int)i + v30 <= v9 - 4);
        LODWORD(i) = i + v30;
        if ((int)i < (int)v9)
        {
LABEL_19:
          v35 = (int)i;
          v36 = v9 - (int)i;
          i = (int)i;
          if (v36 < 8)
            goto LABEL_27;
          i = (v36 & 0xFFFFFFFFFFFFFFF8) + (int)i;
          v37 = 4 * v35;
          v38 = v36 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v39 = *(_OWORD *)(result + v37);
            v40 = *(_OWORD *)(result + v37 + 16);
            v41.i64[0] = (int)v39;
            v41.i64[1] = SDWORD1(v39);
            v42 = vcvtq_f64_s64(v41);
            v41.i64[0] = SDWORD2(v39);
            v41.i64[1] = SHIDWORD(v39);
            v43 = vcvtq_f64_s64(v41);
            v41.i64[0] = (int)v40;
            v41.i64[1] = SDWORD1(v40);
            v44 = vcvtq_f64_s64(v41);
            v41.i64[0] = SDWORD2(v40);
            v41.i64[1] = SHIDWORD(v40);
            v45 = (float32x4_t *)(a5 + v37);
            *v45 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v20, v21, v42)), vmlaq_f64(v20, v21, v43));
            v45[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v20, v21, v44)), vmlaq_f64(v20, v21, vcvtq_f64_s64(v41)));
            v37 += 32;
            v38 -= 8;
          }
          while (v38);
          if (v36 != (v36 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_27:
            do
            {
              v46 = *(double *)&v11 + (double)*(int *)(result + 4 * i) * *(double *)&v10;
              *(float *)(a5 + 4 * i++) = v46;
            }
            while (v9 != i);
          }
        }
      }
      else if ((int)i < (int)v9)
      {
        goto LABEL_19;
      }
      a5 += 4 * v13;
      result += 4 * v12;
      if (!--v8)
        return result;
    }
  }
  if ((int)v9 >= 1)
  {
    v14 = (int *)(result + 8);
    v15 = (float *)(a5 + 8);
    v16 = 4 * v13;
    do
    {
      v17 = *(double *)&v11 + (double)*(v14 - 2) * *(double *)&v10;
      *(v15 - 2) = v17;
      if ((_DWORD)v9 != 1)
      {
        v18 = *(double *)&v11 + (double)*(v14 - 1) * *(double *)&v10;
        *(v15 - 1) = v18;
        if ((_DWORD)v9 != 2)
        {
          v19 = *(double *)&v11 + (double)*v14 * *(double *)&v10;
          *v15 = v19;
        }
      }
      v14 += v12;
      v15 = (float *)((char *)v15 + v16);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_10020CB9C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  int32x2_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  float *v14;
  float *v15;
  uint64_t v16;
  unsigned int v17;
  float32x4_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x2_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  float32x4_t v40;
  float32x4_t *v41;

  v8 = a7[1];
  if (!v8)
    return result;
  v9 = *a7;
  v10 = *(int32x2_t *)a8;
  v11 = *(double *)(a8 + 8);
  *(float *)v10.i32 = *(double *)a8;
  *(float *)&v11 = v11;
  v12 = a2 >> 2;
  v13 = a6 >> 2;
  if ((int)v9 >= 4)
  {
    v16 = 0;
    v17 = v8 - 1;
    v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v11, 0);
    v19 = (v9 - 4);
    v20 = a6 & 0xFFFFFFFFFFFFFFFCLL;
    v21 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v22 = (float32x4_t)vdupq_lane_s32(v10, 0);
    v23 = 4 * v12;
    v24 = 4 * v13;
    v25 = a5;
    v26 = result;
    while (1)
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = v17;
      v31 = 4;
      do
      {
        *(float32x4_t *)(v25 + v27) = vaddq_f32(v18, vmulq_n_f32(*(float32x4_t *)(v26 + v27), *(float *)v10.i32));
        v32 = v31;
        v29 += 4;
        v28 += 0x400000000;
        v27 += 16;
        v31 += 4;
      }
      while (v29 <= v19);
      if ((int)v19 >= (int)v29)
      {
        v33 = 0;
        v34 = v32;
        v35 = 4 * v32;
        do
        {
          v36 = (float32x2_t *)(v25 + v35);
          *v36 = vmla_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v22.f32, *(float32x2_t *)(v26 + v35));
          v36[1] = vmla_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v22.f32, *(float32x2_t *)(v26 + v35 + 8));
          v35 += 16;
          v33 += 4;
        }
        while (v34 + v33 <= (uint64_t)v19);
        LODWORD(v29) = v29 + v33;
        if ((int)v29 < (int)v9)
        {
LABEL_19:
          v29 = (int)v29;
          v37 = v9 - (int)v29;
          if (v37 < 8)
            goto LABEL_28;
          v38 = 4 * (int)v29;
          if (a5 + v20 * v16 - (result + v21 * v16) < 0x20)
            goto LABEL_28;
          v29 = (v37 & 0xFFFFFFFFFFFFFFF8) + (int)v29;
          v39 = v37 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v40 = vmlaq_f32(v18, v22, *(float32x4_t *)(v26 + v38 + 16));
            v41 = (float32x4_t *)(v25 + v38);
            *v41 = vmlaq_f32(v18, v22, *(float32x4_t *)(v26 + v38));
            v41[1] = v40;
            v38 += 32;
            v39 -= 8;
          }
          while (v39);
          if (v37 != (v37 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_28:
            do
            {
              *(float *)(v25 + 4 * v29) = *(float *)&v11 + (float)(*(float *)(v26 + 4 * v29) * *(float *)v10.i32);
              ++v29;
            }
            while (v9 != v29);
          }
        }
      }
      else if ((int)v29 < (int)v9)
      {
        goto LABEL_19;
      }
      --v17;
      ++v16;
      v26 += v23;
      v25 += v24;
      if (!v30)
        return result;
    }
  }
  if ((int)v9 >= 1)
  {
    v14 = (float *)(result + 8);
    v15 = (float *)(a5 + 8);
    do
    {
      *(v15 - 2) = *(float *)&v11 + (float)(*(v14 - 2) * *(float *)v10.i32);
      if ((_DWORD)v9 != 1)
      {
        *(v15 - 1) = *(float *)&v11 + (float)(*(v14 - 1) * *(float *)v10.i32);
        if ((_DWORD)v9 != 2)
          *v15 = *(float *)&v11 + (float)(*v14 * *(float *)v10.i32);
      }
      v14 += v12;
      v15 += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

float64x2_t *sub_10020CDC0(float64x2_t *result, unint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, unint64_t a6, unsigned int *a7, double *a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double *f64;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  float64x2_t v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  float64x2_t *v30;
  float32x4_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  float32x2_t *v37;
  float64x2_t *v38;
  unint64_t v39;
  float32x2_t v40;
  float32_t v41;

  v8 = a7[1];
  if (!v8)
    return result;
  v9 = *a7;
  v10 = *(uint64_t *)a8;
  v11 = *((uint64_t *)a8 + 1);
  v12 = a2 >> 3;
  v13 = a6 >> 2;
  if ((int)v9 >= 4)
  {
    v21 = v8 - 1;
    v22 = (float64x2_t)vdupq_lane_s64(v11, 0);
    v23 = (v9 - 4);
    v24 = (float64x2_t)vdupq_lane_s64(v10, 0);
    v25 = result + 1;
    v26 = 8 * v12;
    while (1)
    {
      v27 = 0;
      v28 = 0;
      v29 = v21;
      v30 = v25;
      v31 = a5;
      do
      {
        *v31++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v22, vmulq_n_f64(v30[-1], *(double *)&v10))), vaddq_f64(v22, vmulq_n_f64(*v30, *(double *)&v10)));
        v28 += 4;
        v27 += 0x400000000;
        v30 += 2;
      }
      while (v28 <= v23);
      if ((int)v23 >= (int)v28)
      {
        v32 = 0;
        v33 = 4 * (int)v28;
        v34 = 8 * (int)v28;
        do
        {
          *(float32x4_t *)((char *)a5 + v33) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v22, v24, *(float64x2_t *)((char *)result + v34))), vmlaq_f64(v22, v24, *(float64x2_t *)((char *)result + v34 + 16)));
          v32 += 4;
          v33 += 16;
          v34 += 32;
        }
        while ((int)v28 + v32 <= v23);
        LODWORD(v28) = v28 + v32;
        if ((int)v28 < (int)v9)
        {
LABEL_19:
          v35 = (int)v28;
          v36 = v9 - (int)v28;
          v28 = (int)v28;
          if (v36 < 4)
            goto LABEL_27;
          v28 = (v36 & 0xFFFFFFFFFFFFFFFCLL) + (int)v28;
          v37 = (float32x2_t *)&a5->f32[v35];
          v38 = (float64x2_t *)((char *)v25 + 8 * v35);
          v39 = v36 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v40 = vcvt_f32_f64(vmlaq_f64(v22, v24, *v38));
            *v37 = vcvt_f32_f64(vmlaq_f64(v22, v24, v38[-1]));
            v37[1] = v40;
            v37 += 2;
            v38 += 2;
            v39 -= 4;
          }
          while (v39);
          if (v36 != (v36 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_27:
            do
            {
              v41 = *(double *)&v11 + result->f64[v28] * *(double *)&v10;
              a5->f32[v28++] = v41;
            }
            while (v9 != v28);
          }
        }
      }
      else if ((int)v28 < (int)v9)
      {
        goto LABEL_19;
      }
      v21 = v29 - 1;
      a5 = (float32x4_t *)((char *)a5 + 4 * v13);
      v25 = (float64x2_t *)((char *)v25 + v26);
      result = (float64x2_t *)((char *)result + v26);
      if (!v29)
        return result;
    }
  }
  if ((int)v9 >= 1)
  {
    f64 = result[1].f64;
    v15 = 8 * v12;
    v16 = &a5->f32[2];
    v17 = 4 * v13;
    do
    {
      v18 = *(double *)&v11 + *(f64 - 2) * *(double *)&v10;
      *(v16 - 2) = v18;
      if ((_DWORD)v9 != 1)
      {
        v19 = *(double *)&v11 + *(f64 - 1) * *(double *)&v10;
        *(v16 - 1) = v19;
        if ((_DWORD)v9 != 2)
        {
          v20 = *(double *)&v11 + *f64 * *(double *)&v10;
          *v16 = v20;
        }
      }
      f64 = (double *)((char *)f64 + v15);
      v16 = (float *)((char *)v16 + v17);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_10020CFC0(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, float64x2_t a8, float64x2_t a9, uint64_t a10, uint64_t a11, float64x2_t *a12, unint64_t a13, int *a14, double *a15)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  double *f64;
  uint64_t v23;
  float64x2_t v24;
  unint64_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  uint64_t v28;
  float64x2_t *v29;
  float64x2_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  float64x2_t *v34;
  uint16x8_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int8x8_t v61;
  uint64x2_t v62;
  uint64x2_t v63;
  int8x8_t v64;
  uint64x2_t v65;
  int8x8_t v66;
  int8x8_t v67;
  int8x8_t v68;
  int8x8_t v69;
  float64x2_t v70;
  float64x2_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int8x16_t v75;
  int8x8_t v76;
  int8x8_t v77;
  int8x8_t v78;
  int8x8_t v79;
  uint64x2_t v80;
  uint64x2_t v81;
  int8x8_t v82;
  uint64x2_t v83;
  int8x8_t v84;
  uint64x2_t v85;
  int8x8_t v86;
  int8x8_t v87;
  int8x8_t v88;
  int8x8_t v89;
  float64x2_t v90;
  int8x8_t v91;
  uint64x2_t v92;
  int8x8_t v93;
  uint64x2_t v94;
  int8x8_t v95;
  int8x8_t v96;
  int8x8_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  float64x2_t v109;
  float64x2_t v110;
  uint64_t v111;
  float64x2_t *v112;
  double *v113;
  const char *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v118;
  double *v119;
  const char *v120;
  int8x8_t v121;
  int8x8_t v122;
  uint64x2_t v123;
  int8x8_t v124;
  int8x8_t v125;
  int8x8_t v126;
  int8x8_t v127;
  double *v128;
  int8x8_t v129;
  int8x8_t v130;
  int8x8_t v131;
  double *v132;
  int8x8_t v133;
  int8x8_t v134;
  int8x8_t v135;
  int8x8_t v136;
  double *v137;
  int8x8_t v138;
  int8x8_t v139;
  int8x8_t v140;
  int8x8_t v141;
  int8x8_t v142;
  int8x8_t v143;
  unint64_t v144;
  int8x8_t v145;
  double *v146;
  unsigned int v147;
  unsigned int v148;
  int8x8_t v149;
  int8x8_t v150;
  int8x8_t v151;
  int8x8_t v152;
  double *v153;
  int8x8_t v154;
  int8x8_t v155;
  int8x8_t v156;
  double *v157;
  int8x8_t v158;
  int8x8_t v159;
  int8x8_t v160;
  int8x8_t v161;
  double *v162;
  uint64_t v163;
  double *v164;
  double v165;
  double v166;
  double *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  int8x16_t v173;
  int8x8_t v174;
  int8x8_t v175;
  int8x8_t v176;
  int8x8_t v177;
  uint64x2_t v178;
  uint64x2_t v179;
  int8x8_t v180;
  uint64x2_t v181;
  int8x8_t v182;
  uint64x2_t v183;
  int8x8_t v184;
  int8x8_t v185;
  int8x8_t v186;
  int8x8_t v187;
  float64x2_t v188;
  int8x8_t v189;
  uint64x2_t v190;
  int8x8_t v191;
  uint64x2_t v192;
  int8x8_t v193;
  int8x8_t v194;
  int8x8_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int8x8_t v205;
  int8x8_t v206;
  int8x8_t v207;
  uint64x2_t v208;
  uint64x2_t v209;
  int8x8_t v210;
  uint64x2_t v211;
  int8x8_t v212;
  int8x8_t v213;
  int8x8_t v214;
  int8x8_t v215;
  float64x2_t v216;
  float64x2_t *v217;
  unint64_t v218;
  unint64_t v219;
  float64x2x4_t v220;
  float64x2x4_t v221;

  v15 = a14[1];
  if (!v15)
    return result;
  v16 = *a14;
  v17 = *(uint64_t *)a15;
  v18 = *((uint64_t *)a15 + 1);
  v19 = a13 >> 3;
  v20 = v16 - 4;
  if ((int)v16 >= 8)
  {
    v23 = 0;
    v24 = (float64x2_t)vdupq_lane_s64(v18, 0);
    v25 = a13 & 0xFFFFFFFFFFFFFFF8;
    v26 = (float64x2_t)vdupq_lane_s64(v17, 0);
    v27 = a12 + 2;
    v28 = 8 * v19;
    v29 = (float64x2_t *)((char *)a12 + 24);
    v30 = a12;
    v31 = result;
    while (1)
    {
      v32 = 0;
      v33 = 0;
      v34 = v27;
      do
      {
        v35 = vmovl_u8(*(uint8x8_t *)(v31 + v33));
        v36 = vmovl_u16(*(uint16x4_t *)v35.i8);
        v37 = vmovl_high_u16(v35);
        v38.i64[0] = v36.u32[0];
        v38.i64[1] = v36.u32[1];
        v39 = vaddq_f64(v24, vmulq_n_f64(vcvtq_f64_s64(v38), *(double *)&v17));
        v38.i64[0] = v36.u32[2];
        v38.i64[1] = v36.u32[3];
        v40 = vaddq_f64(v24, vmulq_n_f64(vcvtq_f64_s64(v38), *(double *)&v17));
        v38.i64[0] = v37.u32[0];
        v38.i64[1] = v37.u32[1];
        v41 = vaddq_f64(v24, vmulq_n_f64(vcvtq_f64_s64(v38), *(double *)&v17));
        v38.i64[0] = v37.u32[2];
        v38.i64[1] = v37.u32[3];
        v42 = vaddq_f64(v24, vmulq_n_f64(vcvtq_f64_s64(v38), *(double *)&v17));
        v34[-2] = v39;
        v34[-1] = v40;
        *v34 = v41;
        v34[1] = v42;
        v34 += 4;
        v33 += 8;
        v32 += 0x800000000;
      }
      while (v33 <= (v16 - 8));
      if ((int)v20 >= (int)v33)
        break;
      if ((int)v33 < (int)v16)
        goto LABEL_20;
LABEL_11:
      v31 += a2;
      v30 = (float64x2_t *)((char *)v30 + v28);
      ++v23;
      v27 = (float64x2_t *)((char *)v27 + v28);
      v29 = (float64x2_t *)((char *)v29 + v28);
      if (!--v15)
        return result;
    }
    v43 = 0;
    v44 = (int)v33;
    v45 = &v29->f64[v44];
    v46 = v31 + (int)v33;
    v47 = (uint64_t)v30 + v44 * 8;
    do
    {
      LOBYTE(v42.f64[0]) = *(_BYTE *)(v46 + v43);
      v48 = *(double *)&v18 + (double)*(unint64_t *)&v42.f64[0] * *(double *)&v17;
      LOBYTE(v40.f64[0]) = *(_BYTE *)(v46 + v43 + 1);
      v49 = *(double *)&v18 + (double)*(unint64_t *)&v40.f64[0] * *(double *)&v17;
      *(v45 - 3) = v48;
      v50 = v47 + 8 * v43;
      *(double *)(v50 + 8) = v49;
      LOBYTE(v48) = *(_BYTE *)(v46 + v43 + 2);
      v42.f64[0] = *(double *)&v18 + (double)*(unint64_t *)&v48 * *(double *)&v17;
      LOBYTE(v49) = *(_BYTE *)(v46 + v43 + 3);
      v40.f64[0] = *(double *)&v18 + (double)*(unint64_t *)&v49 * *(double *)&v17;
      *(float64_t *)(v50 + 16) = v42.f64[0];
      *v45 = v40.f64[0];
      v45 += 4;
      v43 += 4;
    }
    while ((int)v33 + v43 <= v20);
    LODWORD(v33) = v33 + v43;
    if ((int)v33 >= (int)v16)
      goto LABEL_11;
LABEL_20:
    v51 = (int)v33;
    v52 = v16 - (int)v33;
    if (v52 < 8)
    {
      v53 = v51;
      goto LABEL_36;
    }
    if ((unint64_t)&v30->f64[v51] < result + v16 + v23 * a2
      && v31 + v51 < (unint64_t)&a12->f64[v16] + v25 * v23)
    {
      v53 = v51;
      goto LABEL_36;
    }
    if (v52 >= 0x10)
    {
      v54 = v52 & 0xFFFFFFFFFFFFFFF0;
      v72 = 8 * v51;
      v73 = v51;
      v74 = v52 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v75 = *(int8x16_t *)(v31 + v73);
        v76.i32[0] = v75.u8[6];
        v76.i32[1] = v75.u8[7];
        v77.i32[0] = v75.u8[4];
        v78 = vand_s8(v76, (int8x8_t)0xFF000000FFLL);
        v77.i32[1] = v75.u8[5];
        v79 = vand_s8(v77, (int8x8_t)0xFF000000FFLL);
        v80.i64[0] = v78.u32[0];
        v80.i64[1] = v78.u32[1];
        v81 = v80;
        v82.i32[0] = v75.u8[2];
        v82.i32[1] = v75.u8[3];
        v80.i64[0] = v79.u32[0];
        v80.i64[1] = v79.u32[1];
        v83 = v80;
        v84 = vand_s8(v82, (int8x8_t)0xFF000000FFLL);
        v80.i64[0] = v84.u32[0];
        v80.i64[1] = v84.u32[1];
        v85 = v80;
        v86.i32[0] = v75.u8[0];
        v86.i32[1] = v75.u8[1];
        v87 = vand_s8(v86, (int8x8_t)0xFF000000FFLL);
        v80.i64[0] = v87.u32[0];
        v80.i64[1] = v87.u32[1];
        v75.i64[0] = vextq_s8(v75, v75, 8uLL).u64[0];
        v88.i32[0] = v75.u8[6];
        v88.i32[1] = v75.u8[7];
        v89 = vand_s8(v88, (int8x8_t)0xFF000000FFLL);
        v90 = vcvtq_f64_u64(v80);
        v91.i32[0] = v75.u8[4];
        v80.i64[0] = v89.u32[0];
        v80.i64[1] = v89.u32[1];
        v92 = v80;
        v91.i32[1] = v75.u8[5];
        v93 = vand_s8(v91, (int8x8_t)0xFF000000FFLL);
        v80.i64[0] = v93.u32[0];
        v80.i64[1] = v93.u32[1];
        v94 = v80;
        v95.i32[0] = v75.u8[2];
        v95.i32[1] = v75.u8[3];
        v96 = vand_s8(v95, (int8x8_t)0xFF000000FFLL);
        v80.i64[0] = v96.u32[0];
        v80.i64[1] = v96.u32[1];
        v97.i32[0] = v75.u8[0];
        v97.i32[1] = v75.u8[1];
        *(int8x8_t *)v75.i8 = vand_s8(v97, (int8x8_t)0xFF000000FFLL);
        v98 = vcvtq_f64_u64(v80);
        v80.i64[0] = v75.u32[0];
        v80.i64[1] = v75.u32[1];
        v99 = vmlaq_f64(v24, v26, v90);
        v100 = vmlaq_f64(v24, v26, vcvtq_f64_u64(v85));
        v101 = vmlaq_f64(v24, v26, vcvtq_f64_u64(v83));
        v102 = vmlaq_f64(v24, v26, vcvtq_f64_u64(v81));
        v103 = (float64x2_t *)((char *)v30 + v72);
        v42 = vmlaq_f64(v24, v26, vcvtq_f64_u64(v92));
        v103[2] = v101;
        v103[3] = v102;
        *v103 = v99;
        v103[1] = v100;
        v103[6] = vmlaq_f64(v24, v26, vcvtq_f64_u64(v94));
        v103[7] = v42;
        v103[4] = vmlaq_f64(v24, v26, vcvtq_f64_u64(v80));
        v103[5] = vmlaq_f64(v24, v26, v98);
        v73 += 16;
        v72 += 128;
        v74 -= 16;
      }
      while (v74);
      if (v52 == v54)
        goto LABEL_11;
      if ((v52 & 8) == 0)
      {
        v53 = v54 + v51;
        do
        {
LABEL_36:
          LOBYTE(v42.f64[0]) = *(_BYTE *)(v31 + v53);
          v42.f64[0] = *(double *)&v18 + (double)*(unint64_t *)&v42.f64[0] * *(double *)&v17;
          v30->f64[v53++] = v42.f64[0];
        }
        while (v16 != v53);
        goto LABEL_11;
      }
    }
    else
    {
      v54 = 0;
    }
    v53 = (v52 & 0xFFFFFFFFFFFFFFF8) + v51;
    v55 = v54 - (v52 & 0xFFFFFFFFFFFFFFF8);
    v56 = v54 + v51;
    v57 = 8 * v56;
    do
    {
      v58 = *(_QWORD *)(v31 + v56);
      v59.i32[0] = BYTE6(v58);
      v59.i32[1] = HIBYTE(v58);
      v60 = vand_s8(v59, (int8x8_t)0xFF000000FFLL);
      v61.i32[0] = BYTE4(v58);
      v62.i64[0] = v60.u32[0];
      v62.i64[1] = v60.u32[1];
      v63 = v62;
      v61.i32[1] = BYTE5(v58);
      v64 = vand_s8(v61, (int8x8_t)0xFF000000FFLL);
      v62.i64[0] = v64.u32[0];
      v62.i64[1] = v64.u32[1];
      v65 = v62;
      v66.i32[0] = BYTE2(v58);
      v66.i32[1] = BYTE3(v58);
      v67 = vand_s8(v66, (int8x8_t)0xFF000000FFLL);
      v62.i64[0] = v67.u32[0];
      v62.i64[1] = v67.u32[1];
      v68.i32[0] = v58;
      v68.i32[1] = BYTE1(v58);
      v69 = vand_s8(v68, (int8x8_t)0xFF000000FFLL);
      v70 = vcvtq_f64_u64(v62);
      v62.i64[0] = v69.u32[0];
      v62.i64[1] = v69.u32[1];
      v42 = vmlaq_f64(v24, v26, vcvtq_f64_u64(v65));
      v71 = (float64x2_t *)((char *)v30 + v57);
      v71[2] = v42;
      v71[3] = vmlaq_f64(v24, v26, vcvtq_f64_u64(v63));
      *v71 = vmlaq_f64(v24, v26, vcvtq_f64_u64(v62));
      v71[1] = vmlaq_f64(v24, v26, v70);
      v56 += 8;
      v57 += 64;
      v55 += 8;
    }
    while (v55);
    if (v52 == (v52 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_11;
    goto LABEL_36;
  }
  if ((int)v16 >= 4)
  {
    v104 = 0;
    v105 = 3;
    if (v20 > 3)
      v105 = v16 - 4;
    v106 = ((v105 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    v107 = v16 - HIDWORD(v106);
    v108 = (v105 >> 2) + 1;
    v109 = (float64x2_t)vdupq_lane_s64(v17, 0);
    v110 = (float64x2_t)vdupq_lane_s64(v18, 0);
    v219 = v107 & 0xFFFFFFFFFFFFFFF0;
    v111 = 8 * v19;
    v112 = (float64x2_t *)((char *)a12 + 24);
    v218 = v107 & 0xFFFFFFFFFFFFFFF8;
    v113 = (double *)a12;
    v114 = (const char *)result;
    while (1)
    {
      v115 = (a13 & 0xFFFFFFFFFFFFFFF8) * v104;
      v116 = v104 * a2;
      if (v105 < 0x3C)
        break;
      if ((unint64_t)v113 < result + (unint64_t)(v105 & 0xFFFFFFFC) + 4 + v116
        && v114 < (const char *)&a12[2] + ((8 * v105) & 0x7FFFFFFE0) + v115)
      {
        break;
      }
      v118 = v108 & 0x7FFFFFF0;
      v119 = v113;
      v120 = v114;
      do
      {
        v220 = (float64x2x4_t)vld4q_s8(v120);
        v120 += 64;
        v121.i32[0] = LOBYTE(v220.val[0].f64[0]);
        v121.i32[1] = BYTE1(v220.val[0].f64[0]);
        v122 = vand_s8(v121, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v122.u32[0];
        v123.i64[1] = v122.u32[1];
        v221.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v122.i32[0] = LOBYTE(v220.val[1].f64[0]);
        v122.i32[1] = BYTE1(v220.val[1].f64[0]);
        v124 = vand_s8(v122, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v124.u32[0];
        v123.i64[1] = v124.u32[1];
        v221.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v124.i32[0] = LOBYTE(v220.val[2].f64[0]);
        v124.i32[1] = BYTE1(v220.val[2].f64[0]);
        v125 = vand_s8(v124, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v125.u32[0];
        v123.i64[1] = v125.u32[1];
        v221.val[2] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v125.i32[0] = LOBYTE(v220.val[3].f64[0]);
        v125.i32[1] = BYTE1(v220.val[3].f64[0]);
        v126 = vand_s8(v125, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v126.u32[0];
        v123.i64[1] = v126.u32[1];
        v221.val[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v126.i32[0] = BYTE4(v220.val[0].f64[0]);
        v126.i32[1] = BYTE5(v220.val[0].f64[0]);
        v127 = vand_s8(v126, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v127.u32[0];
        v123.i64[1] = v127.u32[1];
        v128 = v119;
        vst4q_f64(v128, v221);
        v128 += 8;
        v221.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v127.i32[0] = BYTE4(v220.val[1].f64[0]);
        v127.i32[1] = BYTE5(v220.val[1].f64[0]);
        v129 = vand_s8(v127, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v129.u32[0];
        v123.i64[1] = v129.u32[1];
        v221.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v129.i32[0] = BYTE4(v220.val[2].f64[0]);
        v129.i32[1] = BYTE5(v220.val[2].f64[0]);
        v130 = vand_s8(v129, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v130.u32[0];
        v123.i64[1] = v130.u32[1];
        v221.val[2] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v130.i32[0] = BYTE4(v220.val[3].f64[0]);
        v130.i32[1] = BYTE5(v220.val[3].f64[0]);
        v131 = vand_s8(v130, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v131.u32[0];
        v123.i64[1] = v131.u32[1];
        v221.val[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v131.i32[0] = BYTE6(v220.val[0].f64[0]);
        v131.i32[1] = HIBYTE(v220.val[0].f64[0]);
        v132 = v119 + 16;
        v133 = vand_s8(v131, (int8x8_t)0xFF000000FFLL);
        vst4q_f64(v132, v221);
        v123.i64[0] = v133.u32[0];
        v123.i64[1] = v133.u32[1];
        v221.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v133.i32[0] = BYTE6(v220.val[1].f64[0]);
        v133.i32[1] = HIBYTE(v220.val[1].f64[0]);
        v134 = vand_s8(v133, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v134.u32[0];
        v123.i64[1] = v134.u32[1];
        v221.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v134.i32[0] = BYTE6(v220.val[2].f64[0]);
        v134.i32[1] = HIBYTE(v220.val[2].f64[0]);
        v135 = vand_s8(v134, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v135.u32[0];
        v123.i64[1] = v135.u32[1];
        v221.val[2] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v135.i32[0] = BYTE6(v220.val[3].f64[0]);
        v135.i32[1] = HIBYTE(v220.val[3].f64[0]);
        v136 = vand_s8(v135, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v136.u32[0];
        v123.i64[1] = v136.u32[1];
        v221.val[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v137 = v119 + 24;
        v136.i32[0] = BYTE2(v220.val[0].f64[0]);
        vst4q_f64(v137, v221);
        v136.i32[1] = BYTE3(v220.val[0].f64[0]);
        v138 = vand_s8(v136, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v138.u32[0];
        v123.i64[1] = v138.u32[1];
        v221.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v138.i32[0] = BYTE2(v220.val[1].f64[0]);
        v138.i32[1] = BYTE3(v220.val[1].f64[0]);
        v139 = vand_s8(v138, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v139.u32[0];
        v123.i64[1] = v139.u32[1];
        v221.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v139.i32[0] = BYTE2(v220.val[2].f64[0]);
        v139.i32[1] = BYTE3(v220.val[2].f64[0]);
        v140 = vand_s8(v139, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v140.u32[0];
        v123.i64[1] = v140.u32[1];
        v221.val[2] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v140.i32[0] = BYTE2(v220.val[3].f64[0]);
        v140.i32[1] = BYTE3(v220.val[3].f64[0]);
        v141 = vand_s8(v140, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v141.u32[0];
        v123.i64[1] = v141.u32[1];
        v221.val[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v142 = (int8x8_t)vextq_s8((int8x16_t)v220.val[0], (int8x16_t)v220.val[0], 8uLL).u64[0];
        vst4q_f64(v128, v221);
        v141.i32[0] = v142.u8[0];
        v141.i32[1] = v142.u8[1];
        v143 = vand_s8(v141, (int8x8_t)0xFF000000FFLL);
        v144 = vextq_s8((int8x16_t)v220.val[1], (int8x16_t)v220.val[1], 8uLL).u64[0];
        v123.i64[0] = v143.u32[0];
        v123.i64[1] = v143.u32[1];
        *(_QWORD *)&v221.val[1].f64[0] = vextq_s8((int8x16_t)v220.val[2], (int8x16_t)v220.val[2], 8uLL).u64[0];
        v145 = (int8x8_t)vextq_s8((int8x16_t)v220.val[3], (int8x16_t)v220.val[3], 8uLL).u64[0];
        v220.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        LODWORD(v221.val[0].f64[0]) = v144;
        HIDWORD(v221.val[0].f64[0]) = BYTE1(v144);
        *(int8x8_t *)&v221.val[0].f64[0] = vand_s8(*(int8x8_t *)&v221.val[0].f64[0], (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = LODWORD(v221.val[0].f64[0]);
        v123.i64[1] = HIDWORD(v221.val[0].f64[0]);
        v220.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        LODWORD(v221.val[0].f64[0]) = LOBYTE(v221.val[1].f64[0]);
        HIDWORD(v221.val[0].f64[0]) = BYTE1(v221.val[1].f64[0]);
        *(int8x8_t *)&v221.val[0].f64[0] = vand_s8(*(int8x8_t *)&v221.val[0].f64[0], (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = LODWORD(v221.val[0].f64[0]);
        v123.i64[1] = HIDWORD(v221.val[0].f64[0]);
        v220.val[2] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        LODWORD(v221.val[0].f64[0]) = v145.u8[0];
        HIDWORD(v221.val[0].f64[0]) = v145.u8[1];
        *(int8x8_t *)&v221.val[0].f64[0] = vand_s8(*(int8x8_t *)&v221.val[0].f64[0], (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = LODWORD(v221.val[0].f64[0]);
        v123.i64[1] = HIDWORD(v221.val[0].f64[0]);
        v220.val[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v146 = v119 + 32;
        vst4q_f64(v146, v220);
        LODWORD(v220.val[0].f64[0]) = v142.u8[2];
        LODWORD(v137) = v142.u8[4];
        HIDWORD(v220.val[0].f64[0]) = v142.u8[3];
        *(int8x8_t *)&v220.val[0].f64[0] = vand_s8(*(int8x8_t *)&v220.val[0].f64[0], (int8x8_t)0xFF000000FFLL);
        LODWORD(v146) = v142.u8[5];
        v147 = v142.u8[6];
        v123.i64[0] = LODWORD(v220.val[0].f64[0]);
        v123.i64[1] = HIDWORD(v220.val[0].f64[0]);
        v148 = v142.u8[7];
        v220.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v142.i32[0] = BYTE2(v144);
        v142.i32[1] = BYTE3(v144);
        v149 = vand_s8(v142, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v149.u32[0];
        v123.i64[1] = v149.u32[1];
        v220.val[2] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v149.i32[0] = BYTE2(v221.val[1].f64[0]);
        v149.i32[1] = BYTE3(v221.val[1].f64[0]);
        v150 = vand_s8(v149, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v150.u32[0];
        v123.i64[1] = v150.u32[1];
        v220.val[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v150.i32[0] = v145.u8[2];
        v150.i32[1] = v145.u8[3];
        v151 = vand_s8(v150, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v151.u32[0];
        v123.i64[1] = v151.u32[1];
        v221.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v152 = vand_s8((int8x8_t)__PAIR64__(v146, v137), (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v152.u32[0];
        v123.i64[1] = v152.u32[1];
        v153 = v119 + 40;
        vst4q_f64(v153, *(float64x2x4_t *)((char *)&v220 + 16));
        v220.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v152.i32[0] = BYTE4(v144);
        v152.i32[1] = BYTE5(v144);
        v154 = vand_s8(v152, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v154.u32[0];
        v123.i64[1] = v154.u32[1];
        v220.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v154.i32[0] = BYTE4(v221.val[1].f64[0]);
        v154.i32[1] = BYTE5(v221.val[1].f64[0]);
        v155 = vand_s8(v154, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v155.u32[0];
        v123.i64[1] = v155.u32[1];
        v220.val[2] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v155.i32[0] = v145.u8[4];
        v155.i32[1] = v145.u8[5];
        v156 = vand_s8(v155, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v156.u32[0];
        v123.i64[1] = v156.u32[1];
        v220.val[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v157 = v119 + 48;
        vst4q_f64(v157, v220);
        v158 = vand_s8((int8x8_t)__PAIR64__(v148, v147), (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v158.u32[0];
        v123.i64[1] = v158.u32[1];
        v220.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v158.i32[0] = BYTE6(v144);
        v158.i32[1] = HIBYTE(v144);
        v159 = vand_s8(v158, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v159.u32[0];
        v123.i64[1] = v159.u32[1];
        v220.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v159.i32[0] = BYTE6(v221.val[1].f64[0]);
        v159.i32[1] = HIBYTE(v221.val[1].f64[0]);
        v160 = vand_s8(v159, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v160.u32[0];
        v123.i64[1] = v160.u32[1];
        a9 = vcvtq_f64_u64(v123);
        v220.val[2] = vmlaq_f64(v110, v109, a9);
        v145.i32[0] = v145.u8[6];
        v145.i32[1] = v145.u8[7];
        v161 = vand_s8(v145, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v161.u32[0];
        v123.i64[1] = v161.u32[1];
        a8 = vcvtq_f64_u64(v123);
        v220.val[3] = vmlaq_f64(v110, v109, a8);
        v162 = v119 + 56;
        vst4q_f64(v162, v220);
        v119 += 64;
        v118 -= 16;
      }
      while (v118);
      v163 = 4 * (v108 & 0x7FFFFFF0);
      if (v108 != (v108 & 0x7FFFFFF0))
        goto LABEL_53;
LABEL_55:
      if ((int)v16 > (int)v163)
      {
        v168 = (int)v163;
        if (v107 < 8)
        {
          v163 = (int)v163;
          goto LABEL_71;
        }
        if ((unint64_t)&v113[(int)v163] < result + v107 + v116 + (int)v163
          && &v114[(int)v163] < (const char *)&a12->f64[(int)v163 + v16] + v115 - (v106 >> 29))
        {
          v163 = (int)v163;
          goto LABEL_71;
        }
        if (v107 >= 0x10)
        {
          v170 = (int)v163;
          v171 = v168;
          v172 = v107 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v173 = *(int8x16_t *)&v114[v171];
            v174.i32[0] = v173.u8[6];
            v174.i32[1] = v173.u8[7];
            v175.i32[0] = v173.u8[4];
            v176 = vand_s8(v174, (int8x8_t)0xFF000000FFLL);
            v175.i32[1] = v173.u8[5];
            v177 = vand_s8(v175, (int8x8_t)0xFF000000FFLL);
            v178.i64[0] = v176.u32[0];
            v178.i64[1] = v176.u32[1];
            v179 = v178;
            v180.i32[0] = v173.u8[2];
            v180.i32[1] = v173.u8[3];
            v178.i64[0] = v177.u32[0];
            v178.i64[1] = v177.u32[1];
            v181 = v178;
            v182 = vand_s8(v180, (int8x8_t)0xFF000000FFLL);
            v178.i64[0] = v182.u32[0];
            v178.i64[1] = v182.u32[1];
            v183 = v178;
            v184.i32[0] = v173.u8[0];
            v184.i32[1] = v173.u8[1];
            v185 = vand_s8(v184, (int8x8_t)0xFF000000FFLL);
            v178.i64[0] = v185.u32[0];
            v178.i64[1] = v185.u32[1];
            v173.i64[0] = vextq_s8(v173, v173, 8uLL).u64[0];
            v186.i32[0] = v173.u8[6];
            v186.i32[1] = v173.u8[7];
            v187 = vand_s8(v186, (int8x8_t)0xFF000000FFLL);
            v188 = vcvtq_f64_u64(v178);
            v189.i32[0] = v173.u8[4];
            v178.i64[0] = v187.u32[0];
            v178.i64[1] = v187.u32[1];
            v190 = v178;
            v189.i32[1] = v173.u8[5];
            v191 = vand_s8(v189, (int8x8_t)0xFF000000FFLL);
            v178.i64[0] = v191.u32[0];
            v178.i64[1] = v191.u32[1];
            v192 = v178;
            v193.i32[0] = v173.u8[2];
            v193.i32[1] = v173.u8[3];
            v194 = vand_s8(v193, (int8x8_t)0xFF000000FFLL);
            v178.i64[0] = v194.u32[0];
            v178.i64[1] = v194.u32[1];
            v195.i32[0] = v173.u8[0];
            v195.i32[1] = v173.u8[1];
            *(int8x8_t *)v173.i8 = vand_s8(v195, (int8x8_t)0xFF000000FFLL);
            v196 = vcvtq_f64_u64(v178);
            v178.i64[0] = v173.u32[0];
            v178.i64[1] = v173.u32[1];
            a8 = vmlaq_f64(v110, v109, v188);
            v197 = vmlaq_f64(v110, v109, vcvtq_f64_u64(v183));
            v198 = vmlaq_f64(v110, v109, vcvtq_f64_u64(v181));
            v199 = vmlaq_f64(v110, v109, vcvtq_f64_u64(v179));
            v200 = (float64x2_t *)&v113[v170];
            a9 = vmlaq_f64(v110, v109, vcvtq_f64_u64(v190));
            v200[2] = v198;
            v200[3] = v199;
            *v200 = a8;
            v200[1] = v197;
            v200[6] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v192));
            v200[7] = a9;
            v200[4] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v178));
            v200[5] = vmlaq_f64(v110, v109, v196);
            v171 += 16;
            v170 += 16;
            v172 -= 16;
          }
          while (v172);
          if (v107 == v219)
            goto LABEL_41;
          v169 = v107 & 0xFFFFFFFFFFFFFFF0;
          if ((((_BYTE)v16 - BYTE4(v106)) & 8) == 0)
          {
            v163 = v168 + v219;
            do
            {
LABEL_71:
              LOBYTE(a8.f64[0]) = v114[v163];
              a8.f64[0] = *(double *)&v18 + (double)*(unint64_t *)&a8.f64[0] * *(double *)&v17;
              v113[v163++] = a8.f64[0];
            }
            while (v16 != v163);
            goto LABEL_41;
          }
        }
        else
        {
          v169 = 0;
        }
        v163 = v168 + v218;
        v201 = v169 - (v107 & 0xFFFFFFFFFFFFFFF8);
        v202 = v169 + v168;
        v203 = v202;
        do
        {
          v204 = *(_QWORD *)&v114[v202];
          v205.i32[0] = BYTE6(v204);
          v205.i32[1] = HIBYTE(v204);
          v206 = vand_s8(v205, (int8x8_t)0xFF000000FFLL);
          v207.i32[0] = BYTE4(v204);
          v208.i64[0] = v206.u32[0];
          v208.i64[1] = v206.u32[1];
          v209 = v208;
          v207.i32[1] = BYTE5(v204);
          v210 = vand_s8(v207, (int8x8_t)0xFF000000FFLL);
          v208.i64[0] = v210.u32[0];
          v208.i64[1] = v210.u32[1];
          v211 = v208;
          v212.i32[0] = BYTE2(v204);
          v212.i32[1] = BYTE3(v204);
          v213 = vand_s8(v212, (int8x8_t)0xFF000000FFLL);
          v208.i64[0] = v213.u32[0];
          v208.i64[1] = v213.u32[1];
          v214.i32[0] = v204;
          v214.i32[1] = BYTE1(v204);
          v215 = vand_s8(v214, (int8x8_t)0xFF000000FFLL);
          v216 = vcvtq_f64_u64(v208);
          v208.i64[0] = v215.u32[0];
          v208.i64[1] = v215.u32[1];
          a8 = vmlaq_f64(v110, v109, vcvtq_f64_u64(v211));
          v217 = (float64x2_t *)&v113[v203];
          v217[2] = a8;
          v217[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v209));
          a9 = vmlaq_f64(v110, v109, v216);
          *v217 = vmlaq_f64(v110, v109, vcvtq_f64_u64(v208));
          v217[1] = a9;
          v202 += 8;
          v203 += 8;
          v201 += 8;
        }
        while (v201);
        if (v107 == v218)
          goto LABEL_41;
        goto LABEL_71;
      }
LABEL_41:
      v114 += a2;
      v113 = (double *)((char *)v113 + v111);
      ++v104;
      v112 = (float64x2_t *)((char *)v112 + v111);
      if (!--v15)
        return result;
    }
    v163 = 0;
LABEL_53:
    v164 = &v112->f64[v163];
    do
    {
      LOBYTE(a8.f64[0]) = v114[v163];
      v165 = *(double *)&v18 + (double)*(unint64_t *)&a8.f64[0] * *(double *)&v17;
      LOBYTE(a9.f64[0]) = v114[v163 + 1];
      v166 = *(double *)&v18 + (double)*(unint64_t *)&a9.f64[0] * *(double *)&v17;
      *(v164 - 3) = v165;
      v167 = &v113[v163];
      v167[1] = v166;
      LOBYTE(v165) = v114[v163 + 2];
      a8.f64[0] = *(double *)&v18 + (double)*(unint64_t *)&v165 * *(double *)&v17;
      LOBYTE(v166) = v114[v163 + 3];
      a9.f64[0] = *(double *)&v18 + (double)*(unint64_t *)&v166 * *(double *)&v17;
      v167[2] = a8.f64[0];
      *v164 = a9.f64[0];
      v164 += 4;
      v163 += 4;
    }
    while (v163 <= v20);
    goto LABEL_55;
  }
  if ((int)v16 >= 1)
  {
    v21 = (_BYTE *)(result + 2);
    f64 = a12[1].f64;
    do
    {
      LOBYTE(a5) = *(v21 - 2);
      a5 = *(double *)&v18 + (double)*(unint64_t *)&a5 * *(double *)&v17;
      *(f64 - 2) = a5;
      if ((_DWORD)v16 != 1)
      {
        LOBYTE(a5) = *(v21 - 1);
        a5 = *(double *)&v18 + (double)*(unint64_t *)&a5 * *(double *)&v17;
        *(f64 - 1) = a5;
        if ((_DWORD)v16 != 2)
        {
          LOBYTE(a5) = *v21;
          a5 = *(double *)&v18 + (double)*(unint64_t *)&a5 * *(double *)&v17;
          *f64 = a5;
        }
      }
      v21 += a2;
      f64 += v19;
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t sub_10020DD90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, unint64_t a6, int *a7, double *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  double *v15;
  uint64_t v16;
  float64x2_t v17;
  unint64_t v18;
  float64x2_t v19;
  float64x2_t *v20;
  uint64_t v21;
  float64x2_t *v22;
  float64x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  float64x2_t *v27;
  int16x8_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int32x2_t v47;
  int32x2_t v48;
  int32x2_t v49;
  int32x2_t v50;
  int32x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int32x2_t v54;
  int32x2_t v55;
  __int32 v56;
  float64x2_t v57;
  int32x2_t v58;
  float64x2_t v59;
  float64x2_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int8x16_t v64;
  int32x2_t v65;
  int32x2_t v66;
  int32x2_t v67;
  int32x2_t v68;
  int32x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int32x2_t v72;
  int64x2_t v73;
  int32x2_t v74;
  int32x2_t v75;
  int64x2_t v76;
  int32x2_t v77;
  int32x2_t v78;
  int32x2_t v79;
  int32x2_t v80;
  float64x2_t v81;
  int32x2_t v82;
  int64x2_t v83;
  int32x2_t v84;
  int32x2_t v85;
  __int32 v86;
  float64x2_t v87;
  int32x2_t v88;
  float64x2_t v89;
  float64x2_t *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  float64x2_t v97;
  float64x2_t v98;
  unint64_t v99;
  uint64_t v100;
  float64x2_t *v101;
  double *v102;
  const char *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v107;
  double *v108;
  const char *v109;
  int32x2_t v110;
  int32x2_t v111;
  int32x2_t v112;
  int64x2_t v113;
  int32x2_t v114;
  int32x2_t v115;
  int32x2_t v116;
  int32x2_t v117;
  int32x2_t v118;
  double *v119;
  int32x2_t v120;
  int32x2_t v121;
  int32x2_t v122;
  double *v123;
  int32x2_t v124;
  int32x2_t v125;
  int32x2_t v126;
  int32x2_t v127;
  int64x2_t v128;
  int32x2_t v129;
  double *v130;
  int32x2_t v131;
  int32x2_t v132;
  unint64_t v133;
  int32x2_t v134;
  double *v135;
  int32x2_t v136;
  float64x2_t v137;
  double *v138;
  double *v139;
  int32x2_t v140;
  int32x2_t v141;
  int32x2_t v142;
  int32x2_t v143;
  double *v144;
  uint64_t v145;
  double *f64;
  double v147;
  double *v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  int8x16_t v156;
  int32x2_t v157;
  int32x2_t v158;
  int32x2_t v159;
  int32x2_t v160;
  int32x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int32x2_t v164;
  int64x2_t v165;
  int32x2_t v166;
  int32x2_t v167;
  int64x2_t v168;
  int32x2_t v169;
  int32x2_t v170;
  int32x2_t v171;
  int32x2_t v172;
  float64x2_t v173;
  int32x2_t v174;
  int64x2_t v175;
  int32x2_t v176;
  int32x2_t v177;
  __int32 v178;
  float64x2_t v179;
  int32x2_t v180;
  float64x2_t v181;
  float64x2_t *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int32x2_t v187;
  int32x2_t v188;
  int32x2_t v189;
  int32x2_t v190;
  int32x2_t v191;
  int64x2_t v192;
  int64x2_t v193;
  int32x2_t v194;
  int32x2_t v195;
  __int32 v196;
  float64x2_t v197;
  int32x2_t v198;
  float64x2_t v199;
  float64x2_t *v200;
  unint64_t v201;
  float64x2x4_t v202;
  float64x2x4_t v203;

  v8 = a7[1];
  if (!v8)
    return result;
  v9 = *a7;
  v10 = *(uint64_t *)a8;
  v11 = *((uint64_t *)a8 + 1);
  v12 = a6 >> 3;
  v13 = v9 - 4;
  if ((int)v9 >= 8)
  {
    v16 = 0;
    v17 = (float64x2_t)vdupq_lane_s64(v11, 0);
    v18 = a6 & 0xFFFFFFFFFFFFFFF8;
    v19 = (float64x2_t)vdupq_lane_s64(v10, 0);
    v20 = a5 + 2;
    v21 = 8 * v12;
    v22 = (float64x2_t *)((char *)a5 + 24);
    v23 = a5;
    v24 = result;
    while (1)
    {
      v25 = 0;
      v26 = 0;
      v27 = v20;
      do
      {
        v28 = vmovl_s8(*(int8x8_t *)(v24 + v26));
        v29 = (int8x16_t)vmovl_s16(*(int16x4_t *)v28.i8);
        v30 = (int8x16_t)vmovl_high_s16(v28);
        v27[-2] = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v29.i8)), *(double *)&v10));
        v27[-1] = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL))), *(double *)&v10));
        *v27 = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v30.i8)), *(double *)&v10));
        v27[1] = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL))), *(double *)&v10));
        v27 += 4;
        v26 += 8;
        v25 += 0x800000000;
      }
      while (v26 <= (v9 - 8));
      if ((int)v13 >= (int)v26)
        break;
      if ((int)v26 < (int)v9)
        goto LABEL_20;
LABEL_11:
      v24 += a2;
      v23 = (float64x2_t *)((char *)v23 + v21);
      ++v16;
      v20 = (float64x2_t *)((char *)v20 + v21);
      v22 = (float64x2_t *)((char *)v22 + v21);
      if (!--v8)
        return result;
    }
    v31 = 0;
    v32 = (int)v26;
    v33 = &v22->f64[v32];
    v34 = v24 + (int)v26;
    v35 = (uint64_t)v23 + v32 * 8;
    do
    {
      v36 = *(double *)&v11 + (double)*(char *)(v34 + v31 + 1) * *(double *)&v10;
      *(v33 - 3) = *(double *)&v11 + (double)*(char *)(v34 + v31) * *(double *)&v10;
      v37 = v35 + 8 * v31;
      *(double *)(v37 + 8) = v36;
      v38 = *(double *)&v11 + (double)*(char *)(v34 + v31 + 3) * *(double *)&v10;
      *(double *)(v37 + 16) = *(double *)&v11 + (double)*(char *)(v34 + v31 + 2) * *(double *)&v10;
      *v33 = v38;
      v33 += 4;
      v31 += 4;
    }
    while ((int)v26 + v31 <= v13);
    LODWORD(v26) = v26 + v31;
    if ((int)v26 >= (int)v9)
      goto LABEL_11;
LABEL_20:
    v39 = (int)v26;
    v40 = v9 - (int)v26;
    if (v40 < 8)
    {
      v41 = v39;
      goto LABEL_36;
    }
    if ((unint64_t)&v23->f64[v39] < result + v9 + v16 * a2
      && v24 + v39 < (unint64_t)&a5->f64[v9] + v18 * v16)
    {
      v41 = v39;
      goto LABEL_36;
    }
    if (v40 >= 0x10)
    {
      v42 = v40 & 0xFFFFFFFFFFFFFFF0;
      v61 = 8 * v39;
      v62 = v39;
      v63 = v40 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v64 = *(int8x16_t *)(v24 + v62);
        v65.i32[0] = v64.u8[6];
        v65.i32[1] = v64.u8[7];
        v66.i32[0] = v64.u8[4];
        v66.i32[1] = v64.u8[5];
        v67 = vshr_n_s32(vshl_n_s32(v65, 0x18uLL), 0x18uLL);
        v68.i32[0] = v64.u8[2];
        v69 = vshr_n_s32(vshl_n_s32(v66, 0x18uLL), 0x18uLL);
        v68.i32[1] = v64.u8[3];
        v70.i64[0] = v67.i32[0];
        v70.i64[1] = v67.i32[1];
        v71 = v70;
        v72.i32[0] = v64.u8[0];
        v70.i64[0] = v69.i32[0];
        v70.i64[1] = v69.i32[1];
        v73 = v70;
        v74 = vshr_n_s32(vshl_n_s32(v68, 0x18uLL), 0x18uLL);
        v72.i32[1] = v64.u8[1];
        v75 = vshr_n_s32(vshl_n_s32(v72, 0x18uLL), 0x18uLL);
        v70.i64[0] = v74.i32[0];
        v70.i64[1] = v74.i32[1];
        v76 = v70;
        v70.i64[0] = v75.i32[0];
        v70.i64[1] = v75.i32[1];
        v64.i64[0] = vextq_s8(v64, v64, 8uLL).u64[0];
        v77.i32[0] = v64.u8[6];
        v77.i32[1] = v64.u8[7];
        v78.i32[0] = v64.u8[4];
        v79 = vshr_n_s32(vshl_n_s32(v77, 0x18uLL), 0x18uLL);
        v78.i32[1] = v64.u8[5];
        v80 = vshr_n_s32(vshl_n_s32(v78, 0x18uLL), 0x18uLL);
        v81 = vcvtq_f64_s64(v70);
        v82.i32[0] = v64.u8[2];
        v70.i64[0] = v79.i32[0];
        v70.i64[1] = v79.i32[1];
        v83 = v70;
        v70.i64[0] = v80.i32[0];
        v70.i64[1] = v80.i32[1];
        v82.i32[1] = v64.u8[3];
        v84 = vshr_n_s32(vshl_n_s32(v82, 0x18uLL), 0x18uLL);
        v85.i32[0] = v64.u8[0];
        v86 = v64.u8[1];
        v87 = vcvtq_f64_s64(v70);
        v70.i64[0] = v84.i32[0];
        v70.i64[1] = v84.i32[1];
        v85.i32[1] = v86;
        v88 = vshr_n_s32(vshl_n_s32(v85, 0x18uLL), 0x18uLL);
        v89 = vcvtq_f64_s64(v70);
        v70.i64[0] = v88.i32[0];
        v70.i64[1] = v88.i32[1];
        v90 = (float64x2_t *)((char *)v23 + v61);
        v90[2] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v73));
        v90[3] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v71));
        *v90 = vmlaq_f64(v17, v19, v81);
        v90[1] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v76));
        v90[6] = vmlaq_f64(v17, v19, v87);
        v90[7] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v83));
        v90[4] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v70));
        v90[5] = vmlaq_f64(v17, v19, v89);
        v62 += 16;
        v61 += 128;
        v63 -= 16;
      }
      while (v63);
      if (v40 == v42)
        goto LABEL_11;
      if ((v40 & 8) == 0)
      {
        v41 = v42 + v39;
        do
        {
LABEL_36:
          v23->f64[v41] = *(double *)&v11 + (double)*(char *)(v24 + v41) * *(double *)&v10;
          ++v41;
        }
        while (v9 != v41);
        goto LABEL_11;
      }
    }
    else
    {
      v42 = 0;
    }
    v41 = (v40 & 0xFFFFFFFFFFFFFFF8) + v39;
    v43 = v42 - (v40 & 0xFFFFFFFFFFFFFFF8);
    v44 = v42 + v39;
    v45 = 8 * v44;
    do
    {
      v46 = *(_QWORD *)(v24 + v44);
      v47.i32[0] = BYTE6(v46);
      v47.i32[1] = HIBYTE(v46);
      v48.i32[0] = BYTE4(v46);
      v49 = vshr_n_s32(vshl_n_s32(v47, 0x18uLL), 0x18uLL);
      v48.i32[1] = BYTE5(v46);
      v50 = vshr_n_s32(vshl_n_s32(v48, 0x18uLL), 0x18uLL);
      v51.i32[0] = BYTE2(v46);
      v52.i64[0] = v49.i32[0];
      v52.i64[1] = v49.i32[1];
      v53 = v52;
      v52.i64[0] = v50.i32[0];
      v52.i64[1] = v50.i32[1];
      v51.i32[1] = BYTE3(v46);
      v54 = vshr_n_s32(vshl_n_s32(v51, 0x18uLL), 0x18uLL);
      v55.i32[0] = v46;
      v56 = BYTE1(v46);
      v57 = vcvtq_f64_s64(v52);
      v52.i64[0] = v54.i32[0];
      v52.i64[1] = v54.i32[1];
      v55.i32[1] = v56;
      v58 = vshr_n_s32(vshl_n_s32(v55, 0x18uLL), 0x18uLL);
      v59 = vcvtq_f64_s64(v52);
      v52.i64[0] = v58.i32[0];
      v52.i64[1] = v58.i32[1];
      v60 = (float64x2_t *)((char *)v23 + v45);
      v60[2] = vmlaq_f64(v17, v19, v57);
      v60[3] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v53));
      *v60 = vmlaq_f64(v17, v19, vcvtq_f64_s64(v52));
      v60[1] = vmlaq_f64(v17, v19, v59);
      v44 += 8;
      v45 += 64;
      v43 += 8;
    }
    while (v43);
    if (v40 == (v40 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_11;
    goto LABEL_36;
  }
  if ((int)v9 >= 4)
  {
    v91 = 0;
    v92 = 3;
    if (v13 > 3)
      v92 = v9 - 4;
    v93 = ((v92 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    v94 = v9 - HIDWORD(v93);
    v95 = (v92 >> 2) + 1;
    v96 = v93 >> 29;
    v97 = (float64x2_t)vdupq_lane_s64(v10, 0);
    v98 = (float64x2_t)vdupq_lane_s64(v11, 0);
    v201 = v94 & 0xFFFFFFFFFFFFFFF0;
    v99 = v94 & 0xFFFFFFFFFFFFFFF8;
    v100 = 8 * v12;
    v101 = (float64x2_t *)((char *)a5 + 24);
    v102 = (double *)a5;
    v103 = (const char *)result;
    while (1)
    {
      v104 = (a6 & 0xFFFFFFFFFFFFFFF8) * v91;
      v105 = v91 * a2;
      if (v92 < 0x3C)
        break;
      if ((unint64_t)v102 < result + (unint64_t)(v92 & 0xFFFFFFFC) + 4 + v105
        && v103 < (const char *)&a5[2] + ((8 * v92) & 0x7FFFFFFE0) + v104)
      {
        break;
      }
      v107 = v95 & 0x7FFFFFF0;
      v108 = v102;
      v109 = v103;
      do
      {
        v202 = (float64x2x4_t)vld4q_s8(v109);
        v109 += 64;
        v110 = (int32x2_t)vextq_s8((int8x16_t)v202.val[0], (int8x16_t)v202.val[0], 8uLL).u64[0];
        v111.i32[0] = LOBYTE(v202.val[0].f64[0]);
        v111.i32[1] = BYTE1(v202.val[0].f64[0]);
        v112 = vshr_n_s32(vshl_n_s32(v111, 0x18uLL), 0x18uLL);
        v113.i64[0] = v112.i32[0];
        v113.i64[1] = v112.i32[1];
        v114.i32[0] = LOBYTE(v202.val[1].f64[0]);
        v114.i32[1] = BYTE1(v202.val[1].f64[0]);
        v115 = vshr_n_s32(vshl_n_s32(v114, 0x18uLL), 0x18uLL);
        v203.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v113.i64[0] = v115.i32[0];
        v113.i64[1] = v115.i32[1];
        v115.i32[0] = LOBYTE(v202.val[2].f64[0]);
        v115.i32[1] = BYTE1(v202.val[2].f64[0]);
        v203.val[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v116 = vshr_n_s32(vshl_n_s32(v115, 0x18uLL), 0x18uLL);
        v113.i64[0] = v116.i32[0];
        v113.i64[1] = v116.i32[1];
        v115.i32[0] = LOBYTE(v202.val[3].f64[0]);
        v115.i32[1] = BYTE1(v202.val[3].f64[0]);
        v203.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v116.i32[0] = BYTE2(v202.val[0].f64[0]);
        v117 = vshr_n_s32(vshl_n_s32(v115, 0x18uLL), 0x18uLL);
        v113.i64[0] = v117.i32[0];
        v113.i64[1] = v117.i32[1];
        v203.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v117.i32[0] = BYTE4(v202.val[0].f64[0]);
        v117.i32[1] = BYTE5(v202.val[0].f64[0]);
        v118 = vshr_n_s32(vshl_n_s32(v117, 0x18uLL), 0x18uLL);
        v113.i64[0] = v118.i32[0];
        v113.i64[1] = v118.i32[1];
        v119 = v108;
        vst4q_f64(v119, v203);
        v119 += 8;
        v203.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v118.i32[0] = BYTE4(v202.val[1].f64[0]);
        v118.i32[1] = BYTE5(v202.val[1].f64[0]);
        v120 = vshr_n_s32(vshl_n_s32(v118, 0x18uLL), 0x18uLL);
        v113.i64[0] = v120.i32[0];
        v113.i64[1] = v120.i32[1];
        v203.val[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v120.i32[0] = BYTE4(v202.val[2].f64[0]);
        v120.i32[1] = BYTE5(v202.val[2].f64[0]);
        v121 = vshr_n_s32(vshl_n_s32(v120, 0x18uLL), 0x18uLL);
        v113.i64[0] = v121.i32[0];
        v113.i64[1] = v121.i32[1];
        v203.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v121.i32[0] = BYTE4(v202.val[3].f64[0]);
        v121.i32[1] = BYTE5(v202.val[3].f64[0]);
        v122 = vshr_n_s32(vshl_n_s32(v121, 0x18uLL), 0x18uLL);
        v113.i64[0] = v122.i32[0];
        v113.i64[1] = v122.i32[1];
        v203.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v122.i32[0] = BYTE6(v202.val[0].f64[0]);
        v116.i32[1] = BYTE3(v202.val[0].f64[0]);
        v122.i32[1] = HIBYTE(v202.val[0].f64[0]);
        v123 = v108 + 16;
        vst4q_f64(v123, v203);
        v124 = vshr_n_s32(vshl_n_s32(v122, 0x18uLL), 0x18uLL);
        v113.i64[0] = v124.i32[0];
        v113.i64[1] = v124.i32[1];
        v203.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v124.i32[0] = BYTE6(v202.val[1].f64[0]);
        v124.i32[1] = HIBYTE(v202.val[1].f64[0]);
        v125 = vshr_n_s32(vshl_n_s32(v124, 0x18uLL), 0x18uLL);
        v113.i64[0] = v125.i32[0];
        v113.i64[1] = v125.i32[1];
        v203.val[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v125.i32[0] = BYTE6(v202.val[2].f64[0]);
        v125.i32[1] = HIBYTE(v202.val[2].f64[0]);
        v126 = vshr_n_s32(vshl_n_s32(v125, 0x18uLL), 0x18uLL);
        v113.i64[0] = v126.i32[0];
        v113.i64[1] = v126.i32[1];
        v203.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v126.i32[0] = BYTE6(v202.val[3].f64[0]);
        v127 = vshr_n_s32(vshl_n_s32(v116, 0x18uLL), 0x18uLL);
        v126.i32[1] = HIBYTE(v202.val[3].f64[0]);
        v113.i64[0] = v127.i32[0];
        v113.i64[1] = v127.i32[1];
        v128 = v113;
        v129 = vshr_n_s32(vshl_n_s32(v126, 0x18uLL), 0x18uLL);
        v113.i64[0] = v129.i32[0];
        v113.i64[1] = v129.i32[1];
        v203.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v129.i32[0] = BYTE2(v202.val[1].f64[0]);
        v130 = v108 + 24;
        vst4q_f64(v130, v203);
        v129.i32[1] = BYTE3(v202.val[1].f64[0]);
        v203.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v128));
        v128.i32[0] = BYTE2(v202.val[2].f64[0]);
        v128.i32[1] = BYTE3(v202.val[2].f64[0]);
        v131 = vshr_n_s32(vshl_n_s32(v129, 0x18uLL), 0x18uLL);
        v113.i64[0] = v131.i32[0];
        v113.i64[1] = v131.i32[1];
        v203.val[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v131.i32[0] = v110.u8[0];
        v131.i32[1] = v110.u8[1];
        *(int32x2_t *)v128.i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v128.i8, 0x18uLL), 0x18uLL);
        v113.i64[0] = v128.i32[0];
        v113.i64[1] = v128.i32[1];
        v203.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v128.i32[0] = BYTE2(v202.val[3].f64[0]);
        v128.i32[1] = BYTE3(v202.val[3].f64[0]);
        *(int32x2_t *)v128.i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v128.i8, 0x18uLL), 0x18uLL);
        v113.i64[0] = v128.i32[0];
        v113.i64[1] = v128.i32[1];
        v203.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v132.i32[0] = v110.u8[2];
        *(int32x2_t *)v128.i8 = vshr_n_s32(vshl_n_s32(v131, 0x18uLL), 0x18uLL);
        vst4q_f64(v119, v203);
        v132.i32[1] = v110.u8[3];
        v133 = vextq_s8((int8x16_t)v202.val[1], (int8x16_t)v202.val[1], 8uLL).u64[0];
        v113.i64[0] = v128.i32[0];
        v113.i64[1] = v128.i32[1];
        *(_QWORD *)&v203.val[1].f64[0] = vextq_s8((int8x16_t)v202.val[2], (int8x16_t)v202.val[2], 8uLL).u64[0];
        v128.i64[0] = vextq_s8((int8x16_t)v202.val[3], (int8x16_t)v202.val[3], 8uLL).u64[0];
        LODWORD(v203.val[2].f64[0]) = v133;
        HIDWORD(v203.val[2].f64[0]) = BYTE1(v133);
        v202.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        LODWORD(v203.val[0].f64[0]) = v110.u8[4];
        *(int32x2_t *)&v203.val[2].f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v203.val[2].f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v203.val[2].f64[0]);
        v113.i64[1] = SHIDWORD(v203.val[2].f64[0]);
        v202.val[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        LODWORD(v203.val[2].f64[0]) = LOBYTE(v203.val[1].f64[0]);
        HIDWORD(v203.val[0].f64[0]) = v110.u8[5];
        HIDWORD(v203.val[2].f64[0]) = BYTE1(v203.val[1].f64[0]);
        *(int32x2_t *)&v203.val[2].f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v203.val[2].f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v203.val[2].f64[0]);
        v113.i64[1] = SHIDWORD(v203.val[2].f64[0]);
        v202.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        LODWORD(v203.val[2].f64[0]) = v128.u8[0];
        HIDWORD(v203.val[2].f64[0]) = v128.u8[1];
        v134 = vshr_n_s32(vshl_n_s32(v132, 0x18uLL), 0x18uLL);
        *(int32x2_t *)&v203.val[2].f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v203.val[2].f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v203.val[2].f64[0]);
        v113.i64[1] = SHIDWORD(v203.val[2].f64[0]);
        v135 = v108 + 32;
        v202.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        vst4q_f64(v135, v202);
        v113.i64[0] = v134.i32[0];
        v113.i64[1] = v134.i32[1];
        LODWORD(v203.val[2].f64[0]) = BYTE2(v133);
        HIDWORD(v203.val[2].f64[0]) = BYTE3(v133);
        v202.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v136 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v203.val[2].f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = v136.i32[0];
        v113.i64[1] = v136.i32[1];
        LODWORD(v203.val[2].f64[0]) = BYTE2(v203.val[1].f64[0]);
        v137 = vcvtq_f64_s64(v113);
        HIDWORD(v203.val[2].f64[0]) = BYTE3(v203.val[1].f64[0]);
        *(int32x2_t *)&v203.val[2].f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v203.val[2].f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v203.val[2].f64[0]);
        v113.i64[1] = SHIDWORD(v203.val[2].f64[0]);
        v202.val[1] = vmlaq_f64(v98, v97, v137);
        LODWORD(v137.f64[0]) = v128.u8[2];
        HIDWORD(v137.f64[0]) = v128.u8[3];
        v202.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        *(int32x2_t *)&v137.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v137.f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v137.f64[0]);
        v113.i64[1] = SHIDWORD(v137.f64[0]);
        v202.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        *(int32x2_t *)&v137.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v203.val[0].f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v137.f64[0]);
        v113.i64[1] = SHIDWORD(v137.f64[0]);
        v138 = v108 + 40;
        vst4q_f64(v138, v202);
        v202.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        LODWORD(v137.f64[0]) = BYTE4(v133);
        HIDWORD(v137.f64[0]) = BYTE5(v133);
        *(int32x2_t *)&v137.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v137.f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v137.f64[0]);
        v113.i64[1] = SHIDWORD(v137.f64[0]);
        v202.val[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        LODWORD(v137.f64[0]) = BYTE4(v203.val[1].f64[0]);
        HIDWORD(v137.f64[0]) = BYTE5(v203.val[1].f64[0]);
        *(int32x2_t *)&v137.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v137.f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v137.f64[0]);
        v113.i64[1] = SHIDWORD(v137.f64[0]);
        v202.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        LODWORD(v137.f64[0]) = v128.u8[4];
        HIDWORD(v137.f64[0]) = v128.u8[5];
        *(int32x2_t *)&v137.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v137.f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v137.f64[0]);
        v113.i64[1] = SHIDWORD(v137.f64[0]);
        v202.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v139 = v108 + 48;
        vst4q_f64(v139, v202);
        v110.i32[0] = v110.u8[6];
        v110.i32[1] = v110.u8[7];
        v140 = vshr_n_s32(vshl_n_s32(v110, 0x18uLL), 0x18uLL);
        LODWORD(v137.f64[0]) = BYTE6(v133);
        HIDWORD(v137.f64[0]) = HIBYTE(v133);
        v113.i64[0] = v140.i32[0];
        v113.i64[1] = v140.i32[1];
        v202.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v141 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v137.f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = v141.i32[0];
        v113.i64[1] = v141.i32[1];
        v202.val[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v141.i32[0] = BYTE6(v203.val[1].f64[0]);
        v141.i32[1] = HIBYTE(v203.val[1].f64[0]);
        v142 = vshr_n_s32(vshl_n_s32(v141, 0x18uLL), 0x18uLL);
        v113.i64[0] = v142.i32[0];
        v113.i64[1] = v142.i32[1];
        v202.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v142.i32[0] = v128.u8[6];
        v142.i32[1] = v128.u8[7];
        v143 = vshr_n_s32(vshl_n_s32(v142, 0x18uLL), 0x18uLL);
        v113.i64[0] = v143.i32[0];
        v113.i64[1] = v143.i32[1];
        v202.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v144 = v108 + 56;
        vst4q_f64(v144, v202);
        v108 += 64;
        v107 -= 16;
      }
      while (v107);
      v145 = 4 * (v95 & 0x7FFFFFF0);
      if (v95 != (v95 & 0x7FFFFFF0))
        goto LABEL_53;
LABEL_55:
      if ((int)v9 > (int)v145)
      {
        v150 = (int)v145;
        if (v94 < 8)
        {
          v151 = (int)v145;
          goto LABEL_71;
        }
        if ((unint64_t)&v102[(int)v145] < result + v94 + v105 + (int)v145
          && &v103[(int)v145] < (const char *)&a5->f64[(int)v145 + v9] + v104 - v96)
        {
          v151 = (int)v145;
          goto LABEL_71;
        }
        if (v94 >= 0x10)
        {
          v153 = (int)v145;
          v154 = (int)v145;
          v155 = v94 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v156 = *(int8x16_t *)&v103[v154];
            v157.i32[0] = v156.u8[6];
            v157.i32[1] = v156.u8[7];
            v158.i32[0] = v156.u8[4];
            v158.i32[1] = v156.u8[5];
            v159 = vshr_n_s32(vshl_n_s32(v157, 0x18uLL), 0x18uLL);
            v160.i32[0] = v156.u8[2];
            v161 = vshr_n_s32(vshl_n_s32(v158, 0x18uLL), 0x18uLL);
            v160.i32[1] = v156.u8[3];
            v162.i64[0] = v159.i32[0];
            v162.i64[1] = v159.i32[1];
            v163 = v162;
            v164.i32[0] = v156.u8[0];
            v162.i64[0] = v161.i32[0];
            v162.i64[1] = v161.i32[1];
            v165 = v162;
            v166 = vshr_n_s32(vshl_n_s32(v160, 0x18uLL), 0x18uLL);
            v164.i32[1] = v156.u8[1];
            v167 = vshr_n_s32(vshl_n_s32(v164, 0x18uLL), 0x18uLL);
            v162.i64[0] = v166.i32[0];
            v162.i64[1] = v166.i32[1];
            v168 = v162;
            v162.i64[0] = v167.i32[0];
            v162.i64[1] = v167.i32[1];
            v156.i64[0] = vextq_s8(v156, v156, 8uLL).u64[0];
            v169.i32[0] = v156.u8[6];
            v169.i32[1] = v156.u8[7];
            v170.i32[0] = v156.u8[4];
            v171 = vshr_n_s32(vshl_n_s32(v169, 0x18uLL), 0x18uLL);
            v170.i32[1] = v156.u8[5];
            v172 = vshr_n_s32(vshl_n_s32(v170, 0x18uLL), 0x18uLL);
            v173 = vcvtq_f64_s64(v162);
            v174.i32[0] = v156.u8[2];
            v162.i64[0] = v171.i32[0];
            v162.i64[1] = v171.i32[1];
            v175 = v162;
            v162.i64[0] = v172.i32[0];
            v162.i64[1] = v172.i32[1];
            v174.i32[1] = v156.u8[3];
            v176 = vshr_n_s32(vshl_n_s32(v174, 0x18uLL), 0x18uLL);
            v177.i32[0] = v156.u8[0];
            v178 = v156.u8[1];
            v179 = vcvtq_f64_s64(v162);
            v162.i64[0] = v176.i32[0];
            v162.i64[1] = v176.i32[1];
            v177.i32[1] = v178;
            v180 = vshr_n_s32(vshl_n_s32(v177, 0x18uLL), 0x18uLL);
            v181 = vcvtq_f64_s64(v162);
            v162.i64[0] = v180.i32[0];
            v162.i64[1] = v180.i32[1];
            v182 = (float64x2_t *)&v102[v153];
            v182[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v165));
            v182[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v163));
            *v182 = vmlaq_f64(v98, v97, v173);
            v182[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v168));
            v182[6] = vmlaq_f64(v98, v97, v179);
            v182[7] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v175));
            v182[4] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v162));
            v182[5] = vmlaq_f64(v98, v97, v181);
            v154 += 16;
            v153 += 16;
            v155 -= 16;
          }
          while (v155);
          if (v94 == v201)
            goto LABEL_41;
          v152 = v94 & 0xFFFFFFFFFFFFFFF0;
          if ((v94 & 8) == 0)
          {
            v151 = v150 + v201;
            do
            {
LABEL_71:
              v102[v151] = *(double *)&v11 + (double)v103[v151] * *(double *)&v10;
              ++v151;
            }
            while (v9 != v151);
            goto LABEL_41;
          }
        }
        else
        {
          v152 = 0;
        }
        v151 = v150 + v99;
        v183 = v152 - (v94 & 0xFFFFFFFFFFFFFFF8);
        v184 = v152 + v150;
        v185 = v184;
        do
        {
          v186 = *(_QWORD *)&v103[v184];
          v187.i32[0] = BYTE6(v186);
          v187.i32[1] = HIBYTE(v186);
          v188.i32[0] = BYTE4(v186);
          v189 = vshr_n_s32(vshl_n_s32(v187, 0x18uLL), 0x18uLL);
          v188.i32[1] = BYTE5(v186);
          v190 = vshr_n_s32(vshl_n_s32(v188, 0x18uLL), 0x18uLL);
          v191.i32[0] = BYTE2(v186);
          v192.i64[0] = v189.i32[0];
          v192.i64[1] = v189.i32[1];
          v193 = v192;
          v192.i64[0] = v190.i32[0];
          v192.i64[1] = v190.i32[1];
          v191.i32[1] = BYTE3(v186);
          v194 = vshr_n_s32(vshl_n_s32(v191, 0x18uLL), 0x18uLL);
          v195.i32[0] = v186;
          v196 = BYTE1(v186);
          v197 = vcvtq_f64_s64(v192);
          v192.i64[0] = v194.i32[0];
          v192.i64[1] = v194.i32[1];
          v195.i32[1] = v196;
          v198 = vshr_n_s32(vshl_n_s32(v195, 0x18uLL), 0x18uLL);
          v199 = vcvtq_f64_s64(v192);
          v192.i64[0] = v198.i32[0];
          v192.i64[1] = v198.i32[1];
          v200 = (float64x2_t *)&v102[v185];
          v200[2] = vmlaq_f64(v98, v97, v197);
          v200[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v193));
          *v200 = vmlaq_f64(v98, v97, vcvtq_f64_s64(v192));
          v200[1] = vmlaq_f64(v98, v97, v199);
          v184 += 8;
          v185 += 8;
          v183 += 8;
        }
        while (v183);
        if (v94 == v99)
          goto LABEL_41;
        goto LABEL_71;
      }
LABEL_41:
      v103 += a2;
      v102 = (double *)((char *)v102 + v100);
      ++v91;
      v101 = (float64x2_t *)((char *)v101 + v100);
      if (!--v8)
        return result;
    }
    v145 = 0;
LABEL_53:
    f64 = v101[(unint64_t)v145 / 2].f64;
    do
    {
      v147 = *(double *)&v11 + (double)v103[v145 + 1] * *(double *)&v10;
      *(f64 - 3) = *(double *)&v11 + (double)v103[v145] * *(double *)&v10;
      v148 = &v102[v145];
      v148[1] = v147;
      v149 = *(double *)&v11 + (double)v103[v145 + 3] * *(double *)&v10;
      v148[2] = *(double *)&v11 + (double)v103[v145 + 2] * *(double *)&v10;
      *f64 = v149;
      f64 += 4;
      v145 += 4;
    }
    while (v145 <= v13);
    goto LABEL_55;
  }
  if ((int)v9 >= 1)
  {
    v14 = (char *)(result + 2);
    v15 = a5[1].f64;
    do
    {
      *(v15 - 2) = *(double *)&v11 + (double)*(v14 - 2) * *(double *)&v10;
      if ((_DWORD)v9 != 1)
      {
        *(v15 - 1) = *(double *)&v11 + (double)*(v14 - 1) * *(double *)&v10;
        if ((_DWORD)v9 != 2)
          *v15 = *(double *)&v11 + (double)*v14 * *(double *)&v10;
      }
      v14 += a2;
      v15 += v12;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint16x8_t *sub_10020EC38(uint16x8_t *result, unint64_t a2, double a3, double a4, double a5, double a6, __n128 a7, __n128 a8, uint64_t a9, uint64_t a10, float64x2_t *a11, unint64_t a12, unsigned int *a13, double *a14)
{
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  __int16 *v21;
  double *f64;
  float64x2_t v23;
  uint64_t v24;
  float64x2_t v25;
  float64x2_t *v26;
  uint64_t v27;
  uint64_t v28;
  float64x2_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint16x8_t *v34;
  float64x2_t *v35;
  uint16x8_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  int64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  uint64_t v44;
  uint64_t v45;
  double *v46;
  uint64_t v47;
  _WORD *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint16x8_t v58;
  uint32x4_t v59;
  uint64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  uint32x4_t v63;
  float64x2_t v64;
  float64x2_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  float64x2_t v70;
  float64x2_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  double *v77;
  const __int16 *v78;
  uint32x4_t v79;
  uint64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  uint32x4_t v83;
  float64x2_t v84;
  uint32x4_t v85;
  uint32x4_t v86;
  uint32x4_t v87;
  uint32x4_t v88;
  uint32x4_t v89;
  float64x2_t v90;
  double *v91;
  double *v92;
  float64x2_t v93;
  float64x2_t v94;
  double *v95;
  uint64_t v96;
  float64x2_t *v97;
  double v98;
  uint64_t *v99;
  double v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint16x8_t v105;
  uint32x4_t v106;
  uint64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  uint32x4_t v110;
  float64x2_t v111;
  uint64_t v112;
  float64x2x4_t v113;
  int16x8x4_t v114;
  float64x2x4_t v115;
  float64x2x4_t v116;

  v14 = a13[1];
  if (!v14)
    return result;
  v15 = *a13;
  v16 = *(uint64_t *)a14;
  v17 = *((uint64_t *)a14 + 1);
  v18 = a2 >> 1;
  v19 = a12 >> 3;
  v20 = v14 - 1;
  if ((int)v15 >= 8)
  {
    v23 = (float64x2_t)vdupq_lane_s64(v17, 0);
    v24 = (v15 - 4);
    v25 = (float64x2_t)vdupq_lane_s64(v16, 0);
    v26 = a11 + 2;
    v27 = 8 * v19;
    v28 = 2 * v18;
    v29 = (float64x2_t *)((char *)a11 + 24);
    v30 = (uint64_t)result->i64 + 4;
    while (1)
    {
      v31 = 0;
      v32 = 0;
      v33 = v20;
      v34 = result;
      v35 = v26;
      do
      {
        v36 = *v34++;
        v37 = vmovl_u16(*(uint16x4_t *)v36.i8);
        v38 = vmovl_high_u16(v36);
        v39.i64[0] = v37.u32[0];
        v39.i64[1] = v37.u32[1];
        v40 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_s64(v39), *(double *)&v16));
        v39.i64[0] = v37.u32[2];
        v39.i64[1] = v37.u32[3];
        v41 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_s64(v39), *(double *)&v16));
        v39.i64[0] = v38.u32[0];
        v39.i64[1] = v38.u32[1];
        v42 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_s64(v39), *(double *)&v16));
        v39.i64[0] = v38.u32[2];
        v39.i64[1] = v38.u32[3];
        v43 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_s64(v39), *(double *)&v16));
        v35[-2] = v40;
        v35[-1] = v41;
        *v35 = v42;
        v35[1] = v43;
        v35 += 4;
        v32 += 8;
        v31 += 0x800000000;
      }
      while (v32 <= (v15 - 8));
      if ((int)v24 >= (int)v32)
      {
        v44 = 0;
        v45 = (int)v32;
        v46 = &v29->f64[v45];
        v47 = 2 * (int)v32;
        v48 = (_WORD *)(v30 + v47);
        v49 = (uint64_t)a11 + v45 * 8;
        v50 = (uint64_t)result->i64 + v47;
        do
        {
          LOWORD(v43.f64[0]) = *(v48 - 2);
          v51 = *(double *)&v17 + (double)*(unint64_t *)&v43.f64[0] * *(double *)&v16;
          LOWORD(v41.f64[0]) = *(_WORD *)(v50 + 2 * v44 + 2);
          v41.f64[0] = *(double *)&v17 + (double)*(unint64_t *)&v41.f64[0] * *(double *)&v16;
          *(v46 - 3) = v51;
          v52 = v49 + 8 * v44;
          LOWORD(v51) = *v48;
          v43.f64[0] = *(double *)&v17 + (double)*(unint64_t *)&v51 * *(double *)&v16;
          LOWORD(v40.f64[0]) = v48[1];
          v40.f64[0] = *(double *)&v17 + (double)*(unint64_t *)&v40.f64[0] * *(double *)&v16;
          *(float64_t *)(v52 + 8) = v41.f64[0];
          *(float64_t *)(v52 + 16) = v43.f64[0];
          *v46 = v40.f64[0];
          v46 += 4;
          v44 += 4;
          v48 += 4;
        }
        while ((int)v32 + v44 <= v24);
        LODWORD(v32) = v32 + v44;
        if ((int)v32 < (int)v15)
        {
LABEL_20:
          v53 = (int)v32;
          v54 = v15 - (int)v32;
          v32 = (int)v32;
          if (v54 < 8)
            goto LABEL_46;
          v32 = (v54 & 0xFFFFFFFFFFFFFFF8) + (int)v32;
          v55 = 2 * v53;
          v56 = 8 * v53;
          v57 = v54 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v58 = *(uint16x8_t *)((char *)result + v55);
            v59 = vmovl_high_u16(v58);
            v60.i64[0] = v59.u32[2];
            v60.i64[1] = v59.u32[3];
            v61 = vcvtq_f64_u64(v60);
            v60.i64[0] = v59.u32[0];
            v60.i64[1] = v59.u32[1];
            v62 = vcvtq_f64_u64(v60);
            v63 = vmovl_u16(*(uint16x4_t *)v58.i8);
            v60.i64[0] = v63.u32[2];
            v60.i64[1] = v63.u32[3];
            v64 = vcvtq_f64_u64(v60);
            v60.i64[0] = v63.u32[0];
            v60.i64[1] = v63.u32[1];
            v43 = vmlaq_f64(v23, v25, v62);
            v65 = (float64x2_t *)((char *)a11 + v56);
            v65[2] = v43;
            v65[3] = vmlaq_f64(v23, v25, v61);
            *v65 = vmlaq_f64(v23, v25, vcvtq_f64_u64(v60));
            v65[1] = vmlaq_f64(v23, v25, v64);
            v55 += 16;
            v56 += 64;
            v57 -= 8;
          }
          while (v57);
          if (v54 != (v54 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_46:
            do
            {
              LOWORD(v43.f64[0]) = result->i16[v32];
              v43.f64[0] = *(double *)&v17 + (double)*(unint64_t *)&v43.f64[0] * *(double *)&v16;
              a11->f64[v32++] = v43.f64[0];
            }
            while (v15 != v32);
          }
        }
      }
      else if ((int)v32 < (int)v15)
      {
        goto LABEL_20;
      }
      v20 = v33 - 1;
      v26 = (float64x2_t *)((char *)v26 + v27);
      result = (uint16x8_t *)((char *)result + v28);
      v29 = (float64x2_t *)((char *)v29 + v27);
      v30 += v28;
      a11 = (float64x2_t *)((char *)a11 + v27);
      if (!v33)
        return result;
    }
  }
  if ((int)v15 >= 4)
  {
    v66 = (v15 - 4);
    v67 = (v66 & 0xFFFFFFFC) + 5;
    if (v67 <= v15)
      v67 = v15;
    v68 = v67 - (v66 & 0xFFFFFFFC) - 4;
    v69 = (v66 >> 2) + 1;
    v70 = (float64x2_t)vdupq_lane_s64(v16, 0);
    v71 = (float64x2_t)vdupq_lane_s64(v17, 0);
    v72 = 2 * v18;
    v73 = 8 * v19;
    while (1)
    {
      v74 = v20;
      if (v66 >= 0x1C)
      {
        v76 = v69 & 0x7FFFFFF8;
        v77 = (double *)a11;
        v78 = (const __int16 *)result;
        do
        {
          v114 = vld4q_s16(v78);
          v78 += 32;
          v79 = vmovl_u16(*(uint16x4_t *)v114.val[0].i8);
          v80.i64[0] = v79.u32[0];
          v80.i64[1] = v79.u32[1];
          v81 = vcvtq_f64_u64(v80);
          v80.i64[0] = v79.u32[2];
          v80.i64[1] = v79.u32[3];
          v82 = vcvtq_f64_u64(v80);
          v83 = vmovl_high_u16((uint16x8_t)v114.val[0]);
          v80.i64[0] = v83.u32[0];
          v80.i64[1] = v83.u32[1];
          v84 = vcvtq_f64_u64(v80);
          v80.i64[0] = v83.u32[2];
          v80.i64[1] = v83.u32[3];
          a7 = (__n128)vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v85 = vmovl_high_u16((uint16x8_t)v114.val[1]);
          v80.i64[0] = v85.u32[2];
          v80.i64[1] = v85.u32[3];
          a8 = (__n128)vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v86 = vmovl_high_u16((uint16x8_t)v114.val[2]);
          v87 = vmovl_high_u16((uint16x8_t)v114.val[3]);
          v115.val[0] = vmlaq_f64(v71, v70, v84);
          v80.i64[0] = v85.u32[0];
          v80.i64[1] = v85.u32[1];
          v115.val[1] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v116.val[0] = vmlaq_f64(v71, v70, v82);
          v88 = vmovl_u16(*(uint16x4_t *)v114.val[1].i8);
          v80.i64[0] = v88.u32[2];
          v80.i64[1] = v88.u32[3];
          v116.val[1] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v89 = vmovl_u16(*(uint16x4_t *)v114.val[2].i8);
          v80.i64[0] = v89.u32[2];
          v80.i64[1] = v89.u32[3];
          v116.val[2] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v114.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v114.val[3].i8);
          v80.i64[0] = v114.val[0].u32[2];
          v80.i64[1] = v114.val[0].u32[3];
          v116.val[3] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v113.val[0] = vmlaq_f64(v71, v70, v81);
          v80.i64[0] = v88.u32[0];
          v80.i64[1] = v88.u32[1];
          v113.val[1] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v80.i64[0] = v89.u32[0];
          v80.i64[1] = v89.u32[1];
          v113.val[2] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v80.i64[0] = v86.u32[2];
          v80.i64[1] = v86.u32[3];
          v90 = vcvtq_f64_u64(v80);
          v80.i64[0] = v86.u32[0];
          v80.i64[1] = v86.u32[1];
          v114.val[1] = (int16x8_t)vcvtq_f64_u64(v80);
          v80.i64[0] = v114.val[0].u32[0];
          v80.i64[1] = v114.val[0].u32[1];
          v113.val[3] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v91 = v77;
          vst4q_f64(v91, v113);
          v91 += 8;
          vst4q_f64(v91, v116);
          v115.val[2] = vmlaq_f64(v71, v70, (float64x2_t)v114.val[1]);
          v80.i64[0] = v87.u32[0];
          v80.i64[1] = v87.u32[1];
          v115.val[3] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v92 = v77 + 16;
          vst4q_f64(v92, v115);
          v93 = vmlaq_f64(v71, v70, v90);
          v80.i64[0] = v87.u32[2];
          v80.i64[1] = v87.u32[3];
          v94 = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v95 = v77 + 24;
          vst4q_f64(v95, *(float64x2x4_t *)a7.n128_u64);
          v77 += 32;
          v76 -= 8;
        }
        while (v76);
        v75 = 4 * (v69 & 0x7FFFFFF8);
        if (v69 == (v69 & 0x7FFFFFF8))
          goto LABEL_37;
      }
      else
      {
        v75 = 0;
      }
      v96 = 2 * v75 + 6;
      v97 = &a11[v75 / 2];
      do
      {
        a7.n128_u16[0] = *(unsigned __int16 *)((char *)&result->u16[-3] + v96);
        v98 = *(double *)&v17 + (double)a7.n128_u64[0] * *(double *)&v16;
        v99 = &result->i64[v75 / 4];
        a8.n128_u16[0] = *((_WORD *)v99 + 1);
        v100 = *(double *)&v17 + (double)a8.n128_u64[0] * *(double *)&v16;
        v97->f64[0] = v98;
        v97->f64[1] = v100;
        LOWORD(v98) = *((_WORD *)v99 + 2);
        a7.n128_f64[0] = *(double *)&v17 + (double)*(unint64_t *)&v98 * *(double *)&v16;
        LOWORD(v100) = *(__int16 *)((char *)result->i16 + v96);
        a8.n128_f64[0] = *(double *)&v17 + (double)*(unint64_t *)&v100 * *(double *)&v16;
        *(_QWORD *)&v97[1].f64[0] = a7.n128_u64[0];
        *(_QWORD *)&v97[1].f64[1] = a8.n128_u64[0];
        v75 += 4;
        v96 += 8;
        v97 += 2;
      }
      while (v75 <= v66);
LABEL_37:
      if ((int)v15 > (int)v75)
      {
        v101 = (v66 & 0xFFFFFFFC) + 4;
        if (v68 < 8)
          goto LABEL_47;
        v102 = 32 * (v66 >> 2) + 32;
        v103 = 8 * (v66 >> 2) + 8;
        v104 = v68 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v105 = *(uint16x8_t *)((char *)result + v103);
          v106 = vmovl_high_u16(v105);
          v107.i64[0] = v106.u32[2];
          v107.i64[1] = v106.u32[3];
          v108 = vcvtq_f64_u64(v107);
          v107.i64[0] = v106.u32[0];
          v107.i64[1] = v106.u32[1];
          v109 = vcvtq_f64_u64(v107);
          v110 = vmovl_u16(*(uint16x4_t *)v105.i8);
          v107.i64[0] = v110.u32[2];
          v107.i64[1] = v110.u32[3];
          v111 = vcvtq_f64_u64(v107);
          v107.i64[0] = v110.u32[0];
          v107.i64[1] = v110.u32[1];
          a7 = (__n128)vmlaq_f64(v71, v70, v109);
          a8 = (__n128)vmlaq_f64(v71, v70, v108);
          v112 = (uint64_t)a11 + v102;
          *(__n128 *)(v112 + 32) = a7;
          *(__n128 *)(v112 + 48) = a8;
          *(float64x2_t *)v112 = vmlaq_f64(v71, v70, vcvtq_f64_u64(v107));
          *(float64x2_t *)(v112 + 16) = vmlaq_f64(v71, v70, v111);
          v103 += 16;
          v102 += 64;
          v104 -= 8;
        }
        while (v104);
        v101 = (v66 & 0xFFFFFFFC) + 4 + (v68 & 0xFFFFFFFFFFFFFFF8);
        if (v68 != (v68 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_47:
          do
          {
            a7.n128_u16[0] = result->u16[v101];
            a7.n128_f64[0] = *(double *)&v17 + (double)a7.n128_u64[0] * *(double *)&v16;
            *(_QWORD *)&a11->f64[v101++] = a7.n128_u64[0];
          }
          while (v101 < v15);
        }
      }
      v20 = v74 - 1;
      result = (uint16x8_t *)((char *)result + v72);
      a11 = (float64x2_t *)((char *)a11 + v73);
      if (!v74)
        return result;
    }
  }
  if ((int)v15 >= 1)
  {
    v21 = &result->i16[2];
    f64 = a11[1].f64;
    do
    {
      LOWORD(a5) = *(v21 - 2);
      a5 = *(double *)&v17 + (double)*(unint64_t *)&a5 * *(double *)&v16;
      *(f64 - 2) = a5;
      if ((_DWORD)v15 != 1)
      {
        LOWORD(a5) = *(v21 - 1);
        a5 = *(double *)&v17 + (double)*(unint64_t *)&a5 * *(double *)&v16;
        *(f64 - 1) = a5;
        if ((_DWORD)v15 != 2)
        {
          LOWORD(a5) = *v21;
          a5 = *(double *)&v17 + (double)*(unint64_t *)&a5 * *(double *)&v16;
          *f64 = a5;
        }
      }
      v21 += v18;
      f64 += v19;
      --v14;
    }
    while (v14);
  }
  return result;
}

int16x8_t *sub_10020F20C(int16x8_t *result, unint64_t a2, double a3, double a4, double a5, double a6, __n128 a7, __n128 a8, uint64_t a9, uint64_t a10, float64x2_t *a11, unint64_t a12, unsigned int *a13, double *a14)
{
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  __int16 *v21;
  double *f64;
  float64x2_t v23;
  uint64_t v24;
  float64x2_t v25;
  float64x2_t *v26;
  uint64_t v27;
  uint64_t v28;
  float64x2_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int16x8_t *v34;
  float64x2_t *v35;
  int16x8_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  uint64_t v46;
  _WORD *v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int16x8_t v57;
  int32x4_t v58;
  int64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  int32x4_t v62;
  float64x2_t v63;
  float64x2_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  double *v76;
  const __int16 *v77;
  int32x4_t v78;
  int64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  int32x4_t v82;
  float64x2_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  float64x2_t v89;
  double *v90;
  double *v91;
  float64x2_t v92;
  float64x2_t v93;
  double *v94;
  uint64_t v95;
  float64x2_t *v96;
  double v97;
  uint64_t *v98;
  double v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  int32x4_t v109;
  float64x2_t v110;
  uint64_t v111;
  float64x2x4_t v112;
  int16x8x4_t v113;
  float64x2x4_t v114;
  float64x2x4_t v115;

  v14 = a13[1];
  if (!v14)
    return result;
  v15 = *a13;
  v16 = *(uint64_t *)a14;
  v17 = *((uint64_t *)a14 + 1);
  v18 = a2 >> 1;
  v19 = a12 >> 3;
  v20 = v14 - 1;
  if ((int)v15 >= 8)
  {
    v23 = (float64x2_t)vdupq_lane_s64(v17, 0);
    v24 = (v15 - 4);
    v25 = (float64x2_t)vdupq_lane_s64(v16, 0);
    v26 = a11 + 2;
    v27 = 8 * v19;
    v28 = 2 * v18;
    v29 = (float64x2_t *)((char *)a11 + 24);
    v30 = (uint64_t)result->i64 + 4;
    while (1)
    {
      v31 = 0;
      v32 = 0;
      v33 = v20;
      v34 = result;
      v35 = v26;
      do
      {
        v36 = *v34++;
        v37 = (int8x16_t)vmovl_s16(*(int16x4_t *)v36.i8);
        v38 = (int8x16_t)vmovl_high_s16(v36);
        v39 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v37.i8)), *(double *)&v16));
        v40 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL))), *(double *)&v16));
        v41 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v38.i8)), *(double *)&v16));
        v42 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL))), *(double *)&v16));
        v35[-2] = v39;
        v35[-1] = v40;
        *v35 = v41;
        v35[1] = v42;
        v35 += 4;
        v32 += 8;
        v31 += 0x800000000;
      }
      while (v32 <= (v15 - 8));
      if ((int)v24 >= (int)v32)
      {
        v43 = 0;
        v44 = (int)v32;
        v45 = &v29->f64[v44];
        v46 = 2 * (int)v32;
        v47 = (_WORD *)(v30 + v46);
        v48 = (uint64_t)a11 + v44 * 8;
        v49 = (uint64_t)result->i64 + v46;
        do
        {
          LOWORD(v42.f64[0]) = *(v47 - 2);
          v50 = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&v42.f64[0]).i32[0] * *(double *)&v16;
          LOWORD(v40.f64[0]) = *(_WORD *)(v49 + 2 * v43 + 2);
          v40.f64[0] = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&v40.f64[0]).i32[0] * *(double *)&v16;
          *(v45 - 3) = v50;
          v51 = v48 + 8 * v43;
          LOWORD(v50) = *v47;
          v42.f64[0] = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&v50).i32[0] * *(double *)&v16;
          LOWORD(v39.f64[0]) = v47[1];
          v39.f64[0] = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&v39.f64[0]).i32[0] * *(double *)&v16;
          *(float64_t *)(v51 + 8) = v40.f64[0];
          *(float64_t *)(v51 + 16) = v42.f64[0];
          *v45 = v39.f64[0];
          v45 += 4;
          v43 += 4;
          v47 += 4;
        }
        while ((int)v32 + v43 <= v24);
        LODWORD(v32) = v32 + v43;
        if ((int)v32 < (int)v15)
        {
LABEL_20:
          v52 = (int)v32;
          v53 = v15 - (int)v32;
          v32 = (int)v32;
          if (v53 < 8)
            goto LABEL_46;
          v32 = (v53 & 0xFFFFFFFFFFFFFFF8) + (int)v32;
          v54 = 2 * v52;
          v55 = 8 * v52;
          v56 = v53 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v57 = *(int16x8_t *)((char *)result + v54);
            v58 = vmovl_high_s16(v57);
            v59.i64[0] = v58.i32[2];
            v59.i64[1] = v58.i32[3];
            v60 = vcvtq_f64_s64(v59);
            v59.i64[0] = v58.i32[0];
            v59.i64[1] = v58.i32[1];
            v61 = vcvtq_f64_s64(v59);
            v62 = vmovl_s16(*(int16x4_t *)v57.i8);
            v59.i64[0] = v62.i32[2];
            v59.i64[1] = v62.i32[3];
            v63 = vcvtq_f64_s64(v59);
            v59.i64[0] = v62.i32[0];
            v59.i64[1] = v62.i32[1];
            v42 = vmlaq_f64(v23, v25, v61);
            v64 = (float64x2_t *)((char *)a11 + v55);
            v64[2] = v42;
            v64[3] = vmlaq_f64(v23, v25, v60);
            *v64 = vmlaq_f64(v23, v25, vcvtq_f64_s64(v59));
            v64[1] = vmlaq_f64(v23, v25, v63);
            v54 += 16;
            v55 += 64;
            v56 -= 8;
          }
          while (v56);
          if (v53 != (v53 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_46:
            do
            {
              LOWORD(v42.f64[0]) = result->i16[v32];
              v42.f64[0] = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&v42.f64[0]).i32[0] * *(double *)&v16;
              a11->f64[v32++] = v42.f64[0];
            }
            while (v15 != v32);
          }
        }
      }
      else if ((int)v32 < (int)v15)
      {
        goto LABEL_20;
      }
      v20 = v33 - 1;
      v26 = (float64x2_t *)((char *)v26 + v27);
      result = (int16x8_t *)((char *)result + v28);
      v29 = (float64x2_t *)((char *)v29 + v27);
      v30 += v28;
      a11 = (float64x2_t *)((char *)a11 + v27);
      if (!v33)
        return result;
    }
  }
  if ((int)v15 >= 4)
  {
    v65 = (v15 - 4);
    v66 = (v65 & 0xFFFFFFFC) + 5;
    if (v66 <= v15)
      v66 = v15;
    v67 = v66 - (v65 & 0xFFFFFFFC) - 4;
    v68 = (v65 >> 2) + 1;
    v69 = (float64x2_t)vdupq_lane_s64(v16, 0);
    v70 = (float64x2_t)vdupq_lane_s64(v17, 0);
    v71 = 2 * v18;
    v72 = 8 * v19;
    while (1)
    {
      v73 = v20;
      if (v65 >= 0x1C)
      {
        v75 = v68 & 0x7FFFFFF8;
        v76 = (double *)a11;
        v77 = (const __int16 *)result;
        do
        {
          v113 = vld4q_s16(v77);
          v77 += 32;
          v78 = vmovl_s16(*(int16x4_t *)v113.val[0].i8);
          v79.i64[0] = v78.i32[0];
          v79.i64[1] = v78.i32[1];
          v80 = vcvtq_f64_s64(v79);
          v79.i64[0] = v78.i32[2];
          v79.i64[1] = v78.i32[3];
          v81 = vcvtq_f64_s64(v79);
          v82 = vmovl_high_s16(v113.val[0]);
          v79.i64[0] = v82.i32[0];
          v79.i64[1] = v82.i32[1];
          v83 = vcvtq_f64_s64(v79);
          v79.i64[0] = v82.i32[2];
          v79.i64[1] = v82.i32[3];
          a7 = (__n128)vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v84 = vmovl_high_s16(v113.val[1]);
          v79.i64[0] = v84.i32[2];
          v79.i64[1] = v84.i32[3];
          a8 = (__n128)vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v85 = vmovl_high_s16(v113.val[2]);
          v86 = vmovl_high_s16(v113.val[3]);
          v114.val[0] = vmlaq_f64(v70, v69, v83);
          v79.i64[0] = v84.i32[0];
          v79.i64[1] = v84.i32[1];
          v114.val[1] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v115.val[0] = vmlaq_f64(v70, v69, v81);
          v87 = vmovl_s16(*(int16x4_t *)v113.val[1].i8);
          v79.i64[0] = v87.i32[2];
          v79.i64[1] = v87.i32[3];
          v115.val[1] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v88 = vmovl_s16(*(int16x4_t *)v113.val[2].i8);
          v79.i64[0] = v88.i32[2];
          v79.i64[1] = v88.i32[3];
          v115.val[2] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v113.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v113.val[3].i8);
          v79.i64[0] = v113.val[0].i32[2];
          v79.i64[1] = v113.val[0].i32[3];
          v115.val[3] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v112.val[0] = vmlaq_f64(v70, v69, v80);
          v79.i64[0] = v87.i32[0];
          v79.i64[1] = v87.i32[1];
          v112.val[1] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v79.i64[0] = v88.i32[0];
          v79.i64[1] = v88.i32[1];
          v112.val[2] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v79.i64[0] = v85.i32[2];
          v79.i64[1] = v85.i32[3];
          v89 = vcvtq_f64_s64(v79);
          v79.i64[0] = v85.i32[0];
          v79.i64[1] = v85.i32[1];
          v113.val[1] = (int16x8_t)vcvtq_f64_s64(v79);
          v79.i64[0] = v113.val[0].i32[0];
          v79.i64[1] = v113.val[0].i32[1];
          v112.val[3] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v90 = v76;
          vst4q_f64(v90, v112);
          v90 += 8;
          vst4q_f64(v90, v115);
          v114.val[2] = vmlaq_f64(v70, v69, (float64x2_t)v113.val[1]);
          v79.i64[0] = v86.i32[0];
          v79.i64[1] = v86.i32[1];
          v114.val[3] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v91 = v76 + 16;
          vst4q_f64(v91, v114);
          v92 = vmlaq_f64(v70, v69, v89);
          v79.i64[0] = v86.i32[2];
          v79.i64[1] = v86.i32[3];
          v93 = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v94 = v76 + 24;
          vst4q_f64(v94, *(float64x2x4_t *)a7.n128_u64);
          v76 += 32;
          v75 -= 8;
        }
        while (v75);
        v74 = 4 * (v68 & 0x7FFFFFF8);
        if (v68 == (v68 & 0x7FFFFFF8))
          goto LABEL_37;
      }
      else
      {
        v74 = 0;
      }
      v95 = 2 * v74 + 6;
      v96 = &a11[v74 / 2];
      do
      {
        a7.n128_u16[0] = *(unsigned __int16 *)((char *)&result->u16[-3] + v95);
        v97 = *(double *)&v17 + (double)vmovl_s16((int16x4_t)a7.n128_u64[0]).i32[0] * *(double *)&v16;
        v98 = &result->i64[v74 / 4];
        a8.n128_u16[0] = *((_WORD *)v98 + 1);
        v99 = *(double *)&v17 + (double)vmovl_s16((int16x4_t)a8.n128_u64[0]).i32[0] * *(double *)&v16;
        v96->f64[0] = v97;
        v96->f64[1] = v99;
        LOWORD(v97) = *((_WORD *)v98 + 2);
        a7.n128_f64[0] = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&v97).i32[0] * *(double *)&v16;
        LOWORD(v99) = *(__int16 *)((char *)result->i16 + v95);
        a8.n128_f64[0] = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&v99).i32[0] * *(double *)&v16;
        *(_QWORD *)&v96[1].f64[0] = a7.n128_u64[0];
        *(_QWORD *)&v96[1].f64[1] = a8.n128_u64[0];
        v74 += 4;
        v95 += 8;
        v96 += 2;
      }
      while (v74 <= v65);
LABEL_37:
      if ((int)v15 > (int)v74)
      {
        v100 = (v65 & 0xFFFFFFFC) + 4;
        if (v67 < 8)
          goto LABEL_47;
        v101 = 32 * (v65 >> 2) + 32;
        v102 = 8 * (v65 >> 2) + 8;
        v103 = v67 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v104 = *(int16x8_t *)((char *)result + v102);
          v105 = vmovl_high_s16(v104);
          v106.i64[0] = v105.i32[2];
          v106.i64[1] = v105.i32[3];
          v107 = vcvtq_f64_s64(v106);
          v106.i64[0] = v105.i32[0];
          v106.i64[1] = v105.i32[1];
          v108 = vcvtq_f64_s64(v106);
          v109 = vmovl_s16(*(int16x4_t *)v104.i8);
          v106.i64[0] = v109.i32[2];
          v106.i64[1] = v109.i32[3];
          v110 = vcvtq_f64_s64(v106);
          v106.i64[0] = v109.i32[0];
          v106.i64[1] = v109.i32[1];
          a7 = (__n128)vmlaq_f64(v70, v69, v108);
          a8 = (__n128)vmlaq_f64(v70, v69, v107);
          v111 = (uint64_t)a11 + v101;
          *(__n128 *)(v111 + 32) = a7;
          *(__n128 *)(v111 + 48) = a8;
          *(float64x2_t *)v111 = vmlaq_f64(v70, v69, vcvtq_f64_s64(v106));
          *(float64x2_t *)(v111 + 16) = vmlaq_f64(v70, v69, v110);
          v102 += 16;
          v101 += 64;
          v103 -= 8;
        }
        while (v103);
        v100 = (v65 & 0xFFFFFFFC) + 4 + (v67 & 0xFFFFFFFFFFFFFFF8);
        if (v67 != (v67 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_47:
          do
          {
            a7.n128_u16[0] = result->u16[v100];
            a7.n128_f64[0] = *(double *)&v17 + (double)vmovl_s16((int16x4_t)a7.n128_u64[0]).i32[0] * *(double *)&v16;
            *(_QWORD *)&a11->f64[v100++] = a7.n128_u64[0];
          }
          while (v100 < v15);
        }
      }
      v20 = v73 - 1;
      result = (int16x8_t *)((char *)result + v71);
      a11 = (float64x2_t *)((char *)a11 + v72);
      if (!v73)
        return result;
    }
  }
  if ((int)v15 >= 1)
  {
    v21 = &result->i16[2];
    f64 = a11[1].f64;
    do
    {
      LOWORD(a5) = *(v21 - 2);
      a5 = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&a5).i32[0] * *(double *)&v16;
      *(f64 - 2) = a5;
      if ((_DWORD)v15 != 1)
      {
        LOWORD(a5) = *(v21 - 1);
        a5 = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&a5).i32[0] * *(double *)&v16;
        *(f64 - 1) = a5;
        if ((_DWORD)v15 != 2)
        {
          LOWORD(a5) = *v21;
          a5 = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&a5).i32[0] * *(double *)&v16;
          *f64 = a5;
        }
      }
      v21 += v18;
      f64 += v19;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_10020F850(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, double *a5, unint64_t a6, unsigned int *a7, double *a8)
{
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int *v15;
  double *v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t v19;
  int32x2_t *v20;
  uint64_t v21;
  float64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  float64x2_t *v28;
  int32x2_t *v29;
  int v30;
  int8x16_t v31;
  float64x2_t v32;
  float64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  float64x2_t *v37;
  uint64_t v38;
  uint64_t v39;
  int64x2_t v40;
  float64x2_t v41;
  uint64_t v42;
  unint64_t v43;
  float64x2_t *v44;
  char *v45;
  unint64_t v46;
  __int128 v47;
  int64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  float64x2_t v56;
  float64x2_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  double *v65;
  const float *v66;
  int64x2_t v67;
  float64x2_t v68;
  double *v69;
  double *v70;
  uint64_t v71;
  double *v72;
  uint64_t v73;
  int v74;
  double v75;
  double v76;
  unint64_t v77;
  uint64_t v78;
  float64x2_t *v79;
  unint64_t v80;
  __int128 v81;
  int64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float32x4x4_t v86;
  float64x2x4_t v87;
  float64x2x4_t v88;

  v8 = a7[1];
  if (!v8)
    return result;
  v9 = *a7;
  v10 = *(uint64_t *)a8;
  v11 = *((uint64_t *)a8 + 1);
  v12 = a2 >> 2;
  v13 = a6 >> 3;
  v14 = v8 - 1;
  if ((int)v9 >= 8)
  {
    v17 = (float64x2_t)vdupq_lane_s64(v11, 0);
    v18 = (v9 - 4);
    v19 = (float64x2_t)vdupq_lane_s64(v10, 0);
    v20 = (int32x2_t *)(result + 16);
    v21 = 4 * v12;
    v22 = (float64x2_t *)(a5 + 4);
    v23 = 8 * v13;
    while (1)
    {
      v24 = 0;
      v25 = 0;
      v26 = v14;
      v27 = 8;
      v28 = v22;
      v29 = v20;
      do
      {
        v30 = v27;
        v31 = *(int8x16_t *)v29[-2].i8;
        v32 = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(*v29)), *(double *)&v10));
        v33 = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v29->i8, *(int8x16_t *)v29->i8, 8uLL))), *(double *)&v10));
        v28[-2] = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v31.i8)), *(double *)&v10));
        v28[-1] = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL))), *(double *)&v10));
        v25 += 8;
        v24 += 0x800000000;
        *v28 = v32;
        v28[1] = v33;
        v28 += 4;
        v29 += 4;
        v27 += 8;
      }
      while (v25 <= (v9 - 8));
      if ((int)v18 >= (int)v25)
      {
        v34 = 0;
        v35 = v30;
        v36 = (uint64_t *)(result + 4 * v30);
        v37 = (float64x2_t *)&a5[v30];
        do
        {
          v38 = *v36;
          v39 = v36[1];
          v36 += 2;
          v40.i64[0] = (int)v38;
          v40.i64[1] = SHIDWORD(v38);
          v41 = vmlaq_f64(v17, v19, vcvtq_f64_s64(v40));
          v40.i64[0] = (int)v39;
          v40.i64[1] = SHIDWORD(v39);
          *v37 = v41;
          v37[1] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v40));
          v37 += 2;
          v34 += 4;
        }
        while (v35 + v34 <= v18);
        LODWORD(v25) = v25 + v34;
        if ((int)v25 < (int)v9)
        {
LABEL_20:
          v42 = (int)v25;
          v43 = v9 - (int)v25;
          v25 = (int)v25;
          if (v43 < 8)
            goto LABEL_46;
          v25 = (v43 & 0xFFFFFFFFFFFFFFF8) + (int)v25;
          v44 = (float64x2_t *)&a5[v42];
          v45 = (char *)v20 + 4 * v42;
          v46 = v43 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v47 = *((_OWORD *)v45 - 1);
            v48.i64[0] = SDWORD2(v47);
            v48.i64[1] = SHIDWORD(v47);
            v49 = vcvtq_f64_s64(v48);
            v48.i64[0] = (int)v47;
            v48.i64[1] = SDWORD1(v47);
            v50 = vcvtq_f64_s64(v48);
            v48.i64[0] = (int)*((_QWORD *)v45 + 1);
            v48.i64[1] = (int)HIDWORD(*(_OWORD *)v45);
            v51 = vcvtq_f64_s64(v48);
            v48.i64[0] = (int)*(_OWORD *)v45;
            v48.i64[1] = (int)HIDWORD(*(_QWORD *)v45);
            *v44 = vmlaq_f64(v17, v19, v50);
            v44[1] = vmlaq_f64(v17, v19, v49);
            v44[2] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v48));
            v44[3] = vmlaq_f64(v17, v19, v51);
            v44 += 4;
            v45 += 32;
            v46 -= 8;
          }
          while (v46);
          if (v43 != (v43 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_46:
            do
            {
              a5[v25] = *(double *)&v11 + (double)*(int *)(result + 4 * v25) * *(double *)&v10;
              ++v25;
            }
            while (v9 != v25);
          }
        }
      }
      else if ((int)v25 < (int)v9)
      {
        goto LABEL_20;
      }
      v14 = v26 - 1;
      v20 = (int32x2_t *)((char *)v20 + v21);
      v22 = (float64x2_t *)((char *)v22 + v23);
      result += v21;
      a5 = (double *)((char *)a5 + v23);
      if (!v26)
        return result;
    }
  }
  if ((int)v9 >= 4)
  {
    v52 = (v9 - 4);
    v53 = (v52 & 0xFFFFFFFC) + 5;
    if (v53 <= v9)
      v53 = v9;
    v54 = v53 - (v52 & 0xFFFFFFFC) - 4;
    v55 = (v52 >> 2) + 1;
    v56 = (float64x2_t)vdupq_lane_s64(v10, 0);
    v57 = (float64x2_t)vdupq_lane_s64(v11, 0);
    v58 = 4 * v12;
    v59 = 8 * v13;
    v60 = (uint64_t)&a5[4 * (v52 >> 2) + 8];
    v61 = result + 16 * (v52 >> 2) + 32;
    while (1)
    {
      v62 = v14;
      if (v52 >= 0xC)
      {
        v64 = v55 & 0x7FFFFFFC;
        v65 = a5;
        v66 = (const float *)result;
        do
        {
          v86 = vld4q_f32(v66);
          v66 += 16;
          v67.i64[0] = v86.val[0].i32[0];
          v67.i64[1] = v86.val[0].i32[1];
          v68 = vcvtq_f64_s64(v67);
          v67.i64[0] = v86.val[0].i32[2];
          v67.i64[1] = v86.val[0].i32[3];
          v87.val[0] = vmlaq_f64(v57, v56, vcvtq_f64_s64(v67));
          v67.i64[0] = v86.val[1].i32[2];
          v67.i64[1] = v86.val[1].i32[3];
          v87.val[1] = vmlaq_f64(v57, v56, vcvtq_f64_s64(v67));
          v67.i64[0] = v86.val[2].i32[2];
          v67.i64[1] = v86.val[2].i32[3];
          v87.val[2] = vmlaq_f64(v57, v56, vcvtq_f64_s64(v67));
          v67.i64[0] = v86.val[3].i32[2];
          v67.i64[1] = v86.val[3].i32[3];
          v87.val[3] = vmlaq_f64(v57, v56, vcvtq_f64_s64(v67));
          v88.val[0] = vmlaq_f64(v57, v56, v68);
          v67.i64[0] = v86.val[1].i32[0];
          v67.i64[1] = v86.val[1].i32[1];
          v88.val[1] = vmlaq_f64(v57, v56, vcvtq_f64_s64(v67));
          v67.i64[0] = v86.val[2].i32[0];
          v67.i64[1] = v86.val[2].i32[1];
          v88.val[2] = vmlaq_f64(v57, v56, vcvtq_f64_s64(v67));
          v67.i64[0] = v86.val[3].i32[0];
          v67.i64[1] = v86.val[3].i32[1];
          v88.val[3] = vmlaq_f64(v57, v56, vcvtq_f64_s64(v67));
          v69 = v65 + 16;
          vst4q_f64(v65, v88);
          v70 = v65 + 8;
          vst4q_f64(v70, v87);
          v65 = v69;
          v64 -= 4;
        }
        while (v64);
        v63 = 4 * (v55 & 0x7FFFFFFC);
        if (v55 == (v55 & 0x7FFFFFFC))
          goto LABEL_37;
      }
      else
      {
        v63 = 0;
      }
      v71 = 4 * v63 + 12;
      v72 = &a5[v63];
      do
      {
        v73 = result + 4 * v63;
        *v72 = *(double *)&v11 + (double)*(int *)(result + v71 - 12) * *(double *)&v10;
        v74 = *(_DWORD *)(v73 + 8);
        v72[1] = *(double *)&v11 + (double)*(int *)(v73 + 4) * *(double *)&v10;
        v75 = *(double *)&v11 + (double)v74 * *(double *)&v10;
        v76 = *(double *)&v11 + (double)*(int *)(result + v71) * *(double *)&v10;
        v72[2] = v75;
        v72[3] = v76;
        v63 += 4;
        v71 += 16;
        v72 += 4;
      }
      while (v63 <= v52);
LABEL_37:
      if ((int)v9 > (int)v63)
      {
        v77 = (v52 & 0xFFFFFFFC) + 4;
        if (v54 < 8)
          goto LABEL_47;
        v78 = v61;
        v79 = (float64x2_t *)v60;
        v80 = v54 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v81 = *(_OWORD *)(v78 - 16);
          v82.i64[0] = SDWORD2(v81);
          v82.i64[1] = SHIDWORD(v81);
          v83 = vcvtq_f64_s64(v82);
          v82.i64[0] = (int)v81;
          v82.i64[1] = SDWORD1(v81);
          v84 = vcvtq_f64_s64(v82);
          v82.i64[0] = (int)*(_QWORD *)(v78 + 8);
          v82.i64[1] = (int)HIDWORD(*(_OWORD *)v78);
          v85 = vcvtq_f64_s64(v82);
          v82.i64[0] = (int)*(_OWORD *)v78;
          v82.i64[1] = (int)HIDWORD(*(_QWORD *)v78);
          v79[-2] = vmlaq_f64(v57, v56, v84);
          v79[-1] = vmlaq_f64(v57, v56, v83);
          *v79 = vmlaq_f64(v57, v56, vcvtq_f64_s64(v82));
          v79[1] = vmlaq_f64(v57, v56, v85);
          v79 += 4;
          v78 += 32;
          v80 -= 8;
        }
        while (v80);
        v77 = (v52 & 0xFFFFFFFC) + 4 + (v54 & 0xFFFFFFFFFFFFFFF8);
        if (v54 != (v54 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_47:
          do
          {
            a5[v77] = *(double *)&v11 + (double)*(int *)(result + 4 * v77) * *(double *)&v10;
            ++v77;
          }
          while (v77 < v9);
        }
      }
      v14 = v62 - 1;
      result += v58;
      a5 = (double *)((char *)a5 + v59);
      v60 += v59;
      v61 += v58;
      if (!v62)
        return result;
    }
  }
  if ((int)v9 >= 1)
  {
    v15 = (int *)(result + 8);
    v16 = a5 + 2;
    do
    {
      *(v16 - 2) = *(double *)&v11 + (double)*(v15 - 2) * *(double *)&v10;
      if ((_DWORD)v9 != 1)
      {
        *(v16 - 1) = *(double *)&v11 + (double)*(v15 - 1) * *(double *)&v10;
        if ((_DWORD)v9 != 2)
          *v16 = *(double *)&v11 + (double)*v15 * *(double *)&v10;
      }
      v15 += v12;
      v16 += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

float32x2_t *sub_10020FD48(float32x2_t *result, unint64_t a2, uint64_t a3, uint64_t a4, double *a5, unint64_t a6, unsigned int *a7, double *a8)
{
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  float *v15;
  double *v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t v19;
  float32x2_t *v20;
  uint64_t v21;
  float64x2_t *v22;
  uint64_t v23;
  float32x2_t *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  float64x2_t *v29;
  float32x2_t *v30;
  int v31;
  float32x4_t v32;
  float64x2_t v33;
  float64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x2_t *v37;
  float64x2_t *v38;
  float32x2_t v39;
  float32x2_t v40;
  uint64_t v41;
  unint64_t v42;
  float64x2_t *v43;
  float32x2_t *v44;
  unint64_t v45;
  float64x2_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  float64x2_t v51;
  float64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  double *v61;
  const float *v62;
  uint64_t v63;
  double *v64;
  float32x2_t *v65;
  float v66;
  double v67;
  double v68;
  unint64_t v69;
  float32x2_t *v70;
  _OWORD *v71;
  unint64_t v72;
  float64x2_t v73;
  float32x2x4_t v74;
  float64x2x4_t v75;

  v8 = a7[1];
  if (!v8)
    return result;
  v9 = *a7;
  v10 = *(uint64_t *)a8;
  v11 = *((uint64_t *)a8 + 1);
  v12 = a2 >> 2;
  v13 = a6 >> 3;
  v14 = v8 - 1;
  if ((int)v9 >= 8)
  {
    v17 = (float64x2_t)vdupq_lane_s64(v11, 0);
    v18 = (v9 - 4);
    v19 = (float64x2_t)vdupq_lane_s64(v10, 0);
    v20 = result + 2;
    v21 = 4 * v12;
    v22 = (float64x2_t *)(a5 + 4);
    v23 = 8 * v13;
    v24 = result + 1;
    while (1)
    {
      v25 = 0;
      v26 = 0;
      v27 = v14;
      v28 = 8;
      v29 = v22;
      v30 = v20;
      do
      {
        v31 = v28;
        v32 = *(float32x4_t *)v30[-2].f32;
        v33 = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(*v30), *(double *)&v10));
        v34 = vaddq_f64(v17, vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v30->f32), *(double *)&v10));
        v29[-2] = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v32.f32), *(double *)&v10));
        v29[-1] = vaddq_f64(v17, vmulq_n_f64(vcvt_hight_f64_f32(v32), *(double *)&v10));
        v26 += 8;
        v25 += 0x800000000;
        *v29 = v33;
        v29[1] = v34;
        v29 += 4;
        v30 += 4;
        v28 += 8;
      }
      while (v26 <= (v9 - 8));
      if ((int)v18 >= (int)v26)
      {
        v35 = 0;
        v36 = v31;
        v37 = (float32x2_t *)((char *)result + 4 * v31);
        v38 = (float64x2_t *)&a5[v31];
        do
        {
          v39 = *v37;
          v40 = v37[1];
          v37 += 2;
          *v38 = vmlaq_f64(v17, v19, vcvtq_f64_f32(v39));
          v38[1] = vmlaq_f64(v17, v19, vcvtq_f64_f32(v40));
          v38 += 2;
          v35 += 4;
        }
        while (v36 + v35 <= v18);
        LODWORD(v26) = v26 + v35;
        if ((int)v26 < (int)v9)
        {
LABEL_20:
          v41 = (int)v26;
          v42 = v9 - (int)v26;
          v26 = (int)v26;
          if (v42 < 4)
            goto LABEL_47;
          v26 = (v42 & 0xFFFFFFFFFFFFFFFCLL) + (int)v26;
          v43 = (float64x2_t *)&a5[v41];
          v44 = (float32x2_t *)((char *)v24 + 4 * v41);
          v45 = v42 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v46 = vmlaq_f64(v17, v19, vcvtq_f64_f32(*v44));
            *v43 = vmlaq_f64(v17, v19, vcvtq_f64_f32(v44[-1]));
            v43[1] = v46;
            v43 += 2;
            v44 += 2;
            v45 -= 4;
          }
          while (v45);
          if (v42 != (v42 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_47:
            do
            {
              a5[v26] = *(double *)&v11 + result->f32[v26] * *(double *)&v10;
              ++v26;
            }
            while (v9 != v26);
          }
        }
      }
      else if ((int)v26 < (int)v9)
      {
        goto LABEL_20;
      }
      v14 = v27 - 1;
      v20 = (float32x2_t *)((char *)v20 + v21);
      v22 = (float64x2_t *)((char *)v22 + v23);
      result = (float32x2_t *)((char *)result + v21);
      a5 = (double *)((char *)a5 + v23);
      v24 = (float32x2_t *)((char *)v24 + v21);
      if (!v27)
        return result;
    }
  }
  if ((int)v9 >= 4)
  {
    v47 = (v9 - 4);
    if ((unint64_t)(v47 & 0xFFFFFFFC) + 5 <= v9)
      v48 = *a7;
    else
      v48 = (v47 & 0xFFFFFFFC) + 5;
    v49 = v48 - (v47 & 0xFFFFFFFC) - 4;
    v50 = (v47 >> 2) + 1;
    v51 = (float64x2_t)vdupq_lane_s64(v10, 0);
    v52 = (float64x2_t)vdupq_lane_s64(v11, 0);
    v53 = v48 & 3;
    v54 = 4 * v12;
    v55 = 8 * v13;
    v56 = (uint64_t)&a5[4 * (v47 >> 2) + 6];
    v57 = (uint64_t)&result[2 * (v47 >> 2) + 3];
    while (1)
    {
      v58 = v14;
      if (v47 >= 4)
      {
        v60 = v50 & 0x7FFFFFFE;
        v61 = a5;
        v62 = (const float *)result;
        do
        {
          v74 = vld4_f32(v62);
          v62 += 8;
          v75.val[0] = vmlaq_f64(v52, v51, vcvtq_f64_f32(v74.val[0]));
          v75.val[1] = vmlaq_f64(v52, v51, vcvtq_f64_f32(v74.val[1]));
          v75.val[2] = vmlaq_f64(v52, v51, vcvtq_f64_f32(v74.val[2]));
          v75.val[3] = vmlaq_f64(v52, v51, vcvtq_f64_f32(v74.val[3]));
          vst4q_f64(v61, v75);
          v61 += 8;
          v60 -= 2;
        }
        while (v60);
        v59 = 4 * (v50 & 0x7FFFFFFE);
        if (v50 == (v50 & 0x7FFFFFFE))
          goto LABEL_38;
      }
      else
      {
        v59 = 0;
      }
      v63 = 4 * v59 + 12;
      v64 = &a5[v59];
      do
      {
        v65 = &result[v59 / 2];
        v66 = v65[1].f32[0];
        v67 = *(double *)&v11 + v65->f32[1] * *(double *)&v10;
        *v64 = *(double *)&v11 + *(float *)((char *)&result[-1] + v63 - 4) * *(double *)&v10;
        v64[1] = v67;
        v68 = *(double *)&v11 + *(float *)((char *)result->f32 + v63) * *(double *)&v10;
        v64[2] = *(double *)&v11 + v66 * *(double *)&v10;
        v64[3] = v68;
        v59 += 4;
        v63 += 16;
        v64 += 4;
      }
      while (v59 <= v47);
LABEL_38:
      if ((int)v9 > (int)v59)
      {
        v69 = (v47 & 0xFFFFFFFC) + 4;
        if (v49 < 4)
          goto LABEL_48;
        v70 = (float32x2_t *)v57;
        v71 = (_OWORD *)v56;
        v72 = v49 - v53;
        do
        {
          v73 = vmlaq_f64(v52, v51, vcvtq_f64_f32(*v70));
          *(v71 - 1) = vmlaq_f64(v52, v51, vcvtq_f64_f32(v70[-1]));
          *v71 = v73;
          v71 += 2;
          v70 += 2;
          v72 -= 4;
        }
        while (v72);
        v69 = (v47 & 0xFFFFFFFC) + 4 + v49 - v53;
        if (v53)
        {
LABEL_48:
          do
          {
            a5[v69] = *(double *)&v11 + result->f32[v69] * *(double *)&v10;
            ++v69;
          }
          while (v69 < v9);
        }
      }
      v14 = v58 - 1;
      result = (float32x2_t *)((char *)result + v54);
      a5 = (double *)((char *)a5 + v55);
      v56 += v55;
      v57 += v54;
      if (!v58)
        return result;
    }
  }
  if ((int)v9 >= 1)
  {
    v15 = (float *)&result[1];
    v16 = a5 + 2;
    do
    {
      *(v16 - 2) = *(double *)&v11 + *(v15 - 2) * *(double *)&v10;
      if ((_DWORD)v9 != 1)
      {
        *(v16 - 1) = *(double *)&v11 + *(v15 - 1) * *(double *)&v10;
        if ((_DWORD)v9 != 2)
          *v16 = *(double *)&v11 + *v15 * *(double *)&v10;
      }
      v15 += v12;
      v16 += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_100210148(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float64x2_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  float64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  float64x2_t v34;
  float64x2_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  float64x2_t v43;
  float64x2_t *v44;

  v8 = a7[1];
  if (!v8)
    return result;
  v9 = *a7;
  v10 = *(uint64_t *)a8;
  v11 = *((uint64_t *)a8 + 1);
  v12 = a2 >> 3;
  v13 = a6 >> 3;
  if ((int)v9 >= 4)
  {
    v17 = 0;
    v18 = v8 - 1;
    v19 = (float64x2_t)vdupq_lane_s64(v11, 0);
    v20 = (v9 - 4);
    v21 = a6 & 0xFFFFFFFFFFFFFFF8;
    v22 = a2 & 0xFFFFFFFFFFFFFFF8;
    v23 = (float64x2_t)vdupq_lane_s64(v10, 0);
    v24 = 8 * v13;
    v25 = 8 * v12;
    v26 = result;
    v27 = a5;
    while (1)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = v18;
      v32 = 4;
      do
      {
        v33 = v32;
        v34 = vaddq_f64(v19, vmulq_n_f64(*(float64x2_t *)(v26 + v28 + 16), *(double *)&v10));
        v35 = (float64x2_t *)(v27 + v28);
        v30 += 4;
        *v35 = vaddq_f64(v19, vmulq_n_f64(*(float64x2_t *)(v26 + v28), *(double *)&v10));
        v35[1] = v34;
        v29 += 0x400000000;
        v28 += 32;
        v32 = v33 + 4;
      }
      while (v30 <= v20);
      if ((int)v20 >= (int)v30)
      {
        v36 = 0;
        v37 = v33;
        v38 = 8 * v33;
        do
        {
          v39 = (float64x2_t *)(v27 + v38);
          *v39 = vmlaq_f64(v19, v23, *(float64x2_t *)(v26 + v38));
          v39[1] = vmlaq_f64(v19, v23, *(float64x2_t *)(v26 + v38 + 16));
          v38 += 32;
          v36 += 4;
        }
        while (v37 + v36 <= (uint64_t)v20);
        LODWORD(v30) = v30 + v36;
        if ((int)v30 < (int)v9)
        {
LABEL_19:
          v30 = (int)v30;
          v40 = v9 - (int)v30;
          if (v40 < 8)
            goto LABEL_28;
          v41 = 8 * (int)v30;
          if (a5 + v21 * v17 - (result + v22 * v17) < 0x20)
            goto LABEL_28;
          v30 = (v40 & 0xFFFFFFFFFFFFFFFCLL) + (int)v30;
          v42 = v40 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v43 = vmlaq_f64(v19, v23, *(float64x2_t *)(v26 + v41 + 16));
            v44 = (float64x2_t *)(v27 + v41);
            *v44 = vmlaq_f64(v19, v23, *(float64x2_t *)(v26 + v41));
            v44[1] = v43;
            v41 += 32;
            v42 -= 4;
          }
          while (v42);
          if (v40 != (v40 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_28:
            do
            {
              *(double *)(v27 + 8 * v30) = *(double *)&v11 + *(double *)(v26 + 8 * v30) * *(double *)&v10;
              ++v30;
            }
            while (v9 != v30);
          }
        }
      }
      else if ((int)v30 < (int)v9)
      {
        goto LABEL_19;
      }
      --v18;
      ++v17;
      v27 += v24;
      v26 += v25;
      if (!v31)
        return result;
    }
  }
  if ((int)v9 >= 1)
  {
    v14 = (double *)(result + 16);
    v15 = (double *)(a5 + 16);
    v16 = 8 * v13;
    do
    {
      *(v15 - 2) = *(double *)&v11 + *(v14 - 2) * *(double *)&v10;
      if ((_DWORD)v9 != 1)
      {
        *(v15 - 1) = *(double *)&v11 + *(v14 - 1) * *(double *)&v10;
        if ((_DWORD)v9 != 2)
          *v15 = *(double *)&v11 + *v14 * *(double *)&v10;
      }
      v14 += v12;
      v15 = (double *)((char *)v15 + v16);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_100210374(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  uint8x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint16x8_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint8x8_t v61;
  uint8x8_t v62;
  uint8x8_t v63;
  uint8x8_t v64;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *(uint8x8_t *)(a4 + result);
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v49 = a5;
      v53 = result;
      v45 = a4;
      v57 = v6;
      v61 = *(uint8x8_t *)(a4 + result);
      v37 = v8;
      v41 = a1;
      v21 = __cxa_guard_acquire(qword_10048AA00);
      v8 = v37;
      a1 = v41;
      *(_QWORD *)&v22 = 0x8000000080000000;
      *((_QWORD *)&v22 + 1) = 0x8000000080000000;
      v11 = v61;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v57;
      a4 = v45;
      a5 = v49;
      v23 = v21;
      result = v53;
      if (v23)
      {
        xmmword_10048A9F0 = v22;
        __cxa_guard_release(qword_10048AA00);
        v8 = v37;
        a1 = v41;
        v11 = v61;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v57;
        a4 = v45;
        a5 = v49;
        result = v53;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v50 = a5;
      v54 = result;
      v46 = a4;
      v58 = v6;
      v62 = v11;
      v38 = v8;
      v42 = a1;
      v24 = __cxa_guard_acquire(qword_10048AA20);
      v8 = v38;
      a1 = v42;
      *(_QWORD *)&v25 = 0x3F0000003F000000;
      *((_QWORD *)&v25 + 1) = 0x3F0000003F000000;
      v11 = v62;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v58;
      a4 = v46;
      a5 = v50;
      v26 = v24;
      result = v54;
      if (v26)
      {
        xmmword_10048AA10 = v25;
        __cxa_guard_release(qword_10048AA20);
        v8 = v38;
        a1 = v42;
        v11 = v62;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v58;
        a4 = v46;
        a5 = v50;
        result = v54;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v51 = a5;
      v55 = result;
      v47 = a4;
      v59 = v6;
      v63 = v11;
      v39 = v8;
      v43 = a1;
      v33 = v9[159];
      v35 = v10[161];
      v27 = __cxa_guard_acquire(qword_10048AA00);
      v15 = v33;
      v14 = v35;
      v8 = v39;
      a1 = v43;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      v11 = v63;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v59;
      a4 = v47;
      a5 = v51;
      v29 = v27;
      result = v55;
      if (v29)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        v15 = v33;
        v14 = v35;
        v8 = v39;
        a1 = v43;
        v11 = v63;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v59;
        a4 = v47;
        a5 = v51;
        result = v55;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v52 = a5;
      v56 = result;
      v48 = a4;
      v60 = v6;
      v64 = v11;
      v40 = v8;
      v44 = a1;
      v34 = v15;
      v36 = v14;
      v30 = __cxa_guard_acquire(qword_10048AA20);
      v15 = v34;
      v14 = v36;
      v8 = v40;
      a1 = v44;
      *(_QWORD *)&v31 = 0x3F0000003F000000;
      *((_QWORD *)&v31 + 1) = 0x3F0000003F000000;
      v11 = v64;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a4 = v48;
      a5 = v52;
      v32 = v30;
      result = v56;
      if (v32)
      {
        xmmword_10048AA10 = v31;
        __cxa_guard_release(qword_10048AA20);
        v15 = v34;
        v14 = v36;
        v8 = v40;
        a1 = v44;
        v11 = v64;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v60;
        a4 = v48;
        a5 = v52;
        result = v56;
      }
    }
    v18 = vmovl_u8(v11);
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v18.i8)), a1.n128_f32[0]));
    v20 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v18)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v19), v14)))), vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v20), v10[161])))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_1002106CC(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int16x8_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int8x8_t v61;
  int8x8_t v62;
  int8x8_t v63;
  int8x8_t v64;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *(int8x8_t *)(a4 + result);
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v49 = a5;
      v53 = result;
      v45 = a4;
      v57 = v6;
      v61 = *(int8x8_t *)(a4 + result);
      v37 = v8;
      v41 = a1;
      v21 = __cxa_guard_acquire(qword_10048AA00);
      v8 = v37;
      a1 = v41;
      *(_QWORD *)&v22 = 0x8000000080000000;
      *((_QWORD *)&v22 + 1) = 0x8000000080000000;
      v11 = v61;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v57;
      a4 = v45;
      a5 = v49;
      v23 = v21;
      result = v53;
      if (v23)
      {
        xmmword_10048A9F0 = v22;
        __cxa_guard_release(qword_10048AA00);
        v8 = v37;
        a1 = v41;
        v11 = v61;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v57;
        a4 = v45;
        a5 = v49;
        result = v53;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v50 = a5;
      v54 = result;
      v46 = a4;
      v58 = v6;
      v62 = v11;
      v38 = v8;
      v42 = a1;
      v24 = __cxa_guard_acquire(qword_10048AA20);
      v8 = v38;
      a1 = v42;
      *(_QWORD *)&v25 = 0x3F0000003F000000;
      *((_QWORD *)&v25 + 1) = 0x3F0000003F000000;
      v11 = v62;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v58;
      a4 = v46;
      a5 = v50;
      v26 = v24;
      result = v54;
      if (v26)
      {
        xmmword_10048AA10 = v25;
        __cxa_guard_release(qword_10048AA20);
        v8 = v38;
        a1 = v42;
        v11 = v62;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v58;
        a4 = v46;
        a5 = v50;
        result = v54;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v51 = a5;
      v55 = result;
      v47 = a4;
      v59 = v6;
      v63 = v11;
      v39 = v8;
      v43 = a1;
      v33 = v9[159];
      v35 = v10[161];
      v27 = __cxa_guard_acquire(qword_10048AA00);
      v15 = v33;
      v14 = v35;
      v8 = v39;
      a1 = v43;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      v11 = v63;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v59;
      a4 = v47;
      a5 = v51;
      v29 = v27;
      result = v55;
      if (v29)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        v15 = v33;
        v14 = v35;
        v8 = v39;
        a1 = v43;
        v11 = v63;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v59;
        a4 = v47;
        a5 = v51;
        result = v55;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v52 = a5;
      v56 = result;
      v48 = a4;
      v60 = v6;
      v64 = v11;
      v40 = v8;
      v44 = a1;
      v34 = v15;
      v36 = v14;
      v30 = __cxa_guard_acquire(qword_10048AA20);
      v15 = v34;
      v14 = v36;
      v8 = v40;
      a1 = v44;
      *(_QWORD *)&v31 = 0x3F0000003F000000;
      *((_QWORD *)&v31 + 1) = 0x3F0000003F000000;
      v11 = v64;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a4 = v48;
      a5 = v52;
      v32 = v30;
      result = v56;
      if (v32)
      {
        xmmword_10048AA10 = v31;
        __cxa_guard_release(qword_10048AA20);
        v15 = v34;
        v14 = v36;
        v8 = v40;
        a1 = v44;
        v11 = v64;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v60;
        a4 = v48;
        a5 = v52;
        result = v56;
      }
    }
    v18 = vmovl_s8(v11);
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v18.i8)), a1.n128_f32[0]));
    v20 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v18)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v19), v14)))), vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v20), v10[161])))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100210A24(__n128 a1, int32x2_t a2, uint64_t a3, uint16x8_t *a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  uint16x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  __int128 v21;
  int v22;
  int v23;
  __int128 v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  uint16x8_t *v48;
  uint16x8_t *v49;
  uint16x8_t *v50;
  uint16x8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *a4;
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v52 = a5;
      v56 = result;
      v48 = a4;
      v60 = v6;
      v44 = a1;
      v36 = *a4;
      v40 = v8;
      v20 = __cxa_guard_acquire(qword_10048AA00);
      v11 = v36;
      v8 = v40;
      *(_QWORD *)&v21 = 0x8000000080000000;
      *((_QWORD *)&v21 + 1) = 0x8000000080000000;
      a1 = v44;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a4 = v48;
      a5 = v52;
      v22 = v20;
      result = v56;
      if (v22)
      {
        xmmword_10048A9F0 = v21;
        __cxa_guard_release(qword_10048AA00);
        v11 = v36;
        v8 = v40;
        a1 = v44;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v60;
        a4 = v48;
        a5 = v52;
        result = v56;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v53 = a5;
      v57 = result;
      v49 = a4;
      v61 = v6;
      v45 = a1;
      v37 = v11;
      v41 = v8;
      v23 = __cxa_guard_acquire(qword_10048AA20);
      v11 = v37;
      v8 = v41;
      *(_QWORD *)&v24 = 0x3F0000003F000000;
      *((_QWORD *)&v24 + 1) = 0x3F0000003F000000;
      a1 = v45;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v61;
      a4 = v49;
      a5 = v53;
      v25 = v23;
      result = v57;
      if (v25)
      {
        xmmword_10048AA10 = v24;
        __cxa_guard_release(qword_10048AA20);
        v11 = v37;
        v8 = v41;
        a1 = v45;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v61;
        a4 = v49;
        a5 = v53;
        result = v57;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v54 = a5;
      v58 = result;
      v50 = a4;
      v62 = v6;
      v46 = a1;
      v38 = v11;
      v42 = v8;
      v32 = v9[159];
      v34 = v10[161];
      v26 = __cxa_guard_acquire(qword_10048AA00);
      v15 = v32;
      v14 = v34;
      v11 = v38;
      v8 = v42;
      *(_QWORD *)&v27 = 0x8000000080000000;
      *((_QWORD *)&v27 + 1) = 0x8000000080000000;
      a1 = v46;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v62;
      a4 = v50;
      a5 = v54;
      v28 = v26;
      result = v58;
      if (v28)
      {
        xmmword_10048A9F0 = v27;
        __cxa_guard_release(qword_10048AA00);
        v15 = v32;
        v14 = v34;
        v11 = v38;
        v8 = v42;
        a1 = v46;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v62;
        a4 = v50;
        a5 = v54;
        result = v58;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v55 = a5;
      v59 = result;
      v51 = a4;
      v63 = v6;
      v47 = a1;
      v39 = v11;
      v43 = v8;
      v33 = v15;
      v35 = v14;
      v29 = __cxa_guard_acquire(qword_10048AA20);
      v15 = v33;
      v14 = v35;
      v11 = v39;
      v8 = v43;
      *(_QWORD *)&v30 = 0x3F0000003F000000;
      *((_QWORD *)&v30 + 1) = 0x3F0000003F000000;
      a1 = v47;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v63;
      a4 = v51;
      a5 = v55;
      v31 = v29;
      result = v59;
      if (v31)
      {
        xmmword_10048AA10 = v30;
        __cxa_guard_release(qword_10048AA20);
        v15 = v33;
        v14 = v35;
        v11 = v39;
        v8 = v43;
        a1 = v47;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v63;
        a4 = v51;
        a5 = v55;
        result = v59;
      }
    }
    v18 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v11.i8)), a1.n128_f32[0]));
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v11)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v18), v14)))), vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v19), v10[161])))));
    result += 8;
    ++a4;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100210D7C(__n128 a1, int32x2_t a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int16x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  __int128 v21;
  int v22;
  int v23;
  __int128 v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  int16x8_t *v48;
  int16x8_t *v49;
  int16x8_t *v50;
  int16x8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *a4;
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v52 = a5;
      v56 = result;
      v48 = a4;
      v60 = v6;
      v44 = a1;
      v36 = *a4;
      v40 = v8;
      v20 = __cxa_guard_acquire(qword_10048AA00);
      v11 = v36;
      v8 = v40;
      *(_QWORD *)&v21 = 0x8000000080000000;
      *((_QWORD *)&v21 + 1) = 0x8000000080000000;
      a1 = v44;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a4 = v48;
      a5 = v52;
      v22 = v20;
      result = v56;
      if (v22)
      {
        xmmword_10048A9F0 = v21;
        __cxa_guard_release(qword_10048AA00);
        v11 = v36;
        v8 = v40;
        a1 = v44;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v60;
        a4 = v48;
        a5 = v52;
        result = v56;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v53 = a5;
      v57 = result;
      v49 = a4;
      v61 = v6;
      v45 = a1;
      v37 = v11;
      v41 = v8;
      v23 = __cxa_guard_acquire(qword_10048AA20);
      v11 = v37;
      v8 = v41;
      *(_QWORD *)&v24 = 0x3F0000003F000000;
      *((_QWORD *)&v24 + 1) = 0x3F0000003F000000;
      a1 = v45;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v61;
      a4 = v49;
      a5 = v53;
      v25 = v23;
      result = v57;
      if (v25)
      {
        xmmword_10048AA10 = v24;
        __cxa_guard_release(qword_10048AA20);
        v11 = v37;
        v8 = v41;
        a1 = v45;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v61;
        a4 = v49;
        a5 = v53;
        result = v57;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v54 = a5;
      v58 = result;
      v50 = a4;
      v62 = v6;
      v46 = a1;
      v38 = v11;
      v42 = v8;
      v32 = v9[159];
      v34 = v10[161];
      v26 = __cxa_guard_acquire(qword_10048AA00);
      v15 = v32;
      v14 = v34;
      v11 = v38;
      v8 = v42;
      *(_QWORD *)&v27 = 0x8000000080000000;
      *((_QWORD *)&v27 + 1) = 0x8000000080000000;
      a1 = v46;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v62;
      a4 = v50;
      a5 = v54;
      v28 = v26;
      result = v58;
      if (v28)
      {
        xmmword_10048A9F0 = v27;
        __cxa_guard_release(qword_10048AA00);
        v15 = v32;
        v14 = v34;
        v11 = v38;
        v8 = v42;
        a1 = v46;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v62;
        a4 = v50;
        a5 = v54;
        result = v58;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v55 = a5;
      v59 = result;
      v51 = a4;
      v63 = v6;
      v47 = a1;
      v39 = v11;
      v43 = v8;
      v33 = v15;
      v35 = v14;
      v29 = __cxa_guard_acquire(qword_10048AA20);
      v15 = v33;
      v14 = v35;
      v11 = v39;
      v8 = v43;
      *(_QWORD *)&v30 = 0x3F0000003F000000;
      *((_QWORD *)&v30 + 1) = 0x3F0000003F000000;
      a1 = v47;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v63;
      a4 = v51;
      a5 = v55;
      v31 = v29;
      result = v59;
      if (v31)
      {
        xmmword_10048AA10 = v30;
        __cxa_guard_release(qword_10048AA20);
        v15 = v33;
        v14 = v35;
        v11 = v39;
        v8 = v43;
        a1 = v47;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v63;
        a4 = v51;
        a5 = v55;
        result = v59;
      }
    }
    v18 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v11.i8)), a1.n128_f32[0]));
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v11)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v18), v14)))), vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v19), v10[161])))));
    result += 8;
    ++a4;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_1002110D4(__n128 a1, int32x2_t a2, uint64_t a3, int32x4_t *a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int32x4_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int32x4_t v12;
  int32x4_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  int8x16_t v16;
  int8x16_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  float32x4_t v20;
  float32x4_t v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  __int128 v26;
  int v27;
  int v28;
  __int128 v29;
  int v30;
  int v31;
  __int128 v32;
  int v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int32x4_t *v66;
  int32x4_t *v67;
  int32x4_t *v68;
  int32x4_t *v69;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = a4 + 1;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v13 = v9[-1];
    v12 = *v9;
    v14 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v14 & 1) == 0)
    {
      v62 = result;
      v66 = v9;
      v54 = a5;
      v58 = v6;
      v50 = a1;
      v42 = *v9;
      v46 = v8;
      v38 = v9[-1];
      v22 = __cxa_guard_acquire(qword_10048AA00);
      v13 = v38;
      v12 = v42;
      *(_QWORD *)&v23 = 0x8000000080000000;
      *((_QWORD *)&v23 + 1) = 0x8000000080000000;
      v8 = v46;
      a1 = v50;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v58;
      a5 = v54;
      v24 = v22;
      result = v62;
      v9 = v66;
      if (v24)
      {
        xmmword_10048A9F0 = v23;
        __cxa_guard_release(qword_10048AA00);
        v13 = v38;
        v12 = v42;
        v8 = v46;
        a1 = v50;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v62;
        v9 = v66;
        v6 = v58;
        a5 = v54;
      }
    }
    v15 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v15 & 1) == 0)
    {
      v63 = result;
      v67 = v9;
      v55 = a5;
      v59 = v6;
      v51 = a1;
      v43 = v12;
      v47 = v8;
      v39 = v13;
      v25 = __cxa_guard_acquire(qword_10048AA20);
      v13 = v39;
      v12 = v43;
      v8 = v47;
      *(_QWORD *)&v26 = 0x3F0000003F000000;
      *((_QWORD *)&v26 + 1) = 0x3F0000003F000000;
      a1 = v51;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v59;
      a5 = v55;
      v27 = v25;
      result = v63;
      v9 = v67;
      if (v27)
      {
        xmmword_10048AA10 = v26;
        __cxa_guard_release(qword_10048AA20);
        v13 = v39;
        v12 = v43;
        v8 = v47;
        a1 = v51;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v63;
        v9 = v67;
        v6 = v59;
        a5 = v55;
      }
    }
    v16 = v11[161];
    v17 = v10[159];
    v18 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v18 & 1) == 0)
    {
      v64 = result;
      v68 = v9;
      v56 = a5;
      v60 = v6;
      v52 = a1;
      v44 = v12;
      v48 = v8;
      v36 = v11[161];
      v40 = v13;
      v34 = v10[159];
      v28 = __cxa_guard_acquire(qword_10048AA00);
      v17 = v34;
      v16 = v36;
      v13 = v40;
      v12 = v44;
      *(_QWORD *)&v29 = 0x8000000080000000;
      *((_QWORD *)&v29 + 1) = 0x8000000080000000;
      v8 = v48;
      a1 = v52;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a5 = v56;
      v30 = v28;
      result = v64;
      v9 = v68;
      if (v30)
      {
        xmmword_10048A9F0 = v29;
        __cxa_guard_release(qword_10048AA00);
        v17 = v34;
        v16 = v36;
        v13 = v40;
        v12 = v44;
        v8 = v48;
        a1 = v52;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v64;
        v9 = v68;
        v6 = v60;
        a5 = v56;
      }
    }
    v19 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v19 & 1) == 0)
    {
      v65 = result;
      v69 = v9;
      v57 = a5;
      v61 = v6;
      v53 = a1;
      v45 = v12;
      v49 = v8;
      v37 = v16;
      v41 = v13;
      v35 = v17;
      v31 = __cxa_guard_acquire(qword_10048AA20);
      v17 = v35;
      v16 = v37;
      v13 = v41;
      v12 = v45;
      v8 = v49;
      *(_QWORD *)&v32 = 0x3F0000003F000000;
      *((_QWORD *)&v32 + 1) = 0x3F0000003F000000;
      a1 = v53;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v61;
      a5 = v57;
      v33 = v31;
      result = v65;
      v9 = v69;
      if (v33)
      {
        xmmword_10048AA10 = v32;
        __cxa_guard_release(qword_10048AA20);
        v17 = v35;
        v16 = v37;
        v13 = v41;
        v12 = v45;
        v8 = v49;
        a1 = v53;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v65;
        v9 = v69;
        v6 = v61;
        a5 = v57;
      }
    }
    v20 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v13), a1.n128_f32[0]));
    v21 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v12), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v20), v16)))), vcvtq_s32_f32(vaddq_f32(v21, (float32x4_t)vorrq_s8(vandq_s8(v10[159], (int8x16_t)v21), v11[161])))));
    result += 8;
    v9 += 2;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100211458(__n128 a1, int32x2_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  float32x4_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  int8x16_t v16;
  int8x16_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  float32x4_t v20;
  float32x4_t v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  __int128 v26;
  int v27;
  int v28;
  __int128 v29;
  int v30;
  int v31;
  __int128 v32;
  int v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t *v66;
  float32x4_t *v67;
  float32x4_t *v68;
  float32x4_t *v69;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = a4 + 1;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v12 = v9[-1];
    v13 = *v9;
    v14 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v14 & 1) == 0)
    {
      v62 = result;
      v66 = v9;
      v54 = a5;
      v58 = v6;
      v50 = a1;
      v42 = v9[-1];
      v46 = v8;
      v38 = *v9;
      v22 = __cxa_guard_acquire(qword_10048AA00);
      v13 = v38;
      v12 = v42;
      *(_QWORD *)&v23 = 0x8000000080000000;
      *((_QWORD *)&v23 + 1) = 0x8000000080000000;
      v8 = v46;
      a1 = v50;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v58;
      a5 = v54;
      v24 = v22;
      result = v62;
      v9 = v66;
      if (v24)
      {
        xmmword_10048A9F0 = v23;
        __cxa_guard_release(qword_10048AA00);
        v13 = v38;
        v12 = v42;
        v8 = v46;
        a1 = v50;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v62;
        v9 = v66;
        v6 = v58;
        a5 = v54;
      }
    }
    v15 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v15 & 1) == 0)
    {
      v63 = result;
      v67 = v9;
      v55 = a5;
      v59 = v6;
      v51 = a1;
      v43 = v12;
      v47 = v8;
      v39 = v13;
      v25 = __cxa_guard_acquire(qword_10048AA20);
      v13 = v39;
      v12 = v43;
      v8 = v47;
      a1 = v51;
      *(_QWORD *)&v26 = 0x3F0000003F000000;
      *((_QWORD *)&v26 + 1) = 0x3F0000003F000000;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v59;
      a5 = v55;
      v27 = v25;
      result = v63;
      v9 = v67;
      if (v27)
      {
        xmmword_10048AA10 = v26;
        __cxa_guard_release(qword_10048AA20);
        v13 = v39;
        v12 = v43;
        v8 = v47;
        a1 = v51;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v63;
        v9 = v67;
        v6 = v59;
        a5 = v55;
      }
    }
    v16 = v11[161];
    v17 = v10[159];
    v18 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v18 & 1) == 0)
    {
      v64 = result;
      v68 = v9;
      v56 = a5;
      v60 = v6;
      v52 = a1;
      v44 = v12;
      v48 = v8;
      v36 = v11[161];
      v40 = v13;
      v34 = v10[159];
      v28 = __cxa_guard_acquire(qword_10048AA00);
      v17 = v34;
      v16 = v36;
      v13 = v40;
      v12 = v44;
      *(_QWORD *)&v29 = 0x8000000080000000;
      *((_QWORD *)&v29 + 1) = 0x8000000080000000;
      v8 = v48;
      a1 = v52;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a5 = v56;
      v30 = v28;
      result = v64;
      v9 = v68;
      if (v30)
      {
        xmmword_10048A9F0 = v29;
        __cxa_guard_release(qword_10048AA00);
        v17 = v34;
        v16 = v36;
        v13 = v40;
        v12 = v44;
        v8 = v48;
        a1 = v52;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v64;
        v9 = v68;
        v6 = v60;
        a5 = v56;
      }
    }
    v19 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v19 & 1) == 0)
    {
      v65 = result;
      v69 = v9;
      v57 = a5;
      v61 = v6;
      v53 = a1;
      v45 = v12;
      v49 = v8;
      v37 = v16;
      v41 = v13;
      v35 = v17;
      v31 = __cxa_guard_acquire(qword_10048AA20);
      v17 = v35;
      v16 = v37;
      v13 = v41;
      v12 = v45;
      v8 = v49;
      a1 = v53;
      *(_QWORD *)&v32 = 0x3F0000003F000000;
      *((_QWORD *)&v32 + 1) = 0x3F0000003F000000;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v61;
      a5 = v57;
      v33 = v31;
      result = v65;
      v9 = v69;
      if (v33)
      {
        xmmword_10048AA10 = v32;
        __cxa_guard_release(qword_10048AA20);
        v17 = v35;
        v16 = v37;
        v13 = v41;
        v12 = v45;
        v8 = v49;
        a1 = v53;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v65;
        v9 = v69;
        v6 = v61;
        a5 = v57;
      }
    }
    v20 = vaddq_f32(v8, vmulq_n_f32(v12, a1.n128_f32[0]));
    v21 = vaddq_f32(v8, vmulq_n_f32(v13, a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v20), v16)))), vcvtq_s32_f32(vaddq_f32(v21, (float32x4_t)vorrq_s8(vandq_s8(v10[159], (int8x16_t)v21), v11[161])))));
    result += 8;
    v9 += 2;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_1002117D4(float a1, float a2, double a3, double a4, double a5, __n128 a6, uint64_t a7, float64x2_t *a8, uint64_t a9, int a10)
{
  int v10;
  uint64_t result;
  float64x2_t v12;
  float64x2_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  float32x4_t v26;
  float32x4_t v27;
  int v28;
  __int128 v29;
  int v30;
  int v31;
  __int128 v32;
  int v33;
  int v34;
  __int128 v35;
  int v36;
  int v37;
  __int128 v38;
  int v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float64x2_t *v80;
  float64x2_t *v81;
  float64x2_t *v82;
  float64x2_t *v83;

  v10 = a10 - 8;
  if (a10 < 8)
    return 0;
  result = 0;
  v12 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2), 0);
  a6.n128_f64[0] = a1;
  v13 = a8 + 2;
  v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v16 = v13[-2];
    v17 = v13[-1];
    v18 = *v13;
    v19 = v13[1];
    v20 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v20 & 1) == 0)
    {
      v76 = result;
      v80 = v13;
      v68 = a9;
      v72 = v10;
      v60 = a6;
      v64 = v12;
      v52 = v13[-1];
      v56 = v13[-2];
      v44 = v13[1];
      v48 = *v13;
      v28 = __cxa_guard_acquire(qword_10048AA00);
      v19 = v44;
      v18 = v48;
      v17 = v52;
      v16 = v56;
      *(_QWORD *)&v29 = 0x8000000080000000;
      *((_QWORD *)&v29 + 1) = 0x8000000080000000;
      a6 = v60;
      v12 = v64;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = v72;
      a9 = v68;
      v30 = v28;
      result = v76;
      v13 = v80;
      if (v30)
      {
        xmmword_10048A9F0 = v29;
        __cxa_guard_release(qword_10048AA00);
        v19 = v44;
        v18 = v48;
        v17 = v52;
        v16 = v56;
        a6 = v60;
        v12 = v64;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v76;
        v13 = v80;
        v10 = v72;
        a9 = v68;
      }
    }
    v21 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v21 & 1) == 0)
    {
      v77 = result;
      v81 = v13;
      v69 = a9;
      v73 = v10;
      v61 = a6;
      v65 = v12;
      v53 = v17;
      v57 = v16;
      v45 = v19;
      v49 = v18;
      v31 = __cxa_guard_acquire(qword_10048AA20);
      v19 = v45;
      v18 = v49;
      v17 = v53;
      v16 = v57;
      a6 = v61;
      v12 = v65;
      *(_QWORD *)&v32 = 0x3F0000003F000000;
      *((_QWORD *)&v32 + 1) = 0x3F0000003F000000;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = v73;
      a9 = v69;
      v33 = v31;
      result = v77;
      v13 = v81;
      if (v33)
      {
        xmmword_10048AA10 = v32;
        __cxa_guard_release(qword_10048AA20);
        v19 = v45;
        v18 = v49;
        v17 = v53;
        v16 = v57;
        a6 = v61;
        v12 = v65;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v77;
        v13 = v81;
        v10 = v73;
        a9 = v69;
      }
    }
    v22 = v15[161];
    v23 = v14[159];
    v24 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v24 & 1) == 0)
    {
      v78 = result;
      v82 = v13;
      v70 = a9;
      v74 = v10;
      v62 = a6;
      v66 = v12;
      v54 = v17;
      v58 = v16;
      v46 = v19;
      v50 = v18;
      v40 = v14[159];
      v42 = v15[161];
      v34 = __cxa_guard_acquire(qword_10048AA00);
      v23 = v40;
      v22 = v42;
      v19 = v46;
      v18 = v50;
      v17 = v54;
      v16 = v58;
      *(_QWORD *)&v35 = 0x8000000080000000;
      *((_QWORD *)&v35 + 1) = 0x8000000080000000;
      a6 = v62;
      v12 = v66;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = v74;
      a9 = v70;
      v36 = v34;
      result = v78;
      v13 = v82;
      if (v36)
      {
        xmmword_10048A9F0 = v35;
        __cxa_guard_release(qword_10048AA00);
        v23 = v40;
        v22 = v42;
        v19 = v46;
        v18 = v50;
        v17 = v54;
        v16 = v58;
        a6 = v62;
        v12 = v66;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v78;
        v13 = v82;
        v10 = v74;
        a9 = v70;
      }
    }
    v25 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v25 & 1) == 0)
    {
      v79 = result;
      v83 = v13;
      v71 = a9;
      v75 = v10;
      v63 = a6;
      v67 = v12;
      v55 = v17;
      v59 = v16;
      v47 = v19;
      v51 = v18;
      v41 = v23;
      v43 = v22;
      v37 = __cxa_guard_acquire(qword_10048AA20);
      v23 = v41;
      v22 = v43;
      v19 = v47;
      v18 = v51;
      v17 = v55;
      v16 = v59;
      a6 = v63;
      v12 = v67;
      *(_QWORD *)&v38 = 0x3F0000003F000000;
      *((_QWORD *)&v38 + 1) = 0x3F0000003F000000;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = v75;
      a9 = v71;
      v39 = v37;
      result = v79;
      v13 = v83;
      if (v39)
      {
        xmmword_10048AA10 = v38;
        __cxa_guard_release(qword_10048AA20);
        v23 = v41;
        v22 = v43;
        v19 = v47;
        v18 = v51;
        v17 = v55;
        v16 = v59;
        a6 = v63;
        v12 = v67;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v79;
        v13 = v83;
        v10 = v75;
        a9 = v71;
      }
    }
    v26 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v16, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v17, a6.n128_f64[0])));
    v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v18, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v19, a6.n128_f64[0])));
    *(int8x8_t *)(a9 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v26, (float32x4_t)vorrq_s8(vandq_s8(v23, (int8x16_t)v26), v22)))), vcvtq_s32_f32(vaddq_f32(v27, (float32x4_t)vorrq_s8(vandq_s8(v14[159], (int8x16_t)v27), v15[161])))));
    result += 8;
    v13 += 4;
  }
  while (v10 >= (int)result);
  return result;
}

uint64_t sub_100211B7C(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  uint8x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint16x8_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint8x8_t v61;
  uint8x8_t v62;
  uint8x8_t v63;
  uint8x8_t v64;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *(uint8x8_t *)(a4 + result);
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v49 = a5;
      v53 = result;
      v45 = a4;
      v57 = v6;
      v61 = *(uint8x8_t *)(a4 + result);
      v37 = v8;
      v41 = a1;
      v21 = __cxa_guard_acquire(qword_10048AA00);
      v8 = v37;
      a1 = v41;
      *(_QWORD *)&v22 = 0x8000000080000000;
      *((_QWORD *)&v22 + 1) = 0x8000000080000000;
      v11 = v61;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v57;
      a4 = v45;
      a5 = v49;
      v23 = v21;
      result = v53;
      if (v23)
      {
        xmmword_10048A9F0 = v22;
        __cxa_guard_release(qword_10048AA00);
        v8 = v37;
        a1 = v41;
        v11 = v61;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v57;
        a4 = v45;
        a5 = v49;
        result = v53;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v50 = a5;
      v54 = result;
      v46 = a4;
      v58 = v6;
      v62 = v11;
      v38 = v8;
      v42 = a1;
      v24 = __cxa_guard_acquire(qword_10048AA20);
      v8 = v38;
      a1 = v42;
      *(_QWORD *)&v25 = 0x3F0000003F000000;
      *((_QWORD *)&v25 + 1) = 0x3F0000003F000000;
      v11 = v62;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v58;
      a4 = v46;
      a5 = v50;
      v26 = v24;
      result = v54;
      if (v26)
      {
        xmmword_10048AA10 = v25;
        __cxa_guard_release(qword_10048AA20);
        v8 = v38;
        a1 = v42;
        v11 = v62;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v58;
        a4 = v46;
        a5 = v50;
        result = v54;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v51 = a5;
      v55 = result;
      v47 = a4;
      v59 = v6;
      v63 = v11;
      v39 = v8;
      v43 = a1;
      v33 = v9[159];
      v35 = v10[161];
      v27 = __cxa_guard_acquire(qword_10048AA00);
      v15 = v33;
      v14 = v35;
      v8 = v39;
      a1 = v43;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      v11 = v63;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v59;
      a4 = v47;
      a5 = v51;
      v29 = v27;
      result = v55;
      if (v29)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        v15 = v33;
        v14 = v35;
        v8 = v39;
        a1 = v43;
        v11 = v63;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v59;
        a4 = v47;
        a5 = v51;
        result = v55;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v52 = a5;
      v56 = result;
      v48 = a4;
      v60 = v6;
      v64 = v11;
      v40 = v8;
      v44 = a1;
      v34 = v15;
      v36 = v14;
      v30 = __cxa_guard_acquire(qword_10048AA20);
      v15 = v34;
      v14 = v36;
      v8 = v40;
      a1 = v44;
      *(_QWORD *)&v31 = 0x3F0000003F000000;
      *((_QWORD *)&v31 + 1) = 0x3F0000003F000000;
      v11 = v64;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a4 = v48;
      a5 = v52;
      v32 = v30;
      result = v56;
      if (v32)
      {
        xmmword_10048AA10 = v31;
        __cxa_guard_release(qword_10048AA20);
        v15 = v34;
        v14 = v36;
        v8 = v40;
        a1 = v44;
        v11 = v64;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v60;
        a4 = v48;
        a5 = v52;
        result = v56;
      }
    }
    v18 = vmovl_u8(v11);
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v18.i8)), a1.n128_f32[0]));
    v20 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v18)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v19), v14)))), vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v20), v10[161])))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100211ED4(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int16x8_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int8x8_t v61;
  int8x8_t v62;
  int8x8_t v63;
  int8x8_t v64;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *(int8x8_t *)(a4 + result);
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v49 = a5;
      v53 = result;
      v45 = a4;
      v57 = v6;
      v61 = *(int8x8_t *)(a4 + result);
      v37 = v8;
      v41 = a1;
      v21 = __cxa_guard_acquire(qword_10048AA00);
      v8 = v37;
      a1 = v41;
      *(_QWORD *)&v22 = 0x8000000080000000;
      *((_QWORD *)&v22 + 1) = 0x8000000080000000;
      v11 = v61;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v57;
      a4 = v45;
      a5 = v49;
      v23 = v21;
      result = v53;
      if (v23)
      {
        xmmword_10048A9F0 = v22;
        __cxa_guard_release(qword_10048AA00);
        v8 = v37;
        a1 = v41;
        v11 = v61;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v57;
        a4 = v45;
        a5 = v49;
        result = v53;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v50 = a5;
      v54 = result;
      v46 = a4;
      v58 = v6;
      v62 = v11;
      v38 = v8;
      v42 = a1;
      v24 = __cxa_guard_acquire(qword_10048AA20);
      v8 = v38;
      a1 = v42;
      *(_QWORD *)&v25 = 0x3F0000003F000000;
      *((_QWORD *)&v25 + 1) = 0x3F0000003F000000;
      v11 = v62;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v58;
      a4 = v46;
      a5 = v50;
      v26 = v24;
      result = v54;
      if (v26)
      {
        xmmword_10048AA10 = v25;
        __cxa_guard_release(qword_10048AA20);
        v8 = v38;
        a1 = v42;
        v11 = v62;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v58;
        a4 = v46;
        a5 = v50;
        result = v54;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v51 = a5;
      v55 = result;
      v47 = a4;
      v59 = v6;
      v63 = v11;
      v39 = v8;
      v43 = a1;
      v33 = v9[159];
      v35 = v10[161];
      v27 = __cxa_guard_acquire(qword_10048AA00);
      v15 = v33;
      v14 = v35;
      v8 = v39;
      a1 = v43;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      v11 = v63;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v59;
      a4 = v47;
      a5 = v51;
      v29 = v27;
      result = v55;
      if (v29)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        v15 = v33;
        v14 = v35;
        v8 = v39;
        a1 = v43;
        v11 = v63;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v59;
        a4 = v47;
        a5 = v51;
        result = v55;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v52 = a5;
      v56 = result;
      v48 = a4;
      v60 = v6;
      v64 = v11;
      v40 = v8;
      v44 = a1;
      v34 = v15;
      v36 = v14;
      v30 = __cxa_guard_acquire(qword_10048AA20);
      v15 = v34;
      v14 = v36;
      v8 = v40;
      a1 = v44;
      *(_QWORD *)&v31 = 0x3F0000003F000000;
      *((_QWORD *)&v31 + 1) = 0x3F0000003F000000;
      v11 = v64;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a4 = v48;
      a5 = v52;
      v32 = v30;
      result = v56;
      if (v32)
      {
        xmmword_10048AA10 = v31;
        __cxa_guard_release(qword_10048AA20);
        v15 = v34;
        v14 = v36;
        v8 = v40;
        a1 = v44;
        v11 = v64;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v60;
        a4 = v48;
        a5 = v52;
        result = v56;
      }
    }
    v18 = vmovl_s8(v11);
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v18.i8)), a1.n128_f32[0]));
    v20 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v18)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v19), v14)))), vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v20), v10[161])))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10021222C(__n128 a1, int32x2_t a2, uint64_t a3, uint16x8_t *a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  uint16x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  __int128 v21;
  int v22;
  int v23;
  __int128 v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  uint16x8_t *v48;
  uint16x8_t *v49;
  uint16x8_t *v50;
  uint16x8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *a4;
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v52 = a5;
      v56 = result;
      v48 = a4;
      v60 = v6;
      v44 = a1;
      v36 = *a4;
      v40 = v8;
      v20 = __cxa_guard_acquire(qword_10048AA00);
      v11 = v36;
      v8 = v40;
      *(_QWORD *)&v21 = 0x8000000080000000;
      *((_QWORD *)&v21 + 1) = 0x8000000080000000;
      a1 = v44;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a4 = v48;
      a5 = v52;
      v22 = v20;
      result = v56;
      if (v22)
      {
        xmmword_10048A9F0 = v21;
        __cxa_guard_release(qword_10048AA00);
        v11 = v36;
        v8 = v40;
        a1 = v44;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v60;
        a4 = v48;
        a5 = v52;
        result = v56;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v53 = a5;
      v57 = result;
      v49 = a4;
      v61 = v6;
      v45 = a1;
      v37 = v11;
      v41 = v8;
      v23 = __cxa_guard_acquire(qword_10048AA20);
      v11 = v37;
      v8 = v41;
      *(_QWORD *)&v24 = 0x3F0000003F000000;
      *((_QWORD *)&v24 + 1) = 0x3F0000003F000000;
      a1 = v45;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v61;
      a4 = v49;
      a5 = v53;
      v25 = v23;
      result = v57;
      if (v25)
      {
        xmmword_10048AA10 = v24;
        __cxa_guard_release(qword_10048AA20);
        v11 = v37;
        v8 = v41;
        a1 = v45;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v61;
        a4 = v49;
        a5 = v53;
        result = v57;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v54 = a5;
      v58 = result;
      v50 = a4;
      v62 = v6;
      v46 = a1;
      v38 = v11;
      v42 = v8;
      v32 = v9[159];
      v34 = v10[161];
      v26 = __cxa_guard_acquire(qword_10048AA00);
      v15 = v32;
      v14 = v34;
      v11 = v38;
      v8 = v42;
      *(_QWORD *)&v27 = 0x8000000080000000;
      *((_QWORD *)&v27 + 1) = 0x8000000080000000;
      a1 = v46;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v62;
      a4 = v50;
      a5 = v54;
      v28 = v26;
      result = v58;
      if (v28)
      {
        xmmword_10048A9F0 = v27;
        __cxa_guard_release(qword_10048AA00);
        v15 = v32;
        v14 = v34;
        v11 = v38;
        v8 = v42;
        a1 = v46;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v62;
        a4 = v50;
        a5 = v54;
        result = v58;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v55 = a5;
      v59 = result;
      v51 = a4;
      v63 = v6;
      v47 = a1;
      v39 = v11;
      v43 = v8;
      v33 = v15;
      v35 = v14;
      v29 = __cxa_guard_acquire(qword_10048AA20);
      v15 = v33;
      v14 = v35;
      v11 = v39;
      v8 = v43;
      *(_QWORD *)&v30 = 0x3F0000003F000000;
      *((_QWORD *)&v30 + 1) = 0x3F0000003F000000;
      a1 = v47;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v63;
      a4 = v51;
      a5 = v55;
      v31 = v29;
      result = v59;
      if (v31)
      {
        xmmword_10048AA10 = v30;
        __cxa_guard_release(qword_10048AA20);
        v15 = v33;
        v14 = v35;
        v11 = v39;
        v8 = v43;
        a1 = v47;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v63;
        a4 = v51;
        a5 = v55;
        result = v59;
      }
    }
    v18 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v11.i8)), a1.n128_f32[0]));
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v11)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v18), v14)))), vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v19), v10[161])))));
    result += 8;
    ++a4;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100212584(__n128 a1, int32x2_t a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int16x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  __int128 v21;
  int v22;
  int v23;
  __int128 v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  int16x8_t *v48;
  int16x8_t *v49;
  int16x8_t *v50;
  int16x8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *a4;
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v52 = a5;
      v56 = result;
      v48 = a4;
      v60 = v6;
      v44 = a1;
      v36 = *a4;
      v40 = v8;
      v20 = __cxa_guard_acquire(qword_10048AA00);
      v11 = v36;
      v8 = v40;
      *(_QWORD *)&v21 = 0x8000000080000000;
      *((_QWORD *)&v21 + 1) = 0x8000000080000000;
      a1 = v44;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a4 = v48;
      a5 = v52;
      v22 = v20;
      result = v56;
      if (v22)
      {
        xmmword_10048A9F0 = v21;
        __cxa_guard_release(qword_10048AA00);
        v11 = v36;
        v8 = v40;
        a1 = v44;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v60;
        a4 = v48;
        a5 = v52;
        result = v56;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v53 = a5;
      v57 = result;
      v49 = a4;
      v61 = v6;
      v45 = a1;
      v37 = v11;
      v41 = v8;
      v23 = __cxa_guard_acquire(qword_10048AA20);
      v11 = v37;
      v8 = v41;
      *(_QWORD *)&v24 = 0x3F0000003F000000;
      *((_QWORD *)&v24 + 1) = 0x3F0000003F000000;
      a1 = v45;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v61;
      a4 = v49;
      a5 = v53;
      v25 = v23;
      result = v57;
      if (v25)
      {
        xmmword_10048AA10 = v24;
        __cxa_guard_release(qword_10048AA20);
        v11 = v37;
        v8 = v41;
        a1 = v45;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v61;
        a4 = v49;
        a5 = v53;
        result = v57;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v54 = a5;
      v58 = result;
      v50 = a4;
      v62 = v6;
      v46 = a1;
      v38 = v11;
      v42 = v8;
      v32 = v9[159];
      v34 = v10[161];
      v26 = __cxa_guard_acquire(qword_10048AA00);
      v15 = v32;
      v14 = v34;
      v11 = v38;
      v8 = v42;
      *(_QWORD *)&v27 = 0x8000000080000000;
      *((_QWORD *)&v27 + 1) = 0x8000000080000000;
      a1 = v46;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v62;
      a4 = v50;
      a5 = v54;
      v28 = v26;
      result = v58;
      if (v28)
      {
        xmmword_10048A9F0 = v27;
        __cxa_guard_release(qword_10048AA00);
        v15 = v32;
        v14 = v34;
        v11 = v38;
        v8 = v42;
        a1 = v46;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v62;
        a4 = v50;
        a5 = v54;
        result = v58;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v55 = a5;
      v59 = result;
      v51 = a4;
      v63 = v6;
      v47 = a1;
      v39 = v11;
      v43 = v8;
      v33 = v15;
      v35 = v14;
      v29 = __cxa_guard_acquire(qword_10048AA20);
      v15 = v33;
      v14 = v35;
      v11 = v39;
      v8 = v43;
      *(_QWORD *)&v30 = 0x3F0000003F000000;
      *((_QWORD *)&v30 + 1) = 0x3F0000003F000000;
      a1 = v47;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v63;
      a4 = v51;
      a5 = v55;
      v31 = v29;
      result = v59;
      if (v31)
      {
        xmmword_10048AA10 = v30;
        __cxa_guard_release(qword_10048AA20);
        v15 = v33;
        v14 = v35;
        v11 = v39;
        v8 = v43;
        a1 = v47;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v63;
        a4 = v51;
        a5 = v55;
        result = v59;
      }
    }
    v18 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v11.i8)), a1.n128_f32[0]));
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v11)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v18), v14)))), vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v19), v10[161])))));
    result += 8;
    ++a4;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_1002128DC(__n128 a1, int32x2_t a2, uint64_t a3, int32x4_t *a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int32x4_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int32x4_t v12;
  int32x4_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  int8x16_t v16;
  int8x16_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  float32x4_t v20;
  float32x4_t v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  __int128 v26;
  int v27;
  int v28;
  __int128 v29;
  int v30;
  int v31;
  __int128 v32;
  int v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int32x4_t *v66;
  int32x4_t *v67;
  int32x4_t *v68;
  int32x4_t *v69;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = a4 + 1;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v13 = v9[-1];
    v12 = *v9;
    v14 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v14 & 1) == 0)
    {
      v62 = result;
      v66 = v9;
      v54 = a5;
      v58 = v6;
      v50 = a1;
      v42 = *v9;
      v46 = v8;
      v38 = v9[-1];
      v22 = __cxa_guard_acquire(qword_10048AA00);
      v13 = v38;
      v12 = v42;
      *(_QWORD *)&v23 = 0x8000000080000000;
      *((_QWORD *)&v23 + 1) = 0x8000000080000000;
      v8 = v46;
      a1 = v50;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v58;
      a5 = v54;
      v24 = v22;
      result = v62;
      v9 = v66;
      if (v24)
      {
        xmmword_10048A9F0 = v23;
        __cxa_guard_release(qword_10048AA00);
        v13 = v38;
        v12 = v42;
        v8 = v46;
        a1 = v50;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v62;
        v9 = v66;
        v6 = v58;
        a5 = v54;
      }
    }
    v15 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v15 & 1) == 0)
    {
      v63 = result;
      v67 = v9;
      v55 = a5;
      v59 = v6;
      v51 = a1;
      v43 = v12;
      v47 = v8;
      v39 = v13;
      v25 = __cxa_guard_acquire(qword_10048AA20);
      v13 = v39;
      v12 = v43;
      v8 = v47;
      *(_QWORD *)&v26 = 0x3F0000003F000000;
      *((_QWORD *)&v26 + 1) = 0x3F0000003F000000;
      a1 = v51;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v59;
      a5 = v55;
      v27 = v25;
      result = v63;
      v9 = v67;
      if (v27)
      {
        xmmword_10048AA10 = v26;
        __cxa_guard_release(qword_10048AA20);
        v13 = v39;
        v12 = v43;
        v8 = v47;
        a1 = v51;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v63;
        v9 = v67;
        v6 = v59;
        a5 = v55;
      }
    }
    v16 = v11[161];
    v17 = v10[159];
    v18 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v18 & 1) == 0)
    {
      v64 = result;
      v68 = v9;
      v56 = a5;
      v60 = v6;
      v52 = a1;
      v44 = v12;
      v48 = v8;
      v36 = v11[161];
      v40 = v13;
      v34 = v10[159];
      v28 = __cxa_guard_acquire(qword_10048AA00);
      v17 = v34;
      v16 = v36;
      v13 = v40;
      v12 = v44;
      *(_QWORD *)&v29 = 0x8000000080000000;
      *((_QWORD *)&v29 + 1) = 0x8000000080000000;
      v8 = v48;
      a1 = v52;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a5 = v56;
      v30 = v28;
      result = v64;
      v9 = v68;
      if (v30)
      {
        xmmword_10048A9F0 = v29;
        __cxa_guard_release(qword_10048AA00);
        v17 = v34;
        v16 = v36;
        v13 = v40;
        v12 = v44;
        v8 = v48;
        a1 = v52;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v64;
        v9 = v68;
        v6 = v60;
        a5 = v56;
      }
    }
    v19 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v19 & 1) == 0)
    {
      v65 = result;
      v69 = v9;
      v57 = a5;
      v61 = v6;
      v53 = a1;
      v45 = v12;
      v49 = v8;
      v37 = v16;
      v41 = v13;
      v35 = v17;
      v31 = __cxa_guard_acquire(qword_10048AA20);
      v17 = v35;
      v16 = v37;
      v13 = v41;
      v12 = v45;
      v8 = v49;
      *(_QWORD *)&v32 = 0x3F0000003F000000;
      *((_QWORD *)&v32 + 1) = 0x3F0000003F000000;
      a1 = v53;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v61;
      a5 = v57;
      v33 = v31;
      result = v65;
      v9 = v69;
      if (v33)
      {
        xmmword_10048AA10 = v32;
        __cxa_guard_release(qword_10048AA20);
        v17 = v35;
        v16 = v37;
        v13 = v41;
        v12 = v45;
        v8 = v49;
        a1 = v53;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v65;
        v9 = v69;
        v6 = v61;
        a5 = v57;
      }
    }
    v20 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v13), a1.n128_f32[0]));
    v21 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v12), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v20), v16)))), vcvtq_s32_f32(vaddq_f32(v21, (float32x4_t)vorrq_s8(vandq_s8(v10[159], (int8x16_t)v21), v11[161])))));
    result += 8;
    v9 += 2;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100212C60(__n128 a1, int32x2_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  float32x4_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  int8x16_t v16;
  int8x16_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  float32x4_t v20;
  float32x4_t v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  __int128 v26;
  int v27;
  int v28;
  __int128 v29;
  int v30;
  int v31;
  __int128 v32;
  int v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t *v66;
  float32x4_t *v67;
  float32x4_t *v68;
  float32x4_t *v69;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = a4 + 1;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v12 = v9[-1];
    v13 = *v9;
    v14 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v14 & 1) == 0)
    {
      v62 = result;
      v66 = v9;
      v54 = a5;
      v58 = v6;
      v50 = a1;
      v42 = v9[-1];
      v46 = v8;
      v38 = *v9;
      v22 = __cxa_guard_acquire(qword_10048AA00);
      v13 = v38;
      v12 = v42;
      *(_QWORD *)&v23 = 0x8000000080000000;
      *((_QWORD *)&v23 + 1) = 0x8000000080000000;
      v8 = v46;
      a1 = v50;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v58;
      a5 = v54;
      v24 = v22;
      result = v62;
      v9 = v66;
      if (v24)
      {
        xmmword_10048A9F0 = v23;
        __cxa_guard_release(qword_10048AA00);
        v13 = v38;
        v12 = v42;
        v8 = v46;
        a1 = v50;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v62;
        v9 = v66;
        v6 = v58;
        a5 = v54;
      }
    }
    v15 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v15 & 1) == 0)
    {
      v63 = result;
      v67 = v9;
      v55 = a5;
      v59 = v6;
      v51 = a1;
      v43 = v12;
      v47 = v8;
      v39 = v13;
      v25 = __cxa_guard_acquire(qword_10048AA20);
      v13 = v39;
      v12 = v43;
      v8 = v47;
      a1 = v51;
      *(_QWORD *)&v26 = 0x3F0000003F000000;
      *((_QWORD *)&v26 + 1) = 0x3F0000003F000000;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v59;
      a5 = v55;
      v27 = v25;
      result = v63;
      v9 = v67;
      if (v27)
      {
        xmmword_10048AA10 = v26;
        __cxa_guard_release(qword_10048AA20);
        v13 = v39;
        v12 = v43;
        v8 = v47;
        a1 = v51;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v63;
        v9 = v67;
        v6 = v59;
        a5 = v55;
      }
    }
    v16 = v11[161];
    v17 = v10[159];
    v18 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v18 & 1) == 0)
    {
      v64 = result;
      v68 = v9;
      v56 = a5;
      v60 = v6;
      v52 = a1;
      v44 = v12;
      v48 = v8;
      v36 = v11[161];
      v40 = v13;
      v34 = v10[159];
      v28 = __cxa_guard_acquire(qword_10048AA00);
      v17 = v34;
      v16 = v36;
      v13 = v40;
      v12 = v44;
      *(_QWORD *)&v29 = 0x8000000080000000;
      *((_QWORD *)&v29 + 1) = 0x8000000080000000;
      v8 = v48;
      a1 = v52;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a5 = v56;
      v30 = v28;
      result = v64;
      v9 = v68;
      if (v30)
      {
        xmmword_10048A9F0 = v29;
        __cxa_guard_release(qword_10048AA00);
        v17 = v34;
        v16 = v36;
        v13 = v40;
        v12 = v44;
        v8 = v48;
        a1 = v52;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v64;
        v9 = v68;
        v6 = v60;
        a5 = v56;
      }
    }
    v19 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v19 & 1) == 0)
    {
      v65 = result;
      v69 = v9;
      v57 = a5;
      v61 = v6;
      v53 = a1;
      v45 = v12;
      v49 = v8;
      v37 = v16;
      v41 = v13;
      v35 = v17;
      v31 = __cxa_guard_acquire(qword_10048AA20);
      v17 = v35;
      v16 = v37;
      v13 = v41;
      v12 = v45;
      v8 = v49;
      a1 = v53;
      *(_QWORD *)&v32 = 0x3F0000003F000000;
      *((_QWORD *)&v32 + 1) = 0x3F0000003F000000;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v61;
      a5 = v57;
      v33 = v31;
      result = v65;
      v9 = v69;
      if (v33)
      {
        xmmword_10048AA10 = v32;
        __cxa_guard_release(qword_10048AA20);
        v17 = v35;
        v16 = v37;
        v13 = v41;
        v12 = v45;
        v8 = v49;
        a1 = v53;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v65;
        v9 = v69;
        v6 = v61;
        a5 = v57;
      }
    }
    v20 = vaddq_f32(v8, vmulq_n_f32(v12, a1.n128_f32[0]));
    v21 = vaddq_f32(v8, vmulq_n_f32(v13, a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v20), v16)))), vcvtq_s32_f32(vaddq_f32(v21, (float32x4_t)vorrq_s8(vandq_s8(v10[159], (int8x16_t)v21), v11[161])))));
    result += 8;
    v9 += 2;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100212FDC(float a1, float a2, double a3, double a4, double a5, __n128 a6, uint64_t a7, float64x2_t *a8, uint64_t a9, int a10)
{
  int v10;
  uint64_t result;
  float64x2_t v12;
  float64x2_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  float32x4_t v26;
  float32x4_t v27;
  int v28;
  __int128 v29;
  int v30;
  int v31;
  __int128 v32;
  int v33;
  int v34;
  __int128 v35;
  int v36;
  int v37;
  __int128 v38;
  int v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float64x2_t *v80;
  float64x2_t *v81;
  float64x2_t *v82;
  float64x2_t *v83;

  v10 = a10 - 8;
  if (a10 < 8)
    return 0;
  result = 0;
  v12 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2), 0);
  a6.n128_f64[0] = a1;
  v13 = a8 + 2;
  v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v16 = v13[-2];
    v17 = v13[-1];
    v18 = *v13;
    v19 = v13[1];
    v20 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v20 & 1) == 0)
    {
      v76 = result;
      v80 = v13;
      v68 = a9;
      v72 = v10;
      v60 = a6;
      v64 = v12;
      v52 = v13[-1];
      v56 = v13[-2];
      v44 = v13[1];
      v48 = *v13;
      v28 = __cxa_guard_acquire(qword_10048AA00);
      v19 = v44;
      v18 = v48;
      v17 = v52;
      v16 = v56;
      *(_QWORD *)&v29 = 0x8000000080000000;
      *((_QWORD *)&v29 + 1) = 0x8000000080000000;
      a6 = v60;
      v12 = v64;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = v72;
      a9 = v68;
      v30 = v28;
      result = v76;
      v13 = v80;
      if (v30)
      {
        xmmword_10048A9F0 = v29;
        __cxa_guard_release(qword_10048AA00);
        v19 = v44;
        v18 = v48;
        v17 = v52;
        v16 = v56;
        a6 = v60;
        v12 = v64;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v76;
        v13 = v80;
        v10 = v72;
        a9 = v68;
      }
    }
    v21 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v21 & 1) == 0)
    {
      v77 = result;
      v81 = v13;
      v69 = a9;
      v73 = v10;
      v61 = a6;
      v65 = v12;
      v53 = v17;
      v57 = v16;
      v45 = v19;
      v49 = v18;
      v31 = __cxa_guard_acquire(qword_10048AA20);
      v19 = v45;
      v18 = v49;
      v17 = v53;
      v16 = v57;
      a6 = v61;
      v12 = v65;
      *(_QWORD *)&v32 = 0x3F0000003F000000;
      *((_QWORD *)&v32 + 1) = 0x3F0000003F000000;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = v73;
      a9 = v69;
      v33 = v31;
      result = v77;
      v13 = v81;
      if (v33)
      {
        xmmword_10048AA10 = v32;
        __cxa_guard_release(qword_10048AA20);
        v19 = v45;
        v18 = v49;
        v17 = v53;
        v16 = v57;
        a6 = v61;
        v12 = v65;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v77;
        v13 = v81;
        v10 = v73;
        a9 = v69;
      }
    }
    v22 = v15[161];
    v23 = v14[159];
    v24 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v24 & 1) == 0)
    {
      v78 = result;
      v82 = v13;
      v70 = a9;
      v74 = v10;
      v62 = a6;
      v66 = v12;
      v54 = v17;
      v58 = v16;
      v46 = v19;
      v50 = v18;
      v40 = v14[159];
      v42 = v15[161];
      v34 = __cxa_guard_acquire(qword_10048AA00);
      v23 = v40;
      v22 = v42;
      v19 = v46;
      v18 = v50;
      v17 = v54;
      v16 = v58;
      *(_QWORD *)&v35 = 0x8000000080000000;
      *((_QWORD *)&v35 + 1) = 0x8000000080000000;
      a6 = v62;
      v12 = v66;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = v74;
      a9 = v70;
      v36 = v34;
      result = v78;
      v13 = v82;
      if (v36)
      {
        xmmword_10048A9F0 = v35;
        __cxa_guard_release(qword_10048AA00);
        v23 = v40;
        v22 = v42;
        v19 = v46;
        v18 = v50;
        v17 = v54;
        v16 = v58;
        a6 = v62;
        v12 = v66;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v78;
        v13 = v82;
        v10 = v74;
        a9 = v70;
      }
    }
    v25 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v25 & 1) == 0)
    {
      v79 = result;
      v83 = v13;
      v71 = a9;
      v75 = v10;
      v63 = a6;
      v67 = v12;
      v55 = v17;
      v59 = v16;
      v47 = v19;
      v51 = v18;
      v41 = v23;
      v43 = v22;
      v37 = __cxa_guard_acquire(qword_10048AA20);
      v23 = v41;
      v22 = v43;
      v19 = v47;
      v18 = v51;
      v17 = v55;
      v16 = v59;
      a6 = v63;
      v12 = v67;
      *(_QWORD *)&v38 = 0x3F0000003F000000;
      *((_QWORD *)&v38 + 1) = 0x3F0000003F000000;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = v75;
      a9 = v71;
      v39 = v37;
      result = v79;
      v13 = v83;
      if (v39)
      {
        xmmword_10048AA10 = v38;
        __cxa_guard_release(qword_10048AA20);
        v23 = v41;
        v22 = v43;
        v19 = v47;
        v18 = v51;
        v17 = v55;
        v16 = v59;
        a6 = v63;
        v12 = v67;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v79;
        v13 = v83;
        v10 = v75;
        a9 = v71;
      }
    }
    v26 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v16, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v17, a6.n128_f64[0])));
    v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v18, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v19, a6.n128_f64[0])));
    *(int8x8_t *)(a9 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v26, (float32x4_t)vorrq_s8(vandq_s8(v23, (int8x16_t)v26), v22)))), vcvtq_s32_f32(vaddq_f32(v27, (float32x4_t)vorrq_s8(vandq_s8(v14[159], (int8x16_t)v27), v15[161])))));
    result += 8;
    v13 += 4;
  }
  while (v10 >= (int)result);
  return result;
}

uint64_t sub_100213384(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  uint8x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint16x8_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int16x8_t *v49;
  int16x8_t *v50;
  int16x8_t *v51;
  int16x8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint8x8_t v61;
  uint8x8_t v62;
  uint8x8_t v63;
  uint8x8_t v64;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *(uint8x8_t *)(a4 + result);
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v49 = a5;
      v53 = result;
      v45 = a4;
      v57 = v6;
      v61 = *(uint8x8_t *)(a4 + result);
      v37 = v8;
      v41 = a1;
      v21 = __cxa_guard_acquire(qword_10048AA00);
      v8 = v37;
      a1 = v41;
      *(_QWORD *)&v22 = 0x8000000080000000;
      *((_QWORD *)&v22 + 1) = 0x8000000080000000;
      v11 = v61;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v57;
      a4 = v45;
      a5 = v49;
      v23 = v21;
      result = v53;
      if (v23)
      {
        xmmword_10048A9F0 = v22;
        __cxa_guard_release(qword_10048AA00);
        v8 = v37;
        a1 = v41;
        v11 = v61;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v57;
        a4 = v45;
        a5 = v49;
        result = v53;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v50 = a5;
      v54 = result;
      v46 = a4;
      v58 = v6;
      v62 = v11;
      v38 = v8;
      v42 = a1;
      v24 = __cxa_guard_acquire(qword_10048AA20);
      v8 = v38;
      a1 = v42;
      *(_QWORD *)&v25 = 0x3F0000003F000000;
      *((_QWORD *)&v25 + 1) = 0x3F0000003F000000;
      v11 = v62;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v58;
      a4 = v46;
      a5 = v50;
      v26 = v24;
      result = v54;
      if (v26)
      {
        xmmword_10048AA10 = v25;
        __cxa_guard_release(qword_10048AA20);
        v8 = v38;
        a1 = v42;
        v11 = v62;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v58;
        a4 = v46;
        a5 = v50;
        result = v54;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v51 = a5;
      v55 = result;
      v47 = a4;
      v59 = v6;
      v63 = v11;
      v39 = v8;
      v43 = a1;
      v33 = v9[159];
      v35 = v10[161];
      v27 = __cxa_guard_acquire(qword_10048AA00);
      v15 = v33;
      v14 = v35;
      v8 = v39;
      a1 = v43;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      v11 = v63;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v59;
      a4 = v47;
      a5 = v51;
      v29 = v27;
      result = v55;
      if (v29)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        v15 = v33;
        v14 = v35;
        v8 = v39;
        a1 = v43;
        v11 = v63;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v59;
        a4 = v47;
        a5 = v51;
        result = v55;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v52 = a5;
      v56 = result;
      v48 = a4;
      v60 = v6;
      v64 = v11;
      v40 = v8;
      v44 = a1;
      v34 = v15;
      v36 = v14;
      v30 = __cxa_guard_acquire(qword_10048AA20);
      v15 = v34;
      v14 = v36;
      v8 = v40;
      a1 = v44;
      *(_QWORD *)&v31 = 0x3F0000003F000000;
      *((_QWORD *)&v31 + 1) = 0x3F0000003F000000;
      v11 = v64;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a4 = v48;
      a5 = v52;
      v32 = v30;
      result = v56;
      if (v32)
      {
        xmmword_10048AA10 = v31;
        __cxa_guard_release(qword_10048AA20);
        v15 = v34;
        v14 = v36;
        v8 = v40;
        a1 = v44;
        v11 = v64;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v60;
        a4 = v48;
        a5 = v52;
        result = v56;
      }
    }
    v18 = vmovl_u8(v11);
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v18.i8)), a1.n128_f32[0]));
    v20 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v18)), a1.n128_f32[0]));
    *a5++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v19), v14)))), vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v20), v10[161]))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_1002136D8(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int16x8_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int16x8_t *v49;
  int16x8_t *v50;
  int16x8_t *v51;
  int16x8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int8x8_t v61;
  int8x8_t v62;
  int8x8_t v63;
  int8x8_t v64;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *(int8x8_t *)(a4 + result);
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v49 = a5;
      v53 = result;
      v45 = a4;
      v57 = v6;
      v61 = *(int8x8_t *)(a4 + result);
      v37 = v8;
      v41 = a1;
      v21 = __cxa_guard_acquire(qword_10048AA00);
      v8 = v37;
      a1 = v41;
      *(_QWORD *)&v22 = 0x8000000080000000;
      *((_QWORD *)&v22 + 1) = 0x8000000080000000;
      v11 = v61;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v57;
      a4 = v45;
      a5 = v49;
      v23 = v21;
      result = v53;
      if (v23)
      {
        xmmword_10048A9F0 = v22;
        __cxa_guard_release(qword_10048AA00);
        v8 = v37;
        a1 = v41;
        v11 = v61;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v57;
        a4 = v45;
        a5 = v49;
        result = v53;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v50 = a5;
      v54 = result;
      v46 = a4;
      v58 = v6;
      v62 = v11;
      v38 = v8;
      v42 = a1;
      v24 = __cxa_guard_acquire(qword_10048AA20);
      v8 = v38;
      a1 = v42;
      *(_QWORD *)&v25 = 0x3F0000003F000000;
      *((_QWORD *)&v25 + 1) = 0x3F0000003F000000;
      v11 = v62;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v58;
      a4 = v46;
      a5 = v50;
      v26 = v24;
      result = v54;
      if (v26)
      {
        xmmword_10048AA10 = v25;
        __cxa_guard_release(qword_10048AA20);
        v8 = v38;
        a1 = v42;
        v11 = v62;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v58;
        a4 = v46;
        a5 = v50;
        result = v54;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v51 = a5;
      v55 = result;
      v47 = a4;
      v59 = v6;
      v63 = v11;
      v39 = v8;
      v43 = a1;
      v33 = v9[159];
      v35 = v10[161];
      v27 = __cxa_guard_acquire(qword_10048AA00);
      v15 = v33;
      v14 = v35;
      v8 = v39;
      a1 = v43;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      v11 = v63;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v59;
      a4 = v47;
      a5 = v51;
      v29 = v27;
      result = v55;
      if (v29)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        v15 = v33;
        v14 = v35;
        v8 = v39;
        a1 = v43;
        v11 = v63;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v59;
        a4 = v47;
        a5 = v51;
        result = v55;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v52 = a5;
      v56 = result;
      v48 = a4;
      v60 = v6;
      v64 = v11;
      v40 = v8;
      v44 = a1;
      v34 = v15;
      v36 = v14;
      v30 = __cxa_guard_acquire(qword_10048AA20);
      v15 = v34;
      v14 = v36;
      v8 = v40;
      a1 = v44;
      *(_QWORD *)&v31 = 0x3F0000003F000000;
      *((_QWORD *)&v31 + 1) = 0x3F0000003F000000;
      v11 = v64;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a4 = v48;
      a5 = v52;
      v32 = v30;
      result = v56;
      if (v32)
      {
        xmmword_10048AA10 = v31;
        __cxa_guard_release(qword_10048AA20);
        v15 = v34;
        v14 = v36;
        v8 = v40;
        a1 = v44;
        v11 = v64;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v60;
        a4 = v48;
        a5 = v52;
        result = v56;
      }
    }
    v18 = vmovl_s8(v11);
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v18.i8)), a1.n128_f32[0]));
    v20 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v18)), a1.n128_f32[0]));
    *a5++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v19), v14)))), vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v20), v10[161]))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100213A2C(__n128 a1, int32x2_t a2, uint64_t a3, uint16x8_t *a4, int16x8_t *a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  uint16x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  float32x4_t v18;
  float32x4_t v19;
  __int128 v20;
  int v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  uint16x8_t *v44;
  uint16x8_t *v45;
  uint16x8_t *v46;
  uint16x8_t *v47;
  int16x8_t *v48;
  int16x8_t *v49;
  int16x8_t *v50;
  int16x8_t *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  LODWORD(result) = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *a4;
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v52 = result;
      v56 = v6;
      v44 = a4;
      v48 = a5;
      v40 = a1;
      v32 = *a4;
      v36 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v11 = v32;
      v8 = v36;
      *(_QWORD *)&v20 = 0x8000000080000000;
      *((_QWORD *)&v20 + 1) = 0x8000000080000000;
      a1 = v40;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v44;
      a5 = v48;
      v21 = result;
      LODWORD(result) = v52;
      v6 = v56;
      if (v21)
      {
        xmmword_10048A9F0 = v20;
        __cxa_guard_release(qword_10048AA00);
        v11 = v32;
        v8 = v36;
        a1 = v40;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v52;
        v6 = v56;
        a4 = v44;
        a5 = v48;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v53 = result;
      v57 = v6;
      v45 = a4;
      v49 = a5;
      v41 = a1;
      v33 = v11;
      v37 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v11 = v33;
      v8 = v37;
      *(_QWORD *)&v22 = 0x3F0000003F000000;
      *((_QWORD *)&v22 + 1) = 0x3F0000003F000000;
      a1 = v41;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v45;
      a5 = v49;
      v23 = result;
      LODWORD(result) = v53;
      v6 = v57;
      if (v23)
      {
        xmmword_10048AA10 = v22;
        __cxa_guard_release(qword_10048AA20);
        v11 = v33;
        v8 = v37;
        a1 = v41;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v53;
        v6 = v57;
        a4 = v45;
        a5 = v49;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v54 = result;
      v58 = v6;
      v46 = a4;
      v50 = a5;
      v42 = a1;
      v34 = v11;
      v38 = v8;
      v28 = v9[159];
      v30 = v10[161];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v15 = v28;
      v14 = v30;
      v11 = v34;
      v8 = v38;
      *(_QWORD *)&v24 = 0x8000000080000000;
      *((_QWORD *)&v24 + 1) = 0x8000000080000000;
      a1 = v42;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v46;
      a5 = v50;
      v25 = result;
      LODWORD(result) = v54;
      v6 = v58;
      if (v25)
      {
        xmmword_10048A9F0 = v24;
        __cxa_guard_release(qword_10048AA00);
        v15 = v28;
        v14 = v30;
        v11 = v34;
        v8 = v38;
        a1 = v42;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v54;
        v6 = v58;
        a4 = v46;
        a5 = v50;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v55 = result;
      v59 = v6;
      v47 = a4;
      v51 = a5;
      v43 = a1;
      v35 = v11;
      v39 = v8;
      v29 = v15;
      v31 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v15 = v29;
      v14 = v31;
      v11 = v35;
      v8 = v39;
      *(_QWORD *)&v26 = 0x3F0000003F000000;
      *((_QWORD *)&v26 + 1) = 0x3F0000003F000000;
      a1 = v43;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v47;
      a5 = v51;
      v27 = result;
      LODWORD(result) = v55;
      v6 = v59;
      if (v27)
      {
        xmmword_10048AA10 = v26;
        __cxa_guard_release(qword_10048AA20);
        v15 = v29;
        v14 = v31;
        v11 = v35;
        v8 = v39;
        a1 = v43;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v55;
        v6 = v59;
        a4 = v47;
        a5 = v51;
      }
    }
    v18 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v11.i8)), a1.n128_f32[0]));
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v11)), a1.n128_f32[0]));
    *a5++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v18), v14)))), vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v19), v10[161]))));
    ++a4;
    result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100213D50(__n128 a1, int32x2_t a2, uint64_t a3, int16x8_t *a4, int16x8_t *a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int16x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  float32x4_t v18;
  float32x4_t v19;
  __int128 v20;
  int v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  int16x8_t *v44;
  int16x8_t *v45;
  int16x8_t *v46;
  int16x8_t *v47;
  int16x8_t *v48;
  int16x8_t *v49;
  int16x8_t *v50;
  int16x8_t *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  LODWORD(result) = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *a4;
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v52 = result;
      v56 = v6;
      v44 = a4;
      v48 = a5;
      v40 = a1;
      v32 = *a4;
      v36 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v11 = v32;
      v8 = v36;
      *(_QWORD *)&v20 = 0x8000000080000000;
      *((_QWORD *)&v20 + 1) = 0x8000000080000000;
      a1 = v40;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v44;
      a5 = v48;
      v21 = result;
      LODWORD(result) = v52;
      v6 = v56;
      if (v21)
      {
        xmmword_10048A9F0 = v20;
        __cxa_guard_release(qword_10048AA00);
        v11 = v32;
        v8 = v36;
        a1 = v40;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v52;
        v6 = v56;
        a4 = v44;
        a5 = v48;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v53 = result;
      v57 = v6;
      v45 = a4;
      v49 = a5;
      v41 = a1;
      v33 = v11;
      v37 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v11 = v33;
      v8 = v37;
      *(_QWORD *)&v22 = 0x3F0000003F000000;
      *((_QWORD *)&v22 + 1) = 0x3F0000003F000000;
      a1 = v41;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v45;
      a5 = v49;
      v23 = result;
      LODWORD(result) = v53;
      v6 = v57;
      if (v23)
      {
        xmmword_10048AA10 = v22;
        __cxa_guard_release(qword_10048AA20);
        v11 = v33;
        v8 = v37;
        a1 = v41;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v53;
        v6 = v57;
        a4 = v45;
        a5 = v49;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v54 = result;
      v58 = v6;
      v46 = a4;
      v50 = a5;
      v42 = a1;
      v34 = v11;
      v38 = v8;
      v28 = v9[159];
      v30 = v10[161];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v15 = v28;
      v14 = v30;
      v11 = v34;
      v8 = v38;
      *(_QWORD *)&v24 = 0x8000000080000000;
      *((_QWORD *)&v24 + 1) = 0x8000000080000000;
      a1 = v42;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v46;
      a5 = v50;
      v25 = result;
      LODWORD(result) = v54;
      v6 = v58;
      if (v25)
      {
        xmmword_10048A9F0 = v24;
        __cxa_guard_release(qword_10048AA00);
        v15 = v28;
        v14 = v30;
        v11 = v34;
        v8 = v38;
        a1 = v42;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v54;
        v6 = v58;
        a4 = v46;
        a5 = v50;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v55 = result;
      v59 = v6;
      v47 = a4;
      v51 = a5;
      v43 = a1;
      v35 = v11;
      v39 = v8;
      v29 = v15;
      v31 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v15 = v29;
      v14 = v31;
      v11 = v35;
      v8 = v39;
      *(_QWORD *)&v26 = 0x3F0000003F000000;
      *((_QWORD *)&v26 + 1) = 0x3F0000003F000000;
      a1 = v43;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v47;
      a5 = v51;
      v27 = result;
      LODWORD(result) = v55;
      v6 = v59;
      if (v27)
      {
        xmmword_10048AA10 = v26;
        __cxa_guard_release(qword_10048AA20);
        v15 = v29;
        v14 = v31;
        v11 = v35;
        v8 = v39;
        a1 = v43;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v55;
        v6 = v59;
        a4 = v47;
        a5 = v51;
      }
    }
    v18 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v11.i8)), a1.n128_f32[0]));
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v11)), a1.n128_f32[0]));
    *a5++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v18), v14)))), vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v19), v10[161]))));
    ++a4;
    result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100214074(__n128 a1, int32x2_t a2, uint64_t a3, int32x4_t *a4, int16x8_t *a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int32x4_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int32x4_t v12;
  int32x4_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  int8x16_t v16;
  int8x16_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  float32x4_t v20;
  float32x4_t v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int16x8_t *v54;
  int16x8_t *v55;
  int16x8_t *v56;
  int16x8_t *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int32x4_t *v62;
  int32x4_t *v63;
  int32x4_t *v64;
  int32x4_t *v65;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  LODWORD(result) = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = a4 + 1;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v13 = v9[-1];
    v12 = *v9;
    v14 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v14 & 1) == 0)
    {
      v58 = result;
      v54 = a5;
      v50 = v6;
      v62 = v9;
      v46 = a1;
      v38 = *v9;
      v42 = v8;
      v34 = v9[-1];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v13 = v34;
      v12 = v38;
      *(_QWORD *)&v22 = 0x8000000080000000;
      *((_QWORD *)&v22 + 1) = 0x8000000080000000;
      v8 = v42;
      a1 = v46;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v62;
      v6 = v50;
      a5 = v54;
      v23 = result;
      LODWORD(result) = v58;
      if (v23)
      {
        xmmword_10048A9F0 = v22;
        __cxa_guard_release(qword_10048AA00);
        v13 = v34;
        v12 = v38;
        v8 = v42;
        a1 = v46;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v62;
        v6 = v50;
        LODWORD(result) = v58;
        a5 = v54;
      }
    }
    v15 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v15 & 1) == 0)
    {
      v59 = result;
      v55 = a5;
      v51 = v6;
      v63 = v9;
      v47 = a1;
      v39 = v12;
      v43 = v8;
      v35 = v13;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v13 = v35;
      v12 = v39;
      v8 = v43;
      *(_QWORD *)&v24 = 0x3F0000003F000000;
      *((_QWORD *)&v24 + 1) = 0x3F0000003F000000;
      a1 = v47;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v63;
      v6 = v51;
      a5 = v55;
      v25 = result;
      LODWORD(result) = v59;
      if (v25)
      {
        xmmword_10048AA10 = v24;
        __cxa_guard_release(qword_10048AA20);
        v13 = v35;
        v12 = v39;
        v8 = v43;
        a1 = v47;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v63;
        v6 = v51;
        LODWORD(result) = v59;
        a5 = v55;
      }
    }
    v16 = v11[161];
    v17 = v10[159];
    v18 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v18 & 1) == 0)
    {
      v60 = result;
      v56 = a5;
      v52 = v6;
      v64 = v9;
      v48 = a1;
      v40 = v12;
      v44 = v8;
      v32 = v11[161];
      v36 = v13;
      v30 = v10[159];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v17 = v30;
      v16 = v32;
      v13 = v36;
      v12 = v40;
      *(_QWORD *)&v26 = 0x8000000080000000;
      *((_QWORD *)&v26 + 1) = 0x8000000080000000;
      v8 = v44;
      a1 = v48;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v64;
      v6 = v52;
      a5 = v56;
      v27 = result;
      LODWORD(result) = v60;
      if (v27)
      {
        xmmword_10048A9F0 = v26;
        __cxa_guard_release(qword_10048AA00);
        v17 = v30;
        v16 = v32;
        v13 = v36;
        v12 = v40;
        v8 = v44;
        a1 = v48;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v64;
        v6 = v52;
        LODWORD(result) = v60;
        a5 = v56;
      }
    }
    v19 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v19 & 1) == 0)
    {
      v61 = result;
      v57 = a5;
      v53 = v6;
      v65 = v9;
      v49 = a1;
      v41 = v12;
      v45 = v8;
      v33 = v16;
      v37 = v13;
      v31 = v17;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v17 = v31;
      v16 = v33;
      v13 = v37;
      v12 = v41;
      v8 = v45;
      *(_QWORD *)&v28 = 0x3F0000003F000000;
      *((_QWORD *)&v28 + 1) = 0x3F0000003F000000;
      a1 = v49;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v65;
      v6 = v53;
      a5 = v57;
      v29 = result;
      LODWORD(result) = v61;
      if (v29)
      {
        xmmword_10048AA10 = v28;
        __cxa_guard_release(qword_10048AA20);
        v17 = v31;
        v16 = v33;
        v13 = v37;
        v12 = v41;
        v8 = v45;
        a1 = v49;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v65;
        v6 = v53;
        LODWORD(result) = v61;
        a5 = v57;
      }
    }
    v20 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v13), a1.n128_f32[0]));
    v21 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v12), a1.n128_f32[0]));
    *a5++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v20), v16)))), vcvtq_s32_f32(vaddq_f32(v21, (float32x4_t)vorrq_s8(vandq_s8(v10[159], (int8x16_t)v21), v11[161]))));
    v9 += 2;
    result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100214424(__n128 a1, int32x2_t a2, uint64_t a3, float32x4_t *a4, int16x8_t *a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  float32x4_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  int8x16_t v16;
  int8x16_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  float32x4_t v20;
  float32x4_t v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int16x8_t *v54;
  int16x8_t *v55;
  int16x8_t *v56;
  int16x8_t *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  float32x4_t *v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float32x4_t *v65;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  LODWORD(result) = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = a4 + 1;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v12 = v9[-1];
    v13 = *v9;
    v14 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v14 & 1) == 0)
    {
      v58 = result;
      v54 = a5;
      v50 = v6;
      v62 = v9;
      v46 = a1;
      v38 = v9[-1];
      v42 = v8;
      v34 = *v9;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v13 = v34;
      v12 = v38;
      *(_QWORD *)&v22 = 0x8000000080000000;
      *((_QWORD *)&v22 + 1) = 0x8000000080000000;
      v8 = v42;
      a1 = v46;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v62;
      v6 = v50;
      a5 = v54;
      v23 = result;
      LODWORD(result) = v58;
      if (v23)
      {
        xmmword_10048A9F0 = v22;
        __cxa_guard_release(qword_10048AA00);
        v13 = v34;
        v12 = v38;
        v8 = v42;
        a1 = v46;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v62;
        v6 = v50;
        LODWORD(result) = v58;
        a5 = v54;
      }
    }
    v15 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v15 & 1) == 0)
    {
      v59 = result;
      v55 = a5;
      v51 = v6;
      v63 = v9;
      v47 = a1;
      v39 = v12;
      v43 = v8;
      v35 = v13;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v13 = v35;
      v12 = v39;
      v8 = v43;
      *(_QWORD *)&v24 = 0x3F0000003F000000;
      *((_QWORD *)&v24 + 1) = 0x3F0000003F000000;
      a1 = v47;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v63;
      v6 = v51;
      a5 = v55;
      v25 = result;
      LODWORD(result) = v59;
      if (v25)
      {
        xmmword_10048AA10 = v24;
        __cxa_guard_release(qword_10048AA20);
        v13 = v35;
        v12 = v39;
        v8 = v43;
        a1 = v47;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v63;
        v6 = v51;
        LODWORD(result) = v59;
        a5 = v55;
      }
    }
    v16 = v11[161];
    v17 = v10[159];
    v18 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v18 & 1) == 0)
    {
      v60 = result;
      v56 = a5;
      v52 = v6;
      v64 = v9;
      v48 = a1;
      v40 = v12;
      v44 = v8;
      v32 = v11[161];
      v36 = v13;
      v30 = v10[159];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v17 = v30;
      v16 = v32;
      v13 = v36;
      v12 = v40;
      *(_QWORD *)&v26 = 0x8000000080000000;
      *((_QWORD *)&v26 + 1) = 0x8000000080000000;
      v8 = v44;
      a1 = v48;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v64;
      v6 = v52;
      a5 = v56;
      v27 = result;
      LODWORD(result) = v60;
      if (v27)
      {
        xmmword_10048A9F0 = v26;
        __cxa_guard_release(qword_10048AA00);
        v17 = v30;
        v16 = v32;
        v13 = v36;
        v12 = v40;
        v8 = v44;
        a1 = v48;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v64;
        v6 = v52;
        LODWORD(result) = v60;
        a5 = v56;
      }
    }
    v19 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v19 & 1) == 0)
    {
      v61 = result;
      v57 = a5;
      v53 = v6;
      v65 = v9;
      v49 = a1;
      v41 = v12;
      v45 = v8;
      v33 = v16;
      v37 = v13;
      v31 = v17;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v17 = v31;
      v16 = v33;
      v13 = v37;
      v12 = v41;
      v8 = v45;
      *(_QWORD *)&v28 = 0x3F0000003F000000;
      *((_QWORD *)&v28 + 1) = 0x3F0000003F000000;
      a1 = v49;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v65;
      v6 = v53;
      a5 = v57;
      v29 = result;
      LODWORD(result) = v61;
      if (v29)
      {
        xmmword_10048AA10 = v28;
        __cxa_guard_release(qword_10048AA20);
        v17 = v31;
        v16 = v33;
        v13 = v37;
        v12 = v41;
        v8 = v45;
        a1 = v49;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v65;
        v6 = v53;
        LODWORD(result) = v61;
        a5 = v57;
      }
    }
    v20 = vaddq_f32(v8, vmulq_n_f32(v12, a1.n128_f32[0]));
    v21 = vaddq_f32(v8, vmulq_n_f32(v13, a1.n128_f32[0]));
    *a5++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v20), v16)))), vcvtq_s32_f32(vaddq_f32(v21, (float32x4_t)vorrq_s8(vandq_s8(v10[159], (int8x16_t)v21), v11[161]))));
    v9 += 2;
    result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_1002147CC(float a1, float a2, double a3, double a4, double a5, __n128 a6, uint64_t a7, float64x2_t *a8, int16x8_t *a9, int a10)
{
  int v10;
  uint64_t result;
  float64x2_t v12;
  float64x2_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  float32x4_t v26;
  float32x4_t v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int16x8_t *v68;
  int16x8_t *v69;
  int16x8_t *v70;
  int16x8_t *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  float64x2_t *v76;
  float64x2_t *v77;
  float64x2_t *v78;
  float64x2_t *v79;

  v10 = a10 - 8;
  if (a10 < 8)
    return 0;
  LODWORD(result) = 0;
  v12 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2), 0);
  a6.n128_f64[0] = a1;
  v13 = a8 + 2;
  v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v16 = v13[-2];
    v17 = v13[-1];
    v18 = *v13;
    v19 = v13[1];
    v20 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v20 & 1) == 0)
    {
      v72 = result;
      v68 = a9;
      v64 = v10;
      v76 = v13;
      v56 = a6;
      v60 = v12;
      v48 = v13[-1];
      v52 = v13[-2];
      v40 = v13[1];
      v44 = *v13;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v19 = v40;
      v18 = v44;
      v17 = v48;
      v16 = v52;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      a6 = v56;
      v12 = v60;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = v76;
      v10 = v64;
      a9 = v68;
      v29 = result;
      LODWORD(result) = v72;
      if (v29)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        v19 = v40;
        v18 = v44;
        v17 = v48;
        v16 = v52;
        a6 = v56;
        v12 = v60;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = v76;
        v10 = v64;
        LODWORD(result) = v72;
        a9 = v68;
      }
    }
    v21 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v21 & 1) == 0)
    {
      v73 = result;
      v69 = a9;
      v65 = v10;
      v77 = v13;
      v57 = a6;
      v61 = v12;
      v49 = v17;
      v53 = v16;
      v41 = v19;
      v45 = v18;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v19 = v41;
      v18 = v45;
      v17 = v49;
      v16 = v53;
      a6 = v57;
      v12 = v61;
      *(_QWORD *)&v30 = 0x3F0000003F000000;
      *((_QWORD *)&v30 + 1) = 0x3F0000003F000000;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = v77;
      v10 = v65;
      a9 = v69;
      v31 = result;
      LODWORD(result) = v73;
      if (v31)
      {
        xmmword_10048AA10 = v30;
        __cxa_guard_release(qword_10048AA20);
        v19 = v41;
        v18 = v45;
        v17 = v49;
        v16 = v53;
        a6 = v57;
        v12 = v61;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = v77;
        v10 = v65;
        LODWORD(result) = v73;
        a9 = v69;
      }
    }
    v22 = v15[161];
    v23 = v14[159];
    v24 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v24 & 1) == 0)
    {
      v74 = result;
      v70 = a9;
      v66 = v10;
      v78 = v13;
      v58 = a6;
      v62 = v12;
      v50 = v17;
      v54 = v16;
      v42 = v19;
      v46 = v18;
      v36 = v14[159];
      v38 = v15[161];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v23 = v36;
      v22 = v38;
      v19 = v42;
      v18 = v46;
      v17 = v50;
      v16 = v54;
      *(_QWORD *)&v32 = 0x8000000080000000;
      *((_QWORD *)&v32 + 1) = 0x8000000080000000;
      a6 = v58;
      v12 = v62;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = v78;
      v10 = v66;
      a9 = v70;
      v33 = result;
      LODWORD(result) = v74;
      if (v33)
      {
        xmmword_10048A9F0 = v32;
        __cxa_guard_release(qword_10048AA00);
        v23 = v36;
        v22 = v38;
        v19 = v42;
        v18 = v46;
        v17 = v50;
        v16 = v54;
        a6 = v58;
        v12 = v62;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = v78;
        v10 = v66;
        LODWORD(result) = v74;
        a9 = v70;
      }
    }
    v25 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v25 & 1) == 0)
    {
      v75 = result;
      v71 = a9;
      v67 = v10;
      v79 = v13;
      v59 = a6;
      v63 = v12;
      v51 = v17;
      v55 = v16;
      v43 = v19;
      v47 = v18;
      v37 = v23;
      v39 = v22;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v23 = v37;
      v22 = v39;
      v19 = v43;
      v18 = v47;
      v17 = v51;
      v16 = v55;
      a6 = v59;
      v12 = v63;
      *(_QWORD *)&v34 = 0x3F0000003F000000;
      *((_QWORD *)&v34 + 1) = 0x3F0000003F000000;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = v79;
      v10 = v67;
      a9 = v71;
      v35 = result;
      LODWORD(result) = v75;
      if (v35)
      {
        xmmword_10048AA10 = v34;
        __cxa_guard_release(qword_10048AA20);
        v23 = v37;
        v22 = v39;
        v19 = v43;
        v18 = v47;
        v17 = v51;
        v16 = v55;
        a6 = v59;
        v12 = v63;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = v79;
        v10 = v67;
        LODWORD(result) = v75;
        a9 = v71;
      }
    }
    v26 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v16, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v17, a6.n128_f64[0])));
    v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v18, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v19, a6.n128_f64[0])));
    *a9++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32(v26, (float32x4_t)vorrq_s8(vandq_s8(v23, (int8x16_t)v26), v22)))), vcvtq_s32_f32(vaddq_f32(v27, (float32x4_t)vorrq_s8(vandq_s8(v14[159], (int8x16_t)v27), v15[161]))));
    v13 += 4;
    result = (result + 8);
  }
  while (v10 >= (int)result);
  return result;
}

uint64_t sub_100214BA0(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  uint8x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint16x8_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int16x8_t *v49;
  int16x8_t *v50;
  int16x8_t *v51;
  int16x8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint8x8_t v61;
  uint8x8_t v62;
  uint8x8_t v63;
  uint8x8_t v64;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *(uint8x8_t *)(a4 + result);
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v49 = a5;
      v53 = result;
      v45 = a4;
      v57 = v6;
      v61 = *(uint8x8_t *)(a4 + result);
      v37 = v8;
      v41 = a1;
      v21 = __cxa_guard_acquire(qword_10048AA00);
      v8 = v37;
      a1 = v41;
      *(_QWORD *)&v22 = 0x8000000080000000;
      *((_QWORD *)&v22 + 1) = 0x8000000080000000;
      v11 = v61;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v57;
      a4 = v45;
      a5 = v49;
      v23 = v21;
      result = v53;
      if (v23)
      {
        xmmword_10048A9F0 = v22;
        __cxa_guard_release(qword_10048AA00);
        v8 = v37;
        a1 = v41;
        v11 = v61;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v57;
        a4 = v45;
        a5 = v49;
        result = v53;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v50 = a5;
      v54 = result;
      v46 = a4;
      v58 = v6;
      v62 = v11;
      v38 = v8;
      v42 = a1;
      v24 = __cxa_guard_acquire(qword_10048AA20);
      v8 = v38;
      a1 = v42;
      *(_QWORD *)&v25 = 0x3F0000003F000000;
      *((_QWORD *)&v25 + 1) = 0x3F0000003F000000;
      v11 = v62;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v58;
      a4 = v46;
      a5 = v50;
      v26 = v24;
      result = v54;
      if (v26)
      {
        xmmword_10048AA10 = v25;
        __cxa_guard_release(qword_10048AA20);
        v8 = v38;
        a1 = v42;
        v11 = v62;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v58;
        a4 = v46;
        a5 = v50;
        result = v54;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v51 = a5;
      v55 = result;
      v47 = a4;
      v59 = v6;
      v63 = v11;
      v39 = v8;
      v43 = a1;
      v33 = v9[159];
      v35 = v10[161];
      v27 = __cxa_guard_acquire(qword_10048AA00);
      v15 = v33;
      v14 = v35;
      v8 = v39;
      a1 = v43;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      v11 = v63;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v59;
      a4 = v47;
      a5 = v51;
      v29 = v27;
      result = v55;
      if (v29)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        v15 = v33;
        v14 = v35;
        v8 = v39;
        a1 = v43;
        v11 = v63;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v59;
        a4 = v47;
        a5 = v51;
        result = v55;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v52 = a5;
      v56 = result;
      v48 = a4;
      v60 = v6;
      v64 = v11;
      v40 = v8;
      v44 = a1;
      v34 = v15;
      v36 = v14;
      v30 = __cxa_guard_acquire(qword_10048AA20);
      v15 = v34;
      v14 = v36;
      v8 = v40;
      a1 = v44;
      *(_QWORD *)&v31 = 0x3F0000003F000000;
      *((_QWORD *)&v31 + 1) = 0x3F0000003F000000;
      v11 = v64;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a4 = v48;
      a5 = v52;
      v32 = v30;
      result = v56;
      if (v32)
      {
        xmmword_10048AA10 = v31;
        __cxa_guard_release(qword_10048AA20);
        v15 = v34;
        v14 = v36;
        v8 = v40;
        a1 = v44;
        v11 = v64;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v60;
        a4 = v48;
        a5 = v52;
        result = v56;
      }
    }
    v18 = vmovl_u8(v11);
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v18.i8)), a1.n128_f32[0]));
    v20 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v18)), a1.n128_f32[0]));
    *a5++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v19), v14)))), vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v20), v10[161]))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100214EF4(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int16x8_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int16x8_t *v49;
  int16x8_t *v50;
  int16x8_t *v51;
  int16x8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int8x8_t v61;
  int8x8_t v62;
  int8x8_t v63;
  int8x8_t v64;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  result = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *(int8x8_t *)(a4 + result);
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v49 = a5;
      v53 = result;
      v45 = a4;
      v57 = v6;
      v61 = *(int8x8_t *)(a4 + result);
      v37 = v8;
      v41 = a1;
      v21 = __cxa_guard_acquire(qword_10048AA00);
      v8 = v37;
      a1 = v41;
      *(_QWORD *)&v22 = 0x8000000080000000;
      *((_QWORD *)&v22 + 1) = 0x8000000080000000;
      v11 = v61;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v57;
      a4 = v45;
      a5 = v49;
      v23 = v21;
      result = v53;
      if (v23)
      {
        xmmword_10048A9F0 = v22;
        __cxa_guard_release(qword_10048AA00);
        v8 = v37;
        a1 = v41;
        v11 = v61;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v57;
        a4 = v45;
        a5 = v49;
        result = v53;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v50 = a5;
      v54 = result;
      v46 = a4;
      v58 = v6;
      v62 = v11;
      v38 = v8;
      v42 = a1;
      v24 = __cxa_guard_acquire(qword_10048AA20);
      v8 = v38;
      a1 = v42;
      *(_QWORD *)&v25 = 0x3F0000003F000000;
      *((_QWORD *)&v25 + 1) = 0x3F0000003F000000;
      v11 = v62;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v58;
      a4 = v46;
      a5 = v50;
      v26 = v24;
      result = v54;
      if (v26)
      {
        xmmword_10048AA10 = v25;
        __cxa_guard_release(qword_10048AA20);
        v8 = v38;
        a1 = v42;
        v11 = v62;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v58;
        a4 = v46;
        a5 = v50;
        result = v54;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v51 = a5;
      v55 = result;
      v47 = a4;
      v59 = v6;
      v63 = v11;
      v39 = v8;
      v43 = a1;
      v33 = v9[159];
      v35 = v10[161];
      v27 = __cxa_guard_acquire(qword_10048AA00);
      v15 = v33;
      v14 = v35;
      v8 = v39;
      a1 = v43;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      v11 = v63;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v59;
      a4 = v47;
      a5 = v51;
      v29 = v27;
      result = v55;
      if (v29)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        v15 = v33;
        v14 = v35;
        v8 = v39;
        a1 = v43;
        v11 = v63;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v59;
        a4 = v47;
        a5 = v51;
        result = v55;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v52 = a5;
      v56 = result;
      v48 = a4;
      v60 = v6;
      v64 = v11;
      v40 = v8;
      v44 = a1;
      v34 = v15;
      v36 = v14;
      v30 = __cxa_guard_acquire(qword_10048AA20);
      v15 = v34;
      v14 = v36;
      v8 = v40;
      a1 = v44;
      *(_QWORD *)&v31 = 0x3F0000003F000000;
      *((_QWORD *)&v31 + 1) = 0x3F0000003F000000;
      v11 = v64;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v6 = v60;
      a4 = v48;
      a5 = v52;
      v32 = v30;
      result = v56;
      if (v32)
      {
        xmmword_10048AA10 = v31;
        __cxa_guard_release(qword_10048AA20);
        v15 = v34;
        v14 = v36;
        v8 = v40;
        a1 = v44;
        v11 = v64;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v6 = v60;
        a4 = v48;
        a5 = v52;
        result = v56;
      }
    }
    v18 = vmovl_s8(v11);
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v18.i8)), a1.n128_f32[0]));
    v20 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v18)), a1.n128_f32[0]));
    *a5++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v19), v14)))), vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v20), v10[161]))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100215248(__n128 a1, int32x2_t a2, uint64_t a3, uint16x8_t *a4, int16x8_t *a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  uint16x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  float32x4_t v18;
  float32x4_t v19;
  __int128 v20;
  int v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  uint16x8_t *v44;
  uint16x8_t *v45;
  uint16x8_t *v46;
  uint16x8_t *v47;
  int16x8_t *v48;
  int16x8_t *v49;
  int16x8_t *v50;
  int16x8_t *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  LODWORD(result) = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *a4;
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v52 = result;
      v56 = v6;
      v44 = a4;
      v48 = a5;
      v40 = a1;
      v32 = *a4;
      v36 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v11 = v32;
      v8 = v36;
      *(_QWORD *)&v20 = 0x8000000080000000;
      *((_QWORD *)&v20 + 1) = 0x8000000080000000;
      a1 = v40;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v44;
      a5 = v48;
      v21 = result;
      LODWORD(result) = v52;
      v6 = v56;
      if (v21)
      {
        xmmword_10048A9F0 = v20;
        __cxa_guard_release(qword_10048AA00);
        v11 = v32;
        v8 = v36;
        a1 = v40;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v52;
        v6 = v56;
        a4 = v44;
        a5 = v48;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v53 = result;
      v57 = v6;
      v45 = a4;
      v49 = a5;
      v41 = a1;
      v33 = v11;
      v37 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v11 = v33;
      v8 = v37;
      *(_QWORD *)&v22 = 0x3F0000003F000000;
      *((_QWORD *)&v22 + 1) = 0x3F0000003F000000;
      a1 = v41;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v45;
      a5 = v49;
      v23 = result;
      LODWORD(result) = v53;
      v6 = v57;
      if (v23)
      {
        xmmword_10048AA10 = v22;
        __cxa_guard_release(qword_10048AA20);
        v11 = v33;
        v8 = v37;
        a1 = v41;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v53;
        v6 = v57;
        a4 = v45;
        a5 = v49;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v54 = result;
      v58 = v6;
      v46 = a4;
      v50 = a5;
      v42 = a1;
      v34 = v11;
      v38 = v8;
      v28 = v9[159];
      v30 = v10[161];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v15 = v28;
      v14 = v30;
      v11 = v34;
      v8 = v38;
      *(_QWORD *)&v24 = 0x8000000080000000;
      *((_QWORD *)&v24 + 1) = 0x8000000080000000;
      a1 = v42;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v46;
      a5 = v50;
      v25 = result;
      LODWORD(result) = v54;
      v6 = v58;
      if (v25)
      {
        xmmword_10048A9F0 = v24;
        __cxa_guard_release(qword_10048AA00);
        v15 = v28;
        v14 = v30;
        v11 = v34;
        v8 = v38;
        a1 = v42;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v54;
        v6 = v58;
        a4 = v46;
        a5 = v50;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v55 = result;
      v59 = v6;
      v47 = a4;
      v51 = a5;
      v43 = a1;
      v35 = v11;
      v39 = v8;
      v29 = v15;
      v31 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v15 = v29;
      v14 = v31;
      v11 = v35;
      v8 = v39;
      *(_QWORD *)&v26 = 0x3F0000003F000000;
      *((_QWORD *)&v26 + 1) = 0x3F0000003F000000;
      a1 = v43;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v47;
      a5 = v51;
      v27 = result;
      LODWORD(result) = v55;
      v6 = v59;
      if (v27)
      {
        xmmword_10048AA10 = v26;
        __cxa_guard_release(qword_10048AA20);
        v15 = v29;
        v14 = v31;
        v11 = v35;
        v8 = v39;
        a1 = v43;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v55;
        v6 = v59;
        a4 = v47;
        a5 = v51;
      }
    }
    v18 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v11.i8)), a1.n128_f32[0]));
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v11)), a1.n128_f32[0]));
    *a5++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v18), v14)))), vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v19), v10[161]))));
    ++a4;
    result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10021556C(__n128 a1, int32x2_t a2, uint64_t a3, int16x8_t *a4, int16x8_t *a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int16x8_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  float32x4_t v18;
  float32x4_t v19;
  __int128 v20;
  int v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  int16x8_t *v44;
  int16x8_t *v45;
  int16x8_t *v46;
  int16x8_t *v47;
  int16x8_t *v48;
  int16x8_t *v49;
  int16x8_t *v50;
  int16x8_t *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  LODWORD(result) = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v11 = *a4;
    v12 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v12 & 1) == 0)
    {
      v52 = result;
      v56 = v6;
      v44 = a4;
      v48 = a5;
      v40 = a1;
      v32 = *a4;
      v36 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v11 = v32;
      v8 = v36;
      *(_QWORD *)&v20 = 0x8000000080000000;
      *((_QWORD *)&v20 + 1) = 0x8000000080000000;
      a1 = v40;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v44;
      a5 = v48;
      v21 = result;
      LODWORD(result) = v52;
      v6 = v56;
      if (v21)
      {
        xmmword_10048A9F0 = v20;
        __cxa_guard_release(qword_10048AA00);
        v11 = v32;
        v8 = v36;
        a1 = v40;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v52;
        v6 = v56;
        a4 = v44;
        a5 = v48;
      }
    }
    v13 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v13 & 1) == 0)
    {
      v53 = result;
      v57 = v6;
      v45 = a4;
      v49 = a5;
      v41 = a1;
      v33 = v11;
      v37 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v11 = v33;
      v8 = v37;
      *(_QWORD *)&v22 = 0x3F0000003F000000;
      *((_QWORD *)&v22 + 1) = 0x3F0000003F000000;
      a1 = v41;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v45;
      a5 = v49;
      v23 = result;
      LODWORD(result) = v53;
      v6 = v57;
      if (v23)
      {
        xmmword_10048AA10 = v22;
        __cxa_guard_release(qword_10048AA20);
        v11 = v33;
        v8 = v37;
        a1 = v41;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v53;
        v6 = v57;
        a4 = v45;
        a5 = v49;
      }
    }
    v14 = v10[161];
    v15 = v9[159];
    v16 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v16 & 1) == 0)
    {
      v54 = result;
      v58 = v6;
      v46 = a4;
      v50 = a5;
      v42 = a1;
      v34 = v11;
      v38 = v8;
      v28 = v9[159];
      v30 = v10[161];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v15 = v28;
      v14 = v30;
      v11 = v34;
      v8 = v38;
      *(_QWORD *)&v24 = 0x8000000080000000;
      *((_QWORD *)&v24 + 1) = 0x8000000080000000;
      a1 = v42;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v46;
      a5 = v50;
      v25 = result;
      LODWORD(result) = v54;
      v6 = v58;
      if (v25)
      {
        xmmword_10048A9F0 = v24;
        __cxa_guard_release(qword_10048AA00);
        v15 = v28;
        v14 = v30;
        v11 = v34;
        v8 = v38;
        a1 = v42;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v54;
        v6 = v58;
        a4 = v46;
        a5 = v50;
      }
    }
    v17 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v17 & 1) == 0)
    {
      v55 = result;
      v59 = v6;
      v47 = a4;
      v51 = a5;
      v43 = a1;
      v35 = v11;
      v39 = v8;
      v29 = v15;
      v31 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v15 = v29;
      v14 = v31;
      v11 = v35;
      v8 = v39;
      *(_QWORD *)&v26 = 0x3F0000003F000000;
      *((_QWORD *)&v26 + 1) = 0x3F0000003F000000;
      a1 = v43;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      a4 = v47;
      a5 = v51;
      v27 = result;
      LODWORD(result) = v55;
      v6 = v59;
      if (v27)
      {
        xmmword_10048AA10 = v26;
        __cxa_guard_release(qword_10048AA20);
        v15 = v29;
        v14 = v31;
        v11 = v35;
        v8 = v39;
        a1 = v43;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        LODWORD(result) = v55;
        v6 = v59;
        a4 = v47;
        a5 = v51;
      }
    }
    v18 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v11.i8)), a1.n128_f32[0]));
    v19 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v11)), a1.n128_f32[0]));
    *a5++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v15, (int8x16_t)v18), v14)))), vcvtq_s32_f32(vaddq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v9[159], (int8x16_t)v19), v10[161]))));
    ++a4;
    result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100215890(__n128 a1, int32x2_t a2, uint64_t a3, int32x4_t *a4, int16x8_t *a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  int32x4_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int32x4_t v12;
  int32x4_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  int8x16_t v16;
  int8x16_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  float32x4_t v20;
  float32x4_t v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int16x8_t *v54;
  int16x8_t *v55;
  int16x8_t *v56;
  int16x8_t *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int32x4_t *v62;
  int32x4_t *v63;
  int32x4_t *v64;
  int32x4_t *v65;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  LODWORD(result) = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = a4 + 1;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v13 = v9[-1];
    v12 = *v9;
    v14 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v14 & 1) == 0)
    {
      v58 = result;
      v54 = a5;
      v50 = v6;
      v62 = v9;
      v46 = a1;
      v38 = *v9;
      v42 = v8;
      v34 = v9[-1];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v13 = v34;
      v12 = v38;
      *(_QWORD *)&v22 = 0x8000000080000000;
      *((_QWORD *)&v22 + 1) = 0x8000000080000000;
      v8 = v42;
      a1 = v46;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v62;
      v6 = v50;
      a5 = v54;
      v23 = result;
      LODWORD(result) = v58;
      if (v23)
      {
        xmmword_10048A9F0 = v22;
        __cxa_guard_release(qword_10048AA00);
        v13 = v34;
        v12 = v38;
        v8 = v42;
        a1 = v46;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v62;
        v6 = v50;
        LODWORD(result) = v58;
        a5 = v54;
      }
    }
    v15 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v15 & 1) == 0)
    {
      v59 = result;
      v55 = a5;
      v51 = v6;
      v63 = v9;
      v47 = a1;
      v39 = v12;
      v43 = v8;
      v35 = v13;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v13 = v35;
      v12 = v39;
      v8 = v43;
      *(_QWORD *)&v24 = 0x3F0000003F000000;
      *((_QWORD *)&v24 + 1) = 0x3F0000003F000000;
      a1 = v47;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v63;
      v6 = v51;
      a5 = v55;
      v25 = result;
      LODWORD(result) = v59;
      if (v25)
      {
        xmmword_10048AA10 = v24;
        __cxa_guard_release(qword_10048AA20);
        v13 = v35;
        v12 = v39;
        v8 = v43;
        a1 = v47;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v63;
        v6 = v51;
        LODWORD(result) = v59;
        a5 = v55;
      }
    }
    v16 = v11[161];
    v17 = v10[159];
    v18 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v18 & 1) == 0)
    {
      v60 = result;
      v56 = a5;
      v52 = v6;
      v64 = v9;
      v48 = a1;
      v40 = v12;
      v44 = v8;
      v32 = v11[161];
      v36 = v13;
      v30 = v10[159];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v17 = v30;
      v16 = v32;
      v13 = v36;
      v12 = v40;
      *(_QWORD *)&v26 = 0x8000000080000000;
      *((_QWORD *)&v26 + 1) = 0x8000000080000000;
      v8 = v44;
      a1 = v48;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v64;
      v6 = v52;
      a5 = v56;
      v27 = result;
      LODWORD(result) = v60;
      if (v27)
      {
        xmmword_10048A9F0 = v26;
        __cxa_guard_release(qword_10048AA00);
        v17 = v30;
        v16 = v32;
        v13 = v36;
        v12 = v40;
        v8 = v44;
        a1 = v48;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v64;
        v6 = v52;
        LODWORD(result) = v60;
        a5 = v56;
      }
    }
    v19 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v19 & 1) == 0)
    {
      v61 = result;
      v57 = a5;
      v53 = v6;
      v65 = v9;
      v49 = a1;
      v41 = v12;
      v45 = v8;
      v33 = v16;
      v37 = v13;
      v31 = v17;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v17 = v31;
      v16 = v33;
      v13 = v37;
      v12 = v41;
      v8 = v45;
      *(_QWORD *)&v28 = 0x3F0000003F000000;
      *((_QWORD *)&v28 + 1) = 0x3F0000003F000000;
      a1 = v49;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v65;
      v6 = v53;
      a5 = v57;
      v29 = result;
      LODWORD(result) = v61;
      if (v29)
      {
        xmmword_10048AA10 = v28;
        __cxa_guard_release(qword_10048AA20);
        v17 = v31;
        v16 = v33;
        v13 = v37;
        v12 = v41;
        v8 = v45;
        a1 = v49;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v65;
        v6 = v53;
        LODWORD(result) = v61;
        a5 = v57;
      }
    }
    v20 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v13), a1.n128_f32[0]));
    v21 = vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v12), a1.n128_f32[0]));
    *a5++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v20), v16)))), vcvtq_s32_f32(vaddq_f32(v21, (float32x4_t)vorrq_s8(vandq_s8(v10[159], (int8x16_t)v21), v11[161]))));
    v9 += 2;
    result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100215C40(__n128 a1, int32x2_t a2, uint64_t a3, float32x4_t *a4, int16x8_t *a5, int a6)
{
  int v6;
  uint64_t result;
  float32x4_t v8;
  float32x4_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  int8x16_t v16;
  int8x16_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  float32x4_t v20;
  float32x4_t v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int16x8_t *v54;
  int16x8_t *v55;
  int16x8_t *v56;
  int16x8_t *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  float32x4_t *v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float32x4_t *v65;

  v6 = a6 - 8;
  if (a6 < 8)
    return 0;
  LODWORD(result) = 0;
  v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v9 = a4 + 1;
  v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v12 = v9[-1];
    v13 = *v9;
    v14 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v14 & 1) == 0)
    {
      v58 = result;
      v54 = a5;
      v50 = v6;
      v62 = v9;
      v46 = a1;
      v38 = v9[-1];
      v42 = v8;
      v34 = *v9;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v13 = v34;
      v12 = v38;
      *(_QWORD *)&v22 = 0x8000000080000000;
      *((_QWORD *)&v22 + 1) = 0x8000000080000000;
      v8 = v42;
      a1 = v46;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v62;
      v6 = v50;
      a5 = v54;
      v23 = result;
      LODWORD(result) = v58;
      if (v23)
      {
        xmmword_10048A9F0 = v22;
        __cxa_guard_release(qword_10048AA00);
        v13 = v34;
        v12 = v38;
        v8 = v42;
        a1 = v46;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v62;
        v6 = v50;
        LODWORD(result) = v58;
        a5 = v54;
      }
    }
    v15 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v15 & 1) == 0)
    {
      v59 = result;
      v55 = a5;
      v51 = v6;
      v63 = v9;
      v47 = a1;
      v39 = v12;
      v43 = v8;
      v35 = v13;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v13 = v35;
      v12 = v39;
      v8 = v43;
      *(_QWORD *)&v24 = 0x3F0000003F000000;
      *((_QWORD *)&v24 + 1) = 0x3F0000003F000000;
      a1 = v47;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v63;
      v6 = v51;
      a5 = v55;
      v25 = result;
      LODWORD(result) = v59;
      if (v25)
      {
        xmmword_10048AA10 = v24;
        __cxa_guard_release(qword_10048AA20);
        v13 = v35;
        v12 = v39;
        v8 = v43;
        a1 = v47;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v63;
        v6 = v51;
        LODWORD(result) = v59;
        a5 = v55;
      }
    }
    v16 = v11[161];
    v17 = v10[159];
    v18 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v18 & 1) == 0)
    {
      v60 = result;
      v56 = a5;
      v52 = v6;
      v64 = v9;
      v48 = a1;
      v40 = v12;
      v44 = v8;
      v32 = v11[161];
      v36 = v13;
      v30 = v10[159];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v17 = v30;
      v16 = v32;
      v13 = v36;
      v12 = v40;
      *(_QWORD *)&v26 = 0x8000000080000000;
      *((_QWORD *)&v26 + 1) = 0x8000000080000000;
      v8 = v44;
      a1 = v48;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v64;
      v6 = v52;
      a5 = v56;
      v27 = result;
      LODWORD(result) = v60;
      if (v27)
      {
        xmmword_10048A9F0 = v26;
        __cxa_guard_release(qword_10048AA00);
        v17 = v30;
        v16 = v32;
        v13 = v36;
        v12 = v40;
        v8 = v44;
        a1 = v48;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v64;
        v6 = v52;
        LODWORD(result) = v60;
        a5 = v56;
      }
    }
    v19 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v19 & 1) == 0)
    {
      v61 = result;
      v57 = a5;
      v53 = v6;
      v65 = v9;
      v49 = a1;
      v41 = v12;
      v45 = v8;
      v33 = v16;
      v37 = v13;
      v31 = v17;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v17 = v31;
      v16 = v33;
      v13 = v37;
      v12 = v41;
      v8 = v45;
      *(_QWORD *)&v28 = 0x3F0000003F000000;
      *((_QWORD *)&v28 + 1) = 0x3F0000003F000000;
      a1 = v49;
      v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v9 = v65;
      v6 = v53;
      a5 = v57;
      v29 = result;
      LODWORD(result) = v61;
      if (v29)
      {
        xmmword_10048AA10 = v28;
        __cxa_guard_release(qword_10048AA20);
        v17 = v31;
        v16 = v33;
        v13 = v37;
        v12 = v41;
        v8 = v45;
        a1 = v49;
        v11 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v9 = v65;
        v6 = v53;
        LODWORD(result) = v61;
        a5 = v57;
      }
    }
    v20 = vaddq_f32(v8, vmulq_n_f32(v12, a1.n128_f32[0]));
    v21 = vaddq_f32(v8, vmulq_n_f32(v13, a1.n128_f32[0]));
    *a5++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v20), v16)))), vcvtq_s32_f32(vaddq_f32(v21, (float32x4_t)vorrq_s8(vandq_s8(v10[159], (int8x16_t)v21), v11[161]))));
    v9 += 2;
    result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100215FE8(float a1, float a2, double a3, double a4, double a5, __n128 a6, uint64_t a7, float64x2_t *a8, int16x8_t *a9, int a10)
{
  int v10;
  uint64_t result;
  float64x2_t v12;
  float64x2_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  float32x4_t v26;
  float32x4_t v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int16x8_t *v68;
  int16x8_t *v69;
  int16x8_t *v70;
  int16x8_t *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  float64x2_t *v76;
  float64x2_t *v77;
  float64x2_t *v78;
  float64x2_t *v79;

  v10 = a10 - 8;
  if (a10 < 8)
    return 0;
  LODWORD(result) = 0;
  v12 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2), 0);
  a6.n128_f64[0] = a1;
  v13 = a8 + 2;
  v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v16 = v13[-2];
    v17 = v13[-1];
    v18 = *v13;
    v19 = v13[1];
    v20 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v20 & 1) == 0)
    {
      v72 = result;
      v68 = a9;
      v64 = v10;
      v76 = v13;
      v56 = a6;
      v60 = v12;
      v48 = v13[-1];
      v52 = v13[-2];
      v40 = v13[1];
      v44 = *v13;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v19 = v40;
      v18 = v44;
      v17 = v48;
      v16 = v52;
      *(_QWORD *)&v28 = 0x8000000080000000;
      *((_QWORD *)&v28 + 1) = 0x8000000080000000;
      a6 = v56;
      v12 = v60;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = v76;
      v10 = v64;
      a9 = v68;
      v29 = result;
      LODWORD(result) = v72;
      if (v29)
      {
        xmmword_10048A9F0 = v28;
        __cxa_guard_release(qword_10048AA00);
        v19 = v40;
        v18 = v44;
        v17 = v48;
        v16 = v52;
        a6 = v56;
        v12 = v60;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = v76;
        v10 = v64;
        LODWORD(result) = v72;
        a9 = v68;
      }
    }
    v21 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v21 & 1) == 0)
    {
      v73 = result;
      v69 = a9;
      v65 = v10;
      v77 = v13;
      v57 = a6;
      v61 = v12;
      v49 = v17;
      v53 = v16;
      v41 = v19;
      v45 = v18;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v19 = v41;
      v18 = v45;
      v17 = v49;
      v16 = v53;
      a6 = v57;
      v12 = v61;
      *(_QWORD *)&v30 = 0x3F0000003F000000;
      *((_QWORD *)&v30 + 1) = 0x3F0000003F000000;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = v77;
      v10 = v65;
      a9 = v69;
      v31 = result;
      LODWORD(result) = v73;
      if (v31)
      {
        xmmword_10048AA10 = v30;
        __cxa_guard_release(qword_10048AA20);
        v19 = v41;
        v18 = v45;
        v17 = v49;
        v16 = v53;
        a6 = v57;
        v12 = v61;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = v77;
        v10 = v65;
        LODWORD(result) = v73;
        a9 = v69;
      }
    }
    v22 = v15[161];
    v23 = v14[159];
    v24 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v24 & 1) == 0)
    {
      v74 = result;
      v70 = a9;
      v66 = v10;
      v78 = v13;
      v58 = a6;
      v62 = v12;
      v50 = v17;
      v54 = v16;
      v42 = v19;
      v46 = v18;
      v36 = v14[159];
      v38 = v15[161];
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v23 = v36;
      v22 = v38;
      v19 = v42;
      v18 = v46;
      v17 = v50;
      v16 = v54;
      *(_QWORD *)&v32 = 0x8000000080000000;
      *((_QWORD *)&v32 + 1) = 0x8000000080000000;
      a6 = v58;
      v12 = v62;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = v78;
      v10 = v66;
      a9 = v70;
      v33 = result;
      LODWORD(result) = v74;
      if (v33)
      {
        xmmword_10048A9F0 = v32;
        __cxa_guard_release(qword_10048AA00);
        v23 = v36;
        v22 = v38;
        v19 = v42;
        v18 = v46;
        v17 = v50;
        v16 = v54;
        a6 = v58;
        v12 = v62;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = v78;
        v10 = v66;
        LODWORD(result) = v74;
        a9 = v70;
      }
    }
    v25 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v25 & 1) == 0)
    {
      v75 = result;
      v71 = a9;
      v67 = v10;
      v79 = v13;
      v59 = a6;
      v63 = v12;
      v51 = v17;
      v55 = v16;
      v43 = v19;
      v47 = v18;
      v37 = v23;
      v39 = v22;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v23 = v37;
      v22 = v39;
      v19 = v43;
      v18 = v47;
      v17 = v51;
      v16 = v55;
      a6 = v59;
      v12 = v63;
      *(_QWORD *)&v34 = 0x3F0000003F000000;
      *((_QWORD *)&v34 + 1) = 0x3F0000003F000000;
      v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v13 = v79;
      v10 = v67;
      a9 = v71;
      v35 = result;
      LODWORD(result) = v75;
      if (v35)
      {
        xmmword_10048AA10 = v34;
        __cxa_guard_release(qword_10048AA20);
        v23 = v37;
        v22 = v39;
        v19 = v43;
        v18 = v47;
        v17 = v51;
        v16 = v55;
        a6 = v59;
        v12 = v63;
        v15 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v14 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v13 = v79;
        v10 = v67;
        LODWORD(result) = v75;
        a9 = v71;
      }
    }
    v26 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v16, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v17, a6.n128_f64[0])));
    v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v18, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v19, a6.n128_f64[0])));
    *a9++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v26, (float32x4_t)vorrq_s8(vandq_s8(v23, (int8x16_t)v26), v22)))), vcvtq_s32_f32(vaddq_f32(v27, (float32x4_t)vorrq_s8(vandq_s8(v14[159], (int8x16_t)v27), v15[161]))));
    v13 += 4;
    result = (result + 8);
  }
  while (v10 >= (int)result);
  return result;
}

uint64_t sub_1002163BC(float a1, int32x2_t a2, double a3, __n128 a4, uint64_t a5, uint64_t a6, int32x4_t *a7, int a8)
{
  int v8;
  uint64_t result;
  float32x4_t v10;
  int32x4_t *v11;
  int8x16_t *v12;
  int8x16_t *v13;
  uint8x8_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint16x8_t v17;
  float32x4_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  float32x4_t v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  __int128 v26;
  int v27;
  int v28;
  __int128 v29;
  int v30;
  int v31;
  __int128 v32;
  int v33;
  uint8x8_t v34;
  uint8x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int32x4_t *v58;
  int32x4_t *v59;
  int32x4_t *v60;
  int32x4_t *v61;

  v8 = a8 - 8;
  if (a8 < 8)
    return 0;
  a4.n128_f32[0] = a1;
  result = 0;
  v10 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v11 = a7 + 1;
  v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v14 = *(uint8x8_t *)(a6 + result);
    v15 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v15 & 1) == 0)
    {
      v54 = result;
      v58 = v11;
      v46 = a6;
      v50 = v8;
      v34 = *(uint8x8_t *)(a6 + result);
      v38 = v10;
      v42 = a4;
      v22 = __cxa_guard_acquire(qword_10048AA00);
      *(_QWORD *)&v23 = 0x8000000080000000;
      *((_QWORD *)&v23 + 1) = 0x8000000080000000;
      v10 = v38;
      a4 = v42;
      v14 = v34;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = v50;
      a6 = v46;
      v24 = v22;
      result = v54;
      v11 = v58;
      if (v24)
      {
        xmmword_10048A9F0 = v23;
        __cxa_guard_release(qword_10048AA00);
        v10 = v38;
        a4 = v42;
        v14 = v34;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v54;
        v11 = v58;
        v8 = v50;
        a6 = v46;
      }
    }
    v16 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v16 & 1) == 0)
    {
      v55 = result;
      v59 = v11;
      v47 = a6;
      v51 = v8;
      v35 = v14;
      v39 = v10;
      v43 = a4;
      v25 = __cxa_guard_acquire(qword_10048AA20);
      v10 = v39;
      a4 = v43;
      *(_QWORD *)&v26 = 0x3F0000003F000000;
      *((_QWORD *)&v26 + 1) = 0x3F0000003F000000;
      v14 = v35;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = v51;
      a6 = v47;
      v27 = v25;
      result = v55;
      v11 = v59;
      if (v27)
      {
        xmmword_10048AA10 = v26;
        __cxa_guard_release(qword_10048AA20);
        v10 = v39;
        a4 = v43;
        v14 = v35;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v55;
        v11 = v59;
        v8 = v51;
        a6 = v47;
      }
    }
    v17 = vmovl_u8(v14);
    v18 = vaddq_f32(v10, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v17.i8)), a4.n128_f32[0]));
    v11[-1] = vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v12[159], (int8x16_t)v18), v13[161])));
    v19 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v19 & 1) == 0)
    {
      v56 = result;
      v60 = v11;
      v48 = a6;
      v52 = v8;
      v40 = v10;
      v44 = a4;
      v36 = v17;
      v28 = __cxa_guard_acquire(qword_10048AA00);
      v17 = v36;
      v10 = v40;
      *(_QWORD *)&v29 = 0x8000000080000000;
      *((_QWORD *)&v29 + 1) = 0x8000000080000000;
      a4 = v44;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = v52;
      a6 = v48;
      v30 = v28;
      result = v56;
      v11 = v60;
      if (v30)
      {
        xmmword_10048A9F0 = v29;
        __cxa_guard_release(qword_10048AA00);
        v17 = v36;
        v10 = v40;
        a4 = v44;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v56;
        v11 = v60;
        v8 = v52;
        a6 = v48;
      }
    }
    v20 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v20 & 1) == 0)
    {
      v57 = result;
      v61 = v11;
      v49 = a6;
      v53 = v8;
      v41 = v10;
      v45 = a4;
      v37 = v17;
      v31 = __cxa_guard_acquire(qword_10048AA20);
      v17 = v37;
      v10 = v41;
      *(_QWORD *)&v32 = 0x3F0000003F000000;
      *((_QWORD *)&v32 + 1) = 0x3F0000003F000000;
      a4 = v45;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = v53;
      a6 = v49;
      v33 = v31;
      result = v57;
      v11 = v61;
      if (v33)
      {
        xmmword_10048AA10 = v32;
        __cxa_guard_release(qword_10048AA20);
        v17 = v37;
        v10 = v41;
        a4 = v45;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v57;
        v11 = v61;
        v8 = v53;
        a6 = v49;
      }
    }
    v21 = vaddq_f32(v10, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v17)), a4.n128_f32[0]));
    *v11 = vcvtq_s32_f32(vaddq_f32(v21, (float32x4_t)vorrq_s8(vandq_s8(v12[159], (int8x16_t)v21), v13[161])));
    v11 += 2;
    result += 8;
  }
  while (v8 >= (int)result);
  return result;
}

uint64_t sub_1002166FC(float a1, int32x2_t a2, double a3, __n128 a4, uint64_t a5, uint64_t a6, int32x4_t *a7, int a8)
{
  int v8;
  uint64_t result;
  float32x4_t v10;
  int32x4_t *v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x8_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  int16x8_t v17;
  float32x4_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  float32x4_t v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  __int128 v26;
  int v27;
  int v28;
  __int128 v29;
  int v30;
  int v31;
  __int128 v32;
  int v33;
  int8x8_t v34;
  int8x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int32x4_t *v58;
  int32x4_t *v59;
  int32x4_t *v60;
  int32x4_t *v61;

  v8 = a8 - 8;
  if (a8 < 8)
    return 0;
  a4.n128_f32[0] = a1;
  result = 0;
  v10 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v11 = a7 + 1;
  v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v14 = *(int8x8_t *)(a6 + result);
    v15 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v15 & 1) == 0)
    {
      v54 = result;
      v58 = v11;
      v46 = a6;
      v50 = v8;
      v34 = *(int8x8_t *)(a6 + result);
      v38 = v10;
      v42 = a4;
      v22 = __cxa_guard_acquire(qword_10048AA00);
      *(_QWORD *)&v23 = 0x8000000080000000;
      *((_QWORD *)&v23 + 1) = 0x8000000080000000;
      v10 = v38;
      a4 = v42;
      v14 = v34;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = v50;
      a6 = v46;
      v24 = v22;
      result = v54;
      v11 = v58;
      if (v24)
      {
        xmmword_10048A9F0 = v23;
        __cxa_guard_release(qword_10048AA00);
        v10 = v38;
        a4 = v42;
        v14 = v34;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v54;
        v11 = v58;
        v8 = v50;
        a6 = v46;
      }
    }
    v16 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v16 & 1) == 0)
    {
      v55 = result;
      v59 = v11;
      v47 = a6;
      v51 = v8;
      v35 = v14;
      v39 = v10;
      v43 = a4;
      v25 = __cxa_guard_acquire(qword_10048AA20);
      v10 = v39;
      a4 = v43;
      *(_QWORD *)&v26 = 0x3F0000003F000000;
      *((_QWORD *)&v26 + 1) = 0x3F0000003F000000;
      v14 = v35;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = v51;
      a6 = v47;
      v27 = v25;
      result = v55;
      v11 = v59;
      if (v27)
      {
        xmmword_10048AA10 = v26;
        __cxa_guard_release(qword_10048AA20);
        v10 = v39;
        a4 = v43;
        v14 = v35;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v55;
        v11 = v59;
        v8 = v51;
        a6 = v47;
      }
    }
    v17 = vmovl_s8(v14);
    v18 = vaddq_f32(v10, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v17.i8)), a4.n128_f32[0]));
    v11[-1] = vcvtq_s32_f32(vaddq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v12[159], (int8x16_t)v18), v13[161])));
    v19 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v19 & 1) == 0)
    {
      v56 = result;
      v60 = v11;
      v48 = a6;
      v52 = v8;
      v40 = v10;
      v44 = a4;
      v36 = v17;
      v28 = __cxa_guard_acquire(qword_10048AA00);
      v17 = v36;
      v10 = v40;
      *(_QWORD *)&v29 = 0x8000000080000000;
      *((_QWORD *)&v29 + 1) = 0x8000000080000000;
      a4 = v44;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = v52;
      a6 = v48;
      v30 = v28;
      result = v56;
      v11 = v60;
      if (v30)
      {
        xmmword_10048A9F0 = v29;
        __cxa_guard_release(qword_10048AA00);
        v17 = v36;
        v10 = v40;
        a4 = v44;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v56;
        v11 = v60;
        v8 = v52;
        a6 = v48;
      }
    }
    v20 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v20 & 1) == 0)
    {
      v57 = result;
      v61 = v11;
      v49 = a6;
      v53 = v8;
      v41 = v10;
      v45 = a4;
      v37 = v17;
      v31 = __cxa_guard_acquire(qword_10048AA20);
      v17 = v37;
      v10 = v41;
      *(_QWORD *)&v32 = 0x3F0000003F000000;
      *((_QWORD *)&v32 + 1) = 0x3F0000003F000000;
      a4 = v45;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v8 = v53;
      a6 = v49;
      v33 = v31;
      result = v57;
      v11 = v61;
      if (v33)
      {
        xmmword_10048AA10 = v32;
        __cxa_guard_release(qword_10048AA20);
        v17 = v37;
        v10 = v41;
        a4 = v45;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        result = v57;
        v11 = v61;
        v8 = v53;
        a6 = v49;
      }
    }
    v21 = vaddq_f32(v10, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v17)), a4.n128_f32[0]));
    *v11 = vcvtq_s32_f32(vaddq_f32(v21, (float32x4_t)vorrq_s8(vandq_s8(v12[159], (int8x16_t)v21), v13[161])));
    v11 += 2;
    result += 8;
  }
  while (v8 >= (int)result);
  return result;
}

uint64_t sub_100216A3C(float a1, int32x2_t a2, double a3, __n128 a4, uint64_t a5, uint16x8_t *a6, int32x4_t *a7, int a8)
{
  int v8;
  uint64_t result;
  float32x4_t v10;
  int32x4_t *v11;
  int8x16_t *v12;
  int8x16_t *v13;
  uint16x8_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  float32x4_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  float32x4_t v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  uint16x8_t *v41;
  uint16x8_t *v42;
  uint16x8_t *v43;
  uint16x8_t *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int32x4_t *v53;
  int32x4_t *v54;
  int32x4_t *v55;
  int32x4_t *v56;

  v8 = a8 - 8;
  if (a8 < 8)
    return 0;
  a4.n128_f32[0] = a1;
  LODWORD(result) = 0;
  v10 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v11 = a7 + 1;
  v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  do
  {
    v14 = *a6;
    v15 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v15 & 1) == 0)
    {
      v45 = v8;
      v49 = result;
      v41 = a6;
      v53 = v11;
      v33 = v10;
      v37 = a4;
      v29 = *a6;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v14 = v29;
      v10 = v33;
      *(_QWORD *)&v21 = 0x8000000080000000;
      *((_QWORD *)&v21 + 1) = 0x8000000080000000;
      a4 = v37;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v53;
      a6 = v41;
      v22 = result;
      v8 = v45;
      LODWORD(result) = v49;
      if (v22)
      {
        xmmword_10048A9F0 = v21;
        __cxa_guard_release(qword_10048AA00);
        v14 = v29;
        v10 = v33;
        a4 = v37;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v53;
        v8 = v45;
        LODWORD(result) = v49;
        a6 = v41;
      }
    }
    v16 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v16 & 1) == 0)
    {
      v46 = v8;
      v50 = result;
      v42 = a6;
      v54 = v11;
      v34 = v10;
      v38 = a4;
      v30 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v14 = v30;
      v10 = v34;
      *(_QWORD *)&v23 = 0x3F0000003F000000;
      *((_QWORD *)&v23 + 1) = 0x3F0000003F000000;
      a4 = v38;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v54;
      a6 = v42;
      v24 = result;
      v8 = v46;
      LODWORD(result) = v50;
      if (v24)
      {
        xmmword_10048AA10 = v23;
        __cxa_guard_release(qword_10048AA20);
        v14 = v30;
        v10 = v34;
        a4 = v38;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v54;
        v8 = v46;
        LODWORD(result) = v50;
        a6 = v42;
      }
    }
    v17 = vaddq_f32(v10, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v14.i8)), a4.n128_f32[0]));
    v11[-1] = vcvtq_s32_f32(vaddq_f32(v17, (float32x4_t)vorrq_s8(vandq_s8(v12[159], (int8x16_t)v17), v13[161])));
    v18 = atomic_load((unsigned __int8 *)qword_10048AA00);
    if ((v18 & 1) == 0)
    {
      v47 = v8;
      v51 = result;
      v43 = a6;
      v55 = v11;
      v35 = v10;
      v39 = a4;
      v31 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA00);
      v14 = v31;
      v10 = v35;
      *(_QWORD *)&v25 = 0x8000000080000000;
      *((_QWORD *)&v25 + 1) = 0x8000000080000000;
      a4 = v39;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v55;
      a6 = v43;
      v26 = result;
      v8 = v47;
      LODWORD(result) = v51;
      if (v26)
      {
        xmmword_10048A9F0 = v25;
        __cxa_guard_release(qword_10048AA00);
        v14 = v31;
        v10 = v35;
        a4 = v39;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v55;
        v8 = v47;
        LODWORD(result) = v51;
        a6 = v43;
      }
    }
    v19 = atomic_load((unsigned __int8 *)qword_10048AA20);
    if ((v19 & 1) == 0)
    {
      v48 = v8;
      v52 = result;
      v44 = a6;
      v56 = v11;
      v36 = v10;
      v40 = a4;
      v32 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_10048AA20);
      v14 = v32;
      v10 = v36;
      *(_QWORD *)&v27 = 0x3F0000003F000000;
      *((_QWORD *)&v27 + 1) = 0x3F0000003F000000;
      a4 = v40;
      v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
      v11 = v56;
      a6 = v44;
      v28 = result;
      v8 = v48;
      LODWORD(result) = v52;
      if (v28)
      {
        xmmword_10048AA10 = v27;
        __cxa_guard_release(qword_10048AA20);
        v14 = v32;
        v10 = v36;
        a4 = v40;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v11 = v56;
        v8 = v48;
        LODWORD(result) = v52;
        a6 = v44;
      }
    }
    v20 = vaddq_f32(v10, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v14)), a4.n128_f32[0]));
    *v11 = vcvtq_s32_f32(vaddq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v12[159], (int8x16_t)v20), v13[161])));
    v11 += 2;
    ++a6;
    result = (result + 8);
  }
  while (v8 >= (int)result);
  return result;
}

void sub_100216D7C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        v6 = v4 - 96;
        v7 = *((_QWORD *)v4 - 5);
        if (v7)
        {
          v8 = (unsigned int *)(v7 + 20);
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
            sub_100256C90((uint64_t)(v4 - 96));
        }
        *((_QWORD *)v4 - 5) = 0;
        *((_OWORD *)v4 - 5) = 0u;
        *((_OWORD *)v4 - 4) = 0u;
        if (*((int *)v4 - 23) >= 1)
        {
          v11 = 0;
          v12 = *((_QWORD *)v4 - 4);
          do
            *(_DWORD *)(v12 + 4 * v11++) = 0;
          while (v11 < *((int *)v4 - 23));
        }
        v13 = (char *)*((_QWORD *)v4 - 3);
        if (v13 != v4 - 16)
          j__free(v13);
        v4 -= 96;
      }
      while (v6 != v2);
      v14 = **a1;
      v1[1] = v2;
      operator delete(v14);
    }
  }
}

uint64_t sub_100216E84(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t i;
  _BYTE *v10;
  _BYTE *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned __int8 *v19;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    if ((int)v8 >= 16)
    {
      v10 = (_BYTE *)(a5 + 16);
      v11 = (_BYTE *)(result + 16);
      v12 = (unsigned __int8 *)(a3 + 16);
      do
      {
        v13 = 0;
        v14 = v12;
        v15 = v11;
        v16 = v10;
        do
        {
          v17 = v16;
          v18 = v15;
          *(int8x16_t *)(a5 + v13) = vbslq_s8(vceqzq_s8(*(int8x16_t *)(a3 + v13)), *(int8x16_t *)(a5 + v13), *(int8x16_t *)(result + v13));
          v19 = v14;
          v13 += 16;
          v16 += 16;
          v15 += 16;
          v14 += 16;
        }
        while (v13 <= v8 - 16);
        if ((int)v8 > (int)v13)
        {
          do
          {
            if (*v19++)
              *v17 = *v18;
            ++v13;
            ++v17;
            ++v18;
          }
          while (v13 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        v10 += a6;
        v11 += a2;
        v12 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_BYTE *)(a3 + i))
            *(_BYTE *)(a5 + i) = *(_BYTE *)(result + i);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_100216F9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, int8x16_t a8)
{
  unsigned int v8;
  uint64_t v9;
  _WORD *v10;
  _BYTE *v11;
  _WORD *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v8 = a7[1];
  if (v8)
  {
    v9 = *a7;
    if ((int)v9 >= 8)
    {
      v13 = v8 - 1;
      do
      {
        v14 = 0;
        v15 = 0;
        v16 = v13;
        do
        {
          *(int8x8_t *)a8.i8 = vtst_s8(*(int8x8_t *)(a3 + v15), *(int8x8_t *)(a3 + v15));
          a8 = vbslq_s8(vzip1q_s8(a8, a8), *(int8x16_t *)(result + v14), *(int8x16_t *)(a5 + v14));
          *(int8x16_t *)(a5 + v14) = a8;
          v15 += 8;
          v14 += 16;
        }
        while (v15 <= (v9 - 8));
        if ((int)v9 > (int)v15)
        {
          v17 = v15 & 0xFFFFFFF8;
          do
          {
            if (*(_BYTE *)(a3 + v17))
              *(_WORD *)(a5 + 2 * v17) = *(_WORD *)(result + 2 * v17);
            ++v17;
          }
          while (v17 != v9);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        --v13;
      }
      while (v16);
    }
    else if ((int)v9 >= 1)
    {
      v10 = (_WORD *)(a5 + 6);
      v11 = (_BYTE *)(a3 + 3);
      v12 = (_WORD *)(result + 6);
      do
      {
        if (*(v11 - 3))
          *(v10 - 3) = *(v12 - 3);
        if ((_DWORD)v9 != 1)
        {
          if (*(v11 - 2))
            *(v10 - 2) = *(v12 - 2);
          if ((_DWORD)v9 != 2)
          {
            if (*(v11 - 1))
              *(v10 - 1) = *(v12 - 1);
            if ((_DWORD)v9 != 3)
            {
              if (*v11)
                *v10 = *v12;
              if ((_DWORD)v9 != 4)
              {
                if (v11[1])
                  v10[1] = v12[1];
                if ((_DWORD)v9 != 5)
                {
                  if (v11[2])
                    v10[2] = v12[2];
                  if ((_DWORD)v9 != 6)
                  {
                    if (v11[3])
                      v10[3] = v12[3];
                  }
                }
              }
            }
          }
        }
        v10 = (_WORD *)((char *)v10 + a6);
        v11 += a4;
        v12 = (_WORD *)((char *)v12 + a2);
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t sub_100217110(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  __int16 *v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  __int16 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  __int16 v36;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    if ((int)v8 >= 4)
    {
      v16 = a5 + 12;
      v17 = (__int16 *)(result + 12);
      v18 = (unsigned __int8 *)(a3 + 4);
      do
      {
        v19 = 0;
        v20 = v18;
        v21 = v17;
        v22 = v16;
        v23 = 6;
        do
        {
          v24 = v22;
          v25 = v21;
          v26 = v20;
          if (*(_BYTE *)(a3 + v19))
          {
            v27 = a5 + v23;
            v28 = *(_WORD *)(result + v23 - 6);
            *(_BYTE *)(v27 - 4) = *(_BYTE *)(result + v23 - 4);
            *(_WORD *)(v27 - 6) = v28;
          }
          if (*(_BYTE *)(a3 + v19 + 1))
          {
            v29 = a5 + v23;
            v30 = *(_WORD *)(result + v23 - 3);
            *(_BYTE *)(v29 - 1) = *(_BYTE *)(result + v23 - 1);
            *(_WORD *)(v29 - 3) = v30;
          }
          if (*(_BYTE *)(a3 + v19 + 2))
          {
            v31 = a5 + v23;
            v32 = *(_WORD *)(result + v23);
            *(_BYTE *)(v31 + 2) = *(_BYTE *)(result + v23 + 2);
            *(_WORD *)v31 = v32;
          }
          if (*(_BYTE *)(a3 + v19 + 3))
          {
            v33 = a5 + v23;
            v34 = *(_WORD *)(result + v23 + 3);
            *(_BYTE *)(v33 + 5) = *(_BYTE *)(result + v23 + 5);
            *(_WORD *)(v33 + 3) = v34;
          }
          v19 += 4;
          v23 += 12;
          v22 = v24 + 12;
          v21 = v25 + 6;
          v20 += 4;
        }
        while (v19 <= v8 - 4);
        if ((int)v8 > (int)v19)
        {
          do
          {
            if (*v26++)
            {
              v36 = *v25;
              *(_BYTE *)(v24 + 2) = *((_BYTE *)v25 + 2);
              *(_WORD *)v24 = v36;
            }
            ++v19;
            v24 += 3;
            v25 = (__int16 *)((char *)v25 + 3);
          }
          while (v19 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        v16 += a6;
        v17 = (__int16 *)((char *)v17 + a2);
        v18 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      v9 = a5 + 3;
      v10 = (_BYTE *)(a3 + 2);
      v11 = (__int16 *)(result + 3);
      do
      {
        if (*(v10 - 2))
        {
          v12 = v9 - 3;
          v13 = *(__int16 *)((char *)v11 - 3);
          *(_BYTE *)(v12 + 2) = *((_BYTE *)v11 - 1);
          *(_WORD *)v12 = v13;
        }
        if ((_DWORD)v8 != 1)
        {
          if (*(v10 - 1))
          {
            v14 = *v11;
            *(_BYTE *)(v9 + 2) = *((_BYTE *)v11 + 2);
            *(_WORD *)v9 = v14;
          }
          if ((_DWORD)v8 != 2)
          {
            if (*v10)
            {
              v15 = *(__int16 *)((char *)v11 + 3);
              *(_BYTE *)(v9 + 5) = *((_BYTE *)v11 + 5);
              *(_WORD *)(v9 + 3) = v15;
            }
          }
        }
        v9 += a6;
        v10 += a4;
        v11 = (__int16 *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_100217304(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  _DWORD *v9;
  _BYTE *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  unsigned __int8 *v22;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    if ((int)v8 >= 4)
    {
      v12 = (_DWORD *)(a5 + 16);
      v13 = (_DWORD *)(result + 16);
      v14 = (unsigned __int8 *)(a3 + 4);
      do
      {
        v15 = 0;
        v16 = v14;
        v17 = v13;
        v18 = v12;
        v19 = 8;
        do
        {
          v20 = v18;
          v21 = v17;
          v22 = v16;
          if (*(_BYTE *)(a3 + v15))
            *(_DWORD *)(a5 + v19 - 8) = *(_DWORD *)(result + v19 - 8);
          if (*(_BYTE *)(a3 + v15 + 1))
            *(_DWORD *)(a5 + v19 - 4) = *(_DWORD *)(result + v19 - 4);
          if (*(_BYTE *)(a3 + v15 + 2))
            *(_DWORD *)(a5 + v19) = *(_DWORD *)(result + v19);
          if (*(_BYTE *)(a3 + v15 + 3))
            *(_DWORD *)(a5 + v19 + 4) = *(_DWORD *)(result + v19 + 4);
          v15 += 4;
          v19 += 16;
          v18 += 4;
          v17 += 4;
          v16 += 4;
        }
        while (v15 <= v8 - 4);
        if ((int)v8 > (int)v15)
        {
          do
          {
            if (*v22++)
              *v20 = *v21;
            ++v15;
            ++v20;
            ++v21;
          }
          while (v15 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        v12 = (_DWORD *)((char *)v12 + a6);
        v13 = (_DWORD *)((char *)v13 + a2);
        v14 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      v9 = (_DWORD *)(a5 + 8);
      v10 = (_BYTE *)(a3 + 2);
      v11 = (_DWORD *)(result + 4);
      do
      {
        if (*(v10 - 2))
          *(v9 - 2) = *(v11 - 1);
        if ((_DWORD)v8 != 1)
        {
          if (*(v10 - 1))
            *(v9 - 1) = *v11;
          if ((_DWORD)v8 != 2)
          {
            if (*v10)
              *v9 = v11[1];
          }
        }
        v9 = (_DWORD *)((char *)v9 + a6);
        v10 += a4;
        v11 = (_DWORD *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_1002174A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v36;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    if ((int)v8 >= 4)
    {
      v16 = a5 + 24;
      v17 = (int *)(result + 24);
      v18 = (unsigned __int8 *)(a3 + 4);
      do
      {
        v19 = 0;
        v20 = v18;
        v21 = v17;
        v22 = v16;
        v23 = 12;
        do
        {
          v24 = v22;
          v25 = v21;
          v26 = v20;
          if (*(_BYTE *)(a3 + v19))
          {
            v27 = a5 + v23;
            v28 = *(_DWORD *)(result + v23 - 12);
            *(_WORD *)(v27 - 8) = *(_WORD *)(result + v23 - 8);
            *(_DWORD *)(v27 - 12) = v28;
          }
          if (*(_BYTE *)(a3 + v19 + 1))
          {
            v29 = a5 + v23;
            v30 = *(_DWORD *)(result + v23 - 6);
            *(_WORD *)(v29 - 2) = *(_WORD *)(result + v23 - 2);
            *(_DWORD *)(v29 - 6) = v30;
          }
          if (*(_BYTE *)(a3 + v19 + 2))
          {
            v31 = a5 + v23;
            v32 = *(_DWORD *)(result + v23);
            *(_WORD *)(v31 + 4) = *(_WORD *)(result + v23 + 4);
            *(_DWORD *)v31 = v32;
          }
          if (*(_BYTE *)(a3 + v19 + 3))
          {
            v33 = a5 + v23;
            v34 = *(_DWORD *)(result + v23 + 6);
            *(_WORD *)(v33 + 10) = *(_WORD *)(result + v23 + 10);
            *(_DWORD *)(v33 + 6) = v34;
          }
          v19 += 4;
          v23 += 24;
          v22 = v24 + 24;
          v21 = v25 + 6;
          v20 += 4;
        }
        while (v19 <= v8 - 4);
        if ((int)v8 > (int)v19)
        {
          do
          {
            if (*v26++)
            {
              v36 = *v25;
              *(_WORD *)(v24 + 4) = *((_WORD *)v25 + 2);
              *(_DWORD *)v24 = v36;
            }
            ++v19;
            v24 += 6;
            v25 = (int *)((char *)v25 + 6);
          }
          while (v19 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        v16 += a6;
        v17 = (int *)((char *)v17 + a2);
        v18 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      v9 = a5 + 6;
      v10 = (_BYTE *)(a3 + 2);
      v11 = (int *)(result + 6);
      do
      {
        if (*(v10 - 2))
        {
          v12 = v9 - 6;
          v13 = *(int *)((char *)v11 - 6);
          *(_WORD *)(v12 + 4) = *((_WORD *)v11 - 1);
          *(_DWORD *)v12 = v13;
        }
        if ((_DWORD)v8 != 1)
        {
          if (*(v10 - 1))
          {
            v14 = *v11;
            *(_WORD *)(v9 + 4) = *((_WORD *)v11 + 2);
            *(_DWORD *)v9 = v14;
          }
          if ((_DWORD)v8 != 2)
          {
            if (*v10)
            {
              v15 = *(int *)((char *)v11 + 6);
              *(_WORD *)(v9 + 10) = *((_WORD *)v11 + 5);
              *(_DWORD *)(v9 + 6) = v15;
            }
          }
        }
        v9 += a6;
        v10 += a4;
        v11 = (int *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_100217694(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned __int8 *v22;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    if ((int)v8 >= 4)
    {
      v12 = (_QWORD *)(a5 + 32);
      v13 = (_QWORD *)(result + 32);
      v14 = (unsigned __int8 *)(a3 + 4);
      do
      {
        v15 = 0;
        v16 = v14;
        v17 = v13;
        v18 = v12;
        v19 = 16;
        do
        {
          v20 = v18;
          v21 = v17;
          v22 = v16;
          if (*(_BYTE *)(a3 + v15))
            *(_QWORD *)(a5 + v19 - 16) = *(_QWORD *)(result + v19 - 16);
          if (*(_BYTE *)(a3 + v15 + 1))
            *(_QWORD *)(a5 + v19 - 8) = *(_QWORD *)(result + v19 - 8);
          if (*(_BYTE *)(a3 + v15 + 2))
            *(_QWORD *)(a5 + v19) = *(_QWORD *)(result + v19);
          if (*(_BYTE *)(a3 + v15 + 3))
            *(_QWORD *)(a5 + v19 + 8) = *(_QWORD *)(result + v19 + 8);
          v15 += 4;
          v19 += 32;
          v18 += 4;
          v17 += 4;
          v16 += 4;
        }
        while (v15 <= v8 - 4);
        if ((int)v8 > (int)v15)
        {
          do
          {
            if (*v22++)
              *v20 = *v21;
            ++v15;
            ++v20;
            ++v21;
          }
          while (v15 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        v12 = (_QWORD *)((char *)v12 + a6);
        v13 = (_QWORD *)((char *)v13 + a2);
        v14 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      v9 = (_QWORD *)(a5 + 16);
      v10 = (_BYTE *)(a3 + 2);
      v11 = (_QWORD *)(result + 8);
      do
      {
        if (*(v10 - 2))
          *(v9 - 2) = *(v11 - 1);
        if ((_DWORD)v8 != 1)
        {
          if (*(v10 - 1))
            *(v9 - 1) = *v11;
          if ((_DWORD)v8 != 2)
          {
            if (*v10)
              *v9 = v11[1];
          }
        }
        v9 = (_QWORD *)((char *)v9 + a6);
        v10 += a4;
        v11 = (_QWORD *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_100217830(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    if ((int)v8 >= 4)
    {
      v16 = a5 + 48;
      v17 = (uint64_t *)(result + 48);
      v18 = (unsigned __int8 *)(a3 + 4);
      do
      {
        v19 = 0;
        v20 = v18;
        v21 = v17;
        v22 = v16;
        v23 = 24;
        do
        {
          v24 = v22;
          v25 = v21;
          v26 = v20;
          if (*(_BYTE *)(a3 + v19))
          {
            v27 = a5 + v23;
            v28 = *(_QWORD *)(result + v23 - 24);
            *(_DWORD *)(v27 - 16) = *(_DWORD *)(result + v23 - 16);
            *(_QWORD *)(v27 - 24) = v28;
          }
          if (*(_BYTE *)(a3 + v19 + 1))
          {
            v29 = a5 + v23;
            v30 = *(_QWORD *)(result + v23 - 12);
            *(_DWORD *)(v29 - 4) = *(_DWORD *)(result + v23 - 4);
            *(_QWORD *)(v29 - 12) = v30;
          }
          if (*(_BYTE *)(a3 + v19 + 2))
          {
            v31 = a5 + v23;
            v32 = *(_QWORD *)(result + v23);
            *(_DWORD *)(v31 + 8) = *(_DWORD *)(result + v23 + 8);
            *(_QWORD *)v31 = v32;
          }
          if (*(_BYTE *)(a3 + v19 + 3))
          {
            v33 = a5 + v23;
            v34 = *(_QWORD *)(result + v23 + 12);
            *(_DWORD *)(v33 + 20) = *(_DWORD *)(result + v23 + 20);
            *(_QWORD *)(v33 + 12) = v34;
          }
          v19 += 4;
          v23 += 48;
          v22 = v24 + 48;
          v21 = v25 + 6;
          v20 += 4;
        }
        while (v19 <= v8 - 4);
        if ((int)v8 > (int)v19)
        {
          do
          {
            if (*v26++)
            {
              v36 = *v25;
              *(_DWORD *)(v24 + 8) = *((_DWORD *)v25 + 2);
              *(_QWORD *)v24 = v36;
            }
            ++v19;
            v24 += 12;
            v25 = (uint64_t *)((char *)v25 + 12);
          }
          while (v19 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        v16 += a6;
        v17 = (uint64_t *)((char *)v17 + a2);
        v18 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      v9 = a5 + 12;
      v10 = (_BYTE *)(a3 + 2);
      v11 = (uint64_t *)(result + 12);
      do
      {
        if (*(v10 - 2))
        {
          v12 = v9 - 12;
          v13 = *(uint64_t *)((char *)v11 - 12);
          *(_DWORD *)(v12 + 8) = *((_DWORD *)v11 - 1);
          *(_QWORD *)v12 = v13;
        }
        if ((_DWORD)v8 != 1)
        {
          if (*(v10 - 1))
          {
            v14 = *v11;
            *(_DWORD *)(v9 + 8) = *((_DWORD *)v11 + 2);
            *(_QWORD *)v9 = v14;
          }
          if ((_DWORD)v8 != 2)
          {
            if (*v10)
            {
              v15 = *(uint64_t *)((char *)v11 + 12);
              *(_DWORD *)(v9 + 20) = *((_DWORD *)v11 + 5);
              *(_QWORD *)(v9 + 12) = v15;
            }
          }
        }
        v9 += a6;
        v10 += a4;
        v11 = (uint64_t *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_100217A24(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  _OWORD *v9;
  _BYTE *v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  unsigned __int8 *v22;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    if ((int)v8 >= 4)
    {
      v12 = (_OWORD *)(a5 + 64);
      v13 = (_OWORD *)(result + 64);
      v14 = (unsigned __int8 *)(a3 + 4);
      do
      {
        v15 = 0;
        v16 = v14;
        v17 = v13;
        v18 = v12;
        v19 = 32;
        do
        {
          v20 = v18;
          v21 = v17;
          v22 = v16;
          if (*(_BYTE *)(a3 + v15))
            *(_OWORD *)(a5 + v19 - 32) = *(_OWORD *)(result + v19 - 32);
          if (*(_BYTE *)(a3 + v15 + 1))
            *(_OWORD *)(a5 + v19 - 16) = *(_OWORD *)(result + v19 - 16);
          if (*(_BYTE *)(a3 + v15 + 2))
            *(_OWORD *)(a5 + v19) = *(_OWORD *)(result + v19);
          if (*(_BYTE *)(a3 + v15 + 3))
            *(_OWORD *)(a5 + v19 + 16) = *(_OWORD *)(result + v19 + 16);
          v15 += 4;
          v19 += 64;
          v18 += 4;
          v17 += 4;
          v16 += 4;
        }
        while (v15 <= v8 - 4);
        if ((int)v8 > (int)v15)
        {
          do
          {
            if (*v22++)
              *v20 = *v21;
            ++v15;
            ++v20;
            ++v21;
          }
          while (v15 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        v12 = (_OWORD *)((char *)v12 + a6);
        v13 = (_OWORD *)((char *)v13 + a2);
        v14 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      v9 = (_OWORD *)(a5 + 32);
      v10 = (_BYTE *)(a3 + 2);
      v11 = (_OWORD *)(result + 16);
      do
      {
        if (*(v10 - 2))
          *(v9 - 2) = *(v11 - 1);
        if ((_DWORD)v8 != 1)
        {
          if (*(v10 - 1))
            *(v9 - 1) = *v11;
          if ((_DWORD)v8 != 2)
          {
            if (*v10)
              *v9 = v11[1];
          }
        }
        v9 = (_OWORD *)((char *)v9 + a6);
        v10 += a4;
        v11 = (_OWORD *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_100217BC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v36;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    if ((int)v8 >= 4)
    {
      v16 = a5 + 96;
      v17 = (__int128 *)(result + 96);
      v18 = (unsigned __int8 *)(a3 + 4);
      do
      {
        v19 = 0;
        v20 = v18;
        v21 = v17;
        v22 = v16;
        v23 = 48;
        do
        {
          v24 = v22;
          v25 = v21;
          v26 = v20;
          if (*(_BYTE *)(a3 + v19))
          {
            v27 = a5 + v23;
            v28 = *(_OWORD *)(result + v23 - 48);
            *(_QWORD *)(v27 - 32) = *(_QWORD *)(result + v23 - 32);
            *(_OWORD *)(v27 - 48) = v28;
          }
          if (*(_BYTE *)(a3 + v19 + 1))
          {
            v29 = a5 + v23;
            v30 = *(_OWORD *)(result + v23 - 24);
            *(_QWORD *)(v29 - 8) = *(_QWORD *)(result + v23 - 8);
            *(_OWORD *)(v29 - 24) = v30;
          }
          if (*(_BYTE *)(a3 + v19 + 2))
          {
            v31 = a5 + v23;
            v32 = *(_OWORD *)(result + v23);
            *(_QWORD *)(v31 + 16) = *(_QWORD *)(result + v23 + 16);
            *(_OWORD *)v31 = v32;
          }
          if (*(_BYTE *)(a3 + v19 + 3))
          {
            v33 = a5 + v23;
            v34 = *(_OWORD *)(result + v23 + 24);
            *(_QWORD *)(v33 + 40) = *(_QWORD *)(result + v23 + 40);
            *(_OWORD *)(v33 + 24) = v34;
          }
          v19 += 4;
          v23 += 96;
          v22 = v24 + 96;
          v21 = v25 + 6;
          v20 += 4;
        }
        while (v19 <= v8 - 4);
        if ((int)v8 > (int)v19)
        {
          do
          {
            if (*v26++)
            {
              v36 = *v25;
              *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
              *(_OWORD *)v24 = v36;
            }
            ++v19;
            v24 += 24;
            v25 = (__int128 *)((char *)v25 + 24);
          }
          while (v19 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        v16 += a6;
        v17 = (__int128 *)((char *)v17 + a2);
        v18 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      v9 = a5 + 24;
      v10 = (_BYTE *)(a3 + 2);
      v11 = (__int128 *)(result + 24);
      do
      {
        if (*(v10 - 2))
        {
          v12 = v9 - 24;
          v13 = *(__int128 *)((char *)v11 - 24);
          *(_QWORD *)(v12 + 16) = *((_QWORD *)v11 - 1);
          *(_OWORD *)v12 = v13;
        }
        if ((_DWORD)v8 != 1)
        {
          if (*(v10 - 1))
          {
            v14 = *v11;
            *(_QWORD *)(v9 + 16) = *((_QWORD *)v11 + 2);
            *(_OWORD *)v9 = v14;
          }
          if ((_DWORD)v8 != 2)
          {
            if (*v10)
            {
              v15 = *(__int128 *)((char *)v11 + 24);
              *(_QWORD *)(v9 + 40) = *((_QWORD *)v11 + 5);
              *(_OWORD *)(v9 + 24) = v15;
            }
          }
        }
        v9 += a6;
        v10 += a4;
        v11 = (__int128 *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_100217DB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  _OWORD *v9;
  _BYTE *v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  _OWORD *v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v36;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    if ((int)v8 >= 4)
    {
      v16 = (_OWORD *)(a5 + 128);
      v17 = (_OWORD *)(result + 128);
      v18 = (unsigned __int8 *)(a3 + 4);
      do
      {
        v19 = 0;
        v20 = v18;
        v21 = v17;
        v22 = v16;
        v23 = 64;
        do
        {
          v24 = v22;
          v25 = v21;
          v26 = v20;
          if (*(_BYTE *)(a3 + v19))
          {
            v27 = a5 + v23;
            v28 = *(_OWORD *)(result + v23 - 48);
            *(_OWORD *)(v27 - 64) = *(_OWORD *)(result + v23 - 64);
            *(_OWORD *)(v27 - 48) = v28;
          }
          if (*(_BYTE *)(a3 + v19 + 1))
          {
            v29 = a5 + v23;
            v30 = *(_OWORD *)(result + v23 - 16);
            *(_OWORD *)(v29 - 32) = *(_OWORD *)(result + v23 - 32);
            *(_OWORD *)(v29 - 16) = v30;
          }
          if (*(_BYTE *)(a3 + v19 + 2))
          {
            v31 = (_OWORD *)(a5 + v23);
            v32 = *(_OWORD *)(result + v23 + 16);
            *v31 = *(_OWORD *)(result + v23);
            v31[1] = v32;
          }
          if (*(_BYTE *)(a3 + v19 + 3))
          {
            v33 = a5 + v23;
            v34 = *(_OWORD *)(result + v23 + 48);
            *(_OWORD *)(v33 + 32) = *(_OWORD *)(result + v23 + 32);
            *(_OWORD *)(v33 + 48) = v34;
          }
          v19 += 4;
          v23 += 128;
          v22 = v24 + 8;
          v21 = v25 + 8;
          v20 += 4;
        }
        while (v19 <= v8 - 4);
        if ((int)v8 > (int)v19)
        {
          do
          {
            if (*v26++)
            {
              v36 = v25[1];
              *v24 = *v25;
              v24[1] = v36;
            }
            ++v19;
            v24 += 2;
            v25 += 2;
          }
          while (v19 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        v16 = (_OWORD *)((char *)v16 + a6);
        v17 = (_OWORD *)((char *)v17 + a2);
        v18 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      v9 = (_OWORD *)(a5 + 64);
      v10 = (_BYTE *)(a3 + 2);
      v11 = (_OWORD *)(result + 32);
      do
      {
        if (*(v10 - 2))
        {
          v12 = v9 - 4;
          v13 = *(v11 - 1);
          *v12 = *(v11 - 2);
          v12[1] = v13;
        }
        if ((_DWORD)v8 != 1)
        {
          if (*(v10 - 1))
          {
            v14 = v11[1];
            *(v9 - 2) = *v11;
            *(v9 - 1) = v14;
          }
          if ((_DWORD)v8 != 2)
          {
            if (*v10)
            {
              v15 = v11[3];
              *v9 = v11[2];
              v9[1] = v15;
            }
          }
        }
        v9 = (_OWORD *)((char *)v9 + a6);
        v10 += a4;
        v11 = (_OWORD *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t (*sub_100217F60(unint64_t a1))(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, unint64_t *a8)
{
  uint64_t (*result)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, unint64_t *);
  uint64_t v3;

  result = sub_100217F8C;
  if (a1 <= 0x20)
  {
    v3 = qword_10048AB18[a1];
    if (v3)
      return (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, unint64_t *))v3;
  }
  return result;
}

uint64_t sub_100217F8C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, unint64_t *a8)
{
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t i;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  _OWORD *v28;
  int v29;

  v8 = *a8;
  v9 = a7[1];
  v10 = v9 - 1;
  a7[1] = v9 - 1;
  if (v9)
  {
    v11 = *a7;
    if (*a7 < 1)
    {
      a7[1] = -1;
    }
    else if (v8)
    {
      if (v8 >= 8)
      {
        v12 = 0;
        v13 = v8 & 0xFFFFFFFFFFFFFFE0;
        v14 = v8 & 0xFFFFFFFFFFFFFFF8;
        v15 = result;
        v16 = a5;
        while (v11 < 1)
        {
LABEL_21:
          v20 = v10;
          a3 += a4;
          v15 += a2;
          v16 += a6;
          a7[1] = --v10;
          ++v12;
          if (!v20)
            return result;
        }
        v21 = 0;
        v22 = v16;
        v23 = v15;
        while (1)
        {
          if (!*(_BYTE *)(a3 + v21))
            goto LABEL_25;
          if (a5 + v12 * a6 + v8 * v21 - (result + v12 * a2 + v8 * v21) >= 0x20)
          {
            if (v8 < 0x20)
            {
              v25 = 0;
              do
              {
LABEL_35:
                *(_QWORD *)(v22 + v25) = *(_QWORD *)(v23 + v25);
                v25 += 8;
              }
              while (v14 != v25);
              v24 = v8 & 0xFFFFFFFFFFFFFFF8;
              if (v8 == v14)
                goto LABEL_24;
              goto LABEL_37;
            }
            v26 = 0;
            do
            {
              v27 = *(_OWORD *)(v23 + v26 + 16);
              v28 = (_OWORD *)(v22 + v26);
              *v28 = *(_OWORD *)(v23 + v26);
              v28[1] = v27;
              v26 += 32;
            }
            while (v13 != v26);
            if (v8 == v13)
              goto LABEL_24;
            v25 = v8 & 0xFFFFFFFFFFFFFFE0;
            v24 = v8 & 0xFFFFFFFFFFFFFFE0;
            if ((v8 & 0x18) != 0)
              goto LABEL_35;
          }
          else
          {
            v24 = 0;
          }
          do
          {
LABEL_37:
            *(_BYTE *)(v22 + v24) = *(_BYTE *)(v23 + v24);
            ++v24;
          }
          while (v8 != v24);
LABEL_24:
          v11 = *a7;
LABEL_25:
          ++v21;
          v23 += v8;
          v22 += v8;
          if (v21 >= v11)
          {
            v10 = a7[1];
            goto LABEL_21;
          }
        }
      }
      do
      {
        if (v11 >= 1)
        {
          v18 = 0;
          for (i = 0; i < v11; ++i)
          {
            if (*(_BYTE *)(a3 + i))
            {
              *(_BYTE *)(a5 + v18) = *(_BYTE *)(result + v18);
              if (v8 != 1)
              {
                *(_BYTE *)(a5 + v18 + 1) = *(_BYTE *)(result + v18 + 1);
                if (v8 != 2)
                {
                  *(_BYTE *)(a5 + v18 + 2) = *(_BYTE *)(result + v18 + 2);
                  if (v8 != 3)
                  {
                    *(_BYTE *)(a5 + v18 + 3) = *(_BYTE *)(result + v18 + 3);
                    if (v8 != 4)
                    {
                      *(_BYTE *)(a5 + v18 + 4) = *(_BYTE *)(result + v18 + 4);
                      if (v8 != 5)
                      {
                        *(_BYTE *)(a5 + v18 + 5) = *(_BYTE *)(result + v18 + 5);
                        if (v8 != 6)
                          *(_BYTE *)(a5 + v18 + 6) = *(_BYTE *)(result + v18 + 6);
                      }
                    }
                  }
                }
              }
              v11 = *a7;
            }
            v18 += v8;
          }
          v10 = a7[1];
        }
        v17 = v10;
        a3 += a4;
        result += a2;
        a5 += a6;
        a7[1] = --v10;
      }
      while (v17);
    }
    else
    {
      v29 = 1 - v9;
      do
        ++v29;
      while (v29 != 1);
      a7[1] = -1;
    }
  }
  return result;
}

void sub_1002181EC(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  int *v60;
  void *v61;
  size_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  _DWORD *v68;
  void *v69;
  uint64_t v70;
  int32x4_t *v71;
  int32x4_t v72;
  uint64_t v73;
  int32x4_t v74;
  int8x16_t v75;
  uint64_t v76;
  int *v77;
  int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  _DWORD *v83;
  _OWORD *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  char *v90;
  char *v91;
  size_t v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  _DWORD *v97;
  _BYTE v98[8];
  int v99;
  const void *v100;
  void *v101;
  _OWORD v102[4];
  char *v103;
  _BYTE *v104;
  _BYTE v105[176];
  __int128 v106;
  void *__dst[2];
  __int128 v108;
  __int128 v109;
  void *v110[2];
  _OWORD v111[11];
  uint64_t v112[4];
  uint64_t v113;

  sub_100298C2C(v98, &off_10044D238);
  v4 = sub_10025E20C((int *)a2, -1);
  if (sub_100262140((_DWORD *)a2) && v4 != (*(_DWORD *)a1 & 0xFFF))
  {
    if ((((unsigned __int16)*(_DWORD *)a1 ^ (unsigned __int16)v4) & 0xFF8) != 0)
    {
      v106 = 0uLL;
      qmemcpy((void *)sub_10029430C(&v106, 55), "channels() == ((((dtype) & ((512 - 1) << 3)) >> 3) + 1)", 55);
      sub_100294B74(-215, (uint64_t *)&v106, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 260);
    }
    sub_1002044A8((unsigned int *)a1, a2, v4, 1.0, 0.0);
    goto LABEL_125;
  }
  if (sub_10025D914((_DWORD *)a2) == 655360)
  {
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_35;
    v5 = *(unsigned int *)(a1 + 4);
    if ((int)v5 >= 3)
    {
      v22 = *(_QWORD *)(a1 + 64);
      v23 = (int *)(v22 + 4);
      v24 = 1;
      v25 = v5 & 0xFFFFFFFE;
      v26 = 1;
      do
      {
        v24 *= *(v23 - 1);
        v26 *= *v23;
        v23 += 2;
        v25 -= 2;
      }
      while (v25);
      v6 = v26 * v24;
      v27 = v5 - (v5 & 0xFFFFFFFE);
      if (v27)
      {
        v28 = (int *)(v22 + ((4 * v5) & 0x3FFFFFFF8));
        do
        {
          v29 = *v28++;
          v6 *= v29;
          --v27;
        }
        while (v27);
      }
    }
    else
    {
      v6 = *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8);
    }
    if (!(_DWORD)v5 || !v6)
    {
LABEL_35:
      sub_100261B50(a2);
      goto LABEL_125;
    }
    sub_100258F0C((int *)a2, v5, *(uint64_t **)(a1 + 64), *(_DWORD *)a1 & 0xFFF, 0xFFFFFFFF, 0, 0);
    sub_10025E70C(a2, -1, (uint64_t)v112);
    if (!v113)
    {
      v106 = 0uLL;
      qmemcpy((void *)sub_10029430C(&v106, 15), "dst.u != __null", 15);
      sub_100294B74(-215, (uint64_t *)&v106, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 274);
    }
    *(_OWORD *)v110 = 0u;
    memset(v111, 0, sizeof(v111));
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    *(_OWORD *)__dst = 0u;
    v30 = *(_DWORD *)(a1 + 4);
    if (v30 < 1)
    {
      v31 = 0;
      if (v30 < 0x20)
        goto LABEL_61;
    }
    else
    {
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * (v30 - 1));
      if (v30 < 0x20)
      {
LABEL_61:
        v47 = v30;
        if (v30)
        {
          v48 = *(_QWORD *)(a1 + 64);
          if (v47 >= 8)
          {
            v49 = v47 & 0x18;
            v50 = v48 + 16;
            v51 = &v108;
            v52 = v47 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v53 = *(_OWORD *)(v50 - 16);
              *(_QWORD *)&v54 = (int)v53;
              *((_QWORD *)&v54 + 1) = SDWORD1(v53);
              v55 = v54;
              *(_QWORD *)&v54 = SDWORD2(v53);
              *((_QWORD *)&v54 + 1) = SHIDWORD(v53);
              v56 = v54;
              *(_QWORD *)&v54 = (int)*(_OWORD *)v50;
              *((_QWORD *)&v54 + 1) = (int)HIDWORD(*(_QWORD *)v50);
              v57 = v54;
              *(_QWORD *)&v54 = (int)*(_QWORD *)(v50 + 8);
              *((_QWORD *)&v54 + 1) = (int)HIDWORD(*(_OWORD *)v50);
              *(v51 - 2) = v55;
              *(v51 - 1) = v56;
              *v51 = v57;
              v51[1] = v54;
              v51 += 4;
              v50 += 32;
              v52 -= 8;
            }
            while (v52);
            if (v49 == v47)
              goto LABEL_69;
          }
          else
          {
            v49 = 0;
          }
          v58 = v47 - v49;
          v59 = &__dst[v49 - 2];
          v60 = (int *)(v48 + 4 * v49);
          do
          {
            v61 = (void *)*v60++;
            *v59++ = v61;
            --v58;
          }
          while (v58);
        }
LABEL_69:
        __dst[v47 - 3] = (void *)((uint64_t)__dst[v47 - 3] * v31);
        sub_10029D588((uint64_t)v112, (unint64_t *)v102);
        *((_QWORD *)v102 + *(_DWORD *)(a1 + 4) - 1) *= v31;
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v113 + 8) + 64))(*(_QWORD *)(v113 + 8), v113, *(_QWORD *)(a1 + 16));
        sub_10029B66C((uint64_t)v112);
        goto LABEL_125;
      }
    }
    v100 = 0;
    v101 = 0;
    qmemcpy((void *)sub_10029430C(&v100, 22), "dims >= 0 && dims < 32", 22);
    sub_100294B74(-215, (uint64_t *)&v100, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 276);
  }
  v7 = *(_DWORD *)(a1 + 4);
  if (v7 > 2)
  {
    sub_100258F0C((int *)a2, v7, *(uint64_t **)(a1 + 64), *(_DWORD *)a1 & 0xFFF, 0xFFFFFFFF, 0, 0);
    if (sub_10025D914((_DWORD *)a2) == 0x10000)
    {
      v15 = *(_QWORD *)(a2 + 8);
      v16 = *(_OWORD *)(v15 + 16);
      v106 = *(_OWORD *)v15;
      *(_OWORD *)__dst = v16;
      v108 = *(_OWORD *)(v15 + 32);
      v17 = *(_QWORD *)(v15 + 56);
      *(_QWORD *)&v109 = *(_QWORD *)(v15 + 48);
      *((_QWORD *)&v109 + 1) = v17;
      v110[0] = (char *)&v106 + 8;
      v110[1] = v111;
      v111[0] = 0uLL;
      if (v17)
      {
        v18 = (unsigned int *)(v17 + 20);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
      if (*(int *)(v15 + 4) > 2)
      {
        DWORD1(v106) = 0;
        sub_100256B48((uint64_t)&v106, v15);
      }
      else
      {
        v20 = *(_QWORD **)(v15 + 72);
        v21 = v110[1];
        *(_QWORD *)v110[1] = *v20;
        v21[1] = v20[1];
      }
    }
    else
    {
      sub_10025CCB8(a2, -1, (uint64_t)&v106);
    }
    if (*(void **)(a1 + 16) != __dst[0])
    {
      v33 = *(unsigned int *)(a1 + 4);
      if ((int)v33 >= 3)
      {
        v35 = *(_QWORD *)(a1 + 64);
        v36 = (int *)(v35 + 4);
        v37 = 1;
        v38 = v33 & 0xFFFFFFFE;
        v39 = 1;
        do
        {
          v37 *= *(v36 - 1);
          v39 *= *v36;
          v36 += 2;
          v38 -= 2;
        }
        while (v38);
        v34 = v39 * v37;
        v40 = v33 - (v33 & 0xFFFFFFFE);
        if (v40)
        {
          v41 = (int *)(v35 + ((4 * v33) & 0x3FFFFFFF8));
          do
          {
            v42 = *v41++;
            v34 *= v42;
            --v40;
          }
          while (v40);
        }
      }
      else
      {
        v34 = *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8);
      }
      if (v34)
      {
        v112[0] = a1;
        v112[1] = (uint64_t)&v106;
        v100 = 0;
        v101 = 0;
        sub_100254D30((uint64_t)v102, v112, (uint64_t)&v100, 2);
        v43 = *(_DWORD *)(a1 + 4);
        v44 = __OFSUB__(v43, 1);
        v45 = v43 - 1;
        if (v45 < 0 != v44)
          v46 = 0;
        else
          v46 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v45);
        v62 = v46 * *((_QWORD *)&v102[2] + 1);
        v63 = -1;
        while ((unint64_t)++v63 < *(_QWORD *)&v102[2])
        {
          memcpy(v101, v100, v62);
          sub_100254D78((uint64_t)v102);
        }
      }
    }
    if (*((_QWORD *)&v109 + 1))
    {
      v64 = (unsigned int *)(*((_QWORD *)&v109 + 1) + 20);
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
        sub_100256C90((uint64_t)&v106);
    }
    *((_QWORD *)&v109 + 1) = 0;
    *(_OWORD *)__dst = 0u;
    v108 = 0u;
    if (SDWORD1(v106) >= 1)
    {
      v67 = 0;
      v68 = v110[0];
      do
        v68[v67++] = 0;
      while (v67 < SDWORD1(v106));
    }
    v69 = v110[1];
    if (v110[1] != v111)
      goto LABEL_124;
    goto LABEL_125;
  }
  sub_10026285C(a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)a1 & 0xFFF, -1, 0, 0);
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_OWORD *)(v8 + 16);
    v106 = *(_OWORD *)v8;
    *(_OWORD *)__dst = v9;
    v108 = *(_OWORD *)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)&v109 = *(_QWORD *)(v8 + 48);
    *((_QWORD *)&v109 + 1) = v10;
    v110[0] = (char *)&v106 + 8;
    v110[1] = v111;
    v111[0] = 0uLL;
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    if (*(int *)(v8 + 4) > 2)
    {
      DWORD1(v106) = 0;
      sub_100256B48((uint64_t)&v106, v8);
    }
    else
    {
      v13 = *(_QWORD **)(v8 + 72);
      v14 = v110[1];
      *(_QWORD *)v110[1] = *v13;
      v14[1] = v13[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v106);
  }
  if (*(void **)(a1 + 16) != __dst[0] && *(int *)(a1 + 8) >= 1 && *(int *)(a1 + 12) >= 1)
  {
    if (sub_10025D914((_DWORD *)a2) != 196608
      && sub_10025D914((_DWORD *)a2) != 786432
      && sub_10025D914((_DWORD *)a2) != 917504)
    {
LABEL_106:
      v86 = *(_DWORD *)(a1 + 8);
      v85 = *(_DWORD *)(a1 + 12);
      if ((*(_DWORD *)a1 & v106 & 0x4000) != 0 && v86 * v85 == v86 * (uint64_t)v85)
      {
        v85 *= v86;
        v86 = 1;
      }
      v87 = *(_DWORD *)(a1 + 4);
      v44 = __OFSUB__(v87, 1);
      v88 = v87 - 1;
      if (v88 < 0 != v44)
        v89 = 0;
      else
        v89 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v88);
      if (v86)
      {
        v90 = *(char **)(a1 + 16);
        v91 = (char *)__dst[0];
        v92 = v89 * v85;
        do
        {
          --v86;
          memcpy(v91, v90, v92);
          v90 += *(_QWORD *)(a1 + 80);
          v91 += *(_QWORD *)&v111[0];
        }
        while (v86);
      }
      goto LABEL_115;
    }
    if (SDWORD1(v106) < 3)
    {
      v32 = HIDWORD(v106) * DWORD2(v106);
      goto LABEL_91;
    }
    if (DWORD1(v106) >= 8)
    {
      v70 = DWORD1(v106) & 0xFFFFFFF8;
      v71 = (int32x4_t *)((char *)v110[0] + 16);
      v72.i64[0] = 0x100000001;
      v72.i64[1] = 0x100000001;
      v73 = v70;
      v74.i64[0] = 0x100000001;
      v74.i64[1] = 0x100000001;
      do
      {
        v72 = vmulq_s32(v71[-1], v72);
        v74 = vmulq_s32(*v71, v74);
        v71 += 2;
        v73 -= 8;
      }
      while (v73);
      v75 = (int8x16_t)vmulq_s32(v74, v72);
      *(int32x2_t *)v75.i8 = vmul_s32(*(int32x2_t *)v75.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL));
      v32 = v75.i32[0] * v75.i32[1];
      if (v70 == DWORD1(v106))
      {
LABEL_91:
        sub_10025AFC4((uint64_t)&v106, 0, v32, (uint64_t)v102);
        if (*((_QWORD *)&v109 + 1))
        {
          v79 = (unsigned int *)(*((_QWORD *)&v109 + 1) + 20);
          do
          {
            v80 = __ldaxr(v79);
            v81 = v80 - 1;
          }
          while (__stlxr(v81, v79));
          if (!v81)
            sub_100256C90((uint64_t)&v106);
        }
        if (SDWORD1(v106) >= 1)
        {
          v82 = 0;
          v83 = v110[0];
          do
            v83[v82++] = 0;
          while (v82 < SDWORD1(v106));
        }
        v106 = v102[0];
        *(_OWORD *)__dst = v102[1];
        v108 = v102[2];
        v109 = v102[3];
        if (v110[1] == v111)
        {
          v84 = v104;
          if (SDWORD1(v102[0]) <= 2)
            goto LABEL_101;
        }
        else
        {
          j__free(v110[1]);
          v110[0] = (char *)&v106 + 8;
          v110[1] = v111;
          v84 = v104;
          if (SDWORD1(v102[0]) <= 2)
          {
LABEL_101:
            v111[0] = *v84;
            goto LABEL_104;
          }
        }
        v110[0] = v103;
        v110[1] = v84;
        v84 = v105;
        v103 = (char *)v102 + 8;
        v104 = v105;
LABEL_104:
        LODWORD(v102[0]) = 1124007936;
        memset((char *)v102 + 4, 0, 60);
        if (v84 != (_OWORD *)v105)
          j__free(v84);
        goto LABEL_106;
      }
    }
    else
    {
      v70 = 0;
      v32 = 1;
    }
    v76 = DWORD1(v106) - v70;
    v77 = (int *)((char *)v110[0] + 4 * v70);
    do
    {
      v78 = *v77++;
      v32 *= v78;
      --v76;
    }
    while (v76);
    goto LABEL_91;
  }
LABEL_115:
  if (*((_QWORD *)&v109 + 1))
  {
    v93 = (unsigned int *)(*((_QWORD *)&v109 + 1) + 20);
    do
    {
      v94 = __ldaxr(v93);
      v95 = v94 - 1;
    }
    while (__stlxr(v95, v93));
    if (!v95)
      sub_100256C90((uint64_t)&v106);
  }
  *((_QWORD *)&v109 + 1) = 0;
  *(_OWORD *)__dst = 0u;
  v108 = 0u;
  if (SDWORD1(v106) >= 1)
  {
    v96 = 0;
    v97 = v110[0];
    do
      v97[v96++] = 0;
    while (v96 < SDWORD1(v106));
  }
  v69 = v110[1];
  if (v110[1] != v111)
LABEL_124:
    j__free(v69);
LABEL_125:
  if (v99)
    sub_1002989D0(v98);
}

void sub_100218BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100218CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  char *v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, unint64_t *);
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, unint64_t *);
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  _BYTE *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  _DWORD *v61;
  _DWORD v62[2];
  _DWORD v63[2];
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void *v71;
  _QWORD v72[2];
  _BYTE v73[64];
  _BYTE *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  void *v84;
  _QWORD v85[3];
  char v86[8];
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE v91[64];
  _BYTE *v92;
  _QWORD *v93;
  _QWORD v94[3];

  sub_100298C2C(v86, &off_10044D258);
  if (sub_10025D914((_DWORD *)a3) == 0x10000)
  {
    v6 = *(_QWORD *)(a3 + 8);
    v7 = *(_OWORD *)(v6 + 16);
    v78 = *(_OWORD *)v6;
    v79 = v7;
    v80 = *(_OWORD *)(v6 + 32);
    v8 = *(_QWORD *)(v6 + 56);
    v81 = *(_QWORD *)(v6 + 48);
    v82 = v8;
    v83 = (_DWORD *)&v78 + 2;
    v84 = v85;
    v85[0] = 0;
    v85[1] = 0;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    if (*(int *)(v6 + 4) > 2)
    {
      DWORD1(v78) = 0;
      sub_100256B48((uint64_t)&v78, v6);
    }
    else
    {
      v11 = *(_QWORD **)(v6 + 72);
      v12 = v84;
      *(_QWORD *)v84 = *v11;
      v12[1] = v11[1];
    }
  }
  else
  {
    sub_10025CCB8(a3, -1, (uint64_t)&v78);
  }
  if (!(_QWORD)v79)
  {
    sub_1002181EC(a1, a2);
    goto LABEL_92;
  }
  v13 = ((unint64_t)v78 >> 3) & 0x1FF;
  if ((v78 & 7) != 0 || (_DWORD)v13 && (_DWORD)v13 != ((*(_DWORD *)a1 >> 3) & 0x1FF))
  {
    *(_OWORD *)v73 = 0uLL;
    qmemcpy((void *)sub_10029430C(v73, 44), "mask.depth() == 0 && (mcn == 1 || mcn == cn)", 44);
    sub_100294B74(-215, (uint64_t *)v73, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 381);
  }
  if (*(int *)(a1 + 4) <= 2 && (*(_DWORD *)(*(_QWORD *)(a1 + 64) + 4) != v83[1] || **(_DWORD **)(a1 + 64) != *v83))
  {
    *(_OWORD *)v73 = 0uLL;
    qmemcpy((void *)sub_10029430C(v73, 21), "size() == mask.size()", 21);
    sub_100294B74(-215, (uint64_t *)v73, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 385);
  }
  *(_DWORD *)v73 = 1124007936;
  memset(&v73[4], 0, 60);
  v74 = &v73[8];
  v75 = &v76;
  v76 = 0;
  v77 = 0;
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_OWORD *)(v15 + 16);
    v65 = *(_OWORD *)v15;
    v66 = v16;
    v67 = *(_OWORD *)(v15 + 32);
    v17 = *(_QWORD *)(v15 + 56);
    v68 = *(_QWORD *)(v15 + 48);
    v69 = v17;
    v70 = (char *)&v65 + 8;
    v71 = v72;
    v72[0] = 0;
    v72[1] = 0;
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 20);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    if (*(int *)(v15 + 4) > 2)
    {
      DWORD1(v65) = 0;
      sub_100256B48((uint64_t)&v65, v15);
    }
    else
    {
      v20 = *(_QWORD **)(v15 + 72);
      v21 = v71;
      *(_QWORD *)v71 = *v20;
      v21[1] = v20[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v65);
  }
  sub_100258F0C((int *)a2, *(_DWORD *)(a1 + 4), *(uint64_t **)(a1 + 64), *(_DWORD *)a1 & 0xFFF, 0xFFFFFFFF, 0, 0);
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v22 = *(_QWORD *)(a2 + 8);
    v23 = *(_OWORD *)(v22 + 16);
    *(_OWORD *)v91 = *(_OWORD *)v22;
    *(_OWORD *)&v91[16] = v23;
    *(_OWORD *)&v91[32] = *(_OWORD *)(v22 + 32);
    v24 = *(_QWORD *)(v22 + 56);
    *(_QWORD *)&v91[48] = *(_QWORD *)(v22 + 48);
    *(_QWORD *)&v91[56] = v24;
    v92 = &v91[8];
    v93 = v94;
    v94[0] = 0;
    v94[1] = 0;
    if (v24)
    {
      v25 = (unsigned int *)(v24 + 20);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }
    if (*(int *)(v22 + 4) > 2)
    {
      *(_DWORD *)&v91[4] = 0;
      sub_100256B48((uint64_t)v91, v22);
    }
    else
    {
      v27 = *(_QWORD **)(v22 + 72);
      v28 = v93;
      *v93 = *v27;
      v28[1] = v27[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)v91);
  }
  if (*(_QWORD *)&v73[56])
  {
    v29 = (unsigned int *)(*(_QWORD *)&v73[56] + 20);
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
      sub_100256C90((uint64_t)v73);
  }
  if (*(int *)&v73[4] >= 1)
  {
    v32 = 0;
    v33 = v74;
    do
      *(_DWORD *)&v33[4 * v32++] = 0;
    while (v32 < *(int *)&v73[4]);
  }
  *(_OWORD *)v73 = *(_OWORD *)v91;
  *(_OWORD *)&v73[16] = *(_OWORD *)&v91[16];
  *(_OWORD *)&v73[32] = *(_OWORD *)&v91[32];
  *(_OWORD *)&v73[48] = *(_OWORD *)&v91[48];
  if (v75 == &v76)
  {
    v34 = v93;
    if (*(int *)&v91[4] <= 2)
      goto LABEL_47;
  }
  else
  {
    j__free(v75);
    v74 = &v73[8];
    v75 = &v76;
    v34 = v93;
    if (*(int *)&v91[4] <= 2)
    {
LABEL_47:
      v76 = *v34;
      v77 = v34[1];
      goto LABEL_50;
    }
  }
  v74 = v92;
  v75 = v34;
  v34 = v94;
  v92 = &v91[8];
  v93 = v94;
LABEL_50:
  *(_DWORD *)v91 = 1124007936;
  memset(&v91[4], 0, 60);
  if (v34 != v94)
    j__free(v34);
  if (*(_QWORD *)&v73[16] != (_QWORD)v66)
  {
    memset(v91, 0, 32);
    sub_10021956C((uint64_t)v73, (uint64_t)v91);
  }
  if (v69)
  {
    v35 = (unsigned int *)(v69 + 20);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
      sub_100256C90((uint64_t)&v65);
  }
  v69 = 0;
  v66 = 0u;
  v67 = 0u;
  if (SDWORD1(v65) >= 1)
  {
    v38 = 0;
    v39 = v70;
    do
      *(_DWORD *)&v39[4 * v38++] = 0;
    while (v38 < SDWORD1(v65));
  }
  if (v71 != v72)
    j__free(v71);
  v40 = v13 + 1;
  v64 = 0;
  if ((_DWORD)v13)
  {
    v41 = *(_DWORD *)(a1 + 4);
    v42 = (0x88442211uLL >> (4 * (*(_DWORD *)a1 & 7u))) & 0xF;
LABEL_66:
    v64 = v42;
    goto LABEL_67;
  }
  v41 = *(_DWORD *)(a1 + 4);
  if (v41 <= 0)
  {
    v42 = 0;
    goto LABEL_66;
  }
  v42 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * (v41 - 1));
  v64 = v42;
  if (v42 > 0x20)
  {
    v44 = sub_100217F8C;
    if (v41 <= 2)
      goto LABEL_71;
    goto LABEL_77;
  }
LABEL_67:
  v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, unint64_t *))qword_10048AB18[v42];
  if (v43)
    v44 = v43;
  else
    v44 = sub_100217F8C;
  if (v41 <= 2)
  {
LABEL_71:
    v45 = *(_DWORD *)(a1 + 8);
    v46 = *(_DWORD *)(a1 + 12);
    if ((*(_DWORD *)a1 & *(_DWORD *)v73 & v78 & 0x4000) != 0
      && (v47 = v46 * (uint64_t)v40 * v45, v47 == (int)v47))
    {
      v45 = 1;
    }
    else
    {
      LODWORD(v47) = v46 * v40;
    }
    v50 = *(_QWORD *)(a1 + 16);
    v51 = *(_QWORD *)(a1 + 80);
    v63[0] = v47;
    v63[1] = v45;
    v44(v50, v51, v79, v85[0], *(_QWORD *)&v73[16], v76, v63, &v64);
    goto LABEL_82;
  }
LABEL_77:
  *(_QWORD *)v91 = a1;
  *(_QWORD *)&v91[8] = v73;
  *(_QWORD *)&v91[16] = &v78;
  *(_QWORD *)&v91[24] = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  sub_100254D30((uint64_t)&v65, (uint64_t *)v91, (uint64_t)&v88, -1);
  v48 = v40 * DWORD2(v67);
  v49 = -1;
  while (++v49 < (unint64_t)v67)
  {
    v62[0] = v48;
    v62[1] = 1;
    v44(v88, 0, v90, 0, v89, 0, v62, &v64);
    sub_100254D78((uint64_t)&v65);
  }
LABEL_82:
  if (*(_QWORD *)&v73[56])
  {
    v52 = (unsigned int *)(*(_QWORD *)&v73[56] + 20);
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
      sub_100256C90((uint64_t)v73);
  }
  *(_QWORD *)&v73[56] = 0;
  memset(&v73[16], 0, 32);
  if (*(int *)&v73[4] >= 1)
  {
    v55 = 0;
    v56 = v74;
    do
      *(_DWORD *)&v56[4 * v55++] = 0;
    while (v55 < *(int *)&v73[4]);
  }
  if (v75 != &v76)
    j__free(v75);
LABEL_92:
  if (v82)
  {
    v57 = (unsigned int *)(v82 + 20);
    do
    {
      v58 = __ldaxr(v57);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v57));
    if (!v59)
      sub_100256C90((uint64_t)&v78);
  }
  v82 = 0;
  v79 = 0u;
  v80 = 0u;
  if (SDWORD1(v78) >= 1)
  {
    v60 = 0;
    v61 = v83;
    do
      v61[v60++] = 0;
    while (v60 < SDWORD1(v78));
  }
  if (v84 != v85)
    j__free(v84);
  if (v87)
    sub_1002989D0(v86);
}

void sub_100219480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100219534(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_100219548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_100006BE4((uint64_t)&a25);
  sub_100006BE4((uint64_t)&a37);
  sub_1001D40CC(v37 - 216);
  _Unwind_Resume(a1);
}

uint64_t sub_10021956C(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t i;
  uint64_t v16;
  uint64_t v17[2];
  _BYTE v18[32];
  unint64_t v19;
  uint64_t v20;
  void *__dst;
  _BYTE v22[8];
  int v23;
  _BYTE __src[96];
  uint64_t v25;

  sub_100298C2C(v22, &off_10044D278);
  v25 = a1;
  __dst = 0;
  sub_100254D30((uint64_t)v18, &v25, (uint64_t)&__dst, 1);
  v4 = *(_DWORD *)(a1 + 4);
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v7 = 0;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v6);
  v8 = v7 * v20;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)a2), (int32x4_t)vceqzq_s64(*(int64x2_t *)(a2 + 16)))))) & 1) != 0)
  {
    if (v19)
    {
      sub_10025C560((double *)a2, (uint64_t)__src, *(_DWORD *)a1 & 0xFFF, 0xCu);
      if (v8)
      {
        v9 = 0;
        v10 = 12 * ((0x88442211uLL >> (4 * (*(_DWORD *)a1 & 7u))) & 0xF);
        v11 = v8;
        do
        {
          if (v10 >= v11)
            v12 = v11;
          else
            v12 = v10;
          if (v12 >= 0x61)
          {
            v17[0] = 0;
            v17[1] = 0;
            v13 = sub_10029430C(v17, 20);
            *(_DWORD *)(v13 + 16) = 695361900;
            *(_OWORD *)v13 = *(_OWORD *)"sz <= sizeof(scalar)";
            sub_100294B74(-215, v17, "operator=", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 451);
          }
          memcpy((char *)__dst + v9, __src, v12);
          v9 += v10;
          v11 -= v10;
        }
        while (v9 < v8);
      }
      if (v19 >= 2)
      {
        for (i = 1; i < v19; ++i)
        {
          sub_100254D78((uint64_t)v18);
          memcpy(__dst, *(const void **)(a1 + 16), v8);
        }
      }
    }
  }
  else
  {
    v16 = -1;
    while (++v16 < v19)
    {
      bzero(__dst, v8);
      sub_100254D78((uint64_t)v18);
    }
  }
  if (v23)
    sub_1002989D0(v22);
  return a1;
}

void sub_1002197B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100219808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  uint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, unint64_t *);
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, unint64_t *);
  uint64_t v55;
  int v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int *v62;
  uint64_t v63;
  BOOL v64;
  __int128 *v65;
  signed int v66;
  int v67;
  unint64_t v68;
  int v69;
  unint64_t i;
  int j;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  _DWORD *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v88;
  _DWORD v89[2];
  _BYTE v90[32];
  unint64_t v91;
  int v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  _DWORD *v99;
  void *v100;
  _QWORD v101[2];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  void *v108;
  _QWORD v109[2];
  char v110[8];
  int v111;
  _BYTE *v112;
  unint64_t v113;
  _BYTE v114[1032];
  char *v115;
  uint64_t v116;
  uint64_t v117;
  __int128 *v118;
  uint64_t v119;

  sub_100298C2C(v110, &off_10044D298);
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_140;
  v6 = *(unsigned int *)(a1 + 4);
  if ((int)v6 >= 3)
  {
    v8 = *(_QWORD *)(a1 + 64);
    v9 = (int *)(v8 + 4);
    v10 = 1;
    v11 = v6 & 0xFFFFFFFE;
    v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    v7 = v12 * v10;
    v13 = v6 - (v6 & 0xFFFFFFFE);
    if (v13)
    {
      v14 = (int *)(v8 + ((4 * v6) & 0x3FFFFFFF8));
      do
      {
        v15 = *v14++;
        v7 *= v15;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    v7 = *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8);
  }
  if (!(_DWORD)v6 || !v7)
    goto LABEL_140;
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(_OWORD *)(v16 + 16);
    v102 = *(_OWORD *)v16;
    v103 = v17;
    v104 = *(_OWORD *)(v16 + 32);
    v18 = *(_QWORD *)(v16 + 56);
    v105 = *(_QWORD *)(v16 + 48);
    v106 = v18;
    v107 = (_DWORD *)&v102 + 2;
    v108 = v109;
    v109[0] = 0;
    v109[1] = 0;
    if (v18)
    {
      v19 = (unsigned int *)(v18 + 20);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
    if (*(int *)(v16 + 4) > 2)
    {
      DWORD1(v102) = 0;
      sub_100256B48((uint64_t)&v102, v16);
    }
    else
    {
      v21 = *(_QWORD **)(v16 + 72);
      v22 = v108;
      *(_QWORD *)v108 = *v21;
      v22[1] = v21[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v102);
  }
  if (sub_10025D914((_DWORD *)a3) == 0x10000)
  {
    v23 = *(_QWORD *)(a3 + 8);
    v24 = *(_OWORD *)(v23 + 16);
    v94 = *(_OWORD *)v23;
    v95 = v24;
    v96 = *(_OWORD *)(v23 + 32);
    v25 = *(_QWORD *)(v23 + 56);
    v97 = *(_QWORD *)(v23 + 48);
    v98 = v25;
    v99 = (_DWORD *)&v94 + 2;
    v100 = v101;
    v101[0] = 0;
    v101[1] = 0;
    if (v25)
    {
      v26 = (unsigned int *)(v25 + 20);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
    }
    if (*(int *)(v23 + 4) > 2)
    {
      DWORD1(v94) = 0;
      sub_100256B48((uint64_t)&v94, v23);
    }
    else
    {
      v28 = *(_QWORD **)(v23 + 72);
      v29 = v100;
      *(_QWORD *)v100 = *v28;
      v29[1] = v28[1];
    }
  }
  else
  {
    sub_10025CCB8(a3, -1, (uint64_t)&v94);
  }
  v30 = *(_DWORD *)a1;
  sub_10025D914((_DWORD *)a2);
  if (SDWORD1(v102) > 2 || (v102 & 0x4000) == 0)
    goto LABEL_47;
  v31 = *v107;
  v32 = v107[1];
  if (v32 != 1 && v31 != 1)
    goto LABEL_47;
  v34 = (v30 >> 3) & 0x1FF;
  v35 = v32 == v34 + 1;
  if (v31 != 1)
    v35 = 0;
  v36 = v31 == v34 + 1 || v31 == 1;
  if (v32 != 1)
    v36 = 0;
  if (!v36 && !v35 && (v32 != 1 || v31 != 4 || v34 > 3 || (v102 & 0xFFF) != 6))
  {
LABEL_47:
    v112 = 0;
    v113 = 0;
    qmemcpy((void *)sub_10029430C(&v112, 60), "checkScalar(value, type(), _value.kind(), _InputArray::MAT)", 60);
    sub_100294B74(-215, (uint64_t *)&v112, "setTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 523);
  }
  v37 = (v94 >> 3) & 0x1FF;
  if ((_QWORD)v95)
  {
    if (SDWORD1(v94) >= 3)
    {
      v39 = v99 + 1;
      v40 = 1;
      v41 = DWORD1(v94) & 0xFFFFFFFE;
      v42 = 1;
      do
      {
        v40 *= *(v39 - 1);
        v42 *= *v39;
        v39 += 2;
        v41 -= 2;
      }
      while (v41);
      v38 = v42 * v40;
      v43 = DWORD1(v94) - (unint64_t)(DWORD1(v94) & 0xFFFFFFFE);
      if (v43)
      {
        v44 = (_DWORD *)((char *)v99 + ((4 * DWORD1(v94)) & 0x3FFFFFFF8));
        do
        {
          v45 = *v44++;
          v38 *= v45;
          --v43;
        }
        while (v43);
      }
    }
    else
    {
      v38 = SHIDWORD(v94) * (uint64_t)SDWORD2(v94);
    }
    if (DWORD1(v94) && v38)
    {
      if ((v94 & 7) != 0 || v37 && v37 != ((*(_DWORD *)a1 >> 3) & 0x1FF))
        goto LABEL_72;
      v46 = *(_DWORD **)(a1 + 64);
      v47 = *(v46 - 1);
      if ((_DWORD)v47 != *(v99 - 1))
        goto LABEL_72;
      if ((_DWORD)v47 == 2)
      {
        if (*v46 == *v99 && v46[1] == v99[1])
          goto LABEL_73;
LABEL_72:
        v112 = 0;
        v113 = 0;
        qmemcpy((void *)sub_10029430C(&v112, 83), "mask.empty() || (mask.depth() == 0 && (mcn == 1 || mcn == cn) && size == mask.size)", 83);
        sub_100294B74(-215, (uint64_t *)&v112, "setTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 525);
      }
      if ((int)v47 >= 1)
      {
        if (*v46 != *v99)
          goto LABEL_72;
        v48 = 1;
        do
        {
          v49 = v48;
          if (v47 == v48)
            break;
          v50 = v46[v48];
          v51 = v99[v48++];
        }
        while (v50 == v51);
        if (v49 < v47)
          goto LABEL_72;
      }
    }
  }
LABEL_73:
  v93 = 0;
  if (v37)
  {
    v52 = (0x88442211uLL >> (4 * (*(_DWORD *)a1 & 7u))) & 0xF;
LABEL_75:
    v93 = v52;
    goto LABEL_76;
  }
  v56 = *(_DWORD *)(a1 + 4);
  if (v56 <= 0)
  {
    v52 = 0;
    goto LABEL_75;
  }
  v52 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * (v56 - 1));
  v93 = v52;
  if (v52 > 0x20)
  {
    v54 = sub_100217F8C;
    v118 = 0;
    v119 = 0;
    v117 = a1;
    if ((_QWORD)v95)
      goto LABEL_80;
LABEL_96:
    v65 = 0;
    goto LABEL_97;
  }
LABEL_76:
  v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, unint64_t *))qword_10048AB18[v52];
  if (v53)
    v54 = v53;
  else
    v54 = sub_100217F8C;
  v118 = 0;
  v119 = 0;
  v117 = a1;
  if (!(_QWORD)v95)
    goto LABEL_96;
LABEL_80:
  if (SDWORD1(v94) >= 3)
  {
    v57 = v99 + 1;
    v58 = 1;
    v59 = DWORD1(v94) & 0xFFFFFFFE;
    v60 = 1;
    do
    {
      v58 *= *(v57 - 1);
      v60 *= *v57;
      v57 += 2;
      v59 -= 2;
    }
    while (v59);
    v55 = v60 * v58;
    v61 = DWORD1(v94) - (unint64_t)(DWORD1(v94) & 0xFFFFFFFE);
    if (v61)
    {
      v62 = (_DWORD *)((char *)v99 + ((4 * DWORD1(v94)) & 0x3FFFFFFF8));
      do
      {
        v63 = *v62++;
        v55 *= v63;
        --v61;
      }
      while (v61);
    }
  }
  else
  {
    v55 = SHIDWORD(v94) * (uint64_t)SDWORD2(v94);
  }
  if (v55)
    v64 = DWORD1(v94) == 0;
  else
    v64 = 1;
  if (v64)
    goto LABEL_96;
  v65 = &v94;
LABEL_97:
  v118 = v65;
  v119 = 0;
  v115 = 0;
  v116 = 0;
  sub_100254D30((uint64_t)v90, &v117, (uint64_t)&v115, -1);
  v66 = v37 + 1;
  v67 = (v37 + 1) * v92;
  v68 = (v93 + 1023) / v93;
  if (v67 < (int)v68)
    LODWORD(v68) = (v37 + 1) * v92;
  v69 = (int)v68 / v66 * v66;
  v112 = v114;
  v113 = v93 * v69 + 32;
  if (v113 >= 0x409)
    operator new[]();
  sub_1001D4510((uint64_t)&v102, *(_DWORD *)a1 & 0xFFF, v114, (int)v68 / v66);
  v88 = a1;
  if (v67 <= 0)
  {
    v75 = -1;
    while (++v75 < v91)
      sub_100254D78((uint64_t)v90);
  }
  else
  {
    for (i = 0; i < v91; ++i)
    {
      for (j = 0; j < v67; j += v69)
      {
        while (1)
        {
          v72 = v67 - j;
          if (v67 - j >= v69)
            v72 = v69;
          v73 = v72;
          v74 = v93 * v72;
          if (v116)
            break;
          memcpy(v115, v114, v93 * v72);
          v115 += v74;
          j += v69;
          if (j >= v67)
            goto LABEL_103;
        }
        v89[0] = v72;
        v89[1] = 1;
        v54((uint64_t)v114, 0, v116, 0, (uint64_t)v115, 0, v89, &v93);
        v116 += v73;
        v115 += v74;
      }
LABEL_103:
      sub_100254D78((uint64_t)v90);
    }
  }
  if (v112 != v114 && v112 != 0)
    operator delete[]();
  a1 = v88;
  if (v98)
  {
    v77 = (unsigned int *)(v98 + 20);
    do
    {
      v78 = __ldaxr(v77);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, v77));
    if (!v79)
      sub_100256C90((uint64_t)&v94);
  }
  v98 = 0;
  v95 = 0u;
  v96 = 0u;
  if (SDWORD1(v94) >= 1)
  {
    v80 = 0;
    v81 = v99;
    do
      v81[v80++] = 0;
    while (v80 < SDWORD1(v94));
  }
  if (v100 != v101)
    j__free(v100);
  if (v106)
  {
    v82 = (unsigned int *)(v106 + 20);
    do
    {
      v83 = __ldaxr(v82);
      v84 = v83 - 1;
    }
    while (__stlxr(v84, v82));
    if (!v84)
      sub_100256C90((uint64_t)&v102);
  }
  v106 = 0;
  v103 = 0u;
  v104 = 0u;
  if (SDWORD1(v102) >= 1)
  {
    v85 = 0;
    v86 = v107;
    do
      v86[v85++] = 0;
    while (v85 < SDWORD1(v102));
  }
  if (v108 != v109)
    j__free(v108);
LABEL_140:
  if (v111)
    sub_1002989D0(v110);
  return a1;
}

void sub_10021A0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10021A15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  if (a47 != v47 && a47 != 0)
    operator delete[]();
  sub_100006BE4((uint64_t)&a21);
  sub_100006BE4((uint64_t)&a33);
  sub_1001D40CC((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_10021A1A4(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _BYTE *v44;
  char *v45;
  _BYTE *v46;
  _BYTE *v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64x2_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64x2_t v70;
  uint64_t v71;
  uint64x2_t v72;
  uint64x2_t v73;
  uint64x2_t v74;
  uint64x2_t v75;
  uint64x2_t v76;
  uint64x2_t v77;
  uint64x2_t v78;
  uint64x2_t v79;
  uint64x2_t v80;
  uint64x2_t v81;
  uint64x2_t v82;
  uint64x2_t v83;
  uint64x2_t v84;
  uint64x2_t v85;
  uint64x2_t v86;
  uint64x2_t v87;
  uint64x2_t v88;
  uint64x2_t v89;
  uint64x2_t v90;
  uint64x2_t v91;
  uint64x2_t v92;
  uint64x2_t v93;
  uint64x2_t v94;
  int32x4_t v95;
  uint64x2_t v96;
  int16x8_t v97;
  int8x16_t v98;
  int16x8_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int8x16_t v104;
  int32x4_t v105;
  unint64_t v106;
  int16x8_t v107;
  unint64_t v108;
  unint64_t v109;
  int16x8_t v110;
  int32x4_t v111;
  uint64x2_t v112;
  int16x8_t v113;
  uint64x2_t v114;
  int8x16_t v115;
  unint64_t v116;
  uint64x2_t v117;
  unint64_t v118;
  unint64_t v119;
  int16x8_t v120;
  int32x4_t v121;
  int8x16_t v122;
  uint64x2_t v123;
  uint64x2_t v124;
  int16x8_t v125;
  int32x4_t v126;
  uint64x2_t v127;
  uint64x2_t v128;
  int8x16_t v129;
  int32x4_t v130;
  uint64x2_t v131;
  unint64_t v132;
  int8x16_t v133;
  uint64_t v134;
  uint64x2_t v135;
  int8x16_t v136;
  int16x8_t v137;
  int8x16_t v138;
  uint64x2_t v139;
  int32x4_t v140;
  int16x8_t v141;
  int8x16_t v142;
  int32x4_t v143;
  BOOL v145;
  BOOL v147;
  BOOL v149;
  BOOL v151;
  BOOL v153;
  BOOL v155;
  BOOL v157;
  BOOL v159;
  BOOL v161;
  BOOL v163;
  BOOL v165;
  unint64_t v166;
  BOOL v168;
  BOOL v170;
  BOOL v172;
  BOOL v174;
  BOOL v176;
  BOOL v178;
  BOOL v180;
  BOOL v182;
  unint64_t v183;
  unint64_t v184;
  BOOL v186;
  BOOL v188;
  BOOL v190;
  BOOL v192;
  BOOL v194;
  BOOL v196;
  BOOL v197;
  unint64_t v198;
  char v199;
  unint64_t v200;
  uint64x2_t v201;
  uint64x2_t v202;
  uint64x2_t v203;
  uint64x2_t v204;
  int16x8_t v205;
  uint64x2_t v206;
  uint64x2_t v207;
  uint64x2_t v208;
  BOOL v209;
  uint64x2_t v210;
  uint64x2_t v211;
  char v212;
  uint64x2_t v213;
  int8x16_t v214;
  int8x8_t v215;
  __int16 v216;
  int8x16_t v217;
  int8x8_t v218;
  BOOL v219;
  __int16 v220;
  __int16 v221;
  __int16 v222;
  int8x16_t v223;
  int8x8_t v224;
  __int16 v225;
  int8x16_t v226;
  int8x8_t v227;
  __int16 v228;
  char v229;
  BOOL v230;
  BOOL v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  _OWORD *v241;
  _OWORD *v242;
  uint64_t v243;
  int v244;
  _DWORD *v245;
  _DWORD *v246;
  int v247;
  int v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  _OWORD *v266;
  _OWORD *v267;
  uint64_t v268;
  unint64_t v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  _OWORD *v273;
  _OWORD *v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  _OWORD *v309;
  _OWORD *v310;
  uint64_t v311;
  unint64_t v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  _OWORD *v316;
  _OWORD *v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unsigned int *v324;
  unsigned int v325;
  unsigned int v326;
  uint64_t v327;
  int *v328;
  unsigned int *v329;
  unsigned int v330;
  unsigned int v331;
  uint64_t v332;
  int *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  BOOL v370;
  BOOL v371;
  BOOL v372;
  BOOL v373;
  BOOL v374;
  BOOL v375;
  BOOL v376;
  BOOL v377;
  BOOL v378;
  BOOL v379;
  BOOL v380;
  BOOL v381;
  BOOL v382;
  BOOL v383;
  BOOL v384;
  BOOL v385;
  BOOL v386;
  BOOL v387;
  BOOL v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  BOOL v394;
  unint64_t v395;
  unint64_t v396;
  int8x16_t v397;
  int8x16_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64x2_t v401;
  uint64x2_t v402;
  uint64x2_t v403;
  uint64x2_t v404;
  int8x16_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  uint64x2_t v410;
  unint64_t v411;
  unint64_t v412;
  unsigned int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  int v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  uint64_t v424;
  uint64_t v425;
  int *v426;
  void *v427;
  _QWORD v428[3];
  int32x2_t v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  uint64_t v433;
  uint64_t v434;
  int *v435;
  void *v436;
  _QWORD v437[3];
  int32x2_t v438;
  char v439[8];
  int v440;

  sub_100298C2C(v439, &off_10044D2B8);
  if ((int)sub_100260608(a1, -1) >= 3)
  {
    v430 = 0uLL;
    *(_OWORD *)sub_10029430C(&v430, 16) = *(_OWORD *)"_src.dims() <= 2";
    sub_100294B74(-215, (uint64_t *)&v430, "flip", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 742);
  }
  sub_10025D920(a1, 0xFFFFFFFF, (uint64_t)&v438);
  if (a3 < 0)
  {
    if (v438.i32[0] == 1)
      v6 = 0;
    else
      v6 = a3;
    if (v438.i32[1] == 1)
      a3 = 1;
    else
      a3 = v6;
    if (a3 < 1)
      goto LABEL_14;
  }
  else if (a3 < 1)
  {
    goto LABEL_14;
  }
  if (v438.i32[0] == 1)
  {
LABEL_18:
    sub_1002617AC(a1, (_DWORD *)a2);
    goto LABEL_19;
  }
LABEL_14:
  if (!a3 && v438.i32[1] == 1 || a3 < 0 && *(_QWORD *)&v438 == 0x100000001)
    goto LABEL_18;
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_OWORD *)(v7 + 16);
    v430 = *(_OWORD *)v7;
    v431 = v8;
    v432 = *(_OWORD *)(v7 + 32);
    v9 = *(_QWORD *)(v7 + 56);
    v433 = *(_QWORD *)(v7 + 48);
    v434 = v9;
    v435 = (int *)&v430 + 2;
    v436 = v437;
    v437[1] = 0;
    v437[0] = 0;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 20);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    if (*(int *)(v7 + 4) > 2)
    {
      DWORD1(v430) = 0;
      sub_100256B48((uint64_t)&v430, v7);
    }
    else
    {
      v12 = *(_QWORD **)(v7 + 72);
      v13 = v436;
      *(_QWORD *)v436 = *v12;
      v13[1] = v12[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v430);
  }
  v14 = v430 & 0xFFF;
  v429 = v438;
  sub_10026214C(a2, &v429, v14, -1, 0, 0);
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_OWORD *)(v15 + 16);
    v421 = *(_OWORD *)v15;
    v422 = v16;
    v423 = *(_OWORD *)(v15 + 32);
    v17 = *(_QWORD *)(v15 + 56);
    v424 = *(_QWORD *)(v15 + 48);
    v425 = v17;
    v426 = (int *)&v421 + 2;
    v427 = v428;
    v428[1] = 0;
    v428[0] = 0;
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 20);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    if (*(int *)(v15 + 4) > 2)
    {
      DWORD1(v421) = 0;
      sub_100256B48((uint64_t)&v421, v15);
    }
    else
    {
      v20 = *(_QWORD **)(v15 + 72);
      v21 = v427;
      *(_QWORD *)v427 = *v20;
      v21[1] = v20[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v421);
  }
  v22 = ((v14 >> 3) + 1) << ((0xFA50u >> (2 * (v14 & 7))) & 3);
  if (a3 > 0)
  {
    v23 = v437[0];
    v24 = v422;
    v25 = v428[0];
    v26 = v431;
    v27 = *v435;
    v420 = v435[1];
    v28 = &v420;
LABEL_40:
    v28[1] = v27;
    sub_10021BA68(v26, v23, v24, v25, v28, v22);
    goto LABEL_368;
  }
  v340 = a3;
  v341 = ((v14 >> 3) + 1) << ((0xFA50u >> (2 * (v14 & 7))) & 3);
  v29 = (*v435 - 1);
  if (*v435 >= 1)
  {
    v30 = v435[1] * v341;
    v31 = v428[0];
    v32 = v422;
    v33 = v437[0];
    v34 = v431;
    v35 = v428[0] * v29;
    v36 = v422 + v428[0] * v29;
    v37 = v437[0] * v29;
    v38 = v431 + v37;
    v39 = -v437[0];
    v418 = -v428[0];
    v40 = (*v435 + 1) >> 1;
    v41 = v30 - 4;
    v42 = v30;
    v43 = v30 - 16;
    v413 = v40;
    v415 = v422;
    v414 = v431;
    if (v30 < 16)
    {
      if (v30 < 4)
      {
        if (v30 >= 1)
        {
          v44 = (_BYTE *)(v35 + v422 + 2);
          v45 = (char *)(v431 + 1);
          v46 = (_BYTE *)(v37 + v431 + 2);
          v47 = (_BYTE *)(v422 + 1);
          do
          {
            v48 = *(v45 - 1);
            *(v47 - 1) = *(v46 - 2);
            *(v44 - 2) = v48;
            if (v30 != 1)
            {
              v49 = *v45;
              *v47 = *(v46 - 1);
              *(v44 - 1) = v49;
              if (v30 != 2)
              {
                v50 = v45[1];
                v47[1] = *v46;
                *v44 = v50;
              }
            }
            v44 += v418;
            v45 += v33;
            v46 += v39;
            v47 += v31;
            --v40;
          }
          while (v40);
        }
        goto LABEL_367;
      }
      v282 = 0;
      v283 = v35 + v422;
      v284 = v37 + v431;
      v285 = 3;
      if (v41 > 3)
        v285 = v30 - 4;
      v286 = (v285 >> 2) + 1;
      v287 = v431;
      v288 = v422;
      while (1)
      {
        v289 = v283 - v31 * v282;
        v290 = v284 - v33 * v282;
        v291 = v33 * v282 + v34;
        v292 = v31 * v282 + v32;
        if ((((v288 | v287) | (v38 | v36)) & 3) != 0)
        {
          v293 = 0;
LABEL_331:
          if (v293 + 1 > v30)
            v295 = v293 + 1;
          else
            v295 = v30;
          v296 = v295 - v293;
          if (v296 < 8)
          {
            v297 = v293;
            goto LABEL_336;
          }
          v299 = v289 + v293;
          v300 = v290 + v293;
          if ((unint64_t)(v299 - v300) < 0x20 || (v301 = v291 + v293, (unint64_t)(v299 - v301) < 0x20))
          {
            v297 = v293;
            v40 = v413;
          }
          else
          {
            v302 = v292 + v293;
            v40 = v413;
            if ((unint64_t)(v302 - v300) < 0x20)
            {
              v297 = v293;
            }
            else if ((unint64_t)(v302 - v301) < 0x20)
            {
              v297 = v293;
            }
            else if ((unint64_t)(v299 - v302) < 0x20)
            {
              v297 = v293;
            }
            else
            {
              if (v296 < 0x20)
              {
                v303 = 0;
                goto LABEL_359;
              }
              v303 = v296 & 0xFFFFFFFFFFFFFFE0;
              v311 = v293;
              v312 = v296 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v313 = *(_OWORD *)(v287 + v311);
                v314 = *(_OWORD *)(v287 + v311 + 16);
                v315 = *(_OWORD *)(v38 + v311 + 16);
                v316 = (_OWORD *)(v288 + v311);
                *v316 = *(_OWORD *)(v38 + v311);
                v316[1] = v315;
                v317 = (_OWORD *)(v36 + v311);
                *v317 = v313;
                v317[1] = v314;
                v311 += 32;
                v312 -= 32;
              }
              while (v312);
              if (v296 == v303)
                goto LABEL_324;
              if ((v296 & 0x18) != 0)
              {
LABEL_359:
                v318 = v296 & 0xFFFFFFFFFFFFFFF8;
                v297 = (v296 & 0xFFFFFFFFFFFFFFF8) + v293;
                v319 = v287 + v293;
                v320 = v38 + v293;
                v321 = v288 + v293;
                v322 = v36 + v293;
                do
                {
                  v323 = *(_QWORD *)(v319 + v303);
                  *(_QWORD *)(v321 + v303) = *(_QWORD *)(v320 + v303);
                  *(_QWORD *)(v322 + v303) = v323;
                  v303 += 8;
                }
                while (v318 != v303);
                v40 = v413;
                if (v296 == v318)
                  goto LABEL_324;
                goto LABEL_336;
              }
              v297 = v303 + v293;
            }
          }
          do
          {
LABEL_336:
            v298 = *(_BYTE *)(v287 + v297);
            *(_BYTE *)(v288 + v297) = *(_BYTE *)(v38 + v297);
            *(_BYTE *)(v36 + v297++) = v298;
          }
          while (v297 < v30);
          goto LABEL_324;
        }
        if (v285 < 0x6C)
          break;
        v293 = 0;
        if ((unint64_t)(v289 - v290) < 0x20)
          goto LABEL_329;
        if ((unint64_t)(v289 - v291) < 0x20)
          goto LABEL_329;
        if ((unint64_t)(v292 - v290) < 0x20)
          goto LABEL_329;
        if ((unint64_t)(v292 - v291) < 0x20)
          goto LABEL_329;
        if ((unint64_t)(v289 - v292) < 0x20)
          goto LABEL_329;
        v304 = 0;
        v305 = v286 & 0x3FFFFFF8;
        do
        {
          v306 = *(_OWORD *)(v287 + v304);
          v307 = *(_OWORD *)(v287 + v304 + 16);
          v308 = *(_OWORD *)(v38 + v304 + 16);
          v309 = (_OWORD *)(v288 + v304);
          *v309 = *(_OWORD *)(v38 + v304);
          v309[1] = v308;
          v310 = (_OWORD *)(v36 + v304);
          *v310 = v306;
          v310[1] = v307;
          v304 += 32;
          v305 -= 8;
        }
        while (v305);
        v293 = 4 * (v286 & 0x3FFFFFF8);
        if (v286 != (v286 & 0x3FFFFFF8))
          goto LABEL_329;
LABEL_330:
        v293 = v293;
        v40 = v413;
        if ((int)v293 < v30)
          goto LABEL_331;
LABEL_324:
        ++v282;
        v287 += v33;
        v38 += v39;
        v288 += v31;
        v36 += v418;
        v32 = v415;
        v34 = v414;
        if ((_DWORD)v282 == v40)
          goto LABEL_367;
      }
      v293 = 0;
      do
      {
LABEL_329:
        v294 = *(_DWORD *)(v287 + v293);
        *(_DWORD *)(v288 + v293) = *(_DWORD *)(v38 + v293);
        *(_DWORD *)(v36 + v293) = v294;
        v293 += 4;
      }
      while (v293 <= v41);
      goto LABEL_330;
    }
    v51 = 0;
    v52 = v43;
    v366 = v37 + v431;
    v367 = v35 + v422;
    v339 = v35 + v422 + 16;
    v338 = v37 + v431 + 16;
    v334 = v422 + 16;
    v335 = v431 + 16;
    if (v43 <= 15)
      v53 = 15;
    else
      v53 = v43;
    v54 = v53 & 0x7FFFFFF0;
    v55 = v54 + 20;
    if ((uint64_t)(v54 + 20) <= v41 + 1)
      v55 = v41 + 1;
    v364 = v55 - v54 - 17;
    v368 = v35 + 12;
    v369 = v53 & 0x7FFFFFF0;
    v363 = v54 | 4;
    v361 = v54 | 8;
    v362 = v35 + v54 + 4;
    v359 = v35 + v54 + 8;
    v360 = v35 + 4;
    v357 = v35 + 8;
    v358 = v54 | 0xC;
    v356 = v35 + v54 + 12;
    v355 = v54 + 16;
    v353 = v37 + 4;
    v354 = v37 + v54 + 4;
    v351 = v37 + 8;
    v352 = v37 + v54 + 8;
    v349 = v37 + 12;
    v350 = v37 + v54 + 12;
    v347 = v35 + v54 + 16;
    v348 = v37 + v54 + 16;
    v337 = (v53 >> 4) + 1;
    v346 = v435[1] * v341;
    v336 = ((v364 >> 2) + 1) & 0x7FFFFFFFFFFFFFF8;
    v56 = v431;
    v57 = v422;
    v344 = v437[0];
    v345 = v428[0];
    v342 = v30 - 4;
    v343 = -v437[0];
    v365 = v53;
    while (1)
    {
      v58 = v31 * v51;
      v59 = v31 * v51 + v32;
      v60 = v33 * v51;
      v61 = v33 * v51 + v34;
      if ((((v57 | v56) | (v38 | v36)) & 3) != 0)
      {
        v62 = 0;
LABEL_277:
        if (v62 + 1 > v42)
          v253 = v62 + 1;
        else
          v253 = v42;
        v254 = v253 - v62;
        if (v254 < 8)
        {
          v255 = v62;
          goto LABEL_315;
        }
        if ((unint64_t)(v367 - v58 - (v366 - v60)) < 0x20)
        {
          v255 = v62;
        }
        else if ((unint64_t)(v367 - v58 - v61) < 0x20)
        {
          v255 = v62;
        }
        else if ((unint64_t)(v59 - (v366 - v60)) < 0x20)
        {
          v255 = v62;
        }
        else if ((unint64_t)(v59 - v61) < 0x20)
        {
          v255 = v62;
        }
        else if ((unint64_t)(v367 - v58 - v59) < 0x20)
        {
          v255 = v62;
        }
        else
        {
          if (v254 < 0x20)
          {
            v256 = 0;
            goto LABEL_303;
          }
          v256 = v254 & 0xFFFFFFFFFFFFFFE0;
          v268 = v62;
          v269 = v254 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v270 = *(_OWORD *)(v56 + v268);
            v271 = *(_OWORD *)(v56 + v268 + 16);
            v272 = *(_OWORD *)(v38 + v268 + 16);
            v273 = (_OWORD *)(v57 + v268);
            *v273 = *(_OWORD *)(v38 + v268);
            v273[1] = v272;
            v274 = (_OWORD *)(v36 + v268);
            *v274 = v270;
            v274[1] = v271;
            v268 += 32;
            v269 -= 32;
          }
          while (v269);
          if (v254 == v256)
            goto LABEL_56;
          if ((v254 & 0x18) != 0)
          {
LABEL_303:
            v275 = v254 & 0xFFFFFFFFFFFFFFF8;
            v255 = (v254 & 0xFFFFFFFFFFFFFFF8) + v62;
            v276 = v56 + v62;
            v277 = v38 + v62;
            v278 = v57 + v62;
            v279 = v36 + v62;
            do
            {
              v280 = *(_QWORD *)(v276 + v256);
              *(_QWORD *)(v278 + v256) = *(_QWORD *)(v277 + v256);
              *(_QWORD *)(v279 + v256) = v280;
              v256 += 8;
            }
            while (v275 != v256);
            if (v254 == v275)
              goto LABEL_56;
            goto LABEL_315;
          }
          v255 = v256 + v62;
        }
        do
        {
LABEL_315:
          v281 = *(_BYTE *)(v56 + v255);
          *(_BYTE *)(v57 + v255) = *(_BYTE *)(v38 + v255);
          *(_BYTE *)(v36 + v255++) = v281;
        }
        while (v255 < v42);
        goto LABEL_56;
      }
      v417 = v33 * v51 + v34;
      v416 = v31 * v51 + v32;
      v63 = 0;
      if (v53 < 0x6B0)
      {
LABEL_262:
        v62 = 0;
        goto LABEL_268;
      }
      v62 = 0;
      if (v32 + v368 - v58 + v369 < v32 + v368 - v58)
        goto LABEL_268;
      v410.i64[1] = v32 + v360 - v58;
      v407 = v416 + 12;
      v64 = v34 + v354 - v60;
      v411 = v417 + v361;
      v65 = v34 + v353 - v60;
      v408 = v34 + v352 - v60;
      v410.i64[0] = v34 + v351 - v60;
      v412 = v34 + v350 - v60;
      v409 = v34 + v349 - v60;
      v400 = v60;
      v390 = v34 + v348 - v60;
      v66 = v32 + v347 - v58;
      v67.i64[0] = v416 + 8;
      v68 = v416 + 8;
      v69 = v416 + 8;
      v70.i64[0] = v416 + 8;
      v71 = v416 + 8;
      v72.i64[0] = v57;
      v73.i64[0] = v57;
      v73.i64[1] = v38;
      v72.i64[1] = v36;
      v74 = (uint64x2_t)vdupq_n_s64(v57);
      v406 = v32 + v359 - v58;
      v75.i64[0] = v406;
      v76.i64[0] = v406;
      v76.i64[1] = v417 + v363;
      v393 = v417 + v363;
      v395 = v32 + v356 - v58;
      v77.i64[0] = v406;
      v77.i64[1] = v395;
      v78.i64[0] = v395;
      v79.i64[0] = v406;
      v80.i64[0] = v406;
      v81.i64[0] = v64;
      v81.i64[1] = v417 + v361;
      v82.i64[0] = v417 + v361;
      v83.i64[0] = v406;
      v83.i64[1] = v417 + v358;
      v84.i64[0] = v417 + v358;
      v396 = v417 + v358;
      v85.i64[0] = v417 + v358;
      v86.i64[0] = v416 + v361;
      v87.i64[0] = v416 + v361;
      v87.i64[1] = v417 + v355;
      v88.i64[0] = v417 + v355;
      v392 = v417 + v355;
      v89.i64[0] = v417 + v355;
      v90.i64[0] = v416 + v361;
      v91.i64[0] = v416 + v361;
      v92.i64[0] = v416 + v361;
      v86.i64[1] = v66;
      v93.i64[0] = v66;
      v75.i64[1] = v416 + v358;
      v94.i64[0] = v66;
      v93.i64[1] = v416 + v361;
      v401 = v93;
      v95 = (int32x4_t)vcgtq_u64(v93, v72);
      v96 = (uint64x2_t)vdupq_n_s64(v36);
      v88.i64[1] = v390;
      v84.i64[1] = v412;
      v403 = v88;
      v404 = v84;
      v97 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v84, v74), (int32x4_t)vcgtq_u64(v88, v74));
      v88.i64[0] = v417 + v361;
      v98 = (int8x16_t)vuzp1q_s16(v97, (int16x8_t)vuzp1q_s32(v95, (int32x4_t)vcgtq_u64(v75, v96)));
      v95.i64[0] = v417 + v363;
      v95.i64[1] = v416 + v363;
      v82.i64[1] = v408;
      v402 = v82;
      v99 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v95, v73), (int32x4_t)vcgtq_u64(v82, v74));
      v95.i64[0] = v395;
      v78.i64[1] = v416 + v355;
      v84.i64[0] = v416 + 8;
      v133 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v75, v74), (int32x4_t)vcgtq_u64(v78, v74)), v99);
      v74.i64[0] = v416 + 12;
      v405 = vuzp1q_s8(v133, v98);
      v75.i64[0] = v416 + 12;
      v74.i64[1] = v410.i64[1];
      v100 = (int32x4_t)vcgtq_u64(v76, v74);
      v76.i64[0] = v416 + 8;
      v67.i64[1] = v410.i64[1];
      v101 = (int32x4_t)vcgtq_u64(v77, v67);
      v77.i64[0] = v65;
      v102 = (int16x8_t)vuzp1q_s32(v101, v100);
      v100.i64[0] = v65;
      v77.i64[1] = v410.i64[1];
      v103 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v81, (uint64x2_t)vdupq_n_s64(v410.u64[1])), (int32x4_t)vcgtq_u64(v83, v77));
      v83.i64[0] = v409;
      v104 = (int8x16_t)vuzp1q_s16(v102, v103);
      v98.i64[0] = v409;
      v83.i64[1] = v416 + 4;
      v105 = (int32x4_t)vcgtq_u64(v86, v83);
      v83.i64[0] = v410.i64[0];
      v83.i64[1] = v416 + 4;
      v92.i64[1] = v417 + v358;
      v106 = v32 + v362 - v58;
      v100.i64[1] = v416 + 4;
      v107 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v87, v83), v105);
      v87.i64[0] = v106;
      v111 = (int32x4_t)vcgtq_u64(v92, (uint64x2_t)v100);
      v92.i64[0] = v106;
      v92.i64[1] = v64;
      v87.i64[1] = v406;
      v90.i64[1] = v395;
      v91.i64[1] = v417 + v363;
      v108 = v417 + 12;
      v83.i64[0] = v417 + 12;
      v83.i64[1] = v409;
      v76.i64[1] = v416 + 4;
      v75.i64[1] = v416 + 4;
      v109 = v417 + 8;
      v398 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v81, (uint64x2_t)vdupq_n_s64(v416 + 4)), v111), v107), v104);
      v110 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v90, v76), (int32x4_t)vcgtq_u64(v91, v75));
      v111.i64[0] = v32 + v368 - v58;
      v75.i64[0] = v111.i64[0];
      v75.i64[1] = v416 + 4;
      v112 = (uint64x2_t)vdupq_n_s64(v106);
      v113 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v112, v83), (int32x4_t)vcgtq_u64(v87, v75));
      v87.i64[0] = v417 + 8;
      v87.i64[1] = v410.i64[0];
      v115 = (int8x16_t)vuzp1q_s16(v113, v110);
      v116 = v417 + 4;
      v113.i64[0] = v417 + 4;
      v391 = v65;
      v113.i64[1] = v65;
      v86.i64[0] = v56;
      v91.i64[0] = v56;
      v91.i64[1] = v36;
      v397 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v78, v96), (int32x4_t)vcgtq_u64(v92, v91)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v112, (uint64x2_t)v113), (int32x4_t)vcgtq_u64(v112, v87))), v115);
      v127.i64[1] = v416 + 12;
      v123.i64[1] = v65;
      v70.i64[1] = v410.i64[0];
      v399 = v31 * v51;
      v118 = v32 + v357 - v58;
      v84.i64[1] = v118;
      v94.i64[1] = v416 + v355;
      v119 = v416 + v355;
      v128.i64[1] = v409;
      v89.i64[1] = v416 + v358;
      v120 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v89, v128), (int32x4_t)vcgtq_u64(v94, v84));
      v115.i64[0] = v417 + v363;
      v115.i64[1] = v64;
      v79.i64[1] = v417 + v355;
      v80.i64[1] = v66;
      v88.i64[1] = v416 + v358;
      v85.i64[1] = v416 + v358;
      v121 = (int32x4_t)vcgtq_u64(v85, v70);
      v85.i64[0] = v410.i64[1];
      v89.i64[0] = v410.i64[1];
      v89.i64[1] = v417 + 8;
      v122 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v88, v123), v121), v120);
      v124.i64[0] = v118;
      v123.i64[0] = v118;
      v124.i64[1] = v416 + 12;
      v98.i64[1] = v410.i64[1];
      v95.i64[1] = v416 + v358;
      v125 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v79, v410), (int32x4_t)vcgtq_u64(v80, (uint64x2_t)v98));
      v126 = (int32x4_t)vcgtq_u64((uint64x2_t)v95, v127);
      v127.i64[0] = v410.i64[1];
      v128.i64[0] = v410.i64[1];
      v121.i64[0] = v410.i64[1];
      v98.i64[0] = v410.i64[1];
      v85.i64[1] = v416 + 8;
      v141 = (int16x8_t)vuzp1q_s32(v126, (int32x4_t)vcgtq_u64((uint64x2_t)v115, (uint64x2_t)vdupq_n_s64(v416 + 8)));
      v84.i64[0] = v416 + v355;
      v126.i64[0] = v416 + v355;
      v84.i64[1] = v406;
      v129 = vuzp1q_s8((int8x16_t)vuzp1q_s16(v125, v141), v122);
      v122.i64[0] = v416 + v363;
      v125.i64[0] = v416 + v363;
      v125.i64[1] = v64;
      v389 = v106;
      v122.i64[1] = v106;
      v130 = (int32x4_t)vcgtq_u64((uint64x2_t)v122, v75);
      v131 = (uint64x2_t)vdupq_n_s64(v416 + v363);
      v132 = v416 + v363;
      v98.i64[1] = v56;
      v133.i64[0] = v56;
      v86.i64[1] = v57;
      v134 = v416 + v358;
      v136 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v131, v85), (int32x4_t)vcgtq_u64(v131, v124)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v125, v86), (int32x4_t)vcgtq_u64(v131, (uint64x2_t)v113))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v131, v87), (int32x4_t)vcgtq_u64(v131, v83)), (int16x8_t)vuzp1q_s32(v130, (int32x4_t)vcgtq_u64(v112, v85))));
      v139.i64[1] = v406;
      v121.i64[1] = v118;
      v125.i64[0] = v408;
      v137 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v139, (uint64x2_t)v121), (int32x4_t)vcgtq_u64(v84, (uint64x2_t)v98));
      v84.i64[0] = v408;
      v125.i64[1] = v406;
      v121.i64[0] = v38;
      v121.i64[1] = v417 + 4;
      v138 = (int8x16_t)vuzp1q_s16(v137, (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(v406), (uint64x2_t)v121), (int32x4_t)vcgtq_u64((uint64x2_t)v125, v89)));
      v125.i64[0] = v416 + 4;
      v131.i64[0] = v416 + 4;
      v86.i64[0] = v416 + 4;
      v98.i64[0] = v416 + 4;
      v125.i64[1] = v111.i64[0];
      v89.i64[0] = v390;
      v139.i64[0] = v390;
      v89.i64[1] = v416 + v361;
      v140 = (int32x4_t)vcgtq_u64(v89, (uint64x2_t)v125);
      v98.i64[1] = v417 + 12;
      v89.i64[0] = v412;
      v141.i64[0] = v412;
      v89.i64[1] = v416 + v361;
      v86.i64[1] = v417 + 8;
      v84.i64[1] = v416 + v361;
      v142 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(v416 + v361), (uint64x2_t)v121), (int32x4_t)vcgtq_u64(v84, v86)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v89, (uint64x2_t)v98), v140)), v138);
      v131.i64[1] = v56;
      v126.i64[1] = v416 + v361;
      v143 = (int32x4_t)vcgtq_u64((uint64x2_t)v126, v131);
      v145 = v57 < v106 && v36 < v132;
      v387 = v145;
      v147 = v57 < v416 + v361 && v416 + 4 < v132;
      v388 = v147;
      v149 = v118 < v393 && v56 < v395;
      v386 = v149;
      v151 = v118 < v64 && v38 < v395;
      v385 = v151;
      v153 = v118 < v411 && v116 < v395;
      v384 = v153;
      v155 = v118 < v408 && v65 < v395;
      v383 = v155;
      v157 = v118 < v396 && v109 < v395;
      v382 = v157;
      v159 = v118 < v412 && v410.i64[0] < v395;
      v381 = v159;
      v161 = v118 < v392 && v108 < v395;
      v380 = v161;
      v163 = v118 < v390 && v409 < v395;
      v379 = v163;
      v165 = v118 < v66 && v32 + v368 - v58 < v395;
      v378 = v165;
      v166 = v416 + v355;
      v168 = v407 < v393 && v56 < v119;
      v377 = v168;
      v170 = v407 < v64 && v38 < v119;
      v376 = v170;
      v172 = v407 < v411 && v116 < v119;
      v375 = v172;
      v174 = v407 < v408 && v65 < v119;
      v374 = v174;
      v176 = v407 < v396 && v109 < v166;
      v373 = v176;
      v178 = v407 < v412 && v410.i64[0] < v166;
      v372 = v178;
      v180 = v407 < v392 && v108 < v166;
      v371 = v180;
      v182 = v407 < v390 && v409 < v166;
      v370 = v182;
      v183 = v32 + v347 - v58;
      v184 = v32 + v368 - v58;
      v186 = v407 < v66 && v32 + v368 - v58 < v166;
      v188 = v56 < v66 && v184 < v393;
      v190 = v38 < v66 && v184 < v64;
      v394 = v190;
      v192 = v417 + 4 < v183 && v184 < v411;
      v194 = v391 < v183 && v184 < v408;
      v196 = v109 < v183 && v184 < v396;
      v197 = v410.i64[0] >= v183 || v184 >= v412;
      v198 = v184;
      v199 = !v197;
      v200 = v183;
      v141.i64[1] = v406;
      v139.i64[1] = v406;
      v202.i64[1] = v395;
      v203.i64[1] = v118;
      v204.i64[1] = v416 + v361;
      v207.i64[0] = v36;
      v204.i64[0] = v416 + v358;
      v203.i64[0] = v416 + 4;
      v205 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v204, v203), v143);
      v206.i64[0] = v36;
      v207.i64[1] = v410.i64[1];
      v208.i64[1] = v408;
      v209 = v108 >= v183 || v198 >= v392;
      v210.i64[1] = v412;
      v211.i64[1] = v389;
      v212 = !v209;
      v206.i64[1] = v38;
      v213.i64[1] = v390;
      v114.i64[0] = v417 + 8;
      v117.i64[0] = v417 + 4;
      v128.i64[1] = v198;
      v133.i64[1] = v38;
      v210.i64[0] = v416 + v358;
      v213.i64[0] = v416 + v358;
      v202.i64[0] = v416 + v358;
      v127.i64[1] = v417 + 12;
      v135.i64[0] = v416 + v358;
      v208.i64[0] = v416 + v358;
      v114.i64[1] = v416 + 8;
      v117.i64[1] = v416 + 8;
      v123.i64[1] = v416 + 8;
      v201.i64[1] = v416 + 8;
      v201.i64[0] = v417 + 12;
      v111.i64[1] = v416 + 12;
      v135.i64[1] = v416 + v355;
      v214 = vandq_s8(vcltzq_s8(vshlq_n_s8(vandq_s8(v129, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v141, v127), (int32x4_t)vcgtq_u64(v139, v128)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v135, v123), (int32x4_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(v416 + v358), (uint64x2_t)v133))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v208, v117), (int32x4_t)vcgtq_u64(v210, v114)), (int16x8_t)vuzp1q_s32(
                                                 (int32x4_t)vcgtq_u64(v213, v201),
                                                 (int32x4_t)vcgtq_u64(v202, (uint64x2_t)v111))))),
                   7uLL)),
               (int8x16_t)xmmword_1003BCAE0);
      v215 = (int8x8_t)vextq_s8(v214, v214, 8uLL).u64[0];
      v215.i8[0] = vaddv_s8(v215);
      v216 = v215.i16[0];
      v211.i64[0] = v417 + v363;
      v217 = vandq_s8(vcltzq_s8(vshlq_n_s8(vandq_s8(v397, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v112, v124), (int32x4_t)vcgtq_u64(v211, v206)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v402, v96), (int32x4_t)vcgtq_u64(v404, v96))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v403, v96), (int32x4_t)vcgtq_u64(v401, v207)), v205))), 7uLL)), (int8x16_t)xmmword_1003BCAE0);
      v218 = (int8x8_t)vextq_s8(v217, v217, 8uLL).u64[0];
      v218.i8[0] = vaddv_s8(v218);
      v219 = v409 >= v200 || v198 >= v390;
      v217.i8[0] = vaddv_s8(*(int8x8_t *)v217.i8);
      v220 = v217.i16[0];
      v217.i8[0] = vaddv_s8(*(int8x8_t *)v214.i8);
      v221 = v217.i16[0];
      v222 = v220 | ((v218.i16[0] | (unsigned __int16)v216) << 8);
      v223 = vandq_s8(vcltzq_s8(vshlq_n_s8(vandq_s8(v398, v142), 7uLL)), (int8x16_t)xmmword_1003BCAE0);
      v224 = (int8x8_t)vextq_s8(v223, v223, 8uLL).u64[0];
      v224.i8[0] = vaddv_s8(v224);
      v225 = v224.i16[0];
      v226 = vandq_s8(vcltzq_s8(vshlq_n_s8(vandq_s8(v405, v136), 7uLL)), (int8x16_t)xmmword_1003BCAE0);
      v227 = (int8x8_t)vextq_s8(v226, v226, 8uLL).u64[0];
      v227.i8[0] = vaddv_s8(v227);
      v226.i8[0] = vaddv_s8(*(int8x8_t *)v226.i8);
      v223.i8[0] = vaddv_s8(*(int8x8_t *)v223.i8);
      v228 = v226.i16[0] | ((v227.i16[0] | (unsigned __int16)v225) << 8) | v223.i16[0] | v222 | v221;
      v229 = !v219;
      if (v228)
      {
        v63 = 0;
        v62 = 0;
        v31 = v345;
        v30 = v346;
        v39 = v343;
        v33 = v344;
        v40 = v413;
        v32 = v415;
        v34 = v414;
        v53 = v365;
        v60 = v400;
        v58 = v399;
        goto LABEL_267;
      }
      v230 = v188;
      v32 = v415;
      v34 = v414;
      v53 = v365;
      v60 = v400;
      v58 = v399;
      if (v388
        || v387
        || v386
        || v385
        || v384
        || v383
        || v382
        || v381
        || v380
        || v379
        || v378
        || v377
        || v376
        || v375
        || v374)
      {
        v63 = 0;
        v62 = 0;
        v31 = v345;
        v30 = v346;
        goto LABEL_264;
      }
      v231 = v196;
      v31 = v345;
      v30 = v346;
      if (v373)
      {
        v63 = 0;
        v62 = 0;
LABEL_264:
        v39 = v343;
        v33 = v344;
LABEL_266:
        v40 = v413;
        goto LABEL_267;
      }
      v39 = v343;
      v33 = v344;
      if (v372 || v371 || v370 || v186 || v230 || v394 || v192)
      {
        v63 = 0;
        v62 = 0;
        goto LABEL_266;
      }
      v40 = v413;
      if (v194)
        break;
      v41 = v342;
      if (v231 || (v199 & 1) != 0)
      {
        v63 = 0;
        v62 = 0;
        goto LABEL_268;
      }
      v63 = 0;
      if ((v212 & 1) != 0)
        goto LABEL_262;
      v62 = 0;
      if ((v229 & 1) != 0)
        goto LABEL_268;
      v232 = 0;
      v233 = v337 & 0xFFFFFFC;
      do
      {
        v235 = *(_OWORD *)(v56 + v232);
        v234 = *(_OWORD *)(v56 + v232 + 16);
        v237 = *(_OWORD *)(v56 + v232 + 32);
        v236 = *(_OWORD *)(v56 + v232 + 48);
        v238 = *(_OWORD *)(v38 + v232 + 16);
        v239 = *(_OWORD *)(v38 + v232 + 32);
        v240 = *(_OWORD *)(v38 + v232 + 48);
        v241 = (_OWORD *)(v57 + v232);
        v242 = (_OWORD *)(v36 + v232);
        *v241 = *(_OWORD *)(v38 + v232);
        v241[1] = v238;
        v241[2] = v239;
        v241[3] = v240;
        v242[2] = v237;
        v242[3] = v236;
        v232 += 64;
        *v242 = v235;
        v242[1] = v234;
        v233 -= 4;
      }
      while (v233);
      v63 = v337 & 0xFFFFFFC;
      v243 = v63 - 1;
      v62 = 16 * v63;
      if (v337 != v63)
        goto LABEL_268;
LABEL_270:
      if ((int)v41 < (int)v62)
      {
        v62 = v62;
        v59 = v416;
        v61 = v417;
        if ((int)v62 < v30)
          goto LABEL_277;
        goto LABEL_56;
      }
      v250 = v62 & 0xFFFFFFF0;
      if (v364 < 0x7C)
      {
        v251 = v250;
        v59 = v416;
        v61 = v417;
        goto LABEL_275;
      }
      v257 = 16 * v243;
      v258 = 16 * v243 + v339 - v58;
      v259 = v257 + v338 - v60;
      v59 = v416;
      if ((unint64_t)(v258 - v259) < 0x20
        || (v260 = v257 + v335 + v60, (unint64_t)(v258 - v260) < 0x20)
        || (v261 = v257 + v334 + v58, (unint64_t)(v261 - v259) < 0x20))
      {
        v251 = v250;
        v61 = v417;
        goto LABEL_275;
      }
      v61 = v417;
      if ((unint64_t)(v261 - v260) < 0x20)
      {
        v251 = v250;
        do
        {
LABEL_275:
          v252 = *(_DWORD *)(v56 + v251);
          *(_DWORD *)(v57 + v251) = *(_DWORD *)(v38 + v251);
          *(_DWORD *)(v36 + v251) = v252;
          v251 += 4;
        }
        while (v251 <= v41);
        goto LABEL_276;
      }
      if ((unint64_t)(v258 - v261) < 0x20)
      {
        v251 = v250;
        goto LABEL_275;
      }
      v251 = v250 + 4 * v336;
      v262 = ((v364 >> 2) + 1) & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v263 = *(_OWORD *)(v56 + v250);
        v264 = *(_OWORD *)(v56 + v250 + 16);
        v265 = *(_OWORD *)(v38 + v250 + 16);
        v266 = (_OWORD *)(v57 + v250);
        *v266 = *(_OWORD *)(v38 + v250);
        v266[1] = v265;
        v267 = (_OWORD *)(v36 + v250);
        *v267 = v263;
        v267[1] = v264;
        v250 += 32;
        v262 -= 8;
      }
      while (v262);
      if ((v364 >> 2) + 1 != v336)
        goto LABEL_275;
LABEL_276:
      v62 = v251;
      if ((int)v251 < v30)
        goto LABEL_277;
LABEL_56:
      ++v51;
      v56 += v33;
      v38 += v39;
      v57 += v31;
      v36 += v418;
      if ((_DWORD)v51 == v40)
        goto LABEL_367;
    }
    v63 = 0;
    v62 = 0;
LABEL_267:
    v41 = v342;
LABEL_268:
    v243 = v63 - 1;
    do
    {
      v244 = *(_DWORD *)(v56 + v62);
      v245 = (_DWORD *)(v57 + v62);
      *v245 = *(_DWORD *)(v38 + v62);
      v246 = (_DWORD *)(v36 + v62);
      *v246 = v244;
      v247 = *(_DWORD *)(v56 + v62 + 4);
      v245[1] = *(_DWORD *)(v38 + v62 + 4);
      v246[1] = v247;
      v248 = *(_DWORD *)(v56 + v62 + 8);
      v245[2] = *(_DWORD *)(v38 + v62 + 8);
      v246[2] = v248;
      v249 = *(_DWORD *)(v56 + v62 + 12);
      v245[3] = *(_DWORD *)(v38 + v62 + 12);
      v246[3] = v249;
      v62 += 16;
      ++v243;
    }
    while (v62 <= v52);
    goto LABEL_270;
  }
LABEL_367:
  if (v340 < 0)
  {
    v23 = v428[0];
    v26 = v422;
    v27 = *v426;
    v419 = v426[1];
    v28 = &v419;
    v24 = v422;
    v25 = v428[0];
    v22 = v341;
    goto LABEL_40;
  }
LABEL_368:
  if (v425)
  {
    v324 = (unsigned int *)(v425 + 20);
    do
    {
      v325 = __ldaxr(v324);
      v326 = v325 - 1;
    }
    while (__stlxr(v326, v324));
    if (!v326)
      sub_100256C90((uint64_t)&v421);
  }
  v425 = 0;
  v422 = 0u;
  v423 = 0u;
  if (SDWORD1(v421) >= 1)
  {
    v327 = 0;
    v328 = v426;
    do
      v328[v327++] = 0;
    while (v327 < SDWORD1(v421));
  }
  if (v427 != v428)
    j__free(v427);
  if (v434)
  {
    v329 = (unsigned int *)(v434 + 20);
    do
    {
      v330 = __ldaxr(v329);
      v331 = v330 - 1;
    }
    while (__stlxr(v331, v329));
    if (!v331)
      sub_100256C90((uint64_t)&v430);
  }
  v434 = 0;
  v431 = 0u;
  v432 = 0u;
  if (SDWORD1(v430) >= 1)
  {
    v332 = 0;
    v333 = v435;
    do
      v333[v332++] = 0;
    while (v332 < SDWORD1(v430));
  }
  if (v436 != v437)
    j__free(v436);
LABEL_19:
  if (v440)
    sub_1002989D0(v439);
}

void sub_10021B9B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4((uint64_t)&STACK[0x330]);
  sub_100006BE4((uint64_t)&STACK[0x3A0]);
  sub_1001D40CC(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_10021B9DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4((uint64_t)&STACK[0x3A0]);
  sub_1001D40CC(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_10021B9FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_10021BA14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029434C((uint64_t *)&STACK[0x3A0]);
  sub_1001D40CC(v1 - 176);
  _Unwind_Resume(a1);
}

_DWORD *sub_10021BA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, unint64_t a6)
{
  uint64_t v9;
  int v10;
  _DWORD *result;
  uint64_t v13;
  int *v14;
  int v15;
  unint64_t v16;
  int32x4_t *v17;
  int64x2_t v18;
  unint64_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int32x4_t *v22;
  unint64_t v23;
  int64x2_t v24;
  int64x2_t v25;
  uint64_t v26;
  int32x4_t *v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  int64x2_t v31;
  unint64_t v32;
  int64x2_t v33;
  int64x2_t v34;
  unint64_t v35;
  int32x4_t *v36;
  int64x2_t v37;
  int64x2_t v38;
  int v39;
  _DWORD *v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v45;
  char v46;
  int v47;
  _DWORD v48[3];
  int v49;
  _BYTE v50[1040];

  v9 = *a5;
  if ((int)v9 >= -1)
    v10 = v9 + 1;
  else
    v10 = v9 + 2;
  result = v48;
  if (v9 * a6 >= 0x109)
    operator new[]();
  if ((int)v9 >= 1 && a6 != 0)
  {
    v13 = v9;
    if (a6 > 7)
    {
      v16 = a6 - (a6 & 0xFFFFFFFFFFFFFFF8);
      if (a6 == (a6 & 0xFFFFFFFFFFFFFFF8))
      {
        v17 = (int32x4_t *)v50;
        v18 = vdupq_n_s64(8uLL);
        do
        {
          v19 = (v9 + ~(_DWORD)v16) * a6;
          v20 = vdupq_n_s64(v19);
          v21 = vdupq_n_s64(v19 + 4);
          v22 = v17;
          v23 = a6 & 0xFFFFFFFFFFFFFFF8;
          v24 = (int64x2_t)xmmword_1003BA9E0;
          v25 = (int64x2_t)xmmword_1003BCAF0;
          do
          {
            v22[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v20, v24), (int32x4_t)vaddq_s64(v20, v25));
            *v22 = vuzp1q_s32((int32x4_t)vaddq_s64(v21, v24), (int32x4_t)vaddq_s64(v21, v25));
            v25 = vaddq_s64(v25, v18);
            v24 = vaddq_s64(v24, v18);
            v22 += 2;
            v23 -= 8;
          }
          while (v23);
          ++v16;
          v17 = (int32x4_t *)((char *)v17 + 4 * a6);
        }
        while (v16 != v9);
      }
      else
      {
        v26 = 0;
        v27 = (int32x4_t *)v50;
        v28 = 4 * a6;
        v29 = &v48[8 * (a6 >> 3)];
        v30 = (v9 - 1) * a6 + 8 * (a6 >> 3);
        v31 = vdupq_n_s64(8uLL);
        do
        {
          v32 = (v9 + ~(_DWORD)v26) * a6;
          v33 = vdupq_n_s64(v32);
          v34 = vdupq_n_s64(v32 + 4);
          v35 = a6 & 0xFFFFFFFFFFFFFFF8;
          v36 = v27;
          v37 = (int64x2_t)xmmword_1003BA9E0;
          v38 = (int64x2_t)xmmword_1003BCAF0;
          do
          {
            v36[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v33, v37), (int32x4_t)vaddq_s64(v33, v38));
            *v36 = vuzp1q_s32((int32x4_t)vaddq_s64(v34, v37), (int32x4_t)vaddq_s64(v34, v38));
            v38 = vaddq_s64(v38, v31);
            v37 = vaddq_s64(v37, v31);
            v36 += 2;
            v35 -= 8;
          }
          while (v35);
          v39 = v30;
          v40 = v29;
          v41 = a6 - (a6 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *v40++ = v39++;
            --v41;
          }
          while (v41);
          ++v26;
          v27 = (int32x4_t *)((char *)v27 + v28);
          v29 = (_DWORD *)((char *)v29 + v28);
          v30 -= a6;
        }
        while (v26 != v9);
      }
    }
    else
    {
      v14 = &v49;
      do
      {
        v15 = (v13 - 1) * a6;
        *(v14 - 3) = v15;
        if (a6 != 1)
        {
          *(v14 - 2) = v15 + 1;
          if (a6 != 2)
          {
            *(v14 - 1) = v15 + 2;
            if (a6 != 3)
            {
              *v14 = v15 + 3;
              if (a6 != 4)
              {
                v14[1] = v15 + 4;
                if (a6 != 5)
                {
                  v14[2] = v15 + 5;
                  if (a6 != 6)
                    v14[3] = v15 + 6;
                }
              }
            }
          }
        }
        v14 += a6;
        --v13;
      }
      while (v13);
    }
  }
  v42 = a5[1];
  a5[1] = v42 - 1;
  if (v42)
  {
    v43 = ((v10 >> 1) * a6);
    if ((int)v43 < 1)
    {
      a5[1] = -1;
    }
    else
    {
      do
      {
        for (i = 0; i != v43; ++i)
        {
          v45 = (int)v48[i];
          v46 = *(_BYTE *)(a1 + i);
          *(_BYTE *)(a3 + i) = *(_BYTE *)(a1 + v45);
          *(_BYTE *)(a3 + v45) = v46;
        }
        a1 += a2;
        a3 += a4;
        v47 = a5[1];
        a5[1] = v47 - 1;
      }
      while (v47);
    }
  }
  return result;
}

void sub_10021BD9C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  signed int v26;
  uint64_t v27;
  uint64_t i;
  int v29;
  size_t v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  void *v48;
  _QWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void *v56;
  _QWORD v57[3];
  int v58;
  int v59;
  _BYTE v60[8];
  int v61;

  sub_100298C2C(v60, &off_10044D2D8);
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a4 + 8))
  {
    v50 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v50, 30), "_src.getObj() != _dst.getObj()", 30);
    sub_100294B74(-215, (uint64_t *)&v50, "repeat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 862);
  }
  if ((int)sub_100260608(a1, -1) >= 3)
  {
    v50 = 0uLL;
    *(_OWORD *)sub_10029430C(&v50, 16) = *(_OWORD *)"_src.dims() <= 2";
    sub_100294B74(-215, (uint64_t *)&v50, "repeat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 863);
  }
  if (a2 < 1 || a3 <= 0)
  {
    v50 = 0uLL;
    *(_OWORD *)sub_10029430C(&v50, 16) = *(_OWORD *)"ny > 0 && nx > 0";
    sub_100294B74(-215, (uint64_t *)&v50, "repeat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 864);
  }
  sub_10025D920(a1, 0xFFFFFFFF, (uint64_t)&v58);
  v9 = v58;
  v8 = v59;
  v10 = sub_10025E20C((int *)a1, -1);
  sub_10026285C(a4, v8 * a2, v9 * a3, v10, -1, 0, 0);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_OWORD *)(v11 + 16);
    v50 = *(_OWORD *)v11;
    v51 = v12;
    v52 = *(_OWORD *)(v11 + 32);
    v13 = *(_QWORD *)(v11 + 56);
    v53 = *(_QWORD *)(v11 + 48);
    v54 = v13;
    v55 = (char *)&v50 + 8;
    v56 = v57;
    v57[0] = 0;
    v57[1] = 0;
    if (v13)
    {
      v14 = (unsigned int *)(v13 + 20);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
    if (*(int *)(v11 + 4) > 2)
    {
      DWORD1(v50) = 0;
      sub_100256B48((uint64_t)&v50, v11);
    }
    else
    {
      v16 = *(_QWORD **)(v11 + 72);
      v17 = v56;
      *(_QWORD *)v56 = *v16;
      v17[1] = v16[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v50);
  }
  if (sub_10025D914((_DWORD *)a4) == 0x10000)
  {
    v18 = *(_QWORD *)(a4 + 8);
    v19 = *(_OWORD *)(v18 + 16);
    v42 = *(_OWORD *)v18;
    v43 = v19;
    v44 = *(_OWORD *)(v18 + 32);
    v20 = *(_QWORD *)(v18 + 56);
    v45 = *(_QWORD *)(v18 + 48);
    v46 = v20;
    v47 = (unsigned int *)&v42 + 2;
    v48 = v49;
    v49[0] = 0;
    v49[1] = 0;
    if (v20)
    {
      v21 = (unsigned int *)(v20 + 20);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    if (*(int *)(v18 + 4) > 2)
    {
      DWORD1(v42) = 0;
      sub_100256B48((uint64_t)&v42, v18);
    }
    else
    {
      v23 = *(_QWORD **)(v18 + 72);
      v24 = v48;
      *(_QWORD *)v48 = *v23;
      v24[1] = v23[1];
    }
  }
  else
  {
    sub_10025CCB8(a4, -1, (uint64_t)&v42);
  }
  v25 = *v47;
  v26 = v47[1];
  if (SDWORD1(v50) >= 1)
  {
    v27 = *((_QWORD *)v56 + (DWORD1(v50) - 1));
    LODWORD(i) = v59;
    v29 = v58 * v27;
    v58 *= (_DWORD)v27;
    v30 = v26 * (uint64_t)(int)v27;
    if (v59 >= 1)
      goto LABEL_26;
LABEL_34:
    LODWORD(i) = 0;
    if ((int)v25 <= 0)
      goto LABEL_37;
    goto LABEL_35;
  }
  LODWORD(i) = v59;
  v29 = 0;
  v58 = 0;
  v30 = 0;
  if (v59 < 1)
    goto LABEL_34;
LABEL_26:
  if ((int)v30 >= 1)
  {
    for (i = 0; i < v59; ++i)
    {
      v31 = 0;
      do
      {
        memcpy((void *)(v43 + *(_QWORD *)v48 * i + v31), (const void *)(v51 + *(_QWORD *)v56 * i), v29);
        v29 = v58;
        v31 += v58;
      }
      while (v31 < (int)v30);
    }
  }
  if ((int)i < (int)v25)
  {
LABEL_35:
    i = i;
    do
    {
      memcpy((void *)(v43 + *(_QWORD *)v48 * i), (const void *)(v43 + *(_QWORD *)v48 * ((int)i - v59)), v30);
      ++i;
    }
    while (v25 != i);
  }
LABEL_37:
  if (v46)
  {
    v32 = (unsigned int *)(v46 + 20);
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
      sub_100256C90((uint64_t)&v42);
  }
  v46 = 0;
  v43 = 0u;
  v44 = 0u;
  if (SDWORD1(v42) >= 1)
  {
    v35 = 0;
    v36 = v47;
    do
      v36[v35++] = 0;
    while (v35 < SDWORD1(v42));
  }
  if (v48 != v49)
    j__free(v48);
  if (v54)
  {
    v37 = (unsigned int *)(v54 + 20);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
      sub_100256C90((uint64_t)&v50);
  }
  v54 = 0;
  v51 = 0u;
  v52 = 0u;
  if (SDWORD1(v50) >= 1)
  {
    v40 = 0;
    v41 = v55;
    do
      *(_DWORD *)&v41[4 * v40++] = 0;
    while (v40 < SDWORD1(v50));
  }
  if (v56 != v57)
    j__free(v56);
  if (v61)
    sub_1002989D0(v60);
}

void sub_10021C284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_10029434C((uint64_t *)va);
  sub_1001D40CC(v13 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_10021C318(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7[2];

  v3 = result;
  v4 = result - a2;
  if (result >= a2)
  {
    result = 0xFFFFFFFFLL;
    switch(a3)
    {
      case 0:
        return result;
      case 1:
        if ((int)v3 >= 0)
          return (a2 - 1);
        else
          return 0;
      case 2:
      case 4:
        if (a2 == 1)
          return 0;
        LODWORD(result) = v3;
        do
        {
          if ((int)result >= 0)
            v5 = ~(result + (a3 == 4));
          else
            v5 = a3 == 4;
          if ((int)result < 0)
            v6 = ~(_DWORD)result;
          else
            v6 = 2 * a2;
          result = (v6 + v5);
        }
        while (result >= a2);
        return result;
      case 3:
        if (a2 <= 0)
        {
          sub_1001F37D4(v7, "len > 0");
          sub_100294B74(-215, v7, "borderInterpolate", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 936);
        }
        if ((v3 & 0x80000000) != 0)
        {
          v3 = (~v4 + v3 + (v4 + 1) % a2);
          if ((int)v3 < a2)
            return v3;
        }
        else if ((int)v3 < a2)
        {
          return v3;
        }
        result = ((int)v3 % a2);
        break;
      default:
        v7[0] = 0;
        v7[1] = 0;
        qmemcpy((void *)sub_10029430C(v7, 31), "Unknown/unsupported border type", 31);
        sub_100294B74(-5, v7, "borderInterpolate", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 945);
    }
  }
  return result;
}

void sub_10021C4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10021C528(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, double *a8)
{
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int16 v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int32x4_t *v48;
  unsigned int v49;
  uint64_t v50;
  int32x4_t v51;
  int32x4_t v52;
  uint64_t v53;
  int32x4_t *v54;
  int32x4_t v55;
  int32x4_t v56;
  uint64_t v57;
  int v58;
  _DWORD *v59;
  int v60;
  double v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int32x4_t *v67;
  unsigned int v68;
  uint64_t v69;
  int32x4_t v70;
  int32x4_t v71;
  uint64_t v72;
  int32x4_t *v73;
  int32x4_t v74;
  int32x4_t v75;
  uint64_t v76;
  int v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  size_t v87;
  int v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  int *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  int v120;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  size_t v127;
  uint64_t v128;
  uint64_t *v129;
  _BYTE *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  __int128 *v135;
  __int128 v136;
  uint64_t *v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  char *v142;
  size_t v143;
  int v144;
  size_t v145;
  size_t v146;
  size_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  _DWORD *v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  int *v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  char *v171;
  int v172;
  char *v173;
  int v174;
  char v175;
  int v176;
  size_t __n;
  uint64_t v178;
  char *__dst;
  char *__dsta;
  int v181;
  int v182;
  double *v183;
  unsigned int v184;
  uint64_t v185;
  _QWORD *v186;
  unint64_t v187;
  _QWORD v188[2];
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  _DWORD *v195;
  void *v196;
  _QWORD v197[2];
  __int128 v198;
  void *__src[2];
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  int *v203;
  void *v204;
  _QWORD v205[3];
  char v206[8];
  int v207;
  _BYTE *v208;
  size_t v209;
  _BYTE v210[16];
  uint64_t v211;

  sub_100298C2C(v206, &off_10044D2F8);
  v16 = a5;
  if ((a4 | a3 | a5 | a6) < 0)
  {
    v186 = 0;
    v187 = 0;
    qmemcpy((void *)sub_10029430C(&v186, 50), "top >= 0 && bottom >= 0 && left >= 0 && right >= 0", 50);
    sub_100294B74(-215, (uint64_t *)&v186, "copyMakeBorder", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 1181);
  }
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = *(_OWORD *)(v17 + 16);
    v198 = *(_OWORD *)v17;
    *(_OWORD *)__src = v18;
    v200 = *(_OWORD *)(v17 + 32);
    v19 = *(_QWORD *)(v17 + 56);
    v201 = *(_QWORD *)(v17 + 48);
    v202 = v19;
    v203 = (int *)&v198 + 2;
    v204 = v205;
    v205[1] = 0;
    v205[0] = 0;
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 20);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
    if (*(int *)(v17 + 4) > 2)
    {
      DWORD1(v198) = 0;
      sub_100256B48((uint64_t)&v198, v17);
    }
    else
    {
      v22 = *(_QWORD **)(v17 + 72);
      v23 = v204;
      *(_QWORD *)v204 = *v22;
      v23[1] = v22[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v198);
  }
  v24 = v198;
  if ((a7 & 0x10) == 0 && (v198 & 0x8000) != 0)
  {
    v181 = a7;
    v183 = a8;
    v186 = 0;
    v208 = 0;
    sub_100258BD0((uint64_t)&v198, &v186, &v208);
    if (SHIDWORD(v208) >= a3)
      v25 = a3;
    else
      v25 = HIDWORD(v208);
    if (HIDWORD(v186) - (HIDWORD(v208) + DWORD2(v198)) >= a4)
      v26 = a4;
    else
      v26 = HIDWORD(v186) - (HIDWORD(v208) + DWORD2(v198));
    if ((int)v208 >= v16)
      v27 = v16;
    else
      v27 = v208;
    if ((int)v186 - ((int)v208 + HIDWORD(v198)) >= a6)
      v28 = a6;
    else
      v28 = (_DWORD)v186 - ((_DWORD)v208 + HIDWORD(v198));
    sub_100258D40((uint64_t)&v198, v25, v26, v27, v28);
    a3 -= v25;
    v16 -= v27;
    a4 -= v26;
    a6 -= v28;
    a8 = v183;
    a7 = v181;
  }
  sub_10026285C(a2, a3 + a4 + DWORD2(v198), v16 + a6 + HIDWORD(v198), v24 & 0xFFF, -1, 0, 0);
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v29 = *(_QWORD *)(a2 + 8);
    v30 = *(_OWORD *)(v29 + 16);
    v190 = *(_OWORD *)v29;
    v191 = v30;
    v192 = *(_OWORD *)(v29 + 32);
    v31 = *(_QWORD *)(v29 + 56);
    v193 = *(_QWORD *)(v29 + 48);
    v194 = v31;
    v195 = (_DWORD *)&v190 + 2;
    v196 = v197;
    v197[1] = 0;
    v197[0] = 0;
    if (v31)
    {
      v32 = (unsigned int *)(v31 + 20);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    if (*(int *)(v29 + 4) > 2)
    {
      DWORD1(v190) = 0;
      sub_100256B48((uint64_t)&v190, v29);
    }
    else
    {
      v34 = *(_QWORD **)(v29 + 72);
      v35 = v196;
      *(_QWORD *)v196 = *v34;
      v35[1] = v34[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v190);
  }
  if (!(v16 | a6 | a4 | a3))
  {
    if (__src[0] != (void *)v191 || v205[0] != v197[0])
    {
      LODWORD(v186) = 33619968;
      v187 = (unint64_t)&v190;
      v188[0] = 0;
      sub_1002181EC((uint64_t)&v198, (uint64_t)&v186);
    }
    goto LABEL_160;
  }
  v184 = a7 & 0xFFFFFFEF;
  v174 = a3;
  if ((a7 & 0xFFFFFFEF) == 0)
  {
    v40 = ((unint64_t)v198 >> 3) & 0x1FF;
    v186 = v188;
    v187 = v40 + 1;
    if (v40 >= 0x88)
      operator new[]();
    v60 = v40 + 1;
    if (v40 >= 4)
    {
      v61 = *a8;
      if (*a8 != a8[1] || v61 != a8[2] || v61 != a8[3])
      {
        v209 = 0;
        v208 = 0;
        qmemcpy((void *)sub_10029430C(&v208, 68), "value[0] == value[1] && value[0] == value[2] && value[0] == value[3]", 68);
        sub_100294B74(-215, (uint64_t *)&v208, "copyMakeBorder", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 1229);
      }
      v60 = 1;
    }
    sub_10025C560(a8, (uint64_t)v188, (v198 & 7 | (8 * v60)) - 8, v40 + 1);
    v122 = v195[1];
    if (SDWORD1(v198) < 1)
      v123 = 0;
    else
      v123 = *((unsigned int *)v204 + 2 * (DWORD1(v198) - 1));
    v124 = (char *)__src[0];
    v182 = *v203;
    v185 = v205[0];
    v169 = v203[1];
    __dsta = (char *)v191;
    v125 = v197[0];
    v176 = *v195;
    v126 = (uint64_t)v186;
    v127 = (int)v122 * (int)v123;
    v208 = v210;
    v209 = v127;
    if ((v122 * v123) >= 0x409)
      operator new[]();
    if ((int)v122 < 1 || (int)v123 < 1)
    {
LABEL_139:
      v172 = v182 + a3;
      v178 = a3;
      if (v182 >= 1)
      {
        v141 = v122 - (v169 + v16);
        v142 = &__dsta[v125 * a3];
        v143 = v16 * (int)v123;
        v144 = v169 * v123;
        v145 = v141 * (int)v123;
        v146 = v144;
        v147 = v143 + v144;
        v148 = v182;
        do
        {
          if (v124 != &v142[v143])
            memcpy(&v142[v143], v124, v146);
          memcpy(v142, v210, v143);
          memcpy(&v142[v147], v210, v145);
          v124 += v185;
          v142 += v125;
          --v148;
        }
        while (v148);
      }
      v149 = (v176 - v172);
      if (v174 >= 1)
      {
        v150 = v174;
        v151 = __dsta;
        do
        {
          memcpy(v151, v210, v127);
          v151 += v125;
          --v150;
        }
        while (v150);
      }
      if ((int)v149 >= 1)
      {
        v152 = &__dsta[v125 * (v178 + v182)];
        do
        {
          memcpy(v152, v210, v127);
          v152 += v125;
          --v149;
        }
        while (v149);
      }
      if (v208 != v210 && v208 != 0)
        operator delete[]();
      if (v186 != v188 && v186 != 0)
        goto LABEL_159;
      goto LABEL_160;
    }
    v128 = 0;
    v129 = &v211;
    v130 = v210;
    while (1)
    {
      if (v123 >= 8)
      {
        if ((unint64_t)&v210[v128 * v123 - v126] >= 0x20)
        {
          if (v123 < 0x20)
          {
            v132 = 0;
LABEL_134:
            v137 = (uint64_t *)(v126 + v132);
            v138 = &v130[v132];
            v139 = (v123 & 7) - v123 + v132;
            do
            {
              v140 = *v137++;
              *v138++ = v140;
              v139 += 8;
            }
            while (v139);
            v131 = v123 & 0xFFFFFFF8;
            if ((v123 & 7) == 0)
              goto LABEL_123;
            goto LABEL_137;
          }
          v133 = v123 & 0x7FFFFFE0;
          v134 = v129;
          v135 = (__int128 *)(v126 + 16);
          do
          {
            v136 = *v135;
            *((_OWORD *)v134 - 1) = *(v135 - 1);
            *(_OWORD *)v134 = v136;
            v135 += 2;
            v134 += 4;
            v133 -= 32;
          }
          while (v133);
          if ((v123 & 0x1F) == 0)
            goto LABEL_123;
          v132 = v123 & 0x7FFFFFE0;
          v131 = v123 & 0xFFFFFFE0;
          if ((v123 & 0x1F) >= 8)
            goto LABEL_134;
        }
        else
        {
          v131 = 0;
        }
      }
      else
      {
        v131 = 0;
      }
      do
      {
LABEL_137:
        v130[v131] = *(_BYTE *)(v126 + v131);
        ++v131;
      }
      while (v123 != v131);
LABEL_123:
      ++v128;
      v129 = (uint64_t *)((char *)v129 + v123);
      v130 += v123;
      if (v128 == v122)
        goto LABEL_139;
    }
  }
  __dst = (char *)v205[0];
  v36 = (char *)__src[0];
  v37 = v203[1];
  v38 = v197[0];
  v173 = (char *)v191;
  v170 = v195[1];
  if (SDWORD1(v198) < 1)
    LODWORD(v39) = 0;
  else
    v39 = *((_QWORD *)v204 + (DWORD1(v198) - 1));
  v41 = v16;
  v42 = *v203;
  v43 = *v195;
  v167 = ((LOBYTE(__src[0]) | v191 | LOBYTE(v205[0]) | LOBYTE(v197[0])) | v39) & 3;
  if ((((LOBYTE(__src[0]) | v191 | LOBYTE(v205[0]) | LOBYTE(v197[0])) | v39) & 3) != 0)
    v44 = v39;
  else
    v44 = ((int)v39 / 4);
  v45 = v44 * (v170 - v37);
  v186 = v188;
  v187 = (int)v45;
  if (v45 >= 0x109)
    operator new[]();
  v166 = v43;
  if (v41 >= 1)
  {
    if ((int)v44 > 0)
    {
      v46 = 0;
      v47 = 0;
      v48 = (int32x4_t *)&v189;
      while (1)
      {
        v49 = sub_10021C318((v47 - v41), v37, v184) * v44;
        if (v44 >= 8)
        {
          v51 = vdupq_n_s32(v49);
          v52 = vdupq_n_s32(v49 + 4);
          v53 = v44 & 0xFFFFFFF8;
          v54 = v48;
          v55 = (int32x4_t)xmmword_1003BCB00;
          v56.i64[0] = 0x800000008;
          v56.i64[1] = 0x800000008;
          do
          {
            v54[-1] = vaddq_s32(v51, v55);
            *v54 = vaddq_s32(v52, v55);
            v55 = vaddq_s32(v55, v56);
            v54 += 2;
            v53 -= 8;
          }
          while (v53);
          v50 = v44 & 0xFFFFFFF8;
          if (v50 == v44)
            goto LABEL_52;
        }
        else
        {
          v50 = 0;
        }
        v57 = v44 - v50;
        v58 = v49 + v50;
        v59 = (_DWORD *)v188 + v50 + v46;
        do
        {
          *v59++ = v58++;
          --v57;
        }
        while (v57);
LABEL_52:
        ++v47;
        v48 = (int32x4_t *)((char *)v48 + 4 * v44);
        v46 += v44;
        if (v47 == v41)
          goto LABEL_69;
      }
    }
    v62 = -v41;
    do
    {
      sub_10021C318(v62, v37, v184);
      v63 = __CFADD__((_DWORD)v62, 1);
      v62 = (v62 + 1);
    }
    while (!v63);
  }
LABEL_69:
  v168 = v41;
  v64 = (v170 - (v37 + v41));
  if ((int)v64 >= 1)
  {
    if ((int)v44 > 0)
    {
      v65 = 0;
      v66 = v168 * v44;
      v67 = (int32x4_t *)((char *)&v188[2] + 4 * v66);
      while (1)
      {
        v68 = sub_10021C318((v37 + v65), v37, v184) * v44;
        if (v44 >= 8)
        {
          v70 = vdupq_n_s32(v68);
          v71 = vdupq_n_s32(v68 + 4);
          v72 = v44 & 0xFFFFFFF8;
          v73 = v67;
          v74 = (int32x4_t)xmmword_1003BCB00;
          v75.i64[0] = 0x800000008;
          v75.i64[1] = 0x800000008;
          do
          {
            v73[-1] = vaddq_s32(v70, v74);
            *v73 = vaddq_s32(v71, v74);
            v74 = vaddq_s32(v74, v75);
            v73 += 2;
            v72 -= 8;
          }
          while (v72);
          v69 = v44 & 0xFFFFFFF8;
          if (v69 == v44)
            goto LABEL_72;
        }
        else
        {
          v69 = 0;
        }
        v76 = v44 - v69;
        v77 = v68 + v69;
        v78 = (_DWORD *)v188 + v69 + v66;
        do
        {
          *v78++ = v77++;
          --v76;
        }
        while (v76);
LABEL_72:
        ++v65;
        v67 = (int32x4_t *)((char *)v67 + 4 * v44);
        v66 += v44;
        if (v65 == v64)
          goto LABEL_83;
      }
    }
    v79 = v37;
    do
    {
      sub_10021C318(v79, v37, v184);
      v79 = (v79 + 1);
    }
    while (v170 - v168 != (_DWORD)v79);
  }
LABEL_83:
  v165 = v44 * v170;
  v80 = v38 * v174;
  v171 = &v173[v80];
  v175 = 2 * (v167 == 0);
  if (v42 >= 1)
  {
    v81 = v44 * v37;
    v82 = (v44 * v168);
    v83 = (int)((_DWORD)v82 << v175);
    v84 = (v44 * v64);
    v85 = &v171[v83];
    v86 = (int)v82;
    v87 = v81;
    v88 = 0;
    if (v167)
    {
      v89 = v80 + v83;
      v90 = &v173[v89 - (int)v82];
      v91 = &v173[v81 + v89];
      do
      {
        if (v85 != v36)
          memcpy(v85, v36, v87);
        v92 = (int *)v188;
        v93 = v90;
        v94 = v82;
        if ((int)v82 >= 1)
        {
          do
          {
            v95 = *v92++;
            *v93++ = v36[v95];
            --v94;
          }
          while (v94);
        }
        v96 = (int *)v188 + (int)v82;
        v97 = v91;
        v98 = v84;
        if ((int)v84 >= 1)
        {
          do
          {
            v99 = *v96++;
            *v97++ = v36[v99];
            --v98;
          }
          while (v98);
        }
        ++v88;
        v85 += v38;
        v36 = &__dst[(_QWORD)v36];
        v90 += v38;
        v91 += v38;
      }
      while (v88 != v42);
    }
    else
    {
      __n = 4 * v81;
      v100 = v80 + v83;
      v101 = &v173[v100 - 4 * (int)v82];
      v102 = &v173[4 * v81 + v100];
      do
      {
        if (v85 != v36)
        {
          v103 = v86;
          memcpy(v85, v36, __n);
          v86 = v103;
        }
        v104 = (int *)v188;
        v105 = v101;
        v106 = v82;
        if ((int)v86 >= 1)
        {
          do
          {
            v107 = *v104++;
            *(_DWORD *)v105 = *(_DWORD *)&v36[4 * v107];
            v105 += 4;
            --v106;
          }
          while (v106);
        }
        v108 = (int *)v188 + (int)v82;
        v109 = v102;
        v110 = v84;
        if ((int)v84 >= 1)
        {
          do
          {
            v111 = *v108++;
            *(_DWORD *)v109 = *(_DWORD *)&v36[4 * v111];
            v109 += 4;
            --v110;
          }
          while (v110);
        }
        ++v88;
        v85 += v38;
        v36 = &__dst[(_QWORD)v36];
        v101 += v38;
        v102 += v38;
      }
      while (v88 != v42);
    }
  }
  v112 = v165 << v175;
  if (v174 >= 1)
  {
    v113 = v173;
    v114 = -v174;
    v115 = v174;
    do
    {
      v116 = sub_10021C318(v114, v42, v184);
      memcpy(v113, &v171[v38 * v116], v112);
      v113 += v38;
      v114 = (v114 + 1);
      --v115;
    }
    while (v115);
  }
  v117 = (v166 - (v42 + v174));
  if ((int)v117 >= 1)
  {
    v118 = 0;
    v119 = &v173[v38 * (v174 + (uint64_t)v42)];
    do
    {
      v120 = sub_10021C318((v42 + v118), v42, v184);
      memcpy(v119, &v171[v38 * v120], v112);
      ++v118;
      v119 += v38;
    }
    while (v117 != v118);
  }
  if (v186 != v188 && v186 != 0)
LABEL_159:
    operator delete[]();
LABEL_160:
  if (v194)
  {
    v155 = (unsigned int *)(v194 + 20);
    do
    {
      v156 = __ldaxr(v155);
      v157 = v156 - 1;
    }
    while (__stlxr(v157, v155));
    if (!v157)
      sub_100256C90((uint64_t)&v190);
  }
  v194 = 0;
  v191 = 0u;
  v192 = 0u;
  if (SDWORD1(v190) >= 1)
  {
    v158 = 0;
    v159 = v195;
    do
      v159[v158++] = 0;
    while (v158 < SDWORD1(v190));
  }
  if (v196 != v197)
    j__free(v196);
  if (v202)
  {
    v160 = (unsigned int *)(v202 + 20);
    do
    {
      v161 = __ldaxr(v160);
      v162 = v161 - 1;
    }
    while (__stlxr(v162, v160));
    if (!v162)
      sub_100256C90((uint64_t)&v198);
  }
  v202 = 0;
  *(_OWORD *)__src = 0u;
  v200 = 0u;
  if (SDWORD1(v198) >= 1)
  {
    v163 = 0;
    v164 = v203;
    do
      v164[v163++] = 0;
    while (v163 < SDWORD1(v198));
  }
  if (v204 != v205)
    j__free(v204);
  if (v207)
    sub_1002989D0(v206);
}

void sub_10021D3CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_100008C88(a1);
  _Unwind_Resume(a1);
}

void sub_10021D480()
{
  JUMPOUT(0x10021D4E4);
}

void sub_10021D488(_Unwind_Exception *a1)
{
  sub_1001D40CC((uint64_t)&STACK[0x598]);
  _Unwind_Resume(a1);
}

void sub_10021D49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25 != a12 && a25 != 0)
    JUMPOUT(0x10021D4D0);
  JUMPOUT(0x10021D4DCLL);
}

void sub_10021D4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _DWORD **i;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  int32x2_t *v40;
  uint64_t v41;
  int v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int v45[4];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _DWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _DWORD *v57;
  void *v58;
  uint64_t v59;
  int32x2_t v60;
  unsigned int *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;

  v4 = a2;
  v5 = a1;
  if (!a1 || !a2 || *(unsigned __int16 *)(a1 + 2) << 16 != 1111752704 || *(_WORD *)(a2 + 2) != 16964)
  {
    sub_100257E00(a1, 0, 1, 0, (uint64_t)&v52);
    sub_100257E00(v4, 0, 1, 0, (uint64_t)v45);
    if (((LOBYTE(v45[0]) ^ v52) & 7) == 0)
    {
      v11 = *(v57 - 1);
      if ((_DWORD)v11 == *(v49 - 1))
      {
        if ((_DWORD)v11 == 2)
        {
          if (*v57 == *v49 && v57[1] == v49[1])
            goto LABEL_35;
        }
        else
        {
          if ((int)v11 < 1)
            goto LABEL_35;
          if (*v57 == *v49)
          {
            v20 = 1;
            do
            {
              v21 = v20;
              if (v11 == v20)
                break;
              v22 = v57[v20];
              v23 = v49[v20++];
            }
            while (v22 == v23);
            if (v21 >= v11)
            {
LABEL_35:
              if (v5)
              {
                if (*(_DWORD *)v5 == 144)
                {
                  if (*(_QWORD *)(v5 + 88))
                  {
                    LODWORD(v5) = sub_1001F833C(v5);
                    if (!v4)
                      goto LABEL_39;
LABEL_46:
                    if (*(_DWORD *)v4 == 144 && *(_QWORD *)(v4 + 88))
                    {
                      LODWORD(v4) = sub_1001F833C(v4);
                      if (v5 | v4)
                        goto LABEL_40;
                    }
                    else
                    {
                      LODWORD(v4) = 0;
                      if ((_DWORD)v5)
                        goto LABEL_40;
                    }
                    goto LABEL_51;
                  }
                  LODWORD(v5) = 0;
                  if (v4)
                    goto LABEL_46;
LABEL_39:
                  if (v5 | v4)
                  {
LABEL_40:
                    if (!(_DWORD)v5 && (v52 & 0xFF8) != 0 || !(_DWORD)v4 && (v45[0] & 0xFF8) != 0)
                    {
                      v60 = 0;
                      v61 = 0;
                      qmemcpy((void *)sub_10029430C(&v60, 72), "(coi1 != 0 || src.channels() == 1) && (coi2 != 0 || dst.channels() == 1)", 72);
                      sub_100294B74(-215, (uint64_t *)&v60, "cvCopy", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 1290);
                    }
                    v60 = vadd_s32(vmax_s32((int32x2_t)__PAIR64__(v4, v5), (int32x2_t)0x100000001), (int32x2_t)-1);
                    sub_1001F91C0((unint64_t)&v52, 1uLL, v45, 1uLL, (uint64_t)&v60, 1uLL);
LABEL_68:
                    if (v48)
                    {
                      v29 = (unsigned int *)(v48 + 20);
                      do
                      {
                        v30 = __ldaxr(v29);
                        v31 = v30 - 1;
                      }
                      while (__stlxr(v31, v29));
                      if (!v31)
                        sub_100256C90((uint64_t)v45);
                    }
                    v48 = 0;
                    v46 = 0u;
                    v47 = 0u;
                    if ((int)v45[1] >= 1)
                    {
                      v32 = 0;
                      v33 = v49;
                      do
                        v33[v32++] = 0;
                      while (v32 < (int)v45[1]);
                    }
                    if (v50 != &v51)
                      j__free(v50);
                    if (v56)
                    {
                      v34 = (unsigned int *)(v56 + 20);
                      do
                      {
                        v35 = __ldaxr(v34);
                        v36 = v35 - 1;
                      }
                      while (__stlxr(v36, v34));
                      if (!v36)
                        sub_100256C90((uint64_t)&v52);
                    }
                    v56 = 0;
                    v54 = 0u;
                    v55 = 0u;
                    if (SHIDWORD(v52) >= 1)
                    {
                      v37 = 0;
                      v38 = v57;
                      do
                        v38[v37++] = 0;
                      while (v37 < SHIDWORD(v52));
                    }
                    if (v58 != &v59)
                      j__free(v58);
                    return;
                  }
LABEL_51:
                  if (((LOWORD(v45[0]) ^ (unsigned __int16)v52) & 0xFF8) != 0)
                  {
                    v60 = 0;
                    v61 = 0;
                    qmemcpy((void *)sub_10029430C(&v60, 32), "src.channels() == dst.channels()", 32);
                    sub_100294B74(-215, (uint64_t *)&v60, "cvCopy", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 1297);
                  }
                  if (a3)
                  {
                    v42 = 33619968;
                    v43 = v45;
                    v44 = 0;
                    sub_100257E00(a3, 0, 0, 0, (uint64_t)&v60);
                    v40 = &v60;
                    v41 = 0;
                    v39 = 16842752;
                    sub_100218CC8((uint64_t)&v52, (uint64_t)&v42, (uint64_t)&v39);
                    if (v64)
                    {
                      v24 = (unsigned int *)(v64 + 20);
                      do
                      {
                        v25 = __ldaxr(v24);
                        v26 = v25 - 1;
                      }
                      while (__stlxr(v26, v24));
                      if (!v26)
                        sub_100256C90((uint64_t)&v60);
                    }
                    v64 = 0;
                    v62 = 0u;
                    v63 = 0u;
                    if (v60.i32[1] >= 1)
                    {
                      v27 = 0;
                      v28 = v65;
                      do
                        *(_DWORD *)(v28 + 4 * v27++) = 0;
                      while (v27 < v60.i32[1]);
                    }
                    if (v66 != &v67)
                      j__free(v66);
                  }
                  else
                  {
                    v60.i32[0] = 33619968;
                    v61 = v45;
                    *(_QWORD *)&v62 = 0;
                    sub_1002181EC((uint64_t)&v52, (uint64_t)&v60);
                  }
                  goto LABEL_68;
                }
                LODWORD(v5) = 0;
              }
              if (v4)
                goto LABEL_46;
              goto LABEL_39;
            }
          }
        }
      }
    }
    v60 = 0;
    v61 = 0;
    qmemcpy((void *)sub_10029430C(&v60, 50), "src.depth() == dst.depth() && src.size == dst.size", 50);
    sub_100294B74(-215, (uint64_t *)&v60, "cvCopy", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 1279);
  }
  if (a3)
  {
    v52 = 0;
    v53 = 0;
    v6 = sub_10029430C(&v52, 12);
    *(_DWORD *)(v6 + 8) = 807419197;
    *(_QWORD *)v6 = *(_QWORD *)"maskarr == 0";
    sub_100294B74(-215, &v52, "cvCopy", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 1245);
  }
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4);
  memcpy((void *)(a2 + 52), (const void *)(a1 + 52), 4 * *(int *)(a1 + 4));
  *(_QWORD *)(v4 + 44) = *(_QWORD *)(v5 + 44);
  sub_100222E84(*(_QWORD *)(v4 + 24));
  v7 = *(_DWORD *)(v4 + 40);
  v8 = *(void **)(v4 + 32);
  if (*(_DWORD *)(*(_QWORD *)(v5 + 24) + 104) >= 3 * v7)
  {
    j__free(v8);
    v9 = *(int *)(v5 + 40);
    *(_DWORD *)(v4 + 40) = v9;
    *(_QWORD *)(v4 + 32) = 0;
    v8 = (void *)sub_1001D450C(8 * v9);
    *(_QWORD *)(v4 + 32) = v8;
    v7 = *(_DWORD *)(v4 + 40);
  }
  bzero(v8, 8 * v7);
  v10 = (_DWORD *)sub_1001F5C88(v5, (uint64_t)&v52);
  if (v10)
  {
    while (1)
    {
      v12 = *(_QWORD *)(v4 + 24);
      v13 = *(_QWORD **)(v12 + 96);
      *(_QWORD *)v45 = v13;
      if (v13)
      {
        *(_QWORD *)(v12 + 96) = v13[1];
        *(_DWORD *)v13 &= 0x3FFFFFFu;
        ++*(_DWORD *)(v12 + 104);
      }
      else
      {
        sub_100222D30(v12, 0, v45);
        v13 = *(_QWORD **)v45;
        v12 = *(_QWORD *)(v4 + 24);
      }
      v14 = (*(_DWORD *)(v4 + 40) - 1) & *v10;
      memcpy(v13, v10, *(int *)(v12 + 44));
      v15 = *(_QWORD *)(v4 + 32);
      v16 = 8 * v14;
      v13[1] = *(_QWORD *)(v15 + v16);
      *(_QWORD *)(v15 + v16) = v13;
      v10 = (_DWORD *)*((_QWORD *)v53 + 1);
      if (!v10)
      {
        v17 = v54 + 1;
        v18 = *(_DWORD *)(v52 + 40);
        if ((int)v54 + 1 >= v18)
          return;
        for (i = (_DWORD **)(*(_QWORD *)(v52 + 32) + 8 * (int)v54 + 8); ; ++i)
        {
          v10 = *i;
          if (*i)
            break;
          if (v18 == ++v17)
            return;
        }
        LODWORD(v54) = v17;
      }
      v53 = v10;
    }
  }
}

void sub_10021DBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10021DCCC()
{
  uint64_t v0[2];

  v0[0] = 0;
  v0[1] = 0;
  qmemcpy((void *)sub_10029430C(v0, 44), "The library is compiled without CUDA support", 44);
  sub_100294B74(-216, v0, "throw_no_cuda", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/private.cuda.hpp", 107);
}

void sub_10021DD24()
{
  uint64_t v0;

  sub_10029434C(&v0);
}

void sub_10021DD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10021DD58()
{
  uint64_t v0[2];

  v0[0] = 0;
  v0[1] = 0;
  qmemcpy((void *)sub_10029430C(v0, 44), "The library is compiled without CUDA support", 44);
  sub_100294B74(-216, v0, "throw_no_cuda", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/private.cuda.hpp", 107);
}

uint64_t sub_10021DDB4()
{
  uint64_t v0;
  uint64_t v2;

  sub_10029434C(&v2);
  return v0;
}

void sub_10021DDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10021DDEC()
{
  uint64_t v0[2];

  v0[0] = 0;
  v0[1] = 0;
  qmemcpy((void *)sub_10029430C(v0, 44), "The library is compiled without CUDA support", 44);
  sub_100294B74(-216, v0, "throw_no_cuda", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/private.cuda.hpp", 107);
}

void sub_10021DE44()
{
  uint64_t v0;

  sub_10029434C(&v0);
}

void sub_10021DE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10021DE78(_QWORD *a1)
{
  uint64_t v1[2];

  *a1 = 0;
  a1[1] = 0;
  v1[0] = 0;
  v1[1] = 0;
  qmemcpy((void *)sub_10029430C(v1, 44), "The library is compiled without CUDA support", 44);
  sub_100294B74(-216, v1, "throw_no_cuda", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/private.cuda.hpp", 107);
}

uint64_t sub_10021DED8()
{
  uint64_t v0;
  uint64_t v2;

  sub_10029434C(&v2);
  return v0;
}

void sub_10021DEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int **v9;

  sub_10029434C(&a9);
  sub_10021DF20(v9);
  _Unwind_Resume(a1);
}

unsigned int **sub_10021DF20(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_10021DF74()
{
  uint64_t v0[2];

  v0[0] = 0;
  v0[1] = 0;
  qmemcpy((void *)sub_10029430C(v0, 44), "The library is compiled without CUDA support", 44);
  sub_100294B74(-216, v0, "throw_no_cuda", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/private.cuda.hpp", 107);
}

_QWORD *sub_10021DFCC()
{
  unsigned __int8 v0;
  uint64_t v2;

  sub_10029434C(&v2);
  v0 = atomic_load((unsigned __int8 *)&qword_100497B10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_100497B10))
    sub_10021DE78(qword_100497B18);
  return qword_100497B18;
}

_QWORD *sub_10021E01C()
{
  __guard *v0;

  __cxa_atexit((void (*)(void *))sub_10021E088, v0 + 1, (void *)&_mh_execute_header);
  __cxa_guard_release(v0);
  return qword_100497B18;
}

void sub_10021E054(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100497B10);
  _Unwind_Resume(a1);
}

void sub_10021E070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

unsigned int **sub_10021E088(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

double sub_10021E0DC(int a1)
{
  uint64_t v2;
  unsigned int v3;
  double result;
  uint64_t v5[2];

  v2 = sub_1001D450C(0x28uLL);
  if (!v2)
  {
    v5[0] = 0;
    v5[1] = 0;
    sub_100294B74(-27, v5, "icvInitMemStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 92);
  }
  v3 = (a1 + 7) & 0xFFFFFFF8;
  if (a1 < 1)
    v3 = 65408;
  *(_QWORD *)(v2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)v2 = 1116274688;
  *(_DWORD *)(v2 + 32) = v3;
  return result;
}

void sub_10021E170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10021E188(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3[2];

  if (!a1)
  {
    v3[0] = 0;
    v3[1] = 0;
    sub_100294B74(-27, v3, "cvCreateChildMemStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 121);
  }
  sub_10021E0DC(*(_DWORD *)(a1 + 32));
  *(_QWORD *)(v2 + 24) = a1;
}

void sub_10021E1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10021E204(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2[2];

  if (!a1)
  {
    v2[0] = 0;
    v2[1] = 0;
    sub_100294B74(-27, v2, "cvReleaseMemStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 183);
  }
  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    sub_10021E290(v1);
    j__free(v1);
  }
}

void sub_10021E278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10021E290(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10[2];

  v1 = result;
  if (!result)
  {
    v10[0] = 0;
    v10[1] = 0;
    sub_100294B74(-27, v10, "icvDestroyMemStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 140);
  }
  v2 = result[3];
  v3 = (_QWORD *)result[1];
  if (v2)
  {
    if (v3)
    {
      v4 = *(_QWORD **)(v2 + 16);
      do
      {
        while (1)
        {
          v5 = v3;
          v3 = (_QWORD *)v3[1];
          if (v4)
            break;
          *(_QWORD *)(v2 + 8) = v5;
          *(_QWORD *)(v2 + 16) = v5;
          *v5 = 0;
          v5[1] = 0;
          *((_DWORD *)result + 9) = *((_DWORD *)result + 8) - 16;
          v4 = v5;
          if (!v3)
            goto LABEL_22;
        }
        *v5 = v4;
        v6 = (_QWORD *)v4[1];
        v5[1] = v6;
        if (v6)
          *v6 = v5;
        v4[1] = v5;
        v4 = v5;
      }
      while (v3);
    }
  }
  else if (v3)
  {
    v7 = 0;
    do
    {
      result = v3;
      v3 = (_QWORD *)v3[1];
      v8 = v1[3];
      if (v8)
      {
        if (v7)
        {
          *result = v7;
          v9 = (_QWORD *)v7[1];
          result[1] = v9;
          if (v9)
            *v9 = result;
          v7[1] = result;
        }
        else
        {
          *(_QWORD *)(v8 + 8) = result;
          *(_QWORD *)(v8 + 16) = result;
          *result = 0;
          result[1] = 0;
          *((_DWORD *)v1 + 9) = *((_DWORD *)v1 + 8) - 16;
        }
      }
      else
      {
        j__free(result);
        result = v7;
      }
      v7 = result;
    }
    while (v3);
  }
LABEL_22:
  v1[1] = 0;
  v1[2] = 0;
  *((_DWORD *)v1 + 9) = 0;
  return result;
}

void sub_10021E3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10021E3D8(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2[2];

  if (!result)
  {
    v2[0] = 0;
    v2[1] = 0;
    sub_100294B74(-27, v2, "cvClearMemStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 200);
  }
  if (result[3])
    return sub_10021E290(result);
  v1 = result[1];
  result[2] = v1;
  if (v1)
    LODWORD(v1) = *((_DWORD *)result + 8) - 16;
  *((_DWORD *)result + 9) = v1;
  return result;
}

void sub_10021E468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10021E480(uint64_t result, uint64_t a2)
{
  uint64_t v2[2];

  if (!result || !a2)
  {
    v2[0] = 0;
    v2[1] = 0;
    sub_100294B74(-27, v2, "cvSaveMemStoragePos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 276);
  }
  *(_QWORD *)a2 = *(_QWORD *)(result + 16);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 36);
  return result;
}

void sub_10021E4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10021E508(uint64_t result, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!result || !a2)
  {
    v5 = 0;
    v6 = 0;
    sub_100294B74(-27, &v5, "cvRestoreMemStoragePos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 288);
  }
  v2 = *((_DWORD *)a2 + 2);
  if (v2 > *(_DWORD *)(result + 32))
  {
    v5 = 0;
    v6 = 0;
    sub_100294B74(-201, &v5, "cvRestoreMemStoragePos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 290);
  }
  v3 = *a2;
  *(_QWORD *)(result + 16) = *a2;
  *(_DWORD *)(result + 36) = v2;
  if (!v3)
  {
    v4 = *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 16) = v4;
    if (v4)
      LODWORD(v4) = *(_DWORD *)(result + 32) - 16;
    *(_DWORD *)(result + 36) = v4;
  }
  return result;
}

void sub_10021E5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10021E610(uint64_t a1, unint64_t a2)
{
  int v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  if (!a1)
  {
    v8 = 0;
    v9 = 0;
    v4 = sub_10029430C(&v8, 20);
    *(_DWORD *)(v4 + 16) = 1919251566;
    *(_OWORD *)v4 = *(_OWORD *)"NULL storage pointer";
    sub_100294B74(-27, &v8, "cvMemStorageAlloc", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 327);
  }
  if (a2 >> 31)
  {
    v8 = 0;
    v9 = 0;
    qmemcpy((void *)sub_10029430C(&v8, 35), "Too large memory block is requested", 35);
    sub_100294B74(-211, &v8, "cvMemStorageAlloc", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 330);
  }
  v5 = *(_DWORD *)(a1 + 36);
  v6 = v5;
  if (v5 < a2)
  {
    if ((int)((*(_DWORD *)(a1 + 32) & 0xFFFFFFF8) - 16) < a2)
    {
      v8 = 0;
      v9 = 0;
      qmemcpy((void *)sub_10029430C(&v8, 37), "requested size is negative or too big", 37);
      sub_100294B74(-211, &v8, "cvMemStorageAlloc", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 338);
    }
    sub_10021E7E0(a1);
    v5 = *(_DWORD *)(a1 + 36);
    v6 = v5;
  }
  result = *(_QWORD *)(a1 + 16) + *(int *)(a1 + 32) - v6;
  *(_DWORD *)(a1 + 36) = (v5 - v2) & 0xFFFFFFF8;
  return result;
}

void sub_10021E798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10021E7E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = result;
  if (!result)
  {
    v8 = 0;
    v9 = 0;
    sub_100294B74(-27, &v8, "icvGoNextMemBlock", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 218);
  }
  v2 = *(_QWORD *)(result + 16);
  if (!v2 || (v3 = *(_QWORD **)(v2 + 8)) == 0)
  {
    v4 = *(_QWORD *)(result + 24);
    if (v4)
    {
      v8 = *(_QWORD *)(v4 + 16);
      LODWORD(v9) = *(_DWORD *)(v4 + 36);
      sub_10021E7E0(v4);
      v3 = *(_QWORD **)(v4 + 16);
      result = sub_10021E508(v4, &v8);
      v5 = *(_QWORD **)(v4 + 16);
      if (v3 == v5)
      {
        *(_DWORD *)(v4 + 36) = 0;
        *(_QWORD *)(v4 + 8) = 0;
        *(_QWORD *)(v4 + 16) = 0;
      }
      else
      {
        v5[1] = v3[1];
        v6 = (_QWORD *)v3[1];
        if (v6)
          *v6 = v5;
      }
    }
    else
    {
      result = sub_1001D450C(*(int *)(result + 32));
      v3 = (_QWORD *)result;
    }
    v3[1] = 0;
    v7 = *(_QWORD *)(v1 + 16);
    *v3 = v7;
    if (!v7)
      v7 = v1;
    *(_QWORD *)(v7 + 8) = v3;
  }
  *(_QWORD *)(v1 + 16) = v3;
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 32) - 16;
  return result;
}

void sub_10021E8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10021E8FC(uint64_t a1, char *__s, unsigned int a3)
{
  unsigned int v3;
  void *v6;

  v3 = a3;
  if ((a3 & 0x80000000) != 0)
    v3 = strlen(__s);
  v6 = (void *)sub_10021E610(a1, (int)(v3 + 1));
  memcpy(v6, __s, (int)v3);
  *((_BYTE *)v6 + (int)v3) = 0;
  return v3;
}

_DWORD *sub_10021E968(unsigned int a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  uint64_t v10;
  uint64_t v11;

  if (!a4)
  {
    v10 = 0;
    v11 = 0;
    sub_100294B74(-27, &v10, "cvCreateSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 377);
  }
  if (a2 < 0x60 || !a3)
  {
    v10 = 0;
    v11 = 0;
    sub_100294B74(-201, &v10, "cvCreateSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 379);
  }
  v8 = (_DWORD *)sub_10021E610(a4, a2);
  bzero(v8, a2);
  *v8 = (unsigned __int16)a1 | 0x42990000;
  v8[1] = a2;
  if ((a1 & 0xFFF) != 0
    && (a1 & 0xFFF) != 7
    && (((a1 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a1 & 7))) & 3) != (_DWORD)a3)
  {
    v10 = 0;
    v11 = 0;
    qmemcpy((void *)sub_10029430C(&v10, 110), "Specified element size doesn't match to the size of the specified element type (try to use 0 for element type)", 110);
    sub_100294B74(-201, &v10, "cvCreateSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 395);
  }
  v8[11] = a3;
  *((_QWORD *)v8 + 9) = a4;
  sub_10021EB30((uint64_t)v8, 0x400 / a3);
  return v8;
}

void sub_10021EAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10021EB30(uint64_t result, int a2)
{
  int v2;
  int v3;
  signed int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a2;
  if (!result || !*(_QWORD *)(result + 72))
  {
    v5 = 0;
    v6 = 0;
    sub_100294B74(-27, &v5, "cvSetSeqBlockSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 415);
  }
  if (a2 < 0)
  {
    v5 = 0;
    v6 = 0;
    sub_100294B74(-211, &v5, "cvSetSeqBlockSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 417);
  }
  v3 = *(_DWORD *)(result + 44);
  if (!a2)
  {
    if (1024 / v3 <= 1)
      v2 = 1;
    else
      v2 = 1024 / v3;
  }
  v4 = (*(_DWORD *)(*(_QWORD *)(result + 72) + 32) & 0xFFFFFFF8) - 48;
  if (v2 * v3 > v4)
  {
    v2 = v4 / v3;
    if (!(v4 / v3))
    {
      v5 = 0;
      v6 = 0;
      qmemcpy((void *)sub_10029430C(&v5, 60), "Storage block size is too small to fit the sequence elements", 60);
      sub_100294B74(-211, &v5, "cvSetSeqBlockSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 433);
    }
  }
  *(_DWORD *)(result + 64) = v2;
  return result;
}

void sub_10021EC70()
{
  uint64_t v0;
  uint64_t v1;

  sub_10029434C(&v1);
  *(_DWORD *)(v0 + 64) = 0;
}

void sub_10021EC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10021ECDC(uint64_t a1, int a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t *v5;
  int v7;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    v3 = (v2 & (a2 >> 31)) + a2;
    v4 = v3 >= v2 ? *(_DWORD *)(a1 + 40) : 0;
    a2 = v3 - v4;
    if (v3 - v4 >= v2)
      return 0;
  }
  v5 = *(uint64_t **)(a1 + 88);
  if (v2 >= 2 * a2)
  {
    while (1)
    {
      v7 = *((_DWORD *)v5 + 5);
      if (a2 < v7)
        break;
      v5 = (uint64_t *)v5[1];
      a2 -= v7;
    }
  }
  else
  {
    do
    {
      v5 = (uint64_t *)*v5;
      v2 -= *((_DWORD *)v5 + 5);
    }
    while (a2 < v2);
    a2 -= v2;
  }
  return v5[3] + *(int *)(a1 + 44) * (uint64_t)a2;
}

char *sub_10021ED58(uint64_t a1, char *a2, uint64_t a3)
{
  int v3;
  char *v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  signed int v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t v20[2];
  _QWORD v21[2];
  uint64_t v22;
  char *v23;
  char *v24;

  v3 = a3;
  v4 = a2;
  if (!a1 || !a2)
  {
    v20[0] = 0;
    v20[1] = 0;
    sub_100294B74(-27, v20, "cvCvtSeqToArray", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 551);
  }
  v5 = *(_DWORD *)(a1 + 40);
  v6 = *(_DWORD *)(a1 + 44);
  if (SHIDWORD(a3) <= 0)
    v7 = *(_DWORD *)(a1 + 40);
  else
    v7 = 0;
  if (HIDWORD(a3) == (_DWORD)a3)
    v8 = 0;
  else
    v8 = v7 + HIDWORD(a3) - ((v5 & ((int)a3 >> 31)) + a3);
  if (v5 <= 1)
    v9 = 1;
  else
    v9 = *(_DWORD *)(a1 + 40);
  v10 = v8 + (((v8 & ~(v8 >> 31)) - v8 + (v8 >> 31)) / v9 + (v8 >> 31)) * v5;
  if (v10 >= (int)v5)
    v10 = *(_DWORD *)(a1 + 40);
  v11 = v10 * v6;
  if (!(v10 * v6))
    return 0;
  sub_10021EEC4(a1, (uint64_t)v21, 0);
  sub_10021EFE4(v21, v3, 0);
  v12 = (int)v24;
  v13 = v4;
  v15 = v22;
  v14 = v23;
  do
  {
    v16 = v12 - (_DWORD)v14;
    if (v11 >= v16)
      v17 = v16;
    else
      v17 = v11;
    memcpy(v13, v14, v17);
    v13 += v17;
    v15 = *(_QWORD *)(v15 + 8);
    v14 = *(char **)(v15 + 24);
    v22 = v15;
    v23 = v14;
    v12 = (_DWORD)v14 + *(_DWORD *)(v15 + 20) * v6;
    v24 = &v14[*(int *)(v15 + 20) * (uint64_t)v6];
    v18 = __OFSUB__(v11, v17);
    v11 -= v17;
  }
  while (!((v11 < 0) ^ v18 | (v11 == 0)));
  return v4;
}

void sub_10021EEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

double sub_10021EEC4(uint64_t a1, uint64_t a2, int a3)
{
  double result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[2];

  if (!a2 || (*(_QWORD *)(a2 + 40) = 0, result = 0.0, *(_OWORD *)(a2 + 24) = 0u, *(_OWORD *)(a2 + 8) = 0u, !a1))
  {
    v10[0] = 0;
    v10[1] = 0;
    sub_100294B74(-27, v10, "cvStartReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 945);
  }
  *(_DWORD *)a2 = 64;
  *(_QWORD *)(a2 + 8) = a1;
  v4 = *(uint64_t **)(a1 + 88);
  if (v4)
  {
    v5 = (uint64_t *)*v4;
    v6 = v4[3];
    *(_QWORD *)(a2 + 24) = v6;
    v7 = *(int *)(a1 + 44);
    v8 = v5[3] + (*((int *)v5 + 5) - 1) * v7;
    *(_QWORD *)(a2 + 56) = v8;
    *(_DWORD *)(a2 + 48) = *((_DWORD *)v4 + 4);
    if (a3)
    {
      *(_QWORD *)(a2 + 24) = v8;
      *(_QWORD *)(a2 + 56) = v6;
      v4 = v5;
    }
    *(_QWORD *)(a2 + 16) = v4;
    v9 = v4[3];
    *(_QWORD *)(a2 + 32) = v9;
    *(_QWORD *)(a2 + 40) = v9 + *((int *)v4 + 5) * (uint64_t)(int)v7;
  }
  else
  {
    *(_QWORD *)(a2 + 56) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_DWORD *)(a2 + 48) = 0;
  }
  return result;
}

void sub_10021EFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10021EFE4(_QWORD *result, int a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a2;
  if (!result || (v4 = result[1]) == 0)
  {
    v17 = 0;
    v18 = 0;
    sub_100294B74(-27, &v17, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1045);
  }
  v5 = *(_DWORD *)(v4 + 44);
  if (a3)
  {
    v6 = v5 * a2;
    v7 = (uint64_t **)result[2];
    v8 = result[3];
    if (v5 * a2 <= 0)
    {
      v15 = result[4];
      v10 = v8 + v6;
      if (v10 < v15)
      {
        do
        {
          v6 += v8 - v15;
          v7 = (uint64_t **)*v7;
          v15 = (unint64_t)v7[3];
          v8 = v15 + *((int *)v7 + 5) * (uint64_t)v5;
          v10 = v8 + v6;
        }
        while (v10 < v15);
        result[2] = v7;
        result[4] = v15;
        result[5] = v8;
      }
    }
    else
    {
      v9 = result[5];
      v10 = v8 + v6;
      if (v10 >= v9)
      {
        do
        {
          v6 += v8 - v9;
          v7 = (uint64_t **)v7[1];
          v8 = (unint64_t)v7[3];
          v11 = *((int *)v7 + 5) * (uint64_t)v5;
          v9 = v8 + v11;
        }
        while (v6 >= (int)v11);
        result[2] = v7;
        v10 = v8 + v6;
        result[4] = v8;
        result[5] = v9;
      }
    }
    result[3] = v10;
    return result;
  }
  v12 = *(_DWORD *)(v4 + 40);
  if (a2 < 0)
  {
    if (-v12 > a2)
    {
      v17 = 0;
      v18 = 0;
      sub_100294B74(-211, &v17, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1055);
    }
    v3 = v12 + a2;
    v13 = *(uint64_t **)(result[1] + 88);
    v14 = *((_DWORD *)v13 + 5);
    if (v12 + a2 < v14)
      goto LABEL_28;
  }
  else
  {
    if (a2 >= v12)
    {
      if (a2 - v12 >= v12)
      {
        v17 = 0;
        v18 = 0;
        sub_100294B74(-211, &v17, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1062);
      }
      v3 = a2 - v12;
    }
    v13 = *(uint64_t **)(result[1] + 88);
    v14 = *((_DWORD *)v13 + 5);
    if (v3 < v14)
      goto LABEL_28;
  }
  if (v12 >= 2 * v3)
  {
    do
    {
      v13 = (uint64_t *)v13[1];
      v3 -= v14;
      v14 = *((_DWORD *)v13 + 5);
    }
    while (v3 >= v14);
  }
  else
  {
    do
    {
      v13 = (uint64_t *)*v13;
      v14 = *((_DWORD *)v13 + 5);
      v12 -= v14;
    }
    while (v3 < v12);
    v3 -= v12;
  }
LABEL_28:
  v16 = v13[3];
  result[3] = v16 + v3 * v5;
  if ((uint64_t *)result[2] != v13)
  {
    result[2] = v13;
    result[4] = v16;
    result[5] = v16 + v14 * v5;
  }
  return result;
}

void sub_10021F230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

int *sub_10021F278(unsigned int a1, int a2, int a3, uint64_t a4, int a5, int *a6, uint64_t a7)
{
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (a2 < 96 || a3 < 1 || a5 < 0)
  {
    v18 = 0;
    v19 = 0;
    sub_100294B74(-201, &v18, "cvMakeSeqHeaderForArray", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 590);
  }
  if (!a6 || (a4 ? (v14 = a7 == 0) : (v14 = 1), !v14 ? (v15 = 0) : (v15 = 1), a5 >= 1 && v15))
  {
    v18 = 0;
    v19 = 0;
    sub_100294B74(-27, &v18, "cvMakeSeqHeaderForArray", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 593);
  }
  bzero(a6, a2);
  *a6 = (unsigned __int16)a1 | 0x42990000;
  a6[1] = a2;
  if ((a1 & 0xFFF) != 0 && (((a1 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a1 & 7))) & 3) != a3)
  {
    v18 = 0;
    v19 = 0;
    qmemcpy((void *)sub_10029430C(&v18, 106), "Element size doesn't match to the size of predefined element type (try to use 0 for sequence element type)", 106);
    sub_100294B74(-201, &v18, "cvMakeSeqHeaderForArray", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 607);
  }
  a6[10] = a5;
  a6[11] = a3;
  v16 = a4 + a5 * a3;
  *((_QWORD *)a6 + 6) = v16;
  *((_QWORD *)a6 + 7) = v16;
  if (a5 >= 1)
  {
    *((_QWORD *)a6 + 11) = a7;
    *(_QWORD *)a7 = a7;
    *(_QWORD *)(a7 + 8) = a7;
    *(_DWORD *)(a7 + 16) = 0;
    *(_DWORD *)(a7 + 20) = a5;
    *(_QWORD *)(a7 + 24) = a4;
  }
  return a6;
}

void sub_10021F428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10021F470(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3[2];

  if (!result || !a2)
  {
    v3[0] = 0;
    v3[1] = 0;
    sub_100294B74(-27, v3, "cvStartAppendToSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 820);
  }
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)a2 = 48;
  *(_QWORD *)(a2 + 8) = result;
  v2 = (_QWORD *)result[11];
  if (v2)
    v2 = (_QWORD *)*v2;
  *(_QWORD *)(a2 + 16) = v2;
  *(_QWORD *)(a2 + 24) = result[7];
  *(_QWORD *)(a2 + 40) = result[6];
  return result;
}

void sub_10021F508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10021F520(unsigned int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v8[2];

  if (!a4 || !a5)
  {
    v8[0] = 0;
    v8[1] = 0;
    sub_100294B74(-27, v8, "cvStartWriteSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 838);
  }
  v6 = sub_10021E968(a1, a2, a3, a4);
  return sub_10021F470(v6, a5);
}

void sub_10021F5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10021F5D0(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];

  if (!result)
  {
    v7[0] = 0;
    v7[1] = 0;
    sub_100294B74(-27, v7, "cvFlushSeqWriter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 850);
  }
  v1 = result[1];
  v2 = result[3];
  *(_QWORD *)(v1 + 56) = v2;
  v3 = result[2];
  if (v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v1 + 88);
    *(_DWORD *)(v3 + 20) = (v2 - *(_QWORD *)(v3 + 24)) / *(int *)(v1 + 44);
    v6 = v5;
    do
    {
      v4 += *(_DWORD *)(v6 + 20);
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != v5);
    *(_DWORD *)(v1 + 40) = v4;
  }
  return result;
}

void sub_10021F674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10021F68C(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[2];

  if (!a1)
  {
    v11[0] = 0;
    v11[1] = 0;
    sub_100294B74(-27, v11, "cvEndWriteSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 881);
  }
  result = a1[1];
  v3 = a1[3];
  *(_QWORD *)(result + 56) = v3;
  v4 = a1[2];
  if (!v4)
    goto LABEL_9;
  v5 = 0;
  v6 = *(_QWORD *)(result + 88);
  *(_DWORD *)(v4 + 20) = (v3 - *(_QWORD *)(v4 + 24)) / *(int *)(result + 44);
  v7 = v6;
  do
  {
    v5 += *(_DWORD *)(v7 + 20);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != v6);
  *(_DWORD *)(result + 40) = v5;
  v8 = *(_QWORD *)(result + 72);
  if (v8
    && (v9 = *(_QWORD *)(v8 + 16) + *(int *)(v8 + 32),
        (((_DWORD)v9 - *(_DWORD *)(v8 + 36) - *(_DWORD *)(result + 48)) & 0xFFFFFFF8) == 0))
  {
    v10 = *(_QWORD *)(result + 56);
    *(_DWORD *)(v8 + 36) = (v9 - v10) & 0xFFFFFFF8;
    *(_QWORD *)(result + 48) = v10;
    a1[3] = 0;
  }
  else
  {
LABEL_9:
    a1[3] = 0;
  }
  return result;
}

void sub_10021F7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10021F7C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9[2];

  if (!a1 || (v2 = a1[1]) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    sub_100294B74(-27, v9, "cvCreateSeqBlock", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 912);
  }
  v3 = a1[3];
  *(_QWORD *)(v2 + 56) = v3;
  v4 = a1[2];
  if (v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)(v2 + 88);
    *(_DWORD *)(v4 + 20) = (v3 - *(_QWORD *)(v4 + 24)) / *(int *)(v2 + 44);
    v7 = v6;
    do
    {
      v5 += *(_DWORD *)(v7 + 20);
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v6);
    *(_DWORD *)(v2 + 40) = v5;
  }
  result = sub_10021F8B8(v2, 0);
  a1[2] = **(_QWORD **)(v2 + 88);
  a1[3] = *(_QWORD *)(v2 + 56);
  a1[5] = *(_QWORD *)(v2 + 48);
  return result;
}

void sub_10021F8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10021F8B8(uint64_t a1, int a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!a1)
  {
    v21 = 0;
    v22 = 0;
    sub_100294B74(-27, &v21, "icvGrowSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 637);
  }
  result = *(_QWORD *)(a1 + 80);
  if (result)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(result + 8);
    v5 = *(_QWORD **)(a1 + 88);
    if (v5)
      goto LABEL_5;
    goto LABEL_29;
  }
  v10 = *(_DWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_DWORD *)(a1 + 44);
  if (*(_DWORD *)(a1 + 40) >= 4 * v10)
    result = sub_10021EB30(a1, 2 * v10);
  if (!v11)
  {
    v21 = 0;
    v22 = 0;
    qmemcpy((void *)sub_10029430C(&v21, 37), "The sequence has NULL storage pointer", 37);
    sub_100294B74(-27, &v21, "icvGrowSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 650);
  }
  v13 = *(_DWORD *)(v11 + 36);
  v14 = *(_QWORD *)(v11 + 16) + *(int *)(v11 + 32);
  v15 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v14 - v13 - v15) > 7 || a2 || v13 < *(_DWORD *)(a1 + 44))
  {
    v18 = v10 * v12 + 32;
    if (v13 < v18)
    {
      v19 = v10 / 3;
      if (v10 <= 5)
        v19 = 1;
      if (v13 >= v19 * v12 + 40)
        v18 = (v13 - 32) / *(_DWORD *)(a1 + 44) * *(_DWORD *)(a1 + 44) + 32;
      else
        sub_10021E7E0(v11);
    }
    result = sub_10021E610(v11, v18);
    *(_QWORD *)(result + 24) = (result + 39) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)(result + 20) = v18 - 32;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v5 = *(_QWORD **)(a1 + 88);
    if (v5)
    {
LABEL_5:
      *(_QWORD *)result = *v5;
      *(_QWORD *)(result + 8) = v5;
      *v5 = result;
      v6 = *(_QWORD *)result;
      *(_QWORD *)(*(_QWORD *)result + 8) = result;
      if (a2)
      {
LABEL_6:
        v7 = *(int *)(result + 20);
        v8 = *(_DWORD *)(a1 + 44);
        v9 = *(_QWORD *)(result + 24) + v7;
        *(_QWORD *)(result + 24) = v9;
        if (result == v6)
        {
          *(_QWORD *)(a1 + 48) = v9;
          *(_QWORD *)(a1 + 56) = v9;
        }
        else
        {
          *(_QWORD *)(a1 + 88) = result;
          v5 = (_QWORD *)result;
        }
        *(_DWORD *)(result + 16) = 0;
        do
        {
          *(_DWORD *)(result + 16) += (int)v7 / v8;
          result = *(_QWORD *)(result + 8);
        }
        while ((_QWORD *)result != v5);
        result = (uint64_t)v5;
        goto LABEL_33;
      }
LABEL_30:
      v20 = *(_QWORD *)(result + 24);
      *(_QWORD *)(a1 + 56) = v20;
      *(_QWORD *)(a1 + 48) = v20 + *(int *)(result + 20);
      if (result == v6)
        *(_DWORD *)(result + 16) = 0;
      else
        *(_DWORD *)(result + 16) = *(_DWORD *)(v6 + 20) + *(_DWORD *)(v6 + 16);
LABEL_33:
      *(_DWORD *)(result + 20) = 0;
      return result;
    }
LABEL_29:
    *(_QWORD *)(a1 + 88) = result;
    *(_QWORD *)(result + 8) = result;
    v5 = (_QWORD *)result;
    v6 = result;
    *(_QWORD *)result = result;
    if (a2)
      goto LABEL_6;
    goto LABEL_30;
  }
  v16 = v13 / v12;
  if (v16 >= v10)
    v16 = v10;
  v17 = v15 + v16 * v12;
  *(_QWORD *)(a1 + 48) = v17;
  *(_DWORD *)(v11 + 36) = (v14 - v17) & 0xFFFFFFF8;
  return result;
}

void sub_10021FB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10021FB9C(_QWORD *result, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];

  if (!result)
  {
    v7[0] = 0;
    v7[1] = 0;
    sub_100294B74(-27, v7, "cvChangeSeqBlock", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 995);
  }
  v2 = (uint64_t *)result[2];
  if (a2 < 1)
  {
    v3 = *v2;
    result[2] = v3;
    v5 = result[1];
    v4 = *(_QWORD *)(v3 + 24) + *(int *)(v5 + 44) * (*(int *)(v3 + 20) - 1);
  }
  else
  {
    v3 = v2[1];
    result[2] = v3;
    v4 = *(_QWORD *)(v3 + 24);
    v5 = result[1];
  }
  result[3] = v4;
  v6 = *(_QWORD *)(v3 + 24);
  result[4] = v6;
  result[5] = v6 + *(int *)(v5 + 44) * (uint64_t)*(int *)(v3 + 20);
  return result;
}

void sub_10021FC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

char *sub_10021FC6C(uint64_t a1, void *__src)
{
  size_t v4;
  char *v5;
  uint64_t v7[2];

  if (!a1)
  {
    v7[0] = 0;
    v7[1] = 0;
    sub_100294B74(-27, v7, "cvSeqPush", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1138);
  }
  v4 = *(int *)(a1 + 44);
  v5 = *(char **)(a1 + 56);
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 48))
  {
    sub_10021F8B8(a1, 0);
    v5 = *(char **)(a1 + 56);
  }
  if (__src)
    memcpy(v5, __src, v4);
  ++*(_DWORD *)(**(_QWORD **)(a1 + 88) + 20);
  ++*(_DWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = &v5[v4];
  return v5;
}

void sub_10021FD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

int *sub_10021FD48(int *result, void *__dst)
{
  int *v2;
  size_t v3;
  uint64_t v4;
  size_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = result;
  if (!result)
  {
    v13 = 0;
    v14 = 0;
    sub_100294B74(-27, &v13, "cvSeqPop", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1169);
  }
  if (result[10] <= 0)
  {
    v13 = 0;
    v14 = 0;
    sub_100294B74(-201, &v13, "cvSeqPop", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1171);
  }
  v3 = result[11];
  v4 = *((_QWORD *)result + 7);
  v5 = v4 - v3;
  *((_QWORD *)result + 7) = v4 - v3;
  if (__dst)
    result = (int *)memcpy(__dst, (const void *)(v4 - v3), v3);
  *((_QWORD *)v2 + 7) = v5;
  --v2[10];
  v6 = (_DWORD *)*((_QWORD *)v2 + 11);
  v7 = *(_DWORD **)v6;
  v8 = *(_DWORD *)(*(_QWORD *)v6 + 20) - 1;
  *(_DWORD *)(*(_QWORD *)v6 + 20) = v8;
  if (!v8)
  {
    v9 = *((_QWORD *)v2 + 6);
    if (v6 == v7)
    {
      v12 = v9 - v6[6] + v2[11] * v6[4];
      v6[5] = v12;
      *((_QWORD *)v6 + 3) = v9 - v12;
      *((_QWORD *)v2 + 11) = 0;
      v2[10] = 0;
      *((_QWORD *)v2 + 6) = 0;
      *((_QWORD *)v2 + 7) = 0;
    }
    else
    {
      v7[5] = v9 - v5;
      v10 = *(_QWORD *)v7;
      v11 = *(_QWORD *)(*(_QWORD *)v7 + 24) + v2[11] * (uint64_t)*(int *)(*(_QWORD *)v7 + 20);
      *((_QWORD *)v2 + 6) = v11;
      *((_QWORD *)v2 + 7) = v11;
      *(_QWORD *)(v10 + 8) = *((_QWORD *)v7 + 1);
      **((_QWORD **)v7 + 1) = v10;
      v6 = v7;
    }
    *((_QWORD *)v6 + 1) = *((_QWORD *)v2 + 10);
    *((_QWORD *)v2 + 10) = v6;
  }
  return result;
}

void sub_10021FEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10021FEF0(uint64_t result, char *__src, int a3, int a4)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a3;
  v5 = __src;
  v6 = result;
  if (!result)
  {
    v19 = 0;
    v20 = 0;
    qmemcpy((void *)sub_10029430C(&v19, 21), "NULL sequence pointer", 21);
    sub_100294B74(-27, &v19, "cvSeqPushMulti", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1459);
  }
  if (a3 < 0)
  {
    v19 = 0;
    v20 = 0;
    qmemcpy((void *)sub_10029430C(&v19, 38), "number of removed elements is negative", 38);
    sub_100294B74(-201, &v19, "cvSeqPushMulti", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1461);
  }
  v7 = *(int *)(result + 44);
  if (a4)
  {
    if (a3 >= 1)
    {
      v8 = *(_QWORD *)(result + 88);
      if (__src)
      {
        do
        {
          if (!v8 || (v9 = *(_DWORD *)(v8 + 16)) == 0)
          {
            sub_10021F8B8(v6, 1);
            v8 = *(_QWORD *)(v6 + 88);
            v9 = *(_DWORD *)(v8 + 16);
          }
          if (v9 >= v4)
            v10 = v4;
          else
            v10 = v9;
          v4 -= v10;
          v11 = *(_DWORD *)(v8 + 20) + v10;
          *(_DWORD *)(v8 + 16) = v9 - v10;
          *(_DWORD *)(v8 + 20) = v11;
          *(_DWORD *)(v6 + 40) += v10;
          v12 = (void *)(*(_QWORD *)(v8 + 24) - v10 * (int)v7);
          *(_QWORD *)(v8 + 24) = v12;
          result = (uint64_t)memcpy(v12, &v5[v4 * (int)v7], v10 * (int)v7);
        }
        while (v4 > 0);
      }
      else
      {
        do
        {
          if (!v8 || (v13 = *(_DWORD *)(v8 + 16)) == 0)
          {
            result = sub_10021F8B8(v6, 1);
            v8 = *(_QWORD *)(v6 + 88);
            v13 = *(_DWORD *)(v8 + 16);
          }
          if (v13 >= v4)
            v14 = v4;
          else
            v14 = v13;
          v15 = *(_DWORD *)(v8 + 20) + v14;
          *(_DWORD *)(v8 + 16) = v13 - v14;
          *(_DWORD *)(v8 + 20) = v15;
          *(_DWORD *)(v6 + 40) += v14;
          *(_QWORD *)(v8 + 24) -= v14 * (int)v7;
          v16 = __OFSUB__(v4, v14);
          v4 -= v14;
        }
        while (!((v4 < 0) ^ v16 | (v4 == 0)));
      }
    }
  }
  else if (a3 >= 1)
  {
    while (1)
    {
      result = *(_QWORD *)(v6 + 56);
      v17 = v4 >= (int)((*(_QWORD *)(v6 + 48) - result) / v7) ? (*(_QWORD *)(v6 + 48) - result) / v7 : v4;
      if (v17 >= 1)
      {
        *(_DWORD *)(**(_QWORD **)(v6 + 88) + 20) += v17;
        *(_DWORD *)(v6 + 40) += v17;
        v18 = (int)v7 * (uint64_t)v17;
        if (v5)
        {
          memcpy((void *)result, v5, (int)v7 * (uint64_t)v17);
          v5 += v18;
          result = *(_QWORD *)(v6 + 56);
        }
        v4 -= v17;
        *(_QWORD *)(v6 + 56) = result + v18;
        if (v4 < 1)
          break;
      }
      sub_10021F8B8(v6, 0);
    }
  }
  return result;
}

void sub_10022014C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

char *sub_10022017C(char *result, char *__dst, int a3, int a4)
{
  char *v4;
  int *v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  const void *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v4 = __dst;
  v5 = (int *)result;
  if (!result)
  {
    v34 = 0;
    v35 = 0;
    qmemcpy((void *)sub_10029430C(&v34, 21), "NULL sequence pointer", 21);
    sub_100294B74(-27, &v34, "cvSeqPopMulti", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1528);
  }
  if (a3 < 0)
  {
    v34 = 0;
    v35 = 0;
    qmemcpy((void *)sub_10029430C(&v34, 38), "number of removed elements is negative", 38);
    sub_100294B74(-201, &v34, "cvSeqPopMulti", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1530);
  }
  if (*((_DWORD *)result + 10) >= a3)
    v6 = a3;
  else
    v6 = *((_DWORD *)result + 10);
  if (a4)
  {
    if (v6 >= 1)
    {
      v7 = result + 48;
      v8 = (uint64_t *)*((_QWORD *)result + 11);
      do
      {
        v13 = *((_DWORD *)v8 + 5);
        if (v13 >= v6)
          v14 = v6;
        else
          v14 = *((_DWORD *)v8 + 5);
        v15 = v13 - v14;
        *((_DWORD *)v8 + 5) = v15;
        v5[10] -= v14;
        *((_DWORD *)v8 + 4) += v14;
        v16 = v5[11] * (uint64_t)v14;
        if (v4)
        {
          v16 = (int)v16;
          result = (char *)memcpy(v4, (const void *)v8[3], (int)v16);
          v4 += (int)v16;
          v8 = (uint64_t *)*((_QWORD *)v5 + 11);
          v15 = *((_DWORD *)v8 + 5);
        }
        v17 = v8[3] + v16;
        v8[3] = v17;
        if (!v15)
        {
          v18 = *v8;
          if (v8 == (uint64_t *)*v8)
          {
            v9 = 0;
            v10 = *((_QWORD *)v5 + 6);
            v11 = v10 - v17 + v5[11] * *((_DWORD *)v8 + 4);
            *((_DWORD *)v8 + 5) = v11;
            v8[3] = v10 - v11;
            *((_QWORD *)v5 + 11) = 0;
            v5[10] = 0;
            *v7 = 0;
            *((_QWORD *)v5 + 7) = 0;
          }
          else
          {
            v19 = *((_DWORD *)v8 + 4);
            v20 = v5[11] * (uint64_t)v19;
            *((_DWORD *)v8 + 5) = v20;
            v8[3] = v17 - v20;
            v21 = v8;
            do
            {
              *((_DWORD *)v21 + 4) -= v19;
              v21 = (uint64_t *)v21[1];
            }
            while (v21 != v8);
            v9 = (uint64_t *)v8[1];
            *((_QWORD *)v5 + 11) = v9;
            *(_QWORD *)(v18 + 8) = v9;
            *(_QWORD *)v8[1] = v18;
          }
          v8[1] = *((_QWORD *)v5 + 10);
          *((_QWORD *)v5 + 10) = v8;
          v8 = v9;
        }
        v12 = __OFSUB__(v6, v14);
        v6 -= v14;
      }
      while (!((v6 < 0) ^ v12 | (v6 == 0)));
    }
  }
  else
  {
    if (__dst)
      v4 = &__dst[*((int *)result + 11) * (uint64_t)v6];
    if (v6 >= 1)
    {
      v22 = (uint64_t *)(result + 48);
      v23 = (_DWORD *)*((_QWORD *)result + 11);
      do
      {
        v26 = *(_DWORD **)v23;
        v27 = *(_DWORD *)(*(_QWORD *)v23 + 20);
        if (v27 >= v6)
          v28 = v6;
        else
          v28 = *(_DWORD *)(*(_QWORD *)v23 + 20);
        v29 = v27 - v28;
        v26[5] = v29;
        v30 = v5[11];
        v5[10] -= v28;
        v31 = (const void *)(*((_QWORD *)v5 + 7) - v30 * (uint64_t)v28);
        *((_QWORD *)v5 + 7) = v31;
        if (v4)
        {
          v4 -= v30 * (uint64_t)v28;
          result = (char *)memcpy(v4, v31, v30 * (uint64_t)v28);
          v23 = (_DWORD *)*((_QWORD *)v5 + 11);
          v26 = *(_DWORD **)v23;
          v29 = *(_DWORD *)(*(_QWORD *)v23 + 20);
        }
        if (!v29)
        {
          v32 = *v22;
          if (v23 == v26)
          {
            v23 = 0;
            v33 = v32 - v26[6] + v5[11] * v26[4];
            v26[5] = v33;
            *((_QWORD *)v26 + 3) = v32 - v33;
            *((_QWORD *)v5 + 11) = 0;
            v5[10] = 0;
            *v22 = 0;
            *((_QWORD *)v5 + 7) = 0;
          }
          else
          {
            v26[5] = v32 - v5[14];
            v24 = *(_QWORD *)v26;
            v25 = *(_QWORD *)(*(_QWORD *)v26 + 24) + v5[11] * (uint64_t)*(int *)(*(_QWORD *)v26 + 20);
            *((_QWORD *)v5 + 6) = v25;
            *((_QWORD *)v5 + 7) = v25;
            *(_QWORD *)(v24 + 8) = *((_QWORD *)v26 + 1);
            **((_QWORD **)v26 + 1) = v24;
          }
          *((_QWORD *)v26 + 1) = *((_QWORD *)v5 + 10);
          *((_QWORD *)v5 + 10) = v26;
        }
        v12 = __OFSUB__(v6, v28);
        v6 -= v28;
      }
      while (!((v6 < 0) ^ v12 | (v6 == 0)));
    }
  }
  return result;
}

void sub_100220498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

char *sub_1002204C8(uint64_t a1)
{
  uint64_t v2[2];

  if (!a1)
  {
    v2[0] = 0;
    v2[1] = 0;
    sub_100294B74(-27, v2, "cvClearSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1596);
  }
  return sub_10022017C((char *)a1, 0, *(_DWORD *)(a1 + 40), 0);
}

char *sub_10022051C()
{
  uint64_t v1;

  sub_10029434C(&v1);
  return sub_10022017C(0, 0, MEMORY[0x28], 0);
}

void sub_100220550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_100220568(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _DWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  int v26;
  BOOL v27;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  void *__src[2];
  __int128 v39;
  int v40;
  uint64_t v41;

  v5 = a3;
  if (!a1 || *(_WORD *)(a1 + 2) != 17049)
  {
    v35 = 0;
    v36 = 0;
    qmemcpy((void *)sub_10029430C(&v35, 23), "Invalid sequence header", 23);
    sub_100294B74(-5, &v35, "cvSeqSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1610);
  }
  if (!a3)
  {
    v5 = *(_QWORD *)(a1 + 72);
    if (!v5)
    {
      v35 = 0;
      v36 = 0;
      v7 = sub_10029430C(&v35, 20);
      *(_DWORD *)(v7 + 16) = 1919251566;
      *(_OWORD *)v7 = *(_OWORD *)"NULL storage pointer";
      sub_100294B74(-27, &v35, "cvSeqSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1616);
    }
  }
  v8 = *(_DWORD *)(a1 + 40);
  v9 = *(int *)(a1 + 44);
  if (SHIDWORD(a2) <= 0)
    v10 = *(_DWORD *)(a1 + 40);
  else
    v10 = 0;
  if (HIDWORD(a2) == (_DWORD)a2)
    v11 = 0;
  else
    v11 = v10 + HIDWORD(a2) - ((v8 & ((int)a2 >> 31)) + a2);
  if (v8 <= 1)
    v12 = 1;
  else
    v12 = *(_DWORD *)(a1 + 40);
  v13 = v11 + (((v11 & ~(v11 >> 31)) - v11 + (v11 >> 31)) / v12 + (v11 >> 31)) * v8;
  if (v13 >= (int)v8)
    v14 = *(_DWORD *)(a1 + 40);
  else
    v14 = v13;
  if ((int)v8 <= (int)a2)
    v15 = *(_DWORD *)(a1 + 40);
  else
    v15 = 0;
  if ((int)a2 >= 0)
    v16 = -v15;
  else
    v16 = *(_DWORD *)(a1 + 40);
  v17 = v16 + a2;
  if (v14 > v8 || v17 >= v8 && v14)
  {
    v35 = 0;
    v36 = 0;
    v18 = sub_10029430C(&v35, 18);
    *(_WORD *)(v18 + 16) = 25955;
    *(_OWORD *)v18 = *(_OWORD *)"Bad sequence slice";
    sub_100294B74(-211, &v35, "cvSeqSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1627);
  }
  v19 = sub_10021E968(*(_DWORD *)a1, *(int *)(a1 + 4), *(int *)(a1 + 44), v5);
  if (v14 >= 1)
  {
    *(_OWORD *)__src = 0u;
    v39 = 0u;
    LODWORD(v37[0]) = 64;
    v37[1] = (void *)a1;
    v20 = *(int **)(a1 + 88);
    if (v20)
    {
      v21 = *(_QWORD *)v20;
      __src[1] = *((void **)v20 + 3);
      v22 = *(int *)(a1 + 44);
      v23 = *(_QWORD *)(v21 + 24) + (*(int *)(v21 + 20) - 1) * v22;
      v40 = v20[4];
      __src[0] = v20;
      *(void **)&v39 = __src[1];
      *((_QWORD *)&v39 + 1) = (char *)__src[1] + v20[5] * (uint64_t)(int)v22;
    }
    else
    {
      v23 = 0;
      v40 = 0;
      *(_OWORD *)__src = 0uLL;
      v39 = 0uLL;
    }
    v41 = v23;
    sub_10021EFE4(v37, v17, 0);
    v24 = (char *)__src[1];
    v25 = (int64_t)(*((_QWORD *)&v39 + 1) - (unint64_t)__src[1]) / v9;
    if (a4)
    {
      do
      {
        if ((int)v25 >= v14)
          v26 = v14;
        else
          v26 = v25;
        sub_10021FEF0((uint64_t)v19, v24, v26, 0);
        v25 = *((_QWORD *)__src[0] + 1);
        v24 = *(char **)(v25 + 24);
        __src[0] = (void *)v25;
        __src[1] = v24;
        LODWORD(v25) = *(_DWORD *)(v25 + 20);
        v27 = __OFSUB__(v14, v26);
        v14 -= v26;
      }
      while (!((v14 < 0) ^ v27 | (v14 == 0)));
    }
    else
    {
      v29 = 0;
      v30 = 0;
      do
      {
        if ((int)v25 >= v14)
          v33 = v14;
        else
          v33 = v25;
        v34 = sub_10021E610(v5, 0x20uLL);
        if (v29)
        {
          *(_QWORD *)v34 = v30;
          *(_QWORD *)(v34 + 8) = v29;
          *v29 = v34;
          *(_QWORD *)(v30 + 8) = v34;
          v31 = *(_DWORD *)(v30 + 20) + *(_DWORD *)(v30 + 16);
        }
        else
        {
          v31 = 0;
          *(_QWORD *)v34 = v34;
          *(_QWORD *)(v34 + 8) = v34;
          v29 = (_QWORD *)v34;
          *((_QWORD *)v19 + 11) = v34;
        }
        *(_DWORD *)(v34 + 16) = v31;
        *(void **)(v34 + 24) = __src[1];
        *(_DWORD *)(v34 + 20) = v33;
        v19[10] += v33;
        v25 = *((_QWORD *)__src[0] + 1);
        v32 = *(void **)(v25 + 24);
        __src[0] = (void *)v25;
        __src[1] = v32;
        LODWORD(v25) = *(_DWORD *)(v25 + 20);
        v30 = v34;
        v27 = __OFSUB__(v14, v33);
        v14 -= v33;
      }
      while (!((v14 < 0) ^ v27 | (v14 == 0)));
    }
  }
  return v19;
}

void sub_1002208C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10022090C(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v103;
  char v104;
  uint64_t v105;
  int v106;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t **v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  unint64_t v153;
  uint64_t v154;
  int i;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  __int128 *v162;
  __int128 *v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t **v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  __int128 *v209;
  __int128 *v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  _OWORD *v221;
  __int128 v222;
  __int128 v223;
  _OWORD *v224;
  __int128 v225;
  __int128 v226;
  unint64_t v227;
  uint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  __int128 *v240;
  __int128 *v241;
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t *v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unsigned int v252;
  int v253;
  unsigned int v255;
  int v256;
  unint64_t v257;
  uint64_t v258;
  signed int v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _DWORD *v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  int v269;
  unint64_t v270;
  uint64_t v271;
  int v272;
  int v273;
  uint64_t v274;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  uint64_t v293;
  uint64_t v294;
  _OWORD v295[2];
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;

  if (!a1)
  {
    v3 = -27;
LABEL_5:
    v281 = 0uLL;
    v4 = sub_10029430C(&v281, 18);
    *(_WORD *)(v4 + 16) = 25955;
    *(_OWORD *)v4 = *(_OWORD *)"Bad input sequence";
    sub_100294B74(v3, (uint64_t *)&v281, "cvSeqSort", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1921);
  }
  if (*(_WORD *)(a1 + 2) != 17049)
  {
    v3 = -5;
    goto LABEL_5;
  }
  if (!a2)
  {
    v281 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v281, 21), "Null compare function", 21);
    sub_100294B74(-27, (uint64_t *)&v281, "cvSeqSort", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1924);
  }
  if (*(int *)(a1 + 40) >= 2)
  {
    v5 = *(_DWORD *)(a1 + 44);
    sub_10021EEC4(a1, (uint64_t)&v289, 0);
    v285 = v289;
    v286 = v290;
    v287 = v291;
    v288 = v292;
    v295[0] = v290;
    v295[1] = v291;
    v6 = (int)v5;
    v7 = v290;
    v8 = *((_QWORD *)&v290 + 1) - (int)v5;
    v9 = v291;
    if (v8 >= (unint64_t)v291)
    {
      v11 = *((_QWORD *)&v287 + 1);
    }
    else
    {
      v7 = *(_QWORD *)v290;
      v10 = *(int *)(*((_QWORD *)&v285 + 1) + 44);
      v8 = *(_QWORD *)(v7 + 24) + v10 * (*(int *)(v7 + 20) - 1);
      *((_QWORD *)&v286 + 1) = v8;
      v9 = *(_QWORD *)(v7 + 24);
      v11 = v9 + *(int *)(v7 + 20) * (uint64_t)(int)v10;
    }
    v12 = 0;
    v253 = 7 * v5;
    v274 = -(uint64_t)(int)v5;
    v296 = v7;
    v297 = v8;
    v298 = v9;
    v299 = v11;
    v13 = v5;
    v267 = v5 & 0xFFFFFFE0;
    v258 = v5 & 0x18;
    v264 = v5 & 0xFFFFFFF8;
    do
    {
      v14 = &v295[4 * (unint64_t)v12];
      v15 = v14[1];
      v290 = *v14;
      v291 = v15;
      v16 = v14[3];
      v286 = v14[2];
      v287 = v16;
      v252 = v12 - 1;
      v17 = (uint64_t *)v290;
      v18 = *((_QWORD *)&v286 + 1);
      if ((_QWORD)v290 == (_QWORD)v286)
      {
LABEL_35:
        v27 = *((_QWORD *)&v290 + 1);
        v28 = v291;
        v25 = *((_QWORD *)&v289 + 1);
        v30 = v6 + v18 - DWORD2(v290);
        v31 = *((_QWORD *)&v291 + 1);
        v271 = *((_QWORD *)&v289 + 1);
        if (v30 <= v253)
          goto LABEL_369;
        goto LABEL_36;
      }
LABEL_19:
      if (!v18)
      {
        v281 = 0uLL;
        sub_100294B74(-27, (uint64_t *)&v281, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
      }
      v19 = *(int *)(*((_QWORD *)&v285 + 1) + 44);
      if ((int)v19 >= 33)
      {
        v20 = *((_QWORD *)&v286 + 1);
        v21 = v287;
      }
      else
      {
        v20 = *((_QWORD *)&v286 + 1);
        v21 = v287;
        if (((0x8000808BuLL >> (v19 - 1)) & 1) != 0)
        {
          v22 = (uint64_t)(*((_QWORD *)&v286 + 1) - v287) >> byte_1003BCB15[v19 - 1];
          v23 = *(_DWORD *)(v286 + 16);
          v24 = v288;
          if (!*((_QWORD *)&v290 + 1))
            goto LABEL_27;
          goto LABEL_28;
        }
      }
      v22 = (v20 - v21) / v19;
      v23 = *(_DWORD *)(v286 + 16);
      v24 = v288;
      if (!*((_QWORD *)&v290 + 1))
      {
LABEL_27:
        v281 = 0uLL;
        sub_100294B74(-27, (uint64_t *)&v281, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
      }
LABEL_28:
      v25 = *((_QWORD *)&v289 + 1);
      v26 = *(int *)(*((_QWORD *)&v289 + 1) + 44);
      if ((int)v26 >= 33)
      {
        v27 = *((_QWORD *)&v290 + 1);
        v28 = v291;
      }
      else
      {
        v27 = *((_QWORD *)&v290 + 1);
        v28 = v291;
        if (((0x8000808BuLL >> (v26 - 1)) & 1) != 0)
        {
          v29 = (uint64_t)(*((_QWORD *)&v290 + 1) - v291) >> byte_1003BCB15[v26 - 1];
          goto LABEL_33;
        }
      }
      v29 = (uint64_t)(v27 - v28) / v26;
LABEL_33:
      v17 = (uint64_t *)v290;
      v30 = v6 + v6 * (v22 + v23 - (v24 + *(_DWORD *)(v290 + 16) + v29) + v292);
      v31 = *((_QWORD *)&v291 + 1);
      v271 = *((_QWORD *)&v289 + 1);
      if (v30 <= v253)
        goto LABEL_369;
LABEL_36:
      *(_QWORD *)&v281 = v289;
      *((_QWORD *)&v281 + 1) = v25;
      *(_QWORD *)&v282 = v17;
      *((_QWORD *)&v282 + 1) = v27;
      v261 = v27;
      *(_QWORD *)&v283 = v28;
      *((_QWORD *)&v283 + 1) = v31;
      v284 = v292;
      v280 = v288;
      v277 = v285;
      v263 = *((_QWORD *)&v285 + 1);
      v278 = v286;
      v268 = *((_QWORD *)&v286 + 1);
      v257 = v287;
      v279 = v287;
      v32 = v30 / (int)v6;
      v265 = (_DWORD *)v286;
      v256 = v288;
      if (v30 / (int)v6 >= 41)
      {
        if (!v25)
        {
          v293 = 0;
          v294 = 0;
          sub_100294B74(-27, &v293, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1045);
        }
        v33 = *(_DWORD *)(v25 + 44);
        v259 = v32 >> 3;
        v34 = (v32 >> 3) * (uint64_t)v33;
        v255 = v32;
        if ((int)v34 <= 0)
        {
          LODWORD(v36) = v27;
          v35 = v27 + v34;
          v48 = v259 * v33;
          if (v27 + v34 < v28)
          {
            do
            {
              v48 += v36 - v28;
              v17 = (uint64_t *)*v17;
              v28 = v17[3];
              v36 = v28 + *((int *)v17 + 5) * (uint64_t)v33;
              v35 = v36 + v48;
            }
            while (v35 < v28);
            goto LABEL_59;
          }
          v36 = v31;
          v49 = v35 + (int)v34;
          LODWORD(v54) = v27 + v34;
          if (v49 >= v28)
            goto LABEL_79;
        }
        else
        {
          v35 = v27 + v34;
          if (v35 < v31)
          {
            v36 = v31;
LABEL_60:
            v49 = v35 + v34;
            if (v49 >= v36)
            {
              LODWORD(v28) = v35;
              do
              {
                LODWORD(v34) = v34 + v28 - v36;
                v17 = (uint64_t *)v17[1];
                v28 = v17[3];
                v50 = *((int *)v17 + 5) * (uint64_t)v33;
                v36 = v28 + v50;
              }
              while ((int)v34 >= (int)v50);
              v49 = v28 + (int)v34;
            }
            goto LABEL_79;
          }
          v52 = v259 * v33;
          LODWORD(v28) = v27;
          do
          {
            v52 += v28 - v31;
            v17 = (uint64_t *)v17[1];
            v28 = v17[3];
            v53 = *((int *)v17 + 5) * (uint64_t)v33;
            LODWORD(v31) = v28 + v53;
          }
          while (v52 >= (int)v53);
          v35 = v28 + v52;
          v36 = v28 + v53;
LABEL_59:
          if ((int)v34 > 0)
            goto LABEL_60;
          v49 = v35 + (int)v34;
          LODWORD(v54) = v35;
          if (v49 >= v28)
          {
LABEL_79:
            v54 = v36;
            goto LABEL_80;
          }
        }
        do
        {
          LODWORD(v34) = v34 + v54 - v28;
          v17 = (uint64_t *)*v17;
          v28 = v17[3];
          v54 = v28 + *((int *)v17 + 5) * (uint64_t)v33;
          v49 = v54 + (int)v34;
        }
        while (v49 < v28);
LABEL_80:
        v55 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v27, v35, a3);
        v56 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v35, v49, a3);
        if (v55 < 0)
        {
          if ((v56 & 0x80000000) == 0)
          {
            if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v261, v49, a3) >= 0)
              v35 = v261;
            else
              v35 = v49;
          }
        }
        else if (v56 <= 0)
        {
          if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v261, v49, a3) >= 0)
            v35 = v49;
          else
            v35 = v261;
        }
        if (!v271)
        {
          v293 = 0;
          v294 = 0;
          sub_100294B74(-27, &v293, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1045);
        }
        v57 = *(_DWORD *)(v271 + 44);
        v58 = v57 * ((v255 >> 1) - 3 * v259);
        if (v58 <= 0)
        {
          v59 = v49 + v58;
          if (v59 < v28)
          {
            do
            {
              v58 += v49 - v28;
              v17 = (uint64_t *)*v17;
              v28 = v17[3];
              v49 = v28 + *((int *)v17 + 5) * (uint64_t)v57;
              v59 = v49 + v58;
            }
            while (v59 < v28);
            v54 = v28 + *((int *)v17 + 5) * (uint64_t)v57;
          }
        }
        else
        {
          v59 = v49 + v58;
          if (v59 >= v54)
          {
            do
            {
              v58 += v49 - v54;
              v17 = (uint64_t *)v17[1];
              v49 = v17[3];
              v60 = *((int *)v17 + 5) * (uint64_t)v57;
              v54 = v49 + v60;
            }
            while (v58 >= (int)v60);
            v59 = v49 + v58;
            v28 = v17[3];
          }
        }
        v61 = v259 * (uint64_t)v57;
        if ((int)v61 <= 0)
        {
          v41 = v59 + v61;
          v63 = v259 * v57;
          LODWORD(v62) = v59;
          if (v59 + v61 < v28)
          {
            do
            {
              v63 += v62 - v28;
              v17 = (uint64_t *)*v17;
              v28 = v17[3];
              v62 = v28 + *((int *)v17 + 5) * (uint64_t)v57;
              v41 = v62 + v63;
            }
            while (v41 < v28);
            goto LABEL_103;
          }
          v62 = v54;
          v64 = v41 + (int)v61;
          LODWORD(v68) = v59 + v61;
          if (v64 >= v28)
            goto LABEL_116;
        }
        else
        {
          v41 = v59 + v61;
          if (v41 < v54)
          {
            v62 = v54;
LABEL_104:
            v64 = v41 + v61;
            if (v64 >= v62)
            {
              LODWORD(v28) = v41;
              do
              {
                LODWORD(v61) = v61 + v28 - v62;
                v17 = (uint64_t *)v17[1];
                v28 = v17[3];
                v65 = *((int *)v17 + 5) * (uint64_t)v57;
                v62 = v28 + v65;
              }
              while ((int)v61 >= (int)v65);
              v64 = v28 + (int)v61;
            }
            goto LABEL_116;
          }
          v66 = v259 * v57;
          LODWORD(v28) = v59;
          do
          {
            v66 += v28 - v54;
            v17 = (uint64_t *)v17[1];
            v28 = v17[3];
            v67 = *((int *)v17 + 5) * (uint64_t)v57;
            LODWORD(v54) = v28 + v67;
          }
          while (v66 >= (int)v67);
          v41 = v28 + v66;
          v62 = v28 + v67;
LABEL_103:
          if ((int)v61 > 0)
            goto LABEL_104;
          v64 = v41 + (int)v61;
          LODWORD(v68) = v41;
          if (v64 >= v28)
          {
LABEL_116:
            v68 = v62;
            goto LABEL_117;
          }
        }
        do
        {
          LODWORD(v61) = v61 + v68 - v28;
          v17 = (uint64_t *)*v17;
          v28 = v17[3];
          v68 = v28 + *((int *)v17 + 5) * (uint64_t)v57;
          v64 = v68 + (int)v61;
        }
        while (v64 < v28);
LABEL_117:
        v69 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v59, v41, a3);
        v70 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v41, v64, a3);
        if (v69 < 0)
        {
          if ((v70 & 0x80000000) == 0)
          {
            if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v59, v64, a3) >= 0)
              v41 = v59;
            else
              v41 = v64;
          }
        }
        else if (v70 <= 0)
        {
          if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v59, v64, a3) >= 0)
            v41 = v64;
          else
            v41 = v59;
        }
        v71 = *(_DWORD *)(v271 + 44);
        v72 = v71 * (v255 - (v255 >> 1) + ~(3 * v259));
        if (v72 <= 0)
        {
          v73 = v64 + v72;
          if (v73 < v28)
          {
            do
            {
              v72 += v64 - v28;
              v17 = (uint64_t *)*v17;
              v28 = v17[3];
              v64 = v28 + *((int *)v17 + 5) * (uint64_t)v71;
              v73 = v64 + v72;
            }
            while (v73 < v28);
            v68 = v28 + *((int *)v17 + 5) * (uint64_t)v71;
          }
        }
        else
        {
          v73 = v64 + v72;
          if (v73 >= v68)
          {
            do
            {
              v72 += v64 - v68;
              v17 = (uint64_t *)v17[1];
              v64 = v17[3];
              v74 = *((int *)v17 + 5) * (uint64_t)v71;
              v68 = v64 + v74;
            }
            while (v72 >= (int)v74);
            v73 = v64 + v72;
            v28 = v17[3];
          }
        }
        v75 = v259 * (uint64_t)v71;
        if ((int)v75 > 0)
        {
          v45 = v73 + v75;
          if (v45 >= v68)
          {
            v76 = v259 * v71;
            LODWORD(v28) = v73;
            do
            {
              v76 += v28 - v68;
              v17 = (uint64_t *)v17[1];
              v28 = v17[3];
              v77 = *((int *)v17 + 5) * (uint64_t)v71;
              v68 = v28 + v77;
            }
            while (v76 >= (int)v77);
            v45 = v28 + v76;
            goto LABEL_140;
          }
          goto LABEL_141;
        }
        v45 = v73 + v75;
        v78 = v259 * v71;
        LODWORD(v68) = v73;
        if (v73 + v75 >= v28)
          goto LABEL_145;
        do
        {
          v78 += v68 - v28;
          v17 = (uint64_t *)*v17;
          v28 = v17[3];
          v68 = v28 + *((int *)v17 + 5) * (uint64_t)v71;
          v45 = v68 + v78;
        }
        while (v45 < v28);
LABEL_140:
        if ((int)v75 <= 0)
        {
LABEL_145:
          v79 = v45 + (int)v75;
          for (LODWORD(v82) = v45; v79 < v28; v79 = v82 + (int)v75)
          {
            LODWORD(v75) = v75 + v82 - v28;
            v17 = (uint64_t *)*v17;
            v28 = v17[3];
            v82 = v28 + *((int *)v17 + 5) * (uint64_t)v71;
          }
        }
        else
        {
LABEL_141:
          v79 = v45 + v75;
          if (v79 >= v68)
          {
            LODWORD(v80) = v45;
            do
            {
              LODWORD(v75) = v75 + v80 - v68;
              v17 = (uint64_t *)v17[1];
              v80 = v17[3];
              v81 = *((_DWORD *)v17 + 5) * v71;
              LODWORD(v68) = v80 + v81;
            }
            while ((int)v75 >= v81);
            v79 = v80 + (int)v75;
          }
        }
        v83 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v73, v45, a3);
        v84 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v45, v79, a3);
        if (v83 < 0)
        {
          if ((v84 & 0x80000000) == 0)
          {
            if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v73, v79, a3) >= 0)
              v45 = v73;
            else
              v45 = v79;
          }
        }
        else if (v84 <= 0)
        {
          if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v73, v79, a3) >= 0)
            v45 = v79;
          else
            v45 = v73;
        }
        goto LABEL_156;
      }
      if (v32 >= 0)
        v37 = v30 / (int)v6;
      else
        v37 = v32 + 1;
      if (!v25)
      {
        v293 = 0;
        v294 = 0;
        sub_100294B74(-27, &v293, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1045);
      }
      v38 = v37 >> 1;
      v39 = *(_DWORD *)(v25 + 44);
      v40 = v39 * (v37 >> 1);
      if (v40 <= 0)
      {
        LODWORD(v43) = v27;
        v41 = v27 + v40;
        if (v41 < v28)
        {
          do
          {
            v40 += v43 - v28;
            v17 = (uint64_t *)*v17;
            v28 = v17[3];
            v43 = v28 + *((int *)v17 + 5) * (uint64_t)v39;
            v41 = v43 + v40;
          }
          while (v41 < v28);
LABEL_52:
          v44 = v39 * (v32 + ~v38);
          if (v44 <= 0)
            goto LABEL_68;
          goto LABEL_53;
        }
      }
      else
      {
        v41 = v27 + v40;
        if (v41 >= v31)
        {
          LODWORD(v28) = v27;
          do
          {
            v40 += v28 - v31;
            v17 = (uint64_t *)v17[1];
            v28 = v17[3];
            v42 = *((int *)v17 + 5) * (uint64_t)v39;
            LODWORD(v31) = v28 + v42;
          }
          while (v40 >= (int)v42);
          v41 = v28 + v40;
          v43 = v28 + v42;
          goto LABEL_52;
        }
      }
      v43 = v31;
      v44 = v39 * (v32 + ~v38);
      if (v44 <= 0)
      {
LABEL_68:
        v45 = v41 + v44;
        for (LODWORD(v51) = v41; v45 < v28; v45 = v51 + v44)
        {
          v44 += v51 - v28;
          v17 = (uint64_t *)*v17;
          v28 = v17[3];
          v51 = v28 + *((int *)v17 + 5) * (uint64_t)v39;
        }
        goto LABEL_70;
      }
LABEL_53:
      v45 = v41 + v44;
      if (v45 >= v43)
      {
        LODWORD(v46) = v41;
        do
        {
          v44 += v46 - v43;
          v17 = (uint64_t *)v17[1];
          v46 = v17[3];
          v47 = *((_DWORD *)v17 + 5) * v39;
          LODWORD(v43) = v46 + v47;
        }
        while (v44 >= v47);
        v45 = v46 + v44;
      }
LABEL_70:
      v35 = v261;
LABEL_156:
      v85 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v35, v41, a3);
      v86 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v41, v45, a3);
      if (v85 < 0)
      {
        if ((v86 & 0x80000000) == 0)
        {
          if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v35, v45, a3) >= 0)
            v41 = v35;
          else
            v41 = v45;
        }
      }
      else if (v86 <= 0)
      {
        if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v35, v45, a3) >= 0)
          v41 = v45;
        else
          v41 = v35;
      }
      v289 = v281;
      v290 = v282;
      v291 = v283;
      v292 = v284;
      v87 = *((_QWORD *)&v282 + 1);
      if (v41 != *((_QWORD *)&v282 + 1) && (int)v6 >= 1)
      {
        v88 = 0;
        do
        {
          v89 = *(_BYTE *)(v41 + v88);
          *(_BYTE *)(v41 + v88) = *(_BYTE *)(*((_QWORD *)&v290 + 1) + v88);
          *(_BYTE *)(*((_QWORD *)&v290 + 1) + v88++) = v89;
        }
        while (v13 != v88);
        v87 = *((_QWORD *)&v290 + 1);
      }
      v90 = v87 + v6;
      *((_QWORD *)&v290 + 1) = v87 + v6;
      v91 = *((_QWORD *)&v291 + 1);
      v93 = *((_QWORD *)&v289 + 1);
      v92 = v290;
      if ((unint64_t)(v87 + v6) >= *((_QWORD *)&v291 + 1))
      {
        v92 = *(_QWORD *)(v290 + 8);
        v90 = *(_QWORD *)(v92 + 24);
        *(_QWORD *)&v290 = v92;
        *((_QWORD *)&v290 + 1) = v90;
        v94 = *(_QWORD *)(v92 + 24);
        *(_QWORD *)&v291 = v94;
        v91 = v94 + *(int *)(*((_QWORD *)&v289 + 1) + 44) * (uint64_t)*(int *)(v92 + 20);
        *((_QWORD *)&v291 + 1) = v91;
      }
      else
      {
        v94 = v291;
      }
      v95 = 0;
      v272 = v292;
      v96 = *((_QWORD *)&v286 + 1);
      v97 = v257;
      v98 = v90;
      while (v90 != v96)
      {
        while (1)
        {
          v99 = a2();
          if (v99 > 0)
            break;
          if (!v99)
          {
            if (v98 != *((_QWORD *)&v290 + 1) && (int)v6 >= 1)
            {
              v103 = 0;
              do
              {
                v104 = *(_BYTE *)(v98 + v103);
                *(_BYTE *)(v98 + v103) = *(_BYTE *)(*((_QWORD *)&v290 + 1) + v103);
                *(_BYTE *)(*((_QWORD *)&v290 + 1) + v103++) = v104;
              }
              while (v13 != v103);
            }
            v98 += v6;
            if (v98 >= v91)
            {
              v92 = *(_QWORD *)(v92 + 8);
              v94 = *(_QWORD *)(v92 + 24);
              v91 = v94 + *(int *)(v93 + 44) * (uint64_t)*(int *)(v92 + 20);
              v95 = 1;
              v98 = v94;
              v100 = *((_QWORD *)&v290 + 1) + v6;
              *((_QWORD *)&v290 + 1) = v100;
              if (v100 < *((_QWORD *)&v291 + 1))
                goto LABEL_176;
            }
            else
            {
              v95 = 1;
              v100 = *((_QWORD *)&v290 + 1) + v6;
              *((_QWORD *)&v290 + 1) = v100;
              if (v100 < *((_QWORD *)&v291 + 1))
                goto LABEL_176;
            }
LABEL_180:
            v101 = *(_QWORD *)(v290 + 8);
            v100 = *(_QWORD *)(v101 + 24);
            *(_QWORD *)&v290 = v101;
            *((_QWORD *)&v290 + 1) = v100;
            *(_QWORD *)&v291 = *(_QWORD *)(v101 + 24);
            *((_QWORD *)&v291 + 1) = v291 + *(int *)(*((_QWORD *)&v289 + 1) + 44) * (uint64_t)*(int *)(v101 + 20);
            goto LABEL_176;
          }
          v100 = *((_QWORD *)&v290 + 1) + v6;
          *((_QWORD *)&v290 + 1) = v100;
          if (v100 >= *((_QWORD *)&v291 + 1))
            goto LABEL_180;
LABEL_176:
          if (v100 == *((_QWORD *)&v286 + 1))
          {
            v96 = v100;
            goto LABEL_224;
          }
        }
        v105 = *((_QWORD *)&v290 + 1);
        v96 = *((_QWORD *)&v286 + 1);
        while (1)
        {
          if (v105 == v96)
            goto LABEL_224;
          v106 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))a2)(v96, v87, a3);
          if (v106 < 0)
            break;
          if (v106)
          {
            v96 = *((_QWORD *)&v286 + 1) + v274;
            *((_QWORD *)&v286 + 1) = v96;
            if (v96 >= (unint64_t)v287)
              goto LABEL_193;
LABEL_209:
            *(_QWORD *)&v286 = *(_QWORD *)v286;
            v110 = *(int *)(*((_QWORD *)&v285 + 1) + 44);
            v96 = *(_QWORD *)(v286 + 24) + v110 * (*(int *)(v286 + 20) - 1);
            *((_QWORD *)&v286 + 1) = v96;
            *(_QWORD *)&v287 = *(_QWORD *)(v286 + 24);
            *((_QWORD *)&v287 + 1) = v287 + *(int *)(v286 + 20) * (uint64_t)(int)v110;
            goto LABEL_193;
          }
          if (v268 != *((_QWORD *)&v286 + 1) && (int)v6 >= 1)
          {
            v108 = 0;
            do
            {
              v109 = *(_BYTE *)(v268 + v108);
              *(_BYTE *)(v268 + v108) = *(_BYTE *)(*((_QWORD *)&v286 + 1) + v108);
              *(_BYTE *)(*((_QWORD *)&v286 + 1) + v108++) = v109;
            }
            while (v13 != v108);
          }
          if (v268 + v274 >= v97)
          {
            v268 += v274;
          }
          else
          {
            v97 = *(_QWORD *)(*(_QWORD *)v265 + 24);
            v265 = *(_DWORD **)v265;
            v268 = v97 + *(int *)(v263 + 44) * ((int)v265[5] - 1);
          }
          v95 = 1;
          v96 = *((_QWORD *)&v286 + 1) + v274;
          *((_QWORD *)&v286 + 1) = v96;
          if (v96 < (unint64_t)v287)
            goto LABEL_209;
LABEL_193:
          v105 = *((_QWORD *)&v290 + 1);
        }
        v111 = *((_QWORD *)&v290 + 1);
        v96 = *((_QWORD *)&v286 + 1);
        if (*((_QWORD *)&v290 + 1) == *((_QWORD *)&v286 + 1))
          break;
        if ((int)v6 >= 1)
        {
          v112 = 0;
          do
          {
            v113 = *(_BYTE *)(*((_QWORD *)&v290 + 1) + v112);
            *(_BYTE *)(*((_QWORD *)&v290 + 1) + v112) = *(_BYTE *)(*((_QWORD *)&v286 + 1) + v112);
            *(_BYTE *)(*((_QWORD *)&v286 + 1) + v112++) = v113;
          }
          while (v13 != v112);
          v111 = *((_QWORD *)&v290 + 1);
        }
        v90 = v111 + v6;
        *((_QWORD *)&v290 + 1) = v111 + v6;
        if ((unint64_t)(v111 + v6) >= *((_QWORD *)&v291 + 1))
        {
          v116 = *(_QWORD *)(v290 + 8);
          v90 = *(_QWORD *)(v116 + 24);
          *(_QWORD *)&v290 = v116;
          *((_QWORD *)&v290 + 1) = v90;
          *(_QWORD *)&v291 = *(_QWORD *)(v116 + 24);
          *((_QWORD *)&v291 + 1) = v291 + *(int *)(*((_QWORD *)&v289 + 1) + 44) * (uint64_t)*(int *)(v116 + 20);
          v114 = *((_QWORD *)&v286 + 1);
          v96 = *((_QWORD *)&v286 + 1) + v274;
          *((_QWORD *)&v286 + 1) = v96;
          if (v96 >= (unint64_t)v287)
            goto LABEL_220;
LABEL_217:
          *(_QWORD *)&v286 = *(_QWORD *)v286;
          v115 = *(int *)(*((_QWORD *)&v285 + 1) + 44);
          v96 = *(_QWORD *)(v286 + 24) + v115 * (*(int *)(v286 + 20) - 1);
          *((_QWORD *)&v286 + 1) = v96;
          *(_QWORD *)&v287 = *(_QWORD *)(v286 + 24);
          *((_QWORD *)&v287 + 1) = v287 + *(int *)(v286 + 20) * (uint64_t)(int)v115;
          v95 = 1;
          if (v90 == v114)
          {
LABEL_221:
            v117 = a1;
            if (!v90)
            {
LABEL_242:
              v293 = 0;
              v294 = 0;
              sub_100294B74(-27, &v293, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
            }
LABEL_243:
            v127 = *(int *)(*((_QWORD *)&v289 + 1) + 44);
            v262 = v97;
            if ((int)v127 >= 33)
            {
              v128 = *((_QWORD *)&v290 + 1);
              v129 = v291;
            }
            else
            {
              v128 = *((_QWORD *)&v290 + 1);
              v129 = v291;
              if (((0x8000808BuLL >> (v127 - 1)) & 1) != 0)
              {
                v130 = *(_DWORD *)(v290 + 16) + ((uint64_t)(*((_QWORD *)&v290 + 1) - v291) >> byte_1003BCB15[v127 - 1]);
                v131 = v130 - v292;
                if (v130 == (_DWORD)v292)
                  goto LABEL_246;
LABEL_250:
                if (!*((_QWORD *)&v282 + 1))
                  goto LABEL_251;
                goto LABEL_252;
              }
            }
            v132 = *(_DWORD *)(v290 + 16) + (v128 - v129) / v127;
            v131 = v132 - v292;
            if (v132 != (_DWORD)v292)
              goto LABEL_250;
LABEL_246:
            v131 = *(_DWORD *)(v117 + 40);
            if (!*((_QWORD *)&v282 + 1))
            {
LABEL_251:
              v293 = 0;
              v294 = 0;
              sub_100294B74(-27, &v293, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
            }
LABEL_252:
            v133 = *(int *)(*((_QWORD *)&v281 + 1) + 44);
            if ((int)v133 >= 33)
            {
              v134 = *((_QWORD *)&v282 + 1);
LABEL_257:
              v135 = (v134 - (uint64_t)v283) / v133;
              v136 = *(_DWORD *)(v282 + 16);
              v137 = v284;
              if (!v98)
                goto LABEL_258;
              goto LABEL_259;
            }
            v134 = *((_QWORD *)&v282 + 1);
            if (((0x8000808BuLL >> (v133 - 1)) & 1) == 0)
              goto LABEL_257;
            v135 = (uint64_t)(*((_QWORD *)&v282 + 1) - v283) >> byte_1003BCB15[v133 - 1];
            v136 = *(_DWORD *)(v282 + 16);
            v137 = v284;
            if (!v98)
            {
LABEL_258:
              v293 = 0;
              v294 = 0;
              sub_100294B74(-27, &v293, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
            }
LABEL_259:
            v138 = *(int *)(v93 + 44);
            if ((int)v138 <= 32 && ((0x8000808BuLL >> (v138 - 1)) & 1) != 0)
            {
              v139 = ((uint64_t)(v98 - v94) >> byte_1003BCB15[v138 - 1]) - v272 + *(_DWORD *)(v92 + 16);
              if (!v139)
LABEL_262:
                v139 = *(_DWORD *)(a1 + 40);
            }
            else
            {
              v139 = (uint64_t)(v98 - v94) / v138 - v272 + *(_DWORD *)(v92 + 16);
              if (!v139)
                goto LABEL_262;
            }
            v140 = v131 - v139;
            v141 = v137 - v136 - v135 + v139;
            v273 = v140;
            if (v140 >= v141)
              v142 = v141;
            else
              v142 = v140;
            if (v142 >= 1)
            {
              v143 = v282;
              v260 = *((_QWORD *)&v281 + 1);
              v144 = *((_QWORD *)&v282 + 1);
              v145 = *((_QWORD *)&v283 + 1);
              LODWORD(v146) = DWORD2(v290);
              v147 = (uint64_t **)v290;
              v148 = *((_QWORD *)&v291 + 1);
              LODWORD(v149) = v291;
              if (!*((_QWORD *)&v289 + 1))
              {
                v293 = 0;
                v294 = 0;
                sub_100294B74(-27, &v293, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1045);
              }
              v150 = *((_QWORD *)&v289 + 1);
              v151 = *(_DWORD *)(*((_QWORD *)&v289 + 1) + 44);
              v152 = -(v142 * v151);
              if (v152 < 0 || v142 * v151 == 0)
              {
                v153 = *((_QWORD *)&v290 + 1) + v152;
                if (v153 < (unint64_t)v291)
                {
                  do
                  {
                    v152 += v146 - v149;
                    v147 = (uint64_t **)*v147;
                    v149 = (unint64_t)v147[3];
                    v146 = v149 + *((int *)v147 + 5) * (uint64_t)v151;
                    v153 = v146 + v152;
                  }
                  while (v153 < v149);
                  v148 = v149 + *((int *)v147 + 5) * (uint64_t)v151;
                }
              }
              else
              {
                v153 = *((_QWORD *)&v290 + 1) + v152;
                if (v153 >= *((_QWORD *)&v291 + 1))
                {
                  do
                  {
                    v152 += v146 - v148;
                    v147 = (uint64_t **)v147[1];
                    v146 = (unint64_t)v147[3];
                    v154 = *((int *)v147 + 5) * (uint64_t)v151;
                    v148 = v146 + v154;
                  }
                  while (v152 >= (int)v154);
                  v153 = v146 + v152;
                }
              }
              for (i = 0; i != v142; ++i)
              {
                if ((int)v6 < 1)
                  goto LABEL_287;
                if (v6 < 8 || v144 < v153 + v13 && v153 < v144 + v13)
                {
                  v156 = 0;
LABEL_285:
                  v157 = (char *)(v153 + v156);
                  v158 = (char *)(v144 + v156);
                  v159 = v13 - v156;
                  do
                  {
                    v160 = *v158;
                    *v158++ = *v157;
                    *v157++ = v160;
                    --v159;
                  }
                  while (v159);
                  goto LABEL_287;
                }
                if (v6 >= 0x20)
                {
                  v162 = (__int128 *)(v144 + 16);
                  v163 = (__int128 *)(v153 + 16);
                  v164 = v267;
                  do
                  {
                    v165 = *(v162 - 1);
                    v166 = *v162;
                    v167 = *v163;
                    *(v162 - 1) = *(v163 - 1);
                    *v162 = v167;
                    *(v163 - 1) = v165;
                    *v163 = v166;
                    v162 += 2;
                    v163 += 2;
                    v164 -= 32;
                  }
                  while (v164);
                  if (v267 == v13)
                    goto LABEL_287;
                  v156 = v267;
                  v161 = v267;
                  if (!v258)
                    goto LABEL_285;
                }
                else
                {
                  v161 = 0;
                }
                v168 = (uint64_t *)(v144 + v161);
                v169 = (uint64_t *)(v153 + v161);
                v170 = v161 - v264;
                do
                {
                  v171 = *v168;
                  *v168++ = *v169;
                  *v169++ = v171;
                  v170 += 8;
                }
                while (v170);
                v156 = v264;
                if (v264 != v13)
                  goto LABEL_285;
LABEL_287:
                v144 += v6;
                if (v144 >= v145)
                {
                  v143 = *(_QWORD *)(v143 + 8);
                  v144 = *(_QWORD *)(v143 + 24);
                  v145 = v144 + *(int *)(v260 + 44) * (uint64_t)*(int *)(v143 + 20);
                  v153 += v6;
                  if (v153 >= v148)
                  {
LABEL_291:
                    v147 = (uint64_t **)v147[1];
                    v153 = (unint64_t)v147[3];
                    v148 = v153 + *(int *)(v150 + 44) * (uint64_t)*((int *)v147 + 5);
                  }
                }
                else
                {
                  v153 += v6;
                  if (v153 >= v148)
                    goto LABEL_291;
                }
              }
            }
            if (!*((_QWORD *)&v286 + 1))
            {
              v293 = 0;
              v294 = 0;
              sub_100294B74(-27, &v293, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
            }
            v172 = *(int *)(*((_QWORD *)&v285 + 1) + 44);
            if ((int)v172 >= 33)
            {
              v173 = *((_QWORD *)&v286 + 1);
              v174 = v287;
            }
            else
            {
              v173 = *((_QWORD *)&v286 + 1);
              v174 = v287;
              if (((0x8000808BuLL >> (v172 - 1)) & 1) != 0)
              {
                v175 = (uint64_t)(*((_QWORD *)&v286 + 1) - v287) >> byte_1003BCB15[v172 - 1];
                v176 = *(_DWORD *)(v286 + 16);
                v177 = v288;
                if (!*((_QWORD *)&v278 + 1))
                  goto LABEL_310;
                goto LABEL_311;
              }
            }
            v175 = (v173 - v174) / v172;
            v176 = *(_DWORD *)(v286 + 16);
            v177 = v288;
            if (!*((_QWORD *)&v278 + 1))
            {
LABEL_310:
              v293 = 0;
              v294 = 0;
              sub_100294B74(-27, &v293, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
            }
LABEL_311:
            v178 = *(int *)(*((_QWORD *)&v277 + 1) + 44);
            if ((int)v178 >= 33)
            {
              v179 = *((_QWORD *)&v278 + 1);
            }
            else
            {
              v179 = *((_QWORD *)&v278 + 1);
              if (((0x8000808BuLL >> (v178 - 1)) & 1) != 0)
              {
                v180 = (uint64_t)(*((_QWORD *)&v278 + 1) - v279) >> byte_1003BCB15[v178 - 1];
                v181 = *(_DWORD *)(v278 + 16);
                v182 = v280;
                if (!v268)
                  goto LABEL_317;
                goto LABEL_318;
              }
            }
            v180 = (v179 - (uint64_t)v279) / v178;
            v181 = *(_DWORD *)(v278 + 16);
            v182 = v280;
            if (!v268)
            {
LABEL_317:
              v293 = 0;
              v294 = 0;
              sub_100294B74(-27, &v293, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
            }
LABEL_318:
            v183 = *(int *)(v263 + 44);
            if ((int)v183 <= 32 && ((0x8000808BuLL >> (v183 - 1)) & 1) != 0)
              v184 = (uint64_t)(v268 - v262) >> byte_1003BCB15[v183 - 1];
            else
              v184 = (uint64_t)(v268 - v262) / v183;
            v185 = v184 - v256 + v265[4];
            v186 = v181 + v180 - (v182 + v185);
            v187 = v177 - v176 - v175 + v185;
            if (v186 >= v187)
              v188 = v177 - v176 - v175 + v185;
            else
              v188 = v186;
            if (v188 >= 1)
            {
              v269 = v187;
              v189 = v290;
              v266 = *((_QWORD *)&v289 + 1);
              v190 = *((_QWORD *)&v290 + 1);
              v191 = *((_QWORD *)&v291 + 1);
              LODWORD(v192) = DWORD2(v278);
              v193 = (uint64_t **)v278;
              v194 = *((_QWORD *)&v279 + 1);
              LODWORD(v195) = v279;
              if (!*((_QWORD *)&v277 + 1))
              {
                v293 = 0;
                v294 = 0;
                sub_100294B74(-27, &v293, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1045);
              }
              v196 = 1 - v188;
              v197 = *((_QWORD *)&v277 + 1);
              v198 = *(int *)(*((_QWORD *)&v277 + 1) + 44);
              v199 = v198 * v196;
              if ((int)v198 * (int)v196 <= 0)
              {
                v200 = *((_QWORD *)&v278 + 1) + v199;
                if (*((_QWORD *)&v278 + 1) + v199 < (unint64_t)v279)
                {
                  do
                  {
                    LODWORD(v199) = v199 + v192 - v195;
                    v193 = (uint64_t **)*v193;
                    v195 = (unint64_t)v193[3];
                    v192 = v195 + *((int *)v193 + 5) * (uint64_t)(int)v198;
                    v200 = v192 + (int)v199;
                  }
                  while (v200 < v195);
                  v194 = v195 + *((int *)v193 + 5) * (uint64_t)(int)v198;
                }
              }
              else
              {
                v200 = *((_QWORD *)&v278 + 1) + v199;
                if (v200 >= *((_QWORD *)&v279 + 1))
                {
                  do
                  {
                    LODWORD(v199) = v199 + v192 - v194;
                    v193 = (uint64_t **)v193[1];
                    v192 = (unint64_t)v193[3];
                    v201 = *((int *)v193 + 5) * (uint64_t)(int)v198;
                    v194 = v192 + v201;
                  }
                  while ((int)v199 >= (int)v201);
                  v200 = v192 + (int)v199;
                }
              }
              v202 = 0;
              v187 = v269;
              do
              {
                if ((int)v6 < 1)
                  goto LABEL_344;
                if (v6 < 8 || v190 < v200 + v13 && v200 < v190 + v13)
                {
                  v203 = 0;
LABEL_342:
                  v204 = (char *)(v200 + v203);
                  v205 = (char *)(v190 + v203);
                  v206 = v13 - v203;
                  do
                  {
                    v207 = *v205;
                    *v205++ = *v204;
                    *v204++ = v207;
                    --v206;
                  }
                  while (v206);
                  goto LABEL_344;
                }
                if (v6 >= 0x20)
                {
                  v209 = (__int128 *)(v190 + 16);
                  v210 = (__int128 *)(v200 + 16);
                  v211 = v267;
                  do
                  {
                    v212 = *(v209 - 1);
                    v213 = *v209;
                    v214 = *v210;
                    *(v209 - 1) = *(v210 - 1);
                    *v209 = v214;
                    *(v210 - 1) = v212;
                    *v210 = v213;
                    v209 += 2;
                    v210 += 2;
                    v211 -= 32;
                  }
                  while (v211);
                  if (v267 == v13)
                    goto LABEL_344;
                  v203 = v267;
                  v208 = v267;
                  if (!v258)
                    goto LABEL_342;
                }
                else
                {
                  v208 = 0;
                }
                v215 = (uint64_t *)(v190 + v208);
                v216 = (uint64_t *)(v200 + v208);
                v217 = v208 - v264;
                do
                {
                  v218 = *v215;
                  *v215++ = *v216;
                  *v216++ = v218;
                  v217 += 8;
                }
                while (v217);
                v203 = v264;
                if (v264 != v13)
                  goto LABEL_342;
LABEL_344:
                v190 += v6;
                if (v190 >= v191)
                {
                  v189 = *(_QWORD *)(v189 + 8);
                  v190 = *(_QWORD *)(v189 + 24);
                  v191 = v190 + *(int *)(v266 + 44) * (uint64_t)*(int *)(v189 + 20);
                  v200 += v6;
                  if (v200 >= v194)
                  {
LABEL_348:
                    v193 = (uint64_t **)v193[1];
                    v200 = (unint64_t)v193[3];
                    v194 = v200 + *(int *)(v197 + 44) * (uint64_t)*((int *)v193 + 5);
                  }
                }
                else
                {
                  v200 += v6;
                  if (v200 >= v194)
                    goto LABEL_348;
                }
                ++v202;
              }
              while (v202 != v188);
            }
            v219 = v273 - 1;
            if (v273 <= 1)
            {
              if (v187 <= 1)
                goto LABEL_14;
              v285 = v277;
              v286 = v278;
              v287 = v279;
              v288 = v280;
              v289 = v277;
              v290 = v278;
              v291 = v279;
              v292 = v280;
              sub_10021EFE4(&v289, 1 - v187, 1);
            }
            else
            {
              if (v187 >= 2)
              {
                v220 = (int)v252 + 1;
                v221 = &v295[4 * v220];
                if (v273 <= v187)
                {
                  v225 = v279;
                  v221[2] = v278;
                  v221[3] = v225;
                  sub_10021EFE4(&v277, 1 - v187, 1);
                  v226 = v279;
                  *v221 = v278;
                  v221[1] = v226;
                  v285 = v281;
                  v286 = v282;
                  v287 = v283;
                  v288 = v284;
                  v291 = v283;
                  v292 = v284;
                  v289 = v281;
                  v290 = v282;
                  sub_10021EFE4(&v285, v219, 1);
                }
                else
                {
                  v222 = v283;
                  *v221 = v282;
                  v221[1] = v222;
                  sub_10021EFE4(&v281, v219, 1);
                  v223 = v283;
                  v224 = &v295[4 * v220];
                  v224[2] = v282;
                  v224[3] = v223;
                  v285 = v277;
                  v286 = v278;
                  v287 = v279;
                  v288 = v280;
                  v291 = v279;
                  v292 = v280;
                  v289 = v277;
                  v290 = v278;
                  sub_10021EFE4(&v289, 1 - v187, 1);
                }
                ++v252;
                v17 = (uint64_t *)v290;
                v18 = *((_QWORD *)&v286 + 1);
                if ((_QWORD)v290 == (_QWORD)v286)
                  goto LABEL_35;
                goto LABEL_19;
              }
              v285 = v281;
              v286 = v282;
              v287 = v283;
              v288 = v284;
              v289 = v281;
              v290 = v282;
              v291 = v283;
              v292 = v284;
              sub_10021EFE4(&v285, v273 - 1, 1);
            }
            v17 = (uint64_t *)v290;
            v18 = *((_QWORD *)&v286 + 1);
            if ((_QWORD)v290 == (_QWORD)v286)
              goto LABEL_35;
            goto LABEL_19;
          }
        }
        else
        {
          v114 = *((_QWORD *)&v286 + 1);
          v96 = *((_QWORD *)&v286 + 1) + v274;
          *((_QWORD *)&v286 + 1) = v96;
          if (v96 < (unint64_t)v287)
            goto LABEL_217;
LABEL_220:
          v95 = 1;
          if (v90 == v114)
            goto LABEL_221;
        }
      }
LABEL_224:
      v118 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))a2)(v96, v87, a3);
      if (v118)
      {
        if (v118 > 0)
        {
          *((_QWORD *)&v286 + 1) += v274;
          if (*((_QWORD *)&v286 + 1) < (unint64_t)v287)
          {
            *(_QWORD *)&v286 = *(_QWORD *)v286;
            v119 = (int *)(v286 + 20);
            v120 = *(int *)(*((_QWORD *)&v285 + 1) + 44);
            *((_QWORD *)&v286 + 1) = *(_QWORD *)(v286 + 24) + v120 * (*(int *)(v286 + 20) - 1);
            v121 = *(_QWORD *)(v286 + 24);
            *(_QWORD *)&v287 = v121;
            v122 = (char *)&v287 + 8;
LABEL_239:
            *(_QWORD *)v122 = v121 + *v119 * (uint64_t)(int)v120;
            goto LABEL_240;
          }
          goto LABEL_240;
        }
      }
      else
      {
        if (v98 != *((_QWORD *)&v290 + 1) && (int)v6 >= 1)
        {
          v124 = 0;
          do
          {
            v125 = *(_BYTE *)(v98 + v124);
            *(_BYTE *)(v98 + v124) = *(_BYTE *)(*((_QWORD *)&v290 + 1) + v124);
            *(_BYTE *)(*((_QWORD *)&v290 + 1) + v124++) = v125;
          }
          while (v13 != v124);
        }
        v98 += v6;
        if (v98 >= v91)
        {
          v92 = *(_QWORD *)(v92 + 8);
          v94 = *(_QWORD *)(v92 + 24);
          v95 = 1;
          v98 = v94;
        }
        else
        {
          v95 = 1;
        }
      }
      *((_QWORD *)&v290 + 1) += v6;
      if (*((_QWORD *)&v290 + 1) >= *((_QWORD *)&v291 + 1))
      {
        v120 = *(_QWORD *)(v290 + 8);
        v126 = *(_QWORD *)(v120 + 24);
        *(_QWORD *)&v290 = v120;
        *((_QWORD *)&v290 + 1) = v126;
        v121 = *(_QWORD *)(v120 + 24);
        *(_QWORD *)&v291 = v121;
        LODWORD(v120) = *(_DWORD *)(v120 + 20);
        v119 = (int *)(*((_QWORD *)&v289 + 1) + 44);
        v122 = (char *)&v291 + 8;
        goto LABEL_239;
      }
LABEL_240:
      if (v95)
      {
        v117 = a1;
        if (!*((_QWORD *)&v290 + 1))
          goto LABEL_242;
        goto LABEL_243;
      }
      v289 = v281;
      v290 = v282;
      v291 = v283;
      v292 = v284;
      v285 = v277;
      v286 = v278;
      v287 = v279;
      v288 = v280;
      v17 = (uint64_t *)v282;
      v271 = *((_QWORD *)&v281 + 1);
      v27 = *((_QWORD *)&v282 + 1);
      v31 = *((_QWORD *)&v283 + 1);
      v28 = v283;
LABEL_369:
      v227 = v27 + v6;
      v228 = v17;
      v270 = v28;
      if (v27 + v6 < v31)
      {
        v229 = *((_QWORD *)&v286 + 1) + v6;
        *((_QWORD *)&v286 + 1) = v229;
        if (v229 >= *((_QWORD *)&v287 + 1))
          goto LABEL_374;
        goto LABEL_371;
      }
      v228 = (uint64_t *)v17[1];
      v227 = v228[3];
      v31 = v227 + *(int *)(v271 + 44) * (uint64_t)*((int *)v228 + 5);
      v270 = v227;
      v229 = *((_QWORD *)&v286 + 1) + v6;
      *((_QWORD *)&v286 + 1) = v229;
      if (v229 >= *((_QWORD *)&v287 + 1))
      {
LABEL_374:
        v230 = *(_QWORD *)(v286 + 8);
        v231 = *(_QWORD *)(v230 + 24);
        *(_QWORD *)&v286 = v230;
        *((_QWORD *)&v286 + 1) = v231;
        *(_QWORD *)&v287 = *(_QWORD *)(v230 + 24);
        *((_QWORD *)&v287 + 1) = v287 + *(int *)(*((_QWORD *)&v285 + 1) + 44) * (uint64_t)*(int *)(v230 + 20);
        if (v227 == v231)
          goto LABEL_14;
LABEL_375:
        if ((int)v6 < 1)
        {
          while (2)
          {
            if (v17 != v228)
              v28 = v270;
            if (v227 == *((_QWORD *)&v290 + 1))
            {
              v17 = v228;
              v227 += v6;
              if (v227 >= v31)
                goto LABEL_418;
            }
            else
            {
              v250 = v227;
              v17 = v228;
              do
              {
                v251 = v250 + v274;
                if (v250 + v274 < v28)
                {
                  v17 = (uint64_t *)*v17;
                  v28 = v17[3];
                  v251 = v28 + *(int *)(v271 + 44) * (*((int *)v17 + 5) - 1);
                }
                if (((int (*)(unint64_t))a2)(v251) < 1)
                  break;
                v250 = v251;
              }
              while (v251 != *((_QWORD *)&v290 + 1));
              v227 += v6;
              if (v227 >= v31)
              {
LABEL_418:
                v228 = (uint64_t *)v228[1];
                v227 = v228[3];
                v31 = v227 + *(int *)(v271 + 44) * (uint64_t)*((int *)v228 + 5);
                v270 = v227;
              }
            }
            if (v227 == *((_QWORD *)&v286 + 1))
              goto LABEL_14;
            continue;
          }
        }
        while (1)
        {
          if (v17 != v228)
            v28 = v270;
          if (v227 != *((_QWORD *)&v290 + 1))
            break;
          v17 = v228;
LABEL_404:
          v227 += v6;
          if (v227 >= v31)
          {
            v228 = (uint64_t *)v228[1];
            v227 = v228[3];
            v31 = v227 + *(int *)(v271 + 44) * (uint64_t)*((int *)v228 + 5);
            v270 = v227;
          }
          if (v227 == *((_QWORD *)&v286 + 1))
            goto LABEL_14;
        }
        v232 = v227;
        v17 = v228;
        while (2)
        {
          v233 = v232;
          v232 += v274;
          if (v232 < v28)
          {
            v17 = (uint64_t *)*v17;
            v28 = v17[3];
            v232 = v28 + *(int *)(v271 + 44) * (*((int *)v17 + 5) - 1);
          }
          if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v232, v233, a3) < 1)
            goto LABEL_404;
          if (v6 < 8 || v232 < v233 + v13 && v233 < v232 + v13)
          {
            v234 = 0;
            goto LABEL_390;
          }
          if (v6 >= 0x20)
          {
            v240 = (__int128 *)(v232 + 16);
            v241 = (__int128 *)(v233 + 16);
            v242 = v267;
            do
            {
              v243 = *(v240 - 1);
              v244 = *v240;
              v245 = *v241;
              *(v240 - 1) = *(v241 - 1);
              *v240 = v245;
              *(v241 - 1) = v243;
              *v241 = v244;
              v240 += 2;
              v241 += 2;
              v242 -= 32;
            }
            while (v242);
            if (v267 != v13)
            {
              v234 = v267;
              v239 = v267;
              if (!v258)
                goto LABEL_390;
              goto LABEL_399;
            }
          }
          else
          {
            v239 = 0;
LABEL_399:
            v246 = (uint64_t *)(v232 + v239);
            v247 = (uint64_t *)(v233 + v239);
            v248 = v239 - v264;
            do
            {
              v249 = *v246;
              *v246++ = *v247;
              *v247++ = v249;
              v248 += 8;
            }
            while (v248);
            v234 = v264;
            if (v264 != v13)
            {
LABEL_390:
              v235 = (char *)(v232 + v234);
              v236 = (char *)(v233 + v234);
              v237 = v13 - v234;
              do
              {
                v238 = *v235;
                *v235++ = *v236;
                *v236++ = v238;
                --v237;
              }
              while (v237);
            }
          }
          if (v232 == *((_QWORD *)&v290 + 1))
            goto LABEL_404;
          continue;
        }
      }
LABEL_371:
      if (v227 != v229)
        goto LABEL_375;
LABEL_14:
      v12 = v252;
    }
    while ((v252 & 0x80000000) == 0);
  }
}

void sub_100222A0C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_100008C88(a1);
  _Unwind_Resume(a1);
}

_DWORD *sub_100222C34(unsigned int a1, int a2, int a3, uint64_t a4)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t v6;

  if (!a4)
  {
    v5 = 0;
    v6 = 0;
    sub_100294B74(-27, &v5, "cvCreateSet", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2486);
  }
  if (a2 < 112 || a3 < 16 || (a3 & 7) != 0)
  {
    v5 = 0;
    v6 = 0;
    sub_100294B74(-201, &v5, "cvCreateSet", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2490);
  }
  result = sub_10021E968(a1, a2, a3, a4);
  *((_WORD *)result + 1) = 17048;
  return result;
}

void sub_100222D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100222D30(uint64_t a1, void *__src, _QWORD *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v15[2];

  if (!a1)
  {
    v15[0] = 0;
    v15[1] = 0;
    sub_100294B74(-27, v15, "cvSetAdd", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2507);
  }
  v6 = *(_QWORD **)(a1 + 96);
  if (!v6)
  {
    v7 = *(_DWORD *)(a1 + 40);
    v8 = *(int *)(a1 + 44);
    sub_10021F8B8(a1, 0);
    v9 = *(_QWORD *)(a1 + 48);
    v6 = *(_QWORD **)(a1 + 56);
    *(_QWORD *)(a1 + 96) = v6;
    if ((unint64_t)v6 + v8 <= v9)
    {
      v11 = v6;
      do
      {
        v10 = (_QWORD *)((char *)v11 + v8);
        *(_DWORD *)v11 = v7 | 0x80000000;
        v11[1] = (char *)v11 + v8;
        ++v7;
        v12 = (char *)v11 + v8 + v8;
        v11 = (_QWORD *)((char *)v11 + v8);
      }
      while ((unint64_t)v12 <= v9);
    }
    else
    {
      v10 = v6;
    }
    *(_QWORD *)((char *)v10 - v8 + 8) = 0;
    *(_DWORD *)(**(_QWORD **)(a1 + 88) + 20) += v7 - *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 56) = v9;
  }
  *(_QWORD *)(a1 + 96) = v6[1];
  v13 = *(_DWORD *)v6 & 0x3FFFFFF;
  if (__src)
    memcpy(v6, __src, *(int *)(a1 + 44));
  *(_DWORD *)v6 = v13;
  ++*(_DWORD *)(a1 + 104);
  if (a3)
    *a3 = v6;
  return v13;
}

void sub_100222E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

char *sub_100222E84(uint64_t a1)
{
  char *result;

  result = sub_1002204C8(a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

_DWORD *sub_100222EAC(unsigned int a1, int a2, int a3, int a4, uint64_t a5)
{
  _DWORD *v7;
  uint64_t v9[2];

  if (a3 < 16 || a2 < 120 || a4 <= 39)
  {
    v9[0] = 0;
    v9[1] = 0;
    sub_100294B74(-201, v9, "cvCreateGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2586);
  }
  v7 = sub_100222C34(a1, a2, a3, a5);
  *((_QWORD *)v7 + 14) = sub_100222C34(0, 112, a4, a5);
  return v7;
}

void sub_100222F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100222F84(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  char *v12;
  uint64_t result;
  uint64_t v14[2];

  if (!a1)
  {
    v14[0] = 0;
    v14[1] = 0;
    sub_100294B74(-27, v14, "cvGraphAddVtx", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2620);
  }
  v6 = *(unsigned int **)(a1 + 96);
  if (!v6)
  {
    v7 = *(_DWORD *)(a1 + 40);
    v8 = *(int *)(a1 + 44);
    sub_10021F8B8(a1, 0);
    v9 = *(_QWORD *)(a1 + 48);
    v6 = *(unsigned int **)(a1 + 56);
    *(_QWORD *)(a1 + 96) = v6;
    if ((unint64_t)v6 + v8 <= v9)
    {
      v11 = v6;
      do
      {
        v10 = (unsigned int *)((char *)v11 + v8);
        *v11 = v7 | 0x80000000;
        *((_QWORD *)v11 + 1) = (char *)v11 + v8;
        ++v7;
        v12 = (char *)v11 + v8 + v8;
        v11 = (unsigned int *)((char *)v11 + v8);
      }
      while ((unint64_t)v12 <= v9);
    }
    else
    {
      v10 = v6;
    }
    *(_QWORD *)((char *)v10 - v8 + 8) = 0;
    *(_DWORD *)(**(_QWORD **)(a1 + 88) + 20) += v7 - *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 56) = v9;
  }
  *(_QWORD *)(a1 + 96) = *((_QWORD *)v6 + 1);
  *v6 &= 0x3FFFFFFu;
  ++*(_DWORD *)(a1 + 104);
  if (a2)
    memcpy(v6 + 4, (const void *)(a2 + 16), *(int *)(a1 + 44) - 16);
  *((_QWORD *)v6 + 1) = 0;
  result = *v6;
  if (a3)
    *a3 = v6;
  return result;
}

void sub_100223124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10022313C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  _DWORD *v8;
  uint64_t result;
  _DWORD *v10;
  uint64_t v11[2];

  v3 = a3;
  v4 = a2;
  if (!a1 || !a2 || !a3)
  {
    v11[0] = 0;
    v11[1] = 0;
    sub_100294B74(-27, v11, "cvFindGraphEdgeByPtr", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2705);
  }
  if (a2 == a3)
    return 0;
  if ((*(_BYTE *)(a1 + 1) & 0x40) == 0)
  {
    v5 = *a2 & 0x3FFFFFF;
    v6 = *a3 & 0x3FFFFFF;
    v7 = v5 > v6;
    if (v5 <= v6)
      v8 = a3;
    else
      v8 = a2;
    if (v7)
      v4 = a3;
    v3 = v8;
  }
  for (result = *((_QWORD *)v4 + 1); result; result = *(_QWORD *)(result + 8 * (v4 == v10) + 8))
  {
    v10 = *(_DWORD **)(result + 32);
    if (v10 == v3)
      break;
  }
  return result;
}

void sub_10022321C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100223234(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t *a5)
{
  _DWORD *v7;
  _DWORD *v8;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  size_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;

  v7 = a3;
  v8 = a2;
  if (!a1)
  {
    v28 = 0;
    v29 = 0;
    qmemcpy((void *)sub_10029430C(&v28, 21), "graph pointer is NULL", 21);
    sub_100294B74(-27, &v28, "cvGraphAddEdgeByPtr", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2762);
  }
  if ((*(_BYTE *)(a1 + 1) & 0x40) == 0)
  {
    v10 = *a2 & 0x3FFFFFF;
    v11 = *a3 & 0x3FFFFFF;
    v12 = v10 > v11;
    if (v10 <= v11)
      v13 = a3;
    else
      v13 = a2;
    if (v12)
      v8 = a3;
    v7 = v13;
  }
  v14 = sub_10022313C(a1, v8, v7);
  if (v14)
  {
    v15 = v14;
    result = 0;
    if (!a5)
      return result;
    goto LABEL_12;
  }
  if (v8 == v7)
  {
    if (v7)
      v17 = -5;
    else
      v17 = -27;
    v28 = 0;
    v29 = 0;
    qmemcpy((void *)sub_10029430C(&v28, 41), "vertex pointers coinside (or set to NULL)", 41);
    sub_100294B74(v17, &v28, "cvGraphAddEdgeByPtr", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2782);
  }
  v18 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(v18 + 96);
  if (!v15)
  {
    v19 = *(_DWORD *)(v18 + 40);
    v20 = *(int *)(v18 + 44);
    sub_10021F8B8(*(_QWORD *)(a1 + 112), 0);
    v21 = *(_QWORD *)(v18 + 48);
    v15 = *(_QWORD *)(v18 + 56);
    *(_QWORD *)(v18 + 96) = v15;
    if (v15 + v20 <= v21)
    {
      v23 = v15;
      do
      {
        v22 = v23 + v20;
        *(_DWORD *)v23 = v19 | 0x80000000;
        *(_QWORD *)(v23 + 8) = v23 + v20;
        ++v19;
        v24 = v23 + v20 + v20;
        v23 += v20;
      }
      while (v24 <= v21);
    }
    else
    {
      v22 = v15;
    }
    *(_QWORD *)(v22 - v20 + 8) = 0;
    *(_DWORD *)(**(_QWORD **)(v18 + 88) + 20) += v19 - *(_DWORD *)(v18 + 40);
    *(_DWORD *)(v18 + 40) = v19;
    *(_QWORD *)(v18 + 56) = v21;
  }
  *(_QWORD *)(v18 + 96) = *(_QWORD *)(v15 + 8);
  *(_DWORD *)v15 &= 0x3FFFFFFu;
  ++*(_DWORD *)(v18 + 104);
  *(_QWORD *)(v15 + 24) = v8;
  *(_QWORD *)(v15 + 32) = v7;
  *(_QWORD *)(v15 + 8) = *((_QWORD *)v8 + 1);
  *(_QWORD *)(v15 + 16) = *((_QWORD *)v7 + 1);
  *((_QWORD *)v7 + 1) = v15;
  *((_QWORD *)v8 + 1) = v15;
  v25 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 44);
  v26 = (v25 - 40);
  if (a4)
  {
    if ((int)v26 >= 1)
      memcpy((void *)(v15 + 40), (const void *)(a4 + 40), v26);
    v27 = *(float *)(a4 + 4);
  }
  else
  {
    v27 = 1.0;
    if ((int)v26 >= 1)
      bzero((void *)(v15 + 40), (v25 - 40));
  }
  *(float *)(v15 + 4) = v27;
  result = 1;
  if (a5)
LABEL_12:
    *a5 = v15;
  return result;
}

void sub_1002234BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_1002234EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v35;
  _DWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;

  v2 = a2;
  if (!a1 || (*(_DWORD *)a1 & 0xFFFF3000) != 0x42981000)
  {
    v36 = 0;
    v37 = 0;
    qmemcpy((void *)sub_10029430C(&v36, 21), "Invalid graph pointer", 21);
    sub_100294B74(-5, (uint64_t *)&v36, "cvCloneGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 3262);
  }
  if (!a2)
  {
    v2 = *(_QWORD *)(a1 + 72);
    if (!v2)
    {
      v36 = 0;
      v37 = 0;
      v4 = sub_10029430C(&v36, 20);
      *(_DWORD *)(v4 + 16) = 1919251566;
      *(_OWORD *)v4 = *(_OWORD *)"NULL storage pointer";
      sub_100294B74(-27, (uint64_t *)&v36, "cvCloneGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 3268);
    }
  }
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 44);
  LODWORD(v6) = *(_DWORD *)(a1 + 44);
  v7 = (_DWORD *)sub_1001D450C(4 * *(int *)(a1 + 40));
  v8 = (_QWORD *)sub_1001D450C(8 * *(int *)(a1 + 40));
  v9 = sub_100222EAC(*(_DWORD *)a1, *(_DWORD *)(a1 + 4), v6, v5, v2);
  memcpy(v9 + 3600, (const void *)(a1 + 14400), *(int *)(a1 + 4) - 120);
  v40 = 0u;
  v41 = 0u;
  v38 = 64;
  v39 = a1;
  v10 = *(uint64_t **)(a1 + 88);
  v35 = v5;
  if (v10)
  {
    v11 = *v10;
    v12 = (char *)v10[3];
    *((_QWORD *)&v40 + 1) = v12;
    v13 = *(int *)(a1 + 44);
    v14 = *(_QWORD *)(v11 + 24) + (*(int *)(v11 + 20) - 1) * v13;
    v42 = *((_DWORD *)v10 + 4);
    *(_QWORD *)&v40 = v10;
    *(_QWORD *)&v41 = v12;
    v15 = &v12[*((int *)v10 + 5) * (uint64_t)(int)v13];
    *((_QWORD *)&v41 + 1) = v15;
    v6 = (int)v6;
    v43 = v14;
    if (*(int *)(a1 + 40) < 1)
      goto LABEL_17;
  }
  else
  {
    v15 = 0;
    v12 = 0;
    v42 = 0;
    v40 = 0uLL;
    v41 = 0uLL;
    v6 = (int)v6;
    v43 = 0;
    if (*(int *)(a1 + 40) < 1)
      goto LABEL_17;
  }
  v16 = 0;
  v17 = 0;
  do
  {
    if ((*(_DWORD *)v12 & 0x80000000) == 0)
    {
      v36 = 0;
      sub_100222F84((uint64_t)v9, (uint64_t)v12, &v36);
      v18 = *(_DWORD *)v12;
      v19 = v36;
      *v36 = *(_DWORD *)v12;
      v7[v17] = v18;
      *(_DWORD *)v12 = v17;
      v8[v17++] = v19;
    }
    v12 += v6;
    *((_QWORD *)&v40 + 1) = v12;
    if (v12 >= v15)
    {
      v10 = (uint64_t *)v10[1];
      v12 = (char *)v10[3];
      *(_QWORD *)&v40 = v10;
      *((_QWORD *)&v40 + 1) = v12;
      *(_QWORD *)&v41 = v12;
      v15 = &v12[*(int *)(a1 + 44) * (uint64_t)*((int *)v10 + 5)];
      *((_QWORD *)&v41 + 1) = v15;
    }
    ++v16;
  }
  while (v16 < *(_DWORD *)(a1 + 40));
LABEL_17:
  sub_10021EEC4(*(_QWORD *)(a1 + 112), (uint64_t)&v38, 0);
  v20 = *(_QWORD *)(a1 + 112);
  if (*(int *)(v20 + 40) >= 1)
  {
    v21 = 0;
    v22 = *((_QWORD *)&v40 + 1);
    do
    {
      if ((*(_DWORD *)v22 & 0x80000000) == 0)
      {
        v36 = 0;
        sub_100223234((uint64_t)v9, (_DWORD *)v8[**(int **)(v22 + 24)], (_DWORD *)v8[**(int **)(v22 + 32)], v22, (uint64_t *)&v36);
        *v36 = *(_DWORD *)v22;
        v22 = *((_QWORD *)&v40 + 1);
      }
      v22 += v35;
      *((_QWORD *)&v40 + 1) = v22;
      if (v22 >= *((_QWORD *)&v41 + 1))
      {
        v23 = *(_QWORD *)(v40 + 8);
        v22 = *(_QWORD *)(v23 + 24);
        *(_QWORD *)&v40 = v23;
        *((_QWORD *)&v40 + 1) = v22;
        *(_QWORD *)&v41 = *(_QWORD *)(v23 + 24);
        *((_QWORD *)&v41 + 1) = v41 + *(int *)(v39 + 44) * (uint64_t)*(int *)(v23 + 20);
      }
      ++v21;
      v20 = *(_QWORD *)(a1 + 112);
    }
    while (v21 < *(_DWORD *)(v20 + 40));
  }
  v40 = 0u;
  v41 = 0u;
  v38 = 64;
  v39 = a1;
  v24 = *(uint64_t **)(a1 + 88);
  if (v24)
  {
    v25 = *v24;
    v26 = (char *)v24[3];
    *((_QWORD *)&v40 + 1) = v26;
    v27 = *(int *)(a1 + 44);
    v28 = *(_QWORD *)(v25 + 24) + (*(int *)(v25 + 20) - 1) * v27;
    v42 = *((_DWORD *)v24 + 4);
    *(_QWORD *)&v40 = v24;
    *(_QWORD *)&v41 = v26;
    v29 = &v26[*((int *)v24 + 5) * (uint64_t)(int)v27];
    *((_QWORD *)&v41 + 1) = v29;
    v43 = v28;
    v30 = *(_DWORD *)(v20 + 40);
    if (v30 < 1)
      goto LABEL_34;
  }
  else
  {
    v26 = 0;
    v29 = 0;
    v42 = 0;
    v40 = 0uLL;
    v41 = 0uLL;
    v43 = 0;
    v30 = *(_DWORD *)(v20 + 40);
    if (v30 < 1)
      goto LABEL_34;
  }
  v31 = 0;
  v32 = 0;
  do
  {
    if ((*(_DWORD *)v26 & 0x80000000) == 0)
    {
      v33 = v7[v32++];
      *(_DWORD *)v26 = v33;
    }
    v26 += v6;
    *((_QWORD *)&v40 + 1) = v26;
    if (v26 >= v29)
    {
      v24 = (uint64_t *)v24[1];
      v26 = (char *)v24[3];
      *(_QWORD *)&v40 = v24;
      *((_QWORD *)&v40 + 1) = v26;
      *(_QWORD *)&v41 = v24[3];
      v29 = (char *)(v41 + *(int *)(a1 + 44) * (uint64_t)*((int *)v24 + 5));
      *((_QWORD *)&v41 + 1) = v29;
    }
    ++v31;
  }
  while (v31 < v30);
LABEL_34:
  j__free(v7);
  j__free(v8);
  if ((int)variable initialization expression of PointTrail.isStarted() >= 0)
    return v9;
  else
    return 0;
}

void sub_100223970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_1002239A0(uint64_t a1, int a2, uint64_t a3)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v13[2];

  if (!a3)
  {
    v13[0] = 0;
    v13[1] = 0;
    v5 = sub_10029430C(v13, 20);
    *(_DWORD *)(v5 + 16) = 1919251566;
    *(_OWORD *)v5 = *(_OWORD *)"NULL storage pointer";
    sub_100294B74(-27, v13, "cvTreeToNodeSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 3346);
  }
  v4 = sub_10021E968(0, a2, 8uLL, a3);
  if (a1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = v6 + 1;
      if (v7)
        v9 = v8 == 0x7FFFFFFF;
      else
        v9 = 1;
      if (v9)
      {
        v8 = (v6 & (v6 >> 31)) - 1;
        v10 = a1;
        while (1)
        {
          v7 = *(_QWORD *)(v10 + 16);
          if (v7)
            break;
          v10 = *(_QWORD *)(v10 + 24);
          if (v6-- <= 0)
          {
            v7 = 0;
            goto LABEL_6;
          }
        }
      }
      else
      {
LABEL_6:
        v6 = v8;
      }
      v13[0] = a1;
      sub_10021FC6C((uint64_t)v4, v13);
      v13[0] = 0;
      a1 = v7;
    }
    while (v7);
  }
  return v4;
}

void sub_100223AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100223AFC(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (!result || !a2)
  {
    v3 = 0;
    v4 = 0;
    sub_100294B74(-27, &v3, "cvInitTreeNodeIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 3443);
  }
  if (a3 < 0)
  {
    v3 = 0;
    v4 = 0;
    sub_100294B74(-211, &v3, "cvInitTreeNodeIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 3446);
  }
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  return result;
}

void sub_100223BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100223BD0(uint64_t *a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9[2];

  if (!a1)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_10029430C(v9, 21), "NULL iterator pointer", 21);
    sub_100294B74(-27, v9, "cvNextTreeNode", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 3462);
  }
  result = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (*a1)
  {
    v4 = *(_QWORD *)(result + 32);
    if (v4 && (v5 = v3 + 1, v3 + 1 < *((_DWORD *)a1 + 3)))
    {
LABEL_11:
      *a1 = v4;
      *((_DWORD *)a1 + 2) = v5;
    }
    else
    {
      v5 = (v3 & (v3 >> 31)) - 1;
      v6 = *a1;
      while (!*(_QWORD *)(v6 + 16))
      {
        v6 = *(_QWORD *)(v6 + 24);
        v7 = __OFSUB__(v3--, 1);
        if (v3 < 0 != v7)
        {
          v4 = 0;
          goto LABEL_11;
        }
      }
      if (*((_DWORD *)a1 + 3))
        v8 = *(_QWORD *)(v6 + 16);
      else
        v8 = 0;
      *a1 = v8;
      *((_DWORD *)a1 + 2) = v3;
    }
  }
  else
  {
    *a1 = 0;
    *((_DWORD *)a1 + 2) = v3;
  }
  return result;
}

void sub_100223CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100223CF8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  if (!result || !a2)
  {
    v5[0] = 0;
    v5[1] = 0;
    sub_100294B74(-27, v5, "cvInsertNodeIntoTree", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 3392);
  }
  if (a2 == a3)
    v3 = 0;
  else
    v3 = a2;
  *(_QWORD *)(result + 24) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 16) = v4;
  if (v4)
    *(_QWORD *)(v4 + 8) = result;
  *(_QWORD *)(a2 + 32) = result;
  return result;
}

void sub_100223D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_100223D9C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_100008F3C();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_100008FF8();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_100223F38(float32x2_t *a1, unint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, float32x4_t *a6, unint64_t a7, signed int a8, unsigned int a9, int a10)
{
  float32x4_t *v11;
  float32x2_t *v13;
  int v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  float *v19;
  double *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  float32x2_t *v24;
  uint64_t v25;
  float *v26;
  double v27;
  uint64_t v28;
  float32x2_t *v29;
  float32x4_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float *v39;
  unint64_t v40;
  float v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  float32x2_t *v48;
  char *v49;
  uint64_t v50;
  float32x4_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  float32x4_t *v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  float32x4_t *v62;
  float32x4_t *v63;
  uint64_t v64;
  float32x4_t v65;
  float64x2_t v66;
  float32x4_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  float *v75;
  float v76;
  double v77;
  float v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  BOOL v86;
  float v87;
  float v88;
  float v89;
  double v90;
  double v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  float v96;
  float32_t v97;
  float v98;
  unint64_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t *v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t *v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  int v128;
  uint64_t v129;
  float32x2_t *v130;
  uint64_t v131;
  float *v132;
  double v133;
  uint64_t v134;
  float32x2_t *v135;
  float32x4_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float *v145;
  unint64_t v146;
  float v147;
  uint64_t v148;
  double v149;
  float *v150;
  unint64_t v151;
  float v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  float64x2_t *v162;
  float32x4_t *v163;
  uint64_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  uint64_t v169;
  float *v170;
  double *v171;
  double v172;
  float v173;
  unsigned int v174;
  unint64_t v175;
  float32x4_t *v176;
  char *v177;
  uint64_t v178;
  unsigned int v179;
  int v180;
  unint64_t v181;
  uint64_t v182;
  _BYTE v183[32];
  uint64_t v184;

  v11 = a3;
  v13 = a1;
  if (a6)
  {
    if (a10 >= 0)
      v14 = a10;
    else
      v14 = a9;
    sub_1002248F8(a1, a2, a3, a6, a7, a8, a9, v14, 1.17549435e-38, 0.00000023842);
    return;
  }
  if (a9 >= 0x89)
    operator new[]();
  if (a8 <= 30)
    v15 = 30;
  else
    v15 = a8;
  v179 = v15;
  v16 = a9 - 1;
  if ((int)a9 >= 1)
  {
    v17 = a2 >> 2;
    if (a8 < 1)
    {
      bzero(v183, 8 * a9);
      if (a9 < 2)
        goto LABEL_104;
      v176 = v11;
      v18 = a8;
    }
    else
    {
      v18 = a8;
      if (a8 >= 8)
      {
        v23 = 0;
        v24 = a1 + 2;
        v25 = 4 * v17;
        v26 = (float *)((char *)a1 + ((4 * a8) & 0x3FFFFFFE0));
        do
        {
          v27 = 0.0;
          v28 = a8 & 0xFFFFFFF8;
          v29 = v24;
          do
          {
            v30 = *(float32x4_t *)v29[-2].f32;
            v31 = vcvtq_f64_f32(*(float32x2_t *)v30.f32);
            v32 = vcvt_hight_f64_f32(v30);
            v33 = vcvtq_f64_f32(*v29);
            v34 = vcvt_hight_f64_f32(*(float32x4_t *)v29->f32);
            v35 = vmulq_f64(v32, v32);
            v36 = vmulq_f64(v31, v31);
            v37 = vmulq_f64(v34, v34);
            v38 = vmulq_f64(v33, v33);
            v27 = v27
                + v36.f64[0]
                + v36.f64[1]
                + v35.f64[0]
                + v35.f64[1]
                + v38.f64[0]
                + v38.f64[1]
                + v37.f64[0]
                + v37.f64[1];
            v29 += 4;
            v28 -= 8;
          }
          while (v28);
          if (a8 != (unint64_t)(a8 & 0xFFFFFFF8))
          {
            v39 = v26;
            v40 = a8 - (unint64_t)(a8 & 0xFFFFFFF8);
            do
            {
              v41 = *v39++;
              v27 = v27 + v41 * v41;
              --v40;
            }
            while (v40);
          }
          *(double *)&v183[8 * v23++] = v27;
          v24 = (float32x2_t *)((char *)v24 + v25);
          v26 = (float *)((char *)v26 + v25);
        }
        while (v23 != a9);
      }
      else
      {
        v19 = (float *)&a1[1] + 1;
        v20 = (double *)v183;
        v21 = a9;
        do
        {
          v22 = *(v19 - 3) * *(v19 - 3) + 0.0;
          if (a8 != 1)
          {
            v22 = v22 + *(v19 - 2) * *(v19 - 2);
            if (a8 != 2)
            {
              v22 = v22 + *(v19 - 1) * *(v19 - 1);
              if (a8 != 3)
              {
                v22 = v22 + *v19 * *v19;
                if (a8 != 4)
                {
                  v22 = v22 + v19[1] * v19[1];
                  if (a8 != 5)
                  {
                    v22 = v22 + v19[2] * v19[2];
                    if (a8 != 6)
                      v22 = v22 + v19[3] * v19[3];
                  }
                }
              }
            }
          }
          *v20++ = v22;
          v19 += v17;
          --v21;
        }
        while (v21);
      }
      v16 = a9 - 1;
      if ((int)a9 <= 1)
      {
        v128 = 0;
        if (a8 >= 8uLL)
        {
LABEL_77:
          v129 = 0;
          v130 = v13 + 2;
          v131 = 4 * v17;
          v132 = (float *)((char *)v13 + ((4 * v18) & 0x3FFFFFFE0));
          do
          {
            v133 = 0.0;
            v134 = v18 & 0xFFFFFFF8;
            v135 = v130;
            do
            {
              v136 = *(float32x4_t *)v135[-2].f32;
              v137 = vcvtq_f64_f32(*(float32x2_t *)v136.f32);
              v138 = vcvt_hight_f64_f32(v136);
              v139 = vcvtq_f64_f32(*v135);
              v140 = vcvt_hight_f64_f32(*(float32x4_t *)v135->f32);
              v141 = vmulq_f64(v138, v138);
              v142 = vmulq_f64(v137, v137);
              v143 = vmulq_f64(v140, v140);
              v144 = vmulq_f64(v139, v139);
              v133 = v133
                   + v142.f64[0]
                   + v142.f64[1]
                   + v141.f64[0]
                   + v141.f64[1]
                   + v144.f64[0]
                   + v144.f64[1]
                   + v143.f64[0]
                   + v143.f64[1];
              v135 += 4;
              v134 -= 8;
            }
            while (v134);
            if (v18 != (v18 & 0xFFFFFFF8))
            {
              v145 = v132;
              v146 = v18 - (v18 & 0xFFFFFFF8);
              do
              {
                v147 = *v145++;
                v133 = v133 + v147 * v147;
                --v146;
              }
              while (v146);
            }
            *(double *)&v183[8 * v129++] = sqrt(v133);
            v130 = (float32x2_t *)((char *)v130 + v131);
            v132 = (float *)((char *)v132 + v131);
          }
          while (v129 != a9);
LABEL_90:
          if (v128)
          {
            v182 = v16;
LABEL_93:
            v153 = 0;
            v154 = 1;
            while (1)
            {
              v155 = v153 + 1;
              if (v153 + 1 < (int)a9)
                break;
              v157 = v153;
              if (v153 != v153)
                goto LABEL_103;
LABEL_94:
              ++v154;
              v153 = v155;
              if (v155 == v182)
                goto LABEL_104;
            }
            v156 = v154;
            v157 = v153;
            do
            {
              if (*(double *)&v183[8 * v157] < *(double *)&v183[8 * v156])
                v157 = v156;
              ++v156;
            }
            while (a9 != v156);
            if (v153 == v157)
              goto LABEL_94;
LABEL_103:
            v158 = 8 * v153;
            v159 = 8 * v157;
            v160 = *(_QWORD *)&v183[v158];
            *(_QWORD *)&v183[v158] = *(_QWORD *)&v183[v159];
            *(_QWORD *)&v183[v159] = v160;
            goto LABEL_94;
          }
LABEL_104:
          if (a9 >= 8)
          {
            v161 = a9 & 0xF8;
            v162 = (float64x2_t *)&v184;
            v163 = v11 + 1;
            v164 = a9 & 0xFFFFFFF8;
            do
            {
              v166 = v162[-2];
              v165 = v162[-1];
              v168 = *v162;
              v167 = v162[1];
              v162 += 4;
              v163[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v166), v165);
              *v163 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v168), v167);
              v163 += 2;
              v164 -= 8;
            }
            while (v164);
            if (v161 == a9)
              return;
          }
          else
          {
            v161 = 0;
          }
          v169 = a9 - v161;
          v170 = &v11->f32[v161];
          v171 = (double *)&v183[8 * v161];
          do
          {
            v172 = *v171++;
            v173 = v172;
            *v170++ = v173;
            --v169;
          }
          while (v169);
          return;
        }
LABEL_86:
        v148 = 0;
        do
        {
          v149 = 0.0;
          v150 = (float *)v13;
          v151 = v18;
          do
          {
            v152 = *v150++;
            v149 = v149 + v152 * v152;
            --v151;
          }
          while (v151);
          *(double *)&v183[8 * v148++] = sqrt(v149);
          v13 = (float32x2_t *)((char *)v13 + 4 * v17);
        }
        while (v148 != a9);
        goto LABEL_90;
      }
      v176 = a3;
    }
    v42 = 0;
    v43 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v181 = 4 * v18 + (a2 & 0xFFFFFFFFFFFFFFFCLL);
    v44 = v18 & 0xFFFFFFF8;
    v175 = v17;
    v45 = 4 * v17;
    v178 = (uint64_t)&v13[2] + 4 * v17;
    v177 = (char *)v13 + 4 * v17;
    v174 = v16;
    v182 = v16;
    do
    {
      v180 = v42;
      v46 = 0;
      v47 = 0;
      v48 = v13;
      v49 = v177;
      v50 = v178;
      v51 = (float32x4_t *)&v13[2];
      v52 = 1;
      do
      {
        v53 = v46 + 1;
        if (v46 + 1 < (int)a9)
        {
          v54 = 0;
          v55 = v49;
          v56 = (float32x4_t *)v50;
          v57 = v52;
          while (1)
          {
            if (a8 < 1)
            {
              v61 = 0.0;
              goto LABEL_53;
            }
            if (v18 < 8)
              break;
            v61 = 0.0;
            v62 = v56;
            v63 = v51;
            v64 = v18 & 0xFFFFFFF8;
            do
            {
              v65 = v63[-1];
              v66 = vcvtq_f64_f32(*(float32x2_t *)v65.f32);
              v67 = v62[-1];
              v68 = vmulq_f64(vcvt_hight_f64_f32(v65), vcvt_hight_f64_f32(v67));
              v69 = vmulq_f64(v66, vcvtq_f64_f32(*(float32x2_t *)v67.f32));
              v70 = vmulq_f64(vcvt_hight_f64_f32(*v63), vcvt_hight_f64_f32(*v62));
              v71 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v63->f32), vcvtq_f64_f32(*(float32x2_t *)v62->f32));
              v61 = v61
                  + v69.f64[0]
                  + v69.f64[1]
                  + v68.f64[0]
                  + v68.f64[1]
                  + v71.f64[0]
                  + v71.f64[1]
                  + v70.f64[0]
                  + v70.f64[1];
              v63 += 2;
              v62 += 2;
              v64 -= 8;
            }
            while (v64);
            v60 = v18 & 0xFFFFFFF8;
            if (v18 != v44)
              goto LABEL_51;
LABEL_53:
            v79 = *(double *)&v183[8 * v46];
            v80 = *(double *)&v183[8 * v57];
            if (fabs(v61) <= sqrt(v79 * v80) * 0.000000238418579)
              goto LABEL_43;
            v81 = v61 + v61;
            v82 = v79 - v80;
            v83 = fabs(v81);
            v84 = vabdd_f64(v79, v80);
            if (v83 <= v84)
            {
              v85 = 0.0;
              if (v82 != 0.0)
                v85 = v84 * sqrt(v83 / v84 * (v83 / v84) + 1.0);
            }
            else
            {
              v85 = v83 * sqrt(v84 / v83 * (v84 / v83) + 1.0);
            }
            v86 = v82 < 0.0;
            v87 = sqrt((v85 - v82) * 0.5 / v85);
            v88 = v81 / (v85 * v87 + v85 * v87);
            v89 = sqrt((v82 + v85) / (v85 + v85));
            v91 = v85 * v89 + v85 * v89;
            v90 = v81 / v91;
            *(float *)&v91 = v90;
            if (v86)
              *(float *)&v90 = v88;
            else
              *(float *)&v90 = v89;
            if (v86)
              v92 = v87;
            else
              v92 = *(float *)&v91;
            if (a8 <= 0)
            {
              v58 = 0.0;
              v59 = 0.0;
            }
            else
            {
              *(float *)&v91 = -v92;
              v59 = 0.0;
              if (v18 >= 8
                && ((char *)v13 + v43 * v46 >= (char *)v13 + v181 + v43 * v46 + v43 * v54
                 || (char *)v13 + v43 + v43 * v46 + v43 * v54 >= (char *)&v13->f32[v18] + v43 * v46))
              {
                v99 = 0;
                v100 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v90, 0);
                v101 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v91, 0);
                v58 = 0.0;
                do
                {
                  v102 = &v51[v99 / 0x10];
                  v103 = v51[v99 / 0x10 - 1];
                  v104 = v51[v99 / 0x10];
                  v105 = &v56[v99 / 0x10];
                  v106 = v56[v99 / 0x10 - 1];
                  v107 = v56[v99 / 0x10];
                  v108 = vmlaq_f32(vmulq_n_f32(v106, v92), v103, v100);
                  v109 = vmlaq_f32(vmulq_n_f32(v107, v92), v104, v100);
                  v110 = vmlaq_f32(vmulq_n_f32(v106, *(float *)&v90), v103, v101);
                  v111 = vmlaq_f32(vmulq_n_f32(v107, *(float *)&v90), v104, v101);
                  v102[-1] = v108;
                  *v102 = v109;
                  v105[-1] = v110;
                  *v105 = v111;
                  v112 = vcvtq_f64_f32(*(float32x2_t *)v108.f32);
                  v113 = vcvt_hight_f64_f32(v108);
                  v114 = vcvtq_f64_f32(*(float32x2_t *)v109.f32);
                  v115 = vcvt_hight_f64_f32(v109);
                  v116 = vmulq_f64(v113, v113);
                  v117 = vmulq_f64(v112, v112);
                  v118 = vmulq_f64(v115, v115);
                  v119 = vmulq_f64(v114, v114);
                  v120 = vcvtq_f64_f32(*(float32x2_t *)v110.f32);
                  v121 = vcvt_hight_f64_f32(v110);
                  v122 = vcvtq_f64_f32(*(float32x2_t *)v111.f32);
                  v123 = vcvt_hight_f64_f32(v111);
                  v124 = vmulq_f64(v121, v121);
                  v125 = vmulq_f64(v120, v120);
                  v126 = vmulq_f64(v123, v123);
                  v127 = vmulq_f64(v122, v122);
                  v59 = v59
                      + v125.f64[0]
                      + v125.f64[1]
                      + v124.f64[0]
                      + v124.f64[1]
                      + v127.f64[0]
                      + v127.f64[1]
                      + v126.f64[0]
                      + v126.f64[1];
                  v58 = v58
                      + v117.f64[0]
                      + v117.f64[1]
                      + v116.f64[0]
                      + v116.f64[1]
                      + v119.f64[0]
                      + v119.f64[1]
                      + v118.f64[0]
                      + v118.f64[1];
                  v99 += 32;
                }
                while (((4 * v18) & 0x3FFFFFFE0) != v99);
                v93 = v18 & 0xFFFFFFF8;
                if (v18 == v44)
                  goto LABEL_42;
              }
              else
              {
                v93 = 0;
                v58 = 0.0;
              }
              do
              {
                v94 = v93;
                v95 = v48->f32[v93];
                v96 = *(float *)&v55[4 * v93];
                v97 = (float)(v92 * v96) + (float)(*(float *)&v90 * v95);
                v98 = (float)(*(float *)&v90 * v96) + (float)(*(float *)&v91 * v95);
                v48->f32[v94] = v97;
                *(float *)&v55[v94 * 4] = v98;
                v58 = v58 + v97 * v97;
                v59 = v59 + v98 * v98;
                ++v93;
              }
              while (v18 != v93);
            }
LABEL_42:
            *(double *)&v183[8 * v46] = v58;
            *(double *)&v183[8 * v57] = v59;
            v47 = 1;
LABEL_43:
            ++v57;
            ++v54;
            v56 = (float32x4_t *)((char *)v56 + v45);
            v55 += v45;
            if (v57 == a9)
              goto LABEL_38;
          }
          v60 = 0;
          v61 = 0.0;
LABEL_51:
          v72 = v18 - v60;
          v73 = 4 * v60;
          v74 = (float *)&v55[4 * v60];
          v75 = (float *)((char *)v48 + v73);
          do
          {
            v76 = *v75++;
            v77 = v76;
            v78 = *v74++;
            v61 = v61 + v77 * v78;
            --v72;
          }
          while (v72);
          goto LABEL_53;
        }
LABEL_38:
        ++v52;
        v51 = (float32x4_t *)((char *)v51 + v45);
        v50 += v45;
        v49 += v45;
        v48 = (float32x2_t *)((char *)v48 + v45);
        ++v46;
      }
      while (v53 != v182);
      v42 = v180 + 1;
    }
    while ((v47 & (v180 + 1 < v179)) != 0);
    if (a8 <= 0)
    {
      bzero(v183, 8 * a9);
      v11 = v176;
      goto LABEL_93;
    }
    v128 = 1;
    v11 = v176;
    v17 = v175;
    v16 = v174;
    if (v18 >= 8)
      goto LABEL_77;
    goto LABEL_86;
  }
}

void sub_1002248F8(float32x2_t *a1, unint64_t a2, float32x4_t *a3, float32x4_t *a4, unint64_t a5, unsigned int a6, unsigned int a7, int a8, double a9, float a10)
{
  float32x2_t *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  float32x4_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *v22;
  uint64_t v23;
  double v24;
  size_t v25;
  uint64_t v26;
  float32x2_t *v27;
  float32x4_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float *v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t *v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  float32x2_t *v46;
  float32x4_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float *v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float32x4_t *v60;
  float32x4_t *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  float32x4_t *v69;
  uint64_t v70;
  float32x2_t *v71;
  float32x4_t *v72;
  float32x4_t *v73;
  uint64_t v74;
  uint64_t v75;
  float32x4_t *v76;
  uint64_t v77;
  float32x4_t *v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  float32x4_t *v82;
  float32x4_t *v83;
  uint64_t v84;
  float32x4_t v85;
  float64x2_t v86;
  float32x4_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float *v92;
  float *v93;
  uint64_t v94;
  float v95;
  double v96;
  float v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  int v105;
  BOOL v106;
  float v107;
  float v108;
  float v109;
  double v110;
  float32x4_t v111;
  float v112;
  double v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  float v117;
  float v118;
  float32_t v119;
  float v120;
  unint64_t v121;
  float32x4_t *v122;
  float32x4_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  float32x4_t v127;
  float32x4_t v128;
  unint64_t v129;
  float32x4_t v130;
  float32x4_t v131;
  uint64_t v132;
  float v133;
  float v134;
  unint64_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t *v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t *v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  float32x2_t *v168;
  unint64_t v169;
  uint64_t v170;
  double v171;
  uint64_t v172;
  float32x2_t *v173;
  float32x4_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float *v183;
  uint64_t v184;
  float v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  __int32 *v190;
  unint64_t v191;
  uint64_t v192;
  float32x2_t *v193;
  float32x4_t *v194;
  uint64_t v195;
  uint64_t v196;
  __int128 *v197;
  float32x2_t *v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int *v205;
  int *v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  unint64_t v210;
  float32x4_t *v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  BOOL v215;
  __int128 *v216;
  uint64_t v217;
  __int128 *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  int *v222;
  int *v223;
  uint64_t v224;
  int v225;
  __int128 *v226;
  uint64_t v227;
  float32x2_t *v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  float64x2_t *v233;
  float32x4_t *v234;
  uint64_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float *v240;
  uint64_t v241;
  double *v242;
  double v243;
  float v244;
  uint64_t v245;
  float v246;
  unint64_t v247;
  float v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  float *v255;
  double v256;
  unsigned int v257;
  unint64_t v258;
  unint64_t v259;
  float *v260;
  uint64_t v261;
  float v262;
  uint64_t v263;
  float32x2_t *v264;
  uint64_t v265;
  double v266;
  unint64_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  double v274;
  float v275;
  uint64_t v276;
  float v277;
  float v278;
  uint64_t v279;
  unint64_t v280;
  float32x4_t *v281;
  float32x4_t v282;
  unint64_t v283;
  float64x2_t v284;
  float32x2_t *v285;
  float32x2_t v286;
  float32x2_t v287;
  float32x2_t v288;
  float32x2_t v289;
  uint64_t v290;
  float32x2_t *v291;
  uint64_t v292;
  double v293;
  unint64_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  double v301;
  float v302;
  uint64_t v303;
  float v304;
  float v305;
  uint64_t v306;
  unint64_t v307;
  float32x4_t *v308;
  float32x4_t v309;
  unint64_t v310;
  float64x2_t v311;
  float32x2_t *v312;
  float32x2_t v313;
  float32x2_t v314;
  float32x2_t v315;
  float32x2_t v316;
  uint64_t v317;
  double v318;
  unint64_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  double v330;
  float v331;
  uint64_t v332;
  unint64_t v333;
  float32x4_t *v334;
  float32x4_t v335;
  unint64_t v340;
  unint64_t v341;
  float32x4_t *v342;
  uint64_t v343;
  uint64_t v344;
  float32x4_t *v345;
  unsigned int v346;
  int v347;
  __int32 *v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  float32x2_t *v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  float32x4_t *v362;
  uint64_t v363;
  size_t v364;
  uint64_t v365;
  size_t v366;
  unint64_t v367;
  unint64_t v368;
  int v370;
  _BYTE v371[32];
  uint64_t v372;

  v370 = a7;
  v13 = a1;
  v14 = (int)a7;
  if (a7 >= 0x89)
    operator new[]();
  v15 = a2 >> 2;
  if ((int)a6 <= 30)
    v16 = 30;
  else
    v16 = a6;
  v346 = v16;
  v340 = a5 >> 2;
  v341 = a2 >> 2;
  v17 = 4 * v15;
  v350 = a7 - 1;
  v18 = a4;
  if ((int)a7 < 1)
    goto LABEL_32;
  if (!a4)
  {
    if ((int)a6 <= 0)
    {
      bzero(v371, 8 * a7);
      v62 = v370;
      v357 = v13;
      if (v370 > 1)
        goto LABEL_33;
      goto LABEL_89;
    }
    v40 = 0;
    v41 = 0;
    v42 = a1 + 2;
    while (1)
    {
      if (a6 >= 8)
      {
        v44 = 0.0;
        v45 = a6 & 0xFFFFFFF8;
        v46 = v42;
        do
        {
          v47 = *(float32x4_t *)v46[-2].f32;
          v48 = vcvtq_f64_f32(*(float32x2_t *)v47.f32);
          v49 = vcvt_hight_f64_f32(v47);
          v50 = vcvtq_f64_f32(*v46);
          v51 = vcvt_hight_f64_f32(*(float32x4_t *)v46->f32);
          v52 = vmulq_f64(v49, v49);
          v53 = vmulq_f64(v48, v48);
          v54 = vmulq_f64(v51, v51);
          v55 = vmulq_f64(v50, v50);
          v44 = v44
              + v53.f64[0]
              + v53.f64[1]
              + v52.f64[0]
              + v52.f64[1]
              + v55.f64[0]
              + v55.f64[1]
              + v54.f64[0]
              + v54.f64[1];
          v46 += 4;
          v45 -= 8;
        }
        while (v45);
        v43 = a6 & 0xFFFFFFF8;
        if (v43 == a6)
          goto LABEL_21;
      }
      else
      {
        v43 = 0;
        v44 = 0.0;
      }
      v56 = (float *)a1 + v43 + v40;
      v57 = a6 - v43;
      do
      {
        v58 = *v56++;
        v44 = v44 + v58 * v58;
        --v57;
      }
      while (v57);
LABEL_21:
      *(double *)&v371[8 * v41++] = v44;
      v42 = (float32x2_t *)((char *)v42 + v17);
      v40 += v15;
      if (v41 == a7)
        goto LABEL_32;
    }
  }
  v19 = a5 & 0xFFFFFFFFFFFFFFFCLL;
  v367 = a5 & 0xFFFFFFFFFFFFFFFCLL;
  v363 = 4 * a7;
  v365 = a7;
  if ((int)a6 >= 1)
  {
    v20 = 0;
    v21 = 0;
    v360 = a6 & 0xFFFFFFF8;
    v22 = a1 + 2;
    while (1)
    {
      if (a6 >= 8)
      {
        v24 = 0.0;
        v26 = v360;
        v27 = v22;
        do
        {
          v28 = *(float32x4_t *)v27[-2].f32;
          v29 = vcvtq_f64_f32(*(float32x2_t *)v28.f32);
          v30 = vcvt_hight_f64_f32(v28);
          v31 = vcvtq_f64_f32(*v27);
          v32 = vcvt_hight_f64_f32(*(float32x4_t *)v27->f32);
          v33 = vmulq_f64(v30, v30);
          v34 = vmulq_f64(v29, v29);
          v35 = vmulq_f64(v32, v32);
          v36 = vmulq_f64(v31, v31);
          v24 = v24
              + v34.f64[0]
              + v34.f64[1]
              + v33.f64[0]
              + v33.f64[1]
              + v36.f64[0]
              + v36.f64[1]
              + v35.f64[0]
              + v35.f64[1];
          v27 += 4;
          v26 -= 8;
        }
        while (v26);
        v23 = v360;
        v25 = v363;
        if (v360 == a6)
          goto LABEL_10;
      }
      else
      {
        v23 = 0;
        v24 = 0.0;
        v25 = v363;
      }
      v37 = (float *)v13 + v23 + v20;
      v38 = a6 - v23;
      do
      {
        v39 = *v37++;
        v24 = v24 + v39 * v39;
        --v38;
      }
      while (v38);
LABEL_10:
      *(double *)&v371[8 * v21] = v24;
      bzero((char *)a4 + v19 * v21, v25);
      a4->i32[(v340 + 1) * v21++] = 1065353216;
      v22 = (float32x2_t *)((char *)v22 + v17);
      v20 += v341;
      v19 = v367;
      a7 = v370;
      if (v21 == v365)
        goto LABEL_32;
    }
  }
  bzero(v371, 8 * a7);
  v59 = v365;
  v60 = a4;
  v61 = a4;
  do
  {
    bzero(v60, v363);
    a7 = v370;
    v61->i32[0] = 1065353216;
    v61 = (float32x4_t *)((char *)v61 + v367 + 4);
    v60 = (float32x4_t *)((char *)v60 + v367);
    --v59;
  }
  while (v59);
LABEL_32:
  v62 = a7;
  v357 = v13;
  if ((int)a7 > 1)
  {
LABEL_33:
    v63 = 0;
    v356 = a5 & 0xFFFFFFFFFFFFFFFCLL;
    v64 = 4 * a6;
    v368 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v65 = a6 & 0xFFFFFFF8;
    v345 = (float32x4_t *)&v13[2];
    v344 = (uint64_t)&v13[2] + v17;
    v343 = (uint64_t)v13 + v17;
    v66 = 4 * v340;
    v342 = (float32x4_t *)((char *)v18 + 4 * v340);
    v348 = &v18->i32[v14];
    v349 = (uint64_t)v13 + v64;
    do
    {
      v347 = v63;
      v67 = 0;
      v68 = 0;
      v69 = v18;
      v70 = v343;
      v362 = v342;
      v71 = v13;
      v73 = (float32x4_t *)v344;
      v72 = v345;
      v74 = 1;
      do
      {
        v358 = v67 + 1;
        if (v67 + 1 < v14)
        {
          v75 = 0;
          v366 = (size_t)v13 + v368 * v67;
          v359 = v368 + v368 * v67;
          v361 = v349 + v368 * v67;
          v364 = (a2 & 0xFFFFFFFFFFFFFFFCLL) + v64 + v368 * v67;
          v355 = (uint64_t)v18 + v356 * v67;
          v351 = v356 + v356 * v67;
          v352 = v67;
          v353 = (unint64_t)v348 + v356 * v67;
          v354 = (a5 & 0xFFFFFFFFFFFFFFFCLL) + 4 * v14 + v356 * v67;
          v76 = v362;
          v77 = v70;
          v78 = v73;
          v79 = v74;
          while (1)
          {
            if ((int)a6 < 1)
            {
              v81 = 0.0;
              goto LABEL_50;
            }
            if (a6 < 8)
              break;
            v81 = 0.0;
            v82 = v78;
            v83 = v72;
            v84 = a6 & 0xFFFFFFF8;
            do
            {
              v85 = v83[-1];
              v86 = vcvtq_f64_f32(*(float32x2_t *)v85.f32);
              v87 = v82[-1];
              v88 = vmulq_f64(vcvt_hight_f64_f32(v85), vcvt_hight_f64_f32(v87));
              v89 = vmulq_f64(v86, vcvtq_f64_f32(*(float32x2_t *)v87.f32));
              v90 = vmulq_f64(vcvt_hight_f64_f32(*v83), vcvt_hight_f64_f32(*v82));
              v91 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v83->f32), vcvtq_f64_f32(*(float32x2_t *)v82->f32));
              v81 = v81
                  + v89.f64[0]
                  + v89.f64[1]
                  + v88.f64[0]
                  + v88.f64[1]
                  + v91.f64[0]
                  + v91.f64[1]
                  + v90.f64[0]
                  + v90.f64[1];
              v83 += 2;
              v82 += 2;
              v84 -= 8;
            }
            while (v84);
            v80 = a6 & 0xFFFFFFF8;
            if (v65 != a6)
              goto LABEL_48;
LABEL_50:
            v98 = *(double *)&v371[8 * v67];
            v99 = *(double *)&v371[8 * v79];
            if (fabs(v81) <= sqrt(v98 * v99) * a10)
              goto LABEL_40;
            v100 = v81 + v81;
            v101 = v98 - v99;
            v102 = fabs(v100);
            v103 = vabdd_f64(v98, v99);
            if (v102 <= v103)
            {
              v104 = 0.0;
              v105 = v370;
              if (v101 != 0.0)
                v104 = v103 * sqrt(v102 / v103 * (v102 / v103) + 1.0);
            }
            else
            {
              v104 = v102 * sqrt(v103 / v102 * (v103 / v102) + 1.0);
              v105 = v370;
            }
            v106 = v101 < 0.0;
            v107 = sqrt((v104 - v101) * 0.5 / v104);
            v108 = v100 / (v104 * v107 + v104 * v107);
            v109 = sqrt((v101 + v104) / (v104 + v104));
            *(double *)v111.i64 = v104 * v109 + v104 * v109;
            v110 = v100 / *(double *)v111.i64;
            v111.f32[0] = v110;
            if (v106)
              *(float *)&v110 = v108;
            else
              *(float *)&v110 = v109;
            if (v106)
              v112 = v107;
            else
              v112 = v111.f32[0];
            if ((int)a6 <= 0)
            {
              *(_QWORD *)&v371[8 * v67] = 0;
              *(_QWORD *)&v371[8 * v79] = 0;
              if (!v18)
                goto LABEL_39;
              goto LABEL_70;
            }
            v111.f32[0] = -v112;
            v113 = 0.0;
            if (a6 < 8
              || v366 < (unint64_t)v13 + v364 + v368 * v75 && (unint64_t)v13 + v359 + v368 * v75 < v361)
            {
              v114 = 0;
              v115 = 0.0;
              do
              {
LABEL_66:
                v116 = v114;
                v117 = v71->f32[v114];
                v118 = *(float *)(v77 + 4 * v114);
                v119 = (float)(v112 * v118) + (float)(*(float *)&v110 * v117);
                v120 = (float)(*(float *)&v110 * v118) + (float)(v111.f32[0] * v117);
                v71->f32[v116] = v119;
                *(float *)(v77 + v116 * 4) = v120;
                v115 = v115 + v119 * v119;
                v113 = v113 + v120 * v120;
                ++v114;
              }
              while (a6 != v114);
              goto LABEL_67;
            }
            v135 = 0;
            v136 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v110, 0);
            v137 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v111.f32, 0);
            v115 = 0.0;
            do
            {
              v138 = &v72[v135 / 0x10];
              v139 = v72[v135 / 0x10 - 1];
              v140 = v72[v135 / 0x10];
              v141 = &v78[v135 / 0x10];
              v142 = v78[v135 / 0x10 - 1];
              v143 = v78[v135 / 0x10];
              v144 = vmlaq_f32(vmulq_n_f32(v142, v112), v139, v136);
              v145 = vmlaq_f32(vmulq_n_f32(v143, v112), v140, v136);
              v146 = vmlaq_f32(vmulq_n_f32(v142, *(float *)&v110), v139, v137);
              v147 = vmlaq_f32(vmulq_n_f32(v143, *(float *)&v110), v140, v137);
              v138[-1] = v144;
              *v138 = v145;
              v141[-1] = v146;
              *v141 = v147;
              v148 = vcvtq_f64_f32(*(float32x2_t *)v144.f32);
              v149 = vcvt_hight_f64_f32(v144);
              v150 = vcvtq_f64_f32(*(float32x2_t *)v145.f32);
              v151 = vcvt_hight_f64_f32(v145);
              v152 = vmulq_f64(v149, v149);
              v153 = vmulq_f64(v148, v148);
              v154 = vmulq_f64(v151, v151);
              v155 = vmulq_f64(v150, v150);
              v156 = vcvtq_f64_f32(*(float32x2_t *)v146.f32);
              v157 = vcvt_hight_f64_f32(v146);
              v158 = vcvtq_f64_f32(*(float32x2_t *)v147.f32);
              v159 = vcvt_hight_f64_f32(v147);
              v160 = vmulq_f64(v157, v157);
              v161 = vmulq_f64(v156, v156);
              v162 = vmulq_f64(v159, v159);
              v163 = vmulq_f64(v158, v158);
              v113 = v113
                   + v161.f64[0]
                   + v161.f64[1]
                   + v160.f64[0]
                   + v160.f64[1]
                   + v163.f64[0]
                   + v163.f64[1]
                   + v162.f64[0]
                   + v162.f64[1];
              v115 = v115
                   + v153.f64[0]
                   + v153.f64[1]
                   + v152.f64[0]
                   + v152.f64[1]
                   + v155.f64[0]
                   + v155.f64[1]
                   + v154.f64[0]
                   + v154.f64[1];
              v135 += 32;
            }
            while ((v64 & 0x3FFFFFFE0) != v135);
            v114 = a6 & 0xFFFFFFF8;
            v105 = v370;
            if (v65 != a6)
              goto LABEL_66;
LABEL_67:
            *(double *)&v371[8 * v67] = v115;
            *(double *)&v371[8 * v79] = v113;
            if (!v18)
              goto LABEL_39;
LABEL_70:
            if (v105 >= 4)
            {
              v121 = 0;
              v122 = v69;
              v123 = v76;
              do
              {
                v111 = vsubq_f32(vmulq_n_f32(*v123, *(float *)&v110), vmulq_n_f32(*v122, v112));
                *v122 = vaddq_f32(vmulq_n_f32(*v122, *(float *)&v110), vmulq_n_f32(*v123, v112));
                ++v122;
                *v123++ = v111;
                v121 += 4;
              }
              while (v121 <= (v370 - 4));
              if ((int)v121 < v105)
              {
LABEL_76:
                v111.f32[0] = -v112;
                v124 = (int)v121;
                v125 = v14 - (int)v121;
                if (v125 < 4)
                  goto LABEL_236;
                v126 = 4 * (int)v121;
                v215 = v355 + 4 * v124 >= (unint64_t)v18 + v354 + v356 * v75;
                v18 = a4;
                v13 = v357;
                if (!v215)
                {
                  v18 = a4;
                  v67 = v352;
                  if ((unint64_t)a4 + v351 + v356 * v75 + v126 < v353)
                    goto LABEL_236;
                }
                v124 += v125 & 0xFFFFFFFFFFFFFFFCLL;
                v127 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v110, 0);
                v128 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v111.f32, 0);
                v129 = v125 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v130 = *(float32x4_t *)((char *)v69 + v126);
                  v131 = *(float32x4_t *)((char *)v76 + v126);
                  *(float32x4_t *)((char *)v69 + v126) = vmlaq_f32(vmulq_n_f32(v131, v112), v130, v127);
                  *(float32x4_t *)((char *)v76 + v126) = vmlaq_f32(vmulq_n_f32(v131, *(float *)&v110), v130, v128);
                  v126 += 16;
                  v129 -= 4;
                }
                while (v129);
                v13 = v357;
                if (v125 != (v125 & 0xFFFFFFFFFFFFFFFCLL))
                {
LABEL_236:
                  do
                  {
                    v132 = v124;
                    v133 = v69->f32[v124];
                    v134 = v76->f32[v124];
                    v69->f32[v132] = (float)(v112 * v134) + (float)(*(float *)&v110 * v133);
                    v76->f32[v132] = (float)(*(float *)&v110 * v134) + (float)(v111.f32[0] * v133);
                    ++v124;
                  }
                  while (v14 != v124);
                }
              }
            }
            else
            {
              LODWORD(v121) = 0;
              if (v105 > 0)
                goto LABEL_76;
            }
LABEL_39:
            v68 = 1;
LABEL_40:
            ++v79;
            ++v75;
            v78 = (float32x4_t *)((char *)v78 + v17);
            v77 += v17;
            v76 = (float32x4_t *)((char *)v76 + v66);
            if (v79 == v62)
              goto LABEL_36;
          }
          v80 = 0;
          v81 = 0.0;
LABEL_48:
          v92 = (float *)v71 + v80;
          v93 = (float *)(v77 + 4 * v80);
          v94 = a6 - v80;
          do
          {
            v95 = *v92++;
            v96 = v95;
            v97 = *v93++;
            v81 = v81 + v96 * v97;
            --v94;
          }
          while (v94);
          goto LABEL_50;
        }
LABEL_36:
        ++v74;
        v72 = (float32x4_t *)((char *)v72 + v17);
        v73 = (float32x4_t *)((char *)v73 + v17);
        v71 = (float32x2_t *)((char *)v71 + v17);
        v70 += v17;
        v362 = (float32x4_t *)((char *)v362 + v66);
        v69 = (float32x4_t *)((char *)v69 + v66);
        v67 = v358;
      }
      while (v358 != v350);
      v63 = v347 + 1;
    }
    while ((v68 & (v347 + 1 < v346)) != 0);
  }
LABEL_89:
  v164 = v370;
  if (v370 < 1)
    goto LABEL_147;
  v165 = v341;
  if ((int)a6 > 0)
  {
    v166 = 0;
    v167 = 0;
    v168 = v13 + 2;
    v169 = v340;
    while (1)
    {
      if (a6 >= 8)
      {
        v171 = 0.0;
        v172 = a6 & 0xFFFFFFF8;
        v173 = v168;
        do
        {
          v174 = *(float32x4_t *)v173[-2].f32;
          v175 = vcvtq_f64_f32(*(float32x2_t *)v174.f32);
          v176 = vcvt_hight_f64_f32(v174);
          v177 = vcvtq_f64_f32(*v173);
          v178 = vcvt_hight_f64_f32(*(float32x4_t *)v173->f32);
          v179 = vmulq_f64(v176, v176);
          v180 = vmulq_f64(v175, v175);
          v181 = vmulq_f64(v178, v178);
          v182 = vmulq_f64(v177, v177);
          v171 = v171
               + v180.f64[0]
               + v180.f64[1]
               + v179.f64[0]
               + v179.f64[1]
               + v182.f64[0]
               + v182.f64[1]
               + v181.f64[0]
               + v181.f64[1];
          v173 += 4;
          v172 -= 8;
        }
        while (v172);
        v170 = a6 & 0xFFFFFFF8;
        if (v170 == a6)
          goto LABEL_92;
      }
      else
      {
        v170 = 0;
        v171 = 0.0;
      }
      v183 = (float *)v13 + v170 + v166;
      v184 = a6 - v170;
      do
      {
        v185 = *v183++;
        v171 = v171 + v185 * v185;
        --v184;
      }
      while (v184);
LABEL_92:
      *(double *)&v371[8 * v167++] = sqrt(v171);
      v168 = (float32x2_t *)((char *)v168 + v17);
      v166 += v341;
      if (v167 == v62)
        goto LABEL_102;
    }
  }
  bzero(v371, 8 * v62);
  v169 = v340;
  v165 = v341;
  v164 = v370;
LABEL_102:
  if (v164 >= 2)
  {
    v186 = 0;
    v187 = 0;
    v188 = 0;
    v189 = a5 & 0xFFFFFFFFFFFFFFFCLL;
    v190 = &v18->i32[v62];
    v191 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v192 = (uint64_t)v13 + 4 * a6;
    v193 = v13 + 2;
    v194 = v18 + 1;
    v195 = 4 * v169;
    v196 = 1;
    v197 = (__int128 *)&v18[1];
    v198 = v13 + 2;
    do
    {
      v199 = v188 + 1;
      if (v188 + 1 >= v14)
      {
        v201 = v188;
        if (v188 == v188)
          goto LABEL_104;
      }
      else
      {
        v200 = v196;
        v201 = v188;
        do
        {
          if (*(double *)&v371[8 * v201] < *(double *)&v371[8 * v200])
            v201 = v200;
          ++v200;
        }
        while (v62 != v200);
        if (v188 == v201)
          goto LABEL_104;
      }
      v202 = 8 * v201;
      v203 = *(_QWORD *)&v371[8 * v188];
      *(_QWORD *)&v371[8 * v188] = *(_QWORD *)&v371[v202];
      v18 = a4;
      *(_QWORD *)&v371[v202] = v203;
      if (a4)
      {
        if ((int)a6 >= 1)
        {
          if (a6 < 8
            || (unint64_t)v357 + v191 * v188 < v192 + v191 * v201
            && (unint64_t)v357 + v191 * v201 < v192 + v191 * v188)
          {
            v204 = 0;
            goto LABEL_119;
          }
          v226 = (__int128 *)((char *)v193 + v17 * v201);
          v227 = a6 & 0xFFFFFFF8;
          v228 = v198;
          do
          {
            v229 = *(_OWORD *)v228[-2].f32;
            v230 = *(_OWORD *)v228->f32;
            v231 = *v226;
            *(_OWORD *)v228[-2].f32 = *(v226 - 1);
            *(_OWORD *)v228->f32 = v231;
            *(v226 - 1) = v229;
            *v226 = v230;
            v228 += 4;
            v226 += 2;
            v227 -= 8;
          }
          while (v227);
          v204 = a6 & 0xFFFFFFF8;
          v18 = a4;
          if (v204 != a6)
          {
LABEL_119:
            v205 = (int *)v357 + v204 + v165 * v201;
            v206 = (int *)v357 + v204 + v187;
            v18 = a4;
            v207 = a6 - v204;
            do
            {
              v208 = *v206;
              *v206++ = *v205;
              *v205++ = v208;
              --v207;
            }
            while (v207);
          }
        }
        if (v370 < 8)
        {
          v209 = 0;
          v13 = v357;
          goto LABEL_132;
        }
        v210 = v189 * v188;
        v211 = v18;
        v212 = (unint64_t)v18 + v210;
        v213 = (unint64_t)v190 + v210;
        v214 = (unint64_t)v211 + v189 * v201;
        v215 = v212 >= (unint64_t)v190 + v189 * v201 || v214 >= v213;
        if (v215)
        {
          v216 = (__int128 *)((char *)v194 + v195 * v201);
          v217 = v62 & 0xFFFFFFF8;
          v218 = v197;
          v13 = v357;
          do
          {
            v219 = *(v218 - 1);
            v220 = *v218;
            v221 = *v216;
            *(v218 - 1) = *(v216 - 1);
            *v218 = v221;
            *(v216 - 1) = v219;
            *v216 = v220;
            v218 += 2;
            v216 += 2;
            v217 -= 8;
          }
          while (v217);
          v209 = v62 & 0xFFFFFFF8;
          v18 = a4;
          v169 = v340;
          if (v209 == v62)
            goto LABEL_104;
        }
        else
        {
          v209 = 0;
          v13 = v357;
          v18 = a4;
LABEL_132:
          v169 = v340;
        }
        v222 = &v18->i32[v209 + v169 * v201];
        v223 = &v18->i32[v209 + v186];
        v224 = v62 - v209;
        do
        {
          v225 = *v223;
          *v223++ = *v222;
          *v222++ = v225;
          --v224;
        }
        while (v224);
      }
LABEL_104:
      ++v196;
      v198 = (float32x2_t *)((char *)v198 + v17);
      v187 += v165;
      v197 = (__int128 *)((char *)v197 + v195);
      v186 += v169;
      v188 = v199;
    }
    while (v199 != v350);
  }
  if (v370 < 8)
  {
    v232 = 0;
LABEL_145:
    v240 = &a3->f32[v232];
    v241 = v62 - v232;
    v242 = (double *)&v371[8 * v232];
    do
    {
      v243 = *v242++;
      v244 = v243;
      *v240++ = v244;
      --v241;
    }
    while (v241);
    goto LABEL_147;
  }
  v232 = v62 & 0xFFFFFFF8;
  v233 = (float64x2_t *)&v372;
  v234 = a3 + 1;
  v235 = v232;
  do
  {
    v237 = v233[-2];
    v236 = v233[-1];
    v239 = *v233;
    v238 = v233[1];
    v233 += 4;
    v234[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v237), v236);
    *v234 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v239), v238);
    v234 += 2;
    v235 -= 8;
  }
  while (v235);
  if (v232 != v62)
    goto LABEL_145;
LABEL_147:
  if (v18 && a8 >= 1)
  {
    v245 = 0;
    v247 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v248 = a10 * 100.0;
    v249 = 4 * a6;
    v250 = a6 & 0xFFFFFFF8;
    v251 = a6 & 0xFFFFFFFC;
    v252 = v249 & 0x3FFFFFFE0;
    v253 = v249 & 0x3FFFFFFF0;
    v254 = 305419896;
    v255 = (float *)v13;
    do
    {
      v256 = 0.0;
      if (v245 < v14)
        v256 = *(double *)&v371[8 * v245];
      if (v256 > a9)
      {
LABEL_222:
        if (v256 <= a9)
          v330 = 0.0;
        else
          v330 = 1.0 / v256;
        if ((int)a6 < 1)
          goto LABEL_150;
        v331 = v330;
        if (a6 >= 8)
        {
          v333 = 0;
          do
          {
            v334 = (float32x4_t *)&v255[v333 / 4];
            v335 = vmulq_n_f32(*(float32x4_t *)&v255[v333 / 4 + 4], v331);
            *v334 = vmulq_n_f32(*(float32x4_t *)&v255[v333 / 4], v331);
            v334[1] = v335;
            v333 += 32;
          }
          while (v252 != v333);
          v332 = a6 & 0xFFFFFFF8;
          if (v250 == a6)
            goto LABEL_150;
        }
        else
        {
          v332 = 0;
        }
        do
        {
          v255[v332] = v255[v332] * v331;
          ++v332;
        }
        while (a6 != v332);
      }
      else if ((int)a6 >= 1)
      {
        v257 = 0;
        v258 = (unint64_t)v13 + v247 * v245;
        v259 = (unint64_t)v13 + v249 + v247 * v245;
        while (1)
        {
          v260 = v255;
          v261 = a6;
          do
          {
            v254 = HIDWORD(v254) + 4164903690 * v254;
            if ((v254 & 0x100) != 0)
            {
              v262 = 1.0 / (double)(int)a6;
            }
            else
            {
              v246 = 1.0 / (double)(int)a6;
              v262 = -v246;
            }
            *v260++ = v262;
            --v261;
          }
          while (v261);
          if (v245)
          {
            v263 = 0;
            v264 = v13;
            while (a6 >= 8)
            {
              v267 = 0;
              v266 = 0.0;
              do
              {
                v268 = vmulq_f32(*(float32x4_t *)&v255[v267 / 4], *(float32x4_t *)v264[v267 / 8].f32);
                v269 = vmulq_f32(*(float32x4_t *)&v255[v267 / 4 + 4], *(float32x4_t *)v264[v267 / 8 + 2].f32);
                v270 = vcvt_hight_f64_f32(v268);
                v271 = vcvtq_f64_f32(*(float32x2_t *)v268.f32);
                v272 = vcvt_hight_f64_f32(v269);
                v273 = vcvtq_f64_f32(*(float32x2_t *)v269.f32);
                v266 = v266
                     + v271.f64[0]
                     + v271.f64[1]
                     + v270.f64[0]
                     + v270.f64[1]
                     + v273.f64[0]
                     + v273.f64[1]
                     + v272.f64[0]
                     + v272.f64[1];
                v267 += 32;
              }
              while (v252 != v267);
              v265 = a6 & 0xFFFFFFF8;
              if (v250 != a6)
                goto LABEL_169;
LABEL_170:
              v274 = -v266;
              v275 = 0.0;
              if (a6 <= 3
                || v258 < (unint64_t)v13 + v249 + v247 * v263 && (unint64_t)v13 + v247 * v263 < v259)
              {
                v276 = 0;
                do
                {
LABEL_174:
                  v277 = v255[v276] + v274 * v264->f32[v276];
                  v255[v276] = v277;
                  v275 = v275 + fabsf(v277);
                  ++v276;
                }
                while (a6 != v276);
                goto LABEL_175;
              }
              v283 = 0;
              v284 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v274, 0);
              do
              {
                v285 = (float32x2_t *)&v255[v283 / 4];
                v286 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(*(float32x2_t *)&v255[v283 / 4]), vcvtq_f64_f32(v264[v283 / 8]), v284));
                v287 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(*(float32x2_t *)&v255[v283 / 4 + 2]), vcvtq_f64_f32(v264[v283 / 8 + 1]), v284));
                *v285 = v286;
                v285[1] = v287;
                v288 = vabs_f32(v286);
                v289 = vabs_f32(v287);
                v275 = (float)((float)((float)(v275 + v288.f32[0]) + v288.f32[1]) + v289.f32[0]) + v289.f32[1];
                v283 += 16;
              }
              while (v253 != v283);
              v276 = a6 & 0xFFFFFFFC;
              if (v251 != a6)
                goto LABEL_174;
LABEL_175:
              v278 = 1.0 / v275;
              if (v275 <= v248)
                v278 = 0.0;
              if (a6 > 7)
              {
                v280 = 0;
                do
                {
                  v281 = (float32x4_t *)&v255[v280 / 4];
                  v282 = vmulq_n_f32(*(float32x4_t *)&v255[v280 / 4 + 4], v278);
                  *v281 = vmulq_n_f32(*(float32x4_t *)&v255[v280 / 4], v278);
                  v281[1] = v282;
                  v280 += 32;
                }
                while (v252 != v280);
                v279 = a6 & 0xFFFFFFF8;
                if (v250 == a6)
                  goto LABEL_163;
              }
              else
              {
                v279 = 0;
              }
              do
              {
                v255[v279] = v278 * v255[v279];
                ++v279;
              }
              while (a6 != v279);
LABEL_163:
              ++v263;
              v264 = (float32x2_t *)((char *)v264 + v247);
              if (v263 == v245)
              {
                v290 = 0;
                v291 = v13;
                while (a6 >= 8)
                {
                  v294 = 0;
                  v293 = 0.0;
                  do
                  {
                    v295 = vmulq_f32(*(float32x4_t *)&v255[v294 / 4], *(float32x4_t *)v291[v294 / 8].f32);
                    v296 = vmulq_f32(*(float32x4_t *)&v255[v294 / 4 + 4], *(float32x4_t *)v291[v294 / 8 + 2].f32);
                    v297 = vcvt_hight_f64_f32(v295);
                    v298 = vcvtq_f64_f32(*(float32x2_t *)v295.f32);
                    v299 = vcvt_hight_f64_f32(v296);
                    v300 = vcvtq_f64_f32(*(float32x2_t *)v296.f32);
                    v293 = v293
                         + v298.f64[0]
                         + v298.f64[1]
                         + v297.f64[0]
                         + v297.f64[1]
                         + v300.f64[0]
                         + v300.f64[1]
                         + v299.f64[0]
                         + v299.f64[1];
                    v294 += 32;
                  }
                  while (v252 != v294);
                  v292 = a6 & 0xFFFFFFF8;
                  if (v250 != a6)
                    goto LABEL_195;
LABEL_196:
                  v301 = -v293;
                  v302 = 0.0;
                  if (a6 <= 3
                    || v258 < (unint64_t)v13 + v249 + v247 * v290 && (unint64_t)v13 + v247 * v290 < v259)
                  {
                    v303 = 0;
                    do
                    {
LABEL_200:
                      v304 = v255[v303] + v301 * v291->f32[v303];
                      v255[v303] = v304;
                      v302 = v302 + fabsf(v304);
                      ++v303;
                    }
                    while (a6 != v303);
                    goto LABEL_201;
                  }
                  v310 = 0;
                  v311 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v301, 0);
                  do
                  {
                    v312 = (float32x2_t *)&v255[v310 / 4];
                    v313 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(*(float32x2_t *)&v255[v310 / 4]), vcvtq_f64_f32(v291[v310 / 8]), v311));
                    v314 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(*(float32x2_t *)&v255[v310 / 4 + 2]), vcvtq_f64_f32(v291[v310 / 8 + 1]), v311));
                    *v312 = v313;
                    v312[1] = v314;
                    v315 = vabs_f32(v313);
                    v316 = vabs_f32(v314);
                    v302 = (float)((float)((float)(v302 + v315.f32[0]) + v315.f32[1]) + v316.f32[0]) + v316.f32[1];
                    v310 += 16;
                  }
                  while (v253 != v310);
                  v303 = a6 & 0xFFFFFFFC;
                  if (v251 != a6)
                    goto LABEL_200;
LABEL_201:
                  v305 = 1.0 / v302;
                  if (v302 <= v248)
                    v305 = 0.0;
                  if (a6 > 7)
                  {
                    v307 = 0;
                    do
                    {
                      v308 = (float32x4_t *)&v255[v307 / 4];
                      v309 = vmulq_n_f32(*(float32x4_t *)&v255[v307 / 4 + 4], v305);
                      *v308 = vmulq_n_f32(*(float32x4_t *)&v255[v307 / 4], v305);
                      v308[1] = v309;
                      v307 += 32;
                    }
                    while (v252 != v307);
                    v306 = a6 & 0xFFFFFFF8;
                    if (v250 == a6)
                      goto LABEL_189;
                  }
                  else
                  {
                    v306 = 0;
                  }
                  do
                  {
                    v255[v306] = v305 * v255[v306];
                    ++v306;
                  }
                  while (a6 != v306);
LABEL_189:
                  ++v290;
                  v291 = (float32x2_t *)((char *)v291 + v247);
                  if (v290 == v245)
                    goto LABEL_214;
                }
                v292 = 0;
                v293 = 0.0;
                do
                {
LABEL_195:
                  v293 = v293 + (float)(v255[v292] * v291->f32[v292]);
                  ++v292;
                }
                while (a6 != v292);
                goto LABEL_196;
              }
            }
            v265 = 0;
            v266 = 0.0;
            do
            {
LABEL_169:
              v266 = v266 + (float)(v255[v265] * v264->f32[v265]);
              ++v265;
            }
            while (a6 != v265);
            goto LABEL_170;
          }
LABEL_214:
          if (a6 >= 8)
          {
            v319 = 0;
            v318 = 0.0;
            do
            {
              v320 = *(float32x4_t *)&v255[v319 / 4];
              v321 = *(float32x4_t *)&v255[v319 / 4 + 4];
              v322 = vcvtq_f64_f32(*(float32x2_t *)v320.f32);
              v323 = vcvt_hight_f64_f32(v320);
              v324 = vcvtq_f64_f32(*(float32x2_t *)v321.f32);
              v325 = vcvt_hight_f64_f32(v321);
              v326 = vmulq_f64(v323, v323);
              v327 = vmulq_f64(v322, v322);
              v328 = vmulq_f64(v325, v325);
              v329 = vmulq_f64(v324, v324);
              v318 = v318
                   + v327.f64[0]
                   + v327.f64[1]
                   + v326.f64[0]
                   + v326.f64[1]
                   + v329.f64[0]
                   + v329.f64[1]
                   + v328.f64[0]
                   + v328.f64[1];
              v319 += 32;
            }
            while (v252 != v319);
            v317 = a6 & 0xFFFFFFF8;
            if (v250 == a6)
              goto LABEL_220;
          }
          else
          {
            v317 = 0;
            v318 = 0.0;
          }
          do
          {
            v318 = v318 + v255[v317] * v255[v317];
            ++v317;
          }
          while (a6 != v317);
LABEL_220:
          v256 = sqrt(v318);
          if (v257 <= 0x62)
          {
            ++v257;
            if (v256 <= a9)
              continue;
          }
          goto LABEL_222;
        }
      }
LABEL_150:
      ++v245;
      v255 = (float *)((char *)v255 + v247);
    }
    while (v245 != a8);
  }
}

double *sub_100225DF4(double *result, unint64_t a2, void *a3, int a4, int a5, char *a6, unint64_t a7, int a8, unsigned int a9, int a10)
{
  void *v11;
  double *v13;
  int v14;
  int v15;
  unsigned int v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double *v21;
  double v22;
  double *v23;
  uint64_t v24;
  double v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  double *v31;
  double *v32;
  float64x2_t *v33;
  float64x2_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  float64x2_t *v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  double v44;
  float64x2_t *v45;
  float64x2_t *v46;
  uint64_t v47;
  float64x2_t v48;
  float64x2_t v49;
  unint64_t v50;
  uint64_t v51;
  double *v52;
  double *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  BOOL v64;
  double v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  double v77;
  unint64_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  int v95;
  uint64_t v96;
  double v97;
  double *v98;
  unint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t i;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  void *v111;
  unsigned int v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  _BYTE v116[1096];

  v11 = a3;
  v13 = result;
  if (a6)
  {
    if (a10 >= 0)
      v14 = a10;
    else
      v14 = a9;
    return (double *)sub_100226454((unint64_t)result, a2, a3, a6, a7, a8, a9, v14, 2.22507386e-308, 2.22044605e-15);
  }
  if (a9 >= 0x89)
    operator new[]();
  if (a8 <= 30)
    v15 = 30;
  else
    v15 = a8;
  v112 = v15;
  v16 = a9 - 1;
  if ((int)a9 >= 1)
  {
    v17 = 8 * a9;
    v18 = 8 * (a2 >> 3);
    if (a8 < 1)
    {
      bzero(v116, 8 * a9);
      if (a9 < 2)
        return (double *)memcpy(v11, v116, v17);
      v110 = 8 * a9;
      v111 = v11;
      v20 = a8;
    }
    else
    {
      v19 = 0;
      v20 = a8;
      v21 = result;
      do
      {
        v22 = 0.0;
        v23 = v21;
        v24 = a8;
        do
        {
          v25 = *v23++;
          v22 = v22 + v25 * v25;
          --v24;
        }
        while (v24);
        *(double *)&v116[8 * v19++] = v22;
        v21 = (double *)((char *)v21 + v18);
      }
      while (v19 != a9);
      v16 = a9 - 1;
      if ((int)a9 <= 1)
      {
        v95 = 0;
LABEL_64:
        v96 = 0;
        do
        {
          v97 = 0.0;
          v98 = v13;
          v99 = v20;
          do
          {
            v100 = *v98++;
            v97 = v97 + v100 * v100;
            --v99;
          }
          while (v99);
          *(double *)&v116[8 * v96++] = sqrt(v97);
          v13 = (double *)((char *)v13 + v18);
        }
        while (v96 != a9);
        if (v95)
        {
          v115 = v16;
LABEL_71:
          v101 = 0;
          for (i = 1; ; ++i)
          {
            v103 = v101 + 1;
            if (v101 + 1 < (int)a9)
              break;
            v105 = v101;
            if (v101 != v101)
              goto LABEL_81;
LABEL_72:
            v101 = v103;
            if (v103 == v115)
              return (double *)memcpy(v11, v116, v17);
          }
          v104 = i;
          v105 = v101;
          do
          {
            if (*(double *)&v116[8 * v105] < *(double *)&v116[8 * v104])
              v105 = v104;
            ++v104;
          }
          while (a9 != v104);
          if (v101 == v105)
            goto LABEL_72;
LABEL_81:
          v106 = 8 * v101;
          v107 = 8 * v105;
          v108 = *(_QWORD *)&v116[v106];
          *(_QWORD *)&v116[v106] = *(_QWORD *)&v116[v107];
          *(_QWORD *)&v116[v107] = v108;
          goto LABEL_72;
        }
        return (double *)memcpy(v11, v116, v17);
      }
      v110 = 8 * a9;
      v111 = a3;
    }
    v26 = 0;
    v27 = a2 & 0xFFFFFFFFFFFFFFF8;
    v114 = 8 * v20 + (a2 & 0xFFFFFFFFFFFFFFF8);
    v28 = v20 & 0xFFFFFFFC;
    v109 = v16;
    v115 = v16;
    do
    {
      v113 = v26;
      v29 = 0;
      v30 = 0;
      v31 = v13;
      v32 = &v13[(unint64_t)v18 / 8];
      v33 = (float64x2_t *)&v13[(unint64_t)v18 / 8 + 2];
      v34 = (float64x2_t *)(v13 + 2);
      v35 = 1;
      do
      {
        v36 = v29 + 1;
        if (v29 + 1 < (int)a9)
        {
          v37 = 0;
          v38 = v32;
          v39 = v33;
          v40 = v35;
          while (1)
          {
            if (a8 < 1)
            {
              v44 = 0.0;
              goto LABEL_39;
            }
            if (v20 < 4)
              break;
            v44 = 0.0;
            v45 = v39;
            v46 = v34;
            v47 = v20 & 0xFFFFFFFC;
            do
            {
              v48 = vmulq_f64(v46[-1], v45[-1]);
              v49 = vmulq_f64(*v46, *v45);
              v44 = v44 + v48.f64[0] + v48.f64[1] + v49.f64[0] + v49.f64[1];
              v46 += 2;
              v45 += 2;
              v47 -= 4;
            }
            while (v47);
            v43 = v20 & 0xFFFFFFFC;
            if (v20 != v28)
              goto LABEL_37;
LABEL_39:
            v57 = *(double *)&v116[8 * v29];
            v58 = *(double *)&v116[8 * v40];
            if (fabs(v44) <= sqrt(v57 * v58) * 2.22044605e-15)
              goto LABEL_29;
            v59 = v44 + v44;
            v60 = v57 - v58;
            v61 = fabs(v59);
            v62 = vabdd_f64(v57, v58);
            if (v61 <= v62)
            {
              v63 = 0.0;
              if (v60 != 0.0)
                v63 = v62 * sqrt(v61 / v62 * (v61 / v62) + 1.0);
            }
            else
            {
              v63 = v61 * sqrt(v62 / v61 * (v62 / v61) + 1.0);
            }
            v64 = v60 < 0.0;
            v65 = sqrt((v63 - v60) * 0.5 / v63);
            v66 = v59 / (v63 * v65 + v63 * v65);
            v67 = sqrt((v60 + v63) / (v63 + v63));
            v68 = v59 / (v63 * v67 + v63 * v67);
            if (v64)
              *(double *)&v69 = v66;
            else
              *(double *)&v69 = v67;
            if (v64)
              v70 = v65;
            else
              v70 = v68;
            if (a8 <= 0)
            {
              v41 = 0.0;
              v42 = 0.0;
            }
            else
            {
              v71 = -v70;
              v42 = 0.0;
              if (v20 >= 4
                && ((char *)v13 + v27 * v29 >= (char *)v13 + v114 + v27 * v29 + v27 * v37
                 || (char *)v13 + v27 + v27 * v29 + v27 * v37 >= (char *)&v13[v20] + v27 * v29))
              {
                v78 = 0;
                v79 = (float64x2_t)vdupq_lane_s64(v69, 0);
                v80 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v71, 0);
                v41 = 0.0;
                do
                {
                  v81 = &v34[v78 / 0x10];
                  v82 = v34[v78 / 0x10 - 1];
                  v83 = v34[v78 / 0x10];
                  v84 = &v39[v78 / 0x10];
                  v85 = v39[v78 / 0x10 - 1];
                  v86 = v39[v78 / 0x10];
                  v87 = vmlaq_f64(vmulq_n_f64(v85, v70), v82, v79);
                  v88 = vmlaq_f64(vmulq_n_f64(v86, v70), v83, v79);
                  v89 = vmlaq_f64(vmulq_n_f64(v85, *(double *)&v69), v82, v80);
                  v90 = vmlaq_f64(vmulq_n_f64(v86, *(double *)&v69), v83, v80);
                  v81[-1] = v87;
                  *v81 = v88;
                  v84[-1] = v89;
                  *v84 = v90;
                  v91 = vmulq_f64(v87, v87);
                  v92 = vmulq_f64(v88, v88);
                  v93 = vmulq_f64(v89, v89);
                  v94 = vmulq_f64(v90, v90);
                  v42 = v42 + v93.f64[0] + v93.f64[1] + v94.f64[0] + v94.f64[1];
                  v41 = v41 + v91.f64[0] + v91.f64[1] + v92.f64[0] + v92.f64[1];
                  v78 += 32;
                }
                while (((8 * v20) & 0x7FFFFFFE0) != v78);
                v72 = v20 & 0xFFFFFFFC;
                if (v20 == v28)
                  goto LABEL_28;
              }
              else
              {
                v72 = 0;
                v41 = 0.0;
              }
              do
              {
                v73 = v72;
                v74 = v31[v72];
                v75 = v38[v72];
                v76 = v70 * v75 + *(double *)&v69 * v74;
                v77 = *(double *)&v69 * v75 + v71 * v74;
                v31[v73] = v76;
                v38[v73] = v77;
                v41 = v41 + v76 * v76;
                v42 = v42 + v77 * v77;
                ++v72;
              }
              while (v20 != v72);
            }
LABEL_28:
            *(double *)&v116[8 * v29] = v41;
            *(double *)&v116[8 * v40] = v42;
            v30 = 1;
LABEL_29:
            ++v40;
            ++v37;
            v39 = (float64x2_t *)((char *)v39 + v18);
            v38 = (double *)((char *)v38 + v18);
            if (v40 == a9)
              goto LABEL_24;
          }
          v43 = 0;
          v44 = 0.0;
LABEL_37:
          v50 = v20 - v43;
          v51 = v43;
          v52 = &v38[v43];
          v53 = &v31[v51];
          do
          {
            v54 = *v53++;
            v55 = v54;
            v56 = *v52++;
            v44 = v44 + v55 * v56;
            --v50;
          }
          while (v50);
          goto LABEL_39;
        }
LABEL_24:
        ++v35;
        v34 = (float64x2_t *)((char *)v34 + v18);
        v33 = (float64x2_t *)((char *)v33 + v18);
        v32 = (double *)((char *)v32 + v18);
        v31 = (double *)((char *)v31 + v18);
        ++v29;
      }
      while (v36 != v115);
      v26 = v113 + 1;
    }
    while ((v30 & (v113 + 1 < v112)) != 0);
    if (a8 <= 0)
    {
      v17 = v110;
      bzero(v116, v110);
      v11 = v111;
      goto LABEL_71;
    }
    v95 = 1;
    v11 = v111;
    v17 = v110;
    v16 = v109;
    goto LABEL_64;
  }
  return result;
}

unint64_t sub_100226454(unint64_t result, unint64_t a2, void *a3, char *a4, unint64_t a5, int a6, uint64_t a7, int a8, double a9, double a10)
{
  int v10;
  unint64_t v16;
  double *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  char *v24;
  double v25;
  uint64_t v26;
  double *v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double *v32;
  double v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  float64x2_t *v49;
  unint64_t v50;
  float64x2_t *v51;
  unint64_t v52;
  float64x2_t *v53;
  float64x2_t *v54;
  uint64_t v55;
  uint64_t v56;
  float64x2_t *v57;
  float64x2_t *v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float64x2_t *v62;
  float64x2_t *v63;
  uint64_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double *v67;
  double *v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  BOOL v80;
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  uint64_t v96;
  int v97;
  float64x2_t *v98;
  float64x2_t *v99;
  int v100;
  float64x2_t v101;
  float64x2_t v102;
  double v103;
  uint64_t v104;
  float64x2_t v105;
  float64x2_t v106;
  uint64_t v107;
  unint64_t v108;
  float64x2_t v109;
  float64x2_t v110;
  uint64_t v111;
  double v112;
  double v113;
  unint64_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t *v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t *v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  uint64_t v131;
  double *v132;
  unint64_t v133;
  double v134;
  uint64_t v135;
  double *v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  __int128 *v146;
  __int128 *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  BOOL v161;
  char *v162;
  uint64_t v163;
  __int128 *v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  __int128 *v173;
  uint64_t v174;
  __int128 *v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  double v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  double *v186;
  double v187;
  unint64_t v188;
  unint64_t v189;
  double *v190;
  uint64_t v191;
  double v192;
  uint64_t v193;
  double *v194;
  uint64_t v195;
  double v196;
  unint64_t v197;
  float64x2_t v198;
  float64x2_t v199;
  double v200;
  double v201;
  uint64_t v202;
  unint64_t v203;
  float64x2_t v204;
  float64x2_t *v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  double v210;
  double v211;
  uint64_t v212;
  unint64_t v213;
  float64x2_t *v214;
  float64x2_t v215;
  uint64_t v216;
  double *v217;
  uint64_t v218;
  double v219;
  unint64_t v220;
  float64x2_t v221;
  float64x2_t v222;
  double v223;
  double v224;
  uint64_t v225;
  unint64_t v226;
  float64x2_t v227;
  float64x2_t *v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  double v233;
  double v234;
  uint64_t v235;
  unint64_t v236;
  float64x2_t *v237;
  float64x2_t v238;
  unint64_t v239;
  double v240;
  double v241;
  unint64_t v242;
  float64x2_t *v243;
  float64x2_t v244;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  float64x2_t *v252;
  unsigned int v253;
  unint64_t v254;
  int v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  float64x2_t *v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  size_t __n;
  size_t __na;
  uint64_t __nb;
  _BYTE v271[1096];

  v10 = a8;
  v16 = a2;
  v17 = (double *)result;
  v18 = (int)a7;
  v267 = result;
  if (a7 >= 0x89)
    operator new[]();
  if (a6 <= 30)
    v19 = 30;
  else
    v19 = a6;
  v253 = v19;
  v260 = (a7 - 1);
  if ((int)a7 >= 1)
  {
    v249 = a2 >> 3;
    v254 = a5 >> 3;
    v20 = 8 * (a2 >> 3);
    if (a4)
    {
      v21 = a5 & 0xFFFFFFFFFFFFFFF8;
      v22 = 8 * a7;
      __n = a5 & 0xFFFFFFFFFFFFFFF8;
      if (a6 < 1)
      {
        bzero(v271, 8 * a7);
        v34 = a7;
        v35 = a4;
        v36 = a4;
        do
        {
          bzero(v35, v22);
          *v36 = 0x3FF0000000000000;
          v36 = (_QWORD *)((char *)v36 + __n + 8);
          v35 += __n;
          --v34;
        }
        while (v34);
      }
      else
      {
        v23 = 0;
        do
        {
          v24 = &a4[v21 * v23];
          v25 = 0.0;
          v26 = a6;
          v27 = v17;
          do
          {
            v28 = *v27++;
            v25 = v25 + v28 * v28;
            --v26;
          }
          while (v26);
          *(double *)&v271[8 * v23] = v25;
          bzero(v24, v22);
          *(_QWORD *)&a4[8 * (v254 + 1) * v23++] = 0x3FF0000000000000;
          v17 = (double *)((char *)v17 + v20);
          v21 = __n;
        }
        while (v23 != a7);
      }
    }
    else
    {
      if (a6 <= 0)
      {
        bzero(v271, 8 * a7);
        v37 = 8 * v254;
        v38 = v267;
        v39 = (a7 - 2);
        if ((int)a7 < 2)
          goto LABEL_78;
LABEL_23:
        v40 = 0;
        v41 = (v39 & 0xFFFFFFFE) + 2;
        v42 = v41 | 1;
        if ((v41 | 1) <= v18)
          v42 = v18;
        __na = a5 & 0xFFFFFFFFFFFFFFF8;
        v43 = v42 - v41;
        v44 = 8 * a6;
        v266 = a2 & 0xFFFFFFFFFFFFFFF8;
        v45 = a6 & 0xFFFFFFFC;
        v261 = v42;
        v265 = v43;
        v259 = v42 & 1;
        v258 = v43 - v259;
        v252 = (float64x2_t *)(v38 + 16);
        v251 = v38 + 16 + v20;
        v250 = v38 + v20;
        v46 = v44 & 0x7FFFFFFE0;
        v256 = v38 + v44;
        v257 = (a2 & 0xFFFFFFFFFFFFFFF8) + v44;
LABEL_27:
        v255 = v40;
        v47 = 0;
        v48 = 0;
        v49 = (float64x2_t *)a4;
        v51 = (float64x2_t *)&a4[v37];
        v50 = v250;
        v52 = v38;
        v54 = (float64x2_t *)v251;
        v53 = v252;
        v55 = 1;
        while (1)
        {
          v263 = v50;
          v264 = v51;
          v262 = v47 + 1;
          if (v47 + 1 < v18)
            break;
LABEL_28:
          ++v55;
          v53 = (float64x2_t *)((char *)v53 + v20);
          v54 = (float64x2_t *)((char *)v54 + v20);
          v52 += v20;
          v50 = v263 + v20;
          v51 = (float64x2_t *)((char *)v264 + v37);
          v49 = (float64x2_t *)((char *)v49 + v37);
          ++v47;
          if (v262 == v260)
          {
            v40 = v255 + 1;
            v38 = v267;
            if ((v48 & (v255 + 1 < v253)) != 0)
              goto LABEL_27;
LABEL_78:
            __nb = 8 * a7;
            if (a6 <= 0)
            {
              bzero(v271, 8 * a7);
              v38 = v267;
              v133 = v249;
              if ((int)a7 <= 1)
                goto LABEL_122;
            }
            else
            {
              v131 = 0;
              v132 = (double *)v38;
              v133 = v249;
              do
              {
                v134 = 0.0;
                v135 = a6;
                v136 = v132;
                do
                {
                  v137 = *v136++;
                  v134 = v134 + v137 * v137;
                  --v135;
                }
                while (v135);
                *(double *)&v271[8 * v131++] = sqrt(v134);
                v132 = (double *)((char *)v132 + v20);
              }
              while (v131 != a7);
              if ((int)a7 < 2)
              {
LABEL_122:
                result = (unint64_t)memcpy(a3, v271, __nb);
                v17 = (double *)v267;
                v16 = a2;
                v10 = a8;
                goto LABEL_123;
              }
            }
            v138 = 0;
            v139 = 0;
            v140 = 0;
            v141 = a5 & 0xFFFFFFFFFFFFFFF8;
            v142 = &a4[__nb];
            v143 = a2 & 0xFFFFFFFFFFFFFFF8;
            v144 = v38 + 8 * a6;
            v145 = 1;
            v146 = (__int128 *)(a4 + 16);
            v147 = (__int128 *)(v38 + 16);
            while (2)
            {
              v148 = v140 + 1;
              if (v140 + 1 >= v18)
              {
                v150 = v140;
                if (v140 != v140)
                  goto LABEL_96;
              }
              else
              {
                v149 = v145;
                v150 = v140;
                do
                {
                  if (*(double *)&v271[8 * v150] < *(double *)&v271[8 * v149])
                    v150 = v149;
                  ++v149;
                }
                while (a7 != v149);
                if (v140 != v150)
                {
LABEL_96:
                  v151 = 8 * v150;
                  v152 = *(_QWORD *)&v271[8 * v140];
                  *(_QWORD *)&v271[8 * v140] = *(_QWORD *)&v271[v151];
                  *(_QWORD *)&v271[v151] = v152;
                  if (a4)
                  {
                    if (a6 >= 1)
                    {
                      if (a6 < 4
                        || v38 + v143 * v140 < v144 + v143 * v150 && v38 + v143 * v150 < v144 + v143 * v140)
                      {
                        v153 = 0;
                        goto LABEL_102;
                      }
                      v173 = (__int128 *)(v38 + 16 + v20 * v150);
                      v174 = a6 & 0xFFFFFFFC;
                      v175 = v147;
                      do
                      {
                        v176 = *(v175 - 1);
                        v177 = *v175;
                        v178 = *v173;
                        *(v175 - 1) = *(v173 - 1);
                        *v175 = v178;
                        *(v173 - 1) = v176;
                        *v173 = v177;
                        v175 += 2;
                        v173 += 2;
                        v174 -= 4;
                      }
                      while (v174);
                      v153 = a6 & 0xFFFFFFFC;
                      if (v153 != a6)
                      {
LABEL_102:
                        v154 = (uint64_t *)(v38 + 8 * (v153 + v249 * v150));
                        v155 = (uint64_t *)(v38 + 8 * (v153 + v139));
                        v156 = a6 - v153;
                        do
                        {
                          v157 = *v155;
                          *v155++ = *v154;
                          *v154++ = v157;
                          --v156;
                        }
                        while (v156);
                      }
                    }
                    if (a7 < 4
                      || ((v158 = v141 * v140,
                           v159 = (unint64_t)&a4[v158],
                           v160 = (unint64_t)&v142[v158],
                           v159 < (unint64_t)&v142[v141 * v150])
                        ? (v161 = (unint64_t)&a4[v141 * v150] >= v160)
                        : (v161 = 1),
                          !v161))
                    {
                      v168 = 0;
                      v133 = v249;
                      goto LABEL_115;
                    }
                    v162 = &a4[v37 * v150 + 16];
                    v163 = a7 & 0xFFFFFFFC;
                    v164 = v146;
                    v133 = v249;
                    do
                    {
                      v165 = *(v164 - 1);
                      v166 = *v164;
                      v167 = *(_OWORD *)v162;
                      *(v164 - 1) = *((_OWORD *)v162 - 1);
                      *v164 = v167;
                      *((_OWORD *)v162 - 1) = v165;
                      *(_OWORD *)v162 = v166;
                      v164 += 2;
                      v162 += 32;
                      v163 -= 4;
                    }
                    while (v163);
                    v168 = a7 & 0xFFFFFFFC;
                    if (v168 != a7)
                    {
LABEL_115:
                      v169 = &a4[8 * v168 + 8 * v254 * v150];
                      v170 = &a4[8 * v168 + 8 * v138];
                      v171 = a7 - v168;
                      do
                      {
                        v172 = *(_QWORD *)v170;
                        *(_QWORD *)v170 = *(_QWORD *)v169;
                        v170 += 8;
                        *(_QWORD *)v169 = v172;
                        v169 += 8;
                        --v171;
                      }
                      while (v171);
                    }
                  }
                }
              }
              ++v145;
              v147 = (__int128 *)((char *)v147 + v20);
              v139 += v133;
              v146 = (__int128 *)((char *)v146 + v37);
              v138 += v254;
              v140 = v148;
              if (v148 == v260)
                goto LABEL_122;
              continue;
            }
          }
        }
        v56 = 0;
        v57 = v51;
        v58 = v54;
        v59 = v55;
        while (1)
        {
          if (a6 < 1)
          {
            v61 = 0.0;
            goto LABEL_42;
          }
          if (a6 < 4)
            break;
          v61 = 0.0;
          v62 = v58;
          v63 = v53;
          v64 = a6 & 0xFFFFFFFC;
          do
          {
            v65 = vmulq_f64(v63[-1], v62[-1]);
            v66 = vmulq_f64(*v63, *v62);
            v61 = v61 + v65.f64[0] + v65.f64[1] + v66.f64[0] + v66.f64[1];
            v63 += 2;
            v62 += 2;
            v64 -= 4;
          }
          while (v64);
          v60 = a6 & 0xFFFFFFFC;
          if (v45 != a6)
            goto LABEL_40;
LABEL_42:
          v73 = *(double *)&v271[8 * v47];
          v74 = *(double *)&v271[8 * v59];
          if (fabs(v61) <= sqrt(v73 * v74) * a10)
            goto LABEL_32;
          v75 = v61 + v61;
          v76 = v73 - v74;
          v77 = fabs(v75);
          v78 = vabdd_f64(v73, v74);
          if (v77 <= v78)
          {
            v79 = 0.0;
            if (v76 != 0.0)
              v79 = v78 * sqrt(v77 / v78 * (v77 / v78) + 1.0);
          }
          else
          {
            v79 = v77 * sqrt(v78 / v77 * (v78 / v77) + 1.0);
          }
          v80 = v76 < 0.0;
          v81 = sqrt((v79 - v76) * 0.5 / v79);
          v82 = v75 / (v79 * v81 + v79 * v81);
          v83 = sqrt((v76 + v79) / (v79 + v79));
          v84 = v75 / (v79 * v83 + v79 * v83);
          if (v80)
            *(double *)&v85 = v82;
          else
            *(double *)&v85 = v83;
          if (v80)
            v86 = v81;
          else
            v86 = v84;
          if (a6 > 0)
          {
            v87 = -v86;
            v88 = 0.0;
            if (a6 < 4
              || v267 + v266 * v47 < v267 + v257 + v266 * v47 + v266 * v56
              && v267 + v266 + v266 * v47 + v266 * v56 < v256 + v266 * v47)
            {
              v89 = 0;
              v90 = 0.0;
              goto LABEL_58;
            }
            v114 = 0;
            v115 = (float64x2_t)vdupq_lane_s64(v85, 0);
            v116 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v87, 0);
            v90 = 0.0;
            do
            {
              v117 = &v53[v114 / 0x10];
              v118 = v53[v114 / 0x10 - 1];
              v119 = v53[v114 / 0x10];
              v120 = &v58[v114 / 0x10];
              v121 = v58[v114 / 0x10 - 1];
              v122 = v58[v114 / 0x10];
              v123 = vmlaq_f64(vmulq_n_f64(v121, v86), v118, v115);
              v124 = vmlaq_f64(vmulq_n_f64(v122, v86), v119, v115);
              v125 = vmlaq_f64(vmulq_n_f64(v121, *(double *)&v85), v118, v116);
              v126 = vmlaq_f64(vmulq_n_f64(v122, *(double *)&v85), v119, v116);
              v117[-1] = v123;
              *v117 = v124;
              v120[-1] = v125;
              *v120 = v126;
              v127 = vmulq_f64(v123, v123);
              v128 = vmulq_f64(v124, v124);
              v129 = vmulq_f64(v125, v125);
              v130 = vmulq_f64(v126, v126);
              v88 = v88 + v129.f64[0] + v129.f64[1] + v130.f64[0] + v130.f64[1];
              v90 = v90 + v127.f64[0] + v127.f64[1] + v128.f64[0] + v128.f64[1];
              v114 += 32;
            }
            while (v46 != v114);
            v89 = a6 & 0xFFFFFFFC;
            if (v45 != a6)
            {
              do
              {
LABEL_58:
                v91 = 8 * v89;
                v92 = *(double *)(v52 + 8 * v89);
                v93 = *(double *)(v50 + 8 * v89);
                v94 = v86 * v93 + *(double *)&v85 * v92;
                v95 = *(double *)&v85 * v93 + v87 * v92;
                *(double *)(v52 + v91) = v94;
                *(double *)(v50 + v91) = v95;
                v90 = v90 + v94 * v94;
                v88 = v88 + v95 * v95;
                ++v89;
              }
              while (a6 != v89);
            }
            *(double *)&v271[8 * v47] = v90;
            *(double *)&v271[8 * v59] = v88;
            if (a4)
              goto LABEL_62;
            goto LABEL_31;
          }
          *(_QWORD *)&v271[8 * v47] = 0;
          *(_QWORD *)&v271[8 * v59] = 0;
          if (a4)
          {
LABEL_62:
            v96 = 0;
            v97 = 2;
            v98 = v49;
            v99 = v57;
            do
            {
              v100 = v97;
              v101 = vmulq_n_f64(*v99, *(double *)&v85);
              v102 = vmulq_n_f64(*v98, v86);
              *v98 = vaddq_f64(vmulq_n_f64(*v98, *(double *)&v85), vmulq_n_f64(*v99, v86));
              ++v98;
              *v99++ = vsubq_f64(v101, v102);
              v96 += 2;
              v97 += 2;
            }
            while (v96 <= v39);
            if ((int)v96 < (int)a7)
            {
              v103 = -v86;
              v96 = (int)v96;
              if (v265 < 4)
                goto LABEL_208;
              v104 = 8 * (v261 + (int)v96);
              if (&a4[8 * (int)v96 + __na * v47] < &a4[(a5 & 0xFFFFFFFFFFFFFFF8)
                                                      - 8 * ((v39 & 0xFFFFFFFE) + 2)
                                                      + __na * v47
                                                      + __na * v56
                                                      + v104]
                && &a4[8 * (int)v96 + __na + __na * v47 + __na * v56] < &a4[__na * v47
                                                                          - 8 * ((v39 & 0xFFFFFFFE) + 2)
                                                                          + v104])
              {
                goto LABEL_208;
              }
              v96 = v258 + (int)v96;
              v105 = (float64x2_t)vdupq_lane_s64(v85, 0);
              v106 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v103, 0);
              v107 = 8 * v100;
              v108 = v258;
              do
              {
                v109 = *(float64x2_t *)((char *)v49 + v107);
                v110 = *(float64x2_t *)((char *)v57 + v107);
                *(float64x2_t *)((char *)v49 + v107) = vmlaq_f64(vmulq_n_f64(v110, v86), v109, v105);
                *(float64x2_t *)((char *)v57 + v107) = vmlaq_f64(vmulq_n_f64(v110, *(double *)&v85), v109, v106);
                v107 += 16;
                v108 -= 2;
              }
              while (v108);
              if (v259)
              {
LABEL_208:
                do
                {
                  v111 = v96;
                  v112 = v49->f64[v96];
                  v113 = v57->f64[v96];
                  v49->f64[v111] = v86 * v113 + *(double *)&v85 * v112;
                  v57->f64[v111] = *(double *)&v85 * v113 + v103 * v112;
                  ++v96;
                }
                while (v96 < v18);
              }
            }
          }
LABEL_31:
          v48 = 1;
LABEL_32:
          ++v59;
          ++v56;
          v58 = (float64x2_t *)((char *)v58 + v20);
          v50 += v20;
          v57 = (float64x2_t *)((char *)v57 + v37);
          if (v59 == a7)
            goto LABEL_28;
        }
        v60 = 0;
        v61 = 0.0;
LABEL_40:
        v67 = (double *)(v52 + 8 * v60);
        v68 = (double *)(v50 + 8 * v60);
        v69 = a6 - v60;
        do
        {
          v70 = *v67++;
          v71 = v70;
          v72 = *v68++;
          v61 = v61 + v71 * v72;
          --v69;
        }
        while (v69);
        goto LABEL_42;
      }
      v29 = 0;
      do
      {
        v30 = 0.0;
        v31 = a6;
        v32 = v17;
        do
        {
          v33 = *v32++;
          v30 = v30 + v33 * v33;
          --v31;
        }
        while (v31);
        *(double *)&v271[8 * v29++] = v30;
        v17 = (double *)((char *)v17 + v20);
      }
      while (v29 != a7);
    }
    v37 = 8 * v254;
    v38 = v267;
    v39 = (a7 - 2);
    if ((int)a7 < 2)
      goto LABEL_78;
    goto LABEL_23;
  }
LABEL_123:
  if (a4 && v10 >= 1)
  {
    v179 = 0;
    v180 = a10 * 100.0;
    v181 = v16 & 0xFFFFFFFFFFFFFFF8;
    v182 = 8 * a6;
    v183 = a6 & 0xFFFFFFFC;
    v184 = v182 & 0x7FFFFFFE0;
    v185 = 305419896;
    v186 = v17;
    do
    {
      v187 = 0.0;
      if (v179 < v18)
        v187 = *(double *)&v271[8 * v179];
      if (v187 > a9)
      {
LABEL_194:
        if (v187 <= a9)
          v241 = 0.0;
        else
          v241 = 1.0 / v187;
        if (a6 < 1)
          goto LABEL_126;
        if (a6 >= 4)
        {
          v242 = 0;
          do
          {
            v243 = (float64x2_t *)&v186[v242 / 8];
            v244 = vmulq_n_f64(*(float64x2_t *)&v186[v242 / 8 + 2], v241);
            *v243 = vmulq_n_f64(*(float64x2_t *)&v186[v242 / 8], v241);
            v243[1] = v244;
            v242 += 32;
          }
          while (v184 != v242);
          result = a6 & 0xFFFFFFFC;
          if (v183 == a6)
            goto LABEL_126;
        }
        else
        {
          result = 0;
        }
        do
        {
          v186[result] = v241 * v186[result];
          ++result;
        }
        while (a6 != result);
      }
      else if (a6 >= 1)
      {
        result = 0;
        v188 = (unint64_t)v17 + v181 * v179;
        v189 = (unint64_t)&v17[(unint64_t)v182 / 8] + v181 * v179;
        while (1)
        {
          v190 = v186;
          v191 = a6;
          do
          {
            v185 = HIDWORD(v185) + 4164903690 * v185;
            if ((v185 & 0x100) != 0)
              v192 = 1.0 / (double)a6;
            else
              v192 = -(1.0 / (double)a6);
            *v190++ = v192;
            --v191;
          }
          while (v191);
          if (v179)
            break;
LABEL_190:
          v239 = 0;
          v240 = 0.0;
          do
          {
            v240 = v240 + v186[v239 / 8] * v186[v239 / 8];
            v239 += 8;
          }
          while (v182 != v239);
          v187 = sqrt(v240);
          if (result <= 0x62)
          {
            result = (result + 1);
            if (v187 <= a9)
              continue;
          }
          goto LABEL_194;
        }
        v193 = 0;
        v194 = v17;
        while (2)
        {
          if (a6 < 4)
          {
            v195 = 0;
            v196 = 0.0;
            goto LABEL_145;
          }
          v197 = 0;
          v196 = 0.0;
          do
          {
            v198 = vmulq_f64(*(float64x2_t *)&v186[v197 / 8], *(float64x2_t *)&v194[v197 / 8]);
            v199 = vmulq_f64(*(float64x2_t *)&v186[v197 / 8 + 2], *(float64x2_t *)&v194[v197 / 8 + 2]);
            v196 = v196 + v198.f64[0] + v198.f64[1] + v199.f64[0] + v199.f64[1];
            v197 += 32;
          }
          while (v184 != v197);
          v195 = a6 & 0xFFFFFFFC;
          if (v183 != a6)
          {
            do
            {
LABEL_145:
              v196 = v196 + v186[v195] * v194[v195];
              ++v195;
            }
            while (a6 != v195);
          }
          v200 = -v196;
          v201 = 0.0;
          if (a6 < 4)
          {
            v202 = 0;
            goto LABEL_154;
          }
          if (v188 < (unint64_t)&v17[(unint64_t)v182 / 8] + v181 * v193
            && (unint64_t)v17 + v181 * v193 < v189)
          {
            v202 = 0;
            goto LABEL_154;
          }
          v203 = 0;
          v204 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v200, 0);
          do
          {
            v205 = (float64x2_t *)&v186[v203 / 8];
            v206 = vmlaq_f64(*(float64x2_t *)&v186[v203 / 8], *(float64x2_t *)&v194[v203 / 8], v204);
            v207 = vmlaq_f64(*(float64x2_t *)&v186[v203 / 8 + 2], *(float64x2_t *)&v194[v203 / 8 + 2], v204);
            *v205 = v206;
            v205[1] = v207;
            v208 = vabsq_f64(v206);
            v209 = vabsq_f64(v207);
            v201 = v201 + v208.f64[0] + v208.f64[1] + v209.f64[0] + v209.f64[1];
            v203 += 32;
          }
          while (v184 != v203);
          v202 = a6 & 0xFFFFFFFC;
          if (v183 != a6)
          {
            do
            {
LABEL_154:
              v210 = v186[v202] + v200 * v194[v202];
              v186[v202] = v210;
              v201 = v201 + fabs(v210);
              ++v202;
            }
            while (a6 != v202);
          }
          v211 = 1.0 / v201;
          if (v201 <= v180)
            v211 = 0.0;
          if (a6 < 4)
          {
            v212 = 0;
            goto LABEL_162;
          }
          v213 = 0;
          do
          {
            v214 = (float64x2_t *)&v186[v213 / 8];
            v215 = vmulq_n_f64(*(float64x2_t *)&v186[v213 / 8 + 2], v211);
            *v214 = vmulq_n_f64(*(float64x2_t *)&v186[v213 / 8], v211);
            v214[1] = v215;
            v213 += 32;
          }
          while (v184 != v213);
          v212 = a6 & 0xFFFFFFFC;
          if (v183 != a6)
          {
            do
            {
LABEL_162:
              v186[v212] = v211 * v186[v212];
              ++v212;
            }
            while (a6 != v212);
          }
          ++v193;
          v194 = (double *)((char *)v194 + v181);
          if (v193 != v179)
            continue;
          break;
        }
        v216 = 0;
        v217 = v17;
        while (2)
        {
          if (a6 < 4)
          {
            v218 = 0;
            v219 = 0.0;
            goto LABEL_171;
          }
          v220 = 0;
          v219 = 0.0;
          do
          {
            v221 = vmulq_f64(*(float64x2_t *)&v186[v220 / 8], *(float64x2_t *)&v217[v220 / 8]);
            v222 = vmulq_f64(*(float64x2_t *)&v186[v220 / 8 + 2], *(float64x2_t *)&v217[v220 / 8 + 2]);
            v219 = v219 + v221.f64[0] + v221.f64[1] + v222.f64[0] + v222.f64[1];
            v220 += 32;
          }
          while (v184 != v220);
          v218 = a6 & 0xFFFFFFFC;
          if (v183 != a6)
          {
            do
            {
LABEL_171:
              v219 = v219 + v186[v218] * v217[v218];
              ++v218;
            }
            while (a6 != v218);
          }
          v223 = -v219;
          v224 = 0.0;
          if (a6 < 4)
          {
            v225 = 0;
            goto LABEL_180;
          }
          if (v188 < (unint64_t)&v17[(unint64_t)v182 / 8] + v181 * v216
            && (unint64_t)v17 + v181 * v216 < v189)
          {
            v225 = 0;
            goto LABEL_180;
          }
          v226 = 0;
          v227 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v223, 0);
          do
          {
            v228 = (float64x2_t *)&v186[v226 / 8];
            v229 = vmlaq_f64(*(float64x2_t *)&v186[v226 / 8], *(float64x2_t *)&v217[v226 / 8], v227);
            v230 = vmlaq_f64(*(float64x2_t *)&v186[v226 / 8 + 2], *(float64x2_t *)&v217[v226 / 8 + 2], v227);
            *v228 = v229;
            v228[1] = v230;
            v231 = vabsq_f64(v229);
            v232 = vabsq_f64(v230);
            v224 = v224 + v231.f64[0] + v231.f64[1] + v232.f64[0] + v232.f64[1];
            v226 += 32;
          }
          while (v184 != v226);
          v225 = a6 & 0xFFFFFFFC;
          if (v183 != a6)
          {
            do
            {
LABEL_180:
              v233 = v186[v225] + v223 * v217[v225];
              v186[v225] = v233;
              v224 = v224 + fabs(v233);
              ++v225;
            }
            while (a6 != v225);
          }
          v234 = 1.0 / v224;
          if (v224 <= v180)
            v234 = 0.0;
          if (a6 < 4)
          {
            v235 = 0;
            goto LABEL_188;
          }
          v236 = 0;
          do
          {
            v237 = (float64x2_t *)&v186[v236 / 8];
            v238 = vmulq_n_f64(*(float64x2_t *)&v186[v236 / 8 + 2], v234);
            *v237 = vmulq_n_f64(*(float64x2_t *)&v186[v236 / 8], v234);
            v237[1] = v238;
            v236 += 32;
          }
          while (v184 != v236);
          v235 = a6 & 0xFFFFFFFC;
          if (v183 != a6)
          {
            do
            {
LABEL_188:
              v186[v235] = v234 * v186[v235];
              ++v235;
            }
            while (a6 != v235);
          }
          ++v216;
          v217 = (double *)((char *)v217 + v181);
          if (v216 == v179)
            goto LABEL_190;
          continue;
        }
      }
LABEL_126:
      ++v179;
      v186 = (double *)((char *)v186 + v181);
    }
    while (v179 != v10);
  }
  return result;
}

double sub_100227470(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE *v22;
  double v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  char *v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  double v74;
  float *v75;
  double v76;
  double v77;
  double v78;
  float v79;
  float *v80;
  float v81;
  double v82;
  float v83;
  float v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  double v88;
  double v89;
  float *v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float *v113;
  float v114;
  float v115;
  float v116;
  uint64_t v117;
  float v118;
  BOOL v119;
  double *v120;
  double v121;
  double v122;
  double v123;
  double *v124;
  double v125;
  double *v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double *v140;
  double *v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  char *v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  char *v157;
  int v159;
  _BYTE v160[60];
  _BYTE *v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int *v166;
  uint64_t v167;
  int v168;
  __int128 *v169;
  uint64_t v170;
  int v171;
  __int128 *v172;
  uint64_t v173;
  int v174;
  __int128 *v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  _BYTE v183[16];
  _BYTE v184[4];
  int v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  unint64_t v191[2];
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  void *v198;
  unint64_t v199[2];
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  void *v206;
  _QWORD v207[2];
  _BYTE v208[8];
  int v209;
  __int128 v210;
  _OWORD v211[64];

  sub_100298C2C(v208, &off_10044D318);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_OWORD *)(v6 + 16);
    v200 = *(_OWORD *)v6;
    v201 = v7;
    v202 = *(_OWORD *)(v6 + 32);
    v8 = *(_QWORD *)(v6 + 56);
    v203 = *(_QWORD *)(v6 + 48);
    v204 = v8;
    v205 = (char *)&v200 + 8;
    v206 = v207;
    v207[1] = 0;
    v207[0] = 0;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    if (*(int *)(v6 + 4) > 2)
    {
      DWORD1(v200) = 0;
      sub_100256B48((uint64_t)&v200, v6);
    }
    else
    {
      v11 = *(_QWORD **)(v6 + 72);
      v12 = v206;
      *(_QWORD *)v206 = *v11;
      v12[1] = v11[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v200);
  }
  v13 = v200 & 0xFFF;
  if (v13 - 5 >= 2)
  {
    v210 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v210, 22), "type == 5 || type == 6", 22);
    sub_100294B74(-215, (uint64_t *)&v210, "invert", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 839);
  }
  v14 = (((unsigned __int16)(v200 & 0xFFF) >> 3) + 1) << ((0xFA50u >> (2 * (v200 & 7))) & 3);
  v15 = DWORD2(v200);
  v16 = HIDWORD(v200);
  if (a3 == 1)
  {
    if (SHIDWORD(v200) >= SDWORD2(v200))
      v17 = DWORD2(v200);
    else
      v17 = HIDWORD(v200);
    *(_QWORD *)&v210 = v211;
    *((_QWORD *)&v210 + 1) = (int)v14 * (uint64_t)(v17 + v17 * (DWORD2(v200) + HIDWORD(v200))) + 8;
    if (*((_QWORD *)&v210 + 1) >= 0x409uLL)
      operator new[]();
    sub_10000A364((uint64_t)&v192, SDWORD2(v200), v17, v13, ((unint64_t)v211 + v14 - 1) & -(int)v14, 0);
    sub_10000A364((uint64_t)v184, v17, 1, v13, v193 + (int)v14 * (uint64_t)(v17 * v15), 0);
    sub_10000A364((uint64_t)&v177, v17, v16, v13, v186 + (int)v14 * (uint64_t)v17, 0);
    v159 = 16842752;
    *(_QWORD *)&v160[4] = &v200;
    *(_QWORD *)&v160[12] = 0;
    v174 = 33619968;
    v175 = (__int128 *)v184;
    v176 = 0;
    v171 = 33619968;
    v172 = &v192;
    v173 = 0;
    v168 = 33619968;
    v169 = &v177;
    v170 = 0;
    sub_100298C2C(&v165, &off_10044D378);
    sub_10022CF74((uint64_t)&v159, (uint64_t)&v174, (uint64_t)&v171, (uint64_t)&v168, 0);
    if ((_DWORD)v166)
      sub_1002989D0(&v165);
    v176 = 0;
    v174 = 16842752;
    v175 = (__int128 *)v184;
    v173 = 0;
    v171 = 16842752;
    v172 = &v192;
    v170 = 0;
    v168 = 16842752;
    v169 = &v177;
    v159 = 1124007936;
    memset(v160, 0, sizeof(v160));
    v161 = &v160[4];
    v162 = &v163;
    v163 = 0;
    v164 = 0;
    v167 = 0;
    v165 = 16842752;
    v166 = &v159;
    sub_10022887C((uint64_t)&v174, (uint64_t)&v171, (uint64_t)&v168, (uint64_t)&v165, a2);
    if (*(_QWORD *)&v160[52])
    {
      v18 = (unsigned int *)(*(_QWORD *)&v160[52] + 20);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        sub_100256C90((uint64_t)&v159);
    }
    *(_QWORD *)&v160[52] = 0;
    memset(&v160[12], 0, 32);
    if (*(int *)v160 >= 1)
    {
      v21 = 0;
      v22 = v161;
      do
        *(_DWORD *)&v22[4 * v21++] = 0;
      while (v21 < *(int *)v160);
    }
    if (v162 != &v163)
      j__free(v162);
    if (v13 == 5)
    {
      v23 = 0.0;
      if (*(float *)v186 >= 0.00000011921)
        v23 = (float)(*(float *)(v186 + 4 * (v16 - 1)) / *(float *)v186);
    }
    else
    {
      v23 = 0.0;
      if (*(double *)v186 >= 2.22044605e-16)
        v23 = *(double *)(v186 + 8 * (v16 - 1)) / *(double *)v186;
    }
    if (v180)
    {
      v38 = (unsigned int *)(v180 + 20);
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
        sub_100256C90((uint64_t)&v177);
    }
    v180 = 0;
    v178 = 0u;
    v179 = 0u;
    if (SDWORD1(v177) >= 1)
    {
      v41 = 0;
      v42 = v181;
      do
        *(_DWORD *)(v42 + 4 * v41++) = 0;
      while (v41 < SDWORD1(v177));
    }
    if (v182 != v183)
      j__free(v182);
    if (v188)
    {
      v43 = (unsigned int *)(v188 + 20);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
        sub_100256C90((uint64_t)v184);
    }
    v188 = 0;
    v186 = 0u;
    v187 = 0u;
    if (v185 >= 1)
    {
      v46 = 0;
      v47 = v189;
      do
        *(_DWORD *)(v47 + 4 * v46++) = 0;
      while (v46 < v185);
    }
    if (v190 != v191)
      j__free(v190);
    if (v196)
    {
      v48 = (unsigned int *)(v196 + 20);
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
        sub_100256C90((uint64_t)&v192);
    }
    v196 = 0;
    v193 = 0u;
    v194 = 0u;
    if (SDWORD1(v192) >= 1)
    {
      v51 = 0;
      v52 = v197;
      do
        *(_DWORD *)&v52[4 * v51++] = 0;
      while (v51 < SDWORD1(v192));
    }
    if (v198 != v199)
      j__free(v198);
    if ((_OWORD *)v210 != v211 && (_QWORD)v210 != 0)
      goto LABEL_95;
    goto LABEL_96;
  }
  if (DWORD2(v200) != HIDWORD(v200))
  {
    v210 = 0uLL;
    v24 = sub_10029430C(&v210, 6);
    *(_WORD *)(v24 + 4) = 28192;
    *(_DWORD *)v24 = 1027416173;
    sub_100294B74(-215, (uint64_t *)&v210, "invert", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 863);
  }
  if (a3 == 2)
  {
    v25 = HIDWORD(v200) * HIDWORD(v200);
    *(_QWORD *)&v210 = v211;
    *((_QWORD *)&v210 + 1) = (int)v14 * (uint64_t)(HIDWORD(v200) + 2 * HIDWORD(v200) * HIDWORD(v200)) + 8;
    if (*((_QWORD *)&v210 + 1) >= 0x409uLL)
      operator new[]();
    sub_10000A364((uint64_t)&v192, SHIDWORD(v200), SHIDWORD(v200), v13, ((unint64_t)v211 + v14 - 1) & -(int)v14, 0);
    sub_10000A364((uint64_t)v184, v16, 1, v13, v193 + v14 * (unint64_t)v25, 0);
    sub_10000A364((uint64_t)&v177, v16, v16, v13, v186 + v16 * (uint64_t)(int)v14, 0);
    v159 = 16842752;
    *(_QWORD *)&v160[4] = &v200;
    *(_QWORD *)&v160[12] = 0;
    v174 = 33619968;
    v175 = (__int128 *)v184;
    v176 = 0;
    v171 = 33619968;
    v172 = &v177;
    v173 = 0;
    sub_100229340((uint64_t)&v159, (uint64_t)&v174, (uint64_t)&v171);
    v159 = 16842752;
    *(_QWORD *)&v160[4] = &v177;
    *(_QWORD *)&v160[12] = 0;
    v174 = 33619968;
    v175 = &v192;
    v176 = 0;
    sub_10025BCD8((uint64_t)&v159, (uint64_t)&v174);
    v176 = 0;
    v174 = 16842752;
    v175 = (__int128 *)v184;
    v173 = 0;
    v171 = 16842752;
    v172 = &v192;
    v170 = 0;
    v168 = 16842752;
    v169 = &v177;
    v159 = 1124007936;
    memset(v160, 0, sizeof(v160));
    v161 = &v160[4];
    v162 = &v163;
    v163 = 0;
    v164 = 0;
    v167 = 0;
    v165 = 16842752;
    v166 = &v159;
    sub_10022887C((uint64_t)&v174, (uint64_t)&v171, (uint64_t)&v168, (uint64_t)&v165, a2);
    if (*(_QWORD *)&v160[52])
    {
      v26 = (unsigned int *)(*(_QWORD *)&v160[52] + 20);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
        sub_100256C90((uint64_t)&v159);
    }
    *(_QWORD *)&v160[52] = 0;
    memset(&v160[12], 0, 32);
    if (*(int *)v160 >= 1)
    {
      v29 = 0;
      v30 = v161;
      do
        *(_DWORD *)&v30[4 * v29++] = 0;
      while (v29 < *(int *)v160);
    }
    if (v162 != &v163)
      j__free(v162);
    if (v13 == 5)
    {
      v23 = 0.0;
      if (*(float *)v186 >= 0.00000011921)
        v23 = (float)(*(float *)(v186 + 4 * (v16 - 1)) / *(float *)v186);
    }
    else
    {
      v23 = 0.0;
      if (*(double *)v186 >= 2.22044605e-16)
        v23 = *(double *)(v186 + 8 * (v16 - 1)) / *(double *)v186;
    }
    if (v180)
    {
      v55 = (unsigned int *)(v180 + 20);
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
        sub_100256C90((uint64_t)&v177);
    }
    v180 = 0;
    v178 = 0u;
    v179 = 0u;
    if (SDWORD1(v177) >= 1)
    {
      v58 = 0;
      v59 = v181;
      do
        *(_DWORD *)(v59 + 4 * v58++) = 0;
      while (v58 < SDWORD1(v177));
    }
    if (v182 != v183)
      j__free(v182);
    if (v188)
    {
      v60 = (unsigned int *)(v188 + 20);
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
        sub_100256C90((uint64_t)v184);
    }
    v188 = 0;
    v186 = 0u;
    v187 = 0u;
    if (v185 >= 1)
    {
      v63 = 0;
      v64 = v189;
      do
        *(_DWORD *)(v64 + 4 * v63++) = 0;
      while (v63 < v185);
    }
    if (v190 != v191)
      j__free(v190);
    if (v196)
    {
      v65 = (unsigned int *)(v196 + 20);
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (!v67)
        sub_100256C90((uint64_t)&v192);
    }
    v196 = 0;
    v193 = 0u;
    v194 = 0u;
    if (SDWORD1(v192) >= 1)
    {
      v68 = 0;
      v69 = v197;
      do
        *(_DWORD *)&v69[4 * v68++] = 0;
      while (v68 < SDWORD1(v192));
    }
    if (v198 != v199)
      j__free(v198);
    if ((_OWORD *)v210 != v211 && (_QWORD)v210 != 0)
LABEL_95:
      operator delete[]();
LABEL_96:
    v54 = v204;
    if (!v204)
      goto LABEL_203;
    goto LABEL_199;
  }
  if (a3 && a3 != 3)
  {
    v210 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v210, 48), "method == DECOMP_LU || method == DECOMP_CHOLESKY", 48);
    sub_100294B74(-215, (uint64_t *)&v210, "invert", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 883);
  }
  sub_10026285C(a2, HIDWORD(v200), HIDWORD(v200), v200 & 0xFFF, -1, 0, 0);
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v31 = *(_QWORD *)(a2 + 8);
    v32 = *(_OWORD *)(v31 + 16);
    v192 = *(_OWORD *)v31;
    v193 = v32;
    v194 = *(_OWORD *)(v31 + 32);
    v33 = *(_QWORD *)(v31 + 56);
    v195 = *(_QWORD *)(v31 + 48);
    v196 = v33;
    v197 = (char *)&v192 + 8;
    v198 = v199;
    v199[0] = 0;
    v199[1] = 0;
    if (v33)
    {
      v34 = (unsigned int *)(v33 + 20);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 + 1, v34));
    }
    if (*(int *)(v31 + 4) > 2)
    {
      DWORD1(v192) = 0;
      sub_100256B48((uint64_t)&v192, v31);
    }
    else
    {
      v36 = *(_QWORD **)(v31 + 72);
      v37 = v198;
      *(_QWORD *)v198 = *v36;
      v37[1] = v36[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v192);
  }
  if (v16 <= 3)
  {
    v71 = v201;
    v72 = v193;
    v73 = v199[0];
    if (v16 == 3)
    {
      if (v13 == 5)
      {
        v88 = *(float *)v201;
        v89 = *(float *)(v201 + v207[0] + 4);
        v90 = (float *)(v201 + 2 * v207[0]);
        v91 = v90[2];
        v92 = *(float *)(v201 + v207[0] + 8);
        v93 = v90[1];
        v94 = v89 * v91 - v92 * v93;
        v95 = *(float *)(v201 + 4);
        v96 = *(float *)(v201 + v207[0]);
        v97 = *v90;
        v98 = *(float *)(v201 + 8);
        v99 = v96 * v93 - v89 * v97;
        v100 = v88 * v94 - (v96 * v91 - v92 * v97) * v95 + v98 * v99;
        if (v100 != 0.0)
        {
          v101 = 1.0 / v100;
          v102 = (v98 * v93 - v95 * v91) * v101;
          v103 = (v95 * v92 - v98 * v89) * v101;
          v104 = (v92 * v97 - v96 * v91) * v101;
          v105 = (v88 * v91 - v98 * v97) * v101;
          v106 = (v98 * v96 - v88 * v92) * v101;
          v107 = (v95 * v97 - v88 * v93) * v101;
          v108 = (v88 * v89 - v95 * v96) * v101;
          v109 = v94 * v101;
          v110 = v102;
          *(float *)v193 = v109;
          *(float *)(v72 + 4) = v110;
          v111 = v103;
          *(float *)(v72 + 8) = v111;
          v112 = v104;
          v113 = (float *)(v72 + v73);
          v114 = v105;
          *v113 = v112;
          v113[1] = v114;
          v115 = v106;
          v113[2] = v115;
          v116 = v99 * v101;
          v117 = v72 + 2 * v73;
          v118 = v107;
          *(float *)v117 = v116;
          *(float *)(v117 + 4) = v118;
          *(float *)&v108 = v108;
          *(_DWORD *)(v117 + 8) = LODWORD(v108);
          goto LABEL_169;
        }
      }
      else
      {
        v126 = (double *)(v201 + 2 * v207[0]);
        v127 = v126[1];
        v128 = v126[2];
        v129 = *(double *)(v201 + v207[0] + 8);
        v130 = *(double *)(v201 + v207[0] + 16);
        v131 = *v126;
        v132 = *(double *)(v201 + v207[0]);
        v133 = v129 * v128 - v130 * v127;
        v134 = *(double *)v201;
        v135 = *(double *)(v201 + 8);
        v136 = *(double *)(v201 + 16);
        v137 = v132 * v127 - v129 * *v126;
        v138 = *(double *)v201 * v133 - v135 * (v132 * v128 - v130 * *v126) + v136 * v137;
        if (v138 != 0.0)
        {
          v139 = 1.0 / v138;
          *(double *)v193 = v133 * v139;
          *(double *)(v72 + 8) = (v128 * -v135 + v136 * v127) * v139;
          *(double *)(v72 + 16) = (v135 * v130 - v136 * v129) * v139;
          v140 = (double *)(v72 + v73);
          *v140 = (v130 * v131 - v132 * v128) * v139;
          v140[1] = (v134 * v128 - v136 * v131) * v139;
          v140[2] = (v136 * v132 - v134 * v130) * v139;
          v141 = (double *)(v72 + 2 * v73);
          *v141 = v137 * v139;
          v141[1] = (v135 * v131 - v134 * v127) * v139;
          v141[2] = (v132 * -v135 + v134 * v129) * v139;
          goto LABEL_169;
        }
      }
    }
    else if (v16 == 2)
    {
      if (v13 == 5)
      {
        v74 = *(float *)v201;
        v75 = (float *)(v201 + v207[0]);
        v76 = *(float *)(v201 + v207[0] + 4);
        v77 = v74 * v76 - *(float *)(v201 + 4) * *(float *)(v201 + v207[0]);
        if (v77 != 0.0)
        {
          v78 = 1.0 / v77;
          v79 = v78 * v74;
          v80 = (float *)(v193 + v199[0]);
          v80[1] = v79;
          v81 = v78 * v76;
          *(float *)v72 = v81;
          v82 = v78 * (float)-*v75;
          v83 = v78 * (float)-*(float *)(v71 + 4);
          *(float *)(v72 + 4) = v83;
          v84 = v82;
          *v80 = v84;
LABEL_169:
          v86 = 1;
          goto LABEL_188;
        }
      }
      else
      {
        v120 = (double *)(v201 + v207[0]);
        v121 = *(double *)(v201 + v207[0] + 8);
        v122 = *(double *)v201 * v121 - *(double *)(v201 + 8) * *(double *)(v201 + v207[0]);
        if (v122 != 0.0)
        {
          v123 = 1.0 / v122;
          v124 = (double *)(v193 + v199[0]);
          v124[1] = *(double *)v201 * v123;
          *(double *)v72 = v121 * v123;
          v125 = -(*v120 * v123);
          *(double *)(v72 + 8) = -(*(double *)(v71 + 8) * v123);
          *v124 = v125;
          goto LABEL_169;
        }
      }
    }
    else if (v13 == 5)
    {
      if (*(float *)v201 != 0.0)
      {
        *(float *)v193 = 1.0 / *(float *)v201;
        goto LABEL_169;
      }
    }
    else if (*(double *)v201 != 0.0)
    {
      *(double *)v193 = 1.0 / *(double *)v201;
      goto LABEL_169;
    }
    v210 = 0u;
    v211[0] = 0u;
    sub_10021956C((uint64_t)&v192, (uint64_t)&v210);
    v86 = 0;
    goto LABEL_188;
  }
  *(_QWORD *)&v210 = v211;
  *((_QWORD *)&v210 + 1) = (v16 * v16 * v14);
  if (DWORD2(v210) >= 0x409)
    operator new[]();
  sub_10000A364((uint64_t)v184, v16, v16, v13, (uint64_t)v211, 0);
  LODWORD(v177) = 33619968;
  *((_QWORD *)&v177 + 1) = v184;
  *(_QWORD *)&v178 = 0;
  sub_1002181EC((uint64_t)&v200, (uint64_t)&v177);
  v159 = 50397184;
  *(_QWORD *)&v160[4] = &v192;
  *(_QWORD *)&v160[12] = 0;
  v177 = 0x3FF0000000000000uLL;
  v178 = 0uLL;
  sub_100263CC8((uint64_t)&v159, (double *)&v177);
  if (!a3 && v13 == 5)
  {
    v85 = sub_10026BA60(v186, v191[0], v16, (__n128 *)v193, v199[0], v16);
    goto LABEL_151;
  }
  if (!a3 && v13 == 6)
  {
    v85 = sub_10026C280(v186, v191[0], v16, v193, v199[0], v16);
LABEL_151:
    if (v85)
      goto LABEL_152;
    goto LABEL_173;
  }
  if (a3 == 3 && v13 == 5)
    v119 = sub_10026CAA0((float *)v186, v191[0], v16, v193, v199[0], v16);
  else
    v119 = sub_10026D060((double *)v186, v191[0], v16, v193, v199[0], v16);
  if (v119)
  {
LABEL_152:
    v86 = 1;
    v87 = v188;
    if (!v188)
      goto LABEL_178;
LABEL_174:
    v142 = (unsigned int *)(v87 + 20);
    do
    {
      v143 = __ldaxr(v142);
      v144 = v143 - 1;
    }
    while (__stlxr(v144, v142));
    if (!v144)
      sub_100256C90((uint64_t)v184);
    goto LABEL_178;
  }
LABEL_173:
  v177 = 0u;
  v178 = 0u;
  sub_10021956C((uint64_t)&v192, (uint64_t)&v177);
  v86 = 0;
  v87 = v188;
  if (v188)
    goto LABEL_174;
LABEL_178:
  v188 = 0;
  v186 = 0u;
  v187 = 0u;
  if (v185 >= 1)
  {
    v145 = 0;
    v146 = v189;
    do
      *(_DWORD *)(v146 + 4 * v145++) = 0;
    while (v145 < v185);
  }
  if (v190 != v191)
    j__free(v190);
  if ((_OWORD *)v210 != v211 && (_QWORD)v210 != 0)
    operator delete[]();
LABEL_188:
  if (v196)
  {
    v148 = (unsigned int *)(v196 + 20);
    do
    {
      v149 = __ldaxr(v148);
      v150 = v149 - 1;
    }
    while (__stlxr(v150, v148));
    if (!v150)
      sub_100256C90((uint64_t)&v192);
  }
  v196 = 0;
  v193 = 0u;
  v194 = 0u;
  if (SDWORD1(v192) >= 1)
  {
    v151 = 0;
    v152 = v197;
    do
      *(_DWORD *)&v152[4 * v151++] = 0;
    while (v151 < SDWORD1(v192));
  }
  if (v198 != v199)
    j__free(v198);
  v23 = (double)v86;
  v54 = v204;
  if (v204)
  {
LABEL_199:
    v153 = (unsigned int *)(v54 + 20);
    do
    {
      v154 = __ldaxr(v153);
      v155 = v154 - 1;
    }
    while (__stlxr(v155, v153));
    if (!v155)
      sub_100256C90((uint64_t)&v200);
  }
LABEL_203:
  v204 = 0;
  v201 = 0u;
  v202 = 0u;
  if (SDWORD1(v200) >= 1)
  {
    v156 = 0;
    v157 = v205;
    do
      *(_DWORD *)&v157[4 * v156++] = 0;
    while (v156 < SDWORD1(v200));
  }
  if (v206 != v207)
    j__free(v206);
  if (v209)
    sub_1002989D0(v208);
  return v23;
}

void sub_100228608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  sub_100006BE4((uint64_t)&a57);
  sub_100006BE4((uint64_t)&a69);
  sub_1001D40CC((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_1002286B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  sub_100006BE4((uint64_t)&a9);
  sub_100006BE4((uint64_t)&a33);
  sub_100006BE4((uint64_t)&a45);
  sub_100006BE4((uint64_t)&a57);
  if (STACK[0x250] != v57)
  {
    if (STACK[0x250])
      operator delete[]();
  }
  JUMPOUT(0x100228830);
}

void sub_100228818()
{
  sub_10029434C((uint64_t *)&STACK[0x250]);
  JUMPOUT(0x100228830);
}

void sub_10022882C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  sub_100006BE4((uint64_t)&a69);
  sub_1001D40CC((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_10022884C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100228868(_Unwind_Exception *a1)
{
  sub_1001D40CC((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_10022887C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  signed int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  char *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  char *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  char *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83[2];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  void *v90;
  unint64_t v91[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  void *v98;
  uint64_t v99[2];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  void *v106;
  uint64_t v107[2];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  void *v114;
  uint64_t v115[2];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  void *v122;
  _QWORD v123[2];
  _BYTE *v124;
  unint64_t v125;
  _BYTE v126[1032];

  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_OWORD *)(v10 + 16);
    v116 = *(_OWORD *)v10;
    v117 = v11;
    v118 = *(_OWORD *)(v10 + 32);
    v12 = *(_QWORD *)(v10 + 56);
    v119 = *(_QWORD *)(v10 + 48);
    v120 = v12;
    v121 = (_DWORD *)&v116 + 2;
    v122 = v123;
    v123[1] = 0;
    v123[0] = 0;
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 20);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    if (*(int *)(v10 + 4) > 2)
    {
      DWORD1(v116) = 0;
      sub_100256B48((uint64_t)&v116, v10);
    }
    else
    {
      v15 = *(_QWORD **)(v10 + 72);
      v16 = v122;
      *(_QWORD *)v122 = *v15;
      v16[1] = v15[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v116);
  }
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(_OWORD *)(v17 + 16);
    v108 = *(_OWORD *)v17;
    v109 = v18;
    v110 = *(_OWORD *)(v17 + 32);
    v19 = *(_QWORD *)(v17 + 56);
    v111 = *(_QWORD *)(v17 + 48);
    v112 = v19;
    v113 = (char *)&v108 + 8;
    v114 = v115;
    v115[0] = 0;
    v115[1] = 0;
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 20);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
    if (*(int *)(v17 + 4) > 2)
    {
      DWORD1(v108) = 0;
      sub_100256B48((uint64_t)&v108, v17);
    }
    else
    {
      v22 = *(_QWORD **)(v17 + 72);
      v23 = v114;
      *(_QWORD *)v114 = *v22;
      v23[1] = v22[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v108);
  }
  if (sub_10025D914((_DWORD *)a3) == 0x10000)
  {
    v24 = *(_QWORD *)(a3 + 8);
    v25 = *(_OWORD *)(v24 + 16);
    v100 = *(_OWORD *)v24;
    v101 = v25;
    v102 = *(_OWORD *)(v24 + 32);
    v26 = *(_QWORD *)(v24 + 56);
    v103 = *(_QWORD *)(v24 + 48);
    v104 = v26;
    v105 = (char *)&v100 + 8;
    v106 = v107;
    v107[0] = 0;
    v107[1] = 0;
    if (v26)
    {
      v27 = (unsigned int *)(v26 + 20);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
    }
    if (*(int *)(v24 + 4) > 2)
    {
      DWORD1(v100) = 0;
      sub_100256B48((uint64_t)&v100, v24);
    }
    else
    {
      v29 = *(_QWORD **)(v24 + 72);
      v30 = v106;
      *(_QWORD *)v106 = *v29;
      v30[1] = v29[1];
    }
  }
  else
  {
    sub_10025CCB8(a3, -1, (uint64_t)&v100);
  }
  if (sub_10025D914((_DWORD *)a4) == 0x10000)
  {
    v31 = *(_QWORD *)(a4 + 8);
    v32 = *(_OWORD *)(v31 + 16);
    v92 = *(_OWORD *)v31;
    v93 = v32;
    v94 = *(_OWORD *)(v31 + 32);
    v33 = *(_QWORD *)(v31 + 56);
    v95 = *(_QWORD *)(v31 + 48);
    v96 = v33;
    v97 = (char *)&v92 + 8;
    v98 = v99;
    v99[0] = 0;
    v99[1] = 0;
    if (v33)
    {
      v34 = (unsigned int *)(v33 + 20);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 + 1, v34));
    }
    if (*(int *)(v31 + 4) > 2)
    {
      DWORD1(v92) = 0;
      sub_100256B48((uint64_t)&v92, v31);
    }
    else
    {
      v36 = *(_QWORD **)(v31 + 72);
      v37 = v98;
      *(_QWORD *)v98 = *v36;
      v37[1] = v36[1];
    }
  }
  else
  {
    sub_10025CCB8(a4, -1, (uint64_t)&v92);
  }
  if (SDWORD1(v116) < 1)
    LODWORD(v38) = 0;
  else
    v38 = *((_QWORD *)v122 + (DWORD1(v116) - 1));
  v39 = v116 & 0xFFF;
  v40 = DWORD2(v108);
  v41 = HIDWORD(v100);
  if ((_QWORD)v93)
    v42 = HIDWORD(v92);
  else
    v42 = DWORD2(v108);
  if (SHIDWORD(v100) >= SDWORD2(v108))
    v43 = DWORD2(v108);
  else
    v43 = HIDWORD(v100);
  if (DWORD2(v116) == 1)
  {
    v44 = (int)v38;
  }
  else
  {
    v45 = v123[0] + (int)v38;
    if (HIDWORD(v116) == 1)
      v44 = v123[0];
    else
      v44 = v45;
  }
  v124 = v126;
  v125 = 8 * v42 + 16;
  if (v125 >= 0x409)
    operator new[]();
  if (v39 != (v108 & 0xFFF) || v39 != (v100 & 0xFFF) || !(_QWORD)v109 || !(_QWORD)v101 || !(_QWORD)v117)
  {
    v84 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v84, 76), "w.type() == u.type() && u.type() == vt.type() && u.data && vt.data && w.data", 76);
    sub_100294B74(-215, (uint64_t *)&v84, "backSubst", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1561);
  }
  if (SHIDWORD(v108) < v43
    || SDWORD2(v100) < v43
    || ((v55 = *v121, v56 = v121[1], v56 != v43) || v55 != 1)
    && (v56 != 1 || v55 != v43)
    && (v56 != DWORD2(v100) || v55 != HIDWORD(v108)))
  {
    v84 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v84, 122), "u.cols >= nm && vt.rows >= nm && (w.size() == Size(nm, 1) || w.size() == Size(1, nm) || w.size() == Size(vt.rows, u.cols))", 122);
    sub_100294B74(-215, (uint64_t *)&v84, "backSubst", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1563);
  }
  if ((_QWORD)v93 && ((v92 & 0xFFF) != v39 || DWORD2(v92) != DWORD2(v108)))
  {
    v84 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v84, 54), "rhs.data == 0 || (rhs.type() == type && rhs.rows == m)", 54);
    sub_100294B74(-215, (uint64_t *)&v84, "backSubst", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1564);
  }
  sub_10026285C(a5, HIDWORD(v100), v42, v39, -1, 0, 0);
  if (sub_10025D914((_DWORD *)a5) == 0x10000)
  {
    v47 = *(_QWORD *)(a5 + 8);
    v48 = *(_OWORD *)(v47 + 16);
    v84 = *(_OWORD *)v47;
    v85 = v48;
    v49 = *(_OWORD *)(v47 + 32);
    v86 = v49;
    v50 = *(_QWORD *)(v47 + 56);
    v87 = *(_QWORD *)(v47 + 48);
    v88 = v50;
    v89 = (char *)&v84 + 8;
    v90 = v91;
    v91[0] = 0;
    v91[1] = 0;
    if (v50)
    {
      v51 = (unsigned int *)(v50 + 20);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 + 1, v51));
    }
    if (*(int *)(v47 + 4) > 2)
    {
      DWORD1(v84) = 0;
      sub_100256B48((uint64_t)&v84, v47);
    }
    else
    {
      v53 = *(_QWORD **)(v47 + 72);
      v54 = v90;
      *(_QWORD *)v90 = *v53;
      v54[1] = v53[1];
    }
  }
  else
  {
    sub_10025CCB8(a5, -1, (uint64_t)&v84);
  }
  if (v39 == 6)
  {
    sub_10022C568(v40, v41, v117, v44, (double *)v109, v115[0], 0, v101, *(double *)&v49, *(double *)&v48, v46, v107[0], v93, v99[0], v42, (double *)v85, v91[0], (uint64_t)v124);
  }
  else
  {
    if (v39 != 5)
    {
      v83[0] = 0;
      v83[1] = 0;
      sub_100294B74(-210, v83, "backSubst", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1577);
    }
    sub_10022BAF0(v40, v41, (float32x4_t *)v117, v44, (float *)v109, v115[0], 0, v101, v107[0], v93, v99[0], v42, (float *)v85, v91[0], (uint64_t)v124);
  }
  if (v88)
  {
    v57 = (unsigned int *)(v88 + 20);
    do
    {
      v58 = __ldaxr(v57);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v57));
    if (!v59)
      sub_100256C90((uint64_t)&v84);
  }
  v88 = 0;
  v85 = 0u;
  v86 = 0u;
  if (SDWORD1(v84) >= 1)
  {
    v60 = 0;
    v61 = v89;
    do
      *(_DWORD *)&v61[4 * v60++] = 0;
    while (v60 < SDWORD1(v84));
  }
  if (v90 != v91)
    j__free(v90);
  if (v124 != v126 && v124 != 0)
    operator delete[]();
  if (v96)
  {
    v63 = (unsigned int *)(v96 + 20);
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
      sub_100256C90((uint64_t)&v92);
  }
  v96 = 0;
  v93 = 0u;
  v94 = 0u;
  if (SDWORD1(v92) >= 1)
  {
    v66 = 0;
    v67 = v97;
    do
      *(_DWORD *)&v67[4 * v66++] = 0;
    while (v66 < SDWORD1(v92));
  }
  if (v98 != v99)
    j__free(v98);
  if (v104)
  {
    v68 = (unsigned int *)(v104 + 20);
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
      sub_100256C90((uint64_t)&v100);
  }
  v104 = 0;
  v101 = 0u;
  v102 = 0u;
  if (SDWORD1(v100) >= 1)
  {
    v71 = 0;
    v72 = v105;
    do
      *(_DWORD *)&v72[4 * v71++] = 0;
    while (v71 < SDWORD1(v100));
  }
  if (v106 != v107)
    j__free(v106);
  if (v112)
  {
    v73 = (unsigned int *)(v112 + 20);
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
      sub_100256C90((uint64_t)&v108);
  }
  v112 = 0;
  v109 = 0u;
  v110 = 0u;
  if (SDWORD1(v108) >= 1)
  {
    v76 = 0;
    v77 = v113;
    do
      *(_DWORD *)&v77[4 * v76++] = 0;
    while (v76 < SDWORD1(v108));
  }
  if (v114 != v115)
    j__free(v114);
  if (v120)
  {
    v78 = (unsigned int *)(v120 + 20);
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
      sub_100256C90((uint64_t)&v116);
  }
  v120 = 0;
  v117 = 0u;
  v118 = 0u;
  if (SDWORD1(v116) >= 1)
  {
    v81 = 0;
    v82 = v121;
    do
      v82[v81++] = 0;
    while (v81 < SDWORD1(v116));
  }
  if (v122 != v123)
    j__free(v122);
}

void sub_10022920C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100008C88(a1);
}

void sub_1002292B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  unint64_t v32;

  v32 = STACK[0x230];
  if (STACK[0x230] != v31 && v32)
    operator delete[](v32, 0x1000C8077774924);
  sub_100006BE4(&a31);
  JUMPOUT(0x1002292F0);
}

void sub_100229310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_100006BE4((uint64_t)&a55);
  sub_100006BE4((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_10022932C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_100006BE4((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_100229340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  _BYTE *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE v66[4];
  int v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  _BYTE v74[4];
  int v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  int v81[2];
  _BYTE v82[64];
  _BYTE *v83;
  void *v84;
  unint64_t v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  void *v93;
  _QWORD v94[2];
  char v95[8];
  int v96;
  _OWORD v97[4];
  char *v98;
  unint64_t *v99;
  _QWORD v100[121];

  sub_100298C2C(v95, &off_10044D358);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_OWORD *)(v6 + 16);
    v87 = *(_OWORD *)v6;
    v88 = v7;
    v89 = *(_OWORD *)(v6 + 32);
    v8 = *(_QWORD *)(v6 + 56);
    v90 = *(_QWORD *)(v6 + 48);
    v91 = v8;
    v92 = (char *)&v87 + 8;
    v93 = v94;
    v94[0] = 0;
    v94[1] = 0;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    if (*(int *)(v6 + 4) > 2)
    {
      DWORD1(v87) = 0;
      sub_100256B48((uint64_t)&v87, v6);
    }
    else
    {
      v11 = *(_QWORD **)(v6 + 72);
      v12 = v93;
      *(_QWORD *)v93 = *v11;
      v12[1] = v11[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v87);
  }
  v13 = SDWORD2(v87);
  if (DWORD2(v87) != HIDWORD(v87))
  {
    v97[0] = 0uLL;
    v14 = sub_10029430C(v97, 20);
    *(_DWORD *)(v14 + 16) = 1936486243;
    *(_OWORD *)v14 = *(_OWORD *)"src.rows == src.cols";
    sub_100294B74(-215, (uint64_t *)v97, "eigen", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1395);
  }
  v15 = v87 & 0xFFF;
  if (v15 - 5 >= 2)
  {
    v97[0] = 0uLL;
    qmemcpy((void *)sub_10029430C(v97, 22), "type == 5 || type == 6", 22);
    sub_100294B74(-215, (uint64_t *)v97, "eigen", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1396);
  }
  *(_DWORD *)v82 = 1124007936;
  memset(&v82[4], 0, 60);
  v83 = &v82[8];
  v84 = &v85;
  v85 = 0;
  v86 = 0;
  if (sub_1002637F8(a3))
  {
    sub_10026285C(a3, v13, v13, v15, -1, 0, 0);
    if (sub_10025D914((_DWORD *)a3) == 0x10000)
    {
      v16 = *(_QWORD *)(a3 + 8);
      v17 = *(_OWORD *)(v16 + 16);
      v97[0] = *(_OWORD *)v16;
      v97[1] = v17;
      v97[2] = *(_OWORD *)(v16 + 32);
      v18 = *(_QWORD *)(v16 + 56);
      *(_QWORD *)&v97[3] = *(_QWORD *)(v16 + 48);
      *((_QWORD *)&v97[3] + 1) = v18;
      v98 = (char *)v97 + 8;
      v99 = v100;
      v100[1] = 0;
      v100[0] = 0;
      if (v18)
      {
        v19 = (unsigned int *)(v18 + 20);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 + 1, v19));
      }
      if (*(int *)(v16 + 4) > 2)
      {
        DWORD1(v97[0]) = 0;
        sub_100256B48((uint64_t)v97, v16);
      }
      else
      {
        v21 = *(unint64_t **)(v16 + 72);
        v22 = v99;
        *v99 = *v21;
        v22[1] = v21[1];
      }
    }
    else
    {
      sub_10025CCB8(a3, -1, (uint64_t)v97);
    }
    if (*(_QWORD *)&v82[56])
    {
      v23 = (unsigned int *)(*(_QWORD *)&v82[56] + 20);
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
        sub_100256C90((uint64_t)v82);
    }
    if (*(int *)&v82[4] >= 1)
    {
      v26 = 0;
      v27 = v83;
      do
        *(_DWORD *)&v27[4 * v26++] = 0;
      while (v26 < *(int *)&v82[4]);
    }
    *(_OWORD *)v82 = v97[0];
    *(_OWORD *)&v82[16] = v97[1];
    *(_OWORD *)&v82[32] = v97[2];
    *(_OWORD *)&v82[48] = v97[3];
    if (v84 == &v85)
    {
      v28 = v99;
      if (SDWORD1(v97[0]) <= 2)
        goto LABEL_32;
    }
    else
    {
      j__free(v84);
      v83 = &v82[8];
      v84 = &v85;
      v28 = v99;
      if (SDWORD1(v97[0]) <= 2)
      {
LABEL_32:
        v85 = *v28;
        v86 = v28[1];
        goto LABEL_35;
      }
    }
    v83 = v98;
    v84 = v28;
    v28 = v100;
    v98 = (char *)v97 + 8;
    v99 = v100;
LABEL_35:
    LODWORD(v97[0]) = 1124007936;
    memset((char *)v97 + 4, 0, 60);
    if (v28 != v100)
      j__free(v28);
  }
  if (SDWORD1(v87) < 1)
    v29 = 0;
  else
    v29 = *((_QWORD *)v93 + (DWORD1(v87) - 1));
  v30 = v29 * v13;
  v31 = (v29 * v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v32 = v31 * v13;
  *(_QWORD *)&v97[0] = &v97[1];
  *((_QWORD *)&v97[0] + 1) = 5 * v13 * v29 + v31 * v13 + 32;
  if (*((_QWORD *)&v97[0] + 1) >= 0x409uLL)
    operator new[]();
  sub_10000A364((uint64_t)v74, v13, v13, v15, (uint64_t)&v97[1], v31);
  sub_10000A364((uint64_t)v66, v13, 1, v15, (uint64_t)&v97[1] + v32, 0);
  v63 = 33619968;
  v64 = v74;
  v65 = 0;
  sub_1002181EC((uint64_t)&v87, (uint64_t)&v63);
  v38 = (char *)&v97[1] + v32 + v30;
  if (v15 == 5)
    v39 = sub_10022D8E0(v76, *(unint64_t *)v81, v68, *(char **)&v82[16], v85, v13, (uint64_t)v38, v33, v34, v35, v36, v37);
  else
    v39 = sub_10022E210(v76, *(unint64_t *)v81, v68, *(char **)&v82[16], v85, v13, (uint64_t)v38);
  v40 = v39;
  sub_1002181EC((uint64_t)v66, a2);
  if (v70)
  {
    v41 = (unsigned int *)(v70 + 20);
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
      sub_100256C90((uint64_t)v66);
  }
  v70 = 0;
  v68 = 0u;
  v69 = 0u;
  if (v67 >= 1)
  {
    v44 = 0;
    v45 = v71;
    do
      *(_DWORD *)(v45 + 4 * v44++) = 0;
    while (v44 < v67);
  }
  if (v72 != &v73)
    j__free(v72);
  if (v78)
  {
    v46 = (unsigned int *)(v78 + 20);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
      sub_100256C90((uint64_t)v74);
  }
  v78 = 0;
  v76 = 0u;
  v77 = 0u;
  if (v75 >= 1)
  {
    v49 = 0;
    v50 = v79;
    do
      *(_DWORD *)(v50 + 4 * v49++) = 0;
    while (v49 < v75);
  }
  if (v80 != v81)
    j__free(v80);
  if (*(_OWORD **)&v97[0] != &v97[1] && *(_QWORD *)&v97[0] != 0)
    operator delete[]();
  if (*(_QWORD *)&v82[56])
  {
    v52 = (unsigned int *)(*(_QWORD *)&v82[56] + 20);
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
      sub_100256C90((uint64_t)v82);
  }
  *(_QWORD *)&v82[56] = 0;
  memset(&v82[16], 0, 32);
  if (*(int *)&v82[4] >= 1)
  {
    v55 = 0;
    v56 = v83;
    do
      *(_DWORD *)&v56[4 * v55++] = 0;
    while (v55 < *(int *)&v82[4]);
  }
  if (v84 != &v85)
    j__free(v84);
  if (v91)
  {
    v57 = (unsigned int *)(v91 + 20);
    do
    {
      v58 = __ldaxr(v57);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v57));
    if (!v59)
      sub_100256C90((uint64_t)&v87);
  }
  v91 = 0;
  v88 = 0u;
  v89 = 0u;
  if (SDWORD1(v87) >= 1)
  {
    v60 = 0;
    v61 = v92;
    do
      *(_DWORD *)&v61[4 * v60++] = 0;
    while (v60 < SDWORD1(v87));
  }
  if (v93 != v94)
    j__free(v93);
  if (v96)
    sub_1002989D0(v95);
  return v40;
}

void sub_100229A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100229B00()
{
  JUMPOUT(0x100229B54);
}

void sub_100229B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_1001D40CC((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_100229B74(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  signed int v31;
  signed int v32;
  uint64_t v33;
  signed int v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  _QWORD *v45;
  _QWORD *v46;
  int v47;
  unsigned int v48;
  signed int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  signed int v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __int128 *v59;
  unint64_t v60;
  int *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  _BYTE *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  _QWORD *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  _BYTE *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  _BYTE *v86;
  int v87;
  _QWORD *v88;
  _QWORD *v89;
  int v90;
  BOOL v91;
  unint64_t v92;
  double v93;
  double v94;
  double v95;
  double v96;
  uint64_t v97;
  double v98;
  __n128 v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  _BYTE *v104;
  char v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  _BYTE *v113;
  int v114;
  _QWORD *v115;
  _QWORD *v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  _BYTE *v129;
  int v130;
  _QWORD *v131;
  _QWORD *v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  _BYTE *v139;
  int v140;
  _QWORD *v141;
  _QWORD *v142;
  float *v143;
  uint64_t v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  float v153;
  float v154;
  uint64_t v155;
  uint64_t v156;
  double v157;
  double v158;
  float *v159;
  float v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  float v176;
  double v177;
  float v178;
  double v179;
  float v180;
  float v181;
  int v182;
  int v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  _BYTE *v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t v194;
  float *v195;
  __int128 *v196;
  __int128 v197;
  uint64_t v198;
  unsigned int *v199;
  unsigned int v200;
  unsigned int v201;
  uint64_t v202;
  _BYTE *v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  _BYTE *v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  uint64_t v212;
  _BYTE *v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int v216;
  uint64_t v217;
  char *v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  char *v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  _BYTE *v228;
  unsigned int *v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  char *v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int v237;
  uint64_t v238;
  char *v239;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double *v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  unsigned int v272;
  unint64_t v273;
  int v274;
  int v275;
  _BYTE *v276;
  uint64_t v277;
  _BYTE v278[64];
  _BYTE *v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  __int128 *v284;
  uint64_t v285;
  uint64_t v286;
  int *v287;
  uint64_t v288;
  _BYTE v289[64];
  _BYTE *v290;
  void *v291;
  int v292[2];
  uint64_t v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  char *v298;
  void *v299;
  int v300[2];
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  char *v305;
  void *v306;
  unint64_t v307[2];
  int v308;
  _BYTE v309[12];
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  uint64_t v313;
  _BYTE *v314;
  void *v315;
  uint64_t v316[2];
  __int128 v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  void *v323;
  _QWORD v324[2];
  __int128 v325;
  __int128 v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  char *v330;
  void *v331;
  _QWORD v332[2];
  _BYTE v333[8];
  int v334;
  _BYTE __src[64];
  _BYTE *v336;
  void *v337;
  uint64_t v338[2];
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  void *v345;
  _QWORD v346[121];

  sub_100298C2C(v333, &off_10044D338);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_OWORD *)(v8 + 16);
    v325 = *(_OWORD *)v8;
    v326 = v9;
    v327 = *(_OWORD *)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 56);
    v328 = *(_QWORD *)(v8 + 48);
    v329 = v10;
    v330 = (char *)&v325 + 8;
    v331 = v332;
    v332[1] = 0;
    v332[0] = 0;
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    if (*(int *)(v8 + 4) > 2)
    {
      DWORD1(v325) = 0;
      sub_100256B48((uint64_t)&v325, v8);
    }
    else
    {
      v13 = *(_QWORD **)(v8 + 72);
      v14 = v331;
      *(_QWORD *)v331 = *v13;
      v14[1] = v13[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v325);
  }
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_OWORD *)(v15 + 16);
    v317 = *(_OWORD *)v15;
    v318 = v16;
    v319 = *(_OWORD *)(v15 + 32);
    v17 = *(_QWORD *)(v15 + 56);
    v320 = *(_QWORD *)(v15 + 48);
    v321 = v17;
    v322 = (char *)&v317 + 8;
    v323 = v324;
    v324[1] = 0;
    v324[0] = 0;
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 20);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    if (*(int *)(v15 + 4) > 2)
    {
      DWORD1(v317) = 0;
      sub_100256B48((uint64_t)&v317, v15);
    }
    else
    {
      v20 = *(_QWORD **)(v15 + 72);
      v21 = v323;
      *(_QWORD *)v323 = *v20;
      v21[1] = v20[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v317);
  }
  v22 = v325 & 0xFFF;
  if (v22 != (v317 & 0xFFF) || v22 - 5 >= 2)
  {
    v339 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v339, 48), "type == _src2.type() && (type == 5 || type == 6)", 48);
    sub_100294B74(-215, (uint64_t *)&v339, "solve", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1100);
  }
  if (a4 <= 0x13 && ((1 << a4) & 0x90009) != 0)
  {
    if ((a4 & 0x10) == 0 && DWORD2(v325) != HIDWORD(v325))
    {
      v339 = 0uLL;
      qmemcpy((void *)sub_10029430C(&v339, 87), "(method != DECOMP_LU && method != DECOMP_CHOLESKY) || is_normal || src.rows == src.cols", 87);
      sub_100294B74(-215, (uint64_t *)&v339, "solve", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1104);
    }
    if (((1 << a4) & 0x90009) != 0
      && (a4 & 0x10) == 0
      && SDWORD2(v325) <= 3
      && DWORD2(v325) == HIDWORD(v325)
      && HIDWORD(v317) == 1)
    {
      sub_10026285C(a3, DWORD2(v325), 1u, v325 & 0xFFF, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a3) == 0x10000)
      {
        v24 = *(_QWORD *)(a3 + 8);
        v25 = *(_OWORD *)(v24 + 16);
        v339 = *(_OWORD *)v24;
        v340 = v25;
        v341 = *(_OWORD *)(v24 + 32);
        v26 = *(_QWORD *)(v24 + 56);
        v342 = *(_QWORD *)(v24 + 48);
        v343 = v26;
        v344 = (char *)&v339 + 8;
        v345 = v346;
        v346[1] = 0;
        v346[0] = 0;
        if (v26)
        {
          v27 = (unsigned int *)(v26 + 20);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 1, v27));
        }
        if (*(int *)(v24 + 4) > 2)
        {
          DWORD1(v339) = 0;
          sub_100256B48((uint64_t)&v339, v24);
        }
        else
        {
          v29 = *(_QWORD **)(v24 + 72);
          v30 = v345;
          *(_QWORD *)v345 = *v29;
          v30[1] = v29[1];
        }
      }
      else
      {
        sub_10025CCB8(a3, -1, (uint64_t)&v339);
      }
      v143 = (float *)v340;
      v144 = v346[0];
      if (DWORD2(v325) == 3)
      {
        if (v22 == 5)
        {
          v157 = *(float *)v326;
          v158 = *(float *)(v326 + v332[0] + 4);
          v159 = (float *)(v326 + 2 * v332[0]);
          v160 = v159[2];
          v161 = v160;
          v162 = *(float *)(v326 + v332[0] + 8);
          v163 = v159[1];
          v164 = v158 * v160 - v162 * v163;
          v165 = *(float *)(v326 + 4);
          v166 = *(float *)(v326 + v332[0]);
          v167 = *v159;
          v168 = -(v162 * v167);
          v169 = *(float *)(v326 + 8);
          v170 = v166 * v163 - v158 * v167;
          v171 = v157 * v164 - (v166 * v160 - v162 * v167) * v165 + v169 * v170;
          if (v171 != 0.0)
          {
            v172 = -v162;
            v173 = -(v168 + v166 * v161);
            v174 = 1.0 / v171;
            v175 = *(float *)v318;
            v176 = *(float *)(v318 + v324[0]);
            v177 = *(float *)(v318 + 2 * v324[0]);
            v178 = v174 * (v175 * v164 - (v172 * v177 + v176 * v161) * v165 + v169 * (-v158 * v177 + v176 * v163));
            v179 = v166 * v177 - v176 * v167;
            v180 = v174 * (v173 * v175 + v157 * ((float)(v160 * v176) + v172 * v177) + v169 * v179);
            v181 = v174 * (v157 * (v158 * v177 - v176 * v163) - v179 * v165 + v175 * v170);
            *(float *)v340 = v178;
            *(float *)((char *)v143 + v144) = v180;
            *(float *)((char *)v143 + 2 * v144) = v181;
            v155 = 1;
            v156 = v343;
            if (!v343)
              goto LABEL_405;
            goto LABEL_401;
          }
        }
        else
        {
          v247 = (double *)(v326 + 2 * v332[0]);
          v248 = v247[1];
          v249 = v247[2];
          v250 = *(double *)(v326 + v332[0] + 8);
          v251 = *(double *)(v326 + v332[0] + 16);
          v252 = *v247;
          v253 = *(double *)(v326 + v332[0]);
          v254 = v250 * v249 - v251 * v248;
          v255 = *(double *)v326;
          v256 = *(double *)(v326 + 8);
          v257 = *(double *)(v326 + 16);
          v258 = v253 * v248 - v250 * *v247;
          v259 = *(double *)v326 * v254 - v256 * (v253 * v249 - v251 * *v247) + v257 * v258;
          if (v259 != 0.0)
          {
            v260 = 1.0 / v259;
            v261 = *(double *)(v318 + v324[0]);
            v262 = *(double *)(v318 + 2 * v324[0]);
            v263 = v260
                 * ((v249 * -v256 + v257 * v248) * v261 + v254 * *(double *)v318 + (v256 * v251 - v257 * v250) * v262);
            v264 = v260
                 * ((v255 * v249 - v257 * v252) * v261
                  + (v251 * v252 - v253 * v249) * *(double *)v318
                  + (v257 * v253 - v255 * v251) * v262);
            v265 = v260
                 * ((v256 * v252 - v255 * v248) * v261 + v258 * *(double *)v318 + (v253 * -v256 + v255 * v250) * v262);
            *(double *)v340 = v263;
            *(double *)((char *)v143 + v144) = v264;
            *(double *)((char *)v143 + 2 * v144) = v265;
            v155 = 1;
            v156 = v343;
            if (!v343)
              goto LABEL_405;
            goto LABEL_401;
          }
        }
      }
      else if (DWORD2(v325) == 2)
      {
        if (v22 == 5)
        {
          v145 = *(float *)v326;
          v146 = *(float *)(v326 + v332[0] + 4);
          v147 = *(float *)(v326 + 4);
          v148 = *(float *)(v326 + v332[0]);
          v149 = v145 * v146 - v147 * v148;
          if (v149 != 0.0)
          {
            v150 = 1.0 / v149;
            v151 = *(float *)v318;
            v152 = *(float *)(v318 + v324[0]);
            v153 = v150 * (v151 * v146 - v152 * v147);
            v154 = v150 * (v152 * v145 - v151 * v148);
            *(float *)(v340 + v346[0]) = v154;
            *v143 = v153;
            v155 = 1;
            v156 = v343;
            if (!v343)
              goto LABEL_405;
            goto LABEL_401;
          }
        }
        else
        {
          v241 = *(double *)(v326 + 8);
          v242 = *(double *)(v326 + v332[0] + 8);
          v243 = *(double *)v326 * v242 - v241 * *(double *)(v326 + v332[0]);
          if (v243 != 0.0)
          {
            v244 = 1.0 / v243;
            v245 = *(double *)(v318 + v324[0]);
            v246 = v244 * (*(double *)v318 * v242 - v245 * v241);
            *(double *)(v340 + v346[0]) = v244
                                        * (v245 * *(double *)v326 - *(double *)v318 * *(double *)(v326 + v332[0]));
            *(double *)v143 = v246;
            v155 = 1;
            v156 = v343;
            if (!v343)
              goto LABEL_405;
            goto LABEL_401;
          }
        }
      }
      else if (v22 == 5)
      {
        if (*(float *)v326 != 0.0)
        {
          *(float *)v340 = *(float *)v318 / *(float *)v326;
          v155 = 1;
          v156 = v343;
          if (!v343)
            goto LABEL_405;
          goto LABEL_401;
        }
      }
      else if (*(double *)v326 != 0.0)
      {
        *(double *)v340 = *(double *)v318 / *(double *)v326;
        v155 = 1;
        v156 = v343;
        if (!v343)
          goto LABEL_405;
        goto LABEL_401;
      }
      v155 = 0;
      v156 = v343;
      if (!v343)
      {
LABEL_405:
        v343 = 0;
        v340 = 0u;
        v341 = 0u;
        if (SDWORD1(v339) >= 1)
        {
          v269 = 0;
          v270 = v344;
          do
            *(_DWORD *)&v270[4 * v269++] = 0;
          while (v269 < SDWORD1(v339));
        }
        if (v345 != v346)
          j__free(v345);
        goto LABEL_368;
      }
LABEL_401:
      v266 = (unsigned int *)(v156 + 20);
      do
      {
        v267 = __ldaxr(v266);
        v268 = v267 - 1;
      }
      while (__stlxr(v268, v266));
      if (!v268)
        sub_100256C90((uint64_t)&v339);
      goto LABEL_405;
    }
  }
  v31 = DWORD2(v325);
  v32 = HIDWORD(v325);
  *(_QWORD *)&v339 = &v340;
  *((_QWORD *)&v339 + 1) = 1032;
  v33 = (((unsigned __int16)(v325 & 0xFFF) >> 3) + 1) << ((0xFA50u >> (2 * (v325 & 7))) & 3);
  v34 = HIDWORD(v317);
  *(_QWORD *)v309 = *(_QWORD *)((char *)&v317 + 4);
  v273 = ((int)v33 * (uint64_t)SHIDWORD(v325) + 15) & 0xFFFFFFFFFFFFFFF0;
  if (a4 == 1)
    v35 = (SDWORD2(v325) * (uint64_t)(int)v33 + 15) & 0xFFFFFFFFFFFFFFF0;
  else
    v35 = ((int)v33 * (uint64_t)SHIDWORD(v325) + 15) & 0xFFFFFFFFFFFFFFF0;
  v308 = v317;
  *(_DWORD *)&v309[8] = HIDWORD(v317);
  v310 = v318;
  v311 = v319;
  v312 = v320;
  v313 = v321;
  v314 = &v309[4];
  v315 = v316;
  v316[1] = 0;
  v316[0] = 0;
  if (v321)
  {
    v36 = (unsigned int *)(v321 + 20);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
    if (SDWORD1(v317) <= 2)
      goto LABEL_46;
  }
  else if (SDWORD1(v317) <= 2)
  {
LABEL_46:
    v38 = v323;
    v39 = v315;
    *(_QWORD *)v315 = *(_QWORD *)v323;
    v39[1] = v38[1];
    goto LABEL_49;
  }
  *(_DWORD *)v309 = 0;
  sub_100256B48((uint64_t)&v308, (uint64_t)&v317);
LABEL_49:
  sub_10026285C(a3, HIDWORD(v325), *(unsigned int *)&v309[8], v325 & 0xFFF, -1, 0, 0);
  if (sub_10025D914((_DWORD *)a3) == 0x10000)
  {
    v40 = *(_QWORD *)(a3 + 8);
    v41 = *(_OWORD *)(v40 + 16);
    v301 = *(_OWORD *)v40;
    v302 = v41;
    v303 = *(_OWORD *)(v40 + 32);
    v42 = *(_QWORD *)(v40 + 56);
    *(_QWORD *)&v304 = *(_QWORD *)(v40 + 48);
    *((_QWORD *)&v304 + 1) = v42;
    v305 = (char *)&v301 + 8;
    v306 = v307;
    v307[1] = 0;
    v307[0] = 0;
    if (v42)
    {
      v43 = (unsigned int *)(v42 + 20);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 + 1, v43));
    }
    if (*(int *)(v40 + 4) > 2)
    {
      DWORD1(v301) = 0;
      sub_100256B48((uint64_t)&v301, v40);
    }
    else
    {
      v45 = *(_QWORD **)(v40 + 72);
      v46 = v306;
      *(_QWORD *)v306 = *v45;
      v46[1] = v45[1];
    }
  }
  else
  {
    sub_10025CCB8(a3, -1, (uint64_t)&v301);
  }
  if (v31 < v32)
  {
    v294 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v294, 58), "The function can not solve under-determined linear systems", 58);
    sub_100294B74(-5, (uint64_t *)&v294, "solve", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1250);
  }
  v47 = (a4 >> 4) & 1;
  if ((a4 & 0xFFFFFFEF) == 1)
    v48 = 2;
  else
    v48 = a4 & 0xFFFFFFEF;
  if ((a4 & 0x10) != 0)
    v47 = 1;
  else
    v48 = a4 & 0xFFFFFFEF;
  if ((a4 & 0x10) != 0)
    v49 = v32;
  else
    v49 = v31;
  if (v31 == v32)
    v50 = 0;
  else
    v50 = v47;
  if (v31 == v32)
    v51 = a4 & 0xFFFFFFEF;
  else
    v51 = v48;
  if (v31 == v32)
    v52 = v31;
  else
    v52 = v49;
  v274 = v52;
  if (v51 == 1)
    v53 = 1;
  else
    v53 = v50;
  if (v53)
    v54 = v32;
  else
    v54 = v31;
  v55 = v35 * v54;
  v272 = v34;
  v271 = (int)v33 * (uint64_t)(v34 * v32);
  v56 = v271 + 32;
  if (!v50)
    v56 = 32;
  v57 = v56 + v55;
  if (v51 - 1 <= 1)
    v58 = 5 * v32 * (uint64_t)(int)v33 + 8 * v34 + v273 * v32 + v57 + 32;
  else
    v58 = v57;
  if (*((_QWORD *)&v339 + 1) >= v58)
  {
    *((_QWORD *)&v339 + 1) = v58;
    v59 = (__int128 *)v339;
  }
  else
  {
    v59 = &v340;
    if ((__int128 *)v339 != &v340)
    {
      if ((_QWORD)v339)
        operator delete[]();
      *(_QWORD *)&v339 = &v340;
    }
    *((_QWORD *)&v339 + 1) = v58;
    if (v58 >= 0x409)
      operator new[]();
  }
  v60 = ((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_10000A364((uint64_t)&v294, v52, v32, v22, v60, v35);
  if (!v50)
  {
    if (v51 != 1)
    {
      *(_DWORD *)v289 = 33619968;
      *(_QWORD *)&v289[8] = &v294;
      *(_QWORD *)&v289[16] = 0;
      sub_1002181EC((uint64_t)&v325, (uint64_t)v289);
LABEL_152:
      v62 = v60 + v55;
      if (v51 == 3 || !v51)
      {
        *(_DWORD *)v289 = 33619968;
        *(_QWORD *)&v289[8] = &v301;
        *(_QWORD *)&v289[16] = 0;
        sub_1002181EC((uint64_t)&v308, (uint64_t)v289);
      }
LABEL_155:
      if (v51 != 4)
        goto LABEL_156;
LABEL_186:
      *(_DWORD *)v289 = 1124007936;
      memset(&v289[4], 0, 60);
      v290 = &v289[8];
      v291 = v292;
      v105 = v50 ^ 1;
      if (v31 == v32)
        v105 = 0;
      *(_QWORD *)v292 = 0;
      v293 = 0;
      if ((v105 & 1) == 0)
      {
        *(_DWORD *)v278 = 33619968;
        *(_QWORD *)&v278[8] = &v301;
        *(_QWORD *)&v278[16] = 0;
        sub_1002181EC((uint64_t)&v308, (uint64_t)v278);
        v106 = v22;
        if (*((_QWORD *)&v304 + 1))
        {
          v107 = (unsigned int *)(*((_QWORD *)&v304 + 1) + 20);
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 + 1, v107));
        }
        if (*(_QWORD *)&v289[56])
        {
          v109 = (unsigned int *)(*(_QWORD *)&v289[56] + 20);
          do
          {
            v110 = __ldaxr(v109);
            v111 = v110 - 1;
          }
          while (__stlxr(v111, v109));
          if (!v111)
            sub_100256C90((uint64_t)v289);
        }
        *(_QWORD *)&v289[56] = 0;
        memset(&v289[16], 0, 32);
        if (*(int *)&v289[4] <= 0)
        {
          *(_DWORD *)v289 = v301;
          v114 = DWORD1(v301);
          if (SDWORD1(v301) <= 2)
          {
LABEL_202:
            *(_DWORD *)&v289[4] = v114;
            *(_QWORD *)&v289[8] = *((_QWORD *)&v301 + 1);
            v115 = v306;
            v116 = v291;
            *(_QWORD *)v291 = *(_QWORD *)v306;
            v116[1] = v115[1];
LABEL_261:
            *(_OWORD *)&v289[16] = v302;
            *(_OWORD *)&v289[32] = v303;
            *(_OWORD *)&v289[48] = v304;
            goto LABEL_267;
          }
        }
        else
        {
          v112 = 0;
          v113 = v290;
          do
            *(_DWORD *)&v113[4 * v112++] = 0;
          while (v112 < *(int *)&v289[4]);
          *(_DWORD *)v289 = v301;
          if (*(int *)&v289[4] <= 2)
          {
            v114 = DWORD1(v301);
            if (SDWORD1(v301) <= 2)
              goto LABEL_202;
          }
        }
        sub_100256B48((uint64_t)v289, (uint64_t)&v301);
        goto LABEL_261;
      }
      *(_DWORD *)v278 = 1124007936;
      memset(&v278[4], 0, 60);
      v279 = &v278[8];
      v280 = &v281;
      v281 = 0;
      v282 = 0;
      *(_QWORD *)__src = __PAIR64__(v272, v31);
      v106 = v22;
      sub_100255F30(v278, 2, (uint64_t *)__src, v22);
      if (*(_QWORD *)&v289[56])
      {
        v117 = (unsigned int *)(*(_QWORD *)&v289[56] + 20);
        do
        {
          v118 = __ldaxr(v117);
          v119 = v118 - 1;
        }
        while (__stlxr(v119, v117));
        if (!v119)
          sub_100256C90((uint64_t)v289);
      }
      if (*(int *)&v289[4] >= 1)
      {
        v120 = 0;
        v121 = v290;
        do
          *(_DWORD *)&v121[4 * v120++] = 0;
        while (v120 < *(int *)&v289[4]);
      }
      *(_OWORD *)v289 = *(_OWORD *)v278;
      *(_OWORD *)&v289[16] = *(_OWORD *)&v278[16];
      *(_OWORD *)&v289[32] = *(_OWORD *)&v278[32];
      *(_OWORD *)&v289[48] = *(_OWORD *)&v278[48];
      if (v291 == v292)
      {
        v122 = (uint64_t *)v280;
        if (*(int *)&v278[4] <= 2)
          goto LABEL_213;
      }
      else
      {
        j__free(v291);
        v290 = &v289[8];
        v291 = v292;
        v122 = (uint64_t *)v280;
        if (*(int *)&v278[4] <= 2)
        {
LABEL_213:
          *(_QWORD *)v292 = *v122;
          v293 = v122[1];
LABEL_264:
          *(_DWORD *)v278 = 1124007936;
          memset(&v278[4], 0, 60);
          if (v122 != &v281)
            j__free(v122);
          *(_DWORD *)v278 = 33619968;
          *(_QWORD *)&v278[8] = v289;
          *(_QWORD *)&v278[16] = 0;
          sub_1002181EC((uint64_t)&v308, (uint64_t)v278);
LABEL_267:
          if (v106 == 5)
            v182 = sub_10026D5C0((float *)v295, *(unint64_t *)v300, DWORD2(v294), SHIDWORD(v294), *(unsigned int *)&v289[12], *(float **)&v289[16], *(unint64_t *)v292, 0);
          else
            v182 = sub_10026DE58((double *)v295, *(unint64_t *)v300, DWORD2(v294), SHIDWORD(v294), *(unsigned int *)&v289[12], *(double **)&v289[16], *(unint64_t *)v292, 0);
          v183 = v182;
          if (*(_DWORD *)&v289[8] != DWORD2(v301))
          {
            *(_DWORD *)__src = 0;
            *(_DWORD *)&__src[4] = DWORD2(v301);
            v286 = 0x7FFFFFFF80000000;
            sub_100257548((uint64_t)v278, v289, (int *)__src, &v286);
            *(_DWORD *)__src = 33619968;
            *(_QWORD *)&__src[16] = 0;
            *(_QWORD *)&__src[8] = &v301;
            sub_1002181EC((uint64_t)v278, (uint64_t)__src);
            if (*(_QWORD *)&v278[56])
            {
              v184 = (unsigned int *)(*(_QWORD *)&v278[56] + 20);
              do
              {
                v185 = __ldaxr(v184);
                v186 = v185 - 1;
              }
              while (__stlxr(v186, v184));
              if (!v186)
                sub_100256C90((uint64_t)v278);
            }
            *(_QWORD *)&v278[56] = 0;
            memset(&v278[16], 0, 32);
            if (*(int *)&v278[4] >= 1)
            {
              v187 = 0;
              v188 = v279;
              do
                *(_DWORD *)&v188[4 * v187++] = 0;
              while (v187 < *(int *)&v278[4]);
            }
            if (v280 != &v281)
              j__free(v280);
          }
          if (*(_QWORD *)&v289[56])
          {
            v189 = (unsigned int *)(*(_QWORD *)&v289[56] + 20);
            do
            {
              v190 = __ldaxr(v189);
              v191 = v190 - 1;
            }
            while (__stlxr(v191, v189));
            if (!v191)
              sub_100256C90((uint64_t)v289);
          }
          *(_QWORD *)&v289[56] = 0;
          memset(&v289[16], 0, 32);
          if (*(int *)&v289[4] >= 1)
          {
            v192 = 0;
            v193 = v290;
            do
              *(_DWORD *)&v193[4 * v192++] = 0;
            while (v192 < *(int *)&v289[4]);
          }
          if (v291 != v292)
            j__free(v291);
          if (v183)
            goto LABEL_333;
LABEL_292:
          memset(v289, 0, 32);
          sub_10021956C((uint64_t)&v301, (uint64_t)v289);
          v155 = 0;
          v194 = *((_QWORD *)&v297 + 1);
          if (!*((_QWORD *)&v297 + 1))
            goto LABEL_338;
LABEL_334:
          v214 = (unsigned int *)(v194 + 20);
          do
          {
            v215 = __ldaxr(v214);
            v216 = v215 - 1;
          }
          while (__stlxr(v216, v214));
          if (!v216)
            sub_100256C90((uint64_t)&v294);
          goto LABEL_338;
        }
      }
      v290 = v279;
      v291 = v122;
      v279 = &v278[8];
      v280 = &v281;
      v122 = &v281;
      goto LABEL_264;
    }
    sub_10000A364((uint64_t)v289, v32, v274, v22, v60, v35);
    if (*((_QWORD *)&v297 + 1))
    {
      v68 = (unsigned int *)(*((_QWORD *)&v297 + 1) + 20);
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
        sub_100256C90((uint64_t)&v294);
    }
    if (SDWORD1(v294) >= 1)
    {
      v71 = 0;
      v72 = v298;
      do
        *(_DWORD *)&v72[4 * v71++] = 0;
      while (v71 < SDWORD1(v294));
    }
    v294 = *(_OWORD *)v289;
    v295 = *(_OWORD *)&v289[16];
    v296 = *(_OWORD *)&v289[32];
    v297 = *(_OWORD *)&v289[48];
    v73 = v299;
    if (v299 == v300)
    {
      v74 = v291;
      if (*(int *)&v289[4] <= 2)
        goto LABEL_120;
    }
    else
    {
      j__free(v299);
      v298 = (char *)&v294 + 8;
      v299 = v300;
      v73 = v300;
      v74 = v291;
      if (*(int *)&v289[4] <= 2)
      {
LABEL_120:
        *v73 = *v74;
        v73[1] = v74[1];
LABEL_149:
        *(_DWORD *)v289 = 1124007936;
        memset(&v289[4], 0, 60);
        if (v291 != v292)
          j__free(v291);
        *(_DWORD *)v289 = 16842752;
        *(_QWORD *)&v289[8] = &v325;
        *(_QWORD *)&v289[16] = 0;
        *(_DWORD *)v278 = 33619968;
        *(_QWORD *)&v278[8] = &v294;
        *(_QWORD *)&v278[16] = 0;
        sub_10025BCD8((uint64_t)v289, (uint64_t)v278);
        goto LABEL_152;
      }
    }
    v298 = v290;
    v299 = v74;
    v290 = &v289[8];
    v291 = v292;
    goto LABEL_149;
  }
  *(_DWORD *)v289 = 16842752;
  *(_QWORD *)&v289[8] = &v325;
  *(_QWORD *)&v289[16] = 0;
  *(_DWORD *)v278 = 33619968;
  *(_QWORD *)&v278[8] = &v294;
  *(_QWORD *)&v278[16] = 0;
  v61 = sub_100263CBC();
  sub_10023302C((uint64_t)v289, (uint64_t)v278, 1, (uint64_t)v61, -1, 1.0);
  v62 = v60 + v55;
  if (v51 == 3 || !v51)
  {
    *(_QWORD *)&v278[16] = 0;
    *(_DWORD *)v278 = 16842752;
    *(_QWORD *)&v278[8] = &v325;
    *(_QWORD *)&__src[16] = 0;
    *(_DWORD *)__src = 16842752;
    *(_QWORD *)&__src[8] = &v308;
    *(_DWORD *)v289 = 1124007936;
    memset(&v289[4], 0, 60);
    v290 = &v289[8];
    v291 = v292;
    *(_QWORD *)v292 = 0;
    v293 = 0;
    v288 = 0;
    LODWORD(v286) = 16842752;
    v287 = (int *)v289;
    v283 = 33619968;
    v284 = &v301;
    v285 = 0;
    sub_100231760((uint64_t)v278, (uint64_t)__src, (uint64_t)&v286, 1.0, 0.0, (uint64_t)&v283, 1);
    if (*(_QWORD *)&v289[56])
    {
      v63 = (unsigned int *)(*(_QWORD *)&v289[56] + 20);
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (!v65)
        sub_100256C90((uint64_t)v289);
    }
    *(_QWORD *)&v289[56] = 0;
    memset(&v289[16], 0, 32);
    if (*(int *)&v289[4] >= 1)
    {
      v66 = 0;
      v67 = v290;
      do
        *(_DWORD *)&v67[4 * v66++] = 0;
      while (v66 < *(int *)&v289[4]);
    }
    if (v291 != v292)
      j__free(v291);
    goto LABEL_155;
  }
  sub_10000A364((uint64_t)v289, v32, v272, v22, v62, 0);
  *(_QWORD *)&__src[16] = 0;
  *(_DWORD *)__src = 16842752;
  *(_QWORD *)&__src[8] = &v325;
  v288 = 0;
  LODWORD(v286) = 16842752;
  v287 = &v308;
  *(_DWORD *)v278 = 1124007936;
  memset(&v278[4], 0, 60);
  v279 = &v278[8];
  v280 = &v281;
  v281 = 0;
  v282 = 0;
  v285 = 0;
  v283 = 16842752;
  v284 = (__int128 *)v278;
  v275 = 33619968;
  v276 = v289;
  v277 = 0;
  sub_100231760((uint64_t)__src, (uint64_t)&v286, (uint64_t)&v283, 1.0, 0.0, (uint64_t)&v275, 1);
  if (*(_QWORD *)&v278[56])
  {
    v75 = (unsigned int *)(*(_QWORD *)&v278[56] + 20);
    do
    {
      v76 = __ldaxr(v75);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, v75));
    if (!v77)
      sub_100256C90((uint64_t)v278);
  }
  *(_QWORD *)&v278[56] = 0;
  memset(&v278[16], 0, 32);
  if (*(int *)&v278[4] >= 1)
  {
    v78 = 0;
    v79 = v279;
    do
      *(_DWORD *)&v79[4 * v78++] = 0;
    while (v78 < *(int *)&v278[4]);
  }
  if (v280 != &v281)
    j__free(v280);
  if (*(_QWORD *)&v289[56])
  {
    v80 = (unsigned int *)(*(_QWORD *)&v289[56] + 20);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 + 1, v80));
  }
  if (v313)
  {
    v82 = (unsigned int *)(v313 + 20);
    do
    {
      v83 = __ldaxr(v82);
      v84 = v83 - 1;
    }
    while (__stlxr(v84, v82));
    if (!v84)
      sub_100256C90((uint64_t)&v308);
  }
  v313 = 0;
  v310 = 0u;
  v311 = 0u;
  if (*(int *)v309 > 0)
  {
    v85 = 0;
    v86 = v314;
    do
      *(_DWORD *)&v86[4 * v85++] = 0;
    while (v85 < *(int *)v309);
    v308 = *(_DWORD *)v289;
    if (*(int *)v309 <= 2)
    {
      v87 = *(_DWORD *)&v289[4];
      if (*(int *)&v289[4] <= 2)
        goto LABEL_145;
    }
LABEL_174:
    sub_100256B48((uint64_t)&v308, (uint64_t)v289);
    goto LABEL_175;
  }
  v308 = *(_DWORD *)v289;
  v87 = *(_DWORD *)&v289[4];
  if (*(int *)&v289[4] > 2)
    goto LABEL_174;
LABEL_145:
  *(_DWORD *)v309 = v87;
  *(_QWORD *)&v309[4] = *(_QWORD *)&v289[8];
  v88 = v291;
  v89 = v315;
  *(_QWORD *)v315 = *(_QWORD *)v291;
  v89[1] = v88[1];
LABEL_175:
  v310 = *(_OWORD *)&v289[16];
  v311 = *(_OWORD *)&v289[32];
  v312 = *(_QWORD *)&v289[48];
  v313 = *(_QWORD *)&v289[56];
  if (*(_QWORD *)&v289[56])
  {
    v100 = (unsigned int *)(*(_QWORD *)&v289[56] + 20);
    do
    {
      v101 = __ldaxr(v100);
      v102 = v101 - 1;
    }
    while (__stlxr(v102, v100));
    if (!v102)
      sub_100256C90((uint64_t)v289);
  }
  *(_QWORD *)&v289[56] = 0;
  memset(&v289[16], 0, 32);
  if (*(int *)&v289[4] >= 1)
  {
    v103 = 0;
    v104 = v290;
    do
      *(_DWORD *)&v104[4 * v103++] = 0;
    while (v103 < *(int *)&v289[4]);
  }
  if (v291 != v292)
    j__free(v291);
  v62 += v271;
  if (v51 == 4)
    goto LABEL_186;
LABEL_156:
  if (v51 == 3)
  {
    if (v22 == 5)
      v91 = sub_10026CAA0((float *)v295, *(unint64_t *)v300, v32, v302, v307[0], v272);
    else
      v91 = sub_10026D060((double *)v295, *(unint64_t *)v300, v32, v302, v307[0], v272);
    if (v91)
      goto LABEL_333;
    goto LABEL_292;
  }
  if (v51)
  {
    v92 = (v62 + 15) & 0xFFFFFFFFFFFFFFF0;
    sub_10000A364((uint64_t)v289, v32, v32, v22, v92, v273);
    sub_10000A364((uint64_t)v278, v32, 1, v22, v92 + v273 * v32, 0);
    *(_DWORD *)__src = 1124007936;
    memset(&__src[4], 0, 60);
    v336 = &__src[8];
    v337 = v338;
    v338[1] = 0;
    v338[0] = 0;
    v97 = v92 + (v273 + v33) * v32;
    if (v51 == 2)
    {
      if (v22 == 5)
        sub_10022D8E0(v295, *(unint64_t *)v300, *(uint64_t *)&v278[16], *(char **)&v289[16], *(unint64_t *)v292, v32, v97, 0.0, v93, v94, v95, v96);
      else
        sub_10022E210(v295, *(unint64_t *)v300, *(uint64_t *)&v278[16], *(char **)&v289[16], *(unint64_t *)v292, v32, v97);
      if (*(_QWORD *)&v289[56])
      {
        v123 = (unsigned int *)(*(_QWORD *)&v289[56] + 20);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 + 1, v123));
      }
      if (*(_QWORD *)&__src[56])
      {
        v125 = (unsigned int *)(*(_QWORD *)&__src[56] + 20);
        do
        {
          v126 = __ldaxr(v125);
          v127 = v126 - 1;
        }
        while (__stlxr(v127, v125));
        if (!v127)
          sub_100256C90((uint64_t)__src);
      }
      *(_QWORD *)&__src[56] = 0;
      memset(&__src[16], 0, 32);
      if (*(uint64_t *)__src <= 0)
      {
        *(_DWORD *)__src = *(_DWORD *)v289;
        v130 = *(_DWORD *)&v289[4];
        if (*(int *)&v289[4] <= 2)
        {
LABEL_228:
          *(_DWORD *)&__src[4] = v130;
          *(_QWORD *)&__src[8] = *(_QWORD *)&v289[8];
          v131 = v291;
          v132 = v337;
          *(_QWORD *)v337 = *(_QWORD *)v291;
          v132[1] = v131[1];
LABEL_296:
          v195 = *(float **)&v289[16];
          *(_QWORD *)&__src[16] = *(_QWORD *)&v289[16];
          v196 = (__int128 *)v289;
          goto LABEL_300;
        }
      }
      else
      {
        v128 = 0;
        v129 = v336;
        do
          *(_DWORD *)&v129[4 * v128++] = 0;
        while (v128 < *(int *)&__src[4]);
        *(_DWORD *)__src = *(_DWORD *)v289;
        if (*(int *)&__src[4] <= 2)
        {
          v130 = *(_DWORD *)&v289[4];
          if (*(int *)&v289[4] <= 2)
            goto LABEL_228;
        }
      }
      sub_100256B48((uint64_t)__src, (uint64_t)v289);
      goto LABEL_296;
    }
    if (v22 == 5)
      sub_100223F38((float32x2_t *)v295, *(unint64_t *)v300, *(float32x4_t **)&v278[16], *(uint64_t *)&v289[16], *(uint64_t *)v292, *(float32x4_t **)&v289[16], *(unint64_t *)v292, v274, v32, -1);
    else
      sub_100225DF4((double *)v295, *(unint64_t *)v300, *(void **)&v278[16], *(int *)&v289[16], v292[0], *(char **)&v289[16], *(unint64_t *)v292, v274, v32, -1);
    if (*((_QWORD *)&v297 + 1))
    {
      v133 = (unsigned int *)(*((_QWORD *)&v297 + 1) + 20);
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 + 1, v133));
    }
    if (*(_QWORD *)&__src[56])
    {
      v135 = (unsigned int *)(*(_QWORD *)&__src[56] + 20);
      do
      {
        v136 = __ldaxr(v135);
        v137 = v136 - 1;
      }
      while (__stlxr(v137, v135));
      if (!v137)
        sub_100256C90((uint64_t)__src);
    }
    *(_QWORD *)&__src[56] = 0;
    memset(&__src[16], 0, 32);
    if (*(uint64_t *)__src <= 0)
    {
      *(_DWORD *)__src = v294;
      v140 = DWORD1(v294);
      if (SDWORD1(v294) <= 2)
      {
LABEL_243:
        *(_DWORD *)&__src[4] = v140;
        *(_QWORD *)&__src[8] = *((_QWORD *)&v294 + 1);
        v141 = v299;
        v142 = v337;
        *(_QWORD *)v337 = *(_QWORD *)v299;
        v142[1] = v141[1];
LABEL_299:
        v195 = (float *)v295;
        *(_QWORD *)&__src[16] = v295;
        v196 = &v294;
LABEL_300:
        *(_OWORD *)&__src[24] = *(__int128 *)((char *)v196 + 24);
        v197 = *(__int128 *)((char *)v196 + 40);
        *(_OWORD *)&__src[40] = v197;
        *(_QWORD *)&__src[56] = *((_QWORD *)v196 + 7);
        if (v22 == 5)
        {
          sub_10022BAF0(v274, v32, *(float32x4_t **)&v278[16], 0, v195, v338[0], 1, *(uint64_t *)&v289[16], *(uint64_t *)v292, v310, v316[0], v272, (float *)v302, v307[0], v97);
          v198 = *(_QWORD *)&__src[56];
          if (!*(_QWORD *)&__src[56])
            goto LABEL_308;
        }
        else
        {
          sub_10022C568(v274, v32, *(uint64_t *)&v278[16], 0, (double *)v195, v338[0], 1, *(uint64_t *)&v289[16], *(double *)&v197, v98, v99, *(uint64_t *)v292, v310, v316[0], v272, (double *)v302, v307[0], v97);
          v198 = *(_QWORD *)&__src[56];
          if (!*(_QWORD *)&__src[56])
          {
LABEL_308:
            *(_QWORD *)&__src[56] = 0;
            memset(&__src[16], 0, 32);
            if (*(int *)&__src[4] >= 1)
            {
              v202 = 0;
              v203 = v336;
              do
                *(_DWORD *)&v203[4 * v202++] = 0;
              while (v202 < *(int *)&__src[4]);
            }
            if (v337 != v338)
              j__free(v337);
            if (*(_QWORD *)&v278[56])
            {
              v204 = (unsigned int *)(*(_QWORD *)&v278[56] + 20);
              do
              {
                v205 = __ldaxr(v204);
                v206 = v205 - 1;
              }
              while (__stlxr(v206, v204));
              if (!v206)
                sub_100256C90((uint64_t)v278);
            }
            *(_QWORD *)&v278[56] = 0;
            memset(&v278[16], 0, 32);
            if (*(int *)&v278[4] >= 1)
            {
              v207 = 0;
              v208 = v279;
              do
                *(_DWORD *)&v208[4 * v207++] = 0;
              while (v207 < *(int *)&v278[4]);
            }
            if (v280 != &v281)
              j__free(v280);
            if (*(_QWORD *)&v289[56])
            {
              v209 = (unsigned int *)(*(_QWORD *)&v289[56] + 20);
              do
              {
                v210 = __ldaxr(v209);
                v211 = v210 - 1;
              }
              while (__stlxr(v211, v209));
              if (!v211)
                sub_100256C90((uint64_t)v289);
            }
            *(_QWORD *)&v289[56] = 0;
            memset(&v289[16], 0, 32);
            if (*(int *)&v289[4] >= 1)
            {
              v212 = 0;
              v213 = v290;
              do
                *(_DWORD *)&v213[4 * v212++] = 0;
              while (v212 < *(int *)&v289[4]);
            }
            if (v291 != v292)
              j__free(v291);
            goto LABEL_333;
          }
        }
        v199 = (unsigned int *)(v198 + 20);
        do
        {
          v200 = __ldaxr(v199);
          v201 = v200 - 1;
        }
        while (__stlxr(v201, v199));
        if (!v201)
          sub_100256C90((uint64_t)__src);
        goto LABEL_308;
      }
    }
    else
    {
      v138 = 0;
      v139 = v336;
      do
        *(_DWORD *)&v139[4 * v138++] = 0;
      while (v138 < *(int *)&__src[4]);
      *(_DWORD *)__src = v294;
      if (*(int *)&__src[4] <= 2)
      {
        v140 = DWORD1(v294);
        if (SDWORD1(v294) <= 2)
          goto LABEL_243;
      }
    }
    sub_100256B48((uint64_t)__src, (uint64_t)&v294);
    goto LABEL_299;
  }
  if (v22 == 5)
    v90 = sub_10026BA60(v295, *(unint64_t *)v300, v32, (__n128 *)v302, v307[0], v272);
  else
    v90 = sub_10026C280(v295, *(unint64_t *)v300, v32, v302, v307[0], v272);
  if (!v90)
    goto LABEL_292;
LABEL_333:
  v155 = 1;
  v194 = *((_QWORD *)&v297 + 1);
  if (*((_QWORD *)&v297 + 1))
    goto LABEL_334;
LABEL_338:
  *((_QWORD *)&v297 + 1) = 0;
  v295 = 0u;
  v296 = 0u;
  if (SDWORD1(v294) >= 1)
  {
    v217 = 0;
    v218 = v298;
    do
      *(_DWORD *)&v218[4 * v217++] = 0;
    while (v217 < SDWORD1(v294));
  }
  if (v299 != v300)
    j__free(v299);
  if (*((_QWORD *)&v304 + 1))
  {
    v219 = (unsigned int *)(*((_QWORD *)&v304 + 1) + 20);
    do
    {
      v220 = __ldaxr(v219);
      v221 = v220 - 1;
    }
    while (__stlxr(v221, v219));
    if (!v221)
      sub_100256C90((uint64_t)&v301);
  }
  *((_QWORD *)&v304 + 1) = 0;
  v302 = 0u;
  v303 = 0u;
  if (SDWORD1(v301) >= 1)
  {
    v222 = 0;
    v223 = v305;
    do
      *(_DWORD *)&v223[4 * v222++] = 0;
    while (v222 < SDWORD1(v301));
  }
  if (v306 != v307)
    j__free(v306);
  if (v313)
  {
    v224 = (unsigned int *)(v313 + 20);
    do
    {
      v225 = __ldaxr(v224);
      v226 = v225 - 1;
    }
    while (__stlxr(v226, v224));
    if (!v226)
      sub_100256C90((uint64_t)&v308);
  }
  v313 = 0;
  v310 = 0u;
  v311 = 0u;
  if (*(int *)v309 >= 1)
  {
    v227 = 0;
    v228 = v314;
    do
      *(_DWORD *)&v228[4 * v227++] = 0;
    while (v227 < *(int *)v309);
  }
  if (v315 != v316)
    j__free(v315);
  if ((__int128 *)v339 != &v340 && (_QWORD)v339 != 0)
    operator delete[]();
LABEL_368:
  if (v321)
  {
    v230 = (unsigned int *)(v321 + 20);
    do
    {
      v231 = __ldaxr(v230);
      v232 = v231 - 1;
    }
    while (__stlxr(v232, v230));
    if (!v232)
      sub_100256C90((uint64_t)&v317);
  }
  v321 = 0;
  v318 = 0u;
  v319 = 0u;
  if (SDWORD1(v317) >= 1)
  {
    v233 = 0;
    v234 = v322;
    do
      *(_DWORD *)&v234[4 * v233++] = 0;
    while (v233 < SDWORD1(v317));
  }
  if (v323 != v324)
    j__free(v323);
  if (v329)
  {
    v235 = (unsigned int *)(v329 + 20);
    do
    {
      v236 = __ldaxr(v235);
      v237 = v236 - 1;
    }
    while (__stlxr(v237, v235));
    if (!v237)
      sub_100256C90((uint64_t)&v325);
  }
  v329 = 0;
  v326 = 0u;
  v327 = 0u;
  if (SDWORD1(v325) >= 1)
  {
    v238 = 0;
    v239 = v330;
    do
      *(_DWORD *)&v239[4 * v238++] = 0;
    while (v238 < SDWORD1(v325));
  }
  if (v331 != v332)
    j__free(v331);
  if (v334)
    sub_1002989D0(v333);
  return v155;
}

void sub_10022B904(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_100008C88(a1);
  _Unwind_Resume(a1);
}

float *sub_10022BAF0(unsigned int a1, int a2, float32x4_t *a3, uint64_t a4, float *a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, float *a13, unint64_t a14, uint64_t a15)
{
  uint64_t v20;
  unint64_t v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *result;
  float32x4_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  float32x4_t *v32;
  uint64_t v33;
  float32x4_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  double v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v54;
  double v55;
  uint64_t v56;
  double v57;
  unint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  uint64_t v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  float *v70;
  float v71;
  uint64_t v72;
  double *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  double *v84;
  double v85;
  double v86;
  double v87;
  float *v88;
  float *v89;
  uint64_t v90;
  double v91;
  float v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  float32x4_t *v96;
  const float *v97;
  float v98;
  unint64_t v99;
  uint64_t v100;
  const float *v101;
  double *v102;
  double *v103;
  float32x4_t v104;
  float64x2_t v105;
  float32x4_t v106;
  float32x4_t v107;
  double *v108;
  uint64_t v109;
  double v110;
  double v111;
  unint64_t v112;
  float64x2_t *v113;
  float32x4_t *v114;
  unint64_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  uint64_t v121;
  uint64_t v122;
  float64x2_t *v123;
  float64x2_t v124;
  uint64_t v125;
  double *v126;
  uint64_t v127;
  float64x2_t *v128;
  float32x4_t *v129;
  float32x4_t v130;
  float64x2_t v131;
  float64x2_t v132;
  uint64_t v133;
  double *v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  float *v138;
  double v139;
  float v140;
  float v141;
  float v142;
  uint64_t v143;
  float32x2_t *v144;
  float *v145;
  uint64_t v146;
  unint64_t v147;
  float64x2_t v148;
  uint64_t v149;
  const double *v150;
  float *v151;
  uint64_t v152;
  double *v153;
  float *v154;
  float v155;
  float *v156;
  float v157;
  double v158;
  double v159;
  float v160;
  unint64_t v161;
  float64x2_t v162;
  float32x2_t *v163;
  float64x2_t *v164;
  unint64_t v165;
  float32x2_t v166;
  float v167;
  uint64_t v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  double v176;
  uint64_t v177;
  float64x2_t *v179;
  unint64_t v180;
  float64x2_t *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  float32x4_t *v186;
  uint64_t v187;
  uint64_t v189;
  uint64_t v191;
  unint64_t v192;
  double *v193;
  float32x2x4_t v194;
  float32x2x4_t v195;
  float64x2x4_t v196;
  float64x2x4_t v197;
  float64x2x4_t v198;
  float32x4x4_t v199;
  float64x2x4_t v200;

  v192 = a14 >> 2;
  if (a2 >= (int)a1)
    v20 = a1;
  else
    v20 = a2;
  v177 = v20;
  if (a10)
    v21 = a12;
  else
    v21 = a1;
  if (a2 >= 1 && (int)v21 >= 1)
  {
    v22 = a13;
    v23 = a2;
    do
    {
      bzero(v22, 4 * v21);
      v22 += (int)v192;
      --v23;
    }
    while (v23);
  }
  v24 = v177;
  v25 = a10;
  v27 = a3;
  result = a13;
  if ((int)v177 >= 1)
  {
    v28 = 0;
    v29 = (int)(a6 >> 2);
    if (a4)
      v30 = (int)(a4 >> 2);
    else
      v30 = 1;
    v31 = 0.0;
    if (v177 < 8)
      goto LABEL_20;
    if (v30 != 1)
      goto LABEL_20;
    v28 = v177 & 0xFFFFFFF8;
    v32 = a3 + 1;
    v33 = v28;
    do
    {
      v34 = v32[-1];
      v35 = vcvt_hight_f64_f32(v34);
      v36 = vcvtq_f64_f32(*(float32x2_t *)v34.f32);
      v37 = vcvt_hight_f64_f32(*v32);
      v38 = vcvtq_f64_f32(*(float32x2_t *)v32->f32);
      v31 = v31 + v36.f64[0] + v36.f64[1] + v35.f64[0] + v35.f64[1] + v38.f64[0] + v38.f64[1] + v37.f64[0] + v37.f64[1];
      v32 += 2;
      v33 -= 8;
    }
    while (v33);
    if (v28 != v177)
    {
LABEL_20:
      v39 = v177 - v28;
      v40 = &a3->f32[v30 * v28];
      do
      {
        v31 = v31 + *v40;
        v40 += v30;
        --v39;
      }
      while (v39);
    }
    v41 = (int)(a11 >> 2);
    v42 = v31 * 4.4408921e-16;
    v43 = a1;
    if (a7)
      v44 = 1;
    else
      v44 = (int)(a6 >> 2);
    if (!a7)
      v29 = 1;
    v45 = 4 * v29;
    v46 = 4 * v41;
    v47 = 4 * v44;
    v48 = 4 * (int)(a9 >> 2);
    v49 = 4 * (int)v192;
    v50 = a2;
    if ((_DWORD)v21 == 1)
    {
      v51 = 0;
      v54 = v44 != 1 || v41 != 1 || a1 < 8;
      while (1)
      {
        v55 = a3->f32[v51 * v30];
        if (fabs(v55) > v42)
          break;
LABEL_37:
        ++v51;
        a5 = (float *)((char *)a5 + v45);
        a8 += v48;
        if (v51 == v177)
          return result;
      }
      if (a10)
      {
        if (v54)
        {
          v56 = 0;
          v57 = 0.0;
        }
        else
        {
          v58 = 0;
          v57 = 0.0;
          do
          {
            v59 = vmulq_f32(*(float32x4_t *)&a5[v58 / 4], *(float32x4_t *)(a10 + v58));
            v60 = vmulq_f32(*(float32x4_t *)&a5[v58 / 4 + 4], *(float32x4_t *)(a10 + v58 + 16));
            v61 = vcvt_hight_f64_f32(v59);
            v62 = vcvtq_f64_f32(*(float32x2_t *)v59.f32);
            v63 = vcvt_hight_f64_f32(v60);
            v64 = vcvtq_f64_f32(*(float32x2_t *)v60.f32);
            v57 = v57
                + v62.f64[0]
                + v62.f64[1]
                + v61.f64[0]
                + v61.f64[1]
                + v64.f64[0]
                + v64.f64[1]
                + v63.f64[0]
                + v63.f64[1];
            v58 += 32;
          }
          while (((4 * a1) & 0x3FFFFFFE0) != v58);
          v56 = a1 & 0xFFFFFFF8;
          if (v56 == a1)
            goto LABEL_48;
        }
        v65 = a1 - v56;
        v66 = (float *)(a10 + v46 * v56);
        v67 = v47 * v56;
        do
        {
          v57 = v57 + (float)(*(float *)((char *)a5 + v67) * *v66);
          v66 = (float *)((char *)v66 + v46);
          v67 += v47;
          --v65;
        }
        while (v65);
      }
      else
      {
        v57 = *a5;
      }
LABEL_48:
      v68 = 0;
      v69 = 1.0 / v55 * v57;
      v70 = a13;
      do
      {
        v71 = *v70 + v69 * *(float *)(a8 + 4 * v68);
        *v70 = v71;
        ++v68;
        v70 = (float *)((char *)v70 + v49);
      }
      while (a2 != v68);
      goto LABEL_37;
    }
    v72 = 0;
    v73 = (double *)((a15 + 7) & 0xFFFFFFFFFFFFFFF8);
    v74 = (v21 - 4);
    v75 = (v74 & 0xFFFFFFFC) + 4;
    v76 = (v74 & 0xFFFFFFFC) + 5;
    if (v76 <= v21)
      v76 = v21;
    v77 = v76 - (v74 & 0xFFFFFFFC) - 4;
    v78 = v74 >> 2;
    v79 = (v74 >> 2) + 1;
    v187 = v79 & 0x7FFFFFFC;
    v185 = v77 & 0xFFFFFFFFFFFFFFF8;
    v180 = v75 + (v77 & 0xFFFFFFFFFFFFFFF8);
    v184 = v76 & 3;
    v189 = v79;
    v191 = v79 & 0x7FFFFFFE;
    v183 = v77 - v184;
    v182 = v75 + v77 - v184;
    v81 = v43 < 8 || v44 != 1;
    v170 = v81;
    v193 = v73 + 2;
    v82 = 4 * v78;
    v83 = 16 * v78 + a10 + 32;
    v84 = &v73[4 * v78];
    v179 = (float64x2_t *)(v84 + 8);
    v168 = v83;
    v186 = (float32x4_t *)(a5 + 4);
    v181 = (float64x2_t *)(v84 + 6);
    v171 = (uint64_t)&a13[v82 + 6];
    v174 = v43;
    v175 = v30;
    v173 = v45;
    v169 = v44;
    v172 = v77;
    do
    {
      v85 = v27->f32[v72 * v30];
      if (fabs(v85) > v42)
      {
        v86 = 1.0 / v85;
        if (v25)
        {
          if ((int)v21 > 0)
          {
            v176 = 1.0 / v85;
            bzero(v73, 8 * v21);
            if ((int)v21 < 4)
            {
              v87 = *v73;
              v88 = (float *)(a10 + 8);
              v89 = a5;
              v90 = v174;
              v30 = v175;
              v27 = a3;
              result = a13;
              v24 = v177;
              v48 = 4 * (int)(a9 >> 2);
              v45 = v173;
              v77 = v172;
              v75 = (v74 & 0xFFFFFFFC) + 4;
              v91 = v176;
              do
              {
                v92 = *v89;
                v93 = *(v88 - 2);
                v73[1] = v73[1] + (float)(*v89 * *(v88 - 1));
                if ((_DWORD)v21 != 2)
                  v73[2] = v73[2] + (float)(v92 * *v88);
                v87 = v87 + (float)(v92 * v93);
                v89 = (float *)((char *)v89 + v47);
                v88 = (float *)((char *)v88 + v46);
                --v90;
              }
              while (v90);
              *v73 = v87;
              v25 = a10;
LABEL_89:
              if (v21 >= 4)
              {
                v122 = v21 & 0xFFFFFFFC;
                v123 = (float64x2_t *)(v73 + 2);
                do
                {
                  v124 = vmulq_n_f64(*v123, v91);
                  v123[-1] = vmulq_n_f64(v123[-1], v91);
                  *v123 = v124;
                  v123 += 2;
                  v122 -= 4;
                }
                while (v122);
                v121 = v21 & 0xFFFFFFFC;
                if (v121 == v21)
                  goto LABEL_102;
              }
              else
              {
                v121 = 0;
              }
              v125 = v21 - v121;
              v126 = &v73[v121];
              do
              {
                *v126 = v91 * *v126;
                ++v126;
                --v125;
              }
              while (v125);
              goto LABEL_102;
            }
            v95 = 0;
            v96 = (float32x4_t *)v168;
            v25 = a10;
            v27 = a3;
            v97 = (const float *)a10;
            result = a13;
            v24 = v177;
            v30 = v175;
            v48 = 4 * (int)(a9 >> 2);
            v45 = v173;
            v77 = v172;
            v75 = (v74 & 0xFFFFFFFC) + 4;
            v91 = v176;
            while (2)
            {
              v98 = a5[v95 * v169];
              if (v74 < 0xC)
              {
                v99 = 0;
                goto LABEL_79;
              }
              v100 = v187;
              v101 = v97;
              v102 = (double *)((a15 + 7) & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v103 = v102;
                v196 = vld4q_f64(v103);
                v103 += 8;
                v197 = vld4q_f64(v103);
                v199 = vld4q_f32(v101);
                v101 += 16;
                v104 = vmulq_n_f32(v199.val[0], v98);
                v105 = vcvtq_f64_f32(*(float32x2_t *)v104.f32);
                v200.val[0] = vaddq_f64(v197.val[0], vcvt_hight_f64_f32(v104));
                v106 = vmulq_n_f32(v199.val[1], v98);
                v200.val[1] = vaddq_f64(v197.val[1], vcvt_hight_f64_f32(v106));
                v107 = vmulq_n_f32(v199.val[2], v98);
                v200.val[2] = vaddq_f64(v197.val[2], vcvt_hight_f64_f32(v107));
                v199.val[0] = vmulq_n_f32(v199.val[3], v98);
                v200.val[3] = vaddq_f64(v197.val[3], vcvt_hight_f64_f32(v199.val[0]));
                v197.val[0] = vaddq_f64(v196.val[0], v105);
                v197.val[1] = vaddq_f64(v196.val[1], vcvtq_f64_f32(*(float32x2_t *)v106.f32));
                v197.val[2] = vaddq_f64(v196.val[2], vcvtq_f64_f32(*(float32x2_t *)v107.f32));
                v197.val[3] = vaddq_f64(v196.val[3], vcvtq_f64_f32(*(float32x2_t *)v199.val[0].f32));
                vst4q_f64(v102, v197);
                vst4q_f64(v103, v200);
                v102 += 16;
                v100 -= 4;
              }
              while (v100);
              v99 = 4 * v187;
              if (v189 != v187)
              {
LABEL_79:
                v108 = &v193[v99];
                v109 = 4 * v99 + 8;
                do
                {
                  v110 = *(v108 - 1) + (float)(v98 * v97[v99 + 1]);
                  *(v108 - 2) = *(v108 - 2) + (float)(v98 * *(const float *)((char *)v97 + v109 - 8));
                  *(v108 - 1) = v110;
                  v111 = v108[1] + (float)(v98 * *(const float *)((char *)v97 + v109 + 4));
                  *v108 = *v108 + (float)(v98 * *(const float *)((char *)v97 + v109));
                  v108[1] = v111;
                  v108 += 4;
                  v99 += 4;
                  v109 += 16;
                }
                while (v99 <= v74);
              }
              if ((int)v21 > (int)v99)
              {
                v112 = (v74 & 0xFFFFFFFC) + 4;
                if (v172 < 8)
                  goto LABEL_125;
                v113 = v179;
                v114 = v96;
                v115 = v185;
                do
                {
                  v116 = vmulq_n_f32(v114[-1], v98);
                  v117 = vmulq_n_f32(*v114, v98);
                  v118 = vaddq_f64(v113[-1], vcvt_hight_f64_f32(v116));
                  v119 = vaddq_f64(*v113, vcvtq_f64_f32(*(float32x2_t *)v117.f32));
                  v120 = vaddq_f64(v113[1], vcvt_hight_f64_f32(v117));
                  v113[-2] = vaddq_f64(v113[-2], vcvtq_f64_f32(*(float32x2_t *)v116.f32));
                  v113[-1] = v118;
                  *v113 = v119;
                  v113[1] = v120;
                  v113 += 4;
                  v114 += 2;
                  v115 -= 8;
                }
                while (v115);
                v112 = v180;
                if (v172 != v185)
                {
LABEL_125:
                  do
                  {
                    v73[v112] = v73[v112] + (float)(v98 * v97[v112]);
                    ++v112;
                  }
                  while (v112 < v21);
                }
              }
              ++v95;
              v97 = (const float *)((char *)v97 + v46);
              v96 = (float32x4_t *)((char *)v96 + v46);
              if (v95 == v174)
                goto LABEL_89;
              continue;
            }
          }
        }
        else if ((int)v21 >= 1)
        {
          if (v170)
          {
            v94 = 0;
            goto LABEL_100;
          }
          v127 = v21 & 0xFFFFFFF8;
          v128 = (float64x2_t *)(v73 + 4);
          v129 = v186;
          do
          {
            v130 = v129[-1];
            v131 = vcvt_hight_f64_f32(*v129);
            v132 = vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v129->f32), v86);
            v128[-2] = vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v130.f32), v86);
            v128[-1] = vmulq_n_f64(vcvt_hight_f64_f32(v130), v86);
            *v128 = v132;
            v128[1] = vmulq_n_f64(v131, v86);
            v128 += 4;
            v129 += 2;
            v127 -= 8;
          }
          while (v127);
          v94 = v21 & 0xFFFFFFF8;
          if (v94 != v21)
          {
LABEL_100:
            v133 = v21 - v94;
            v134 = &v73[v94];
            v135 = v47 * v94;
            do
            {
              *v134++ = v86 * *(float *)((char *)a5 + v135);
              v135 += v47;
              --v133;
            }
            while (v133);
          }
LABEL_102:
          if ((int)v21 < 4)
          {
            v136 = 0;
            v137 = *v73;
            v138 = a13 + 2;
            do
            {
              v139 = *(float *)(a8 + 4 * v136);
              v140 = *(v138 - 2) + v139 * v137;
              v141 = *(v138 - 1) + v139 * v73[1];
              *(v138 - 2) = v140;
              *(v138 - 1) = v141;
              if ((_DWORD)v21 != 2)
              {
                v142 = *v138 + v139 * v73[2];
                *v138 = v142;
              }
              ++v136;
              v138 = (float *)((char *)v138 + v49);
            }
            while (v50 != v136);
            goto LABEL_60;
          }
          v143 = 0;
          v144 = (float32x2_t *)v171;
          v145 = result;
          while (2)
          {
            *(double *)&v146 = *(float *)(a8 + 4 * v143);
            if (v74 < 4)
            {
              v147 = 0;
              goto LABEL_114;
            }
            v148 = (float64x2_t)vdupq_lane_s64(v146, 0);
            v149 = v191;
            v150 = (const double *)((a15 + 7) & 0xFFFFFFFFFFFFFFF8);
            v151 = v145;
            do
            {
              v194 = vld4_f32(v151);
              v198 = vld4q_f64(v150);
              v150 += 8;
              v195.val[0] = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v194.val[0]), v198.val[0], v148));
              v195.val[1] = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v194.val[1]), v198.val[1], v148));
              v195.val[2] = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v194.val[2]), v198.val[2], v148));
              v195.val[3] = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v194.val[3]), v198.val[3], v148));
              vst4_f32(v151, v195);
              v151 += 8;
              v149 -= 2;
            }
            while (v149);
            v147 = 4 * v191;
            if (v189 != v191)
            {
LABEL_114:
              v152 = 4 * v147 + 12;
              v153 = &v193[v147];
              do
              {
                v154 = (float *)((char *)v145 + v152);
                v155 = *(float *)((char *)v145 + v152 - 12) + *(double *)&v146 * *(v153 - 2);
                v156 = &v145[v147];
                v157 = v156[1] + *(double *)&v146 * *(v153 - 1);
                *(v154 - 3) = v155;
                v156[1] = v157;
                v158 = *v153;
                v159 = v153[1];
                v153 += 4;
                v160 = v156[2] + *(double *)&v146 * v158;
                *(float *)&v158 = *(float *)((char *)v145 + v152) + *(double *)&v146 * v159;
                v156[2] = v160;
                *v154 = *(float *)&v158;
                v147 += 4;
                v152 += 16;
              }
              while (v147 <= v74);
            }
            if ((int)v21 > (int)v147)
            {
              v161 = v75;
              if (v77 < 4)
                goto LABEL_126;
              v162 = (float64x2_t)vdupq_lane_s64(v146, 0);
              v163 = v144;
              v164 = v181;
              v165 = v183;
              do
              {
                v166 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(*v163), *v164, v162));
                v163[-1] = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v163[-1]), v164[-1], v162));
                *v163 = v166;
                v164 += 2;
                v163 += 2;
                v165 -= 4;
              }
              while (v165);
              v161 = v182;
              if (v184)
              {
LABEL_126:
                do
                {
                  v167 = v145[v161] + *(double *)&v146 * v73[v161];
                  v145[v161++] = v167;
                }
                while (v161 < v21);
              }
            }
            ++v143;
            v145 = (float *)((char *)v145 + v49);
            v144 = (float32x2_t *)((char *)v144 + v49);
            if (v143 == v50)
              break;
            continue;
          }
        }
      }
LABEL_60:
      ++v72;
      a5 = (float *)((char *)a5 + v45);
      a8 += v48;
      v186 = (float32x4_t *)((char *)v186 + v45);
    }
    while (v72 != v24);
  }
  return result;
}

void sub_10022C568(unsigned int a1, int a2, uint64_t a3, uint64_t a4, double *a5, uint64_t a6, int a7, uint64_t a8, double a9, double a10, __n128 a11, uint64_t a12, unint64_t a13, uint64_t a14, unsigned int a15, double *a16, unint64_t a17, uint64_t a18)
{
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  unsigned int v35;
  int v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  double v58;
  unint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  uint64_t v62;
  double *v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double *v67;
  uint64_t v68;
  double *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  BOOL v76;
  double *v77;
  double *v78;
  double *v79;
  double v80;
  double v81;
  double *v82;
  double *v83;
  uint64_t v84;
  double v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  float64x2_t v94;
  uint64_t v95;
  double *v96;
  const double *v97;
  unint64_t v98;
  uint64_t v99;
  double *v100;
  double v101;
  double v102;
  unint64_t v103;
  float64x2_t v104;
  uint64_t v105;
  unint64_t v106;
  float64x2_t *v107;
  float64x2_t v108;
  uint64_t v109;
  uint64_t v110;
  float64x2_t *v111;
  float64x2_t v112;
  uint64_t v113;
  double *v114;
  uint64_t v115;
  uint64_t v116;
  float64x2_t v117;
  float64x2_t *v118;
  uint64_t v119;
  double *v120;
  uint64_t v121;
  uint64_t v122;
  double *v123;
  double v124;
  double v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  double *v132;
  unint64_t v133;
  double *v134;
  double v135;
  double v136;
  double v137;
  unint64_t v138;
  float64x2_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  float64x2_t v143;
  uint64_t v144;
  float64x2_t v145;
  uint64_t v146;
  double *v147;
  const double *v148;
  double v149;
  uint64_t v150;
  double v151;
  double *v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __n128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  double *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  unint64_t v173;
  uint64_t v175;
  uint64_t v177;
  uint64_t v179;
  float64x2x4_t v180;
  float64x2x4_t v181;
  float64x2x4_t v182;
  float64x2x4_t v183;

  v22 = a17 >> 3;
  if (a2 >= (int)a1)
    v23 = a1;
  else
    v23 = a2;
  v160 = v23;
  if (a13)
    v24 = a15;
  else
    v24 = a1;
  if (a2 >= 1 && (int)v24 >= 1)
  {
    v25 = a16;
    v26 = a2;
    do
    {
      bzero(v25, 8 * v24);
      v25 += (int)v22;
      --v26;
    }
    while (v26);
  }
  v28 = v160;
  v27 = a3;
  v29 = a16;
  v30 = a13;
  if ((int)v160 < 1)
    return;
  v31 = 0;
  v32 = (int)(a6 >> 3);
  if (a4)
    v33 = (int)(a4 >> 3);
  else
    v33 = 1;
  v34 = 0.0;
  if ((_DWORD)v160 == 1)
  {
    v35 = a1;
    v36 = a7;
  }
  else
  {
    v35 = a1;
    v36 = a7;
    if (v33 == 1)
    {
      v31 = v160 & 0xFFFFFFFE;
      v37 = (double *)(a3 + 8);
      v38 = v31;
      do
      {
        v34 = v34 + *(v37 - 1) + *v37;
        v37 += 2;
        v38 -= 2;
      }
      while (v38);
      if (v31 == v160)
        goto LABEL_24;
    }
  }
  v39 = v160 - v31;
  v40 = (double *)(a3 + 8 * v33 * v31);
  do
  {
    v34 = v34 + *v40;
    v40 += v33;
    --v39;
  }
  while (v39);
LABEL_24:
  v41 = (int)(a14 >> 3);
  v42 = v34 * 4.4408921e-16;
  v43 = v35;
  if (v36)
    v44 = 1;
  else
    v44 = (int)(a6 >> 3);
  if (!v36)
    v32 = 1;
  v45 = (int)(a12 >> 3);
  v46 = a2;
  if ((_DWORD)v24 != 1)
  {
    v68 = 0;
    v69 = (double *)((a18 + 7) & 0xFFFFFFFFFFFFFFF8);
    v70 = (v24 - 4);
    v71 = (v70 & 0xFFFFFFFC) + 4;
    v72 = ((8 * v70) & 0x7FFFFFFE0) + 32;
    v175 = 8 * (int)v22;
    v73 = (v70 & 0xFFFFFFFC) + 5;
    if (v73 <= v24)
      v73 = v24;
    v167 = (char *)v69 + v72;
    v168 = v73;
    v169 = &v69[v73];
    v171 = 32 * (v70 >> 2) + 32;
    v172 = (char *)v69 + v171;
    v165 = 8 * v32;
    v74 = 8 * v41;
    v170 = (v70 >> 2) + 1;
    v166 = v170 & 0x7FFFFFFE;
    v173 = v73 - (v70 & 0xFFFFFFFC) - 4;
    v164 = v73 & 3;
    v163 = v71 + v173 - v164;
    v157 = v24 & 0xFFFFFFFC;
    v76 = v35 < 4 || v44 != 1;
    v154 = v76;
    v77 = v69 + 6;
    v177 = 8 * v44;
    v179 = 8 * (int)v22;
    v78 = v69 + 4;
    v162 = 8 * v45;
    v79 = a5;
    v155 = v35;
    v156 = v33;
    v153 = v44;
    while (1)
    {
      v80 = *(double *)(v27 + 8 * v68 * v33);
      if (fabs(v80) > v42)
      {
        a11.n128_f64[0] = 1.0 / v80;
        if (v30)
        {
          if ((int)v24 > 0)
          {
            v158 = a11;
            v159 = v68;
            bzero(v69, 8 * v24);
            if ((int)v24 < 4)
            {
              v81 = *v69;
              v82 = (double *)(a13 + 16);
              v83 = v79;
              v84 = v155;
              v33 = v156;
              v27 = a3;
              v29 = a16;
              v30 = a13;
              v28 = v160;
              v68 = v159;
              v72 = ((8 * v70) & 0x7FFFFFFE0) + 32;
              v71 = (v70 & 0xFFFFFFFC) + 4;
              do
              {
                v85 = *v83;
                v81 = v81 + *v83 * *(v82 - 2);
                *v69 = v81;
                v69[1] = v69[1] + v85 * *(v82 - 1);
                if ((_DWORD)v24 != 2)
                  v69[2] = v69[2] + v85 * *v82;
                v83 = (double *)((char *)v83 + v177);
                v82 = (double *)((char *)v82 + v74);
                --v84;
              }
              while (v84);
LABEL_100:
              if (v24 >= 4)
              {
                v110 = v24 & 0xFFFFFFFC;
                v111 = (float64x2_t *)(v69 + 2);
                a11 = v158;
                do
                {
                  v112 = vmulq_n_f64(*v111, v158.n128_f64[0]);
                  v111[-1] = vmulq_n_f64(v111[-1], v158.n128_f64[0]);
                  *v111 = v112;
                  v111 += 2;
                  v110 -= 4;
                }
                while (v110);
                v109 = v24 & 0xFFFFFFFC;
                if (v157 == v24)
                  goto LABEL_113;
              }
              else
              {
                v109 = 0;
                a11 = v158;
              }
              v113 = v24 - v109;
              v114 = &v69[v109];
              do
              {
                *v114 = a11.n128_f64[0] * *v114;
                ++v114;
                --v113;
              }
              while (v113);
              goto LABEL_113;
            }
            v88 = 0;
            v30 = a13;
            v28 = v160;
            v89 = a13;
            v27 = a3;
            v29 = a16;
            v33 = v156;
            v68 = v159;
            v72 = ((8 * v70) & 0x7FFFFFFE0) + 32;
            v71 = (v70 & 0xFFFFFFFC) + 4;
            while (2)
            {
              v90 = v74 * v88;
              v91 = *(uint64_t *)&v79[v88 * v153];
              if (v70 < 4
                || (a13 + v171 + v90 > (unint64_t)v69 ? (v92 = v89 >= (unint64_t)v172) : (v92 = 1), !v92))
              {
                v98 = 0;
                goto LABEL_89;
              }
              v93 = 0;
              v94 = (float64x2_t)vdupq_lane_s64(v91, 0);
              v95 = v170 & 0x7FFFFFFE;
              do
              {
                v96 = &v69[v93];
                v180 = vld4q_f64(v96);
                v97 = (const double *)(v89 + v93 * 8);
                v182 = vld4q_f64(v97);
                v180.val[0] = vmlaq_f64(v180.val[0], v182.val[0], v94);
                v180.val[1] = vmlaq_f64(v180.val[1], v182.val[1], v94);
                v180.val[2] = vmlaq_f64(v180.val[2], v182.val[2], v94);
                v180.val[3] = vmlaq_f64(v180.val[3], v182.val[3], v94);
                vst4q_f64(v96, v180);
                v93 += 8;
                v95 -= 2;
              }
              while (v95);
              v98 = 4 * (v170 & 0x7FFFFFFE);
              if (v170 != v166)
              {
LABEL_89:
                v99 = 8 * v98 + 16;
                do
                {
                  v100 = (double *)((char *)v69 + v99);
                  v101 = *(double *)((char *)v69 + v99 - 8) + *(double *)&v91 * *(double *)(v89 + 8 * v98 + 8);
                  *(v100 - 2) = *(double *)((char *)v69 + v99 - 16) + *(double *)&v91 * *(double *)(v89 + v99 - 16);
                  *(v100 - 1) = v101;
                  v102 = *(double *)((char *)v69 + v99 + 8) + *(double *)&v91 * *(double *)(v89 + v99 + 8);
                  *v100 = *(double *)((char *)v69 + v99) + *(double *)&v91 * *(double *)(v89 + v99);
                  v100[1] = v102;
                  v98 += 4;
                  v99 += 32;
                }
                while (v98 <= v70);
              }
              if ((int)v24 > (int)v98)
              {
                v103 = (v70 & 0xFFFFFFFC) + 4;
                if (v173 < 4)
                  goto LABEL_147;
                if ((unint64_t)v167 < a13 + v168 * 8 + v90)
                {
                  v103 = (v70 & 0xFFFFFFFC) + 4;
                  if (a13 + ((8 * v70) & 0x7FFFFFFE0) + 32 + v90 < (unint64_t)v169)
                    goto LABEL_147;
                }
                v104 = (float64x2_t)vdupq_lane_s64(v91, 0);
                v105 = 4 * (v70 >> 2);
                v106 = v173 - v164;
                do
                {
                  v107 = (float64x2_t *)&v77[v105];
                  v108 = vmlaq_f64(*(float64x2_t *)&v77[v105], *(float64x2_t *)(v89 + v105 * 8 + 48), v104);
                  v107[-1] = vmlaq_f64(*(float64x2_t *)&v77[v105 - 2], *(float64x2_t *)(v89 + v105 * 8 + 32), v104);
                  *v107 = v108;
                  v105 += 4;
                  v106 -= 4;
                }
                while (v106);
                v103 = v163;
                if (v164)
                {
LABEL_147:
                  do
                  {
                    v69[v103] = v69[v103] + *(double *)&v91 * *(double *)(v89 + 8 * v103);
                    ++v103;
                  }
                  while (v103 < v24);
                }
              }
              ++v88;
              v89 += v74;
              if (v88 == v155)
                goto LABEL_100;
              continue;
            }
          }
        }
        else if ((int)v24 >= 1)
        {
          v86 = v154;
          if ((unint64_t)((char *)v69 - ((char *)a5 + v165 * v68)) < 0x20)
            v86 = 1;
          if ((v86 & 1) != 0)
          {
            v87 = 0;
            goto LABEL_111;
          }
          v115 = 0;
          v116 = v24 & 0xFFFFFFFC;
          do
          {
            v117 = vmulq_n_f64(*(float64x2_t *)&v79[v115 + 2], a11.n128_f64[0]);
            v118 = (float64x2_t *)&v69[v115];
            *v118 = vmulq_n_f64(*(float64x2_t *)&v79[v115], a11.n128_f64[0]);
            v118[1] = v117;
            v115 += 4;
            v116 -= 4;
          }
          while (v116);
          v87 = v24 & 0xFFFFFFFC;
          if (v157 != v24)
          {
LABEL_111:
            v119 = v24 - v87;
            v120 = &v69[v87];
            v121 = v177 * v87;
            do
            {
              *v120++ = a11.n128_f64[0] * *(double *)((char *)v79 + v121);
              v121 += v177;
              --v119;
            }
            while (v119);
          }
LABEL_113:
          if ((int)v24 < 4)
          {
            v122 = 0;
            v123 = a16 + 2;
            do
            {
              v124 = *(double *)(a8 + 8 * v122);
              v125 = *(v123 - 1);
              *(v123 - 2) = *(v123 - 2) + v124 * *v69;
              *(v123 - 1) = v125 + v124 * v69[1];
              if ((_DWORD)v24 != 2)
                *v123 = *v123 + v124 * v69[2];
              ++v122;
              v123 = (double *)((char *)v123 + v179);
            }
            while (v46 != v122);
            goto LABEL_62;
          }
          v126 = 0;
          v127 = (unint64_t)v29;
          while (2)
          {
            v128 = v175 * v126;
            v129 = *(uint64_t *)(a8 + 8 * v126);
            if (v70 < 4 || v127 < (unint64_t)v172 && (double *)((char *)v29 + v171 + v128) > v69)
            {
              v130 = 0;
              goto LABEL_124;
            }
            v144 = 0;
            v145 = (float64x2_t)vdupq_lane_s64(v129, 0);
            v146 = v170 & 0x7FFFFFFE;
            do
            {
              v147 = (double *)(v127 + v144 * 8);
              v181 = vld4q_f64(v147);
              v148 = &v69[v144];
              v183 = vld4q_f64(v148);
              a11 = (__n128)vmlaq_f64(v181.val[0], v183.val[0], v145);
              v181.val[1] = vmlaq_f64(v181.val[1], v183.val[1], v145);
              v181.val[2] = vmlaq_f64(v181.val[2], v183.val[2], v145);
              v181.val[3] = vmlaq_f64(v181.val[3], v183.val[3], v145);
              vst4q_f64(v147, *(float64x2x4_t *)a11.n128_u64);
              v144 += 8;
              v146 -= 2;
            }
            while (v146);
            v130 = 4 * (v170 & 0x7FFFFFFE);
            if (v170 != v166)
            {
LABEL_124:
              v131 = 8 * v130;
              v132 = v69 + 2;
              v133 = v127;
              do
              {
                v134 = (double *)(v133 + v131);
                v135 = *(double *)(v133 + v131 + 16);
                v136 = *(double *)(v133 + v131 + 8) + *(double *)&v129 * v132[(unint64_t)v131 / 8 - 1];
                *(double *)(v133 + v131) = *(double *)(v133 + v131)
                                         + *(double *)&v129 * v132[(unint64_t)v131 / 8 - 2];
                v134[1] = v136;
                v137 = *(double *)(v133 + v131 + 24) + *(double *)&v129 * v132[(unint64_t)v131 / 8 + 1];
                v134[2] = v135 + *(double *)&v129 * v132[(unint64_t)v131 / 8];
                v134[3] = v137;
                v130 += 4;
                v133 += 32;
                v132 += 4;
              }
              while (v130 <= v70);
            }
            if ((int)v24 > (int)v130)
            {
              v138 = v71;
              if (v173 < 4)
                goto LABEL_148;
              if ((double *)((char *)v29 + v72 + v128) < v169)
              {
                v138 = v71;
                if (v167 < (char *)&v29[v168] + v128)
                  goto LABEL_148;
              }
              v139 = (float64x2_t)vdupq_lane_s64(v129, 0);
              v140 = 4 * (v70 >> 2);
              v141 = v173 - v164;
              do
              {
                v142 = v127 + v140 * 8;
                a11 = (__n128)vmlaq_f64(*(float64x2_t *)(v127 + v140 * 8 + 32), *(float64x2_t *)&v78[v140], v139);
                v143 = vmlaq_f64(*(float64x2_t *)(v127 + v140 * 8 + 48), *(float64x2_t *)&v78[v140 + 2], v139);
                *(__n128 *)(v142 + 32) = a11;
                *(float64x2_t *)(v142 + 48) = v143;
                v140 += 4;
                v141 -= 4;
              }
              while (v141);
              v138 = v163;
              if (v164)
              {
LABEL_148:
                do
                {
                  *(double *)(v127 + 8 * v138) = *(double *)(v127 + 8 * v138) + *(double *)&v129 * v69[v138];
                  ++v138;
                }
                while (v138 < v24);
              }
            }
            ++v126;
            v127 += v179;
            if (v126 == v46)
              break;
            continue;
          }
        }
      }
LABEL_62:
      ++v68;
      v79 = (double *)((char *)v79 + v165);
      a8 += v162;
      if (v68 == v28)
        return;
    }
  }
  v47 = 0;
  if (a13)
  {
    v48 = 8 * v32;
    v51 = v44 != 1 || v41 != 1 || v35 < 6;
    v52 = (8 * v35) & 0x7FFFFFFE0;
    v53 = 8 * v41;
    v54 = 8 * v44;
    v55 = 8 * v45;
    while (1)
    {
      v56 = *(double *)(a3 + 8 * v47 * v33);
      if (fabs(v56) > v42)
        break;
LABEL_41:
      ++v47;
      a5 = (double *)((char *)a5 + v48);
      a8 += v55;
      if (v47 == v160)
        return;
    }
    if (v51)
    {
      v57 = 0;
      v58 = 0.0;
    }
    else
    {
      v59 = 0;
      v58 = 0.0;
      do
      {
        v60 = vmulq_f64(*(float64x2_t *)&a5[v59 / 8], *(float64x2_t *)(a13 + v59));
        v61 = vmulq_f64(*(float64x2_t *)&a5[v59 / 8 + 2], *(float64x2_t *)(a13 + v59 + 16));
        v58 = v58 + v60.f64[0] + v60.f64[1] + v61.f64[0] + v61.f64[1];
        v59 += 32;
      }
      while (v52 != v59);
      v57 = v43 & 0xFFFFFFFC;
      if (v57 == v43)
        goto LABEL_50;
    }
    v62 = v43 - v57;
    v63 = (double *)(a13 + v53 * v57);
    v64 = v54 * v57;
    do
    {
      v58 = v58 + *(double *)((char *)a5 + v64) * *v63;
      v63 = (double *)((char *)v63 + v53);
      v64 += v54;
      --v62;
    }
    while (v62);
LABEL_50:
    v65 = 0;
    v66 = 1.0 / v56 * v58;
    v67 = a16;
    do
    {
      *v67 = *v67 + v66 * *(double *)(a8 + 8 * v65++);
      v67 += (int)v22;
    }
    while (a2 != v65);
    goto LABEL_41;
  }
  do
  {
    v149 = *(double *)(a3 + 8 * v47 * v33);
    if (fabs(v149) > v42)
    {
      v150 = 0;
      v151 = 1.0 / v149 * *a5;
      v152 = a16;
      do
      {
        *v152 = *v152 + v151 * *(double *)(a8 + 8 * v150++);
        v152 += (int)v22;
      }
      while (a2 != v150);
    }
    ++v47;
    a5 += v32;
    a8 += 8 * v45;
  }
  while (v47 != v160);
}

void sub_10022CF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  int v18;
  __int16 v19;
  unsigned int v20;
  int v21;
  signed int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  _BYTE *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _BOOL4 v70;
  int v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE v74[64];
  _BYTE *v75;
  _BYTE *v76;
  _BYTE v77[16];
  _BYTE v78[64];
  _BYTE *v79;
  void *v80;
  int v81[2];
  uint64_t v82;
  _BYTE v83[4];
  int v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  int v90[2];
  _BYTE v91[4];
  int v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  _BYTE v99[4];
  int v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  void *v113;
  _QWORD v114[2];
  _BYTE *v115;
  unint64_t v116;
  _BYTE v117[1032];

  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_OWORD *)(v10 + 16);
    v107 = *(_OWORD *)v10;
    v108 = v11;
    v109 = *(_OWORD *)(v10 + 32);
    v12 = *(_QWORD *)(v10 + 56);
    v110 = *(_QWORD *)(v10 + 48);
    v111 = v12;
    v112 = (char *)&v107 + 8;
    v113 = v114;
    v114[1] = 0;
    v114[0] = 0;
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 20);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    if (*(int *)(v10 + 4) > 2)
    {
      DWORD1(v107) = 0;
      sub_100256B48((uint64_t)&v107, v10);
    }
    else
    {
      v15 = *(_QWORD **)(v10 + 72);
      v16 = v113;
      *(_QWORD *)v113 = *v15;
      v16[1] = v15[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v107);
  }
  v17 = HIDWORD(v107);
  v18 = DWORD2(v107);
  v19 = v107;
  v70 = sub_1002637F8(a3) || sub_1002637F8(a4);
  v20 = v19 & 0xFFF;
  if (v20 - 5 >= 2)
  {
    v116 = 0;
    v115 = 0;
    qmemcpy((void *)sub_10029430C(&v115, 22), "type == 5 || type == 6", 22);
    sub_100294B74(-215, (uint64_t *)&v115, "_SVDcompute", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1473);
  }
  if ((a5 & 2) != 0)
  {
    sub_100261B50(a3);
    sub_100261B50(a4);
    v69 = v17;
    v70 = 0;
    if (v18 <= v17)
      v21 = v17;
    else
      v21 = v18;
    if (v18 >= v17)
      v22 = v17;
    else
      v22 = v18;
    v23 = v22;
    v24 = DWORD1(v107) - 1;
    v67 = a3;
    v68 = a4;
    v66 = a2;
    if (SDWORD1(v107) >= 1)
      goto LABEL_25;
  }
  else
  {
    if (v18 <= v17)
      v21 = v17;
    else
      v21 = v18;
    if (v18 >= v17)
      v22 = v17;
    else
      v22 = v18;
    if ((a5 & 4) != 0)
      v23 = v21;
    else
      v23 = v22;
    v24 = DWORD1(v107) - 1;
    v67 = a3;
    v68 = a4;
    v66 = a2;
    v69 = v17;
    if (SDWORD1(v107) >= 1)
    {
LABEL_25:
      v25 = *((_QWORD *)v113 + v24);
      goto LABEL_34;
    }
  }
  v25 = 0;
LABEL_34:
  v26 = (v25 * v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v27 = v25 * v22;
  v28 = v26 * v23;
  v115 = v117;
  v116 = v27 + ((v27 + 15) & 0xFFFFFFFFFFFFFFF0) * v22 + v28 + 32;
  if (v116 >= 0x409)
    operator new[]();
  sub_10000A364((uint64_t)v99, v22, v21, v20, (uint64_t)v117, v26);
  v29 = &v117[v28];
  sub_10000A364((uint64_t)v91, v22, 1, v20, (uint64_t)v29, 0);
  sub_10000A364((uint64_t)v83, v23, v21, v20, (uint64_t)v117, v26);
  *(_DWORD *)v78 = 1124007936;
  memset(&v78[4], 0, 60);
  v79 = &v78[8];
  v80 = v81;
  *(_QWORD *)v81 = 0;
  v82 = 0;
  if (v70)
  {
    sub_10000A364((uint64_t)v74, v22, v22, v20, (unint64_t)&v29[v27 + 15] & 0xFFFFFFFFFFFFFFF0, (v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (*(_QWORD *)&v78[56])
    {
      v30 = (unsigned int *)(*(_QWORD *)&v78[56] + 20);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
        sub_100256C90((uint64_t)v78);
    }
    if (*(int *)&v78[4] >= 1)
    {
      v33 = 0;
      v34 = v79;
      do
        *(_DWORD *)&v34[4 * v33++] = 0;
      while (v33 < *(int *)&v78[4]);
    }
    *(_OWORD *)v78 = *(_OWORD *)v74;
    *(_OWORD *)&v78[16] = *(_OWORD *)&v74[16];
    *(_OWORD *)&v78[32] = *(_OWORD *)&v74[32];
    *(_OWORD *)&v78[48] = *(_OWORD *)&v74[48];
    if (v80 == v81)
    {
      v35 = v76;
      if (*(int *)&v74[4] <= 2)
        goto LABEL_47;
    }
    else
    {
      j__free(v80);
      v79 = &v78[8];
      v80 = v81;
      v35 = v76;
      if (*(int *)&v74[4] <= 2)
      {
LABEL_47:
        *(_QWORD *)v81 = *v35;
        v82 = v35[1];
        goto LABEL_50;
      }
    }
    v79 = v75;
    v80 = v35;
    v35 = v77;
    v75 = &v74[8];
    v76 = v77;
LABEL_50:
    *(_DWORD *)v74 = 1124007936;
    memset(&v74[4], 0, 60);
    if (v35 != (_QWORD *)v77)
      j__free(v35);
  }
  if (v23 > v22)
  {
    memset(v74, 0, 32);
    sub_10021956C((uint64_t)v83, (uint64_t)v74);
  }
  if (v18 >= v69)
  {
    *(_DWORD *)v74 = 16842752;
    *(_QWORD *)&v74[8] = &v107;
    *(_QWORD *)&v74[16] = 0;
    v71 = 33619968;
    v72 = v99;
    v73 = 0;
    sub_10025BCD8((uint64_t)v74, (uint64_t)&v71);
  }
  else
  {
    *(_DWORD *)v74 = 33619968;
    *(_QWORD *)&v74[8] = v99;
    *(_QWORD *)&v74[16] = 0;
    sub_1002181EC((uint64_t)&v107, (uint64_t)v74);
  }
  if (v70)
    v38 = v23;
  else
    v38 = 0;
  if (v20 == 5)
    sub_100223F38((float32x2_t *)v101, *(unint64_t *)v90, (float32x4_t *)v93, v36, v37, *(float32x4_t **)&v78[16], *(unint64_t *)v81, v21, v22, v38);
  else
    sub_100225DF4((double *)v101, *(unint64_t *)v90, (void *)v93, v36, v37, *(char **)&v78[16], *(unint64_t *)v81, v21, v22, v38);
  sub_1002181EC((uint64_t)v91, v66);
  if (v70)
  {
    if (v18 >= v69)
    {
      if (sub_1002637F8(v67))
      {
        *(_DWORD *)v74 = 16842752;
        *(_QWORD *)&v74[8] = v83;
        *(_QWORD *)&v74[16] = 0;
        sub_10025BCD8((uint64_t)v74, v67);
      }
      if (sub_1002637F8(v68))
      {
        v39 = v78;
        goto LABEL_73;
      }
    }
    else
    {
      if (sub_1002637F8(v67))
      {
        *(_DWORD *)v74 = 16842752;
        *(_QWORD *)&v74[8] = v78;
        *(_QWORD *)&v74[16] = 0;
        sub_10025BCD8((uint64_t)v74, v67);
      }
      if (sub_1002637F8(v68))
      {
        v39 = v83;
LABEL_73:
        sub_1002181EC((uint64_t)v39, v68);
      }
    }
  }
  if (*(_QWORD *)&v78[56])
  {
    v40 = (unsigned int *)(*(_QWORD *)&v78[56] + 20);
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
      sub_100256C90((uint64_t)v78);
  }
  *(_QWORD *)&v78[56] = 0;
  memset(&v78[16], 0, 32);
  if (*(int *)&v78[4] >= 1)
  {
    v43 = 0;
    v44 = v79;
    do
      *(_DWORD *)&v44[4 * v43++] = 0;
    while (v43 < *(int *)&v78[4]);
  }
  if (v80 != v81)
    j__free(v80);
  if (v87)
  {
    v45 = (unsigned int *)(v87 + 20);
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
      sub_100256C90((uint64_t)v83);
  }
  v87 = 0;
  v85 = 0u;
  v86 = 0u;
  if (v84 >= 1)
  {
    v48 = 0;
    v49 = v88;
    do
      *(_DWORD *)(v49 + 4 * v48++) = 0;
    while (v48 < v84);
  }
  if (v89 != v90)
    j__free(v89);
  if (v95)
  {
    v50 = (unsigned int *)(v95 + 20);
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
      sub_100256C90((uint64_t)v91);
  }
  v95 = 0;
  v93 = 0u;
  v94 = 0u;
  if (v92 >= 1)
  {
    v53 = 0;
    v54 = v96;
    do
      *(_DWORD *)(v54 + 4 * v53++) = 0;
    while (v53 < v92);
  }
  if (v97 != &v98)
    j__free(v97);
  if (v103)
  {
    v55 = (unsigned int *)(v103 + 20);
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
      sub_100256C90((uint64_t)v99);
  }
  v103 = 0;
  v101 = 0u;
  v102 = 0u;
  if (v100 >= 1)
  {
    v58 = 0;
    v59 = v104;
    do
      *(_DWORD *)(v59 + 4 * v58++) = 0;
    while (v58 < v100);
  }
  if (v105 != &v106)
    j__free(v105);
  if (v115 != v117 && v115 != 0)
    operator delete[]();
  if (v111)
  {
    v61 = (unsigned int *)(v111 + 20);
    do
    {
      v62 = __ldaxr(v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v61));
    if (!v63)
      sub_100256C90((uint64_t)&v107);
  }
  v111 = 0;
  v108 = 0u;
  v109 = 0u;
  if (SDWORD1(v107) >= 1)
  {
    v64 = 0;
    v65 = v112;
    do
      *(_DWORD *)&v65[4 * v64++] = 0;
    while (v64 < SDWORD1(v107));
  }
  if (v113 != v114)
    j__free(v113);
}

void sub_10022D7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_100006BE4((uint64_t)&a31);
  sub_100006BE4((uint64_t)&a43);
  sub_100006BE4((uint64_t)&a55);
  sub_100006BE4((uint64_t)&a67);
  if (STACK[0x290] != a14)
  {
    if (STACK[0x290])
      operator delete[]();
  }
  sub_100006BE4((uint64_t)&STACK[0x230]);
  _Unwind_Resume(a1);
}

uint64_t sub_10022D8E0(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, unint64_t a5, int a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12)
{
  unint64_t v15;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  float v35;
  float *v36;
  uint64_t i;
  float v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  BOOL v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  float v66;
  int v67;
  float *v68;
  float *v69;
  int v70;
  float v71;
  float v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t *v86;
  float32x4_t *v87;
  uint64_t v88;
  float32x4_t v89;
  float32x4_t v90;
  BOOL v91;
  float *v92;
  float *v93;
  int v94;
  float v95;
  float v96;
  BOOL v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t *v100;
  uint64_t v101;
  float32x4_t *v102;
  float32x4_t v103;
  float32x4_t v104;
  uint64_t v105;
  float *v106;
  float *v107;
  uint64_t v108;
  float v109;
  float v110;
  int v111;
  float v112;
  float *v113;
  float v114;
  float v115;
  int v116;
  float v117;
  float *v118;
  uint64_t j;
  float v120;
  int v121;
  float v122;
  float *v123;
  float v124;
  float v125;
  float v126;
  float *v127;
  uint64_t k;
  float v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  BOOL v142;
  char *v143;
  uint64_t v144;
  __int128 *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v163;
  char *v164;
  unint64_t v165;
  char *v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;

  v166 = a4;
  if (a4)
  {
    if (a6 < 1)
      return 1;
    v167 = a2;
    v168 = a7;
    v165 = a5 >> 2;
    v15 = a5 & 0xFFFFFFFFFFFFFFFCLL;
    v16 = (a5 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    v17 = a4;
    v18 = a4;
    v19 = a6;
    do
    {
      bzero(v17, 4 * a6);
      *v18 = 1065353216;
      v18 = (_DWORD *)((char *)v18 + v16);
      v17 += v15;
      --v19;
    }
    while (v19);
    a5 = v165;
    a4 = v166;
    a2 = v167;
    a7 = v168;
  }
  v20 = (a6 - 1);
  if (a6 >= 1)
  {
    v21 = 0;
    v22 = a2 >> 2;
    v23 = 30 * a6 * a6;
    v24 = (int *)((a7 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v25 = a6;
    v26 = &v24[a6];
    v27 = 4 * (a2 >> 2);
    v28 = (float *)(a1 + v27);
    v29 = a1;
    do
    {
      *(_DWORD *)(a3 + 4 * v21) = *(_DWORD *)(a1 + 4 * ((a2 >> 2) + 1) * v21);
      if (v21 < v20)
      {
        v31 = v21 + 1;
        if ((int)v21 + 2 < a6)
        {
          v32 = fabsf(*(float *)(a1 + 4 * (v22 * v21 + v31)));
          v33 = 2;
          do
          {
            v34 = fabsf(*(float *)(v29 + 4 * v33));
            if (v32 < v34)
            {
              LODWORD(v31) = v21 + v33;
              v32 = v34;
            }
            ++v33;
          }
          while (v21 - a6 + v33);
        }
        v24[v21] = v31;
      }
      if (v21)
      {
        if (v21 == 1)
        {
          v30 = 0;
        }
        else
        {
          v30 = 0;
          v35 = fabsf(*(float *)(a1 + 4 * v21));
          v36 = v28;
          for (i = 1; i != v21; ++i)
          {
            v38 = fabsf(*v36);
            if (v35 < v38)
            {
              v30 = i;
              v35 = v38;
            }
            v36 = (float *)((char *)v36 + v27);
          }
        }
        v26[v21] = v30;
      }
      ++v21;
      v29 += v27 + 4;
      ++v28;
    }
    while (v21 != a6);
    if (a6 >= 2 && v23)
    {
      v39 = 0;
      v40 = 4 * a5;
      v163 = a1 + 4;
      v164 = &a4[4 * a6];
      v169 = a5;
      while (1)
      {
        v42 = *v24;
        v43 = fabsf(*(float *)(a1 + 4 * v42));
        if (a6 < 3)
        {
          LODWORD(v44) = 0;
        }
        else
        {
          LODWORD(v44) = 0;
          v45 = v22;
          v46 = 1;
          do
          {
            v47 = fabsf(*(float *)(a1 + 4 * (v45 + v24[v46])));
            if (v43 < v47)
            {
              LODWORD(v44) = v46;
              v43 = v47;
            }
            ++v46;
            v45 += v22;
          }
          while (v20 != v46);
          LODWORD(v42) = v24[(int)v44];
        }
        v48 = 1;
        do
        {
          v49 = v26[v48];
          v50 = fabsf(*(float *)(a1 + 4 * (v48 + v22 * v49)));
          if (v43 >= v50)
            v44 = v44;
          else
            v44 = v49;
          if (v43 >= v50)
          {
            v42 = v42;
          }
          else
          {
            v43 = v50;
            v42 = v48;
          }
          ++v48;
        }
        while (a6 != v48);
        v51 = v22 * (int)v44;
        v52 = v51 + (int)v42;
        v53 = *(float *)(a1 + 4 * v52);
        v54 = fabsf(v53);
        if (v54 <= 0.00000011921)
          goto LABEL_123;
        v55 = (float)(*(float *)(a3 + 4 * (int)v42) - *(float *)(a3 + 4 * (int)v44)) * 0.5;
        v56 = fabsf(v55);
        if (v54 <= v56)
        {
          v57 = 0.0;
          if (v55 != 0.0)
            v57 = v56 * sqrtf((float)((float)(v54 / v56) * (float)(v54 / v56)) + 1.0);
        }
        else
        {
          v57 = v54 * sqrtf((float)((float)(v56 / v54) * (float)(v56 / v54)) + 1.0);
        }
        v58 = v56 + v57;
        v59 = fabsf(v58);
        if (v54 <= v59)
        {
          v60 = 0.0;
          if (v58 != 0.0)
            v60 = v59 * sqrtf((float)((float)(v54 / v59) * (float)(v54 / v59)) + 1.0);
        }
        else
        {
          v60 = v54 * sqrtf((float)((float)(v59 / v54) * (float)(v59 / v54)) + 1.0);
        }
        *(float *)&a11 = v58 / v60;
        v61 = v55 < 0.0;
        if (v55 >= 0.0)
          v62 = v53 * (float)(v53 / v58);
        else
          v62 = -(float)(v53 * (float)(v53 / v58));
        if (v61)
          *(float *)&a12 = -(float)(v53 / v60);
        else
          *(float *)&a12 = v53 / v60;
        *(_DWORD *)(a1 + 4 * v52) = 0;
        *(float *)(a3 + 4 * (int)v44) = *(float *)(a3 + 4 * (int)v44) - v62;
        *(float *)(a3 + 4 * (int)v42) = v62 + *(float *)(a3 + 4 * (int)v42);
        if ((int)v44 >= 1)
        {
          v63 = v44;
          v64 = a1;
          do
          {
            v65 = *(float *)(v64 + 4 * (int)v44);
            v66 = *(float *)(v64 + 4 * (int)v42);
            *(float *)(v64 + 4 * (int)v44) = (float)(v65 * *(float *)&a11) - (float)(v66 * *(float *)&a12);
            *(float *)(v64 + 4 * (int)v42) = (float)(*(float *)&a11 * v66) + (float)(v65 * *(float *)&a12);
            v64 += v27;
            --v63;
          }
          while (v63);
        }
        v67 = v44 + 1;
        if ((int)v44 + 1 < (int)v42)
        {
          v68 = (float *)(a1 + 4 * (v51 + v67));
          v69 = (float *)(a1 + 4 * ((int)v42 + v22 * v67));
          v70 = ~(_DWORD)v44 + v42;
          do
          {
            v71 = *v68;
            v72 = *v69;
            *v68 = (float)(*v68 * *(float *)&a11) - (float)(*v69 * *(float *)&a12);
            ++v68;
            *v69 = (float)(*(float *)&a11 * v72) + (float)(v71 * *(float *)&a12);
            v69 = (float *)((char *)v69 + v27);
            --v70;
          }
          while (v70);
        }
        v73 = v42 + 1;
        if ((int)v42 + 1 < a6)
        {
          v74 = v22 * (int)v42;
          v75 = v73;
          v76 = (a6 - 2 - v42);
          if (v76 < 7)
            goto LABEL_77;
          v77 = 4 * (v51 + v73);
          v78 = a1 + v77;
          v79 = v163 + v77 + 4 * v76;
          v80 = v74 + v73;
          v74 = v22 * (int)v42;
          v81 = v78 >= v163 + 4 * v76 + 4 * v80 || a1 + 4 * v80 >= v79;
          v23 = 30 * a6 * a6;
          a4 = v166;
          if (!v81)
            goto LABEL_77;
          v82 = v76 + 1;
          v83 = (v76 + 1) & 0x1FFFFFFFCLL;
          v84 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a12, 0);
          v75 = v83 + v73;
          v85 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0);
          v86 = (float32x4_t *)(a1 + 4 * (v51 + v73));
          v87 = (float32x4_t *)(a1 + 4 * v80);
          v88 = v83;
          do
          {
            v89 = *v86;
            v90 = *v87;
            *v86 = vmlaq_f32(vmulq_n_f32(vnegq_f32(*v87), *(float *)&a12), v85, *v86);
            ++v86;
            *v87++ = vmlaq_f32(vmulq_n_f32(v90, *(float *)&a11), v84, v89);
            v88 -= 4;
          }
          while (v88);
          v91 = v82 == v83;
          a4 = v166;
          v23 = 30 * a6 * a6;
          if (!v91)
          {
LABEL_77:
            v92 = (float *)(a1 + 4 * (v75 + v51));
            v93 = (float *)(a1 + 4 * (v75 + v74));
            v94 = a6 - v75;
            do
            {
              v95 = *v92;
              v96 = *v93;
              *v92 = (float)(*v92 * *(float *)&a11) - (float)(*v93 * *(float *)&a12);
              ++v92;
              *v93++ = (float)(*(float *)&a11 * v96) + (float)(v95 * *(float *)&a12);
              --v94;
            }
            while (v94);
          }
        }
        v25 = a6;
        a5 = v169;
        if (a4)
        {
          if (a6 >= 4
            && (&a4[v40 * (int)v44] < &v164[v40 * (int)v42]
              ? (v97 = &a4[v40 * (int)v42] >= &v164[v40 * (int)v44])
              : (v97 = 1),
                v97))
          {
            v98 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a12, 0);
            v99 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0);
            v100 = (float32x4_t *)&a4[v40 * (int)v44];
            v101 = a6 & 0xFFFFFFFC;
            v102 = (float32x4_t *)&a4[v40 * (int)v42];
            do
            {
              v103 = *v100;
              v104 = *v102;
              *v100 = vmlaq_f32(vmulq_n_f32(vnegq_f32(*v102), *(float *)&a12), v99, *v100);
              ++v100;
              *v102++ = vmlaq_f32(vmulq_n_f32(v104, *(float *)&a11), v98, v103);
              v101 -= 4;
            }
            while (v101);
            v105 = a6 & 0xFFFFFFFC;
            if (v105 == a6)
              goto LABEL_93;
          }
          else
          {
            v105 = 0;
          }
          v106 = (float *)&a4[4 * v105 + 4 * v169 * (int)v42];
          v107 = (float *)&a4[4 * v105 + 4 * v169 * (int)v44];
          v108 = a6 - v105;
          do
          {
            v109 = *v107;
            v110 = *v106;
            *v107 = (float)(*v107 * *(float *)&a11) - (float)(*v106 * *(float *)&a12);
            ++v107;
            *v106++ = (float)(*(float *)&a11 * v110) + (float)(v109 * *(float *)&a12);
            --v108;
          }
          while (v108);
        }
LABEL_93:
        if ((int)v44 < (int)v20)
        {
          v111 = v44 + 2;
          if ((int)v44 + 2 < a6)
          {
            v112 = fabsf(*(float *)(a1 + 4 * (v51 + v67)));
            v113 = (float *)(a1 + 4 * (v51 + v111));
            do
            {
              v114 = *v113++;
              v115 = fabsf(v114);
              if (v112 < v115)
              {
                v67 = v111;
                v112 = v115;
              }
              ++v111;
            }
            while (a6 != v111);
          }
          v24[(int)v44] = v67;
        }
        if ((int)v44 >= 1)
        {
          if ((_DWORD)v44 == 1)
          {
            v116 = 0;
          }
          else
          {
            v116 = 0;
            v117 = fabsf(*(float *)(a1 + 4 * v44));
            v118 = (float *)(a1 + 4 * (v22 + v44));
            for (j = 1; j != v44; ++j)
            {
              v120 = fabsf(*v118);
              if (v117 < v120)
              {
                v116 = j;
                v117 = v120;
              }
              v118 = (float *)((char *)v118 + v27);
            }
          }
          v26[v44] = v116;
        }
        if ((int)v42 < (int)v20)
        {
          v121 = v42 + 2;
          if ((int)v42 + 2 < a6)
          {
            v122 = fabsf(*(float *)(a1 + 4 * (v22 * (int)v42 + v73)));
            v123 = (float *)(a1 + 4 * (v22 * (int)v42 + v121));
            do
            {
              v124 = *v123++;
              v125 = fabsf(v124);
              if (v122 < v125)
              {
                v73 = v121;
                v122 = v125;
              }
              ++v121;
            }
            while (a6 != v121);
          }
          v24[(int)v42] = v73;
        }
        if ((int)v42 >= 1)
        {
          if ((_DWORD)v42 == 1)
          {
            v41 = 0;
          }
          else
          {
            v41 = 0;
            v126 = fabsf(*(float *)(a1 + 4 * v42));
            v127 = (float *)(a1 + 4 * (v22 + v42));
            for (k = 1; k != v42; ++k)
            {
              v129 = fabsf(*v127);
              if (v126 < v129)
              {
                v41 = k;
                v126 = v129;
              }
              v127 = (float *)((char *)v127 + v27);
            }
          }
          v26[v42] = v41;
        }
        if (++v39 == v23)
          goto LABEL_123;
      }
    }
    if (a6 > 1)
    {
LABEL_123:
      if (a4)
      {
        v130 = 0;
        v131 = 0;
        v132 = 4 * a5;
        v133 = &a4[4 * a6];
        v134 = 1;
        v135 = a4 + 16;
        while (1)
        {
          v136 = v131 + 1;
          if (v131 + 1 >= v25)
          {
            v138 = v131;
            if (v131 == v131)
              goto LABEL_125;
          }
          else
          {
            v137 = v134;
            v138 = v131;
            do
            {
              if (*(float *)(a3 + 4 * v138) < *(float *)(a3 + 4 * v137))
                v138 = v137;
              ++v137;
            }
            while (a6 != v137);
            if (v131 == v138)
              goto LABEL_125;
          }
          v139 = 4 * v138;
          v140 = *(_DWORD *)(a3 + v139);
          *(_DWORD *)(a3 + v139) = *(_DWORD *)(a3 + 4 * v131);
          *(_DWORD *)(a3 + 4 * v131) = v140;
          if (a6 >= 8
            && ((v141 = v132 * v131, &a4[v132 * v138] < &v133[v141])
              ? (v142 = &a4[v141] >= &v133[v132 * v138])
              : (v142 = 1),
                v142))
          {
            v143 = &a4[v132 * v138 + 16];
            v144 = a6 & 0xFFFFFFF8;
            v145 = (__int128 *)v135;
            do
            {
              v146 = *((_OWORD *)v143 - 1);
              v147 = *(_OWORD *)v143;
              v148 = *v145;
              *((_OWORD *)v143 - 1) = *(v145 - 1);
              *(_OWORD *)v143 = v148;
              *(v145 - 1) = v146;
              *v145 = v147;
              v143 += 32;
              v145 += 2;
              v144 -= 8;
            }
            while (v144);
            v149 = a6 & 0xFFFFFFF8;
            if (v149 == a6)
              goto LABEL_125;
          }
          else
          {
            v149 = 0;
          }
          v150 = &a4[4 * v149 + 4 * v130];
          v151 = &a4[4 * v149 + 4 * a5 * v138];
          v152 = a6 - v149;
          do
          {
            v153 = *(_DWORD *)v151;
            *(_DWORD *)v151 = *(_DWORD *)v150;
            v151 += 4;
            *(_DWORD *)v150 = v153;
            v150 += 4;
            --v152;
          }
          while (v152);
LABEL_125:
          ++v134;
          v135 += v132;
          v130 += a5;
          v131 = v136;
          if (v136 == v20)
            return 1;
        }
      }
      v154 = 0;
      v155 = 1;
      do
      {
        v156 = v154 + 1;
        v157 = v154;
        v158 = v155;
        if (v154 + 1 < v25)
        {
          do
          {
            if (*(float *)(a3 + 4 * v157) < *(float *)(a3 + 4 * v158))
              v157 = v158;
            ++v158;
          }
          while (a6 != v158);
        }
        if (v154 != v157)
        {
          v159 = 4 * v157;
          v160 = 4 * v154;
          v161 = *(_DWORD *)(a3 + v159);
          *(_DWORD *)(a3 + v159) = *(_DWORD *)(a3 + v160);
          *(_DWORD *)(a3 + v160) = v161;
        }
        ++v155;
        v154 = v156;
      }
      while (v156 != v20);
    }
  }
  return 1;
}

uint64_t sub_10022E210(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, unint64_t a5, int a6, uint64_t a7)
{
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  double *v30;
  uint64_t i;
  double v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  BOOL v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  int v65;
  double *v66;
  double *v67;
  int v68;
  double v69;
  double v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t *v89;
  float64x2_t *v90;
  uint64_t v91;
  float64x2_t v92;
  float64x2_t v93;
  BOOL v94;
  double *v95;
  double *v96;
  int v97;
  double v98;
  double v99;
  BOOL v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t *v103;
  uint64_t v104;
  float64x2_t *v105;
  float64x2_t v106;
  float64x2_t v107;
  uint64_t v108;
  double *v109;
  double *v110;
  uint64_t v111;
  double v112;
  double v113;
  int v114;
  double v115;
  double *v116;
  double v117;
  double v118;
  int v119;
  double v120;
  double *v121;
  uint64_t j;
  double v123;
  int v124;
  double v125;
  double *v126;
  double v127;
  double v128;
  double v129;
  double *v130;
  uint64_t k;
  double v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  char *v146;
  uint64_t v147;
  __int128 *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;

  v173 = a4;
  if (a4)
  {
    if (a6 < 1)
      return 1;
    v170 = a2;
    v171 = a7;
    v168 = a5 >> 3;
    v10 = a5 & 0xFFFFFFFFFFFFFFF8;
    v11 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    v12 = a4;
    v13 = a4;
    v14 = a6;
    do
    {
      bzero(v12, 8 * a6);
      *v13 = 0x3FF0000000000000;
      v13 = (_QWORD *)((char *)v13 + v11);
      v12 += v10;
      --v14;
    }
    while (v14);
    a5 = v168;
    a2 = v170;
    a7 = v171;
    a4 = v173;
  }
  v15 = (a6 - 1);
  if (a6 >= 1)
  {
    v16 = 0;
    v17 = a2 >> 3;
    v18 = (int *)((a7 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v19 = a6;
    v20 = &v18[a6];
    v21 = 8 * (a2 >> 3);
    v22 = (double *)(a1 + v21);
    v23 = a1;
    do
    {
      *(_QWORD *)(a3 + 8 * v16) = *(_QWORD *)(a1 + 8 * ((a2 >> 3) + 1) * v16);
      if (v16 < v15)
      {
        v25 = v16 + 1;
        if ((int)v16 + 2 < a6)
        {
          v26 = fabs(*(double *)(a1 + 8 * (v17 * v16 + v25)));
          v27 = 2;
          do
          {
            v28 = fabs(*(double *)(v23 + 8 * v27));
            if (v26 < v28)
            {
              LODWORD(v25) = v16 + v27;
              v26 = v28;
            }
            ++v27;
          }
          while (v16 - a6 + v27);
        }
        v18[v16] = v25;
      }
      if (v16)
      {
        if (v16 == 1)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          v29 = fabs(*(double *)(a1 + 8 * v16));
          v30 = v22;
          for (i = 1; i != v16; ++i)
          {
            v32 = fabs(*v30);
            if (v29 < v32)
            {
              v24 = i;
              v29 = v32;
            }
            v30 = (double *)((char *)v30 + v21);
          }
        }
        v20[v16] = v24;
      }
      ++v16;
      v23 += v21 + 8;
      ++v22;
    }
    while (v16 != a6);
    v33 = (a6 - 2);
    v34 = 30 * a6 * a6;
    if (a6 >= 2 && 30 * a6 * a6)
    {
      v35 = 0;
      v36 = 8 * a5;
      v166 = a1 + 8;
      v169 = &a4[8 * a6];
      v172 = a5;
      while (1)
      {
        v38 = *v18;
        v39 = fabs(*(double *)(a1 + 8 * v38));
        if (a6 < 3)
        {
          LODWORD(v40) = 0;
        }
        else
        {
          LODWORD(v40) = 0;
          v41 = v17;
          v42 = 1;
          do
          {
            v43 = fabs(*(double *)(a1 + 8 * (v41 + v18[v42])));
            if (v39 < v43)
            {
              LODWORD(v40) = v42;
              v39 = v43;
            }
            ++v42;
            v41 += v17;
          }
          while (v15 != v42);
          LODWORD(v38) = v18[(int)v40];
        }
        v44 = 1;
        do
        {
          v45 = v20[v44];
          v46 = fabs(*(double *)(a1 + 8 * (v44 + v17 * v45)));
          if (v39 >= v46)
            v40 = v40;
          else
            v40 = v45;
          if (v39 >= v46)
          {
            v38 = v38;
          }
          else
          {
            v39 = v46;
            v38 = v44;
          }
          ++v44;
        }
        while (a6 != v44);
        v47 = v17 * (int)v40;
        v48 = v47 + (int)v38;
        v49 = *(double *)(a1 + 8 * v48);
        v50 = fabs(v49);
        if (v50 <= 2.22044605e-16)
          goto LABEL_123;
        v51 = (*(double *)(a3 + 8 * (int)v38) - *(double *)(a3 + 8 * (int)v40)) * 0.5;
        v52 = fabs(v51);
        if (v50 <= v52)
        {
          v53 = 0.0;
          if (v51 != 0.0)
            v53 = v52 * sqrt(v50 / v52 * (v50 / v52) + 1.0);
        }
        else
        {
          v53 = v50 * sqrt(v52 / v50 * (v52 / v50) + 1.0);
        }
        v54 = v52 + v53;
        v55 = fabs(v54);
        if (v50 <= v55)
        {
          v56 = 0.0;
          if (v54 != 0.0)
            v56 = v55 * sqrt(v50 / v55 * (v50 / v55) + 1.0);
        }
        else
        {
          v56 = v50 * sqrt(v55 / v50 * (v55 / v50) + 1.0);
        }
        v57 = v54 / v56;
        v58 = v51 < 0.0;
        if (v51 >= 0.0)
          v59 = v49 * (v49 / v54);
        else
          v59 = -(v49 * (v49 / v54));
        if (v58)
          v60 = -(v49 / v56);
        else
          v60 = v49 / v56;
        *(_QWORD *)(a1 + 8 * v48) = 0;
        *(double *)(a3 + 8 * (int)v40) = *(double *)(a3 + 8 * (int)v40) - v59;
        *(double *)(a3 + 8 * (int)v38) = v59 + *(double *)(a3 + 8 * (int)v38);
        if ((int)v40 >= 1)
        {
          v61 = v40;
          v62 = a1;
          do
          {
            v63 = *(double *)(v62 + 8 * (int)v40);
            v64 = *(double *)(v62 + 8 * (int)v38);
            *(double *)(v62 + 8 * (int)v40) = v63 * v57 - v64 * v60;
            *(double *)(v62 + 8 * (int)v38) = v57 * v64 + v63 * v60;
            v62 += v21;
            --v61;
          }
          while (v61);
        }
        v65 = v40 + 1;
        if ((int)v40 + 1 < (int)v38)
        {
          v66 = (double *)(a1 + 8 * (v47 + v65));
          v67 = (double *)(a1 + 8 * ((int)v38 + v17 * v65));
          v68 = ~(_DWORD)v40 + v38;
          do
          {
            v69 = *v66;
            v70 = *v67;
            *v66 = *v66 * v57 - *v67 * v60;
            ++v66;
            *v67 = v57 * v70 + v69 * v60;
            v67 = (double *)((char *)v67 + v21);
            --v68;
          }
          while (v68);
        }
        v71 = v38 + 1;
        if ((int)v38 + 1 < a6)
        {
          v72 = v17 * (int)v38;
          v73 = v71;
          v74 = (v33 - v38);
          if (v74 < 5)
            goto LABEL_77;
          v75 = 8 * (v47 + v71);
          v76 = v72 + v71;
          v77 = v36;
          v78 = v35;
          v79 = v19;
          v80 = v33;
          v167 = v76;
          v81 = 8 * v76;
          v82 = a1 + 8 * v76;
          v83 = v166 + 8 * v74 + v81;
          v33 = v80;
          v19 = v79;
          v35 = v78;
          v36 = v77;
          v72 = v17 * (int)v38;
          v84 = a1 + v75 >= v83 || v82 >= v166 + v75 + 8 * v74;
          v34 = 30 * a6 * a6;
          if (!v84)
            goto LABEL_77;
          v85 = v74 + 1;
          v86 = (v74 + 1) & 0x1FFFFFFFELL;
          v87 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v60, 0);
          v73 = v86 + v71;
          v88 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v57, 0);
          v89 = (float64x2_t *)(a1 + 8 * (v47 + v71));
          v90 = (float64x2_t *)(a1 + 8 * v167);
          v91 = v86;
          do
          {
            v92 = *v89;
            v93 = *v90;
            *v89 = vmlaq_f64(vmulq_n_f64(vnegq_f64(*v90), v60), v88, *v89);
            ++v89;
            *v90++ = vmlaq_f64(vmulq_n_f64(v93, v57), v87, v92);
            v91 -= 2;
          }
          while (v91);
          v94 = v85 == v86;
          v34 = 30 * a6 * a6;
          if (!v94)
          {
LABEL_77:
            v95 = (double *)(a1 + 8 * (v73 + v47));
            v96 = (double *)(a1 + 8 * (v73 + v72));
            v97 = a6 - v73;
            do
            {
              v98 = *v95;
              v99 = *v96;
              *v95 = *v95 * v57 - *v96 * v60;
              ++v95;
              *v96++ = v57 * v99 + v98 * v60;
              --v97;
            }
            while (v97);
          }
        }
        a5 = v172;
        a4 = v173;
        if (v173)
        {
          if (a6 >= 4
            && (&v173[v36 * (int)v40] < &v169[v36 * (int)v38]
              ? (v100 = &v173[v36 * (int)v38] >= &v169[v36 * (int)v40])
              : (v100 = 1),
                v100))
          {
            v101 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v60, 0);
            v102 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v57, 0);
            v103 = (float64x2_t *)&v173[v36 * (int)v40];
            v104 = a6 & 0xFFFFFFFE;
            v105 = (float64x2_t *)&v173[v36 * (int)v38];
            do
            {
              v106 = *v103;
              v107 = *v105;
              *v103 = vmlaq_f64(vmulq_n_f64(vnegq_f64(*v105), v60), v102, *v103);
              ++v103;
              *v105++ = vmlaq_f64(vmulq_n_f64(v107, v57), v101, v106);
              v104 -= 2;
            }
            while (v104);
            v108 = a6 & 0xFFFFFFFE;
            if (v108 == a6)
              goto LABEL_93;
          }
          else
          {
            v108 = 0;
          }
          v109 = (double *)&v173[8 * v108 + 8 * v172 * (int)v38];
          v110 = (double *)&v173[8 * v108 + 8 * v172 * (int)v40];
          v111 = a6 - v108;
          do
          {
            v112 = *v110;
            v113 = *v109;
            *v110 = *v110 * v57 - *v109 * v60;
            ++v110;
            *v109++ = v57 * v113 + v112 * v60;
            --v111;
          }
          while (v111);
        }
LABEL_93:
        if ((int)v40 < (int)v15)
        {
          v114 = v40 + 2;
          if ((int)v40 + 2 < a6)
          {
            v115 = fabs(*(double *)(a1 + 8 * (v47 + v65)));
            v116 = (double *)(a1 + 8 * (v47 + v114));
            do
            {
              v117 = *v116++;
              v118 = fabs(v117);
              if (v115 < v118)
              {
                v65 = v114;
                v115 = v118;
              }
              ++v114;
            }
            while (a6 != v114);
          }
          v18[(int)v40] = v65;
        }
        if ((int)v40 >= 1)
        {
          if ((_DWORD)v40 == 1)
          {
            v119 = 0;
          }
          else
          {
            v119 = 0;
            v120 = fabs(*(double *)(a1 + 8 * v40));
            v121 = (double *)(a1 + 8 * (v17 + v40));
            for (j = 1; j != v40; ++j)
            {
              v123 = fabs(*v121);
              if (v120 < v123)
              {
                v119 = j;
                v120 = v123;
              }
              v121 = (double *)((char *)v121 + v21);
            }
          }
          v20[v40] = v119;
        }
        if ((int)v38 < (int)v15)
        {
          v124 = v38 + 2;
          if ((int)v38 + 2 < a6)
          {
            v125 = fabs(*(double *)(a1 + 8 * (v17 * (int)v38 + v71)));
            v126 = (double *)(a1 + 8 * (v17 * (int)v38 + v124));
            do
            {
              v127 = *v126++;
              v128 = fabs(v127);
              if (v125 < v128)
              {
                v71 = v124;
                v125 = v128;
              }
              ++v124;
            }
            while (a6 != v124);
          }
          v18[(int)v38] = v71;
        }
        if ((int)v38 >= 1)
        {
          if ((_DWORD)v38 == 1)
          {
            v37 = 0;
          }
          else
          {
            v37 = 0;
            v129 = fabs(*(double *)(a1 + 8 * v38));
            v130 = (double *)(a1 + 8 * (v17 + v38));
            for (k = 1; k != v38; ++k)
            {
              v132 = fabs(*v130);
              if (v129 < v132)
              {
                v37 = k;
                v129 = v132;
              }
              v130 = (double *)((char *)v130 + v21);
            }
          }
          v20[v38] = v37;
        }
        if (++v35 == v34)
          goto LABEL_123;
      }
    }
    if (a6 > 1)
    {
LABEL_123:
      if (a4)
      {
        v133 = 0;
        v134 = 0;
        v135 = 8 * a5;
        v136 = &a4[8 * a6];
        v137 = 1;
        v138 = a4 + 16;
        while (1)
        {
          v139 = v134 + 1;
          if (v134 + 1 >= v19)
          {
            v141 = v134;
            if (v134 == v134)
              goto LABEL_125;
          }
          else
          {
            v140 = v137;
            v141 = v134;
            do
            {
              if (*(double *)(a3 + 8 * v141) < *(double *)(a3 + 8 * v140))
                v141 = v140;
              ++v140;
            }
            while (a6 != v140);
            if (v134 == v141)
              goto LABEL_125;
          }
          v142 = 8 * v141;
          v143 = *(_QWORD *)(a3 + v142);
          *(_QWORD *)(a3 + v142) = *(_QWORD *)(a3 + 8 * v134);
          *(_QWORD *)(a3 + 8 * v134) = v143;
          if (a6 >= 4
            && ((v144 = v135 * v134, &a4[v135 * v141] < &v136[v144])
              ? (v145 = &a4[v144] >= &v136[v135 * v141])
              : (v145 = 1),
                v145))
          {
            v146 = &a4[v135 * v141 + 16];
            v147 = a6 & 0xFFFFFFFC;
            v148 = (__int128 *)v138;
            do
            {
              v149 = *((_OWORD *)v146 - 1);
              v150 = *(_OWORD *)v146;
              v151 = *v148;
              *((_OWORD *)v146 - 1) = *(v148 - 1);
              *(_OWORD *)v146 = v151;
              *(v148 - 1) = v149;
              *v148 = v150;
              v146 += 32;
              v148 += 2;
              v147 -= 4;
            }
            while (v147);
            v152 = a6 & 0xFFFFFFFC;
            if (v152 == a6)
              goto LABEL_125;
          }
          else
          {
            v152 = 0;
          }
          v153 = &a4[8 * v152 + 8 * v133];
          v154 = &a4[8 * v152 + 8 * a5 * v141];
          v155 = a6 - v152;
          do
          {
            v156 = *(_QWORD *)v154;
            *(_QWORD *)v154 = *(_QWORD *)v153;
            v154 += 8;
            *(_QWORD *)v153 = v156;
            v153 += 8;
            --v155;
          }
          while (v155);
LABEL_125:
          ++v137;
          v138 += v135;
          v133 += a5;
          v134 = v139;
          if (v139 == v15)
            return 1;
        }
      }
      v157 = 0;
      v158 = 1;
      do
      {
        v159 = v157 + 1;
        v160 = v157;
        v161 = v158;
        if (v157 + 1 < v19)
        {
          do
          {
            if (*(double *)(a3 + 8 * v160) < *(double *)(a3 + 8 * v161))
              v160 = v161;
            ++v161;
          }
          while (a6 != v161);
        }
        if (v157 != v160)
        {
          v162 = 8 * v160;
          v163 = 8 * v157;
          v164 = *(_QWORD *)(a3 + v162);
          *(_QWORD *)(a3 + v162) = *(_QWORD *)(a3 + v163);
          *(_QWORD *)(a3 + v163) = v164;
        }
        ++v158;
        v157 = v159;
      }
      while (v159 != v15);
    }
  }
  return 1;
}

uint64_t sub_10022EB50(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 20);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      sub_100256C90(a1);
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 64);
    do
      *(_DWORD *)(v7 + 4 * v6++) = 0;
    while (v6 < *(int *)(a1 + 4));
  }
  v8 = *(void **)(a1 + 72);
  if (v8 != (void *)(a1 + 80))
    j__free(v8);
  return a1;
}

_QWORD *sub_10022EBE4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  std::ostream::sentry::sentry(v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_10022ED48(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_10022ECEC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry(&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x10022ECCCLL);
}

void sub_10022ED34(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_10022ED48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        sub_10022EEEC();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_10022EED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10022EEEC()
{
  sub_100008F84("basic_string");
}

uint64_t sub_10022EF00()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100497B50);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_100497B50))
    return dword_100497B48;
  dword_100497B48 = sub_10022F724();
  __cxa_guard_release(&qword_100497B50);
  return dword_100497B48;
}

void sub_10022EF6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100497B50);
  _Unwind_Resume(a1);
}

uint64_t sub_10022EF84(int a1, const char *a2)
{
  uint64_t v4;
  std::ostream *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  const std::locale::facet *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  const std::locale::facet *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  size_t v28;
  const std::locale::facet *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  size_t v34;
  const std::locale::facet *v35;
  uint64_t v36;
  size_t v37;
  const std::locale::facet *v38;
  uint64_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  void *__p[2];
  unsigned __int8 v45;
  _QWORD v46[2];
  uint64_t v47;
  _QWORD v48[10];
  char v49;
  uint64_t v50;

  v4 = sub_100296610();
  if (a1 >= 4)
    v5 = &std::cout;
  else
    v5 = &std::cerr;
  sub_10022F4D4((uint64_t)v46);
  switch(a1)
  {
    case 1:
      v6 = sub_10022EBE4(&v47, (uint64_t)"[FATAL:", 7);
      v7 = (_QWORD *)std::ostream::operator<<(v6, v4);
      v8 = sub_10022EBE4(v7, (uint64_t)"] ", 2);
      v9 = strlen(a2);
      v10 = sub_10022EBE4(v8, (uint64_t)a2, v9);
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
      v11 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put(v10, v12);
      goto LABEL_11;
    case 2:
      v13 = sub_10022EBE4(&v47, (uint64_t)"[ERROR:", 7);
      v14 = (_QWORD *)std::ostream::operator<<(v13, v4);
      v15 = sub_10022EBE4(v14, (uint64_t)"] ", 2);
      v16 = strlen(a2);
      v10 = sub_10022EBE4(v15, (uint64_t)a2, v16);
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
      v17 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put(v10, v18);
      goto LABEL_11;
    case 3:
      v19 = sub_10022EBE4(&v47, (uint64_t)"[ WARN:", 7);
      v20 = (_QWORD *)std::ostream::operator<<(v19, v4);
      v21 = sub_10022EBE4(v20, (uint64_t)"] ", 2);
      v22 = strlen(a2);
      v10 = sub_10022EBE4(v21, (uint64_t)a2, v22);
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
      v23 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put(v10, v24);
      goto LABEL_11;
    case 4:
      v25 = sub_10022EBE4(&v47, (uint64_t)"[ INFO:", 7);
      v26 = (_QWORD *)std::ostream::operator<<(v25, v4);
      v27 = sub_10022EBE4(v26, (uint64_t)"] ", 2);
      v28 = strlen(a2);
      v10 = sub_10022EBE4(v27, (uint64_t)a2, v28);
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
      v29 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      v30 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put(v10, v30);
      goto LABEL_11;
    case 5:
      v31 = sub_10022EBE4(&v47, (uint64_t)"[DEBUG:", 7);
      v32 = (_QWORD *)std::ostream::operator<<(v31, v4);
      v33 = sub_10022EBE4(v32, (uint64_t)"] ", 2);
      v34 = strlen(a2);
      v10 = sub_10022EBE4(v33, (uint64_t)a2, v34);
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
      v35 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put(v10, v36);
      goto LABEL_11;
    case 6:
      v37 = strlen(a2);
      v10 = sub_10022EBE4(&v47, (uint64_t)a2, v37);
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
      v38 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      v39 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put(v10, v39);
LABEL_11:
      std::ostream::flush(v10);
      std::stringbuf::str(v48);
      if ((v45 & 0x80u) == 0)
        v40 = __p;
      else
        v40 = (void **)__p[0];
      if ((v45 & 0x80u) == 0)
        v41 = v45;
      else
        v41 = (uint64_t)__p[1];
      sub_10022EBE4(v5, (uint64_t)v40, v41);
      if ((char)v45 < 0)
      {
        operator delete(__p[0]);
        if (a1 > 3)
          goto LABEL_22;
      }
      else if (a1 > 3)
      {
        goto LABEL_22;
      }
      std::ostream::flush(&std::cerr);
LABEL_22:
      *(_QWORD *)((char *)v46
      v47 = v42;
      if (v49 < 0)
        operator delete((void *)v48[8]);
      std::streambuf::~streambuf(v48);
      return std::ios::~ios(&v50);
    default:
      goto LABEL_22;
  }
}

void sub_10022F468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::locale::~locale((std::locale *)&a9);
  sub_10022F69C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_10022F498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_10022F69C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_10022F69C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10022F4D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1 + 16;
  v3 = a1 + 24;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 24));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(v2 + *(_QWORD *)(v7 - 24)) = v8;
  *(_QWORD *)a1 = v9;
  std::streambuf::basic_streambuf(v3);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_10022F5D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::iostream::~basic_iostream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

void sub_10022F5F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10022F60C(_QWORD *a1)
{
  const std::locale::facet *v2;
  uint64_t v3;
  std::locale v5;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v5, &std::ctype<char>::id);
  v3 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v5);
  std::ostream::put(a1, v3);
  std::ostream::flush(a1);
  return a1;
}

void sub_10022F688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10022F69C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = a1 + 24;
  *(_QWORD *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf(v4);
  std::ios::~ios(a1 + 128);
  return a1;
}

uint64_t sub_10022F724()
{
  unsigned __int8 v0;
  char *v1;
  const char *v2;
  int v3;
  uint64_t result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;

  v0 = atomic_load((unsigned __int8 *)&qword_100497B58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_100497B58))
  {
    sub_100296C84("OPENCV_LOG_LEVEL", "INFO", &qword_100497B60);
    __cxa_atexit((void (*)(void *))sub_10022FBC0, &qword_100497B60, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100497B58);
  }
  v1 = (char *)qword_100497B60;
  if ((char *)qword_100497B60 == "DISABLED")
    return 0;
  if (qword_100497B60)
    v2 = (const char *)qword_100497B60;
  else
    v2 = "";
  v3 = strcmp(v2, "DISABLED");
  if (v1 == "disabled" || v3 == 0)
    return 0;
  v6 = strcmp(v2, "disabled");
  result = 0;
  if (v1 != "0")
  {
    if (v6)
    {
      v7 = strcmp(v2, "0");
      result = 0;
      if (v1 != "OFF")
      {
        if (v7)
        {
          v8 = strcmp(v2, "OFF");
          result = 0;
          if (v1 != "off")
          {
            if (v8)
            {
              result = strcmp(v2, "off");
              if ((_DWORD)result)
              {
                if (v1 == "FATAL")
                  return 1;
                v9 = strcmp(v2, "FATAL");
                result = 1;
                if (v1 == "fatal" || !v9)
                  return result;
                if (!strcmp(v2, "fatal"))
                  return 1;
                if (v1 == "ERROR")
                  return 2;
                v10 = strcmp(v2, "ERROR");
                result = 2;
                if (v1 == "error" || !v10)
                  return result;
                if (!strcmp(v2, "error"))
                  return 2;
                if (v1 == "WARNING")
                  return 3;
                v11 = strcmp(v2, "WARNING");
                result = 3;
                if (v1 == "warning")
                  return result;
                if (!v11)
                  return result;
                v12 = strcmp(v2, "warning");
                result = 3;
                if (v1 == "WARNINGS")
                  return result;
                if (!v12)
                  return result;
                v13 = strcmp(v2, "WARNINGS");
                result = 3;
                if (v1 == "warnings")
                  return result;
                if (!v13)
                  return result;
                v14 = strcmp(v2, "warnings");
                result = 3;
                if (v1 == "WARN")
                  return result;
                if (!v14)
                  return result;
                v15 = strcmp(v2, "WARN");
                result = 3;
                if (v1 == "warn" || !v15)
                  return result;
                if (!strcmp(v2, "warn"))
                  return 3;
                if (v1 == "INFO")
                  return 4;
                v16 = strcmp(v2, "INFO");
                result = 4;
                if (v1 == "info" || !v16)
                  return result;
                if (!strcmp(v2, "info"))
                  return 4;
                if (v1 == "DEBUG")
                  return 5;
                v17 = strcmp(v2, "DEBUG");
                result = 5;
                if (v1 == "debug" || !v17)
                  return result;
                if (!strcmp(v2, "debug"))
                  return 5;
                if (v1 == "VERBOSE")
                  return 6;
                v18 = strcmp(v2, "VERBOSE");
                result = 6;
                if (v1 != "verbose" && v18)
                {
                  if (strcmp(v2, "verbose"))
                  {
                    v19 = sub_10022EBE4(&std::cerr, (uint64_t)"ERROR: Unexpected logging level value: ", 39);
                    v20 = sub_10022FBE8(v19);
                    sub_10022F60C(v20);
                    return 4;
                  }
                  return 6;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_10022FBA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100497B58);
  _Unwind_Resume(a1);
}

uint64_t *sub_10022FBC0(uint64_t *a1)
{
  sub_10029434C(a1);
  return a1;
}

_QWORD *sub_10022FBE8(_QWORD *a1)
{
  const char *v2;
  size_t v3;

  if (qword_100497B60)
    v2 = (const char *)qword_100497B60;
  else
    v2 = "";
  v3 = strlen(v2);
  return sub_10022EBE4(a1, (uint64_t)v2, v3);
}

float sub_10022FC30(float a1)
{
  int v2;
  __int16 v3;
  unsigned __int16 v4;
  double v5;
  float v6;
  _BYTE v8[8];
  int v9;

  sub_100298C2C(v8, &off_10044D398);
  if (v9)
    sub_1002989D0(v8);
  v2 = (__int16)((LODWORD(a1) >> 23) - 127) % 3;
  if (v2 >= 0)
    v3 = -3;
  else
    v3 = 0;
  v4 = v3 + v2;
  v5 = COERCE_FLOAT((LODWORD(a1) & 0x7FFFFF | (v4 << 23)) + 1065353216);
  *(float *)&v5 = ((((v5 * 45.254834 + 192.279837) * v5 + 119.165482) * v5 + 13.4325014) * v5 + 0.163616123)
                / ((((v5 * 14.8088409 + 151.971405) * v5 + 168.525441) * v5 + 33.9905941) * v5 + 1.0);
  LODWORD(v6) = (LODWORD(a1) & 0x80000000)
              + ((((21846 * (__int16)((LODWORD(a1) >> 23) - 127 - v4)) >> 16)
                + ((21846 * (__int16)((LODWORD(a1) >> 23) - 127 - v4)) >> 31)) << 23)
              + LODWORD(v5);
  if (a1 == 0.0)
    return 0.0;
  return v6;
}

uint64_t sub_10022FD68(uint64_t result, int *a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a5;
  *(_DWORD *)result = a3 & 0xFFF | 0x42FF0000;
  *(_DWORD *)(result + 4) = 2;
  v6 = a2[1];
  *(_DWORD *)(result + 8) = v6;
  v7 = *a2;
  *(_DWORD *)(result + 12) = *a2;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a4;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 64) = result + 8;
  *(_QWORD *)(result + 72) = result + 80;
  *(_QWORD *)(result + 88) = 0;
  if (!a4 && v7 * (uint64_t)v6)
  {
    v12 = 0;
    v13 = 0;
    qmemcpy((void *)sub_10029430C(&v12, 30), "total() == 0 || data != __null", 30);
    sub_100294B74(-215, &v12, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/mat.inl.hpp", 533);
  }
  v8 = (((a3 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a3 & 7))) & 3);
  v9 = v7 * (uint64_t)(int)v8;
  if (!a5)
  {
    v5 = v7 * (uint64_t)(int)v8;
LABEL_11:
    *(_DWORD *)result |= 0x4000u;
    goto LABEL_12;
  }
  if (a5 % ((0x88442211uLL >> (4 * (a3 & 7))) & 0xF))
  {
    v12 = 0;
    v13 = 0;
    qmemcpy((void *)sub_10029430C(&v12, 31), "Step must be a multiple of esz1", 31);
    sub_100294B74(-13, &v12, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/mat.inl.hpp", 548);
  }
  if (v9 == a5 || *(_DWORD *)(result + 8) == 1)
    goto LABEL_11;
LABEL_12:
  v10 = *(uint64_t **)(result + 72);
  *v10 = v5;
  v10[1] = v8;
  v11 = *(_QWORD *)(result + 24) + v5 * *(int *)(result + 8);
  *(_QWORD *)(result + 32) = v11 - v5 + v9;
  *(_QWORD *)(result + 40) = v11;
  return result;
}

void sub_10022FF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

float sub_10022FF5C(float a1, float a2)
{
  float v2;
  float v3;
  BOOL v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v2 = fabsf(a2);
  v3 = fabsf(a1);
  v4 = v2 < v3;
  v5 = v2 / (float)(v3 + 2.2204e-16);
  v6 = 90.0
     - (float)((float)((float)((float)((float)((float)((float)((float)(v5 * v5) * -2.5397) + 8.914) * (float)(v5 * v5))
                                     + -18.667)
                             * (float)(v5 * v5))
                     + 57.284)
             * v5);
  v7 = v3 / (float)(v2 + 2.2204e-16);
  v8 = v7
     * (float)((float)((float)((float)((float)((float)((float)(v7 * v7) * -2.5397) + 8.914) * (float)(v7 * v7)) + -18.667)
                     * (float)(v7 * v7))
             + 57.284);
  if (v4)
    v8 = v6;
  if (a2 >= 0.0)
    v9 = v8;
  else
    v9 = 180.0 - v8;
  if (a1 >= 0.0)
    return v9;
  else
    return 360.0 - v9;
}

void sub_100230048(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, double a9, float a10, int a11, int a12, int a13, char a14, unsigned int a15)
{
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t *v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v45;
  _QWORD *v46;
  unsigned int *v47;
  unsigned int v48;
  _QWORD *v49;
  _QWORD *v50;
  unsigned int *v51;
  unsigned int v52;
  _QWORD *v53;
  _QWORD *v54;
  unsigned int *v55;
  unsigned int v56;
  _QWORD *v57;
  _QWORD *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  char *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  char *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  char *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  char *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  _BYTE *v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  _BYTE *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  _BYTE *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  _BYTE *v98;
  int v99;
  int v100;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  char *v108;
  void *v109;
  _QWORD v110[2];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  char *v115;
  void *v116;
  _QWORD v117[2];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  char *v122;
  void *v123;
  _QWORD v124[2];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  char *v129;
  void *v130;
  _QWORD v131[2];
  _BYTE v132[64];
  _BYTE *v133;
  void *v134;
  _BYTE v135[16];
  _BYTE v136[64];
  _BYTE *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE v141[64];
  _BYTE *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE v146[64];
  _BYTE *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;

  *(_DWORD *)v146 = 1124007936;
  *(_OWORD *)&v146[4] = 0u;
  if ((a14 & 1) != 0)
    v19 = a11;
  else
    v19 = a12;
  *(_OWORD *)&v146[20] = 0uLL;
  if ((a14 & 1) != 0)
    v20 = a12;
  else
    v20 = a11;
  *(_OWORD *)&v146[36] = 0uLL;
  if ((a14 & 2) != 0)
    v21 = a13;
  else
    v21 = v19;
  if ((a14 & 2) != 0)
    v22 = v19;
  else
    v22 = a13;
  *(_OWORD *)&v146[48] = 0uLL;
  v147 = &v146[8];
  v148 = &v149;
  if ((a14 & 4) != 0)
    v23 = a13;
  else
    v23 = v20;
  if ((a14 & 4) != 0)
    v24 = v20;
  else
    v24 = a13;
  v99 = v23;
  v100 = v24;
  v149 = 0;
  v150 = 0;
  *(_DWORD *)v141 = 1124007936;
  memset(&v141[4], 0, 60);
  v142 = &v141[8];
  v143 = &v144;
  v145 = 0;
  v144 = 0;
  *(_DWORD *)v136 = 1124007936;
  memset(&v136[4], 0, 60);
  v137 = &v136[8];
  v138 = &v139;
  v140 = 0;
  v139 = 0;
  if (!a1)
    goto LABEL_35;
  sub_10000A364((uint64_t)v132, a11, a12, a15, a1, a2);
  if (*(_QWORD *)&v146[56])
  {
    v25 = (unsigned int *)(*(_QWORD *)&v146[56] + 20);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
      sub_100256C90((uint64_t)v146);
  }
  if (*(int *)&v146[4] >= 1)
  {
    v28 = 0;
    v29 = v147;
    do
      *(_DWORD *)&v29[4 * v28++] = 0;
    while (v28 < *(int *)&v146[4]);
  }
  *(_OWORD *)v146 = *(_OWORD *)v132;
  *(_OWORD *)&v146[16] = *(_OWORD *)&v132[16];
  *(_OWORD *)&v146[32] = *(_OWORD *)&v132[32];
  *(_OWORD *)&v146[48] = *(_OWORD *)&v132[48];
  if (v148 == &v149)
  {
    v30 = (uint64_t *)v134;
    if (*(int *)&v132[4] <= 2)
      goto LABEL_30;
  }
  else
  {
    j__free(v148);
    v147 = &v146[8];
    v148 = &v149;
    v30 = (uint64_t *)v134;
    if (*(int *)&v132[4] <= 2)
    {
LABEL_30:
      v149 = *v30;
      v150 = v30[1];
      goto LABEL_33;
    }
  }
  v147 = v133;
  v148 = v30;
  v30 = (uint64_t *)v135;
  v134 = v135;
  v133 = &v132[8];
LABEL_33:
  *(_DWORD *)v132 = 1124007936;
  memset(&v132[4], 0, 60);
  if (v30 != (uint64_t *)v135)
    j__free(v30);
LABEL_35:
  if (!a3)
    goto LABEL_51;
  sub_10000A364((uint64_t)v132, v21, v22, a15, a3, a4);
  if (*(_QWORD *)&v141[56])
  {
    v31 = (unsigned int *)(*(_QWORD *)&v141[56] + 20);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
      sub_100256C90((uint64_t)v141);
  }
  if (*(int *)&v141[4] >= 1)
  {
    v34 = 0;
    v35 = v142;
    do
      *(_DWORD *)&v35[4 * v34++] = 0;
    while (v34 < *(int *)&v141[4]);
  }
  *(_OWORD *)v141 = *(_OWORD *)v132;
  *(_OWORD *)&v141[16] = *(_OWORD *)&v132[16];
  *(_OWORD *)&v141[32] = *(_OWORD *)&v132[32];
  *(_OWORD *)&v141[48] = *(_OWORD *)&v132[48];
  if (v143 == &v144)
  {
    v36 = (uint64_t *)v134;
    if (*(int *)&v132[4] <= 2)
      goto LABEL_46;
  }
  else
  {
    j__free(v143);
    v143 = &v144;
    v142 = &v141[8];
    v36 = (uint64_t *)v134;
    if (*(int *)&v132[4] <= 2)
    {
LABEL_46:
      v144 = *v36;
      v145 = v36[1];
      goto LABEL_49;
    }
  }
  v143 = v36;
  v142 = v133;
  v36 = (uint64_t *)v135;
  v134 = v135;
  v133 = &v132[8];
LABEL_49:
  *(_DWORD *)v132 = 1124007936;
  memset(&v132[4], 0, 60);
  if (v36 != (uint64_t *)v135)
    j__free(v36);
LABEL_51:
  if (!a5 || a10 == 0.0)
    goto LABEL_68;
  sub_10000A364((uint64_t)v132, v99, v100, a15, a5, a6);
  if (*(_QWORD *)&v136[56])
  {
    v37 = (unsigned int *)(*(_QWORD *)&v136[56] + 20);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
      sub_100256C90((uint64_t)v136);
  }
  if (*(int *)&v136[4] >= 1)
  {
    v40 = 0;
    v41 = v137;
    do
      *(_DWORD *)&v41[4 * v40++] = 0;
    while (v40 < *(int *)&v136[4]);
  }
  *(_OWORD *)v136 = *(_OWORD *)v132;
  *(_OWORD *)&v136[16] = *(_OWORD *)&v132[16];
  *(_OWORD *)&v136[32] = *(_OWORD *)&v132[32];
  *(_OWORD *)&v136[48] = *(_OWORD *)&v132[48];
  if (v138 == &v139)
  {
    v42 = (uint64_t *)v134;
    if (*(int *)&v132[4] <= 2)
      goto LABEL_63;
  }
  else
  {
    j__free(v138);
    v138 = &v139;
    v137 = &v136[8];
    v42 = (uint64_t *)v134;
    if (*(int *)&v132[4] <= 2)
    {
LABEL_63:
      v139 = *v42;
      v140 = v42[1];
      goto LABEL_66;
    }
  }
  v138 = v42;
  v137 = v133;
  v42 = (uint64_t *)v135;
  v134 = v135;
  v133 = &v132[8];
LABEL_66:
  *(_DWORD *)v132 = 1124007936;
  memset(&v132[4], 0, 60);
  if (v42 != (uint64_t *)v135)
    j__free(v42);
LABEL_68:
  sub_10000A364((uint64_t)v132, v20, a13, a15, a7, a8);
  v125 = *(_OWORD *)v146;
  v126 = *(_OWORD *)&v146[16];
  v127 = *(_OWORD *)&v146[32];
  v128 = *(_OWORD *)&v146[48];
  v129 = (char *)&v125 + 8;
  v130 = v131;
  v131[0] = 0;
  v131[1] = 0;
  if (*(_QWORD *)&v146[56])
  {
    v43 = (unsigned int *)(*(_QWORD *)&v146[56] + 20);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
    if (*(int *)&v146[4] <= 2)
      goto LABEL_72;
  }
  else if (*(int *)&v146[4] <= 2)
  {
LABEL_72:
    v45 = v148;
    v46 = v130;
    *(_QWORD *)v130 = *v148;
    v46[1] = v45[1];
    goto LABEL_75;
  }
  DWORD1(v125) = 0;
  sub_100256B48((uint64_t)&v125, (uint64_t)v146);
LABEL_75:
  v118 = *(_OWORD *)v141;
  v119 = *(_OWORD *)&v141[16];
  v120 = *(_OWORD *)&v141[32];
  v121 = *(_OWORD *)&v141[48];
  v122 = (char *)&v118 + 8;
  v123 = v124;
  v124[0] = 0;
  v124[1] = 0;
  if (*(_QWORD *)&v141[56])
  {
    v47 = (unsigned int *)(*(_QWORD *)&v141[56] + 20);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 + 1, v47));
    if (*(int *)&v141[4] <= 2)
      goto LABEL_79;
  }
  else if (*(int *)&v141[4] <= 2)
  {
LABEL_79:
    v49 = v143;
    v50 = v123;
    *(_QWORD *)v123 = *(_QWORD *)v143;
    v50[1] = v49[1];
    goto LABEL_82;
  }
  DWORD1(v118) = 0;
  sub_100256B48((uint64_t)&v118, (uint64_t)v141);
LABEL_82:
  v111 = *(_OWORD *)v136;
  v112 = *(_OWORD *)&v136[16];
  v113 = *(_OWORD *)&v136[32];
  v114 = *(_OWORD *)&v136[48];
  v115 = (char *)&v111 + 8;
  v116 = v117;
  v117[0] = 0;
  v117[1] = 0;
  if (*(_QWORD *)&v136[56])
  {
    v51 = (unsigned int *)(*(_QWORD *)&v136[56] + 20);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 + 1, v51));
    if (*(int *)&v136[4] <= 2)
      goto LABEL_86;
  }
  else if (*(int *)&v136[4] <= 2)
  {
LABEL_86:
    v53 = v138;
    v54 = v116;
    *(_QWORD *)v116 = *(_QWORD *)v138;
    v54[1] = v53[1];
    goto LABEL_89;
  }
  DWORD1(v111) = 0;
  sub_100256B48((uint64_t)&v111, (uint64_t)v136);
LABEL_89:
  v104 = *(_OWORD *)v132;
  v105 = *(_OWORD *)&v132[16];
  v106 = *(_OWORD *)&v132[32];
  v107 = *(_OWORD *)&v132[48];
  v108 = (char *)&v104 + 8;
  v109 = v110;
  v110[0] = 0;
  v110[1] = 0;
  if (*(_QWORD *)&v132[56])
  {
    v55 = (unsigned int *)(*(_QWORD *)&v132[56] + 20);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 + 1, v55));
    if (*(int *)&v132[4] <= 2)
      goto LABEL_93;
LABEL_95:
    DWORD1(v104) = 0;
    sub_100256B48((uint64_t)&v104, (uint64_t)v132);
    goto LABEL_96;
  }
  if (*(int *)&v132[4] > 2)
    goto LABEL_95;
LABEL_93:
  v57 = v134;
  v58 = v109;
  *(_QWORD *)v109 = *(_QWORD *)v134;
  v58[1] = v57[1];
LABEL_96:
  sub_100240B28((uint64_t)&v125, (uint64_t)&v118, (uint64_t)&v111, (uint64_t)&v104, a14);
  if (*((_QWORD *)&v107 + 1))
  {
    v59 = (unsigned int *)(*((_QWORD *)&v107 + 1) + 20);
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
      sub_100256C90((uint64_t)&v104);
  }
  *((_QWORD *)&v107 + 1) = 0;
  v105 = 0u;
  v106 = 0u;
  if (SDWORD1(v104) >= 1)
  {
    v62 = 0;
    v63 = v108;
    do
      *(_DWORD *)&v63[4 * v62++] = 0;
    while (v62 < SDWORD1(v104));
  }
  if (v109 != v110)
    j__free(v109);
  if (*((_QWORD *)&v114 + 1))
  {
    v64 = (unsigned int *)(*((_QWORD *)&v114 + 1) + 20);
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
      sub_100256C90((uint64_t)&v111);
  }
  *((_QWORD *)&v114 + 1) = 0;
  v112 = 0u;
  v113 = 0u;
  if (SDWORD1(v111) >= 1)
  {
    v67 = 0;
    v68 = v115;
    do
      *(_DWORD *)&v68[4 * v67++] = 0;
    while (v67 < SDWORD1(v111));
  }
  if (v116 != v117)
    j__free(v116);
  if (*((_QWORD *)&v121 + 1))
  {
    v69 = (unsigned int *)(*((_QWORD *)&v121 + 1) + 20);
    do
    {
      v70 = __ldaxr(v69);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v69));
    if (!v71)
      sub_100256C90((uint64_t)&v118);
  }
  *((_QWORD *)&v121 + 1) = 0;
  v119 = 0u;
  v120 = 0u;
  if (SDWORD1(v118) >= 1)
  {
    v72 = 0;
    v73 = v122;
    do
      *(_DWORD *)&v73[4 * v72++] = 0;
    while (v72 < SDWORD1(v118));
  }
  if (v123 != v124)
    j__free(v123);
  if (*((_QWORD *)&v128 + 1))
  {
    v74 = (unsigned int *)(*((_QWORD *)&v128 + 1) + 20);
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
      sub_100256C90((uint64_t)&v125);
  }
  *((_QWORD *)&v128 + 1) = 0;
  v126 = 0u;
  v127 = 0u;
  if (SDWORD1(v125) >= 1)
  {
    v77 = 0;
    v78 = v129;
    do
      *(_DWORD *)&v78[4 * v77++] = 0;
    while (v77 < SDWORD1(v125));
  }
  if (v130 != v131)
    j__free(v130);
  if (*(_QWORD *)&v132[56])
  {
    v79 = (unsigned int *)(*(_QWORD *)&v132[56] + 20);
    do
    {
      v80 = __ldaxr(v79);
      v81 = v80 - 1;
    }
    while (__stlxr(v81, v79));
    if (!v81)
      sub_100256C90((uint64_t)v132);
  }
  *(_QWORD *)&v132[56] = 0;
  memset(&v132[16], 0, 32);
  if (*(int *)&v132[4] >= 1)
  {
    v82 = 0;
    v83 = v133;
    do
      *(_DWORD *)&v83[4 * v82++] = 0;
    while (v82 < *(int *)&v132[4]);
  }
  if (v134 != v135)
    j__free(v134);
  if (*(_QWORD *)&v136[56])
  {
    v84 = (unsigned int *)(*(_QWORD *)&v136[56] + 20);
    do
    {
      v85 = __ldaxr(v84);
      v86 = v85 - 1;
    }
    while (__stlxr(v86, v84));
    if (!v86)
      sub_100256C90((uint64_t)v136);
  }
  *(_QWORD *)&v136[56] = 0;
  memset(&v136[16], 0, 32);
  if (*(int *)&v136[4] >= 1)
  {
    v87 = 0;
    v88 = v137;
    do
      *(_DWORD *)&v88[4 * v87++] = 0;
    while (v87 < *(int *)&v136[4]);
  }
  if (v138 != &v139)
    j__free(v138);
  if (*(_QWORD *)&v141[56])
  {
    v89 = (unsigned int *)(*(_QWORD *)&v141[56] + 20);
    do
    {
      v90 = __ldaxr(v89);
      v91 = v90 - 1;
    }
    while (__stlxr(v91, v89));
    if (!v91)
      sub_100256C90((uint64_t)v141);
  }
  *(_QWORD *)&v141[56] = 0;
  memset(&v141[16], 0, 32);
  if (*(int *)&v141[4] >= 1)
  {
    v92 = 0;
    v93 = v142;
    do
      *(_DWORD *)&v93[4 * v92++] = 0;
    while (v92 < *(int *)&v141[4]);
  }
  if (v143 != &v144)
    j__free(v143);
  if (*(_QWORD *)&v146[56])
  {
    v94 = (unsigned int *)(*(_QWORD *)&v146[56] + 20);
    do
    {
      v95 = __ldaxr(v94);
      v96 = v95 - 1;
    }
    while (__stlxr(v96, v94));
    if (!v96)
      sub_100256C90((uint64_t)v146);
  }
  *(_QWORD *)&v146[56] = 0;
  memset(&v146[16], 0, 32);
  if (*(int *)&v146[4] >= 1)
  {
    v97 = 0;
    v98 = v147;
    do
      *(_DWORD *)&v98[4 * v97++] = 0;
    while (v97 < *(int *)&v146[4]);
  }
  if (v148 != &v149)
    j__free(v148);
}

void sub_100230B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  sub_100006BE4((uint64_t)&a31);
  sub_100006BE4((uint64_t)&a43);
  sub_100006BE4((uint64_t)&a55);
  sub_100006BE4((uint64_t)&a67);
  sub_100006BE4((uint64_t)&STACK[0x230]);
  sub_100006BE4((uint64_t)&STACK[0x290]);
  sub_100006BE4(v67 - 208);
  _Unwind_Resume(a1);
}

void sub_100230BCC()
{
  JUMPOUT(0x100230BACLL);
}

void sub_100230BD4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, int a11, int a12, int a13, char a14, unsigned int a15)
{
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t *v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v45;
  _QWORD *v46;
  unsigned int *v47;
  unsigned int v48;
  _QWORD *v49;
  _QWORD *v50;
  unsigned int *v51;
  unsigned int v52;
  _QWORD *v53;
  _QWORD *v54;
  unsigned int *v55;
  unsigned int v56;
  _QWORD *v57;
  _QWORD *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  char *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  char *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  char *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  char *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  _BYTE *v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  _BYTE *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  _BYTE *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  _BYTE *v98;
  int v99;
  int v100;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  char *v108;
  void *v109;
  _QWORD v110[2];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  char *v115;
  void *v116;
  _QWORD v117[2];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  char *v122;
  void *v123;
  _QWORD v124[2];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  char *v129;
  void *v130;
  _QWORD v131[2];
  _BYTE v132[64];
  _BYTE *v133;
  void *v134;
  _BYTE v135[16];
  _BYTE v136[64];
  _BYTE *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE v141[64];
  _BYTE *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE v146[64];
  _BYTE *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;

  *(_DWORD *)v146 = 1124007936;
  *(_OWORD *)&v146[4] = 0u;
  if ((a14 & 1) != 0)
    v19 = a11;
  else
    v19 = a12;
  *(_OWORD *)&v146[20] = 0uLL;
  if ((a14 & 1) != 0)
    v20 = a12;
  else
    v20 = a11;
  *(_OWORD *)&v146[36] = 0uLL;
  if ((a14 & 2) != 0)
    v21 = a13;
  else
    v21 = v19;
  if ((a14 & 2) != 0)
    v22 = v19;
  else
    v22 = a13;
  *(_OWORD *)&v146[48] = 0uLL;
  v147 = &v146[8];
  v148 = &v149;
  if ((a14 & 4) != 0)
    v23 = a13;
  else
    v23 = v20;
  if ((a14 & 4) != 0)
    v24 = v20;
  else
    v24 = a13;
  v99 = v23;
  v100 = v24;
  v149 = 0;
  v150 = 0;
  *(_DWORD *)v141 = 1124007936;
  memset(&v141[4], 0, 60);
  v142 = &v141[8];
  v143 = &v144;
  v145 = 0;
  v144 = 0;
  *(_DWORD *)v136 = 1124007936;
  memset(&v136[4], 0, 60);
  v137 = &v136[8];
  v138 = &v139;
  v140 = 0;
  v139 = 0;
  if (!a1)
    goto LABEL_35;
  sub_10000A364((uint64_t)v132, a11, a12, a15, a1, a2);
  if (*(_QWORD *)&v146[56])
  {
    v25 = (unsigned int *)(*(_QWORD *)&v146[56] + 20);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
      sub_100256C90((uint64_t)v146);
  }
  if (*(int *)&v146[4] >= 1)
  {
    v28 = 0;
    v29 = v147;
    do
      *(_DWORD *)&v29[4 * v28++] = 0;
    while (v28 < *(int *)&v146[4]);
  }
  *(_OWORD *)v146 = *(_OWORD *)v132;
  *(_OWORD *)&v146[16] = *(_OWORD *)&v132[16];
  *(_OWORD *)&v146[32] = *(_OWORD *)&v132[32];
  *(_OWORD *)&v146[48] = *(_OWORD *)&v132[48];
  if (v148 == &v149)
  {
    v30 = (uint64_t *)v134;
    if (*(int *)&v132[4] <= 2)
      goto LABEL_30;
  }
  else
  {
    j__free(v148);
    v147 = &v146[8];
    v148 = &v149;
    v30 = (uint64_t *)v134;
    if (*(int *)&v132[4] <= 2)
    {
LABEL_30:
      v149 = *v30;
      v150 = v30[1];
      goto LABEL_33;
    }
  }
  v147 = v133;
  v148 = v30;
  v30 = (uint64_t *)v135;
  v134 = v135;
  v133 = &v132[8];
LABEL_33:
  *(_DWORD *)v132 = 1124007936;
  memset(&v132[4], 0, 60);
  if (v30 != (uint64_t *)v135)
    j__free(v30);
LABEL_35:
  if (!a3)
    goto LABEL_51;
  sub_10000A364((uint64_t)v132, v21, v22, a15, a3, a4);
  if (*(_QWORD *)&v141[56])
  {
    v31 = (unsigned int *)(*(_QWORD *)&v141[56] + 20);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
      sub_100256C90((uint64_t)v141);
  }
  if (*(int *)&v141[4] >= 1)
  {
    v34 = 0;
    v35 = v142;
    do
      *(_DWORD *)&v35[4 * v34++] = 0;
    while (v34 < *(int *)&v141[4]);
  }
  *(_OWORD *)v141 = *(_OWORD *)v132;
  *(_OWORD *)&v141[16] = *(_OWORD *)&v132[16];
  *(_OWORD *)&v141[32] = *(_OWORD *)&v132[32];
  *(_OWORD *)&v141[48] = *(_OWORD *)&v132[48];
  if (v143 == &v144)
  {
    v36 = (uint64_t *)v134;
    if (*(int *)&v132[4] <= 2)
      goto LABEL_46;
  }
  else
  {
    j__free(v143);
    v143 = &v144;
    v142 = &v141[8];
    v36 = (uint64_t *)v134;
    if (*(int *)&v132[4] <= 2)
    {
LABEL_46:
      v144 = *v36;
      v145 = v36[1];
      goto LABEL_49;
    }
  }
  v143 = v36;
  v142 = v133;
  v36 = (uint64_t *)v135;
  v134 = v135;
  v133 = &v132[8];
LABEL_49:
  *(_DWORD *)v132 = 1124007936;
  memset(&v132[4], 0, 60);
  if (v36 != (uint64_t *)v135)
    j__free(v36);
LABEL_51:
  if (!a5 || a10 == 0.0)
    goto LABEL_68;
  sub_10000A364((uint64_t)v132, v99, v100, a15, a5, a6);
  if (*(_QWORD *)&v136[56])
  {
    v37 = (unsigned int *)(*(_QWORD *)&v136[56] + 20);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
      sub_100256C90((uint64_t)v136);
  }
  if (*(int *)&v136[4] >= 1)
  {
    v40 = 0;
    v41 = v137;
    do
      *(_DWORD *)&v41[4 * v40++] = 0;
    while (v40 < *(int *)&v136[4]);
  }
  *(_OWORD *)v136 = *(_OWORD *)v132;
  *(_OWORD *)&v136[16] = *(_OWORD *)&v132[16];
  *(_OWORD *)&v136[32] = *(_OWORD *)&v132[32];
  *(_OWORD *)&v136[48] = *(_OWORD *)&v132[48];
  if (v138 == &v139)
  {
    v42 = (uint64_t *)v134;
    if (*(int *)&v132[4] <= 2)
      goto LABEL_63;
  }
  else
  {
    j__free(v138);
    v138 = &v139;
    v137 = &v136[8];
    v42 = (uint64_t *)v134;
    if (*(int *)&v132[4] <= 2)
    {
LABEL_63:
      v139 = *v42;
      v140 = v42[1];
      goto LABEL_66;
    }
  }
  v138 = v42;
  v137 = v133;
  v42 = (uint64_t *)v135;
  v134 = v135;
  v133 = &v132[8];
LABEL_66:
  *(_DWORD *)v132 = 1124007936;
  memset(&v132[4], 0, 60);
  if (v42 != (uint64_t *)v135)
    j__free(v42);
LABEL_68:
  sub_10000A364((uint64_t)v132, v20, a13, a15, a7, a8);
  v125 = *(_OWORD *)v146;
  v126 = *(_OWORD *)&v146[16];
  v127 = *(_OWORD *)&v146[32];
  v128 = *(_OWORD *)&v146[48];
  v129 = (char *)&v125 + 8;
  v130 = v131;
  v131[0] = 0;
  v131[1] = 0;
  if (*(_QWORD *)&v146[56])
  {
    v43 = (unsigned int *)(*(_QWORD *)&v146[56] + 20);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
    if (*(int *)&v146[4] <= 2)
      goto LABEL_72;
  }
  else if (*(int *)&v146[4] <= 2)
  {
LABEL_72:
    v45 = v148;
    v46 = v130;
    *(_QWORD *)v130 = *v148;
    v46[1] = v45[1];
    goto LABEL_75;
  }
  DWORD1(v125) = 0;
  sub_100256B48((uint64_t)&v125, (uint64_t)v146);
LABEL_75:
  v118 = *(_OWORD *)v141;
  v119 = *(_OWORD *)&v141[16];
  v120 = *(_OWORD *)&v141[32];
  v121 = *(_OWORD *)&v141[48];
  v122 = (char *)&v118 + 8;
  v123 = v124;
  v124[0] = 0;
  v124[1] = 0;
  if (*(_QWORD *)&v141[56])
  {
    v47 = (unsigned int *)(*(_QWORD *)&v141[56] + 20);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 + 1, v47));
    if (*(int *)&v141[4] <= 2)
      goto LABEL_79;
  }
  else if (*(int *)&v141[4] <= 2)
  {
LABEL_79:
    v49 = v143;
    v50 = v123;
    *(_QWORD *)v123 = *(_QWORD *)v143;
    v50[1] = v49[1];
    goto LABEL_82;
  }
  DWORD1(v118) = 0;
  sub_100256B48((uint64_t)&v118, (uint64_t)v141);
LABEL_82:
  v111 = *(_OWORD *)v136;
  v112 = *(_OWORD *)&v136[16];
  v113 = *(_OWORD *)&v136[32];
  v114 = *(_OWORD *)&v136[48];
  v115 = (char *)&v111 + 8;
  v116 = v117;
  v117[0] = 0;
  v117[1] = 0;
  if (*(_QWORD *)&v136[56])
  {
    v51 = (unsigned int *)(*(_QWORD *)&v136[56] + 20);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 + 1, v51));
    if (*(int *)&v136[4] <= 2)
      goto LABEL_86;
  }
  else if (*(int *)&v136[4] <= 2)
  {
LABEL_86:
    v53 = v138;
    v54 = v116;
    *(_QWORD *)v116 = *(_QWORD *)v138;
    v54[1] = v53[1];
    goto LABEL_89;
  }
  DWORD1(v111) = 0;
  sub_100256B48((uint64_t)&v111, (uint64_t)v136);
LABEL_89:
  v104 = *(_OWORD *)v132;
  v105 = *(_OWORD *)&v132[16];
  v106 = *(_OWORD *)&v132[32];
  v107 = *(_OWORD *)&v132[48];
  v108 = (char *)&v104 + 8;
  v109 = v110;
  v110[0] = 0;
  v110[1] = 0;
  if (*(_QWORD *)&v132[56])
  {
    v55 = (unsigned int *)(*(_QWORD *)&v132[56] + 20);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 + 1, v55));
    if (*(int *)&v132[4] <= 2)
      goto LABEL_93;
LABEL_95:
    DWORD1(v104) = 0;
    sub_100256B48((uint64_t)&v104, (uint64_t)v132);
    goto LABEL_96;
  }
  if (*(int *)&v132[4] > 2)
    goto LABEL_95;
LABEL_93:
  v57 = v134;
  v58 = v109;
  *(_QWORD *)v109 = *(_QWORD *)v134;
  v58[1] = v57[1];
LABEL_96:
  sub_100240B28((uint64_t)&v125, (uint64_t)&v118, (uint64_t)&v111, (uint64_t)&v104, a14);
  if (*((_QWORD *)&v107 + 1))
  {
    v59 = (unsigned int *)(*((_QWORD *)&v107 + 1) + 20);
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
      sub_100256C90((uint64_t)&v104);
  }
  *((_QWORD *)&v107 + 1) = 0;
  v105 = 0u;
  v106 = 0u;
  if (SDWORD1(v104) >= 1)
  {
    v62 = 0;
    v63 = v108;
    do
      *(_DWORD *)&v63[4 * v62++] = 0;
    while (v62 < SDWORD1(v104));
  }
  if (v109 != v110)
    j__free(v109);
  if (*((_QWORD *)&v114 + 1))
  {
    v64 = (unsigned int *)(*((_QWORD *)&v114 + 1) + 20);
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
      sub_100256C90((uint64_t)&v111);
  }
  *((_QWORD *)&v114 + 1) = 0;
  v112 = 0u;
  v113 = 0u;
  if (SDWORD1(v111) >= 1)
  {
    v67 = 0;
    v68 = v115;
    do
      *(_DWORD *)&v68[4 * v67++] = 0;
    while (v67 < SDWORD1(v111));
  }
  if (v116 != v117)
    j__free(v116);
  if (*((_QWORD *)&v121 + 1))
  {
    v69 = (unsigned int *)(*((_QWORD *)&v121 + 1) + 20);
    do
    {
      v70 = __ldaxr(v69);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v69));
    if (!v71)
      sub_100256C90((uint64_t)&v118);
  }
  *((_QWORD *)&v121 + 1) = 0;
  v119 = 0u;
  v120 = 0u;
  if (SDWORD1(v118) >= 1)
  {
    v72 = 0;
    v73 = v122;
    do
      *(_DWORD *)&v73[4 * v72++] = 0;
    while (v72 < SDWORD1(v118));
  }
  if (v123 != v124)
    j__free(v123);
  if (*((_QWORD *)&v128 + 1))
  {
    v74 = (unsigned int *)(*((_QWORD *)&v128 + 1) + 20);
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
      sub_100256C90((uint64_t)&v125);
  }
  *((_QWORD *)&v128 + 1) = 0;
  v126 = 0u;
  v127 = 0u;
  if (SDWORD1(v125) >= 1)
  {
    v77 = 0;
    v78 = v129;
    do
      *(_DWORD *)&v78[4 * v77++] = 0;
    while (v77 < SDWORD1(v125));
  }
  if (v130 != v131)
    j__free(v130);
  if (*(_QWORD *)&v132[56])
  {
    v79 = (unsigned int *)(*(_QWORD *)&v132[56] + 20);
    do
    {
      v80 = __ldaxr(v79);
      v81 = v80 - 1;
    }
    while (__stlxr(v81, v79));
    if (!v81)
      sub_100256C90((uint64_t)v132);
  }
  *(_QWORD *)&v132[56] = 0;
  memset(&v132[16], 0, 32);
  if (*(int *)&v132[4] >= 1)
  {
    v82 = 0;
    v83 = v133;
    do
      *(_DWORD *)&v83[4 * v82++] = 0;
    while (v82 < *(int *)&v132[4]);
  }
  if (v134 != v135)
    j__free(v134);
  if (*(_QWORD *)&v136[56])
  {
    v84 = (unsigned int *)(*(_QWORD *)&v136[56] + 20);
    do
    {
      v85 = __ldaxr(v84);
      v86 = v85 - 1;
    }
    while (__stlxr(v86, v84));
    if (!v86)
      sub_100256C90((uint64_t)v136);
  }
  *(_QWORD *)&v136[56] = 0;
  memset(&v136[16], 0, 32);
  if (*(int *)&v136[4] >= 1)
  {
    v87 = 0;
    v88 = v137;
    do
      *(_DWORD *)&v88[4 * v87++] = 0;
    while (v87 < *(int *)&v136[4]);
  }
  if (v138 != &v139)
    j__free(v138);
  if (*(_QWORD *)&v141[56])
  {
    v89 = (unsigned int *)(*(_QWORD *)&v141[56] + 20);
    do
    {
      v90 = __ldaxr(v89);
      v91 = v90 - 1;
    }
    while (__stlxr(v91, v89));
    if (!v91)
      sub_100256C90((uint64_t)v141);
  }
  *(_QWORD *)&v141[56] = 0;
  memset(&v141[16], 0, 32);
  if (*(int *)&v141[4] >= 1)
  {
    v92 = 0;
    v93 = v142;
    do
      *(_DWORD *)&v93[4 * v92++] = 0;
    while (v92 < *(int *)&v141[4]);
  }
  if (v143 != &v144)
    j__free(v143);
  if (*(_QWORD *)&v146[56])
  {
    v94 = (unsigned int *)(*(_QWORD *)&v146[56] + 20);
    do
    {
      v95 = __ldaxr(v94);
      v96 = v95 - 1;
    }
    while (__stlxr(v96, v94));
    if (!v96)
      sub_100256C90((uint64_t)v146);
  }
  *(_QWORD *)&v146[56] = 0;
  memset(&v146[16], 0, 32);
  if (*(int *)&v146[4] >= 1)
  {
    v97 = 0;
    v98 = v147;
    do
      *(_DWORD *)&v98[4 * v97++] = 0;
    while (v97 < *(int *)&v146[4]);
  }
  if (v148 != &v149)
    j__free(v148);
}

void sub_10023169C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  sub_100006BE4((uint64_t)&a31);
  sub_100006BE4((uint64_t)&a43);
  sub_100006BE4((uint64_t)&a55);
  sub_100006BE4((uint64_t)&a67);
  sub_100006BE4((uint64_t)&STACK[0x230]);
  sub_100006BE4((uint64_t)&STACK[0x290]);
  sub_100006BE4(v67 - 208);
  _Unwind_Resume(a1);
}

void sub_100231758()
{
  JUMPOUT(0x100231738);
}

void sub_100231760(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, uint64_t a6, char a7)
{
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[64];
  _BYTE *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  _QWORD v45[2];
  _OWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  _QWORD v51[3];

  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_OWORD *)(v12 + 16);
    v46[0] = *(_OWORD *)v12;
    v46[1] = v13;
    v46[2] = *(_OWORD *)(v12 + 32);
    v14 = *(_QWORD *)(v12 + 56);
    v47 = *(_QWORD *)(v12 + 48);
    v48 = v14;
    v49 = (char *)v46 + 8;
    v50 = v51;
    v51[0] = 0;
    v51[1] = 0;
    if (v14)
    {
      v15 = (unsigned int *)(v14 + 20);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
    }
    if (*(int *)(v12 + 4) > 2)
    {
      DWORD1(v46[0]) = 0;
      sub_100256B48((uint64_t)v46, v12);
    }
    else
    {
      v17 = *(_QWORD **)(v12 + 72);
      v18 = v50;
      *v50 = *v17;
      v18[1] = v17[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)v46);
  }
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = *(_OWORD *)(v19 + 16);
    v40[0] = *(_OWORD *)v19;
    v40[1] = v20;
    v40[2] = *(_OWORD *)(v19 + 32);
    v21 = *(_QWORD *)(v19 + 56);
    v41 = *(_QWORD *)(v19 + 48);
    v42 = v21;
    v43 = (char *)v40 + 8;
    v44 = v45;
    v45[0] = 0;
    v45[1] = 0;
    if (v21)
    {
      v22 = (unsigned int *)(v21 + 20);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
    if (*(int *)(v19 + 4) > 2)
    {
      DWORD1(v40[0]) = 0;
      sub_100256B48((uint64_t)v40, v19);
    }
    else
    {
      v24 = *(_QWORD **)(v19 + 72);
      v25 = v44;
      *v44 = *v24;
      v25[1] = v24[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)v40);
  }
  if (a5 == 0.0)
  {
    *(_DWORD *)v35 = 1124007936;
    memset(&v35[4], 0, 60);
    v36 = &v35[8];
    v37 = &v38;
    v38 = 0;
    v39 = 0;
  }
  else if (sub_10025D914((_DWORD *)a3) == 0x10000)
  {
    v26 = *(_QWORD *)(a3 + 8);
    v27 = *(_OWORD *)(v26 + 16);
    *(_OWORD *)v35 = *(_OWORD *)v26;
    *(_OWORD *)&v35[16] = v27;
    *(_OWORD *)&v35[32] = *(_OWORD *)(v26 + 32);
    v28 = *(_QWORD *)(v26 + 56);
    *(_QWORD *)&v35[48] = *(_QWORD *)(v26 + 48);
    *(_QWORD *)&v35[56] = v28;
    v36 = &v35[8];
    v37 = &v38;
    v38 = 0;
    v39 = 0;
    if (v28)
    {
      v29 = (unsigned int *)(v28 + 20);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
    }
    if (*(int *)(v26 + 4) > 2)
    {
      *(_DWORD *)&v35[4] = 0;
      sub_100256B48((uint64_t)v35, v26);
    }
    else
    {
      v31 = *(uint64_t **)(v26 + 72);
      v32 = v37;
      *v37 = *v31;
      v32[1] = v31[1];
    }
  }
  else
  {
    sub_10025CCB8(a3, -1, (uint64_t)v35);
  }
  if ((v46[0] & 0xFFF) != (v40[0] & 0xFFF))
  {
    v33 = 0;
    v34 = 0;
    *(_OWORD *)sub_10029430C(&v33, 16) = *(_OWORD *)"type == B.type()";
    sub_100294B74(-215, &v33, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1558);
  }
  if ((v46[0] & 0xFF7) - 5 >= 2)
  {
    v33 = 0;
    v34 = 0;
    qmemcpy((void *)sub_10029430C(&v33, 210), "(type == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || type == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3)))", 210);
    sub_100294B74(-215, &v33, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1558);
  }
  __asm { BR              X10 }
}

void sub_100231AE4()
{
  char v0;
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  __int128 v26;
  __int128 *v27;
  __int16 v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t *v34;
  float v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  __int128 *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  char *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  _BYTE v70[64];
  _BYTE *v71;
  uint64_t *v72;
  _QWORD v73[2];
  _BYTE v74[48];
  __int128 v75;
  _BYTE *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  _QWORD v87[2];
  _WORD v88[2];
  int v89;
  int v90;
  int v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;

  v9 = v100;
  if (v4 != v99)
  {
    v80 = 0uLL;
    v10 = sub_10029430C(&v80, 19);
    *(_DWORD *)(v10 + 15) = 1852140576;
    *(_OWORD *)v10 = *(_OWORD *)"a_size.width == len";
    sub_100294B74(-215, (uint64_t *)&v80, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1565);
  }
  if ((_QWORD)v92)
  {
    if (v89 >= 3)
    {
      v12 = (int *)(v95 + 4);
      v13 = 1;
      v14 = v89 & 0xFFFFFFFE;
      v15 = 1;
      do
      {
        v13 *= *(v12 - 1);
        v15 *= *v12;
        v12 += 2;
        v14 -= 2;
      }
      while (v14);
      v11 = v15 * v13;
      v16 = v89 - (unint64_t)(v89 & 0xFFFFFFFE);
      if (v16)
      {
        v17 = (int *)(v95 + ((4 * v89) & 0x3FFFFFFF8));
        do
        {
          v18 = *v17++;
          v11 *= v18;
          --v16;
        }
        while (v16);
      }
    }
    else
    {
      v11 = v91 * (uint64_t)v90;
    }
    if (v89 && v11)
    {
      if ((v88[0] & 0xFFF) != v1)
      {
        v80 = 0uLL;
        *(_OWORD *)sub_10029430C(&v80, 16) = *(_OWORD *)"C.type() == type";
        sub_100294B74(-215, (uint64_t *)&v80, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1588);
      }
      if ((v0 & 4) != 0)
      {
        if (v90 != v100 || v91 != v3)
        {
LABEL_21:
          v80 = 0uLL;
          qmemcpy((void *)sub_10029430C(&v80, 158), "(((flags&GEMM_3_T) == 0 && C.rows == d_size.height && C.cols == d_size.width) || ((flags&GEMM_3_T) != 0 && C.rows == d_size.width && C.cols == d_size.height))", 158);
          sub_100294B74(-215, (uint64_t *)&v80, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1588);
        }
      }
      else if (v90 != v3 || v91 != v100)
      {
        goto LABEL_21;
      }
    }
  }
  sub_10026285C(v2, v3, v100, v1, -1, 0, 0);
  if (sub_10025D914((_DWORD *)v2) == 0x10000)
  {
    v19 = *(_QWORD *)(v2 + 8);
    v20 = *(_OWORD *)(v19 + 16);
    v80 = *(_OWORD *)v19;
    v81 = v20;
    v82 = *(_OWORD *)(v19 + 32);
    v21 = *(_QWORD *)(v19 + 56);
    v83 = *(_QWORD *)(v19 + 48);
    v84 = v21;
    v85 = (char *)&v80 + 8;
    v86 = v87;
    v87[0] = 0;
    v87[1] = 0;
    if (v21)
    {
      v22 = (unsigned int *)(v21 + 20);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
    if (*(int *)(v19 + 4) > 2)
    {
      DWORD1(v80) = 0;
      sub_100256B48((uint64_t)&v80, v19);
    }
    else
    {
      v24 = *(_QWORD **)(v19 + 72);
      v25 = v86;
      *v86 = *v24;
      v25[1] = v24[1];
    }
  }
  else
  {
    sub_10025CCB8(v2, -1, (uint64_t)&v80);
  }
  if ((v0 & 4) != 0 && (_QWORD)v92 == (_QWORD)v81)
  {
    *(_DWORD *)v74 = 16842752;
    *(_QWORD *)&v74[8] = v88;
    *(_QWORD *)&v74[16] = 0;
    *(_DWORD *)v70 = 33619968;
    *(_QWORD *)&v70[8] = v88;
    *(_QWORD *)&v70[16] = 0;
    sub_10025BCD8((uint64_t)v74, (uint64_t)v70);
    v0 &= ~4u;
  }
  *(_DWORD *)v74 = 1124007936;
  v26 = 0uLL;
  memset(&v74[4], 0, 32);
  *(_OWORD *)(v5 + 36) = 0u;
  v75 = 0u;
  v76 = &v74[8];
  v77 = &v78;
  v78 = 0;
  v79 = 0;
  if ((_QWORD)v81 == *(_QWORD *)(v6 - 208) || (v27 = &v80, (_QWORD)v81 == (_QWORD)v101))
  {
    v28 = v80 & 0xFFF;
    *(_DWORD *)v70 = 1124007936;
    memset(&v70[4], 0, 60);
    v71 = &v70[8];
    v72 = v73;
    v73[0] = 0;
    v73[1] = 0;
    *(_DWORD *)(v6 - 128) = v3;
    *(_DWORD *)(v6 - 124) = v9;
    sub_100255F30(v70, 2, (uint64_t *)(v6 - 128), v28);
    if (*((_QWORD *)&v75 + 1))
    {
      v29 = (unsigned int *)(*((_QWORD *)&v75 + 1) + 20);
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
        sub_100256C90((uint64_t)v74);
    }
    if (*(int *)&v74[4] >= 1)
    {
      v32 = 0;
      v33 = v76;
      do
        *(_DWORD *)&v33[4 * v32++] = 0;
      while (v32 < *(int *)&v74[4]);
    }
    *(_OWORD *)v74 = *(_OWORD *)v70;
    *(_OWORD *)&v74[16] = *(_OWORD *)&v70[16];
    *(_OWORD *)&v74[32] = *(_OWORD *)&v70[32];
    v75 = *(_OWORD *)&v70[48];
    if (v77 == &v78)
    {
      v34 = v72;
      if (*(int *)&v70[4] <= 2)
        goto LABEL_45;
    }
    else
    {
      j__free(v77);
      v76 = &v74[8];
      v77 = &v78;
      v34 = v72;
      if (*(int *)&v70[4] <= 2)
      {
LABEL_45:
        v78 = *v34;
        v79 = v34[1];
LABEL_48:
        *(_DWORD *)v70 = 1124007936;
        DWORD1(v26) = 0;
        memset(&v70[4], 0, 60);
        if (v34 != v73)
          j__free(v34);
        v27 = (__int128 *)v74;
        goto LABEL_51;
      }
    }
    v76 = v71;
    v77 = v34;
    v71 = &v70[8];
    v72 = v73;
    v34 = v73;
    goto LABEL_48;
  }
LABEL_51:
  switch(v1)
  {
    case 5u:
    case 0xDu:
      *(float *)&v26 = v8;
      v35 = v7;
      sub_100230048(*(_QWORD *)(v6 - 208), *(_QWORD *)(v6 - 144), v101, v106, v92, v97, *((_QWORD *)v27 + 2), *((_QWORD *)v27 + 10), *(double *)&v26, v35, v3, v4, *((_DWORD *)v27 + 3), v0, v1);
      goto LABEL_57;
    case 6u:
      v36 = *(_QWORD *)(v6 - 208);
      v37 = *(_QWORD *)(v6 - 144);
      v38 = v101;
      v39 = v106;
      v40 = 6;
      v41 = v27;
      goto LABEL_56;
    case 0xEu:
      v36 = *(_QWORD *)(v6 - 208);
      v37 = *(_QWORD *)(v6 - 144);
      v38 = v101;
      v39 = v106;
      v40 = 14;
      v41 = &v80;
LABEL_56:
      sub_100230BD4(v36, v37, v38, v39, v92, v97, *((_QWORD *)v41 + 2), *((_QWORD *)v41 + 10), v8, v7, v3, v4, *((_DWORD *)v27 + 3), v0, v40);
LABEL_57:
      if (v27 != &v80)
      {
        *(_DWORD *)v70 = 33619968;
        *(_QWORD *)&v70[8] = &v80;
        *(_QWORD *)&v70[16] = 0;
        sub_1002181EC((uint64_t)v27, (uint64_t)v70);
      }
      if (*((_QWORD *)&v75 + 1))
      {
        v42 = (unsigned int *)(*((_QWORD *)&v75 + 1) + 20);
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
          sub_100256C90((uint64_t)v74);
      }
      *((_QWORD *)&v75 + 1) = 0;
      memset(&v74[16], 0, 32);
      if (*(int *)&v74[4] >= 1)
      {
        v45 = 0;
        v46 = v76;
        do
          *(_DWORD *)&v46[4 * v45++] = 0;
        while (v45 < *(int *)&v74[4]);
      }
      if (v77 != &v78)
        j__free(v77);
      if (v84)
      {
        v47 = (unsigned int *)(v84 + 20);
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
          sub_100256C90((uint64_t)&v80);
      }
      v84 = 0;
      v81 = 0u;
      v82 = 0u;
      if (SDWORD1(v80) >= 1)
      {
        v50 = 0;
        v51 = v85;
        do
          *(_DWORD *)&v51[4 * v50++] = 0;
        while (v50 < SDWORD1(v80));
      }
      if (v86 != v87)
        j__free(v86);
      if (v94)
      {
        v52 = (unsigned int *)(v94 + 20);
        do
        {
          v53 = __ldaxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
          sub_100256C90((uint64_t)v88);
      }
      v94 = 0;
      v92 = 0u;
      v93 = 0u;
      if (v89 >= 1)
      {
        v55 = 0;
        v56 = v95;
        do
          *(_DWORD *)(v56 + 4 * v55++) = 0;
        while (v55 < v89);
      }
      if (v96 != &v97)
        j__free(v96);
      if (v103)
      {
        v57 = (unsigned int *)(v103 + 20);
        do
        {
          v58 = __ldaxr(v57);
          v59 = v58 - 1;
        }
        while (__stlxr(v59, v57));
        if (!v59)
          sub_100256C90((uint64_t)&v98);
      }
      v103 = 0;
      v101 = 0u;
      v102 = 0u;
      if (SHIDWORD(v98) >= 1)
      {
        v60 = 0;
        v61 = v104;
        do
          *(_DWORD *)(v61 + 4 * v60++) = 0;
        while (v60 < SHIDWORD(v98));
      }
      if (v105 != &v106)
        j__free(v105);
      v62 = *(_QWORD *)(v6 - 168);
      if (v62)
      {
        v63 = (unsigned int *)(v62 + 20);
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
          sub_100256C90(v6 - 224);
      }
      v66 = v6 - 224;
      *(_QWORD *)(v6 - 168) = 0;
      *(_OWORD *)(v66 + 16) = 0u;
      *(_OWORD *)(v66 + 32) = 0u;
      if (*(int *)(v6 - 220) >= 1)
      {
        v67 = 0;
        v68 = *(_QWORD *)(v6 - 160);
        do
          *(_DWORD *)(v68 + 4 * v67++) = 0;
        while (v67 < *(int *)(v6 - 220));
      }
      v69 = *(void **)(v6 - 152);
      if (v69 != (void *)(v6 - 144))
        j__free(v69);
      return;
    default:
      *(_QWORD *)v70 = 0;
      *(_QWORD *)&v70[8] = 0;
      qmemcpy((void *)sub_10029430C(v70, 49), "type == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3))", 49);
      sub_100294B74(-215, (uint64_t *)v70, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1623);
  }
}

void sub_100232478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10023262C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int32 v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  float v37;
  double *v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t, double *);
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int32x4_t *v44;
  int32x4_t v45;
  uint64_t v46;
  int32x4_t v47;
  int8x16_t v48;
  uint64_t v49;
  __int32 *v50;
  int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  char *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  _DWORD *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t *v66;
  _BYTE v67[32];
  unint64_t v68;
  int v69;
  float v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void *v77;
  _QWORD v78[2];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  void *v85;
  _QWORD v86[2];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  int32x4_t *v92;
  _QWORD *v93;
  _QWORD v94[3];
  char v95[8];
  int v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101[4];

  v97 = a4;
  sub_100298C2C(v95, &off_10044D3B8);
  v7 = sub_10025E20C((int *)a1, -1);
  if (v7 != sub_10025E20C((int *)a2, -1))
  {
    v87 = 0uLL;
    v8 = sub_10029430C(&v87, 20);
    *(_DWORD *)(v8 + 16) = 690513264;
    *(_OWORD *)v8 = *(_OWORD *)"type == _src2.type()";
    sub_100294B74(-215, (uint64_t *)&v87, "scaleAdd", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 2415);
  }
  v9 = v7 & 7;
  if (v9 <= 4)
  {
    sub_1001D886C(a1, a2, a3, v7 & 7, v97, 1.0, 0.0);
    goto LABEL_93;
  }
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_OWORD *)(v10 + 16);
    v87 = *(_OWORD *)v10;
    v88 = v11;
    v89 = *(_OWORD *)(v10 + 32);
    v12 = *(_QWORD *)(v10 + 56);
    v90 = *(_QWORD *)(v10 + 48);
    v91 = v12;
    v92 = (int32x4_t *)((char *)&v87 + 8);
    v93 = v94;
    v94[0] = 0;
    v94[1] = 0;
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 20);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    if (*(int *)(v10 + 4) > 2)
    {
      DWORD1(v87) = 0;
      sub_100256B48((uint64_t)&v87, v10);
    }
    else
    {
      v15 = *(_QWORD **)(v10 + 72);
      v16 = v93;
      *v93 = *v15;
      v16[1] = v15[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v87);
  }
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(_OWORD *)(v17 + 16);
    v79 = *(_OWORD *)v17;
    v80 = v18;
    v81 = *(_OWORD *)(v17 + 32);
    v19 = *(_QWORD *)(v17 + 56);
    v82 = *(_QWORD *)(v17 + 48);
    v83 = v19;
    v84 = (_DWORD *)&v79 + 2;
    v85 = v86;
    v86[0] = 0;
    v86[1] = 0;
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 20);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
    if (*(int *)(v17 + 4) > 2)
    {
      DWORD1(v79) = 0;
      sub_100256B48((uint64_t)&v79, v17);
    }
    else
    {
      v22 = *(_QWORD **)(v17 + 72);
      v23 = v85;
      *(_QWORD *)v85 = *v22;
      v23[1] = v22[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v79);
  }
  v24 = v92[-1].u32[3];
  if ((_DWORD)v24 != *(v84 - 1))
    goto LABEL_32;
  if ((_DWORD)v24 == 2)
  {
    if (v92->i32[0] == *v84 && v92->i32[1] == v84[1])
      goto LABEL_33;
LABEL_32:
    v71 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v71, 22), "src1.size == src2.size", 22);
    sub_100294B74(-215, (uint64_t *)&v71, "scaleAdd", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 2427);
  }
  if ((int)v24 >= 1)
  {
    if (v92->i32[0] != *v84)
      goto LABEL_32;
    v25 = 1;
    do
    {
      v26 = v25;
      if (v24 == v25)
        break;
      v27 = v92->i32[v25];
      v28 = v84[v25++];
    }
    while (v27 == v28);
    if (v26 < v24)
      goto LABEL_32;
  }
LABEL_33:
  sub_100258F0C((int *)a3, SDWORD1(v87), v92->i64, v7, 0xFFFFFFFF, 0, 0);
  if (sub_10025D914((_DWORD *)a3) == 0x10000)
  {
    v29 = *(_QWORD *)(a3 + 8);
    v30 = *(_OWORD *)(v29 + 16);
    v71 = *(_OWORD *)v29;
    v72 = v30;
    v73 = *(_OWORD *)(v29 + 32);
    v31 = *(_QWORD *)(v29 + 56);
    v74 = *(_QWORD *)(v29 + 48);
    v75 = v31;
    v76 = (char *)&v71 + 8;
    v77 = v78;
    v78[0] = 0;
    v78[1] = 0;
    if (v31)
    {
      v32 = (unsigned int *)(v31 + 20);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    if (*(int *)(v29 + 4) > 2)
    {
      DWORD1(v71) = 0;
      sub_100256B48((uint64_t)&v71, v29);
    }
    else
    {
      v34 = *(_QWORD **)(v29 + 72);
      v35 = v77;
      *(_QWORD *)v77 = *v34;
      v35[1] = v34[1];
    }
  }
  else
  {
    sub_10025CCB8(a3, -1, (uint64_t)&v71);
  }
  v36 = ((v7 >> 3) & 0x1FF) + 1;
  v37 = v97;
  v70 = v37;
  if (v9 == 5)
    v38 = (double *)&v70;
  else
    v38 = &v97;
  if (v9 == 5)
    v39 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double *))sub_100232E08;
  else
    v39 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double *))sub_100232F10;
  if ((BYTE1(v87) & 0x40) == 0 || (BYTE1(v79) & 0x40) == 0 || (BYTE1(v71) & 0x40) == 0)
  {
    v101[0] = (uint64_t)&v87;
    v101[1] = (uint64_t)&v79;
    v101[2] = (uint64_t)&v71;
    v101[3] = 0;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    sub_100254D30((uint64_t)v67, v101, (uint64_t)&v98, -1);
    v40 = (v36 * v69);
    v41 = -1;
    while (++v41 < v68)
    {
      v39(v98, v99, v100, v40, v38);
      sub_100254D78((uint64_t)v67);
    }
    goto LABEL_63;
  }
  if (SDWORD1(v87) >= 3)
  {
    if (DWORD1(v87) >= 8)
    {
      v43 = DWORD1(v87) & 0xFFFFFFF8;
      v44 = v92 + 1;
      v45.i64[0] = 0x100000001;
      v45.i64[1] = 0x100000001;
      v46 = v43;
      v47.i64[0] = 0x100000001;
      v47.i64[1] = 0x100000001;
      do
      {
        v45 = vmulq_s32(v44[-1], v45);
        v47 = vmulq_s32(*v44, v47);
        v44 += 2;
        v46 -= 8;
      }
      while (v46);
      v48 = (int8x16_t)vmulq_s32(v47, v45);
      *(int32x2_t *)v48.i8 = vmul_s32(*(int32x2_t *)v48.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL));
      v42 = v48.i32[0] * v48.i32[1];
      if (v43 == DWORD1(v87))
        goto LABEL_62;
    }
    else
    {
      v43 = 0;
      v42 = 1;
    }
    v49 = DWORD1(v87) - v43;
    v50 = &v92->i32[v43];
    do
    {
      v51 = *v50++;
      v42 *= v51;
      --v49;
    }
    while (v49);
  }
  else
  {
    v42 = HIDWORD(v87) * DWORD2(v87);
  }
LABEL_62:
  v39(v88, v80, v72, (v42 * v36), v38);
LABEL_63:
  if (v75)
  {
    v52 = (unsigned int *)(v75 + 20);
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
      sub_100256C90((uint64_t)&v71);
  }
  v75 = 0;
  v72 = 0u;
  v73 = 0u;
  if (SDWORD1(v71) >= 1)
  {
    v55 = 0;
    v56 = v76;
    do
      *(_DWORD *)&v56[4 * v55++] = 0;
    while (v55 < SDWORD1(v71));
  }
  if (v77 != v78)
    j__free(v77);
  if (v83)
  {
    v57 = (unsigned int *)(v83 + 20);
    do
    {
      v58 = __ldaxr(v57);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v57));
    if (!v59)
      sub_100256C90((uint64_t)&v79);
  }
  v83 = 0;
  v80 = 0u;
  v81 = 0u;
  if (SDWORD1(v79) >= 1)
  {
    v60 = 0;
    v61 = v84;
    do
      v61[v60++] = 0;
    while (v60 < SDWORD1(v79));
  }
  if (v85 != v86)
    j__free(v85);
  if (v91)
  {
    v62 = (unsigned int *)(v91 + 20);
    do
    {
      v63 = __ldaxr(v62);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, v62));
    if (!v64)
      sub_100256C90((uint64_t)&v87);
  }
  v91 = 0;
  v88 = 0u;
  v89 = 0u;
  if (SDWORD1(v87) >= 1)
  {
    v65 = 0;
    v66 = (uint64_t *)v92;
    do
      *((_DWORD *)v66 + v65++) = 0;
    while (v65 < SDWORD1(v87));
  }
  if (v93 != v94)
    j__free(v93);
LABEL_93:
  if (v96)
    sub_1002989D0(v95);
}

void sub_100232D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_100006BE4((uint64_t)&a19);
  sub_100006BE4((uint64_t)&a31);
  sub_100006BE4(v31 - 256);
  sub_1001D40CC(v31 - 152);
  _Unwind_Resume(a1);
}

float32x4_t *sub_100232E08(float32x4_t *result, float32x4_t *a2, float32x4_t *a3, int a4, _DWORD *a5, double a6)
{
  unint64_t v6;
  float32x4_t *v7;
  float32x4_t *v8;
  float32x4_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  unint64_t v20;
  float32x4_t v21;
  float *v22;
  float *v23;
  float *v24;
  unint64_t v25;
  float v26;
  float v27;
  float v28;

  LODWORD(a6) = *a5;
  if (a4 >= 4)
  {
    v6 = 0;
    v7 = result;
    v8 = a2;
    v9 = a3;
    do
    {
      v10 = *v7++;
      v11 = v10;
      v12 = *v8++;
      *v9++ = vaddq_f32(vmulq_n_f32(v11, *(float *)&a6), v12);
      v6 += 4;
    }
    while (v6 <= (a4 - 4));
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((int)v6 < a4)
  {
    v6 = v6;
    v13 = a4 - (unint64_t)v6;
    if (v13 < 0xC)
      goto LABEL_12;
    v14 = 4 * v6;
    if ((unint64_t)((char *)a3 - (char *)result) < 0x20)
      goto LABEL_12;
    if ((unint64_t)((char *)a3 - (char *)a2) < 0x20)
      goto LABEL_12;
    v6 = (v13 & 0xFFFFFFFFFFFFFFF8) + v6;
    v15 = v14 + 16;
    v16 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
    v17 = (float32x4_t *)((char *)a3 + v14 + 16);
    v18 = (float32x4_t *)((char *)result + v15);
    v19 = (float32x4_t *)((char *)a2 + v15);
    v20 = v13 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v21 = vmlaq_f32(*v19, v16, *v18);
      v17[-1] = vmlaq_f32(v19[-1], v16, v18[-1]);
      *v17 = v21;
      v17 += 2;
      v18 += 2;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v13 != (v13 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_12:
      v22 = &a3->f32[v6];
      v23 = &a2->f32[v6];
      v24 = &result->f32[v6];
      v25 = a4 - v6;
      do
      {
        v26 = *v24++;
        v27 = v26;
        v28 = *v23++;
        *v22++ = v28 + (float)(v27 * *(float *)&a6);
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

float64x2_t *sub_100232F10(float64x2_t *result, float64x2_t *a2, float64x2_t *a3, int a4, double *a5)
{
  uint64_t v5;
  unint64_t v6;
  float64x2_t *v7;
  float64x2_t *v8;
  float64x2_t *v9;
  float64x2_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t *v17;
  unint64_t v18;
  float64x2_t v19;
  double *v20;
  double *v21;
  double *v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;

  v5 = *(uint64_t *)a5;
  if (a4 >= 4)
  {
    v6 = 0;
    v7 = a3 + 1;
    v8 = a2 + 1;
    v9 = result + 1;
    do
    {
      v10 = vaddq_f64(vmulq_n_f64(*v9, *(double *)&v5), *v8);
      v6 += 4;
      v7[-1] = vaddq_f64(vmulq_n_f64(v9[-1], *(double *)&v5), v8[-1]);
      *v7 = v10;
      v7 += 2;
      v8 += 2;
      v9 += 2;
    }
    while (v6 <= (a4 - 4));
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((int)v6 < a4)
  {
    v6 = v6;
    v11 = a4 - (unint64_t)v6;
    if (v11 < 0xA)
      goto LABEL_12;
    v12 = 8 * v6;
    if ((unint64_t)((char *)a3 - (char *)result) < 0x20)
      goto LABEL_12;
    if ((unint64_t)((char *)a3 - (char *)a2) < 0x20)
      goto LABEL_12;
    v6 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + v6;
    v13 = v12 + 16;
    v14 = (float64x2_t)vdupq_lane_s64(v5, 0);
    v15 = (float64x2_t *)((char *)a3 + v12 + 16);
    v16 = (float64x2_t *)((char *)result + v13);
    v17 = (float64x2_t *)((char *)a2 + v13);
    v18 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v19 = vmlaq_f64(*v17, v14, *v16);
      v15[-1] = vmlaq_f64(v17[-1], v14, v16[-1]);
      *v15 = v19;
      v15 += 2;
      v16 += 2;
      v17 += 2;
      v18 -= 4;
    }
    while (v18);
    if (v11 != (v11 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_12:
      v20 = &a3->f64[v6];
      v21 = &a2->f64[v6];
      v22 = &result->f64[v6];
      v23 = a4 - v6;
      do
      {
        v24 = *v22++;
        v25 = v24;
        v26 = *v21++;
        *v20++ = v26 + v25 * *(double *)&v5;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

void sub_10023302C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, double a6)
{
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  __int16 v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  _QWORD *v46;
  _QWORD *v47;
  int32x4_t v48;
  int v49;
  int32x4_t v50;
  uint64_t v51;
  void (*v52)(__int128 *, __int128 *, __int128 *, double);
  void (*v53)(__int128 *, __int128 *, __int128 *, double);
  __int128 *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int *v60;
  uint64_t v61;
  int *v63;
  char v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  char *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  _BYTE *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  char *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  _DWORD *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  _DWORD *v89;
  int v90;
  __int128 *v91;
  uint64_t v92;
  _OWORD v93[4];
  char *v94;
  void *v95;
  _QWORD v96[2];
  int v97;
  _OWORD *v98;
  uint64_t v99;
  int v100;
  __int128 *v101;
  uint64_t v102;
  int v103;
  __int128 *v104;
  uint64_t v105;
  _BYTE v106[64];
  _BYTE *v107;
  void *v108;
  _QWORD v109[2];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  void *v116;
  _QWORD v117[2];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  void *v124;
  _QWORD v125[2];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  _QWORD *v132;
  _QWORD v133[2];
  _BYTE v134[8];
  int v135;

  sub_100298C2C(v134, &off_10044D3D8);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_OWORD *)(v12 + 16);
    v126 = *(_OWORD *)v12;
    v127 = v13;
    v128 = *(_OWORD *)(v12 + 32);
    v14 = *(_QWORD *)(v12 + 56);
    v129 = *(_QWORD *)(v12 + 48);
    v130 = v14;
    v131 = (_DWORD *)&v126 + 2;
    v132 = v133;
    v133[0] = 0;
    v133[1] = 0;
    if (v14)
    {
      v15 = (unsigned int *)(v14 + 20);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
    }
    if (*(int *)(v12 + 4) > 2)
    {
      DWORD1(v126) = 0;
      sub_100256B48((uint64_t)&v126, v12);
    }
    else
    {
      v17 = *(_QWORD **)(v12 + 72);
      v18 = v132;
      *v132 = *v17;
      v18[1] = v17[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v126);
  }
  if (sub_10025D914((_DWORD *)a4) == 0x10000)
  {
    v19 = *(_QWORD *)(a4 + 8);
    v20 = *(_OWORD *)(v19 + 16);
    v118 = *(_OWORD *)v19;
    v119 = v20;
    v120 = *(_OWORD *)(v19 + 32);
    v21 = *(_QWORD *)(v19 + 56);
    v121 = *(_QWORD *)(v19 + 48);
    v122 = v21;
    v123 = (_DWORD *)&v118 + 2;
    v124 = v125;
    v125[0] = 0;
    v125[1] = 0;
    if (v21)
    {
      v22 = (unsigned int *)(v21 + 20);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
    if (*(int *)(v19 + 4) > 2)
    {
      DWORD1(v118) = 0;
      sub_100256B48((uint64_t)&v118, v19);
    }
    else
    {
      v24 = *(_QWORD **)(v19 + 72);
      v25 = v124;
      *(_QWORD *)v124 = *v24;
      v25[1] = v24[1];
    }
  }
  else
  {
    sub_10025CCB8(a4, -1, (uint64_t)&v118);
  }
  v26 = v126;
  if (a5 >= 0)
    v27 = a5;
  else
    v27 = v126;
  v28 = v27 & 7;
  if (v28 <= (v118 & 7u))
    v29 = v118 & 7;
  else
    v29 = v28;
  if (v29 <= 5)
    v30 = 5;
  else
    v30 = v29;
  if ((v126 & 0xFF8) != 0)
  {
    v110 = 0uLL;
    v31 = sub_10029430C(&v110, 19);
    *(_DWORD *)(v31 + 15) = 824196413;
    *(_OWORD *)v31 = *(_OWORD *)"src.channels() == 1";
    sub_100294B74(-215, (uint64_t *)&v110, "mulTransposed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 2888);
  }
  if ((_QWORD)v119)
  {
    if (SDWORD1(v118) >= 3)
    {
      v33 = v123 + 1;
      v34 = 1;
      v35 = DWORD1(v118) & 0xFFFFFFFE;
      v36 = 1;
      do
      {
        v34 *= *(v33 - 1);
        v36 *= *v33;
        v33 += 2;
        v35 -= 2;
      }
      while (v35);
      v32 = v36 * v34;
      v37 = DWORD1(v118) - (unint64_t)(DWORD1(v118) & 0xFFFFFFFE);
      if (v37)
      {
        v38 = (_DWORD *)((char *)v123 + ((4 * DWORD1(v118)) & 0x3FFFFFFF8));
        do
        {
          v39 = *v38++;
          v32 *= v39;
          --v37;
        }
        while (v37);
      }
    }
    else
    {
      v32 = SHIDWORD(v118) * (uint64_t)SDWORD2(v118);
    }
    if (DWORD1(v118) && v32)
    {
      if ((v118 & 0xFF8) != 0)
      {
        v110 = 0uLL;
        qmemcpy((void *)sub_10029430C(&v110, 21), "delta.channels() == 1", 21);
        sub_100294B74(-215, (uint64_t *)&v110, "mulTransposed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 2894);
      }
      if (DWORD2(v118) != 1 && DWORD2(v118) != DWORD2(v126))
      {
        v110 = 0uLL;
        qmemcpy((void *)sub_10029430C(&v110, 43), "(delta.rows == src.rows || delta.rows == 1)", 43);
        sub_100294B74(-215, (uint64_t *)&v110, "mulTransposed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 2894);
      }
      if (HIDWORD(v118) != 1 && HIDWORD(v118) != HIDWORD(v126))
      {
        v110 = 0uLL;
        qmemcpy((void *)sub_10029430C(&v110, 43), "(delta.cols == src.cols || delta.cols == 1)", 43);
        sub_100294B74(-215, (uint64_t *)&v110, "mulTransposed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 2894);
      }
      if ((v118 & 0xFFF) != v30)
      {
        LODWORD(v110) = 33619968;
        *((_QWORD *)&v110 + 1) = &v118;
        *(_QWORD *)&v111 = 0;
        sub_1002044A8((unsigned int *)&v118, (uint64_t)&v110, v30, 1.0, 0.0);
      }
    }
  }
  v40 = 8;
  if (a3)
    v40 = 12;
  sub_10026285C(a2, *(_DWORD *)((unint64_t)&v126 | v40), *(_DWORD *)((unint64_t)&v126 | v40), v30, -1, 0, 0);
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v41 = *(_QWORD *)(a2 + 8);
    v42 = *(_OWORD *)(v41 + 16);
    v110 = *(_OWORD *)v41;
    v111 = v42;
    v112 = *(_OWORD *)(v41 + 32);
    v43 = *(_QWORD *)(v41 + 56);
    v113 = *(_QWORD *)(v41 + 48);
    v114 = v43;
    v115 = (char *)&v110 + 8;
    v116 = v117;
    v117[0] = 0;
    v117[1] = 0;
    if (v43)
    {
      v44 = (unsigned int *)(v43 + 20);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 + 1, v44));
    }
    if (*(int *)(v41 + 4) > 2)
    {
      DWORD1(v110) = 0;
      sub_100256B48((uint64_t)&v110, v41);
    }
    else
    {
      v46 = *(_QWORD **)(v41 + 72);
      v47 = v116;
      *(_QWORD *)v116 = *v46;
      v47[1] = v46[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v110);
  }
  if ((_QWORD)v127 != (_QWORD)v111)
  {
    v48.i64[0] = *((_QWORD *)&v110 + 1);
    v48.i64[1] = *((_QWORD *)&v126 + 1);
    v49 = v26 & 0xFFF;
    v50.i64[0] = 0x6400000064;
    v50.i64[1] = 0x6400000064;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v50, v48))) & 1) != 0 || v49 != v30)
    {
      if ((v26 & 0xFFF) != 0 || v29 > 5)
      {
        if ((v26 & 0xFFF) != 0 || v30 != 6)
        {
          if (v49 == 2 && v29 <= 5)
          {
            v52 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_100239390;
            v53 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_100238CB0;
          }
          else if (v49 == 2 && v30 == 6)
          {
            v52 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_10023A7A0;
            v53 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_100239FA0;
          }
          else if (v49 == 3 && v29 <= 5)
          {
            v52 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_10023B9D8;
            v53 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_10023B2D8;
          }
          else if (v49 == 3 && v30 == 6)
          {
            v52 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_10023CF78;
            v53 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_10023C700;
          }
          else if (v49 == 5 && v29 <= 5)
          {
            v52 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_10023E24C;
            v53 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_10023DBE8;
          }
          else
          {
            if (v49 != 5 || v30 != 6)
            {
              v53 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_100240344;
              if (a3)
                v53 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_10023FC1C;
              if (v49 != 6 || v30 != 6)
              {
                *(_QWORD *)v106 = 0;
                *(_QWORD *)&v106[8] = 0;
                sub_100294B74(-210, (uint64_t *)v106, "mulTransposed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 2989);
              }
              goto LABEL_128;
            }
            v52 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_10023F318;
            v53 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_10023EB74;
          }
        }
        else
        {
          v52 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_100236F14;
          v53 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_1002360A4;
        }
      }
      else
      {
        v52 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_10023468C;
        v53 = (void (*)(__int128 *, __int128 *, __int128 *, double))sub_100233CE4;
      }
      if (!a3)
        v53 = v52;
LABEL_128:
      v53(&v126, &v110, &v118, a6);
      *(_DWORD *)v106 = 50397184;
      *(_QWORD *)&v106[8] = &v110;
      *(_QWORD *)&v106[16] = 0;
      sub_1002642B4((uint64_t)v106, 0);
      goto LABEL_129;
    }
  }
  *(_DWORD *)v106 = 1124007936;
  memset(&v106[4], 0, 60);
  v107 = &v106[8];
  v108 = v109;
  v109[0] = 0;
  v109[1] = 0;
  if ((_QWORD)v119)
  {
    if (SDWORD1(v118) >= 3)
    {
      v55 = v123 + 1;
      v56 = 1;
      v57 = DWORD1(v118) & 0xFFFFFFFE;
      v58 = 1;
      do
      {
        v56 *= *(v55 - 1);
        v58 *= *v55;
        v55 += 2;
        v57 -= 2;
      }
      while (v57);
      v51 = v58 * v56;
      v59 = DWORD1(v118) - (unint64_t)(DWORD1(v118) & 0xFFFFFFFE);
      if (v59)
      {
        v60 = (_DWORD *)((char *)v123 + ((4 * DWORD1(v118)) & 0x3FFFFFFF8));
        do
        {
          v61 = *v60++;
          v51 *= v61;
          --v59;
        }
        while (v59);
      }
    }
    else
    {
      v51 = SHIDWORD(v118) * (uint64_t)SDWORD2(v118);
    }
    v54 = &v126;
    if (DWORD1(v118) && v51)
    {
      if (v123[1] == v131[1] && *v123 == *v131)
      {
        *(_QWORD *)&v93[1] = 0;
        LODWORD(v93[0]) = 16842752;
        *((_QWORD *)&v93[0] + 1) = &v126;
        v105 = 0;
        v103 = 16842752;
        v104 = &v118;
        v100 = 33619968;
        v101 = (__int128 *)v106;
        v102 = 0;
        v63 = sub_100263CBC();
      }
      else
      {
        LODWORD(v93[0]) = 16842752;
        *(_OWORD *)((char *)v93 + 8) = (unint64_t)&v118;
        v103 = 33619968;
        v104 = (__int128 *)v106;
        v105 = 0;
        sub_10021BD9C((uint64_t)v93, SDWORD2(v126) / SDWORD2(v118), SHIDWORD(v126) / SHIDWORD(v118), (uint64_t)&v103);
        *(_QWORD *)&v93[1] = 0;
        LODWORD(v93[0]) = 16842752;
        *((_QWORD *)&v93[0] + 1) = &v126;
        v105 = 0;
        v103 = 16842752;
        v104 = (__int128 *)v106;
        v100 = 33619968;
        v101 = (__int128 *)v106;
        v102 = 0;
        v63 = sub_100263CBC();
      }
      sub_1001D8554((uint64_t)v93, (uint64_t)&v103, (uint64_t)&v100, (uint64_t)v63, -1);
      v54 = (__int128 *)v106;
    }
  }
  else
  {
    v54 = &v126;
  }
  v105 = 0;
  v103 = 16842752;
  v104 = v54;
  v102 = 0;
  v100 = 16842752;
  v101 = v54;
  LODWORD(v93[0]) = 1124007936;
  memset((char *)v93 + 4, 0, 48);
  v93[3] = 0u;
  v94 = (char *)v93 + 8;
  v95 = v96;
  v96[0] = 0;
  v96[1] = 0;
  v99 = 0;
  v97 = 16842752;
  v98 = v93;
  v90 = 33619968;
  if (a3)
    v64 = 1;
  else
    v64 = 2;
  v91 = &v110;
  v92 = 0;
  sub_100231760((uint64_t)&v103, (uint64_t)&v100, (uint64_t)&v97, a6, 0.0, (uint64_t)&v90, v64);
  if (*((_QWORD *)&v93[3] + 1))
  {
    v65 = (unsigned int *)(*((_QWORD *)&v93[3] + 1) + 20);
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
      sub_100256C90((uint64_t)v93);
  }
  *((_QWORD *)&v93[3] + 1) = 0;
  memset(&v93[1], 0, 32);
  if (SDWORD1(v93[0]) >= 1)
  {
    v68 = 0;
    v69 = v94;
    do
      *(_DWORD *)&v69[4 * v68++] = 0;
    while (v68 < SDWORD1(v93[0]));
  }
  if (v95 != v96)
    j__free(v95);
  if (*(_QWORD *)&v106[56])
  {
    v70 = (unsigned int *)(*(_QWORD *)&v106[56] + 20);
    do
    {
      v71 = __ldaxr(v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v70));
    if (!v72)
      sub_100256C90((uint64_t)v106);
  }
  *(_QWORD *)&v106[56] = 0;
  memset(&v106[16], 0, 32);
  if (*(int *)&v106[4] >= 1)
  {
    v73 = 0;
    v74 = v107;
    do
      *(_DWORD *)&v74[4 * v73++] = 0;
    while (v73 < *(int *)&v106[4]);
  }
  if (v108 != v109)
    j__free(v108);
LABEL_129:
  if (v114)
  {
    v75 = (unsigned int *)(v114 + 20);
    do
    {
      v76 = __ldaxr(v75);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, v75));
    if (!v77)
      sub_100256C90((uint64_t)&v110);
  }
  v114 = 0;
  v111 = 0u;
  v112 = 0u;
  if (SDWORD1(v110) >= 1)
  {
    v78 = 0;
    v79 = v115;
    do
      *(_DWORD *)&v79[4 * v78++] = 0;
    while (v78 < SDWORD1(v110));
  }
  if (v116 != v117)
    j__free(v116);
  if (v122)
  {
    v80 = (unsigned int *)(v122 + 20);
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v80));
    if (!v82)
      sub_100256C90((uint64_t)&v118);
  }
  v122 = 0;
  v119 = 0u;
  v120 = 0u;
  if (SDWORD1(v118) >= 1)
  {
    v83 = 0;
    v84 = v123;
    do
      v84[v83++] = 0;
    while (v83 < SDWORD1(v118));
  }
  if (v124 != v125)
    j__free(v124);
  if (v130)
  {
    v85 = (unsigned int *)(v130 + 20);
    do
    {
      v86 = __ldaxr(v85);
      v87 = v86 - 1;
    }
    while (__stlxr(v87, v85));
    if (!v87)
      sub_100256C90((uint64_t)&v126);
  }
  v130 = 0;
  v127 = 0u;
  v128 = 0u;
  if (SDWORD1(v126) >= 1)
  {
    v88 = 0;
    v89 = v131;
    do
      v89[v88++] = 0;
    while (v88 < SDWORD1(v126));
  }
  if (v132 != v133)
    j__free(v132);
  if (v135)
    sub_1002989D0(v134);
}

void sub_100233B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_10029434C(&a33);
  __break(1u);
}

void sub_100233BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  sub_10029434C(&a33);
  sub_100006BE4((uint64_t)&a45);
  sub_100006BE4((uint64_t)&a57);
  sub_100006BE4(v57 - 192);
  sub_1001D40CC(v57 - 96);
  _Unwind_Resume(a1);
}

void sub_100233CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1 - 192);
  sub_1001D40CC(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_100233CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 96);
  _Unwind_Resume(a1);
}

_BYTE *sub_100233CE4(_QWORD *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  float32x4_t v11;
  float32x4_t v12;
  float64x2_t v13;
  _OWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  unsigned int v24;
  _BYTE *result;
  uint64_t v26;
  uint64_t v27;
  float32x4_t *v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  __n128 *v32;
  float *v33;
  uint64_t v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  float *v38;
  const float *v39;
  uint64_t v40;
  float32x4_t *v41;
  uint64_t v42;
  float32x4_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  float32x4_t *v47;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  int32x4_t v53;
  char v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  char v63;
  uint64_t v64;
  _DWORD *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  char v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  float32x4_t *v75;
  int8x16_t *v76;
  uint32x4_t v77;
  uint64_t v78;
  float32x4_t *v79;
  int8x16_t *v80;
  float32x4_t *v81;
  int8x16_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  unint64_t v87;
  float32x4_t *v88;
  float32x4_t *v89;
  int8x16_t v90;
  uint32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  uint64_t v96;
  uint32x4_t v97;
  int8x16_t *v98;
  _DWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float *v106;
  double v107;
  _OWORD *v108;
  uint64_t v109;
  float *v110;
  float v111;
  float32x4_t *v112;
  __int32 *v113;
  float64x2_t v114;
  uint64_t v115;
  float *v116;
  float64x2_t v117;
  float v118;
  float32x4_t v119;
  float64x2_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int32x4_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  uint64_t v132;
  int32x4_t v133;
  BOOL v135;
  uint64_t v136;
  _OWORD *i;
  uint64_t v138;
  _DWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  _OWORD *v146;
  uint64_t v147;
  float *v148;
  float v149;
  _DWORD *v150;
  float64x2_t v151;
  uint64_t v152;
  float *v153;
  float64x2_t v154;
  float v155;
  int8x16_t v156;
  int8x8_t v157;
  uint64x2_t v158;
  float64x2_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  float32x4_t *v163;
  uint32x4_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int32x4_t *v169;
  uint64_t v170;
  uint64_t v171;
  float32x4_t *v172;
  int8x16_t *v173;
  int8x16_t v174;
  _BYTE v176[1032];
  float32x4x4_t v177;

  v14 = (_OWORD *)a1[2];
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(_BYTE **)(a3 + 16);
  v17 = a1[10];
  if (*(int *)(a3 + 8) <= 1)
    v18 = 0;
  else
    v18 = *(_QWORD *)(a3 + 80) >> 2;
  v19 = (int *)a1[8];
  v21 = *v19;
  v20 = v19[1];
  if (v16)
    v22 = *(_DWORD *)(a3 + 12) < (int)v20;
  else
    v22 = 0;
  v23 = !v22;
  v24 = 20 * v21;
  if (!v22)
    v24 = 4 * v21;
  result = v176;
  if (v24 >= 0x409)
    operator new[]();
  v26 = *(_QWORD *)(a2 + 80) >> 2;
  v27 = v19[1];
  if ((v23 & 1) == 0)
  {
    v28 = (float32x4_t *)&v176[4 * v21];
    if ((int)v21 < 1)
      goto LABEL_36;
    v29 = v21 >= 8 && v18 == 1;
    if (v29
      && (v28 < (float32x4_t *)&v16[4 * v21]
        ? (v30 = v16 >= &v176[16 * v21 + 4 * v21])
        : (v30 = 1),
          v30))
    {
      v31 = v21 & 0x7FFFFFF8;
      v32 = (__n128 *)(v16 + 16);
      v33 = (float *)&v176[4 * v21 + 64];
      v34 = v21 & 0xFFFFFFF8;
      do
      {
        v177.val[0] = (float32x4_t)v32[-1];
        v35 = *v32;
        v177.val[1] = v177.val[0];
        v177.val[2] = v177.val[0];
        v177.val[3] = v177.val[0];
        v36 = *v32;
        a10 = *(int8x16_t *)v32;
        v37 = *v32;
        v38 = v33 - 16;
        vst4q_f32(v38, v177);
        vst4q_f32(v33, *(float32x4x4_t *)(&a10 - 2));
        v32 += 2;
        v33 += 32;
        v34 -= 8;
      }
      while (v34);
      if (v31 == v21)
      {
LABEL_36:
        v18 = 4 * (v18 != 0);
        v16 = &v176[4 * v21];
        if ((int)v20 < 1)
          return result;
        goto LABEL_37;
      }
    }
    else
    {
      v31 = 0;
    }
    v39 = (const float *)&v16[4 * v18 * v31];
    v41 = (float32x4_t *)&v176[16 * v31 + 4 * v21];
    v42 = v21 - v31;
    do
    {
      v43 = vld1q_dup_f32(v39);
      v40 = 4 * v18;
      v39 = (const float *)((char *)v39 + v40);
      *v41++ = v43;
      --v42;
    }
    while (v42);
    goto LABEL_36;
  }
  if (!v16)
  {
    if ((int)v20 < 1)
      return result;
    v129 = 0;
    v130 = v20 - 4;
    v131 = a4 * 0.0;
    *(float *)&v131 = a4 * 0.0;
    v132 = v21 & 0xFFFFFFF8;
    v133 = vdupq_lane_s32(*(int32x2_t *)&v131, 0);
    v135 = v21 < 8 || v17 != 1;
    v136 = 4 * v26;
    for (i = v14; ; i = (_OWORD *)((char *)i + 1))
    {
      if ((int)v21 < 1)
        goto LABEL_144;
      if (v135 || v176 < (_BYTE *)v14 + v129 + v21 && (char *)v14 + v129 < &v176[4 * v21])
      {
        v138 = 0;
LABEL_142:
        v139 = &v176[4 * v138];
        v140 = v17 * v138;
        v141 = v21 - v138;
        do
        {
          a11.i8[0] = *((_BYTE *)i + v140);
          *(float *)a11.i32 = (float)a11.u32[0];
          *v139++ = a11.i32[0];
          v140 += v17;
          --v141;
        }
        while (v141);
        goto LABEL_144;
      }
      if (v21 >= 0x10)
      {
        v171 = v21 & 0x7FFFFFF0;
        v172 = (float32x4_t *)v176;
        v173 = (int8x16_t *)i;
        do
        {
          v174 = *v173++;
          v13 = (float64x2_t)vqtbl1q_s8(v174, (int8x16_t)xmmword_1003BCAA0);
          a11 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v174, (int8x16_t)xmmword_1003BCA90));
          v12 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v174, (int8x16_t)xmmword_1003BCAB0));
          v172[2] = v12;
          v172[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v174, (int8x16_t)xmmword_1003BCAC0));
          *v172 = (float32x4_t)a11;
          v172[1] = vcvtq_f32_u32((uint32x4_t)v13);
          v172 += 4;
          v171 -= 16;
        }
        while (v171);
        if ((v21 & 0xFFFFFFF0) == v21)
          goto LABEL_144;
        v162 = v21 & 0x7FFFFFF0;
        v138 = v21 & 0xFFFFFFF0;
        if ((v21 & 8) == 0)
          goto LABEL_142;
      }
      else
      {
        v162 = 0;
      }
      v163 = (float32x4_t *)&v176[4 * v162];
      do
      {
        a11.i64[0] = *(_QWORD *)((char *)i + v162);
        v164 = (uint32x4_t)vqtbl1q_s8(a11, (int8x16_t)xmmword_1003BCAA0);
        a11 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a11, (int8x16_t)xmmword_1003BCA90));
        *v163 = (float32x4_t)a11;
        v163[1] = vcvtq_f32_u32(v164);
        v163 += 2;
        v162 += 8;
      }
      while (v132 != v162);
      v138 = v21 & 0xFFFFFFF8;
      if (v132 != v21)
        goto LABEL_142;
LABEL_144:
      LODWORD(v142) = v129;
      v143 = v129;
      if (v129 <= v130)
      {
        do
        {
          a11 = (int8x16_t)v133;
          if ((int)v21 >= 1)
          {
            v150 = (_DWORD *)((char *)v14 + v143);
            v151 = 0uLL;
            v152 = v21;
            v153 = (float *)v176;
            v154 = 0uLL;
            do
            {
              v155 = *v153++;
              LODWORD(v13.f64[0]) = *v150;
              v156 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&v13.f64[0]));
              v157 = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL), (int8x8_t)0xFF000000FFLL);
              v158.i64[0] = v157.u32[0];
              v158.i64[1] = v157.u32[1];
              v159 = vcvtq_f64_u64(v158);
              *(int8x8_t *)v156.i8 = vand_s8(*(int8x8_t *)v156.i8, (int8x8_t)0xFF000000FFLL);
              v158.i64[0] = v156.u32[0];
              v158.i64[1] = v156.u32[1];
              v13 = vcvtq_f64_u64(v158);
              v151 = vmlaq_n_f64(v151, v13, v155);
              v154 = vmlaq_n_f64(v154, v159, v155);
              v150 = (_DWORD *)((char *)v150 + v17);
              --v152;
            }
            while (v152);
            *(double *)v12.i64 = a4;
            a11 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v151, a4)), vmulq_n_f64(v154, a4));
          }
          *(int8x16_t *)(v15 + 4 * v143) = a11;
          v142 = v143 + 4;
          v143 = v142;
        }
        while ((int)v130 >= (int)v142);
      }
      if ((int)v142 >= (int)v20)
        goto LABEL_136;
      v144 = v142;
      if ((int)v21 >= 1)
      {
        do
        {
          v145 = 0.0;
          v146 = v14;
          v147 = v21;
          v148 = (float *)v176;
          do
          {
            v149 = *v148++;
            v12.i8[0] = *((_BYTE *)v146 + v144);
            *(double *)v12.i64 = (double)v12.u64[0];
            v145 = v145 + v149 * *(double *)v12.i64;
            v146 = (_OWORD *)((char *)v146 + v17);
            --v147;
          }
          while (v147);
          *(float *)a11.i32 = v145 * a4;
          *(_DWORD *)(v15 + 4 * v144++) = a11.i32[0];
        }
        while ((int)v20 > (int)v144);
        goto LABEL_136;
      }
      v160 = (v20 + ~(_DWORD)v142);
      if (v160 >= 7)
      {
        v165 = v160 + 1;
        v166 = (v160 + 1) & 0x1FFFFFFF8;
        v161 = v166 + v144;
        v167 = 4 * v144;
        v168 = v166;
        do
        {
          v169 = (int32x4_t *)(v15 + v167);
          *v169 = v133;
          v169[1] = v133;
          v167 += 32;
          v168 -= 8;
        }
        while (v168);
        if (v165 == v166)
          goto LABEL_136;
      }
      else
      {
        v161 = v144;
      }
      v170 = 4 * v161;
      do
      {
        *(_DWORD *)(v15 + v170) = LODWORD(v131);
        v170 += 4;
        LODWORD(v161) = v161 + 1;
      }
      while ((int)v20 > (int)v161);
LABEL_136:
      ++v129;
      v15 += v136;
      if (v129 == v20)
        return result;
    }
  }
  v28 = 0;
  if ((int)v20 >= 1)
  {
LABEL_37:
    v44 = 0;
    v45 = v20 - 4;
    v46 = a4 * 0.0;
    *(float *)&v46 = a4 * 0.0;
    v47 = (float32x4_t *)&v176[4 * v21];
    v49 = v176 < &v28->i8[4 * v21] && v28 < v47;
    v50 = v17 == 1 && v18 == 1;
    v51 = v21 & 0xFFFFFFF0;
    v52 = v21 & 0xFFFFFFF8;
    v53 = vdupq_lane_s32(*(int32x2_t *)&v46, 0);
    v55 = !v50 || v21 < 8;
    v56 = 4 * v18;
    v57 = 4 * v26;
    v58 = v16;
    v59 = v14;
    do
    {
      v60 = (unint64_t)v14 + v44;
      v61 = (unint64_t)v14 + v44 + v21;
      if (v28)
      {
        if ((int)v21 < 1)
          goto LABEL_104;
        if ((v55 & 1) != 0
          || ((unint64_t)v176 < v61 ? (v62 = v60 >= (unint64_t)v47) : (v62 = 1),
              !v62 ? (v63 = 1) : (v63 = v49),
              (v63 & 1) != 0))
        {
          v64 = 0;
LABEL_65:
          v65 = &v176[4 * v64];
          v66 = (float *)((char *)v28->f32 + v56 * v64);
          v67 = v21 - v64;
          v68 = v17 * v64;
          do
          {
            a10.i8[0] = *((_BYTE *)v59 + v68);
            *(float *)a10.i32 = (float)a10.u32[0] - *v66;
            *v65++ = a10.i32[0];
            v66 = (float *)((char *)v66 + v56);
            v68 += v17;
            --v67;
          }
          while (v67);
          goto LABEL_104;
        }
        if (v21 >= 0x10)
        {
          v78 = v21 & 0x7FFFFFF0;
          v79 = (float32x4_t *)v176;
          v80 = (int8x16_t *)v59;
          v81 = v28;
          do
          {
            v82 = *v80++;
            v11 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_1003BCAA0));
            v84 = v81[2];
            v83 = v81[3];
            v86 = *v81;
            v85 = v81[1];
            v81 += 4;
            v12 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_1003BCAB0)), v84);
            v79[2] = v12;
            v79[3] = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_1003BCAC0)), v83);
            a10 = (int8x16_t)vsubq_f32(v11, v85);
            *v79 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_1003BCA90)), v86);
            v79[1] = (float32x4_t)a10;
            v79 += 4;
            v78 -= 16;
          }
          while (v78);
          if (v51 == v21)
            goto LABEL_104;
          v74 = v21 & 0x7FFFFFF0;
          v64 = v21 & 0xFFFFFFF0;
          if ((v21 & 8) == 0)
            goto LABEL_65;
        }
        else
        {
          v74 = 0;
        }
        v75 = (float32x4_t *)((char *)v28 + 4 * v74);
        v76 = (int8x16_t *)&v176[4 * v74];
        do
        {
          a10.i64[0] = *(_QWORD *)((char *)v59 + v74);
          v77 = (uint32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_1003BCA90);
          v12 = *v75;
          v11 = v75[1];
          v75 += 2;
          a10 = (int8x16_t)vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_1003BCAA0)), v11);
          *(float32x4_t *)v76 = vsubq_f32(vcvtq_f32_u32(v77), v12);
          v76[1] = a10;
          v76 += 2;
          v74 += 8;
        }
        while (v52 != v74);
        v64 = v21 & 0xFFFFFFF8;
        if (v52 != v21)
          goto LABEL_65;
      }
      else
      {
        if ((int)v21 < 1)
          goto LABEL_104;
        v69 = 0;
        if ((v55 & 1) != 0
          || (v176 < &v16[4 * v21 + 4 * v44] ? (v70 = &v16[4 * v44] >= (_BYTE *)v47) : (v70 = 1),
              v70 ? (v71 = 0) : (v71 = 1),
              v60 < (unint64_t)v47 ? (v72 = (unint64_t)v176 >= v61) : (v72 = 1),
              !v72 || (v71 & 1) != 0))
        {
LABEL_102:
          v99 = &v176[4 * v69];
          v100 = v56 * v69;
          v101 = v21 - v69;
          v102 = v17 * v69;
          do
          {
            a10.i8[0] = *((_BYTE *)v59 + v102);
            *(float *)a10.i32 = (float)a10.u32[0] - *(float *)((char *)v58 + v100);
            *v99++ = a10.i32[0];
            v100 += v56;
            v102 += v17;
            --v101;
          }
          while (v101);
          goto LABEL_104;
        }
        if (v21 >= 0x10)
        {
          v87 = 0;
          v88 = (float32x4_t *)v176;
          v89 = (float32x4_t *)v58;
          do
          {
            v90 = (int8x16_t)v59[v87 / 0x10];
            v91 = (uint32x4_t)vqtbl1q_s8(v90, (int8x16_t)xmmword_1003BCA90);
            v93 = v89[2];
            v92 = v89[3];
            v95 = *v89;
            v94 = v89[1];
            v89 += 4;
            v11 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v90, (int8x16_t)xmmword_1003BCAA0)), v94);
            v12 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v90, (int8x16_t)xmmword_1003BCAB0)), v93);
            a10 = (int8x16_t)vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v90, (int8x16_t)xmmword_1003BCAC0)), v92);
            v88[2] = v12;
            v88[3] = (float32x4_t)a10;
            *v88 = vsubq_f32(vcvtq_f32_u32(v91), v95);
            v88[1] = v11;
            v88 += 4;
            v87 += 16;
          }
          while (v51 != v87);
          if (v51 == v21)
            goto LABEL_104;
          v73 = v21 & 0x7FFFFFF0;
          v69 = v21 & 0xFFFFFFF0;
          if ((v21 & 8) == 0)
            goto LABEL_102;
        }
        else
        {
          v73 = 0;
        }
        v96 = 4 * v73;
        do
        {
          a10.i64[0] = *(_QWORD *)((char *)v59 + v73);
          v97 = (uint32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_1003BCA90);
          v12 = *(float32x4_t *)((char *)v58 + v96);
          v11 = *(float32x4_t *)((char *)v58 + v96 + 16);
          a10 = (int8x16_t)vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_1003BCAA0)), v11);
          v98 = (int8x16_t *)&v176[v96];
          *(float32x4_t *)v98 = vsubq_f32(vcvtq_f32_u32(v97), v12);
          v98[1] = a10;
          v73 += 8;
          v96 += 32;
        }
        while (v52 != v73);
        v69 = v21 & 0xFFFFFFF8;
        if (v52 != v21)
          goto LABEL_102;
      }
LABEL_104:
      LODWORD(v103) = v44;
      v104 = v44;
      if (v44 <= v45)
      {
        do
        {
          a10 = (int8x16_t)v53;
          if ((int)v21 >= 1)
          {
            v112 = (float32x4_t *)&v16[4 * v104];
            if (v28)
              v112 = v28;
            v113 = (__int32 *)((char *)v14 + v104);
            v114 = 0uLL;
            v115 = v21;
            v116 = (float *)v176;
            v117 = 0uLL;
            do
            {
              v118 = *v116++;
              v12.i32[0] = *v113;
              v119 = vsubq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v12.f32))), *v112);
              v120 = vcvtq_f64_f32(*(float32x2_t *)v119.f32);
              v12 = (float32x4_t)vcvt_hight_f64_f32(v119);
              v117 = vmlaq_n_f64(v117, (float64x2_t)v12, v118);
              v114 = vmlaq_n_f64(v114, v120, v118);
              v113 = (__int32 *)((char *)v113 + v17);
              v112 = (float32x4_t *)((char *)v112 + v56);
              --v115;
            }
            while (v115);
            v11.i32[0] = LODWORD(a4);
            a10 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v114, a4)), vmulq_n_f64(v117, a4));
          }
          *(int8x16_t *)(v15 + 4 * v104) = a10;
          v103 = v104 + 4;
          v104 = v103;
        }
        while ((int)v45 >= (int)v103);
      }
      if ((int)v103 >= (int)v20)
        goto LABEL_53;
      v105 = v103;
      if ((int)v21 >= 1)
      {
        do
        {
          v106 = (float *)&v16[4 * v105];
          if (v28)
            v106 = (float *)v28;
          v107 = 0.0;
          v108 = v14;
          v109 = v21;
          v110 = (float *)v176;
          do
          {
            v111 = *v110++;
            v11.i8[0] = *((_BYTE *)v108 + v105);
            *(double *)v11.i64 = (float)((float)v11.u32[0] - *v106);
            v107 = v107 + v111 * *(double *)v11.i64;
            v106 = (float *)((char *)v106 + v56);
            v108 = (_OWORD *)((char *)v108 + v17);
            --v109;
          }
          while (v109);
          *(float *)a10.i32 = v107 * a4;
          *(_DWORD *)(v15 + 4 * v105++) = a10.i32[0];
        }
        while ((int)v20 > (int)v105);
        goto LABEL_53;
      }
      v121 = (v20 + ~(_DWORD)v103);
      if (v121 >= 7)
      {
        v123 = v121 + 1;
        v124 = (v121 + 1) & 0x1FFFFFFF8;
        v122 = v124 + v105;
        v125 = 4 * v105;
        v126 = v124;
        do
        {
          v127 = (int32x4_t *)(v15 + v125);
          *v127 = v53;
          v127[1] = v53;
          v125 += 32;
          v126 -= 8;
        }
        while (v126);
        if (v123 == v124)
          goto LABEL_53;
      }
      else
      {
        v122 = v105;
      }
      v128 = 4 * v122;
      do
      {
        *(_DWORD *)(v15 + v128) = LODWORD(v46);
        v128 += 4;
        LODWORD(v122) = v122 + 1;
      }
      while ((int)v20 > (int)v122);
LABEL_53:
      ++v44;
      v15 += v57;
      v59 = (_OWORD *)((char *)v59 + 1);
      v58 = (_OWORD *)((char *)v58 + 4);
    }
    while (v44 != v27);
  }
  return result;
}

void sub_10023465C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a12 != v12)
  {
    if (a12)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10023468C(_BYTE *result, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, int8x16_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  float32x4_t v11;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  float32x4_t *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t *v45;
  int8x16_t v46;
  uint32x4_t v47;
  __n128 *v48;
  uint64_t v49;
  float32x4_t *v50;
  float32x4_t *v51;
  int8x16_t *v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  __n128 *v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  int8x16_t *v62;
  unsigned int v63;
  double v64;
  uint64_t v65;
  float *v66;
  float v67;
  double v68;
  double v69;
  float v70;
  float v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int8x16_t *v77;
  uint64_t v78;
  uint64_t v79;
  float32x4_t *v80;
  int8x16_t *v81;
  uint64_t v82;
  float32x4_t *v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float32x4_t *v101;
  uint64_t v102;
  uint64_t v103;
  float32x4_t *v104;
  float32x4_t v105;
  float32x4_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float64x2_t v113;
  float64x2_t v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  const char *v119;
  const char *v120;
  double v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t j;
  const char *v125;
  unint64_t v126;
  unint64_t v127;
  double v128;
  unint64_t v129;
  unint64_t v130;
  double v131;
  unint64_t v132;
  unint64_t v133;
  double v134;
  uint64_t v135;
  float v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  const char *v141;
  unint64_t v142;
  float v143;
  uint64_t v144;
  double v145;
  const char *v146;
  const char *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  int8x8_t v151;
  int8x8_t v152;
  int8x8_t v153;
  int8x8_t v154;
  int8x8_t v155;
  int8x8_t v156;
  unint64_t v157;
  int8x8_t v158;
  unint64_t v159;
  int8x8_t v160;
  unint64_t v161;
  unsigned int v162;
  int8x8_t v163;
  unsigned int v164;
  int v165;
  __int32 v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unint64_t v182;
  int8x8_t v183;
  uint64x2_t v184;
  float64x2_t v185;
  int8x8_t v186;
  int8x8_t v187;
  float64x2_t v188;
  float64x2_t v189;
  int8x8_t v190;
  float64x2_t v191;
  int8x8_t v192;
  uint64x2_t v193;
  int8x8_t v194;
  float64x2_t v195;
  int8x8_t v196;
  int8x8_t v197;
  int8x8_t v198;
  int8x8_t v199;
  float64x2_t v200;
  int8x8_t v201;
  float64x2_t v202;
  int8x8_t v203;
  float64x2_t v204;
  int8x8_t v205;
  float64x2_t v206;
  float64x2_t v207;
  int8x8_t v208;
  float64x2_t v209;
  int8x8_t v210;
  uint64x2_t v211;
  int8x8_t v212;
  float64x2_t v213;
  float64x2_t v214;
  int8x8_t v215;
  int8x8_t v216;
  int8x8_t v217;
  float64x2_t v218;
  float64x2_t v219;
  uint64x2_t v220;
  int8x8_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  int8x8_t v225;
  float64x2_t v226;
  int8x8_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  uint64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  double v253;
  double v254;
  double v255;
  double v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  const char *v260;
  const char *v261;
  int8x8_t v262;
  int8x8_t v263;
  int8x8_t v264;
  int8x8_t v265;
  int8x8_t v266;
  int8x8_t v267;
  int8x8_t v268;
  int8x8_t v269;
  int8x8_t v270;
  int8x8_t v271;
  int8x8_t v272;
  int8x8_t v273;
  int8x8_t v274;
  int8x8_t v275;
  int8x8_t v276;
  int8x8_t v277;
  int8x8_t v278;
  int8x8_t v279;
  int8x8_t v280;
  int8x8_t v281;
  int8x8_t v282;
  int8x8_t v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  uint64x2_t v289;
  int8x8_t v290;
  float64x2_t v291;
  int8x8_t v292;
  uint64x2_t v293;
  int8x8_t v294;
  float64x2_t v295;
  int8x8_t v296;
  uint64x2_t v297;
  int8x8_t v298;
  float64x2_t v299;
  int8x8_t v300;
  uint64x2_t v301;
  int8x8_t v302;
  float64x2_t v303;
  int8x8_t v304;
  uint64x2_t v305;
  int8x8_t v306;
  float64x2_t v307;
  int8x8_t v308;
  uint64x2_t v309;
  int8x8_t v310;
  float64x2_t v311;
  int8x8_t v312;
  uint64x2_t v313;
  int8x8_t v314;
  float64x2_t v315;
  int8x8_t v316;
  uint64x2_t v317;
  int8x8_t v318;
  float64x2_t v319;
  int8x8_t v320;
  uint64x2_t v321;
  int8x8_t v322;
  float64x2_t v323;
  int8x8_t v324;
  uint64x2_t v325;
  int8x8_t v326;
  float64x2_t v327;
  int8x8_t v328;
  uint64x2_t v329;
  int8x8_t v330;
  float64x2_t v331;
  int8x8_t v332;
  float64x2_t v333;
  float64x2_t v334;
  int8x8_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  double v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  double v353;
  unint64_t v354;
  unint64_t v355;
  double v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  double v360;
  int32x4_t v361;
  _BYTE *v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t i;
  const char *v370;
  unint64_t v371;
  unint64_t v372;
  double v373;
  unint64_t v374;
  unint64_t v375;
  double v376;
  unint64_t v377;
  unint64_t v378;
  double v379;
  float v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  const char *v387;
  const char *v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  const char *v392;
  unsigned int v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unsigned int v398;
  unint64_t v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  unsigned int v417;
  unsigned int v418;
  unsigned int v419;
  __int32 v420;
  __int32 v421;
  __int32 v422;
  __int32 v423;
  const char *v424;
  uint64_t v425;
  uint64_t v426;
  const char *v427;
  double v428;
  double v429;
  _BYTE v430[8];
  uint64_t v431;
  int8x16_t v432;
  int8x8x4_t v433;
  int8x8x4_t v434;
  int8x16x4_t v435;
  int8x16x4_t v436;

  v13 = (const char *)*((_QWORD *)result + 2);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *((_QWORD *)result + 10);
  v382 = *(_QWORD *)(a2 + 80) >> 2;
  if (*(int *)(a3 + 8) <= 1)
    v17 = 0;
  else
    v17 = *(_QWORD *)(a3 + 80) >> 2;
  v18 = (unsigned int *)*((_QWORD *)result + 8);
  v19 = *v18;
  v20 = (int)v18[1];
  v21 = v18[1];
  v395 = *((_QWORD *)result + 10);
  v396 = v19;
  v394 = v18[1];
  v397 = v21;
  if (!v15)
  {
    if ((int)v19 < 1)
      return result;
    if ((int)v20 < 4)
    {
      if ((int)v21 <= 0)
      {
        v358 = 0;
        v359 = 0;
        v360 = a4 * 0.0;
        *(float *)&v360 = a4 * 0.0;
        v361 = vdupq_lane_s32(*(int32x2_t *)&v360, 0);
        v362 = (_BYTE *)(v14 + 16);
        v363 = 1;
        do
        {
          if (v363 <= v19)
            v364 = v19;
          else
            v364 = v363;
          v365 = v359 + 1;
          if (v359 + 1 > v19)
            v366 = v359 + 1;
          else
            v366 = v19;
          v367 = v366 - v359;
          if (v367 < 8)
            goto LABEL_145;
          v368 = (v364 + v358) & 0xFFFFFFFFFFFFFFF8;
          v359 += v367 & 0xFFFFFFFFFFFFFFF8;
          result = v362;
          do
          {
            *((int32x4_t *)result - 1) = v361;
            *(int32x4_t *)result = v361;
            result += 32;
            v368 -= 8;
          }
          while (v368);
          if (v367 != (v367 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_145:
            do
              *(_DWORD *)(v14 + 4 * v359++) = LODWORD(v360);
            while (v359 < v19);
          }
          ++v363;
          --v358;
          v362 += 4 * v382 + 4;
          v14 += 4 * v382;
          v359 = v365;
        }
        while (v365 != v19);
      }
      else
      {
        v116 = 0;
        v117 = v13 + 2;
        do
        {
          v118 = 0;
          v119 = &v13[v16 * v116];
          v120 = v117;
          do
          {
            LOBYTE(a5) = *v119;
            LOBYTE(a6) = *(v120 - 2);
            a6 = (double)*(unint64_t *)&a6;
            v121 = (double)*(unint64_t *)&a5 * a6 + 0.0;
            if ((_DWORD)v21 != 1)
            {
              LOBYTE(a6) = v119[1];
              a6 = (double)*(unint64_t *)&a6;
              LOBYTE(a7) = *(v120 - 1);
              a7 = (double)*(unint64_t *)&a7;
              v121 = v121 + a6 * a7;
              if ((_DWORD)v20 != 2)
              {
                LOBYTE(a6) = v119[2];
                a6 = (double)*(unint64_t *)&a6;
                LOBYTE(a7) = *v120;
                a7 = (double)*(unint64_t *)&a7;
                v121 = v121 + a6 * a7;
              }
            }
            a5 = v121 * a4;
            *(float *)&a5 = a5;
            *(_DWORD *)(v14 + 4 * v118) = LODWORD(a5);
            v120 += v16;
            ++v118;
          }
          while (v116 + v118 < v19);
          ++v116;
          v117 += v16;
          v14 += 4 * v382 + 4;
        }
        while (v116 != v19);
      }
      return result;
    }
    v122 = (v21 - 4);
    v123 = (v122 & 0xFFFFFFFC) + 4;
    if (v122 < 0x1C)
    {
      if (v123 >= v21)
      {
        for (i = 0; i != v19; ++i)
        {
          v370 = v13;
          v371 = i;
          do
          {
            v372 = 0;
            v373 = 0.0;
            do
            {
              LOBYTE(a5) = v13[v372];
              LOBYTE(a6) = v370[v372];
              LOBYTE(a7) = v13[v372 + 1];
              *(double *)&v374 = (double)*(unint64_t *)&a6;
              a8.i8[0] = v370[v372 + 1];
              *(double *)a8.i64 = (double)a8.u64[0];
              *(double *)&v375 = (double)*(unint64_t *)&a7 * *(double *)a8.i64;
              v376 = *(double *)&v375 + (double)*(unint64_t *)&a5 * *(double *)&v374;
              LOBYTE(v374) = v13[v372 + 2];
              *(double *)&v377 = (double)v374;
              LOBYTE(v375) = v370[v372 + 2];
              *(double *)&v378 = (double)v375;
              v379 = v376 + *(double *)&v377 * *(double *)&v378;
              LOBYTE(v377) = v13[v372 + 3];
              a6 = (double)v377;
              LOBYTE(v378) = v370[v372 + 3];
              a7 = (double)v378;
              a5 = v379 + a6 * a7;
              v373 = v373 + a5;
              v372 += 4;
            }
            while (v372 <= v122);
            v380 = v373 * a4;
            *(float *)(v14 + 4 * v371++) = v380;
            v370 += v16;
          }
          while (v371 < v19);
          v14 += 4 * v382;
          v13 += v16;
        }
      }
      else
      {
        for (j = 0; j != v19; ++j)
        {
          v125 = v13;
          v126 = j;
          do
          {
            v127 = 0;
            v128 = 0.0;
            do
            {
              LOBYTE(a5) = v13[v127];
              LOBYTE(a6) = v125[v127];
              LOBYTE(a7) = v13[v127 + 1];
              *(double *)&v129 = (double)*(unint64_t *)&a6;
              a8.i8[0] = v125[v127 + 1];
              *(double *)a8.i64 = (double)a8.u64[0];
              *(double *)&v130 = (double)*(unint64_t *)&a7 * *(double *)a8.i64;
              v131 = *(double *)&v130 + (double)*(unint64_t *)&a5 * *(double *)&v129;
              LOBYTE(v129) = v13[v127 + 2];
              *(double *)&v132 = (double)v129;
              LOBYTE(v130) = v125[v127 + 2];
              *(double *)&v133 = (double)v130;
              v134 = v131 + *(double *)&v132 * *(double *)&v133;
              LOBYTE(v132) = v13[v127 + 3];
              a6 = (double)v132;
              LOBYTE(v133) = v125[v127 + 3];
              a7 = (double)v133;
              a5 = v134 + a6 * a7;
              v128 = v128 + a5;
              v127 += 4;
            }
            while (v127 <= v122);
            v135 = 0;
            do
            {
              LOBYTE(a5) = v13[v123 + v135];
              LOBYTE(a6) = v125[v123 + v135];
              a5 = (double)*(unint64_t *)&a5;
              a6 = (double)*(unint64_t *)&a6;
              v128 = v128 + a5 * a6;
              ++v135;
            }
            while ((int)v20 > (int)v123 + (int)v135);
            v136 = v128 * a4;
            *(float *)(v14 + 4 * v126++) = v136;
            v125 += v16;
          }
          while (v126 < v19);
          v14 += 4 * v382;
          v13 += v16;
        }
      }
      return result;
    }
    v137 = 0;
    v138 = (v122 >> 2) + 1;
    v139 = v138 & 0x7FFFFFF0;
    v390 = v138 & 0x7FFFFFF8;
    v385 = (v122 & 0xFFFFFFFC) + 4;
    v386 = (v21 - 4);
    v383 = v139;
    v384 = v138;
LABEL_105:
    v140 = &v13[v123];
    v141 = v13;
    v381 = v137;
    v142 = v137;
    v388 = v13;
    v389 = v14;
    v387 = &v13[v123];
    while (v122 >= 0x3C)
    {
      v391 = v142;
      v392 = v141;
      v145 = 0.0;
      v146 = v141;
      do
      {
        v428 = v145;
        v426 = v139;
        v435 = vld4q_s8(v13);
        v147 = v13 + 64;
        v424 = v147;
        v436 = vld4q_s8(v146);
        v146 += 64;
        v148 = vextq_s8(v435.val[0], v435.val[0], 8uLL).u64[0];
        v149 = vextq_s8(v436.val[0], v436.val[0], 8uLL).u64[0];
        v150 = vextq_s8(v435.val[1], v435.val[1], 8uLL).u64[0];
        v423 = v435.val[1].u8[7];
        v422 = v435.val[1].u8[5];
        v421 = v435.val[1].u8[3];
        v420 = v435.val[1].u8[1];
        v419 = v435.val[2].u8[6];
        v151.i32[0] = BYTE2(v148);
        v412 = v436.val[0].u8[0];
        v418 = v435.val[2].u8[7];
        v417 = v435.val[2].u8[4];
        v152.i32[0] = BYTE4(v148);
        v411 = v436.val[0].u8[2];
        v416 = v435.val[2].u8[5];
        v415 = v435.val[2].u8[2];
        v153.i32[0] = BYTE6(v148);
        v414 = v435.val[2].u8[3];
        v413 = v435.val[2].u8[1];
        v409 = v435.val[3].u8[0];
        v410 = v435.val[2].u8[0];
        v154.i32[0] = BYTE2(v149);
        v155.i32[0] = v435.val[1].u8[6];
        v407 = v435.val[3].u8[2];
        v408 = v435.val[3].u8[1];
        v156.i32[0] = BYTE4(v149);
        v157 = vextq_s8(v436.val[1], v436.val[1], 8uLL).u64[0];
        v405 = v435.val[3].u8[4];
        v406 = v435.val[3].u8[3];
        v158.i32[0] = BYTE6(v149);
        v159 = vextq_s8(v435.val[2], v435.val[2], 8uLL).u64[0];
        v404 = v435.val[3].u8[5];
        v160.i32[0] = BYTE6(v150);
        v400 = v435.val[3].u8[7];
        v401 = v435.val[3].u8[6];
        v399 = vextq_s8(v435.val[3], v435.val[3], 8uLL).u64[0];
        v435.val[3].i32[0] = BYTE4(v150);
        v161 = vextq_s8(v436.val[2], v436.val[2], 8uLL).u64[0];
        v162 = v436.val[0].u8[1];
        v163.i32[0] = BYTE2(v150);
        v164 = v436.val[0].u8[3];
        v165 = v436.val[1].u8[7];
        v166 = v436.val[1].u8[5];
        v167 = v436.val[1].u8[2];
        v168 = v436.val[1].u8[3];
        v169 = v436.val[1].u8[0];
        result = (_BYTE *)v436.val[1].u8[1];
        v170 = v436.val[2].u8[6];
        v171 = v436.val[2].u8[7];
        v172 = v436.val[2].u8[4];
        v173 = v436.val[2].u8[5];
        LODWORD(v147) = v436.val[2].u8[2];
        v174 = v436.val[2].u8[3];
        v175 = v436.val[2].u8[0];
        v176 = v436.val[2].u8[1];
        v403 = v436.val[3].u8[0];
        v402 = v436.val[3].u8[1];
        v398 = v436.val[3].u8[2];
        v177 = v436.val[3].u8[3];
        v178 = v436.val[3].u8[4];
        v179 = v436.val[3].u8[5];
        v180 = v436.val[3].u8[6];
        v181 = v436.val[3].u8[7];
        v182 = vextq_s8(v436.val[3], v436.val[3], 8uLL).u64[0];
        v436.val[1].i32[0] = v435.val[1].u8[4];
        v183.i32[0] = v435.val[1].u8[2];
        v435.val[2].i32[0] = BYTE6(v157);
        v160.i32[1] = HIBYTE(v150);
        v435.val[2].i32[1] = HIBYTE(v157);
        *(int8x8_t *)v436.val[2].i8 = vand_s8(v160, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v436.val[2].u32[0];
        v184.i64[1] = v436.val[2].u32[1];
        *(int8x8_t *)v435.val[2].i8 = vand_s8(*(int8x8_t *)v435.val[2].i8, (int8x8_t)0xFF000000FFLL);
        v436.val[2] = (int8x16_t)vcvtq_f64_u64(v184);
        v184.i64[0] = v435.val[2].u32[0];
        v184.i64[1] = v435.val[2].u32[1];
        v185 = vmulq_f64((float64x2_t)v436.val[2], vcvtq_f64_u64(v184));
        v436.val[2].i32[0] = v150;
        v153.i32[1] = HIBYTE(v148);
        v158.i32[1] = HIBYTE(v149);
        v186 = vand_s8(v153, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v186.u32[0];
        v184.i64[1] = v186.u32[1];
        v187 = vand_s8(v158, (int8x8_t)0xFF000000FFLL);
        v188 = vcvtq_f64_u64(v184);
        v184.i64[0] = v187.u32[0];
        v184.i64[1] = v187.u32[1];
        v189 = vmlaq_f64(v185, vcvtq_f64_u64(v184), v188);
        v190.i32[0] = v435.val[1].u8[0];
        v152.i32[1] = BYTE5(v148);
        v156.i32[1] = BYTE5(v149);
        v435.val[3].i32[1] = BYTE5(v150);
        LODWORD(v188.f64[0]) = BYTE4(v157);
        HIDWORD(v188.f64[0]) = BYTE5(v157);
        *(int8x8_t *)v435.val[3].i8 = vand_s8(*(int8x8_t *)v435.val[3].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v435.val[3].u32[0];
        v184.i64[1] = v435.val[3].u32[1];
        v435.val[3] = (int8x16_t)vcvtq_f64_u64(v184);
        *(int8x8_t *)&v188.f64[0] = vand_s8(*(int8x8_t *)&v188.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v188.f64[0]);
        v184.i64[1] = HIDWORD(v188.f64[0]);
        v191 = vmulq_f64((float64x2_t)v435.val[3], vcvtq_f64_u64(v184));
        LODWORD(v188.f64[0]) = v436.val[1].u8[6];
        v192 = vand_s8(v152, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v192.u32[0];
        v184.i64[1] = v192.u32[1];
        v193 = v184;
        v194 = vand_s8(v156, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v194.u32[0];
        v184.i64[1] = v194.u32[1];
        v195 = vmlaq_f64(v191, vcvtq_f64_u64(v184), vcvtq_f64_u64(v193));
        v193.i32[0] = v436.val[1].u8[4];
        v194.i32[0] = BYTE2(v157);
        v436.val[0].i32[0] = v157;
        v436.val[3].i32[0] = v148;
        v436.val[3].i32[1] = BYTE1(v148);
        v196.i32[0] = v435.val[0].u8[0];
        v196.i32[1] = v435.val[0].u8[1];
        v197.i32[0] = v435.val[0].u8[2];
        v197.i32[1] = v435.val[0].u8[3];
        v151.i32[1] = BYTE3(v148);
        v435.val[2].i32[0] = v435.val[0].u8[4];
        v435.val[2].i32[1] = v435.val[0].u8[5];
        v435.val[0].i32[0] = v435.val[0].u8[6];
        v435.val[0].i32[1] = v435.val[0].u8[7];
        v435.val[3].i32[0] = v149;
        v435.val[3].i32[1] = BYTE1(v149);
        v435.val[1].i32[0] = v436.val[0].u8[4];
        v154.i32[1] = BYTE3(v149);
        v435.val[1].i32[1] = v436.val[0].u8[5];
        v198.i32[0] = v436.val[0].u8[6];
        v198.i32[1] = v436.val[0].u8[7];
        v163.i32[1] = BYTE3(v150);
        v155.i32[1] = v423;
        v436.val[1].i32[1] = v422;
        v436.val[2].i32[1] = BYTE1(v150);
        v183.i32[1] = v421;
        v190.i32[1] = v420;
        v194.i32[1] = BYTE3(v157);
        HIDWORD(v188.f64[0]) = v165;
        v193.i32[1] = v166;
        v436.val[0].i32[1] = BYTE1(v157);
        v199 = vand_s8(v163, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v199.u32[0];
        v184.i64[1] = v199.u32[1];
        v200 = vcvtq_f64_u64(v184);
        v201 = vand_s8(v194, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v201.u32[0];
        v184.i64[1] = v201.u32[1];
        v202 = vmulq_f64(v200, vcvtq_f64_u64(v184));
        v203 = vand_s8(v151, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v203.u32[0];
        v184.i64[1] = v203.u32[1];
        v204 = vcvtq_f64_u64(v184);
        v205 = vand_s8(v154, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v205.u32[0];
        v184.i64[1] = v205.u32[1];
        v206 = vmlaq_f64(v202, vcvtq_f64_u64(v184), v204);
        *(int8x8_t *)&v204.f64[0] = vand_s8(v155, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v204.f64[0]);
        v184.i64[1] = HIDWORD(v204.f64[0]);
        v207 = vcvtq_f64_u64(v184);
        v208 = vand_s8(*(int8x8_t *)&v188.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v208.u32[0];
        v184.i64[1] = v208.u32[1];
        v209 = vmulq_f64(v207, vcvtq_f64_u64(v184));
        v210 = vand_s8(*(int8x8_t *)v435.val[0].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v210.u32[0];
        v184.i64[1] = v210.u32[1];
        v211 = v184;
        v212 = vand_s8(v198, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v212.u32[0];
        v184.i64[1] = v212.u32[1];
        v213 = vmlaq_f64(v209, vcvtq_f64_u64(v184), vcvtq_f64_u64(v211));
        *(int8x8_t *)v436.val[1].i8 = vand_s8(*(int8x8_t *)v436.val[1].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v436.val[1].u32[0];
        v184.i64[1] = v436.val[1].u32[1];
        *(int8x8_t *)v193.i8 = vand_s8(*(int8x8_t *)v193.i8, (int8x8_t)0xFF000000FFLL);
        v436.val[1] = (int8x16_t)vcvtq_f64_u64(v184);
        v184.i64[0] = v193.u32[0];
        v184.i64[1] = v193.u32[1];
        v436.val[1] = (int8x16_t)vmulq_f64((float64x2_t)v436.val[1], vcvtq_f64_u64(v184));
        *(int8x8_t *)v193.i8 = vand_s8(*(int8x8_t *)v435.val[2].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v193.u32[0];
        v184.i64[1] = v193.u32[1];
        v214 = vcvtq_f64_u64(v184);
        v215 = vand_s8(*(int8x8_t *)v435.val[1].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v215.u32[0];
        v184.i64[1] = v215.u32[1];
        v436.val[1] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[1], vcvtq_f64_u64(v184), v214);
        *(int8x8_t *)v436.val[2].i8 = vand_s8(*(int8x8_t *)v436.val[2].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v436.val[2].u32[0];
        v184.i64[1] = v436.val[2].u32[1];
        v436.val[2] = (int8x16_t)vcvtq_f64_u64(v184);
        v216 = vand_s8(*(int8x8_t *)v436.val[0].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v216.u32[0];
        v184.i64[1] = v216.u32[1];
        v436.val[2] = (int8x16_t)vmulq_f64((float64x2_t)v436.val[2], vcvtq_f64_u64(v184));
        v217 = vand_s8(*(int8x8_t *)v436.val[3].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v217.u32[0];
        v184.i64[1] = v217.u32[1];
        v218 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v214.f64[0] = vand_s8(*(int8x8_t *)v435.val[3].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v214.f64[0]);
        v184.i64[1] = HIDWORD(v214.f64[0]);
        v436.val[2] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[2], vcvtq_f64_u64(v184), v218);
        *(int8x8_t *)&v218.f64[0] = vand_s8(v183, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v218.f64[0]);
        v184.i64[1] = HIDWORD(v218.f64[0]);
        v219 = vcvtq_f64_u64(v184);
        *(int8x8_t *)v436.val[3].i8 = vand_s8((int8x8_t)__PAIR64__(v168, v167), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v436.val[3].u32[0];
        v184.i64[1] = v436.val[3].u32[1];
        v436.val[3] = (int8x16_t)vmulq_f64(v219, vcvtq_f64_u64(v184));
        *(int8x8_t *)&v219.f64[0] = vand_s8(v197, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v219.f64[0]);
        v184.i64[1] = HIDWORD(v219.f64[0]);
        v220 = v184;
        *(int8x8_t *)&v214.f64[0] = vand_s8((int8x8_t)__PAIR64__(v164, v411), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v214.f64[0]);
        v184.i64[1] = HIDWORD(v214.f64[0]);
        v436.val[3] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[3], vcvtq_f64_u64(v184), vcvtq_f64_u64(v220));
        *(int8x8_t *)v220.i8 = vand_s8(v190, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v220.u32[0];
        v184.i64[1] = v220.u32[1];
        v221 = vand_s8((int8x8_t)__PAIR64__(result, v169), (int8x8_t)0xFF000000FFLL);
        v222 = vcvtq_f64_u64(v184);
        v184.i64[0] = v221.u32[0];
        v184.i64[1] = v221.u32[1];
        v223 = vmulq_f64(v222, vcvtq_f64_u64(v184));
        *(int8x8_t *)&v222.f64[0] = vand_s8(v196, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v222.f64[0]);
        v184.i64[1] = HIDWORD(v222.f64[0]);
        v224 = vcvtq_f64_u64(v184);
        v225 = vand_s8((int8x8_t)__PAIR64__(v162, v412), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v225.u32[0];
        v184.i64[1] = v225.u32[1];
        v226 = vmlaq_f64(v223, vcvtq_f64_u64(v184), v224);
        v227 = vand_s8((int8x8_t)__PAIR64__(v413, v410), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v227.u32[0];
        v184.i64[1] = v227.u32[1];
        v228 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v224.f64[0] = vand_s8((int8x8_t)__PAIR64__(v176, v175), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v224.f64[0]);
        v184.i64[1] = HIDWORD(v224.f64[0]);
        v229 = vmlaq_f64(v226, vcvtq_f64_u64(v184), v228);
        *(int8x8_t *)&v224.f64[0] = vand_s8((int8x8_t)__PAIR64__(v414, v415), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v224.f64[0]);
        v184.i64[1] = HIDWORD(v224.f64[0]);
        v230 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v228.f64[0] = vand_s8((int8x8_t)__PAIR64__(v174, v147), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v228.f64[0]);
        v184.i64[1] = HIDWORD(v228.f64[0]);
        v436.val[3] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[3], vcvtq_f64_u64(v184), v230);
        LODWORD(v230.f64[0]) = v159;
        HIDWORD(v230.f64[0]) = BYTE1(v159);
        LODWORD(v228.f64[0]) = v161;
        HIDWORD(v228.f64[0]) = BYTE1(v161);
        *(int8x8_t *)&v230.f64[0] = vand_s8(*(int8x8_t *)&v230.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v230.f64[0]);
        v184.i64[1] = HIDWORD(v230.f64[0]);
        v231 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v228.f64[0] = vand_s8(*(int8x8_t *)&v228.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v228.f64[0]);
        v184.i64[1] = HIDWORD(v228.f64[0]);
        v436.val[2] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[2], vcvtq_f64_u64(v184), v231);
        *(int8x8_t *)&v231.f64[0] = vand_s8((int8x8_t)__PAIR64__(v416, v417), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v231.f64[0]);
        v184.i64[1] = HIDWORD(v231.f64[0]);
        v232 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v228.f64[0] = vand_s8((int8x8_t)__PAIR64__(v173, v172), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v228.f64[0]);
        v184.i64[1] = HIDWORD(v228.f64[0]);
        v436.val[1] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[1], vcvtq_f64_u64(v184), v232);
        LODWORD(v232.f64[0]) = BYTE2(v159);
        HIDWORD(v232.f64[0]) = BYTE3(v159);
        LODWORD(v228.f64[0]) = BYTE2(v161);
        HIDWORD(v228.f64[0]) = BYTE3(v161);
        *(int8x8_t *)&v232.f64[0] = vand_s8(*(int8x8_t *)&v232.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v232.f64[0]);
        v184.i64[1] = HIDWORD(v232.f64[0]);
        v233 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v228.f64[0] = vand_s8(*(int8x8_t *)&v228.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v228.f64[0]);
        v184.i64[1] = HIDWORD(v228.f64[0]);
        v234 = vmlaq_f64(v206, vcvtq_f64_u64(v184), v233);
        LODWORD(v233.f64[0]) = BYTE4(v159);
        HIDWORD(v233.f64[0]) = BYTE5(v159);
        *(int8x8_t *)&v233.f64[0] = vand_s8(*(int8x8_t *)&v233.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v233.f64[0]);
        v184.i64[1] = HIDWORD(v233.f64[0]);
        LODWORD(v214.f64[0]) = BYTE4(v161);
        HIDWORD(v214.f64[0]) = BYTE5(v161);
        v235 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v214.f64[0] = vand_s8(*(int8x8_t *)&v214.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v214.f64[0]);
        v184.i64[1] = HIDWORD(v214.f64[0]);
        v236 = vmlaq_f64(v195, vcvtq_f64_u64(v184), v235);
        LODWORD(v235.f64[0]) = BYTE6(v159);
        LODWORD(v214.f64[0]) = BYTE6(v161);
        HIDWORD(v235.f64[0]) = HIBYTE(v159);
        HIDWORD(v214.f64[0]) = HIBYTE(v161);
        *(int8x8_t *)&v235.f64[0] = vand_s8(*(int8x8_t *)&v235.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v235.f64[0]);
        v184.i64[1] = HIDWORD(v235.f64[0]);
        v237 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v214.f64[0] = vand_s8(*(int8x8_t *)&v214.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v214.f64[0]);
        v184.i64[1] = HIDWORD(v214.f64[0]);
        v238 = vmlaq_f64(v189, vcvtq_f64_u64(v184), v237);
        LODWORD(v237.f64[0]) = BYTE4(v399);
        LODWORD(v214.f64[0]) = BYTE6(v399);
        *(int8x8_t *)&v228.f64[0] = vand_s8((int8x8_t)__PAIR64__(v418, v419), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v228.f64[0]);
        v184.i64[1] = HIDWORD(v228.f64[0]);
        v239 = vcvtq_f64_u64(v184);
        *(int8x8_t *)v435.val[1].i8 = vand_s8((int8x8_t)__PAIR64__(v171, v170), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v435.val[1].u32[0];
        v184.i64[1] = v435.val[1].u32[1];
        v240 = vmlaq_f64(v213, vcvtq_f64_u64(v184), v239);
        HIDWORD(v214.f64[0]) = HIBYTE(v399);
        *(int8x8_t *)v435.val[1].i8 = vand_s8(*(int8x8_t *)&v214.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v435.val[1].u32[0];
        v184.i64[1] = v435.val[1].u32[1];
        LODWORD(v214.f64[0]) = BYTE6(v182);
        HIDWORD(v214.f64[0]) = HIBYTE(v182);
        v435.val[1] = (int8x16_t)vcvtq_f64_u64(v184);
        *(int8x8_t *)&v214.f64[0] = vand_s8(*(int8x8_t *)&v214.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v214.f64[0]);
        v184.i64[1] = HIDWORD(v214.f64[0]);
        v241 = vmlaq_f64(v238, vcvtq_f64_u64(v184), (float64x2_t)v435.val[1]);
        v435.val[1].i32[0] = BYTE4(v182);
        HIDWORD(v237.f64[0]) = BYTE5(v399);
        v435.val[1].i32[1] = BYTE5(v182);
        *(int8x8_t *)&v237.f64[0] = vand_s8(*(int8x8_t *)&v237.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v237.f64[0]);
        v184.i64[1] = HIDWORD(v237.f64[0]);
        v242 = vcvtq_f64_u64(v184);
        *(int8x8_t *)v435.val[1].i8 = vand_s8(*(int8x8_t *)v435.val[1].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v435.val[1].u32[0];
        v184.i64[1] = v435.val[1].u32[1];
        v243 = vmlaq_f64(v236, vcvtq_f64_u64(v184), v242);
        *(int8x8_t *)&v242.f64[0] = vand_s8((int8x8_t)__PAIR64__(v400, v401), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v242.f64[0]);
        v184.i64[1] = HIDWORD(v242.f64[0]);
        v244 = v184;
        *(int8x8_t *)&v239.f64[0] = vand_s8((int8x8_t)__PAIR64__(v181, v180), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v239.f64[0]);
        v184.i64[1] = HIDWORD(v239.f64[0]);
        v245 = vmlaq_f64(v240, vcvtq_f64_u64(v184), vcvtq_f64_u64(v244));
        *(int8x8_t *)v244.i8 = vand_s8((int8x8_t)__PAIR64__(v404, v405), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v244.u32[0];
        v184.i64[1] = v244.u32[1];
        v246 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v239.f64[0] = vand_s8((int8x8_t)__PAIR64__(v179, v178), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v239.f64[0]);
        v184.i64[1] = HIDWORD(v239.f64[0]);
        v436.val[1] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[1], vcvtq_f64_u64(v184), v246);
        LODWORD(v246.f64[0]) = BYTE2(v399);
        HIDWORD(v246.f64[0]) = BYTE3(v399);
        *(int8x8_t *)&v246.f64[0] = vand_s8(*(int8x8_t *)&v246.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v246.f64[0]);
        v184.i64[1] = HIDWORD(v246.f64[0]);
        LODWORD(v239.f64[0]) = BYTE2(v182);
        v247 = vcvtq_f64_u64(v184);
        HIDWORD(v239.f64[0]) = BYTE3(v182);
        *(int8x8_t *)&v239.f64[0] = vand_s8(*(int8x8_t *)&v239.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v239.f64[0]);
        v184.i64[1] = HIDWORD(v239.f64[0]);
        v248 = vmlaq_f64(v234, vcvtq_f64_u64(v184), v247);
        LODWORD(v239.f64[0]) = v399;
        HIDWORD(v239.f64[0]) = BYTE1(v399);
        v435.val[0].i32[0] = v182;
        v435.val[0].i32[1] = BYTE1(v182);
        v13 = v424;
        *(int8x8_t *)&v239.f64[0] = vand_s8(*(int8x8_t *)&v239.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v239.f64[0]);
        v184.i64[1] = HIDWORD(v239.f64[0]);
        v249 = vcvtq_f64_u64(v184);
        *(int8x8_t *)v435.val[0].i8 = vand_s8(*(int8x8_t *)v435.val[0].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v435.val[0].u32[0];
        v184.i64[1] = v435.val[0].u32[1];
        v436.val[2] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[2], vcvtq_f64_u64(v184), v249);
        *(int8x8_t *)&v249.f64[0] = vand_s8((int8x8_t)__PAIR64__(v406, v407), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v249.f64[0]);
        v184.i64[1] = HIDWORD(v249.f64[0]);
        v250 = vcvtq_f64_u64(v184);
        *(int8x8_t *)v435.val[0].i8 = vand_s8((int8x8_t)__PAIR64__(v177, v398), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v435.val[0].u32[0];
        v184.i64[1] = v435.val[0].u32[1];
        v436.val[3] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[3], vcvtq_f64_u64(v184), v250);
        *(int8x8_t *)&v247.f64[0] = vand_s8((int8x8_t)__PAIR64__(v408, v409), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v247.f64[0]);
        v184.i64[1] = HIDWORD(v247.f64[0]);
        v251 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v250.f64[0] = vand_s8((int8x8_t)__PAIR64__(v402, v403), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v250.f64[0]);
        v184.i64[1] = HIDWORD(v250.f64[0]);
        v252 = vmlaq_f64(v229, vcvtq_f64_u64(v184), v251);
        v251.f64[0] = v428
                    + v252.f64[0]
                    + v252.f64[1]
                    + *(double *)v436.val[3].i64
                    + *(double *)&v436.val[3].i64[1]
                    + *(double *)v436.val[1].i64
                    + *(double *)&v436.val[1].i64[1]
                    + v245.f64[0]
                    + v245.f64[1]
                    + *(double *)v436.val[2].i64
                    + *(double *)&v436.val[2].i64[1]
                    + v248.f64[0]
                    + v248.f64[1];
        v253 = v241.f64[1];
        v254 = v243.f64[1];
        v255 = v251.f64[0] + v243.f64[0] + v243.f64[1] + v241.f64[0];
        v145 = v255 + v241.f64[1];
        v139 = v426 - 16;
      }
      while (v426 != 16);
      v139 = v383;
      v138 = v384;
      if (v384 != v383)
      {
        v144 = v383;
        v257 = v383;
        v13 = v388;
        v14 = v389;
        v16 = v395;
        v19 = v396;
        v256 = a4;
        LODWORD(v20) = v394;
        LODWORD(v21) = v397;
        v123 = v385;
        v122 = v386;
        v140 = v387;
        v142 = v391;
        v141 = v392;
        if ((v384 & 8) != 0)
        {
LABEL_114:
          v258 = 4 * v144;
          v259 = v144 - v390;
          do
          {
            v429 = v145;
            v260 = &v13[v258];
            v261 = &v141[v258];
            v434 = vld4_s8(v260);
            v433 = vld4_s8(v261);
            v262.i32[0] = v434.val[0].u8[0];
            v263.i32[0] = v434.val[0].u8[2];
            v264.i32[0] = v434.val[0].u8[4];
            v265.i32[0] = v434.val[0].u8[6];
            v266.i32[0] = v433.val[0].u8[0];
            v267.i32[0] = v433.val[0].u8[2];
            v268.i32[0] = v433.val[0].u8[4];
            v269.i32[0] = v433.val[0].u8[6];
            v270.i32[0] = v434.val[1].u8[6];
            v271.i32[0] = v434.val[1].u8[4];
            v262.i32[1] = v434.val[0].u8[1];
            v272.i32[0] = v434.val[1].u8[2];
            v273.i32[0] = v434.val[1].u8[0];
            v263.i32[1] = v434.val[0].u8[3];
            v264.i32[1] = v434.val[0].u8[5];
            v265.i32[1] = v434.val[0].u8[7];
            v274.i32[0] = v433.val[1].u8[6];
            v275.i32[0] = v433.val[1].u8[4];
            v266.i32[1] = v433.val[0].u8[1];
            v267.i32[1] = v433.val[0].u8[3];
            v276.i32[0] = v433.val[1].u8[2];
            v277.i32[0] = v433.val[1].u8[0];
            v273.i32[1] = v434.val[1].u8[1];
            v277.i32[1] = v433.val[1].u8[1];
            v268.i32[1] = v433.val[0].u8[5];
            v269.i32[1] = v433.val[0].u8[7];
            v278.i32[0] = v434.val[2].u8[6];
            v279.i32[0] = v434.val[2].u8[4];
            v270.i32[1] = v434.val[1].u8[7];
            v271.i32[1] = v434.val[1].u8[5];
            v272.i32[1] = v434.val[1].u8[3];
            v280.i32[0] = v434.val[2].u8[2];
            v281.i32[0] = v434.val[2].u8[0];
            v274.i32[1] = v433.val[1].u8[7];
            v275.i32[1] = v433.val[1].u8[5];
            v282.i32[0] = v433.val[2].u8[6];
            v283.i32[0] = v433.val[2].u8[4];
            v276.i32[1] = v433.val[1].u8[3];
            v278.i32[1] = v434.val[2].u8[7];
            v279.i32[1] = v434.val[2].u8[5];
            result = (_BYTE *)v434.val[3].u8[1];
            v280.i32[1] = v434.val[2].u8[3];
            v284 = v434.val[3].u8[2];
            v285 = v434.val[3].u8[3];
            v281.i32[1] = v434.val[2].u8[1];
            LODWORD(v261) = v434.val[3].u8[4];
            v286 = v434.val[3].u8[5];
            v282.i32[1] = v433.val[2].u8[7];
            v287 = v434.val[3].u8[6];
            v288 = v434.val[3].u8[7];
            v283.i32[1] = v433.val[2].u8[5];
            v434.val[1].i32[0] = v433.val[2].u8[2];
            v434.val[2].i32[0] = v433.val[2].u8[0];
            v434.val[1].i32[1] = v433.val[2].u8[3];
            v434.val[2].i32[1] = v433.val[2].u8[1];
            v434.val[3].i32[0] = v434.val[3].u8[0];
            v434.val[3].i32[1] = (int)result;
            v434.val[0] = vand_s8(v273, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v434.val[0].u32[0];
            v289.i64[1] = v434.val[0].u32[1];
            *(float64x2_t *)v434.val[0].i8 = vcvtq_f64_u64(v289);
            v290 = vand_s8(v277, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v290.u32[0];
            v289.i64[1] = v290.u32[1];
            v291 = vcvtq_f64_u64(v289);
            v292 = vand_s8(v262, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v292.u32[0];
            v289.i64[1] = v292.u32[1];
            v293 = v289;
            v294 = vand_s8(v263, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v294.u32[0];
            v289.i64[1] = v294.u32[1];
            v295 = vcvtq_f64_u64(v289);
            v296 = vand_s8(v264, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v296.u32[0];
            v289.i64[1] = v296.u32[1];
            v297 = v289;
            v298 = vand_s8(v265, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v298.u32[0];
            v289.i64[1] = v298.u32[1];
            v299 = vcvtq_f64_u64(v289);
            v300 = vand_s8(v266, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v300.u32[0];
            v289.i64[1] = v300.u32[1];
            v301 = v289;
            v302 = vand_s8(v267, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v302.u32[0];
            v289.i64[1] = v302.u32[1];
            v303 = vcvtq_f64_u64(v289);
            v304 = vand_s8(v268, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v304.u32[0];
            v289.i64[1] = v304.u32[1];
            v305 = v289;
            v306 = vand_s8(v269, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v306.u32[0];
            v289.i64[1] = v306.u32[1];
            v307 = vcvtq_f64_u64(v289);
            v308 = vand_s8(v270, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v308.u32[0];
            v289.i64[1] = v308.u32[1];
            v309 = v289;
            v310 = vand_s8(v271, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v310.u32[0];
            v289.i64[1] = v310.u32[1];
            v311 = vcvtq_f64_u64(v289);
            v312 = vand_s8(v272, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v312.u32[0];
            v289.i64[1] = v312.u32[1];
            v313 = v289;
            v314 = vand_s8(v274, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v314.u32[0];
            v289.i64[1] = v314.u32[1];
            v315 = vcvtq_f64_u64(v289);
            v316 = vand_s8(v275, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v316.u32[0];
            v289.i64[1] = v316.u32[1];
            v317 = v289;
            v318 = vand_s8(v276, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v318.u32[0];
            v289.i64[1] = v318.u32[1];
            v319 = vcvtq_f64_u64(v289);
            v320 = vand_s8(v278, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v320.u32[0];
            v289.i64[1] = v320.u32[1];
            v321 = v289;
            v322 = vand_s8(v279, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v322.u32[0];
            v289.i64[1] = v322.u32[1];
            v323 = vcvtq_f64_u64(v289);
            v324 = vand_s8(v280, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v324.u32[0];
            v289.i64[1] = v324.u32[1];
            v325 = v289;
            v326 = vand_s8(v281, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v326.u32[0];
            v289.i64[1] = v326.u32[1];
            v327 = vcvtq_f64_u64(v289);
            v328 = vand_s8(v282, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v328.u32[0];
            v289.i64[1] = v328.u32[1];
            v329 = v289;
            v330 = vand_s8(v283, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v330.u32[0];
            v289.i64[1] = v330.u32[1];
            v331 = vcvtq_f64_u64(v289);
            v434.val[1] = vand_s8(v434.val[1], (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v434.val[1].u32[0];
            v289.i64[1] = v434.val[1].u32[1];
            *(uint64x2_t *)v434.val[1].i8 = v289;
            v434.val[2] = vand_s8(v434.val[2], (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v434.val[2].u32[0];
            v289.i64[1] = v434.val[2].u32[1];
            *(float64x2_t *)v434.val[2].i8 = vcvtq_f64_u64(v289);
            v434.val[3] = vand_s8(v434.val[3], (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v434.val[3].u32[0];
            v289.i64[1] = v434.val[3].u32[1];
            *(float64x2_t *)v434.val[3].i8 = vcvtq_f64_u64(v289);
            v332 = vand_s8((int8x8_t)__PAIR64__(v285, v284), (int8x8_t)0xFF000000FFLL);
            v333 = vmulq_f64(vcvtq_f64_u64(v313), v319);
            v289.i64[0] = v332.u32[0];
            v289.i64[1] = v332.u32[1];
            v334 = vcvtq_f64_u64(v289);
            v335 = vand_s8((int8x8_t)__PAIR64__(v286, v261), (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v335.u32[0];
            v289.i64[1] = v335.u32[1];
            v336 = vcvtq_f64_u64(v289);
            v337 = vmulq_f64(v311, vcvtq_f64_u64(v317));
            *(int8x8_t *)v317.i8 = vand_s8((int8x8_t)__PAIR64__(v288, v287), (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v317.u32[0];
            v289.i64[1] = v317.u32[1];
            v338 = vcvtq_f64_u64(v289);
            v339 = vmulq_f64(vcvtq_f64_u64(v309), v315);
            LODWORD(v315.f64[0]) = v433.val[3].u8[0];
            *(float64x2_t *)v434.val[0].i8 = vmlaq_f64(vmulq_f64(*(float64x2_t *)v434.val[0].i8, v291), vcvtq_f64_u64(v301), vcvtq_f64_u64(v293));
            HIDWORD(v315.f64[0]) = v433.val[3].u8[1];
            *(int8x8_t *)v301.i8 = vand_s8(*(int8x8_t *)&v315.f64[0], (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v301.u32[0];
            v289.i64[1] = v301.u32[1];
            v340 = vcvtq_f64_u64(v289);
            *(float64x2_t *)v434.val[0].i8 = vmlaq_f64(*(float64x2_t *)v434.val[0].i8, *(float64x2_t *)v434.val[2].i8, v327);
            v434.val[2].i32[0] = v433.val[3].u8[2];
            v341 = vmlaq_f64(v339, v307, v299);
            v434.val[2].i32[1] = v433.val[3].u8[3];
            *(int8x8_t *)&v299.f64[0] = vand_s8(v434.val[2], (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = LODWORD(v299.f64[0]);
            v289.i64[1] = HIDWORD(v299.f64[0]);
            v342 = vcvtq_f64_u64(v289);
            v343 = vmlaq_f64(v337, vcvtq_f64_u64(v305), vcvtq_f64_u64(v297));
            v297.i32[0] = v433.val[3].u8[4];
            v297.i32[1] = v433.val[3].u8[5];
            *(int8x8_t *)v297.i8 = vand_s8(*(int8x8_t *)v297.i8, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v297.u32[0];
            v289.i64[1] = v297.u32[1];
            v344 = vcvtq_f64_u64(v289);
            v345 = vmlaq_f64(vmlaq_f64(v333, v303, v295), vcvtq_f64_u64(*(uint64x2_t *)v434.val[1].i8), vcvtq_f64_u64(v325));
            v434.val[1].i32[0] = v433.val[3].u8[6];
            v434.val[1].i32[1] = v433.val[3].u8[7];
            v433.val[0] = vand_s8(v434.val[1], (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v433.val[0].u32[0];
            v289.i64[1] = v433.val[0].u32[1];
            v346 = vmlaq_f64(vmlaq_f64(v341, vcvtq_f64_u64(v329), vcvtq_f64_u64(v321)), vcvtq_f64_u64(v289), v338);
            v253 = v346.f64[1];
            v347 = vmlaq_f64(vmlaq_f64(v343, v331, v323), v344, v336);
            v348 = vmlaq_f64(v345, v342, v334);
            *(float64x2_t *)v434.val[0].i8 = vmlaq_f64(*(float64x2_t *)v434.val[0].i8, v340, *(float64x2_t *)v434.val[3].i8);
            v245.f64[0] = v429 + *(double *)v434.val;
            v254 = v347.f64[1];
            v255 = v429
                 + *(double *)v434.val
                 + v349
                 + v348.f64[0]
                 + v348.f64[1]
                 + v347.f64[0]
                 + v347.f64[1]
                 + v346.f64[0];
            v145 = v255 + v346.f64[1];
            v258 += 32;
            v259 += 8;
          }
          while (v259);
          v257 = v390;
          v256 = a4;
          if (v138 == v390)
            goto LABEL_119;
        }
        v350 = 4 * v257;
        do
        {
          LOBYTE(v255) = v13[v350];
          LOBYTE(v253) = v141[v350];
          LOBYTE(v254) = v13[v350 + 1];
          *(double *)&v351 = (double)*(unint64_t *)&v253;
          LOBYTE(v245.f64[0]) = v141[v350 + 1];
          v245.f64[0] = (double)*(unint64_t *)&v245.f64[0];
          *(double *)&v352 = (double)*(unint64_t *)&v254 * v245.f64[0];
          v353 = *(double *)&v352 + (double)*(unint64_t *)&v255 * *(double *)&v351;
          LOBYTE(v351) = v13[v350 + 2];
          *(double *)&v354 = (double)v351;
          LOBYTE(v352) = v141[v350 + 2];
          *(double *)&v355 = (double)v352;
          v356 = v353 + *(double *)&v354 * *(double *)&v355;
          LOBYTE(v354) = v13[v350 + 3];
          v253 = (double)v354;
          LOBYTE(v355) = v141[v350 + 3];
          v254 = (double)v355;
          v255 = v356 + v253 * v254;
          v145 = v145 + v255;
          v350 += 4;
        }
        while (v350 <= v122);
        goto LABEL_119;
      }
      v13 = v388;
      v14 = v389;
      v16 = v395;
      v19 = v396;
      v256 = a4;
      LODWORD(v20) = v394;
      LODWORD(v21) = v397;
      v123 = v385;
      v122 = v386;
      v140 = v387;
      v142 = v391;
      v141 = v392;
LABEL_119:
      if (v123 < v20)
      {
        v357 = 0;
        do
        {
          LOBYTE(v255) = v140[v357];
          LOBYTE(v253) = v141[v123 + v357];
          v255 = (double)*(unint64_t *)&v255;
          v253 = (double)*(unint64_t *)&v253;
          v145 = v145 + v255 * v253;
          ++v357;
        }
        while ((int)v21 > (int)v123 + (int)v357);
      }
      v143 = v145 * v256;
      *(float *)(v14 + 4 * v142++) = v143;
      v141 += v16;
      if (v142 >= v19)
      {
        v137 = v381 + 1;
        v14 += 4 * v382;
        v13 += v16;
        if (v381 + 1 == v19)
          return result;
        goto LABEL_105;
      }
    }
    v144 = 0;
    v145 = 0.0;
    goto LABEL_114;
  }
  v22 = *(_DWORD *)(a3 + 12);
  result = v430;
  if ((unint64_t)(4 * v20) >= 0x409)
    operator new[]();
  if ((int)v19 >= 1)
  {
    v23 = 0;
    v24 = (int)v21 - 4;
    v25 = ((v21 - 4) & 0xFFFFFFFC) + 4;
    v427 = &v430[4 * v21];
    v26 = 4 * v17;
    v27 = v21 & 0xFFFFFFF0;
    v28 = v21 & 0xFFFFFFF8;
    v29 = 16 * (v22 == (_DWORD)v20);
    v30 = v13 + 3;
    v425 = v15 + 4 * v21;
    v31 = *(float32x4_t **)(a3 + 16);
    v32 = v13;
    do
    {
      v33 = &v13[v16 * v23];
      v34 = v13;
      v35 = &v13[v21 + v16 * v23];
      if (v22 >= (int)v21)
      {
        if ((int)v21 >= 1)
        {
          if (v21 >= 8)
          {
            v37 = 0;
            v41 = (unint64_t)v430 < v425 + v26 * v23 && v15 + v26 * v23 < (unint64_t)v427;
            v42 = v33 >= v427 || v430 >= v35;
            if (v42 && !v41)
            {
              if (v21 >= 0x10)
              {
                v49 = v27;
                v50 = (float32x4_t *)v430;
                v51 = v31;
                v52 = (int8x16_t *)v32;
                do
                {
                  v53 = *v52++;
                  a10 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1003BCAA0));
                  v11 = v51[2];
                  v54 = v51[3];
                  v56 = *v51;
                  v55 = v51[1];
                  v51 += 4;
                  a9 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1003BCA90)), v56);
                  a11 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1003BCAB0)), v11);
                  v50[2] = a11;
                  v50[3] = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1003BCAC0)), v54);
                  a8 = (int8x16_t)vsubq_f32(a10, v55);
                  *v50 = a9;
                  v50[1] = (float32x4_t)a8;
                  v50 += 4;
                  v49 -= 16;
                }
                while (v49);
                if (v27 == v21)
                  goto LABEL_55;
                v43 = v27;
                v37 = v27;
                if ((v21 & 8) == 0)
                  goto LABEL_54;
              }
              else
              {
                v43 = 0;
              }
              v57 = 4 * v43;
              do
              {
                a8.i64[0] = *(_QWORD *)&v32[v43];
                a11 = *(float32x4_t *)((char *)v31 + v57);
                a10 = *(float32x4_t *)((char *)v31 + v57 + 16);
                a9 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1003BCA90)), a11);
                a8 = (int8x16_t)vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1003BCAA0)), a10);
                v58 = (__n128 *)&v430[v57];
                *v58 = (__n128)a9;
                v58[1] = (__n128)a8;
                v43 += 8;
                v57 += 32;
              }
              while (v28 != v43);
              v37 = v28;
              if (v28 == v21)
                goto LABEL_55;
              goto LABEL_54;
            }
          }
          else
          {
            v37 = 0;
          }
          do
          {
LABEL_54:
            a8.i8[0] = v32[v37];
            a9.i32[0] = v31->i32[v37];
            *(float *)a8.i32 = (float)a8.u32[0] - a9.f32[0];
            *(_DWORD *)&v430[4 * v37++] = a8.i32[0];
          }
          while (v21 != v37);
        }
      }
      else if ((int)v20 >= 1)
      {
        a8.i32[0] = *(_DWORD *)(v15 + 4 * v17 * v23);
        if (v20 >= 8)
        {
          if (v430 >= v35 || v33 >= v427)
          {
            if (v20 >= 0x10)
            {
              v44 = 0;
              a9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.i8, 0);
              v45 = (float32x4_t *)v430;
              do
              {
                v46 = *(int8x16_t *)&v32[v44];
                v47 = (uint32x4_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_1003BCAA0);
                a11 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_1003BCA90)), a9);
                v11 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_1003BCAB0)), a9);
                a10 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_1003BCAC0)), a9);
                v45[2] = v11;
                v45[3] = a10;
                *v45 = a11;
                v45[1] = vsubq_f32(vcvtq_f32_u32(v47), a9);
                v45 += 4;
                v44 += 16;
              }
              while (v27 != v44);
              if (v27 == v21)
                goto LABEL_55;
              v39 = v27;
              v36 = v27;
              if ((v21 & 8) == 0)
                goto LABEL_45;
            }
            else
            {
              v39 = 0;
            }
            a9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.i8, 0);
            v48 = (__n128 *)&v430[4 * v39];
            do
            {
              a10.i64[0] = *(_QWORD *)&v32[v39];
              a11 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_1003BCA90)), a9);
              a10 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_1003BCAA0)), a9);
              *v48 = (__n128)a11;
              v48[1] = (__n128)a10;
              v48 += 2;
              v39 += 8;
            }
            while (v28 != v39);
            v36 = v28;
            if (v28 == v21)
              goto LABEL_55;
            goto LABEL_45;
          }
          v36 = 0;
        }
        else
        {
          v36 = 0;
        }
        do
        {
LABEL_45:
          a9.i8[0] = v32[v36];
          a9.f32[0] = (float)a9.u32[0] - *(float *)a8.i32;
          *(_DWORD *)&v430[4 * v36++] = a9.i32[0];
        }
        while (v21 != v36);
      }
LABEL_55:
      v59 = v32;
      v60 = v30;
      v61 = v23;
      do
      {
        v62 = (int8x16_t *)(v15 + 4 * v17 * v61);
        if (v22 < (int)v20)
        {
          a8 = (int8x16_t)vld1q_dup_f32((const float *)v62->i32);
          v432 = a8;
          v62 = &v432;
        }
        if ((int)v21 >= 4)
        {
          v65 = 0;
          v64 = 0.0;
          v66 = (float *)&v431;
          do
          {
            a11.i8[0] = v60[v65 - 3];
            v67 = *(float *)v62->i32;
            LOBYTE(v67) = v60[v65 - 2];
            v68 = *(v66 - 1) * (float)((float)LODWORD(v67) - *(float *)&v62->i32[1]);
            v69 = v68 + *(v66 - 2) * (float)((float)a11.u32[0] - *(float *)v62->i32);
            LOBYTE(v68) = v60[v65 - 1];
            v70 = *v66;
            v71 = v66[1];
            v66 += 4;
            v72 = v70;
            v73 = v69 + v72 * (float)((float)LODWORD(v68) - *(float *)&v62->i32[2]);
            *(double *)a10.i64 = v71;
            LOBYTE(v72) = v60[v65];
            *(double *)a11.i64 = (float)((float)LODWORD(v72) - *(float *)&v62->i32[3]);
            *(double *)a9.i64 = v73 + v71 * *(double *)a11.i64;
            v64 = v64 + *(double *)a9.i64;
            v65 += 4;
            v62 = (int8x16_t *)((char *)v62 + v29);
          }
          while (v65 <= v24);
          v63 = v25;
          if (v25 >= (int)v20)
            goto LABEL_57;
        }
        else
        {
          v63 = 0;
          v64 = 0.0;
          if ((int)v20 <= 0)
            goto LABEL_57;
        }
        v74 = v63;
        v75 = v21 + ~v63;
        if (v75 < 7)
        {
          v76 = v63;
          v77 = v62;
          goto LABEL_78;
        }
        v78 = v75 + 1;
        if (v75 >= 0xF)
        {
          v79 = v78 & 0x1FFFFFFF0;
          v80 = (float32x4_t *)&v430[4 * v74];
          v81 = (int8x16_t *)&v59[v74];
          v82 = v78 & 0x1FFFFFFF0;
          v83 = (float32x4_t *)v62;
          do
          {
            v85 = v80[2];
            v84 = v80[3];
            v87 = *v80;
            v86 = v80[1];
            v80 += 4;
            v88 = vcvtq_f64_f32(*(float32x2_t *)v87.f32);
            v89 = vcvtq_f64_f32(*(float32x2_t *)v86.f32);
            v90 = vcvtq_f64_f32(*(float32x2_t *)v85.f32);
            v91 = vcvtq_f64_f32(*(float32x2_t *)v84.f32);
            v92 = *v81++;
            v93 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v92, (int8x16_t)xmmword_1003BCAC0)), v83[3]);
            v94 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v92, (int8x16_t)xmmword_1003BCAB0)), v83[2]);
            v95 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v92, (int8x16_t)xmmword_1003BCAA0)), v83[1]);
            v96 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v92, (int8x16_t)xmmword_1003BCA90)), *v83);
            a9 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v84), vcvt_hight_f64_f32(v93));
            v97 = vmulq_f64(v91, vcvtq_f64_f32(*(float32x2_t *)v93.f32));
            a10 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v85), vcvt_hight_f64_f32(v94));
            v98 = vmulq_f64(v90, vcvtq_f64_f32(*(float32x2_t *)v94.f32));
            a11 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v86), vcvt_hight_f64_f32(v95));
            v99 = vmulq_f64(v89, vcvtq_f64_f32(*(float32x2_t *)v95.f32));
            v100 = vmulq_f64(vcvt_hight_f64_f32(v87), vcvt_hight_f64_f32(v96));
            v11 = (float32x4_t)vmulq_f64(v88, vcvtq_f64_f32(*(float32x2_t *)v96.f32));
            v64 = v64
                + *(double *)v11.i64
                + *(double *)&v11.i64[1]
                + v100.f64[0]
                + v100.f64[1]
                + v99.f64[0]
                + v99.f64[1]
                + *(double *)a11.i64
                + *(double *)&a11.i64[1]
                + v98.f64[0]
                + v98.f64[1]
                + *(double *)a10.i64
                + *(double *)&a10.i64[1]
                + v97.f64[0]
                + v97.f64[1]
                + *(double *)a9.i64
                + *(double *)&a9.i64[1];
            v83 += 4;
            v82 -= 16;
          }
          while (v82);
          if (v78 == v79)
          {
            v16 = v395;
            v19 = v396;
            LODWORD(v20) = v394;
            goto LABEL_57;
          }
          v16 = v395;
          v19 = v396;
          if ((v78 & 8) == 0)
          {
            v77 = (int8x16_t *)((char *)v62 + 4 * v79);
            v76 = v79 + v74;
            LODWORD(v20) = v394;
LABEL_78:
            v115 = 0;
            do
            {
              *(double *)a9.i64 = *(float *)&v430[4 * v76 + 4 * v115];
              a10.i8[0] = v59[v76 + v115];
              a11.i32[0] = v77->i32[v115];
              *(double *)a10.i64 = (float)((float)a10.u32[0] - a11.f32[0]);
              v64 = v64 + *(double *)a9.i64 * *(double *)a10.i64;
              ++v115;
            }
            while ((int)v20 > (int)v76 + (int)v115);
            goto LABEL_57;
          }
        }
        else
        {
          v79 = 0;
        }
        v76 = (v78 & 0x1FFFFFFF8) + v74;
        v77 = (int8x16_t *)((char *)v62 + 4 * (v78 & 0x1FFFFFFF8));
        v101 = (float32x4_t *)((char *)v62 + 4 * v79);
        v102 = v79 - (v78 & 0x1FFFFFFF8);
        v103 = v79 + v74;
        v104 = (float32x4_t *)&v430[4 * v103];
        do
        {
          v106 = *v104;
          v105 = v104[1];
          v104 += 2;
          v107 = vcvtq_f64_f32(*(float32x2_t *)v106.f32);
          v108 = vcvtq_f64_f32(*(float32x2_t *)v105.f32);
          v11.i64[0] = *(_QWORD *)&v59[v103];
          v109 = *v101;
          v110 = v101[1];
          v101 += 2;
          v111 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v11, (int8x16_t)xmmword_1003BCAA0)), v110);
          v112 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v11, (int8x16_t)xmmword_1003BCA90)), v109);
          v113 = vcvtq_f64_f32(*(float32x2_t *)v112.f32);
          v11 = (float32x4_t)vcvt_hight_f64_f32(v112);
          a9 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v105), vcvt_hight_f64_f32(v111));
          v114 = vmulq_f64(v108, vcvtq_f64_f32(*(float32x2_t *)v111.f32));
          a10 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v106), (float64x2_t)v11);
          a11 = (float32x4_t)vmulq_f64(v107, v113);
          v64 = v64
              + *(double *)a11.i64
              + *(double *)&a11.i64[1]
              + *(double *)a10.i64
              + *(double *)&a10.i64[1]
              + v114.f64[0]
              + v114.f64[1]
              + *(double *)a9.i64
              + *(double *)&a9.i64[1];
          v103 += 8;
          v102 += 8;
        }
        while (v102);
        v16 = v395;
        v19 = v396;
        LODWORD(v20) = v394;
        if (v78 != (v78 & 0x1FFFFFFF8))
          goto LABEL_78;
LABEL_57:
        *(double *)a8.i64 = v64 * a4;
        *(float *)a8.i32 = *(double *)a8.i64;
        *(_DWORD *)(v14 + 4 * v61++) = a8.i32[0];
        v60 += v16;
        v59 += v16;
        v21 = v397;
      }
      while (v61 != v19);
      v14 += 4 * v382;
      ++v23;
      v32 += v16;
      v31 = (float32x4_t *)((char *)v31 + v26);
      v30 += v16;
      v13 = v34;
    }
    while (v23 != v19);
  }
  return result;
}

_BYTE *sub_1002360A4(_QWORD *a1, uint64_t a2, uint64_t a3, double a4, float64x2_t a5, double a6, float64x2_t a7, double a8, __n128 a9, float64x2_t a10)
{
  float64x2_t v10;
  _OWORD *v12;
  int64x2_t *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  _BYTE *result;
  uint64_t v24;
  float64x2_t *v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  __n128 *v29;
  double *v30;
  uint64_t v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  double *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  float64x2_t *v47;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  int64x2_t v53;
  char v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  float64x2_t *v60;
  _OWORD *v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  char v65;
  uint64_t v66;
  _QWORD *v67;
  double *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  char v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  float64x2_t *v77;
  __n128 *v78;
  uint64_t v79;
  int8x8_t v80;
  int8x8_t v81;
  uint64x2_t v82;
  int8x8_t v83;
  float64x2_t v84;
  int8x8_t v85;
  int8x8_t v86;
  float64x2_t v87;
  int8x8_t v88;
  float64x2_t v89;
  int8x8_t v90;
  int8x8_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  uint64_t v95;
  float64x2_t *v96;
  int8x16_t *v97;
  float64x2_t *v98;
  int8x16_t v99;
  unint64_t v100;
  int8x8_t v101;
  int8x8_t v102;
  uint64x2_t v103;
  float64x2_t v104;
  int8x8_t v105;
  int8x8_t v106;
  float64x2_t v107;
  int8x8_t v108;
  int8x8_t v109;
  float64x2_t v110;
  int8x8_t v111;
  int8x8_t v112;
  float64x2_t v113;
  int8x8_t v114;
  float64x2_t v115;
  int8x8_t v116;
  int8x8_t v117;
  float64x2_t v118;
  int8x8_t v119;
  int8x8_t v120;
  float64x2_t v121;
  int8x8_t v122;
  int8x8_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  unint64_t v128;
  float64x2_t *v129;
  float64x2_t *v130;
  int8x16_t v131;
  int8x8_t v132;
  int8x8_t v133;
  uint64x2_t v134;
  float64x2_t v135;
  int8x8_t v136;
  int8x8_t v137;
  float64x2_t v138;
  int8x8_t v139;
  int8x8_t v140;
  float64x2_t v141;
  int8x8_t v142;
  int8x8_t v143;
  float64x2_t v144;
  int8x8_t v145;
  int8x8_t v146;
  int8x8_t v147;
  float64x2_t v148;
  int8x8_t v149;
  int8x8_t v150;
  float64x2_t v151;
  int8x8_t v152;
  float64x2_t v153;
  int8x8_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  uint64_t v159;
  uint64_t v160;
  int8x8_t v161;
  int8x8_t v162;
  uint64x2_t v163;
  float64x2_t v164;
  int8x8_t v165;
  int8x8_t v166;
  float64x2_t v167;
  int8x8_t v168;
  int8x8_t v169;
  float64x2_t v170;
  int8x8_t v171;
  int8x8_t v172;
  float64x2_t v173;
  float64x2_t v174;
  __n128 *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  double *v184;
  double v185;
  _OWORD *v186;
  uint64_t v187;
  double *v188;
  double v189;
  uint64_t *v190;
  double v191;
  double v192;
  float64x2_t *v193;
  double *f64;
  double v195;
  _BYTE *v196;
  uint64_t v197;
  double *v198;
  double v199;
  double v200;
  double v201;
  double v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int64x2_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  BOOL v218;
  _BYTE *v219;
  _OWORD *i;
  BOOL v221;
  uint64_t v222;
  float64x2_t *v223;
  uint64_t v224;
  int8x8_t v225;
  int8x8_t v226;
  uint64x2_t v227;
  float64x2_t v228;
  int8x8_t v229;
  int8x8_t v230;
  int8x8_t v231;
  int8x8_t v232;
  float64x2_t v233;
  int8x8_t v234;
  int8x8_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  _BYTE *v240;
  uint64_t v241;
  double v242;
  _BYTE *v243;
  uint64_t v244;
  double *v245;
  double v246;
  double v247;
  double v248;
  double v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  double *v253;
  double v254;
  _OWORD *v255;
  uint64_t v256;
  double *v257;
  double v258;
  uint64_t v259;
  float64x2_t *v260;
  int8x16_t *v261;
  int8x16_t v262;
  unint64_t v263;
  int8x8_t v264;
  int8x8_t v265;
  uint64x2_t v266;
  int8x8_t v267;
  int8x8_t v268;
  int8x8_t v269;
  float64x2_t v270;
  int8x8_t v271;
  int8x8_t v272;
  int8x8_t v273;
  uint64x2_t v274;
  int8x8_t v275;
  int8x8_t v276;
  int8x8_t v277;
  int8x8_t v278;
  int8x8_t v279;
  float64x2_t v280;
  int8x8_t v281;
  int8x8_t v282;
  uint64_t v283;
  double v284;
  int64x2_t v285;
  int v286;
  int64x2_t *v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  int j;
  int v292;
  int v293;
  int v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int64x2_t *v299;
  double *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int64x2_t *v308;
  uint64_t v309;
  _BYTE v310[1032];

  v12 = (_OWORD *)a1[2];
  v13 = *(int64x2_t **)(a2 + 16);
  v14 = *(_BYTE **)(a3 + 16);
  v15 = a1[10];
  if (*(int *)(a3 + 8) <= 1)
    v16 = 0;
  else
    v16 = *(_QWORD *)(a3 + 80) >> 3;
  v17 = (unsigned int *)a1[8];
  v19 = *v17;
  v18 = v17[1];
  if (v14)
    v20 = *(_DWORD *)(a3 + 12) < (int)v18;
  else
    v20 = 0;
  v21 = !v20;
  v22 = 40 * v19;
  if (!v20)
    v22 = 8 * v19;
  result = v310;
  if (v22 >= 0x409)
    operator new[]();
  v24 = *(_QWORD *)(a2 + 80) >> 3;
  if ((v21 & 1) == 0)
  {
    v25 = (float64x2_t *)&v310[8 * (int)v19];
    if ((int)v19 < 1)
      goto LABEL_36;
    v26 = v19 >= 6 && v16 == 1;
    if (v26 && (v25 < (float64x2_t *)&v14[8 * v19] ? (v27 = v14 >= &v310[32 * v19 + 8 * (int)v19]) : (v27 = 1), v27))
    {
      v28 = v19 & 0x7FFFFFFC;
      v29 = (__n128 *)(v14 + 16);
      v30 = (double *)&v310[8 * (int)v19 + 64];
      v31 = v19 & 0xFFFFFFFC;
      do
      {
        v32 = v29[-1];
        v33 = *v29;
        v34 = v32;
        v35 = v32;
        a7 = (float64x2_t)v32;
        a9 = *v29;
        v36 = *v29;
        v37 = *v29;
        v38 = v30 - 8;
        vst4q_f64(v38, *(float64x2x4_t *)(&a7 - 3));
        vst4q_f64(v30, *(float64x2x4_t *)(&a9 - 1));
        v29 += 2;
        v30 += 16;
        v31 -= 4;
      }
      while (v31);
      if (v28 == v19)
      {
LABEL_36:
        v16 = 4 * (v16 != 0);
        v14 = &v310[8 * (int)v19];
        if ((int)v18 < 1)
          return result;
        goto LABEL_37;
      }
    }
    else
    {
      v28 = 0;
    }
    v39 = (uint64_t *)&v14[8 * v16 * v28];
    v40 = v19 - v28;
    v41 = (uint64_t *)&v310[32 * v28 + 16 + 8 * (int)v19];
    do
    {
      v42 = *v39;
      *v41 = *v39;
      v41[1] = v42;
      *(v41 - 2) = v42;
      *(v41 - 1) = v42;
      v39 += v16;
      v41 += 4;
      --v40;
    }
    while (v40);
    goto LABEL_36;
  }
  if (!v14)
  {
    if ((int)v18 < 1)
      return result;
    v214 = (int)v18 - 4;
    if ((int)v19 > 0)
    {
      v215 = 0;
      v216 = v19 & 0xFFFFFFF8;
      v218 = v19 < 8 || v15 != 1;
      v219 = (char *)v12 + 1;
      for (i = v12; ; i = (_OWORD *)((char *)i + 1))
      {
        if (v218
          || (v310 < (_BYTE *)v12 + v215 + v19
            ? (v221 = (char *)v12 + v215 >= &v310[8 * v19])
            : (v221 = 1),
              !v221))
        {
          v236 = 0;
LABEL_151:
          v237 = v15 * v236;
          v238 = &v310[8 * v236];
          v239 = v19 - v236;
          do
          {
            LOBYTE(a5.f64[0]) = *((_BYTE *)i + v237);
            a5.f64[0] = (double)*(unint64_t *)&a5.f64[0];
            *v238++ = *(_QWORD *)&a5.f64[0];
            v237 += v15;
            --v239;
          }
          while (v239);
          goto LABEL_153;
        }
        if (v19 >= 0x10)
        {
          v259 = v19 & 0x7FFFFFF0;
          v260 = (float64x2_t *)v310;
          v261 = (int8x16_t *)i;
          do
          {
            v262 = *v261++;
            v263 = vextq_s8(v262, v262, 8uLL).u64[0];
            v264.i32[0] = v263;
            v264.i32[1] = BYTE1(v263);
            v265 = vand_s8(v264, (int8x8_t)0xFF000000FFLL);
            v266.i64[0] = v265.u32[0];
            v266.i64[1] = v265.u32[1];
            a5 = vcvtq_f64_u64(v266);
            v267.i32[0] = BYTE2(v263);
            v267.i32[1] = BYTE3(v263);
            v268 = vand_s8(v267, (int8x8_t)0xFF000000FFLL);
            v266.i64[0] = v268.u32[0];
            v266.i64[1] = v268.u32[1];
            v269.i32[0] = BYTE4(v263);
            v270 = vcvtq_f64_u64(v266);
            v269.i32[1] = BYTE5(v263);
            v271 = vand_s8(v269, (int8x8_t)0xFF000000FFLL);
            v266.i64[0] = v271.u32[0];
            v266.i64[1] = v271.u32[1];
            v272.i32[0] = BYTE6(v263);
            v272.i32[1] = HIBYTE(v263);
            a7 = vcvtq_f64_u64(v266);
            v273 = vand_s8(v272, (int8x8_t)0xFF000000FFLL);
            v266.i64[0] = v273.u32[0];
            v266.i64[1] = v273.u32[1];
            v274 = v266;
            v272.i32[0] = v262.u8[0];
            v272.i32[1] = v262.u8[1];
            v275 = vand_s8(v272, (int8x8_t)0xFF000000FFLL);
            v266.i64[0] = v275.u32[0];
            v266.i64[1] = v275.u32[1];
            a10 = vcvtq_f64_u64(v266);
            v276.i32[0] = v262.u8[2];
            v276.i32[1] = v262.u8[3];
            v277 = vand_s8(v276, (int8x8_t)0xFF000000FFLL);
            v278.i32[0] = v262.u8[4];
            v278.i32[1] = v262.u8[5];
            v279 = vand_s8(v278, (int8x8_t)0xFF000000FFLL);
            v266.i64[0] = v279.u32[0];
            v266.i64[1] = v279.u32[1];
            v280 = vcvtq_f64_u64(v266);
            v281.i32[0] = v262.u8[6];
            v281.i32[1] = v262.u8[7];
            v282 = vand_s8(v281, (int8x8_t)0xFF000000FFLL);
            v266.i64[0] = v282.u32[0];
            v266.i64[1] = v282.u32[1];
            v260[2] = v280;
            v260[3] = vcvtq_f64_u64(v266);
            v266.i64[0] = v277.u32[0];
            v266.i64[1] = v277.u32[1];
            *v260 = a10;
            v260[1] = vcvtq_f64_u64(v266);
            v260[6] = a7;
            v260[7] = vcvtq_f64_u64(v274);
            v260[4] = a5;
            v260[5] = v270;
            v260 += 8;
            v259 -= 16;
          }
          while (v259);
          if ((v19 & 0xFFFFFFF0) == v19)
            goto LABEL_153;
          v222 = v19 & 0x7FFFFFF0;
          v236 = v19 & 0xFFFFFFF0;
          if ((v19 & 8) == 0)
            goto LABEL_151;
        }
        else
        {
          v222 = 0;
        }
        v223 = (float64x2_t *)&v310[8 * v222];
        do
        {
          v224 = *(_QWORD *)((char *)i + v222);
          v225.i32[0] = v224;
          v225.i32[1] = BYTE1(v224);
          v226 = vand_s8(v225, (int8x8_t)0xFF000000FFLL);
          v227.i64[0] = v226.u32[0];
          v227.i64[1] = v226.u32[1];
          v228 = vcvtq_f64_u64(v227);
          v229.i32[0] = BYTE2(v224);
          v229.i32[1] = BYTE3(v224);
          v230 = vand_s8(v229, (int8x8_t)0xFF000000FFLL);
          v227.i64[0] = v230.u32[0];
          v227.i64[1] = v230.u32[1];
          a7 = vcvtq_f64_u64(v227);
          v231.i32[0] = BYTE4(v224);
          v231.i32[1] = BYTE5(v224);
          v232 = vand_s8(v231, (int8x8_t)0xFF000000FFLL);
          v227.i64[0] = v232.u32[0];
          v227.i64[1] = v232.u32[1];
          v233 = vcvtq_f64_u64(v227);
          v234.i32[0] = BYTE6(v224);
          v234.i32[1] = HIBYTE(v224);
          v235 = vand_s8(v234, (int8x8_t)0xFF000000FFLL);
          v227.i64[0] = v235.u32[0];
          v227.i64[1] = v235.u32[1];
          a5 = vcvtq_f64_u64(v227);
          v223[2] = v233;
          v223[3] = a5;
          *v223 = v228;
          v223[1] = a7;
          v223 += 4;
          v222 += 8;
        }
        while (v216 != v222);
        v236 = v19 & 0x7FFFFFF8;
        if (v216 != v19)
          goto LABEL_151;
LABEL_153:
        v240 = v219;
        v241 = v215;
        if (v215 <= v214)
        {
          do
          {
            v242 = 0.0;
            v243 = v240;
            v244 = v19;
            v245 = (double *)v310;
            v246 = 0.0;
            v247 = 0.0;
            v248 = 0.0;
            do
            {
              v249 = *v245++;
              LOBYTE(a10.f64[0]) = *(v243 - 1);
              *(double *)&v250 = (double)*(unint64_t *)&a10.f64[0];
              v248 = v248 + v249 * *(double *)&v250;
              LOBYTE(v250) = *v243;
              *(double *)&v251 = (double)v250;
              v247 = v247 + v249 * *(double *)&v251;
              LOBYTE(v251) = v243[1];
              *(double *)&v252 = (double)v251;
              v246 = v246 + v249 * *(double *)&v252;
              LOBYTE(v252) = v243[2];
              a10.f64[0] = (double)v252;
              v242 = v242 + v249 * a10.f64[0];
              v243 += v15;
              --v244;
            }
            while (v244);
            v253 = (double *)&v13->i64[v241];
            a7.f64[0] = v247 * a4;
            *v253 = v248 * a4;
            v253[1] = a7.f64[0];
            a5.f64[0] = v242 * a4;
            v253[2] = v246 * a4;
            v253[3] = a5.f64[0];
            v241 += 4;
            v240 += 4;
          }
          while ((int)v214 >= (int)v241);
          v241 = v241;
          if ((int)v241 >= (int)v18)
            goto LABEL_137;
          do
          {
LABEL_160:
            v254 = 0.0;
            v255 = v12;
            v256 = v19;
            v257 = (double *)v310;
            do
            {
              v258 = *v257++;
              LOBYTE(a7.f64[0]) = *((_BYTE *)v255 + v241);
              a7.f64[0] = (double)*(unint64_t *)&a7.f64[0];
              v254 = v254 + v258 * a7.f64[0];
              v255 = (_OWORD *)((char *)v255 + v15);
              --v256;
            }
            while (v256);
            a5.f64[0] = v254 * a4;
            v13->i64[v241++] = *(_QWORD *)&a5.f64[0];
          }
          while ((int)v18 > (int)v241);
          goto LABEL_137;
        }
        v241 = v215;
        if ((int)v215 < (int)v18)
          goto LABEL_160;
LABEL_137:
        ++v215;
        v13 = (int64x2_t *)((char *)v13 + 8 * v24);
        ++v219;
        if (v215 == v18)
          return result;
      }
    }
    v283 = 0;
    v284 = a4 * 0.0;
    v285 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
    v286 = v18 - 3;
    v287 = v13 + 4;
    v288 = 8 * v24;
    v289 = 8 * v24 + 8;
    v290 = 4;
    for (j = -1; ; --j)
    {
      if (v290 <= v286)
        v292 = v18 - 3;
      else
        v292 = v290;
      v293 = v283 + 4;
      if ((int)v283 + 4 <= v286)
        v293 = v18 - 3;
      if (v283 <= v214)
      {
        v295 = v293 + ~(_DWORD)v283;
        v296 = v283;
        if (v295 < 0xC)
          goto LABEL_182;
        v297 = (((v292 + j) >> 2) + 1) & 0x7FFFFFFC;
        v298 = (v295 >> 2) + 1;
        v296 = v283 + 4 * (v298 & 0x7FFFFFFC);
        v294 = v283;
        v299 = v287;
        do
        {
          v299[-4] = v285;
          v299[-3] = v285;
          v299[-2] = v285;
          v299[-1] = v285;
          *v299 = v285;
          v299[1] = v285;
          v299[2] = v285;
          v299[3] = v285;
          v299 += 8;
          v294 += 16;
          v297 -= 4;
        }
        while (v297);
        if ((v298 & 0x7FFFFFFC) != v298)
        {
LABEL_182:
          v300 = (double *)&v13->i64[v296];
          v294 = v296;
          do
          {
            *v300 = v284;
            v300[1] = v284;
            v300[2] = v284;
            v300[3] = v284;
            v294 += 4;
            v300 += 4;
          }
          while ((int)v214 >= v294);
        }
      }
      else
      {
        v294 = v283;
      }
      if (v294 >= (int)v18)
        goto LABEL_170;
      v301 = v294;
      v302 = (v18 + ~v294);
      if (v302 >= 3)
      {
        v304 = v302 + 1;
        v305 = (v302 + 1) & 0x1FFFFFFFCLL;
        v303 = v305 + v301;
        v306 = 8 * v301;
        v307 = v305;
        do
        {
          v308 = (int64x2_t *)((char *)v13 + v306);
          *v308 = v285;
          v308[1] = v285;
          v306 += 32;
          v307 -= 4;
        }
        while (v307);
        if (v304 == v305)
          goto LABEL_170;
      }
      else
      {
        v303 = v301;
      }
      v309 = v303;
      do
      {
        *(double *)&v13->i64[v309++] = v284;
        LODWORD(v303) = v303 + 1;
      }
      while ((int)v18 > (int)v303);
LABEL_170:
      ++v283;
      v287 = (int64x2_t *)((char *)v287 + v289);
      ++v290;
      v13 = (int64x2_t *)((char *)v13 + v288);
      if (v283 == v18)
        return result;
    }
  }
  v25 = 0;
  if ((int)v18 >= 1)
  {
LABEL_37:
    v43 = 0;
    v44 = (int)v18 - 4;
    v45 = a4 * 0.0;
    v46 = 8 * v19;
    v47 = (float64x2_t *)&v310[v46];
    v49 = v310 < (_BYTE *)v25 + v46 && v25 < v47;
    v50 = v15 == 1 && v16 == 1;
    v51 = v19 & 0xFFFFFFF0;
    v52 = v19 & 0xFFFFFFF8;
    v53 = vdupq_lane_s64(*(uint64_t *)&v45, 0);
    v55 = !v50 || v19 < 8;
    v56 = 8 * v16;
    v57 = (char *)v12 + 1;
    v58 = 8 * v24;
    v59 = &v14[v46];
    v60 = (float64x2_t *)v14;
    v61 = v12;
    do
    {
      v62 = (unint64_t)v12 + v43;
      v63 = (unint64_t)v12 + v43 + v19;
      if (v25)
      {
        if ((int)v19 < 1)
          goto LABEL_104;
        if ((v55 & 1) != 0
          || ((unint64_t)v310 < v63 ? (v64 = v62 >= (unint64_t)v47) : (v64 = 1),
              !v64 ? (v65 = 1) : (v65 = v49),
              (v65 & 1) != 0))
        {
          v66 = 0;
LABEL_65:
          v67 = &v310[8 * v66];
          v68 = (double *)((char *)v25->f64 + v56 * v66);
          v69 = v19 - v66;
          v70 = v15 * v66;
          do
          {
            LOBYTE(a7.f64[0]) = *((_BYTE *)v61 + v70);
            a7.f64[0] = (double)*(unint64_t *)&a7.f64[0] - *v68;
            *v67++ = *(_QWORD *)&a7.f64[0];
            v68 = (double *)((char *)v68 + v56);
            v70 += v15;
            --v69;
          }
          while (v69);
          goto LABEL_104;
        }
        if (v19 >= 0x10)
        {
          v95 = v19 & 0x7FFFFFF0;
          v96 = (float64x2_t *)v310;
          v97 = (int8x16_t *)v61;
          v98 = v25;
          do
          {
            v99 = *v97++;
            v100 = vextq_s8(v99, v99, 8uLL).u64[0];
            v101.i32[0] = BYTE6(v100);
            v101.i32[1] = HIBYTE(v100);
            v102 = vand_s8(v101, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v102.u32[0];
            v103.i64[1] = v102.u32[1];
            v104 = vcvtq_f64_u64(v103);
            v105.i32[0] = BYTE4(v100);
            v105.i32[1] = BYTE5(v100);
            v106 = vand_s8(v105, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v106.u32[0];
            v103.i64[1] = v106.u32[1];
            v107 = vcvtq_f64_u64(v103);
            v108.i32[0] = BYTE2(v100);
            v108.i32[1] = BYTE3(v100);
            v109 = vand_s8(v108, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v109.u32[0];
            v103.i64[1] = v109.u32[1];
            v110 = vcvtq_f64_u64(v103);
            v111.i32[0] = v100;
            v111.i32[1] = BYTE1(v100);
            v112 = vand_s8(v111, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v112.u32[0];
            v103.i64[1] = v112.u32[1];
            v113 = vcvtq_f64_u64(v103);
            v111.i32[0] = v99.u8[6];
            v111.i32[1] = v99.u8[7];
            v114 = vand_s8(v111, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v114.u32[0];
            v103.i64[1] = v114.u32[1];
            v115 = vcvtq_f64_u64(v103);
            v116.i32[0] = v99.u8[4];
            v116.i32[1] = v99.u8[5];
            v117 = vand_s8(v116, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v117.u32[0];
            v103.i64[1] = v117.u32[1];
            v118 = vcvtq_f64_u64(v103);
            v119.i32[0] = v99.u8[2];
            v119.i32[1] = v99.u8[3];
            v120 = vand_s8(v119, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v120.u32[0];
            v103.i64[1] = v120.u32[1];
            v121 = vcvtq_f64_u64(v103);
            v122.i32[0] = v99.u8[0];
            v122.i32[1] = v99.u8[1];
            v123 = vand_s8(v122, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v123.u32[0];
            v103.i64[1] = v123.u32[1];
            v124 = vsubq_f64(v113, v98[4]);
            v125 = vsubq_f64(v110, v98[5]);
            a9 = (__n128)vsubq_f64(v107, v98[6]);
            a7 = vsubq_f64(v104, v98[7]);
            v126 = vsubq_f64(vcvtq_f64_u64(v103), *v98);
            v127 = vsubq_f64(v121, v98[1]);
            v10 = vsubq_f64(v115, v98[3]);
            v96[2] = vsubq_f64(v118, v98[2]);
            v96[3] = v10;
            *v96 = v126;
            v96[1] = v127;
            v96[6] = (float64x2_t)a9;
            v96[7] = a7;
            v96[4] = v124;
            v96[5] = v125;
            v98 += 8;
            v96 += 8;
            v95 -= 16;
          }
          while (v95);
          if (v51 == v19)
            goto LABEL_104;
          v76 = v19 & 0x7FFFFFF0;
          v66 = v19 & 0xFFFFFFF0;
          if ((v19 & 8) == 0)
            goto LABEL_65;
        }
        else
        {
          v76 = 0;
        }
        v77 = (float64x2_t *)((char *)v25 + 8 * v76);
        v78 = (__n128 *)&v310[8 * v76];
        do
        {
          v79 = *(_QWORD *)((char *)v61 + v76);
          v80.i32[0] = BYTE6(v79);
          v80.i32[1] = HIBYTE(v79);
          v81 = vand_s8(v80, (int8x8_t)0xFF000000FFLL);
          v82.i64[0] = v81.u32[0];
          v82.i64[1] = v81.u32[1];
          v83.i32[0] = BYTE4(v79);
          v84 = vcvtq_f64_u64(v82);
          v83.i32[1] = BYTE5(v79);
          v85 = vand_s8(v83, (int8x8_t)0xFF000000FFLL);
          v82.i64[0] = v85.u32[0];
          v82.i64[1] = v85.u32[1];
          v86.i32[0] = BYTE2(v79);
          v86.i32[1] = BYTE3(v79);
          v87 = vcvtq_f64_u64(v82);
          v88 = vand_s8(v86, (int8x8_t)0xFF000000FFLL);
          v82.i64[0] = v88.u32[0];
          v82.i64[1] = v88.u32[1];
          v89 = vcvtq_f64_u64(v82);
          v90.i32[0] = v79;
          v90.i32[1] = BYTE1(v79);
          v91 = vand_s8(v90, (int8x8_t)0xFF000000FFLL);
          v82.i64[0] = v91.u32[0];
          v82.i64[1] = v91.u32[1];
          v10 = v77[2];
          v92 = v77[3];
          v94 = *v77;
          v93 = v77[1];
          v77 += 4;
          a7 = vsubq_f64(vcvtq_f64_u64(v82), v94);
          a9 = (__n128)vsubq_f64(v87, v10);
          v78[2] = a9;
          v78[3] = (__n128)vsubq_f64(v84, v92);
          *v78 = (__n128)a7;
          v78[1] = (__n128)vsubq_f64(v89, v93);
          v78 += 4;
          v76 += 8;
        }
        while (v52 != v76);
        v66 = v19 & 0x7FFFFFF8;
        if (v52 != v19)
          goto LABEL_65;
      }
      else
      {
        if ((int)v19 < 1)
          goto LABEL_104;
        v71 = 0;
        if ((v55 & 1) != 0
          || (v310 < &v59[8 * v43] ? (v72 = &v14[8 * v43] >= (_BYTE *)v47) : (v72 = 1),
              v72 ? (v73 = 0) : (v73 = 1),
              v62 < (unint64_t)v47 ? (v74 = (unint64_t)v310 >= v63) : (v74 = 1),
              !v74 || (v73 & 1) != 0))
        {
LABEL_102:
          v176 = &v310[8 * v71];
          v177 = v56 * v71;
          v178 = v19 - v71;
          v179 = v15 * v71;
          do
          {
            LOBYTE(a7.f64[0]) = *((_BYTE *)v61 + v179);
            a7.f64[0] = (double)*(unint64_t *)&a7.f64[0] - *(double *)((char *)v60->f64 + v177);
            *v176++ = *(_QWORD *)&a7.f64[0];
            v177 += v56;
            v179 += v15;
            --v178;
          }
          while (v178);
          goto LABEL_104;
        }
        if (v19 >= 0x10)
        {
          v128 = 0;
          v129 = (float64x2_t *)v310;
          v130 = v60;
          do
          {
            v131 = (int8x16_t)v61[v128 / 0x10];
            v132.i32[0] = v131.u8[6];
            v132.i32[1] = v131.u8[7];
            v133 = vand_s8(v132, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v133.u32[0];
            v134.i64[1] = v133.u32[1];
            v135 = vcvtq_f64_u64(v134);
            v136.i32[0] = v131.u8[4];
            v136.i32[1] = v131.u8[5];
            v137 = vand_s8(v136, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v137.u32[0];
            v134.i64[1] = v137.u32[1];
            v138 = vcvtq_f64_u64(v134);
            v139.i32[0] = v131.u8[2];
            v139.i32[1] = v131.u8[3];
            v140 = vand_s8(v139, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v140.u32[0];
            v134.i64[1] = v140.u32[1];
            v141 = vcvtq_f64_u64(v134);
            v142.i32[0] = v131.u8[0];
            v142.i32[1] = v131.u8[1];
            v143 = vand_s8(v142, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v143.u32[0];
            v134.i64[1] = v143.u32[1];
            v144 = vcvtq_f64_u64(v134);
            v131.i64[0] = vextq_s8(v131, v131, 8uLL).u64[0];
            v145.i32[0] = v131.u8[6];
            v145.i32[1] = v131.u8[7];
            v146 = vand_s8(v145, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v146.u32[0];
            v134.i64[1] = v146.u32[1];
            v147.i32[0] = v131.u8[4];
            v148 = vcvtq_f64_u64(v134);
            v147.i32[1] = v131.u8[5];
            v149 = vand_s8(v147, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v149.u32[0];
            v134.i64[1] = v149.u32[1];
            v150.i32[0] = v131.u8[2];
            v150.i32[1] = v131.u8[3];
            v151 = vcvtq_f64_u64(v134);
            v152 = vand_s8(v150, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v152.u32[0];
            v134.i64[1] = v152.u32[1];
            v153 = vcvtq_f64_u64(v134);
            v154.i32[0] = v131.u8[0];
            v154.i32[1] = v131.u8[1];
            *(int8x8_t *)v131.i8 = vand_s8(v154, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v131.u32[0];
            v134.i64[1] = v131.u32[1];
            v155 = vsubq_f64(vcvtq_f64_u64(v134), v130[4]);
            v156 = vsubq_f64(v153, v130[5]);
            v157 = vsubq_f64(v151, v130[6]);
            v10 = vsubq_f64(v148, v130[7]);
            v158 = vsubq_f64(v144, *v130);
            a9 = (__n128)vsubq_f64(v141, v130[1]);
            a7 = vsubq_f64(v135, v130[3]);
            v129[2] = vsubq_f64(v138, v130[2]);
            v129[3] = a7;
            *v129 = v158;
            v129[1] = (float64x2_t)a9;
            v129[6] = v157;
            v129[7] = v10;
            v129[4] = v155;
            v129[5] = v156;
            v128 += 16;
            v130 += 8;
            v129 += 8;
          }
          while (v51 != v128);
          if (v51 == v19)
            goto LABEL_104;
          v75 = v19 & 0x7FFFFFF0;
          v71 = v19 & 0xFFFFFFF0;
          if ((v19 & 8) == 0)
            goto LABEL_102;
        }
        else
        {
          v75 = 0;
        }
        v159 = 8 * v75;
        do
        {
          v160 = *(_QWORD *)((char *)v61 + v75);
          v161.i32[0] = BYTE6(v160);
          v161.i32[1] = HIBYTE(v160);
          v162 = vand_s8(v161, (int8x8_t)0xFF000000FFLL);
          v163.i64[0] = v162.u32[0];
          v163.i64[1] = v162.u32[1];
          v164 = vcvtq_f64_u64(v163);
          v165.i32[0] = BYTE4(v160);
          v165.i32[1] = BYTE5(v160);
          v166 = vand_s8(v165, (int8x8_t)0xFF000000FFLL);
          v163.i64[0] = v166.u32[0];
          v163.i64[1] = v166.u32[1];
          v167 = vcvtq_f64_u64(v163);
          v168.i32[0] = BYTE2(v160);
          v168.i32[1] = BYTE3(v160);
          v169 = vand_s8(v168, (int8x8_t)0xFF000000FFLL);
          v163.i64[0] = v169.u32[0];
          v163.i64[1] = v169.u32[1];
          v170 = vcvtq_f64_u64(v163);
          v171.i32[0] = v160;
          v171.i32[1] = BYTE1(v160);
          v172 = vand_s8(v171, (int8x8_t)0xFF000000FFLL);
          v163.i64[0] = v172.u32[0];
          v163.i64[1] = v172.u32[1];
          v10 = *(float64x2_t *)((char *)v60 + v159 + 32);
          a7 = vsubq_f64(vcvtq_f64_u64(v163), *(float64x2_t *)((char *)v60 + v159));
          v173 = vsubq_f64(v170, *(float64x2_t *)((char *)v60 + v159 + 16));
          a9 = (__n128)vsubq_f64(v167, v10);
          v174 = vsubq_f64(v164, *(float64x2_t *)((char *)v60 + v159 + 48));
          v175 = (__n128 *)&v310[v159];
          v175[2] = a9;
          v175[3] = (__n128)v174;
          *v175 = (__n128)a7;
          v175[1] = (__n128)v173;
          v75 += 8;
          v159 += 64;
        }
        while (v52 != v75);
        v71 = v19 & 0x7FFFFFF8;
        if (v52 != v19)
          goto LABEL_102;
      }
LABEL_104:
      LODWORD(v180) = v43;
      v181 = v57;
      v182 = v43;
      if (v43 <= v44)
      {
        do
        {
          a7.f64[0] = a4 * 0.0;
          v191 = a4 * 0.0;
          a9.n128_f64[0] = a4 * 0.0;
          v192 = a4 * 0.0;
          if ((int)v19 >= 1)
          {
            v193 = (float64x2_t *)&v14[8 * v182];
            if (v25)
              v193 = v25;
            f64 = v193[1].f64;
            v195 = 0.0;
            v196 = v181;
            v197 = v19;
            v198 = (double *)v310;
            v199 = 0.0;
            v200 = 0.0;
            v201 = 0.0;
            do
            {
              v202 = *v198++;
              LOBYTE(v10.f64[0]) = *(v196 - 1);
              *(double *)&v203 = (double)*(unint64_t *)&v10.f64[0] - *(f64 - 2);
              v201 = v201 + v202 * *(double *)&v203;
              LOBYTE(v203) = *v196;
              *(double *)&v204 = (double)v203 - *(f64 - 1);
              v200 = v200 + v202 * *(double *)&v204;
              LOBYTE(v204) = v196[1];
              *(double *)&v205 = (double)v204 - *f64;
              v199 = v199 + v202 * *(double *)&v205;
              LOBYTE(v205) = v196[2];
              v10.f64[0] = (double)v205 - f64[1];
              v195 = v195 + v202 * v10.f64[0];
              v196 += v15;
              f64 = (double *)((char *)f64 + v56);
              --v197;
            }
            while (v197);
            v192 = v201 * a4;
            a9.n128_f64[0] = v200 * a4;
            v191 = v199 * a4;
            a7.f64[0] = v195 * a4;
          }
          v190 = &v13->i64[v182];
          *(double *)v190 = v192;
          v190[1] = a9.n128_u64[0];
          *((double *)v190 + 2) = v191;
          v190[3] = *(_QWORD *)&a7.f64[0];
          v180 = v182 + 4;
          v181 += 4;
          v182 = v180;
        }
        while ((int)v44 >= (int)v180);
      }
      if ((int)v180 >= (int)v18)
        goto LABEL_53;
      v183 = v180;
      if ((int)v19 >= 1)
      {
        do
        {
          v184 = (double *)&v14[8 * v183];
          if (v25)
            v184 = (double *)v25;
          v185 = 0.0;
          v186 = v12;
          v187 = v19;
          v188 = (double *)v310;
          do
          {
            v189 = *v188++;
            a9.n128_u8[0] = *((_BYTE *)v186 + v183);
            a9.n128_f64[0] = (double)a9.n128_u64[0] - *v184;
            v185 = v185 + v189 * a9.n128_f64[0];
            v184 = (double *)((char *)v184 + v56);
            v186 = (_OWORD *)((char *)v186 + v15);
            --v187;
          }
          while (v187);
          a7.f64[0] = v185 * a4;
          v13->i64[v183++] = *(_QWORD *)&a7.f64[0];
        }
        while ((int)v18 > (int)v183);
        goto LABEL_53;
      }
      v206 = (v18 + ~(_DWORD)v180);
      if (v206 >= 3)
      {
        v208 = v206 + 1;
        v209 = (v206 + 1) & 0x1FFFFFFFCLL;
        v207 = v209 + v183;
        v210 = 8 * v183;
        v211 = v209;
        do
        {
          v212 = (int64x2_t *)((char *)v13 + v210);
          *v212 = v53;
          v212[1] = v53;
          v210 += 32;
          v211 -= 4;
        }
        while (v211);
        if (v208 == v209)
          goto LABEL_53;
      }
      else
      {
        v207 = v180;
      }
      v213 = v207;
      do
      {
        *(double *)&v13->i64[v213++] = v45;
        LODWORD(v207) = v207 + 1;
      }
      while ((int)v18 > (int)v207);
LABEL_53:
      ++v43;
      v13 = (int64x2_t *)((char *)v13 + v58);
      v61 = (_OWORD *)((char *)v61 + 1);
      v60 = (float64x2_t *)((char *)v60 + 8);
      ++v57;
    }
    while (v43 != v18);
  }
  return result;
}

void sub_100236EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10 != v10)
  {
    if (a10)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100236F14(_BYTE *result, uint64_t a2, uint64_t a3, double a4, __n128 a5, float64x2_t a6, float64x2_t a7, double a8, double a9, float64x2_t a10)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  unint64_t v26;
  float64x2_t *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  BOOL v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float64x2_t *v43;
  int8x16_t v44;
  int8x8_t v45;
  int8x8_t v46;
  uint64x2_t v47;
  int8x8_t v48;
  float64x2_t v49;
  int8x8_t v50;
  float64x2_t v51;
  int8x8_t v52;
  int8x8_t v53;
  int8x8_t v54;
  float64x2_t v55;
  int8x8_t v56;
  float64x2_t v57;
  int8x8_t v58;
  int8x8_t v59;
  float64x2_t v60;
  int8x8_t v61;
  int8x8_t v62;
  float64x2_t v63;
  int8x8_t v64;
  int8x8_t v65;
  float64x2_t v66;
  int8x8_t v67;
  float64x2_t *v68;
  uint64_t v69;
  int8x8_t v70;
  int8x8_t v71;
  uint64x2_t v72;
  float64x2_t v73;
  int8x8_t v74;
  int8x8_t v75;
  float64x2_t v76;
  int8x8_t v77;
  int8x8_t v78;
  float64x2_t v79;
  int8x8_t v80;
  int8x8_t v81;
  float64x2_t *v82;
  float64x2_t *v83;
  int8x16_t *v84;
  int8x16_t v85;
  unint64_t v86;
  int8x8_t v87;
  int8x8_t v88;
  uint64x2_t v89;
  float64x2_t v90;
  int8x8_t v91;
  int8x8_t v92;
  float64x2_t v93;
  int8x8_t v94;
  int8x8_t v95;
  float64x2_t v96;
  int8x8_t v97;
  int8x8_t v98;
  float64x2_t v99;
  int8x8_t v100;
  float64x2_t v101;
  int8x8_t v102;
  int8x8_t v103;
  float64x2_t v104;
  int8x8_t v105;
  int8x8_t v106;
  float64x2_t v107;
  int8x8_t v108;
  int8x8_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  uint64_t v113;
  uint64_t v114;
  int8x8_t v115;
  int8x8_t v116;
  uint64x2_t v117;
  float64x2_t v118;
  int8x8_t v119;
  int8x8_t v120;
  float64x2_t v121;
  int8x8_t v122;
  int8x8_t v123;
  float64x2_t v124;
  int8x8_t v125;
  int8x8_t v126;
  float64x2_t v127;
  __n128 *v128;
  const char *v129;
  const char *v130;
  uint64_t v131;
  float64x2_t *v132;
  unsigned int v133;
  double v134;
  uint64_t v135;
  double *v136;
  double v137;
  double v138;
  unint64_t v139;
  double v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *f64;
  uint64_t v146;
  uint64_t v147;
  float64x2_t *v148;
  int8x16_t *v149;
  uint64_t v150;
  float64x2_t *v151;
  int8x16_t v152;
  unint64_t v153;
  int8x8_t v154;
  int8x8_t v155;
  int8x8_t v156;
  int8x8_t v157;
  int8x8_t v158;
  int8x8_t v159;
  __int32 v160;
  uint64x2_t v161;
  uint64x2_t v162;
  int8x8_t v163;
  uint64x2_t v164;
  uint64x2_t v165;
  int8x8_t v166;
  int8x8_t v167;
  uint64x2_t v168;
  uint64x2_t v169;
  int8x8_t v170;
  int8x8_t v171;
  int8x8_t v172;
  float64x2_t v173;
  int8x8_t v174;
  float64x2_t v175;
  int8x8_t v176;
  int8x8_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  double v183;
  float64x2_t *v184;
  uint64_t v185;
  uint64_t v186;
  float64x2_t *v187;
  uint64_t v188;
  int8x8_t v189;
  int8x8_t v190;
  uint64x2_t v191;
  int8x8_t v192;
  float64x2_t v193;
  int8x8_t v194;
  int8x8_t v195;
  float64x2_t v196;
  int8x8_t v197;
  float64x2_t v198;
  int8x8_t v199;
  int8x8_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned __int8 *v209;
  uint64_t v210;
  unsigned __int8 *v211;
  unsigned __int8 *v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t j;
  const char *v216;
  unint64_t v217;
  unint64_t v218;
  double v219;
  unint64_t v220;
  unint64_t v221;
  double v222;
  unint64_t v223;
  unint64_t v224;
  double v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  const char *v230;
  const char *v231;
  unint64_t v232;
  uint64_t v233;
  double v234;
  const char *v235;
  const char *v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  int8x8_t v240;
  int8x8_t v241;
  int8x8_t v242;
  int8x8_t v243;
  int8x8_t v244;
  int8x8_t v245;
  unint64_t v246;
  int8x8_t v247;
  unint64_t v248;
  int8x8_t v249;
  unint64_t v250;
  unsigned int v251;
  int8x8_t v252;
  unsigned int v253;
  int v254;
  __int32 v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unint64_t v271;
  int8x8_t v272;
  uint64x2_t v273;
  float64x2_t v274;
  int8x8_t v275;
  int8x8_t v276;
  float64x2_t v277;
  float64x2_t v278;
  int8x8_t v279;
  float64x2_t v280;
  int8x8_t v281;
  uint64x2_t v282;
  int8x8_t v283;
  float64x2_t v284;
  int8x8_t v285;
  int8x8_t v286;
  int8x8_t v287;
  int8x8_t v288;
  float64x2_t v289;
  int8x8_t v290;
  float64x2_t v291;
  int8x8_t v292;
  float64x2_t v293;
  int8x8_t v294;
  float64x2_t v295;
  float64x2_t v296;
  int8x8_t v297;
  float64x2_t v298;
  int8x8_t v299;
  uint64x2_t v300;
  int8x8_t v301;
  float64x2_t v302;
  float64x2_t v303;
  int8x8_t v304;
  int8x8_t v305;
  int8x8_t v306;
  float64x2_t v307;
  float64x2_t v308;
  uint64x2_t v309;
  int8x8_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  int8x8_t v314;
  float64x2_t v315;
  int8x8_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  uint64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  double v342;
  double v343;
  double v344;
  unint64_t v345;
  double v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  const char *v351;
  const char *v352;
  int8x8_t v353;
  int8x8_t v354;
  int8x8_t v355;
  int8x8_t v356;
  int8x8_t v357;
  int8x8_t v358;
  int8x8_t v359;
  int8x8_t v360;
  int8x8_t v361;
  int8x8_t v362;
  int8x8_t v363;
  int8x8_t v364;
  int8x8_t v365;
  int8x8_t v366;
  int8x8_t v367;
  int8x8_t v368;
  int8x8_t v369;
  int8x8_t v370;
  int8x8_t v371;
  int8x8_t v372;
  int8x8_t v373;
  int8x8_t v374;
  unsigned int v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  uint64x2_t v380;
  int8x8_t v381;
  float64x2_t v382;
  int8x8_t v383;
  uint64x2_t v384;
  int8x8_t v385;
  float64x2_t v386;
  int8x8_t v387;
  uint64x2_t v388;
  int8x8_t v389;
  float64x2_t v390;
  int8x8_t v391;
  uint64x2_t v392;
  int8x8_t v393;
  float64x2_t v394;
  int8x8_t v395;
  uint64x2_t v396;
  int8x8_t v397;
  float64x2_t v398;
  int8x8_t v399;
  uint64x2_t v400;
  int8x8_t v401;
  float64x2_t v402;
  int8x8_t v403;
  uint64x2_t v404;
  int8x8_t v405;
  float64x2_t v406;
  int8x8_t v407;
  uint64x2_t v408;
  int8x8_t v409;
  float64x2_t v410;
  int8x8_t v411;
  uint64x2_t v412;
  int8x8_t v413;
  float64x2_t v414;
  int8x8_t v415;
  uint64x2_t v416;
  int8x8_t v417;
  float64x2_t v418;
  int8x8_t v419;
  uint64x2_t v420;
  int8x8_t v421;
  float64x2_t v422;
  int8x8_t v423;
  float64x2_t v424;
  float64x2_t v425;
  int8x8_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  double v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  double v444;
  unint64_t v445;
  unint64_t v446;
  double v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  double v451;
  int64x2_t v452;
  _BYTE *v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t i;
  const char *v461;
  unint64_t v462;
  unint64_t v463;
  double v464;
  unint64_t v465;
  unint64_t v466;
  double v467;
  unint64_t v468;
  unint64_t v469;
  double v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  const char *v476;
  const char *v477;
  uint64_t v478;
  uint64_t v479;
  const char *v480;
  unint64_t v482;
  unsigned int v483;
  uint64_t v484;
  uint64_t v485;
  unsigned int v486;
  unint64_t v487;
  unsigned int v488;
  unsigned int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  unsigned int v494;
  unsigned int v495;
  unsigned int v496;
  unsigned int v497;
  unsigned int v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int v501;
  unsigned int v502;
  unsigned int v503;
  unsigned int v504;
  unsigned int v505;
  unsigned int v506;
  unsigned int v507;
  __int32 v508;
  __int32 v509;
  __int32 v510;
  __int32 v511;
  const char *v512;
  const char *v513;
  uint64_t v514;
  uint64_t v515;
  double v516;
  double v517;
  _BYTE v518[16];
  uint64_t v519;
  _QWORD v520[2];
  double v521;
  double v522;
  int8x8x4_t v523;
  int8x8x4_t v524;
  int8x16x4_t v525;
  int8x16x4_t v526;

  v11 = (const char *)*((_QWORD *)result + 2);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *((_QWORD *)result + 10);
  v472 = *(_QWORD *)(a2 + 80) >> 3;
  if (*(int *)(a3 + 8) <= 1)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a3 + 80) >> 3;
  v16 = (unsigned int *)*((_QWORD *)result + 8);
  v17 = *v16;
  v18 = (int)v16[1];
  v484 = *((_QWORD *)result + 10);
  v485 = v16[1];
  v482 = v17;
  v483 = v16[1];
  if (!v13)
  {
    if ((int)v17 < 1)
      return result;
    if ((int)v18 < 4)
    {
      if ((int)v485 <= 0)
      {
        v449 = 0;
        v450 = 0;
        v451 = a4 * 0.0;
        v452 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
        v453 = (_BYTE *)(v12 + 16);
        v454 = 1;
        do
        {
          if (v454 <= v17)
            v455 = v17;
          else
            v455 = v454;
          v456 = v450 + 1;
          if (v450 + 1 > v17)
            v457 = v450 + 1;
          else
            v457 = v17;
          v458 = v457 - v450;
          if (v458 < 4)
            goto LABEL_145;
          v459 = (v455 + v449) & 0xFFFFFFFFFFFFFFFCLL;
          v450 += v458 & 0xFFFFFFFFFFFFFFFCLL;
          result = v453;
          do
          {
            *((int64x2_t *)result - 1) = v452;
            *(int64x2_t *)result = v452;
            result += 32;
            v459 -= 4;
          }
          while (v459);
          if (v458 != (v458 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_145:
            do
              *(double *)(v12 + 8 * v450++) = v451;
            while (v450 < v17);
          }
          ++v454;
          --v449;
          v453 += 8 * v472 + 8;
          v12 += 8 * v472;
          v450 = v456;
        }
        while (v456 != v17);
      }
      else
      {
        v208 = 0;
        v209 = (unsigned __int8 *)(v11 + 2);
        do
        {
          v210 = 0;
          v211 = (unsigned __int8 *)&v11[v14 * v208];
          v212 = v209;
          do
          {
            a5.n128_u8[0] = *v211;
            LOBYTE(a6.f64[0]) = *(v212 - 2);
            a6.f64[0] = (double)*(unint64_t *)&a6.f64[0];
            a5.n128_f64[0] = (double)a5.n128_u64[0] * a6.f64[0] + 0.0;
            if ((_DWORD)v485 != 1)
            {
              LOBYTE(a6.f64[0]) = v211[1];
              a6.f64[0] = (double)*(unint64_t *)&a6.f64[0];
              LOBYTE(a7.f64[0]) = *(v212 - 1);
              a7.f64[0] = (double)*(unint64_t *)&a7.f64[0];
              a5.n128_f64[0] = a5.n128_f64[0] + a6.f64[0] * a7.f64[0];
              if ((_DWORD)v18 != 2)
              {
                LOBYTE(a6.f64[0]) = v211[2];
                a6.f64[0] = (double)*(unint64_t *)&a6.f64[0];
                LOBYTE(a7.f64[0]) = *v212;
                a7.f64[0] = (double)*(unint64_t *)&a7.f64[0];
                a5.n128_f64[0] = a5.n128_f64[0] + a6.f64[0] * a7.f64[0];
              }
            }
            a5.n128_f64[0] = a5.n128_f64[0] * a4;
            *(_QWORD *)(v12 + 8 * v210) = a5.n128_u64[0];
            v212 += v14;
            ++v210;
          }
          while (v208 + v210 < v17);
          ++v208;
          v209 += v14;
          v12 += 8 * v472 + 8;
        }
        while (v208 != v17);
      }
      return result;
    }
    v213 = (v485 - 4);
    v214 = (v213 & 0xFFFFFFFC) + 4;
    if (v213 < 0x1C)
    {
      if (v214 >= v485)
      {
        for (i = 0; i != v17; ++i)
        {
          v461 = v11;
          v462 = i;
          do
          {
            v463 = 0;
            v464 = 0.0;
            do
            {
              a5.n128_u8[0] = v11[v463];
              LOBYTE(a6.f64[0]) = v461[v463];
              LOBYTE(a7.f64[0]) = v11[v463 + 1];
              *(double *)&v465 = (double)*(unint64_t *)&a6.f64[0];
              LOBYTE(a8) = v461[v463 + 1];
              a8 = (double)*(unint64_t *)&a8;
              *(double *)&v466 = (double)*(unint64_t *)&a7.f64[0] * a8;
              v467 = *(double *)&v466 + (double)a5.n128_u64[0] * *(double *)&v465;
              LOBYTE(v465) = v11[v463 + 2];
              *(double *)&v468 = (double)v465;
              LOBYTE(v466) = v461[v463 + 2];
              *(double *)&v469 = (double)v466;
              v470 = v467 + *(double *)&v468 * *(double *)&v469;
              LOBYTE(v468) = v11[v463 + 3];
              a6.f64[0] = (double)v468;
              LOBYTE(v469) = v461[v463 + 3];
              a7.f64[0] = (double)v469;
              a5.n128_f64[0] = v470 + a6.f64[0] * a7.f64[0];
              v464 = v464 + a5.n128_f64[0];
              v463 += 4;
            }
            while (v463 <= v213);
            *(double *)(v12 + 8 * v462++) = v464 * a4;
            v461 += v14;
          }
          while (v462 < v17);
          v12 += 8 * v472;
          v11 += v14;
        }
      }
      else
      {
        for (j = 0; j != v17; ++j)
        {
          v216 = v11;
          v217 = j;
          do
          {
            v218 = 0;
            v219 = 0.0;
            do
            {
              a5.n128_u8[0] = v11[v218];
              LOBYTE(a6.f64[0]) = v216[v218];
              LOBYTE(a7.f64[0]) = v11[v218 + 1];
              *(double *)&v220 = (double)*(unint64_t *)&a6.f64[0];
              LOBYTE(a8) = v216[v218 + 1];
              a8 = (double)*(unint64_t *)&a8;
              *(double *)&v221 = (double)*(unint64_t *)&a7.f64[0] * a8;
              v222 = *(double *)&v221 + (double)a5.n128_u64[0] * *(double *)&v220;
              LOBYTE(v220) = v11[v218 + 2];
              *(double *)&v223 = (double)v220;
              LOBYTE(v221) = v216[v218 + 2];
              *(double *)&v224 = (double)v221;
              v225 = v222 + *(double *)&v223 * *(double *)&v224;
              LOBYTE(v223) = v11[v218 + 3];
              a6.f64[0] = (double)v223;
              LOBYTE(v224) = v216[v218 + 3];
              a7.f64[0] = (double)v224;
              a5.n128_f64[0] = v225 + a6.f64[0] * a7.f64[0];
              v219 = v219 + a5.n128_f64[0];
              v218 += 4;
            }
            while (v218 <= v213);
            v226 = 0;
            do
            {
              a5.n128_u8[0] = v11[v214 + v226];
              LOBYTE(a6.f64[0]) = v216[v214 + v226];
              a5.n128_f64[0] = (double)a5.n128_u64[0];
              a6.f64[0] = (double)*(unint64_t *)&a6.f64[0];
              v219 = v219 + a5.n128_f64[0] * a6.f64[0];
              ++v226;
            }
            while ((int)v18 > (int)v214 + (int)v226);
            *(double *)(v12 + 8 * v217++) = v219 * a4;
            v216 += v14;
          }
          while (v217 < v17);
          v12 += 8 * v472;
          v11 += v14;
        }
      }
      return result;
    }
    v227 = 0;
    v228 = (v213 >> 2) + 1;
    v229 = v228 & 0x7FFFFFF0;
    v479 = v228 & 0x7FFFFFF8;
    v475 = (v213 & 0xFFFFFFFC) + 4;
    v473 = v229;
    v474 = v228;
LABEL_105:
    v230 = &v11[v214];
    v231 = v11;
    v471 = v227;
    v232 = v227;
    v477 = v11;
    v478 = v12;
    v476 = &v11[v214];
    while (v213 >= 0x3C)
    {
      v480 = v231;
      v234 = 0.0;
      v235 = v231;
      do
      {
        v516 = v234;
        v514 = v229;
        v525 = vld4q_s8(v11);
        v236 = v11 + 64;
        v512 = v236;
        v526 = vld4q_s8(v235);
        v235 += 64;
        v237 = vextq_s8(v525.val[0], v525.val[0], 8uLL).u64[0];
        v238 = vextq_s8(v526.val[0], v526.val[0], 8uLL).u64[0];
        v239 = vextq_s8(v525.val[1], v525.val[1], 8uLL).u64[0];
        v511 = v525.val[1].u8[7];
        v510 = v525.val[1].u8[5];
        v509 = v525.val[1].u8[3];
        v508 = v525.val[1].u8[1];
        v507 = v525.val[2].u8[6];
        v240.i32[0] = BYTE2(v237);
        v500 = v526.val[0].u8[0];
        v506 = v525.val[2].u8[7];
        v505 = v525.val[2].u8[4];
        v241.i32[0] = BYTE4(v237);
        v499 = v526.val[0].u8[2];
        v504 = v525.val[2].u8[5];
        v503 = v525.val[2].u8[2];
        v242.i32[0] = BYTE6(v237);
        v502 = v525.val[2].u8[3];
        v501 = v525.val[2].u8[1];
        v497 = v525.val[3].u8[0];
        v498 = v525.val[2].u8[0];
        v243.i32[0] = BYTE2(v238);
        v244.i32[0] = v525.val[1].u8[6];
        v495 = v525.val[3].u8[2];
        v496 = v525.val[3].u8[1];
        v245.i32[0] = BYTE4(v238);
        v246 = vextq_s8(v526.val[1], v526.val[1], 8uLL).u64[0];
        v493 = v525.val[3].u8[4];
        v494 = v525.val[3].u8[3];
        v247.i32[0] = BYTE6(v238);
        v248 = vextq_s8(v525.val[2], v525.val[2], 8uLL).u64[0];
        v492 = v525.val[3].u8[5];
        v249.i32[0] = BYTE6(v239);
        v488 = v525.val[3].u8[7];
        v489 = v525.val[3].u8[6];
        v487 = vextq_s8(v525.val[3], v525.val[3], 8uLL).u64[0];
        v525.val[3].i32[0] = BYTE4(v239);
        v250 = vextq_s8(v526.val[2], v526.val[2], 8uLL).u64[0];
        v251 = v526.val[0].u8[1];
        v252.i32[0] = BYTE2(v239);
        v253 = v526.val[0].u8[3];
        v254 = v526.val[1].u8[7];
        v255 = v526.val[1].u8[5];
        v256 = v526.val[1].u8[2];
        v257 = v526.val[1].u8[3];
        v258 = v526.val[1].u8[0];
        result = (_BYTE *)v526.val[1].u8[1];
        v259 = v526.val[2].u8[6];
        v260 = v526.val[2].u8[7];
        v261 = v526.val[2].u8[4];
        v262 = v526.val[2].u8[5];
        LODWORD(v236) = v526.val[2].u8[2];
        v263 = v526.val[2].u8[3];
        v264 = v526.val[2].u8[0];
        v265 = v526.val[2].u8[1];
        v491 = v526.val[3].u8[0];
        v490 = v526.val[3].u8[1];
        v486 = v526.val[3].u8[2];
        v266 = v526.val[3].u8[3];
        v267 = v526.val[3].u8[4];
        v268 = v526.val[3].u8[5];
        v269 = v526.val[3].u8[6];
        v270 = v526.val[3].u8[7];
        v271 = vextq_s8(v526.val[3], v526.val[3], 8uLL).u64[0];
        v526.val[1].i32[0] = v525.val[1].u8[4];
        v272.i32[0] = v525.val[1].u8[2];
        v525.val[2].i32[0] = BYTE6(v246);
        v249.i32[1] = HIBYTE(v239);
        v525.val[2].i32[1] = HIBYTE(v246);
        *(int8x8_t *)v526.val[2].i8 = vand_s8(v249, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v526.val[2].u32[0];
        v273.i64[1] = v526.val[2].u32[1];
        *(int8x8_t *)v525.val[2].i8 = vand_s8(*(int8x8_t *)v525.val[2].i8, (int8x8_t)0xFF000000FFLL);
        v526.val[2] = (int8x16_t)vcvtq_f64_u64(v273);
        v273.i64[0] = v525.val[2].u32[0];
        v273.i64[1] = v525.val[2].u32[1];
        v274 = vmulq_f64((float64x2_t)v526.val[2], vcvtq_f64_u64(v273));
        v526.val[2].i32[0] = v239;
        v242.i32[1] = HIBYTE(v237);
        v247.i32[1] = HIBYTE(v238);
        v275 = vand_s8(v242, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v275.u32[0];
        v273.i64[1] = v275.u32[1];
        v276 = vand_s8(v247, (int8x8_t)0xFF000000FFLL);
        v277 = vcvtq_f64_u64(v273);
        v273.i64[0] = v276.u32[0];
        v273.i64[1] = v276.u32[1];
        v278 = vmlaq_f64(v274, vcvtq_f64_u64(v273), v277);
        v279.i32[0] = v525.val[1].u8[0];
        v241.i32[1] = BYTE5(v237);
        v245.i32[1] = BYTE5(v238);
        v525.val[3].i32[1] = BYTE5(v239);
        LODWORD(v277.f64[0]) = BYTE4(v246);
        HIDWORD(v277.f64[0]) = BYTE5(v246);
        *(int8x8_t *)v525.val[3].i8 = vand_s8(*(int8x8_t *)v525.val[3].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v525.val[3].u32[0];
        v273.i64[1] = v525.val[3].u32[1];
        v525.val[3] = (int8x16_t)vcvtq_f64_u64(v273);
        *(int8x8_t *)&v277.f64[0] = vand_s8(*(int8x8_t *)&v277.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v277.f64[0]);
        v273.i64[1] = HIDWORD(v277.f64[0]);
        v280 = vmulq_f64((float64x2_t)v525.val[3], vcvtq_f64_u64(v273));
        LODWORD(v277.f64[0]) = v526.val[1].u8[6];
        v281 = vand_s8(v241, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v281.u32[0];
        v273.i64[1] = v281.u32[1];
        v282 = v273;
        v283 = vand_s8(v245, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v283.u32[0];
        v273.i64[1] = v283.u32[1];
        v284 = vmlaq_f64(v280, vcvtq_f64_u64(v273), vcvtq_f64_u64(v282));
        v282.i32[0] = v526.val[1].u8[4];
        v283.i32[0] = BYTE2(v246);
        v526.val[0].i32[0] = v246;
        v526.val[3].i32[0] = v237;
        v526.val[3].i32[1] = BYTE1(v237);
        v285.i32[0] = v525.val[0].u8[0];
        v285.i32[1] = v525.val[0].u8[1];
        v286.i32[0] = v525.val[0].u8[2];
        v286.i32[1] = v525.val[0].u8[3];
        v240.i32[1] = BYTE3(v237);
        v525.val[2].i32[0] = v525.val[0].u8[4];
        v525.val[2].i32[1] = v525.val[0].u8[5];
        v525.val[0].i32[0] = v525.val[0].u8[6];
        v525.val[0].i32[1] = v525.val[0].u8[7];
        v525.val[3].i32[0] = v238;
        v525.val[3].i32[1] = BYTE1(v238);
        v525.val[1].i32[0] = v526.val[0].u8[4];
        v243.i32[1] = BYTE3(v238);
        v525.val[1].i32[1] = v526.val[0].u8[5];
        v287.i32[0] = v526.val[0].u8[6];
        v287.i32[1] = v526.val[0].u8[7];
        v252.i32[1] = BYTE3(v239);
        v244.i32[1] = v511;
        v526.val[1].i32[1] = v510;
        v526.val[2].i32[1] = BYTE1(v239);
        v272.i32[1] = v509;
        v279.i32[1] = v508;
        v283.i32[1] = BYTE3(v246);
        HIDWORD(v277.f64[0]) = v254;
        v282.i32[1] = v255;
        v526.val[0].i32[1] = BYTE1(v246);
        v288 = vand_s8(v252, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v288.u32[0];
        v273.i64[1] = v288.u32[1];
        v289 = vcvtq_f64_u64(v273);
        v290 = vand_s8(v283, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v290.u32[0];
        v273.i64[1] = v290.u32[1];
        v291 = vmulq_f64(v289, vcvtq_f64_u64(v273));
        v292 = vand_s8(v240, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v292.u32[0];
        v273.i64[1] = v292.u32[1];
        v293 = vcvtq_f64_u64(v273);
        v294 = vand_s8(v243, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v294.u32[0];
        v273.i64[1] = v294.u32[1];
        v295 = vmlaq_f64(v291, vcvtq_f64_u64(v273), v293);
        *(int8x8_t *)&v293.f64[0] = vand_s8(v244, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v293.f64[0]);
        v273.i64[1] = HIDWORD(v293.f64[0]);
        v296 = vcvtq_f64_u64(v273);
        v297 = vand_s8(*(int8x8_t *)&v277.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v297.u32[0];
        v273.i64[1] = v297.u32[1];
        v298 = vmulq_f64(v296, vcvtq_f64_u64(v273));
        v299 = vand_s8(*(int8x8_t *)v525.val[0].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v299.u32[0];
        v273.i64[1] = v299.u32[1];
        v300 = v273;
        v301 = vand_s8(v287, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v301.u32[0];
        v273.i64[1] = v301.u32[1];
        v302 = vmlaq_f64(v298, vcvtq_f64_u64(v273), vcvtq_f64_u64(v300));
        *(int8x8_t *)v526.val[1].i8 = vand_s8(*(int8x8_t *)v526.val[1].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v526.val[1].u32[0];
        v273.i64[1] = v526.val[1].u32[1];
        *(int8x8_t *)v282.i8 = vand_s8(*(int8x8_t *)v282.i8, (int8x8_t)0xFF000000FFLL);
        v526.val[1] = (int8x16_t)vcvtq_f64_u64(v273);
        v273.i64[0] = v282.u32[0];
        v273.i64[1] = v282.u32[1];
        v526.val[1] = (int8x16_t)vmulq_f64((float64x2_t)v526.val[1], vcvtq_f64_u64(v273));
        *(int8x8_t *)v282.i8 = vand_s8(*(int8x8_t *)v525.val[2].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v282.u32[0];
        v273.i64[1] = v282.u32[1];
        v303 = vcvtq_f64_u64(v273);
        v304 = vand_s8(*(int8x8_t *)v525.val[1].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v304.u32[0];
        v273.i64[1] = v304.u32[1];
        v526.val[1] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[1], vcvtq_f64_u64(v273), v303);
        *(int8x8_t *)v526.val[2].i8 = vand_s8(*(int8x8_t *)v526.val[2].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v526.val[2].u32[0];
        v273.i64[1] = v526.val[2].u32[1];
        v526.val[2] = (int8x16_t)vcvtq_f64_u64(v273);
        v305 = vand_s8(*(int8x8_t *)v526.val[0].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v305.u32[0];
        v273.i64[1] = v305.u32[1];
        v526.val[2] = (int8x16_t)vmulq_f64((float64x2_t)v526.val[2], vcvtq_f64_u64(v273));
        v306 = vand_s8(*(int8x8_t *)v526.val[3].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v306.u32[0];
        v273.i64[1] = v306.u32[1];
        v307 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v303.f64[0] = vand_s8(*(int8x8_t *)v525.val[3].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v303.f64[0]);
        v273.i64[1] = HIDWORD(v303.f64[0]);
        v526.val[2] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[2], vcvtq_f64_u64(v273), v307);
        *(int8x8_t *)&v307.f64[0] = vand_s8(v272, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v307.f64[0]);
        v273.i64[1] = HIDWORD(v307.f64[0]);
        v308 = vcvtq_f64_u64(v273);
        *(int8x8_t *)v526.val[3].i8 = vand_s8((int8x8_t)__PAIR64__(v257, v256), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v526.val[3].u32[0];
        v273.i64[1] = v526.val[3].u32[1];
        v526.val[3] = (int8x16_t)vmulq_f64(v308, vcvtq_f64_u64(v273));
        *(int8x8_t *)&v308.f64[0] = vand_s8(v286, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v308.f64[0]);
        v273.i64[1] = HIDWORD(v308.f64[0]);
        v309 = v273;
        *(int8x8_t *)&v303.f64[0] = vand_s8((int8x8_t)__PAIR64__(v253, v499), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v303.f64[0]);
        v273.i64[1] = HIDWORD(v303.f64[0]);
        v526.val[3] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[3], vcvtq_f64_u64(v273), vcvtq_f64_u64(v309));
        *(int8x8_t *)v309.i8 = vand_s8(v279, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v309.u32[0];
        v273.i64[1] = v309.u32[1];
        v310 = vand_s8((int8x8_t)__PAIR64__(result, v258), (int8x8_t)0xFF000000FFLL);
        v311 = vcvtq_f64_u64(v273);
        v273.i64[0] = v310.u32[0];
        v273.i64[1] = v310.u32[1];
        v312 = vmulq_f64(v311, vcvtq_f64_u64(v273));
        *(int8x8_t *)&v311.f64[0] = vand_s8(v285, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v311.f64[0]);
        v273.i64[1] = HIDWORD(v311.f64[0]);
        v313 = vcvtq_f64_u64(v273);
        v314 = vand_s8((int8x8_t)__PAIR64__(v251, v500), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v314.u32[0];
        v273.i64[1] = v314.u32[1];
        v315 = vmlaq_f64(v312, vcvtq_f64_u64(v273), v313);
        v316 = vand_s8((int8x8_t)__PAIR64__(v501, v498), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v316.u32[0];
        v273.i64[1] = v316.u32[1];
        v317 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v313.f64[0] = vand_s8((int8x8_t)__PAIR64__(v265, v264), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v313.f64[0]);
        v273.i64[1] = HIDWORD(v313.f64[0]);
        v318 = vmlaq_f64(v315, vcvtq_f64_u64(v273), v317);
        *(int8x8_t *)&v313.f64[0] = vand_s8((int8x8_t)__PAIR64__(v502, v503), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v313.f64[0]);
        v273.i64[1] = HIDWORD(v313.f64[0]);
        v319 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v317.f64[0] = vand_s8((int8x8_t)__PAIR64__(v263, v236), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v317.f64[0]);
        v273.i64[1] = HIDWORD(v317.f64[0]);
        v526.val[3] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[3], vcvtq_f64_u64(v273), v319);
        LODWORD(v319.f64[0]) = v248;
        HIDWORD(v319.f64[0]) = BYTE1(v248);
        LODWORD(v317.f64[0]) = v250;
        HIDWORD(v317.f64[0]) = BYTE1(v250);
        *(int8x8_t *)&v319.f64[0] = vand_s8(*(int8x8_t *)&v319.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v319.f64[0]);
        v273.i64[1] = HIDWORD(v319.f64[0]);
        v320 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v317.f64[0] = vand_s8(*(int8x8_t *)&v317.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v317.f64[0]);
        v273.i64[1] = HIDWORD(v317.f64[0]);
        v526.val[2] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[2], vcvtq_f64_u64(v273), v320);
        *(int8x8_t *)&v320.f64[0] = vand_s8((int8x8_t)__PAIR64__(v504, v505), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v320.f64[0]);
        v273.i64[1] = HIDWORD(v320.f64[0]);
        v321 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v317.f64[0] = vand_s8((int8x8_t)__PAIR64__(v262, v261), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v317.f64[0]);
        v273.i64[1] = HIDWORD(v317.f64[0]);
        v526.val[1] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[1], vcvtq_f64_u64(v273), v321);
        LODWORD(v321.f64[0]) = BYTE2(v248);
        HIDWORD(v321.f64[0]) = BYTE3(v248);
        LODWORD(v317.f64[0]) = BYTE2(v250);
        HIDWORD(v317.f64[0]) = BYTE3(v250);
        *(int8x8_t *)&v321.f64[0] = vand_s8(*(int8x8_t *)&v321.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v321.f64[0]);
        v273.i64[1] = HIDWORD(v321.f64[0]);
        v322 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v317.f64[0] = vand_s8(*(int8x8_t *)&v317.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v317.f64[0]);
        v273.i64[1] = HIDWORD(v317.f64[0]);
        v323 = vmlaq_f64(v295, vcvtq_f64_u64(v273), v322);
        LODWORD(v322.f64[0]) = BYTE4(v248);
        HIDWORD(v322.f64[0]) = BYTE5(v248);
        *(int8x8_t *)&v322.f64[0] = vand_s8(*(int8x8_t *)&v322.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v322.f64[0]);
        v273.i64[1] = HIDWORD(v322.f64[0]);
        LODWORD(v303.f64[0]) = BYTE4(v250);
        HIDWORD(v303.f64[0]) = BYTE5(v250);
        v324 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v303.f64[0] = vand_s8(*(int8x8_t *)&v303.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v303.f64[0]);
        v273.i64[1] = HIDWORD(v303.f64[0]);
        v325 = vmlaq_f64(v284, vcvtq_f64_u64(v273), v324);
        LODWORD(v324.f64[0]) = BYTE6(v248);
        LODWORD(v303.f64[0]) = BYTE6(v250);
        HIDWORD(v324.f64[0]) = HIBYTE(v248);
        HIDWORD(v303.f64[0]) = HIBYTE(v250);
        *(int8x8_t *)&v324.f64[0] = vand_s8(*(int8x8_t *)&v324.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v324.f64[0]);
        v273.i64[1] = HIDWORD(v324.f64[0]);
        v326 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v303.f64[0] = vand_s8(*(int8x8_t *)&v303.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v303.f64[0]);
        v273.i64[1] = HIDWORD(v303.f64[0]);
        v327 = vmlaq_f64(v278, vcvtq_f64_u64(v273), v326);
        LODWORD(v326.f64[0]) = BYTE4(v487);
        LODWORD(v303.f64[0]) = BYTE6(v487);
        *(int8x8_t *)&v317.f64[0] = vand_s8((int8x8_t)__PAIR64__(v506, v507), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v317.f64[0]);
        v273.i64[1] = HIDWORD(v317.f64[0]);
        v328 = vcvtq_f64_u64(v273);
        *(int8x8_t *)v525.val[1].i8 = vand_s8((int8x8_t)__PAIR64__(v260, v259), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v525.val[1].u32[0];
        v273.i64[1] = v525.val[1].u32[1];
        v329 = vmlaq_f64(v302, vcvtq_f64_u64(v273), v328);
        HIDWORD(v303.f64[0]) = HIBYTE(v487);
        *(int8x8_t *)v525.val[1].i8 = vand_s8(*(int8x8_t *)&v303.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v525.val[1].u32[0];
        v273.i64[1] = v525.val[1].u32[1];
        LODWORD(v303.f64[0]) = BYTE6(v271);
        HIDWORD(v303.f64[0]) = HIBYTE(v271);
        v525.val[1] = (int8x16_t)vcvtq_f64_u64(v273);
        *(int8x8_t *)&v303.f64[0] = vand_s8(*(int8x8_t *)&v303.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v303.f64[0]);
        v273.i64[1] = HIDWORD(v303.f64[0]);
        v330 = vmlaq_f64(v327, vcvtq_f64_u64(v273), (float64x2_t)v525.val[1]);
        v525.val[1].i32[0] = BYTE4(v271);
        HIDWORD(v326.f64[0]) = BYTE5(v487);
        v525.val[1].i32[1] = BYTE5(v271);
        *(int8x8_t *)&v326.f64[0] = vand_s8(*(int8x8_t *)&v326.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v326.f64[0]);
        v273.i64[1] = HIDWORD(v326.f64[0]);
        v331 = vcvtq_f64_u64(v273);
        *(int8x8_t *)v525.val[1].i8 = vand_s8(*(int8x8_t *)v525.val[1].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v525.val[1].u32[0];
        v273.i64[1] = v525.val[1].u32[1];
        v332 = vmlaq_f64(v325, vcvtq_f64_u64(v273), v331);
        *(int8x8_t *)&v331.f64[0] = vand_s8((int8x8_t)__PAIR64__(v488, v489), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v331.f64[0]);
        v273.i64[1] = HIDWORD(v331.f64[0]);
        v333 = v273;
        *(int8x8_t *)&v328.f64[0] = vand_s8((int8x8_t)__PAIR64__(v270, v269), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v328.f64[0]);
        v273.i64[1] = HIDWORD(v328.f64[0]);
        v334 = vmlaq_f64(v329, vcvtq_f64_u64(v273), vcvtq_f64_u64(v333));
        *(int8x8_t *)v333.i8 = vand_s8((int8x8_t)__PAIR64__(v492, v493), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v333.u32[0];
        v273.i64[1] = v333.u32[1];
        v335 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v328.f64[0] = vand_s8((int8x8_t)__PAIR64__(v268, v267), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v328.f64[0]);
        v273.i64[1] = HIDWORD(v328.f64[0]);
        v526.val[1] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[1], vcvtq_f64_u64(v273), v335);
        LODWORD(v335.f64[0]) = BYTE2(v487);
        HIDWORD(v335.f64[0]) = BYTE3(v487);
        *(int8x8_t *)&v335.f64[0] = vand_s8(*(int8x8_t *)&v335.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v335.f64[0]);
        v273.i64[1] = HIDWORD(v335.f64[0]);
        LODWORD(v328.f64[0]) = BYTE2(v271);
        v336 = vcvtq_f64_u64(v273);
        HIDWORD(v328.f64[0]) = BYTE3(v271);
        *(int8x8_t *)&v328.f64[0] = vand_s8(*(int8x8_t *)&v328.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v328.f64[0]);
        v273.i64[1] = HIDWORD(v328.f64[0]);
        v337 = vmlaq_f64(v323, vcvtq_f64_u64(v273), v336);
        LODWORD(v328.f64[0]) = v487;
        HIDWORD(v328.f64[0]) = BYTE1(v487);
        v525.val[0].i32[0] = v271;
        v525.val[0].i32[1] = BYTE1(v271);
        v11 = v512;
        *(int8x8_t *)&v328.f64[0] = vand_s8(*(int8x8_t *)&v328.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v328.f64[0]);
        v273.i64[1] = HIDWORD(v328.f64[0]);
        v338 = vcvtq_f64_u64(v273);
        *(int8x8_t *)v525.val[0].i8 = vand_s8(*(int8x8_t *)v525.val[0].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v525.val[0].u32[0];
        v273.i64[1] = v525.val[0].u32[1];
        v526.val[2] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[2], vcvtq_f64_u64(v273), v338);
        *(int8x8_t *)&v338.f64[0] = vand_s8((int8x8_t)__PAIR64__(v494, v495), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v338.f64[0]);
        v273.i64[1] = HIDWORD(v338.f64[0]);
        v339 = vcvtq_f64_u64(v273);
        *(int8x8_t *)v525.val[0].i8 = vand_s8((int8x8_t)__PAIR64__(v266, v486), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v525.val[0].u32[0];
        v273.i64[1] = v525.val[0].u32[1];
        v526.val[3] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[3], vcvtq_f64_u64(v273), v339);
        *(int8x8_t *)&v336.f64[0] = vand_s8((int8x8_t)__PAIR64__(v496, v497), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v336.f64[0]);
        v273.i64[1] = HIDWORD(v336.f64[0]);
        v340 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v339.f64[0] = vand_s8((int8x8_t)__PAIR64__(v490, v491), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v339.f64[0]);
        v273.i64[1] = HIDWORD(v339.f64[0]);
        v341 = vmlaq_f64(v318, vcvtq_f64_u64(v273), v340);
        v340.f64[0] = v516
                    + v341.f64[0]
                    + v341.f64[1]
                    + *(double *)v526.val[3].i64
                    + *(double *)&v526.val[3].i64[1]
                    + *(double *)v526.val[1].i64
                    + *(double *)&v526.val[1].i64[1]
                    + v334.f64[0]
                    + v334.f64[1]
                    + *(double *)v526.val[2].i64
                    + *(double *)&v526.val[2].i64[1]
                    + v337.f64[0]
                    + v337.f64[1];
        v342 = v330.f64[1];
        v343 = v332.f64[1];
        v344 = v340.f64[0] + v332.f64[0] + v332.f64[1] + v330.f64[0];
        v234 = v344 + v330.f64[1];
        v229 = v514 - 16;
      }
      while (v514 != 16);
      v229 = v473;
      v228 = v474;
      if (v474 != v473)
      {
        v233 = v473;
        v348 = v473;
        v11 = v477;
        v12 = v478;
        v345 = v482;
        LODWORD(v18) = v483;
        v346 = a4;
        v14 = v484;
        v347 = v485;
        v214 = v475;
        v213 = (v485 - 4);
        v230 = v476;
        v231 = v480;
        if ((v474 & 8) != 0)
        {
LABEL_114:
          v349 = 4 * v233;
          v350 = v233 - v479;
          do
          {
            v517 = v234;
            v351 = &v11[v349];
            v352 = &v231[v349];
            v524 = vld4_s8(v351);
            v523 = vld4_s8(v352);
            v353.i32[0] = v524.val[0].u8[0];
            v354.i32[0] = v524.val[0].u8[2];
            v355.i32[0] = v524.val[0].u8[4];
            v356.i32[0] = v524.val[0].u8[6];
            v357.i32[0] = v523.val[0].u8[0];
            v358.i32[0] = v523.val[0].u8[2];
            v359.i32[0] = v523.val[0].u8[4];
            v360.i32[0] = v523.val[0].u8[6];
            v361.i32[0] = v524.val[1].u8[6];
            v362.i32[0] = v524.val[1].u8[4];
            v353.i32[1] = v524.val[0].u8[1];
            v363.i32[0] = v524.val[1].u8[2];
            v364.i32[0] = v524.val[1].u8[0];
            v354.i32[1] = v524.val[0].u8[3];
            v355.i32[1] = v524.val[0].u8[5];
            v356.i32[1] = v524.val[0].u8[7];
            v365.i32[0] = v523.val[1].u8[6];
            v366.i32[0] = v523.val[1].u8[4];
            v357.i32[1] = v523.val[0].u8[1];
            v358.i32[1] = v523.val[0].u8[3];
            v367.i32[0] = v523.val[1].u8[2];
            v368.i32[0] = v523.val[1].u8[0];
            v364.i32[1] = v524.val[1].u8[1];
            v368.i32[1] = v523.val[1].u8[1];
            v359.i32[1] = v523.val[0].u8[5];
            v360.i32[1] = v523.val[0].u8[7];
            v369.i32[0] = v524.val[2].u8[6];
            v370.i32[0] = v524.val[2].u8[4];
            v361.i32[1] = v524.val[1].u8[7];
            v362.i32[1] = v524.val[1].u8[5];
            v363.i32[1] = v524.val[1].u8[3];
            v371.i32[0] = v524.val[2].u8[2];
            v372.i32[0] = v524.val[2].u8[0];
            v365.i32[1] = v523.val[1].u8[7];
            v366.i32[1] = v523.val[1].u8[5];
            v373.i32[0] = v523.val[2].u8[6];
            v374.i32[0] = v523.val[2].u8[4];
            v367.i32[1] = v523.val[1].u8[3];
            v369.i32[1] = v524.val[2].u8[7];
            v370.i32[1] = v524.val[2].u8[5];
            result = (_BYTE *)v524.val[3].u8[1];
            v371.i32[1] = v524.val[2].u8[3];
            v375 = v524.val[3].u8[2];
            v376 = v524.val[3].u8[3];
            v372.i32[1] = v524.val[2].u8[1];
            LODWORD(v352) = v524.val[3].u8[4];
            v377 = v524.val[3].u8[5];
            v373.i32[1] = v523.val[2].u8[7];
            v378 = v524.val[3].u8[6];
            v379 = v524.val[3].u8[7];
            v374.i32[1] = v523.val[2].u8[5];
            v524.val[1].i32[0] = v523.val[2].u8[2];
            v524.val[2].i32[0] = v523.val[2].u8[0];
            v524.val[1].i32[1] = v523.val[2].u8[3];
            v524.val[2].i32[1] = v523.val[2].u8[1];
            v524.val[3].i32[0] = v524.val[3].u8[0];
            v524.val[3].i32[1] = (int)result;
            v524.val[0] = vand_s8(v364, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v524.val[0].u32[0];
            v380.i64[1] = v524.val[0].u32[1];
            *(float64x2_t *)v524.val[0].i8 = vcvtq_f64_u64(v380);
            v381 = vand_s8(v368, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v381.u32[0];
            v380.i64[1] = v381.u32[1];
            v382 = vcvtq_f64_u64(v380);
            v383 = vand_s8(v353, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v383.u32[0];
            v380.i64[1] = v383.u32[1];
            v384 = v380;
            v385 = vand_s8(v354, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v385.u32[0];
            v380.i64[1] = v385.u32[1];
            v386 = vcvtq_f64_u64(v380);
            v387 = vand_s8(v355, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v387.u32[0];
            v380.i64[1] = v387.u32[1];
            v388 = v380;
            v389 = vand_s8(v356, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v389.u32[0];
            v380.i64[1] = v389.u32[1];
            v390 = vcvtq_f64_u64(v380);
            v391 = vand_s8(v357, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v391.u32[0];
            v380.i64[1] = v391.u32[1];
            v392 = v380;
            v393 = vand_s8(v358, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v393.u32[0];
            v380.i64[1] = v393.u32[1];
            v394 = vcvtq_f64_u64(v380);
            v395 = vand_s8(v359, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v395.u32[0];
            v380.i64[1] = v395.u32[1];
            v396 = v380;
            v397 = vand_s8(v360, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v397.u32[0];
            v380.i64[1] = v397.u32[1];
            v398 = vcvtq_f64_u64(v380);
            v399 = vand_s8(v361, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v399.u32[0];
            v380.i64[1] = v399.u32[1];
            v400 = v380;
            v401 = vand_s8(v362, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v401.u32[0];
            v380.i64[1] = v401.u32[1];
            v402 = vcvtq_f64_u64(v380);
            v403 = vand_s8(v363, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v403.u32[0];
            v380.i64[1] = v403.u32[1];
            v404 = v380;
            v405 = vand_s8(v365, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v405.u32[0];
            v380.i64[1] = v405.u32[1];
            v406 = vcvtq_f64_u64(v380);
            v407 = vand_s8(v366, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v407.u32[0];
            v380.i64[1] = v407.u32[1];
            v408 = v380;
            v409 = vand_s8(v367, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v409.u32[0];
            v380.i64[1] = v409.u32[1];
            v410 = vcvtq_f64_u64(v380);
            v411 = vand_s8(v369, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v411.u32[0];
            v380.i64[1] = v411.u32[1];
            v412 = v380;
            v413 = vand_s8(v370, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v413.u32[0];
            v380.i64[1] = v413.u32[1];
            v414 = vcvtq_f64_u64(v380);
            v415 = vand_s8(v371, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v415.u32[0];
            v380.i64[1] = v415.u32[1];
            v416 = v380;
            v417 = vand_s8(v372, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v417.u32[0];
            v380.i64[1] = v417.u32[1];
            v418 = vcvtq_f64_u64(v380);
            v419 = vand_s8(v373, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v419.u32[0];
            v380.i64[1] = v419.u32[1];
            v420 = v380;
            v421 = vand_s8(v374, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v421.u32[0];
            v380.i64[1] = v421.u32[1];
            v422 = vcvtq_f64_u64(v380);
            v524.val[1] = vand_s8(v524.val[1], (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v524.val[1].u32[0];
            v380.i64[1] = v524.val[1].u32[1];
            *(uint64x2_t *)v524.val[1].i8 = v380;
            v524.val[2] = vand_s8(v524.val[2], (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v524.val[2].u32[0];
            v380.i64[1] = v524.val[2].u32[1];
            *(float64x2_t *)v524.val[2].i8 = vcvtq_f64_u64(v380);
            v524.val[3] = vand_s8(v524.val[3], (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v524.val[3].u32[0];
            v380.i64[1] = v524.val[3].u32[1];
            *(float64x2_t *)v524.val[3].i8 = vcvtq_f64_u64(v380);
            v423 = vand_s8((int8x8_t)__PAIR64__(v376, v375), (int8x8_t)0xFF000000FFLL);
            v424 = vmulq_f64(vcvtq_f64_u64(v404), v410);
            v380.i64[0] = v423.u32[0];
            v380.i64[1] = v423.u32[1];
            v425 = vcvtq_f64_u64(v380);
            v426 = vand_s8((int8x8_t)__PAIR64__(v377, v352), (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v426.u32[0];
            v380.i64[1] = v426.u32[1];
            v427 = vcvtq_f64_u64(v380);
            v428 = vmulq_f64(v402, vcvtq_f64_u64(v408));
            *(int8x8_t *)v408.i8 = vand_s8((int8x8_t)__PAIR64__(v379, v378), (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v408.u32[0];
            v380.i64[1] = v408.u32[1];
            v429 = vcvtq_f64_u64(v380);
            v430 = vmulq_f64(vcvtq_f64_u64(v400), v406);
            LODWORD(v406.f64[0]) = v523.val[3].u8[0];
            *(float64x2_t *)v524.val[0].i8 = vmlaq_f64(vmulq_f64(*(float64x2_t *)v524.val[0].i8, v382), vcvtq_f64_u64(v392), vcvtq_f64_u64(v384));
            HIDWORD(v406.f64[0]) = v523.val[3].u8[1];
            *(int8x8_t *)v392.i8 = vand_s8(*(int8x8_t *)&v406.f64[0], (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v392.u32[0];
            v380.i64[1] = v392.u32[1];
            v431 = vcvtq_f64_u64(v380);
            *(float64x2_t *)v524.val[0].i8 = vmlaq_f64(*(float64x2_t *)v524.val[0].i8, *(float64x2_t *)v524.val[2].i8, v418);
            v524.val[2].i32[0] = v523.val[3].u8[2];
            v432 = vmlaq_f64(v430, v398, v390);
            v524.val[2].i32[1] = v523.val[3].u8[3];
            *(int8x8_t *)&v390.f64[0] = vand_s8(v524.val[2], (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = LODWORD(v390.f64[0]);
            v380.i64[1] = HIDWORD(v390.f64[0]);
            v433 = vcvtq_f64_u64(v380);
            v434 = vmlaq_f64(v428, vcvtq_f64_u64(v396), vcvtq_f64_u64(v388));
            v388.i32[0] = v523.val[3].u8[4];
            v388.i32[1] = v523.val[3].u8[5];
            *(int8x8_t *)v388.i8 = vand_s8(*(int8x8_t *)v388.i8, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v388.u32[0];
            v380.i64[1] = v388.u32[1];
            v435 = vcvtq_f64_u64(v380);
            v436 = vmlaq_f64(vmlaq_f64(v424, v394, v386), vcvtq_f64_u64(*(uint64x2_t *)v524.val[1].i8), vcvtq_f64_u64(v416));
            v524.val[1].i32[0] = v523.val[3].u8[6];
            v524.val[1].i32[1] = v523.val[3].u8[7];
            v523.val[0] = vand_s8(v524.val[1], (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v523.val[0].u32[0];
            v380.i64[1] = v523.val[0].u32[1];
            v437 = vmlaq_f64(vmlaq_f64(v432, vcvtq_f64_u64(v420), vcvtq_f64_u64(v412)), vcvtq_f64_u64(v380), v429);
            v342 = v437.f64[1];
            v438 = vmlaq_f64(vmlaq_f64(v434, v422, v414), v435, v427);
            v439 = vmlaq_f64(v436, v433, v425);
            *(float64x2_t *)v524.val[0].i8 = vmlaq_f64(*(float64x2_t *)v524.val[0].i8, v431, *(float64x2_t *)v524.val[3].i8);
            v334.f64[0] = v517 + *(double *)v524.val;
            v343 = v438.f64[1];
            v344 = v517
                 + *(double *)v524.val
                 + v440
                 + v439.f64[0]
                 + v439.f64[1]
                 + v438.f64[0]
                 + v438.f64[1]
                 + v437.f64[0];
            v234 = v344 + v437.f64[1];
            v349 += 32;
            v350 += 8;
          }
          while (v350);
          v348 = v479;
          v345 = v482;
          v346 = a4;
          v347 = v485;
          if (v228 == v479)
            goto LABEL_119;
        }
        v441 = 4 * v348;
        do
        {
          LOBYTE(v344) = v11[v441];
          LOBYTE(v342) = v231[v441];
          LOBYTE(v343) = v11[v441 + 1];
          *(double *)&v442 = (double)*(unint64_t *)&v342;
          LOBYTE(v334.f64[0]) = v231[v441 + 1];
          v334.f64[0] = (double)*(unint64_t *)&v334.f64[0];
          *(double *)&v443 = (double)*(unint64_t *)&v343 * v334.f64[0];
          v444 = *(double *)&v443 + (double)*(unint64_t *)&v344 * *(double *)&v442;
          LOBYTE(v442) = v11[v441 + 2];
          *(double *)&v445 = (double)v442;
          LOBYTE(v443) = v231[v441 + 2];
          *(double *)&v446 = (double)v443;
          v447 = v444 + *(double *)&v445 * *(double *)&v446;
          LOBYTE(v445) = v11[v441 + 3];
          v342 = (double)v445;
          LOBYTE(v446) = v231[v441 + 3];
          v343 = (double)v446;
          v344 = v447 + v342 * v343;
          v234 = v234 + v344;
          v441 += 4;
        }
        while (v441 <= v213);
        goto LABEL_119;
      }
      v11 = v477;
      v12 = v478;
      v345 = v482;
      LODWORD(v18) = v483;
      v346 = a4;
      v14 = v484;
      v347 = v485;
      v214 = v475;
      v213 = (v485 - 4);
      v230 = v476;
      v231 = v480;
LABEL_119:
      if (v214 < v18)
      {
        v448 = 0;
        do
        {
          LOBYTE(v344) = v230[v448];
          LOBYTE(v342) = v231[v214 + v448];
          v344 = (double)*(unint64_t *)&v344;
          v342 = (double)*(unint64_t *)&v342;
          v234 = v234 + v344 * v342;
          ++v448;
        }
        while (v347 > (int)v214 + (int)v448);
      }
      *(double *)(v12 + 8 * v232++) = v234 * v346;
      v231 += v14;
      if (v232 >= v345)
      {
        v227 = v471 + 1;
        v12 += 8 * v472;
        v11 += v14;
        if (v471 + 1 == v345)
          return result;
        goto LABEL_105;
      }
    }
    v233 = 0;
    v234 = 0.0;
    goto LABEL_114;
  }
  v19 = *(_DWORD *)(a3 + 12);
  result = v518;
  if ((unint64_t)(8 * v18) >= 0x409)
    operator new[]();
  if ((int)v17 >= 1)
  {
    v20 = 0;
    v513 = &v518[8 * v485];
    v515 = 8 * v15;
    v21 = v485 & 0xFFFFFFF0;
    v22 = v485 & 0xFFFFFFF8;
    v23 = 32 * (v19 == (_DWORD)v18);
    v24 = v11 + 3;
    v25 = v485;
    v26 = v482;
    v27 = *(float64x2_t **)(a3 + 16);
    v28 = v11;
    do
    {
      v29 = &v11[v14 * v20];
      v30 = v11;
      v31 = &v11[v25 + v14 * v20];
      if (v19 >= (int)v25)
      {
        if ((int)v25 >= 1)
        {
          if (v25 >= 8)
          {
            v34 = 0;
            v38 = (unint64_t)v518 < v13 + 8 * v485 + v515 * v20 && v13 + v515 * v20 < (unint64_t)v513;
            if (v29 >= v513 || v518 >= v31)
            {
              v40 = v485 & 0xFFFFFFF0;
              if (!v38)
              {
                if (v25 >= 0x10)
                {
                  v82 = (float64x2_t *)v518;
                  v83 = v27;
                  v84 = (int8x16_t *)v28;
                  do
                  {
                    v85 = *v84++;
                    v86 = vextq_s8(v85, v85, 8uLL).u64[0];
                    v87.i32[0] = BYTE6(v86);
                    v87.i32[1] = HIBYTE(v86);
                    v88 = vand_s8(v87, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v88.u32[0];
                    v89.i64[1] = v88.u32[1];
                    v90 = vcvtq_f64_u64(v89);
                    v91.i32[0] = BYTE4(v86);
                    v91.i32[1] = BYTE5(v86);
                    v92 = vand_s8(v91, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v92.u32[0];
                    v89.i64[1] = v92.u32[1];
                    v93 = vcvtq_f64_u64(v89);
                    v94.i32[0] = BYTE2(v86);
                    v94.i32[1] = BYTE3(v86);
                    v95 = vand_s8(v94, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v95.u32[0];
                    v89.i64[1] = v95.u32[1];
                    v96 = vcvtq_f64_u64(v89);
                    v97.i32[0] = v86;
                    v97.i32[1] = BYTE1(v86);
                    v98 = vand_s8(v97, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v98.u32[0];
                    v89.i64[1] = v98.u32[1];
                    v99 = vcvtq_f64_u64(v89);
                    v97.i32[0] = v85.u8[6];
                    v97.i32[1] = v85.u8[7];
                    v100 = vand_s8(v97, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v100.u32[0];
                    v89.i64[1] = v100.u32[1];
                    v101 = vcvtq_f64_u64(v89);
                    v102.i32[0] = v85.u8[4];
                    v102.i32[1] = v85.u8[5];
                    v103 = vand_s8(v102, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v103.u32[0];
                    v89.i64[1] = v103.u32[1];
                    v104 = vcvtq_f64_u64(v89);
                    v105.i32[0] = v85.u8[2];
                    v105.i32[1] = v85.u8[3];
                    v106 = vand_s8(v105, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v106.u32[0];
                    v89.i64[1] = v106.u32[1];
                    v107 = vcvtq_f64_u64(v89);
                    v108.i32[0] = v85.u8[0];
                    v108.i32[1] = v85.u8[1];
                    v109 = vand_s8(v108, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v109.u32[0];
                    v89.i64[1] = v109.u32[1];
                    v110 = vsubq_f64(v99, v83[4]);
                    v111 = vsubq_f64(v96, v83[5]);
                    a7 = vsubq_f64(v93, v83[6]);
                    a5 = (__n128)vsubq_f64(v90, v83[7]);
                    a6 = vsubq_f64(vcvtq_f64_u64(v89), *v83);
                    v112 = vsubq_f64(v107, v83[1]);
                    a10 = vsubq_f64(v101, v83[3]);
                    v82[2] = vsubq_f64(v104, v83[2]);
                    v82[3] = a10;
                    *v82 = a6;
                    v82[1] = v112;
                    v82[6] = a7;
                    v82[7] = (float64x2_t)a5;
                    v82[4] = v110;
                    v82[5] = v111;
                    v83 += 8;
                    v82 += 8;
                    v40 -= 16;
                  }
                  while (v40);
                  v34 = v485 & 0xFFFFFFF0;
                  if (v34 == v25)
                    goto LABEL_55;
                  v41 = v485 & 0xFFFFFFF0;
                  if ((v25 & 8) == 0)
                    goto LABEL_54;
                }
                else
                {
                  v41 = 0;
                }
                v113 = 8 * v41;
                do
                {
                  v114 = *(_QWORD *)&v28[v41];
                  v115.i32[0] = BYTE6(v114);
                  v115.i32[1] = HIBYTE(v114);
                  v116 = vand_s8(v115, (int8x8_t)0xFF000000FFLL);
                  v117.i64[0] = v116.u32[0];
                  v117.i64[1] = v116.u32[1];
                  v118 = vcvtq_f64_u64(v117);
                  v119.i32[0] = BYTE4(v114);
                  v119.i32[1] = BYTE5(v114);
                  v120 = vand_s8(v119, (int8x8_t)0xFF000000FFLL);
                  v117.i64[0] = v120.u32[0];
                  v117.i64[1] = v120.u32[1];
                  v121 = vcvtq_f64_u64(v117);
                  v122.i32[0] = BYTE2(v114);
                  v122.i32[1] = BYTE3(v114);
                  v123 = vand_s8(v122, (int8x8_t)0xFF000000FFLL);
                  v117.i64[0] = v123.u32[0];
                  v117.i64[1] = v123.u32[1];
                  v124 = vcvtq_f64_u64(v117);
                  v125.i32[0] = v114;
                  v125.i32[1] = BYTE1(v114);
                  v126 = vand_s8(v125, (int8x8_t)0xFF000000FFLL);
                  v117.i64[0] = v126.u32[0];
                  v117.i64[1] = v126.u32[1];
                  a10 = *(float64x2_t *)((char *)v27 + v113 + 32);
                  a5 = (__n128)vsubq_f64(vcvtq_f64_u64(v117), *(float64x2_t *)((char *)v27 + v113));
                  v127 = vsubq_f64(v124, *(float64x2_t *)((char *)v27 + v113 + 16));
                  a7 = vsubq_f64(v121, a10);
                  a6 = vsubq_f64(v118, *(float64x2_t *)((char *)v27 + v113 + 48));
                  v128 = (__n128 *)&v518[v113];
                  v128[2] = (__n128)a7;
                  v128[3] = (__n128)a6;
                  *v128 = a5;
                  v128[1] = (__n128)v127;
                  v41 += 8;
                  v113 += 64;
                }
                while (v22 != v41);
                v34 = v485 & 0xFFFFFFF8;
                if (v22 == v25)
                  goto LABEL_55;
                goto LABEL_54;
              }
            }
          }
          else
          {
            v34 = 0;
          }
          do
          {
LABEL_54:
            a5.n128_u8[0] = v28[v34];
            a6.f64[0] = v27->f64[v34];
            a5.n128_f64[0] = (double)a5.n128_u64[0] - a6.f64[0];
            *(_QWORD *)&v518[8 * v34++] = a5.n128_u64[0];
          }
          while (v25 != v34);
        }
      }
      else if ((int)v18 >= 1)
      {
        v32 = *(uint64_t *)(v13 + 8 * v15 * v20);
        if (v18 >= 8)
        {
          if (v518 >= v31 || v29 >= v513)
          {
            if (v18 >= 0x10)
            {
              v42 = 0;
              a6 = (float64x2_t)vdupq_lane_s64(v32, 0);
              v43 = (float64x2_t *)v518;
              do
              {
                v44 = *(int8x16_t *)&v28[v42];
                v45.i32[0] = v44.u8[6];
                v45.i32[1] = v44.u8[7];
                v46 = vand_s8(v45, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v46.u32[0];
                v47.i64[1] = v46.u32[1];
                v48.i32[0] = v44.u8[4];
                v48.i32[1] = v44.u8[5];
                v49 = vcvtq_f64_u64(v47);
                v50 = vand_s8(v48, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v50.u32[0];
                v47.i64[1] = v50.u32[1];
                v51 = vcvtq_f64_u64(v47);
                v52.i32[0] = v44.u8[2];
                v52.i32[1] = v44.u8[3];
                v53 = vand_s8(v52, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v53.u32[0];
                v47.i64[1] = v53.u32[1];
                v54.i32[0] = v44.u8[0];
                v55 = vcvtq_f64_u64(v47);
                v54.i32[1] = v44.u8[1];
                v56 = vand_s8(v54, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v56.u32[0];
                v47.i64[1] = v56.u32[1];
                v57 = vcvtq_f64_u64(v47);
                v44.i64[0] = vextq_s8(v44, v44, 8uLL).u64[0];
                v58.i32[0] = v44.u8[6];
                v58.i32[1] = v44.u8[7];
                v59 = vand_s8(v58, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v59.u32[0];
                v47.i64[1] = v59.u32[1];
                v60 = vcvtq_f64_u64(v47);
                v61.i32[0] = v44.u8[4];
                v61.i32[1] = v44.u8[5];
                v62 = vand_s8(v61, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v62.u32[0];
                v47.i64[1] = v62.u32[1];
                v63 = vcvtq_f64_u64(v47);
                v64.i32[0] = v44.u8[2];
                v64.i32[1] = v44.u8[3];
                v65 = vand_s8(v64, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v65.u32[0];
                v47.i64[1] = v65.u32[1];
                v66 = vcvtq_f64_u64(v47);
                v67.i32[0] = v44.u8[0];
                v67.i32[1] = v44.u8[1];
                *(int8x8_t *)v44.i8 = vand_s8(v67, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v44.u32[0];
                v47.i64[1] = v44.u32[1];
                a10 = vsubq_f64(v55, a6);
                v43[2] = vsubq_f64(v51, a6);
                v43[3] = vsubq_f64(v49, a6);
                *v43 = vsubq_f64(v57, a6);
                v43[1] = a10;
                a7 = vsubq_f64(v60, a6);
                v43[6] = vsubq_f64(v63, a6);
                v43[7] = a7;
                v43[4] = vsubq_f64(vcvtq_f64_u64(v47), a6);
                v43[5] = vsubq_f64(v66, a6);
                v42 += 16;
                v43 += 8;
              }
              while (v21 != v42);
              if (v21 == v25)
                goto LABEL_55;
              v36 = v21;
              v33 = v21;
              if ((v25 & 8) == 0)
                goto LABEL_45;
            }
            else
            {
              v36 = 0;
            }
            a6 = (float64x2_t)vdupq_lane_s64(v32, 0);
            v68 = (float64x2_t *)&v518[8 * v36];
            do
            {
              v69 = *(_QWORD *)&v28[v36];
              v70.i32[0] = BYTE6(v69);
              v70.i32[1] = HIBYTE(v69);
              v71 = vand_s8(v70, (int8x8_t)0xFF000000FFLL);
              v72.i64[0] = v71.u32[0];
              v72.i64[1] = v71.u32[1];
              v73 = vcvtq_f64_u64(v72);
              v74.i32[0] = BYTE4(v69);
              v74.i32[1] = BYTE5(v69);
              v75 = vand_s8(v74, (int8x8_t)0xFF000000FFLL);
              v72.i64[0] = v75.u32[0];
              v72.i64[1] = v75.u32[1];
              v76 = vcvtq_f64_u64(v72);
              v77.i32[0] = BYTE2(v69);
              v77.i32[1] = BYTE3(v69);
              v78 = vand_s8(v77, (int8x8_t)0xFF000000FFLL);
              v72.i64[0] = v78.u32[0];
              v72.i64[1] = v78.u32[1];
              v79 = vcvtq_f64_u64(v72);
              v80.i32[0] = v69;
              v80.i32[1] = BYTE1(v69);
              v81 = vand_s8(v80, (int8x8_t)0xFF000000FFLL);
              v72.i64[0] = v81.u32[0];
              v72.i64[1] = v81.u32[1];
              a7 = vsubq_f64(vcvtq_f64_u64(v72), a6);
              a10 = vsubq_f64(v79, a6);
              v68[2] = vsubq_f64(v76, a6);
              v68[3] = vsubq_f64(v73, a6);
              *v68 = a7;
              v68[1] = a10;
              v68 += 4;
              v36 += 8;
            }
            while (v22 != v36);
            v33 = v485 & 0xFFFFFFF8;
            if (v22 == v25)
              goto LABEL_55;
            goto LABEL_45;
          }
          v33 = 0;
        }
        else
        {
          v33 = 0;
        }
        do
        {
LABEL_45:
          LOBYTE(a6.f64[0]) = v28[v33];
          a6.f64[0] = (double)*(unint64_t *)&a6.f64[0] - *(double *)&v32;
          *(float64_t *)&v518[8 * v33++] = a6.f64[0];
        }
        while (v25 != v33);
      }
LABEL_55:
      v129 = v28;
      v130 = v24;
      v131 = v20;
      do
      {
        v132 = (float64x2_t *)(v13 + 8 * v15 * v131);
        if (v19 < (int)v18)
        {
          v521 = v132->f64[0];
          v522 = v521;
          *(double *)v520 = v521;
          *(double *)&v520[1] = v521;
          v132 = (float64x2_t *)v520;
        }
        if ((int)v25 >= 4)
        {
          v135 = 0;
          v134 = 0.0;
          v136 = (double *)&v519;
          do
          {
            LOBYTE(a6.f64[0]) = v130[v135 - 3];
            v137 = *(v136 - 2);
            LOBYTE(a10.f64[0]) = v130[v135 - 2];
            v138 = *(v136 - 1) * ((double)*(unint64_t *)&a10.f64[0] - v132->f64[1])
                 + v137 * ((double)*(unint64_t *)&a6.f64[0] - v132->f64[0]);
            LOBYTE(v137) = v130[v135 - 1];
            *(double *)&v139 = (double)*(unint64_t *)&v137 - v132[1].f64[0];
            v140 = *v136;
            a10.f64[0] = v136[1];
            v136 += 4;
            v141 = v138 + v140 * *(double *)&v139;
            LOBYTE(v139) = v130[v135];
            a7.f64[0] = (double)v139 - v132[1].f64[1];
            a6.f64[0] = v141 + a10.f64[0] * a7.f64[0];
            v134 = v134 + a6.f64[0];
            v135 += 4;
            v132 = (float64x2_t *)((char *)v132 + v23);
          }
          while (v135 <= (int)v485 - 4);
          v133 = ((v485 - 4) & 0xFFFFFFFC) + 4;
          if ((int)v133 >= (int)v18)
            goto LABEL_57;
        }
        else
        {
          v133 = 0;
          v134 = 0.0;
          if ((int)v18 <= 0)
            goto LABEL_57;
        }
        v142 = v133;
        v143 = v25 + ~v133;
        if (v143 < 7)
        {
          v144 = v133;
          f64 = (_QWORD *)v132->f64;
          goto LABEL_78;
        }
        v146 = v143 + 1;
        if (v143 >= 0xF)
        {
          v147 = v146 & 0x1FFFFFFF0;
          v148 = (float64x2_t *)&v518[8 * v142];
          v149 = (int8x16_t *)&v129[v142];
          v150 = v146 & 0x1FFFFFFF0;
          v151 = v132;
          do
          {
            v152 = *v149++;
            v153 = vextq_s8(v152, v152, 8uLL).u64[0];
            v154.i32[0] = BYTE6(v153);
            v155.i32[0] = BYTE4(v153);
            v154.i32[1] = HIBYTE(v153);
            v155.i32[1] = BYTE5(v153);
            v156 = vand_s8(v154, (int8x8_t)0xFF000000FFLL);
            v157.i32[0] = BYTE2(v153);
            v157.i32[1] = BYTE3(v153);
            v158 = vand_s8(v155, (int8x8_t)0xFF000000FFLL);
            v159.i32[0] = v153;
            v160 = BYTE1(v153);
            v161.i64[0] = v156.u32[0];
            v161.i64[1] = v156.u32[1];
            v162 = v161;
            v163 = vand_s8(v157, (int8x8_t)0xFF000000FFLL);
            v159.i32[1] = v160;
            v161.i64[0] = v158.u32[0];
            v161.i64[1] = v158.u32[1];
            v164 = v161;
            v157.i32[0] = v152.u8[6];
            v157.i32[1] = v152.u8[7];
            v161.i64[0] = v163.u32[0];
            v161.i64[1] = v163.u32[1];
            v165 = v161;
            v166 = vand_s8(v159, (int8x8_t)0xFF000000FFLL);
            v167 = vand_s8(v157, (int8x8_t)0xFF000000FFLL);
            v161.i64[0] = v167.u32[0];
            v161.i64[1] = v167.u32[1];
            v168 = v161;
            v161.i64[0] = v166.u32[0];
            v161.i64[1] = v166.u32[1];
            v169 = v161;
            v170.i32[0] = v152.u8[4];
            v170.i32[1] = v152.u8[5];
            v171 = vand_s8(v170, (int8x8_t)0xFF000000FFLL);
            v161.i64[0] = v171.u32[0];
            v161.i64[1] = v171.u32[1];
            v172.i32[0] = v152.u8[2];
            v173 = vcvtq_f64_u64(v161);
            v172.i32[1] = v152.u8[3];
            v174 = vand_s8(v172, (int8x8_t)0xFF000000FFLL);
            v161.i64[0] = v174.u32[0];
            v161.i64[1] = v174.u32[1];
            v175 = vcvtq_f64_u64(v161);
            v176.i32[0] = v152.u8[0];
            v176.i32[1] = v152.u8[1];
            v177 = vand_s8(v176, (int8x8_t)0xFF000000FFLL);
            v161.i64[0] = v177.u32[0];
            v161.i64[1] = v177.u32[1];
            v178 = vmulq_f64(v148[7], vsubq_f64(vcvtq_f64_u64(v162), v151[7]));
            v179 = vmulq_f64(v148[6], vsubq_f64(vcvtq_f64_u64(v164), v151[6]));
            v180 = vmulq_f64(v148[5], vsubq_f64(vcvtq_f64_u64(v165), v151[5]));
            v181 = vmulq_f64(v148[3], vsubq_f64(vcvtq_f64_u64(v168), v151[3]));
            a10 = vmulq_f64(v148[4], vsubq_f64(vcvtq_f64_u64(v169), v151[4]));
            v182 = vmulq_f64(v148[2], vsubq_f64(v173, v151[2]));
            a7 = vmulq_f64(v148[1], vsubq_f64(v175, v151[1]));
            a6 = vmulq_f64(*v148, vsubq_f64(vcvtq_f64_u64(v161), *v151));
            v183 = v134 + a6.f64[0] + a6.f64[1] + a7.f64[0];
            a7.f64[0] = a10.f64[1];
            a6.f64[0] = v178.f64[1];
            v134 = v183
                 + a7.f64[1]
                 + v182.f64[0]
                 + v182.f64[1]
                 + v181.f64[0]
                 + v181.f64[1]
                 + a10.f64[0]
                 + a10.f64[1]
                 + v180.f64[0]
                 + v180.f64[1]
                 + v179.f64[0]
                 + v179.f64[1]
                 + v178.f64[0]
                 + v178.f64[1];
            v151 += 8;
            v148 += 8;
            v150 -= 16;
          }
          while (v150);
          if (v146 == v147)
          {
            v26 = v482;
            LODWORD(v18) = v483;
            v14 = v484;
            v25 = v485;
            goto LABEL_57;
          }
          v26 = v482;
          LODWORD(v18) = v483;
          v14 = v484;
          v25 = v485;
          if ((v146 & 8) == 0)
          {
            f64 = (_QWORD *)&v132->f64[v147];
            v144 = v147 + v142;
LABEL_78:
            v207 = 0;
            do
            {
              a6.f64[0] = *(float64_t *)&v518[8 * v144 + 8 * v207];
              LOBYTE(a7.f64[0]) = v129[v144 + v207];
              a7.f64[0] = (double)*(unint64_t *)&a7.f64[0] - *(double *)&f64[v207];
              v134 = v134 + a6.f64[0] * a7.f64[0];
              ++v207;
            }
            while ((int)v18 > (int)v144 + (int)v207);
            goto LABEL_57;
          }
        }
        else
        {
          v147 = 0;
        }
        v144 = (v146 & 0x1FFFFFFF8) + v142;
        f64 = (_QWORD *)&v132->f64[v146 & 0x1FFFFFFF8];
        v184 = (float64x2_t *)((char *)v132 + 8 * v147);
        v185 = v147 - (v146 & 0x1FFFFFFF8);
        v186 = v147 + v142;
        v187 = (float64x2_t *)&v518[8 * v186];
        do
        {
          v188 = *(_QWORD *)&v129[v186];
          v189.i32[0] = BYTE6(v188);
          v189.i32[1] = HIBYTE(v188);
          v190 = vand_s8(v189, (int8x8_t)0xFF000000FFLL);
          v191.i64[0] = v190.u32[0];
          v191.i64[1] = v190.u32[1];
          v192.i32[0] = BYTE4(v188);
          v193 = vcvtq_f64_u64(v191);
          v192.i32[1] = BYTE5(v188);
          v194 = vand_s8(v192, (int8x8_t)0xFF000000FFLL);
          v191.i64[0] = v194.u32[0];
          v191.i64[1] = v194.u32[1];
          v195.i32[0] = BYTE2(v188);
          v195.i32[1] = BYTE3(v188);
          v196 = vcvtq_f64_u64(v191);
          v197 = vand_s8(v195, (int8x8_t)0xFF000000FFLL);
          v191.i64[0] = v197.u32[0];
          v191.i64[1] = v197.u32[1];
          v198 = vcvtq_f64_u64(v191);
          v199.i32[0] = v188;
          v199.i32[1] = BYTE1(v188);
          v200 = vand_s8(v199, (int8x8_t)0xFF000000FFLL);
          v191.i64[0] = v200.u32[0];
          v191.i64[1] = v200.u32[1];
          v202 = v184[2];
          v201 = v184[3];
          v204 = *v184;
          v203 = v184[1];
          v184 += 4;
          v205 = vmulq_f64(v187[3], vsubq_f64(v193, v201));
          v206 = vmulq_f64(v187[2], vsubq_f64(v196, v202));
          a7 = vmulq_f64(v187[1], vsubq_f64(v198, v203));
          a6 = vmulq_f64(*v187, vsubq_f64(vcvtq_f64_u64(v191), v204));
          a10.f64[0] = a6.f64[1];
          v134 = v134
               + a6.f64[0]
               + a6.f64[1]
               + a7.f64[0]
               + a7.f64[1]
               + v206.f64[0]
               + v206.f64[1]
               + v205.f64[0]
               + v205.f64[1];
          v187 += 4;
          v186 += 8;
          v185 += 8;
        }
        while (v185);
        LODWORD(v18) = v483;
        v14 = v484;
        if (v146 != (v146 & 0x1FFFFFFF8))
          goto LABEL_78;
LABEL_57:
        a5.n128_f64[0] = v134 * a4;
        *(_QWORD *)(v12 + 8 * v131++) = a5.n128_u64[0];
        v130 += v14;
        v129 += v14;
      }
      while (v131 != v26);
      v12 += 8 * v472;
      ++v20;
      v28 += v14;
      v27 = (float64x2_t *)((char *)v27 + v515);
      v24 += v14;
      v11 = v30;
      v21 = v485 & 0xFFFFFFF0;
    }
    while (v20 != v26);
  }
  return result;
}

_BYTE *sub_100238CB0(_QWORD *a1, uint64_t a2, uint64_t a3, double a4, double a5, __n128 a6, float64x2_t a7, __n128 a8)
{
  unsigned __int16 *v8;
  uint64_t v9;
  __n128 *v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  _BYTE *result;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  __n128 *v28;
  float *v29;
  uint64_t v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  float *v37;
  const float *v38;
  uint64_t v39;
  float32x4_t *v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  int32x4_t v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  unsigned __int16 *v51;
  uint64_t v52;
  unsigned __int16 *v53;
  float *v54;
  _DWORD *v55;
  uint64_t v56;
  unsigned __int16 *v57;
  float *v58;
  _DWORD *v59;
  uint64_t v60;
  uint16x4_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 *v64;
  float *v65;
  double v66;
  unsigned __int16 *v67;
  uint64_t v68;
  float *v69;
  float v70;
  float32x4_t *v71;
  float64x2_t v72;
  uint16x4_t *v73;
  uint64_t v74;
  float *v75;
  float64x2_t v76;
  float v77;
  float32x4_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int32x4_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  int32x4_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int16 *i;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  unsigned __int16 *v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint16x4_t *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int16 *v105;
  double v106;
  unsigned __int16 *v107;
  uint64_t v108;
  float *v109;
  float v110;
  float64x2_t v111;
  uint16x4_t *v112;
  uint64_t v113;
  float *v114;
  float64x2_t v115;
  float v116;
  uint32x4_t v117;
  uint64x2_t v118;
  float64x2_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int32x4_t *v126;
  uint64_t v127;
  _BYTE v129[4];
  _BYTE v130[1028];

  v8 = (unsigned __int16 *)a1[2];
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(__n128 **)(a3 + 16);
  v11 = a1[10];
  if (*(int *)(a3 + 8) <= 1)
    v12 = 0;
  else
    v12 = *(_QWORD *)(a3 + 80) >> 2;
  v13 = (int *)a1[8];
  v15 = *v13;
  v14 = v13[1];
  if (v10)
    v16 = *(_DWORD *)(a3 + 12) < (int)v14;
  else
    v16 = 0;
  v17 = !v16;
  v18 = 20 * v15;
  if (!v16)
    v18 = 4 * v15;
  result = v129;
  if (v18 >= 0x409)
    operator new[]();
  v20 = v11 >> 1;
  v21 = *(_QWORD *)(a2 + 80) >> 2;
  v22 = v13[1];
  v23 = v15;
  if ((v17 & 1) == 0)
  {
    v24 = (float32x4_t *)&v129[4 * v15];
    if ((int)v15 < 1)
      goto LABEL_36;
    v25 = v15 >= 8 && v12 == 1;
    if (v25
      && (v24 < (float32x4_t *)((char *)v10 + 4 * v15)
        ? (v26 = v10 >= (__n128 *)&v129[16 * v15 + 4 * v15])
        : (v26 = 1),
          v26))
    {
      v27 = v15 & 0x7FFFFFF8;
      v28 = v10 + 1;
      v29 = (float *)&v130[4 * v15 + 60];
      v30 = v15 & 0xFFFFFFF8;
      do
      {
        v31 = v28[-1];
        a8 = *v28;
        v32 = v31;
        a6 = v31;
        v33 = v31;
        v34 = *v28;
        v35 = *v28;
        v36 = *v28;
        v37 = v29 - 16;
        vst4q_f32(v37, *(float32x4x4_t *)(&a6 - 2));
        vst4q_f32(v29, *(float32x4x4_t *)a8.n128_u64);
        v28 += 2;
        v29 += 32;
        v30 -= 8;
      }
      while (v30);
      if (v27 == v15)
      {
LABEL_36:
        v12 = 4 * (v12 != 0);
        v10 = (__n128 *)&v129[4 * v15];
        if ((int)v14 < 1)
          return result;
        goto LABEL_37;
      }
    }
    else
    {
      v27 = 0;
    }
    v38 = (const float *)v10 + v12 * v27;
    v40 = (float32x4_t *)&v129[16 * v27 + 4 * v15];
    v41 = v15 - v27;
    do
    {
      v42 = vld1q_dup_f32(v38);
      v39 = 4 * v12;
      v38 = (const float *)((char *)v38 + v39);
      *v40++ = v42;
      --v41;
    }
    while (v41);
    goto LABEL_36;
  }
  if (!v10)
  {
    if ((int)v14 < 1)
      return result;
    v87 = 0;
    v88 = v14 - 4;
    v89 = a4 * 0.0;
    *(float *)&v89 = a4 * 0.0;
    v90 = vdupq_lane_s32(*(int32x2_t *)&v89, 0);
    v91 = 2 * v20;
    v92 = 4 * v21;
    for (i = v8; ; ++i)
    {
      if ((int)v23 < 1)
        goto LABEL_82;
      if ((_DWORD)v23 == 1)
        break;
      v95 = v23 & 0xFFFFFFFE;
      v96 = v130;
      v97 = i;
      do
      {
        a6.n128_u16[0] = *v97;
        a6.n128_f32[0] = (float)a6.n128_u32[0];
        LOWORD(a7.f64[0]) = v97[v20];
        *(float *)a7.f64 = (float)LODWORD(a7.f64[0]);
        *(v96 - 1) = a6.n128_u32[0];
        *v96 = LODWORD(a7.f64[0]);
        v97 += 2 * v20;
        v96 += 2;
        v95 -= 2;
      }
      while (v95);
      v94 = v23 & 0xFFFFFFFE;
      if (v94 != v23)
        goto LABEL_80;
LABEL_82:
      LODWORD(v101) = v87;
      v102 = (uint16x4_t *)i;
      v103 = v87;
      if (v87 <= v88)
      {
        do
        {
          a6 = (__n128)v90;
          if ((int)v23 >= 1)
          {
            v111 = 0uLL;
            v112 = v102;
            v113 = v23;
            v114 = (float *)v129;
            v115 = 0uLL;
            do
            {
              v116 = *v114++;
              v117 = vmovl_u16(*v112);
              v118.i64[0] = v117.u32[0];
              v118.i64[1] = v117.u32[1];
              v119 = vcvtq_f64_u64(v118);
              v118.i64[0] = v117.u32[2];
              v118.i64[1] = v117.u32[3];
              v115 = vmlaq_n_f64(v115, vcvtq_f64_u64(v118), v116);
              v111 = vmlaq_n_f64(v111, v119, v116);
              v112 = (uint16x4_t *)((char *)v112 + v91);
              --v113;
            }
            while (v113);
            a8.n128_f64[0] = a4;
            a7 = vmulq_n_f64(v115, a4);
            a6 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v111, a4)), a7);
          }
          *(__n128 *)(v9 + 4 * v103) = a6;
          v101 = v103 + 4;
          ++v102;
          v103 = v101;
        }
        while ((int)v88 >= (int)v101);
      }
      if ((int)v101 >= (int)v14)
        goto LABEL_73;
      v104 = v101;
      if ((int)v23 >= 1)
      {
        v105 = &v8[v101];
        do
        {
          v106 = 0.0;
          v107 = v105;
          v108 = v23;
          v109 = (float *)v129;
          do
          {
            v110 = *v109++;
            a8.n128_u16[0] = *v107;
            a8.n128_f64[0] = (double)a8.n128_u64[0];
            v106 = v106 + v110 * a8.n128_f64[0];
            v107 = (unsigned __int16 *)((char *)v107 + v91);
            --v108;
          }
          while (v108);
          WORD1(a7.f64[0]) = WORD1(a4);
          a6.n128_f32[0] = v106 * a4;
          *(_DWORD *)(v9 + 4 * v104++) = a6.n128_u32[0];
          ++v105;
        }
        while ((int)v14 > (int)v104);
        goto LABEL_73;
      }
      v120 = (v14 + ~(_DWORD)v101);
      if (v120 >= 7)
      {
        v122 = v120 + 1;
        v123 = (v120 + 1) & 0x1FFFFFFF8;
        v121 = v123 + v104;
        v124 = 4 * v104;
        v125 = v123;
        do
        {
          v126 = (int32x4_t *)(v9 + v124);
          *v126 = v90;
          v126[1] = v90;
          v124 += 32;
          v125 -= 8;
        }
        while (v125);
        if (v122 == v123)
          goto LABEL_73;
      }
      else
      {
        v121 = v101;
      }
      v127 = 4 * v121;
      do
      {
        *(_DWORD *)(v9 + v127) = LODWORD(v89);
        v127 += 4;
        LODWORD(v121) = v121 + 1;
      }
      while ((int)v14 > (int)v121);
LABEL_73:
      ++v87;
      v9 += v92;
      if (v87 == v14)
        return result;
    }
    v94 = 0;
LABEL_80:
    v98 = &v129[4 * v94];
    v99 = v91 * v94;
    v100 = v23 - v94;
    do
    {
      a6.n128_u16[0] = *(unsigned __int16 *)((char *)i + v99);
      a6.n128_f32[0] = (float)a6.n128_u32[0];
      *v98++ = a6.n128_u32[0];
      v99 += v91;
      --v100;
    }
    while (v100);
    goto LABEL_82;
  }
  v24 = 0;
  if ((int)v14 >= 1)
  {
LABEL_37:
    v43 = 0;
    v44 = v14 - 4;
    v45 = a4 * 0.0;
    *(float *)&v45 = a4 * 0.0;
    v46 = 4 * v12;
    v47 = vdupq_lane_s32(*(int32x2_t *)&v45, 0);
    v48 = 2 * v20;
    v49 = 4 * v21;
    v50 = (float *)v10;
    v51 = v8;
    do
    {
      if (v24)
      {
        v52 = v15;
        v53 = v51;
        v54 = (float *)v24;
        v55 = v129;
        if ((int)v15 >= 1)
        {
          do
          {
            a6.n128_u16[0] = *v53;
            a6.n128_f32[0] = (float)a6.n128_u32[0] - *v54;
            *v55++ = a6.n128_u32[0];
            v54 = (float *)((char *)v54 + v46);
            v53 = (unsigned __int16 *)((char *)v53 + v48);
            --v52;
          }
          while (v52);
        }
      }
      else if ((int)v15 >= 1)
      {
        v56 = v15;
        v57 = v51;
        v58 = v50;
        v59 = v129;
        do
        {
          a6.n128_u16[0] = *v57;
          a6.n128_f32[0] = (float)a6.n128_u32[0] - *v58;
          *v59++ = a6.n128_u32[0];
          v58 = (float *)((char *)v58 + v46);
          v57 = (unsigned __int16 *)((char *)v57 + v48);
          --v56;
        }
        while (v56);
      }
      LODWORD(v60) = v43;
      v61 = (uint16x4_t *)v51;
      v62 = v43;
      if (v43 <= v44)
      {
        do
        {
          a6 = (__n128)v47;
          if ((int)v15 >= 1)
          {
            v71 = (float32x4_t *)((char *)v10 + 4 * v62);
            if (v24)
              v71 = v24;
            v72 = 0uLL;
            v73 = v61;
            v74 = v15;
            v75 = (float *)v129;
            v76 = 0uLL;
            do
            {
              v77 = *v75++;
              v78 = vsubq_f32(vcvtq_f32_u32(vmovl_u16(*v73)), *v71);
              v76 = vmlaq_n_f64(v76, vcvt_hight_f64_f32(v78), v77);
              v72 = vmlaq_n_f64(v72, vcvtq_f64_f32(*(float32x2_t *)v78.f32), v77);
              v71 = (float32x4_t *)((char *)v71 + v46);
              v73 = (uint16x4_t *)((char *)v73 + v48);
              --v74;
            }
            while (v74);
            a8.n128_u16[1] = WORD1(a4);
            a6 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v72, a4)), vmulq_n_f64(v76, a4));
          }
          *(__n128 *)(v9 + 4 * v62) = a6;
          v60 = v62 + 4;
          ++v61;
          v62 = v60;
        }
        while ((int)v44 >= (int)v60);
      }
      if ((int)v60 >= (int)v14)
        goto LABEL_38;
      v63 = v60;
      if ((int)v15 >= 1)
      {
        v64 = &v8[v60];
        do
        {
          v65 = (float *)v10 + v63;
          if (v24)
            v65 = (float *)v24;
          v66 = 0.0;
          v67 = v64;
          v68 = v15;
          v69 = (float *)v129;
          do
          {
            v70 = *v69++;
            a8.n128_u16[0] = *v67;
            a8.n128_f64[0] = (float)((float)a8.n128_u32[0] - *v65);
            v66 = v66 + v70 * a8.n128_f64[0];
            v65 = (float *)((char *)v65 + v46);
            v67 = (unsigned __int16 *)((char *)v67 + v48);
            --v68;
          }
          while (v68);
          a6.n128_f32[0] = v66 * a4;
          *(_DWORD *)(v9 + 4 * v63++) = a6.n128_u32[0];
          ++v64;
        }
        while ((int)v14 > (int)v63);
        goto LABEL_38;
      }
      v79 = (v14 + ~(_DWORD)v60);
      if (v79 >= 7)
      {
        v81 = v79 + 1;
        v82 = (v79 + 1) & 0x1FFFFFFF8;
        v80 = v82 + v63;
        v83 = 4 * v63;
        v84 = v82;
        do
        {
          v85 = (int32x4_t *)(v9 + v83);
          *v85 = v47;
          v85[1] = v47;
          v83 += 32;
          v84 -= 8;
        }
        while (v84);
        if (v81 == v82)
          goto LABEL_38;
      }
      else
      {
        v80 = v60;
      }
      v86 = 4 * v80;
      do
      {
        *(_DWORD *)(v9 + v86) = LODWORD(v45);
        v86 += 4;
        LODWORD(v80) = v80 + 1;
      }
      while ((int)v14 > (int)v80);
LABEL_38:
      ++v43;
      v9 += v49;
      ++v51;
      ++v50;
    }
    while (v43 != v22);
  }
  return result;
}

void sub_100239360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a12 != v12)
  {
    if (a12)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100239390(unint64_t result, uint64_t a2, uint64_t a3, double a4, float32x4_t a5, float32x4_t a6, __n128 a7, double a8)
{
  double v8;
  const __int16 *v9;
  uint64_t v10;
  float32x4_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint16x4_t *v20;
  uint64_t v21;
  float32x4_t *v22;
  uint64_t v23;
  const __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t *v28;
  __n128 *v29;
  uint16x4_t *v30;
  uint64_t v31;
  uint16x8_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float *v37;
  float *v38;
  const __int16 *v39;
  uint64_t v40;
  unsigned int v41;
  float v42;
  float v43;
  unint64_t v44;
  __n128 *v45;
  uint16x8_t v46;
  uint16x8_t v47;
  float32x4_t v48;
  float32x4_t v49;
  const __int16 *v50;
  const __int16 *v51;
  uint64_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  int v55;
  double v56;
  uint64_t v57;
  const __int16 *v58;
  float *v59;
  float v60;
  double v61;
  double v62;
  float v63;
  float v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  uint64_t v71;
  uint64_t v72;
  uint16x8_t *v73;
  float32x4_t *v74;
  float32x4_t *v75;
  uint64_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float v102;
  uint64_t v103;
  _WORD *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int16 *v107;
  _WORD *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _WORD *v112;
  uint64_t v113;
  const __int16 *v114;
  unsigned __int16 *v115;
  _WORD *v116;
  unint64_t v117;
  unint64_t v118;
  double v119;
  _WORD *v120;
  _WORD *v121;
  unint64_t v122;
  unint64_t v123;
  double v124;
  unint64_t v125;
  unint64_t v126;
  double v127;
  unsigned __int16 *v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  float v132;
  unsigned __int16 *v133;
  unint64_t v134;
  uint64_t v135;
  const __int16 *v136;
  float v137;
  double v138;
  unint64_t v139;
  const __int16 *v140;
  const __int16 *v141;
  uint32x4_t v142;
  uint64x2_t v143;
  float64x2_t v144;
  uint64x2_t v145;
  uint32x4_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  uint32x4_t v150;
  float64x2_t v151;
  float64x2_t v152;
  uint32x4_t v153;
  uint64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  uint32x4_t v157;
  float64x2_t v158;
  float64x2_t v159;
  uint32x4_t v160;
  float64x2_t v161;
  uint32x4_t v162;
  float64x2_t v163;
  float64x2_t v164;
  uint64x2_t v165;
  uint32x4_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  uint32x4_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  uint32x4_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  uint32x4_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  uint32x4_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  uint32x4_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  double v194;
  float64x2_t v195;
  float64x2_t v196;
  double v197;
  float64x2_t v198;
  double v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  double v204;
  unint64_t v205;
  unint64_t v206;
  double v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  double v212;
  int32x4_t v213;
  unsigned __int16 *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  _WORD *v222;
  uint64_t v223;
  _WORD *v224;
  unint64_t v225;
  unint64_t v226;
  double v227;
  _WORD *v228;
  _WORD *v229;
  unint64_t v230;
  unint64_t v231;
  double v232;
  unint64_t v233;
  unint64_t v234;
  double v235;
  float v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  float32x4_t *v240;
  uint16x4_t *v241;
  _DWORD v242[2];
  uint64_t v243;
  _DWORD v244[250];
  float32x4_t v245;
  int16x8x4_t v246;
  int16x8x4_t v247;

  v8 = a4;
  v9 = *(const __int16 **)(result + 16);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(float32x4_t **)(a3 + 16);
  v12 = *(_QWORD *)(result + 80) >> 1;
  v239 = *(_QWORD *)(a2 + 80) >> 2;
  if (*(int *)(a3 + 8) <= 1)
    v13 = 0;
  else
    v13 = *(_QWORD *)(a3 + 80) >> 2;
  v14 = *(unsigned int **)(result + 64);
  v15 = *v14;
  v16 = (int)v14[1];
  v17 = v14[1];
  if (v11)
  {
    v18 = *(_DWORD *)(a3 + 12);
    result = (unint64_t)v242;
    if ((unint64_t)(4 * v16) >= 0x409)
      operator new[]();
    if ((int)v15 >= 1)
    {
      v19 = 0;
      v237 = v17 & 0xFFFFFFF0;
      v20 = (uint16x4_t *)(v9 + 8);
      v21 = 2 * v12;
      v22 = v11 + 2;
      v23 = (2 * v17) & 0x1FFFFFFE0;
      v24 = v9 + 2;
      v25 = *(_QWORD *)(a3 + 16);
      v238 = 4 * v13;
      do
      {
        if (v18 >= (int)v17)
        {
          if ((int)v17 >= 1)
          {
            v27 = 0;
            if (v17 < 0x10)
              goto LABEL_20;
            if ((unint64_t)((char *)v242 - ((char *)v11 + v238 * v19)) < 0x40)
              goto LABEL_20;
            v28 = v22;
            v29 = (__n128 *)v244;
            v30 = v20;
            v31 = v17 & 0xFFFFFFF0;
            do
            {
              v32 = *(uint16x8_t *)v30[-2].i8;
              v34 = v28[-2];
              v33 = v28[-1];
              v36 = *v28;
              v35 = v28[1];
              v28 += 4;
              a6 = vsubq_f32(vcvtq_f32_u32(vmovl_high_u16(v32)), v33);
              a5 = vsubq_f32(vcvtq_f32_u32(vmovl_u16(*v30)), v36);
              a7 = (__n128)vsubq_f32(vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v30->i8)), v35);
              v29[-2] = (__n128)vsubq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v32.i8)), v34);
              v29[-1] = (__n128)a6;
              *v29 = (__n128)a5;
              v29[1] = a7;
              v29 += 4;
              v30 += 4;
              v31 -= 16;
            }
            while (v31);
            v27 = v17 & 0xFFFFFFF0;
            if (v237 != v17)
            {
LABEL_20:
              v37 = (float *)&v242[v27];
              v38 = (float *)(v25 + 4 * v27);
              v39 = &v9[v27];
              v40 = v17 - v27;
              do
              {
                v41 = *(unsigned __int16 *)v39++;
                v42 = (float)v41;
                v43 = *v38++;
                a5.i16[1] = HIWORD(v43);
                *v37++ = v42 - v43;
                --v40;
              }
              while (v40);
            }
          }
          goto LABEL_27;
        }
        if ((int)v16 >= 1)
        {
          LODWORD(a4) = v11->i32[v13 * v19];
          if (v16 >= 0x10)
          {
            v44 = 0;
            a5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
            v45 = (__n128 *)v244;
            do
            {
              v46 = *(uint16x8_t *)&v9[v44 / 2];
              v47 = *(uint16x8_t *)&v9[v44 / 2 + 8];
              v48 = vcvtq_f32_u32(vmovl_high_u16(v46));
              v49 = vcvtq_f32_u32(vmovl_high_u16(v47));
              a6 = vsubq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v46.i8)), a5);
              a7 = (__n128)vsubq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v47.i8)), a5);
              v45[-2] = (__n128)a6;
              v45[-1] = (__n128)vsubq_f32(v48, a5);
              *v45 = a7;
              v45[1] = (__n128)vsubq_f32(v49, a5);
              v45 += 4;
              v44 += 32;
            }
            while (v23 != v44);
            v26 = v17 & 0xFFFFFFF0;
            if (v237 == v17)
              goto LABEL_27;
          }
          else
          {
            v26 = 0;
          }
          do
          {
            a5.i16[0] = v9[v26];
            a5.f32[0] = (float)a5.u32[0] - *(float *)&a4;
            v242[v26++] = a5.i32[0];
          }
          while (v17 != v26);
        }
LABEL_27:
        v240 = v22;
        v241 = v20;
        v50 = v9;
        v51 = v24;
        v52 = v19;
        do
        {
          v53 = (float32x4_t *)((char *)v11 + 4 * v13 * v52);
          if (v18 < (int)v16)
          {
            v54 = vld1q_dup_f32(v53->f32);
            v245 = v54;
            v53 = &v245;
          }
          if ((int)v17 >= 4)
          {
            v57 = 0;
            v56 = 0.0;
            v58 = v51;
            v59 = (float *)&v243;
            do
            {
              a7.n128_u16[0] = *(v58 - 2);
              v60 = v53->f32[0];
              LOWORD(v60) = *(v58 - 1);
              v61 = *(v59 - 1) * (float)((float)LODWORD(v60) - v53->f32[1]);
              v62 = v61 + *(v59 - 2) * (float)((float)a7.n128_u32[0] - v53->f32[0]);
              LOWORD(v61) = *v58;
              v63 = *v59;
              v64 = v59[1];
              v59 += 4;
              v65 = v63;
              v66 = v62 + v65 * (float)((float)LODWORD(v61) - v53->f32[2]);
              *(double *)a6.i64 = v64;
              LOWORD(v65) = v58[1];
              a7.n128_f64[0] = (float)((float)LODWORD(v65) - v53->f32[3]);
              *(double *)a5.i64 = v66 + v64 * a7.n128_f64[0];
              v57 += 4;
              v56 = v56 + *(double *)a5.i64;
              v53 += v18 == (_DWORD)v16;
              v58 += 4;
            }
            while (v57 <= (int)v17 - 4);
            v55 = ((v17 - 4) & 0xFFFFFFFC) + 4;
            if (v55 >= (int)v16)
              goto LABEL_28;
          }
          else
          {
            v55 = 0;
            v56 = 0.0;
            if ((int)v16 <= 0)
              goto LABEL_28;
          }
          v67 = v55;
          v68 = (v17 + ~v55);
          if (v68 < 0xF)
          {
            v69 = v67;
            v70 = (float *)v53;
            do
            {
LABEL_42:
              *(double *)a5.i64 = *(float *)&v242[v69];
              a6.i16[0] = v50[v69];
              v102 = *v70++;
              a7.n128_u16[1] = HIWORD(v102);
              *(double *)a6.i64 = (float)((float)a6.u32[0] - v102);
              v56 = v56 + *(double *)a5.i64 * *(double *)a6.i64;
              ++v69;
            }
            while ((int)v16 > (int)v69);
            goto LABEL_28;
          }
          v71 = v68 + 1;
          v72 = (v68 + 1) & 0x1FFFFFFF0;
          v70 = &v53->f32[v72];
          v69 = v72 + v67;
          v73 = (uint16x8_t *)&v50[v67];
          v74 = v53 + 2;
          v75 = (float32x4_t *)&v244[v67];
          v76 = v72;
          do
          {
            v78 = v75[-2];
            v77 = v75[-1];
            v80 = *v75;
            v79 = v75[1];
            v75 += 4;
            v81 = vcvtq_f64_f32(*(float32x2_t *)v78.f32);
            v82 = vcvtq_f64_f32(*(float32x2_t *)v77.f32);
            v83 = vcvtq_f64_f32(*(float32x2_t *)v80.f32);
            v84 = vcvtq_f64_f32(*(float32x2_t *)v79.f32);
            v85 = *v73;
            v86 = v73[1];
            v73 += 2;
            v87 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v85.i8));
            v88 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v86.i8));
            v89 = v74[-2];
            v90 = v74[-1];
            v91 = *v74;
            v92 = v74[1];
            v74 += 4;
            v93 = vsubq_f32(vcvtq_f32_u32(vmovl_high_u16(v85)), v90);
            v94 = vsubq_f32(v87, v89);
            v95 = vsubq_f32(vcvtq_f32_u32(vmovl_high_u16(v86)), v92);
            v96 = vsubq_f32(v88, v91);
            a5 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v77), vcvt_hight_f64_f32(v93));
            v97 = vmulq_f64(v82, vcvtq_f64_f32(*(float32x2_t *)v93.f32));
            a6 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v78), vcvt_hight_f64_f32(v94));
            v98 = vmulq_f64(v81, vcvtq_f64_f32(*(float32x2_t *)v94.f32));
            a7 = (__n128)vmulq_f64(vcvt_hight_f64_f32(v79), vcvt_hight_f64_f32(v95));
            v99 = vmulq_f64(v84, vcvtq_f64_f32(*(float32x2_t *)v95.f32));
            v100 = vmulq_f64(vcvt_hight_f64_f32(v80), vcvt_hight_f64_f32(v96));
            v101 = vmulq_f64(v83, vcvtq_f64_f32(*(float32x2_t *)v96.f32));
            v56 = v56
                + v98.f64[0]
                + v98.f64[1]
                + *(double *)a6.i64
                + *(double *)&a6.i64[1]
                + v97.f64[0]
                + v97.f64[1]
                + *(double *)a5.i64
                + *(double *)&a5.i64[1]
                + v101.f64[0]
                + v101.f64[1]
                + v100.f64[0]
                + v100.f64[1]
                + v99.f64[0]
                + v99.f64[1]
                + a7.n128_f64[0]
                + a7.n128_f64[1];
            v76 -= 16;
          }
          while (v76);
          if (v71 != v72)
            goto LABEL_42;
LABEL_28:
          a4 = v56 * v8;
          *(float *)&a4 = a4;
          *(_DWORD *)(v10 + 4 * v52++) = LODWORD(a4);
          v51 = (const __int16 *)((char *)v51 + v21);
          v50 = (const __int16 *)((char *)v50 + v21);
        }
        while (v52 != v15);
        ++v19;
        v10 += 4 * v239;
        v20 = (uint16x4_t *)((char *)v241 + v21);
        v23 = (2 * v17) & 0x1FFFFFFE0;
        v22 = (float32x4_t *)((char *)v240 + v238);
        v25 += v238;
        v9 = (const __int16 *)((char *)v9 + v21);
        v24 = (const __int16 *)((char *)v24 + v21);
      }
      while (v19 != v15);
    }
  }
  else if ((int)v15 >= 1)
  {
    if ((int)v16 >= 4)
    {
      v109 = (v17 - 4);
      v110 = (v109 & 0xFFFFFFFC) + 4;
      if (v109 >= 0x1C)
      {
        v133 = 0;
        v134 = (v109 >> 2) + 1;
        v135 = 2 * v12;
        do
        {
          v136 = v9;
          result = (unint64_t)v133;
          do
          {
            v138 = 0.0;
            v139 = v134 & 0x7FFFFFF8;
            v140 = v136;
            v141 = v9;
            do
            {
              v246 = vld4q_s16(v141);
              v141 += 32;
              v142 = vmovl_u16(*(uint16x4_t *)v246.val[0].i8);
              v247 = vld4q_s16(v140);
              v140 += 32;
              v143.i64[0] = v142.u32[0];
              v143.i64[1] = v142.u32[1];
              v144 = vcvtq_f64_u64(v143);
              v143.i64[0] = v142.u32[2];
              v143.i64[1] = v142.u32[3];
              v145 = v143;
              v146 = vmovl_high_u16((uint16x8_t)v246.val[0]);
              v143.i64[0] = v146.u32[0];
              v143.i64[1] = v146.u32[1];
              v147 = vcvtq_f64_u64(v145);
              v148 = vcvtq_f64_u64(v143);
              v143.i64[0] = v146.u32[2];
              v143.i64[1] = v146.u32[3];
              v149 = vcvtq_f64_u64(v143);
              v150 = vmovl_u16(*(uint16x4_t *)v247.val[0].i8);
              v143.i64[0] = v150.u32[0];
              v143.i64[1] = v150.u32[1];
              v151 = vcvtq_f64_u64(v143);
              v143.i64[0] = v150.u32[2];
              v143.i64[1] = v150.u32[3];
              v152 = vcvtq_f64_u64(v143);
              v153 = vmovl_high_u16((uint16x8_t)v247.val[0]);
              v143.i64[0] = v153.u32[0];
              v143.i64[1] = v153.u32[1];
              v154 = v143;
              v143.i64[0] = v153.u32[2];
              v143.i64[1] = v153.u32[3];
              v155 = vcvtq_f64_u64(v154);
              v156 = vcvtq_f64_u64(v143);
              v157 = vmovl_high_u16((uint16x8_t)v246.val[1]);
              v143.i64[0] = v157.u32[2];
              v143.i64[1] = v157.u32[3];
              v158 = vcvtq_f64_u64(v143);
              v143.i64[0] = v157.u32[0];
              v143.i64[1] = v157.u32[1];
              v159 = vcvtq_f64_u64(v143);
              v160 = vmovl_u16(*(uint16x4_t *)v246.val[1].i8);
              v143.i64[0] = v160.u32[2];
              v143.i64[1] = v160.u32[3];
              v161 = vcvtq_f64_u64(v143);
              v143.i64[0] = v160.u32[0];
              v143.i64[1] = v160.u32[1];
              v162 = vmovl_high_u16((uint16x8_t)v247.val[1]);
              v163 = vcvtq_f64_u64(v143);
              v143.i64[0] = v162.u32[2];
              v143.i64[1] = v162.u32[3];
              v164 = vcvtq_f64_u64(v143);
              v143.i64[0] = v162.u32[0];
              v143.i64[1] = v162.u32[1];
              v165 = v143;
              v166 = vmovl_u16(*(uint16x4_t *)v247.val[1].i8);
              v143.i64[0] = v166.u32[2];
              v143.i64[1] = v166.u32[3];
              v167 = vcvtq_f64_u64(v165);
              v168 = vcvtq_f64_u64(v143);
              v143.i64[0] = v166.u32[0];
              v143.i64[1] = v166.u32[1];
              v169 = vmulq_f64(v163, vcvtq_f64_u64(v143));
              v170 = vmulq_f64(v159, v167);
              v171 = vmulq_f64(v158, v164);
              v172 = vmovl_high_u16((uint16x8_t)v246.val[2]);
              v143.i64[0] = v172.u32[2];
              v143.i64[1] = v172.u32[3];
              v173 = vcvtq_f64_u64(v143);
              v143.i64[0] = v172.u32[0];
              v143.i64[1] = v172.u32[1];
              v174 = vmlaq_f64(v171, v156, v149);
              v175 = vcvtq_f64_u64(v143);
              v176 = vmovl_u16(*(uint16x4_t *)v246.val[2].i8);
              v143.i64[0] = v176.u32[2];
              v143.i64[1] = v176.u32[3];
              v177 = vcvtq_f64_u64(v143);
              v143.i64[0] = v176.u32[0];
              v143.i64[1] = v176.u32[1];
              v178 = vmlaq_f64(v170, v155, v148);
              v179 = vcvtq_f64_u64(v143);
              v180 = vmovl_high_u16((uint16x8_t)v247.val[2]);
              v143.i64[0] = v180.u32[2];
              v143.i64[1] = v180.u32[3];
              v181 = vcvtq_f64_u64(v143);
              v143.i64[0] = v180.u32[0];
              v143.i64[1] = v180.u32[1];
              v182 = vmlaq_f64(v169, v151, v144);
              v183 = vcvtq_f64_u64(v143);
              v184 = vmovl_u16(*(uint16x4_t *)v247.val[2].i8);
              v143.i64[0] = v184.u32[2];
              v143.i64[1] = v184.u32[3];
              v185 = vcvtq_f64_u64(v143);
              v143.i64[0] = v184.u32[0];
              v143.i64[1] = v184.u32[1];
              v186 = vmlaq_f64(vmulq_f64(v161, v168), v152, v147);
              v187 = vcvtq_f64_u64(v143);
              v188 = vmovl_u16(*(uint16x4_t *)v246.val[3].i8);
              v143.i64[0] = v188.u32[0];
              v143.i64[1] = v188.u32[1];
              v189 = vcvtq_f64_u64(v143);
              v143.i64[0] = v188.u32[2];
              v143.i64[1] = v188.u32[3];
              v190 = vmlaq_f64(v182, v187, v179);
              v191 = vcvtq_f64_u64(v143);
              v246.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v246.val[3]);
              v143.i64[0] = v246.val[0].u32[0];
              v143.i64[1] = v246.val[0].u32[1];
              v246.val[1] = (int16x8_t)vcvtq_f64_u64(v143);
              v143.i64[0] = v246.val[0].u32[2];
              v143.i64[1] = v246.val[0].u32[3];
              v246.val[0] = (int16x8_t)vcvtq_f64_u64(v143);
              v246.val[2] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v247.val[3].i8);
              v143.i64[0] = v246.val[2].u32[0];
              v143.i64[1] = v246.val[2].u32[1];
              v192 = vcvtq_f64_u64(v143);
              v143.i64[0] = v246.val[2].u32[2];
              v143.i64[1] = v246.val[2].u32[3];
              v246.val[2] = (int16x8_t)vcvtq_f64_u64(v143);
              v247.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v247.val[3]);
              v143.i64[0] = v247.val[0].u32[0];
              v143.i64[1] = v247.val[0].u32[1];
              v247.val[1] = (int16x8_t)vcvtq_f64_u64(v143);
              v143.i64[0] = v247.val[0].u32[2];
              v143.i64[1] = v247.val[0].u32[3];
              v193 = vmlaq_f64(vmlaq_f64(v174, v181, v173), vcvtq_f64_u64(v143), (float64x2_t)v246.val[0]);
              v194 = v193.f64[1];
              v195 = vmlaq_f64(vmlaq_f64(v178, v183, v175), (float64x2_t)v247.val[1], (float64x2_t)v246.val[1]);
              v196 = vmlaq_f64(vmlaq_f64(v186, v185, v177), (float64x2_t)v246.val[2], v191);
              v197 = v196.f64[1];
              v198 = vmlaq_f64(v190, v192, v189);
              v199 = v195.f64[1];
              v138 = v138
                   + v198.f64[0]
                   + v198.f64[1]
                   + v196.f64[0]
                   + v196.f64[1]
                   + v195.f64[0]
                   + v195.f64[1]
                   + v193.f64[0]
                   + v193.f64[1];
              v139 -= 8;
            }
            while (v139);
            v200 = (((v134 >> 3) & 0xFFFFFFF) << 6) | 4;
            v201 = 4 * (v134 & 0x7FFFFFF8);
            if (v134 != (v134 & 0x7FFFFFF8))
            {
              do
              {
                LOWORD(v194) = *(const __int16 *)((char *)v9 + v200 - 4);
                LOWORD(v197) = *(const __int16 *)((char *)v136 + v200 - 4);
                *(double *)&v202 = (double)*(unint64_t *)&v197;
                LOWORD(v199) = *(const __int16 *)((char *)v9 + v200 - 2);
                LOWORD(v192.f64[0]) = *(const __int16 *)((char *)v136 + v200 - 2);
                v192.f64[0] = (double)*(unint64_t *)&v192.f64[0];
                *(double *)&v203 = (double)*(unint64_t *)&v199 * v192.f64[0];
                v204 = *(double *)&v203 + (double)*(unint64_t *)&v194 * *(double *)&v202;
                LOWORD(v202) = *(const __int16 *)((char *)v9 + v200);
                *(double *)&v205 = (double)v202;
                LOWORD(v203) = *(const __int16 *)((char *)v136 + v200);
                *(double *)&v206 = (double)v203;
                v207 = v204 + *(double *)&v205 * *(double *)&v206;
                LOWORD(v205) = *(const __int16 *)((char *)v9 + v200 + 2);
                LOWORD(v206) = *(const __int16 *)((char *)v136 + v200 + 2);
                v197 = (double)v205;
                v199 = (double)v206;
                v194 = v207 + v197 * v199;
                v138 = v138 + v194;
                v201 += 4;
                v200 += 8;
              }
              while (v201 <= v109);
            }
            v208 = (v109 & 0xFFFFFFFC) + 4;
            v209 = v110;
            if (v110 < v16)
            {
              do
              {
                LOWORD(v194) = v9[v209];
                LOWORD(v197) = v136[v209];
                v194 = (double)*(unint64_t *)&v194;
                v197 = (double)*(unint64_t *)&v197;
                v138 = v138 + v194 * v197;
                ++v209;
                ++v208;
              }
              while ((int)v17 > v208);
            }
            v137 = v138 * v8;
            *(float *)(v10 + 4 * result++) = v137;
            v136 = (const __int16 *)((char *)v136 + v135);
          }
          while (result < v15);
          v133 = (unsigned __int16 *)((char *)v133 + 1);
          v10 += 4 * v239;
          v9 = (const __int16 *)((char *)v9 + v135);
        }
        while (v133 != (unsigned __int16 *)v15);
      }
      else if (v110 >= v17)
      {
        v221 = 0;
        v222 = v9 + 2;
        v223 = 2 * v12;
        do
        {
          v224 = v222;
          v225 = v221;
          do
          {
            v226 = 0;
            v227 = 0.0;
            v228 = v222;
            v229 = v224;
            do
            {
              a5.i16[0] = *(v228 - 2);
              a6.i16[0] = *(v229 - 2);
              *(double *)&v230 = (double)a6.u64[0];
              a7.n128_u16[0] = *(v228 - 1);
              LOWORD(a8) = *(v229 - 1);
              a8 = (double)*(unint64_t *)&a8;
              *(double *)&v231 = (double)a7.n128_u64[0] * a8;
              v232 = *(double *)&v231 + (double)a5.u64[0] * *(double *)&v230;
              LOWORD(v230) = *v228;
              LOWORD(v231) = *v229;
              *(double *)&v233 = (double)v230;
              *(double *)&v234 = (double)v231;
              v235 = v232 + *(double *)&v233 * *(double *)&v234;
              LOWORD(v233) = v228[1];
              *(double *)a6.i64 = (double)v233;
              LOWORD(v234) = v229[1];
              a7.n128_f64[0] = (double)v234;
              *(double *)a5.i64 = v235 + *(double *)a6.i64 * a7.n128_f64[0];
              v227 = v227 + *(double *)a5.i64;
              v226 += 4;
              v229 += 4;
              v228 += 4;
            }
            while (v226 <= v109);
            v236 = v227 * v8;
            *(float *)(v10 + 4 * v225++) = v236;
            v224 = (_WORD *)((char *)v224 + v223);
          }
          while (v225 < v15);
          ++v221;
          v10 += 4 * v239;
          v222 = (_WORD *)((char *)v222 + v223);
        }
        while (v221 != v15);
      }
      else
      {
        v111 = 0;
        v112 = v9 + 2;
        v113 = 2 * v12;
        v114 = &v9[v110];
        do
        {
          v115 = (unsigned __int16 *)v114;
          v116 = v112;
          v117 = v111;
          do
          {
            v118 = 0;
            v119 = 0.0;
            v120 = v112;
            v121 = v116;
            do
            {
              a5.i16[0] = *(v120 - 2);
              a6.i16[0] = *(v121 - 2);
              *(double *)&v122 = (double)a6.u64[0];
              a7.n128_u16[0] = *(v120 - 1);
              LOWORD(a8) = *(v121 - 1);
              a8 = (double)*(unint64_t *)&a8;
              *(double *)&v123 = (double)a7.n128_u64[0] * a8;
              v124 = *(double *)&v123 + (double)a5.u64[0] * *(double *)&v122;
              LOWORD(v122) = *v120;
              LOWORD(v123) = *v121;
              *(double *)&v125 = (double)v122;
              *(double *)&v126 = (double)v123;
              v127 = v124 + *(double *)&v125 * *(double *)&v126;
              LOWORD(v125) = v120[1];
              *(double *)a6.i64 = (double)v125;
              LOWORD(v126) = v121[1];
              a7.n128_f64[0] = (double)v126;
              *(double *)a5.i64 = v127 + *(double *)a6.i64 * a7.n128_f64[0];
              v119 = v119 + *(double *)a5.i64;
              v118 += 4;
              v121 += 4;
              v120 += 4;
            }
            while (v118 <= v109);
            v128 = (unsigned __int16 *)v114;
            result = (unint64_t)v115;
            v129 = (v109 & 0xFFFFFFFC) + 4;
            do
            {
              v130 = *v128++;
              *(double *)a5.i64 = (double)v130;
              v131 = *(unsigned __int16 *)result;
              result += 2;
              *(double *)a6.i64 = (double)v131;
              v119 = v119 + *(double *)a5.i64 * (double)v131;
              ++v129;
            }
            while ((int)v16 > v129);
            v132 = v119 * v8;
            *(float *)(v10 + 4 * v117++) = v132;
            v116 = (_WORD *)((char *)v116 + v113);
            v115 = (unsigned __int16 *)((char *)v115 + v113);
          }
          while (v117 < v15);
          ++v111;
          v10 += 4 * v239;
          v112 = (_WORD *)((char *)v112 + v113);
          v114 = (const __int16 *)((char *)v114 + v113);
        }
        while (v111 != v15);
      }
    }
    else if ((int)v17 <= 0)
    {
      v210 = 0;
      v211 = 0;
      v212 = a4 * 0.0;
      *(float *)&v212 = v8 * 0.0;
      v213 = vdupq_lane_s32(*(int32x2_t *)&v212, 0);
      v214 = (unsigned __int16 *)(v10 + 16);
      v215 = 1;
      do
      {
        if (v215 <= v15)
          v216 = v15;
        else
          v216 = v215;
        v217 = v211 + 1;
        if (v211 + 1 > v15)
          v218 = v211 + 1;
        else
          v218 = v15;
        v219 = v218 - v211;
        if (v219 < 8)
          goto LABEL_99;
        v220 = (v216 + v210) & 0xFFFFFFFFFFFFFFF8;
        v211 += v219 & 0xFFFFFFFFFFFFFFF8;
        result = (unint64_t)v214;
        do
        {
          *(int32x4_t *)(result - 16) = v213;
          *(int32x4_t *)result = v213;
          result += 32;
          v220 -= 8;
        }
        while (v220);
        if (v219 != (v219 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_99:
          do
            *(_DWORD *)(v10 + 4 * v211++) = LODWORD(v212);
          while (v211 < v15);
        }
        ++v215;
        --v210;
        v214 += 2 * v239 + 2;
        v10 += 4 * v239;
        v211 = v217;
      }
      while (v217 != v15);
    }
    else
    {
      v103 = 0;
      v104 = v9 + 2;
      v105 = 2 * v12;
      do
      {
        v106 = 0;
        v107 = (unsigned __int16 *)&v9[v12 * v103];
        a5.i16[0] = *v107;
        *(double *)a5.i64 = (double)a5.u64[0];
        v108 = v104;
        do
        {
          a6.i16[0] = *(v108 - 2);
          *(double *)a6.i64 = *(double *)a5.i64 * (double)a6.u64[0] + 0.0;
          if ((_DWORD)v17 != 1)
          {
            a7.n128_u16[0] = v107[1];
            a7.n128_f64[0] = (double)a7.n128_u64[0];
            LOWORD(a8) = *(v108 - 1);
            a8 = (double)*(unint64_t *)&a8;
            *(double *)a6.i64 = *(double *)a6.i64 + a7.n128_f64[0] * a8;
            if ((_DWORD)v16 != 2)
            {
              a7.n128_u16[0] = v107[2];
              a7.n128_f64[0] = (double)a7.n128_u64[0];
              LOWORD(a8) = *v108;
              a8 = (double)*(unint64_t *)&a8;
              *(double *)a6.i64 = *(double *)a6.i64 + a7.n128_f64[0] * a8;
            }
          }
          *(double *)a6.i64 = *(double *)a6.i64 * a4;
          a6.f32[0] = *(double *)a6.i64;
          *(_DWORD *)(v10 + 4 * v106) = a6.i32[0];
          v108 = (_WORD *)((char *)v108 + v105);
          ++v106;
        }
        while (v103 + v106 < v15);
        ++v103;
        v104 = (_WORD *)((char *)v104 + v105);
        v10 += 4 * v239 + 4;
      }
      while (v103 != v15);
    }
  }
  return result;
}

_BYTE *sub_100239FA0(_QWORD *a1, uint64_t a2, uint64_t a3, double a4, double a5, __n128 a6, double a7, __n128 a8, double a9, double a10, __n128 a11)
{
  double v11;
  _WORD *v12;
  int64x2_t *v13;
  __n128 *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  _BYTE *result;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  __n128 *v30;
  double *v31;
  uint64_t v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  double *v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64x2_t v47;
  _WORD *v48;
  uint64_t v49;
  double *v50;
  unsigned __int16 *v51;
  uint64_t v52;
  unsigned __int16 *v53;
  double *v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned __int16 *v57;
  double *v58;
  _QWORD *v59;
  uint64_t v60;
  _WORD *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 *v64;
  double *v65;
  double v66;
  unsigned __int16 *v67;
  uint64_t v68;
  double *v69;
  double v70;
  uint64_t *v71;
  double v72;
  double v73;
  double *v74;
  double *v75;
  double v76;
  _WORD *v77;
  uint64_t v78;
  double *v79;
  double v80;
  double v81;
  double v82;
  double v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64x2_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _WORD *v98;
  _WORD *v99;
  uint64_t v100;
  uint64_t v101;
  double *v102;
  _WORD *v103;
  uint64_t v104;
  double *v105;
  uint64_t v106;
  _WORD *v107;
  uint64_t v108;
  double v109;
  _WORD *v110;
  uint64_t v111;
  double *v112;
  double v113;
  double v114;
  double v115;
  double v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  unsigned __int16 *v121;
  double v122;
  unsigned __int16 *v123;
  uint64_t v124;
  double *v125;
  double v126;
  uint64_t v127;
  double v128;
  int64x2_t v129;
  int v130;
  int64x2_t *v131;
  uint64_t v132;
  int v133;
  int i;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int64x2_t *v142;
  double *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int64x2_t *v151;
  uint64_t v152;
  _BYTE v153[8];
  _BYTE v154[1024];

  v11 = a4;
  v12 = (_WORD *)a1[2];
  v13 = *(int64x2_t **)(a2 + 16);
  v14 = *(__n128 **)(a3 + 16);
  v15 = a1[10];
  if (*(int *)(a3 + 8) <= 1)
    v16 = 0;
  else
    v16 = *(_QWORD *)(a3 + 80) >> 3;
  v17 = (unsigned int *)a1[8];
  v19 = *v17;
  v18 = v17[1];
  if (v14)
    v20 = *(_DWORD *)(a3 + 12) < (int)v18;
  else
    v20 = 0;
  v21 = !v20;
  v22 = 40 * v19;
  if (!v20)
    v22 = 8 * v19;
  result = v153;
  if (v22 >= 0x409)
    operator new[]();
  v24 = v15 >> 1;
  v25 = *(_QWORD *)(a2 + 80) >> 3;
  if ((v21 & 1) == 0)
  {
    v26 = (double *)&v153[8 * (int)v19];
    if ((int)v19 < 1)
      goto LABEL_36;
    v27 = v19 >= 6 && v16 == 1;
    if (v27 && (v26 < &v14->n128_f64[v19] ? (v28 = v14 >= (__n128 *)&v153[32 * v19 + 8 * (int)v19]) : (v28 = 1), v28))
    {
      v29 = v19 & 0x7FFFFFFC;
      v30 = v14 + 1;
      v31 = (double *)&v154[8 * (int)v19 + 56];
      v32 = v19 & 0xFFFFFFFC;
      do
      {
        v33 = v30[-1];
        a8 = *v30;
        v34 = v33;
        a6 = v33;
        v35 = v33;
        v36 = *v30;
        v37 = *v30;
        a11 = *v30;
        v38 = v31 - 8;
        vst4q_f64(v38, *(float64x2x4_t *)(&a6 - 2));
        vst4q_f64(v31, *(float64x2x4_t *)a8.n128_u64);
        v30 += 2;
        v31 += 16;
        v32 -= 4;
      }
      while (v32);
      if (v29 == v19)
      {
LABEL_36:
        v16 = 4 * (v16 != 0);
        v14 = (__n128 *)&v153[8 * (int)v19];
        if ((int)v18 < 1)
          return result;
        goto LABEL_37;
      }
    }
    else
    {
      v29 = 0;
    }
    v39 = &v14->n128_u64[v16 * v29];
    v40 = v19 - v29;
    v41 = (unint64_t *)&v153[32 * v29 + 16 + 8 * (int)v19];
    do
    {
      v42 = *v39;
      *v41 = *v39;
      v41[1] = v42;
      *(v41 - 2) = v42;
      *(v41 - 1) = v42;
      v39 += v16;
      v41 += 4;
      --v40;
    }
    while (v40);
    goto LABEL_36;
  }
  if (!v14)
  {
    if ((int)v18 < 1)
      return result;
    v95 = (int)v18 - 4;
    if ((int)v19 > 0)
    {
      v96 = 0;
      v97 = 2 * v24;
      v98 = v12 + 2;
      v99 = v12;
      while ((_DWORD)v19 != 1)
      {
        v101 = v19 & 0xFFFFFFFE;
        v102 = (double *)v154;
        v103 = v99;
        do
        {
          LOWORD(a4) = *v103;
          a4 = (double)*(unint64_t *)&a4;
          LOWORD(a5) = v103[v24];
          a5 = (double)*(unint64_t *)&a5;
          *(v102 - 1) = a4;
          *v102 = a5;
          v103 += 2 * v24;
          v102 += 2;
          v101 -= 2;
        }
        while (v101);
        v100 = v19 & 0xFFFFFFFE;
        if (v100 != v19)
          goto LABEL_80;
LABEL_82:
        v107 = v98;
        v108 = v96;
        if (v96 <= v95)
        {
          do
          {
            v109 = 0.0;
            v110 = v107;
            v111 = v19;
            v112 = (double *)v153;
            v113 = 0.0;
            v114 = 0.0;
            v115 = 0.0;
            do
            {
              v116 = *v112++;
              LOWORD(a9) = *(v110 - 2);
              *(double *)&v117 = (double)*(unint64_t *)&a9;
              v115 = v115 + v116 * *(double *)&v117;
              LOWORD(v117) = *(v110 - 1);
              *(double *)&v118 = (double)v117;
              v114 = v114 + v116 * *(double *)&v118;
              LOWORD(v118) = *v110;
              *(double *)&v119 = (double)v118;
              v113 = v113 + v116 * *(double *)&v119;
              LOWORD(v119) = v110[1];
              a9 = (double)v119;
              v109 = v109 + v116 * a9;
              v110 = (_WORD *)((char *)v110 + v97);
              --v111;
            }
            while (v111);
            v120 = &v13->i64[v108];
            a6.n128_f64[0] = v114 * v11;
            *(double *)v120 = v115 * v11;
            v120[1] = a6.n128_u64[0];
            a5 = v113 * v11;
            a4 = v109 * v11;
            *((double *)v120 + 2) = a5;
            *((double *)v120 + 3) = a4;
            v108 += 4;
            v107 += 4;
          }
          while ((int)v95 >= (int)v108);
          v108 = v108;
          if ((int)v108 >= (int)v18)
            goto LABEL_74;
LABEL_89:
          v121 = &v12[v108];
          do
          {
            v122 = 0.0;
            v123 = v121;
            v124 = v19;
            v125 = (double *)v153;
            do
            {
              v126 = *v125++;
              a5 = v126;
              a6.n128_u16[0] = *v123;
              a6.n128_f64[0] = (double)a6.n128_u64[0];
              v122 = v122 + v126 * a6.n128_f64[0];
              v123 = (unsigned __int16 *)((char *)v123 + v97);
              --v124;
            }
            while (v124);
            a4 = v122 * v11;
            *(double *)&v13->i64[v108++] = a4;
            ++v121;
          }
          while ((int)v18 > (int)v108);
          goto LABEL_74;
        }
        v108 = v96;
        if ((int)v96 < (int)v18)
          goto LABEL_89;
LABEL_74:
        ++v96;
        v13 = (int64x2_t *)((char *)v13 + 8 * v25);
        ++v99;
        ++v98;
        if (v96 == v18)
          return result;
      }
      v100 = 0;
LABEL_80:
      v104 = v97 * v100;
      v105 = (double *)&v153[8 * v100];
      v106 = v19 - v100;
      do
      {
        LOWORD(a4) = *(_WORD *)((char *)v99 + v104);
        a4 = (double)*(unint64_t *)&a4;
        *v105++ = a4;
        v104 += v97;
        --v106;
      }
      while (v106);
      goto LABEL_82;
    }
    v127 = 0;
    v128 = a4 * 0.0;
    v129 = vdupq_lane_s64(COERCE__INT64(v11 * 0.0), 0);
    v130 = v18 - 3;
    v131 = v13 + 4;
    v132 = 8 * v25;
    v133 = 4;
    for (i = -1; ; --i)
    {
      if (v133 <= v130)
        v135 = v18 - 3;
      else
        v135 = v133;
      v136 = v127 + 4;
      if ((int)v127 + 4 <= v130)
        v136 = v18 - 3;
      if (v127 <= v95)
      {
        v138 = v136 + ~(_DWORD)v127;
        v139 = v127;
        if (v138 < 0xC)
          goto LABEL_107;
        v140 = (((v135 + i) >> 2) + 1) & 0x7FFFFFFC;
        v141 = (v138 >> 2) + 1;
        v139 = v127 + 4 * (v141 & 0x7FFFFFFC);
        v137 = v127;
        v142 = v131;
        do
        {
          v142[-4] = v129;
          v142[-3] = v129;
          v142[-2] = v129;
          v142[-1] = v129;
          *v142 = v129;
          v142[1] = v129;
          v142[2] = v129;
          v142[3] = v129;
          v142 += 8;
          v137 += 16;
          v140 -= 4;
        }
        while (v140);
        if ((v141 & 0x7FFFFFFC) != v141)
        {
LABEL_107:
          v143 = (double *)&v13->i64[v139];
          v137 = v139;
          do
          {
            *v143 = v128;
            v143[1] = v128;
            v143[2] = v128;
            v143[3] = v128;
            v137 += 4;
            v143 += 4;
          }
          while ((int)v95 >= v137);
        }
      }
      else
      {
        v137 = v127;
      }
      if (v137 >= (int)v18)
        goto LABEL_95;
      v144 = v137;
      v145 = (v18 + ~v137);
      if (v145 >= 3)
      {
        v147 = v145 + 1;
        v148 = (v145 + 1) & 0x1FFFFFFFCLL;
        v146 = v148 + v144;
        v149 = 8 * v144;
        v150 = v148;
        do
        {
          v151 = (int64x2_t *)((char *)v13 + v149);
          *v151 = v129;
          v151[1] = v129;
          v149 += 32;
          v150 -= 4;
        }
        while (v150);
        if (v147 == v148)
          goto LABEL_95;
      }
      else
      {
        v146 = v144;
      }
      v152 = v146;
      do
      {
        *(double *)&v13->i64[v152++] = v128;
        LODWORD(v146) = v146 + 1;
      }
      while ((int)v18 > (int)v146);
LABEL_95:
      ++v127;
      v131 = (int64x2_t *)((char *)v131 + v132 + 8);
      ++v133;
      v13 = (int64x2_t *)((char *)v13 + v132);
      if (v127 == v18)
        return result;
    }
  }
  v26 = 0;
  if ((int)v18 >= 1)
  {
LABEL_37:
    v43 = 0;
    v44 = (int)v18 - 4;
    v45 = 8 * v16;
    v46 = 2 * v24;
    v47 = vdupq_lane_s64(COERCE__INT64(v11 * 0.0), 0);
    v48 = v12 + 2;
    v49 = 8 * v25;
    v50 = (double *)v14;
    v51 = v12;
    do
    {
      if (v26)
      {
        v52 = v19;
        v53 = v51;
        v54 = v26;
        v55 = v153;
        if ((int)v19 >= 1)
        {
          do
          {
            a6.n128_u16[0] = *v53;
            a6.n128_f64[0] = (double)a6.n128_u64[0] - *v54;
            *v55++ = a6.n128_u64[0];
            v54 = (double *)((char *)v54 + v45);
            v53 = (unsigned __int16 *)((char *)v53 + v46);
            --v52;
          }
          while (v52);
        }
      }
      else if ((int)v19 >= 1)
      {
        v56 = v19;
        v57 = v51;
        v58 = v50;
        v59 = v153;
        do
        {
          a6.n128_u16[0] = *v57;
          a6.n128_f64[0] = (double)a6.n128_u64[0] - *v58;
          *v59++ = a6.n128_u64[0];
          v58 = (double *)((char *)v58 + v45);
          v57 = (unsigned __int16 *)((char *)v57 + v46);
          --v56;
        }
        while (v56);
      }
      LODWORD(v60) = v43;
      v61 = v48;
      v62 = v43;
      if (v43 <= v44)
      {
        do
        {
          a6.n128_f64[0] = v11 * 0.0;
          v72 = v11 * 0.0;
          a8.n128_f64[0] = v11 * 0.0;
          v73 = v11 * 0.0;
          if ((int)v19 >= 1)
          {
            v74 = &v14->n128_f64[v62];
            if (v26)
              v74 = v26;
            v75 = v74 + 2;
            v76 = 0.0;
            v77 = v61;
            v78 = v19;
            v79 = (double *)v153;
            v80 = 0.0;
            v81 = 0.0;
            v82 = 0.0;
            do
            {
              v83 = *v79++;
              a11.n128_u16[0] = *(v77 - 2);
              *(double *)&v84 = (double)a11.n128_u64[0] - *(v75 - 2);
              v82 = v82 + v83 * *(double *)&v84;
              LOWORD(v84) = *(v77 - 1);
              *(double *)&v85 = (double)v84 - *(v75 - 1);
              v81 = v81 + v83 * *(double *)&v85;
              LOWORD(v85) = *v77;
              *(double *)&v86 = (double)v85 - *v75;
              v80 = v80 + v83 * *(double *)&v86;
              LOWORD(v86) = v77[1];
              a11.n128_f64[0] = (double)v86 - v75[1];
              v76 = v76 + v83 * a11.n128_f64[0];
              v77 = (_WORD *)((char *)v77 + v46);
              v75 = (double *)((char *)v75 + v45);
              --v78;
            }
            while (v78);
            v73 = v82 * v11;
            a8.n128_f64[0] = v81 * v11;
            v72 = v80 * v11;
            a6.n128_f64[0] = v76 * v11;
          }
          v71 = &v13->i64[v62];
          *(double *)v71 = v73;
          v71[1] = a8.n128_u64[0];
          *((double *)v71 + 2) = v72;
          v71[3] = a6.n128_u64[0];
          v60 = v62 + 4;
          v61 += 4;
          v62 = v60;
        }
        while ((int)v44 >= (int)v60);
      }
      if ((int)v60 >= (int)v18)
        goto LABEL_38;
      v63 = v60;
      if ((int)v19 >= 1)
      {
        v64 = &v12[v60];
        do
        {
          v65 = &v14->n128_f64[v63];
          if (v26)
            v65 = v26;
          v66 = 0.0;
          v67 = v64;
          v68 = v19;
          v69 = (double *)v153;
          do
          {
            v70 = *v69++;
            a8.n128_u16[0] = *v67;
            a8.n128_f64[0] = (double)a8.n128_u64[0] - *v65;
            v66 = v66 + v70 * a8.n128_f64[0];
            v65 = (double *)((char *)v65 + v45);
            v67 = (unsigned __int16 *)((char *)v67 + v46);
            --v68;
          }
          while (v68);
          a6.n128_f64[0] = v66 * v11;
          v13->i64[v63++] = a6.n128_u64[0];
          ++v64;
        }
        while ((int)v18 > (int)v63);
        goto LABEL_38;
      }
      v87 = (v18 + ~(_DWORD)v60);
      if (v87 >= 3)
      {
        v89 = v87 + 1;
        v90 = (v87 + 1) & 0x1FFFFFFFCLL;
        v88 = v90 + v63;
        v91 = 8 * v63;
        v92 = v90;
        do
        {
          v93 = (int64x2_t *)((char *)v13 + v91);
          *v93 = v47;
          v93[1] = v47;
          v91 += 32;
          v92 -= 4;
        }
        while (v92);
        if (v89 == v90)
          goto LABEL_38;
      }
      else
      {
        v88 = v60;
      }
      v94 = v88;
      do
      {
        *(double *)&v13->i64[v94++] = v11 * 0.0;
        LODWORD(v88) = v88 + 1;
      }
      while ((int)v18 > (int)v88);
LABEL_38:
      ++v43;
      v13 = (int64x2_t *)((char *)v13 + v49);
      ++v51;
      ++v50;
      ++v48;
    }
    while (v43 != v18);
  }
  return result;
}

void sub_10023A770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10 != v10)
  {
    if (a10)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10023A7A0(unint64_t result, uint64_t a2, uint64_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, double a7, double a8, float64x2_t a9)
{
  double v9;
  uint16x8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  float64x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t *v28;
  float64x2_t *v29;
  uint16x8_t *v30;
  uint16x8_t v31;
  uint32x4_t v32;
  uint64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  uint32x4_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  unint64_t v41;
  float64x2_t *v42;
  uint16x8_t v43;
  uint32x4_t v44;
  uint64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  uint32x4_t v48;
  float64x2_t v49;
  uint16x8_t *v50;
  __int16 *v51;
  uint64_t v52;
  float64x2_t *v53;
  int v54;
  double v55;
  uint64_t v56;
  __int16 *v57;
  double *v58;
  unint64_t v59;
  double v60;
  unint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  float64x2_t *v70;
  uint16x8_t *v71;
  uint64_t v72;
  uint16x8_t v73;
  uint32x4_t v74;
  uint64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  double v85;
  uint64_t v86;
  __int16 *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int16 *v90;
  __int16 *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  __int16 *v95;
  uint64_t v96;
  unsigned __int16 *v97;
  unsigned __int16 *v98;
  __int16 *v99;
  unint64_t v100;
  unint64_t v101;
  double v102;
  __int16 *v103;
  __int16 *v104;
  unint64_t v105;
  unint64_t v106;
  double v107;
  unint64_t v108;
  unint64_t v109;
  double v110;
  unsigned __int16 *v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned __int16 *v115;
  unint64_t v116;
  uint64_t v117;
  const __int16 *v118;
  double v119;
  unint64_t v120;
  const __int16 *v121;
  const __int16 *v122;
  uint32x4_t v123;
  uint64x2_t v124;
  float64x2_t v125;
  uint64x2_t v126;
  uint32x4_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  uint32x4_t v131;
  float64x2_t v132;
  float64x2_t v133;
  uint32x4_t v134;
  uint64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  uint32x4_t v138;
  float64x2_t v139;
  float64x2_t v140;
  uint32x4_t v141;
  float64x2_t v142;
  uint32x4_t v143;
  float64x2_t v144;
  float64x2_t v145;
  uint64x2_t v146;
  uint32x4_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  uint32x4_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  uint32x4_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  uint32x4_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  uint32x4_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  uint32x4_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  double v175;
  float64x2_t v176;
  float64x2_t v177;
  double v178;
  float64x2_t v179;
  double v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  double v185;
  unint64_t v186;
  unint64_t v187;
  double v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  double v193;
  int64x2_t v194;
  unsigned __int16 *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  __int16 *v203;
  uint64_t v204;
  __int16 *v205;
  unint64_t v206;
  unint64_t v207;
  double v208;
  __int16 *v209;
  __int16 *v210;
  unint64_t v211;
  unint64_t v212;
  double v213;
  unint64_t v214;
  unint64_t v215;
  double v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD v220[2];
  uint64_t v221;
  _QWORD v222[2];
  double v223;
  double v224;
  int16x8x4_t v225;
  int16x8x4_t v226;

  v9 = a4.f64[0];
  v10 = *(uint16x8_t **)(result + 16);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(result + 80) >> 1;
  v219 = *(_QWORD *)(a2 + 80) >> 3;
  if (*(int *)(a3 + 8) <= 1)
    v14 = 0;
  else
    v14 = *(_QWORD *)(a3 + 80) >> 3;
  v15 = *(unsigned int **)(result + 64);
  v16 = *v15;
  v17 = (int)v15[1];
  v18 = v15[1];
  if (v12)
  {
    v19 = *(_DWORD *)(a3 + 12);
    result = (unint64_t)v220;
    if ((unint64_t)(8 * v17) >= 0x409)
      operator new[]();
    if ((int)v16 >= 1)
    {
      v20 = 0;
      v217 = v18 & 0xFFFFFFF8;
      v218 = 8 * v14;
      v21 = 2 * v13;
      v22 = &v10->i16[2];
      v23 = *(float64x2_t **)(a3 + 16);
      do
      {
        if (v19 >= (int)v18)
        {
          if ((int)v18 >= 1)
          {
            v26 = 0;
            if (v18 < 8)
              goto LABEL_98;
            if ((unint64_t)v220 - v12 - v218 * v20 < 0x40)
              goto LABEL_98;
            v27 = v18 & 0xFFFFFFF8;
            v28 = (float64x2_t *)v220;
            v29 = v23;
            v30 = v10;
            do
            {
              v31 = *v30++;
              v32 = vmovl_high_u16(v31);
              v33.i64[0] = v32.u32[2];
              v33.i64[1] = v32.u32[3];
              v34 = vcvtq_f64_u64(v33);
              v33.i64[0] = v32.u32[0];
              v33.i64[1] = v32.u32[1];
              v35 = vcvtq_f64_u64(v33);
              v36 = vmovl_u16(*(uint16x4_t *)v31.i8);
              v33.i64[0] = v36.u32[2];
              v33.i64[1] = v36.u32[3];
              v37 = vcvtq_f64_u64(v33);
              v33.i64[0] = v36.u32[0];
              v33.i64[1] = v36.u32[1];
              a9 = v29[2];
              v38 = v29[3];
              v40 = *v29;
              v39 = v29[1];
              v29 += 4;
              a4 = vsubq_f64(vcvtq_f64_u64(v33), v40);
              a6 = vsubq_f64(v34, v38);
              v28[2] = vsubq_f64(v35, a9);
              v28[3] = a6;
              a5 = vsubq_f64(v37, v39);
              *v28 = a4;
              v28[1] = a5;
              v28 += 4;
              v27 -= 8;
            }
            while (v27);
            v26 = v18 & 0xFFFFFFF8;
            if (v217 != v18)
            {
LABEL_98:
              do
              {
                LOWORD(a4.f64[0]) = v10->i16[v26];
                a5.f64[0] = v23->f64[v26];
                a4.f64[0] = (double)*(unint64_t *)&a4.f64[0] - a5.f64[0];
                v220[v26++] = *(_QWORD *)&a4.f64[0];
              }
              while (v18 != v26);
            }
          }
          goto LABEL_26;
        }
        if ((int)v17 >= 1)
        {
          v24 = *(uint64_t *)(v12 + 8 * v14 * v20);
          if (v17 >= 8)
          {
            v41 = 0;
            a5 = (float64x2_t)vdupq_lane_s64(v24, 0);
            v42 = (float64x2_t *)v220;
            do
            {
              v43 = v10[v41 / 0x10];
              v44 = vmovl_high_u16(v43);
              v45.i64[0] = v44.u32[2];
              v45.i64[1] = v44.u32[3];
              v46 = vcvtq_f64_u64(v45);
              v45.i64[0] = v44.u32[0];
              v45.i64[1] = v44.u32[1];
              v47 = vcvtq_f64_u64(v45);
              v48 = vmovl_u16(*(uint16x4_t *)v43.i8);
              v45.i64[0] = v48.u32[2];
              v45.i64[1] = v48.u32[3];
              v49 = vcvtq_f64_u64(v45);
              v45.i64[0] = v48.u32[0];
              v45.i64[1] = v48.u32[1];
              a6 = vsubq_f64(vcvtq_f64_u64(v45), a5);
              a9 = vsubq_f64(v49, a5);
              v42[2] = vsubq_f64(v47, a5);
              v42[3] = vsubq_f64(v46, a5);
              *v42 = a6;
              v42[1] = a9;
              v42 += 4;
              v41 += 16;
            }
            while (((2 * v18) & 0x1FFFFFFF0) != v41);
            v25 = v18 & 0xFFFFFFF8;
            if (v217 == v18)
              goto LABEL_26;
          }
          else
          {
            v25 = 0;
          }
          do
          {
            LOWORD(a5.f64[0]) = v10->i16[v25];
            a5.f64[0] = (double)*(unint64_t *)&a5.f64[0] - *(double *)&v24;
            v220[v25++] = *(_QWORD *)&a5.f64[0];
          }
          while (v18 != v25);
        }
LABEL_26:
        v50 = v10;
        v51 = v22;
        v52 = v20;
        do
        {
          v53 = (float64x2_t *)(v12 + 8 * v14 * v52);
          if (v19 < (int)v17)
          {
            v223 = v53->f64[0];
            v224 = v223;
            *(double *)v222 = v223;
            *(double *)&v222[1] = v223;
            v53 = (float64x2_t *)v222;
          }
          if ((int)v18 >= 4)
          {
            v56 = 0;
            v55 = 0.0;
            v57 = v51;
            v58 = (double *)&v221;
            do
            {
              LOWORD(a5.f64[0]) = *(v57 - 2);
              LOWORD(a9.f64[0]) = *(v57 - 1);
              *(double *)&v59 = *(v58 - 1) * ((double)*(unint64_t *)&a9.f64[0] - v53->f64[1]);
              v60 = *(double *)&v59 + *(v58 - 2) * ((double)*(unint64_t *)&a5.f64[0] - v53->f64[0]);
              LOWORD(v59) = *v57;
              *(double *)&v61 = (double)v59 - v53[1].f64[0];
              v62 = *v58;
              a9.f64[0] = v58[1];
              v58 += 4;
              v63 = v60 + v62 * *(double *)&v61;
              LOWORD(v61) = v57[1];
              a6.f64[0] = (double)v61 - v53[1].f64[1];
              a5.f64[0] = v63 + a9.f64[0] * a6.f64[0];
              v56 += 4;
              v55 = v55 + a5.f64[0];
              v53 += 2 * (v19 == (_DWORD)v17);
              v57 += 4;
            }
            while (v56 <= (int)v18 - 4);
            v54 = ((v18 - 4) & 0xFFFFFFFC) + 4;
            if (v54 >= (int)v17)
              goto LABEL_27;
          }
          else
          {
            v54 = 0;
            v55 = 0.0;
            if ((int)v17 <= 0)
              goto LABEL_27;
          }
          v64 = v54;
          v65 = (v18 + ~v54);
          if (v65 < 7)
          {
            v66 = v64;
            v67 = (double *)v53;
            do
            {
LABEL_41:
              *(_QWORD *)&a5.f64[0] = v220[v66];
              LOWORD(a6.f64[0]) = v50->i16[v66];
              v85 = *v67++;
              a6.f64[0] = (double)*(unint64_t *)&a6.f64[0] - v85;
              v55 = v55 + a5.f64[0] * a6.f64[0];
              ++v66;
            }
            while ((int)v17 > (int)v66);
            goto LABEL_27;
          }
          v68 = v65 + 1;
          v69 = (v65 + 1) & 0x1FFFFFFF8;
          v67 = &v53->f64[v69];
          v66 = v69 + v64;
          v70 = (float64x2_t *)&v220[v64];
          v71 = (uint16x8_t *)((char *)v50 + 2 * v64);
          v72 = v69;
          do
          {
            v73 = *v71++;
            v74 = vmovl_high_u16(v73);
            v75.i64[0] = v74.u32[2];
            v75.i64[1] = v74.u32[3];
            v76 = vcvtq_f64_u64(v75);
            v75.i64[0] = v74.u32[0];
            v75.i64[1] = v74.u32[1];
            v77 = vcvtq_f64_u64(v75);
            a9 = (float64x2_t)vmovl_u16(*(uint16x4_t *)v73.i8);
            v75.i64[0] = LODWORD(a9.f64[1]);
            v75.i64[1] = HIDWORD(a9.f64[1]);
            v78 = vcvtq_f64_u64(v75);
            v75.i64[0] = LODWORD(a9.f64[0]);
            v75.i64[1] = HIDWORD(a9.f64[0]);
            v80 = v53[2];
            v79 = v53[3];
            v82 = *v53;
            v81 = v53[1];
            v53 += 4;
            v83 = vmulq_f64(v70[3], vsubq_f64(v76, v79));
            v84 = vmulq_f64(v70[2], vsubq_f64(v77, v80));
            a6 = vmulq_f64(v70[1], vsubq_f64(v78, v81));
            a5 = vmulq_f64(*v70, vsubq_f64(vcvtq_f64_u64(v75), v82));
            a9.f64[0] = a5.f64[1];
            v55 = v55
                + a5.f64[0]
                + a5.f64[1]
                + a6.f64[0]
                + a6.f64[1]
                + v84.f64[0]
                + v84.f64[1]
                + v83.f64[0]
                + v83.f64[1];
            v70 += 4;
            v72 -= 8;
          }
          while (v72);
          if (v68 != v69)
            goto LABEL_41;
LABEL_27:
          a4.f64[0] = v55 * v9;
          *(float64_t *)(v11 + 8 * v52++) = a4.f64[0];
          v51 = (__int16 *)((char *)v51 + v21);
          v50 = (uint16x8_t *)((char *)v50 + v21);
        }
        while (v52 != v16);
        v11 += 8 * v219;
        ++v20;
        v10 = (uint16x8_t *)((char *)v10 + v21);
        v23 = (float64x2_t *)((char *)v23 + v218);
        v22 = (__int16 *)((char *)v22 + v21);
      }
      while (v20 != v16);
    }
  }
  else if ((int)v16 >= 1)
  {
    if ((int)v17 >= 4)
    {
      v92 = (v18 - 4);
      v93 = (v92 & 0xFFFFFFFC) + 4;
      if (v92 >= 0x1C)
      {
        v115 = 0;
        v116 = (v92 >> 2) + 1;
        v117 = 2 * v13;
        do
        {
          v118 = (const __int16 *)v10;
          result = (unint64_t)v115;
          do
          {
            v119 = 0.0;
            v120 = v116 & 0x7FFFFFF8;
            v121 = v118;
            v122 = (const __int16 *)v10;
            do
            {
              v225 = vld4q_s16(v122);
              v122 += 32;
              v123 = vmovl_u16(*(uint16x4_t *)v225.val[0].i8);
              v226 = vld4q_s16(v121);
              v121 += 32;
              v124.i64[0] = v123.u32[0];
              v124.i64[1] = v123.u32[1];
              v125 = vcvtq_f64_u64(v124);
              v124.i64[0] = v123.u32[2];
              v124.i64[1] = v123.u32[3];
              v126 = v124;
              v127 = vmovl_high_u16((uint16x8_t)v225.val[0]);
              v124.i64[0] = v127.u32[0];
              v124.i64[1] = v127.u32[1];
              v128 = vcvtq_f64_u64(v126);
              v129 = vcvtq_f64_u64(v124);
              v124.i64[0] = v127.u32[2];
              v124.i64[1] = v127.u32[3];
              v130 = vcvtq_f64_u64(v124);
              v131 = vmovl_u16(*(uint16x4_t *)v226.val[0].i8);
              v124.i64[0] = v131.u32[0];
              v124.i64[1] = v131.u32[1];
              v132 = vcvtq_f64_u64(v124);
              v124.i64[0] = v131.u32[2];
              v124.i64[1] = v131.u32[3];
              v133 = vcvtq_f64_u64(v124);
              v134 = vmovl_high_u16((uint16x8_t)v226.val[0]);
              v124.i64[0] = v134.u32[0];
              v124.i64[1] = v134.u32[1];
              v135 = v124;
              v124.i64[0] = v134.u32[2];
              v124.i64[1] = v134.u32[3];
              v136 = vcvtq_f64_u64(v135);
              v137 = vcvtq_f64_u64(v124);
              v138 = vmovl_high_u16((uint16x8_t)v225.val[1]);
              v124.i64[0] = v138.u32[2];
              v124.i64[1] = v138.u32[3];
              v139 = vcvtq_f64_u64(v124);
              v124.i64[0] = v138.u32[0];
              v124.i64[1] = v138.u32[1];
              v140 = vcvtq_f64_u64(v124);
              v141 = vmovl_u16(*(uint16x4_t *)v225.val[1].i8);
              v124.i64[0] = v141.u32[2];
              v124.i64[1] = v141.u32[3];
              v142 = vcvtq_f64_u64(v124);
              v124.i64[0] = v141.u32[0];
              v124.i64[1] = v141.u32[1];
              v143 = vmovl_high_u16((uint16x8_t)v226.val[1]);
              v144 = vcvtq_f64_u64(v124);
              v124.i64[0] = v143.u32[2];
              v124.i64[1] = v143.u32[3];
              v145 = vcvtq_f64_u64(v124);
              v124.i64[0] = v143.u32[0];
              v124.i64[1] = v143.u32[1];
              v146 = v124;
              v147 = vmovl_u16(*(uint16x4_t *)v226.val[1].i8);
              v124.i64[0] = v147.u32[2];
              v124.i64[1] = v147.u32[3];
              v148 = vcvtq_f64_u64(v146);
              v149 = vcvtq_f64_u64(v124);
              v124.i64[0] = v147.u32[0];
              v124.i64[1] = v147.u32[1];
              v150 = vmulq_f64(v144, vcvtq_f64_u64(v124));
              v151 = vmulq_f64(v140, v148);
              v152 = vmulq_f64(v139, v145);
              v153 = vmovl_high_u16((uint16x8_t)v225.val[2]);
              v124.i64[0] = v153.u32[2];
              v124.i64[1] = v153.u32[3];
              v154 = vcvtq_f64_u64(v124);
              v124.i64[0] = v153.u32[0];
              v124.i64[1] = v153.u32[1];
              v155 = vmlaq_f64(v152, v137, v130);
              v156 = vcvtq_f64_u64(v124);
              v157 = vmovl_u16(*(uint16x4_t *)v225.val[2].i8);
              v124.i64[0] = v157.u32[2];
              v124.i64[1] = v157.u32[3];
              v158 = vcvtq_f64_u64(v124);
              v124.i64[0] = v157.u32[0];
              v124.i64[1] = v157.u32[1];
              v159 = vmlaq_f64(v151, v136, v129);
              v160 = vcvtq_f64_u64(v124);
              v161 = vmovl_high_u16((uint16x8_t)v226.val[2]);
              v124.i64[0] = v161.u32[2];
              v124.i64[1] = v161.u32[3];
              v162 = vcvtq_f64_u64(v124);
              v124.i64[0] = v161.u32[0];
              v124.i64[1] = v161.u32[1];
              v163 = vmlaq_f64(v150, v132, v125);
              v164 = vcvtq_f64_u64(v124);
              v165 = vmovl_u16(*(uint16x4_t *)v226.val[2].i8);
              v124.i64[0] = v165.u32[2];
              v124.i64[1] = v165.u32[3];
              v166 = vcvtq_f64_u64(v124);
              v124.i64[0] = v165.u32[0];
              v124.i64[1] = v165.u32[1];
              v167 = vmlaq_f64(vmulq_f64(v142, v149), v133, v128);
              v168 = vcvtq_f64_u64(v124);
              v169 = vmovl_u16(*(uint16x4_t *)v225.val[3].i8);
              v124.i64[0] = v169.u32[0];
              v124.i64[1] = v169.u32[1];
              v170 = vcvtq_f64_u64(v124);
              v124.i64[0] = v169.u32[2];
              v124.i64[1] = v169.u32[3];
              v171 = vmlaq_f64(v163, v168, v160);
              v172 = vcvtq_f64_u64(v124);
              v225.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v225.val[3]);
              v124.i64[0] = v225.val[0].u32[0];
              v124.i64[1] = v225.val[0].u32[1];
              v225.val[1] = (int16x8_t)vcvtq_f64_u64(v124);
              v124.i64[0] = v225.val[0].u32[2];
              v124.i64[1] = v225.val[0].u32[3];
              v225.val[0] = (int16x8_t)vcvtq_f64_u64(v124);
              v225.val[2] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v226.val[3].i8);
              v124.i64[0] = v225.val[2].u32[0];
              v124.i64[1] = v225.val[2].u32[1];
              v173 = vcvtq_f64_u64(v124);
              v124.i64[0] = v225.val[2].u32[2];
              v124.i64[1] = v225.val[2].u32[3];
              v225.val[2] = (int16x8_t)vcvtq_f64_u64(v124);
              v226.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v226.val[3]);
              v124.i64[0] = v226.val[0].u32[0];
              v124.i64[1] = v226.val[0].u32[1];
              v226.val[1] = (int16x8_t)vcvtq_f64_u64(v124);
              v124.i64[0] = v226.val[0].u32[2];
              v124.i64[1] = v226.val[0].u32[3];
              v174 = vmlaq_f64(vmlaq_f64(v155, v162, v154), vcvtq_f64_u64(v124), (float64x2_t)v225.val[0]);
              v175 = v174.f64[1];
              v176 = vmlaq_f64(vmlaq_f64(v159, v164, v156), (float64x2_t)v226.val[1], (float64x2_t)v225.val[1]);
              v177 = vmlaq_f64(vmlaq_f64(v167, v166, v158), (float64x2_t)v225.val[2], v172);
              v178 = v177.f64[1];
              v179 = vmlaq_f64(v171, v173, v170);
              v180 = v176.f64[1];
              v119 = v119
                   + v179.f64[0]
                   + v179.f64[1]
                   + v177.f64[0]
                   + v177.f64[1]
                   + v176.f64[0]
                   + v176.f64[1]
                   + v174.f64[0]
                   + v174.f64[1];
              v120 -= 8;
            }
            while (v120);
            v181 = (((v116 >> 3) & 0xFFFFFFF) << 6) | 4;
            v182 = 4 * (v116 & 0x7FFFFFF8);
            if (v116 != (v116 & 0x7FFFFFF8))
            {
              do
              {
                LOWORD(v175) = *(__int16 *)((char *)&v10->i16[-2] + v181);
                LOWORD(v178) = *(const __int16 *)((char *)v118 + v181 - 4);
                *(double *)&v183 = (double)*(unint64_t *)&v178;
                LOWORD(v180) = *(__int16 *)((char *)&v10->i16[-1] + v181);
                LOWORD(v173.f64[0]) = *(const __int16 *)((char *)v118 + v181 - 2);
                v173.f64[0] = (double)*(unint64_t *)&v173.f64[0];
                *(double *)&v184 = (double)*(unint64_t *)&v180 * v173.f64[0];
                v185 = *(double *)&v184 + (double)*(unint64_t *)&v175 * *(double *)&v183;
                LOWORD(v183) = *(__int16 *)((char *)v10->i16 + v181);
                *(double *)&v186 = (double)v183;
                LOWORD(v184) = *(const __int16 *)((char *)v118 + v181);
                *(double *)&v187 = (double)v184;
                v188 = v185 + *(double *)&v186 * *(double *)&v187;
                LOWORD(v186) = *(__int16 *)((char *)&v10->i16[1] + v181);
                LOWORD(v187) = *(const __int16 *)((char *)v118 + v181 + 2);
                v178 = (double)v186;
                v180 = (double)v187;
                v175 = v188 + v178 * v180;
                v119 = v119 + v175;
                v182 += 4;
                v181 += 8;
              }
              while (v182 <= v92);
            }
            v189 = (v92 & 0xFFFFFFFC) + 4;
            v190 = v93;
            if (v93 < v17)
            {
              do
              {
                LOWORD(v175) = v10->i16[v190];
                LOWORD(v178) = v118[v190];
                v175 = (double)*(unint64_t *)&v175;
                v178 = (double)*(unint64_t *)&v178;
                v119 = v119 + v175 * v178;
                ++v190;
                ++v189;
              }
              while ((int)v18 > v189);
            }
            *(double *)(v11 + 8 * result++) = v119 * v9;
            v118 = (const __int16 *)((char *)v118 + v117);
          }
          while (result < v16);
          v115 = (unsigned __int16 *)((char *)v115 + 1);
          v11 += 8 * v219;
          v10 = (uint16x8_t *)((char *)v10 + v117);
        }
        while (v115 != (unsigned __int16 *)v16);
      }
      else if (v93 >= v18)
      {
        v202 = 0;
        v203 = &v10->i16[2];
        v204 = 2 * v13;
        do
        {
          v205 = v203;
          v206 = v202;
          do
          {
            v207 = 0;
            v208 = 0.0;
            v209 = v203;
            v210 = v205;
            do
            {
              LOWORD(a5.f64[0]) = *(v209 - 2);
              LOWORD(a6.f64[0]) = *(v210 - 2);
              *(double *)&v211 = (double)*(unint64_t *)&a6.f64[0];
              LOWORD(a7) = *(v209 - 1);
              LOWORD(a8) = *(v210 - 1);
              a8 = (double)*(unint64_t *)&a8;
              *(double *)&v212 = (double)*(unint64_t *)&a7 * a8;
              v213 = *(double *)&v212 + (double)*(unint64_t *)&a5.f64[0] * *(double *)&v211;
              LOWORD(v211) = *v209;
              LOWORD(v212) = *v210;
              *(double *)&v214 = (double)v211;
              *(double *)&v215 = (double)v212;
              v216 = v213 + *(double *)&v214 * *(double *)&v215;
              LOWORD(v214) = v209[1];
              a6.f64[0] = (double)v214;
              LOWORD(v215) = v210[1];
              a7 = (double)v215;
              a5.f64[0] = v216 + a6.f64[0] * a7;
              v208 = v208 + a5.f64[0];
              v207 += 4;
              v210 += 4;
              v209 += 4;
            }
            while (v207 <= v92);
            *(double *)(v11 + 8 * v206++) = v208 * v9;
            v205 = (__int16 *)((char *)v205 + v204);
          }
          while (v206 < v16);
          ++v202;
          v11 += 8 * v219;
          v203 = (__int16 *)((char *)v203 + v204);
        }
        while (v202 != v16);
      }
      else
      {
        v94 = 0;
        v95 = &v10->i16[2];
        v96 = 2 * v13;
        v97 = (unsigned __int16 *)v10 + v93;
        do
        {
          v98 = v97;
          v99 = v95;
          v100 = v94;
          do
          {
            v101 = 0;
            v102 = 0.0;
            v103 = v95;
            v104 = v99;
            do
            {
              LOWORD(a5.f64[0]) = *(v103 - 2);
              LOWORD(a6.f64[0]) = *(v104 - 2);
              *(double *)&v105 = (double)*(unint64_t *)&a6.f64[0];
              LOWORD(a7) = *(v103 - 1);
              LOWORD(a8) = *(v104 - 1);
              a8 = (double)*(unint64_t *)&a8;
              *(double *)&v106 = (double)*(unint64_t *)&a7 * a8;
              v107 = *(double *)&v106 + (double)*(unint64_t *)&a5.f64[0] * *(double *)&v105;
              LOWORD(v105) = *v103;
              LOWORD(v106) = *v104;
              *(double *)&v108 = (double)v105;
              *(double *)&v109 = (double)v106;
              v110 = v107 + *(double *)&v108 * *(double *)&v109;
              LOWORD(v108) = v103[1];
              a6.f64[0] = (double)v108;
              LOWORD(v109) = v104[1];
              a7 = (double)v109;
              a5.f64[0] = v110 + a6.f64[0] * a7;
              v102 = v102 + a5.f64[0];
              v101 += 4;
              v104 += 4;
              v103 += 4;
            }
            while (v101 <= v92);
            v111 = v97;
            result = (unint64_t)v98;
            v112 = (v92 & 0xFFFFFFFC) + 4;
            do
            {
              v113 = *v111++;
              a5.f64[0] = (double)v113;
              v114 = *(unsigned __int16 *)result;
              result += 2;
              a6.f64[0] = (double)v114;
              v102 = v102 + a5.f64[0] * (double)v114;
              ++v112;
            }
            while ((int)v17 > v112);
            *(double *)(v11 + 8 * v100++) = v102 * v9;
            v99 = (__int16 *)((char *)v99 + v96);
            v98 = (unsigned __int16 *)((char *)v98 + v96);
          }
          while (v100 < v16);
          ++v94;
          v11 += 8 * v219;
          v95 = (__int16 *)((char *)v95 + v96);
          v97 = (unsigned __int16 *)((char *)v97 + v96);
        }
        while (v94 != v16);
      }
    }
    else if ((int)v18 <= 0)
    {
      v191 = 0;
      v192 = 0;
      v193 = a4.f64[0] * 0.0;
      v194 = vdupq_lane_s64(COERCE__INT64(v9 * 0.0), 0);
      v195 = (unsigned __int16 *)(v11 + 16);
      v196 = 1;
      do
      {
        if (v196 <= v16)
          v197 = v16;
        else
          v197 = v196;
        v198 = v192 + 1;
        if (v192 + 1 > v16)
          v199 = v192 + 1;
        else
          v199 = v16;
        v200 = v199 - v192;
        if (v200 < 4)
          goto LABEL_99;
        v201 = (v197 + v191) & 0xFFFFFFFFFFFFFFFCLL;
        v192 += v200 & 0xFFFFFFFFFFFFFFFCLL;
        result = (unint64_t)v195;
        do
        {
          *(int64x2_t *)(result - 16) = v194;
          *(int64x2_t *)result = v194;
          result += 32;
          v201 -= 4;
        }
        while (v201);
        if (v200 != (v200 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_99:
          do
            *(double *)(v11 + 8 * v192++) = v193;
          while (v192 < v16);
        }
        ++v196;
        --v191;
        v195 += 4 * v219 + 4;
        v11 += 8 * v219;
        v192 = v198;
      }
      while (v198 != v16);
    }
    else
    {
      v86 = 0;
      v87 = &v10->i16[2];
      v88 = 2 * v13;
      do
      {
        v89 = 0;
        v90 = (unsigned __int16 *)v10 + v13 * v86;
        LOWORD(a5.f64[0]) = *v90;
        a5.f64[0] = (double)*(unint64_t *)&a5.f64[0];
        v91 = v87;
        do
        {
          LOWORD(a6.f64[0]) = *(v91 - 2);
          a6.f64[0] = a5.f64[0] * (double)*(unint64_t *)&a6.f64[0] + 0.0;
          if ((_DWORD)v18 != 1)
          {
            LOWORD(a7) = v90[1];
            a7 = (double)*(unint64_t *)&a7;
            LOWORD(a8) = *(v91 - 1);
            a8 = (double)*(unint64_t *)&a8;
            a6.f64[0] = a6.f64[0] + a7 * a8;
            if ((_DWORD)v17 != 2)
            {
              LOWORD(a7) = v90[2];
              a7 = (double)*(unint64_t *)&a7;
              LOWORD(a8) = *v91;
              a8 = (double)*(unint64_t *)&a8;
              a6.f64[0] = a6.f64[0] + a7 * a8;
            }
          }
          a6.f64[0] = a6.f64[0] * a4.f64[0];
          *(float64_t *)(v11 + 8 * v89) = a6.f64[0];
          v91 = (__int16 *)((char *)v91 + v88);
          ++v89;
        }
        while (v86 + v89 < v16);
        ++v86;
        v87 = (__int16 *)((char *)v87 + v88);
        v11 += 8 * v219 + 8;
      }
      while (v86 != v16);
    }
  }
  return result;
}

_BYTE *sub_10023B2D8(_QWORD *a1, uint64_t a2, uint64_t a3, double a4, double a5, __n128 a6, float64x2_t a7, __n128 a8)
{
  unsigned __int16 *v8;
  uint64_t v9;
  __n128 *v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  _BYTE *result;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  __n128 *v28;
  float *v29;
  uint64_t v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  float *v37;
  const float *v38;
  uint64_t v39;
  float32x4_t *v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  int32x4_t v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  unsigned __int16 *v51;
  uint64_t v52;
  unsigned __int16 *v53;
  float *v54;
  _DWORD *v55;
  uint64_t v56;
  unsigned __int16 *v57;
  float *v58;
  _DWORD *v59;
  uint64_t v60;
  int16x4_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 *v64;
  float *v65;
  double v66;
  unsigned __int16 *v67;
  uint64_t v68;
  float *v69;
  float v70;
  float32x4_t *v71;
  float64x2_t v72;
  int16x4_t *v73;
  uint64_t v74;
  float *v75;
  float64x2_t v76;
  float v77;
  float32x4_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int32x4_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  int32x4_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int16 *i;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  unsigned __int16 *v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int16x4_t *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int16 *v105;
  double v106;
  unsigned __int16 *v107;
  uint64_t v108;
  float *v109;
  float v110;
  float64x2_t v111;
  int16x4_t *v112;
  uint64_t v113;
  float *v114;
  float64x2_t v115;
  float v116;
  int32x4_t v117;
  int64x2_t v118;
  float64x2_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int32x4_t *v126;
  uint64_t v127;
  _BYTE v129[4];
  _BYTE v130[1028];

  v8 = (unsigned __int16 *)a1[2];
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(__n128 **)(a3 + 16);
  v11 = a1[10];
  if (*(int *)(a3 + 8) <= 1)
    v12 = 0;
  else
    v12 = *(_QWORD *)(a3 + 80) >> 2;
  v13 = (int *)a1[8];
  v15 = *v13;
  v14 = v13[1];
  if (v10)
    v16 = *(_DWORD *)(a3 + 12) < (int)v14;
  else
    v16 = 0;
  v17 = !v16;
  v18 = 20 * v15;
  if (!v16)
    v18 = 4 * v15;
  result = v129;
  if (v18 >= 0x409)
    operator new[]();
  v20 = v11 >> 1;
  v21 = *(_QWORD *)(a2 + 80) >> 2;
  v22 = v13[1];
  v23 = v15;
  if ((v17 & 1) == 0)
  {
    v24 = (float32x4_t *)&v129[4 * v15];
    if ((int)v15 < 1)
      goto LABEL_36;
    v25 = v15 >= 8 && v12 == 1;
    if (v25
      && (v24 < (float32x4_t *)((char *)v10 + 4 * v15)
        ? (v26 = v10 >= (__n128 *)&v129[16 * v15 + 4 * v15])
        : (v26 = 1),
          v26))
    {
      v27 = v15 & 0x7FFFFFF8;
      v28 = v10 + 1;
      v29 = (float *)&v130[4 * v15 + 60];
      v30 = v15 & 0xFFFFFFF8;
      do
      {
        v31 = v28[-1];
        a8 = *v28;
        v32 = v31;
        a6 = v31;
        v33 = v31;
        v34 = *v28;
        v35 = *v28;
        v36 = *v28;
        v37 = v29 - 16;
        vst4q_f32(v37, *(float32x4x4_t *)(&a6 - 2));
        vst4q_f32(v29, *(float32x4x4_t *)a8.n128_u64);
        v28 += 2;
        v29 += 32;
        v30 -= 8;
      }
      while (v30);
      if (v27 == v15)
      {
LABEL_36:
        v12 = 4 * (v12 != 0);
        v10 = (__n128 *)&v129[4 * v15];
        if ((int)v14 < 1)
          return result;
        goto LABEL_37;
      }
    }
    else
    {
      v27 = 0;
    }
    v38 = (const float *)v10 + v12 * v27;
    v40 = (float32x4_t *)&v129[16 * v27 + 4 * v15];
    v41 = v15 - v27;
    do
    {
      v42 = vld1q_dup_f32(v38);
      v39 = 4 * v12;
      v38 = (const float *)((char *)v38 + v39);
      *v40++ = v42;
      --v41;
    }
    while (v41);
    goto LABEL_36;
  }
  if (!v10)
  {
    if ((int)v14 < 1)
      return result;
    v87 = 0;
    v88 = v14 - 4;
    v89 = a4 * 0.0;
    *(float *)&v89 = a4 * 0.0;
    v90 = vdupq_lane_s32(*(int32x2_t *)&v89, 0);
    v91 = 2 * v20;
    v92 = 4 * v21;
    for (i = v8; ; ++i)
    {
      if ((int)v23 < 1)
        goto LABEL_82;
      if ((_DWORD)v23 == 1)
        break;
      v95 = v23 & 0xFFFFFFFE;
      v96 = v130;
      v97 = i;
      do
      {
        a6.n128_u16[0] = *v97;
        a6.n128_u64[0] = vmovl_s16((int16x4_t)a6.n128_u64[0]).u64[0];
        a6.n128_f32[0] = (float)a6.n128_i32[0];
        LOWORD(a7.f64[0]) = v97[v20];
        *(_QWORD *)&a7.f64[0] = vmovl_s16(*(int16x4_t *)&a7.f64[0]).u64[0];
        *(float *)a7.f64 = (float)SLODWORD(a7.f64[0]);
        *(v96 - 1) = a6.n128_u32[0];
        *v96 = LODWORD(a7.f64[0]);
        v97 += 2 * v20;
        v96 += 2;
        v95 -= 2;
      }
      while (v95);
      v94 = v23 & 0xFFFFFFFE;
      if (v94 != v23)
        goto LABEL_80;
LABEL_82:
      LODWORD(v101) = v87;
      v102 = (int16x4_t *)i;
      v103 = v87;
      if (v87 <= v88)
      {
        do
        {
          a6 = (__n128)v90;
          if ((int)v23 >= 1)
          {
            v111 = 0uLL;
            v112 = v102;
            v113 = v23;
            v114 = (float *)v129;
            v115 = 0uLL;
            do
            {
              v116 = *v114++;
              v117 = vmovl_s16(*v112);
              v118.i64[0] = v117.i32[0];
              v118.i64[1] = v117.i32[1];
              v119 = vcvtq_f64_s64(v118);
              v118.i64[0] = v117.i32[2];
              v118.i64[1] = v117.i32[3];
              v115 = vmlaq_n_f64(v115, vcvtq_f64_s64(v118), v116);
              v111 = vmlaq_n_f64(v111, v119, v116);
              v112 = (int16x4_t *)((char *)v112 + v91);
              --v113;
            }
            while (v113);
            a8.n128_f64[0] = a4;
            a7 = vmulq_n_f64(v115, a4);
            a6 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v111, a4)), a7);
          }
          *(__n128 *)(v9 + 4 * v103) = a6;
          v101 = v103 + 4;
          ++v102;
          v103 = v101;
        }
        while ((int)v88 >= (int)v101);
      }
      if ((int)v101 >= (int)v14)
        goto LABEL_73;
      v104 = v101;
      if ((int)v23 >= 1)
      {
        v105 = &v8[v101];
        do
        {
          v106 = 0.0;
          v107 = v105;
          v108 = v23;
          v109 = (float *)v129;
          do
          {
            v110 = *v109++;
            a8.n128_u16[0] = *v107;
            a8.n128_f64[0] = (double)vmovl_s16((int16x4_t)a8.n128_u64[0]).i32[0];
            v106 = v106 + v110 * a8.n128_f64[0];
            v107 = (unsigned __int16 *)((char *)v107 + v91);
            --v108;
          }
          while (v108);
          a7.f64[0] = a4;
          a6.n128_f64[0] = v106 * a4;
          a6.n128_f32[0] = a6.n128_f64[0];
          *(_DWORD *)(v9 + 4 * v104++) = a6.n128_u32[0];
          ++v105;
        }
        while ((int)v14 > (int)v104);
        goto LABEL_73;
      }
      v120 = (v14 + ~(_DWORD)v101);
      if (v120 >= 7)
      {
        v122 = v120 + 1;
        v123 = (v120 + 1) & 0x1FFFFFFF8;
        v121 = v123 + v104;
        v124 = 4 * v104;
        v125 = v123;
        do
        {
          v126 = (int32x4_t *)(v9 + v124);
          *v126 = v90;
          v126[1] = v90;
          v124 += 32;
          v125 -= 8;
        }
        while (v125);
        if (v122 == v123)
          goto LABEL_73;
      }
      else
      {
        v121 = v101;
      }
      v127 = 4 * v121;
      do
      {
        *(_DWORD *)(v9 + v127) = LODWORD(v89);
        v127 += 4;
        LODWORD(v121) = v121 + 1;
      }
      while ((int)v14 > (int)v121);
LABEL_73:
      ++v87;
      v9 += v92;
      if (v87 == v14)
        return result;
    }
    v94 = 0;
LABEL_80:
    v98 = &v129[4 * v94];
    v99 = v91 * v94;
    v100 = v23 - v94;
    do
    {
      a6.n128_u16[0] = *(unsigned __int16 *)((char *)i + v99);
      a6.n128_u64[0] = vmovl_s16((int16x4_t)a6.n128_u64[0]).u64[0];
      a6.n128_f32[0] = (float)a6.n128_i32[0];
      *v98++ = a6.n128_u32[0];
      v99 += v91;
      --v100;
    }
    while (v100);
    goto LABEL_82;
  }
  v24 = 0;
  if ((int)v14 >= 1)
  {
LABEL_37:
    v43 = 0;
    v44 = v14 - 4;
    v45 = a4 * 0.0;
    *(float *)&v45 = a4 * 0.0;
    v46 = 4 * v12;
    v47 = vdupq_lane_s32(*(int32x2_t *)&v45, 0);
    v48 = 2 * v20;
    v49 = 4 * v21;
    v50 = (float *)v10;
    v51 = v8;
    do
    {
      if (v24)
      {
        v52 = v15;
        v53 = v51;
        v54 = (float *)v24;
        v55 = v129;
        if ((int)v15 >= 1)
        {
          do
          {
            a6.n128_u16[0] = *v53;
            a6.n128_u64[0] = vmovl_s16((int16x4_t)a6.n128_u64[0]).u64[0];
            a6.n128_f32[0] = (float)a6.n128_i32[0] - *v54;
            *v55++ = a6.n128_u32[0];
            v54 = (float *)((char *)v54 + v46);
            v53 = (unsigned __int16 *)((char *)v53 + v48);
            --v52;
          }
          while (v52);
        }
      }
      else if ((int)v15 >= 1)
      {
        v56 = v15;
        v57 = v51;
        v58 = v50;
        v59 = v129;
        do
        {
          a6.n128_u16[0] = *v57;
          a6.n128_u64[0] = vmovl_s16((int16x4_t)a6.n128_u64[0]).u64[0];
          a6.n128_f32[0] = (float)a6.n128_i32[0] - *v58;
          *v59++ = a6.n128_u32[0];
          v58 = (float *)((char *)v58 + v46);
          v57 = (unsigned __int16 *)((char *)v57 + v48);
          --v56;
        }
        while (v56);
      }
      LODWORD(v60) = v43;
      v61 = (int16x4_t *)v51;
      v62 = v43;
      if (v43 <= v44)
      {
        do
        {
          a6 = (__n128)v47;
          if ((int)v15 >= 1)
          {
            v71 = (float32x4_t *)((char *)v10 + 4 * v62);
            if (v24)
              v71 = v24;
            v72 = 0uLL;
            v73 = v61;
            v74 = v15;
            v75 = (float *)v129;
            v76 = 0uLL;
            do
            {
              v77 = *v75++;
              v78 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(*v73)), *v71);
              v76 = vmlaq_n_f64(v76, vcvt_hight_f64_f32(v78), v77);
              v72 = vmlaq_n_f64(v72, vcvtq_f64_f32(*(float32x2_t *)v78.f32), v77);
              v71 = (float32x4_t *)((char *)v71 + v46);
              v73 = (int16x4_t *)((char *)v73 + v48);
              --v74;
            }
            while (v74);
            a8.n128_f64[0] = a4;
            a6 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v72, a4)), vmulq_n_f64(v76, a4));
          }
          *(__n128 *)(v9 + 4 * v62) = a6;
          v60 = v62 + 4;
          ++v61;
          v62 = v60;
        }
        while ((int)v44 >= (int)v60);
      }
      if ((int)v60 >= (int)v14)
        goto LABEL_38;
      v63 = v60;
      if ((int)v15 >= 1)
      {
        v64 = &v8[v60];
        do
        {
          v65 = (float *)v10 + v63;
          if (v24)
            v65 = (float *)v24;
          v66 = 0.0;
          v67 = v64;
          v68 = v15;
          v69 = (float *)v129;
          do
          {
            v70 = *v69++;
            a8.n128_u16[0] = *v67;
            a8.n128_f64[0] = (float)((float)vmovl_s16((int16x4_t)a8.n128_u64[0]).i32[0] - *v65);
            v66 = v66 + v70 * a8.n128_f64[0];
            v65 = (float *)((char *)v65 + v46);
            v67 = (unsigned __int16 *)((char *)v67 + v48);
            --v68;
          }
          while (v68);
          a6.n128_f64[0] = v66 * a4;
          a6.n128_f32[0] = a6.n128_f64[0];
          *(_DWORD *)(v9 + 4 * v63++) = a6.n128_u32[0];
          ++v64;
        }
        while ((int)v14 > (int)v63);
        goto LABEL_38;
      }
      v79 = (v14 + ~(_DWORD)v60);
      if (v79 >= 7)
      {
        v81 = v79 + 1;
        v82 = (v79 + 1) & 0x1FFFFFFF8;
        v80 = v82 + v63;
        v83 = 4 * v63;
        v84 = v82;
        do
        {
          v85 = (int32x4_t *)(v9 + v83);
          *v85 = v47;
          v85[1] = v47;
          v83 += 32;
          v84 -= 8;
        }
        while (v84);
        if (v81 == v82)
          goto LABEL_38;
      }
      else
      {
        v80 = v60;
      }
      v86 = 4 * v80;
      do
      {
        *(_DWORD *)(v9 + v86) = LODWORD(v45);
        v86 += 4;
        LODWORD(v80) = v80 + 1;
      }
      while ((int)v14 > (int)v80);
LABEL_38:
      ++v43;
      v9 += v49;
      ++v51;
      ++v50;
    }
    while (v43 != v22);
  }
  return result;
}

void sub_10023B9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a12 != v12)
  {
    if (a12)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10023B9D8(unint64_t result, uint64_t a2, uint64_t a3, double a4, float32x4_t a5, float32x4_t a6, __n128 a7, float32x4_t a8)
{
  double v8;
  const __int16 *v9;
  uint64_t v10;
  float32x4_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int16x4_t *v20;
  uint64_t v21;
  float32x4_t *v22;
  uint64_t v23;
  const __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t *v28;
  __n128 *v29;
  int16x4_t *v30;
  uint64_t v31;
  int16x8_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float *v36;
  float *v37;
  const __int16 *v38;
  uint64_t v39;
  int v40;
  float v41;
  float v42;
  unint64_t v43;
  __n128 *v44;
  int16x8_t v45;
  int16x8_t v46;
  float32x4_t v47;
  float32x4_t v48;
  const __int16 *v49;
  __int16 *v50;
  uint64_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  int v54;
  double v55;
  uint64_t v56;
  __int16 *v57;
  float *v58;
  int16x4_t v59;
  double v60;
  float v61;
  float v62;
  int16x4_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  uint64_t v69;
  uint64_t v70;
  int16x8_t *v71;
  float32x4_t *v72;
  float32x4_t *v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  int16x8_t v83;
  int16x8_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float v99;
  uint64_t v100;
  unsigned __int16 *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int16 *v104;
  unsigned __int16 *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  __int16 *v109;
  uint64_t v110;
  const __int16 *v111;
  __int16 *v112;
  __int16 *v113;
  unint64_t v114;
  unint64_t v115;
  double v116;
  __int16 *v117;
  __int16 *v118;
  int16x4_t v119;
  int16x4_t v120;
  int16x4_t v121;
  double v122;
  int16x4_t v123;
  double v124;
  __int16 *v125;
  int v126;
  int v127;
  int v128;
  float v129;
  __int16 *v130;
  unint64_t v131;
  uint64_t v132;
  const __int16 *v133;
  float v134;
  double v135;
  unint64_t v136;
  const __int16 *v137;
  const __int16 *v138;
  int32x4_t v139;
  int64x2_t v140;
  float64x2_t v141;
  int64x2_t v142;
  int32x4_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  int32x4_t v147;
  float64x2_t v148;
  float64x2_t v149;
  int32x4_t v150;
  int64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  int32x4_t v154;
  float64x2_t v155;
  float64x2_t v156;
  int32x4_t v157;
  float64x2_t v158;
  int32x4_t v159;
  float64x2_t v160;
  float64x2_t v161;
  int64x2_t v162;
  int32x4_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  int32x4_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  int32x4_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  int32x4_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  int32x4_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  int32x4_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  double v191;
  float64x2_t v192;
  float64x2_t v193;
  double v194;
  float64x2_t v195;
  double v196;
  uint64_t v197;
  unint64_t v198;
  int16x4_t v199;
  int16x4_t v200;
  int16x4_t v201;
  double v202;
  double v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  double v208;
  int32x4_t v209;
  __int16 *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  __int16 *v218;
  uint64_t v219;
  __int16 *v220;
  unint64_t v221;
  unint64_t v222;
  double v223;
  __int16 *v224;
  __int16 *v225;
  int16x4_t v226;
  int16x4_t v227;
  int16x4_t v228;
  double v229;
  int16x4_t v230;
  double v231;
  float v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  float32x4_t *v236;
  int16x4_t *v237;
  _DWORD v238[2];
  uint64_t v239;
  _DWORD v240[250];
  float32x4_t v241;
  int16x8x4_t v242;
  int16x8x4_t v243;

  v8 = a4;
  v9 = *(const __int16 **)(result + 16);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(float32x4_t **)(a3 + 16);
  v12 = *(_QWORD *)(result + 80) >> 1;
  v235 = *(_QWORD *)(a2 + 80) >> 2;
  if (*(int *)(a3 + 8) <= 1)
    v13 = 0;
  else
    v13 = *(_QWORD *)(a3 + 80) >> 2;
  v14 = *(unsigned int **)(result + 64);
  v15 = *v14;
  v16 = (int)v14[1];
  v17 = v14[1];
  if (v11)
  {
    v18 = *(_DWORD *)(a3 + 12);
    result = (unint64_t)v238;
    if ((unint64_t)(4 * v16) >= 0x409)
      operator new[]();
    if ((int)v15 >= 1)
    {
      v19 = 0;
      v233 = v17 & 0xFFFFFFF0;
      v20 = (int16x4_t *)(v9 + 8);
      v21 = 2 * v12;
      v22 = v11 + 2;
      v23 = (2 * v17) & 0x1FFFFFFE0;
      v24 = v9 + 2;
      v25 = *(_QWORD *)(a3 + 16);
      v234 = 4 * v13;
      do
      {
        if (v18 >= (int)v17)
        {
          if ((int)v17 >= 1)
          {
            v27 = 0;
            if (v17 < 0x10)
              goto LABEL_20;
            if ((unint64_t)((char *)v238 - ((char *)v11 + v234 * v19)) < 0x40)
              goto LABEL_20;
            v28 = v22;
            v29 = (__n128 *)v240;
            v30 = v20;
            v31 = v17 & 0xFFFFFFF0;
            do
            {
              v32 = *(int16x8_t *)v30[-2].i8;
              v33 = v28[-2];
              a8 = v28[-1];
              v35 = *v28;
              v34 = v28[1];
              v28 += 4;
              a6 = vsubq_f32(vcvtq_f32_s32(vmovl_high_s16(v32)), a8);
              a5 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(*v30)), v35);
              a7 = (__n128)vsubq_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v30->i8)), v34);
              v29[-2] = (__n128)vsubq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v32.i8)), v33);
              v29[-1] = (__n128)a6;
              *v29 = (__n128)a5;
              v29[1] = a7;
              v29 += 4;
              v30 += 4;
              v31 -= 16;
            }
            while (v31);
            v27 = v17 & 0xFFFFFFF0;
            if (v233 != v17)
            {
LABEL_20:
              v36 = (float *)&v238[v27];
              v37 = (float *)(v25 + 4 * v27);
              v38 = &v9[v27];
              v39 = v17 - v27;
              do
              {
                v40 = *v38++;
                v41 = (float)v40;
                v42 = *v37++;
                a5.i16[1] = HIWORD(v42);
                *v36++ = v41 - v42;
                --v39;
              }
              while (v39);
            }
          }
          goto LABEL_27;
        }
        if ((int)v16 >= 1)
        {
          LODWORD(a4) = v11->i32[v13 * v19];
          if (v16 >= 0x10)
          {
            v43 = 0;
            a5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
            v44 = (__n128 *)v240;
            do
            {
              v45 = *(int16x8_t *)&v9[v43 / 2];
              v46 = *(int16x8_t *)&v9[v43 / 2 + 8];
              v47 = vcvtq_f32_s32(vmovl_high_s16(v45));
              v48 = vcvtq_f32_s32(vmovl_high_s16(v46));
              a6 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v45.i8)), a5);
              a8 = vsubq_f32(v47, a5);
              a7 = (__n128)vsubq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v46.i8)), a5);
              v44[-2] = (__n128)a6;
              v44[-1] = (__n128)a8;
              *v44 = a7;
              v44[1] = (__n128)vsubq_f32(v48, a5);
              v44 += 4;
              v43 += 32;
            }
            while (v23 != v43);
            v26 = v17 & 0xFFFFFFF0;
            if (v233 == v17)
              goto LABEL_27;
          }
          else
          {
            v26 = 0;
          }
          do
          {
            a5.i16[0] = v9[v26];
            a5.i64[0] = vmovl_s16(*(int16x4_t *)a5.f32).u64[0];
            a5.f32[0] = (float)a5.i32[0] - *(float *)&a4;
            v238[v26++] = a5.i32[0];
          }
          while (v17 != v26);
        }
LABEL_27:
        v236 = v22;
        v237 = v20;
        v49 = v9;
        v50 = (__int16 *)v24;
        v51 = v19;
        do
        {
          v52 = (float32x4_t *)((char *)v11 + 4 * v13 * v51);
          if (v18 < (int)v16)
          {
            v53 = vld1q_dup_f32(v52->f32);
            v241 = v53;
            v52 = &v241;
          }
          if ((int)v17 >= 4)
          {
            v56 = 0;
            v55 = 0.0;
            v57 = v50;
            v58 = (float *)&v239;
            do
            {
              a7.n128_u16[0] = *(v57 - 2);
              a8.i32[0] = v52->i32[0];
              a8.i16[0] = *(v57 - 1);
              *(double *)a8.i64 = (float)((float)vmovl_s16(*(int16x4_t *)a8.f32).i32[0] - v52->f32[1]);
              *(double *)&v59 = *(v58 - 1) * *(double *)a8.i64;
              v60 = *(double *)&v59
                  + *(v58 - 2) * (float)((float)vmovl_s16((int16x4_t)a7.n128_u64[0]).i32[0] - v52->f32[0]);
              v59.i16[0] = *v57;
              v61 = *v58;
              v62 = v58[1];
              v58 += 4;
              a7.n128_f64[0] = v61;
              *(double *)&v63 = (float)((float)vmovl_s16(v59).i32[0] - v52->f32[2]);
              v64 = v60 + a7.n128_f64[0] * *(double *)&v63;
              v63.i16[0] = v57[1];
              *(double *)a6.i64 = (float)((float)vmovl_s16(v63).i32[0] - v52->f32[3]);
              *(double *)a5.i64 = v64 + v62 * *(double *)a6.i64;
              v56 += 4;
              v55 = v55 + *(double *)a5.i64;
              v52 += v18 == (_DWORD)v16;
              v57 += 4;
            }
            while (v56 <= (int)v17 - 4);
            v54 = ((v17 - 4) & 0xFFFFFFFC) + 4;
            if (v54 >= (int)v16)
              goto LABEL_28;
          }
          else
          {
            v54 = 0;
            v55 = 0.0;
            if ((int)v16 <= 0)
              goto LABEL_28;
          }
          v65 = v54;
          v66 = (v17 + ~v54);
          if (v66 < 0xF)
          {
            v67 = v65;
            v68 = (float *)v52;
            do
            {
LABEL_42:
              *(double *)a5.i64 = *(float *)&v238[v67];
              a6.i16[0] = v49[v67];
              v99 = *v68++;
              a7.n128_u16[1] = HIWORD(v99);
              *(double *)a6.i64 = (float)((float)vmovl_s16(*(int16x4_t *)a6.f32).i32[0] - v99);
              v55 = v55 + *(double *)a5.i64 * *(double *)a6.i64;
              ++v67;
            }
            while ((int)v16 > (int)v67);
            goto LABEL_28;
          }
          v69 = v66 + 1;
          v70 = (v66 + 1) & 0x1FFFFFFF0;
          v68 = &v52->f32[v70];
          v67 = v70 + v65;
          v71 = (int16x8_t *)&v49[v65];
          v72 = v52 + 2;
          v73 = (float32x4_t *)&v240[v65];
          v74 = v70;
          do
          {
            v76 = v73[-2];
            v75 = v73[-1];
            v78 = *v73;
            v77 = v73[1];
            v73 += 4;
            v79 = vcvtq_f64_f32(*(float32x2_t *)v76.f32);
            v80 = vcvtq_f64_f32(*(float32x2_t *)v75.f32);
            v81 = vcvtq_f64_f32(*(float32x2_t *)v78.f32);
            v82 = vcvtq_f64_f32(*(float32x2_t *)v77.f32);
            v83 = *v71;
            v84 = v71[1];
            v71 += 2;
            v85 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v83.i8));
            v86 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v84.i8));
            v87 = v72[-2];
            v88 = v72[-1];
            v89 = *v72;
            v90 = v72[1];
            v72 += 4;
            v91 = vsubq_f32(vcvtq_f32_s32(vmovl_high_s16(v83)), v88);
            v92 = vsubq_f32(v85, v87);
            v93 = vsubq_f32(vcvtq_f32_s32(vmovl_high_s16(v84)), v90);
            v94 = vsubq_f32(v86, v89);
            a5 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v75), vcvt_hight_f64_f32(v91));
            v95 = vmulq_f64(v80, vcvtq_f64_f32(*(float32x2_t *)v91.f32));
            a6 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v76), vcvt_hight_f64_f32(v92));
            v96 = vmulq_f64(v79, vcvtq_f64_f32(*(float32x2_t *)v92.f32));
            a7 = (__n128)vmulq_f64(vcvt_hight_f64_f32(v77), vcvt_hight_f64_f32(v93));
            v97 = vmulq_f64(v82, vcvtq_f64_f32(*(float32x2_t *)v93.f32));
            a8 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v78), vcvt_hight_f64_f32(v94));
            v98 = vmulq_f64(v81, vcvtq_f64_f32(*(float32x2_t *)v94.f32));
            v55 = v55
                + v96.f64[0]
                + v96.f64[1]
                + *(double *)a6.i64
                + *(double *)&a6.i64[1]
                + v95.f64[0]
                + v95.f64[1]
                + *(double *)a5.i64
                + *(double *)&a5.i64[1]
                + v98.f64[0]
                + v98.f64[1]
                + *(double *)a8.i64
                + *(double *)&a8.i64[1]
                + v97.f64[0]
                + v97.f64[1]
                + a7.n128_f64[0]
                + a7.n128_f64[1];
            v74 -= 16;
          }
          while (v74);
          if (v69 != v70)
            goto LABEL_42;
LABEL_28:
          a4 = v55 * v8;
          *(float *)&a4 = a4;
          *(_DWORD *)(v10 + 4 * v51++) = LODWORD(a4);
          v50 = (__int16 *)((char *)v50 + v21);
          v49 = (const __int16 *)((char *)v49 + v21);
        }
        while (v51 != v15);
        ++v19;
        v10 += 4 * v235;
        v20 = (int16x4_t *)((char *)v237 + v21);
        v23 = (2 * v17) & 0x1FFFFFFE0;
        v22 = (float32x4_t *)((char *)v236 + v234);
        v25 += v234;
        v9 = (const __int16 *)((char *)v9 + v21);
        v24 = (const __int16 *)((char *)v24 + v21);
      }
      while (v19 != v15);
    }
  }
  else if ((int)v15 >= 1)
  {
    if ((int)v16 >= 4)
    {
      v106 = (v17 - 4);
      v107 = (v106 & 0xFFFFFFFC) + 4;
      if (v106 >= 0x1C)
      {
        v130 = 0;
        v131 = (v106 >> 2) + 1;
        v132 = 2 * v12;
        do
        {
          v133 = v9;
          result = (unint64_t)v130;
          do
          {
            v135 = 0.0;
            v136 = v131 & 0x7FFFFFF8;
            v137 = v133;
            v138 = v9;
            do
            {
              v242 = vld4q_s16(v138);
              v138 += 32;
              v139 = vmovl_s16(*(int16x4_t *)v242.val[0].i8);
              v243 = vld4q_s16(v137);
              v137 += 32;
              v140.i64[0] = v139.i32[0];
              v140.i64[1] = v139.i32[1];
              v141 = vcvtq_f64_s64(v140);
              v140.i64[0] = v139.i32[2];
              v140.i64[1] = v139.i32[3];
              v142 = v140;
              v143 = vmovl_high_s16(v242.val[0]);
              v140.i64[0] = v143.i32[0];
              v140.i64[1] = v143.i32[1];
              v144 = vcvtq_f64_s64(v142);
              v145 = vcvtq_f64_s64(v140);
              v140.i64[0] = v143.i32[2];
              v140.i64[1] = v143.i32[3];
              v146 = vcvtq_f64_s64(v140);
              v147 = vmovl_s16(*(int16x4_t *)v243.val[0].i8);
              v140.i64[0] = v147.i32[0];
              v140.i64[1] = v147.i32[1];
              v148 = vcvtq_f64_s64(v140);
              v140.i64[0] = v147.i32[2];
              v140.i64[1] = v147.i32[3];
              v149 = vcvtq_f64_s64(v140);
              v150 = vmovl_high_s16(v243.val[0]);
              v140.i64[0] = v150.i32[0];
              v140.i64[1] = v150.i32[1];
              v151 = v140;
              v140.i64[0] = v150.i32[2];
              v140.i64[1] = v150.i32[3];
              v152 = vcvtq_f64_s64(v151);
              v153 = vcvtq_f64_s64(v140);
              v154 = vmovl_high_s16(v242.val[1]);
              v140.i64[0] = v154.i32[2];
              v140.i64[1] = v154.i32[3];
              v155 = vcvtq_f64_s64(v140);
              v140.i64[0] = v154.i32[0];
              v140.i64[1] = v154.i32[1];
              v156 = vcvtq_f64_s64(v140);
              v157 = vmovl_s16(*(int16x4_t *)v242.val[1].i8);
              v140.i64[0] = v157.i32[2];
              v140.i64[1] = v157.i32[3];
              v158 = vcvtq_f64_s64(v140);
              v140.i64[0] = v157.i32[0];
              v140.i64[1] = v157.i32[1];
              v159 = vmovl_high_s16(v243.val[1]);
              v160 = vcvtq_f64_s64(v140);
              v140.i64[0] = v159.i32[2];
              v140.i64[1] = v159.i32[3];
              v161 = vcvtq_f64_s64(v140);
              v140.i64[0] = v159.i32[0];
              v140.i64[1] = v159.i32[1];
              v162 = v140;
              v163 = vmovl_s16(*(int16x4_t *)v243.val[1].i8);
              v140.i64[0] = v163.i32[2];
              v140.i64[1] = v163.i32[3];
              v164 = vcvtq_f64_s64(v162);
              v165 = vcvtq_f64_s64(v140);
              v140.i64[0] = v163.i32[0];
              v140.i64[1] = v163.i32[1];
              v166 = vmulq_f64(v160, vcvtq_f64_s64(v140));
              v167 = vmulq_f64(v156, v164);
              v168 = vmulq_f64(v155, v161);
              v169 = vmovl_high_s16(v242.val[2]);
              v140.i64[0] = v169.i32[2];
              v140.i64[1] = v169.i32[3];
              v170 = vcvtq_f64_s64(v140);
              v140.i64[0] = v169.i32[0];
              v140.i64[1] = v169.i32[1];
              v171 = vmlaq_f64(v168, v153, v146);
              v172 = vcvtq_f64_s64(v140);
              v173 = vmovl_s16(*(int16x4_t *)v242.val[2].i8);
              v140.i64[0] = v173.i32[2];
              v140.i64[1] = v173.i32[3];
              v174 = vcvtq_f64_s64(v140);
              v140.i64[0] = v173.i32[0];
              v140.i64[1] = v173.i32[1];
              v175 = vmlaq_f64(v167, v152, v145);
              v176 = vcvtq_f64_s64(v140);
              v177 = vmovl_high_s16(v243.val[2]);
              v140.i64[0] = v177.i32[2];
              v140.i64[1] = v177.i32[3];
              v178 = vcvtq_f64_s64(v140);
              v140.i64[0] = v177.i32[0];
              v140.i64[1] = v177.i32[1];
              v179 = vmlaq_f64(v166, v148, v141);
              v180 = vcvtq_f64_s64(v140);
              v181 = vmovl_s16(*(int16x4_t *)v243.val[2].i8);
              v140.i64[0] = v181.i32[2];
              v140.i64[1] = v181.i32[3];
              v182 = vcvtq_f64_s64(v140);
              v140.i64[0] = v181.i32[0];
              v140.i64[1] = v181.i32[1];
              v183 = vmlaq_f64(vmulq_f64(v158, v165), v149, v144);
              v184 = vcvtq_f64_s64(v140);
              v185 = vmovl_s16(*(int16x4_t *)v242.val[3].i8);
              v140.i64[0] = v185.i32[0];
              v140.i64[1] = v185.i32[1];
              v186 = vcvtq_f64_s64(v140);
              v140.i64[0] = v185.i32[2];
              v140.i64[1] = v185.i32[3];
              v187 = vmlaq_f64(v179, v184, v176);
              v188 = vcvtq_f64_s64(v140);
              v242.val[0] = (int16x8_t)vmovl_high_s16(v242.val[3]);
              v140.i64[0] = v242.val[0].i32[0];
              v140.i64[1] = v242.val[0].i32[1];
              v242.val[1] = (int16x8_t)vcvtq_f64_s64(v140);
              v140.i64[0] = v242.val[0].i32[2];
              v140.i64[1] = v242.val[0].i32[3];
              v242.val[0] = (int16x8_t)vcvtq_f64_s64(v140);
              v242.val[2] = (int16x8_t)vmovl_s16(*(int16x4_t *)v243.val[3].i8);
              v140.i64[0] = v242.val[2].i32[0];
              v140.i64[1] = v242.val[2].i32[1];
              v189 = vcvtq_f64_s64(v140);
              v140.i64[0] = v242.val[2].i32[2];
              v140.i64[1] = v242.val[2].i32[3];
              v242.val[2] = (int16x8_t)vcvtq_f64_s64(v140);
              v243.val[0] = (int16x8_t)vmovl_high_s16(v243.val[3]);
              v140.i64[0] = v243.val[0].i32[0];
              v140.i64[1] = v243.val[0].i32[1];
              v243.val[1] = (int16x8_t)vcvtq_f64_s64(v140);
              v140.i64[0] = v243.val[0].i32[2];
              v140.i64[1] = v243.val[0].i32[3];
              v190 = vmlaq_f64(vmlaq_f64(v171, v178, v170), vcvtq_f64_s64(v140), (float64x2_t)v242.val[0]);
              v191 = v190.f64[1];
              v192 = vmlaq_f64(vmlaq_f64(v175, v180, v172), (float64x2_t)v243.val[1], (float64x2_t)v242.val[1]);
              v193 = vmlaq_f64(vmlaq_f64(v183, v182, v174), (float64x2_t)v242.val[2], v188);
              v194 = v193.f64[1];
              v195 = vmlaq_f64(v187, v189, v186);
              v196 = v192.f64[1];
              v135 = v135
                   + v195.f64[0]
                   + v195.f64[1]
                   + v193.f64[0]
                   + v193.f64[1]
                   + v192.f64[0]
                   + v192.f64[1]
                   + v190.f64[0]
                   + v190.f64[1];
              v136 -= 8;
            }
            while (v136);
            v197 = (((v131 >> 3) & 0xFFFFFFF) << 6) | 4;
            v198 = 4 * (v131 & 0x7FFFFFF8);
            if (v131 != (v131 & 0x7FFFFFF8))
            {
              do
              {
                LOWORD(v191) = *(const __int16 *)((char *)v9 + v197 - 4);
                LOWORD(v194) = *(const __int16 *)((char *)v133 + v197 - 4);
                LOWORD(v196) = *(const __int16 *)((char *)v9 + v197 - 2);
                LOWORD(v189.f64[0]) = *(const __int16 *)((char *)v133 + v197 - 2);
                *(double *)&v199 = (double)vmovl_s16(*(int16x4_t *)&v189.f64[0]).i32[0];
                *(double *)&v200 = (double)vmovl_s16(*(int16x4_t *)&v194).i32[0];
                *(double *)&v201 = (double)vmovl_s16(*(int16x4_t *)&v196).i32[0] * *(double *)&v199;
                v199.i16[0] = *(const __int16 *)((char *)v9 + v197);
                v189.f64[0] = (double)vmovl_s16(v199).i32[0];
                v202 = *(double *)&v201 + (double)vmovl_s16(*(int16x4_t *)&v191).i32[0] * *(double *)&v200;
                v200.i16[0] = *(const __int16 *)((char *)v133 + v197);
                v201.i16[0] = *(const __int16 *)((char *)v9 + v197 + 2);
                v203 = v202 + v189.f64[0] * (double)vmovl_s16(v200).i32[0];
                v200.i32[0] = vmovl_s16(v201).u32[0];
                v201.i16[0] = *(const __int16 *)((char *)v133 + v197 + 2);
                v194 = (double)v200.i32[0];
                v196 = (double)vmovl_s16(v201).i32[0];
                v191 = v203 + v194 * v196;
                v135 = v135 + v191;
                v198 += 4;
                v197 += 8;
              }
              while (v198 <= v106);
            }
            v204 = (v106 & 0xFFFFFFFC) + 4;
            v205 = v107;
            if (v107 < v16)
            {
              do
              {
                LOWORD(v191) = v9[v205];
                v191 = (double)vmovl_s16(*(int16x4_t *)&v191).i32[0];
                LOWORD(v194) = v133[v205];
                v194 = (double)vmovl_s16(*(int16x4_t *)&v194).i32[0];
                v135 = v135 + v191 * v194;
                ++v205;
                ++v204;
              }
              while ((int)v17 > v204);
            }
            v134 = v135 * v8;
            *(float *)(v10 + 4 * result++) = v134;
            v133 = (const __int16 *)((char *)v133 + v132);
          }
          while (result < v15);
          v130 = (__int16 *)((char *)v130 + 1);
          v10 += 4 * v235;
          v9 = (const __int16 *)((char *)v9 + v132);
        }
        while (v130 != (__int16 *)v15);
      }
      else if (v107 >= v17)
      {
        v217 = 0;
        v218 = (__int16 *)(v9 + 2);
        v219 = 2 * v12;
        do
        {
          v220 = v218;
          v221 = v217;
          do
          {
            v222 = 0;
            v223 = 0.0;
            v224 = v218;
            v225 = v220;
            do
            {
              a5.i16[0] = *(v224 - 2);
              a6.i16[0] = *(v225 - 2);
              a7.n128_u16[0] = *(v224 - 1);
              a8.i16[0] = *(v225 - 1);
              *(double *)&v226 = (double)vmovl_s16(*(int16x4_t *)a8.f32).i32[0];
              *(double *)&v227 = (double)vmovl_s16((int16x4_t)a7.n128_u64[0]).i32[0] * *(double *)&v226;
              *(double *)&v228 = (double)vmovl_s16(*(int16x4_t *)a6.f32).i32[0];
              v229 = *(double *)&v227 + (double)vmovl_s16(*(int16x4_t *)a5.f32).i32[0] * *(double *)&v228;
              v228.i16[0] = *v224;
              v227.i16[0] = *v225;
              *(double *)&v230 = (double)vmovl_s16(v227).i32[0];
              v226.i16[0] = v224[1];
              a8.i64[0] = vmovl_s16(v226).u64[0];
              v231 = v229 + (double)vmovl_s16(v228).i32[0] * *(double *)&v230;
              *(double *)a6.i64 = (double)a8.i32[0];
              v230.i16[0] = v225[1];
              a7.n128_f64[0] = (double)vmovl_s16(v230).i32[0];
              *(double *)a5.i64 = v231 + *(double *)a6.i64 * a7.n128_f64[0];
              v223 = v223 + *(double *)a5.i64;
              v222 += 4;
              v225 += 4;
              v224 += 4;
            }
            while (v222 <= v106);
            v232 = v223 * v8;
            *(float *)(v10 + 4 * v221++) = v232;
            v220 = (__int16 *)((char *)v220 + v219);
          }
          while (v221 < v15);
          ++v217;
          v10 += 4 * v235;
          v218 = (__int16 *)((char *)v218 + v219);
        }
        while (v217 != v15);
      }
      else
      {
        v108 = 0;
        v109 = (__int16 *)(v9 + 2);
        v110 = 2 * v12;
        v111 = &v9[v107];
        do
        {
          v112 = (__int16 *)v111;
          v113 = v109;
          v114 = v108;
          do
          {
            v115 = 0;
            v116 = 0.0;
            v117 = v109;
            v118 = v113;
            do
            {
              a5.i16[0] = *(v117 - 2);
              a6.i16[0] = *(v118 - 2);
              a7.n128_u16[0] = *(v117 - 1);
              a8.i16[0] = *(v118 - 1);
              *(double *)&v119 = (double)vmovl_s16(*(int16x4_t *)a8.f32).i32[0];
              *(double *)&v120 = (double)vmovl_s16((int16x4_t)a7.n128_u64[0]).i32[0] * *(double *)&v119;
              *(double *)&v121 = (double)vmovl_s16(*(int16x4_t *)a6.f32).i32[0];
              v122 = *(double *)&v120 + (double)vmovl_s16(*(int16x4_t *)a5.f32).i32[0] * *(double *)&v121;
              v121.i16[0] = *v117;
              v120.i16[0] = *v118;
              *(double *)&v123 = (double)vmovl_s16(v120).i32[0];
              v119.i16[0] = v117[1];
              a8.i64[0] = vmovl_s16(v119).u64[0];
              v124 = v122 + (double)vmovl_s16(v121).i32[0] * *(double *)&v123;
              *(double *)a6.i64 = (double)a8.i32[0];
              v123.i16[0] = v118[1];
              a7.n128_f64[0] = (double)vmovl_s16(v123).i32[0];
              *(double *)a5.i64 = v124 + *(double *)a6.i64 * a7.n128_f64[0];
              v116 = v116 + *(double *)a5.i64;
              v115 += 4;
              v118 += 4;
              v117 += 4;
            }
            while (v115 <= v106);
            v125 = (__int16 *)v111;
            result = (unint64_t)v112;
            v126 = (v106 & 0xFFFFFFFC) + 4;
            do
            {
              v127 = *v125++;
              *(double *)a5.i64 = (double)v127;
              v128 = *(__int16 *)result;
              result += 2;
              *(double *)a6.i64 = (double)v128;
              v116 = v116 + *(double *)a5.i64 * (double)v128;
              ++v126;
            }
            while ((int)v16 > v126);
            v129 = v116 * v8;
            *(float *)(v10 + 4 * v114++) = v129;
            v113 = (__int16 *)((char *)v113 + v110);
            v112 = (__int16 *)((char *)v112 + v110);
          }
          while (v114 < v15);
          ++v108;
          v10 += 4 * v235;
          v109 = (__int16 *)((char *)v109 + v110);
          v111 = (const __int16 *)((char *)v111 + v110);
        }
        while (v108 != v15);
      }
    }
    else if ((int)v17 <= 0)
    {
      v206 = 0;
      v207 = 0;
      v208 = a4 * 0.0;
      *(float *)&v208 = v8 * 0.0;
      v209 = vdupq_lane_s32(*(int32x2_t *)&v208, 0);
      v210 = (__int16 *)(v10 + 16);
      v211 = 1;
      do
      {
        if (v211 <= v15)
          v212 = v15;
        else
          v212 = v211;
        v213 = v207 + 1;
        if (v207 + 1 > v15)
          v214 = v207 + 1;
        else
          v214 = v15;
        v215 = v214 - v207;
        if (v215 < 8)
          goto LABEL_99;
        v216 = (v212 + v206) & 0xFFFFFFFFFFFFFFF8;
        v207 += v215 & 0xFFFFFFFFFFFFFFF8;
        result = (unint64_t)v210;
        do
        {
          *(int32x4_t *)(result - 16) = v209;
          *(int32x4_t *)result = v209;
          result += 32;
          v216 -= 8;
        }
        while (v216);
        if (v215 != (v215 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_99:
          do
            *(_DWORD *)(v10 + 4 * v207++) = LODWORD(v208);
          while (v207 < v15);
        }
        ++v211;
        --v206;
        v210 += 2 * v235 + 2;
        v10 += 4 * v235;
        v207 = v213;
      }
      while (v213 != v15);
    }
    else
    {
      v100 = 0;
      v101 = (unsigned __int16 *)(v9 + 2);
      v102 = 2 * v12;
      do
      {
        v103 = 0;
        v104 = (unsigned __int16 *)&v9[v12 * v100];
        a5.i16[0] = *v104;
        *(double *)a5.i64 = (double)vmovl_s16(*(int16x4_t *)a5.f32).i32[0];
        v105 = v101;
        do
        {
          a6.i16[0] = *(v105 - 2);
          *(double *)a6.i64 = *(double *)a5.i64 * (double)vmovl_s16(*(int16x4_t *)a6.f32).i32[0] + 0.0;
          if ((_DWORD)v17 != 1)
          {
            a7.n128_u16[0] = v104[1];
            a7.n128_f64[0] = (double)vmovl_s16((int16x4_t)a7.n128_u64[0]).i32[0];
            a8.i16[0] = *(v105 - 1);
            *(double *)a8.i64 = (double)vmovl_s16(*(int16x4_t *)a8.f32).i32[0];
            *(double *)a6.i64 = *(double *)a6.i64 + a7.n128_f64[0] * *(double *)a8.i64;
            if ((_DWORD)v16 != 2)
            {
              a7.n128_u16[0] = v104[2];
              a7.n128_f64[0] = (double)vmovl_s16((int16x4_t)a7.n128_u64[0]).i32[0];
              a8.i16[0] = *v105;
              *(double *)a8.i64 = (double)vmovl_s16(*(int16x4_t *)a8.f32).i32[0];
              *(double *)a6.i64 = *(double *)a6.i64 + a7.n128_f64[0] * *(double *)a8.i64;
            }
          }
          *(double *)a6.i64 = *(double *)a6.i64 * a4;
          a6.f32[0] = *(double *)a6.i64;
          *(_DWORD *)(v10 + 4 * v103) = a6.i32[0];
          v105 = (unsigned __int16 *)((char *)v105 + v102);
          ++v103;
        }
        while (v100 + v103 < v15);
        ++v100;
        v101 = (unsigned __int16 *)((char *)v101 + v102);
        v10 += 4 * v235 + 4;
      }
      while (v100 != v15);
    }
  }
  return result;
}

_BYTE *sub_10023C700(_QWORD *a1, uint64_t a2, uint64_t a3, double a4, double a5, __n128 a6, double a7, __n128 a8, int16x4_t a9, double a10, __n128 a11)
{
  double v11;
  _WORD *v12;
  int64x2_t *v13;
  __n128 *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  _BYTE *result;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  __n128 *v30;
  double *v31;
  uint64_t v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  double *v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64x2_t v47;
  __int16 *v48;
  uint64_t v49;
  double *v50;
  unsigned __int16 *v51;
  uint64_t v52;
  unsigned __int16 *v53;
  double *v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned __int16 *v57;
  double *v58;
  _QWORD *v59;
  uint64_t v60;
  __int16 *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 *v64;
  double *v65;
  double v66;
  unsigned __int16 *v67;
  uint64_t v68;
  double *v69;
  double v70;
  uint64_t *v71;
  double v72;
  double v73;
  double *v74;
  double *v75;
  double v76;
  __int16 *v77;
  uint64_t v78;
  double *v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int16x4_t v84;
  int16x4_t v85;
  int16x4_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64x2_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int16 *v98;
  _WORD *v99;
  uint64_t v100;
  uint64_t v101;
  double *v102;
  _WORD *v103;
  uint64_t v104;
  double *v105;
  uint64_t v106;
  __int16 *v107;
  uint64_t v108;
  double v109;
  __int16 *v110;
  uint64_t v111;
  double *v112;
  double v113;
  double v114;
  double v115;
  double v116;
  int16x4_t v117;
  int16x4_t v118;
  int16x4_t v119;
  uint64_t *v120;
  unsigned __int16 *v121;
  double v122;
  unsigned __int16 *v123;
  uint64_t v124;
  double *v125;
  double v126;
  uint64_t v127;
  double v128;
  int64x2_t v129;
  int v130;
  int64x2_t *v131;
  uint64_t v132;
  int v133;
  int i;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int64x2_t *v142;
  double *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int64x2_t *v151;
  uint64_t v152;
  _BYTE v153[8];
  _BYTE v154[1024];

  v11 = a4;
  v12 = (_WORD *)a1[2];
  v13 = *(int64x2_t **)(a2 + 16);
  v14 = *(__n128 **)(a3 + 16);
  v15 = a1[10];
  if (*(int *)(a3 + 8) <= 1)
    v16 = 0;
  else
    v16 = *(_QWORD *)(a3 + 80) >> 3;
  v17 = (unsigned int *)a1[8];
  v19 = *v17;
  v18 = v17[1];
  if (v14)
    v20 = *(_DWORD *)(a3 + 12) < (int)v18;
  else
    v20 = 0;
  v21 = !v20;
  v22 = 40 * v19;
  if (!v20)
    v22 = 8 * v19;
  result = v153;
  if (v22 >= 0x409)
    operator new[]();
  v24 = v15 >> 1;
  v25 = *(_QWORD *)(a2 + 80) >> 3;
  if ((v21 & 1) == 0)
  {
    v26 = (double *)&v153[8 * (int)v19];
    if ((int)v19 < 1)
      goto LABEL_36;
    v27 = v19 >= 6 && v16 == 1;
    if (v27 && (v26 < &v14->n128_f64[v19] ? (v28 = v14 >= (__n128 *)&v153[32 * v19 + 8 * (int)v19]) : (v28 = 1), v28))
    {
      v29 = v19 & 0x7FFFFFFC;
      v30 = v14 + 1;
      v31 = (double *)&v154[8 * (int)v19 + 56];
      v32 = v19 & 0xFFFFFFFC;
      do
      {
        v33 = v30[-1];
        a8 = *v30;
        v34 = v33;
        a6 = v33;
        v35 = v33;
        v36 = *v30;
        v37 = *v30;
        a11 = *v30;
        v38 = v31 - 8;
        vst4q_f64(v38, *(float64x2x4_t *)(&a6 - 2));
        vst4q_f64(v31, *(float64x2x4_t *)a8.n128_u64);
        v30 += 2;
        v31 += 16;
        v32 -= 4;
      }
      while (v32);
      if (v29 == v19)
      {
LABEL_36:
        v16 = 4 * (v16 != 0);
        v14 = (__n128 *)&v153[8 * (int)v19];
        if ((int)v18 < 1)
          return result;
        goto LABEL_37;
      }
    }
    else
    {
      v29 = 0;
    }
    v39 = &v14->n128_u64[v16 * v29];
    v40 = v19 - v29;
    v41 = (unint64_t *)&v153[32 * v29 + 16 + 8 * (int)v19];
    do
    {
      v42 = *v39;
      *v41 = *v39;
      v41[1] = v42;
      *(v41 - 2) = v42;
      *(v41 - 1) = v42;
      v39 += v16;
      v41 += 4;
      --v40;
    }
    while (v40);
    goto LABEL_36;
  }
  if (!v14)
  {
    if ((int)v18 < 1)
      return result;
    v95 = (int)v18 - 4;
    if ((int)v19 > 0)
    {
      v96 = 0;
      v97 = 2 * v24;
      v98 = v12 + 2;
      v99 = v12;
      while ((_DWORD)v19 != 1)
      {
        v101 = v19 & 0xFFFFFFFE;
        v102 = (double *)v154;
        v103 = v99;
        do
        {
          LOWORD(a4) = *v103;
          a4 = (double)vmovl_s16(*(int16x4_t *)&a4).i32[0];
          LOWORD(a5) = v103[v24];
          a5 = (double)vmovl_s16(*(int16x4_t *)&a5).i32[0];
          *(v102 - 1) = a4;
          *v102 = a5;
          v103 += 2 * v24;
          v102 += 2;
          v101 -= 2;
        }
        while (v101);
        v100 = v19 & 0xFFFFFFFE;
        if (v100 != v19)
          goto LABEL_80;
LABEL_82:
        v107 = v98;
        v108 = v96;
        if (v96 <= v95)
        {
          do
          {
            v109 = 0.0;
            v110 = v107;
            v111 = v19;
            v112 = (double *)v153;
            v113 = 0.0;
            v114 = 0.0;
            v115 = 0.0;
            do
            {
              v116 = *v112++;
              a9.i16[0] = *(v110 - 2);
              *(double *)&v117 = (double)vmovl_s16(a9).i32[0];
              v115 = v115 + v116 * *(double *)&v117;
              v117.i16[0] = *(v110 - 1);
              *(double *)&v118 = (double)vmovl_s16(v117).i32[0];
              v114 = v114 + v116 * *(double *)&v118;
              v118.i16[0] = *v110;
              *(double *)&v119 = (double)vmovl_s16(v118).i32[0];
              v113 = v113 + v116 * *(double *)&v119;
              v119.i16[0] = v110[1];
              *(double *)&a9 = (double)vmovl_s16(v119).i32[0];
              v109 = v109 + v116 * *(double *)&a9;
              v110 = (__int16 *)((char *)v110 + v97);
              --v111;
            }
            while (v111);
            v120 = &v13->i64[v108];
            a6.n128_f64[0] = v114 * v11;
            *(double *)v120 = v115 * v11;
            v120[1] = a6.n128_u64[0];
            a5 = v113 * v11;
            a4 = v109 * v11;
            *((double *)v120 + 2) = a5;
            *((double *)v120 + 3) = a4;
            v108 += 4;
            v107 += 4;
          }
          while ((int)v95 >= (int)v108);
          v108 = v108;
          if ((int)v108 >= (int)v18)
            goto LABEL_74;
LABEL_89:
          v121 = &v12[v108];
          do
          {
            v122 = 0.0;
            v123 = v121;
            v124 = v19;
            v125 = (double *)v153;
            do
            {
              v126 = *v125++;
              a5 = v126;
              a6.n128_u16[0] = *v123;
              a6.n128_f64[0] = (double)vmovl_s16((int16x4_t)a6.n128_u64[0]).i32[0];
              v122 = v122 + v126 * a6.n128_f64[0];
              v123 = (unsigned __int16 *)((char *)v123 + v97);
              --v124;
            }
            while (v124);
            a4 = v122 * v11;
            *(double *)&v13->i64[v108++] = a4;
            ++v121;
          }
          while ((int)v18 > (int)v108);
          goto LABEL_74;
        }
        v108 = v96;
        if ((int)v96 < (int)v18)
          goto LABEL_89;
LABEL_74:
        ++v96;
        v13 = (int64x2_t *)((char *)v13 + 8 * v25);
        ++v99;
        ++v98;
        if (v96 == v18)
          return result;
      }
      v100 = 0;
LABEL_80:
      v104 = v97 * v100;
      v105 = (double *)&v153[8 * v100];
      v106 = v19 - v100;
      do
      {
        LOWORD(a4) = *(_WORD *)((char *)v99 + v104);
        a4 = (double)vmovl_s16(*(int16x4_t *)&a4).i32[0];
        *v105++ = a4;
        v104 += v97;
        --v106;
      }
      while (v106);
      goto LABEL_82;
    }
    v127 = 0;
    v128 = a4 * 0.0;
    v129 = vdupq_lane_s64(COERCE__INT64(v11 * 0.0), 0);
    v130 = v18 - 3;
    v131 = v13 + 4;
    v132 = 8 * v25;
    v133 = 4;
    for (i = -1; ; --i)
    {
      if (v133 <= v130)
        v135 = v18 - 3;
      else
        v135 = v133;
      v136 = v127 + 4;
      if ((int)v127 + 4 <= v130)
        v136 = v18 - 3;
      if (v127 <= v95)
      {
        v138 = v136 + ~(_DWORD)v127;
        v139 = v127;
        if (v138 < 0xC)
          goto LABEL_107;
        v140 = (((v135 + i) >> 2) + 1) & 0x7FFFFFFC;
        v141 = (v138 >> 2) + 1;
        v139 = v127 + 4 * (v141 & 0x7FFFFFFC);
        v137 = v127;
        v142 = v131;
        do
        {
          v142[-4] = v129;
          v142[-3] = v129;
          v142[-2] = v129;
          v142[-1] = v129;
          *v142 = v129;
          v142[1] = v129;
          v142[2] = v129;
          v142[3] = v129;
          v142 += 8;
          v137 += 16;
          v140 -= 4;
        }
        while (v140);
        if ((v141 & 0x7FFFFFFC) != v141)
        {
LABEL_107:
          v143 = (double *)&v13->i64[v139];
          v137 = v139;
          do
          {
            *v143 = v128;
            v143[1] = v128;
            v143[2] = v128;
            v143[3] = v128;
            v137 += 4;
            v143 += 4;
          }
          while ((int)v95 >= v137);
        }
      }
      else
      {
        v137 = v127;
      }
      if (v137 >= (int)v18)
        goto LABEL_95;
      v144 = v137;
      v145 = (v18 + ~v137);
      if (v145 >= 3)
      {
        v147 = v145 + 1;
        v148 = (v145 + 1) & 0x1FFFFFFFCLL;
        v146 = v148 + v144;
        v149 = 8 * v144;
        v150 = v148;
        do
        {
          v151 = (int64x2_t *)((char *)v13 + v149);
          *v151 = v129;
          v151[1] = v129;
          v149 += 32;
          v150 -= 4;
        }
        while (v150);
        if (v147 == v148)
          goto LABEL_95;
      }
      else
      {
        v146 = v144;
      }
      v152 = v146;
      do
      {
        *(double *)&v13->i64[v152++] = v128;
        LODWORD(v146) = v146 + 1;
      }
      while ((int)v18 > (int)v146);
LABEL_95:
      ++v127;
      v131 = (int64x2_t *)((char *)v131 + v132 + 8);
      ++v133;
      v13 = (int64x2_t *)((char *)v13 + v132);
      if (v127 == v18)
        return result;
    }
  }
  v26 = 0;
  if ((int)v18 >= 1)
  {
LABEL_37:
    v43 = 0;
    v44 = (int)v18 - 4;
    v45 = 8 * v16;
    v46 = 2 * v24;
    v47 = vdupq_lane_s64(COERCE__INT64(v11 * 0.0), 0);
    v48 = v12 + 2;
    v49 = 8 * v25;
    v50 = (double *)v14;
    v51 = v12;
    do
    {
      if (v26)
      {
        v52 = v19;
        v53 = v51;
        v54 = v26;
        v55 = v153;
        if ((int)v19 >= 1)
        {
          do
          {
            a6.n128_u16[0] = *v53;
            a6.n128_f64[0] = (double)vmovl_s16((int16x4_t)a6.n128_u64[0]).i32[0] - *v54;
            *v55++ = a6.n128_u64[0];
            v54 = (double *)((char *)v54 + v45);
            v53 = (unsigned __int16 *)((char *)v53 + v46);
            --v52;
          }
          while (v52);
        }
      }
      else if ((int)v19 >= 1)
      {
        v56 = v19;
        v57 = v51;
        v58 = v50;
        v59 = v153;
        do
        {
          a6.n128_u16[0] = *v57;
          a6.n128_f64[0] = (double)vmovl_s16((int16x4_t)a6.n128_u64[0]).i32[0] - *v58;
          *v59++ = a6.n128_u64[0];
          v58 = (double *)((char *)v58 + v45);
          v57 = (unsigned __int16 *)((char *)v57 + v46);
          --v56;
        }
        while (v56);
      }
      LODWORD(v60) = v43;
      v61 = v48;
      v62 = v43;
      if (v43 <= v44)
      {
        do
        {
          a6.n128_f64[0] = v11 * 0.0;
          v72 = v11 * 0.0;
          a8.n128_f64[0] = v11 * 0.0;
          v73 = v11 * 0.0;
          if ((int)v19 >= 1)
          {
            v74 = &v14->n128_f64[v62];
            if (v26)
              v74 = v26;
            v75 = v74 + 2;
            v76 = 0.0;
            v77 = v61;
            v78 = v19;
            v79 = (double *)v153;
            v80 = 0.0;
            v81 = 0.0;
            v82 = 0.0;
            do
            {
              v83 = *v79++;
              a11.n128_u16[0] = *(v77 - 2);
              *(double *)&v84 = (double)vmovl_s16((int16x4_t)a11.n128_u64[0]).i32[0] - *(v75 - 2);
              v82 = v82 + v83 * *(double *)&v84;
              v84.i16[0] = *(v77 - 1);
              *(double *)&v85 = (double)vmovl_s16(v84).i32[0] - *(v75 - 1);
              v81 = v81 + v83 * *(double *)&v85;
              v85.i16[0] = *v77;
              *(double *)&v86 = (double)vmovl_s16(v85).i32[0] - *v75;
              v80 = v80 + v83 * *(double *)&v86;
              v86.i16[0] = v77[1];
              a11.n128_f64[0] = (double)vmovl_s16(v86).i32[0] - v75[1];
              v76 = v76 + v83 * a11.n128_f64[0];
              v77 = (__int16 *)((char *)v77 + v46);
              v75 = (double *)((char *)v75 + v45);
              --v78;
            }
            while (v78);
            v73 = v82 * v11;
            a8.n128_f64[0] = v81 * v11;
            v72 = v80 * v11;
            a6.n128_f64[0] = v76 * v11;
          }
          v71 = &v13->i64[v62];
          *(double *)v71 = v73;
          v71[1] = a8.n128_u64[0];
          *((double *)v71 + 2) = v72;
          v71[3] = a6.n128_u64[0];
          v60 = v62 + 4;
          v61 += 4;
          v62 = v60;
        }
        while ((int)v44 >= (int)v60);
      }
      if ((int)v60 >= (int)v18)
        goto LABEL_38;
      v63 = v60;
      if ((int)v19 >= 1)
      {
        v64 = &v12[v60];
        do
        {
          v65 = &v14->n128_f64[v63];
          if (v26)
            v65 = v26;
          v66 = 0.0;
          v67 = v64;
          v68 = v19;
          v69 = (double *)v153;
          do
          {
            v70 = *v69++;
            a8.n128_u16[0] = *v67;
            a8.n128_f64[0] = (double)vmovl_s16((int16x4_t)a8.n128_u64[0]).i32[0] - *v65;
            v66 = v66 + v70 * a8.n128_f64[0];
            v65 = (double *)((char *)v65 + v45);
            v67 = (unsigned __int16 *)((char *)v67 + v46);
            --v68;
          }
          while (v68);
          a6.n128_f64[0] = v66 * v11;
          v13->i64[v63++] = a6.n128_u64[0];
          ++v64;
        }
        while ((int)v18 > (int)v63);
        goto LABEL_38;
      }
      v87 = (v18 + ~(_DWORD)v60);
      if (v87 >= 3)
      {
        v89 = v87 + 1;
        v90 = (v87 + 1) & 0x1FFFFFFFCLL;
        v88 = v90 + v63;
        v91 = 8 * v63;
        v92 = v90;
        do
        {
          v93 = (int64x2_t *)((char *)v13 + v91);
          *v93 = v47;
          v93[1] = v47;
          v91 += 32;
          v92 -= 4;
        }
        while (v92);
        if (v89 == v90)
          goto LABEL_38;
      }
      else
      {
        v88 = v60;
      }
      v94 = v88;
      do
      {
        *(double *)&v13->i64[v94++] = v11 * 0.0;
        LODWORD(v88) = v88 + 1;
      }
      while ((int)v18 > (int)v88);
LABEL_38:
      ++v43;
      v13 = (int64x2_t *)((char *)v13 + v49);
      ++v51;
      ++v50;
      ++v48;
    }
    while (v43 != v18);
  }
  return result;
}

void sub_10023CF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10 != v10)
  {
    if (a10)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10023CF78(unint64_t result, uint64_t a2, uint64_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, double a7, int16x4_t a8)
{
  double v8;
  int16x8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int16 *v21;
  float64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float64x2_t *v27;
  float64x2_t *v28;
  int16x8_t *v29;
  int16x8_t v30;
  int32x4_t v31;
  int64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  int32x4_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  unint64_t v41;
  float64x2_t *v42;
  int16x8_t v43;
  int32x4_t v44;
  int64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  int32x4_t v48;
  float64x2_t v49;
  int16x8_t *v50;
  __int16 *v51;
  uint64_t v52;
  float64x2_t *v53;
  int v54;
  double v55;
  uint64_t v56;
  __int16 *v57;
  double *v58;
  int16x4_t v59;
  double v60;
  int16x4_t v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double *v68;
  uint64_t v69;
  uint64_t v70;
  float64x2_t *v71;
  int16x8_t *v72;
  uint64_t v73;
  int16x8_t v74;
  int32x4_t v75;
  int64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  int32x4_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  double v87;
  uint64_t v88;
  __int16 *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int16 *v92;
  __int16 *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  __int16 *v97;
  uint64_t v98;
  __int16 *v99;
  __int16 *v100;
  __int16 *v101;
  unint64_t v102;
  unint64_t v103;
  double v104;
  __int16 *v105;
  __int16 *v106;
  int16x4_t v107;
  int16x4_t v108;
  int16x4_t v109;
  double v110;
  int16x4_t v111;
  double v112;
  __int16 *v113;
  int v114;
  int v115;
  int v116;
  __int16 *v117;
  unint64_t v118;
  uint64_t v119;
  const __int16 *v120;
  double v121;
  unint64_t v122;
  const __int16 *v123;
  const __int16 *v124;
  int32x4_t v125;
  int64x2_t v126;
  float64x2_t v127;
  int64x2_t v128;
  int32x4_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  int32x4_t v133;
  float64x2_t v134;
  float64x2_t v135;
  int32x4_t v136;
  int64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  int32x4_t v140;
  float64x2_t v141;
  float64x2_t v142;
  int32x4_t v143;
  float64x2_t v144;
  int32x4_t v145;
  float64x2_t v146;
  float64x2_t v147;
  int64x2_t v148;
  int32x4_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  int32x4_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  int32x4_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  int32x4_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  int32x4_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  int32x4_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  double v177;
  float64x2_t v178;
  float64x2_t v179;
  double v180;
  float64x2_t v181;
  double v182;
  uint64_t v183;
  unint64_t v184;
  int16x4_t v185;
  int16x4_t v186;
  int16x4_t v187;
  double v188;
  double v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  double v194;
  int64x2_t v195;
  __int16 *v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  __int16 *v204;
  uint64_t v205;
  __int16 *v206;
  unint64_t v207;
  unint64_t v208;
  double v209;
  __int16 *v210;
  __int16 *v211;
  int16x4_t v212;
  int16x4_t v213;
  int16x4_t v214;
  double v215;
  int16x4_t v216;
  double v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD v221[2];
  uint64_t v222;
  _QWORD v223[2];
  double v224;
  double v225;
  int16x8x4_t v226;
  int16x8x4_t v227;

  v8 = a4.f64[0];
  v9 = *(int16x8_t **)(result + 16);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(result + 80) >> 1;
  v220 = *(_QWORD *)(a2 + 80) >> 3;
  if (*(int *)(a3 + 8) <= 1)
    v13 = 0;
  else
    v13 = *(_QWORD *)(a3 + 80) >> 3;
  v14 = *(unsigned int **)(result + 64);
  v15 = *v14;
  v16 = (int)v14[1];
  v17 = v14[1];
  if (v11)
  {
    v18 = *(_DWORD *)(a3 + 12);
    result = (unint64_t)v221;
    if ((unint64_t)(8 * v16) >= 0x409)
      operator new[]();
    if ((int)v15 >= 1)
    {
      v19 = 0;
      v218 = v17 & 0xFFFFFFF8;
      v219 = 8 * v13;
      v20 = 2 * v12;
      v21 = &v9->i16[2];
      v22 = *(float64x2_t **)(a3 + 16);
      do
      {
        if (v18 >= (int)v17)
        {
          if ((int)v17 >= 1)
          {
            v25 = 0;
            if (v17 < 8)
              goto LABEL_98;
            if ((unint64_t)v221 - v11 - v219 * v19 < 0x40)
              goto LABEL_98;
            v26 = v17 & 0xFFFFFFF8;
            v27 = (float64x2_t *)v221;
            v28 = v22;
            v29 = v9;
            do
            {
              v30 = *v29++;
              v31 = vmovl_high_s16(v30);
              v32.i64[0] = v31.i32[2];
              v32.i64[1] = v31.i32[3];
              v33 = vcvtq_f64_s64(v32);
              v32.i64[0] = v31.i32[0];
              v32.i64[1] = v31.i32[1];
              v34 = vcvtq_f64_s64(v32);
              v35 = vmovl_s16(*(int16x4_t *)v30.i8);
              v32.i64[0] = v35.i32[2];
              v32.i64[1] = v35.i32[3];
              v36 = vcvtq_f64_s64(v32);
              v32.i64[0] = v35.i32[0];
              v32.i64[1] = v35.i32[1];
              v38 = v28[2];
              v37 = v28[3];
              v40 = *v28;
              v39 = v28[1];
              v28 += 4;
              a4 = vsubq_f64(vcvtq_f64_s64(v32), v40);
              a6 = vsubq_f64(v33, v37);
              v27[2] = vsubq_f64(v34, v38);
              v27[3] = a6;
              a5 = vsubq_f64(v36, v39);
              *v27 = a4;
              v27[1] = a5;
              v27 += 4;
              v26 -= 8;
            }
            while (v26);
            v25 = v17 & 0xFFFFFFF8;
            if (v218 != v17)
            {
LABEL_98:
              do
              {
                LOWORD(a4.f64[0]) = v9->i16[v25];
                a5.f64[0] = v22->f64[v25];
                a4.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a4.f64[0]).i32[0] - a5.f64[0];
                v221[v25++] = *(_QWORD *)&a4.f64[0];
              }
              while (v17 != v25);
            }
          }
          goto LABEL_26;
        }
        if ((int)v16 >= 1)
        {
          v23 = *(uint64_t *)(v11 + 8 * v13 * v19);
          if (v16 >= 8)
          {
            v41 = 0;
            a5 = (float64x2_t)vdupq_lane_s64(v23, 0);
            v42 = (float64x2_t *)v221;
            do
            {
              v43 = v9[v41 / 0x10];
              v44 = vmovl_high_s16(v43);
              v45.i64[0] = v44.i32[2];
              v45.i64[1] = v44.i32[3];
              v46 = vcvtq_f64_s64(v45);
              v45.i64[0] = v44.i32[0];
              v45.i64[1] = v44.i32[1];
              v47 = vcvtq_f64_s64(v45);
              v48 = vmovl_s16(*(int16x4_t *)v43.i8);
              v45.i64[0] = v48.i32[2];
              v45.i64[1] = v48.i32[3];
              v49 = vcvtq_f64_s64(v45);
              v45.i64[0] = v48.i32[0];
              v45.i64[1] = v48.i32[1];
              a6 = vsubq_f64(vcvtq_f64_s64(v45), a5);
              v42[2] = vsubq_f64(v47, a5);
              v42[3] = vsubq_f64(v46, a5);
              *v42 = a6;
              v42[1] = vsubq_f64(v49, a5);
              v42 += 4;
              v41 += 16;
            }
            while (((2 * v17) & 0x1FFFFFFF0) != v41);
            v24 = v17 & 0xFFFFFFF8;
            if (v218 == v17)
              goto LABEL_26;
          }
          else
          {
            v24 = 0;
          }
          do
          {
            LOWORD(a5.f64[0]) = v9->i16[v24];
            a5.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a5.f64[0]).i32[0] - *(double *)&v23;
            v221[v24++] = *(_QWORD *)&a5.f64[0];
          }
          while (v17 != v24);
        }
LABEL_26:
        v50 = v9;
        v51 = v21;
        v52 = v19;
        do
        {
          v53 = (float64x2_t *)(v11 + 8 * v13 * v52);
          if (v18 < (int)v16)
          {
            v224 = v53->f64[0];
            v225 = v224;
            *(double *)v223 = v224;
            *(double *)&v223[1] = v224;
            v53 = (float64x2_t *)v223;
          }
          if ((int)v17 >= 4)
          {
            v56 = 0;
            v55 = 0.0;
            v57 = v51;
            v58 = (double *)&v222;
            do
            {
              LOWORD(a5.f64[0]) = *(v57 - 2);
              LOWORD(a6.f64[0]) = *(v57 - 1);
              *(double *)&v59 = *(v58 - 1) * ((double)vmovl_s16(*(int16x4_t *)&a6.f64[0]).i32[0] - v53->f64[1]);
              v60 = *(double *)&v59 + *(v58 - 2) * ((double)vmovl_s16(*(int16x4_t *)&a5.f64[0]).i32[0] - v53->f64[0]);
              v59.i16[0] = *v57;
              *(double *)&v61 = (double)vmovl_s16(v59).i32[0] - v53[1].f64[0];
              v62 = *v58;
              v63 = v58[1];
              v58 += 4;
              v64 = v60 + v62 * *(double *)&v61;
              v61.i16[0] = v57[1];
              a6.f64[0] = (double)vmovl_s16(v61).i32[0] - v53[1].f64[1];
              a5.f64[0] = v64 + v63 * a6.f64[0];
              v56 += 4;
              v55 = v55 + a5.f64[0];
              v53 += 2 * (v18 == (_DWORD)v16);
              v57 += 4;
            }
            while (v56 <= (int)v17 - 4);
            v54 = ((v17 - 4) & 0xFFFFFFFC) + 4;
            if (v54 >= (int)v16)
              goto LABEL_27;
          }
          else
          {
            v54 = 0;
            v55 = 0.0;
            if ((int)v16 <= 0)
              goto LABEL_27;
          }
          v65 = v54;
          v66 = (v17 + ~v54);
          if (v66 < 7)
          {
            v67 = v65;
            v68 = (double *)v53;
            do
            {
LABEL_41:
              *(_QWORD *)&a5.f64[0] = v221[v67];
              LOWORD(a6.f64[0]) = v50->i16[v67];
              v87 = *v68++;
              a6.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a6.f64[0]).i32[0] - v87;
              v55 = v55 + a5.f64[0] * a6.f64[0];
              ++v67;
            }
            while ((int)v16 > (int)v67);
            goto LABEL_27;
          }
          v69 = v66 + 1;
          v70 = (v66 + 1) & 0x1FFFFFFF8;
          v68 = &v53->f64[v70];
          v67 = v70 + v65;
          v71 = (float64x2_t *)&v221[v65];
          v72 = (int16x8_t *)((char *)v50 + 2 * v65);
          v73 = v70;
          do
          {
            v74 = *v72++;
            v75 = vmovl_high_s16(v74);
            v76.i64[0] = v75.i32[2];
            v76.i64[1] = v75.i32[3];
            v77 = vcvtq_f64_s64(v76);
            v76.i64[0] = v75.i32[0];
            v76.i64[1] = v75.i32[1];
            v78 = vcvtq_f64_s64(v76);
            v79 = vmovl_s16(*(int16x4_t *)v74.i8);
            v76.i64[0] = v79.i32[2];
            v76.i64[1] = v79.i32[3];
            v80 = vcvtq_f64_s64(v76);
            v76.i64[0] = v79.i32[0];
            v76.i64[1] = v79.i32[1];
            v82 = v53[2];
            v81 = v53[3];
            v84 = *v53;
            v83 = v53[1];
            v53 += 4;
            v85 = vmulq_f64(v71[3], vsubq_f64(v77, v81));
            v86 = vmulq_f64(v71[2], vsubq_f64(v78, v82));
            a6 = vmulq_f64(v71[1], vsubq_f64(v80, v83));
            a5 = vmulq_f64(*v71, vsubq_f64(vcvtq_f64_s64(v76), v84));
            v55 = v55
                + a5.f64[0]
                + a5.f64[1]
                + a6.f64[0]
                + a6.f64[1]
                + v86.f64[0]
                + v86.f64[1]
                + v85.f64[0]
                + v85.f64[1];
            v71 += 4;
            v73 -= 8;
          }
          while (v73);
          if (v69 != v70)
            goto LABEL_41;
LABEL_27:
          a4.f64[0] = v55 * v8;
          *(float64_t *)(v10 + 8 * v52++) = a4.f64[0];
          v51 = (__int16 *)((char *)v51 + v20);
          v50 = (int16x8_t *)((char *)v50 + v20);
        }
        while (v52 != v15);
        v10 += 8 * v220;
        ++v19;
        v9 = (int16x8_t *)((char *)v9 + v20);
        v22 = (float64x2_t *)((char *)v22 + v219);
        v21 = (__int16 *)((char *)v21 + v20);
      }
      while (v19 != v15);
    }
  }
  else if ((int)v15 >= 1)
  {
    if ((int)v16 >= 4)
    {
      v94 = (v17 - 4);
      v95 = (v94 & 0xFFFFFFFC) + 4;
      if (v94 >= 0x1C)
      {
        v117 = 0;
        v118 = (v94 >> 2) + 1;
        v119 = 2 * v12;
        do
        {
          v120 = (const __int16 *)v9;
          result = (unint64_t)v117;
          do
          {
            v121 = 0.0;
            v122 = v118 & 0x7FFFFFF8;
            v123 = v120;
            v124 = (const __int16 *)v9;
            do
            {
              v226 = vld4q_s16(v124);
              v124 += 32;
              v125 = vmovl_s16(*(int16x4_t *)v226.val[0].i8);
              v227 = vld4q_s16(v123);
              v123 += 32;
              v126.i64[0] = v125.i32[0];
              v126.i64[1] = v125.i32[1];
              v127 = vcvtq_f64_s64(v126);
              v126.i64[0] = v125.i32[2];
              v126.i64[1] = v125.i32[3];
              v128 = v126;
              v129 = vmovl_high_s16(v226.val[0]);
              v126.i64[0] = v129.i32[0];
              v126.i64[1] = v129.i32[1];
              v130 = vcvtq_f64_s64(v128);
              v131 = vcvtq_f64_s64(v126);
              v126.i64[0] = v129.i32[2];
              v126.i64[1] = v129.i32[3];
              v132 = vcvtq_f64_s64(v126);
              v133 = vmovl_s16(*(int16x4_t *)v227.val[0].i8);
              v126.i64[0] = v133.i32[0];
              v126.i64[1] = v133.i32[1];
              v134 = vcvtq_f64_s64(v126);
              v126.i64[0] = v133.i32[2];
              v126.i64[1] = v133.i32[3];
              v135 = vcvtq_f64_s64(v126);
              v136 = vmovl_high_s16(v227.val[0]);
              v126.i64[0] = v136.i32[0];
              v126.i64[1] = v136.i32[1];
              v137 = v126;
              v126.i64[0] = v136.i32[2];
              v126.i64[1] = v136.i32[3];
              v138 = vcvtq_f64_s64(v137);
              v139 = vcvtq_f64_s64(v126);
              v140 = vmovl_high_s16(v226.val[1]);
              v126.i64[0] = v140.i32[2];
              v126.i64[1] = v140.i32[3];
              v141 = vcvtq_f64_s64(v126);
              v126.i64[0] = v140.i32[0];
              v126.i64[1] = v140.i32[1];
              v142 = vcvtq_f64_s64(v126);
              v143 = vmovl_s16(*(int16x4_t *)v226.val[1].i8);
              v126.i64[0] = v143.i32[2];
              v126.i64[1] = v143.i32[3];
              v144 = vcvtq_f64_s64(v126);
              v126.i64[0] = v143.i32[0];
              v126.i64[1] = v143.i32[1];
              v145 = vmovl_high_s16(v227.val[1]);
              v146 = vcvtq_f64_s64(v126);
              v126.i64[0] = v145.i32[2];
              v126.i64[1] = v145.i32[3];
              v147 = vcvtq_f64_s64(v126);
              v126.i64[0] = v145.i32[0];
              v126.i64[1] = v145.i32[1];
              v148 = v126;
              v149 = vmovl_s16(*(int16x4_t *)v227.val[1].i8);
              v126.i64[0] = v149.i32[2];
              v126.i64[1] = v149.i32[3];
              v150 = vcvtq_f64_s64(v148);
              v151 = vcvtq_f64_s64(v126);
              v126.i64[0] = v149.i32[0];
              v126.i64[1] = v149.i32[1];
              v152 = vmulq_f64(v146, vcvtq_f64_s64(v126));
              v153 = vmulq_f64(v142, v150);
              v154 = vmulq_f64(v141, v147);
              v155 = vmovl_high_s16(v226.val[2]);
              v126.i64[0] = v155.i32[2];
              v126.i64[1] = v155.i32[3];
              v156 = vcvtq_f64_s64(v126);
              v126.i64[0] = v155.i32[0];
              v126.i64[1] = v155.i32[1];
              v157 = vmlaq_f64(v154, v139, v132);
              v158 = vcvtq_f64_s64(v126);
              v159 = vmovl_s16(*(int16x4_t *)v226.val[2].i8);
              v126.i64[0] = v159.i32[2];
              v126.i64[1] = v159.i32[3];
              v160 = vcvtq_f64_s64(v126);
              v126.i64[0] = v159.i32[0];
              v126.i64[1] = v159.i32[1];
              v161 = vmlaq_f64(v153, v138, v131);
              v162 = vcvtq_f64_s64(v126);
              v163 = vmovl_high_s16(v227.val[2]);
              v126.i64[0] = v163.i32[2];
              v126.i64[1] = v163.i32[3];
              v164 = vcvtq_f64_s64(v126);
              v126.i64[0] = v163.i32[0];
              v126.i64[1] = v163.i32[1];
              v165 = vmlaq_f64(v152, v134, v127);
              v166 = vcvtq_f64_s64(v126);
              v167 = vmovl_s16(*(int16x4_t *)v227.val[2].i8);
              v126.i64[0] = v167.i32[2];
              v126.i64[1] = v167.i32[3];
              v168 = vcvtq_f64_s64(v126);
              v126.i64[0] = v167.i32[0];
              v126.i64[1] = v167.i32[1];
              v169 = vmlaq_f64(vmulq_f64(v144, v151), v135, v130);
              v170 = vcvtq_f64_s64(v126);
              v171 = vmovl_s16(*(int16x4_t *)v226.val[3].i8);
              v126.i64[0] = v171.i32[0];
              v126.i64[1] = v171.i32[1];
              v172 = vcvtq_f64_s64(v126);
              v126.i64[0] = v171.i32[2];
              v126.i64[1] = v171.i32[3];
              v173 = vmlaq_f64(v165, v170, v162);
              v174 = vcvtq_f64_s64(v126);
              v226.val[0] = (int16x8_t)vmovl_high_s16(v226.val[3]);
              v126.i64[0] = v226.val[0].i32[0];
              v126.i64[1] = v226.val[0].i32[1];
              v226.val[1] = (int16x8_t)vcvtq_f64_s64(v126);
              v126.i64[0] = v226.val[0].i32[2];
              v126.i64[1] = v226.val[0].i32[3];
              v226.val[0] = (int16x8_t)vcvtq_f64_s64(v126);
              v226.val[2] = (int16x8_t)vmovl_s16(*(int16x4_t *)v227.val[3].i8);
              v126.i64[0] = v226.val[2].i32[0];
              v126.i64[1] = v226.val[2].i32[1];
              v175 = vcvtq_f64_s64(v126);
              v126.i64[0] = v226.val[2].i32[2];
              v126.i64[1] = v226.val[2].i32[3];
              v226.val[2] = (int16x8_t)vcvtq_f64_s64(v126);
              v227.val[0] = (int16x8_t)vmovl_high_s16(v227.val[3]);
              v126.i64[0] = v227.val[0].i32[0];
              v126.i64[1] = v227.val[0].i32[1];
              v227.val[1] = (int16x8_t)vcvtq_f64_s64(v126);
              v126.i64[0] = v227.val[0].i32[2];
              v126.i64[1] = v227.val[0].i32[3];
              v176 = vmlaq_f64(vmlaq_f64(v157, v164, v156), vcvtq_f64_s64(v126), (float64x2_t)v226.val[0]);
              v177 = v176.f64[1];
              v178 = vmlaq_f64(vmlaq_f64(v161, v166, v158), (float64x2_t)v227.val[1], (float64x2_t)v226.val[1]);
              v179 = vmlaq_f64(vmlaq_f64(v169, v168, v160), (float64x2_t)v226.val[2], v174);
              v180 = v179.f64[1];
              v181 = vmlaq_f64(v173, v175, v172);
              v182 = v178.f64[1];
              v121 = v121
                   + v181.f64[0]
                   + v181.f64[1]
                   + v179.f64[0]
                   + v179.f64[1]
                   + v178.f64[0]
                   + v178.f64[1]
                   + v176.f64[0]
                   + v176.f64[1];
              v122 -= 8;
            }
            while (v122);
            v183 = (((v118 >> 3) & 0xFFFFFFF) << 6) | 4;
            v184 = 4 * (v118 & 0x7FFFFFF8);
            if (v118 != (v118 & 0x7FFFFFF8))
            {
              do
              {
                LOWORD(v177) = *(__int16 *)((char *)&v9->i16[-2] + v183);
                LOWORD(v180) = *(const __int16 *)((char *)v120 + v183 - 4);
                LOWORD(v182) = *(__int16 *)((char *)&v9->i16[-1] + v183);
                LOWORD(v175.f64[0]) = *(const __int16 *)((char *)v120 + v183 - 2);
                *(double *)&v185 = (double)vmovl_s16(*(int16x4_t *)&v175.f64[0]).i32[0];
                *(double *)&v186 = (double)vmovl_s16(*(int16x4_t *)&v180).i32[0];
                *(double *)&v187 = (double)vmovl_s16(*(int16x4_t *)&v182).i32[0] * *(double *)&v185;
                v185.i16[0] = *(__int16 *)((char *)v9->i16 + v183);
                v175.f64[0] = (double)vmovl_s16(v185).i32[0];
                v188 = *(double *)&v187 + (double)vmovl_s16(*(int16x4_t *)&v177).i32[0] * *(double *)&v186;
                v186.i16[0] = *(const __int16 *)((char *)v120 + v183);
                v187.i16[0] = *(__int16 *)((char *)&v9->i16[1] + v183);
                v189 = v188 + v175.f64[0] * (double)vmovl_s16(v186).i32[0];
                v186.i32[0] = vmovl_s16(v187).u32[0];
                v187.i16[0] = *(const __int16 *)((char *)v120 + v183 + 2);
                v180 = (double)v186.i32[0];
                v182 = (double)vmovl_s16(v187).i32[0];
                v177 = v189 + v180 * v182;
                v121 = v121 + v177;
                v184 += 4;
                v183 += 8;
              }
              while (v184 <= v94);
            }
            v190 = (v94 & 0xFFFFFFFC) + 4;
            v191 = v95;
            if (v95 < v16)
            {
              do
              {
                LOWORD(v177) = v9->i16[v191];
                v177 = (double)vmovl_s16(*(int16x4_t *)&v177).i32[0];
                LOWORD(v180) = v120[v191];
                v180 = (double)vmovl_s16(*(int16x4_t *)&v180).i32[0];
                v121 = v121 + v177 * v180;
                ++v191;
                ++v190;
              }
              while ((int)v17 > v190);
            }
            *(double *)(v10 + 8 * result++) = v121 * v8;
            v120 = (const __int16 *)((char *)v120 + v119);
          }
          while (result < v15);
          v117 = (__int16 *)((char *)v117 + 1);
          v10 += 8 * v220;
          v9 = (int16x8_t *)((char *)v9 + v119);
        }
        while (v117 != (__int16 *)v15);
      }
      else if (v95 >= v17)
      {
        v203 = 0;
        v204 = &v9->i16[2];
        v205 = 2 * v12;
        do
        {
          v206 = v204;
          v207 = v203;
          do
          {
            v208 = 0;
            v209 = 0.0;
            v210 = v204;
            v211 = v206;
            do
            {
              LOWORD(a5.f64[0]) = *(v210 - 2);
              LOWORD(a6.f64[0]) = *(v211 - 2);
              LOWORD(a7) = *(v210 - 1);
              a8.i16[0] = *(v211 - 1);
              *(double *)&v212 = (double)vmovl_s16(a8).i32[0];
              *(double *)&v213 = (double)vmovl_s16(*(int16x4_t *)&a7).i32[0] * *(double *)&v212;
              *(double *)&v214 = (double)vmovl_s16(*(int16x4_t *)&a6.f64[0]).i32[0];
              v215 = *(double *)&v213 + (double)vmovl_s16(*(int16x4_t *)&a5.f64[0]).i32[0] * *(double *)&v214;
              v214.i16[0] = *v210;
              v213.i16[0] = *v211;
              *(double *)&v216 = (double)vmovl_s16(v213).i32[0];
              v212.i16[0] = v210[1];
              a8 = (int16x4_t)vmovl_s16(v212).u64[0];
              v217 = v215 + (double)vmovl_s16(v214).i32[0] * *(double *)&v216;
              a6.f64[0] = (double)a8.i32[0];
              v216.i16[0] = v211[1];
              a7 = (double)vmovl_s16(v216).i32[0];
              a5.f64[0] = v217 + a6.f64[0] * a7;
              v209 = v209 + a5.f64[0];
              v208 += 4;
              v211 += 4;
              v210 += 4;
            }
            while (v208 <= v94);
            *(double *)(v10 + 8 * v207++) = v209 * v8;
            v206 = (__int16 *)((char *)v206 + v205);
          }
          while (v207 < v15);
          ++v203;
          v10 += 8 * v220;
          v204 = (__int16 *)((char *)v204 + v205);
        }
        while (v203 != v15);
      }
      else
      {
        v96 = 0;
        v97 = &v9->i16[2];
        v98 = 2 * v12;
        v99 = &v9->i16[v95];
        do
        {
          v100 = v99;
          v101 = v97;
          v102 = v96;
          do
          {
            v103 = 0;
            v104 = 0.0;
            v105 = v97;
            v106 = v101;
            do
            {
              LOWORD(a5.f64[0]) = *(v105 - 2);
              LOWORD(a6.f64[0]) = *(v106 - 2);
              LOWORD(a7) = *(v105 - 1);
              a8.i16[0] = *(v106 - 1);
              *(double *)&v107 = (double)vmovl_s16(a8).i32[0];
              *(double *)&v108 = (double)vmovl_s16(*(int16x4_t *)&a7).i32[0] * *(double *)&v107;
              *(double *)&v109 = (double)vmovl_s16(*(int16x4_t *)&a6.f64[0]).i32[0];
              v110 = *(double *)&v108 + (double)vmovl_s16(*(int16x4_t *)&a5.f64[0]).i32[0] * *(double *)&v109;
              v109.i16[0] = *v105;
              v108.i16[0] = *v106;
              *(double *)&v111 = (double)vmovl_s16(v108).i32[0];
              v107.i16[0] = v105[1];
              a8 = (int16x4_t)vmovl_s16(v107).u64[0];
              v112 = v110 + (double)vmovl_s16(v109).i32[0] * *(double *)&v111;
              a6.f64[0] = (double)a8.i32[0];
              v111.i16[0] = v106[1];
              a7 = (double)vmovl_s16(v111).i32[0];
              a5.f64[0] = v112 + a6.f64[0] * a7;
              v104 = v104 + a5.f64[0];
              v103 += 4;
              v106 += 4;
              v105 += 4;
            }
            while (v103 <= v94);
            v113 = v99;
            result = (unint64_t)v100;
            v114 = (v94 & 0xFFFFFFFC) + 4;
            do
            {
              v115 = *v113++;
              a5.f64[0] = (double)v115;
              v116 = *(__int16 *)result;
              result += 2;
              a6.f64[0] = (double)v116;
              v104 = v104 + a5.f64[0] * (double)v116;
              ++v114;
            }
            while ((int)v16 > v114);
            *(double *)(v10 + 8 * v102++) = v104 * v8;
            v101 = (__int16 *)((char *)v101 + v98);
            v100 = (__int16 *)((char *)v100 + v98);
          }
          while (v102 < v15);
          ++v96;
          v10 += 8 * v220;
          v97 = (__int16 *)((char *)v97 + v98);
          v99 = (__int16 *)((char *)v99 + v98);
        }
        while (v96 != v15);
      }
    }
    else if ((int)v17 <= 0)
    {
      v192 = 0;
      v193 = 0;
      v194 = a4.f64[0] * 0.0;
      v195 = vdupq_lane_s64(COERCE__INT64(v8 * 0.0), 0);
      v196 = (__int16 *)(v10 + 16);
      v197 = 1;
      do
      {
        if (v197 <= v15)
          v198 = v15;
        else
          v198 = v197;
        v199 = v193 + 1;
        if (v193 + 1 > v15)
          v200 = v193 + 1;
        else
          v200 = v15;
        v201 = v200 - v193;
        if (v201 < 4)
          goto LABEL_99;
        v202 = (v198 + v192) & 0xFFFFFFFFFFFFFFFCLL;
        v193 += v201 & 0xFFFFFFFFFFFFFFFCLL;
        result = (unint64_t)v196;
        do
        {
          *(int64x2_t *)(result - 16) = v195;
          *(int64x2_t *)result = v195;
          result += 32;
          v202 -= 4;
        }
        while (v202);
        if (v201 != (v201 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_99:
          do
            *(double *)(v10 + 8 * v193++) = v194;
          while (v193 < v15);
        }
        ++v197;
        --v192;
        v196 += 4 * v220 + 4;
        v10 += 8 * v220;
        v193 = v199;
      }
      while (v199 != v15);
    }
    else
    {
      v88 = 0;
      v89 = &v9->i16[2];
      v90 = 2 * v12;
      do
      {
        v91 = 0;
        v92 = (unsigned __int16 *)v9 + v12 * v88;
        LOWORD(a5.f64[0]) = *v92;
        a5.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a5.f64[0]).i32[0];
        v93 = v89;
        do
        {
          LOWORD(a6.f64[0]) = *(v93 - 2);
          a6.f64[0] = a5.f64[0] * (double)vmovl_s16(*(int16x4_t *)&a6.f64[0]).i32[0] + 0.0;
          if ((_DWORD)v17 != 1)
          {
            LOWORD(a7) = v92[1];
            a7 = (double)vmovl_s16(*(int16x4_t *)&a7).i32[0];
            a8.i16[0] = *(v93 - 1);
            *(double *)&a8 = (double)vmovl_s16(a8).i32[0];
            a6.f64[0] = a6.f64[0] + a7 * *(double *)&a8;
            if ((_DWORD)v16 != 2)
            {
              LOWORD(a7) = v92[2];
              a7 = (double)vmovl_s16(*(int16x4_t *)&a7).i32[0];
              a8.i16[0] = *v93;
              *(double *)&a8 = (double)vmovl_s16(a8).i32[0];
              a6.f64[0] = a6.f64[0] + a7 * *(double *)&a8;
            }
          }
          a6.f64[0] = a6.f64[0] * a4.f64[0];
          *(float64_t *)(v10 + 8 * v91) = a6.f64[0];
          v93 = (__int16 *)((char *)v93 + v90);
          ++v91;
        }
        while (v88 + v91 < v15);
        ++v88;
        v89 = (__int16 *)((char *)v89 + v90);
        v10 += 8 * v220 + 8;
      }
      while (v88 != v15);
    }
  }
  return result;
}

_BYTE *sub_10023DBE8(_QWORD *a1, uint64_t a2, uint64_t a3, double a4)
{
  float32x4_t *v4;
  uint64_t v5;
  float32x4_t *v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  _BYTE *result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  float32x4_t *v23;
  float *v24;
  uint64_t v25;
  float *v26;
  const float *v27;
  uint64_t v28;
  float32x4_t *v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  float *v40;
  uint64_t v41;
  float *v42;
  float *v43;
  float *v44;
  uint64_t v45;
  float *v46;
  float *v47;
  float *v48;
  uint64_t v49;
  float32x4_t *v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float *v54;
  double v55;
  float *v56;
  uint64_t v57;
  float *v58;
  float v59;
  float v60;
  float32x4_t v61;
  float32x4_t *v62;
  float64x2_t v63;
  float32x4_t *v64;
  uint64_t v65;
  float *v66;
  float64x2_t v67;
  float v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int32x4_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  int32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t *i;
  uint64_t v85;
  float32x4_t *v86;
  _DWORD *v87;
  uint64_t v88;
  float32x4_t *v89;
  uint64_t v90;
  uint64_t v91;
  float *v92;
  double v93;
  float *v94;
  uint64_t v95;
  float *v96;
  float v97;
  float v98;
  float32x4_t v99;
  float64x2_t v100;
  float32x4_t *v101;
  uint64_t v102;
  float *v103;
  float64x2_t v104;
  float v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int32x4_t *v112;
  uint64_t v113;
  _BYTE v115[1032];
  float32x4x4_t v116;
  float32x4x4_t v117;

  v4 = (float32x4_t *)a1[2];
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(float32x4_t **)(a3 + 16);
  v7 = a1[10];
  if (*(int *)(a3 + 8) <= 1)
    v8 = 0;
  else
    v8 = *(_QWORD *)(a3 + 80) >> 2;
  v9 = (int *)a1[8];
  v11 = *v9;
  v10 = v9[1];
  if (v6)
    v12 = *(_DWORD *)(a3 + 12) < (int)v10;
  else
    v12 = 0;
  v13 = !v12;
  v14 = 20 * v11;
  if (!v12)
    v14 = 4 * v11;
  result = v115;
  if (v14 >= 0x409)
    operator new[]();
  v16 = v7 >> 2;
  v17 = *(_QWORD *)(a2 + 80) >> 2;
  v18 = v9[1];
  if ((v13 & 1) == 0)
  {
    v19 = (float32x4_t *)&v115[4 * v11];
    if ((int)v11 < 1)
      goto LABEL_36;
    v20 = v11 >= 8 && v8 == 1;
    if (v20
      && (v19 < (float32x4_t *)&v6->f32[v11]
        ? (v21 = v6 >= (float32x4_t *)&v115[16 * v11 + 4 * v11])
        : (v21 = 1),
          v21))
    {
      v22 = v11 & 0x7FFFFFF8;
      v23 = v6 + 1;
      v24 = (float *)&v115[4 * v11 + 64];
      v25 = v11 & 0xFFFFFFF8;
      do
      {
        v116.val[0] = v23[-1];
        v117.val[0] = *v23;
        v116.val[1] = v116.val[0];
        v116.val[2] = v116.val[0];
        v116.val[3] = v116.val[0];
        v117.val[1] = *v23;
        v117.val[2] = *v23;
        v117.val[3] = *v23;
        v26 = v24 - 16;
        vst4q_f32(v26, v116);
        vst4q_f32(v24, v117);
        v23 += 2;
        v24 += 32;
        v25 -= 8;
      }
      while (v25);
      if (v22 == v11)
      {
LABEL_36:
        v8 = 4 * (v8 != 0);
        v6 = (float32x4_t *)&v115[4 * v11];
        if ((int)v10 < 1)
          return result;
        goto LABEL_37;
      }
    }
    else
    {
      v22 = 0;
    }
    v27 = &v6->f32[v8 * v22];
    v29 = (float32x4_t *)&v115[16 * v22 + 4 * v11];
    v30 = v11 - v22;
    do
    {
      v31 = vld1q_dup_f32(v27);
      v28 = 4 * v8;
      v27 = (const float *)((char *)v27 + v28);
      *v29++ = v31;
      --v30;
    }
    while (v30);
    goto LABEL_36;
  }
  if (!v6)
  {
    if ((int)v10 < 1)
      return result;
    v78 = 0;
    v79 = v10 - 4;
    v80 = a4 * 0.0;
    *(float *)&v80 = a4 * 0.0;
    v81 = vdupq_lane_s32(*(int32x2_t *)&v80, 0);
    v82 = 4 * v16;
    v83 = 4 * v17;
    for (i = v4; ; i = (float32x4_t *)((char *)i + 4))
    {
      v85 = v11;
      v86 = i;
      v87 = v115;
      if ((int)v11 >= 1)
      {
        do
        {
          *v87++ = v86->i32[0];
          v86 = (float32x4_t *)((char *)v86 + v82);
          --v85;
        }
        while (v85);
      }
      LODWORD(v88) = v78;
      v89 = i;
      v90 = v78;
      if (v78 <= v79)
      {
        do
        {
          v99 = (float32x4_t)v81;
          if ((int)v11 >= 1)
          {
            v100 = 0uLL;
            v101 = v89;
            v102 = v11;
            v103 = (float *)v115;
            v104 = 0uLL;
            do
            {
              v105 = *v103++;
              v104 = vmlaq_n_f64(v104, vcvt_hight_f64_f32(*v101), v105);
              v100 = vmlaq_n_f64(v100, vcvtq_f64_f32(*(float32x2_t *)v101->f32), v105);
              v101 = (float32x4_t *)((char *)v101 + v82);
              --v102;
            }
            while (v102);
            v99 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v100, a4)), vmulq_n_f64(v104, a4));
          }
          *(float32x4_t *)(v5 + 4 * v90) = v99;
          v88 = v90 + 4;
          ++v89;
          v90 = v88;
        }
        while ((int)v79 >= (int)v88);
      }
      if ((int)v88 >= (int)v10)
        goto LABEL_73;
      v91 = v88;
      if ((int)v11 >= 1)
      {
        v92 = &v4->f32[v88];
        do
        {
          v93 = 0.0;
          v94 = v92;
          v95 = v11;
          v96 = (float *)v115;
          do
          {
            v97 = *v96++;
            v93 = v93 + v97 * *v94;
            v94 = (float *)((char *)v94 + v82);
            --v95;
          }
          while (v95);
          v98 = v93 * a4;
          *(float *)(v5 + 4 * v91++) = v98;
          ++v92;
        }
        while ((int)v10 > (int)v91);
        goto LABEL_73;
      }
      v106 = (v10 + ~(_DWORD)v88);
      if (v106 >= 7)
      {
        v108 = v106 + 1;
        v109 = (v106 + 1) & 0x1FFFFFFF8;
        v107 = v109 + v91;
        v110 = 4 * v91;
        v111 = v109;
        do
        {
          v112 = (int32x4_t *)(v5 + v110);
          *v112 = v81;
          v112[1] = v81;
          v110 += 32;
          v111 -= 8;
        }
        while (v111);
        if (v108 == v109)
          goto LABEL_73;
      }
      else
      {
        v107 = v88;
      }
      v113 = 4 * v107;
      do
      {
        *(_DWORD *)(v5 + v113) = LODWORD(v80);
        v113 += 4;
        LODWORD(v107) = v107 + 1;
      }
      while ((int)v10 > (int)v107);
LABEL_73:
      ++v78;
      v5 += v83;
      if (v78 == v10)
        return result;
    }
  }
  v19 = 0;
  if ((int)v10 >= 1)
  {
LABEL_37:
    v32 = 0;
    v33 = v10 - 4;
    v34 = a4 * 0.0;
    *(float *)&v34 = a4 * 0.0;
    v35 = 4 * v8;
    v36 = vdupq_lane_s32(*(int32x2_t *)&v34, 0);
    v37 = 4 * v16;
    v38 = 4 * v17;
    v39 = (float *)v6;
    v40 = (float *)v4;
    do
    {
      if (v19)
      {
        v41 = v11;
        v42 = v40;
        v43 = (float *)v19;
        v44 = (float *)v115;
        if ((int)v11 >= 1)
        {
          do
          {
            *v44++ = *v42 - *v43;
            v43 = (float *)((char *)v43 + v35);
            v42 = (float *)((char *)v42 + v37);
            --v41;
          }
          while (v41);
        }
      }
      else if ((int)v11 >= 1)
      {
        v45 = v11;
        v46 = v40;
        v47 = v39;
        v48 = (float *)v115;
        do
        {
          *v48++ = *v46 - *v47;
          v47 = (float *)((char *)v47 + v35);
          v46 = (float *)((char *)v46 + v37);
          --v45;
        }
        while (v45);
      }
      LODWORD(v49) = v32;
      v50 = (float32x4_t *)v40;
      v51 = v32;
      if (v32 <= v33)
      {
        do
        {
          v61 = (float32x4_t)v36;
          if ((int)v11 >= 1)
          {
            v62 = (float32x4_t *)((char *)v6 + 4 * v51);
            if (v19)
              v62 = v19;
            v63 = 0uLL;
            v64 = v50;
            v65 = v11;
            v66 = (float *)v115;
            v67 = 0uLL;
            do
            {
              v68 = *v66++;
              v69 = vsubq_f32(*v64, *v62);
              v67 = vmlaq_n_f64(v67, vcvt_hight_f64_f32(v69), v68);
              v63 = vmlaq_n_f64(v63, vcvtq_f64_f32(*(float32x2_t *)v69.f32), v68);
              v62 = (float32x4_t *)((char *)v62 + v35);
              v64 = (float32x4_t *)((char *)v64 + v37);
              --v65;
            }
            while (v65);
            v61 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v63, a4)), vmulq_n_f64(v67, a4));
          }
          *(float32x4_t *)(v5 + 4 * v51) = v61;
          v49 = v51 + 4;
          ++v50;
          v51 = v49;
        }
        while ((int)v33 >= (int)v49);
      }
      if ((int)v49 >= (int)v10)
        goto LABEL_38;
      v52 = v49;
      if ((int)v11 >= 1)
      {
        v53 = &v4->f32[v49];
        do
        {
          v54 = &v6->f32[v52];
          if (v19)
            v54 = (float *)v19;
          v55 = 0.0;
          v56 = v53;
          v57 = v11;
          v58 = (float *)v115;
          do
          {
            v59 = *v58++;
            v55 = v55 + v59 * (float)(*v56 - *v54);
            v54 = (float *)((char *)v54 + v35);
            v56 = (float *)((char *)v56 + v37);
            --v57;
          }
          while (v57);
          v60 = v55 * a4;
          *(float *)(v5 + 4 * v52++) = v60;
          ++v53;
        }
        while ((int)v10 > (int)v52);
        goto LABEL_38;
      }
      v70 = (v10 + ~(_DWORD)v49);
      if (v70 >= 7)
      {
        v72 = v70 + 1;
        v73 = (v70 + 1) & 0x1FFFFFFF8;
        v71 = v73 + v52;
        v74 = 4 * v52;
        v75 = v73;
        do
        {
          v76 = (int32x4_t *)(v5 + v74);
          *v76 = v36;
          v76[1] = v36;
          v74 += 32;
          v75 -= 8;
        }
        while (v75);
        if (v72 == v73)
          goto LABEL_38;
      }
      else
      {
        v71 = v49;
      }
      v77 = 4 * v71;
      do
      {
        *(_DWORD *)(v5 + v77) = LODWORD(v34);
        v77 += 4;
        LODWORD(v71) = v71 + 1;
      }
      while ((int)v10 > (int)v71);
LABEL_38:
      ++v32;
      v5 += v38;
      ++v40;
      ++v39;
    }
    while (v32 != v18);
  }
  return result;
}

void sub_10023E21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a12 != v12)
  {
    if (a12)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

int32x4_t *sub_10023E24C(int32x4_t *result, uint64_t a2, uint64_t a3, double a4)
{
  double v4;
  uint64_t v5;
  int32x4_t *v6;
  float32x4_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  uint64_t v33;
  float32x4_t v34;
  float *v35;
  float *v36;
  float *v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float *v43;
  uint64_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  int v47;
  double v48;
  uint64_t v49;
  float *v50;
  float *v51;
  double v52;
  double v53;
  float v54;
  float v55;
  double v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  float32x4_t *v65;
  float32x4_t *v66;
  float32x4_t *v67;
  uint64_t v68;
  float32x4_t v69;
  float64x2_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  uint64_t v79;
  float v80;
  unint64_t v81;
  uint64_t v82;
  float *v83;
  uint64_t v84;
  uint64_t v85;
  float *v86;
  float *v87;
  __int32 v88;
  double v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const float *v100;
  unint64_t v101;
  __int32 v102;
  unint64_t v103;
  double v104;
  uint64_t v105;
  const float *v106;
  const float *v107;
  const float *v108;
  const float *v109;
  float64x2_t v110;
  float64x2_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  double v131;
  int32x4_t v132;
  int32x4_t *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  float32x4_t *v144;
  _BYTE v145[8];
  uint64_t v146;
  _BYTE v147[1016];
  float32x4_t v148;
  float32x2x4_t v149;
  float32x2x4_t v150;
  float32x2x4_t v151;
  float32x2x4_t v152;

  v4 = a4;
  v5 = result[1].i64[0];
  v6 = *(int32x4_t **)(a2 + 16);
  v7 = *(float32x4_t **)(a3 + 16);
  v8 = result[5].u64[0];
  v142 = *(_QWORD *)(a2 + 80) >> 2;
  if (*(int *)(a3 + 8) <= 1)
    v9 = 0;
  else
    v9 = *(_QWORD *)(a3 + 80) >> 2;
  v10 = (unsigned int *)result[4].i64[0];
  v11 = *v10;
  v12 = (int)v10[1];
  v13 = v10[1];
  if (!v7)
  {
    if ((int)v11 < 1)
      return result;
    v81 = v8 >> 2;
    if ((int)v13 < 4)
    {
      if ((int)v12 <= 0)
      {
        v129 = 0;
        v130 = 0;
        v131 = a4 * 0.0;
        *(float *)&v131 = v4 * 0.0;
        v132 = vdupq_lane_s32(*(int32x2_t *)&v131, 0);
        v133 = v6 + 1;
        v134 = 1;
        do
        {
          if (v134 <= v11)
            v135 = v11;
          else
            v135 = v134;
          v136 = v130 + 1;
          if (v130 + 1 > v11)
            v137 = v130 + 1;
          else
            v137 = v11;
          v138 = v137 - v130;
          if (v138 < 8)
            goto LABEL_94;
          v139 = (v135 + v129) & 0xFFFFFFFFFFFFFFF8;
          v130 += v138 & 0xFFFFFFFFFFFFFFF8;
          result = v133;
          do
          {
            result[-1] = v132;
            *result = v132;
            result += 2;
            v139 -= 8;
          }
          while (v139);
          if (v138 != (v138 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_94:
            do
              v6->i32[v130++] = LODWORD(v131);
            while (v130 < v11);
          }
          ++v134;
          --v129;
          v133 = (int32x4_t *)((char *)v133 + 4 * v142 + 4);
          v6 = (int32x4_t *)((char *)v6 + 4 * v142);
          v130 = v136;
        }
        while (v136 != v11);
      }
      else
      {
        v82 = 0;
        v83 = (float *)(v5 + 8);
        v84 = 4 * v81;
        do
        {
          v85 = 0;
          v86 = (float *)(v5 + 4 * v81 * v82);
          v87 = v83;
          do
          {
            v89 = *v86 * *(v87 - 2) + 0.0;
            if ((_DWORD)v13 != 1)
            {
              v89 = v89 + v86[1] * *(v87 - 1);
              if ((_DWORD)v12 != 2)
                v89 = v89 + v86[2] * *v87;
            }
            *(float *)&v88 = v89 * a4;
            v6->i32[v85] = v88;
            v87 = (float *)((char *)v87 + v84);
            ++v85;
          }
          while (v82 + v85 < v11);
          ++v82;
          v83 = (float *)((char *)v83 + v84);
          v6 = (int32x4_t *)((char *)v6 + 4 * v142 + 4);
        }
        while (v82 != v11);
      }
      return result;
    }
    v90 = 0;
    v91 = (v12 - 4);
    v92 = (v91 & 0xFFFFFFFC) + 4;
    v93 = v12 - (v91 & 0xFFFFFFFC) - 5;
    v94 = (v91 >> 2) + 1;
    v95 = (v93 + 1) & 0x1FFFFFFF8;
    result = (int32x4_t *)(v5 + 32);
    v96 = 4 * v81;
    v97 = v5 + 8;
LABEL_60:
    v98 = v5;
    v99 = v97;
    v100 = (const float *)result;
    v101 = v90;
    while (v91 >= 0xC)
    {
      v104 = 0.0;
      v105 = v94 & 0x7FFFFFFC;
      v106 = v100;
      v107 = (const float *)result;
      do
      {
        v108 = v107 - 8;
        v149 = vld4_f32(v108);
        v150 = vld4_f32(v107);
        v109 = v106 - 8;
        v151 = vld4_f32(v109);
        v152 = vld4_f32(v106);
        v110 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(v149.val[1]), vcvtq_f64_f32(v151.val[1])), vcvtq_f64_f32(v151.val[0]), vcvtq_f64_f32(v149.val[0])), vcvtq_f64_f32(v151.val[2]), vcvtq_f64_f32(v149.val[2])), vcvtq_f64_f32(v151.val[3]), vcvtq_f64_f32(v149.val[3]));
        v111 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(v150.val[1]), vcvtq_f64_f32(v152.val[1])), vcvtq_f64_f32(v152.val[0]), vcvtq_f64_f32(v150.val[0])), vcvtq_f64_f32(v152.val[2]), vcvtq_f64_f32(v150.val[2])), vcvtq_f64_f32(v152.val[3]), vcvtq_f64_f32(v150.val[3]));
        v104 = v104 + v110.f64[0] + v110.f64[1] + v111.f64[0] + v111.f64[1];
        v107 += 16;
        v106 += 16;
        v105 -= 4;
      }
      while (v105);
      v103 = 4 * (v94 & 0x7FFFFFFC);
      if (v94 != (v94 & 0x7FFFFFFC))
        goto LABEL_67;
LABEL_69:
      if (v92 < v12)
      {
        if (v93 >= 7)
        {
          v116 = 4 * ((v91 & 0xFFFFFFFC) + 4);
          v117 = (v93 + 1) & 0x1FFFFFFF8;
          do
          {
            v118 = *(float32x4_t *)(v5 + v116);
            v119 = *(float32x4_t *)(v5 + v116 + 16);
            v120 = vcvtq_f64_f32(*(float32x2_t *)v118.f32);
            v121 = vcvtq_f64_f32(*(float32x2_t *)v119.f32);
            v122 = *(float32x4_t *)(v98 + v116);
            v123 = *(float32x4_t *)(v98 + v116 + 16);
            v124 = vmulq_f64(vcvt_hight_f64_f32(v118), vcvt_hight_f64_f32(v122));
            v125 = vmulq_f64(v120, vcvtq_f64_f32(*(float32x2_t *)v122.f32));
            v126 = vmulq_f64(vcvt_hight_f64_f32(v119), vcvt_hight_f64_f32(v123));
            v127 = vmulq_f64(v121, vcvtq_f64_f32(*(float32x2_t *)v123.f32));
            v104 = v104
                 + v125.f64[0]
                 + v125.f64[1]
                 + v124.f64[0]
                 + v124.f64[1]
                 + v127.f64[0]
                 + v127.f64[1]
                 + v126.f64[0]
                 + v126.f64[1];
            v116 += 32;
            v117 -= 8;
          }
          while (v117);
          v115 = v95 + v92;
          if (v93 + 1 == v95)
            goto LABEL_61;
        }
        else
        {
          v115 = (v91 & 0xFFFFFFFC) + 4;
        }
        v128 = 4 * v115;
        do
        {
          v104 = v104 + *(float *)(v5 + v128) * *(float *)(v98 + v128);
          v128 += 4;
          LODWORD(v115) = v115 + 1;
        }
        while ((int)v12 > (int)v115);
      }
LABEL_61:
      *(float *)&v102 = v104 * v4;
      v6->i32[v101++] = v102;
      v100 = (const float *)((char *)v100 + v96);
      v99 += v96;
      v98 += v96;
      if (v101 >= v11)
      {
        v6 = (int32x4_t *)((char *)v6 + 4 * v142);
        ++v90;
        result = (int32x4_t *)((char *)result + v96);
        v5 += v96;
        v97 += v96;
        if (v90 == v11)
          return result;
        goto LABEL_60;
      }
    }
    v103 = 0;
    v104 = 0.0;
LABEL_67:
    v112 = 4 * v103;
    v113 = v99;
    v114 = v5;
    do
    {
      v104 = v104
           + *(float *)(v114 + v112 + 4) * *(float *)(v113 + v112 - 4)
           + *(float *)(v114 + v112) * *(float *)(v113 + v112 - 8)
           + *(float *)(v114 + v112 + 8) * *(float *)(v113 + v112)
           + *(float *)(v114 + v112 + 12) * *(float *)(v113 + v112 + 4);
      v103 += 4;
      v114 += 16;
      v113 += 16;
    }
    while (v103 <= v91);
    goto LABEL_69;
  }
  v14 = *(_DWORD *)(a3 + 12);
  result = (int32x4_t *)v145;
  if ((unint64_t)(4 * v12) >= 0x409)
    operator new[]();
  if ((int)v11 >= 1)
  {
    v15 = 0;
    v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v140 = v13 & 0xFFFFFFF8;
    v17 = (float32x4_t *)(v5 + 16);
    v18 = v7 + 1;
    v19 = (4 * v13) & 0x3FFFFFFE0;
    v20 = (float *)(v5 + 8);
    v21 = v5;
    v22 = *(_QWORD *)(a3 + 16);
    v141 = 4 * v9;
    do
    {
      v23 = v5 + v16 * v15;
      if (v14 < (int)v13)
      {
        if ((int)v12 >= 1)
        {
          v24 = 0;
          LODWORD(a4) = v7->i32[v9 * v15];
          if (v12 < 8)
            goto LABEL_95;
          if ((unint64_t)&v145[-v23] < 0x20)
            goto LABEL_95;
          v25 = 0;
          v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
          do
          {
            v27 = vsubq_f32(*(float32x4_t *)(v21 + v25 + 16), v26);
            v28 = (float32x4_t *)&v145[v25];
            *v28 = vsubq_f32(*(float32x4_t *)(v21 + v25), v26);
            v28[1] = v27;
            v25 += 32;
          }
          while (v19 != v25);
          v24 = v13 & 0xFFFFFFF8;
          if (v140 != v13)
          {
LABEL_95:
            do
            {
              *(float *)&v145[4 * v24] = *(float *)(v21 + 4 * v24) - *(float *)&a4;
              ++v24;
            }
            while (v13 != v24);
          }
        }
        goto LABEL_29;
      }
      if ((int)v13 >= 1)
      {
        if (v13 >= 8)
        {
          v29 = 0;
          if ((unint64_t)&v145[-v23] >= 0x20 && (unint64_t)(v145 - ((char *)v7 + v141 * v15)) >= 0x20)
          {
            v30 = v18;
            v31 = (float32x4_t *)v147;
            v32 = v17;
            v33 = v13 & 0xFFFFFFF8;
            do
            {
              v34 = vsubq_f32(*v32, *v30);
              v31[-1] = vsubq_f32(v32[-1], v30[-1]);
              *v31 = v34;
              v32 += 2;
              v31 += 2;
              v30 += 2;
              v33 -= 8;
            }
            while (v33);
            v29 = v13 & 0xFFFFFFF8;
            if (v140 == v13)
              goto LABEL_29;
          }
        }
        else
        {
          v29 = 0;
        }
        v35 = (float *)&v145[4 * v29];
        v36 = (float *)(v22 + 4 * v29);
        v37 = (float *)(v21 + 4 * v29);
        v38 = v13 - v29;
        do
        {
          v39 = *v37++;
          v40 = v39;
          v41 = *v36++;
          *v35++ = v40 - v41;
          --v38;
        }
        while (v38);
      }
LABEL_29:
      v143 = v22;
      v144 = v17;
      v42 = v21;
      v43 = v20;
      v44 = v15;
      do
      {
        v45 = (float32x4_t *)((char *)v7 + 4 * v9 * v44);
        if (v14 < (int)v12)
        {
          v46 = vld1q_dup_f32(v45->f32);
          v148 = v46;
          v45 = &v148;
        }
        if ((int)v13 >= 4)
        {
          v49 = 0;
          v48 = 0.0;
          v50 = v43;
          v51 = (float *)&v146;
          do
          {
            v52 = (float)(*(v50 - 2) - v45->f32[0]);
            v53 = *(v51 - 1) * (float)(*(v50 - 1) - v45->f32[1]);
            v54 = *v50;
            v55 = v50[1];
            v50 += 4;
            v56 = v53 + *(v51 - 2) * v52;
            *(float *)&v53 = v54 - v45->f32[2];
            v57 = *v51;
            v58 = v51[1];
            v51 += 4;
            v49 += 4;
            v48 = v48 + v56 + v57 * *(float *)&v53 + v58 * (float)(v55 - v45->f32[3]);
            v45 += v14 == (_DWORD)v13;
          }
          while (v49 <= (int)v12 - 4);
          v47 = ((v12 - 4) & 0xFFFFFFFC) + 4;
          if (v47 >= (int)v13)
            goto LABEL_30;
        }
        else
        {
          v47 = 0;
          v48 = 0.0;
          if ((int)v13 <= 0)
            goto LABEL_30;
        }
        v59 = v47;
        v60 = (v13 + ~v47);
        if (v60 < 7)
        {
          v61 = v59;
          v62 = (float *)v45;
LABEL_44:
          v79 = 4 * v61;
          do
          {
            v80 = *v62++;
            v48 = v48 + *(float *)&v145[v79] * (float)(*(float *)(v42 + v79) - v80);
            v79 += 4;
            LODWORD(v61) = v61 + 1;
          }
          while ((int)v13 > (int)v61);
          goto LABEL_30;
        }
        v63 = v60 + 1;
        v61 = (v63 & 0x1FFFFFFF8) + v59;
        v62 = &v45->f32[v63 & 0x1FFFFFFF8];
        v64 = 4 * v59;
        v65 = (float32x4_t *)(v42 + 4 * v59);
        v66 = v45 + 1;
        v67 = (float32x4_t *)&v147[v64];
        v68 = v63 & 0x1FFFFFFF8;
        do
        {
          v69 = v67[-1];
          v70 = vcvtq_f64_f32(*(float32x2_t *)v69.f32);
          v71 = *v65;
          v72 = v65[1];
          v65 += 2;
          v73 = vsubq_f32(v71, v66[-1]);
          v74 = vsubq_f32(v72, *v66);
          v75 = vmulq_f64(vcvt_hight_f64_f32(v69), vcvt_hight_f64_f32(v73));
          v76 = vmulq_f64(v70, vcvtq_f64_f32(*(float32x2_t *)v73.f32));
          v77 = vmulq_f64(vcvt_hight_f64_f32(*v67), vcvt_hight_f64_f32(v74));
          v78 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v67->f32), vcvtq_f64_f32(*(float32x2_t *)v74.f32));
          v48 = v48
              + v76.f64[0]
              + v76.f64[1]
              + v75.f64[0]
              + v75.f64[1]
              + v78.f64[0]
              + v78.f64[1]
              + v77.f64[0]
              + v77.f64[1];
          v66 += 2;
          v67 += 2;
          v68 -= 8;
        }
        while (v68);
        if (v63 != (v63 & 0x1FFFFFFF8))
          goto LABEL_44;
LABEL_30:
        a4 = v48 * v4;
        *(float *)&a4 = a4;
        v6->i32[v44++] = LODWORD(a4);
        v43 = (float *)((char *)v43 + v16);
        v42 += v16;
      }
      while (v44 != v11);
      ++v15;
      v6 = (int32x4_t *)((char *)v6 + 4 * v142);
      v17 = (float32x4_t *)((char *)v144 + v16);
      v19 = (4 * v13) & 0x3FFFFFFE0;
      v18 = (float32x4_t *)((char *)v18 + v141);
      v22 = v143 + v141;
      v21 += v16;
      v20 = (float *)((char *)v20 + v16);
    }
    while (v15 != v11);
  }
  return result;
}

_BYTE *sub_10023EB74(_QWORD *a1, uint64_t a2, uint64_t a3, double a4)
{
  float *v4;
  int64x2_t *v5;
  float64x2_t *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  _BYTE *result;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  float64x2_t *v22;
  double *v23;
  uint64_t v24;
  double *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64x2_t v34;
  float32x2_t *v35;
  uint64_t v36;
  double *v37;
  float *v38;
  uint64_t v39;
  float *v40;
  double *v41;
  double *v42;
  uint64_t v43;
  float *v44;
  double *v45;
  double *v46;
  uint64_t v47;
  float32x2_t *v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  double *v52;
  double v53;
  float *v54;
  uint64_t v55;
  double *v56;
  double v57;
  float64x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t *v61;
  float64x2_t *v62;
  float64x2_t v63;
  float32x2_t *v64;
  uint64_t v65;
  const double *v66;
  float64x2_t v67;
  float64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64x2_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float32x2_t *v80;
  float *v81;
  uint64_t v82;
  uint64_t v83;
  double *v84;
  float *v85;
  double v86;
  uint64_t v87;
  double *v88;
  uint64_t v89;
  float32x2_t *v90;
  uint64_t v91;
  float64x2_t v92;
  float32x2_t *v93;
  uint64_t v94;
  const double *v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t *v98;
  float *v99;
  double v100;
  float *v101;
  uint64_t v102;
  double *v103;
  double v104;
  uint64_t v105;
  double v106;
  int64x2_t v107;
  int v108;
  int64x2_t *v109;
  uint64_t v110;
  int v111;
  int i;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64x2_t *v120;
  double *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int64x2_t *v129;
  uint64_t v130;
  _BYTE v132[8];
  _BYTE v133[1024];
  float64x2x4_t v134;
  float64x2x4_t v135;

  v4 = (float *)a1[2];
  v5 = *(int64x2_t **)(a2 + 16);
  v6 = *(float64x2_t **)(a3 + 16);
  v7 = a1[10];
  if (*(int *)(a3 + 8) <= 1)
    v8 = 0;
  else
    v8 = *(_QWORD *)(a3 + 80) >> 3;
  v9 = (unsigned int *)a1[8];
  v11 = *v9;
  v10 = v9[1];
  if (v6)
    v12 = *(_DWORD *)(a3 + 12) < (int)v10;
  else
    v12 = 0;
  v13 = !v12;
  v14 = 40 * v11;
  if (!v12)
    v14 = 8 * v11;
  result = v132;
  if (v14 >= 0x409)
    operator new[]();
  v16 = v7 >> 2;
  v17 = *(_QWORD *)(a2 + 80) >> 3;
  if ((v13 & 1) == 0)
  {
    v18 = (double *)&v132[8 * (int)v11];
    if ((int)v11 < 1)
      goto LABEL_36;
    v19 = v11 >= 6 && v8 == 1;
    if (v19 && (v18 < &v6->f64[v11] ? (v20 = v6 >= (float64x2_t *)&v132[32 * v11 + 8 * (int)v11]) : (v20 = 1), v20))
    {
      v21 = v11 & 0x7FFFFFFC;
      v22 = v6 + 1;
      v23 = (double *)&v133[8 * (int)v11 + 56];
      v24 = v11 & 0xFFFFFFFC;
      do
      {
        v134.val[0] = v22[-1];
        v135.val[0] = *v22;
        v134.val[1] = v134.val[0];
        v134.val[2] = v134.val[0];
        v134.val[3] = v134.val[0];
        v135.val[1] = *v22;
        v135.val[2] = *v22;
        v135.val[3] = *v22;
        v25 = v23 - 8;
        vst4q_f64(v25, v134);
        vst4q_f64(v23, v135);
        v22 += 2;
        v23 += 16;
        v24 -= 4;
      }
      while (v24);
      if (v21 == v11)
      {
LABEL_36:
        v8 = 4 * (v8 != 0);
        v6 = (float64x2_t *)&v132[8 * (int)v11];
        if ((int)v10 < 1)
          return result;
        goto LABEL_37;
      }
    }
    else
    {
      v21 = 0;
    }
    v26 = (uint64_t *)&v6->f64[v8 * v21];
    v27 = v11 - v21;
    v28 = (uint64_t *)&v132[32 * v21 + 16 + 8 * (int)v11];
    do
    {
      v29 = *v26;
      *v28 = *v26;
      v28[1] = v29;
      *(v28 - 2) = v29;
      *(v28 - 1) = v29;
      v26 += v8;
      v28 += 4;
      --v27;
    }
    while (v27);
    goto LABEL_36;
  }
  if (!v6)
  {
    if ((int)v10 < 1)
      return result;
    v77 = (int)v10 - 4;
    if ((int)v11 > 0)
    {
      v78 = 0;
      v79 = 4 * v16;
      v80 = (float32x2_t *)(v4 + 2);
      v81 = v4;
      while ((_DWORD)v11 != 1)
      {
        v83 = v11 & 0xFFFFFFFE;
        v84 = (double *)v133;
        v85 = v81;
        do
        {
          v86 = v85[v16];
          *(v84 - 1) = *v85;
          *v84 = v86;
          v85 += 2 * v16;
          v84 += 2;
          v83 -= 2;
        }
        while (v83);
        v82 = v11 & 0xFFFFFFFE;
        if (v82 != v11)
          goto LABEL_80;
LABEL_82:
        v90 = v80;
        v91 = v78;
        if (v78 <= v77)
        {
          do
          {
            v92 = 0uLL;
            v93 = v90;
            v94 = v11;
            v95 = (const double *)v132;
            v96 = 0uLL;
            do
            {
              v97 = vld1q_dup_f64(v95++);
              v92 = vmlaq_f64(v92, vcvtq_f64_f32(v93[-1]), v97);
              v96 = vmlaq_f64(v96, vcvtq_f64_f32(*v93), v97);
              v93 = (float32x2_t *)((char *)v93 + v79);
              --v94;
            }
            while (v94);
            v98 = (float64x2_t *)((char *)v5 + 8 * v91);
            *v98 = vmulq_n_f64(v92, a4);
            v98[1] = vmulq_n_f64(v96, a4);
            v91 += 4;
            v90 += 2;
          }
          while ((int)v77 >= (int)v91);
          v91 = v91;
          if ((int)v91 >= (int)v10)
            goto LABEL_74;
LABEL_89:
          v99 = &v4[v91];
          do
          {
            v100 = 0.0;
            v101 = v99;
            v102 = v11;
            v103 = (double *)v132;
            do
            {
              v104 = *v103++;
              v100 = v100 + v104 * *v101;
              v101 = (float *)((char *)v101 + v79);
              --v102;
            }
            while (v102);
            *(double *)&v5->i64[v91++] = v100 * a4;
            ++v99;
          }
          while ((int)v10 > (int)v91);
          goto LABEL_74;
        }
        v91 = v78;
        if ((int)v78 < (int)v10)
          goto LABEL_89;
LABEL_74:
        ++v78;
        v5 = (int64x2_t *)((char *)v5 + 8 * v17);
        ++v81;
        v80 = (float32x2_t *)((char *)v80 + 4);
        if (v78 == v10)
          return result;
      }
      v82 = 0;
LABEL_80:
      v87 = v79 * v82;
      v88 = (double *)&v132[8 * v82];
      v89 = v11 - v82;
      do
      {
        *v88++ = *(float *)((char *)v81 + v87);
        v87 += v79;
        --v89;
      }
      while (v89);
      goto LABEL_82;
    }
    v105 = 0;
    v106 = a4 * 0.0;
    v107 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
    v108 = v10 - 3;
    v109 = v5 + 4;
    v110 = 8 * v17;
    v111 = 4;
    for (i = -1; ; --i)
    {
      if (v111 <= v108)
        v113 = v10 - 3;
      else
        v113 = v111;
      v114 = v105 + 4;
      if ((int)v105 + 4 <= v108)
        v114 = v10 - 3;
      if (v105 <= v77)
      {
        v116 = v114 + ~(_DWORD)v105;
        v117 = v105;
        if (v116 < 0xC)
          goto LABEL_107;
        v118 = (((v113 + i) >> 2) + 1) & 0x7FFFFFFC;
        v119 = (v116 >> 2) + 1;
        v117 = v105 + 4 * (v119 & 0x7FFFFFFC);
        v115 = v105;
        v120 = v109;
        do
        {
          v120[-4] = v107;
          v120[-3] = v107;
          v120[-2] = v107;
          v120[-1] = v107;
          *v120 = v107;
          v120[1] = v107;
          v120[2] = v107;
          v120[3] = v107;
          v120 += 8;
          v115 += 16;
          v118 -= 4;
        }
        while (v118);
        if ((v119 & 0x7FFFFFFC) != v119)
        {
LABEL_107:
          v121 = (double *)&v5->i64[v117];
          v115 = v117;
          do
          {
            *v121 = v106;
            v121[1] = v106;
            v121[2] = v106;
            v121[3] = v106;
            v115 += 4;
            v121 += 4;
          }
          while ((int)v77 >= v115);
        }
      }
      else
      {
        v115 = v105;
      }
      if (v115 >= (int)v10)
        goto LABEL_95;
      v122 = v115;
      v123 = (v10 + ~v115);
      if (v123 >= 3)
      {
        v125 = v123 + 1;
        v126 = (v123 + 1) & 0x1FFFFFFFCLL;
        v124 = v126 + v122;
        v127 = 8 * v122;
        v128 = v126;
        do
        {
          v129 = (int64x2_t *)((char *)v5 + v127);
          *v129 = v107;
          v129[1] = v107;
          v127 += 32;
          v128 -= 4;
        }
        while (v128);
        if (v125 == v126)
          goto LABEL_95;
      }
      else
      {
        v124 = v122;
      }
      v130 = v124;
      do
      {
        *(double *)&v5->i64[v130++] = v106;
        LODWORD(v124) = v124 + 1;
      }
      while ((int)v10 > (int)v124);
LABEL_95:
      ++v105;
      v109 = (int64x2_t *)((char *)v109 + v110 + 8);
      ++v111;
      v5 = (int64x2_t *)((char *)v5 + v110);
      if (v105 == v10)
        return result;
    }
  }
  v18 = 0;
  if ((int)v10 >= 1)
  {
LABEL_37:
    v30 = 0;
    v31 = (int)v10 - 4;
    v32 = 8 * v8;
    v33 = 4 * v16;
    v34 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
    v35 = (float32x2_t *)(v4 + 2);
    v36 = 8 * v17;
    v37 = (double *)v6;
    v38 = v4;
    do
    {
      if (v18)
      {
        v39 = v11;
        v40 = v38;
        v41 = v18;
        v42 = (double *)v132;
        if ((int)v11 >= 1)
        {
          do
          {
            *v42++ = *v40 - *v41;
            v41 = (double *)((char *)v41 + v32);
            v40 = (float *)((char *)v40 + v33);
            --v39;
          }
          while (v39);
        }
      }
      else if ((int)v11 >= 1)
      {
        v43 = v11;
        v44 = v38;
        v45 = v37;
        v46 = (double *)v132;
        do
        {
          *v46++ = *v44 - *v45;
          v45 = (double *)((char *)v45 + v32);
          v44 = (float *)((char *)v44 + v33);
          --v43;
        }
        while (v43);
      }
      LODWORD(v47) = v30;
      v48 = v35;
      v49 = v30;
      if (v30 <= v31)
      {
        do
        {
          v59 = (float64x2_t)v34;
          v60 = (float64x2_t)v34;
          if ((int)v11 >= 1)
          {
            v61 = (float64x2_t *)((char *)v6 + 8 * v49);
            if (v18)
              v61 = (float64x2_t *)v18;
            v62 = v61 + 1;
            v63 = 0uLL;
            v64 = v48;
            v65 = v11;
            v66 = (const double *)v132;
            v67 = 0uLL;
            do
            {
              v68 = vld1q_dup_f64(v66++);
              v63 = vmlaq_f64(v63, vsubq_f64(vcvtq_f64_f32(v64[-1]), v62[-1]), v68);
              v67 = vmlaq_f64(v67, vsubq_f64(vcvtq_f64_f32(*v64), *v62), v68);
              v62 = (float64x2_t *)((char *)v62 + v32);
              v64 = (float32x2_t *)((char *)v64 + v33);
              --v65;
            }
            while (v65);
            v59 = vmulq_n_f64(v63, a4);
            v60 = vmulq_n_f64(v67, a4);
          }
          v58 = (float64x2_t *)((char *)v5 + 8 * v49);
          *v58 = v59;
          v58[1] = v60;
          v47 = v49 + 4;
          v48 += 2;
          v49 = v47;
        }
        while ((int)v31 >= (int)v47);
      }
      if ((int)v47 >= (int)v10)
        goto LABEL_38;
      v50 = v47;
      if ((int)v11 >= 1)
      {
        v51 = &v4[v47];
        do
        {
          v52 = &v6->f64[v50];
          if (v18)
            v52 = v18;
          v53 = 0.0;
          v54 = v51;
          v55 = v11;
          v56 = (double *)v132;
          do
          {
            v57 = *v56++;
            v53 = v53 + v57 * (*v54 - *v52);
            v52 = (double *)((char *)v52 + v32);
            v54 = (float *)((char *)v54 + v33);
            --v55;
          }
          while (v55);
          *(double *)&v5->i64[v50++] = v53 * a4;
          ++v51;
        }
        while ((int)v10 > (int)v50);
        goto LABEL_38;
      }
      v69 = (v10 + ~(_DWORD)v47);
      if (v69 >= 3)
      {
        v71 = v69 + 1;
        v72 = (v69 + 1) & 0x1FFFFFFFCLL;
        v70 = v72 + v50;
        v73 = 8 * v50;
        v74 = v72;
        do
        {
          v75 = (int64x2_t *)((char *)v5 + v73);
          *v75 = v34;
          v75[1] = v34;
          v73 += 32;
          v74 -= 4;
        }
        while (v74);
        if (v71 == v72)
          goto LABEL_38;
      }
      else
      {
        v70 = v47;
      }
      v76 = v70;
      do
      {
        *(double *)&v5->i64[v76++] = a4 * 0.0;
        LODWORD(v70) = v70 + 1;
      }
      while ((int)v10 > (int)v70);
LABEL_38:
      ++v30;
      v5 = (int64x2_t *)((char *)v5 + v36);
      ++v38;
      ++v37;
      v35 = (float32x2_t *)((char *)v35 + 4);
    }
    while (v30 != v10);
  }
  return result;
}

void sub_10023F2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a12 != v12)
  {
    if (a12)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

int64x2_t *sub_10023F318(int64x2_t *result, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5;
  int64x2_t *v6;
  float64x2_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  float32x2_t *v16;
  uint64_t v17;
  float64x2_t *v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float64x2_t *v25;
  float64x2_t *v26;
  float32x2_t *v27;
  uint64_t v28;
  float32x4_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double *v36;
  double *v37;
  float *v38;
  uint64_t v39;
  float v40;
  double v41;
  double v42;
  uint64_t v43;
  float64x2_t v44;
  float64x2_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  float64x2_t *v51;
  int v52;
  double v53;
  uint64_t v54;
  float *v55;
  double *v56;
  double v57;
  float v58;
  float v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  uint64_t v66;
  uint64_t v67;
  float32x4_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  uint64_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double v86;
  uint64_t v87;
  float *v88;
  uint64_t v89;
  uint64_t v90;
  float *v91;
  double v92;
  float *v93;
  double v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const float *v105;
  unint64_t v106;
  unint64_t v107;
  double v108;
  uint64_t v109;
  const float *v110;
  const float *v111;
  const float *v112;
  const float *v113;
  float64x2_t v114;
  float64x2_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  double v135;
  int64x2_t v136;
  int64x2_t *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  float64x2_t *v147;
  float32x2_t *v148;
  _QWORD v149[2];
  uint64_t v150;
  _QWORD v151[125];
  _QWORD v152[2];
  double v153;
  double v154;
  float32x2x4_t v155;
  float32x2x4_t v156;
  float32x2x4_t v157;
  float32x2x4_t v158;

  v5 = result[1].i64[0];
  v6 = *(int64x2_t **)(a2 + 16);
  v7 = *(float64x2_t **)(a3 + 16);
  v8 = (unint64_t)result[5].i64[0] >> 2;
  v146 = *(_QWORD *)(a2 + 80) >> 3;
  if (*(int *)(a3 + 8) <= 1)
    v9 = 0;
  else
    v9 = *(_QWORD *)(a3 + 80) >> 3;
  v10 = (unsigned int *)result[4].i64[0];
  v11 = *v10;
  v12 = (int)v10[1];
  v13 = v10[1];
  if (!v7)
  {
    if ((int)v11 < 1)
      return result;
    if ((int)v13 < 4)
    {
      if ((int)v12 <= 0)
      {
        v133 = 0;
        v134 = 0;
        v135 = a4 * 0.0;
        v136 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
        v137 = v6 + 1;
        v138 = 1;
        do
        {
          if (v138 <= v11)
            v139 = v11;
          else
            v139 = v138;
          v140 = v134 + 1;
          if (v134 + 1 > v11)
            v141 = v134 + 1;
          else
            v141 = v11;
          v142 = v141 - v134;
          if (v142 < 4)
            goto LABEL_91;
          v143 = (v139 + v133) & 0xFFFFFFFFFFFFFFFCLL;
          v134 += v142 & 0xFFFFFFFFFFFFFFFCLL;
          result = v137;
          do
          {
            result[-1] = v136;
            *result = v136;
            result += 2;
            v143 -= 4;
          }
          while (v143);
          if (v142 != (v142 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_91:
            do
              *(double *)&v6->i64[v134++] = v135;
            while (v134 < v11);
          }
          ++v138;
          --v133;
          v137 = (int64x2_t *)((char *)v137 + 8 * v146 + 8);
          v6 = (int64x2_t *)((char *)v6 + 8 * v146);
          v134 = v140;
        }
        while (v140 != v11);
      }
      else
      {
        v87 = 0;
        v88 = (float *)(v5 + 8);
        v89 = 4 * v8;
        do
        {
          v90 = 0;
          v91 = (float *)(v5 + 4 * v8 * v87);
          v92 = *v91;
          v93 = v88;
          do
          {
            v94 = v92 * *(v93 - 2) + 0.0;
            if ((_DWORD)v13 != 1)
            {
              v94 = v94 + v91[1] * *(v93 - 1);
              if ((_DWORD)v12 != 2)
                v94 = v94 + v91[2] * *v93;
            }
            *(double *)&v6->i64[v90] = v94 * a4;
            v93 = (float *)((char *)v93 + v89);
            ++v90;
          }
          while (v87 + v90 < v11);
          ++v87;
          v88 = (float *)((char *)v88 + v89);
          v6 = (int64x2_t *)((char *)v6 + 8 * v146 + 8);
        }
        while (v87 != v11);
      }
      return result;
    }
    v95 = 0;
    v96 = (v12 - 4);
    v97 = (v96 & 0xFFFFFFFC) + 4;
    v98 = v12 - (v96 & 0xFFFFFFFC) - 5;
    v99 = (v96 >> 2) + 1;
    v100 = (v98 + 1) & 0x1FFFFFFF8;
    result = (int64x2_t *)(v5 + 32);
    v101 = 4 * v8;
    v102 = v5 + 8;
LABEL_57:
    v103 = v5;
    v104 = v102;
    v105 = (const float *)result;
    v106 = v95;
    while (v96 >= 0xC)
    {
      v108 = 0.0;
      v109 = v99 & 0x7FFFFFFC;
      v110 = v105;
      v111 = (const float *)result;
      do
      {
        v112 = v111 - 8;
        v155 = vld4_f32(v112);
        v156 = vld4_f32(v111);
        v113 = v110 - 8;
        v157 = vld4_f32(v113);
        v158 = vld4_f32(v110);
        v114 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(v155.val[1]), vcvtq_f64_f32(v157.val[1])), vcvtq_f64_f32(v157.val[0]), vcvtq_f64_f32(v155.val[0])), vcvtq_f64_f32(v157.val[2]), vcvtq_f64_f32(v155.val[2])), vcvtq_f64_f32(v157.val[3]), vcvtq_f64_f32(v155.val[3]));
        v115 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(v156.val[1]), vcvtq_f64_f32(v158.val[1])), vcvtq_f64_f32(v158.val[0]), vcvtq_f64_f32(v156.val[0])), vcvtq_f64_f32(v158.val[2]), vcvtq_f64_f32(v156.val[2])), vcvtq_f64_f32(v158.val[3]), vcvtq_f64_f32(v156.val[3]));
        v108 = v108 + v114.f64[0] + v114.f64[1] + v115.f64[0] + v115.f64[1];
        v111 += 16;
        v110 += 16;
        v109 -= 4;
      }
      while (v109);
      v107 = 4 * (v99 & 0x7FFFFFFC);
      if (v99 != (v99 & 0x7FFFFFFC))
        goto LABEL_64;
LABEL_66:
      if (v97 < v12)
      {
        if (v98 >= 7)
        {
          v120 = 4 * ((v96 & 0xFFFFFFFC) + 4);
          v121 = (v98 + 1) & 0x1FFFFFFF8;
          do
          {
            v122 = *(float32x4_t *)(v5 + v120);
            v123 = *(float32x4_t *)(v5 + v120 + 16);
            v124 = vcvtq_f64_f32(*(float32x2_t *)v122.f32);
            v125 = vcvtq_f64_f32(*(float32x2_t *)v123.f32);
            v126 = *(float32x4_t *)(v103 + v120);
            v127 = *(float32x4_t *)(v103 + v120 + 16);
            v128 = vmulq_f64(vcvt_hight_f64_f32(v122), vcvt_hight_f64_f32(v126));
            v129 = vmulq_f64(v124, vcvtq_f64_f32(*(float32x2_t *)v126.f32));
            v130 = vmulq_f64(vcvt_hight_f64_f32(v123), vcvt_hight_f64_f32(v127));
            v131 = vmulq_f64(v125, vcvtq_f64_f32(*(float32x2_t *)v127.f32));
            v108 = v108
                 + v129.f64[0]
                 + v129.f64[1]
                 + v128.f64[0]
                 + v128.f64[1]
                 + v131.f64[0]
                 + v131.f64[1]
                 + v130.f64[0]
                 + v130.f64[1];
            v120 += 32;
            v121 -= 8;
          }
          while (v121);
          v119 = v100 + v97;
          if (v98 + 1 == v100)
            goto LABEL_58;
        }
        else
        {
          v119 = (v96 & 0xFFFFFFFC) + 4;
        }
        v132 = 4 * v119;
        do
        {
          v108 = v108 + *(float *)(v5 + v132) * *(float *)(v103 + v132);
          v132 += 4;
          LODWORD(v119) = v119 + 1;
        }
        while ((int)v12 > (int)v119);
      }
LABEL_58:
      *(double *)&v6->i64[v106++] = v108 * a4;
      v105 = (const float *)((char *)v105 + v101);
      v104 += v101;
      v103 += v101;
      if (v106 >= v11)
      {
        v6 = (int64x2_t *)((char *)v6 + 8 * v146);
        ++v95;
        result = (int64x2_t *)((char *)result + v101);
        v5 += v101;
        v102 += v101;
        if (v95 == v11)
          return result;
        goto LABEL_57;
      }
    }
    v107 = 0;
    v108 = 0.0;
LABEL_64:
    v116 = 4 * v107;
    v117 = v104;
    v118 = v5;
    do
    {
      v108 = v108
           + *(float *)(v118 + v116 + 4) * *(float *)(v117 + v116 - 4)
           + *(float *)(v118 + v116) * *(float *)(v117 + v116 - 8)
           + *(float *)(v118 + v116 + 8) * *(float *)(v117 + v116)
           + *(float *)(v118 + v116 + 12) * *(float *)(v117 + v116 + 4);
      v107 += 4;
      v118 += 16;
      v117 += 16;
    }
    while (v107 <= v96);
    goto LABEL_66;
  }
  v14 = *(_DWORD *)(a3 + 12);
  result = (int64x2_t *)v149;
  if ((unint64_t)(8 * v12) >= 0x409)
    operator new[]();
  if ((int)v11 >= 1)
  {
    v15 = 0;
    v144 = v13 & 0xFFFFFFF8;
    v16 = (float32x2_t *)(v5 + 16);
    v17 = 4 * v8;
    v18 = v7 + 2;
    v19 = (4 * v13) & 0x3FFFFFFE0;
    v20 = (float *)(v5 + 8);
    v21 = *(_QWORD *)(a3 + 16);
    v145 = 8 * v9;
    do
    {
      if (v14 >= (int)v13)
      {
        if ((int)v13 >= 1)
        {
          v24 = 0;
          if (v13 < 8)
            goto LABEL_20;
          if ((unint64_t)((char *)v149 - ((char *)v7 + v145 * v15)) < 0x40)
            goto LABEL_20;
          v25 = v18;
          v26 = (float64x2_t *)v151;
          v27 = v16;
          v28 = v13 & 0xFFFFFFF8;
          do
          {
            v29 = *(float32x4_t *)v27[-2].f32;
            v31 = v25[-2];
            v30 = v25[-1];
            v33 = *v25;
            v32 = v25[1];
            v25 += 4;
            v34 = vsubq_f64(vcvtq_f64_f32(*v27), v33);
            v35 = vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v27->f32), v32);
            v26[-2] = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v29.f32), v31);
            v26[-1] = vsubq_f64(vcvt_hight_f64_f32(v29), v30);
            *v26 = v34;
            v26[1] = v35;
            v26 += 4;
            v27 += 4;
            v28 -= 8;
          }
          while (v28);
          v24 = v13 & 0xFFFFFFF8;
          if (v144 != v13)
          {
LABEL_20:
            v36 = (double *)&v149[v24];
            v37 = (double *)(v21 + 8 * v24);
            v38 = (float *)(v5 + 4 * v24);
            v39 = v13 - v24;
            do
            {
              v40 = *v38++;
              v41 = v40;
              v42 = *v37++;
              *v36++ = v41 - v42;
              --v39;
            }
            while (v39);
          }
        }
        goto LABEL_27;
      }
      if ((int)v12 >= 1)
      {
        v22 = *(uint64_t *)&v7->f64[v9 * v15];
        if (v12 >= 8)
        {
          v43 = 0;
          v44 = (float64x2_t)vdupq_lane_s64(v22, 0);
          v45 = (float64x2_t *)v151;
          do
          {
            v46 = *(float32x4_t *)(v5 + v43);
            v47 = *(float32x4_t *)(v5 + v43 + 16);
            v45[-2] = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v46.f32), v44);
            v45[-1] = vsubq_f64(vcvt_hight_f64_f32(v46), v44);
            *v45 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v47.f32), v44);
            v45[1] = vsubq_f64(vcvt_hight_f64_f32(v47), v44);
            v45 += 4;
            v43 += 32;
          }
          while (v19 != v43);
          v23 = v13 & 0xFFFFFFF8;
          if (v144 == v13)
            goto LABEL_27;
        }
        else
        {
          v23 = 0;
        }
        do
        {
          *(double *)&v149[v23] = *(float *)(v5 + 4 * v23) - *(double *)&v22;
          ++v23;
        }
        while (v13 != v23);
      }
LABEL_27:
      v147 = v18;
      v148 = v16;
      v48 = v5;
      v49 = v20;
      v50 = v15;
      do
      {
        v51 = (float64x2_t *)((char *)v7 + 8 * v9 * v50);
        if (v14 < (int)v12)
        {
          v153 = v51->f64[0];
          v154 = v153;
          *(double *)v152 = v153;
          *(double *)&v152[1] = v153;
          v51 = (float64x2_t *)v152;
        }
        if ((int)v13 >= 4)
        {
          v54 = 0;
          v53 = 0.0;
          v55 = v49;
          v56 = (double *)&v150;
          do
          {
            v57 = *(v56 - 1) * (*(v55 - 1) - v51->f64[1]) + *(v56 - 2) * (*(v55 - 2) - v51->f64[0]);
            v58 = *v55;
            v59 = v55[1];
            v55 += 4;
            v60 = *v56;
            v61 = v56[1];
            v56 += 4;
            v54 += 4;
            v53 = v53 + v57 + v60 * (v58 - v51[1].f64[0]) + v61 * (v59 - v51[1].f64[1]);
            v51 += 2 * (v14 == (_DWORD)v13);
          }
          while (v54 <= (int)v12 - 4);
          v52 = ((v12 - 4) & 0xFFFFFFFC) + 4;
          if (v52 >= (int)v13)
            goto LABEL_28;
        }
        else
        {
          v52 = 0;
          v53 = 0.0;
          if ((int)v13 <= 0)
            goto LABEL_28;
        }
        v62 = v52;
        v63 = (v13 + ~v52);
        if (v63 < 7)
        {
          v64 = v62;
          v65 = (double *)v51;
          do
          {
LABEL_42:
            v86 = *v65++;
            v53 = v53 + *(double *)&v149[v64] * (*(float *)(v48 + 4 * v64) - v86);
            ++v64;
          }
          while ((int)v13 > (int)v64);
          goto LABEL_28;
        }
        v66 = v63 + 1;
        v67 = (v63 + 1) & 0x1FFFFFFF8;
        v65 = &v51->f64[v67];
        v64 = v67 + v62;
        v68 = (float32x4_t *)(v48 + 4 * v62);
        v69 = v51 + 2;
        v70 = (float64x2_t *)&v151[v62];
        v71 = v67;
        do
        {
          v72 = v70[-2];
          v73 = v70[-1];
          v74 = *v70;
          v75 = v70[1];
          v70 += 4;
          v76 = *v68;
          v77 = v68[1];
          v68 += 2;
          v79 = v69[-2];
          v78 = v69[-1];
          v81 = *v69;
          v80 = v69[1];
          v69 += 4;
          v82 = vmulq_f64(v73, vsubq_f64(vcvt_hight_f64_f32(v76), v78));
          v83 = vmulq_f64(v72, vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v76.f32), v79));
          v84 = vmulq_f64(v75, vsubq_f64(vcvt_hight_f64_f32(v77), v80));
          v85 = vmulq_f64(v74, vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v77.f32), v81));
          v53 = v53
              + v83.f64[0]
              + v83.f64[1]
              + v82.f64[0]
              + v82.f64[1]
              + v85.f64[0]
              + v85.f64[1]
              + v84.f64[0]
              + v84.f64[1];
          v71 -= 8;
        }
        while (v71);
        if (v66 != v67)
          goto LABEL_42;
LABEL_28:
        *(double *)&v6->i64[v50++] = v53 * a4;
        v49 = (float *)((char *)v49 + v17);
        v48 += v17;
      }
      while (v50 != v11);
      ++v15;
      v6 = (int64x2_t *)((char *)v6 + 8 * v146);
      v16 = (float32x2_t *)((char *)v148 + v17);
      v19 = (4 * v13) & 0x3FFFFFFE0;
      v18 = (float64x2_t *)((char *)v147 + v145);
      v21 += v145;
      v5 += v17;
      v20 = (float *)((char *)v20 + v17);
    }
    while (v15 != v11);
  }
  return result;
}

_BYTE *sub_10023FC1C(_QWORD *a1, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD *v4;
  int64x2_t *v5;
  float64x2_t *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  _BYTE *result;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  float64x2_t *v22;
  double *v23;
  uint64_t v24;
  double *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64x2_t v34;
  float64x2_t *v35;
  uint64_t v36;
  double *v37;
  double *v38;
  uint64_t v39;
  double *v40;
  double *v41;
  double *v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double *v46;
  uint64_t v47;
  float64x2_t *v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  double *v52;
  double v53;
  double *v54;
  uint64_t v55;
  double *v56;
  double v57;
  float64x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t *v61;
  float64x2_t *v62;
  float64x2_t v63;
  float64x2_t *v64;
  uint64_t v65;
  const double *v66;
  float64x2_t v67;
  float64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64x2_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float64x2_t *v80;
  _QWORD *i;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  float64x2_t *v85;
  uint64_t v86;
  float64x2_t v87;
  float64x2_t *v88;
  uint64_t v89;
  const double *v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t *v93;
  double *v94;
  double v95;
  double *v96;
  uint64_t v97;
  double *v98;
  double v99;
  uint64_t v100;
  double v101;
  int64x2_t v102;
  int v103;
  int64x2_t *v104;
  uint64_t v105;
  int v106;
  int j;
  int v108;
  int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int64x2_t *v115;
  double *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int64x2_t *v124;
  uint64_t v125;
  _BYTE v127[1032];
  float64x2x4_t v128;
  float64x2x4_t v129;

  v4 = (_QWORD *)a1[2];
  v5 = *(int64x2_t **)(a2 + 16);
  v6 = *(float64x2_t **)(a3 + 16);
  v7 = a1[10];
  if (*(int *)(a3 + 8) <= 1)
    v8 = 0;
  else
    v8 = *(_QWORD *)(a3 + 80) >> 3;
  v9 = (unsigned int *)a1[8];
  v11 = *v9;
  v10 = v9[1];
  if (v6)
    v12 = *(_DWORD *)(a3 + 12) < (int)v10;
  else
    v12 = 0;
  v13 = !v12;
  v14 = 40 * v11;
  if (!v12)
    v14 = 8 * v11;
  result = v127;
  if (v14 >= 0x409)
    operator new[]();
  v16 = v7 >> 3;
  v17 = *(_QWORD *)(a2 + 80) >> 3;
  if ((v13 & 1) == 0)
  {
    v18 = (double *)&v127[8 * (int)v11];
    if ((int)v11 < 1)
      goto LABEL_36;
    v19 = v11 >= 6 && v8 == 1;
    if (v19 && (v18 < &v6->f64[v11] ? (v20 = v6 >= (float64x2_t *)&v127[32 * v11 + 8 * (int)v11]) : (v20 = 1), v20))
    {
      v21 = v11 & 0x7FFFFFFC;
      v22 = v6 + 1;
      v23 = (double *)&v127[8 * (int)v11 + 64];
      v24 = v11 & 0xFFFFFFFC;
      do
      {
        v128.val[0] = v22[-1];
        v129.val[0] = *v22;
        v128.val[1] = v128.val[0];
        v128.val[2] = v128.val[0];
        v128.val[3] = v128.val[0];
        v129.val[1] = *v22;
        v129.val[2] = *v22;
        v129.val[3] = *v22;
        v25 = v23 - 8;
        vst4q_f64(v25, v128);
        vst4q_f64(v23, v129);
        v22 += 2;
        v23 += 16;
        v24 -= 4;
      }
      while (v24);
      if (v21 == v11)
      {
LABEL_36:
        v8 = 4 * (v8 != 0);
        v6 = (float64x2_t *)&v127[8 * (int)v11];
        if ((int)v10 < 1)
          return result;
        goto LABEL_37;
      }
    }
    else
    {
      v21 = 0;
    }
    v26 = (uint64_t *)&v6->f64[v8 * v21];
    v27 = v11 - v21;
    v28 = (uint64_t *)&v127[32 * v21 + 16 + 8 * (int)v11];
    do
    {
      v29 = *v26;
      *v28 = *v26;
      v28[1] = v29;
      *(v28 - 2) = v29;
      *(v28 - 1) = v29;
      v26 += v8;
      v28 += 4;
      --v27;
    }
    while (v27);
    goto LABEL_36;
  }
  if (!v6)
  {
    if ((int)v10 < 1)
      return result;
    v77 = (int)v10 - 4;
    if ((int)v11 > 0)
    {
      v78 = 0;
      v79 = 8 * v16;
      v80 = (float64x2_t *)(v4 + 2);
      for (i = v4; ; ++i)
      {
        v82 = v11;
        v83 = v127;
        v84 = i;
        do
        {
          *v83++ = *v84;
          v84 = (_QWORD *)((char *)v84 + v79);
          --v82;
        }
        while (v82);
        v85 = v80;
        v86 = v78;
        if (v78 <= v77)
          break;
        v86 = v78;
        if ((int)v78 < (int)v10)
          goto LABEL_84;
LABEL_74:
        ++v78;
        v5 = (int64x2_t *)((char *)v5 + 8 * v17);
        v80 = (float64x2_t *)((char *)v80 + 8);
        if (v78 == v10)
          return result;
      }
      do
      {
        v87 = 0uLL;
        v88 = v85;
        v89 = v11;
        v90 = (const double *)v127;
        v91 = 0uLL;
        do
        {
          v92 = vld1q_dup_f64(v90++);
          v87 = vmlaq_f64(v87, v88[-1], v92);
          v91 = vmlaq_f64(v91, *v88, v92);
          v88 = (float64x2_t *)((char *)v88 + v79);
          --v89;
        }
        while (v89);
        v93 = (float64x2_t *)((char *)v5 + 8 * v86);
        *v93 = vmulq_n_f64(v87, a4);
        v93[1] = vmulq_n_f64(v91, a4);
        v86 += 4;
        v85 += 2;
      }
      while ((int)v77 >= (int)v86);
      v86 = v86;
      if ((int)v86 >= (int)v10)
        goto LABEL_74;
LABEL_84:
      v94 = (double *)&v4[v86];
      do
      {
        v95 = 0.0;
        v96 = v94;
        v97 = v11;
        v98 = (double *)v127;
        do
        {
          v99 = *v98++;
          v95 = v95 + v99 * *v96;
          v96 = (double *)((char *)v96 + v79);
          --v97;
        }
        while (v97);
        *(double *)&v5->i64[v86++] = v95 * a4;
        ++v94;
      }
      while ((int)v10 > (int)v86);
      goto LABEL_74;
    }
    v100 = 0;
    v101 = a4 * 0.0;
    v102 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
    v103 = v10 - 3;
    v104 = v5 + 4;
    v105 = 8 * v17;
    v106 = 4;
    for (j = -1; ; --j)
    {
      if (v106 <= v103)
        v108 = v10 - 3;
      else
        v108 = v106;
      v109 = v100 + 4;
      if ((int)v100 + 4 <= v103)
        v109 = v10 - 3;
      if (v100 <= v77)
      {
        v111 = v109 + ~(_DWORD)v100;
        v112 = v100;
        if (v111 < 0xC)
          goto LABEL_102;
        v113 = (((v108 + j) >> 2) + 1) & 0x7FFFFFFC;
        v114 = (v111 >> 2) + 1;
        v112 = v100 + 4 * (v114 & 0x7FFFFFFC);
        v110 = v100;
        v115 = v104;
        do
        {
          v115[-4] = v102;
          v115[-3] = v102;
          v115[-2] = v102;
          v115[-1] = v102;
          *v115 = v102;
          v115[1] = v102;
          v115[2] = v102;
          v115[3] = v102;
          v115 += 8;
          v110 += 16;
          v113 -= 4;
        }
        while (v113);
        if ((v114 & 0x7FFFFFFC) != v114)
        {
LABEL_102:
          v116 = (double *)&v5->i64[v112];
          v110 = v112;
          do
          {
            *v116 = v101;
            v116[1] = v101;
            v116[2] = v101;
            v116[3] = v101;
            v110 += 4;
            v116 += 4;
          }
          while ((int)v77 >= v110);
        }
      }
      else
      {
        v110 = v100;
      }
      if (v110 >= (int)v10)
        goto LABEL_90;
      v117 = v110;
      v118 = (v10 + ~v110);
      if (v118 >= 3)
      {
        v120 = v118 + 1;
        v121 = (v118 + 1) & 0x1FFFFFFFCLL;
        v119 = v121 + v117;
        v122 = 8 * v117;
        v123 = v121;
        do
        {
          v124 = (int64x2_t *)((char *)v5 + v122);
          *v124 = v102;
          v124[1] = v102;
          v122 += 32;
          v123 -= 4;
        }
        while (v123);
        if (v120 == v121)
          goto LABEL_90;
      }
      else
      {
        v119 = v117;
      }
      v125 = v119;
      do
      {
        *(double *)&v5->i64[v125++] = v101;
        LODWORD(v119) = v119 + 1;
      }
      while ((int)v10 > (int)v119);
LABEL_90:
      ++v100;
      v104 = (int64x2_t *)((char *)v104 + v105 + 8);
      ++v106;
      v5 = (int64x2_t *)((char *)v5 + v105);
      if (v100 == v10)
        return result;
    }
  }
  v18 = 0;
  if ((int)v10 >= 1)
  {
LABEL_37:
    v30 = 0;
    v31 = (int)v10 - 4;
    v32 = 8 * v8;
    v33 = 8 * v16;
    v34 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
    v35 = (float64x2_t *)(v4 + 2);
    v36 = 8 * v17;
    v37 = (double *)v6;
    v38 = (double *)v4;
    do
    {
      if (v18)
      {
        v39 = v11;
        v40 = v38;
        v41 = v18;
        v42 = (double *)v127;
        if ((int)v11 >= 1)
        {
          do
          {
            *v42++ = *v40 - *v41;
            v41 = (double *)((char *)v41 + v32);
            v40 = (double *)((char *)v40 + v33);
            --v39;
          }
          while (v39);
        }
      }
      else if ((int)v11 >= 1)
      {
        v43 = v11;
        v44 = v38;
        v45 = v37;
        v46 = (double *)v127;
        do
        {
          *v46++ = *v44 - *v45;
          v45 = (double *)((char *)v45 + v32);
          v44 = (double *)((char *)v44 + v33);
          --v43;
        }
        while (v43);
      }
      LODWORD(v47) = v30;
      v48 = v35;
      v49 = v30;
      if (v30 <= v31)
      {
        do
        {
          v59 = (float64x2_t)v34;
          v60 = (float64x2_t)v34;
          if ((int)v11 >= 1)
          {
            v61 = (float64x2_t *)((char *)v6 + 8 * v49);
            if (v18)
              v61 = (float64x2_t *)v18;
            v62 = v61 + 1;
            v63 = 0uLL;
            v64 = v48;
            v65 = v11;
            v66 = (const double *)v127;
            v67 = 0uLL;
            do
            {
              v68 = vld1q_dup_f64(v66++);
              v63 = vmlaq_f64(v63, vsubq_f64(v64[-1], v62[-1]), v68);
              v67 = vmlaq_f64(v67, vsubq_f64(*v64, *v62), v68);
              v62 = (float64x2_t *)((char *)v62 + v32);
              v64 = (float64x2_t *)((char *)v64 + v33);
              --v65;
            }
            while (v65);
            v59 = vmulq_n_f64(v63, a4);
            v60 = vmulq_n_f64(v67, a4);
          }
          v58 = (float64x2_t *)((char *)v5 + 8 * v49);
          *v58 = v59;
          v58[1] = v60;
          v47 = v49 + 4;
          v48 += 2;
          v49 = v47;
        }
        while ((int)v31 >= (int)v47);
      }
      if ((int)v47 >= (int)v10)
        goto LABEL_38;
      v50 = v47;
      if ((int)v11 >= 1)
      {
        v51 = (double *)&v4[v47];
        do
        {
          v52 = &v6->f64[v50];
          if (v18)
            v52 = v18;
          v53 = 0.0;
          v54 = v51;
          v55 = v11;
          v56 = (double *)v127;
          do
          {
            v57 = *v56++;
            v53 = v53 + v57 * (*v54 - *v52);
            v52 = (double *)((char *)v52 + v32);
            v54 = (double *)((char *)v54 + v33);
            --v55;
          }
          while (v55);
          *(double *)&v5->i64[v50++] = v53 * a4;
          ++v51;
        }
        while ((int)v10 > (int)v50);
        goto LABEL_38;
      }
      v69 = (v10 + ~(_DWORD)v47);
      if (v69 >= 3)
      {
        v71 = v69 + 1;
        v72 = (v69 + 1) & 0x1FFFFFFFCLL;
        v70 = v72 + v50;
        v73 = 8 * v50;
        v74 = v72;
        do
        {
          v75 = (int64x2_t *)((char *)v5 + v73);
          *v75 = v34;
          v75[1] = v34;
          v73 += 32;
          v74 -= 4;
        }
        while (v74);
        if (v71 == v72)
          goto LABEL_38;
      }
      else
      {
        v70 = v47;
      }
      v76 = v70;
      do
      {
        *(double *)&v5->i64[v76++] = a4 * 0.0;
        LODWORD(v70) = v70 + 1;
      }
      while ((int)v10 > (int)v70);
LABEL_38:
      ++v30;
      v5 = (int64x2_t *)((char *)v5 + v36);
      ++v38;
      ++v37;
      v35 = (float64x2_t *)((char *)v35 + 8);
    }
    while (v30 != v10);
  }
  return result;
}

void sub_100240314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a12 != v12)
  {
    if (a12)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

int64x2_t *sub_100240344(int64x2_t *result, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5;
  int64x2_t *v6;
  float64x2_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  float64x2_t *v17;
  float64x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  uint64_t v29;
  float64x2_t *v30;
  float64x2_t *v31;
  float64x2_t *v32;
  uint64_t v33;
  float64x2_t v34;
  double *v35;
  double *v36;
  double *v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  double *v43;
  uint64_t v44;
  float64x2_t *v45;
  int v46;
  double v47;
  uint64_t v48;
  double *v49;
  double *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float64x2_t *v63;
  float64x2_t *v64;
  float64x2_t *v65;
  uint64_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  double v72;
  unint64_t v73;
  uint64_t v74;
  double *v75;
  uint64_t v76;
  uint64_t v77;
  double *v78;
  double *v79;
  double v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const double *v91;
  unint64_t v92;
  unint64_t v93;
  double v94;
  uint64_t v95;
  const double *v96;
  const double *v97;
  const double *v98;
  const double *v99;
  float64x2_t v100;
  float64x2_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float64x2_t v108;
  float64x2_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  double v113;
  int64x2_t v114;
  int64x2_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float64x2_t *v125;
  _BYTE v126[16];
  _BYTE v127[1016];
  _QWORD v128[2];
  double v129;
  double v130;
  float64x2x4_t v131;
  float64x2x4_t v132;
  float64x2x4_t v133;
  float64x2x4_t v134;

  v5 = result[1].i64[0];
  v6 = *(int64x2_t **)(a2 + 16);
  v7 = *(float64x2_t **)(a3 + 16);
  v8 = result[5].u64[0];
  v124 = *(_QWORD *)(a2 + 80) >> 3;
  if (*(int *)(a3 + 8) <= 1)
    v9 = 0;
  else
    v9 = *(_QWORD *)(a3 + 80) >> 3;
  v10 = (unsigned int *)result[4].i64[0];
  v11 = *v10;
  v12 = (int)v10[1];
  v13 = v10[1];
  if (!v7)
  {
    if ((int)v11 < 1)
      return result;
    v73 = v8 >> 3;
    if ((int)v13 < 4)
    {
      if ((int)v12 <= 0)
      {
        v111 = 0;
        v112 = 0;
        v113 = a4 * 0.0;
        v114 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
        v115 = v6 + 1;
        v116 = 1;
        do
        {
          if (v116 <= v11)
            v117 = v11;
          else
            v117 = v116;
          v118 = v112 + 1;
          if (v112 + 1 > v11)
            v119 = v112 + 1;
          else
            v119 = v11;
          v120 = v119 - v112;
          if (v120 < 4)
            goto LABEL_94;
          v121 = (v117 + v111) & 0xFFFFFFFFFFFFFFFCLL;
          v112 += v120 & 0xFFFFFFFFFFFFFFFCLL;
          result = v115;
          do
          {
            result[-1] = v114;
            *result = v114;
            result += 2;
            v121 -= 4;
          }
          while (v121);
          if (v120 != (v120 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_94:
            do
              *(double *)&v6->i64[v112++] = v113;
            while (v112 < v11);
          }
          ++v116;
          --v111;
          v115 = (int64x2_t *)((char *)v115 + 8 * v124 + 8);
          v6 = (int64x2_t *)((char *)v6 + 8 * v124);
          v112 = v118;
        }
        while (v118 != v11);
      }
      else
      {
        v74 = 0;
        v75 = (double *)(v5 + 16);
        v76 = 8 * v73;
        do
        {
          v77 = 0;
          v78 = (double *)(v5 + 8 * v73 * v74);
          v79 = v75;
          do
          {
            v80 = *v78 * *(v79 - 2) + 0.0;
            if ((_DWORD)v13 != 1)
            {
              v80 = v80 + v78[1] * *(v79 - 1);
              if ((_DWORD)v12 != 2)
                v80 = v80 + v78[2] * *v79;
            }
            *(double *)&v6->i64[v77] = v80 * a4;
            v79 = (double *)((char *)v79 + v76);
            ++v77;
          }
          while (v74 + v77 < v11);
          ++v74;
          v75 = (double *)((char *)v75 + v76);
          v6 = (int64x2_t *)((char *)v6 + 8 * v124 + 8);
        }
        while (v74 != v11);
      }
      return result;
    }
    v81 = 0;
    v82 = (v12 - 4);
    v83 = (v82 & 0xFFFFFFFC) + 4;
    v84 = v12 - (v82 & 0xFFFFFFFC) - 5;
    v85 = (v82 >> 2) + 1;
    v86 = (v84 + 1) & 0x1FFFFFFFCLL;
    result = (int64x2_t *)(v5 + 64);
    v87 = 8 * v73;
    v88 = v5 + 16;
LABEL_60:
    v89 = v5;
    v90 = v88;
    v91 = (const double *)result;
    v92 = v81;
    while (v82 >= 0xC)
    {
      v94 = 0.0;
      v95 = v85 & 0x7FFFFFFC;
      v96 = v91;
      v97 = (const double *)result;
      do
      {
        v98 = v97 - 8;
        v131 = vld4q_f64(v98);
        v132 = vld4q_f64(v97);
        v99 = v96 - 8;
        v133 = vld4q_f64(v99);
        v134 = vld4q_f64(v96);
        v100 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v131.val[1], v133.val[1]), v133.val[0], v131.val[0]), v133.val[2], v131.val[2]), v133.val[3], v131.val[3]);
        v101 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v132.val[1], v134.val[1]), v134.val[0], v132.val[0]), v134.val[2], v132.val[2]), v134.val[3], v132.val[3]);
        v94 = v94 + v100.f64[0] + v100.f64[1] + v101.f64[0] + v101.f64[1];
        v97 += 16;
        v96 += 16;
        v95 -= 4;
      }
      while (v95);
      v93 = 4 * (v85 & 0x7FFFFFFC);
      if (v85 != (v85 & 0x7FFFFFFC))
        goto LABEL_67;
LABEL_69:
      if (v83 < v12)
      {
        if (v84 >= 3)
        {
          v106 = 8 * ((v82 & 0xFFFFFFFC) + 4);
          v107 = (v84 + 1) & 0x1FFFFFFFCLL;
          do
          {
            v108 = vmulq_f64(*(float64x2_t *)(v88 + v106 - 16), *(float64x2_t *)(v89 + v106));
            v109 = vmulq_f64(*(float64x2_t *)(v88 + v106), *(float64x2_t *)(v89 + v106 + 16));
            v94 = v94 + v108.f64[0] + v108.f64[1] + v109.f64[0] + v109.f64[1];
            v106 += 32;
            v107 -= 4;
          }
          while (v107);
          v105 = v86 + v83;
          if (v84 + 1 == v86)
            goto LABEL_61;
        }
        else
        {
          v105 = (v82 & 0xFFFFFFFC) + 4;
        }
        v110 = 8 * v105;
        do
        {
          v94 = v94 + *(double *)(v5 + v110) * *(double *)(v89 + v110);
          v110 += 8;
          LODWORD(v105) = v105 + 1;
        }
        while ((int)v12 > (int)v105);
      }
LABEL_61:
      *(double *)&v6->i64[v92++] = v94 * a4;
      v91 = (const double *)((char *)v91 + v87);
      v90 += v87;
      v89 += v87;
      if (v92 >= v11)
      {
        v6 = (int64x2_t *)((char *)v6 + 8 * v124);
        ++v81;
        result = (int64x2_t *)((char *)result + v87);
        v5 += v87;
        v88 += v87;
        if (v81 == v11)
          return result;
        goto LABEL_60;
      }
    }
    v93 = 0;
    v94 = 0.0;
LABEL_67:
    v102 = 8 * v93;
    v103 = v90;
    v104 = v5;
    do
    {
      v94 = v94
          + *(double *)(v104 + v102 + 8) * *(double *)(v103 + v102 - 8)
          + *(double *)(v104 + v102) * *(double *)(v103 + v102 - 16)
          + *(double *)(v104 + v102 + 16) * *(double *)(v103 + v102)
          + *(double *)(v104 + v102 + 24) * *(double *)(v103 + v102 + 8);
      v93 += 4;
      v104 += 32;
      v103 += 32;
    }
    while (v93 <= v82);
    goto LABEL_69;
  }
  v14 = *(_DWORD *)(a3 + 12);
  result = (int64x2_t *)v126;
  if ((unint64_t)(8 * v12) >= 0x409)
    operator new[]();
  if ((int)v11 >= 1)
  {
    v15 = 0;
    v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    v123 = 8 * v9;
    v122 = v13 & 0xFFFFFFFC;
    v17 = (float64x2_t *)(v5 + 16);
    v18 = v7 + 1;
    v19 = (8 * v13) & 0x7FFFFFFE0;
    v20 = v5;
    v21 = v7;
    do
    {
      v22 = v5 + v16 * v15;
      if (v14 < (int)v13)
      {
        if ((int)v12 >= 1)
        {
          v23 = 0;
          v24 = *(uint64_t *)&v7->f64[v9 * v15];
          if (v13 < 4)
            goto LABEL_95;
          if ((unint64_t)&v126[-v22] < 0x20)
            goto LABEL_95;
          v25 = 0;
          v26 = (float64x2_t)vdupq_lane_s64(v24, 0);
          do
          {
            v27 = vsubq_f64(*(float64x2_t *)(v20 + v25 + 16), v26);
            v28 = (float64x2_t *)&v126[v25];
            *v28 = vsubq_f64(*(float64x2_t *)(v20 + v25), v26);
            v28[1] = v27;
            v25 += 32;
          }
          while (v19 != v25);
          v23 = v13 & 0xFFFFFFFC;
          if (v122 != v13)
          {
LABEL_95:
            do
            {
              *(double *)&v126[8 * v23] = *(double *)(v20 + 8 * v23) - *(double *)&v24;
              ++v23;
            }
            while (v13 != v23);
          }
        }
        goto LABEL_29;
      }
      if ((int)v13 >= 1)
      {
        if (v12 >= 6)
        {
          v29 = 0;
          if ((unint64_t)&v126[-v22] >= 0x20 && (unint64_t)(v126 - ((char *)v7 + v123 * v15)) >= 0x20)
          {
            v30 = v18;
            v31 = (float64x2_t *)v127;
            v32 = v17;
            v33 = v13 & 0xFFFFFFFC;
            do
            {
              v34 = vsubq_f64(*v32, *v30);
              v31[-1] = vsubq_f64(v32[-1], v30[-1]);
              *v31 = v34;
              v32 += 2;
              v31 += 2;
              v30 += 2;
              v33 -= 4;
            }
            while (v33);
            v29 = v13 & 0xFFFFFFFC;
            if (v122 == v13)
              goto LABEL_29;
          }
        }
        else
        {
          v29 = 0;
        }
        v35 = (double *)&v126[8 * v29];
        v36 = &v21->f64[v29];
        v37 = (double *)(v20 + 8 * v29);
        v38 = v13 - v29;
        do
        {
          v39 = *v37++;
          v40 = v39;
          v41 = *v36++;
          *v35++ = v40 - v41;
          --v38;
        }
        while (v38);
      }
LABEL_29:
      v125 = v18;
      v42 = v20;
      v43 = (double *)v17;
      v44 = v15;
      do
      {
        v45 = (float64x2_t *)((char *)v7 + 8 * v9 * v44);
        if (v14 < (int)v12)
        {
          v129 = v45->f64[0];
          v130 = v129;
          *(double *)v128 = v129;
          *(double *)&v128[1] = v129;
          v45 = (float64x2_t *)v128;
        }
        if ((int)v13 >= 4)
        {
          v48 = 0;
          v47 = 0.0;
          v49 = v43;
          v50 = (double *)v127;
          do
          {
            v51 = *(v50 - 1) * (*(v49 - 1) - v45->f64[1]) + *(v50 - 2) * (*(v49 - 2) - v45->f64[0]);
            v52 = *v49;
            v53 = v49[1];
            v49 += 4;
            v54 = *v50;
            v55 = v50[1];
            v50 += 4;
            v48 += 4;
            v47 = v47 + v51 + v54 * (v52 - v45[1].f64[0]) + v55 * (v53 - v45[1].f64[1]);
            v45 += 2 * (v14 == (_DWORD)v13);
          }
          while (v48 <= (int)v12 - 4);
          v46 = ((v12 - 4) & 0xFFFFFFFC) + 4;
          if (v46 >= (int)v13)
            goto LABEL_30;
        }
        else
        {
          v46 = 0;
          v47 = 0.0;
          if ((int)v13 <= 0)
            goto LABEL_30;
        }
        v56 = v46;
        v57 = (v13 + ~v46);
        if (v57 < 3)
        {
          v58 = v56;
          v59 = (double *)v45;
LABEL_44:
          v71 = 8 * v58;
          do
          {
            v72 = *v59++;
            v47 = v47 + *(double *)&v126[v71] * (*(double *)(v42 + v71) - v72);
            v71 += 8;
            LODWORD(v58) = v58 + 1;
          }
          while ((int)v13 > (int)v58);
          goto LABEL_30;
        }
        v60 = v57 + 1;
        v61 = (v57 + 1) & 0x1FFFFFFFCLL;
        v58 = v61 + v56;
        v59 = &v45->f64[v61];
        v62 = 8 * v56;
        v63 = (float64x2_t *)(v42 + v62);
        v64 = v45 + 1;
        v65 = (float64x2_t *)&v127[v62];
        v66 = v61;
        do
        {
          v67 = *v63;
          v68 = v63[1];
          v63 += 2;
          v69 = vmulq_f64(v65[-1], vsubq_f64(v67, v64[-1]));
          v70 = vmulq_f64(*v65, vsubq_f64(v68, *v64));
          v47 = v47 + v69.f64[0] + v69.f64[1] + v70.f64[0] + v70.f64[1];
          v64 += 2;
          v65 += 2;
          v66 -= 4;
        }
        while (v66);
        if (v60 != v61)
          goto LABEL_44;
LABEL_30:
        *(double *)&v6->i64[v44++] = v47 * a4;
        v43 = (double *)((char *)v43 + v16);
        v42 += v16;
      }
      while (v44 != v11);
      v6 = (int64x2_t *)((char *)v6 + 8 * v124);
      ++v15;
      v17 = (float64x2_t *)((char *)v17 + v16);
      v19 = (8 * v13) & 0x7FFFFFFE0;
      v18 = (float64x2_t *)((char *)v125 + v123);
      v21 = (float64x2_t *)((char *)v21 + v123);
      v20 += v16;
    }
    while (v15 != v11);
  }
  return result;
}

void sub_100240B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _BYTE v6[1064];

  sub_100298C2C(v6, &off_10044D3F8);
  __asm { BR              X10 }
}

void sub_100240BB8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  unsigned int v5;
  int v6;
  double v7;
  double v8;
  int v9;
  int v10;
  int v11;
  float *v12;
  float *v13;
  float *v14;
  int *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  float *v23;
  float *v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  double *v33;
  double *v34;
  double *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  double *v44;
  double *v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  float *v53;
  float *v54;
  uint64_t v55;
  float *v56;
  uint64_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;
  double *v70;
  double *v71;
  uint64_t v72;
  double *v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  float *v83;
  float *v84;
  uint64_t v85;
  float *v86;
  uint64_t v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  uint64_t v96;
  double *v97;
  double *v98;
  uint64_t v99;
  double *v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  float v108;
  float v109;
  float v110;
  float v111;
  uint64_t v112;
  double v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  float *v117;
  float *v118;
  float *v119;
  float *v120;
  float *v121;
  float *v122;
  uint64_t v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  uint64_t v136;
  uint64_t v137;
  double *v138;
  double *v139;
  double *v140;
  double *v141;
  double *v142;
  double *v143;
  uint64_t v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  uint64_t v153;
  float *v154;
  float *v155;
  float *v156;
  uint64_t v157;
  float *v158;
  uint64_t v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  uint64_t v169;
  double *v170;
  double *v171;
  uint64_t v172;
  double *v173;
  double *v174;
  uint64_t v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  _BOOL4 v186;
  BOOL v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  signed int v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  _BYTE *v223;
  _BYTE *v224;
  int v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  int v234;
  int v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  size_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  int v243;
  uint64_t v244;
  int v245;
  int v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  int v252;
  _BYTE *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _BYTE *v262;
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _BYTE *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  _OWORD *v285;
  uint64_t v286;
  int v287;
  _DWORD *v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  __int128 v295;
  _OWORD *v296;
  _DWORD *v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  int v303;
  int v304;
  int v305;
  uint64_t (*v306)();
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  _BYTE *v317;
  _BYTE *v318;
  uint64_t v319;
  unsigned int v320;
  char v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t (*v325)(size_t, int, int, int, void *, int, int, int, int);
  uint64_t (*v326)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, int);
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  int v331;
  _BYTE *v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  int v341;
  _BYTE *v342;
  int v343;
  _BYTE *v344;
  _DWORD v345[4];
  _DWORD v346[2];
  _DWORD v347[2];
  _DWORD v348[2];
  _DWORD v349[2];
  _DWORD v350[2];
  uint64_t v351[2];
  char v352;
  int v353;
  _BYTE *v354;
  unint64_t v355;
  _BYTE v356[1160];

  v9 = v3;
  v10 = *(_DWORD *)(v2 + 12);
  v11 = *(_DWORD *)(v2 + 8);
  v322 = v10;
  v343 = v11;
  if (v6 || v11 < 2 || v11 > 4 || v11 != v10 && v11 != v3)
    goto LABEL_97;
  if (v5 == 6)
  {
    v33 = *(double **)(v313 + 16);
    v34 = *(double **)(v324 + 16);
    v35 = *(double **)(v2 + 16);
    v36 = *(uint64_t **)(v1 + 16);
    v37 = *(_QWORD *)(v313 + 80);
    v38 = *(_QWORD *)(v324 + 80) >> 3;
    v39 = *(_QWORD *)(v2 + 80) >> 3;
    if (v36)
    {
      v40 = *(_QWORD *)(v1 + 80) >> 3;
      v41 = v37 >> 3;
      v42 = *(_DWORD *)(v2 + 8);
      if (v343 != 4)
        goto LABEL_20;
    }
    else
    {
      v40 = 0;
      v36 = &qword_1003BCBE8;
      v41 = v37 >> 3;
      v42 = *(_DWORD *)(v2 + 8);
      if (v343 != 4)
      {
LABEL_20:
        if (v42 == 3)
        {
          if (v10 != 3 || v35 == v33)
          {
            if (v34 == v33)
              goto LABEL_97;
            if (v36 == &qword_1003BCBE8)
              v40 = 1;
            if (v10 >= 1)
            {
              v169 = 0;
              v170 = &v33[v41];
              v171 = &v33[2 * v41];
              v172 = 8 * (v36 != &qword_1003BCBE8);
              v173 = &v35[v39];
              v174 = &v35[2 * v39];
              do
              {
                v175 = v169;
                v176 = v35[v169];
                v177 = v173[v169];
                v178 = v174[v169];
                v179 = v34[1] * v177 + *v34 * v176 + v34[2] * v178;
                v180 = v177 * v34[v38 + 1] + v34[v38] * v176 + v34[v38 + 2] * v178;
                v181 = v177 * v34[(2 * (v38 & 0x1FFFFFFFFFFFFFFFLL)) | 1]
                     + v34[2 * v38] * v176
                     + v34[2 * v38 + 2] * v178;
                v33[v175] = *(double *)v36 * v7 + v179 * v8;
                v170[v175] = *(double *)&v36[v40] * v7 + v180 * v8;
                v171[v175] = *(double *)&v36[2 * v40] * v7 + v181 * v8;
                ++v169;
                v36 = (uint64_t *)((char *)v36 + v172);
              }
              while (v10 != (_DWORD)v169);
            }
          }
          else if (v3 >= 1)
          {
            v96 = 8 * v38;
            v97 = v34 + 1;
            v98 = (double *)(v36 + 1);
            v99 = 8 * v40;
            v100 = v33 + 2;
            v101 = 8 * v41;
            do
            {
              v102 = *(v97 - 1);
              v103 = v97[1];
              v104 = *v97 * v35[v39] + v102 * *v35 + v103 * v35[2 * v39];
              v105 = *v97 * v35[v39 + 1] + v102 * v35[1] + v103 * v35[(2 * (v39 & 0x1FFFFFFFFFFFFFFFLL)) | 1];
              v106 = *v97 * v35[v39 + 2] + v102 * v35[2] + v103 * v35[2 * v39 + 2];
              *(v100 - 2) = *(v98 - 1) * v7 + v104 * v8;
              *(v100 - 1) = *v98 * v7 + v105 * v8;
              *v100 = v98[1] * v7 + v106 * v8;
              v97 = (double *)((char *)v97 + v96);
              v98 = (double *)((char *)v98 + v99);
              v100 = (double *)((char *)v100 + v101);
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          if (v42 != 2)
            goto LABEL_97;
          if (v10 != 2 || v35 == v33)
          {
            if (v34 == v33)
              goto LABEL_97;
            if (v36 == &qword_1003BCBE8)
              v40 = 1;
            if (v10 >= 1)
            {
              v112 = 8 * (v36 != &qword_1003BCBE8);
              do
              {
                v113 = v35[v39];
                v114 = v113 * v34[v38 + 1] + v34[v38] * *v35;
                *v33 = *(double *)v36 * v7 + (v34[1] * v113 + *v34 * *v35) * v8;
                v33[v41] = *(double *)&v36[v40] * v7 + v114 * v8;
                ++v33;
                ++v35;
                v36 = (uint64_t *)((char *)v36 + v112);
                --v10;
              }
              while (v10);
            }
          }
          else if (v3 >= 1)
          {
            v43 = 8 * v41;
            v44 = v33 + 1;
            v45 = (double *)(v36 + 1);
            v46 = 8 * v40;
            v47 = v34 + 1;
            v48 = 8 * v38;
            do
            {
              v49 = *(v47 - 1);
              v50 = *v47 * v35[v39] + v49 * *v35;
              v51 = *v47 * v35[v39 + 1] + v49 * v35[1];
              *(v44 - 1) = *(v45 - 1) * v7 + v50 * v8;
              *v44 = *v45 * v7 + v51 * v8;
              v44 = (double *)((char *)v44 + v43);
              v45 = (double *)((char *)v45 + v46);
              v47 = (double *)((char *)v47 + v48);
              --v9;
            }
            while (v9);
          }
        }
        goto LABEL_131;
      }
    }
    if (v10 != 4 || v35 == v33)
    {
      if (v10 > 16 || v34 == v33)
        goto LABEL_97;
      if (v36 == &qword_1003BCBE8)
        v40 = 1;
      if (v10 >= 1)
      {
        v136 = 0;
        v137 = 8 * (v36 != &qword_1003BCBE8);
        v138 = &v33[3 * v41];
        v139 = &v33[v41];
        v140 = &v33[2 * v41];
        v141 = &v35[3 * v39];
        v142 = &v35[v39];
        v143 = &v35[2 * v39];
        do
        {
          v144 = v136;
          v145 = v35[v136];
          v146 = v142[v136];
          v147 = v143[v136];
          v148 = v141[v136];
          v149 = v34[1] * v146 + *v34 * v145 + v34[2] * v147 + v34[3] * v148;
          v150 = v146 * v34[v38 + 1] + v34[v38] * v145 + v34[v38 + 2] * v147 + v34[v38 + 3] * v148;
          v151 = v146 * v34[(2 * (v38 & 0x1FFFFFFFFFFFFFFFLL)) | 1]
               + v34[2 * v38] * v145
               + v34[2 * v38 + 2] * v147
               + v34[2 * v38 + 3] * v148;
          v152 = v146 * v34[3 * v38 + 1] + v34[3 * v38] * v145 + v34[3 * v38 + 2] * v147 + v34[3 * v38 + 3] * v148;
          v33[v144] = *(double *)v36 * v7 + v149 * v8;
          v139[v144] = *(double *)&v36[v40] * v7 + v150 * v8;
          v140[v144] = *(double *)&v36[2 * v40] * v7 + v151 * v8;
          v138[v144] = *(double *)&v36[3 * v40] * v7 + v152 * v8;
          ++v136;
          v36 = (uint64_t *)((char *)v36 + v137);
        }
        while (v322 != (_DWORD)v136);
      }
    }
    else if (v3 >= 1)
    {
      v69 = 8 * v38;
      v70 = v34 + 2;
      v71 = (double *)(v36 + 2);
      v72 = 8 * v40;
      v73 = v33 + 2;
      v74 = 8 * v41;
      do
      {
        v75 = *(v70 - 2);
        v76 = *(v70 - 1);
        v77 = v70[1];
        v78 = v76 * v35[v39] + v75 * *v35 + *v70 * v35[2 * v39] + v77 * v35[3 * v39];
        v79 = v76 * v35[v39 + 1]
            + v75 * v35[1]
            + *v70 * v35[(2 * (v39 & 0x1FFFFFFFFFFFFFFFLL)) | 1]
            + v77 * v35[3 * v39 + 1];
        v80 = v76 * v35[v39 + 2] + v75 * v35[2] + *v70 * v35[2 * v39 + 2] + v77 * v35[3 * v39 + 2];
        v81 = v76 * v35[v39 + 3] + v75 * v35[3] + *v70 * v35[2 * v39 + 3] + v77 * v35[3 * v39 + 3];
        *(v73 - 2) = *(v71 - 2) * v7 + v78 * v8;
        *(v73 - 1) = *(v71 - 1) * v7 + v79 * v8;
        *v73 = *v71 * v7 + v80 * v8;
        v73[1] = v71[1] * v7 + v81 * v8;
        v70 = (double *)((char *)v70 + v69);
        v71 = (double *)((char *)v71 + v72);
        v73 = (double *)((char *)v73 + v74);
        --v9;
      }
      while (v9);
    }
    goto LABEL_131;
  }
  if (v5 != 5)
    goto LABEL_97;
  v12 = *(float **)(v313 + 16);
  v13 = *(float **)(v324 + 16);
  v14 = *(float **)(v2 + 16);
  v15 = *(int **)(v1 + 16);
  v16 = *(_QWORD *)(v313 + 80);
  v17 = *(_QWORD *)(v324 + 80) >> 2;
  v18 = *(_QWORD *)(v2 + 80) >> 2;
  if (v15)
  {
    v19 = *(_QWORD *)(v1 + 80) >> 2;
    v20 = v16 >> 2;
    v21 = *(_DWORD *)(v2 + 8);
    if (v343 != 4)
      goto LABEL_10;
  }
  else
  {
    v19 = 0;
    v15 = &dword_1003BCC08;
    v20 = v16 >> 2;
    v21 = *(_DWORD *)(v2 + 8);
    if (v343 != 4)
    {
LABEL_10:
      if (v21 != 3)
      {
        if (v21 == 2)
        {
          if (v10 == 2 && v14 != v12)
          {
            if (v3 >= 1)
            {
              v22 = 4 * v20;
              v23 = v12 + 1;
              v24 = v13 + 1;
              v25 = 4 * v17;
              v26 = (float *)(v15 + 1);
              v27 = 4 * v19;
              do
              {
                v28 = *(v24 - 1);
                v29 = (float)(*v24 * v14[v18]) + (float)(v28 * *v14);
                v30 = (float)(*v24 * v14[v18 + 1]) + (float)(v28 * v14[1]);
                v31 = *(v26 - 1) * v7 + v29 * v8;
                *(v23 - 1) = v31;
                v32 = *v26 * v7 + v30 * v8;
                *v23 = v32;
                v23 = (float *)((char *)v23 + v22);
                v24 = (float *)((char *)v24 + v25);
                v26 = (float *)((char *)v26 + v27);
                --v9;
              }
              while (v9);
            }
            goto LABEL_131;
          }
          if (v13 != v12)
          {
            if (v15 == &dword_1003BCC08)
              v19 = 1;
            if (v10 >= 1)
            {
              v107 = 4 * (v15 != &dword_1003BCC08);
              do
              {
                v108 = v14[v18];
                v109 = (float)(v108 * v13[v17 + 1]) + (float)(v13[v17] * *v14);
                v110 = *(float *)v15 * v7 + (float)((float)(v13[1] * v108) + (float)(*v13 * *v14)) * v8;
                *v12 = v110;
                v111 = *(float *)&v15[v19] * v7 + v109 * v8;
                v12[v20] = v111;
                ++v12;
                ++v14;
                v15 = (int *)((char *)v15 + v107);
                --v10;
              }
              while (v10);
            }
            goto LABEL_131;
          }
        }
        goto LABEL_97;
      }
      if (v10 == 3 && v14 != v12)
      {
        if (v3 >= 1)
        {
          v82 = 4 * v19;
          v83 = (float *)(v15 + 1);
          v84 = v13 + 1;
          v85 = 4 * v17;
          v86 = v12 + 2;
          v87 = 4 * v20;
          do
          {
            v88 = *(v84 - 1);
            v89 = v84[1];
            v90 = (float)((float)(*v84 * v14[v18]) + (float)(v88 * *v14)) + (float)(v89 * v14[2 * v18]);
            v91 = (float)((float)(*v84 * v14[v18 + 1]) + (float)(v88 * v14[1]))
                + (float)(v89 * v14[(2 * (v18 & 0x3FFFFFFFFFFFFFFFLL)) | 1]);
            v92 = (float)((float)(*v84 * v14[v18 + 2]) + (float)(v88 * v14[2])) + (float)(v89 * v14[2 * v18 + 2]);
            v93 = *(v83 - 1) * v7 + v90 * v8;
            *(v86 - 2) = v93;
            v94 = *v83 * v7 + v91 * v8;
            *(v86 - 1) = v94;
            v95 = v83[1] * v7 + v92 * v8;
            *v86 = v95;
            v83 = (float *)((char *)v83 + v82);
            v84 = (float *)((char *)v84 + v85);
            v86 = (float *)((char *)v86 + v87);
            --v9;
          }
          while (v9);
        }
        goto LABEL_131;
      }
      if (v13 != v12)
      {
        if (v15 == &dword_1003BCC08)
          v19 = 1;
        if (v10 >= 1)
        {
          v153 = 0;
          v154 = &v12[v20];
          v155 = &v12[2 * v20];
          v156 = &v14[v18];
          v157 = 4 * (v15 != &dword_1003BCC08);
          v158 = &v14[2 * v18];
          do
          {
            v159 = v153;
            v160 = v14[v153];
            v161 = v156[v153];
            v162 = v158[v153];
            v163 = (float)((float)(v13[1] * v161) + (float)(*v13 * v160)) + (float)(v13[2] * v162);
            v164 = (float)((float)(v161 * v13[v17 + 1]) + (float)(v13[v17] * v160)) + (float)(v13[v17 + 2] * v162);
            v165 = (float)((float)(v161 * v13[(2 * (v17 & 0x3FFFFFFFFFFFFFFFLL)) | 1]) + (float)(v13[2 * v17] * v160))
                 + (float)(v13[2 * v17 + 2] * v162);
            v166 = *(float *)v15 * v7 + v163 * v8;
            v12[v159] = v166;
            v167 = *(float *)&v15[v19] * v7 + v164 * v8;
            v154[v159] = v167;
            v168 = *(float *)&v15[2 * v19] * v7 + v165 * v8;
            v155[v159] = v168;
            ++v153;
            v15 = (int *)((char *)v15 + v157);
          }
          while (v10 != (_DWORD)v153);
        }
        goto LABEL_131;
      }
LABEL_97:
      v301 = *(_QWORD *)(v1 + 16);
      if (v301)
        v327 = *(_QWORD *)(v1 + 80);
      else
        v327 = 0;
      v182 = *(_QWORD *)(v2 + 80);
      v354 = v356;
      v355 = 1032;
      v183 = v5 - 5;
      if (v5 - 5 >= 0xA || ((0x303u >> v183) & 1) == 0)
      {
        v351[0] = 0;
        v351[1] = 0;
        qmemcpy((void *)sub_10029430C(v351, 49), "type == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3))", 49);
        sub_100294B74(-215, v351, "gemmImpl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1218);
      }
      v184 = (int)v183;
      v325 = off_10044D468[v184];
      v326 = off_10044D418[v184];
      v306 = off_10044D4B8[v184];
      v186 = v10 == 1 || v343 == 1;
      if ((v6 & 2) == 0 && v186 && (*(_BYTE *)(v2 + 1) & 0x40) != 0)
      {
        if (v10 == 1)
          v182 = 0;
        else
          v182 = ((v5 >> 3) + 1) << ((0xFA50u >> (2 * (v5 & 7))) & 3);
        v6 |= 2u;
      }
      v188 = (v10 < 65 || v3 < 65) && v343 < 10001;
      if (v188 || v343 < 11 || v3 <= 128 && v10 <= 128 && v343 <= 0x80)
      {
        v189 = *(_QWORD *)(v324 + 16);
        v190 = *(_QWORD *)(v324 + 80);
        v191 = *(_QWORD *)(v2 + 16);
        v192 = *(_QWORD *)(v313 + 16);
        v193 = *(_QWORD *)(v313 + 80);
        v350[0] = v0;
        v350[1] = v3;
        v349[0] = v10;
        v349[1] = v3;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, _DWORD *, _DWORD *, int))v326)(v189, v190, v191, v182, v301, v327, v192, v193, v8, v7, v350, v349, v6);
LABEL_128:
        if (v354 != v356 && v354)
          operator delete[]();
        goto LABEL_131;
      }
      if ((v6 & 1) != 0)
      {
        v335 = *(_QWORD *)(v324 + 80);
        v300 = ((v5 >> 3) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3);
      }
      else
      {
        v300 = *(_QWORD *)(v324 + 80);
        v335 = ((v5 >> 3) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3);
      }
      v309 = ((v5 >> 3) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3) << ((v4 & 7) == 5);
      if ((v6 & 2) != 0)
        v194 = ((v5 >> 3) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3);
      else
        v194 = v182;
      v334 = v194;
      v338 = ((v5 >> 3) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3);
      if ((v6 & 2) != 0)
        v195 = v182;
      else
        v195 = ((v5 >> 3) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3);
      v308 = v195;
      v323 = v2;
      if (!*(_QWORD *)(v1 + 16))
        goto LABEL_159;
      v196 = *(unsigned int *)(v1 + 4);
      if ((int)v196 >= 3)
      {
        v198 = *(_QWORD *)(v1 + 64);
        v199 = (int *)(v198 + 4);
        v200 = 1;
        v201 = v196 & 0xFFFFFFFE;
        v202 = 1;
        do
        {
          v200 *= *(v199 - 1);
          v202 *= *v199;
          v199 += 2;
          v201 -= 2;
        }
        while (v201);
        v197 = v202 * v200;
        v203 = v196 - (v196 & 0xFFFFFFFE);
        if (v203)
        {
          v204 = (int *)(v198 + ((4 * v196) & 0x3FFFFFFF8));
          do
          {
            v205 = *v204++;
            v197 *= v205;
            --v203;
          }
          while (v203);
        }
      }
      else
      {
        v197 = *(int *)(v1 + 12) * (uint64_t)*(int *)(v1 + 8);
      }
      if ((_DWORD)v196 && v197)
      {
        v206 = *(_QWORD *)(v1 + 80);
        if ((v6 & 4) != 0)
          v207 = ((v5 >> 3) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3);
        else
          v207 = *(_QWORD *)(v1 + 80);
        v299 = v207;
        if ((v6 & 4) == 0)
          v206 = ((v5 >> 3) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3);
        v307 = v206;
        v208 = v6;
      }
      else
      {
LABEL_159:
        v299 = 0;
        v307 = 0;
        v208 = v6 & 0xFB;
      }
      if (v3 >= 128)
        v209 = 128;
      else
        v209 = v3;
      if (v10 >= 128)
        v210 = 128;
      else
        v210 = v10;
      v211 = 0x4000 / v210;
      if (0x4000 / v210 >= 0x4000 / v209)
        v211 = 0x4000 / v209;
      v333 = v211;
      if (v343 < v211)
        v211 = v343;
      if (v211 * v209 > 0x4000)
        v212 = 0x4000 / v211;
      else
        v212 = v209;
      if (v211 * v210 > 0x4000)
        v213 = 0x4000 / v211;
      else
        v213 = v210;
      v312 = v213;
      v214 = ((v213 + v213 / 8) & 0xFFFFFFFE) + 2;
      v341 = v211;
      v215 = v211 + v211 / 8;
      v216 = v215 + 1;
      v217 = v214 * (uint64_t)(v215 + 1);
      v218 = v217 * v338;
      v219 = v217 * v309;
      v303 = v212;
      v220 = (int)v338 * (uint64_t)(int)((v215 & 0xFFFFFFFE) + 2) * (v212 + v212 / 8 + 1);
      if ((v6 & 1) != 0)
        v208 &= ~1u;
      LOBYTE(v337) = v208;
      if ((v6 & 1) != 0)
        v221 = v220;
      else
        v221 = 0;
      v222 = v219 + v218 + v221;
      if (v355 >= v222)
      {
        v355 = v219 + v218 + v221;
        v223 = v354;
      }
      else
      {
        v223 = v356;
        if (v354 != v356)
        {
          if (v354)
            operator delete[]();
          v354 = v356;
        }
        v355 = v219 + v218 + v221;
        if (v222 >= 0x409)
          operator new[]();
      }
      v344 = v223;
      v332 = &v223[v219];
      v224 = &v223[v219 + v218];
      v318 = v224;
      if ((v6 & 1) == 0)
        v224 = 0;
      v317 = v224;
      if (v9 < 1)
        goto LABEL_128;
      v225 = 0;
      v298 = 8 * v9;
      v305 = 8 * v10;
      v320 = v338 >> 2;
      v321 = v6;
      v342 = &v223[v219];
      v319 = v219 + 16;
      v315 = (uint64_t)&v223[((int)v338 + (int)v309) * (uint64_t)v216 * v214 + 8];
      v302 = v9;
      while (1)
      {
        if (v225 + v303 >= v9 || (v226 = v303, v303 + 8 * (v225 + v303) > v298))
          v226 = v9 - v225;
        v227 = v323;
        v228 = v324;
        v229 = v343;
        v304 = v225;
        if (v10 < 1)
          goto LABEL_193;
        v230 = 0;
        v310 = v301 + v299 * v225;
        v314 = v225;
        v336 = v300 * v225;
        while (2)
        {
          if (v230 + v312 >= v10 || (v233 = v312, v312 + 8 * (v230 + v312) > v305))
            v233 = v10 - v230;
          v234 = 0;
          v311 = (int)v338 * (uint64_t)v230;
          v329 = v310 + v307 * v230;
          v235 = v337 & 0xF;
          v328 = v233 * (int)v309;
          v316 = v230;
          v337 = v235 | 0x10;
          v339 = v308 * v230;
          v340 = v233;
LABEL_204:
          while (2)
          {
            if (v234 + v341 >= v229 || (v236 = v341, v341 + 8 * (v234 + v341) > 8 * v343))
              v236 = v343 - v234;
            v237 = *(_QWORD *)(v228 + 16);
            v238 = v335 * v234;
            v239 = v237 + v336 + v238;
            v240 = *(_QWORD *)(v228 + 80);
            v241 = *(_QWORD *)(v227 + 16);
            if ((v6 & 1) != 0)
            {
              v245 = v338;
              if (v344)
              {
                v244 = (int)v338 * (uint64_t)v236;
                if (v226 < 1)
                  goto LABEL_234;
                switch((_DWORD)v338)
                {
                  case 4:
                    if (v236 > 0)
                    {
                      v257 = 0;
                      v258 = v318;
                      do
                      {
                        v259 = 0;
                        v260 = 0;
                        do
                        {
                          *(_DWORD *)&v258[v260] = *(_DWORD *)(v239 + v259);
                          v260 += 4;
                          v259 += v240;
                        }
                        while (4 * v236 != v260);
                        ++v257;
                        v258 += v244;
                        v239 += 4;
                      }
                      while (v257 < v226);
                      v242 = v226;
                      v243 = v236;
                      v239 = (size_t)v317;
                      goto LABEL_235;
                    }
LABEL_234:
                    v242 = v226;
                    v243 = v236;
                    v239 = (size_t)v318;
                    goto LABEL_235;
                  case 8:
                    v252 = 0;
                    v253 = v318;
                    do
                    {
                      if (v236 >= 1)
                      {
                        v254 = 0;
                        v255 = 0;
                        v256 = 0;
                        do
                        {
                          *(_QWORD *)&v253[v255] = *(_QWORD *)(v239 + v254);
                          v256 += 2;
                          v255 += 8;
                          v254 += v240;
                        }
                        while (v256 < 2 * v236);
                      }
                      ++v252;
                      v253 += v244;
                      v239 += 8;
                    }
                    while (v252 < v226);
                    break;
                  case 0x10:
                    v246 = 0;
                    v247 = v237 + v336 + v238 + 8;
                    v248 = (_QWORD *)v315;
                    do
                    {
                      if (v236 >= 1)
                      {
                        v249 = 0;
                        v250 = (_QWORD *)v247;
                        v251 = v248;
                        do
                        {
                          *(v251 - 1) = *(v250 - 1);
                          *v251 = *v250;
                          v251 += 2;
                          v249 += 4;
                          v250 = (_QWORD *)((char *)v250 + v240);
                        }
                        while (v249 < 4 * v236);
                      }
                      ++v246;
                      v248 = (_QWORD *)((char *)v248 + v244);
                      v247 += 16;
                    }
                    while (v246 < v226);
                    break;
                  default:
                    goto LABEL_234;
                }
                v242 = v226;
                v243 = v236;
                v239 = (size_t)v317;
                v245 = v338;
              }
              else
              {
                v242 = v236;
                v243 = v226;
                v244 = *(_QWORD *)(v228 + 80);
              }
            }
            else
            {
              v242 = v226;
              v243 = v236;
              v244 = *(_QWORD *)(v228 + 80);
              v245 = v338;
            }
LABEL_235:
            v261 = v334 * v234;
            v262 = (_BYTE *)(v241 + v339 + v261);
            if (v233 >= v10)
            {
              v265 = v182;
              if (v343 <= v333)
                goto LABEL_279;
              goto LABEL_276;
            }
            if ((v6 & 2) != 0)
              v263 = v233;
            else
              v263 = v236;
            if ((v6 & 2) != 0)
              v264 = v236;
            else
              v264 = v233;
            v265 = v245 * (uint64_t)v264;
            if (v263)
            {
              v330 = v243;
              v331 = v235;
              v266 = 0;
              v267 = v264 * v320;
              v268 = (int)(v264 * v320 - 4);
              v269 = v339 + v241 + v261;
              if (v268 <= 3)
                v270 = 3;
              else
                v270 = v267 - 4;
              v271 = (4 * v270) & 0x1FFFFFFF0;
              v272 = v319 + v271;
              v273 = v339 + 16 + v261 + v271;
              v274 = (v270 >> 2) + 1;
              v275 = v332;
              while (1)
              {
                v276 = v266 * v265;
                v277 = v182 * v266;
                if (v267 < 4)
                {
                  v278 = 0;
                  if (v267 > 0)
                    goto LABEL_265;
                  goto LABEL_247;
                }
                if (v270 < 0xC)
                  break;
                if ((unint64_t)v275 < v241 + v273 + v277 && v262 < &v344[v272 + v276])
                  break;
                v280 = 0;
                v281 = v274 & 0x3FFFFFFC;
                do
                {
                  v283 = *(_OWORD *)&v262[v280];
                  v282 = *(_OWORD *)&v262[v280 + 16];
                  v284 = *(_OWORD *)&v262[v280 + 48];
                  v285 = &v275[v280];
                  v285[2] = *(_OWORD *)&v262[v280 + 32];
                  v285[3] = v284;
                  *v285 = v283;
                  v285[1] = v282;
                  v280 += 64;
                  v281 -= 4;
                }
                while (v281);
                v278 = 4 * (v274 & 0x3FFFFFFC);
                if (v274 != (v274 & 0x3FFFFFFC))
                  goto LABEL_262;
LABEL_264:
                v278 = v278;
                if ((int)v278 < v267)
                {
LABEL_265:
                  if (v278 + 1 > v267)
                    v290 = v278 + 1;
                  else
                    v290 = v267;
                  v291 = v290 - v278;
                  if ((unint64_t)(v290 - v278) < 0xC)
                    goto LABEL_286;
                  v292 = v269 + v277;
                  v293 = 4 * v278;
                  if ((unint64_t)&v342[4 * v278 + v276 - v292 + -4 * v278] < 0x20)
                    goto LABEL_286;
                  v278 += v291 & 0xFFFFFFFFFFFFFFF8;
                  v294 = v291 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    v295 = *(_OWORD *)&v262[v293 + 16];
                    v296 = &v275[v293];
                    *v296 = *(_OWORD *)&v262[v293];
                    v296[1] = v295;
                    v293 += 32;
                    v294 -= 8;
                  }
                  while (v294);
                  if (v291 != (v291 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_286:
                    do
                    {
                      *(_DWORD *)&v275[4 * v278] = *(_DWORD *)&v262[4 * v278];
                      ++v278;
                    }
                    while (v278 < v267);
                  }
                }
LABEL_247:
                v262 += v182;
                v275 += v265;
                ++v266;
                if (!--v263)
                {
                  v262 = v332;
                  v10 = v322;
                  v227 = v323;
                  LOBYTE(v6) = v321;
                  v228 = v324;
                  v233 = v340;
                  v235 = v331;
                  v243 = v330;
                  if (v343 <= v333)
                    goto LABEL_279;
LABEL_276:
                  v348[0] = v243;
                  v348[1] = v242;
                  v347[0] = v233;
                  v347[1] = v226;
                  LODWORD(v297) = v235;
                  v325(v239, v244, (int)v262, v265, v344, v328, (int)v348, (int)v347, (int)v297);
                  v234 += v236;
                  v235 = v337;
                  v229 = v343;
                  v233 = v340;
                  if (v234 >= v343)
                  {
                    v231 = *(_QWORD *)(v313 + 80);
                    v232 = *(_QWORD *)(v313 + 16) + **(_QWORD **)(v313 + 72) * v314;
                    v345[0] = v340;
                    v345[1] = v226;
                    ((void (*)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, _DWORD *, _QWORD, double, double))v306)(v329, v327, v344, v328, v232 + v311, v231, v345, v337, v8, v7);
                    v233 = v340;
                    goto LABEL_199;
                  }
                  goto LABEL_204;
                }
              }
              v278 = 0;
LABEL_262:
              v286 = 4 * v278;
              do
              {
                v287 = *(_DWORD *)&v262[v286 + 4];
                v288 = &v275[v286];
                *v288 = *(_DWORD *)&v262[v286];
                v288[1] = v287;
                v289 = *(_DWORD *)&v262[v286 + 12];
                v288[2] = *(_DWORD *)&v262[v286 + 8];
                v288[3] = v289;
                v278 += 4;
                v286 += 16;
              }
              while (v278 <= v268);
              goto LABEL_264;
            }
            v262 = v332;
            if (v343 > v333)
              goto LABEL_276;
LABEL_279:
            v346[0] = v243;
            v346[1] = v242;
            v345[2] = v233;
            v345[3] = v226;
            v297 = v346;
            ((void (*)(double, double))v326)(v8, v7);
            v234 += v236;
            v235 = v337;
            v229 = v343;
            v233 = v340;
            if (v234 < v343)
              continue;
            break;
          }
LABEL_199:
          v230 = v233 + v316;
          if (v233 + v316 < v10)
            continue;
          break;
        }
LABEL_193:
        v225 = v226 + v304;
        v9 = v302;
        if (v226 + v304 >= v302)
          goto LABEL_128;
      }
    }
  }
  if (v10 != 4 || v14 == v12)
  {
    if (v13 == v12)
      goto LABEL_97;
    if (v15 == &dword_1003BCC08)
      v19 = 1;
    if (v10 >= 1)
    {
      v115 = 0;
      v116 = 4 * (v15 != &dword_1003BCC08);
      v117 = &v12[3 * v20];
      v118 = &v12[v20];
      v119 = &v12[2 * v20];
      v120 = &v14[3 * v18];
      v121 = &v14[v18];
      v122 = &v14[2 * v18];
      do
      {
        v123 = v115;
        v124 = v14[v115];
        v125 = v121[v115];
        v126 = v122[v115];
        v127 = v120[v115];
        v128 = (float)((float)((float)(v13[1] * v125) + (float)(*v13 * v124)) + (float)(v13[2] * v126))
             + (float)(v13[3] * v127);
        v129 = (float)((float)((float)(v125 * v13[v17 + 1]) + (float)(v13[v17] * v124)) + (float)(v13[v17 + 2] * v126))
             + (float)(v13[v17 + 3] * v127);
        v130 = (float)((float)((float)(v125 * v13[(2 * (v17 & 0x3FFFFFFFFFFFFFFFLL)) | 1]) + (float)(v13[2 * v17] * v124))
                     + (float)(v13[2 * v17 + 2] * v126))
             + (float)(v13[2 * v17 + 3] * v127);
        v131 = (float)((float)((float)(v125 * v13[3 * v17 + 1]) + (float)(v13[3 * v17] * v124))
                     + (float)(v13[3 * v17 + 2] * v126))
             + (float)(v13[3 * v17 + 3] * v127);
        v132 = *(float *)v15 * v7 + v128 * v8;
        v12[v123] = v132;
        v133 = *(float *)&v15[v19] * v7 + v129 * v8;
        v118[v123] = v133;
        v134 = *(float *)&v15[2 * v19] * v7 + v130 * v8;
        v119[v123] = v134;
        v135 = *(float *)&v15[3 * v19] * v7 + v131 * v8;
        v117[v123] = v135;
        ++v115;
        v15 = (int *)((char *)v15 + v116);
      }
      while (v322 != (_DWORD)v115);
    }
  }
  else if (v3 >= 1)
  {
    v52 = 4 * v19;
    v53 = (float *)(v15 + 2);
    v54 = v13 + 2;
    v55 = 4 * v17;
    v56 = v12 + 2;
    v57 = 4 * v20;
    do
    {
      v58 = *(v54 - 2);
      v59 = *(v54 - 1);
      v60 = v54[1];
      v61 = (float)((float)((float)(v59 * v14[v18]) + (float)(v58 * *v14)) + (float)(*v54 * v14[2 * v18]))
          + (float)(v60 * v14[3 * v18]);
      v62 = (float)((float)((float)(v59 * v14[v18 + 1]) + (float)(v58 * v14[1]))
                  + (float)(*v54 * v14[(2 * (v18 & 0x3FFFFFFFFFFFFFFFLL)) | 1]))
          + (float)(v60 * v14[3 * v18 + 1]);
      v63 = (float)((float)((float)(v59 * v14[v18 + 2]) + (float)(v58 * v14[2])) + (float)(*v54 * v14[2 * v18 + 2]))
          + (float)(v60 * v14[3 * v18 + 2]);
      v64 = (float)((float)((float)(v59 * v14[v18 + 3]) + (float)(v58 * v14[3])) + (float)(*v54 * v14[2 * v18 + 3]))
          + (float)(v60 * v14[3 * v18 + 3]);
      v65 = *(v53 - 2) * v7 + v61 * v8;
      *(v56 - 2) = v65;
      v66 = *(v53 - 1) * v7 + v62 * v8;
      *(v56 - 1) = v66;
      v67 = *v53 * v7 + v63 * v8;
      *v56 = v67;
      v68 = v53[1] * v7 + v64 * v8;
      v56[1] = v68;
      v53 = (float *)((char *)v53 + v52);
      v54 = (float *)((char *)v54 + v55);
      v56 = (float *)((char *)v56 + v57);
      --v9;
    }
    while (v9);
  }
LABEL_131:
  if (v353)
    sub_1002989D0(&v352);
}

void sub_1002424D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  if (STACK[0x208] != a13 && STACK[0x208])
    operator delete[]();
  if (LODWORD(STACK[0x200]))
    sub_1002989D0(&a72);
  _Unwind_Resume(a1);
}

_DWORD *sub_10024255C(_DWORD *a1, unint64_t a2, _DWORD *a3, unint64_t a4, float *a5, unint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, int *a11, int *a12, char a13)
{
  double v16;
  double v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  float *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  double v35;
  BOOL v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v41;
  uint64_t v42;
  float *v43;
  uint64_t v44;
  __int128 v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  float *v49;
  float *v50;
  _DWORD *v51;
  double v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  double v57;
  float v58;
  float64x2_t v59;
  double v60;
  _DWORD *v61;
  float *v62;
  uint64_t v63;
  double v64;
  float v65;
  float v66;
  float *v67;
  float v68;
  double v69;
  float *v70;
  float *v71;
  uint64_t v72;
  float v73;
  double v74;
  float v75;
  double v76;
  int v77;
  uint64_t v78;
  BOOL v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  float *v89;
  uint64_t v90;
  unint64_t v91;
  __int128 v92;
  float *v93;
  uint64_t v94;
  uint64_t v95;
  const float *v96;
  uint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float64x2_t v102;
  uint64_t v103;
  const float *v104;
  double *v105;
  double *v106;
  uint64_t v107;
  double v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  float64x2_t v112;
  float64x2_t *v113;
  float32x2_t *v114;
  unint64_t v115;
  float64x2_t v116;
  uint64_t v117;
  float *v118;
  float v119;
  uint64_t v120;
  uint64_t v121;
  float64x2_t *v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float32x4_t *v127;
  float v128;
  int v129;
  uint64_t v130;
  BOOL v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  BOOL v136;
  uint64_t v137;
  uint64_t v138;
  float *v139;
  uint64_t v140;
  unint64_t v141;
  __int128 v142;
  float *v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  float *v147;
  float v148;
  int v149;
  double v150;
  double v151;
  double v152;
  double v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  const float *v157;
  const float *v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  uint64_t v199;
  double v200;
  float *v201;
  uint64_t v202;
  uint64_t v203;
  _DWORD *v204;
  int v205;
  _DWORD *v206;
  _DWORD *v207;
  uint64_t v208;
  uint64_t v209;
  double v210;
  uint64_t v211;
  float *v212;
  uint64_t v213;
  float v214;
  double v215;
  float v216;
  double v217;
  float v218;
  float v219;
  double v220;
  _DWORD *result;
  int v223;
  uint64_t v224;
  unint64_t v225;
  __int128 v226;
  float *v227;
  uint64_t v228;
  uint64_t v229;
  float *v230;
  uint64_t v231;
  uint64_t v232;
  BOOL v233;
  _DWORD *v234;
  uint64_t v235;
  uint64_t v236;
  BOOL v237;
  unint64_t v238;
  uint64_t v239;
  char v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  float *v244;
  int v245;
  float *v246;
  uint64_t v249;
  float64x2_t v250;
  float64x2_t v251;
  uint64_t v252;
  float64x2_t v253;
  unint64_t v254;
  const float *v255;
  float64x2_t v256;
  char v257;
  float64x2_t v258;
  float64x2_t v259;
  int v260;
  float64x2_t v261;
  _BYTE v262[32];
  uint64_t v263;
  _DWORD *v264;
  uint64_t v265;
  _DWORD v266[266];
  float32x2x4_t v267;
  float64x2x4_t v268;
  float32x4x4_t v269;
  float32x4x4_t v270;
  float32x4x4_t v271;
  float32x4x4_t v272;

  v16 = a10;
  v17 = a9;
  v20 = *a12;
  v19 = a12[1];
  v21 = *a12;
  v22 = *a11;
  v23 = a11[1];
  v24 = (float *)v266;
  v264 = v266;
  v265 = 264;
  v25 = a2 >> 2;
  v26 = a4 >> 2;
  v27 = a6 >> 2;
  v28 = a8 >> 2;
  v29 = a5;
  if ((a13 & 4) != 0)
    v30 = 1;
  else
    v30 = a6 >> 2;
  if ((a13 & 4) == 0)
    v27 = 1;
  if (!a5)
    v30 = 0;
  v241 = v28;
  v242 = v30;
  if (a5)
    v31 = v27;
  else
    v31 = 0;
  v245 = v19;
  if ((a13 & 1) != 0)
  {
    v33 = 1;
    if (a2 >= 8 && (int)v23 >= 2)
    {
      v265 = v23;
      if (v23 >= 0x109)
        operator new[]();
      v33 = 1;
      v244 = (float *)v266;
      if ((a13 & 2) == 0)
        goto LABEL_27;
      goto LABEL_146;
    }
    v22 = v23;
    v32 = a2 >> 2;
    if ((_DWORD)v23 == 1)
      goto LABEL_13;
  }
  else
  {
    v32 = 1;
    v33 = a2 >> 2;
    if (v22 == 1)
    {
LABEL_13:
      if (a2 < 8 || (int)v23 < 2)
        goto LABEL_215;
      v265 = (int)v19;
      if (v19 >= 0x109)
        operator new[]();
      if ((int)v19 >= 1)
      {
        if ((_DWORD)v19 == 1)
        {
          v203 = 0;
        }
        else
        {
          v202 = 0;
          v203 = v19 & 0xFFFFFFFE;
          v204 = a1;
          do
          {
            v205 = v204[v25];
            v206 = &v266[v202];
            *v206 = *v204;
            v206[1] = v205;
            v202 += 2;
            v204 += 2 * v25;
          }
          while (v203 != v202);
          if (v203 == v19)
            goto LABEL_214;
        }
        v207 = &a1[v203 * v25];
        do
        {
          v266[v203++] = *v207;
          v207 += v25;
        }
        while (v19 != v203);
      }
LABEL_214:
      a1 = v266;
LABEL_215:
      if (a4 >= 8)
      {
        if ((unint64_t)(int)v20 > 0x108 && v20 >= 0x109)
          operator new[]();
        if ((int)v20 >= 1)
        {
          v208 = 0;
          do
          {
            *(_DWORD *)&v262[v208] = *a3;
            v208 += 4;
            a3 += v26;
          }
          while (4 * v20 != v208);
        }
        a3 = v262;
      }
      if ((int)v19 < 1)
        goto LABEL_239;
      v209 = 0;
      while (1)
      {
        v210 = *(float *)&a1[v209] * v17;
        if (v21 >= 2)
        {
          v213 = 0;
          v211 = 0;
          v212 = v29;
          do
          {
            v217 = v210 * *(float *)&a3[v213];
            v215 = v210 * *(float *)&a3[v213 + 1];
            if (v212)
            {
              v214 = v217 + *v212 * v16;
              *(float *)(a7 + v213 * 4) = v214;
              v215 = v215 + v212[v31] * v16;
            }
            else
            {
              v218 = v217;
              *(float *)(a7 + v213 * 4) = v218;
            }
            v216 = v215;
            *(float *)(a7 + v213 * 4 + 4) = v216;
            v211 += 2;
            v212 += 2 * v31;
            v213 += 2;
          }
          while (v211 <= (int)v20 - 2);
          v211 = v211;
          if ((int)v211 < (int)v20)
          {
            do
            {
LABEL_237:
              v220 = v210 * *(float *)&a3[v211];
              if (v212)
                v220 = v220 + *v212 * v16;
              v219 = v220;
              *(float *)(a7 + 4 * v211++) = v219;
              v212 += v31;
            }
            while (v20 != v211);
          }
        }
        else
        {
          v211 = 0;
          v212 = v29;
          if ((int)v20 > 0)
            goto LABEL_237;
        }
        ++v209;
        v29 += v30;
        a7 += 4 * v241;
        if (v209 == v19)
          goto LABEL_239;
      }
    }
  }
  v24 = 0;
  v25 = v32;
  LODWORD(v23) = v22;
  v244 = 0;
  if ((a13 & 2) == 0)
  {
LABEL_27:
    if ((unint64_t)(4 * (int)v20) <= 0x640)
    {
      if ((int)v19 < 1)
        goto LABEL_239;
      v34 = 0;
      v35 = a9 * 0.0;
      if (v24)
        v36 = (int)v23 < 1;
      else
        v36 = 1;
      v37 = v36;
      v38 = 4 * v33;
      v39 = 4 * v25;
      v41 = v23 < 8 || v25 != 1;
      v42 = 4 * v26;
LABEL_43:
      if (v24)
        v43 = v24;
      else
        v43 = (float *)a1;
      if ((v37 & 1) == 0)
      {
        v44 = 0;
        if (v41)
          goto LABEL_50;
        do
        {
          v45 = *(_OWORD *)((char *)a1 + v44 + 16);
          v46 = (_OWORD *)((char *)v24 + v44);
          *v46 = *(_OWORD *)((char *)a1 + v44);
          v46[1] = v45;
          v44 += 32;
        }
        while (((4 * v23) & 0x3FFFFFFE0) != v44);
        v44 = v23 & 0xFFFFFFF8;
        v43 = v24;
        if (v44 != v23)
        {
LABEL_50:
          v47 = v39 * v44;
          do
          {
            v24[v44++] = *(float *)((char *)a1 + v47);
            v47 += v39;
          }
          while (v23 != v44);
          v43 = v24;
        }
      }
      if ((int)v20 < 4)
      {
        v48 = 0;
        v49 = v29;
        v50 = v29;
        if ((int)v20 > 0)
          goto LABEL_66;
        goto LABEL_42;
      }
      v48 = 0;
      v50 = v29;
      v51 = a3;
      v49 = v50;
      while (1)
      {
        v59 = 0uLL;
        v60 = 0.0;
        if ((int)v23 < 1)
        {
          v52 = v17 * 0.0;
          v53 = 4 * v48;
          if (!v50)
            goto LABEL_64;
        }
        else
        {
          v61 = v51;
          v62 = v43;
          v63 = v23;
          v64 = 0.0;
          do
          {
            v65 = *v62++;
            v64 = v64 + v65 * *(float *)v61;
            v59 = vmlaq_n_f64(v59, vcvtq_f64_f32(*(float32x2_t *)(v61 + 1)), v65);
            v60 = v60 + v65 * *((float *)v61 + 3);
            v61 = (_DWORD *)((char *)v61 + v42);
            --v63;
          }
          while (v63);
          v52 = v64 * v17;
          v53 = 4 * v48;
          if (!v50)
          {
LABEL_64:
            v66 = v52;
            *(float *)(a7 + v53) = v66;
            *(float32x2_t *)(a7 + (v53 | 4)) = vcvt_f32_f64(vmulq_n_f64(v59, v17));
            v57 = v60 * v17;
            goto LABEL_59;
          }
        }
        v54 = v52 + *v50 * v16;
        *(float *)(a7 + v53) = v54;
        v55 = v17 * v59.f64[0] + v50[v31] * v16;
        *(float *)(a7 + (v53 | 4)) = v55;
        v56 = vmuld_lane_f64(v17, v59, 1) + v50[2 * v31] * v16;
        *(float *)(a7 + (v53 | 8)) = v56;
        v57 = v60 * v17 + v50[3 * v31] * v16;
LABEL_59:
        v58 = v57;
        *(float *)(a7 + (v53 | 0xC)) = v58;
        v48 += 4;
        v50 += 4 * v31;
        v51 += 4;
        if (v48 > v21 - 4)
        {
          v48 = v48;
          if ((int)v48 < (int)v20)
          {
LABEL_66:
            if ((int)v23 <= 0)
            {
              do
              {
                v76 = v17 * 0.0;
                if (v50)
                  v76 = v35 + *v50 * v16;
                v75 = v76;
                *(float *)(a7 + 4 * v48++) = v75;
                v50 += v31;
              }
              while (v20 != v48);
            }
            else
            {
              v67 = (float *)&a3[v48];
              do
              {
                v69 = 0.0;
                v70 = v67;
                v71 = v43;
                v72 = v23;
                do
                {
                  v73 = *v71++;
                  v69 = v69 + v73 * *v70;
                  v70 = (float *)((char *)v70 + v42);
                  --v72;
                }
                while (v72);
                v74 = v69 * v17;
                if (v50)
                  v74 = v74 + *v50 * v16;
                v68 = v74;
                *(float *)(a7 + 4 * v48++) = v68;
                v50 += v31;
                ++v67;
              }
              while (v48 != v20);
            }
          }
LABEL_42:
          ++v34;
          a1 = (_DWORD *)((char *)a1 + v38);
          v29 = &v49[v30];
          a7 += 4 * v28;
          v24 = v244;
          if (v34 == v245)
            goto LABEL_239;
          goto LABEL_43;
        }
      }
    }
    v254 = v25;
    if (v20 >= 0x89)
      operator new[]();
    if ((int)v19 < 1)
      goto LABEL_239;
    v77 = 0;
    v78 = (int)v20 - 4;
    if (v24)
      v79 = (int)v23 < 1;
    else
      v79 = 1;
    v80 = v79;
    v257 = v80;
    if (v78 <= 3)
      v81 = 3;
    else
      v81 = (int)v20 - 4;
    v82 = (v81 >> 2) + 1;
    v83 = v82 & 0x7FFFFFFE;
    v84 = 4 * v83;
    v252 = 4 * v33;
    v86 = v23 < 8 || v254 != 1;
    v233 = v86;
    v232 = 4 * v254;
    v87 = 4 * (a4 >> 2);
    v234 = a3 + 2;
    v249 = v242;
    v255 = (const float *)a3;
    v88 = 4 * v31;
    v236 = v82 & 0x7FFFFFFE;
    v238 = v81;
    v235 = (v81 >> 2) + 1;
    v243 = 4 * v31;
    while (1)
    {
      if (v24)
        v89 = v24;
      else
        v89 = (float *)a1;
      v246 = v29;
      if ((v257 & 1) == 0)
      {
        if (v233)
        {
          v90 = 0;
LABEL_105:
          v94 = v232 * v90;
          do
          {
            v24[v90++] = *(float *)((char *)a1 + v94);
            v94 += v232;
          }
          while (v23 != v90);
          v89 = v24;
          goto LABEL_108;
        }
        v91 = 0;
        do
        {
          v92 = *(_OWORD *)&a1[v91 / 4 + 4];
          v93 = &v24[v91 / 4];
          *(_OWORD *)v93 = *(_OWORD *)&a1[v91 / 4];
          *((_OWORD *)v93 + 1) = v92;
          v91 += 32;
        }
        while (((4 * v23) & 0x3FFFFFFE0) != v91);
        v90 = v23 & 0xFFFFFFF8;
        v89 = v24;
        if (v90 != v23)
          goto LABEL_105;
      }
LABEL_108:
      if (v21 >= 1)
      {
        v260 = v77;
        v95 = v84;
        bzero(v262, 8 * v20);
        v82 = v235;
        v84 = v95;
        v88 = v243;
        v24 = v244;
        v83 = v236;
        v81 = v238;
        v77 = v260;
        v21 = v20;
        v17 = a9;
        LODWORD(v19) = v245;
      }
      v96 = v255;
      if ((int)v23 >= 1)
      {
        v97 = 0;
        v98 = v234;
        while (1)
        {
          *(double *)&v99 = v89[v97];
          if ((int)v20 < 4)
          {
            v100 = 0;
            if ((int)v20 <= 0)
              goto LABEL_112;
            goto LABEL_124;
          }
          if (v81 < 4)
            break;
          v102 = (float64x2_t)vdupq_lane_s64(v99, 0);
          v103 = v83;
          v104 = v96;
          v105 = (double *)v262;
          do
          {
            v268 = vld4q_f64(v105);
            v267 = vld4_f32(v104);
            v104 += 8;
            v268.val[0] = vmlaq_f64(v268.val[0], v102, vcvtq_f64_f32(v267.val[0]));
            v268.val[1] = vmlaq_f64(v268.val[1], v102, vcvtq_f64_f32(v267.val[1]));
            v268.val[2] = vmlaq_f64(v268.val[2], v102, vcvtq_f64_f32(v267.val[2]));
            v268.val[3] = vmlaq_f64(v268.val[3], v102, vcvtq_f64_f32(v267.val[3]));
            vst4q_f64(v105, v268);
            v105 += 8;
            v103 -= 2;
          }
          while (v103);
          v101 = v84;
          if (v82 != v83)
            goto LABEL_121;
LABEL_123:
          v100 = v101;
          if ((int)v101 >= (int)v20)
            goto LABEL_112;
LABEL_124:
          v110 = v20 - v100;
          if ((unint64_t)(v20 - v100) >= 4)
          {
            v111 = (v110 & 0xFFFFFFFFFFFFFFFCLL) + v100;
            v112 = (float64x2_t)vdupq_lane_s64(v99, 0);
            v113 = (float64x2_t *)&v262[8 * v100 + 16];
            v114 = (float32x2_t *)&v98[v100];
            v115 = v110 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v116 = vmlaq_f64(*v113, v112, vcvtq_f64_f32(*v114));
              v113[-1] = vmlaq_f64(v113[-1], v112, vcvtq_f64_f32(v114[-1]));
              *v113 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            if (v110 == (v110 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_112;
          }
          else
          {
            v111 = v100;
          }
          do
          {
            *(double *)&v262[8 * v111] = *(double *)&v262[8 * v111] + v96[v111] * *(double *)&v99;
            ++v111;
          }
          while (v20 != v111);
LABEL_112:
          ++v97;
          v96 = (const float *)((char *)v96 + v87);
          v98 = (_DWORD *)((char *)v98 + v87);
          if (v97 == v23)
            goto LABEL_131;
        }
        v101 = 0;
LABEL_121:
        v106 = (double *)&v262[8 * v101 + 16];
        v107 = 4 * v101 + 8;
        do
        {
          v108 = *(v106 - 1) + v96[v101 + 1] * *(double *)&v99;
          *(v106 - 2) = *(v106 - 2) + *(const float *)((char *)v96 + v107 - 8) * *(double *)&v99;
          *(v106 - 1) = v108;
          v109 = v106[1] + *(const float *)((char *)v96 + v107 + 4) * *(double *)&v99;
          *v106 = *v106 + *(const float *)((char *)v96 + v107) * *(double *)&v99;
          v106[1] = v109;
          v106 += 4;
          v101 += 4;
          v107 += 16;
        }
        while (v101 <= v78);
        goto LABEL_123;
      }
LABEL_131:
      if (v246)
      {
        if (v21 >= 1)
        {
          v117 = 0;
          v118 = v246;
          do
          {
            v119 = *(double *)&v262[8 * v117] * v17 + *v118 * v16;
            *(float *)(a7 + 4 * v117++) = v119;
            v118 = (float *)((char *)v118 + v88);
          }
          while (v20 != v117);
        }
        goto LABEL_95;
      }
      if ((int)v20 >= 1)
      {
        if (v21 >= 8)
        {
          v121 = 0;
          v122 = (float64x2_t *)&v263;
          do
          {
            v123 = v122[-2];
            v124 = v122[-1];
            v125 = *v122;
            v126 = v122[1];
            v122 += 4;
            v127 = (float32x4_t *)(a7 + v121);
            *v127 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v123, v17)), vmulq_n_f64(v124, v17));
            v127[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v125, v17)), vmulq_n_f64(v126, v17));
            v121 += 32;
          }
          while (((4 * v20) & 0x3FFFFFFE0) != v121);
          v120 = v20 & 0xFFFFFFF8;
          if (v120 == v20)
            goto LABEL_95;
        }
        else
        {
          v120 = 0;
        }
        do
        {
          v128 = *(double *)&v262[8 * v120] * v17;
          *(float *)(a7 + 4 * v120++) = v128;
        }
        while (v20 != v120);
      }
LABEL_95:
      ++v77;
      a1 = (_DWORD *)((char *)a1 + v252);
      v29 = &v246[v249];
      a7 += 4 * v241;
      if (v77 == (_DWORD)v19)
        goto LABEL_239;
    }
  }
LABEL_146:
  if ((int)v19 < 1)
    goto LABEL_239;
  if (v21 < 1)
  {
    if (!v24 || (int)v23 < 1)
      goto LABEL_239;
    if (v23 < 8)
    {
      do
      {
        v201 = (float *)a1;
        if ((_DWORD)v23 != 1)
        {
          v24[1] = *(float *)&a1[v25];
          if ((_DWORD)v23 != 2)
          {
            v24[2] = *(float *)&a1[2 * v25];
            if ((_DWORD)v23 != 3)
            {
              v24[3] = *(float *)&a1[3 * v25];
              if ((_DWORD)v23 != 4)
              {
                v24[4] = *(float *)&a1[4 * v25];
                if ((_DWORD)v23 != 5)
                {
                  v24[5] = *(float *)&a1[5 * v25];
                  if ((_DWORD)v23 != 6)
                    v24[6] = *(float *)&a1[6 * v25];
                }
              }
            }
          }
        }
        a1 += v33;
        LODWORD(v19) = v19 - 1;
      }
      while ((_DWORD)v19);
      *v24 = *v201;
      goto LABEL_239;
    }
    v223 = 0;
    v224 = 4 * v25;
    while (1)
    {
      if (v25 == 1)
      {
        v225 = 0;
        do
        {
          v226 = *(_OWORD *)&a1[v225 / 4 + 4];
          v227 = &v24[v225 / 4];
          *(_OWORD *)v227 = *(_OWORD *)&a1[v225 / 4];
          *((_OWORD *)v227 + 1) = v226;
          v225 += 32;
        }
        while (((4 * v23) & 0x3FFFFFFE0) != v225);
        v228 = v23 & 0xFFFFFFF8;
        if (v228 == v23)
          goto LABEL_246;
      }
      else
      {
        v228 = 0;
      }
      v229 = v23 - v228;
      v230 = &v24[v228];
      v231 = v224 * v228;
      do
      {
        *v230++ = *(float *)((char *)a1 + v231);
        v231 += v224;
        --v229;
      }
      while (v229);
LABEL_246:
      ++v223;
      a1 += v33;
      if (v223 == (_DWORD)v19)
        goto LABEL_239;
    }
  }
  v129 = 0;
  v130 = (int)v23 - 4;
  if (v24)
    v131 = (int)v23 < 1;
  else
    v131 = 1;
  v132 = v131;
  v240 = v132;
  v133 = 3;
  if (v130 > 3)
    v133 = (int)v23 - 4;
  v134 = (v133 >> 2) + 1;
  v239 = 4 * v33;
  v136 = v23 < 8 || v25 != 1;
  v237 = v136;
  v137 = 4 * v25;
  v138 = 4 * v26;
  while (2)
  {
    if (v24)
      v139 = v24;
    else
      v139 = (float *)a1;
    if ((v240 & 1) != 0)
      goto LABEL_176;
    if (v237)
    {
      v140 = 0;
    }
    else
    {
      v141 = 0;
      do
      {
        v142 = *(_OWORD *)&a1[v141 / 4 + 4];
        v143 = &v24[v141 / 4];
        *(_OWORD *)v143 = *(_OWORD *)&a1[v141 / 4];
        *((_OWORD *)v143 + 1) = v142;
        v141 += 32;
      }
      while (((4 * v23) & 0x3FFFFFFE0) != v141);
      v140 = v23 & 0xFFFFFFF8;
      v139 = v24;
      if (v140 == v23)
        goto LABEL_176;
    }
    v144 = v137 * v140;
    do
    {
      v24[v140++] = *(float *)((char *)a1 + v144);
      v144 += v137;
    }
    while (v23 != v140);
    v139 = v24;
LABEL_176:
    v145 = 0;
    v146 = a3;
    v147 = v29;
    do
    {
      if ((int)v23 < 4)
      {
        v149 = 0;
        v150 = 0.0;
        v151 = 0.0;
        v152 = 0.0;
        v153 = 0.0;
        goto LABEL_188;
      }
      if (v133 < 0x1C)
      {
        v154 = 0;
        v153 = 0.0;
        v152 = 0.0;
        v151 = 0.0;
        v150 = 0.0;
LABEL_185:
        v181 = 4 * v154 + 8;
        do
        {
          v150 = v150 + *(float *)((char *)v139 + v181 - 8) * *(float *)((char *)v146 + v181 - 8);
          v151 = v151 + *(float *)((char *)v139 + v181 - 4) * *(float *)&v146[v154 + 1];
          v152 = v152 + *(float *)((char *)v139 + v181) * *(float *)((char *)v146 + v181);
          v153 = v153 + *(float *)((char *)v139 + v181 + 4) * *(float *)((char *)v146 + v181 + 4);
          v154 += 4;
          v181 += 16;
        }
        while (v154 <= v130);
        v149 = ((v23 - 4) & 0xFFFFFFFC) + 4;
        goto LABEL_188;
      }
      v155 = 0;
      v153 = 0.0;
      v156 = v134 & 0x3FFFFFF8;
      v152 = 0.0;
      v151 = 0.0;
      v150 = 0.0;
      do
      {
        v157 = &v139[v155];
        v269 = vld4q_f32(v157);
        v157 += 16;
        v270 = vld4q_f32(v157);
        v158 = (const float *)&v146[v155];
        v272 = vld4q_f32(v158);
        v158 += 16;
        v259 = vcvtq_f64_f32(*(float32x2_t *)v269.val[0].f32);
        v258 = vcvt_hight_f64_f32(v269.val[0]);
        v261 = vcvtq_f64_f32(*(float32x2_t *)v270.val[0].f32);
        v256 = vcvtq_f64_f32(*(float32x2_t *)v272.val[0].f32);
        v253 = vcvt_hight_f64_f32(v272.val[0]);
        v251 = vcvtq_f64_f32(*(float32x2_t *)v269.val[1].f32);
        v250 = vcvt_hight_f64_f32(v269.val[1]);
        v159 = vcvt_hight_f64_f32(v270.val[0]);
        v160 = vcvtq_f64_f32(*(float32x2_t *)v270.val[1].f32);
        v161 = vcvtq_f64_f32(*(float32x2_t *)v272.val[1].f32);
        v162 = vcvt_hight_f64_f32(v272.val[1]);
        v163 = vcvtq_f64_f32(*(float32x2_t *)v269.val[2].f32);
        v164 = vcvt_hight_f64_f32(v269.val[2]);
        v165 = vcvt_hight_f64_f32(v270.val[1]);
        v166 = vcvtq_f64_f32(*(float32x2_t *)v270.val[2].f32);
        v167 = vcvtq_f64_f32(*(float32x2_t *)v269.val[3].f32);
        v269.val[0] = (float32x4_t)vcvt_hight_f64_f32(v269.val[3]);
        v269.val[1] = (float32x4_t)vcvt_hight_f64_f32(v270.val[2]);
        v269.val[2] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v270.val[3].f32);
        v269.val[3] = (float32x4_t)vcvt_hight_f64_f32(v270.val[3]);
        v271 = vld4q_f32(v158);
        v168 = vcvtq_f64_f32(*(float32x2_t *)v272.val[2].f32);
        v169 = vcvt_hight_f64_f32(v272.val[2]);
        v170 = vcvtq_f64_f32(*(float32x2_t *)v272.val[3].f32);
        v272.val[0] = (float32x4_t)vcvt_hight_f64_f32(v272.val[3]);
        v272.val[1] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v271.val[0].f32);
        v272.val[2] = (float32x4_t)vcvt_hight_f64_f32(v271.val[0]);
        v272.val[3] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v271.val[1].f32);
        v171 = vcvt_hight_f64_f32(v271.val[1]);
        v172 = vcvtq_f64_f32(*(float32x2_t *)v271.val[2].f32);
        v173 = vcvt_hight_f64_f32(v271.val[2]);
        v174 = vcvtq_f64_f32(*(float32x2_t *)v271.val[3].f32);
        v271.val[0] = (float32x4_t)vcvt_hight_f64_f32(v271.val[3]);
        v271.val[1] = (float32x4_t)vmulq_f64(v258, v253);
        v271.val[2] = (float32x4_t)vmulq_f64(v259, v256);
        v271.val[3] = (float32x4_t)vmulq_f64(v159, (float64x2_t)v272.val[2]);
        v272.val[2] = (float32x4_t)vmulq_f64(v250, v162);
        v175 = vmulq_f64(v251, v161);
        v272.val[1] = (float32x4_t)vmulq_f64(v261, (float64x2_t)v272.val[1]);
        v176 = vmulq_f64(v165, v171);
        v272.val[3] = (float32x4_t)vmulq_f64(v160, (float64x2_t)v272.val[3]);
        v177 = vmulq_f64(v164, v169);
        v178 = vmulq_f64(v163, v168);
        v269.val[1] = (float32x4_t)vmulq_f64((float64x2_t)v269.val[1], v173);
        v179 = vmulq_f64(v166, v172);
        v269.val[0] = (float32x4_t)vmulq_f64((float64x2_t)v269.val[0], (float64x2_t)v272.val[0]);
        v180 = vmulq_f64(v167, v170);
        v269.val[3] = (float32x4_t)vmulq_f64((float64x2_t)v269.val[3], (float64x2_t)v271.val[0]);
        v269.val[2] = (float32x4_t)vmulq_f64((float64x2_t)v269.val[2], v174);
        v153 = v153
             + v180.f64[0]
             + v180.f64[1]
             + *(double *)v269.val[0].i64
             + *(double *)&v269.val[0].i64[1]
             + *(double *)v269.val[2].i64
             + *(double *)&v269.val[2].i64[1]
             + *(double *)v269.val[3].i64
             + *(double *)&v269.val[3].i64[1];
        v152 = v152
             + v178.f64[0]
             + v178.f64[1]
             + v177.f64[0]
             + v177.f64[1]
             + v179.f64[0]
             + v179.f64[1]
             + *(double *)v269.val[1].i64
             + *(double *)&v269.val[1].i64[1];
        v151 = v151
             + v175.f64[0]
             + v175.f64[1]
             + *(double *)v272.val[2].i64
             + *(double *)&v272.val[2].i64[1]
             + *(double *)v272.val[3].i64
             + *(double *)&v272.val[3].i64[1]
             + v176.f64[0]
             + v176.f64[1];
        v150 = v150
             + *(double *)v271.val[2].i64
             + *(double *)&v271.val[2].i64[1]
             + *(double *)v271.val[1].i64
             + *(double *)&v271.val[1].i64[1]
             + *(double *)v272.val[1].i64
             + *(double *)&v272.val[1].i64[1]
             + *(double *)v271.val[3].i64
             + *(double *)&v271.val[3].i64[1];
        v155 += 32;
        v156 -= 8;
      }
      while (v156);
      v149 = ((v23 - 4) & 0xFFFFFFFC) + 4;
      v154 = 4 * (v134 & 0x3FFFFFF8);
      v16 = a10;
      v17 = a9;
      if (v134 != (v134 & 0x3FFFFFF8))
        goto LABEL_185;
LABEL_188:
      if (v149 >= (int)v23)
        goto LABEL_196;
      v182 = v149;
      v183 = (v23 + ~v149);
      if (v183 < 7)
      {
        v184 = v182;
LABEL_194:
        v199 = v184;
        do
        {
          v150 = v150 + v139[v199] * *(float *)&v146[v199];
          LODWORD(v184) = v184 + 1;
          ++v199;
        }
        while ((int)v23 > (int)v184);
        goto LABEL_196;
      }
      v185 = v183 + 1;
      v186 = (v183 + 1) & 0x1FFFFFFF8;
      v184 = v186 + v182;
      v187 = v182;
      v188 = v186;
      do
      {
        v189 = *(float32x4_t *)&v139[v187];
        v190 = *(float32x4_t *)&v139[v187 + 4];
        v191 = vcvtq_f64_f32(*(float32x2_t *)v189.f32);
        v192 = vcvtq_f64_f32(*(float32x2_t *)v190.f32);
        v193 = *(float32x4_t *)&v146[v187];
        v194 = *(float32x4_t *)&v146[v187 + 4];
        v195 = vmulq_f64(vcvt_hight_f64_f32(v189), vcvt_hight_f64_f32(v193));
        v196 = vmulq_f64(v191, vcvtq_f64_f32(*(float32x2_t *)v193.f32));
        v197 = vmulq_f64(vcvt_hight_f64_f32(v190), vcvt_hight_f64_f32(v194));
        v198 = vmulq_f64(v192, vcvtq_f64_f32(*(float32x2_t *)v194.f32));
        v150 = v150
             + v196.f64[0]
             + v196.f64[1]
             + v195.f64[0]
             + v195.f64[1]
             + v198.f64[0]
             + v198.f64[1]
             + v197.f64[0]
             + v197.f64[1];
        v187 += 8;
        v188 -= 8;
      }
      while (v188);
      if (v185 != v186)
        goto LABEL_194;
LABEL_196:
      v200 = (v153 + v152 + v151 + v150) * v17;
      if (v147)
        v200 = v200 + *v147 * v16;
      v148 = v200;
      *(float *)(a7 + 4 * v145++) = v148;
      v147 += v31;
      v146 = (_DWORD *)((char *)v146 + v138);
    }
    while (v145 != v20);
    ++v129;
    a1 = (_DWORD *)((char *)a1 + v239);
    v24 = v244;
    v29 += v30;
    a7 += 4 * v241;
    if (v129 != (_DWORD)v19)
      continue;
    break;
  }
LABEL_239:
  result = v264;
  if (v264 != v266 && v264 != 0)
    operator delete[]();
  return result;
}

