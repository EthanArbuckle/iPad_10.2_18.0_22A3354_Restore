void sub_1002A6A44(uint64_t a1)
{
  sub_1002947E4(a1);
  operator delete();
}

uint64_t sub_1002A6A68(const char *a1, char *a2, unsigned int a3, int a4, int a5)
{
  if (a4 == 1)
  {
    if (a5 != 2)
    {
      if (!a5)
      {
        sub_1002AF428((uint64_t)a1, 0, (unint64_t)a2, 0, a3 | (unint64_t)&_mh_execute_header, 2);
        return 1;
      }
      return 0;
    }
    sub_1002AF678((uint64_t)a1, 0, (uint64_t)a2, 0, a3 | (unint64_t)&_mh_execute_header, 3, 2);
    return 1;
  }
  else
  {
    if (a4 != 3)
      return 0;
    if (a5 != 2)
    {
      if (!a5)
      {
        sub_1002AFB0C(a1, 0, a2, 0, a3 | (unint64_t)&_mh_execute_header);
        return 1;
      }
      return 0;
    }
    sub_1002AFC54((const __int16 *)a1, 0, (__int16 *)a2, 0, a3 | (unint64_t)&_mh_execute_header);
    return 1;
  }
}

void sub_1002A6B48()
{
  operator delete();
}

uint64_t sub_1002A6B5C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_1002A6B9C()
{
  operator delete();
}

uint64_t sub_1002A6BB0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002A6BEC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_10029F330(a1);
  *v2 = off_10044FD08;
  v3 = v2 + 5;
  sub_10029434C(v2 + 5);
  *(_QWORD *)sub_10029430C(v3, 8) = 0xA1A0A0D474E5089;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  return a1;
}

void sub_1002A6C64(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029F908(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A6C78(_QWORD *a1)
{
  FILE *v2;
  void *v3;
  void *v5;
  void *v6;
  uint64_t v7;

  *a1 = off_10044FD08;
  v2 = (FILE *)a1[23];
  if (v2)
  {
    fclose(v2);
    a1[23] = 0;
  }
  if (a1[20])
  {
    v7 = a1[20];
    v3 = (void *)a1[21];
    v5 = (void *)a1[22];
    v6 = v3;
    sub_100360B48(&v7, &v6, &v5);
    a1[20] = 0;
    a1[21] = 0;
    a1[22] = 0;
  }
  return sub_10029F908((uint64_t)a1);
}

void sub_1002A6CF4(_QWORD *a1)
{
  FILE *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  *a1 = off_10044FD08;
  v2 = (FILE *)a1[23];
  if (v2)
  {
    fclose(v2);
    a1[23] = 0;
  }
  if (a1[20])
  {
    v6 = a1[20];
    v3 = (void *)a1[21];
    v4 = (void *)a1[22];
    v5 = v3;
    sub_100360B48(&v6, &v5, &v4);
    a1[20] = 0;
    a1[21] = 0;
    a1[22] = 0;
  }
  sub_10029F908((uint64_t)a1);
  operator delete();
}

void sub_1002A6D84()
{
  sub_1002A6E04();
}

void sub_1002A6E04()
{
  operator new();
}

void sub_1002A6ECC()
{
  operator delete();
}

void *sub_1002A6F00(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  void *result;
  uint64_t v13[2];

  v6 = sub_10035ACC0(a1);
  v7 = v6;
  if (!v6)
  {
    v13[0] = 0;
    v13[1] = 0;
    v8 = (_DWORD *)sub_10029430C(v13, 7);
    *v8 = 1868784996;
    *(_DWORD *)((char *)v8 + 3) = 1919247471;
    sub_100294B74(-215, v13, "readDataFromBuf", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_png.cpp", 131);
  }
  v9 = *(_QWORD *)(v6 + 200);
  v10 = v9 + a3;
  v11 = *(_DWORD *)(v6 + 60);
  if (v11 < 1)
  {
    if (!v10)
      goto LABEL_5;
LABEL_7:
    sub_10035E6F4(a1, "PNG input buffer is incomplete");
  }
  if (v10 > *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8 * (v11 - 1))
           * *(int *)(v6 + 64)
           * (uint64_t)*(int *)(v6 + 68))
    goto LABEL_7;
LABEL_5:
  result = memcpy(a2, (const void *)(*(_QWORD *)(v6 + 72) + v9), a3);
  *(_QWORD *)(v7 + 200) += a3;
  return result;
}

void sub_1002A7004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A701C(uint64_t a1)
{
  FILE *v2;
  uint64_t *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  FILE *v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  FILE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned __int8 v49;
  void *v50;
  void *v51;
  uint64_t v52;

  v49 = 0;
  v2 = *(FILE **)(a1 + 184);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 184) = 0;
  }
  v3 = (uint64_t *)(a1 + 160);
  if (*(_QWORD *)(a1 + 160))
  {
    v52 = *(_QWORD *)(a1 + 160);
    v4 = *(void **)(a1 + 168);
    v50 = *(void **)(a1 + 176);
    v51 = v4;
    sub_100360B48(&v52, &v51, &v50);
    *v3 = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
  }
  v5 = sub_10035FB34("1.6.34", 0, 0, 0);
  if (v5)
  {
    v6 = v5;
    sub_10035A79C((uint64_t)v5);
    v8 = v7;
    sub_10035A79C((uint64_t)v6);
    *(_QWORD *)(a1 + 160) = v6;
    *(_QWORD *)(a1 + 168) = v8;
    *(_QWORD *)(a1 + 176) = v9;
    *(_QWORD *)(a1 + 200) = 0;
    if (v8)
    {
      if (v9)
      {
        v10 = (int *)sub_10035F484(v6, (uint64_t)&_longjmp, 0xC0uLL);
        if (!setjmp(v10))
        {
          if (!*(_QWORD *)(a1 + 72))
            goto LABEL_57;
          v14 = *(unsigned int *)(a1 + 60);
          if ((int)v14 >= 3)
          {
            v16 = *(_QWORD *)(a1 + 120);
            v17 = v14 & 0xFFFFFFFE;
            v18 = (int *)(v16 + 4);
            v19 = 1;
            v20 = 1;
            do
            {
              v21 = v19 * *(v18 - 1);
              v19 = v21;
              v22 = v20 * *v18;
              v20 = v22;
              v18 += 2;
              v17 -= 2;
            }
            while (v17);
            v15 = v22 * v21;
            v23 = v14 - (v14 & 0xFFFFFFFE);
            if (v23)
            {
              v24 = (int *)(v16 + ((4 * v14) & 0x3FFFFFFF8));
              v25 = v22 * v21;
              do
              {
                v26 = *v24++;
                v25 *= v26;
                v15 = v25;
                --v23;
              }
              while (v23);
            }
          }
          else
          {
            v15 = *(int *)(a1 + 68) * (uint64_t)*(int *)(a1 + 64);
          }
          if ((_DWORD)v14 && v15)
          {
            sub_100360CF0(v6, a1, (size_t (*)(size_t, void *, size_t))sub_1002A6F00);
          }
          else
          {
LABEL_57:
            if (*(_QWORD *)(a1 + 24))
              v27 = *(const char **)(a1 + 24);
            else
              v27 = "";
            v28 = fopen(v27, "rb");
            *(_QWORD *)(a1 + 184) = v28;
            if (v28)
              sub_10035ACCC((uint64_t)v6, (uint64_t)v28);
          }
          if (*(_QWORD *)(a1 + 72))
          {
            v29 = *(unsigned int *)(a1 + 60);
            if ((int)v29 >= 3)
            {
              v31 = *(_QWORD *)(a1 + 120);
              v32 = v29 & 0xFFFFFFFE;
              v33 = (int *)(v31 + 4);
              v34 = 1;
              v35 = 1;
              do
              {
                v36 = v34 * *(v33 - 1);
                v34 = v36;
                v37 = v35 * *v33;
                v35 = v37;
                v33 += 2;
                v32 -= 2;
              }
              while (v32);
              v30 = v37 * v36;
              v38 = v29 - (v29 & 0xFFFFFFFE);
              if (v38)
              {
                v39 = (int *)(v31 + ((4 * v29) & 0x3FFFFFFF8));
                v40 = v37 * v36;
                do
                {
                  v41 = *v39++;
                  v40 *= v41;
                  v30 = v40;
                  --v38;
                }
                while (v38);
              }
            }
            else
            {
              v30 = *(int *)(a1 + 68) * (uint64_t)*(int *)(a1 + 64);
            }
            if ((_DWORD)v29 && v30)
              goto LABEL_43;
          }
          if (*(_QWORD *)(a1 + 184))
          {
LABEL_43:
            LODWORD(v50) = 0;
            v48 = 0;
            v47 = 0;
            v46 = 0;
            v51 = 0;
            v52 = 0;
            sub_10035FB94((uint64_t)v6, v8);
            sub_10035F654((uint64_t)v6, v8, &v50, &v48, (_DWORD *)&v47 + 1, &v47, 0, 0, 0);
            v42 = v48;
            *(_DWORD *)(a1 + 8) = (_DWORD)v50;
            *(_DWORD *)(a1 + 12) = v42;
            v43 = v47;
            v44 = HIDWORD(v47);
            *(_DWORD *)(a1 + 192) = v47;
            *(_DWORD *)(a1 + 156) = v44;
            if (v44 < 9 || v44 == 16)
            {
              if ((v43 - 2) < 2)
              {
                sub_10035F6EC((uint64_t)v6, v8, &v52, &v46, &v51);
                if (v46 < 1)
                {
                  *(_DWORD *)(a1 + 16) = 16;
                  v45 = 18;
                  if (HIDWORD(v47) != 16)
                    goto LABEL_52;
                  goto LABEL_51;
                }
              }
              else if (v43 != 4 && v43 != 6)
              {
                *(_DWORD *)(a1 + 16) = 0;
                v45 = 2;
                if (HIDWORD(v47) != 16)
                  goto LABEL_52;
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 16) = 24;
              v45 = 26;
              if (HIDWORD(v47) != 16)
              {
LABEL_52:
                v49 = 1;
                goto LABEL_9;
              }
LABEL_51:
              *(_DWORD *)(a1 + 16) = v45;
              goto LABEL_52;
            }
          }
        }
      }
    }
  }
LABEL_9:
  if (!v49)
  {
    v11 = *(FILE **)(a1 + 184);
    if (v11)
    {
      fclose(v11);
      *(_QWORD *)(a1 + 184) = 0;
    }
    if (*v3)
    {
      v52 = *v3;
      v12 = *(void **)(a1 + 168);
      v50 = *(void **)(a1 + 176);
      v51 = v12;
      sub_100360B48(&v52, &v51, &v50);
      *v3 = 0;
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0;
    }
  }
  return v49;
}

BOOL sub_1002A73F8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char **v19;
  char *v20;
  uint64_t v21;
  char *v22;
  FILE *v23;
  void *v24;
  char *v26;
  uint64_t v27;
  char v28;
  void *v29;
  void *v30;
  uint64_t v31;

  v28 = 0;
  if (*(_DWORD *)(a1 + 12) >= 0x89u)
    operator new[]();
  v5 = (uint64_t *)(a1 + 160);
  v4 = *(_QWORD *)(a1 + 160);
  if (v4)
  {
    v6 = *(unsigned int **)(a1 + 168);
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 176);
      if (v7)
      {
        if (*(_DWORD *)(a1 + 8))
        {
          if (*(_DWORD *)(a1 + 12))
          {
            v8 = *a2;
            v9 = (int *)sub_10035F484(*(_QWORD **)(a1 + 160), (uint64_t)&_longjmp, 0xC0uLL);
            if (!setjmp(v9))
            {
              if ((*(_BYTE *)a2 & 7) != 0 || *(_DWORD *)(a1 + 156) != 16)
                sub_10036BECC(v4);
              else
                sub_100360D44(v4);
              if ((*a2 & 0xFF8u) > 0x17)
                sub_100360DA4(v4);
              else
                sub_100360D74(v4);
              v10 = *(_DWORD *)(a1 + 192);
              if (v10 == 3)
              {
                sub_100360DA4(v4);
                v10 = *(_DWORD *)(a1 + 192);
              }
              v11 = v8 & 0xFF8;
              if ((v10 & 2) == 0)
              {
                if (*(int *)(a1 + 156) > 7)
                  goto LABEL_24;
                sub_100360DDC(v4);
                v10 = *(_DWORD *)(a1 + 192);
              }
              if ((v10 & 2) != 0 && v11)
              {
                sub_10036BEB8(v4);
                goto LABEL_27;
              }
LABEL_24:
              if (v11)
                sub_100360E0C(v4);
              else
                sub_100360FA8(v4, 1, 0.299, 0.587);
LABEL_27:
              sub_10036BF14(v4);
              sub_100360068(v4, v6);
              v12 = *(unsigned int *)(a1 + 12);
              if ((int)v12 >= 1)
              {
                v13 = *((_QWORD *)a2 + 10);
                v14 = *((_QWORD *)a2 + 2);
                if ((_DWORD)v12 == 1)
                {
                  v15 = 0;
                }
                else
                {
                  v16 = *((_QWORD *)a2 + 2);
                  v15 = v12 & 0xFFFFFFFE;
                  v17 = &v27;
                  v18 = v15;
                  do
                  {
                    *(v17 - 1) = v16;
                    *v17 = v16 + v13;
                    v16 += 2 * v13;
                    v17 += 2;
                    v18 -= 2;
                  }
                  while (v18);
                  if ((v12 & 0xFFFFFFFE) == v12)
                    goto LABEL_35;
                }
                v19 = &(&v26)[v15];
                v20 = (char *)(v14 + v15 * v13);
                v21 = v12 - v15;
                v22 = v20;
                do
                {
                  *v19++ = v22;
                  v22 += v13;
                  --v21;
                }
                while (v21);
              }
LABEL_35:
              sub_1003604B4(v4, &v26);
              sub_1003605B0(v4, v7);
              v28 = 1;
            }
          }
        }
      }
    }
  }
  v23 = *(FILE **)(a1 + 184);
  if (v23)
  {
    fclose(v23);
    *(_QWORD *)(a1 + 184) = 0;
  }
  if (*v5)
  {
    v31 = *v5;
    v24 = *(void **)(a1 + 168);
    v29 = *(void **)(a1 + 176);
    v30 = v24;
    sub_100360B48(&v31, &v30, &v29);
    *v5 = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
  }
  return v28 != 0;
}

void sub_1002A76E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;

  if (a9 != v9 && a9 != 0)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A7720(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_10029F688(a1);
  *v2 = off_10044FD78;
  v3 = v2 + 1;
  sub_10029434C(v2 + 1);
  qmemcpy((void *)sub_10029430C(v3, 39), "Portable Network Graphics files (*.png)", 39);
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

void sub_1002A7790(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  *v1 = off_10044EFB0;
  sub_10029434C(v1 + 7);
  sub_10029434C(v1 + 3);
  sub_10029434C(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002A77D0(uint64_t *a1)
{
  *a1 = (uint64_t)off_10044EFB0;
  sub_10029434C(a1 + 7);
  sub_10029434C(a1 + 3);
  sub_10029434C(a1 + 1);
  return a1;
}

void sub_1002A7820(uint64_t *a1)
{
  *a1 = (uint64_t)off_10044EFB0;
  sub_10029434C(a1 + 7);
  sub_10029434C(a1 + 3);
  sub_10029434C(a1 + 1);
  operator delete();
}

BOOL sub_1002A7880(uint64_t a1, int a2)
{
  return (a2 & 0xFFFFFFFD) == 0;
}

void sub_1002A788C()
{
  operator new();
}

void sub_1002A7934()
{
  operator delete();
}

void *sub_1002A7958(void *result, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  char *v30;
  uint64_t v31[2];

  if (a3)
  {
    v5 = sub_10035ACC0((uint64_t)result);
    v6 = v5;
    if (!v5 || (v7 = *(_QWORD *)(v5 + 40)) == 0)
    {
      v31[0] = 0;
      v31[1] = 0;
      qmemcpy((void *)sub_10029430C(v31, 25), "encoder && encoder->m_buf", 25);
      sub_100294B74(-215, v31, "writeDataToBuf", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_png.cpp", 328);
    }
    v9 = *(char **)v7;
    v8 = *(char **)(v7 + 8);
    v10 = (unint64_t)&v8[-*(_QWORD *)v7];
    v11 = v10 + a3;
    if (v10 >= v10 + a3)
    {
      if (v10 > v10 + a3)
        *(_QWORD *)(v7 + 8) = &v9[v11];
      return memcpy((void *)(**(_QWORD **)(v6 + 40) + v10), a2, a3);
    }
    v12 = *(_QWORD *)(v7 + 16);
    if (v12 - (uint64_t)v8 >= a3)
    {
      bzero(*(void **)(v7 + 8), a3);
      *(_QWORD *)(v7 + 8) = &v8[a3];
      return memcpy((void *)(**(_QWORD **)(v6 + 40) + v10), a2, a3);
    }
    if ((v11 & 0x8000000000000000) != 0)
      sub_100008F3C();
    v13 = v12 - (_QWORD)v9;
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = v10 + a3;
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v16 = operator new(v15);
    v17 = (char *)v16 + v15;
    v30 = (char *)v16 + v11;
    v18 = (char *)v16 + v10;
    bzero((char *)v16 + v10, a3);
    if (v8 == v9)
    {
      *(_QWORD *)v7 = v18;
      *(_QWORD *)(v7 + 8) = v30;
      *(_QWORD *)(v7 + 16) = v17;
      if (!v8)
        return memcpy((void *)(**(_QWORD **)(v6 + 40) + v10), a2, a3);
      goto LABEL_35;
    }
    if (v10 < 8 || (unint64_t)(v9 - (_BYTE *)v16) < 0x20)
      goto LABEL_32;
    if (v10 >= 0x20)
    {
      v19 = v10 & 0xFFFFFFFFFFFFFFE0;
      v20 = v8 - 16;
      v21 = (char *)v16 + v8 - 16 - v9;
      v22 = v10 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v23 = *(_OWORD *)v20;
        *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
        *(_OWORD *)v21 = v23;
        v21 -= 32;
        v20 -= 32;
        v22 -= 32;
      }
      while (v22);
      if (v10 == v19)
      {
LABEL_34:
        v8 = v9;
        *(_QWORD *)v7 = v16;
        *(_QWORD *)(v7 + 8) = v30;
        *(_QWORD *)(v7 + 16) = v17;
        if (v9)
LABEL_35:
          operator delete(v8);
        return memcpy((void *)(**(_QWORD **)(v6 + 40) + v10), a2, a3);
      }
      if ((v10 & 0x18) == 0)
      {
        v18 -= v19;
        v8 -= v19;
        goto LABEL_32;
      }
    }
    else
    {
      v19 = 0;
    }
    v18 -= v10 & 0xFFFFFFFFFFFFFFF8;
    v24 = &v8[-v19 - 8];
    v25 = (char *)(v24 - v9);
    v26 = v19 - (v10 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v27 = *(_QWORD *)v24;
      v24 -= 8;
      *(_QWORD *)&v25[(_QWORD)v16] = v27;
      v25 -= 8;
      v26 += 8;
    }
    while (v26);
    v8 -= v10 & 0xFFFFFFFFFFFFFFF8;
    if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
LABEL_32:
    v28 = v18 - 1;
    do
    {
      v29 = *--v8;
      *v28-- = v29;
    }
    while (v8 != v9);
    goto LABEL_34;
  }
  return result;
}

void sub_1002A7BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1002A7BF8(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  _QWORD *v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  int *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  char v31;
  unsigned __int8 v32;
  char v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v39[1095];
  char v40;
  FILE *v41;
  void *v42;
  _QWORD *v43;

  v6 = sub_10036D020("1.6.34", 0, 0, 0);
  v42 = 0;
  v43 = v6;
  v41 = 0;
  v7 = a2[3];
  v8 = (int)a2[2];
  v9 = *a2;
  v40 = 0;
  v10 = 0;
  if ((v9 & 5) == 0)
  {
    if (v6)
    {
      v11 = v6;
      sub_10035A79C((uint64_t)v6);
      v42 = v12;
      if (v12)
      {
        v13 = (uint64_t)v12;
        v14 = (int *)sub_10035F484(v11, (uint64_t)&_longjmp, 0xC0uLL);
        if (!setjmp(v14))
        {
          if (*(_QWORD *)(a1 + 40))
          {
            sub_10036C868(v11, a1, (size_t (*)(size_t, void *, size_t))sub_1002A7958, (uint64_t (*)(uint64_t))nullsub_33);
          }
          else
          {
            if (*(_QWORD *)(a1 + 24))
              v15 = *(const char **)(a1 + 24);
            else
              v15 = "";
            v41 = fopen(v15, "wb");
            if (v41)
              sub_10035ACCC((uint64_t)v11, (uint64_t)v41);
          }
          v16 = *a3;
          v17 = a3[1];
          v18 = 0;
          if (v17 != *a3)
          {
            v19 = (v17 - *a3) >> 2;
            v20 = -1;
            v21 = 3;
            v22 = 0;
            while (1)
            {
              v26 = v22;
              v27 = *(_DWORD *)(v16 + 4 * v22);
              switch(v27)
              {
                case 18:
                  v18 = *(_DWORD *)(v16 + 4 * v26 + 4) != 0;
                  break;
                case 17:
                  v28 = *(_DWORD *)(v16 + 4 * v26 + 4) & ~(*(int *)(v16 + 4 * v26 + 4) >> 31);
                  if (v28 >= 4)
                    v23 = 4;
                  else
                    v23 = v28;
                  goto LABEL_16;
                case 16:
                  v23 = 0;
                  if ((*(_DWORD *)(v16 + 4 * v26 + 4) & ~(*(int *)(v16 + 4 * v26 + 4) >> 31)) >= 9)
                    v20 = 9;
                  else
                    v20 = *(_DWORD *)(v16 + 4 * v26 + 4) & ~(*(int *)(v16 + 4 * v26 + 4) >> 31);
                  goto LABEL_16;
              }
              v23 = v21;
LABEL_16:
              v24 = v18;
              v22 = v26 + 2;
              v25 = v20;
              v21 = v23;
              if (v22 >= v19)
                goto LABEL_27;
            }
          }
          LODWORD(v23) = 3;
          v25 = -1;
          v24 = 0;
LABEL_27:
          if (*(_QWORD *)(a1 + 40) || v41)
          {
            v29 = v25;
            if (v25 < 0)
            {
              sub_10036D594((uint64_t)v11, 0, 0x10u);
              v29 = 1;
            }
            sub_10036D774((uint64_t)v11, v29);
            sub_10036D780((uint64_t)v11, v23);
            v30 = (v9 >> 3) & 0x1FF;
            if (v24)
              v31 = 1;
            else
              v31 = 8;
            if ((v9 & 7) != 0)
              v32 = 16;
            else
              v32 = v31;
            if (v30 == 2)
              v33 = 2;
            else
              v33 = 6;
            if (v30)
              v34 = v33;
            else
              v34 = 0;
            sub_10036AE78((uint64_t)v11, v13, v7, v8, v32, v34, 0, 0, 0);
            sub_10036CA8C((uint64_t)v11, v13);
            if (v24)
              sub_10036BEEC((uint64_t)v11);
            sub_10036BEB8((uint64_t)v11);
            sub_10036BECC((uint64_t)v11);
            if (v8 > 0x88)
              operator new[]();
            if ((int)v8 >= 1)
            {
              v35 = *((_QWORD *)a2 + 10);
              v36 = 0;
              v37 = 0;
              do
              {
                *(_QWORD *)&v39[v36] = *((_QWORD *)a2 + 2) + v37;
                v36 += 8;
                v37 += v35;
              }
              while (8 * v8 != v36);
            }
            sub_10036D3FC((uint64_t)v11, (uint64_t)v39);
            sub_10036CE00((uint64_t)v11, v13);
            v40 = 1;
          }
        }
      }
    }
    sub_10036D4E0((uint64_t *)&v43, &v42);
    if (v41)
      fclose(v41);
    return v40 != 0;
  }
  return v10;
}

void sub_1002A7FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10 != v10 && a10 != 0)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

void sub_1002A8034()
{
  operator delete();
}

uint64_t sub_1002A8048(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_1002A8088()
{
  operator delete();
}

uint64_t sub_1002A809C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002A80D8(uint64_t a1)
{
  _QWORD *v2;

  sub_10029F330(a1);
  *v2 = off_10044FE80;
  sub_10029DE2C((uint64_t)(v2 + 20));
  *(_QWORD *)(a1 + 160) = off_10044ED68;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 1248) = 0xFFFFFFFF00000000;
  *(_BYTE *)(a1 + 1256) = 0;
  *(_DWORD *)(a1 + 1260) = 0;
  return a1;
}

void sub_1002A8134(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029F908(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A8148(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10044FE80;
  v2 = (uint64_t)(a1 + 20);
  sub_10029E3F4((uint64_t)(a1 + 20));
  sub_10029E49C(v2);
  return sub_10029F908((uint64_t)a1);
}

void sub_1002A818C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10044FE80;
  v2 = (uint64_t)(a1 + 20);
  sub_10029E3F4((uint64_t)(a1 + 20));
  sub_10029E49C(v2);
  sub_10029F908((uint64_t)a1);
  operator delete();
}

uint64_t sub_1002A81E4()
{
  return 3;
}

BOOL sub_1002A81EC(uint64_t a1, _QWORD *a2)
{
  _BYTE *v2;
  __darwin_ct_rune_t v3;

  if (a2[1] < 3uLL)
    return 0;
  v2 = (_BYTE *)*a2;
  if (*(_BYTE *)*a2 != 80 || v2[1] - 49 > 5)
    return 0;
  v3 = (char)v2[2];
  if (v3 < 0)
    return __maskrune(v3, 0x4000uLL) != 0;
  else
    return (_DefaultRuneLocale.__runetype[v3] & 0x4000) != 0;
}

void sub_1002A8270()
{
  sub_1002A82F0();
}

void sub_1002A82F0()
{
  operator new();
}

void sub_1002A83A0()
{
  uint64_t v0;

  sub_10029F908(v0);
  operator delete();
}

FILE *sub_1002A83D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  FILE *result;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *exception;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20[2];
  uint64_t v21[2];
  uint64_t v22[2];

  if (!*(_QWORD *)(a1 + 72))
    goto LABEL_13;
  v2 = *(unsigned int *)(a1 + 60);
  if ((int)v2 >= 3)
  {
    v4 = *(_QWORD *)(a1 + 120);
    v5 = (int *)(v4 + 4);
    v6 = 1;
    v7 = v2 & 0xFFFFFFFE;
    v8 = 1;
    do
    {
      v6 *= *(v5 - 1);
      v8 *= *v5;
      v5 += 2;
      v7 -= 2;
    }
    while (v7);
    v3 = v8 * v6;
    v9 = v2 - (v2 & 0xFFFFFFFE);
    if (v9)
    {
      v10 = (int *)(v4 + ((4 * v2) & 0x3FFFFFFF8));
      do
      {
        v11 = *v10++;
        v3 *= v11;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    v3 = *(int *)(a1 + 68) * (uint64_t)*(int *)(a1 + 64);
  }
  if ((_DWORD)v2 && v3)
  {
    if ((sub_10029E270(a1 + 160, a1 + 56) & 1) == 0)
      return 0;
  }
  else
  {
LABEL_13:
    result = sub_10029E1DC(a1 + 160, (const char **)(a1 + 24));
    if (!(_DWORD)result)
      return result;
  }
  if (sub_10029E574((_QWORD *)(a1 + 160)) != 80)
  {
    exception = __cxa_allocate_exception(0x58uLL);
    sub_1001F37D4(v22, "Invalid header");
    sub_1001F37D4(v21, "readHeader");
    sub_1001F37D4(v20, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pxm.cpp");
    sub_100294558((uint64_t)exception, -2, v22, v21, v20, 155);
    *exception = &off_10044FC60;
  }
  v13 = sub_10029E574((_QWORD *)(a1 + 160));
  if (v13 - 49 >= 6)
  {
    v18 = __cxa_allocate_exception(0x58uLL);
    sub_1001F37D4(v22, "Invalid header");
    sub_1001F37D4(v21, "readHeader");
    sub_1001F37D4(v20, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pxm.cpp");
    sub_100294558((uint64_t)v18, -2, v22, v21, v20, 163);
    *v18 = &off_10044FC60;
  }
  v14 = 4 * (int)(v13 - 49);
  v15 = *(_DWORD *)((char *)&unk_1003BFBEC + v14);
  LODWORD(v14) = *(_DWORD *)((char *)&unk_1003BFC04 + v14);
  *(_DWORD *)(a1 + 1248) = v15;
  *(_BYTE *)(a1 + 1256) = v13 > 0x33;
  *(_DWORD *)(a1 + 16) = v14;
  *(_DWORD *)(a1 + 8) = sub_1002A88E8((_QWORD *)(a1 + 160), 0);
  *(_DWORD *)(a1 + 12) = sub_1002A88E8((_QWORD *)(a1 + 160), 0);
  if (*(_DWORD *)(a1 + 1248) == 1)
  {
    v16 = 1;
    *(_DWORD *)(a1 + 1260) = 1;
  }
  else
  {
    v16 = sub_1002A88E8((_QWORD *)(a1 + 160), 0);
    *(_DWORD *)(a1 + 1260) = v16;
    if (v16 >= 0x10000)
    {
      v19 = __cxa_allocate_exception(0x58uLL);
      sub_1001F37D4(v22, "Invalid header");
      sub_1001F37D4(v21, "readHeader");
      sub_1001F37D4(v20, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pxm.cpp");
      sub_100294558((uint64_t)v19, -2, v22, v21, v20, 174);
      *v19 = &off_10044FC60;
    }
    if (v16 >= 256)
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 16) & 0xFF8 | 2;
  }
  if (*(int *)(a1 + 8) < 1 || *(int *)(a1 + 12) < 1 || v16 < 1)
  {
    *(_DWORD *)(a1 + 1252) = -1;
    *(_QWORD *)(a1 + 8) = -1;
    sub_10029E3F4(a1 + 160);
    return 0;
  }
  else
  {
    *(_DWORD *)(a1 + 1252) = sub_10029E1C0((_DWORD *)(a1 + 160));
    return (FILE *)1;
  }
}

void sub_1002A8770(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  int v14;
  _QWORD *v17;
  _QWORD *v18;

  sub_10029434C(&a9);
  sub_10029434C(&a11);
  sub_10029434C(&a13);
  if (v14)
    __cxa_free_exception(v13);
  __cxa_begin_catch(a1);
  if (a2 == 2)
    __cxa_rethrow();
  v17 = sub_10022EBE4(&std::cerr, (uint64_t)"PXM::readHeader(): unknown C++ exception", 40);
  v18 = sub_10022F60C(v17);
  std::ostream::flush(v18);
  __cxa_rethrow();
}

void sub_1002A88C8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1002A88E8(_QWORD *a1, int a2)
{
  uint64_t v4;
  __uint32_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10[2];

LABEL_1:
  v4 = sub_10029E574(a1);
  while (1)
  {
LABEL_2:
    if (v4 > 0xFF)
    {
LABEL_6:
      if (!__maskrune(v4, 0x4000uLL))
        goto LABEL_26;
      goto LABEL_7;
    }
    v5 = _DefaultRuneLocale.__runetype[v4];
    if ((v5 & 0x400) != 0)
      break;
    if ((_DWORD)v4 == 35)
    {
      do
        v6 = sub_10029E574(a1);
      while (v6 != 10 && v6 != 13);
      goto LABEL_1;
    }
    if (v4 > 0x7F)
      goto LABEL_6;
    if ((v5 & 0x4000) == 0)
    {
LABEL_26:
      sub_10029487C(v10, "PXM: Unexpected code in ReadNumber(): 0x%x (%d)", v4, HIDWORD(v4));
      sub_1002A97AC(v10, "ReadNumber", 80);
    }
LABEL_7:
    if (v4 <= 0x7F)
      goto LABEL_10;
    while (__maskrune(v4, 0x4000uLL))
    {
      while (1)
      {
        v4 = sub_10029E574(a1);
        if (v4 > 0x7F)
          break;
LABEL_10:
        if ((_DefaultRuneLocale.__runetype[v4] & 0x4000) == 0)
          goto LABEL_2;
      }
    }
  }
  if (a2)
    return (v4 - 48);
  v7 = 0;
  do
  {
    v7 = 10 * v7 + (int)v4 - 48;
    if (v7 >= 0x80000000)
    {
      v10[0] = 0;
      v10[1] = 0;
      qmemcpy((void *)sub_10029430C(v10, 61), "val <= 2147483647 && \"PXM: ReadNumber(): result is too large\"", 61);
      sub_100294B74(-215, v10, "ReadNumber", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pxm.cpp", 90);
    }
    v8 = sub_10029E574(a1);
    if (v8 > 0xFF)
      break;
    LODWORD(v4) = v8;
  }
  while ((_DefaultRuneLocale.__runetype[v8] & 0x400) != 0);
  return v7;
}

  v9 = (__int128 *)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    v11 = a2 - (_QWORD)v9;
    v12 = v11 >> 5;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v26 = (__int128 *)(a2 - 32);
        v27 = *(_DWORD *)(a2 - 32);
        v28 = v27 < *(_DWORD *)a1;
        if (v27 == *(_DWORD *)a1
          && (v29 = *(_QWORD *)(a2 - 24), v30 = *(_QWORD *)(a1 + 8), v28 = v29 < v30, v29 == v30))
        {
          if (*(_QWORD *)(a2 - 16) >= *(_QWORD *)(a1 + 16))
            return;
        }
        else if (!v28)
        {
          return;
        }
        v70 = *(_OWORD *)a1;
        v72 = *(_OWORD *)(a1 + 16);
        v54 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v26;
        *(_OWORD *)(a1 + 16) = v54;
        *v26 = v70;
        *(_OWORD *)(a2 - 16) = v72;
        return;
      case 3uLL:
        sub_1002EB100((__int128 *)a1, (int *)(a1 + 32), (__int128 *)(a2 - 32));
        return;
      case 4uLL:
        sub_1002EB894(a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), (__int128 *)(a2 - 32));
        return;
      case 5uLL:
        sub_1002EB9B0(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
        return;
      default:
        if (v11 > 767)
        {
          v13 = v10;
          if (v10 == 1)
          {
            if (a1 != a2)
            {
              v50 = (v12 - 2) >> 1;
              v51 = v50 + 1;
              v52 = (int *)(a1 + 32 * v50);
              do
              {
                sub_1002EBB1C(a1, a3, v11 >> 5, v52);
                v52 -= 8;
                --v51;
              }
              while (v51);
              v53 = (unint64_t)v11 >> 5;
              do
              {
                sub_1002EBCA8((_OWORD *)a1, a2, a3, v53);
                a2 -= 32;
                v20 = v53-- > 2;
              }
              while (v20);
            }
            return;
          }
          v14 = v12 >> 1;
          v15 = (__int128 *)(a1 + 32 * (v12 >> 1));
          if ((unint64_t)v11 <= 0x1000)
          {
            sub_1002EB100(v15, (int *)a1, (__int128 *)(a2 - 32));
            if ((a5 & 1) != 0)
              goto LABEL_15;
          }
          else
          {
            sub_1002EB100((__int128 *)a1, (int *)v15, (__int128 *)(a2 - 32));
            v16 = 32 * v14;
            v17 = (int *)(32 * v14 + a1 - 32);
            sub_1002EB100((__int128 *)(a1 + 32), v17, (__int128 *)(a2 - 64));
            sub_1002EB100((__int128 *)(a1 + 64), (int *)(a1 + 32 + v16), (__int128 *)(a2 - 96));
            sub_1002EB100((__int128 *)v17, (int *)v15, (__int128 *)(a1 + 32 + v16));
            v69 = *(_OWORD *)a1;
            v71 = *(_OWORD *)(a1 + 16);
            v18 = v15[1];
            *(_OWORD *)a1 = *v15;
            *(_OWORD *)(a1 + 16) = v18;
            *v15 = v69;
            v15[1] = v71;
            if ((a5 & 1) != 0)
              goto LABEL_15;
          }
          v19 = *(_DWORD *)(a1 - 32);
          v20 = v19 < *(_DWORD *)a1;
          if (v19 == *(_DWORD *)a1)
          {
            v21 = *(_QWORD *)(a1 - 24);
            v22 = *(_QWORD *)(a1 + 8);
            v20 = v21 < v22;
            if (v21 == v22)
              v20 = *(_QWORD *)(a1 - 16) < *(_QWORD *)(a1 + 16);
          }
          if (!v20)
          {
            v9 = sub_1002EB2B8((__int128 *)a1, a2);
            goto LABEL_19;
          }
LABEL_15:
          v23 = sub_1002EB458((uint64_t *)a1, a2);
          if ((v24 & 1) == 0)
            goto LABEL_18;
          v25 = sub_1002EB5FC(a1, v23);
          v9 = (__int128 *)(v23 + 32);
          if (!sub_1002EB5FC(v23 + 32, a2))
          {
            v10 = v13 + 1;
            if (v25)
              continue;
LABEL_18:
            sub_1002EABB0(a1, v23, a3, -v13, a5 & 1);
            v9 = (__int128 *)(v23 + 32);
LABEL_19:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        v31 = (_OWORD *)(a1 + 32);
        v33 = a1 == a2 || v31 == (_OWORD *)a2;
        if ((a5 & 1) != 0)
        {
          if (v33)
            return;
          v34 = 0;
          v35 = (_OWORD *)a1;
LABEL_42:
          v37 = v35;
          v35 = v31;
          v38 = *((_DWORD *)v37 + 8);
          if (v38 == *(_DWORD *)v37)
          {
            v39 = *((_QWORD *)v37 + 5);
            v40 = *((_QWORD *)v37 + 1);
            if (v39 == v40)
            {
              if (*((_QWORD *)v37 + 6) >= *((_QWORD *)v37 + 2))
                goto LABEL_41;
            }
            else if (v39 >= v40)
            {
              goto LABEL_41;
            }
          }
          else
          {
            if (v38 >= *(_DWORD *)v37)
              goto LABEL_41;
            v39 = *((_QWORD *)v37 + 5);
          }
          v41 = *((_DWORD *)v37 + 9);
          v42 = *((_QWORD *)v37 + 6);
          v43 = *((_QWORD *)v37 + 7);
          v44 = v37[1];
          *v35 = *v37;
          v35[1] = v44;
          v36 = a1;
          if (v37 == (_OWORD *)a1)
            goto LABEL_40;
          v45 = v34;
          while (1)
          {
            v47 = (_OWORD *)(a1 + v45);
            v48 = *(_DWORD *)(a1 + v45 - 32);
            if (v38 == v48)
            {
              v49 = *((_QWORD *)v47 - 3);
              if (v39 == v49)
              {
                if (v42 >= *(_QWORD *)(a1 + v45 - 16))
                {
LABEL_59:
                  v36 = (uint64_t)v37;
LABEL_40:
                  *(_DWORD *)v36 = v38;
                  *(_DWORD *)(v36 + 4) = v41;
                  *(_QWORD *)(v36 + 8) = v39;
                  *(_QWORD *)(v36 + 16) = v42;
                  *(_QWORD *)(v36 + 24) = v43;
LABEL_41:
                  v31 = v35 + 2;
                  v34 += 32;
                  if (v35 + 2 == (_OWORD *)a2)
                    return;
                  goto LABEL_42;
                }
              }
              else if (v39 >= v49)
              {
                v36 = a1 + v45;
                goto LABEL_40;
              }
            }
            else if (v38 >= v48)
            {
              goto LABEL_59;
            }
            v37 -= 2;
            v46 = *(_OWORD *)(a1 + v45 - 16);
            *v47 = *(_OWORD *)(a1 + v45 - 32);
            v47[1] = v46;
            v45 -= 32;
            if (!v45)
            {
              v36 = a1;
              goto LABEL_40;
            }
          }
        }
        if (!v33)
        {
          do
          {
            v55 = a1;
            a1 = (uint64_t)v31;
            v56 = *(_DWORD *)(v55 + 32);
            if (v56 == *(_DWORD *)v55)
            {
              v57 = *(_QWORD *)(v55 + 40);
              v58 = *(_QWORD *)(v55 + 8);
              if (v57 == v58)
              {
                if (*(_QWORD *)(v55 + 48) < *(_QWORD *)(v55 + 16))
                  goto LABEL_79;
              }
              else if (v57 < v58)
              {
                goto LABEL_79;
              }
            }
            else if (v56 < *(_DWORD *)v55)
            {
              v57 = *(_QWORD *)(v55 + 40);
LABEL_79:
              v59 = *(_DWORD *)(v55 + 36);
              v60 = (_OWORD *)a1;
              v62 = *(_QWORD *)(v55 + 48);
              v61 = *(_QWORD *)(v55 + 56);
              v63 = *(_OWORD *)(a1 - 16);
              *(_OWORD *)a1 = *(_OWORD *)(a1 - 32);
              *(_OWORD *)(a1 + 16) = v63;
              v64 = *(_DWORD *)(a1 - 64);
              v65 = v56 < v64;
              if (v56 != v64)
                goto LABEL_82;
LABEL_80:
              v66 = *((_QWORD *)v60 - 7);
              v65 = v57 < v66;
              if (v57 == v66)
                v65 = v62 < *((_QWORD *)v60 - 6);
LABEL_82:
              while (v65)
              {
                v60 -= 2;
                v67 = *(v60 - 1);
                *v60 = *(v60 - 2);
                v60[1] = v67;
                v68 = *((_DWORD *)v60 - 16);
                v65 = v56 < v68;
                if (v56 == v68)
                  goto LABEL_80;
              }
              *((_DWORD *)v60 - 8) = v56;
              *((_DWORD *)v60 - 7) = v59;
              *((_QWORD *)v60 - 3) = v57;
              *((_QWORD *)v60 - 2) = v62;
              *((_QWORD *)v60 - 1) = v61;
            }
            v31 = (_OWORD *)(a1 + 32);
          }
          while (a1 + 32 != a2);
        }
        return;
    }
  }
}

  v8 = (uint64_t *)((char *)a2 - 12);
  v9 = (uint64_t *)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 2);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(v8, (int *)a1))
        {
          v25 = *(_BYTE *)(a1 + 8);
          v26 = *(uint64_t *)((char *)a2 - 12);
          *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 - 4);
          v27 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v26;
          *(uint64_t *)((char *)a2 - 12) = v27;
          *((_BYTE *)a2 - 4) = v25;
        }
        return;
      case 3uLL:
        sub_10031D43C((int *)a1, (uint64_t *)(a1 + 12), v8, a3);
        return;
      case 4uLL:
        sub_10031DA34((int *)a1, a1 + 12, a1 + 24, (uint64_t)v8, a3);
        return;
      case 5uLL:
        sub_10031DB14((int *)a1, a1 + 12, a1 + 24, a1 + 36, v8, a3);
        return;
      default:
        if (v12 > 287)
        {
          if (v10 == 1)
          {
            if ((uint64_t *)a1 != a2)
            {
              v35 = (v13 - 2) >> 1;
              v36 = v35 + 1;
              v37 = a1 + 12 * v35;
              do
              {
                sub_10031DC2C(a1, (unsigned int (**)(uint64_t, uint64_t))a3, v13, v37);
                v37 -= 12;
                --v36;
              }
              while (v36);
              v38 = v12 / 0xCuLL;
              do
              {
                sub_10031DD98(a1, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3, v38);
                a2 = (uint64_t *)((char *)a2 - 12);
              }
              while (v38-- > 2);
            }
            return;
          }
          v14 = v13 >> 1;
          v15 = (int *)(a1 + 12 * (v13 >> 1));
          if ((unint64_t)v12 < 0x601)
          {
            sub_10031D43C(v15, (uint64_t *)a1, v8, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_10031D43C((int *)a1, (uint64_t *)v15, v8, a3);
            v16 = v8;
            v17 = a1 + 12 * v14;
            sub_10031D43C((int *)(a1 + 12), (uint64_t *)(v17 - 12), a2 - 3, a3);
            sub_10031D43C((int *)(a1 + 24), (uint64_t *)(a1 + 12 + 12 * v14), (uint64_t *)((char *)a2 - 36), a3);
            sub_10031D43C((int *)(v17 - 12), (uint64_t *)v15, (uint64_t *)(a1 + 12 + 12 * v14), a3);
            v18 = *(_BYTE *)(a1 + 8);
            *(_BYTE *)(a1 + 8) = *(_BYTE *)(v17 + 8);
            v19 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v19;
            *(_BYTE *)(v17 + 8) = v18;
            v8 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((uint64_t *)(a1 - 12), (int *)a1) & 1) == 0)
          {
            v9 = sub_10031D5B4((uint64_t *)a1, a2, (uint64_t (**)(uint64_t *, uint64_t *))a3);
            goto LABEL_16;
          }
LABEL_11:
          v21.n128_f64[0] = sub_10031D700(a1, a2, (uint64_t (**)(uint64_t, double *))a3);
          v22 = (uint64_t *)v20;
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = sub_10031D84C(a1, v20, a3);
          v9 = (uint64_t *)((char *)v22 + 12);
          if (!sub_10031D84C((uint64_t)v22 + 12, (uint64_t)a2, a3))
          {
            v10 = v11 + 1;
            if (v24)
              continue;
LABEL_14:
            sub_10031CF5C(a1, v22, a3, -v11, a5 & 1, v21);
            v9 = (uint64_t *)((char *)v22 + 12);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          if ((uint64_t *)a1 != a2)
          {
            v28 = (_QWORD *)(a1 + 12);
            if ((uint64_t *)(a1 + 12) != a2)
            {
              v29 = 0;
              v30 = (_QWORD *)a1;
              do
              {
                v32 = v28;
                if ((*a3)(v28, (int *)v30))
                {
                  v46 = *v32;
                  v47 = *((_BYTE *)v30 + 20);
                  v33 = v29;
                  do
                  {
                    v34 = a1 + v33;
                    *(_QWORD *)(v34 + 12) = *(_QWORD *)(a1 + v33);
                    *(_BYTE *)(v34 + 20) = *(_BYTE *)(a1 + v33 + 8);
                    if (!v33)
                    {
                      v31 = a1;
                      goto LABEL_30;
                    }
                    v33 -= 12;
                  }
                  while (((*a3)(&v46, (int *)(v33 + a1)) & 1) != 0);
                  v31 = a1 + v33 + 12;
LABEL_30:
                  *(_QWORD *)v31 = v46;
                  *(_BYTE *)(v31 + 8) = v47;
                }
                v28 = (_QWORD *)((char *)v32 + 12);
                v29 += 12;
                v30 = v32;
              }
              while ((_QWORD *)((char *)v32 + 12) != a2);
            }
          }
        }
        else if ((uint64_t *)a1 != a2)
        {
          v40 = (uint64_t *)(a1 + 12);
          if ((uint64_t *)(a1 + 12) != a2)
          {
            v41 = a1 - 12;
            do
            {
              v42 = v40;
              if ((*a3)(v40, (int *)a1))
              {
                v46 = *v42;
                v47 = *(_BYTE *)(a1 + 20);
                v43 = v41;
                do
                {
                  *(_QWORD *)(v43 + 24) = *(_QWORD *)(v43 + 12);
                  *(_BYTE *)(v43 + 32) = *(_BYTE *)(v43 + 20);
                  v44 = (*a3)(&v46, (int *)v43);
                  v43 -= 12;
                }
                while ((v44 & 1) != 0);
                *(_QWORD *)(v43 + 24) = v46;
                *(_BYTE *)(v43 + 32) = v47;
              }
              v40 = (uint64_t *)((char *)v42 + 12);
              v41 += 12;
              a1 = (uint64_t)v42;
            }
            while ((uint64_t *)((char *)v42 + 12) != a2);
          }
        }
        return;
    }
  }
}

void sub_1002A8AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A8AF0(uint64_t a1, int *a2)
{
  int v4;
  int *v5;
  unsigned int v6;
  int v7;
  _QWORD *v8;
  int v9;
  uint64_t result;
  int8x16_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  __int16 *v28;
  int v29;
  BOOL v31;
  BOOL v34;
  uint64_t v35;
  uint64_t i;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int8x16_t v43;
  int8x16_t v44;
  char *v45;
  uint64_t v46;
  int8x8_t v47;
  _BYTE *v48;
  uint64_t v49;
  char v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x16_t *v55;
  int8x16_t *v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int16x8_t *v61;
  int8x8_t *v62;
  uint64_t v63;
  int16x8_t v64;
  int v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  unint64_t v69;
  __int16 *v70;
  int *v71;
  BOOL v72;
  uint64_t v73;
  unint64_t v74;
  int16x8_t *v75;
  __int16 *v76;
  __int16 *v77;
  __int16 *v78;
  _WORD *v79;
  __int16 v80;
  unint64_t v81;
  __int16 *v82;
  __int16 *v83;
  unint64_t v84;
  __int16 *v85;
  int *v86;
  unint64_t v87;
  unint64_t v88;
  int8x16_t *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  int8x8_t *v94;
  unint64_t v95;
  int8x8_t v96;
  _BYTE *v97;
  char v98;
  int v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  BOOL v114;
  unint64_t v115;
  int v116;
  __int16 *v117;
  unint64_t v118;
  __int16 v119;
  _BYTE v120[14];
  _BYTE v121[16];
  _BYTE v122[1000];
  unsigned __int8 v123[264];
  int8x8_t v124[128];
  int8x8x2_t v125;
  int8x16x2_t v126;
  int8x16x2_t v127;
  int8x8x3_t v128;
  int16x8x3_t v129;
  int8x16x3_t v130;
  int16x8x3_t v131;
  int8x16x3_t v132;

  if ((*(_DWORD *)(a1 + 1252) & 0x80000000) != 0)
    return 0;
  v4 = *a2;
  v5 = (int *)*((_QWORD *)a2 + 2);
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 8);
  v8 = (_QWORD *)(a1 + 160);
  v9 = *(_DWORD *)(a1 + 1248);
  result = sub_10029DDC4(a1 + 160);
  if (!(_DWORD)result)
    return result;
  v12 = 0x442211088uLL >> (4 * (v6 & 7));
  v13 = v12 & 0x78;
  memset(v123, 0, 256);
  if (v13 == 8)
  {
    v14 = *(_DWORD *)(a1 + 1260);
    if (v14 >= 256)
    {
      v117 = 0;
      v118 = 0;
      qmemcpy((void *)sub_10029430C(&v117, 14), "m_maxval < 256", 14);
      sub_100294B74(-215, (uint64_t *)&v117, "readData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pxm.cpp", 226);
    }
    v15 = *(_DWORD *)(a1 + 1248);
    if (v14 < 0)
      goto LABEL_20;
    if (v15 == 1)
      v16 = -1;
    else
      v16 = 0;
    v17 = (v14 + 1);
    if (v14)
    {
      v18 = 0;
      v19 = v17 & 0xFFFFFFFE;
      v20 = &v123[1];
      do
      {
        *(v20 - 1) = v16 ^ ((int)v18 / v14);
        *v20 = v16 ^ (((int)v18 + 255) / v14);
        v20 += 2;
        v18 += 510;
      }
      while (510 * (v17 >> 1) != v18);
      if (v19 == v17)
      {
LABEL_20:
        if (v15 == 1)
          v24 = 1;
        else
          v24 = 8;
        sub_1002B0E68(v124, v24, v15 == 1, 0.0, v11);
        goto LABEL_24;
      }
    }
    else
    {
      v19 = 0;
    }
    v21 = 255 * v19;
    v22 = &v123[v19];
    v23 = v17 - v19;
    do
    {
      *v22++ = v16 ^ (v21 / v14);
      v21 += 255;
      --v23;
    }
    while (v23);
    goto LABEL_20;
  }
LABEL_24:
  sub_10029E194((uint64_t)v8, *(_DWORD *)(a1 + 1252));
  v116 = v4 & 0xFF8;
  v115 = (v9 * v7 * ((v12 >> 3) & 0xF) + 7) >> 3;
  v25 = *(_DWORD *)(a1 + 1248);
  if (v25 == 1)
  {
    if ((*(_BYTE *)(a1 + 16) & 7) != 0)
    {
      v117 = 0;
      v118 = 0;
      qmemcpy((void *)sub_10029430C(&v117, 32), "((m_type) & ((1 << 3) - 1)) == 0", 32);
      sub_100294B74(-215, (uint64_t *)&v117, "readData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pxm.cpp", 242);
    }
    if (*(_BYTE *)(a1 + 1256))
    {
      v117 = &v119;
      v118 = (v9 * v7 * ((v12 >> 3) & 0xF) + 7) >> 3;
      if (v115 >= 0x409)
        operator new[]();
      if (*(int *)(a1 + 12) >= 1)
      {
        if ((v4 & 0xFF8) != 0)
        {
          v100 = 0;
          do
          {
            sub_10029E634((uint64_t)v8, (char *)&v119, v115);
            sub_1002B16B4(v5, (char *)&v119, *(_DWORD *)(a1 + 8), (uint64_t)v124);
            ++v100;
            v5 = (int *)((char *)v5 + *((_QWORD *)a2 + 10));
          }
          while (v100 < *(_DWORD *)(a1 + 12));
        }
        else
        {
          v105 = 0;
          do
          {
            sub_10029E634((uint64_t)v8, (char *)&v119, v115);
            sub_1002B17B8(v5, (char *)&v119, *(_DWORD *)(a1 + 8), v123);
            ++v105;
            v5 = (int *)((char *)v5 + *((_QWORD *)a2 + 10));
          }
          while (v105 < *(_DWORD *)(a1 + 12));
        }
      }
      if (v117 != &v119 && v117 != 0)
        goto LABEL_169;
    }
    else
    {
      v101 = *(int *)(a1 + 8);
      v117 = &v119;
      v118 = v101;
      if (v101 >= 0x409)
        operator new[]();
      if (*(int *)(a1 + 12) >= 1)
      {
        if ((v4 & 0xFF8) != 0)
        {
          v102 = 0;
          do
          {
            LODWORD(v103) = *(_DWORD *)(a1 + 8);
            if ((int)v103 >= 1)
            {
              v104 = 0;
              do
              {
                v120[v104++ - 2] = sub_1002A88E8(v8, 1) != 0;
                v103 = *(int *)(a1 + 8);
              }
              while (v104 < v103);
            }
            sub_1002B153C((uint64_t)v5, (unsigned __int8 *)&v119, v103, (uint64_t)v124);
            ++v102;
            v5 = (int *)((char *)v5 + *((_QWORD *)a2 + 10));
          }
          while (v102 < *(_DWORD *)(a1 + 12));
        }
        else
        {
          v107 = 0;
          do
          {
            LODWORD(v108) = *(_DWORD *)(a1 + 8);
            if ((int)v108 >= 1)
            {
              v109 = 0;
              do
              {
                v120[v109++ - 2] = sub_1002A88E8(v8, 1) != 0;
                v108 = *(int *)(a1 + 8);
              }
              while (v109 < v108);
            }
            sub_1002B158C(v5, (unsigned __int8 *)&v119, v108, (uint64_t)v123);
            ++v107;
            v5 = (int *)((char *)v5 + *((_QWORD *)a2 + 10));
          }
          while (v107 < *(_DWORD *)(a1 + 12));
        }
      }
      if (v117 != &v119 && v117 != 0)
        goto LABEL_169;
    }
  }
  else
  {
    if (v25 != 8 && v25 != 24)
    {
      sub_1001F37D4(&v117, "m_bpp is not supported");
      sub_1002A97AC((uint64_t *)&v117, "readData", 357);
    }
    v26 = v7 + v7 * ((v6 >> 3) & 0x1FF);
    if (2 * (int)v26 <= v115)
      v27 = v115;
    else
      v27 = 2 * (int)v26;
    v117 = &v119;
    v118 = v27;
    v28 = &v119;
    if (v27 >= 0x409)
      operator new[]();
    if (*(int *)(a1 + 12) >= 1)
    {
      v29 = 0;
      v31 = v13 != 16 || (int)v26 < 1;
      v114 = v31;
      v113 = v26 & 0xFFFFFFE0;
      v34 = &v119 < (__int16 *)&v120[2 * v26 - 2] && &v119 < (__int16 *)&v120[v26 - 2]
         || v26 < 8;
      v112 = v34;
      v111 = v26 & 0xFFFFFFF8;
      while (!*(_BYTE *)(a1 + 1256))
      {
        if ((int)v26 < 1)
          goto LABEL_91;
        for (i = 0; i != v26; ++i)
        {
          while (1)
          {
            v37 = sub_1002A88E8(v8, 0);
            v38 = *(_DWORD *)(a1 + 1260);
            if (v37 < v38)
              v38 = v37;
            if (v13 == 8)
              break;
            *(_WORD *)&v120[2 * i++ - 2] = v38;
            if (v26 == i)
              goto LABEL_74;
          }
          v120[i - 2] = v123[v38];
        }
LABEL_74:
        if (v13 == 16 && (*a2 & 7) == 0 && (int)v26 >= 1)
        {
          if (v112)
          {
            v52 = 0;
            do
            {
LABEL_90:
              v120[v52 - 2] = v120[2 * v52 - 1];
              ++v52;
            }
            while (v26 != v52);
            goto LABEL_91;
          }
          if (v26 >= 0x20)
          {
            v54 = v26 & 0xFFFFFFE0;
            v55 = (int8x16_t *)v121;
            v56 = (int8x16_t *)v122;
            do
            {
              v58 = v56[-2];
              v57 = v56[-1];
              v60 = *v56;
              v59 = v56[1];
              v56 += 4;
              v55[-1] = vuzp2q_s8(v58, v57);
              *v55 = vuzp2q_s8(v60, v59);
              v55 += 2;
              v54 -= 32;
            }
            while (v54);
            if (v113 == v26)
              goto LABEL_91;
            v52 = v26 & 0xFFFFFFE0;
            v53 = v52;
            if ((v26 & 0x18) == 0)
              goto LABEL_90;
          }
          else
          {
            v53 = 0;
          }
          v61 = (int16x8_t *)&v120[2 * v53 - 2];
          v62 = (int8x8_t *)&v120[v53 - 2];
          v63 = v53 - (v26 & 0xFFFFFFF8);
          do
          {
            v64 = *v61++;
            *v62++ = vshrn_n_s16(v64, 8uLL);
            v63 += 8;
          }
          while (v63);
          v52 = v26 & 0xFFFFFFF8;
          if (v111 != v26)
            goto LABEL_90;
        }
LABEL_91:
        v65 = *a2;
        if (*(_DWORD *)(a1 + 1248) != 8)
        {
          v81 = *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header;
          if (v116)
          {
            if ((v65 & 7) != 0)
              sub_1002AFC54(&v119, 0, (__int16 *)v5, 0, v81);
            else
              sub_1002AFB0C((const char *)&v119, 0, (char *)v5, 0, v81);
          }
          else if ((v65 & 7) != 0)
          {
            sub_1002AF678((uint64_t)&v119, 0, (uint64_t)v5, 0, v81, 3, 2);
          }
          else
          {
            sub_1002AF428((uint64_t)&v119, 0, (unint64_t)v5, 0, v81, 2);
          }
          goto LABEL_50;
        }
        if (v116)
        {
          v66 = *(int *)(a1 + 8);
          if ((v65 & 7) != 0)
          {
            if ((int)v66 >= 1)
            {
              v67 = &v120[2 * v66 - 2];
              v68 = v120;
              if (v67 > v120)
                v68 = v67;
              v69 = (unint64_t)&v68[~(unint64_t)&v119];
              v70 = &v119;
              v71 = v5;
              if (v69 < 0x1E)
                goto LABEL_106;
              v72 = v5 >= (int *)&v120[v69 & 0xFFFFFFFFFFFFFFFELL] || &v119 >= (__int16 *)v5 + 3 * (v69 >> 1) + 3;
              v70 = &v119;
              v71 = v5;
              if (!v72)
                goto LABEL_106;
              v73 = (v69 >> 1) + 1;
              v70 = (__int16 *)&v120[2 * (v73 & 0xFFFFFFFFFFFFFFF0) - 2];
              v71 = (int *)((char *)v5 + 6 * (v73 & 0xFFFFFFFFFFFFFFF0));
              v74 = v73 & 0xFFFFFFFFFFFFFFF0;
              v75 = (int16x8_t *)v121;
              v76 = (__int16 *)v5;
              do
              {
                v129.val[0] = v75[-1];
                v131.val[0] = *v75;
                v129.val[1] = v129.val[0];
                v129.val[2] = v129.val[0];
                v131.val[1] = *v75;
                v131.val[2] = *v75;
                v77 = v76 + 48;
                vst3q_s16(v76, v129);
                v78 = v76 + 24;
                vst3q_s16(v78, v131);
                v75 += 2;
                v76 = v77;
                v74 -= 16;
              }
              while (v74);
              if (v73 != (v73 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_106:
                v79 = v71 + 1;
                do
                {
                  v80 = *v70++;
                  *v79 = v80;
                  *(v79 - 1) = v80;
                  *(v79 - 2) = v80;
                  v79 += 3;
                }
                while (v70 < (__int16 *)v67);
              }
            }
            goto LABEL_50;
          }
          if ((int)v66 >= 1)
          {
            v82 = (__int16 *)&v120[v66 - 2];
            if (v82 <= (__int16 *)((char *)&v119 + 1))
              v83 = (__int16 *)((char *)&v119 + 1);
            else
              v83 = v82;
            v84 = (char *)v83 - (char *)&v119;
            v85 = &v119;
            v86 = v5;
            if ((unint64_t)((char *)v83 - (char *)&v119) >= 8)
            {
              if (v5 >= (int *)v83
                || (v85 = &v119, v86 = v5, &v119 >= (__int16 *)((char *)v5 + 3 * (_QWORD)v83 + -3 * (_QWORD)&v119)))
              {
                if (v84 >= 0x20)
                {
                  v87 = v84 & 0xFFFFFFFFFFFFFFE0;
                  v88 = v84 & 0xFFFFFFFFFFFFFFE0;
                  v89 = (int8x16_t *)v121;
                  v90 = (char *)v5;
                  do
                  {
                    v130.val[0] = v89[-1];
                    v132.val[0] = *v89;
                    v130.val[1] = v130.val[0];
                    v130.val[2] = v130.val[0];
                    v132.val[1] = *v89;
                    v132.val[2] = *v89;
                    v91 = v90 + 96;
                    vst3q_s8(v90, v130);
                    v92 = v90 + 48;
                    vst3q_s8(v92, v132);
                    v89 += 2;
                    v90 = v91;
                    v88 -= 32;
                  }
                  while (v88);
                  if (v84 == v87)
                    goto LABEL_50;
                  if ((v84 & 0x18) != 0)
                    goto LABEL_129;
                  v86 = (int *)((char *)v5 + 3 * v87);
                  v85 = (__int16 *)&v120[v87 - 2];
                }
                else
                {
                  v87 = 0;
LABEL_129:
                  v85 = (__int16 *)&v120[(v84 & 0xFFFFFFFFFFFFFFF8) - 2];
                  v86 = (int *)((char *)v5 + 3 * (v84 & 0xFFFFFFFFFFFFFFF8));
                  v93 = (char *)v5 + 3 * v87;
                  v94 = (int8x8_t *)&v120[v87 - 2];
                  v95 = v87 - (v84 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v96 = *v94++;
                    v128.val[0] = v96;
                    v128.val[1] = v96;
                    v128.val[2] = v96;
                    vst3_s8(v93, v128);
                    v93 += 24;
                    v95 += 8;
                  }
                  while (v95);
                  if (v84 == (v84 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_50;
                }
              }
            }
            v97 = (char *)v86 + 2;
            do
            {
              v98 = *(_BYTE *)v85;
              v85 = (__int16 *)((char *)v85 + 1);
              *v97 = v98;
              *(v97 - 1) = v98;
              *(v97 - 2) = v98;
              v97 += 3;
            }
            while (v85 < v82);
          }
        }
        else
        {
          memcpy(v5, &v119, ((0x88442211uLL >> (4 * (v65 & 7u))) & 0xF) * *(int *)(a1 + 8));
        }
LABEL_50:
        ++v29;
        v5 = (int *)((char *)v5 + *((_QWORD *)a2 + 10));
        if (v29 >= *(_DWORD *)(a1 + 12))
        {
          v28 = v117;
          goto LABEL_138;
        }
      }
      sub_10029E634((uint64_t)v8, (char *)&v119, v115);
      if (v114)
        goto LABEL_91;
      if (v26 < 8)
      {
        v35 = 0;
LABEL_72:
        v48 = &v120[2 * v35 - 1];
        v49 = v26 - v35;
        do
        {
          v50 = *(v48 - 1);
          *(v48 - 1) = *v48;
          *v48 = v50;
          v48 += 2;
          --v49;
        }
        while (v49);
        goto LABEL_74;
      }
      if (v26 >= 0x20)
      {
        v40 = v26 & 0xFFFFFFE0;
        v41 = v122;
        do
        {
          v42 = v41 - 32;
          v126 = vld2q_s8(v42);
          v127 = vld2q_s8(v41);
          v43 = v126.val[0];
          v44 = v127.val[0];
          vst2q_s8(v42, *(int8x16x2_t *)((char *)&v126 + 16));
          vst2q_s8(v41, *(int8x16x2_t *)((char *)&v127 + 16));
          v41 += 64;
          v40 -= 32;
        }
        while (v40);
        if (v113 == v26)
          goto LABEL_74;
        v35 = v26 & 0xFFFFFFE0;
        v39 = v35;
        if ((v26 & 0x18) == 0)
          goto LABEL_72;
      }
      else
      {
        v39 = 0;
      }
      v45 = &v120[2 * v39 - 2];
      v46 = v39 - (v26 & 0xFFFFFFF8);
      do
      {
        v125 = vld2_s8(v45);
        v47 = v125.val[0];
        vst2_s8(v45, *(int8x8x2_t *)((char *)&v125 + 8));
        v45 += 16;
        v46 += 8;
      }
      while (v46);
      v35 = v26 & 0xFFFFFFF8;
      if (v111 == v26)
        goto LABEL_74;
      goto LABEL_72;
    }
LABEL_138:
    if (v28 != &v119 && v28 != 0)
LABEL_169:
      operator delete[]();
  }
  return 1;
}

void sub_1002A95E8()
{
  __break(1u);
}

void sub_1002A977C()
{
  __cxa_end_catch();
  JUMPOUT(0x1002A979CLL);
}

void sub_1002A9788()
{
  __cxa_end_catch();
  JUMPOUT(0x1002A979CLL);
}

void sub_1002A97AC(uint64_t *a1, char *__s, int a3)
{
  sub_100294B74(-2, a1, __s, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pxm.cpp", a3);
}

uint64_t sub_1002A97D4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_10029F688(a1);
  *v2 = off_10044FEF0;
  v3 = v2 + 1;
  sub_10029434C(v2 + 1);
  qmemcpy((void *)sub_10029430C(v3, 53), "Portable image format (*.pbm;*.pgm;*.ppm;*.pxm;*.pnm)", 53);
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

void sub_1002A984C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  *v1 = off_10044EFB0;
  sub_10029434C(v1 + 7);
  sub_10029434C(v1 + 3);
  sub_10029434C(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002A988C(uint64_t *a1)
{
  *a1 = (uint64_t)off_10044EFB0;
  sub_10029434C(a1 + 7);
  sub_10029434C(a1 + 3);
  sub_10029434C(a1 + 1);
  return a1;
}

void sub_1002A98DC(uint64_t *a1)
{
  *a1 = (uint64_t)off_10044EFB0;
  sub_10029434C(a1 + 7);
  sub_10029434C(a1 + 3);
  sub_10029434C(a1 + 1);
  operator delete();
}

void sub_1002A993C()
{
  operator new();
}

void sub_1002A99E4()
{
  operator delete();
}

BOOL sub_1002A9A08(uint64_t a1, int a2)
{
  return (a2 & 0xFFFFFFFD) == 0;
}

uint64_t sub_1002A9A14(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  unsigned int *v3;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  unint64_t v30;
  char *v31;
  _BYTE *v32;
  char *v33;
  unint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  char *v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  unsigned int v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  int v57;
  BOOL v59;
  uint64_t v60;
  char *v61;
  const char *v62;
  __int16 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned __int16 *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int8x16_t v76;
  int8x16_t v77;
  char *v78;
  unint64_t v79;
  int8x8_t v80;
  __int16 *v81;
  char v82;
  unint64_t v84;
  BOOL v85;
  unint64_t v86;
  unsigned int *v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  BOOL v91;
  int v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  _QWORD v96[8];
  __int16 *v97;
  uint64_t v98;
  __int16 v99[16];
  uint64_t v100;
  int8x8x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;

  v3 = a2;
  v6 = *a2;
  v5 = a2[1];
  v7 = (*a2 >> 3) & 0x1FF;
  if (v7)
    v8 = 3;
  else
    v8 = 1;
  if (v5 >= 1)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * (v5 - 1));
    v10 = *a3;
    v11 = a3[1];
    v12 = v11 - *a3;
    if (v11 != *a3)
      goto LABEL_6;
LABEL_11:
    v15 = 1;
    goto LABEL_12;
  }
  LODWORD(v9) = 0;
  v10 = *a3;
  v16 = a3[1];
  v12 = v16 - *a3;
  if (v16 == *a3)
    goto LABEL_11;
LABEL_6:
  v13 = 0;
  v14 = v12 >> 2;
  v15 = 1;
  do
  {
    if (*(_DWORD *)(v10 + 4 * v13) == 32)
      v15 = *(_DWORD *)(v10 + 4 * v13 + 4) != 0;
    v13 += 2;
  }
  while (v13 < v14);
LABEL_12:
  v18 = a2[2];
  v17 = a2[3];
  sub_10029E910((uint64_t)v96);
  v93 = v17 * v9;
  v96[0] = off_10044EE48;
  v19 = *(_QWORD *)(a1 + 40);
  v20 = v17;
  v89 = v17;
  if (v19)
  {
    if ((sub_10029ED30((uint64_t)v96, v19) & 1) != 0)
    {
      v21 = *(_QWORD *)(a1 + 40);
      v22 = v93;
      if (!v15)
      {
        switch(*v3 & 7 | (8 * (_DWORD)v8))
        {
          case 8u:
            v23 = 4;
            break;
          case 0x18u:
            v23 = 14;
            break;
          case 0xAu:
            v23 = 6;
            break;
          default:
            v23 = 20;
            break;
        }
        v22 = (v23 * v17) | 1;
      }
      v24 = v18;
      v26 = (v22 * (int)v18 + 511) & 0xFFFFFFFFFFFFFF00;
      v27 = *(_BYTE **)v21;
      if (*(_QWORD *)(v21 + 16) - *(_QWORD *)v21 >= v26)
        goto LABEL_47;
      if ((v26 & 0x8000000000000000) != 0)
        sub_100008F3C();
      v28 = *(_BYTE **)(v21 + 8);
      v29 = operator new(v26);
      v30 = v28 - v27;
      v31 = &v29[v28 - v27];
      v32 = v31;
      if (v28 == v27)
        goto LABEL_45;
      if (v30 < 8)
      {
        v33 = &v29[v28 - v27];
        goto LABEL_42;
      }
      v33 = &v29[v28 - v27];
      if ((unint64_t)(v27 - v29) >= 0x20)
      {
        if (v30 < 0x20)
        {
          v34 = 0;
          goto LABEL_37;
        }
        v34 = v30 & 0xFFFFFFFFFFFFFFE0;
        v35 = (__int128 *)(v28 - 16);
        v36 = &v29[v28 - 16 - v27];
        v37 = v30 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v38 = *v35;
          *(v36 - 1) = *(v35 - 1);
          *v36 = v38;
          v36 -= 2;
          v35 -= 2;
          v37 -= 32;
        }
        while (v37);
        if (v30 == v34)
          goto LABEL_44;
        if ((v30 & 0x18) != 0)
        {
LABEL_37:
          v33 = &v31[-(v30 & 0xFFFFFFFFFFFFFFF8)];
          v39 = &v28[-v34 - 8];
          v40 = v39 - v27;
          v41 = v34 - (v30 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v42 = *(_QWORD *)v39;
            v39 -= 8;
            *(_QWORD *)&v29[v40] = v42;
            v40 -= 8;
            v41 += 8;
          }
          while (v41);
          v28 -= v30 & 0xFFFFFFFFFFFFFFF8;
          if (v30 == (v30 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_44;
          goto LABEL_42;
        }
        v33 = &v31[-v34];
        v28 -= v34;
      }
LABEL_42:
      v43 = v33 - 1;
      do
      {
        v44 = *--v28;
        *v43-- = v44;
      }
      while (v28 != v27);
LABEL_44:
      v32 = v29;
LABEL_45:
      *(_QWORD *)v21 = v32;
      *(_QWORD *)(v21 + 8) = v31;
      *(_QWORD *)(v21 + 16) = &v29[v26];
      v20 = v89;
      if (v27)
        operator delete(v27);
      goto LABEL_47;
    }
LABEL_19:
    v25 = 0;
    goto LABEL_131;
  }
  v24 = v18;
  if (!sub_10029ECB0((uint64_t)v96, (const char **)(a1 + 24)))
    goto LABEL_19;
LABEL_47:
  if (v15)
  {
    v45 = v3[1];
    v46 = __OFSUB__(v45, 1);
    v47 = v45 - 1;
    if (v47 < 0 != v46)
      LODWORD(v48) = 0;
    else
      v48 = *(_QWORD *)(*((_QWORD *)v3 + 9) + 8 * v47);
    v49 = v20 * v48;
  }
  else
  {
    v49 = (6 * v8 + 2 * (v7 != 0)) * v20 + 32;
  }
  if (v49 <= 128)
    v50 = 128;
  else
    v50 = v49;
  v97 = v99;
  v98 = v50;
  if (v50 >= 0x409)
    operator new[]();
  v95 = (0x88442211 >> (4 * (v6 & 7))) & 0xF;
  if (v7)
    v51 = 51;
  else
    v51 = 50;
  if (v15)
    v52 = 3;
  else
    v52 = 0;
  sprintf((char *)v99, "P%c\n# Generated by OpenCV %s\n%d %d\n%d\n", (v52 + v51), "3.4.0", v20, v24, ~(-1 << (8 * v95)));
  v53 = strlen((const char *)v99);
  sub_10029EEF4(v96, (char *)v99, v53);
  v94 = v24;
  if ((int)v24 >= 1)
  {
    v54 = 0;
    v55 = v8 * v20;
    v88 = v20 | (unint64_t)&_mh_execute_header;
    if (v7)
      v56 = 1;
    else
      v56 = v95 > 1;
    v57 = v56;
    v90 = v57;
    v59 = v95 != 2 || v55 < 1;
    v85 = v59;
    v60 = 2;
    if (2 * v55 > 2)
      v60 = 2 * v55;
    v86 = v60;
    v84 = ((unint64_t)(v60 - 1) >> 1) + 1;
    v87 = v3;
    v91 = v15;
    v92 = v7;
    do
    {
      v62 = (const char *)(*((_QWORD *)v3 + 2) + **((_QWORD **)v3 + 9) * v54);
      if (v15)
      {
        if (v7 == 2)
        {
          if (v95 == 1)
          {
            sub_1002AFB0C(v62, 0, (char *)v99, 0, v88);
          }
          else
          {
            sub_1002AFC54((const __int16 *)v62, 0, v99, 0, v88);
            if (!v85)
              goto LABEL_101;
          }
LABEL_81:
          if (v90)
            v61 = (char *)v99;
          else
            v61 = (char *)v62;
          sub_10029EEF4(v96, v61, v93);
          goto LABEL_85;
        }
        if (v95 != 2)
          goto LABEL_81;
        if (!v7)
          memcpy(v99, v62, v93);
        if (v55 < 1)
          goto LABEL_81;
LABEL_101:
        if (v86 < 0xF)
        {
          v65 = 0;
          goto LABEL_125;
        }
        if (v86 < 0x3F)
        {
          v72 = 0;
          goto LABEL_122;
        }
        v73 = v84 & 0x7FFFFFFFFFFFFFE0;
        v74 = (char *)&v100;
        do
        {
          v75 = v74 - 32;
          v102 = vld2q_s8(v75);
          v103 = vld2q_s8(v74);
          v76 = v102.val[0];
          v77 = v103.val[0];
          vst2q_s8(v75, *(int8x16x2_t *)((char *)&v102 + 16));
          vst2q_s8(v74, *(int8x16x2_t *)((char *)&v103 + 16));
          v74 += 64;
          v73 -= 32;
        }
        while (v73);
        if (v84 == (v84 & 0x7FFFFFFFFFFFFFE0))
          goto LABEL_81;
        v72 = v84 & 0x7FFFFFFFFFFFFFE0;
        v65 = v84 & 0x7FFFFFFFFFFFFFE0;
        if ((v84 & 0x18) != 0)
        {
LABEL_122:
          v78 = (char *)&v99[v72];
          v79 = v72 - (v84 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v101 = vld2_s8(v78);
            v80 = v101.val[0];
            vst2_s8(v78, *(int8x8x2_t *)((char *)&v101 + 8));
            v78 += 16;
            v79 += 8;
          }
          while (v79);
          v65 = v84 & 0x7FFFFFFFFFFFFFF8;
          if (v84 == (v84 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_81;
        }
        do
        {
LABEL_125:
          v81 = &v99[v65];
          v82 = v99[v65];
          *(_BYTE *)v81 = HIBYTE(v99[v65]);
          *((_BYTE *)v81 + 1) = v82;
          ++v65;
        }
        while (v65 < v55);
        goto LABEL_81;
      }
      if (!v7)
      {
        v63 = v99;
        if (v95 == 1)
        {
          if ((int)v20 >= 1)
          {
            v66 = v20;
            v63 = v99;
            do
            {
              v67 = *(unsigned __int8 *)v62++;
              sprintf((char *)v63, "% 4d", v67);
              v63 += 2;
              --v66;
            }
            while (v66);
          }
        }
        else if ((int)v20 >= 1)
        {
          v70 = v20;
          v63 = v99;
          do
          {
            v71 = *(unsigned __int16 *)v62;
            v62 += 2;
            sprintf((char *)v63, "% 6d", v71);
            v63 += 3;
            --v70;
          }
          while (v70);
        }
        goto LABEL_115;
      }
      v63 = v99;
      if (v95 == 1)
      {
        if (v55 >= 1)
        {
          v64 = 0;
          v63 = v99;
          do
          {
            sprintf((char *)v63, "% 4d", v62[v64 + 2]);
            sprintf((char *)v63 + 4, "% 4d", v62[v64 + 1]);
            sprintf((char *)v63 + 8, "% 4d", v62[v64]);
            v63[6] = 8224;
            v63 += 7;
            v64 += v8;
          }
          while (v55 > (int)v64);
LABEL_111:
          v3 = v87;
          v20 = v89;
        }
      }
      else if (v55 >= 1)
      {
        v68 = 0;
        v63 = v99;
        do
        {
          v69 = (unsigned __int16 *)&v62[2 * v68];
          sprintf((char *)v63, "% 6d", v69[2]);
          sprintf((char *)v63 + 6, "% 6d", v69[1]);
          sprintf((char *)v63 + 12, "% 6d", *v69);
          v63[9] = 8224;
          v63 += 10;
          v68 += v8;
        }
        while (v55 > (int)v68);
        goto LABEL_111;
      }
LABEL_115:
      *(_BYTE *)v63 = 10;
      sub_10029EEF4(v96, (char *)v99, (_DWORD)v63 - v99 + 1);
      v15 = v91;
      v7 = v92;
LABEL_85:
      ++v54;
    }
    while (v54 != v94);
  }
  sub_10029ED88((uint64_t)v96);
  if (v97 != v99 && v97)
    operator delete[]();
  v25 = 1;
LABEL_131:
  sub_10029EE14((uint64_t)v96);
  return v25;
}

void sub_1002AA218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  sub_10029EE14((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_1002AA22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  sub_10029EE14((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_1002AA240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (a46 != a22 && a46 != 0)
    operator delete[]();
  sub_10029EE14((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_1002AA2A0()
{
  operator delete();
}

uint64_t sub_1002AA2B4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_1002AA2F4()
{
  operator delete();
}

uint64_t sub_1002AA308(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002AA344(uint64_t a1)
{
  _QWORD *v2;

  sub_10029F330(a1);
  *v2 = off_10044FFF8;
  sub_10029DE2C((uint64_t)(v2 + 20));
  *(_QWORD *)(a1 + 160) = off_10044EDD0;
  *(_DWORD *)(a1 + 1252) = -1;
  sub_10029434C((uint64_t *)(a1 + 40));
  *(_DWORD *)sub_10029430C((_QWORD *)(a1 + 40), 4) = -1788172711;
  *(_DWORD *)(a1 + 1248) = 0;
  *(_QWORD *)(a1 + 1256) = 1;
  *(_DWORD *)(a1 + 1264) = 0;
  return a1;
}

void sub_1002AA3D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029F908(v1);
  _Unwind_Resume(a1);
}

void sub_1002AA3EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10029E6F8(v2);
  sub_10029F908(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002AA408(_QWORD *a1)
{
  *a1 = off_10044FFF8;
  sub_10029E6F8((uint64_t)(a1 + 20));
  return sub_10029F908((uint64_t)a1);
}

void sub_1002AA438(_QWORD *a1)
{
  *a1 = off_10044FFF8;
  sub_10029E6F8((uint64_t)(a1 + 20));
  sub_10029F908((uint64_t)a1);
  operator delete();
}

void sub_1002AA47C()
{
  sub_1002AA4FC();
}

void sub_1002AA4FC()
{
  operator new();
}

void sub_1002AA5DC()
{
  uint64_t v0;

  sub_10029F908(v0);
  operator delete();
}

FILE *sub_1002AA620(int8x8_t *a1)
{
  int8x8_t *v2;
  FILE *result;
  __int32 v4;
  char v5;
  int v6;
  int v7;
  unsigned int v8;
  __int32 v9;
  __int32 v10;
  double v11;
  int8x16_t v12;
  __int32 v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  int v36;
  char __dst[768];

  v2 = a1 + 20;
  result = sub_10029E1DC((uint64_t)&a1[20], (const char **)&a1[3]);
  if ((_DWORD)result)
  {
    sub_10029E48C((uint64_t)v2, 4);
    a1[1].i32[0] = sub_10029E898(v2);
    a1[1].i32[1] = sub_10029E898(v2);
    v4 = sub_10029E898(v2);
    v5 = v4;
    a1[156].i32[0] = v4;
    sub_10029E48C((uint64_t)v2, 4);
    a1[157].i32[0] = sub_10029E898(v2);
    a1[157].i32[1] = sub_10029E898(v2);
    v6 = sub_10029E898(v2);
    v7 = v6;
    a1[158].i32[0] = v6;
    if (a1[1].i32[0] < 1)
      goto LABEL_39;
    if (a1[1].i32[1] < 1)
      goto LABEL_39;
    v8 = a1[156].u32[0];
    if (v8 > 0x20)
      goto LABEL_39;
    if (((1 << v8) & 0x101000102) == 0)
      goto LABEL_39;
    if (a1[157].i32[0] >= 2u)
    {
      v9 = a1[2].i32[0];
      if (v9 != 3 && (v9 != 2 || v8 != 8))
        goto LABEL_39;
    }
    v10 = a1[157].i32[1];
    if (v10 != 1)
    {
      if (!v10 && !v6)
      {
        bzero(&a1[28], 0x400uLL);
        a1[2].i32[0] = 16 * (v8 > 8);
        if (v8 <= 8)
          sub_1002B0E68(a1 + 28, v8, 0, v11, v12);
        v13 = sub_10029E1C0(v2);
LABEL_38:
        a1[156].i32[1] = v13;
        return (FILE *)1;
      }
      goto LABEL_39;
    }
    if (v6 > 3 << v5
      || v6 < 1
      || v8 > 8
      || (bzero(&a1[28], 0x400uLL), v14 = sub_10029E634((uint64_t)v2, __dst, v7), v14 != a1[158].i32[0]))
    {
LABEL_39:
      a1[156].i32[1] = -1;
      a1[1] = (int8x8_t)-1;
      sub_10029E3F4((uint64_t)v2);
      return 0;
    }
    if ((int)v14 >= 3)
    {
      v15 = v14 / 3uLL;
      if (v14 < 0x18)
      {
        v16 = 0;
        goto LABEL_32;
      }
      if (v14 >= 0x30)
      {
        v16 = v15 & 0x7FFFFFF0;
        v17 = (char *)&a1[28];
        v18 = __dst;
        v19 = 0uLL;
        v20 = v16;
        do
        {
          v21 = *(_OWORD *)&v18[2 * v15];
          v22 = *(_OWORD *)&v18[v15];
          v23 = *(_OWORD *)v18;
          v18 += 16;
          v24 = v23;
          vst4q_s8(v17, *(int8x16x4_t *)(&v19 - 3));
          v17 += 64;
          v20 -= 16;
        }
        while (v20);
        if (v16 == v15)
          goto LABEL_34;
        if ((v15 & 8) == 0)
        {
LABEL_32:
          v34 = (uint64_t)&a1[28] + 4 * v16 + 3;
          do
          {
            *(_BYTE *)(v34 - 3) = __dst[2 * v15 + v16];
            v35 = __dst[v16];
            *(_BYTE *)(v34 - 2) = __dst[v15 + v16];
            *(_WORD *)(v34 - 1) = v35;
            v34 += 4;
            ++v16;
          }
          while (v15 != v16);
          goto LABEL_34;
        }
      }
      else
      {
        v16 = 0;
      }
      v25 = v16;
      v16 = v15 & 0x7FFFFFF8;
      v26 = (char *)&a1[28] + 4 * v25;
      v27 = &__dst[v25];
      v28 = v25 - v16;
      v29 = 0;
      do
      {
        v30 = *(_QWORD *)&v27[2 * v15];
        v31 = *(_QWORD *)&v27[v15];
        v32 = *(_QWORD *)v27;
        v27 += 8;
        v33 = v32;
        vst4_s8(v26, *(int8x8x4_t *)(&v29 - 3));
        v26 += 32;
        v28 += 8;
      }
      while (v28);
      if (v16 != v15)
        goto LABEL_32;
    }
LABEL_34:
    if (sub_1002B0F28((unsigned __int8 *)&a1[28], a1[156].i32[0]))
      v36 = 16;
    else
      v36 = 0;
    a1[2].i32[0] = v36;
    v13 = sub_10029E1C0(v2);
    goto LABEL_38;
  }
  return result;
}

uint64_t sub_1002AA968(uint64_t a1, int *a2)
{
  int v2;
  int *v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  BOOL v27;
  int v28;
  unsigned __int8 v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned __int8 v43;
  int v44;
  int v45;
  int v46;
  int64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int *v53;
  int v54;
  char *v55;
  uint64_t v56;
  char v57[1032];
  unsigned __int8 *v58;
  uint64_t v59;
  unsigned __int8 v60[3];
  char v61;
  _BYTE v62[1028];
  _OWORD v63[16];

  v2 = *a2;
  v3 = (int *)*((_QWORD *)a2 + 2);
  v51 = *((_QWORD *)a2 + 10);
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 1248) * v4;
  v7 = v5 + 7;
  v6 = v5 < -7;
  v8 = v5 + 14;
  if (v6)
    v9 = v8;
  else
    v9 = v7;
  v52 = *a2 & 0xFF8;
  memset(v63, 0, sizeof(v63));
  if ((v2 & 0xFF8) != 0)
    v10 = 3;
  else
    v10 = 1;
  if ((*(_DWORD *)(a1 + 1252) & 0x80000000) != 0)
    return 0;
  v12 = (_QWORD *)(a1 + 160);
  if (!sub_10029DDC4(a1 + 160))
    return 0;
  v13 = ((v9 >> 3) + 1) & 0xFFFFFFFE;
  v54 = 0;
  v58 = v60;
  v59 = (int)(v13 + 32);
  if (v13 + 32 >= 0x409)
    operator new[]();
  v14 = 3 * *(int *)(a1 + 8) + 32;
  v15 = (unint64_t)v57;
  v55 = v57;
  v56 = v14;
  if (v14 >= 0x409)
    operator new[]();
  if (!v52 && *(_DWORD *)(a1 + 1260) == 1)
    sub_1002B0C84((const char *)(a1 + 224), (unint64_t)v63, 1 << *(_DWORD *)(a1 + 1248));
  sub_10029E194((uint64_t)v12, *(_DWORD *)(a1 + 1252));
  v16 = 0;
  v50 = a1;
  switch(*(_DWORD *)(a1 + 1248))
  {
    case 1:
      if (*(_DWORD *)(a1 + 16) == 2)
      {
        v17 = *(_DWORD *)(a1 + 8);
        v18 = v17 + 7;
        v6 = v17 < -7;
        v19 = v17 + 14;
        if (!v6)
          v19 = v18;
        v20 = &v60[v19 >> 3];
        v54 = 0;
        v49 = a1 + 224;
        while (1)
        {
          v37 = v60;
          v38 = v60;
          do
          {
            v39 = v20 - v37;
            if ((int)v20 - (int)v37 <= 1)
              v40 = 1;
            else
              v40 = v39;
            v41 = v40;
            while (1)
            {
              v42 = sub_10029E574(v12);
              v43 = v42;
              if (v42 == 128)
              {
                v44 = sub_10029E574(v12);
                v45 = v44;
                if (v44)
                  break;
              }
              *v38++ = v43;
              --v39;
              if (!--v41)
              {
                v38 = &v37[v40];
                goto LABEL_59;
              }
            }
            if (v44 >= 1)
            {
              v46 = sub_10029E574(v12);
              v47 = (v45 + 1);
              if (v39 < v47)
                goto LABEL_97;
              memset(v38, v46, (v45 + 1));
              v38 += v47;
            }
LABEL_59:
            v37 = v38;
          }
          while (v38 < v20);
          v48 = *(_DWORD *)(v50 + 8);
          if (v52)
            sub_1002B16B4(v3, (char *)v60, v48, v49);
          else
            sub_1002B17B8(v3, (char *)v60, v48, (unsigned __int8 *)v63);
          v3 = (int *)((char *)v3 + v51);
          ++v54;
          v16 = 1;
          if (v54 >= *(_DWORD *)(v50 + 12))
            goto LABEL_84;
        }
      }
      v54 = 0;
      if (*(int *)(a1 + 12) < 1)
        goto LABEL_83;
      if (v52)
      {
        do
        {
          sub_10029E634((uint64_t)v12, (char *)v60, v13);
          sub_1002B16B4(v3, (char *)v60, *(_DWORD *)(a1 + 8), a1 + 224);
          ++v54;
          v3 = (int *)((char *)v3 + v51);
        }
        while (v54 < *(_DWORD *)(a1 + 12));
        goto LABEL_83;
      }
      v16 = 1;
      do
      {
        sub_10029E634((uint64_t)v12, (char *)v60, v13);
        sub_1002B17B8(v3, (char *)v60, *(_DWORD *)(a1 + 8), (unsigned __int8 *)v63);
        ++v54;
        v3 = (int *)((char *)v3 + v51);
      }
      while (v54 < *(_DWORD *)(a1 + 12));
      goto LABEL_84;
    case 8:
      if (*(_DWORD *)(a1 + 16) == 2)
      {
        v22 = v4 * (uint64_t)v10;
        LODWORD(v23) = (_DWORD)v3 + v22;
        v53 = (int *)((char *)v3 + v22);
        v54 = 0;
        v24 = a1 + 224;
        while (1)
        {
          v25 = v23 - (_DWORD)v3;
          v26 = v60;
          do
          {
            v28 = sub_10029E574(v12);
            v29 = v28;
            if (v28 == 128)
            {
              v30 = sub_10029E574(v12);
              if (v30)
              {
                v31 = (_DWORD)v26 - v60;
                if (v31 < 1)
                  goto LABEL_33;
LABEL_30:
                v32 = v50;
                if (v52)
                  sub_1002B153C((uint64_t)v3, v60, v31, v24);
                else
                  sub_1002B158C(v3, v60, v31, (uint64_t)v63);
                v3 = (int *)((char *)v3 + v10 * (uint64_t)v31);
                if (v30 < 1)
                  goto LABEL_41;
LABEL_37:
                v33 = sub_10029E574(v12);
                v34 = v10 + v10 * v30;
                v35 = sub_1002AF38C(v51);
                if (v52)
                {
                  v15 = v15 & 0xFFFFFFFF00000000 | *(unsigned int *)(v32 + 4 * v33 + 224);
                  v36 = sub_1002B0F9C(v3, (unint64_t *)&v53, v35, v22, &v54, *(_DWORD *)(v32 + 12), v34, v15);
                }
                else
                {
                  v36 = sub_1002B1470((unint64_t)v3, (unint64_t *)&v53, v35, v22, &v54, *(_DWORD *)(v32 + 12), v34, *((unsigned __int8 *)v63 + v33));
                }
                v3 = (int *)v36;
                if (v54 >= *(_DWORD *)(v32 + 12))
                  goto LABEL_83;
                goto LABEL_41;
              }
            }
            *v26++ = v29;
            v27 = __OFSUB__(v25, v10);
            v25 -= v10;
          }
          while (!((v25 < 0) ^ v27 | (v25 == 0)));
          v30 = 0;
          v31 = (_DWORD)v26 - v60;
          if (v31 >= 1)
            goto LABEL_30;
LABEL_33:
          v32 = v50;
          if (v30 >= 1)
            goto LABEL_37;
LABEL_41:
          LODWORD(v23) = (_DWORD)v53;
          if (v3 == v53)
          {
            if (sub_10029E574(v12))
            {
LABEL_97:
              v16 = 0;
              goto LABEL_84;
            }
            v23 = (unint64_t)v53 + v51;
            v53 = (int *)v23;
            v3 = (int *)(v23 - v22);
            if (++v54 >= *(_DWORD *)(v32 + 12))
              goto LABEL_83;
          }
        }
      }
      v54 = 0;
      if (*(int *)(a1 + 12) < 1)
        goto LABEL_83;
      if (v52)
      {
        do
        {
          sub_10029E634((uint64_t)v12, (char *)v60, v13);
          sub_1002B153C((uint64_t)v3, v60, *(_DWORD *)(a1 + 8), a1 + 224);
          ++v54;
          v3 = (int *)((char *)v3 + v51);
        }
        while (v54 < *(_DWORD *)(a1 + 12));
        goto LABEL_83;
      }
      v16 = 1;
      do
      {
        sub_10029E634((uint64_t)v12, (char *)v60, v13);
        sub_1002B158C(v3, v60, *(_DWORD *)(a1 + 8), (uint64_t)v63);
        ++v54;
        v3 = (int *)((char *)v3 + v51);
      }
      while (v54 < *(_DWORD *)(a1 + 12));
LABEL_84:
      if (v55 != v57)
      {
        if (v55)
          operator delete[]();
        v55 = v57;
      }
      if (v58 != v60 && v58)
        operator delete[]();
      return result;
    case 0x18:
      v54 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        if (v52)
        {
          do
          {
            sub_10029E634((uint64_t)v12, (char *)v3, v13);
            if (*(_DWORD *)(a1 + 16) == 3)
              sub_1002AFB0C((const char *)v3, 0, (char *)v3, 0, *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header);
            ++v54;
            v3 = (int *)((char *)v3 + v51);
          }
          while (v54 < *(_DWORD *)(a1 + 12));
        }
        else
        {
          do
          {
            sub_10029E634((uint64_t)v12, v57, v13);
            sub_1002AF428((uint64_t)v57, 0, (unint64_t)v3, 0, *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header, 2 * (*(_DWORD *)(a1 + 16) == 3));
            ++v54;
            v3 = (int *)((char *)v3 + v51);
          }
          while (v54 < *(_DWORD *)(a1 + 12));
        }
      }
      goto LABEL_83;
    case 0x20:
      v54 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        if (v52)
        {
          do
          {
            sub_10029E634((uint64_t)v12, &v61, v13);
            sub_1002AF964((uint64_t)v62, 0, (char *)v3, 0, *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header, 2 * (*(_DWORD *)(a1 + 16) == 3));
            ++v54;
            v3 = (int *)((char *)v3 + v51);
          }
          while (v54 < *(_DWORD *)(a1 + 12));
        }
        else
        {
          do
          {
            sub_10029E634((uint64_t)v12, &v61, v13);
            sub_1002AF710((uint64_t)v62, 0, (unint64_t)v3, 0, *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header, 2 * (*(_DWORD *)(a1 + 16) == 3));
            ++v54;
            v3 = (int *)((char *)v3 + v51);
          }
          while (v54 < *(_DWORD *)(a1 + 12));
        }
      }
LABEL_83:
      v16 = 1;
      goto LABEL_84;
    default:
      goto LABEL_84;
  }
}

void sub_1002AB270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19 != a11)
  {
    if (a19)
      operator delete[]();
  }
  JUMPOUT(0x1002AB1E8);
}

uint64_t sub_1002AB2A0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_10029F688(a1);
  *v2 = off_100450068;
  v3 = v2 + 1;
  sub_10029434C(v2 + 1);
  qmemcpy((void *)sub_10029430C(v3, 29), "Sun raster files (*.sr;*.ras)", 29);
  return a1;
}

void sub_1002AB308(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  *v1 = off_10044EFB0;
  sub_10029434C(v1 + 7);
  sub_10029434C(v1 + 3);
  sub_10029434C(v2);
  _Unwind_Resume(a1);
}

void sub_1002AB348()
{
  operator new();
}

void sub_1002AB3F0()
{
  operator delete();
}

uint64_t *sub_1002AB414(uint64_t *a1)
{
  *a1 = (uint64_t)off_10044EFB0;
  sub_10029434C(a1 + 7);
  sub_10029434C(a1 + 3);
  sub_10029434C(a1 + 1);
  return a1;
}

void sub_1002AB464(uint64_t *a1)
{
  *a1 = (uint64_t)off_10044EFB0;
  sub_10029434C(a1 + 7);
  sub_10029434C(a1 + 3);
  sub_10029434C(a1 + 1);
  operator delete();
}

BOOL sub_1002AB4C4(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL8 v7;
  int v8;
  unsigned int v9;
  uint64_t i;
  _QWORD v12[8];

  v4 = a2[2];
  v5 = a2[3];
  v6 = *a2;
  sub_10029E910((uint64_t)v12);
  v12[0] = off_10044EEB0;
  v7 = sub_10029ECB0((uint64_t)v12, (const char **)(a1 + 24));
  if (v7)
  {
    sub_10029EEF4(v12, "Y\xA6j\x95", 4);
    sub_10029F204(v12, v5);
    sub_10029F204(v12, v4);
    v8 = ((v6 >> 3) & 0x1FF) + 1;
    sub_10029F204(v12, 8 * v8);
    v9 = (v8 * v5 + 1) & 0xFFFFFFFE;
    sub_10029F204(v12, v9 * v4);
    sub_10029F204(v12, 1u);
    sub_10029F204(v12, 0);
    sub_10029F204(v12, 0);
    if ((int)v4 >= 1)
    {
      for (i = 0; i != v4; ++i)
        sub_10029EEF4(v12, (char *)(*((_QWORD *)a2 + 2) + **((_QWORD **)a2 + 9) * i), v9);
    }
    sub_10029ED88((uint64_t)v12);
  }
  sub_10029F124((uint64_t)v12);
  return v7;
}

void sub_1002AB5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029F124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002AB608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029F124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002AB620()
{
  operator delete();
}

uint64_t sub_1002AB634(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_1002AB674()
{
  operator delete();
}

uint64_t sub_1002AB688(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

UIImage *sub_1002AB6C4(uint64_t a1)
{
  NSData *v2;
  int v3;
  BOOL v4;
  int v5;
  CGColorSpaceRef DeviceRGB;
  CGColorSpace *v7;
  CGDataProvider *v8;
  int v9;
  size_t *v10;
  int v11;
  size_t v12;
  CGBitmapInfo v13;
  CGImage *v14;
  UIImage *v15;

  v2 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *(_QWORD *)(a1 + 16), **(_QWORD **)(a1 + 72) * *(int *)(a1 + 8));
  v3 = *(_DWORD *)(a1 + 4);
  v4 = __OFSUB__(v3, 1);
  v5 = v3 - 1;
  if (v5 < 0 != v4 || *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v5) != 1)
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
  else
    DeviceRGB = CGColorSpaceCreateDeviceGray();
  v7 = DeviceRGB;
  v8 = CGDataProviderCreateWithCFData((CFDataRef)v2);
  v9 = *(_DWORD *)(a1 + 4);
  v10 = *(size_t **)(a1 + 72);
  v4 = __OFSUB__(v9, 1);
  v11 = v9 - 1;
  if (v11 < 0 != v4)
    v12 = 0;
  else
    v12 = 8 * v10[v11];
  if ((*(_DWORD *)a1 & 0xFF8) == 0x18)
    v13 = 3;
  else
    v13 = 0;
  v14 = CGImageCreate(*(int *)(a1 + 12), *(int *)(a1 + 8), (0x442211088uLL >> (4 * (*(_DWORD *)a1 & 7u))) & 0x78, v12, *v10, v7, v13, v8, 0, 0, kCGRenderingIntentDefault);
  v15 = +[UIImage imageWithCGImage:](UIImage, "imageWithCGImage:", v14);
  CGImageRelease(v14);
  CGDataProviderRelease(v8);
  CGColorSpaceRelease(v7);
  return v15;
}

void sub_1002AB7E8(void *a1, uint64_t a2, int a3)
{
  CGColorSpace *ColorSpace;
  size_t Width;
  size_t Height;
  CGColorSpaceModel Model;
  _BOOL4 v12;
  uint32_t v13;
  CGContext *v14;
  CGImage *v15;
  __int128 v16;
  __int128 v17;
  CGRect v18;

  ColorSpace = CGImageGetColorSpace((CGImageRef)objc_msgSend(a1, "CGImage"));
  Width = CGImageGetWidth((CGImageRef)objc_msgSend(a1, "CGImage"));
  Height = CGImageGetHeight((CGImageRef)objc_msgSend(a1, "CGImage"));
  Model = CGColorSpaceGetModel(ColorSpace);
  v12 = *(int *)(a2 + 4) < 3 && *(_DWORD *)(a2 + 8) == (_DWORD)Height && *(_DWORD *)(a2 + 12) == (_DWORD)Width;
  if (Model == kCGColorSpaceModelMonochrome)
  {
    if (v12 && (*(_WORD *)a2 & 0xFFF) == 0 && *(_QWORD *)(a2 + 16))
    {
      if (!a3)
      {
LABEL_23:
        v13 = 0;
        goto LABEL_24;
      }
    }
    else
    {
      *(_QWORD *)&v16 = __PAIR64__(Width, Height);
      sub_100255F30((char *)a2, 2, (uint64_t *)&v16, 0);
      if (!a3)
        goto LABEL_23;
    }
    v16 = 0u;
    v17 = 0u;
    sub_10021956C(a2, (uint64_t)&v16);
    goto LABEL_23;
  }
  if (!v12 || (*(_DWORD *)a2 & 0xFFF) != 0x18 || !*(_QWORD *)(a2 + 16))
  {
    *(_QWORD *)&v16 = __PAIR64__(Width, Height);
    sub_100255F30((char *)a2, 2, (uint64_t *)&v16, 24);
    if (a3)
      goto LABEL_15;
LABEL_17:
    v13 = 5;
    goto LABEL_24;
  }
  if (!a3)
    goto LABEL_17;
LABEL_15:
  v16 = 0u;
  v17 = 0u;
  sub_10021956C(a2, (uint64_t)&v16);
  v13 = 1;
LABEL_24:
  v14 = CGBitmapContextCreate(*(void **)(a2 + 16), *(int *)(a2 + 12), *(int *)(a2 + 8), 8uLL, **(_QWORD **)(a2 + 72), ColorSpace, v13);
  v15 = (CGImage *)objc_msgSend(a1, "CGImage");
  v18.origin.x = 0.0;
  v18.origin.y = 0.0;
  v18.size.width = (double)Width;
  v18.size.height = (double)Height;
  CGContextDrawImage(v14, v18, v15);
  CGContextRelease(v14);
}

uint64_t sub_1002AB9B4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  _QWORD v27[2];
  _BYTE v28[8];
  int v29;

  sub_100298C2C(v28, &off_100450160);
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_OWORD *)(v6 + 16);
    v20 = *(_OWORD *)v6;
    v21 = v7;
    v22 = *(_OWORD *)(v6 + 32);
    v8 = *(_QWORD *)(v6 + 56);
    v23 = *(_QWORD *)(v6 + 48);
    v24 = v8;
    v25 = (char *)&v20 + 8;
    v26 = v27;
    v27[0] = 0;
    v27[1] = 0;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    if (*(int *)(v6 + 4) > 2)
    {
      DWORD1(v20) = 0;
      sub_100256B48((uint64_t)&v20, v6);
    }
    else
    {
      v11 = *(_QWORD **)(v6 + 72);
      v12 = v26;
      *(_QWORD *)v26 = *v11;
      v12[1] = v11[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v20);
  }
  v13 = sub_1002ABB70(a1, (unsigned int *)&v20, a3, 0);
  if (v24)
  {
    v14 = (unsigned int *)(v24 + 20);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      sub_100256C90((uint64_t)&v20);
  }
  v24 = 0;
  v21 = 0u;
  v22 = 0u;
  if (SDWORD1(v20) >= 1)
  {
    v17 = 0;
    v18 = v25;
    do
      *(_DWORD *)&v18[4 * v17++] = 0;
    while (v17 < SDWORD1(v20));
  }
  if (v26 != v27)
    j__free(v26);
  if (v29)
    sub_1002989D0(v28);
  return v13;
}

void sub_1002ABB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100006BE4((uint64_t)&a9);
  sub_1001D40CC(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_1002ABB5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_1002ABB70(uint64_t a1, unsigned int *a2, _QWORD *a3, int a4)
{
  unsigned int *v6;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  int v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[4];
  char *v30;
  void *v31;
  _QWORD v32[2];

  v6 = a2;
  LODWORD(v29[0]) = 1124007936;
  memset((char *)v29 + 4, 0, 48);
  v29[3] = 0u;
  v30 = (char *)v29 + 8;
  v31 = v32;
  v32[0] = 0;
  v32[1] = 0;
  v8 = (*a2 >> 3) & 0x1FF;
  if (v8 > 3 || v8 == 1)
  {
    v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(&v24, 71), "image.channels() == 1 || image.channels() == 3 || image.channels() == 4", 71);
    sub_100294B74(-215, &v24, "imwrite_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/loadsave.cpp", 673);
  }
  sub_1002ABF90(&v27, *(const char **)a1, *(_QWORD *)(a1 + 8));
  if (!v28)
  {
    v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(&v24, 51), "could not find a writer for the specified extension", 51);
    sub_100294B74(-2, &v24, "imwrite_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/loadsave.cpp", 677);
  }
  if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 16))(v28, *v6 & 7) & 1) == 0)
  {
    if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 16))(v28, 0) & 1) == 0)
    {
      v24 = 0;
      v25 = 0;
      qmemcpy((void *)sub_10029430C(&v24, 29), "encoder->isFormatSupported(0)", 29);
      sub_100294B74(-215, &v24, "imwrite_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/loadsave.cpp", 680);
    }
    LODWORD(v24) = 33619968;
    v25 = (unsigned int *)v29;
    v26 = 0;
    sub_1002044A8(v6, (uint64_t)&v24, 0, 1.0, 0.0);
    v6 = (unsigned int *)v29;
  }
  if (a4)
  {
    v25 = v6;
    v26 = 0;
    LODWORD(v24) = 16842752;
    v21 = 33619968;
    v22 = v29;
    v23 = 0;
    sub_10021A1A4((uint64_t)&v24, (uint64_t)&v21, 0);
    v6 = (unsigned int *)v29;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 24))(v28, a1);
  if (a3[1] - *a3 >= 0x194uLL)
  {
    v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(&v24, 23), "params.size() <= (50)*2", 23);
    sub_100294B74(-215, &v24, "imwrite_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/loadsave.cpp", 692);
  }
  v10 = (*(uint64_t (**)(uint64_t, unsigned int *, _QWORD *))(*(_QWORD *)v28 + 40))(v28, v6, a3);
  v11 = v27;
  if (v27)
  {
    v12 = (unsigned int *)(v27 + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  if (*((_QWORD *)&v29[3] + 1))
  {
    v15 = (unsigned int *)(*((_QWORD *)&v29[3] + 1) + 20);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      sub_100256C90((uint64_t)v29);
  }
  *((_QWORD *)&v29[3] + 1) = 0;
  memset(&v29[1], 0, 32);
  if (SDWORD1(v29[0]) >= 1)
  {
    v18 = 0;
    v19 = v30;
    do
      *(_DWORD *)&v19[4 * v18++] = 0;
    while (v18 < SDWORD1(v29[0]));
  }
  if (v31 != v32)
    j__free(v31);
  return v10;
}

void sub_1002ABED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, unsigned int *);
  v11 = va_arg(va2, _QWORD);
  sub_10029434C((uint64_t *)va);
  sub_1002AC278((unsigned int **)va1);
  sub_100006BE4((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1002ABF90(_QWORD *a1, const char *a2, unint64_t a3)
{
  const char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __darwin_ct_rune_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  char *v15;
  char *v16;
  __uint32_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __darwin_ct_rune_t v21;
  __darwin_ct_rune_t v23;
  uint64_t v24;
  __darwin_ct_rune_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __darwin_ct_rune_t v30;
  uint64_t v32[2];

  if (a3 <= 1)
    goto LABEL_48;
  v4 = "";
  v5 = a2 ? (char *)a2 : "";
  v6 = strrchr(v5, 46);
  if (!v6)
    goto LABEL_48;
  v7 = 0;
  v8 = v6 + 1;
  do
  {
    v9 = v8[v7];
    if (v9 < 0)
    {
      if (!__maskrune(v9, 0x500uLL))
        break;
    }
    else if ((_DefaultRuneLocale.__runetype[v9] & 0x500) == 0)
    {
      break;
    }
    ++v7;
  }
  while (v7 != 128);
  v10 = qword_100498C08;
  if (*(_QWORD *)algn_100498C10 == qword_100498C08)
  {
LABEL_48:
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    v11 = 0;
    v12 = v7;
    if ((_DWORD)v7)
    {
      while (1)
      {
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v10 + 16 * v11 + 8) + 48))(v32);
        v13 = v4;
        v14 = v32[0] ? (char *)v32[0] : (char *)v4;
        v15 = strchr(v14, 40);
        if (v15)
        {
          v16 = v15 + 1;
LABEL_22:
          v18 = strchr(v16, 46);
          if (v18)
            break;
        }
        sub_10029434C(v32);
        ++v11;
        v10 = qword_100498C08;
        v4 = v13;
        if (v11 >= (*(_QWORD *)algn_100498C10 - qword_100498C08) >> 4)
          goto LABEL_48;
      }
      v19 = 0;
      v20 = v18 + 1;
      while (1)
      {
        v21 = v20[v19];
        if (!(v21 < 0 ? __maskrune(v21, 0x500uLL) : _DefaultRuneLocale.__runetype[v21] & 0x500))
          break;
        v23 = __tolower(v8[v19]);
        if (v23 != __tolower(v20[v19]))
          break;
        if (v12 == ++v19)
        {
          v24 = v12;
          goto LABEL_32;
        }
      }
      v24 = v19;
      if ((_DWORD)v12 != (_DWORD)v19)
      {
LABEL_21:
        v16 = &v20[v24 + 1];
        goto LABEL_22;
      }
LABEL_32:
      v25 = v20[v12];
      if (v25 < 0)
        v17 = __maskrune(v25, 0x500uLL);
      else
        v17 = _DefaultRuneLocale.__runetype[v25] & 0x500;
      if (v17)
        goto LABEL_21;
    }
    else
    {
      while (1)
      {
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v10 + 16 * v11 + 8) + 48))(v32);
        v26 = v32[0] ? (char *)v32[0] : "";
        v27 = strchr(v26, 40);
        if (v27)
        {
          v28 = strchr(v27 + 1, 46);
          if (v28)
            break;
        }
LABEL_47:
        sub_10029434C(v32);
        ++v11;
        v10 = qword_100498C08;
        if (v11 >= (*(_QWORD *)algn_100498C10 - qword_100498C08) >> 4)
          goto LABEL_48;
      }
      v29 = v28;
      while (1)
      {
        v30 = v29[1];
        if (!(v30 < 0 ? __maskrune(v30, 0x500uLL) : _DefaultRuneLocale.__runetype[v30] & 0x500))
          break;
        v29 = strchr(v29 + 2, 46);
        if (!v29)
          goto LABEL_47;
      }
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(qword_100498C08 + 16 * v11 + 8) + 56))(*(_QWORD *)(qword_100498C08 + 16 * v11 + 8));
    sub_10029434C(v32);
  }
}

void sub_1002AC244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

unsigned int **sub_1002AC278(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002AC2CC(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002AC320(_OWORD *a1)
{
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  operator new();
}

void sub_1002AD160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _QWORD *v12;

  sub_1002AC278(&a11);
  sub_1002AD95C(&a9);
  sub_1002AD9B0(v12);
  sub_1002ADA40(v11);
  _Unwind_Resume(a1);
}

void sub_1002AD18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _QWORD *v12;

  sub_1002AC2CC(&a11);
  sub_1002AD908(&a9);
  sub_1002AD9B0(v12);
  sub_1002ADA40(v11);
  _Unwind_Resume(a1);
}

void sub_1002AD1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _QWORD *v12;

  sub_1002AC278(&a11);
  sub_1002AD8B4(&a9);
  sub_1002AD9B0(v12);
  sub_1002ADA40(v11);
  _Unwind_Resume(a1);
}

void sub_1002AD1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _QWORD *v12;

  sub_1002AC2CC(&a11);
  sub_1002AD860(&a9);
  sub_1002AD9B0(v12);
  sub_1002ADA40(v11);
  _Unwind_Resume(a1);
}

void sub_1002AD210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _QWORD *v12;

  sub_1002AC278(&a11);
  sub_1002AD80C(&a9);
  sub_1002AD9B0(v12);
  sub_1002ADA40(v11);
  _Unwind_Resume(a1);
}

void sub_1002AD23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _QWORD *v12;

  sub_1002AC2CC(&a11);
  sub_1002AD7B8(&a9);
  sub_1002AD9B0(v12);
  sub_1002ADA40(v11);
  _Unwind_Resume(a1);
}

void sub_1002AD268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _QWORD *v12;

  sub_1002AC278(&a11);
  sub_1002AD764(&a9);
  sub_1002AD9B0(v12);
  sub_1002ADA40(v11);
  _Unwind_Resume(a1);
}

void sub_1002AD294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _QWORD *v12;

  sub_1002AC2CC(&a11);
  sub_1002AD710(&a9);
  sub_1002AD9B0(v12);
  sub_1002ADA40(v11);
  _Unwind_Resume(a1);
}

void sub_1002AD2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _QWORD *v12;

  sub_1002AC278(&a11);
  sub_1002AD6BC(&a9);
  sub_1002AD9B0(v12);
  sub_1002ADA40(v11);
  _Unwind_Resume(a1);
}

void sub_1002AD2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _QWORD *v12;

  sub_1002AC2CC(&a11);
  sub_1002AD668(&a9);
  sub_1002AD9B0(v12);
  sub_1002ADA40(v11);
  _Unwind_Resume(a1);
}

void sub_1002AD318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _QWORD *v12;

  sub_1002AC278(&a11);
  sub_1002AD614(&a9);
  sub_1002AD9B0(v12);
  sub_1002ADA40(v11);
  _Unwind_Resume(a1);
}

void sub_1002AD344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _QWORD *v12;

  sub_1002AC2CC(&a11);
  sub_1002AD5C0(&a9);
  sub_1002AD9B0(v12);
  sub_1002ADA40(v11);
  _Unwind_Resume(a1);
}

void sub_1002AD370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _QWORD *v12;

  sub_1002AC278(&a11);
  sub_1002AD56C(&a9);
  sub_1002AD9B0(v12);
  sub_1002ADA40(v11);
  _Unwind_Resume(a1);
}

void sub_1002AD39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _QWORD *v12;

  sub_1002AC2CC(&a11);
  sub_1002AD518(&a9);
  sub_1002AD9B0(v12);
  sub_1002ADA40(v11);
  _Unwind_Resume(a1);
}

void sub_1002AD3C8()
{
  operator delete();
}

void sub_1002AD4C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  sub_1002AD9B0(v2);
  sub_1002ADA40(v1);
  _Unwind_Resume(a1);
}

unsigned int **sub_1002AD518(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002AD56C(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002AD5C0(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002AD614(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002AD668(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002AD6BC(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002AD710(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002AD764(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002AD7B8(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002AD80C(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002AD860(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002AD8B4(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002AD908(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002AD95C(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

_QWORD *sub_1002AD9B0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (unsigned int *)*(v3 - 2);
        v3 -= 2;
        v5 = v6;
        if (v6)
        {
          v7 = v5 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
        *v3 = 0;
        v3[1] = 0;
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_1002ADA40(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (unsigned int *)*(v3 - 2);
        v3 -= 2;
        v5 = v6;
        if (v6)
        {
          v7 = v5 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
        *v3 = 0;
        v3[1] = 0;
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_1002ADAD0(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  char *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_100008F3C();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_100008FF8();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  v13 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v11 - 1) = v16;
      v11 -= 16;
      v17 = v16;
      if ((_QWORD)v16)
      {
        v18 = (unsigned int *)(v17 + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
    }
    while (v15 != v14);
    v20 = *a1;
    v15 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    if (v15 != v20)
    {
      do
      {
        v22 = (unsigned int *)*((_QWORD *)v15 - 2);
        v15 -= 16;
        v21 = v22;
        if (v22)
        {
          v23 = v21 + 2;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
        }
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v20);
      v15 = v20;
    }
  }
  if (v15)
    operator delete(v15);
  return v12;
}

char *sub_1002ADC20(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  char *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_100008F3C();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_100008FF8();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  v13 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v11 - 1) = v16;
      v11 -= 16;
      v17 = v16;
      if ((_QWORD)v16)
      {
        v18 = (unsigned int *)(v17 + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
    }
    while (v15 != v14);
    v20 = *a1;
    v15 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    if (v15 != v20)
    {
      do
      {
        v22 = (unsigned int *)*((_QWORD *)v15 - 2);
        v15 -= 16;
        v21 = v22;
        if (v22)
        {
          v23 = v21 + 2;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
        }
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v20);
      v15 = v20;
    }
  }
  if (v15)
    operator delete(v15);
  return v12;
}

_QWORD *sub_1002ADD70(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = (unsigned int *)*(v3 - 2);
        v3 -= 2;
        v5 = v6;
        if (v6)
        {
          v7 = v5 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
        *v3 = 0;
        v3[1] = 0;
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v10 = (_QWORD *)*a1;
  if (*a1)
  {
    v11 = (_QWORD *)a1[1];
    v12 = (_QWORD *)*a1;
    if (v11 != v10)
    {
      do
      {
        v14 = (unsigned int *)*(v11 - 2);
        v11 -= 2;
        v13 = v14;
        if (v14)
        {
          v15 = v13 + 2;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
            (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        *v11 = 0;
        v11[1] = 0;
      }
      while (v11 != v10);
      v12 = (_QWORD *)*a1;
    }
    a1[1] = v10;
    operator delete(v12);
  }
  return a1;
}

void sub_1002ADE68()
{
  sub_1002AC320(&xmmword_100498BF0);
}

uint64_t sub_1002ADEA4(FILE *a1, int a2, int a3, int *a4)
{
  const char *v8;
  float v9;

  if (a4)
  {
    v8 = (const char *)(a4 + 1);
    if ((*a4 & 1) == 0)
      v8 = "RGBE";
    if (fprintf(a1, "#?%s\n", v8) < 0)
      goto LABEL_15;
    v9 = *(float *)a4;
    if ((*a4 & 2) != 0)
    {
      if (fprintf(a1, "GAMMA=%g\n", *((float *)a4 + 5)) < 0)
        goto LABEL_15;
      v9 = *(float *)a4;
    }
    if ((LOBYTE(v9) & 4) != 0 && fprintf(a1, "EXPOSURE=%g\n", *((float *)a4 + 6)) < 0)
LABEL_15:
      sub_1002ADFD8(1, 0);
  }
  else if (fprintf(a1, "#?%s\n", "RGBE") < 0)
  {
    goto LABEL_15;
  }
  if (fprintf(a1, "FORMAT=32-bit_rle_rgbe\n\n") < 0 || fprintf(a1, "-Y %d +X %d\n", a3, a2) < 0)
    goto LABEL_15;
  return 0;
}

uint64_t sub_1002ADFC0()
{
  return 0xFFFFFFFFLL;
}

void sub_1002ADFD8(int a1, const void *a2)
{
  size_t v3;
  size_t v4;
  void *v5;
  size_t v6;
  size_t v7;
  size_t v8;
  void *v9;
  size_t v10;
  void *v11;
  size_t v12;
  void *__src;
  size_t __n;
  void *__dst;
  uint64_t v16;

  if (a1 != 2)
  {
    if (a1 != 1)
    {
      if (!a1)
      {
        __dst = 0;
        v16 = 0;
        qmemcpy((void *)sub_10029430C(&__dst, 15), "RGBE read error", 15);
        sub_100294B74(-2, (uint64_t *)&__dst, "rgbe_error", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/rgbe.cpp", 88);
      }
      __src = 0;
      __n = 0;
      qmemcpy((void *)sub_10029430C(&__src, 13), "RGBE error: \n", 13);
      v11 = 0;
      v12 = 0;
      if (a2 && (v7 = strlen((const char *)a2)) != 0)
      {
        v8 = v7;
        v9 = (void *)sub_10029430C(&v11, v7);
        memcpy(v9, a2, v8);
        v10 = v12;
      }
      else
      {
        v10 = 0;
      }
      __dst = 0;
      v16 = 0;
      sub_10029430C(&__dst, v10 + __n);
      if (__n)
        memcpy(__dst, __src, __n);
      if (v12)
        memcpy((char *)__dst + __n, v11, v12);
      sub_100294B74(-2, (uint64_t *)&__dst, "rgbe_error", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/rgbe.cpp", 100);
    }
    __dst = 0;
    v16 = 0;
    *(_OWORD *)sub_10029430C(&__dst, 16) = *(_OWORD *)"RGBE write error";
    sub_100294B74(-2, (uint64_t *)&__dst, "rgbe_error", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/rgbe.cpp", 91);
  }
  __src = 0;
  __n = 0;
  qmemcpy((void *)sub_10029430C(&__src, 22), "RGBE bad file format: ", 22);
  v11 = 0;
  v12 = 0;
  if (a2 && (v3 = strlen((const char *)a2)) != 0)
  {
    v4 = v3;
    v5 = (void *)sub_10029430C(&v11, v3);
    memcpy(v5, a2, v4);
    v6 = v12;
  }
  else
  {
    v6 = 0;
  }
  __dst = 0;
  v16 = 0;
  sub_10029430C(&__dst, v6 + __n);
  if (__n)
    memcpy(__dst, __src, __n);
  if (v12)
    memcpy((char *)__dst + __n, v11, v12);
  sub_100294B74(-2, (uint64_t *)&__dst, "rgbe_error", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/rgbe.cpp", 95);
}

void sub_1002AE244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_10029434C(&a13);
  sub_10029434C(&a9);
  sub_10029434C(&a11);
  JUMPOUT(0x1002AE25CLL);
}

void sub_1002AE26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002AE348(FILE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v12;
  uint64_t v13;
  __darwin_ct_rune_t v14;
  char i;
  int v16;
  BOOL v21;
  const char *v22;
  uint64_t v24;
  int v25;
  char v26[8];
  uint64_t v27;
  uint64_t v28;

  if (a4)
  {
    *(_DWORD *)a4 = 0;
    *(_BYTE *)(a4 + 4) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(a4 + 20) = _D0;
  }
  v25 = 0;
  v12 = fgets(v26, 128, a1);
  if (!v12)
    goto LABEL_54;
  v24 = a3;
  if (a4 && v26[0] == 35 && v26[1] == 63)
  {
    v13 = 0;
    *(_DWORD *)a4 |= 1u;
    do
    {
      v14 = v26[v13 + 2];
      if (!v26[v13 + 2])
        break;
      if (v14 < 0)
      {
        if (__maskrune(v14, 0x4000uLL))
          break;
      }
      else if ((_DefaultRuneLocale.__runetype[v14] & 0x4000) != 0)
      {
        break;
      }
      *(_BYTE *)(a4 + 4 + v13) = v26[v13 + 2];
      ++v13;
    }
    while (v13 != 15);
    *(_BYTE *)(a4 + v13 + 4) = 0;
    goto LABEL_16;
  }
  if (a4)
  {
LABEL_16:
    i = 0;
    while (1)
    {
      while (1)
      {
        do
        {
          if (!fgets(v26, 128, a1))
            goto LABEL_47;
        }
        while (v26[0] == 35);
        if (v26[0] == 10)
          goto LABEL_48;
        _ZF = *(_QWORD *)v26 == 0x333D54414D524F46 && v27 == 0x6C725F7469622D32;
        if (!_ZF || v28 != 0xA656267725F65)
          break;
        i = 1;
      }
      if (sscanf(v26, "GAMMA=%g", &v25) == 1)
        break;
      if (sscanf(v26, "EXPOSURE=%g", &v25) == 1)
      {
        *(_DWORD *)(a4 + 24) = v25;
        v16 = 4;
LABEL_18:
        *(_DWORD *)a4 |= v16;
      }
    }
    *(_DWORD *)(a4 + 20) = v25;
    v16 = 2;
    goto LABEL_18;
  }
  for (i = 0; ; i |= v21)
  {
    do
    {
      if (!fgets(v26, 128, a1))
      {
LABEL_47:
        LODWORD(v12) = 0;
        v22 = 0;
        goto LABEL_57;
      }
    }
    while (v26[0] == 35);
    if (v26[0] == 10)
      break;
    v21 = *(_QWORD *)v26 == 0x333D54414D524F46 && v27 == 0x6C725F7469622D32 && v28 == 0xA656267725F65;
  }
LABEL_48:
  if (*(unsigned __int16 *)v26 != 10)
  {
    v22 = "missing blank line after FORMAT specifier";
    goto LABEL_56;
  }
  if ((i & 1) == 0)
  {
    v22 = "missing FORMAT specifier";
LABEL_56:
    LODWORD(v12) = 2;
LABEL_57:
    sub_1002ADFD8((int)v12, v22);
  }
  v12 = fgets(v26, 128, a1);
  if (!v12)
  {
LABEL_54:
    v22 = 0;
    goto LABEL_57;
  }
  if (sscanf(v26, "-Y %d +X %d", v24, a2) <= 1)
  {
    v22 = "missing image size specifier";
    goto LABEL_56;
  }
  return 0;
}

uint64_t sub_1002AE68C(FILE *a1, uint64_t a2, int a3)
{
  float *v4;
  int v5;
  float v6;
  int v7;
  int v8;
  int v9;
  char v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v16;
  _BYTE __ptr[4];

  v4 = (float *)(a2 + 8);
  v5 = a3 + 1;
  while (--v5 >= 1)
  {
    v11 = *(v4 - 1);
    v12 = *v4;
    v13 = *(v4 - 2);
    if (v11 <= *v4)
      v14 = *v4;
    else
      v14 = *(v4 - 1);
    if (v14 < v13)
      v14 = *(v4 - 2);
    if (v14 >= 1.0e-32)
    {
      v6 = frexpf(v14, &v16) * 256.0 / v14;
      v7 = (int)(float)(v12 * v6);
      v8 = (int)(float)(v11 * v6);
      v9 = (int)(float)(v13 * v6);
      v10 = v16 ^ 0x80;
    }
    else
    {
      v10 = 0;
      LOBYTE(v9) = 0;
      LOBYTE(v8) = 0;
      LOBYTE(v7) = 0;
    }
    v4 += 3;
    __ptr[3] = v10;
    __ptr[2] = v9;
    __ptr[1] = v8;
    __ptr[0] = v7;
    if (!fwrite(__ptr, 4uLL, 1uLL, a1))
      sub_1002ADFD8(1, 0);
  }
  return 0;
}

uint64_t sub_1002AE7AC(FILE *a1, float *a2, unsigned int a3, int a4)
{
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  float v15;
  int v16;
  int v17;
  int v18;
  char v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  int v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  int v30;
  unint64_t v31;
  int v32;
  int v34;
  unsigned int v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  __int16 __ptr;
  char v43;
  char v44;
  char v45;
  char v46;

  if (a3 - 0x8000 <= 0xFFFF8007)
    return sub_1002AE68C(a1, (uint64_t)a2, a4 * a3);
  v8 = (char *)malloc_type_malloc(4 * a3, 0x2FC5A943uLL);
  if (!v8)
    return sub_1002AE68C(a1, (uint64_t)a2, a4 * a3);
  v9 = v8;
  if (a4 >= 1)
  {
    v10 = 2 * a3;
    v11 = &v8[3 * a3];
    v12 = &v8[a3];
    v13 = a3 >> 8;
    do
    {
      __ptr = 514;
      v43 = v13;
      v44 = a3;
      if (!fwrite(&__ptr, 4uLL, 1uLL, a1))
      {
        free(v9);
        sub_1002ADFD8(1, 0);
      }
      v35 = v13;
      v14 = 0;
      v34 = a4 - 1;
      do
      {
        v20 = a2[1];
        v21 = a2[2];
        v22 = *a2;
        if (v20 <= v21)
          v23 = a2[2];
        else
          v23 = a2[1];
        if (v23 < v22)
          v23 = *a2;
        if (v23 >= 1.0e-32)
        {
          v15 = frexpf(v23, &v41) * 256.0 / v23;
          v16 = (int)(float)(v21 * v15);
          v17 = (int)(float)(v20 * v15);
          v18 = (int)(float)(v22 * v15);
          v19 = v41 ^ 0x80;
        }
        else
        {
          v19 = 0;
          LOBYTE(v18) = 0;
          LOBYTE(v17) = 0;
          LOBYTE(v16) = 0;
        }
        v44 = v19;
        v43 = v18;
        HIBYTE(__ptr) = v17;
        LOBYTE(__ptr) = v16;
        v9[v14] = v16;
        v12[v14] = HIBYTE(__ptr);
        v9[(v10 + v14)] = v43;
        v11[v14] = v44;
        a2 += 3;
        ++v14;
      }
      while (a3 != v14);
      v36 = v12;
      v37 = v11;
      v38 = v10;
      v39 = a4;
      v24 = 0;
      do
      {
        v25 = 0;
        v40 = v24;
        v26 = &v9[v24 * a3];
        do
        {
          LODWORD(v27) = 0;
          LODWORD(v28) = v25;
          do
          {
            v30 = v27;
            v28 = (int)v28 + (uint64_t)(int)v27;
            if ((int)v28 + 1 >= (int)a3)
            {
              LODWORD(v27) = 1;
            }
            else
            {
              v31 = 1;
              while (v26[v28] == v26[(int)v28 + (int)v31])
              {
                v27 = v31 + 1;
                if (v31 <= 0x7D)
                {
                  ++v31;
                  if ((uint64_t)(v27 + v28) < a3)
                    continue;
                }
                goto LABEL_21;
              }
              LODWORD(v27) = v31;
            }
LABEL_21:
            ;
          }
          while ((int)v28 < (int)a3 && v27 < 4);
          if (v30 >= 2 && v30 == (_DWORD)v28 - v25)
          {
            v45 = v30 ^ 0x80;
            v46 = v26[v25];
            v25 = v28;
            if (!fwrite(&v45, 2uLL, 1uLL, a1))
              goto LABEL_50;
          }
          else if ((int)v28 > v25)
          {
            while (1)
            {
              v32 = (int)v28 - v25 >= 128 ? 128 : v28 - v25;
              v45 = v32;
              if (!fwrite(&v45, 1uLL, 1uLL, a1) || !fwrite(&v26[v25], v32, 1uLL, a1))
                break;
              v25 += v32;
              if (v25 >= (int)v28)
                goto LABEL_43;
            }
LABEL_50:
            sub_1002ADFD8(1, 0);
          }
LABEL_43:
          if (v27 >= 4)
          {
            v45 = v27 ^ 0x80;
            v46 = v26[v28];
            if (!fwrite(&v45, 2uLL, 1uLL, a1))
              goto LABEL_50;
            v25 += v27;
          }
        }
        while (v25 < (int)a3);
        v24 = v40 + 1;
      }
      while (v40 != 3);
      a4 = v34;
      v13 = v35;
      v11 = v37;
      v10 = v38;
      v12 = v36;
    }
    while (v39 >= 2);
  }
  free(v9);
  return 0;
}

uint64_t sub_1002AEB6C(FILE *__stream, float *a2, unsigned int a3, int a4)
{
  int v4;
  unsigned int v8;
  size_t v9;
  long double v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  int8x8_t *v14;
  size_t v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  int8x8_t *v19;
  int8x8_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t *v25;
  int v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  int8x8_t v31;
  int8x8_t *v32;
  uint64_t v33;
  int8x8_t *v34;
  int8x8_t *v35;
  int8x8_t *v36;
  int8x8_t *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  float v41;
  float v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  float v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int8x8_t *v53;
  size_t v54;
  uint64_t v55;
  const char *v56;
  int8x8_t v57;
  int8x8_t *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int8x8_t *v65;
  size_t v66;
  uint64_t v67;
  const char *v68;
  int8x8_t v69;
  int8x8_t *v70;
  uint64_t v71;
  int8x8_t *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int8x8_t *v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  int8x8_t v83;
  int8x8_t *v84;
  uint64_t v85;
  const char *v87;
  float v88;
  float v89;
  float v90;
  unsigned int v91;
  float v92;
  int v93;
  float *v94;
  long double v95;
  float v96;
  unsigned int v97;
  unsigned int v98;
  size_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unsigned __int8 v105;
  __int8 v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  char v109;
  unsigned __int8 v110;
  _BYTE __ptr[3];
  unsigned __int8 v112;
  _BYTE v113[3];
  unsigned __int8 v114;

  v4 = a4;
  if (a3 - 0x8000 >= 0xFFFF8008)
  {
    if (a4 < 1)
    {
      v14 = 0;
      goto LABEL_119;
    }
    v14 = 0;
    v15 = 4 * a3;
    v103 = 2 * a3;
    v104 = a3;
    v101 = 3 * a3;
    v102 = 2 * a3;
    while (1)
    {
      if (!fread(&v107, 4uLL, 1uLL, __stream))
      {
LABEL_121:
        free(v14);
        LODWORD(v9) = 0;
LABEL_122:
        v87 = 0;
        goto LABEL_125;
      }
      v16 = v107;
      v17 = v108;
      v18 = v107 == 2 && v108 == 2;
      if (!v18 || v109 < 0)
      {
        if (v110)
        {
          v88 = ldexp(1.0, v110 - 136);
          v89 = (float)v16 * v88;
          v90 = v88 * (float)v17;
          LOBYTE(v91) = v109;
          v92 = v88 * (float)v91;
        }
        else
        {
          v92 = 0.0;
          v90 = 0.0;
          v89 = 0.0;
        }
        *a2 = v92;
        a2[1] = v90;
        a2[2] = v89;
        free(v14);
        v93 = v4 * a3;
        if (v93 >= 2)
        {
          v94 = a2 + 5;
          while (1)
          {
            v9 = fread(v113, 4uLL, 1uLL, __stream);
            if (!v9)
              break;
            if (v114)
            {
              v95 = ldexp(1.0, v114 - 136);
              v96 = v95;
              LOBYTE(v95) = v113[0];
              LOBYTE(v97) = v113[1];
              LOBYTE(v98) = v113[2];
              --v93;
              *(v94 - 2) = v96 * (float)v98;
              *(v94 - 1) = v96 * (float)v97;
              *v94 = v96 * (float)LODWORD(v95);
              v94 += 3;
              if (v93 <= 1)
                return 0;
            }
            else
            {
              --v93;
              *(v94 - 2) = 0.0;
              *(v94 - 1) = 0.0;
              *v94 = 0.0;
              v94 += 3;
              if (v93 <= 1)
                return 0;
            }
          }
          goto LABEL_122;
        }
        return 0;
      }
      if ((v110 | (v109 << 8)) != a3)
      {
        free(v14);
        v87 = "wrong scanline width";
LABEL_124:
        LODWORD(v9) = 2;
LABEL_125:
        sub_1002ADFD8(v9, v87);
      }
      if (!v14)
      {
        v14 = (int8x8_t *)malloc_type_malloc(v15, 0xE329509uLL);
        if (!v14)
        {
          v87 = "unable to allocate buffer space";
          LODWORD(v9) = 3;
          goto LABEL_125;
        }
      }
      v19 = (int8x8_t *)((char *)v14 + v104);
      v20 = v14;
      do
      {
        if (!fread(&v105, 2uLL, 1uLL, __stream))
          goto LABEL_121;
        v21 = v105;
        v22 = (char *)v19 - (char *)v20;
        v23 = v105 - 129;
        if (v105 < 0x81u)
        {
          if (!v105 || v22 < v105)
          {
LABEL_123:
            free(v14);
            v87 = "bad scanline data";
            goto LABEL_124;
          }
          v20->i8[0] = v106;
          v20 = (int8x8_t *)((char *)v20 + 1);
          if (v21 >= 2)
          {
            v27 = v21 - 1;
            if (!fread(v20, v27, 1uLL, __stream))
              goto LABEL_121;
            v20 = (int8x8_t *)((char *)v20 + v27);
          }
        }
        else
        {
          v24 = v105 - 128;
          if (v22 < v24)
            goto LABEL_123;
          if (v23 < 0xF || v20 < (int8x8_t *)&v107 && &v106 < (__int8 *)v20 + v23 + 1)
          {
            v25 = v20;
LABEL_31:
            v26 = v24 + 1;
            v20 = v25;
            do
            {
              v20->i8[0] = v106;
              v20 = (int8x8_t *)((char *)v20 + 1);
              --v26;
            }
            while (v26 > 1);
            continue;
          }
          v28 = v23 + 1;
          v29 = (v23 + 1) & 0x1FFFFFFF0;
          LODWORD(v24) = v24 - v29;
          v25 = (int8x8_t *)((char *)v20 + v29);
          v30 = &v106;
          v31 = vld1_dup_s8(v30);
          v32 = v20 + 1;
          v33 = v29;
          do
          {
            v32[-1] = v31;
            *v32 = v31;
            v32 += 2;
            v33 -= 16;
          }
          while (v33);
          v20 = (int8x8_t *)((char *)v20 + v29);
          if (v28 != v29)
            goto LABEL_31;
        }
      }
      while (v20 < v19);
      v34 = (int8x8_t *)((char *)v14 + v102);
      if (v20 < (int8x8_t *)&v14->i8[v102])
      {
        while (1)
        {
          if (!fread(&v105, 2uLL, 1uLL, __stream))
            goto LABEL_121;
          v48 = v105;
          v49 = (char *)v34 - (char *)v20;
          v50 = v105 - 128;
          if (v105 <= 0x80u)
          {
            if (!v105 || v49 < v105)
              goto LABEL_123;
            v20->i8[0] = v106;
            v53 = (int8x8_t *)((char *)v20 + 1);
            if (v48 < 2)
            {
              v35 = v53;
            }
            else
            {
              v54 = v48 - 1;
              if (!fread(v53, v54, 1uLL, __stream))
                goto LABEL_121;
              v35 = (int8x8_t *)((char *)v53 + v54);
            }
          }
          else
          {
            if (v49 < v50)
              goto LABEL_123;
            v51 = v105 - 129;
            if (v51 >= 0xF && (v20 >= (int8x8_t *)&v107 || &v106 >= (__int8 *)v20 + v51 + 1))
            {
              v55 = v51 + 1;
              LODWORD(v50) = v50 - (v55 & 0xFFFFFFF0);
              v35 = (int8x8_t *)((char *)v20 + (v55 & 0x1FFFFFFF0));
              v56 = &v106;
              v57 = vld1_dup_s8(v56);
              v58 = v20 + 1;
              v59 = v55 & 0x1FFFFFFF0;
              do
              {
                v58[-1] = v57;
                *v58 = v57;
                v58 += 2;
                v59 -= 16;
              }
              while (v59);
              if (v55 == (v55 & 0x1FFFFFFF0))
                goto LABEL_54;
            }
            else
            {
              v35 = v20;
            }
            v52 = v50 + 1;
            do
            {
              v35->i8[0] = v106;
              v35 = (int8x8_t *)((char *)v35 + 1);
              --v52;
            }
            while (v52 > 1);
          }
LABEL_54:
          v20 = v35;
          if (v35 >= v34)
            goto LABEL_45;
        }
      }
      v35 = v20;
LABEL_45:
      v36 = (int8x8_t *)((char *)v14 + v101);
      if (v35 < (int8x8_t *)&v14->i8[v101])
      {
        while (1)
        {
          if (!fread(&v105, 2uLL, 1uLL, __stream))
            goto LABEL_121;
          v60 = v105;
          v61 = (char *)v36 - (char *)v35;
          v62 = v105 - 128;
          if (v105 <= 0x80u)
          {
            if (!v105 || v61 < v105)
              goto LABEL_123;
            v35->i8[0] = v106;
            v65 = (int8x8_t *)((char *)v35 + 1);
            if (v60 < 2)
            {
              v37 = v65;
            }
            else
            {
              v66 = v60 - 1;
              if (!fread(v65, v66, 1uLL, __stream))
                goto LABEL_121;
              v37 = (int8x8_t *)((char *)v65 + v66);
            }
          }
          else
          {
            if (v61 < v62)
              goto LABEL_123;
            v63 = v105 - 129;
            if (v63 >= 0xF && (v35 >= (int8x8_t *)&v107 || &v106 >= (__int8 *)v35 + v63 + 1))
            {
              v67 = v63 + 1;
              LODWORD(v62) = v62 - (v67 & 0xFFFFFFF0);
              v37 = (int8x8_t *)((char *)v35 + (v67 & 0x1FFFFFFF0));
              v68 = &v106;
              v69 = vld1_dup_s8(v68);
              v70 = v35 + 1;
              v71 = v67 & 0x1FFFFFFF0;
              do
              {
                v70[-1] = v69;
                *v70 = v69;
                v70 += 2;
                v71 -= 16;
              }
              while (v71);
              if (v67 == (v67 & 0x1FFFFFFF0))
                goto LABEL_75;
            }
            else
            {
              v37 = v35;
            }
            v64 = v62 + 1;
            do
            {
              v37->i8[0] = v106;
              v37 = (int8x8_t *)((char *)v37 + 1);
              --v64;
            }
            while (v64 > 1);
          }
LABEL_75:
          v35 = v37;
          if (v37 >= v36)
            goto LABEL_47;
        }
      }
      v37 = v35;
LABEL_47:
      v38 = (char *)v14 + v15;
      if (v37 < (int8x8_t *)&v14->i8[v15])
      {
        do
        {
          if (!fread(&v105, 2uLL, 1uLL, __stream))
            goto LABEL_121;
          v73 = v105;
          v74 = v38 - (char *)v37;
          v75 = v105 - 128;
          if (v105 <= 0x80u)
          {
            if (!v105 || v74 < v105)
              goto LABEL_123;
            v37->i8[0] = v106;
            v78 = (int8x8_t *)((char *)v37 + 1);
            if (v73 < 2)
            {
              v72 = v78;
            }
            else
            {
              v79 = v73 - 1;
              if (!fread(v78, v79, 1uLL, __stream))
                goto LABEL_121;
              v72 = (int8x8_t *)((char *)v78 + v79);
            }
          }
          else
          {
            if (v74 < v75)
              goto LABEL_123;
            v76 = v105 - 129;
            if (v76 >= 0xF && (v37 >= (int8x8_t *)&v107 || &v106 >= (__int8 *)v37 + v76 + 1))
            {
              v80 = v76 + 1;
              v81 = (v76 + 1) & 0x1FFFFFFF0;
              LODWORD(v75) = v75 - v81;
              v72 = (int8x8_t *)((char *)v37 + v81);
              v82 = &v106;
              v83 = vld1_dup_s8(v82);
              v84 = v37 + 1;
              v85 = v81;
              do
              {
                v84[-1] = v83;
                *v84 = v83;
                v84 += 2;
                v85 -= 16;
              }
              while (v85);
              if (v80 == v81)
                goto LABEL_96;
            }
            else
            {
              v72 = v37;
            }
            v77 = v75 + 1;
            do
            {
              v72->i8[0] = v106;
              v72 = (int8x8_t *)((char *)v72 + 1);
              --v77;
            }
            while (v77 > 1);
          }
LABEL_96:
          v37 = v72;
        }
        while (v72 < (int8x8_t *)v38);
      }
      v99 = v15;
      v100 = v4;
      v39 = 0;
      v40 = (char *)v14 + v104;
      do
      {
        v44 = v14->u8[v39];
        v107 = v14->u8[v39];
        v45 = v40[v39];
        v108 = v40[v39];
        v46 = v14->u8[(v103 + v39)];
        v109 = v14->i8[(v103 + v39)];
        v110 = v14->u8[v101 + v39];
        if (v110)
        {
          v47 = ldexp(1.0, v110 - 136);
          v43 = (float)v44 * v47;
          v42 = v47 * (float)v45;
          v41 = v47 * (float)v46;
        }
        else
        {
          v41 = 0.0;
          v42 = 0.0;
          v43 = 0.0;
        }
        *a2 = v41;
        a2[1] = v42;
        a2[2] = v43;
        a2 += 3;
        ++v39;
      }
      while (v104 != v39);
      v4 = v100 - 1;
      v15 = v99;
      if (v100 <= 1)
      {
LABEL_119:
        free(v14);
        return 0;
      }
    }
  }
  if ((int)(a4 * a3) >= 1)
  {
    v8 = a4 * a3 + 1;
    while (1)
    {
      v9 = fread(__ptr, 4uLL, 1uLL, __stream);
      if (!v9)
        break;
      if (v112)
      {
        v10 = ldexp(1.0, v112 - 136);
        v11 = v10;
        LOBYTE(v10) = __ptr[0];
        LOBYTE(v12) = __ptr[1];
        LOBYTE(v13) = __ptr[2];
        *a2 = v11 * (float)v13;
        a2[1] = v11 * (float)v12;
        a2[2] = v11 * (float)LODWORD(v10);
        --v8;
        a2 += 3;
        if (v8 <= 1)
          return 0;
      }
      else
      {
        *a2 = 0.0;
        a2[1] = 0.0;
        a2[2] = 0.0;
        --v8;
        a2 += 3;
        if (v8 <= 1)
          return 0;
      }
    }
    goto LABEL_122;
  }
  return 0;
}

uint64_t sub_1002AF38C(uint64_t result)
{
  uint64_t v1[2];

  if (result != (int)result)
  {
    v1[0] = 0;
    v1[1] = 0;
    qmemcpy((void *)sub_10029430C(v1, 22), "(size_t)valueInt == sz", 22);
    sub_100294B74(-215, v1, "validateToInt", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/utils.cpp", 48);
  }
  return result;
}

void sub_1002AF410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002AF428(uint64_t result, int a2, unint64_t a3, int a4, unint64_t a5, int a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  int32x4_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v26;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  unsigned __int128 v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint32x4_t v36;
  const char *v37;
  unsigned __int128 v38;
  uint32x4_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  const char *v42;
  unsigned __int128 v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  int8x16x4_t v48;

  v6 = HIDWORD(a5);
  if (HIDWORD(a5) && (int)a5 >= 1)
  {
    v7 = 2 * (a6 != 0);
    v8 = v7 ^ 2;
    v9 = -3 * (int)a5 + a2;
    if ((a5 & 0xF) != 0)
      v10 = a5 & 0xF;
    else
      v10 = 16;
    if (a5 >= 0x11uLL)
    {
      v12 = 0;
      v13 = 3 * a5;
      v14 = v13 + v8 - 2;
      v15 = v13 - 1;
      v16 = v13 + v7 - 2;
      v17 = a5 - v10;
      v18 = (uint16x8_t)vdupq_n_s16(0x74Cu);
      v19 = (uint16x8_t)vdupq_n_s16(0x2591u);
      v20 = (uint16x8_t)vdupq_n_s16(0x1323u);
      v21.i64[0] = 0x200000002000;
      v21.i64[1] = 0x200000002000;
      v22 = a3;
      do
      {
        v23 = 0;
        v24 = a3 + a5 + v12 * a4;
        v26 = v22 < result + v15 && result + 1 < v24;
        v28 = v22 < result + v16 && result + v7 < v24;
        v29 = result + v8 >= v24 || v22 >= result + v14;
        if (v29 && !v26 && !v28)
        {
          v30 = 0;
          v31 = result + 3 * v17;
          do
          {
            v32 = (const char *)(result + v7);
            v33 = (unsigned __int128)vld3q_s8(v32);
            v34 = vmovl_u8(*(uint8x8_t *)&v33);
            v35 = vmovl_high_u8((uint8x16_t)v33);
            v36 = vmull_high_u16(v35, v18);
            v37 = (const char *)(result + 1);
            v38 = (unsigned __int128)vld3q_s8(v37);
            v39 = vmull_high_u16(v34, v18);
            v40 = vmovl_high_u8((uint8x16_t)v38);
            v41 = vmovl_u8(*(uint8x8_t *)&v38);
            v42 = (const char *)(result + v8);
            v43 = (unsigned __int128)vld3q_s8(v42);
            v44 = vmovl_u8(*(uint8x8_t *)&v43);
            v45 = vmovl_high_u8((uint8x16_t)v43);
            v46 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)v18.i8), *(uint16x4_t *)v41.i8, *(uint16x4_t *)v19.i8), *(uint16x4_t *)v44.i8, *(uint16x4_t *)v20.i8), v21);
            v47 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v18.i8), *(uint16x4_t *)v40.i8, *(uint16x4_t *)v19.i8), *(uint16x4_t *)v45.i8, *(uint16x4_t *)v20.i8), v21);
            v48.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmlal_high_u16(v36, v40, v19), v45, v20), v21), 0xEuLL);
            v48.val[2] = (int8x16_t)vshrq_n_u32(v47, 0xEuLL);
            v48.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmlal_high_u16(v39, v41, v19), v44, v20), v21), 0xEuLL);
            v48.val[0] = (int8x16_t)vshrq_n_u32(v46, 0xEuLL);
            *(int8x16_t *)(v22 + v30) = vqtbl4q_s8(v48, (int8x16_t)xmmword_1003BC960);
            v30 += 16;
            result += 48;
          }
          while (v17 != v30);
          v23 = v17;
          result = v31;
        }
        LODWORD(v6) = v6 - 1;
        do
        {
          *(_BYTE *)(v22 + v23++) = (9617 * *(unsigned __int8 *)(result + 1)
                                   + 1868 * *(unsigned __int8 *)(result + v7)
                                   + 4899 * *(unsigned __int8 *)(result + v8)
                                   + 0x2000) >> 14;
          result += 3;
        }
        while (a5 != v23);
        result += v9;
        v22 += a4;
        ++v12;
      }
      while ((_DWORD)v6);
    }
    else
    {
      do
      {
        v11 = 0;
        LODWORD(v6) = v6 - 1;
        do
        {
          *(_BYTE *)(a3 + v11++) = (9617 * *(unsigned __int8 *)(result + 1)
                                  + 1868 * *(unsigned __int8 *)(result + v7)
                                  + 4899 * *(unsigned __int8 *)(result + v8)
                                  + 0x2000) >> 14;
          result += 3;
        }
        while (a5 != v11);
        result += v9;
        a3 += a4;
      }
      while ((_DWORD)v6);
    }
  }
  return result;
}

uint64_t sub_1002AF678(uint64_t result, int a2, uint64_t a3, int a4, unint64_t a5, int a6, int a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = HIDWORD(a5);
  if (HIDWORD(a5) && (int)a5 >= 1)
  {
    v8 = a2 - (int)a5 * a6;
    do
    {
      v9 = 0;
      LODWORD(v7) = v7 - 1;
      do
      {
        *(_WORD *)(a3 + v9) = (9617 * *(unsigned __int16 *)(result + 2)
                             + 1868 * *(unsigned __int16 *)(result + 4 * (a7 != 0))
                             + 4899 * *(unsigned __int16 *)(result + 2 * ((2 * (a7 != 0)) ^ 2u))
                             + 0x2000) >> 14;
        v9 += 2;
        result += 2 * a6;
      }
      while (2 * a5 != v9);
      result += 2 * v8;
      a3 += 2 * a4;
    }
    while ((_DWORD)v7);
  }
  return result;
}

uint64_t sub_1002AF710(uint64_t result, int a2, unint64_t a3, int a4, unint64_t a5, int a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint64_t v16;
  int32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v22;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  unsigned __int128 v29;
  uint16x8_t v30;
  uint16x8_t v31;
  const char *v32;
  unsigned __int128 v33;
  uint32x4_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  const char *v37;
  unsigned __int128 v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  int8x16x4_t v43;

  v6 = HIDWORD(a5);
  if (HIDWORD(a5) && (int)a5 >= 1)
  {
    v7 = 2 * (a6 != 0);
    v8 = v7 ^ 2;
    v9 = a2 - 4 * (int)a5;
    if ((a5 & 0xF) != 0)
      v10 = a5 & 0xF;
    else
      v10 = 16;
    if (a5 >= 0x11uLL)
    {
      v12 = 0;
      v13 = (uint16x8_t)vdupq_n_s16(0x74Cu);
      v14 = (uint16x8_t)vdupq_n_s16(0x2591u);
      v15 = (uint16x8_t)vdupq_n_s16(0x1323u);
      v16 = a5 - v10;
      v17.i64[0] = 0x200000002000;
      v17.i64[1] = 0x200000002000;
      v18 = a3;
      do
      {
        v19 = 0;
        v20 = a3 + a5 + v12 * a4;
        v22 = v18 < result + 4 * (unint64_t)a5 - 2 && result + 1 < v20;
        v24 = v18 < result + (v7 & 0xFFFFFFFC00000003 | (4 * a5)) - 3 && result + v7 < v20;
        v25 = result + v8 >= v20 || v18 >= result + (v8 & 0xFFFFFFFC00000003 | (4 * a5)) - 3;
        if (v25 && !v22 && !v24)
        {
          v26 = 0;
          v27 = result + 4 * v16;
          do
          {
            v28 = (const char *)(result + v7);
            v29 = (unsigned __int128)vld4q_s8(v28);
            v30 = vmovl_u8(*(uint8x8_t *)&v29);
            v31 = vmovl_high_u8((uint8x16_t)v29);
            v32 = (const char *)(result + 1);
            v33 = (unsigned __int128)vld4q_s8(v32);
            v34 = vmull_high_u16(v30, v13);
            v35 = vmovl_high_u8((uint8x16_t)v33);
            v36 = vmovl_u8(*(uint8x8_t *)&v33);
            v37 = (const char *)(result + v8);
            v38 = (unsigned __int128)vld4q_s8(v37);
            v39 = vmovl_u8(*(uint8x8_t *)&v38);
            v40 = vmovl_high_u8((uint8x16_t)v38);
            v41 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v13.i8), *(uint16x4_t *)v36.i8, *(uint16x4_t *)v14.i8), *(uint16x4_t *)v39.i8, *(uint16x4_t *)v15.i8), v17);
            v42 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmlal_high_u16(v34, v36, v14), v39, v15), v17);
            v43.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v31, v13), v35, v14), v40, v15), v17), 0xEuLL);
            v43.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v31.i8, *(uint16x4_t *)v13.i8), *(uint16x4_t *)v35.i8, *(uint16x4_t *)v14.i8), *(uint16x4_t *)v40.i8, *(uint16x4_t *)v15.i8), v17), 0xEuLL);
            v43.val[1] = (int8x16_t)vshrq_n_u32(v42, 0xEuLL);
            v43.val[0] = (int8x16_t)vshrq_n_u32(v41, 0xEuLL);
            *(int8x16_t *)(v18 + v26) = vqtbl4q_s8(v43, (int8x16_t)xmmword_1003BC960);
            v26 += 16;
            result += 64;
          }
          while (v16 != v26);
          v19 = v16;
          result = v27;
        }
        LODWORD(v6) = v6 - 1;
        do
        {
          *(_BYTE *)(v18 + v19++) = (9617 * *(unsigned __int8 *)(result + 1)
                                   + 1868 * *(unsigned __int8 *)(result + v7)
                                   + 4899 * *(unsigned __int8 *)(result + v8)
                                   + 0x2000) >> 14;
          result += 4;
        }
        while (a5 != v19);
        result += v9;
        v18 += a4;
        ++v12;
      }
      while ((_DWORD)v6);
    }
    else
    {
      do
      {
        v11 = 0;
        LODWORD(v6) = v6 - 1;
        do
        {
          *(_BYTE *)(a3 + v11++) = (9617 * *(unsigned __int8 *)(result + 1)
                                  + 1868 * *(unsigned __int8 *)(result + v7)
                                  + 4899 * *(unsigned __int8 *)(result + v8)
                                  + 0x2000) >> 14;
          result += 4;
        }
        while (a5 != v11);
        result += v9;
        a3 += a4;
      }
      while ((_DWORD)v6);
    }
  }
  return result;
}

uint64_t sub_1002AF964(uint64_t result, int a2, char *a3, int a4, unint64_t a5, int a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  BOOL v18;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  unsigned __int128 v27;
  const char *v28;
  unsigned __int128 v29;
  int v30;
  char v31;
  int8x16x3_t v32;

  v6 = HIDWORD(a5);
  if (HIDWORD(a5) && (int)a5 >= 1)
  {
    v7 = 2 * (a6 != 0);
    v8 = v7 ^ 2;
    v9 = -3 * (int)a5 + a4;
    v10 = a2 - 4 * (int)a5;
    if ((a5 & 0xF) != 0)
      v11 = a5 & 0xF;
    else
      v11 = 16;
    if (a5 >= 0x11uLL)
    {
      v14 = a5 - v11;
      do
      {
        v15 = 0;
        v16 = (unint64_t)&a3[3 * (a5 - 1) + 3];
        v18 = (unint64_t)a3 < result + ((4 * (a5 - 1)) | 2uLL) && result + 1 < v16;
        v20 = (unint64_t)a3 < result + (v7 | (4 * (a5 - 1)) | 1uLL) && result + v7 < v16;
        v21 = result + v8 >= v16
           || (unint64_t)a3 >= result + (v8 & 0xFFFFFFFC00000003 | (4 * (a5 - 1)) | 1);
        if (v21 && !v18 && !v20)
        {
          v22 = result + 4 * v14;
          v23 = &a3[3 * v14];
          v24 = a5 - v11;
          do
          {
            v25 = (const char *)(result + v7);
            v32.val[0] = (int8x16_t)vld4q_s8(v25);
            v26 = (const char *)(result + 1);
            v27 = (unsigned __int128)vld4q_s8(v26);
            v28 = (const char *)(result + v8);
            v29 = (unsigned __int128)vld4q_s8(v28);
            v32.val[1] = (int8x16_t)v27;
            v32.val[2] = (int8x16_t)v29;
            vst3q_s8(a3, v32);
            a3 += 48;
            result += 64;
            v24 -= 16;
          }
          while (v24);
          result = v22;
          v15 = a5 - v11;
          a3 = v23;
        }
        LODWORD(v6) = v6 - 1;
        v30 = a5 - v15;
        do
        {
          v31 = *(_BYTE *)(result + 1);
          *a3 = *(_BYTE *)(result + v7);
          a3[1] = v31;
          a3[2] = *(_BYTE *)(result + v8);
          a3 += 3;
          result += 4;
          --v30;
        }
        while (v30);
        a3 += v9;
        result += v10;
      }
      while ((_DWORD)v6);
    }
    else
    {
      do
      {
        LODWORD(v6) = v6 - 1;
        v12 = a5;
        do
        {
          v13 = *(_BYTE *)(result + 1);
          *a3 = *(_BYTE *)(result + v7);
          a3[1] = v13;
          a3[2] = *(_BYTE *)(result + v8);
          a3 += 3;
          result += 4;
          --v12;
        }
        while (v12);
        a3 += v9;
        result += v10;
      }
      while ((_DWORD)v6);
    }
  }
  return result;
}

const char *sub_1002AFB0C(const char *result, int a2, char *a3, int a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  const char *v15;
  char *v16;
  unint64_t v17;
  const char *v18;
  char *v19;
  char *v20;
  int v21;
  char v22;
  char v23;
  int8x16x3_t v24;
  int8x16x3_t v25;
  int8x16x3_t v26;
  int8x16x3_t v27;

  v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1)
    return result;
  v6 = 3 * (int)a5;
  v7 = a2 - (uint64_t)(int)v6;
  v8 = a4 - v6;
  if (a5 >= 0x20uLL)
  {
    v12 = 3 * (a5 - 1) + 3;
    v13 = 3 * (a5 - (a5 & 0x1F));
    while (1)
    {
      if (a3 >= &result[v12] || result >= &a3[v12])
      {
        v15 = &result[v13];
        v16 = &a3[v13];
        v17 = a5 - (a5 & 0x1F);
        do
        {
          v18 = result;
          v24 = vld3q_s8(v18);
          v18 += 48;
          v26.val[0] = v24.val[2];
          v26.val[1] = v24.val[1];
          v26.val[2] = v24.val[0];
          v25 = vld3q_s8(v18);
          v27.val[0] = v25.val[2];
          v27.val[1] = v25.val[1];
          v27.val[2] = v25.val[0];
          v19 = a3 + 96;
          vst3q_s8(a3, v26);
          v20 = a3 + 48;
          vst3q_s8(v20, v27);
          result += 96;
          a3 = v19;
          v17 -= 32;
        }
        while (v17);
        v14 = a5 - (a5 & 0x1F);
        if ((a5 & 0x1F) == 0)
          goto LABEL_9;
      }
      else
      {
        v14 = 0;
        v15 = result;
        v16 = a3;
      }
      v21 = a5 - v14;
      do
      {
        v22 = v15[1];
        v23 = v15[2];
        v16[2] = *v15;
        v16[1] = v22;
        *v16 = v23;
        v16 += 3;
        v15 += 3;
        --v21;
      }
      while (v21);
LABEL_9:
      result = &v15[v7];
      a3 = &v16[v8];
      LODWORD(v5) = v5 - 1;
      if (!(_DWORD)v5)
        return result;
    }
  }
  do
  {
    LODWORD(v5) = v5 - 1;
    v9 = a5;
    do
    {
      v10 = result[1];
      v11 = result[2];
      a3[2] = *result;
      a3[1] = v10;
      *a3 = v11;
      a3 += 3;
      result += 3;
      --v9;
    }
    while (v9);
    result += v7;
    a3 += v8;
  }
  while ((_DWORD)v5);
  return result;
}

const __int16 *sub_1002AFC54(const __int16 *result, int a2, __int16 *a3, int a4, unint64_t a5)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  const __int16 *v18;
  __int16 *v19;
  unint64_t v20;
  const __int16 *v21;
  __int16 *v22;
  __int16 *v23;
  int v24;
  __int16 v25;
  __int16 v26;
  int16x8x3_t v27;
  int16x8x3_t v28;
  int16x8x3_t v29;
  int16x8x3_t v30;

  v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1)
    return result;
  v6 = 3 * a5;
  if (a5 >= 0x10uLL)
  {
    v13 = a2 - v6;
    v14 = a4 - v6;
    v15 = 6 * (a5 - 1) + 6;
    v16 = 3 * (a5 - (a5 & 0xF));
    while (1)
    {
      if (a3 >= (const __int16 *)((char *)result + v15) || result >= (__int16 *)((char *)a3 + v15))
      {
        v18 = &result[v16];
        v19 = &a3[v16];
        v20 = a5 - (a5 & 0xF);
        do
        {
          v21 = result;
          v27 = vld3q_s16(v21);
          v21 += 24;
          v29.val[0] = v27.val[2];
          v29.val[1] = v27.val[1];
          v29.val[2] = v27.val[0];
          v28 = vld3q_s16(v21);
          v30.val[0] = v28.val[2];
          v30.val[1] = v28.val[1];
          v30.val[2] = v28.val[0];
          v22 = a3 + 48;
          vst3q_s16(a3, v29);
          v23 = a3 + 24;
          vst3q_s16(v23, v30);
          result += 48;
          a3 = v22;
          v20 -= 16;
        }
        while (v20);
        v17 = a5 - (a5 & 0xF);
        if ((a5 & 0xF) == 0)
          goto LABEL_10;
      }
      else
      {
        v17 = 0;
        v18 = result;
        v19 = a3;
      }
      v24 = a5 - v17;
      do
      {
        v25 = v18[1];
        v26 = v18[2];
        v19[2] = *v18;
        v19[1] = v25;
        *v19 = v26;
        v19 += 3;
        v18 += 3;
        --v24;
      }
      while (v24);
LABEL_10:
      result = &v18[v13];
      a3 = &v19[v14];
      LODWORD(v5) = v5 - 1;
      if (!(_DWORD)v5)
        return result;
    }
  }
  v7 = 2 * v6;
  v8 = 2 * a2 - v7;
  v9 = 2 * a4 - v7;
  do
  {
    LODWORD(v5) = v5 - 1;
    v10 = a5;
    do
    {
      v11 = result[1];
      v12 = result[2];
      a3[2] = *result;
      a3[1] = v11;
      *a3 = v12;
      a3 += 3;
      result += 3;
      --v10;
    }
    while (v10);
    result = (const __int16 *)((char *)result + v8);
    a3 = (__int16 *)((char *)a3 + v9);
  }
  while ((_DWORD)v5);
  return result;
}

uint16x8_t *sub_1002AFDB0(uint16x8_t *result, int a2, unint64_t a3, int a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  uint16x4_t v9;
  uint16x4_t v10;
  uint16x4_t v11;
  int32x4_t v12;
  uint16x8_t *v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint16x8_t *v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint64_t v26;
  uint16x8_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  int8x16x2_t v30;
  int8x16x4_t v31;

  v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1)
    return result;
  if (a5 >= 8uLL)
  {
    v7 = 0;
    v8.i64[0] = 0xF8000000F8;
    v8.i64[1] = 0xF8000000F8;
    v9 = (uint16x4_t)vdup_n_s16(0x74Cu);
    v10 = (uint16x4_t)vdup_n_s16(0x2591u);
    v11 = (uint16x4_t)vdup_n_s16(0x1323u);
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    v13 = result;
    v14 = a3;
    while (1)
    {
      if (v14 >= (unint64_t)result + 2 * a5 + v7 * a2
        || (unint64_t)v13 >= a3 + a5 + v7 * a4)
      {
        if (a5 < 0x10uLL)
        {
          v16 = 0;
LABEL_21:
          v26 = 2 * v16;
          do
          {
            v27 = *(uint16x8_t *)((char *)v13 + v26);
            v28 = vmovl_u16(*(uint16x4_t *)v27.i8);
            v29 = vmovl_high_u16(v27);
            v30.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v29, 2uLL), v8)), v10), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v27, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v29, 7uLL), v8)), v11), v12), 0xEuLL);
            v30.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v28, 2uLL), v8)), v10), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v27.i8, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v28, 7uLL), v8)), v11), v12), 0xEuLL);
            *(_QWORD *)(v14 + v16) = vqtbl2q_s8(v30, (int8x16_t)xmmword_1003BC970).u64[0];
            v16 += 8;
            v26 += 16;
          }
          while (a5 - (a5 & 7) != v16);
          v17 = a5 - (a5 & 7);
          if ((a5 & 7) == 0)
            goto LABEL_9;
          goto LABEL_24;
        }
        v18 = 0;
        v19 = v13;
        do
        {
          v21 = *v19;
          v20 = v19[1];
          v19 += 2;
          v22 = vmovl_u16(*(uint16x4_t *)v21.i8);
          v23 = vmovl_u16(*(uint16x4_t *)v20.i8);
          v24 = vmovl_high_u16(v21);
          v25 = vmovl_high_u16(v20);
          v31.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v25, 2uLL), v8)), v10), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v20, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v25, 7uLL), v8)), v11), v12), 0xEuLL);
          v31.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v24, 2uLL), v8)), v10), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v21, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v24, 7uLL), v8)), v11), v12), 0xEuLL);
          v31.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v23, 2uLL), v8)), v10), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v20.i8, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v23, 7uLL), v8)), v11), v12), 0xEuLL);
          v31.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v22, 2uLL), v8)), v10), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v21.i8, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v22, 7uLL), v8)), v11), v12), 0xEuLL);
          *(int8x16_t *)(v14 + v18) = vqtbl4q_s8(v31, (int8x16_t)xmmword_1003BC960);
          v18 += 16;
        }
        while (a5 - (a5 & 0xF) != v18);
        if ((a5 & 0xF) == 0)
          goto LABEL_9;
        v16 = a5 - (a5 & 0xF);
        v17 = v16;
        if ((a5 & 0xF) >= 8)
          goto LABEL_21;
      }
      else
      {
        v17 = 0;
      }
      do
      {
LABEL_24:
        *(_BYTE *)(v14 + v17) = (14944 * (v13->i16[v17] & 0x1F)
                               + 9617 * ((v13->u16[v17] >> 2) & 0xF8)
                               + 4899 * ((v13->u16[v17] >> 7) & 0xF8u)
                               + 0x2000) >> 14;
        ++v17;
      }
      while (a5 != v17);
LABEL_9:
      v14 += a4;
      v13 = (uint16x8_t *)((char *)v13 + a2);
      ++v7;
      LODWORD(v5) = v5 - 1;
      if (!(_DWORD)v5)
        return result;
    }
  }
  do
  {
    v6 = 0;
    LODWORD(v5) = v5 - 1;
    do
    {
      *(_BYTE *)(a3 + v6) = (14944 * (result->i16[v6] & 0x1F)
                           + 9617 * ((result->u16[v6] >> 2) & 0xF8)
                           + 4899 * ((result->u16[v6] >> 7) & 0xF8u)
                           + 0x2000) >> 14;
      ++v6;
    }
    while (a5 != v6);
    a3 += a4;
    result = (uint16x8_t *)((char *)result + a2);
  }
  while ((_DWORD)v5);
  return result;
}

uint16x8_t *sub_1002B00E4(uint16x8_t *result, int a2, unint64_t a3, int a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  uint16x4_t v9;
  int8x16_t v10;
  uint16x4_t v11;
  uint16x4_t v12;
  int32x4_t v13;
  uint16x8_t *v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint16x8_t *v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint64_t v27;
  uint16x8_t v28;
  uint32x4_t v29;
  uint32x4_t v30;
  int8x16x2_t v31;
  int8x16x4_t v32;

  v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1)
    return result;
  if (a5 >= 8uLL)
  {
    v7 = 0;
    v8.i64[0] = 0xF8000000F8;
    v8.i64[1] = 0xF8000000F8;
    v9 = (uint16x4_t)vdup_n_s16(0x74Cu);
    v10.i64[0] = 0xFC000000FCLL;
    v10.i64[1] = 0xFC000000FCLL;
    v11 = (uint16x4_t)vdup_n_s16(0x2591u);
    v12 = (uint16x4_t)vdup_n_s16(0x1323u);
    v13.i64[0] = 0x200000002000;
    v13.i64[1] = 0x200000002000;
    v14 = result;
    v15 = a3;
    while (1)
    {
      if (v15 >= (unint64_t)result + 2 * a5 + v7 * a2
        || (unint64_t)v14 >= a3 + a5 + v7 * a4)
      {
        if (a5 < 0x10uLL)
        {
          v17 = 0;
LABEL_21:
          v27 = 2 * v17;
          do
          {
            v28 = *(uint16x8_t *)((char *)v14 + v27);
            v29 = vmovl_u16(*(uint16x4_t *)v28.i8);
            v30 = vmovl_high_u16(v28);
            v31.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v30, 3uLL), v10)), v11), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v28, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v30, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v12), v13), 0xEuLL);
            v31.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v29, 3uLL), v10)), v11), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v28.i8, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v29, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v12), v13), 0xEuLL);
            *(_QWORD *)(v15 + v17) = vqtbl2q_s8(v31, (int8x16_t)xmmword_1003BC970).u64[0];
            v17 += 8;
            v27 += 16;
          }
          while (a5 - (a5 & 7) != v17);
          v18 = a5 - (a5 & 7);
          if ((a5 & 7) == 0)
            goto LABEL_9;
          goto LABEL_24;
        }
        v19 = 0;
        v20 = v14;
        do
        {
          v22 = *v20;
          v21 = v20[1];
          v20 += 2;
          v23 = vmovl_u16(*(uint16x4_t *)v22.i8);
          v24 = vmovl_u16(*(uint16x4_t *)v21.i8);
          v25 = vmovl_high_u16(v22);
          v26 = vmovl_high_u16(v21);
          v32.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v26, 3uLL), v10)), v11), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v21, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v26, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v12), v13), 0xEuLL);
          v32.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v25, 3uLL), v10)), v11), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v22, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v25, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v12), v13), 0xEuLL);
          v32.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v24, 3uLL), v10)), v11), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v21.i8, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v24, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v12), v13), 0xEuLL);
          v32.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v23, 3uLL), v10)), v11), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v22.i8, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v23, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v12), v13), 0xEuLL);
          *(int8x16_t *)(v15 + v19) = vqtbl4q_s8(v32, (int8x16_t)xmmword_1003BC960);
          v19 += 16;
        }
        while (a5 - (a5 & 0xF) != v19);
        if ((a5 & 0xF) == 0)
          goto LABEL_9;
        v17 = a5 - (a5 & 0xF);
        v18 = v17;
        if ((a5 & 0xF) >= 8)
          goto LABEL_21;
      }
      else
      {
        v18 = 0;
      }
      do
      {
LABEL_24:
        *(_BYTE *)(v15 + v18) = (14944 * (v14->i16[v18] & 0x1F)
                               + 9617 * ((v14->u16[v18] >> 3) & 0xFC)
                               + 4899 * (HIBYTE(v14->u16[v18]) & 0xF8u)
                               + 0x2000) >> 14;
        ++v18;
      }
      while (a5 != v18);
LABEL_9:
      v15 += a4;
      v14 = (uint16x8_t *)((char *)v14 + a2);
      ++v7;
      LODWORD(v5) = v5 - 1;
      if (!(_DWORD)v5)
        return result;
    }
  }
  do
  {
    v6 = 0;
    LODWORD(v5) = v5 - 1;
    do
    {
      *(_BYTE *)(a3 + v6) = (14944 * (result->i16[v6] & 0x1F)
                           + 9617 * ((result->u16[v6] >> 3) & 0xFC)
                           + 4899 * (HIBYTE(result->u16[v6]) & 0xF8u)
                           + 0x2000) >> 14;
      ++v6;
    }
    while (a5 != v6);
    a3 += a4;
    result = (uint16x8_t *)((char *)result + a2);
  }
  while ((_DWORD)v5);
  return result;
}

unint64_t sub_1002B041C(unint64_t result, int a2, char *a3, int a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int16x8_t *v15;
  int8x16_t v16;
  unint64_t v17;
  uint64_t v19;
  int16x8_t *v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unsigned int v29;
  int8x16x3_t v30;
  int8x16x3_t v31;

  v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1)
    return result;
  v6 = -3 * (int)a5 + a4;
  v7 = a2;
  v8 = a5;
  v9 = 2 * a5;
  if (a5 >= 0x20uLL)
  {
    v12 = 0;
    v13 = a5 & 0x1F;
    v14 = a5 - v13;
    v15 = (int16x8_t *)(result + 32);
    v16.i64[0] = 0xF8F8F8F8F8F8F8F8;
    v16.i64[1] = 0xF8F8F8F8F8F8F8F8;
    v17 = result;
    while (1)
    {
      if ((unint64_t)a3 >= result + v9 + v12 * v7 || v17 >= (unint64_t)&a3[v9 + v8])
      {
        v28 = &a3[3 * v14];
        v19 = v14;
        v20 = v15;
        do
        {
          v22 = v20[-2];
          v21 = v20[-1];
          v24 = *v20;
          v23 = v20[1];
          v20 += 4;
          v31.val[0] = vshlq_n_s8(vuzp1q_s8((int8x16_t)v22, (int8x16_t)v21), 3uLL);
          v31.val[1] = vandq_s8(vshrn_high_n_s16(vshrn_n_s16(v22, 2uLL), v21, 2uLL), v16);
          v31.val[2] = vandq_s8(vshrn_high_n_s16(vshrn_n_s16(v22, 7uLL), v21, 7uLL), v16);
          v30.val[0] = vshlq_n_s8(vuzp1q_s8((int8x16_t)v24, (int8x16_t)v23), 3uLL);
          v30.val[1] = vandq_s8(vshrn_high_n_s16(vshrn_n_s16(v24, 2uLL), v23, 2uLL), v16);
          v30.val[2] = vandq_s8(vshrn_high_n_s16(vshrn_n_s16(v24, 7uLL), v23, 7uLL), v16);
          v25 = a3 + 96;
          vst3q_s8(a3, v31);
          v26 = a3 + 48;
          vst3q_s8(v26, v30);
          a3 = v25;
          v19 -= 32;
        }
        while (v19);
        v27 = v14;
        if (!v13)
          goto LABEL_9;
      }
      else
      {
        v27 = 0;
        v28 = a3;
      }
      do
      {
        v29 = *(unsigned __int16 *)(v17 + 2 * v27);
        *v28 = 8 * v29;
        v28[1] = (v29 >> 2) & 0xF8;
        v28[2] = (v29 >> 7) & 0xF8;
        ++v27;
        v28 += 3;
      }
      while (v8 != v27);
LABEL_9:
      a3 = &v28[v6];
      v17 += v7;
      ++v12;
      v15 = (int16x8_t *)((char *)v15 + v7);
      LODWORD(v5) = v5 - 1;
      if (!(_DWORD)v5)
        return result;
    }
  }
  do
  {
    v10 = 0;
    LODWORD(v5) = v5 - 1;
    do
    {
      v11 = *(unsigned __int16 *)(result + v10);
      *a3 = 8 * v11;
      a3[1] = (v11 >> 2) & 0xF8;
      a3[2] = (v11 >> 7) & 0xF8;
      a3 += 3;
      v10 += 2;
    }
    while (v9 != v10);
    a3 += v6;
    result += a2;
  }
  while ((_DWORD)v5);
  return result;
}

unint64_t sub_1002B05A4(unint64_t result, int a2, char *a3, int a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int16x8_t *v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  uint64_t v20;
  int16x8_t *v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  int8x16x3_t v31;
  int8x16x3_t v32;

  v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1)
    return result;
  v6 = -3 * (int)a5 + a4;
  v7 = a2;
  v8 = a5;
  v9 = 2 * a5;
  if (a5 >= 0x20uLL)
  {
    v12 = 0;
    v13 = a5 & 0x1F;
    v14 = a5 - v13;
    v15 = (int16x8_t *)(result + 32);
    v16.i64[0] = 0xFCFCFCFCFCFCFCFCLL;
    v16.i64[1] = 0xFCFCFCFCFCFCFCFCLL;
    v17.i64[0] = 0xF8F8F8F8F8F8F8F8;
    v17.i64[1] = 0xF8F8F8F8F8F8F8F8;
    v18 = result;
    while (1)
    {
      if ((unint64_t)a3 >= result + v9 + v12 * v7 || v18 >= (unint64_t)&a3[v9 + v8])
      {
        v29 = &a3[3 * v14];
        v20 = v14;
        v21 = v15;
        do
        {
          v23 = v21[-2];
          v22 = v21[-1];
          v25 = *v21;
          v24 = v21[1];
          v21 += 4;
          v31.val[0] = vshlq_n_s8(vuzp1q_s8((int8x16_t)v23, (int8x16_t)v22), 3uLL);
          v31.val[1] = vandq_s8(vshrn_high_n_s16(vshrn_n_s16(v23, 3uLL), v22, 3uLL), v16);
          v31.val[2] = vandq_s8(vuzp2q_s8((int8x16_t)v23, (int8x16_t)v22), v17);
          v32.val[0] = vshlq_n_s8(vuzp1q_s8((int8x16_t)v25, (int8x16_t)v24), 3uLL);
          v32.val[1] = vandq_s8(vshrn_high_n_s16(vshrn_n_s16(v25, 3uLL), v24, 3uLL), v16);
          v32.val[2] = vandq_s8(vuzp2q_s8((int8x16_t)v25, (int8x16_t)v24), v17);
          v26 = a3 + 96;
          vst3q_s8(a3, v31);
          v27 = a3 + 48;
          vst3q_s8(v27, v32);
          a3 = v26;
          v20 -= 32;
        }
        while (v20);
        v28 = v14;
        if (!v13)
          goto LABEL_9;
      }
      else
      {
        v28 = 0;
        v29 = a3;
      }
      do
      {
        v30 = *(unsigned __int16 *)(v18 + 2 * v28);
        *v29 = 8 * v30;
        v29[1] = (v30 >> 3) & 0xFC;
        v29[2] = BYTE1(v30) & 0xF8;
        ++v28;
        v29 += 3;
      }
      while (v8 != v28);
LABEL_9:
      a3 = &v29[v6];
      v18 += v7;
      ++v12;
      v15 = (int16x8_t *)((char *)v15 + v7);
      LODWORD(v5) = v5 - 1;
      if (!(_DWORD)v5)
        return result;
    }
  }
  do
  {
    v10 = 0;
    LODWORD(v5) = v5 - 1;
    do
    {
      v11 = *(unsigned __int16 *)(result + v10);
      *a3 = 8 * v11;
      a3[1] = (v11 >> 3) & 0xFC;
      a3[2] = BYTE1(v11) & 0xF8;
      a3 += 3;
      v10 += 2;
    }
    while (v9 != v10);
    a3 += v6;
    result += a2;
  }
  while ((_DWORD)v5);
  return result;
}

unsigned __int8 *sub_1002B0728(unsigned __int8 *result, int a2, char *a3, int a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  unint64_t v12;
  int v13;
  unsigned __int8 *v14;
  char *v15;
  unint64_t v16;
  uint8x16_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint8x16_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint8x16_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  int v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  int8x16x3_t v32;
  int8x16x4_t v33;
  int8x16x4_t v34;
  int8x16x4_t v35;
  int8x16x4_t v36;

  v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1)
    return result;
  v6 = -3 * (int)a5 + a4;
  v7 = a2 - 4 * (int)a5;
  if (a5 >= 0x10uLL)
  {
    v12 = a5 - (a5 & 0xF);
    while (1)
    {
      if (a3 >= (char *)&result[4 * (a5 - 1) + 4]
        || result >= (unsigned __int8 *)&a3[3 * (a5 - 1) + 3])
      {
        v14 = &result[4 * v12];
        v15 = &a3[3 * v12];
        v16 = a5 - (a5 & 0xF);
        do
        {
          v34 = vld4q_s8((const char *)result);
          result += 64;
          v17 = (uint8x16_t)vmvnq_s8(v34.val[0]);
          v18 = vmovl_high_u8(v17);
          v19 = vmovl_u8(*(uint8x8_t *)v17.i8);
          v20 = (uint16x8_t)vuzp1q_s16((int16x8_t)vqtbl1q_s8(v34.val[3], (int8x16_t)xmmword_1003BCA90), (int16x8_t)vqtbl1q_s8(v34.val[3], (int8x16_t)xmmword_1003BCAA0));
          v21 = (uint16x8_t)vuzp1q_s16((int16x8_t)vqtbl1q_s8(v34.val[3], (int8x16_t)xmmword_1003BCAB0), (int16x8_t)vqtbl1q_s8(v34.val[3], (int8x16_t)xmmword_1003BCAC0));
          v35.val[3] = (int8x16_t)vshrq_n_u32(vmull_high_u16(v21, v18), 8uLL);
          v35.val[2] = (int8x16_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v18.i8), 8uLL);
          v35.val[1] = (int8x16_t)vshrq_n_u32(vmull_high_u16(v20, v19), 8uLL);
          v35.val[0] = (int8x16_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v19.i8), 8uLL);
          v22 = (uint8x16_t)vmvnq_s8(v34.val[1]);
          v23 = vmovl_high_u8(v22);
          v24 = vmovl_u8(*(uint8x8_t *)v22.i8);
          v36.val[3] = (int8x16_t)vshrq_n_u32(vmull_high_u16(v21, v23), 8uLL);
          v36.val[2] = (int8x16_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v23.i8), 8uLL);
          v36.val[1] = (int8x16_t)vshrq_n_u32(vmull_high_u16(v20, v24), 8uLL);
          v36.val[0] = (int8x16_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v24.i8), 8uLL);
          v25 = (uint8x16_t)vmvnq_s8(v34.val[2]);
          v26 = vmovl_high_u8(v25);
          v27 = vmovl_u8(*(uint8x8_t *)v25.i8);
          v33.val[3] = (int8x16_t)vshrq_n_u32(vmull_high_u16(v21, v26), 8uLL);
          v33.val[2] = (int8x16_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v26.i8), 8uLL);
          v33.val[1] = (int8x16_t)vshrq_n_u32(vmull_high_u16(v20, v27), 8uLL);
          v33.val[0] = (int8x16_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v27.i8), 8uLL);
          v32.val[2] = vsubq_s8(v34.val[3], vqtbl4q_s8(v35, (int8x16_t)xmmword_1003BC960));
          v32.val[1] = vsubq_s8(v34.val[3], vqtbl4q_s8(v36, (int8x16_t)xmmword_1003BC960));
          v32.val[0] = vsubq_s8(v34.val[3], vqtbl4q_s8(v33, (int8x16_t)xmmword_1003BC960));
          vst3q_s8(a3, v32);
          a3 += 48;
          v16 -= 16;
        }
        while (v16);
        v13 = a5 - (a5 & 0xF);
        if ((a5 & 0xF) == 0)
          goto LABEL_9;
      }
      else
      {
        v13 = 0;
        v14 = result;
        v15 = a3;
      }
      v28 = a5 - v13;
      do
      {
        v29 = v14[3];
        v30 = v29 * (v14[1] ^ 0xFF);
        v31 = v29 * (v14[2] ^ 0xFF);
        v15[2] = v29 - ((unsigned __int16)(v29 * (*v14 ^ 0xFF)) >> 8);
        v15[1] = v29 - HIBYTE(v30);
        *v15 = v29 - HIBYTE(v31);
        v15 += 3;
        v14 += 4;
        --v28;
      }
      while (v28);
LABEL_9:
      a3 = &v15[v6];
      result = &v14[v7];
      LODWORD(v5) = v5 - 1;
      if (!(_DWORD)v5)
        return result;
    }
  }
  do
  {
    LODWORD(v5) = v5 - 1;
    v8 = a5;
    do
    {
      v9 = result[3];
      v10 = v9 * (result[1] ^ 0xFF);
      v11 = v9 * (result[2] ^ 0xFF);
      a3[2] = v9 - ((unsigned __int16)(v9 * (*result ^ 0xFF)) >> 8);
      a3[1] = v9 - HIBYTE(v10);
      *a3 = v9 - HIBYTE(v11);
      a3 += 3;
      result += 4;
      --v8;
    }
    while (v8);
    a3 += v6;
    result += v7;
  }
  while ((_DWORD)v5);
  return result;
}

char *sub_1002B0984(char *result, int a2, unint64_t a3, int a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  uint8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint8x16_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  int v34;
  int8x16x4_t v35;
  int8x16x4_t v36;

  v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1)
    return result;
  v6 = a4;
  v7 = a2 - 4 * (int)a5;
  v8 = a5;
  if (a5 >= 0x10uLL)
  {
    v11 = 0;
    v12 = a5 & 0xF;
    v13 = a5 - v12;
    v14 = vdupq_n_s32(0x74Cu);
    v15 = vdupq_n_s32(0x2591u);
    v16 = vdupq_n_s32(0x1323u);
    v17.i64[0] = 0x200000002000;
    v17.i64[1] = 0x200000002000;
    v18 = a3;
    while (1)
    {
      if (v18 >= (unint64_t)&result[4 * v8] || (unint64_t)result >= a3 + v8 + v11 * a4)
      {
        v21 = 0;
        v20 = (unsigned __int8 *)&result[4 * v13];
        do
        {
          v35 = vld4q_s8(result);
          result += 64;
          v22 = (int16x8_t)vqtbl1q_s8(v35.val[3], (int8x16_t)xmmword_1003BCAA0);
          v23 = (int16x8_t)vqtbl1q_s8(v35.val[3], (int8x16_t)xmmword_1003BCA90);
          v24 = (int16x8_t)vqtbl1q_s8(v35.val[3], (int8x16_t)xmmword_1003BCAC0);
          v25 = (int16x8_t)vqtbl1q_s8(v35.val[3], (int8x16_t)xmmword_1003BCAB0);
          v26 = (uint8x16_t)vmvnq_s8(v35.val[0]);
          v27 = vmovl_u8(*(uint8x8_t *)v26.i8);
          v28 = vmovl_high_u8(v26);
          v29 = (uint16x8_t)vuzp1q_s16(v25, v24);
          v30 = (uint16x8_t)vuzp1q_s16(v23, v22);
          v31 = (uint8x16_t)vmvnq_s8(v35.val[1]);
          v32 = vmovl_high_u8(v31);
          v33 = vmovl_u8(*(uint8x8_t *)v31.i8);
          v35.val[0] = vmvnq_s8(v35.val[2]);
          v35.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v35.val[0]);
          v35.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v35.val[0].i8);
          v35.val[2] = (int8x16_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vsubq_s32((int32x4_t)v23, (int32x4_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v35.val[0].i8), 8uLL)), v14), vsubq_s32((int32x4_t)v23, (int32x4_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v33.i8), 8uLL)), v15), vsubq_s32((int32x4_t)v23, (int32x4_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v27.i8),
                                                     8uLL)),
                                      v16),
                                    v17);
          v35.val[3] = (int8x16_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vsubq_s32((int32x4_t)v25, (int32x4_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v35.val[1].i8), 8uLL)), v14), vsubq_s32((int32x4_t)v25, (int32x4_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v32.i8), 8uLL)), v15), vsubq_s32((int32x4_t)v25, (int32x4_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v28.i8),
                                                     8uLL)),
                                      v16),
                                    v17);
          v36.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vsubq_s32((int32x4_t)v24, (int32x4_t)vshrq_n_u32(vmull_high_u16(v29, (uint16x8_t)v35.val[1]), 8uLL)), v14), vsubq_s32((int32x4_t)v24, (int32x4_t)vshrq_n_u32(vmull_high_u16(v29, v32), 8uLL)), v15), vsubq_s32((int32x4_t)v24, (int32x4_t)vshrq_n_u32(vmull_high_u16(v29, v28), 8uLL)), v16), v17),
                                    0xEuLL);
          v36.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)v35.val[3], 0xEuLL);
          v36.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vsubq_s32((int32x4_t)v22, (int32x4_t)vshrq_n_u32(vmull_high_u16(v30, (uint16x8_t)v35.val[0]), 8uLL)), v14), vsubq_s32((int32x4_t)v22, (int32x4_t)vshrq_n_u32(vmull_high_u16(v30, v33), 8uLL)), v15), vsubq_s32((int32x4_t)v22, (int32x4_t)vshrq_n_u32(vmull_high_u16(v30, v27), 8uLL)), v16), v17),
                                    0xEuLL);
          v36.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)v35.val[2], 0xEuLL);
          *(int8x16_t *)(v18 + v21) = vqtbl4q_s8(v36, (int8x16_t)xmmword_1003BC960);
          v21 += 16;
        }
        while (v13 != v21);
        v19 = v13;
        if (!v12)
          goto LABEL_9;
      }
      else
      {
        v19 = 0;
        v20 = (unsigned __int8 *)result;
      }
      do
      {
        v34 = v20[3];
        *(_BYTE *)(v18 + v19++) = (1868 * (v34 - ((v34 * (v20[2] ^ 0xFFu)) >> 8))
                                 + 9617 * (v34 - ((v34 * (v20[1] ^ 0xFFu)) >> 8))
                                 + 4899 * (v34 - ((v34 * (*v20 ^ 0xFFu)) >> 8))
                                 + 0x2000) >> 14;
        v20 += 4;
      }
      while (v8 != v19);
LABEL_9:
      v18 += a4;
      result = (char *)&v20[v7];
      ++v11;
      LODWORD(v5) = v5 - 1;
      if (!(_DWORD)v5)
        return result;
    }
  }
  do
  {
    v9 = 0;
    LODWORD(v5) = v5 - 1;
    do
    {
      v10 = result[3];
      *(_BYTE *)(a3 + v9++) = (1868 * (v10 - ((v10 * (result[2] ^ 0xFFu)) >> 8))
                             + 9617 * (v10 - ((v10 * (result[1] ^ 0xFFu)) >> 8))
                             + 4899 * (v10 - ((v10 * (*result ^ 0xFFu)) >> 8))
                             + 0x2000) >> 14;
      result += 4;
    }
    while (a5 != v9);
    a3 += v6;
    result += v7;
  }
  while ((_DWORD)v5);
  return result;
}

const char *sub_1002B0C84(const char *result, unint64_t a2, unsigned int a3)
{
  BOOL v3;
  uint64_t v4;
  _BYTE *v5;
  const char *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  int32x4_t v15;
  uint64_t v16;
  int8x16_t *v17;
  const char *v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint32x4_t v24;
  uint64_t v25;
  const char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int32x4_t v33;
  uint16x8_t v34;
  uint32x4_t v35;
  uint16x8_t v36;
  uint32x4_t v37;
  int8x16x2_t v38;
  int8x8x4_t v39;
  int8x16x4_t v40;

  if ((int)a3 >= 1)
  {
    if (a3 < 9
      || ((unint64_t)&result[4 * a3 - 1] > a2 ? (v3 = a2 + a3 > (unint64_t)result) : (v3 = 0), v3))
    {
      v4 = 0;
    }
    else
    {
      if (a3 >= 0x11)
      {
        v11 = 16;
        if ((a3 & 0xF) != 0)
          v11 = a3 & 0xF;
        v4 = a3 - v11;
        v12 = (uint16x8_t)vdupq_n_s16(0x74Cu);
        v13 = (uint16x8_t)vdupq_n_s16(0x2591u);
        v14 = (uint16x8_t)vdupq_n_s16(0x1323u);
        v15.i64[0] = 0x200000002000;
        v15.i64[1] = 0x200000002000;
        v16 = a3;
        v17 = (int8x16_t *)a2;
        v18 = result;
        do
        {
          v40 = vld4q_s8(v18);
          v18 += 64;
          v19 = vmovl_u8(*(uint8x8_t *)v40.val[0].i8);
          v20 = vmovl_high_u8((uint8x16_t)v40.val[0]);
          v21 = vmovl_high_u8((uint8x16_t)v40.val[1]);
          v22 = vmovl_u8(*(uint8x8_t *)v40.val[1].i8);
          v23 = vmovl_u8(*(uint8x8_t *)v40.val[2].i8);
          v40.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v40.val[2]);
          v24 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v20, v12), v21, v13), (uint16x8_t)v40.val[0], v14), v15), 0xEuLL);
          v40.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v12.i8), *(uint16x4_t *)v21.i8, *(uint16x4_t *)v13.i8), *(uint16x4_t *)v40.val[0].i8, *(uint16x4_t *)v14.i8), v15), 0xEuLL);
          v40.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v19, v12), v22, v13), v23, v14), v15), 0xEuLL);
          v40.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v19.i8, *(uint16x4_t *)v12.i8), *(uint16x4_t *)v22.i8, *(uint16x4_t *)v13.i8), *(uint16x4_t *)v23.i8, *(uint16x4_t *)v14.i8), v15), 0xEuLL);
          *v17++ = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v40 + 16), (int8x16_t)xmmword_1003BC960);
          v16 -= 16;
        }
        while (v11 != v16);
        if (v11 < 9)
          goto LABEL_10;
      }
      else
      {
        v4 = 0;
      }
      if ((a3 & 7) != 0)
        v25 = a3 & 7;
      else
        v25 = 8;
      v26 = &result[4 * v4];
      v27 = (_QWORD *)(a2 + v4);
      v28 = v25 + v4;
      v4 = a3 - v25;
      v29 = v28 - a3;
      v30 = (uint16x8_t)vdupq_n_s16(0x74Cu);
      v31 = (uint16x8_t)vdupq_n_s16(0x2591u);
      v32 = (uint16x8_t)vdupq_n_s16(0x1323u);
      v33.i64[0] = 0x200000002000;
      v33.i64[1] = 0x200000002000;
      do
      {
        v39 = vld4_s8(v26);
        v26 += 32;
        v34 = vmovl_u8((uint8x8_t)v39.val[0]);
        v35 = vmull_high_u16(v34, v30);
        v36 = vmovl_u8((uint8x8_t)v39.val[1]);
        *(uint16x8_t *)v39.val[0].i8 = vmovl_u8((uint8x8_t)v39.val[2]);
        v37 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)v30.i8), *(uint16x4_t *)v36.i8, *(uint16x4_t *)v31.i8), (uint16x4_t)v39.val[0], *(uint16x4_t *)v32.i8), v33);
        v38.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmlal_high_u16(v35, v36, v31), *(uint16x8_t *)v39.val[0].i8, v32), v33), 0xEuLL);
        v38.val[0] = (int8x16_t)vshrq_n_u32(v37, 0xEuLL);
        *v27++ = vqtbl2q_s8(v38, (int8x16_t)xmmword_1003BC970).u64[0];
        v29 += 8;
      }
      while (v29);
    }
LABEL_10:
    v5 = (_BYTE *)(a2 + v4);
    v6 = &result[4 * v4 + 2];
    v7 = a3 - v4;
    do
    {
      v8 = *((unsigned __int8 *)v6 - 2);
      v9 = 9617 * *((unsigned __int8 *)v6 - 1);
      v10 = *(unsigned __int8 *)v6;
      v6 += 4;
      *v5++ = (v9 + 1868 * v8 + 4899 * v10 + 0x2000) >> 14;
      --v7;
    }
    while (v7);
  }
  return result;
}

int8x8_t *sub_1002B0E68(int8x8_t *result, int a2, int a3, double a4, int8x16_t a5)
{
  __int16 v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int8x8_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (a3)
    v5 = 255;
  else
    v5 = 0;
  if (a2 != 31)
  {
    LODWORD(v6) = 1 << a2;
    v7 = (1 << a2) - 1;
    if (1 << a2 <= 1)
      v6 = 1;
    else
      v6 = v6;
    if (v6 < 2)
      goto LABEL_12;
    v8 = 255;
    v9 = v6 & 0x7FFFFFFE;
    v10 = result;
    do
    {
      a5.i8[3] = 0;
      a5.i8[4] = 0;
      a5.i8[5] = 0;
      a5.i8[6] = 0;
      a5.i8[7] = 0;
      a5.i8[9] = 0;
      a5.i8[11] = 0;
      a5.i8[12] = 0;
      a5.i8[13] = 0;
      a5.i8[14] = 0;
      a5.i8[15] = 0;
      a5.i16[0] = ((v8 - 255) / v7) ^ v5;
      a5.i8[2] = (v8 / v7) ^ v5;
      a5.i8[8] = a5.i8[0];
      a5.i8[10] = a5.i8[2];
      *v10++ = vqtbl1_s8(a5, (int8x8_t)0x302020201000000);
      v8 += 510;
      v9 -= 2;
    }
    while (v9);
    if ((v6 & 0x7FFFFFFE) == 0)
    {
LABEL_12:
      v11 = 0;
      v12 = 255 * v6;
      do
      {
        *(int16x4_t *)a5.i8 = vzip1_s16((int16x4_t)(unsigned __int16)(((int)v11 / v7) ^ v5), (int16x4_t)(unsigned __int16)(((int)v11 / v7) ^ v5));
        a5.i16[2] = ((int)v11 / v7) ^ v5;
        result->i32[0] = vmovn_s16((int16x8_t)a5).u32[0];
        result = (int8x8_t *)((char *)result + 4);
        v11 += 255;
      }
      while (v12 != v11);
    }
  }
  return result;
}

BOOL sub_1002B0F28(unsigned __int8 *a1, int a2)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  unint64_t v8;
  int v9;

  if (a2 == 31)
    return 0;
  v3 = 1;
  v4 = (1 << a2);
  if ((int)v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  v6 = *a1;
  if (v6 == a1[1])
  {
    v7 = a1 + 5;
    v8 = 1;
    do
    {
      if (v6 != *(v7 - 3))
        break;
      v3 = v8 < v4;
      if (v5 == v8)
        break;
      v6 = *(v7 - 1);
      v9 = *v7;
      v7 += 4;
      ++v8;
    }
    while (v6 == v9);
  }
  return v3;
}

unint64_t sub_1002B0F9C(_OWORD *a1, unint64_t *a2, int a3, int a4, int *a5, int a6, int a7, unint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v28;
  unint64_t v29;
  int v33;

  v9 = a8 >> 16;
  v10 = -(uint64_t)a4;
  v11 = a3;
  v12 = *a2;
  v13 = a1;
  v14 = (unint64_t)a1;
  do
  {
    v33 = a7;
    v15 = (unint64_t)v13 + a7;
    if (v15 <= v12)
      v16 = v15;
    else
      v16 = v12;
    if ((unint64_t)v13 < v16)
    {
      v17 = (unint64_t)v13 + 3;
      if (v16 > (unint64_t)v13 + 3)
        v17 = v16;
      v18 = v17 - 3 - (_QWORD)v13;
      if (v18)
        v19 = 2;
      else
        v19 = 1;
      v20 = v19 + (v18 - (v18 != 0)) / 3;
      v21 = v13;
      v14 = (unint64_t)v13;
      if (v20 < 0x20)
        goto LABEL_23;
      v29 = v20;
      v22 = v20 & 0x7FFFFFFFFFFFFFE0;
      v14 = (unint64_t)v13 + 3 * v22;
      v28 = v22;
      do
      {
        LOWORD(v23) = a8;
        BYTE2(v23) = BYTE2(a8);
        *(_WORD *)((char *)&v23 + 3) = a8;
        BYTE5(v23) = BYTE2(a8);
        LOBYTE(v24) = BYTE1(a8);
        WORD3(v23) = a8;
        BYTE1(v24) = BYTE2(a8);
        WORD1(v24) = a8;
        BYTE8(v23) = BYTE2(a8);
        BYTE4(v24) = BYTE2(a8);
        *(_WORD *)((char *)&v24 + 5) = a8;
        BYTE9(v23) = a8;
        BYTE7(v24) = BYTE2(a8);
        BYTE10(v23) = BYTE1(a8);
        WORD4(v24) = a8;
        BYTE11(v23) = BYTE2(a8);
        BYTE10(v24) = BYTE2(a8);
        BYTE11(v24) = a8;
        WORD6(v23) = a8;
        LOBYTE(v25) = BYTE2(a8);
        BYTE12(v24) = BYTE1(a8);
        *(_WORD *)((char *)&v25 + 1) = a8;
        BYTE3(v25) = BYTE2(a8);
        WORD2(v25) = a8;
        BYTE13(v24) = BYTE2(a8);
        BYTE6(v25) = BYTE2(a8);
        BYTE7(v25) = a8;
        BYTE14(v23) = BYTE2(a8);
        BYTE8(v25) = BYTE1(a8);
        BYTE9(v25) = BYTE2(a8);
        HIWORD(v24) = a8;
        WORD5(v25) = a8;
        HIBYTE(v23) = a8;
        BYTE12(v25) = BYTE2(a8);
        *(_WORD *)((char *)&v25 + 13) = a8;
        HIBYTE(v25) = BYTE2(a8);
        *v21 = v23;
        v21[1] = v24;
        v21[2] = v25;
        v21[3] = v23;
        v21[4] = v24;
        v21[5] = v25;
        v21 += 6;
        v22 -= 32;
      }
      while (v22);
      v10 = -(uint64_t)a4;
      v11 = a3;
      LOBYTE(v9) = BYTE2(a8);
      if (v29 != v28)
      {
LABEL_23:
        do
        {
          *(_WORD *)v14 = a8;
          *(_BYTE *)(v14 + 2) = v9;
          v14 += 3;
        }
        while (v14 < v16);
      }
      v12 = *a2;
    }
    if (v14 >= v12)
    {
      v12 += v11;
      *a2 = v12;
      v14 = v12 + v10;
      v26 = *a5 + 1;
      *a5 = v26;
      if (v26 >= a6)
        break;
    }
    a7 = v33 + (_DWORD)v13 - v16;
    v13 = (_OWORD *)v14;
  }
  while (a7 > 0);
  return v14;
}

unint64_t sub_1002B1470(unint64_t __b, unint64_t *a2, int a3, int a4, int *a5, int a6, int a7, int __c)
{
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;

  v13 = (void *)__b;
  v14 = *a2;
  v15 = a3;
  v16 = -(uint64_t)a4;
  do
  {
    if ((unint64_t)v13 + a7 <= v14)
      v17 = (unint64_t)v13 + a7;
    else
      v17 = v14;
    if ((unint64_t)v13 < v17)
    {
      memset(v13, __c, v17 - (_QWORD)v13);
      v14 = *a2;
      __b = v17;
    }
    if (__b >= v14)
    {
      v14 += v15;
      *a2 = v14;
      __b = v14 + v16;
      v18 = *a5 + 1;
      *a5 = v18;
      if (v18 >= a6)
        break;
    }
    a7 += (_DWORD)v13 - v17;
    v13 = (void *)__b;
  }
  while (a7 > 0);
  return __b;
}

uint64_t sub_1002B153C(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  unint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  __int16 *v7;
  __int16 v8;

  if (a3 >= 2)
  {
    v4 = a1 + 3 * a3;
    do
    {
      v5 = (_DWORD *)a1;
      v6 = *a2++;
      a1 += 3;
      *v5 = *(_DWORD *)(a4 + 4 * v6);
    }
    while ((unint64_t)v5 + 6 < v4);
  }
  v7 = (__int16 *)(a4 + 4 * *a2);
  v8 = *v7;
  LOBYTE(v7) = *((_BYTE *)v7 + 2);
  *(_WORD *)a1 = v8;
  *(_BYTE *)(a1 + 2) = (_BYTE)v7;
  return a1 + 3;
}

_BYTE *sub_1002B158C(_BYTE *a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  _BYTE *v5;
  unsigned int v6;

  if (a3 >= 1)
  {
    v4 = a3;
    v5 = a1;
    do
    {
      v6 = *a2++;
      *v5++ = *(_BYTE *)(a4 + v6);
      --v4;
    }
    while (v4);
  }
  return &a1[a3];
}

unint64_t sub_1002B15B8(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t result;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  __int16 *v9;
  __int16 v10;
  __int16 *v11;
  __int16 v12;

  v4 = a1;
  result = a1 + 3 * a3;
  if (a3 >= 3)
  {
    do
    {
      v6 = *a2++;
      *(_DWORD *)v4 = *(_DWORD *)(a4 + (((unint64_t)v6 >> 2) & 0x3C));
      *(_DWORD *)(v4 + 3) = *(_DWORD *)(a4 + 4 * (v6 & 0xF));
      v7 = v4 + 12;
      v4 += 6;
    }
    while (v7 < result);
  }
  v8 = *a2;
  v9 = (__int16 *)(a4 + ((v8 >> 2) & 0x3C));
  v10 = *v9;
  LOBYTE(v9) = *((_BYTE *)v9 + 2);
  *(_WORD *)v4 = v10;
  *(_BYTE *)(v4 + 2) = (_BYTE)v9;
  if (v4 + 6 == result)
  {
    v11 = (__int16 *)(a4 + 4 * (v8 & 0xF));
    v12 = *v11;
    LOBYTE(v11) = *((_BYTE *)v11 + 2);
    *(_WORD *)(v4 + 3) = v12;
    *(_BYTE *)(v4 + 5) = (_BYTE)v11;
  }
  return result;
}

_BYTE *sub_1002B1648(_BYTE *a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  _BYTE *v4;
  _BYTE *result;
  unsigned int v6;
  _BYTE *v7;
  unint64_t v8;

  v4 = a1;
  result = &a1[a3];
  if (a3 >= 3)
  {
    do
    {
      v6 = *a2++;
      *v4 = *(_BYTE *)(a4 + ((unint64_t)v6 >> 4));
      v4[1] = *(_BYTE *)(a4 + (v6 & 0xF));
      v7 = v4 + 4;
      v4 += 2;
    }
    while (v7 < result);
  }
  v8 = *a2;
  *v4 = *(_BYTE *)(a4 + (v8 >> 4));
  if (v4 + 2 == result)
    v4[1] = *(_BYTE *)(a4 + (v8 & 0xF));
  return result;
}

int *sub_1002B16B4(int *a1, char *a2, int a3, uint64_t a4)
{
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int *v20;
  int *v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v4 = (int *)((char *)a1 + 3 * a3);
  v5 = *(_DWORD *)a4;
  v6 = *(unsigned __int8 *)(a4 + 4);
  v7 = *(unsigned __int8 *)(a4 + 5);
  v8 = *(unsigned __int8 *)(a4 + 6);
  if (a3 < 9)
  {
    v20 = a1;
    if (a1 >= v4)
      return v20;
    goto LABEL_31;
  }
  v9 = v6 | (v7 << 8) | (v8 << 16) | (*(unsigned __int8 *)(a4 + 7) << 24);
  do
  {
    v11 = *a2++;
    v10 = v11;
    if (v11 >= 0)
      v12 = v5;
    else
      v12 = v9;
    *a1 = v12;
    if ((v10 & 0x40) != 0)
      v13 = v9;
    else
      v13 = v5;
    *(int *)((char *)a1 + 3) = v13;
    if ((v10 & 0x20) != 0)
      v14 = v9;
    else
      v14 = v5;
    *(int *)((char *)a1 + 6) = v14;
    if ((v10 & 0x10) != 0)
      v15 = v9;
    else
      v15 = v5;
    *(int *)((char *)a1 + 9) = v15;
    if ((v10 & 8) != 0)
      v16 = v9;
    else
      v16 = v5;
    a1[3] = v16;
    if ((v10 & 4) != 0)
      v17 = v9;
    else
      v17 = v5;
    *(int *)((char *)a1 + 15) = v17;
    if ((v10 & 2) != 0)
      v18 = v9;
    else
      v18 = v5;
    *(int *)((char *)a1 + 18) = v18;
    if ((v10 & 1) != 0)
      v19 = v9;
    else
      v19 = v5;
    *(int *)((char *)a1 + 21) = v19;
    v20 = a1 + 6;
    v21 = a1 + 12;
    a1 += 6;
  }
  while (v21 < v4);
  if (v20 < v4)
  {
LABEL_31:
    v22 = *a2;
    do
    {
      if (v22 < 0)
        v23 = v6;
      else
        v23 = v5;
      if (v22 < 0)
        v24 = v7;
      else
        v24 = BYTE1(v5);
      if (v22 < 0)
        v25 = v8;
      else
        v25 = BYTE2(v5);
      *(_BYTE *)v20 = v23;
      *((_BYTE *)v20 + 1) = v24;
      *((_BYTE *)v20 + 2) = v25;
      v20 = (int *)((char *)v20 + 3);
      v22 *= 2;
    }
    while (v20 < v4);
  }
  return v20;
}

_BYTE *sub_1002B17B8(_BYTE *a1, char *a2, int a3, unsigned __int8 *a4)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int8x8_t v7;
  int8x8_t v8;
  _BYTE *v9;
  _BYTE *v10;
  char v11;
  int v12;
  unsigned int v13;
  char v14;
  int16x8_t v15;
  char v16;
  char v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  char v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;

  v4 = (unint64_t)&a1[a3];
  v5 = *a4;
  v6 = a4[1];
  if (a3 < 9)
  {
    v9 = a1;
    v19 = (unint64_t)a1;
    if ((unint64_t)a1 >= v4)
      return (_BYTE *)v19;
  }
  else
  {
    v7 = (int8x8_t)vdup_n_s16(v5);
    v8 = (int8x8_t)vdup_n_s16(v6);
    v9 = a1;
    v10 = a1;
    do
    {
      v12 = *a2++;
      v11 = v12;
      v13 = v12;
      if (v12 >= 0)
        v14 = v5;
      else
        v14 = v6;
      *v10 = v14;
      v15 = (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v13), (int8x16_t)xmmword_1003BFD30));
      *(int8x8_t *)v15.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)v15), v7, v8);
      *(_DWORD *)(v10 + 1) = vmovn_s16(v15).u32[0];
      if ((v11 & 4) != 0)
        v16 = v6;
      else
        v16 = v5;
      v10[5] = v16;
      if ((v11 & 2) != 0)
        v17 = v6;
      else
        v17 = v5;
      v10[6] = v17;
      if ((v11 & 1) != 0)
        v18 = v6;
      else
        v18 = v5;
      v10[7] = v18;
      v19 = (unint64_t)(v10 + 8);
      v9 += 8;
      v20 = (unint64_t)(v10 + 16);
      v10 += 8;
    }
    while (v20 < v4);
    if (v19 >= v4)
      return (_BYTE *)v19;
  }
  v22 = *a2;
  v23 = (_BYTE *)(&a1[a3] - v9);
  v24 = &v23[v19];
  do
  {
    if (v22 < 0)
      v25 = v6;
    else
      v25 = v5;
    *(_BYTE *)v19++ = v25;
    v22 *= 2;
    --v23;
  }
  while (v23);
  return v24;
}

uint64_t sub_1002B18A8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char *v20;
  unint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v26;
  char *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int *v37;
  int v38;
  int v39;
  _DWORD *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  char *v45;
  unint64_t v46;
  int v47;
  int v48;
  char *v49;
  int *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  float v57;
  int v58;
  float v59;
  int v60;
  int v61;
  _DWORD *v62;
  int v63;
  int v64;
  _DWORD *v65;
  int v66;
  int v67;
  BOOL v68;
  float v69;
  float v70;
  int v71;
  char *v72;
  int v74;
  _DWORD *v75;
  int v76;
  int v77;
  char *v78;
  int v79;
  int v80;
  BOOL v81;
  float v82;
  float v83;
  _QWORD *v84;
  _QWORD *v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  int v92;
  _QWORD *v93;
  char *v94;
  _QWORD *v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  _DWORD *v106;
  int v107;
  int v108;
  _DWORD *v109;
  unsigned int v110;
  BOOL v111;
  char *v112;
  int v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[3];
  _QWORD *v125;
  unint64_t v126;
  _QWORD v127[3];
  unsigned __int8 *v128;
  unint64_t v129;
  char *v130;
  unsigned __int8 v131;
  unint64_t v132;
  _QWORD v133[2];
  char *v134;
  __int128 *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE v140[36];
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;

  v6 = *(int *)(a1 + 40);
  *(_QWORD *)&v137 = 0;
  v139 = 0;
  *(_QWORD *)&v140[12] = 0;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  v181 = 0;
  v182 = 0;
  v183 = 0;
  v184 = 0;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v135 = &v137;
  v136 = v6 + 8;
  if ((v6 + 8) >= 0x33)
    operator new[]();
  v133[0] = 0;
  v7 = *(unsigned int *)(a1 + 40);
  v132 = 0;
  v8 = *(_QWORD *)(a1 + 96);
  if ((*(_DWORD *)a1 & 0x3000) != 0x1000 || (*(_DWORD *)a1 & 0x4000) == 0 || *(_DWORD *)(a1 + 44) != 1)
  {
    v122 = 0;
    v123 = 0;
    qmemcpy((void *)sub_10029430C(&v122, 129), "((((chain)->flags & (((1 << 2) - 1)<<12)) == (1 << 12) && (chain)->elem_size == 1) && (((chain)->flags & (1 << (2 + 12))) != 0))", 129);
    sub_100294B74(-215, &v122, "icvApproximateChainTC89", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/approx.cpp", 74);
  }
  if (a2 <= 127)
  {
    v122 = 0;
    v123 = 0;
    qmemcpy((void *)sub_10029430C(&v122, 37), "header_size >= (int)sizeof(CvContour)", 37);
    sub_100294B74(-215, &v122, "icvApproximateChainTC89", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/approx.cpp", 75);
  }
  sub_10021F520(*(_DWORD *)a1 & 0xFFFFF000 | 0xC, a2, 8, a3, (uint64_t)v124);
  if (!*(_DWORD *)(a1 + 40))
  {
    v22 = v125;
    if ((unint64_t)v125 >= v126)
    {
      sub_10021F7C0(v124);
      v22 = v125;
    }
    *v22 = v8;
    ++v125;
    goto LABEL_32;
  }
  v131 = 0;
  sub_1002D53D8(a1, (uint64_t)v127);
  v134 = 0;
  if ((int)v7 >= 1)
  {
    v9 = (__int128 *)v133;
    v10 = v7;
    v11 = &v137;
    while (1)
    {
      v12 = v128;
      v13 = *v130;
      v130 = (char *)v128;
      v14 = v132;
      if (v128)
      {
        v15 = *v128;
        v131 = *v128++;
        if ((unint64_t)(v12 + 1) >= v129)
        {
          sub_10021FB9C(v127, 1);
          v15 = v131;
          v17 = v132;
          LODWORD(v16) = HIDWORD(v132);
        }
        else
        {
          v16 = HIDWORD(v132);
          v17 = v132;
        }
        v18 = (char)v15;
        v20 = (char *)v127 + 2 * (char)v15;
        LODWORD(v132) = v17 + v20[76];
        HIDWORD(v132) = v16 + v20[77];
        if (a4 > 2)
        {
LABEL_18:
          v19 = dword_1003BFD50[v18 - v13 + 7];
          if (v15 != v13)
          {
            *((_QWORD *)v9 + 2) = v11;
            v9 = v11;
          }
          *((_DWORD *)v11 + 3) = v19;
          *(_QWORD *)v11 = v14;
          goto LABEL_13;
        }
      }
      else
      {
        v18 = (char)v131;
        v15 = v131;
        if (a4 > 2)
          goto LABEL_18;
      }
      if (a4 == 1 || v15 != v13)
      {
        v21 = v125;
        if ((unint64_t)v125 >= v126)
        {
          sub_10021F7C0(v124);
          v21 = v125;
        }
        *v21 = v14;
        ++v125;
      }
LABEL_13:
      v11 = (__int128 *)((char *)v11 + 24);
      if (!--v10)
        goto LABEL_31;
    }
  }
  LODWORD(v7) = 0;
  v9 = (__int128 *)v133;
LABEL_31:
  if (a4 >= 3)
  {
    *((_QWORD *)v9 + 2) = 0;
    v26 = v134;
    v27 = v134;
    do
    {
      v28 = 0;
      v29 = 0;
      v30 = 0xAAAAAAAAAAAAAAABLL * ((v27 - (char *)&v137) >> 3);
      v31 = (int *)&v137 + 6 * (int)v30;
      v32 = *v31;
      v33 = v31[1];
      if ((int)v30 <= 0)
        v34 = v7;
      else
        v34 = 0;
      v37 = (int *)&v137 + 6 * (int)v30 + 6 * v34 - 6;
      v35 = *v37;
      v36 = v37[1];
      v38 = v36 - v33;
      if ((int)v30 + 1 >= (int)v7)
        v39 = v7;
      else
        v39 = 0;
      v40 = (_DWORD *)&v137 + 6 * ((int)v30 + 1 - v39);
      v41 = *v40 - v35;
      v42 = v40[1] - v36;
      v43 = v42 * (v32 - v35) + v38 * v41;
      v44 = v41 * v41 + v42 * v42;
      v45 = (char *)&v137 + 24 * (int)v30 + 52;
      v46 = 0xAAAAAAAAAAAAAAABLL * ((v27 - (char *)&v137) >> 3);
      v47 = 2;
      while (1)
      {
        v48 = (int)v30 + v47 >= (int)v7 ? v7 : 0;
        v49 = &v45[-24 * v48];
        v50 = (int *)&v137 + 6 * (int)v30 + 6 * v29 + 6 * (int)(v7 & (((int)v30 - 2 + (int)v29) >> 31)) - 12;
        v51 = *v50;
        v52 = v50[1];
        v53 = *((_DWORD *)v49 - 1) - *v50;
        v54 = *(_DWORD *)v49 - v52;
        v55 = v53 * v53 + v54 * v54;
        if (v44 >= v55)
          break;
        v56 = v54 * (v32 - v51) + (v52 - v33) * v53;
        v57 = (double)v43 * (double)v55 - (double)v56 * (double)v44;
        if (v43 >= 1 && SLODWORD(v57) < 1)
          break;
        if (v43 < 0 && (LODWORD(v57) & 0x80000000) == 0)
          break;
        v45 += 24;
        --v29;
        ++v47;
        LODWORD(v46) = v46 + 1;
        --v28;
        v44 = v53 * v53 + v54 * v54;
        v43 = v56;
      }
      v58 = 1 - v29;
      *((_DWORD *)v27 + 2) = 1 - v29;
      if (a4 == 4)
      {
        v59 = 0.0;
        if ((int)v30 - (int)v29 + 1 >= (int)v7)
          v60 = v7;
        else
          v60 = 0;
        v61 = v30 - v60 - v29 + 1;
        v62 = (_DWORD *)&v137 + 6 * (int)(v30 + v29 - 1 + (v7 & (((int)v30 + (int)v29 - 1) >> 31)));
        v63 = *v62 - v32;
        v64 = v62[1] - v33;
        v65 = (_DWORD *)&v137 + 6 * v61;
        v66 = *v65 - v32;
        v67 = v65[1] - v33;
        if (v64 | v63)
          v68 = (v67 | v66) == 0;
        else
          v68 = 1;
        if (!v68)
        {
          v69 = (double)(v66 * v63 + v67 * v64)
              / sqrt(((double)v64 * (double)v64 + (double)v63 * (double)v63)* ((double)v67 * (double)v67 + (double)v66 * (double)v66));
          v70 = v69 + 1.1;
          v59 = v70;
          if ((2 - v29) >= 3)
          {
            v71 = -(int)v29;
            v72 = (char *)&v137 + 24 * (int)v46;
            do
            {
              if ((int)v30 + v71 >= (int)v7)
                v74 = v7;
              else
                v74 = 0;
              v75 = (_DWORD *)&v137 + 6 * (int)(v30 + v28 + (v7 & (((int)v30 + v28) >> 31)));
              v76 = *v75 - v32;
              v77 = v75[1] - v33;
              v78 = &v72[-24 * v74];
              v79 = *(_DWORD *)v78 - v32;
              v80 = *((_DWORD *)v78 + 1) - v33;
              if (v77 | v76)
                v81 = (v80 | v79) == 0;
              else
                v81 = 1;
              if (v81)
                break;
              v82 = (double)(v79 * v76 + v80 * v77)
                  / sqrt(((double)v77 * (double)v77 + (double)v76 * (double)v76)* ((double)v80 * (double)v80 + (double)v79 * (double)v79));
              v83 = v82 + 1.1;
              if (v71 < v58 && SLODWORD(v59) >= SLODWORD(v83))
                break;
              v72 -= 24;
              ++v28;
              v59 = v83;
            }
            while (v71-- >= 2);
          }
        }
        *((float *)v27 + 3) = v59;
      }
      v27 = (char *)*((_QWORD *)v27 + 2);
    }
    while (v27);
    v84 = v133;
    do
    {
      v86 = *((_DWORD *)v26 + 2);
      v85 = v26;
      if (v86 >= 2)
      {
        v87 = *((_DWORD *)v26 + 3);
        v88 = -1431655765 * ((unint64_t)(v26 - (char *)&v137) >> 3);
        v89 = v86 >> 1;
        v90 = v88 + 1;
        v91 = v88 - 1;
        do
        {
          if (*((_DWORD *)&v137 + 6 * v91 + 6 * (int)(v7 & ((int)v91 >> 31)) + 3) > v87
            || (v90 >= (int)v7 ? (v92 = v7) : (v92 = 0), *((_DWORD *)&v137 + 6 * (v90 - v92) + 3) > v87))
          {
            v84[2] = *((_QWORD *)v26 + 2);
            *((_DWORD *)v26 + 3) = 0;
            v85 = v84;
            goto LABEL_80;
          }
          ++v90;
          --v91;
          --v89;
        }
        while (v89);
        v85 = v26;
      }
LABEL_80:
      v26 = (char *)*((_QWORD *)v26 + 2);
      v84 = v85;
    }
    while (v26);
    v93 = v133;
    v94 = v134;
    do
    {
      v95 = v94;
      if (*((_DWORD *)v94 + 2) == 1)
      {
        v96 = *((_DWORD *)v94 + 3);
        v97 = -1431655765 * ((unint64_t)(v94 - (char *)&v137) >> 3);
        v98 = v97 <= 0 ? v7 : 0;
        if (v96 <= *((_DWORD *)&v137 + 6 * v97 + 6 * v98 - 3)
          || ((v99 = v97 + 1, v99 >= (int)v7) ? (v100 = v7) : (v100 = 0),
              v95 = v94,
              v96 <= *((_DWORD *)&v137 + 6 * (v99 - v100) + 3)))
        {
          v93[2] = *((_QWORD *)v94 + 2);
          *((_DWORD *)v94 + 3) = 0;
          v95 = v93;
        }
      }
      v94 = (char *)*((_QWORD *)v94 + 2);
      v93 = v95;
    }
    while (v94);
    if (a4 == 4)
      goto LABEL_104;
    if (HIDWORD(v137))
    {
      v103 = (int)v7 - 1;
      if (*((_DWORD *)&v137 + 6 * v103 + 3))
      {
        if (v7 < 2)
        {
          LODWORD(v105) = 1;
        }
        else
        {
          v104 = v140;
          v105 = 1;
          v106 = v140;
          while (1)
          {
            v107 = *v106;
            v106 += 6;
            if (!v107)
              break;
            *((_DWORD *)v104 - 6) = 0;
            ++v105;
            v104 = v106;
            if (v7 == v105)
              goto LABEL_104;
          }
        }
        if ((_DWORD)v105 == (_DWORD)v7)
        {
LABEL_104:
          v101 = v134;
          v102 = v125;
          do
          {
            if ((unint64_t)v102 >= v126)
            {
              sub_10021F7C0(v124);
              v102 = v125;
            }
            *v102 = *v101;
            v102 = ++v125;
            v101 = (_QWORD *)v101[2];
          }
          while (v101);
          goto LABEL_32;
        }
        v108 = v105 - 1;
        if ((int)v7 < 3)
        {
          v110 = v7 - 2;
        }
        else
        {
          v109 = (_DWORD *)&v137 + 6 * (v7 - 1) + 3;
          v110 = v7 - 2;
          do
          {
            if (!*((_DWORD *)&v137 + 6 * v110 + 3))
              goto LABEL_123;
            *((_QWORD *)&v137 + 3 * v110 + 2) = 0;
            *v109 = 0;
            v109 -= 6;
            v111 = v110-- != 0;
          }
          while (v110 != 0 && v111);
          v110 = 0;
        }
LABEL_123:
        if (!v108)
        {
          if (v110 == (_DWORD)v7 - 2)
          {
            v108 = -1431655765 * ((unint64_t)(v138 - (_QWORD)&v137) >> 3);
            v112 = (char *)&v137 + 24 * v7;
            *(_OWORD *)v112 = v137;
            *((_QWORD *)v112 + 2) = 0;
            *((_QWORD *)&v137 + 3 * v103 + 2) = v112;
          }
          else
          {
            v108 = 0;
          }
        }
        v134 = (char *)&v137 + 24 * v108;
      }
    }
    v113 = 1;
    v114 = v133;
    v115 = v134;
    v116 = v133;
    while (1)
    {
      while (1)
      {
        v117 = v116;
        v116 = v115;
        v118 = v115[2];
        if (!v118 || v118 - (_QWORD)v116 != 24)
          break;
        ++v113;
        v115 = (_QWORD *)v116[2];
        if (!v115)
          goto LABEL_104;
      }
      if (v113 < 2)
        goto LABEL_139;
      if (v113 == 2)
      {
        v120 = *((_DWORD *)v117 + 3);
        v121 = *((_DWORD *)v116 + 3);
        if (v120 <= v121 && (v120 != v121 || *((_DWORD *)v117 + 2) > *((_DWORD *)v116 + 2)))
          goto LABEL_141;
        v117[2] = v118;
LABEL_139:
        v113 = 1;
        v114 = v116;
        v115 = (_QWORD *)v116[2];
        if (!v115)
          goto LABEL_104;
      }
      else
      {
        v114 = (_QWORD *)v114[2];
LABEL_141:
        v114[2] = v116;
        v113 = 1;
        v114 = v116;
        v115 = (_QWORD *)v116[2];
        if (!v115)
          goto LABEL_104;
      }
    }
  }
LABEL_32:
  v23 = sub_10021F68C(v124);
  if (v135 != &v137 && v135 != 0)
    operator delete[]();
  return v23;
}

void sub_1002B23B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  sub_10029434C(&a11);
  if (a34 != a10 && a34 != 0)
    operator delete[]();
  _Unwind_Resume(a1);
}

void sub_1002B2420(uint64_t a1, uint64_t a2, int a3, int a4, double a5, double a6)
{
  uint64_t v12;
  int v13;
  double v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  double v29;
  double v30;
  uint64_t v31;
  void *__p[2];
  __int128 v33;
  __int128 v34;
  _DWORD v35[16];
  _DWORD *v36;
  void *v37;
  _QWORD v38[2];
  int32x2_t v39;
  _BYTE v40[4];
  _OWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void *v45;
  _QWORD v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int32x2_t *v52;
  unint64_t *v53;
  unint64_t v54[2];
  int32x2_t v55;
  int32x2_t v56;
  _BYTE v57[8];

  sub_100298C2C(v57, &off_100450180);
  if (sub_100261250((int *)a1, -1))
  {
    v47 = 0uLL;
    v12 = sub_10029430C(&v47, 17);
    *(_BYTE *)(v12 + 16) = 48;
    *(_OWORD *)v12 = *(_OWORD *)"_src.depth() == 0";
    sub_100294B74(-215, (uint64_t *)&v47, "Canny", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/canny.cpp", 930);
  }
  sub_10025D920(a1, 0xFFFFFFFF, (uint64_t)&v56);
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a1 + 8) && sub_10025E20C((int *)a1, -1))
  {
    v47 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v47, 134), "(_dst.getObj() != _src.getObj() || _src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))) && \"Inplace parameters are not supported\"", 134);
    sub_100294B74(-215, (uint64_t *)&v47, "Canny", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/canny.cpp", 935);
  }
  v55 = v56;
  sub_10026214C(a2, &v55, 0, -1, 0, 0);
  if (a3 >= 0)
    v13 = 1;
  else
    v13 = a4;
  if (a3 < 0)
    a4 = 1;
  if (!v13)
    a3 &= ~0x80000000;
  if ((a3 & 1) != 0 && ((a3 - 3) < 5 || a3 == -1))
  {
    if (a5 <= a6)
      v14 = a6;
    else
      v14 = a5;
    if (a5 <= a6)
      a6 = a5;
    if (sub_10025D914((_DWORD *)a1) == 0x10000)
    {
      v15 = *(_QWORD *)(a1 + 8);
      v16 = *(_OWORD *)(v15 + 16);
      v47 = *(_OWORD *)v15;
      v48 = v16;
      v49 = *(_OWORD *)(v15 + 32);
      v17 = *(_QWORD *)(v15 + 56);
      v50 = *(_QWORD *)(v15 + 48);
      v51 = v17;
      v52 = (int32x2_t *)&v47 + 1;
      v53 = v54;
      v54[0] = 0;
      v54[1] = 0;
      if (v17)
      {
        v18 = (unsigned int *)(v17 + 20);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
      if (*(int *)(v15 + 4) > 2)
      {
        DWORD1(v47) = 0;
        sub_100256B48((uint64_t)&v47, v15);
      }
      else
      {
        v20 = *(unint64_t **)(v15 + 72);
        v21 = v53;
        *v53 = *v20;
        v21[1] = v20[1];
      }
    }
    else
    {
      sub_10025CCB8(a1, -1, (uint64_t)&v47);
    }
    if (sub_10025D914((_DWORD *)a2) == 0x10000)
    {
      v22 = *(_QWORD *)(a2 + 8);
      v23 = *(_OWORD *)(v22 + 16);
      v41[0] = *(_OWORD *)v22;
      v41[1] = v23;
      v41[2] = *(_OWORD *)(v22 + 32);
      v24 = *(_QWORD *)(v22 + 56);
      v42 = *(_QWORD *)(v22 + 48);
      v43 = v24;
      v44 = (char *)v41 + 8;
      v45 = v46;
      v46[0] = 0;
      v46[1] = 0;
      if (v24)
      {
        v25 = (unsigned int *)(v24 + 20);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 + 1, v25));
      }
      if (*(int *)(v22 + 4) > 2)
      {
        DWORD1(v41[0]) = 0;
        sub_100256B48((uint64_t)v41, v22);
      }
      else
      {
        v27 = *(_QWORD **)(v22 + 72);
        v28 = v45;
        *(_QWORD *)v45 = *v27;
        v28[1] = v27[1];
      }
    }
    else
    {
      sub_10025CCB8(a2, -1, (uint64_t)v41);
    }
    v39 = vrev64_s32(*v52);
    sub_10022FD68((uint64_t)v40, (int *)&v39, v47 & 0xFFF, v48, v54[0]);
    if (a4)
    {
      v29 = fmin(a6, 32767.0);
      v14 = fmin(v14, 32767.0);
      v30 = 1.0;
      if (v29 > 0.0)
        v30 = v29;
      a6 = v29 * v30;
      if (v14 > 0.0)
        v14 = v14 * v14;
    }
    sub_10026F90C();
    sub_10026F9D4();
    v35[0] = 1124007936;
    memset(&v35[1], 0, 60);
    v36 = &v35[2];
    v37 = v38;
    v38[0] = 0;
    v38[1] = 0;
    v33 = 0u;
    v34 = 0u;
    *(_OWORD *)__p = 0u;
    sub_1002B32D8((uint64_t)&v31, (uint64_t)v40, (uint64_t)v35, (uint64_t)__p, (int)a6 - (a6 < (double)(int)a6), (int)v14 - (v14 < (double)(int)v14), a3, a4);
  }
  v47 = 0uLL;
  qmemcpy((void *)sub_10029430C(&v47, 43), "Aperture size should be odd between 3 and 7", 43);
  sub_100294B74(-206, (uint64_t *)&v47, "Canny", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/canny.cpp", 947);
}

void sub_1002B30FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029434C((uint64_t *)(v1 - 256));
  sub_1001D40CC(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B32A4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1004501F0;
  sub_1002953CC((pthread_mutex_t **)(a1 + 72));
  return nullsub_1(a1);
}

void sub_1002B32D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, char a8)
{
  *(_QWORD *)a1 = off_1004501F0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 44) = a6;
  *(_DWORD *)(a1 + 48) = a7;
  *(_BYTE *)(a1 + 52) = a8;
  sub_100294490();
}

void sub_1002B36AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1002B3708(uint64_t a1)
{
  *(_QWORD *)a1 = off_1004501F0;
  sub_1002953CC((pthread_mutex_t **)(a1 + 72));
  nullsub_1(a1);
  operator delete();
}

void sub_1002B374C(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t *v16;
  _DWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t *v23;
  int v24;
  unint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  char v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  unint64_t v51;
  int32x4_t *v52;
  int16x8_t *v53;
  int16x8_t *v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int32x4_t *v61;
  int16x8_t *v62;
  int16x8_t *v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  uint64_t v69;
  uint64_t v70;
  int32x4_t *v71;
  uint64_t v72;
  int16x8_t *v73;
  int16x8_t *v74;
  unint64_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  _DWORD *v80;
  __int16 *v81;
  __int16 *v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint32x4_t *v87;
  uint64_t v88;
  int16x8_t *v89;
  int16x8_t *v90;
  unint64_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  _DWORD *v96;
  __int16 *v97;
  __int16 *v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  int *v116;
  uint64_t v117;
  int v118;
  _BYTE *v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  const float *v127;
  float32x4_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int32x4_t *v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int8x16_t *v141;
  uint64x2_t v142;
  __int32 v143;
  __int32 v144;
  int8x16_t v145;
  __int32 v146;
  unsigned __int32 v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  _BYTE *v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  unint64_t v166;
  int v167;
  int v168;
  unint64_t v169;
  int32x4_t *v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  __int128 v175;
  uint64x2_t v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  _BYTE *v189;
  char *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  int v194;
  unint64_t v195;
  int v196;
  int v197;
  unint64_t v198;
  uint64_t v199;
  int *v200;
  uint64_t v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  _BYTE *v208;
  char *v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  BOOL v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _BYTE *v227;
  _BYTE *v228;
  uint64_t v229;
  char *v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  _BYTE *v235;
  _BYTE *v236;
  _BYTE *v237;
  _BYTE *v238;
  char *v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  char *v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  char *v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  char *v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char *v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char *v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  char *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  char *v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  char *v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  _QWORD *v298;
  unint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  const void **v303;
  char *v304;
  const void **v305;
  char *v306;
  unint64_t v307;
  void **v308;
  void **v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  void *v313;
  void **v314;
  void **v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  void *v319;
  unsigned int *v320;
  unsigned int v321;
  unsigned int v322;
  uint64_t v323;
  _BYTE *v324;
  unsigned int *v325;
  unsigned int v326;
  unsigned int v327;
  uint64_t v328;
  _BYTE *v329;
  int v330;
  int *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _BYTE *v338;
  _BYTE *v339;
  _BYTE *v340;
  _BYTE *v341;
  uint64_t v342;
  uint64_t v343;
  int32x4_t v344;
  uint64_t v345;
  unint64_t v346;
  _OWORD v347[4];
  char *v348;
  void *v349;
  _BYTE v350[992];
  unint64_t v351;
  _BYTE *v352;
  uint64_t v353;
  int v354;
  int v355;
  _OWORD *v356;
  uint64_t v357;
  char v358[8];
  int v359;
  void *__p[2];
  __int128 v361;
  __int128 v362;
  void *v363[2];
  __int128 v364;
  __int128 v365;
  _BYTE *v366;
  unint64_t v367;
  _BYTE v368[1040];
  _BYTE *v369;
  unint64_t v370;
  _BYTE v371[1040];
  _BYTE v372[64];
  _BYTE *v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  _BYTE v377[64];
  _BYTE *v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  char v382[8];
  int v383;
  uint64_t v384[3];

  sub_100298C2C(v382, &off_100450220);
  memset(&v377[4], 0, 60);
  v378 = &v377[8];
  v379 = &v380;
  v380 = 0;
  v381 = 0;
  memset(&v372[4], 0, 60);
  v373 = &v372[8];
  v374 = &v375;
  v376 = 0;
  v375 = 0;
  v369 = v371;
  v370 = 0;
  v366 = v368;
  v367 = 0;
  v365 = 0u;
  v364 = 0u;
  *(_OWORD *)v363 = 0u;
  v362 = 0u;
  v361 = 0u;
  *(_OWORD *)__p = 0u;
  v4 = a2[1];
  if (*a2 <= 1)
    v5 = 1;
  else
    v5 = *a2;
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_DWORD *)v377 = 1124007936;
  if (v4 + 1 < v6)
    v7 = v4 + 1;
  else
    v7 = v6;
  *(_DWORD *)v372 = 1124007936;
  sub_100298C2C(v358, &off_100450240);
  v8 = (v5 - 1);
  if (*(_BYTE *)(a1 + 53))
  {
    v9 = *(_DWORD **)(a1 + 8);
    v351 = __PAIR64__(v7, v8);
    v384[0] = 0x7FFFFFFF80000000;
    sub_100257548((uint64_t)v347, v9, (int *)&v351, v384);
    v357 = 0;
    v354 = 16842752;
    v356 = v347;
    LODWORD(v351) = 33619968;
    v353 = 0;
    v352 = v377;
    sub_1002E4770((uint64_t)&v354, (uint64_t)&v351, 3, 1, 0, *(_DWORD *)(a1 + 48), 1, 1.0);
  }
  v10 = *(_DWORD **)(a1 + 8);
  v354 = v5 - 1;
  v355 = v7;
  v351 = 0x7FFFFFFF80000000;
  sub_100257548((uint64_t)v347, v10, &v354, (uint64_t *)&v351);
  if (*(_QWORD *)&v377[56])
  {
    v11 = (unsigned int *)(*(_QWORD *)&v377[56] + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90((uint64_t)v377);
  }
  if (*(int *)&v377[4] >= 1)
  {
    v14 = 0;
    v15 = v378;
    do
      *(_DWORD *)&v15[4 * v14++] = 0;
    while (v14 < *(int *)&v377[4]);
  }
  *(_OWORD *)v377 = v347[0];
  *(_OWORD *)&v377[16] = v347[1];
  *(_OWORD *)&v377[32] = v347[2];
  *(_OWORD *)&v377[48] = v347[3];
  if (v379 == &v380)
  {
    v16 = (uint64_t *)v349;
    if (SDWORD1(v347[0]) <= 2)
      goto LABEL_19;
  }
  else
  {
    j__free(v379);
    v378 = &v377[8];
    v379 = &v380;
    v16 = (uint64_t *)v349;
    if (SDWORD1(v347[0]) <= 2)
    {
LABEL_19:
      v380 = *v16;
      v381 = v16[1];
      goto LABEL_22;
    }
  }
  v378 = v348;
  v379 = v16;
  v16 = (uint64_t *)v350;
  v348 = (char *)v347 + 8;
  v349 = v350;
LABEL_22:
  LODWORD(v347[0]) = 1124007936;
  memset((char *)v347 + 4, 0, 60);
  if (v16 != (uint64_t *)v350)
    j__free(v16);
  v17 = *(_DWORD **)(a1 + 16);
  v354 = v5 - 1;
  v355 = v7;
  v351 = 0x7FFFFFFF80000000;
  sub_100257548((uint64_t)v347, v17, &v354, (uint64_t *)&v351);
  if (*(_QWORD *)&v372[56])
  {
    v18 = (unsigned int *)(*(_QWORD *)&v372[56] + 20);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      sub_100256C90((uint64_t)v372);
  }
  if (*(int *)&v372[4] >= 1)
  {
    v21 = 0;
    v22 = v373;
    do
      *(_DWORD *)&v22[4 * v21++] = 0;
    while (v21 < *(int *)&v372[4]);
  }
  *(_OWORD *)v372 = v347[0];
  *(_OWORD *)&v372[16] = v347[1];
  *(_OWORD *)&v372[32] = v347[2];
  *(_OWORD *)&v372[48] = v347[3];
  if (v374 == &v375)
  {
    v23 = (uint64_t *)v349;
    if (SDWORD1(v347[0]) <= 2)
      goto LABEL_34;
  }
  else
  {
    j__free(v374);
    v374 = &v375;
    v373 = &v372[8];
    v23 = (uint64_t *)v349;
    if (SDWORD1(v347[0]) <= 2)
    {
LABEL_34:
      v375 = *v23;
      v376 = v23[1];
      goto LABEL_37;
    }
  }
  v374 = v23;
  v373 = v348;
  v23 = (uint64_t *)v350;
  v348 = (char *)v347 + 8;
  v349 = v350;
LABEL_37:
  LODWORD(v347[0]) = 1124007936;
  memset((char *)v347 + 4, 0, 60);
  if (v23 != (uint64_t *)v350)
    j__free(v23);
  sub_100298C2C(&v354, &off_100450260);
  v24 = *(_DWORD *)(a1 + 64);
  if (v24 < 2)
  {
    v341 = 0;
    v27 = 0;
    v26 = 0;
    v28 = 0;
    goto LABEL_58;
  }
  if (v370 >= 2 * *(int *)&v377[12])
  {
    v370 = 2 * *(int *)&v377[12];
    v25 = 2 * *(int *)&v372[12];
    if (v367 < v25)
    {
LABEL_48:
      v26 = v368;
      if (v366 != v368)
      {
        if (v366)
          operator delete[]();
        v366 = v368;
      }
      v367 = v25;
      if (v25 >= 0x209)
        operator new[]();
      goto LABEL_57;
    }
  }
  else
  {
    if (v369 != v371)
    {
      if (v369)
        operator delete[]();
      v369 = v371;
    }
    v370 = 2 * *(int *)&v377[12];
    if ((2 * *(_DWORD *)&v377[12]) >= 0x209)
      operator new[]();
    v25 = 2 * *(int *)&v372[12];
    if (v367 < v25)
      goto LABEL_48;
  }
  v367 = v25;
  v26 = v366;
LABEL_57:
  v28 = v369;
  v27 = &v369[2 * *(int *)&v377[12]];
  v341 = &v26[2 * *(int *)&v372[12]];
  v24 = *(_DWORD *)(a1 + 64);
LABEL_58:
  v29 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)&v347[0] = &v347[1];
  *((_QWORD *)&v347[0] + 1) = 3 * v29 * v24 + 48;
  if (*((_QWORD *)&v347[0] + 1) >= 0x109uLL)
    operator new[]();
  v30 = &v347[2];
  v31 = 4 * v29 * v24;
  v346 = ((unint64_t)&v347[2] + v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  v32 = (v346 + v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  if ((_DWORD)v8 == *a2)
  {
    bzero((void *)(v32 - 4), 4 * v29);
    v33 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    *(_DWORD *)(v32 - 4) = 0;
    v33 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(v32 + 4 * *(int *)(v33 + 12)) = 0;
  }
  HIDWORD(v347[1]) = 0;
  *((_DWORD *)&v347[2] + *(int *)(v33 + 12)) = 0;
  *(_DWORD *)(v346 - 4) = 0;
  *(_DWORD *)(v346 + 4 * *(int *)(v33 + 12)) = 0;
  LODWORD(v33) = a2[1];
  if ((int)v8 <= (int)v33)
  {
    v34 = v5 - 1;
    v330 = v7;
    v334 = v7;
    v342 = v5 - 1 - v8;
    v345 = a1;
    v331 = a2;
    v332 = (v5 - 1);
    v333 = v5;
    while (1)
    {
      v36 = v32;
      v32 = (unint64_t)v30;
      v37 = v34;
      if (v34 >= v334)
        break;
      v38 = *(_QWORD *)&v377[16];
      v39 = *v379;
      v40 = *(_QWORD *)&v372[16];
      v41 = *(_QWORD *)v374;
      v42 = (*(_DWORD *)(a1 + 64) * *(_DWORD *)(*(_QWORD *)(a1 + 8) + 12));
      if (*(_BYTE *)(a1 + 68))
        v43 = (int)v42 < 8;
      else
        v43 = 1;
      v44 = v43;
      if (*(_BYTE *)(a1 + 52))
      {
        if ((v44 & 1) != 0)
        {
          v45 = 0;
          if ((int)v42 <= 0)
            goto LABEL_115;
        }
        else
        {
          v51 = 0;
          v52 = (int32x4_t *)(v32 + 16);
          v53 = (int16x8_t *)(*(_QWORD *)&v372[16] + v41 * v342);
          v54 = (int16x8_t *)(*(_QWORD *)&v377[16] + v39 * v342);
          do
          {
            v55 = *v54++;
            v56 = v55;
            v57 = *v53++;
            v52[-1] = vmlal_s16(vmull_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v57.i8), *(int16x4_t *)v56.i8, *(int16x4_t *)v56.i8);
            *v52 = vmlal_high_s16(vmull_high_s16(v57, v57), v56, v56);
            v51 += 8;
            v52 += 2;
          }
          while (v51 <= (v42 - 8));
          v45 = v51;
          if ((int)v51 >= (int)v42)
            goto LABEL_115;
        }
        v58 = v42 - v45;
        if ((unint64_t)(v42 - v45) < 0x10)
        {
          v59 = v45;
LABEL_103:
          v80 = (_DWORD *)(v32 + 4 * v59);
          v81 = (__int16 *)(v40 + 2 * v59 + v41 * v342);
          v82 = (__int16 *)(v38 + 2 * v59 + v39 * v342);
          v83 = v42 - v59;
          do
          {
            v84 = *v82++;
            v85 = v84 * v84;
            v86 = *v81++;
            *v80++ = v85 + v86 * v86;
            --v83;
          }
          while (v83);
          goto LABEL_115;
        }
        v59 = (v58 & 0xFFFFFFFFFFFFFFF0) + v45;
        v71 = (int32x4_t *)(v32 + 4 * v45 + 32);
        v72 = 2 * v45;
        v73 = (int16x8_t *)(v38 + 2 * v45 + v39 * v342 + 16);
        v74 = (int16x8_t *)(v40 + v72 + v41 * v342 + 16);
        v75 = v58 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v76 = v73[-1];
          v77 = *v73;
          v78 = v74[-1];
          v79 = *v74;
          v71[-2] = vmlal_s16(vmull_s16(*(int16x4_t *)v78.i8, *(int16x4_t *)v78.i8), *(int16x4_t *)v76.i8, *(int16x4_t *)v76.i8);
          v71[-1] = vmlal_high_s16(vmull_high_s16(v78, v78), v76, v76);
          *v71 = vmlal_s16(vmull_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v79.i8), *(int16x4_t *)v77.i8, *(int16x4_t *)v77.i8);
          v71[1] = vmlal_high_s16(vmull_high_s16(v79, v79), v77, v77);
          v71 += 4;
          v73 += 2;
          v74 += 2;
          v75 -= 16;
        }
        while (v75);
        if (v58 != (v58 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_103;
      }
      else
      {
        if ((v44 & 1) != 0)
        {
          v50 = 0;
          if ((int)v42 <= 0)
            goto LABEL_115;
        }
        else
        {
          v60 = 0;
          v61 = (int32x4_t *)(v32 + 16);
          v62 = (int16x8_t *)(*(_QWORD *)&v372[16] + v41 * v342);
          v63 = (int16x8_t *)(*(_QWORD *)&v377[16] + v39 * v342);
          do
          {
            v64 = *v63++;
            v65 = v64;
            v66 = *v62++;
            v67 = vabsq_s16(v65);
            v68 = vabsq_s16(v66);
            v61[-1] = vaddl_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v67.i8);
            *v61 = vaddl_high_s16(v68, v67);
            v60 += 8;
            v61 += 2;
          }
          while (v60 <= (v42 - 8));
          v50 = v60;
          if ((int)v60 >= (int)v42)
            goto LABEL_115;
        }
        v69 = v42 - v50;
        if ((unint64_t)(v42 - v50) >= 0x10)
        {
          v70 = (v69 & 0xFFFFFFFFFFFFFFF0) + v50;
          v87 = (uint32x4_t *)(v32 + 4 * v50 + 32);
          v88 = 2 * v50;
          v89 = (int16x8_t *)(v38 + 2 * v50 + v39 * v342 + 16);
          v90 = (int16x8_t *)(v40 + v88 + v41 * v342 + 16);
          v91 = v69 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v92 = (uint16x8_t)vabsq_s16(v89[-1]);
            v93 = (uint16x8_t)vabsq_s16(*v89);
            v94 = (uint16x8_t)vabsq_s16(v90[-1]);
            v95 = (uint16x8_t)vabsq_s16(*v90);
            v87[-2] = vaddl_u16(*(uint16x4_t *)v94.i8, *(uint16x4_t *)v92.i8);
            v87[-1] = vaddl_high_u16(v94, v92);
            *v87 = vaddl_u16(*(uint16x4_t *)v95.i8, *(uint16x4_t *)v93.i8);
            v87[1] = vaddl_high_u16(v95, v93);
            v87 += 4;
            v89 += 2;
            v90 += 2;
            v91 -= 16;
          }
          while (v91);
          if (v69 == (v69 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_115;
        }
        else
        {
          v70 = v50;
        }
        v96 = (_DWORD *)(v32 + 4 * v70);
        v97 = (__int16 *)(v40 + 2 * v70 + v41 * v342);
        v98 = (__int16 *)(v38 + 2 * v70 + v39 * v342);
        v99 = v42 - v70;
        do
        {
          v101 = *v98++;
          v100 = v101;
          if (v101 < 0)
            v100 = -v100;
          v103 = *v97++;
          v102 = v103;
          if (v103 < 0)
            v102 = -v102;
          *v96++ = v102 + v100;
          --v99;
        }
        while (v99);
      }
LABEL_115:
      v104 = *(_DWORD *)(a1 + 64);
      if (v104 >= 2)
      {
        v105 = *(_QWORD *)(a1 + 8);
        v106 = *(int *)(v105 + 12);
        if ((int)v106 >= 1)
        {
          v107 = 0;
          v108 = 0;
          v109 = v38 + v39 * (v37 - v8);
          v110 = v40 + v41 * (v37 - v8);
          do
          {
            v113 = v108;
            if (v104 >= 2)
            {
              v114 = v104;
              v115 = v108 + 1;
              v116 = (int *)(v32 + 4 + 4 * v108);
              v117 = v114 - 1;
              v113 = v108;
              do
              {
                v118 = *v116++;
                if (v118 > *(_DWORD *)(v32 + 4 * v113))
                  v113 = v115;
                ++v115;
                --v117;
              }
              while (v117);
            }
            *(_DWORD *)(v32 + 4 * v107) = *(_DWORD *)(v32 + 4 * v113);
            v111 = 2 * v113;
            v112 = 2 * v107;
            *(_WORD *)&v28[v112] = *(_WORD *)(v109 + v111);
            *(_WORD *)&v26[v112] = *(_WORD *)(v110 + v111);
            ++v107;
            v104 = *(_DWORD *)(a1 + 64);
            v108 += v104;
            v106 = *(int *)(v105 + 12);
          }
          while (v107 < v106);
        }
        *(_DWORD *)(v32 + 4 * v106) = 0;
        v119 = v26;
        v120 = v28;
        v28 = v27;
        v26 = v341;
        v341 = v119;
        v27 = v120;
      }
      if (v37 > *a2)
        goto LABEL_127;
LABEL_66:
      v34 = v37 + 1;
      v33 = a2[1];
      ++v342;
      v35 = v37;
      v30 = (_OWORD *)v346;
      v346 = v36;
      if (v35 >= v33)
      {
        v7 = v330;
        goto LABEL_258;
      }
    }
    bzero((void *)(v32 - 4), 4 * *(_QWORD *)(a1 + 56));
    v46 = *(_DWORD *)(a1 + 64);
    v47 = v46 < 2;
    if (v46 >= 2)
      v48 = v26;
    else
      v48 = v341;
    if (v47)
      v49 = v27;
    else
      v49 = v28;
    if (!v47)
    {
      v26 = v341;
      v28 = v27;
    }
    v341 = v48;
    v27 = v49;
LABEL_127:
    v121 = *(_QWORD *)(a1 + 24);
    v337 = *(_QWORD *)(v121 + 16);
    v338 = v27;
    v336 = **(_QWORD **)(v121 + 72);
    v122 = 16;
    if (!*(_BYTE *)(a1 + 68))
      v122 = 1;
    v123 = (uint64_t)v28;
    v335 = v122;
    v124 = v337 + v336 * v37 + v122;
    *(_BYTE *)(v124 - 1) = 1;
    *(_BYTE *)(v124 + *(int *)(*(_QWORD *)(a1 + 8) + 12)) = 1;
    v125 = v26;
    v339 = (_BYTE *)v123;
    if (*(_DWORD *)(a1 + 64) == 1)
    {
      v123 = *(_QWORD *)&v377[16] + *v379 * (v37 - v5);
      v125 = (_BYTE *)(*(_QWORD *)&v372[16] + *(_QWORD *)v374 * (v37 - v5));
    }
    v126 = *(_QWORD *)(a1 + 8);
    v343 = v37;
    v340 = v26;
    if (*(_BYTE *)(a1 + 68))
    {
      v127 = (const float *)(a1 + 40);
      v128 = vld1q_dup_f32(v127);
      v344 = (int32x4_t)v128;
      v129 = *(_DWORD *)(v126 + 12);
      if (v129 < 32)
      {
        LODWORD(v130) = 0;
        if (v129 - 16 >= 0)
          goto LABEL_177;
        goto LABEL_216;
      }
      v130 = 0;
      while (2)
      {
        v132 = (int32x4_t *)(v36 + 4 * v130);
        v133 = vcgtq_s32(*v132, v344);
        v134 = vcgtq_s32(v132[1], v344);
        v135 = vcgtq_s32(v132[2], v344);
        v136 = vcgtq_s32(v132[3], v344);
        v137 = v132[4];
        v138 = v132[5];
        v139 = v132[6];
        v140 = v132[7];
        v141 = (int8x16_t *)(v124 + v130);
        v142 = vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vshlq_u8(vshrq_n_u8((uint8x16_t)vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32(v133), v134)), vqmovn_high_s32(vqmovn_s32(v135), v136)), 7uLL), (uint8x16_t)xmmword_1003BFDA0))));
        v143 = v142.i32[2];
        v144 = v142.i32[0];
        v145 = (int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vshlq_u8(vshrq_n_u8((uint8x16_t)vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcgtq_s32(v137, v344)), vcgtq_s32(v138, v344))), vqmovn_high_s32(vqmovn_s32(vcgtq_s32(v139, v344)), vcgtq_s32(v140, v344))), 7uLL), (uint8x16_t)xmmword_1003BFDA0))));
        v134.i32[0] = vextq_s8(v145, v145, 8uLL).u32[0];
        v134.i32[1] = v145.i32[0];
        *(uint32x2_t *)v145.i8 = vshl_u32(*(uint32x2_t *)v134.i8, (uint32x2_t)0x1000000018);
        v146 = v144 + (v143 << 8);
        v147 = vadd_s32(*(int32x2_t *)v145.i8, vdup_lane_s32(*(int32x2_t *)v145.i8, 1)).u32[0];
        v145.i64[0] = 0x101010101010101;
        v145.i64[1] = 0x101010101010101;
        *v141 = v145;
        v141[1] = v145;
        v148 = v147 | v146;
        if (v147 | v146)
        {
          v149 = v130;
          do
          {
            v151 = __clz(__rbit32(v148));
            v152 = (int)(v149 + v151);
            v153 = *(_DWORD *)(v36 + 4 * v152);
            v154 = *(__int16 *)(v123 + 2 * v152);
            v155 = *(__int16 *)&v125[2 * v152];
            if (v154 >= 0)
              v156 = *(__int16 *)(v123 + 2 * v152);
            else
              v156 = -v154;
            if (v155 >= 0)
              v157 = *(__int16 *)&v125[2 * v152];
            else
              v157 = -v155;
            v158 = v157 << 15;
            if (v158 >= (13573 * v156))
            {
              if (v158 <= 79109 * v156)
              {
                v167 = ((v155 ^ v154) >> 31) | 1;
                if (v153 <= *(_DWORD *)(v346 + 4 * ((int)v152 - v167))
                  || v153 <= *(_DWORD *)(v32 + 4 * (v167 + (int)v152)))
                {
                  goto LABEL_142;
                }
                v168 = *(_DWORD *)(a1 + 44);
                v160 = (_BYTE *)(v124 + v152);
                if (v153 > v168)
                {
                  *v160 = 2;
                  v161 = (char *)v363[1];
                  if ((void *)v364 == v363[1])
                    v169 = 0;
                  else
                    v169 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
                  v163 = *((_QWORD *)&v365 + 1);
                  v164 = *((_QWORD *)&v365 + 1) + v365;
                  if (v169 != *((_QWORD *)&v365 + 1) + (_QWORD)v365)
                    goto LABEL_175;
LABEL_174:
                  sub_1002B5AB8((uint64_t)v363);
                  v163 = *((_QWORD *)&v365 + 1);
                  v161 = (char *)v363[1];
                  v164 = v365 + *((_QWORD *)&v365 + 1);
                  goto LABEL_175;
                }
              }
              else
              {
                if (v153 <= *(_DWORD *)(v346 + 4 * v152) || v153 < *(_DWORD *)(v32 + 4 * v152))
                  goto LABEL_142;
                v165 = *(_DWORD *)(a1 + 44);
                v160 = (_BYTE *)(v124 + v152);
                if (v153 > v165)
                {
                  *v160 = 2;
                  v161 = (char *)v363[1];
                  if ((void *)v364 == v363[1])
                    v166 = 0;
                  else
                    v166 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
                  v163 = *((_QWORD *)&v365 + 1);
                  v164 = *((_QWORD *)&v365 + 1) + v365;
                  if (v166 != *((_QWORD *)&v365 + 1) + (_QWORD)v365)
                    goto LABEL_175;
                  goto LABEL_174;
                }
              }
            }
            else
            {
              if (v153 <= *(_DWORD *)(v36 + 4 * ((int)v152 - 1)) || v153 < *(_DWORD *)(v36 + 4 * ((int)v152 + 1)))
                goto LABEL_142;
              v159 = *(_DWORD *)(a1 + 44);
              v160 = (_BYTE *)(v124 + v152);
              if (v153 > v159)
              {
                *v160 = 2;
                v161 = (char *)v363[1];
                if ((void *)v364 == v363[1])
                  v162 = 0;
                else
                  v162 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
                v163 = *((_QWORD *)&v365 + 1);
                v164 = *((_QWORD *)&v365 + 1) + v365;
                if (v162 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
                  goto LABEL_174;
LABEL_175:
                *(_QWORD *)(*(_QWORD *)&v161[(v164 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v164 & 0x1FF)) = v160;
                *((_QWORD *)&v365 + 1) = v163 + 1;
                goto LABEL_141;
              }
            }
            *v160 = 0;
LABEL_141:
            a1 = v345;
LABEL_142:
            v150 = v148 >> v151;
            v149 = v152 + 1;
            v148 = v148 >> v151 >> 1;
          }
          while (v150 > 1);
        }
        v130 += 32;
        v126 = *(_QWORD *)(a1 + 8);
        v131 = *(int *)(v126 + 12);
        if (v130 <= v131 - 32)
          continue;
        break;
      }
      a2 = v331;
      v37 = v343;
      if ((int)v130 <= (int)v131 - 16)
      {
LABEL_177:
        v170 = (int32x4_t *)(v36 + 4 * v130);
        v171 = *v170;
        v172 = v170[1];
        v173 = v170[2];
        v174 = v170[3];
        *(_QWORD *)&v175 = 0x101010101010101;
        *((_QWORD *)&v175 + 1) = 0x101010101010101;
        *(_OWORD *)(v124 + v130) = v175;
        v176 = vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vshlq_u8(vshrq_n_u8((uint8x16_t)vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcgtq_s32(v171, v344)), vcgtq_s32(v172, v344))), vqmovn_high_s32(vqmovn_s32(vcgtq_s32(v173, v344)), vcgtq_s32(v174, v344))), 7uLL), (uint8x16_t)xmmword_1003BFDA0))));
        v177 = v176.i32[0] + (v176.i32[2] << 8);
        if (v177)
        {
          v178 = v130;
          do
          {
            v180 = __clz(__rbit32(v177));
            v181 = (int)(v178 + v180);
            v182 = *(_DWORD *)(v36 + 4 * v181);
            v183 = *(__int16 *)(v123 + 2 * v181);
            v184 = *(__int16 *)&v125[2 * v181];
            if (v183 >= 0)
              v185 = *(__int16 *)(v123 + 2 * v181);
            else
              v185 = -v183;
            if (v184 >= 0)
              v186 = *(__int16 *)&v125[2 * v181];
            else
              v186 = -v184;
            v187 = v186 << 15;
            if (v187 >= (13573 * v185))
            {
              if (v187 <= 79109 * v185)
              {
                v196 = ((v184 ^ v183) >> 31) | 1;
                if (v182 <= *(_DWORD *)(v346 + 4 * ((int)v181 - v196))
                  || v182 <= *(_DWORD *)(v32 + 4 * (v196 + (int)v181)))
                {
                  goto LABEL_181;
                }
                v197 = *(_DWORD *)(a1 + 44);
                v189 = (_BYTE *)(v124 + v181);
                if (v182 > v197)
                {
                  *v189 = 2;
                  v190 = (char *)v363[1];
                  if ((void *)v364 == v363[1])
                    v198 = 0;
                  else
                    v198 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
                  v192 = *((_QWORD *)&v365 + 1);
                  v193 = *((_QWORD *)&v365 + 1) + v365;
                  if (v198 != *((_QWORD *)&v365 + 1) + (_QWORD)v365)
                    goto LABEL_214;
LABEL_213:
                  sub_1002B5AB8((uint64_t)v363);
                  v192 = *((_QWORD *)&v365 + 1);
                  v190 = (char *)v363[1];
                  v193 = v365 + *((_QWORD *)&v365 + 1);
                  goto LABEL_214;
                }
              }
              else
              {
                if (v182 <= *(_DWORD *)(v346 + 4 * v181) || v182 < *(_DWORD *)(v32 + 4 * v181))
                  goto LABEL_181;
                v194 = *(_DWORD *)(a1 + 44);
                v189 = (_BYTE *)(v124 + v181);
                if (v182 > v194)
                {
                  *v189 = 2;
                  v190 = (char *)v363[1];
                  if ((void *)v364 == v363[1])
                    v195 = 0;
                  else
                    v195 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
                  v192 = *((_QWORD *)&v365 + 1);
                  v193 = *((_QWORD *)&v365 + 1) + v365;
                  if (v195 != *((_QWORD *)&v365 + 1) + (_QWORD)v365)
                    goto LABEL_214;
                  goto LABEL_213;
                }
              }
            }
            else
            {
              if (v182 <= *(_DWORD *)(v36 + 4 * ((int)v181 - 1)) || v182 < *(_DWORD *)(v36 + 4 * ((int)v181 + 1)))
                goto LABEL_181;
              v188 = *(_DWORD *)(a1 + 44);
              v189 = (_BYTE *)(v124 + v181);
              if (v182 > v188)
              {
                *v189 = 2;
                v190 = (char *)v363[1];
                if ((void *)v364 == v363[1])
                  v191 = 0;
                else
                  v191 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
                v192 = *((_QWORD *)&v365 + 1);
                v193 = *((_QWORD *)&v365 + 1) + v365;
                if (v191 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
                  goto LABEL_213;
LABEL_214:
                *(_QWORD *)(*(_QWORD *)&v190[(v193 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v193 & 0x1FF)) = v189;
                *((_QWORD *)&v365 + 1) = v192 + 1;
                goto LABEL_180;
              }
            }
            *v189 = 0;
LABEL_180:
            a1 = v345;
LABEL_181:
            v179 = v177 >> v180;
            v178 = v181 + 1;
            v177 = v177 >> v180 >> 1;
          }
          while (v179 > 1);
        }
        LODWORD(v130) = v130 | 0x10;
        v126 = *(_QWORD *)(a1 + 8);
        a2 = v331;
        v37 = v343;
      }
    }
    else
    {
      LODWORD(v130) = 0;
    }
LABEL_216:
    if ((int)v130 < *(_DWORD *)(v126 + 12))
    {
      v199 = (int)v130;
      v200 = (int *)(v36 + 4 * (int)v130);
      v201 = v337 + v335 + v336 * v37;
      do
      {
        v202 = *v200;
        if (*v200 > *(_DWORD *)(a1 + 40))
        {
          v203 = *(__int16 *)(v123 + 2 * v199);
          v204 = *(__int16 *)&v125[2 * v199];
          if (v203 >= 0)
            v205 = *(__int16 *)(v123 + 2 * v199);
          else
            v205 = -v203;
          if (v204 >= 0)
            v206 = *(__int16 *)&v125[2 * v199];
          else
            v206 = -v204;
          v207 = v206 << 15;
          if (v207 >= (13573 * v205))
          {
            if (v207 <= 79109 * v205)
            {
              v214 = (v204 ^ v203) < 0;
              v215 = 1;
              if (v214)
                v215 = -1;
              if (v202 > *(_DWORD *)(v346 - 4 * v215 + 4 * v199) && v202 > *(_DWORD *)(v32 + 4 * (v215 + v199)))
              {
                v208 = (_BYTE *)(v201 + v199);
                if (v202 <= *(_DWORD *)(a1 + 44))
                {
LABEL_256:
                  *v208 = 0;
                  v37 = v343;
                  goto LABEL_219;
                }
                *v208 = 2;
                v209 = (char *)v363[1];
                if ((void *)v364 == v363[1])
                  v216 = 0;
                else
                  v216 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
                v211 = *((_QWORD *)&v365 + 1);
                v212 = *((_QWORD *)&v365 + 1) + v365;
                if (v216 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
                {
LABEL_254:
                  sub_1002B5AB8((uint64_t)v363);
                  v211 = *((_QWORD *)&v365 + 1);
                  v209 = (char *)v363[1];
                  v212 = v365 + *((_QWORD *)&v365 + 1);
                }
LABEL_255:
                *(_QWORD *)(*(_QWORD *)&v209[(v212 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v212 & 0x1FF)) = v208;
                *((_QWORD *)&v365 + 1) = v211 + 1;
                v37 = v343;
                goto LABEL_219;
              }
            }
            else if (v202 > *(_DWORD *)(v346 + 4 * v199) && v202 >= *(_DWORD *)(v32 + 4 * v199))
            {
              v208 = (_BYTE *)(v201 + v199);
              if (v202 <= *(_DWORD *)(a1 + 44))
                goto LABEL_256;
              *v208 = 2;
              v209 = (char *)v363[1];
              if ((void *)v364 == v363[1])
                v213 = 0;
              else
                v213 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
              v211 = *((_QWORD *)&v365 + 1);
              v212 = *((_QWORD *)&v365 + 1) + v365;
              if (v213 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
                goto LABEL_254;
              goto LABEL_255;
            }
          }
          else if (v202 > *(v200 - 1) && v202 >= v200[1])
          {
            v208 = (_BYTE *)(v201 + v199);
            if (v202 <= *(_DWORD *)(a1 + 44))
              goto LABEL_256;
            *v208 = 2;
            v209 = (char *)v363[1];
            if ((void *)v364 == v363[1])
              v210 = 0;
            else
              v210 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
            v211 = *((_QWORD *)&v365 + 1);
            v212 = *((_QWORD *)&v365 + 1) + v365;
            if (v210 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
              goto LABEL_254;
            goto LABEL_255;
          }
        }
        *(_BYTE *)(v201 + v199) = 1;
LABEL_219:
        ++v199;
        ++v200;
      }
      while (v199 < *(int *)(*(_QWORD *)(a1 + 8) + 12));
    }
    v8 = v332;
    v5 = v333;
    v28 = v339;
    v26 = v340;
    v27 = v338;
    goto LABEL_66;
  }
LABEL_258:
  v217 = *(_QWORD *)(a1 + 24);
  v218 = *(_QWORD *)(v217 + 16);
  if ((_DWORD)v8)
  {
    v219 = v218 + *(_QWORD *)(a1 + 56) * (*a2 + 2);
    if (v7 == *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8))
    {
LABEL_260:
      v220 = *(_QWORD *)(v217 + 40);
      goto LABEL_263;
    }
  }
  else
  {
    v219 = *(_QWORD *)(v217 + 16);
    if (v7 == *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8))
      goto LABEL_260;
  }
  v220 = v218 + *(_QWORD *)(a1 + 56) * (int)v33;
LABEL_263:
  sub_100298C2C(&v351, &off_100450280);
  v221 = *((_QWORD *)&v365 + 1);
  if (*((_QWORD *)&v365 + 1))
  {
    v222 = v220 - v219;
    do
    {
      while (1)
      {
        v223 = *(_QWORD *)(*(_QWORD *)((char *)v363[1]
                                     + (((unint64_t)(v365 + v221 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v365 + v221 - 1) & 0x1FF));
        if ((void *)v364 == v363[1])
          v224 = 0;
        else
          v224 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
        *((_QWORD *)&v365 + 1) = v221 - 1;
        if (v224 - (v221 + (_QWORD)v365) + 1 >= 0x400)
        {
          operator delete(*(void **)(v364 - 8));
          *(_QWORD *)&v364 = v364 - 8;
        }
        if ((int)v223 - (int)v219 >= v222)
          break;
        v225 = *(_QWORD *)(a1 + 56);
        if (*(_BYTE *)(v223 + ~v225))
        {
          if (*(_BYTE *)(v223 - v225))
            goto LABEL_275;
LABEL_331:
          *(_BYTE *)(v223 - v225) = 2;
          v264 = (char *)v363[1];
          v265 = *(_QWORD *)(a1 + 56);
          if ((void *)v364 == v363[1])
            v266 = 0;
          else
            v266 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
          v267 = *((_QWORD *)&v365 + 1);
          v268 = *((_QWORD *)&v365 + 1) + v365;
          if (v266 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
          {
            sub_1002B5AB8((uint64_t)v363);
            v267 = *((_QWORD *)&v365 + 1);
            v264 = (char *)v363[1];
            v268 = v365 + *((_QWORD *)&v365 + 1);
          }
          v269 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(*(_QWORD *)&v264[(v268 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v268 & 0x1FF)) = v223 - v265;
          *((_QWORD *)&v365 + 1) = v267 + 1;
          v226 = v223 - v269;
          if (!*(_BYTE *)(v226 + 1))
            goto LABEL_337;
LABEL_276:
          v227 = (_BYTE *)(v223 - 1);
          if (*(_BYTE *)(v223 - 1))
            goto LABEL_277;
LABEL_343:
          *v227 = 2;
          v275 = (char *)v363[1];
          if ((void *)v364 == v363[1])
            v276 = 0;
          else
            v276 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
          v277 = *((_QWORD *)&v365 + 1);
          v278 = *((_QWORD *)&v365 + 1) + v365;
          if (v276 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
          {
            sub_1002B5AB8((uint64_t)v363);
            v277 = *((_QWORD *)&v365 + 1);
            v275 = (char *)v363[1];
            v278 = v365 + *((_QWORD *)&v365 + 1);
          }
          *(_QWORD *)(*(_QWORD *)&v275[(v278 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v278 & 0x1FF)) = v227;
          *((_QWORD *)&v365 + 1) = v277 + 1;
          v228 = (_BYTE *)(v223 + 1);
          if (!*(_BYTE *)(v223 + 1))
            goto LABEL_349;
LABEL_278:
          v229 = *(_QWORD *)(a1 + 56);
          if (*(_BYTE *)(v229 + v223 - 1))
            goto LABEL_279;
LABEL_355:
          *(_BYTE *)(v223 + v229 - 1) = 2;
          v283 = (char *)v363[1];
          v284 = *(_QWORD *)(a1 + 56);
          if ((void *)v364 == v363[1])
            v285 = 0;
          else
            v285 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
          v286 = *((_QWORD *)&v365 + 1);
          v287 = *((_QWORD *)&v365 + 1) + v365;
          if (v285 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
          {
            sub_1002B5AB8((uint64_t)v363);
            v286 = *((_QWORD *)&v365 + 1);
            v283 = (char *)v363[1];
            v287 = v365 + *((_QWORD *)&v365 + 1);
          }
          v229 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(*(_QWORD *)&v283[(v287 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v287 & 0x1FF)) = v223 + v284 - 1;
          *((_QWORD *)&v365 + 1) = v286 + 1;
          if (!*(_BYTE *)(v223 + v229))
            goto LABEL_361;
LABEL_280:
          if (*(_BYTE *)(v229 + v223 + 1))
            goto LABEL_266;
LABEL_367:
          *(_BYTE *)(v223 + v229 + 1) = 2;
          v293 = (char *)v363[1];
          v294 = *(_QWORD *)(a1 + 56);
          if ((void *)v364 == v363[1])
            v295 = 0;
          else
            v295 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
          v296 = *((_QWORD *)&v365 + 1);
          v297 = *((_QWORD *)&v365 + 1) + v365;
          if (v295 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
          {
            sub_1002B5AB8((uint64_t)v363);
            v296 = *((_QWORD *)&v365 + 1);
            v293 = (char *)v363[1];
            v297 = v365 + *((_QWORD *)&v365 + 1);
          }
          *(_QWORD *)(*(_QWORD *)&v293[(v297 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v297 & 0x1FF)) = v223 + v294 + 1;
          v221 = v296 + 1;
          *((_QWORD *)&v365 + 1) = v296 + 1;
          if (v296 == -1)
            goto LABEL_373;
        }
        else
        {
          *(_BYTE *)(~v225 + v223) = 2;
          v243 = (char *)v363[1];
          v244 = *(_QWORD *)(a1 + 56);
          if ((void *)v364 == v363[1])
            v245 = 0;
          else
            v245 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
          v246 = *((_QWORD *)&v365 + 1);
          v247 = *((_QWORD *)&v365 + 1) + v365;
          if (v245 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
          {
            sub_1002B5AB8((uint64_t)v363);
            v246 = *((_QWORD *)&v365 + 1);
            v243 = (char *)v363[1];
            v247 = v365 + *((_QWORD *)&v365 + 1);
          }
          v225 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(*(_QWORD *)&v243[(v247 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v247 & 0x1FF)) = ~v244 + v223;
          *((_QWORD *)&v365 + 1) = v246 + 1;
          if (!*(_BYTE *)(v223 - v225))
            goto LABEL_331;
LABEL_275:
          v226 = v223 - v225;
          if (*(_BYTE *)(v226 + 1))
            goto LABEL_276;
LABEL_337:
          *(_BYTE *)(v226 + 1) = 2;
          v270 = (char *)v363[1];
          v271 = *(_QWORD *)(a1 + 56);
          if ((void *)v364 == v363[1])
            v272 = 0;
          else
            v272 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
          v273 = *((_QWORD *)&v365 + 1);
          v274 = *((_QWORD *)&v365 + 1) + v365;
          if (v272 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
          {
            sub_1002B5AB8((uint64_t)v363);
            v273 = *((_QWORD *)&v365 + 1);
            v270 = (char *)v363[1];
            v274 = v365 + *((_QWORD *)&v365 + 1);
          }
          *(_QWORD *)(*(_QWORD *)&v270[(v274 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v274 & 0x1FF)) = v223 - v271 + 1;
          *((_QWORD *)&v365 + 1) = v273 + 1;
          v227 = (_BYTE *)(v223 - 1);
          if (!*(_BYTE *)(v223 - 1))
            goto LABEL_343;
LABEL_277:
          v228 = (_BYTE *)(v223 + 1);
          if (*(_BYTE *)(v223 + 1))
            goto LABEL_278;
LABEL_349:
          *v228 = 2;
          v279 = (char *)v363[1];
          if ((void *)v364 == v363[1])
            v280 = 0;
          else
            v280 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
          v281 = *((_QWORD *)&v365 + 1);
          v282 = *((_QWORD *)&v365 + 1) + v365;
          if (v280 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
          {
            sub_1002B5AB8((uint64_t)v363);
            v281 = *((_QWORD *)&v365 + 1);
            v279 = (char *)v363[1];
            v282 = v365 + *((_QWORD *)&v365 + 1);
          }
          *(_QWORD *)(*(_QWORD *)&v279[(v282 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v282 & 0x1FF)) = v228;
          *((_QWORD *)&v365 + 1) = v281 + 1;
          v229 = *(_QWORD *)(a1 + 56);
          if (!*(_BYTE *)(v229 + v223 - 1))
            goto LABEL_355;
LABEL_279:
          if (*(_BYTE *)(v223 + v229))
            goto LABEL_280;
LABEL_361:
          *(_BYTE *)(v223 + v229) = 2;
          v288 = (char *)v363[1];
          v289 = *(_QWORD *)(a1 + 56);
          if ((void *)v364 == v363[1])
            v290 = 0;
          else
            v290 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
          v291 = *((_QWORD *)&v365 + 1);
          v292 = *((_QWORD *)&v365 + 1) + v365;
          if (v290 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
          {
            sub_1002B5AB8((uint64_t)v363);
            v291 = *((_QWORD *)&v365 + 1);
            v288 = (char *)v363[1];
            v292 = v365 + *((_QWORD *)&v365 + 1);
          }
          v229 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(*(_QWORD *)&v288[(v292 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v292 & 0x1FF)) = v223 + v289;
          *((_QWORD *)&v365 + 1) = v291 + 1;
          if (!*(_BYTE *)(v229 + v223 + 1))
            goto LABEL_367;
LABEL_266:
          v221 = *((_QWORD *)&v365 + 1);
          if (!*((_QWORD *)&v365 + 1))
            goto LABEL_373;
        }
      }
      v230 = (char *)__p[1];
      if ((void *)v361 == __p[1])
        v231 = 0;
      else
        v231 = (((_QWORD)v361 - (unint64_t)__p[1]) << 6) - 1;
      v232 = *((_QWORD *)&v362 + 1);
      v233 = *((_QWORD *)&v362 + 1) + v362;
      if (v231 == *((_QWORD *)&v362 + 1) + (_QWORD)v362)
      {
        sub_1002B5AB8((uint64_t)__p);
        v232 = *((_QWORD *)&v362 + 1);
        v230 = (char *)__p[1];
        v233 = v362 + *((_QWORD *)&v362 + 1);
      }
      *(_QWORD *)(*(_QWORD *)&v230[(v233 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v233 & 0x1FF)) = v223;
      *((_QWORD *)&v362 + 1) = v232 + 1;
      if (v223 < v219)
        v234 = *(_QWORD *)(a1 + 56);
      else
        v234 = -*(_QWORD *)(a1 + 56);
      v235 = (_BYTE *)(v223 - 1);
      if (*(_BYTE *)(v223 - 1))
      {
        v236 = (_BYTE *)(v223 + 1);
        if (*(_BYTE *)(v223 + 1))
          goto LABEL_292;
      }
      else
      {
        *v235 = 2;
        v248 = (char *)v363[1];
        if ((void *)v364 == v363[1])
          v249 = 0;
        else
          v249 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
        v250 = *((_QWORD *)&v365 + 1);
        v251 = *((_QWORD *)&v365 + 1) + v365;
        if (v249 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
        {
          sub_1002B5AB8((uint64_t)v363);
          v250 = *((_QWORD *)&v365 + 1);
          v248 = (char *)v363[1];
          v251 = v365 + *((_QWORD *)&v365 + 1);
        }
        *(_QWORD *)(*(_QWORD *)&v248[(v251 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v251 & 0x1FF)) = v235;
        *((_QWORD *)&v365 + 1) = v250 + 1;
        v236 = (_BYTE *)(v223 + 1);
        if (*(_BYTE *)(v223 + 1))
        {
LABEL_292:
          if (*(_BYTE *)(v234 + v223 - 1))
            goto LABEL_293;
          goto LABEL_319;
        }
      }
      *v236 = 2;
      v252 = (char *)v363[1];
      if ((void *)v364 == v363[1])
        v253 = 0;
      else
        v253 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
      v254 = *((_QWORD *)&v365 + 1);
      v255 = *((_QWORD *)&v365 + 1) + v365;
      if (v253 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
      {
        sub_1002B5AB8((uint64_t)v363);
        v254 = *((_QWORD *)&v365 + 1);
        v252 = (char *)v363[1];
        v255 = v365 + *((_QWORD *)&v365 + 1);
      }
      *(_QWORD *)(*(_QWORD *)&v252[(v255 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v255 & 0x1FF)) = v236;
      *((_QWORD *)&v365 + 1) = v254 + 1;
      if (*(_BYTE *)(v234 + v223 - 1))
      {
LABEL_293:
        v237 = (_BYTE *)(v223 + v234);
        if (!*(_BYTE *)(v223 + v234))
          goto LABEL_325;
        goto LABEL_294;
      }
LABEL_319:
      *(_BYTE *)(v223 + v234 - 1) = 2;
      v256 = (char *)v363[1];
      if ((void *)v364 == v363[1])
        v257 = 0;
      else
        v257 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
      v258 = *((_QWORD *)&v365 + 1);
      v259 = *((_QWORD *)&v365 + 1) + v365;
      if (v257 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
      {
        sub_1002B5AB8((uint64_t)v363);
        v258 = *((_QWORD *)&v365 + 1);
        v256 = (char *)v363[1];
        v259 = v365 + *((_QWORD *)&v365 + 1);
      }
      *(_QWORD *)(*(_QWORD *)&v256[(v259 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v259 & 0x1FF)) = v223 + v234 - 1;
      *((_QWORD *)&v365 + 1) = v258 + 1;
      v237 = (_BYTE *)(v223 + v234);
      if (!*(_BYTE *)(v223 + v234))
      {
LABEL_325:
        *v237 = 2;
        v260 = (char *)v363[1];
        if ((void *)v364 == v363[1])
          v261 = 0;
        else
          v261 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
        v262 = *((_QWORD *)&v365 + 1);
        v263 = *((_QWORD *)&v365 + 1) + v365;
        if (v261 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
        {
          sub_1002B5AB8((uint64_t)v363);
          v262 = *((_QWORD *)&v365 + 1);
          v260 = (char *)v363[1];
          v263 = v365 + *((_QWORD *)&v365 + 1);
        }
        *(_QWORD *)(*(_QWORD *)&v260[(v263 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v263 & 0x1FF)) = v237;
        *((_QWORD *)&v365 + 1) = v262 + 1;
        if (*(_BYTE *)(v234 + v223 + 1))
          goto LABEL_266;
        goto LABEL_295;
      }
LABEL_294:
      if (*(_BYTE *)(v234 + v223 + 1))
        goto LABEL_266;
LABEL_295:
      v237[1] = 2;
      v238 = v237 + 1;
      v239 = (char *)v363[1];
      if ((void *)v364 == v363[1])
        v240 = 0;
      else
        v240 = (((_QWORD)v364 - (unint64_t)v363[1]) << 6) - 1;
      v241 = *((_QWORD *)&v365 + 1);
      v242 = *((_QWORD *)&v365 + 1) + v365;
      if (v240 == *((_QWORD *)&v365 + 1) + (_QWORD)v365)
      {
        sub_1002B5AB8((uint64_t)v363);
        v241 = *((_QWORD *)&v365 + 1);
        v239 = (char *)v363[1];
        v242 = v365 + *((_QWORD *)&v365 + 1);
      }
      *(_QWORD *)(*(_QWORD *)&v239[(v242 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v242 & 0x1FF)) = v238;
      v221 = v241 + 1;
      *((_QWORD *)&v365 + 1) = v241 + 1;
    }
    while (v241 != -1);
  }
LABEL_373:
  if (*((_QWORD *)&v362 + 1))
  {
    sub_100295438((pthread_mutex_t **)(a1 + 72));
    v298 = *(_QWORD **)(a1 + 32);
    v299 = v298[4] + v298[5];
    v300 = v298[1];
    v301 = (char *)(v300 + 8 * (v299 >> 9));
    if (v298[2] == v300)
      v302 = 0;
    else
      v302 = *(_QWORD *)v301 + 8 * (v299 & 0x1FF);
    v303 = (const void **)((char *)__p[1] + 8 * ((unint64_t)v362 >> 9));
    if ((void *)v361 == __p[1])
    {
      v304 = 0;
      v306 = 0;
      v305 = (const void **)((char *)__p[1] + 8 * ((*((_QWORD *)&v362 + 1) + (_QWORD)v362) >> 9));
    }
    else
    {
      v304 = (char *)*v303 + 8 * (v362 & 0x1FF);
      v305 = (const void **)((char *)__p[1] + 8 * ((*((_QWORD *)&v362 + 1) + (_QWORD)v362) >> 9));
      v306 = (char *)*v305 + 8 * ((*((_QWORD *)&v362 + 1) + v362) & 0x1FF);
      if (v306 != v304)
      {
        v307 = ((8 * ((WORD4(v362) + (_WORD)v362) & 0x1FF)) >> 3)
             + (((char *)v305 - (char *)v303) << 6)
             - ((uint64_t)(8 * (v362 & 0x1FF)) >> 3);
LABEL_382:
        sub_1002B6074(v298, v301, v302, v303, v304, v305, v306, v307);
        sub_100295440((pthread_mutex_t **)(a1 + 72));
        goto LABEL_383;
      }
    }
    v307 = 0;
    goto LABEL_382;
  }
LABEL_383:
  if ((_DWORD)v352)
    sub_1002989D0(&v351);
  if (*(_OWORD **)&v347[0] != &v347[1] && *(_QWORD *)&v347[0])
    operator delete[]();
  if ((_DWORD)v356)
    sub_1002989D0(&v354);
  if (v359)
    sub_1002989D0(v358);
  v308 = (void **)__p[1];
  v309 = (void **)v361;
  *((_QWORD *)&v362 + 1) = 0;
  v310 = v361 - (unint64_t)__p[1];
  if ((unint64_t)v361 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v308);
      v309 = (void **)v361;
      v308 = (void **)((char *)__p[1] + 8);
      __p[1] = v308;
      v310 = v361 - (_QWORD)v308;
    }
    while ((_QWORD)v361 - (_QWORD)v308 > 0x10uLL);
  }
  v311 = v310 >> 3;
  if (v311 == 1)
  {
    v312 = 256;
    goto LABEL_398;
  }
  if (v311 == 2)
  {
    v312 = 512;
LABEL_398:
    *(_QWORD *)&v362 = v312;
  }
  if (v308 != v309)
  {
    do
    {
      v313 = *v308++;
      operator delete(v313);
    }
    while (v308 != v309);
    if ((void *)v361 != __p[1])
      *(_QWORD *)&v361 = v361 + (((unint64_t)__p[1] - v361 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  v314 = (void **)v363[1];
  v315 = (void **)v364;
  *((_QWORD *)&v365 + 1) = 0;
  v316 = v364 - (unint64_t)v363[1];
  if ((unint64_t)v364 - (unint64_t)v363[1] >= 0x11)
  {
    do
    {
      operator delete(*v314);
      v315 = (void **)v364;
      v314 = (void **)((char *)v363[1] + 8);
      v363[1] = v314;
      v316 = v364 - (_QWORD)v314;
    }
    while ((_QWORD)v364 - (_QWORD)v314 > 0x10uLL);
  }
  v317 = v316 >> 3;
  if (v317 == 1)
  {
    v318 = 256;
    goto LABEL_411;
  }
  if (v317 == 2)
  {
    v318 = 512;
LABEL_411:
    *(_QWORD *)&v365 = v318;
  }
  if (v314 != v315)
  {
    do
    {
      v319 = *v314++;
      operator delete(v319);
    }
    while (v314 != v315);
    if ((void *)v364 != v363[1])
      *(_QWORD *)&v364 = v364 + (((unint64_t)v363[1] - v364 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v363[0])
    operator delete(v363[0]);
  if (v366 != v368 && v366)
    operator delete[]();
  if (v369 != v371 && v369)
    operator delete[]();
  if (*(_QWORD *)&v372[56])
  {
    v320 = (unsigned int *)(*(_QWORD *)&v372[56] + 20);
    do
    {
      v321 = __ldaxr(v320);
      v322 = v321 - 1;
    }
    while (__stlxr(v322, v320));
    if (!v322)
      sub_100256C90((uint64_t)v372);
  }
  *(_QWORD *)&v372[56] = 0;
  memset(&v372[16], 0, 32);
  if (*(int *)&v372[4] >= 1)
  {
    v323 = 0;
    v324 = v373;
    do
      *(_DWORD *)&v324[4 * v323++] = 0;
    while (v323 < *(int *)&v372[4]);
  }
  if (v374 != &v375)
    j__free(v374);
  if (*(_QWORD *)&v377[56])
  {
    v325 = (unsigned int *)(*(_QWORD *)&v377[56] + 20);
    do
    {
      v326 = __ldaxr(v325);
      v327 = v326 - 1;
    }
    while (__stlxr(v327, v325));
    if (!v327)
      sub_100256C90((uint64_t)v377);
  }
  *(_QWORD *)&v377[56] = 0;
  memset(&v377[16], 0, 32);
  if (*(int *)&v377[4] >= 1)
  {
    v328 = 0;
    v329 = v378;
    do
      *(_DWORD *)&v329[4 * v328++] = 0;
    while (v328 < *(int *)&v377[4]);
  }
  if (v379 != &v380)
    j__free(v379);
  if (v383)
    sub_1002989D0(v382);
}

void sub_1002B58F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;

  sub_1001D40CC((uint64_t)&STACK[0x518]);
  sub_1001D40CC((uint64_t)&STACK[0x530]);
  sub_1002B7DFC((uint64_t)&STACK[0x540]);
  sub_1002B7DFC((uint64_t)&STACK[0x570]);
  if (STACK[0x5A0] != a13 && STACK[0x5A0])
    operator delete[]();
  if (STACK[0x9C0] != v13)
  {
    if (STACK[0x9C0])
      operator delete[]();
  }
  sub_100006BE4((uint64_t)&STACK[0xDE0]);
  sub_100006BE4(v14 - 240);
  sub_1001D40CC(v14 - 136);
  _Unwind_Resume(a1);
}

void sub_1002B5AB8(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_100008FF8();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_1002808A8((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_100280A34((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_100008FF8();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_100008FF8();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_1002B6014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1002B6030(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002B6044(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002B605C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002B6074(_QWORD *a1, char *a2, uint64_t a3, const void **a4, char *__src, const void **a6, char *a7, unint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const void **v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const void **v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void **v35;
  char *v36;
  char *v37;
  const void **v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  const void **v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const void **v50;
  _BYTE *v51;
  unint64_t v52;
  uint64_t v53;
  const void **v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const void **v60;
  _BYTE *v61;
  unint64_t v62;
  unint64_t v63;
  const void **v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  const void **v69;
  char *v70;
  unint64_t v71;
  const void **v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  const void **v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *result;
  uint64_t v82;
  uint64_t v83;
  const void **v84;
  uint64_t v85;
  const void **v86;
  char *v87;

  v8 = a8;
  v14 = a1[4];
  v15 = v14 >> 9;
  v16 = a1[1];
  v17 = a1[2];
  v18 = (char *)(v16 + 8 * (v14 >> 9));
  if (v17 == v16)
  {
    v19 = 0;
    if (a3)
    {
LABEL_3:
      v20 = ((a3 - *(_QWORD *)a2) >> 3) + ((a2 - v18) << 6) - ((v19 - *(_QWORD *)v18) >> 3);
      v21 = a1[5];
      if (v20 < v21 - v20)
        goto LABEL_4;
LABEL_14:
      v26 = ((v17 - v16) << 6) - 1;
      if (v17 == v16)
        v26 = 0;
      v27 = v14 + v21;
      v28 = v26 - v27;
      if (a8 > v28)
      {
        sub_1002B6EB8((uint64_t)a1, a8 - v28);
        v21 = a1[5];
        v16 = a1[1];
        v17 = a1[2];
        v27 = a1[4] + v21;
      }
      v29 = (const void **)(v16 + 8 * (v27 >> 9));
      if (v17 == v16)
      {
        v30 = 0;
        v31 = v21 - v20;
        v32 = v21 - v20 - v8;
        if (v21 - v20 < v8)
        {
LABEL_20:
          if (v31 < v8 >> 1)
          {
            if (v31)
            {
              v33 = v31 + ((__src - (_BYTE *)*a4) >> 3);
              if (v33 >= 1)
              {
                a6 = &a4[(unint64_t)v33 >> 9];
LABEL_36:
                v39 = (char *)*a6 + 8 * (v33 & 0x1FF);
                if (v39 == a7)
                  goto LABEL_42;
                goto LABEL_76;
              }
              v63 = 511 - v33;
              a6 = &a4[-(v63 >> 9)];
              v39 = (char *)*a6 + 8 * (~(_WORD)v63 & 0x1FF);
              if (v39 == a7)
                goto LABEL_42;
            }
            else
            {
              a6 = a4;
              v39 = __src;
              if (__src == a7)
                goto LABEL_42;
            }
LABEL_76:
            v64 = a6;
            v65 = v39;
            v38 = v29;
            v37 = v30;
            while (1)
            {
              *(_QWORD *)v37 = *(_QWORD *)v65;
              v37 += 8;
              if (v37 - (_BYTE *)*v38 == 4096)
              {
                v66 = (char *)v38[1];
                ++v38;
                v37 = v66;
                v65 += 8;
                if (v65 - (_BYTE *)*v64 == 4096)
                {
LABEL_82:
                  v67 = (char *)v64[1];
                  ++v64;
                  v65 = v67;
                }
              }
              else
              {
                v65 += 8;
                if (v65 - (_BYTE *)*v64 == 4096)
                  goto LABEL_82;
              }
              ++v21;
              if (v65 == a7)
              {
                a1[5] = v21;
                v8 = v31;
                if (!v31)
                  goto LABEL_102;
                goto LABEL_84;
              }
            }
          }
          v33 = v32 + ((a7 - (_BYTE *)*a6) >> 3);
          if (v33 < 1)
          {
            v41 = 511 - v33;
            a6 -= v41 >> 9;
            v39 = (char *)*a6 + 8 * (~(_WORD)v41 & 0x1FF);
            if (v39 == a7)
            {
LABEL_42:
              v37 = v30;
              v38 = v29;
              v8 = v31;
              if (!v31)
                goto LABEL_102;
              goto LABEL_84;
            }
            goto LABEL_76;
          }
          a6 += (unint64_t)v33 >> 9;
          goto LABEL_36;
        }
      }
      else
      {
        v30 = (char *)*v29 + 8 * (v27 & 0x1FF);
        v31 = v21 - v20;
        v32 = v21 - v20 - v8;
        if (v21 - v20 < v8)
          goto LABEL_20;
      }
      v37 = v30;
      v38 = v29;
      v39 = a7;
      if (!v8)
        goto LABEL_102;
LABEL_84:
      v68 = ((v30 - (_BYTE *)*v29) >> 3) - v8;
      if (v68 < 1)
      {
        v71 = 511 - v68;
        v69 = &v29[-(v71 >> 9)];
        v70 = (char *)*v69 + 8 * (~(_WORD)v71 & 0x1FF);
        if (v70 == v30)
          goto LABEL_96;
      }
      else
      {
        v69 = &v29[(unint64_t)v68 >> 9];
        v70 = (char *)*v69 + 8 * (v68 & 0x1FF);
        if (v70 == v30)
        {
LABEL_96:
          if (v8 < v31)
          {
            v76 = ((v30 - (_BYTE *)*v29) >> 3) - v31;
            if (v76 < 1)
            {
              v79 = 511 - v76;
              v77 = &v29[-(v79 >> 9)];
              v78 = (char *)*v77 + 8 * (~(_WORD)v79 & 0x1FF);
            }
            else
            {
              v77 = &v29[(unint64_t)v76 >> 9];
              v78 = (char *)*v77 + 8 * (v76 & 0x1FF);
            }
            sub_1002B7A90(v77, v78, v69, v70, v29, v30, &v84);
            v29 = v86;
            v30 = v87;
          }
          sub_1002B7A90(a4, __src, a6, v39, v29, v30, &v84);
          goto LABEL_102;
        }
      }
      v72 = v69;
      v73 = v70;
      while (1)
      {
        *(_QWORD *)v37 = *(_QWORD *)v73;
        v37 += 8;
        if (v37 - (_BYTE *)*v38 == 4096)
        {
          v74 = (char *)v38[1];
          ++v38;
          v37 = v74;
          v73 += 8;
          if (v73 - (_BYTE *)*v72 == 4096)
          {
LABEL_94:
            v75 = (char *)v72[1];
            ++v72;
            v73 = v75;
          }
        }
        else
        {
          v73 += 8;
          if (v73 - (_BYTE *)*v72 == 4096)
            goto LABEL_94;
        }
        ++v21;
        if (v73 == v30)
        {
          a1[5] = v21;
          goto LABEL_96;
        }
      }
    }
  }
  else
  {
    v19 = *(_QWORD *)v18 + 8 * (a1[4] & 0x1FFLL);
    if (a3 != v19)
      goto LABEL_3;
  }
  v20 = 0;
  v21 = a1[5];
  if (!v21)
    goto LABEL_14;
LABEL_4:
  if (a8 > v14)
  {
    sub_1002B67DC((uint64_t)a1, a8 - v14);
    v14 = a1[4];
    v16 = a1[1];
    v17 = a1[2];
    v15 = v14 >> 9;
  }
  v22 = (const void **)(v16 + 8 * v15);
  if (v17 != v16)
  {
    v23 = (uint64_t)*v22 + 8 * (v14 & 0x1FF);
    v24 = v8 - v20;
    if (v8 > v20)
      goto LABEL_8;
LABEL_25:
    v34 = v23;
    v35 = v22;
    v36 = __src;
    if (v8)
      goto LABEL_57;
    goto LABEL_102;
  }
  v23 = 0;
  v24 = v8 - v20;
  if (v8 <= v20)
    goto LABEL_25;
LABEL_8:
  if (v20 < v8 >> 1)
  {
    if (v20)
    {
      v25 = ((a7 - (_BYTE *)*a6) >> 3) - v20;
      if (v25 >= 1)
      {
        a4 = &a6[(unint64_t)v25 >> 9];
        goto LABEL_32;
      }
      v42 = 511 - v25;
      a4 = &a6[-(v42 >> 9)];
      v36 = (char *)*a4 + 8 * (~(_WORD)v42 & 0x1FF);
      if (v36 == __src)
        goto LABEL_39;
    }
    else
    {
      a4 = a6;
      v36 = a7;
      if (a7 == __src)
        goto LABEL_39;
    }
    goto LABEL_49;
  }
  v25 = v24 + ((__src - (_BYTE *)*a4) >> 3);
  if (v25 >= 1)
  {
    a4 += (unint64_t)v25 >> 9;
LABEL_32:
    v36 = (char *)*a4 + 8 * (v25 & 0x1FF);
    if (v36 == __src)
      goto LABEL_39;
    goto LABEL_49;
  }
  v40 = 511 - v25;
  a4 -= v40 >> 9;
  v36 = (char *)*a4 + 8 * (~(_WORD)v40 & 0x1FF);
  if (v36 != __src)
  {
LABEL_49:
    v43 = a1[5];
    v44 = a4;
    v45 = v36;
    v35 = v22;
    v34 = v23;
    while (1)
    {
      if ((const void *)v34 == *v35)
      {
        v47 = (uint64_t)*--v35;
        v34 = v47 + 4096;
        if (v45 == *v44)
        {
LABEL_55:
          v48 = (uint64_t)*--v44;
          v45 = (char *)(v48 + 4096);
        }
      }
      else if (v45 == *v44)
      {
        goto LABEL_55;
      }
      v46 = *((_QWORD *)v45 - 1);
      v45 -= 8;
      *(_QWORD *)(v34 - 8) = v46;
      v34 -= 8;
      --v14;
      ++v43;
      if (v45 == __src)
      {
        a1[4] = v14;
        a1[5] = v43;
        v8 = v20;
        if (!v20)
          goto LABEL_102;
LABEL_57:
        v49 = v8 + ((v23 - (uint64_t)*v22) >> 3);
        if (v49 < 1)
        {
          v52 = 511 - v49;
          v50 = &v22[-(v52 >> 9)];
          v51 = (char *)*v50 + 8 * (~(_WORD)v52 & 0x1FF);
          if (v51 == (_BYTE *)v23)
            goto LABEL_69;
        }
        else
        {
          v50 = &v22[(unint64_t)v49 >> 9];
          v51 = (char *)*v50 + 8 * (v49 & 0x1FF);
          if (v51 == (_BYTE *)v23)
          {
LABEL_69:
            if (v8 < v20)
            {
              v59 = v20 + ((v23 - (uint64_t)*v22) >> 3);
              if (v59 < 1)
              {
                v62 = 511 - v59;
                v60 = &v22[-(v62 >> 9)];
                v61 = (char *)*v60 + 8 * (~(_WORD)v62 & 0x1FF);
              }
              else
              {
                v60 = &v22[(unint64_t)v59 >> 9];
                v61 = (char *)*v60 + 8 * (v59 & 0x1FF);
              }
              v84 = v22;
              v85 = v23;
              sub_1002B7810(v50, v51, v60, v61, (uint64_t)&v84);
              v22 = v84;
              v23 = v85;
            }
            v84 = v22;
            v85 = v23;
            sub_1002B7810(a4, v36, a6, a7, (uint64_t)&v84);
            goto LABEL_102;
          }
        }
        v53 = a1[5];
        v54 = v50;
        v55 = v51;
        while (2)
        {
          if ((const void *)v34 == *v35)
          {
            v57 = (uint64_t)*--v35;
            v34 = v57 + 4096;
            if (v55 == *v54)
              goto LABEL_67;
          }
          else if (v55 == *v54)
          {
LABEL_67:
            v58 = (uint64_t)*--v54;
            v55 = (_BYTE *)(v58 + 4096);
          }
          v56 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *(_QWORD *)(v34 - 8) = v56;
          v34 -= 8;
          --v14;
          ++v53;
          if (v55 == (_BYTE *)v23)
          {
            a1[4] = v14;
            a1[5] = v53;
            goto LABEL_69;
          }
          continue;
        }
      }
    }
  }
LABEL_39:
  v34 = v23;
  v35 = v22;
  v8 = v20;
  if (v20)
    goto LABEL_57;
LABEL_102:
  v80 = a1[1];
  result = (_QWORD *)(v80 + 8 * (a1[4] >> 9));
  if (a1[2] == v80)
  {
    v82 = 0;
    if (!v20)
      return result;
  }
  else
  {
    v82 = *result + 8 * (a1[4] & 0x1FFLL);
    if (!v20)
      return result;
  }
  v83 = v20 + ((v82 - *result) >> 3);
  if (v83 < 1)
    result -= (unint64_t)(511 - v83) >> 9;
  else
    result += (unint64_t)v83 >> 9;
  return result;
}

void sub_1002B67DC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  void *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  _BYTE *v34;
  void *v35;
  unint64_t v36;
  char *v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  void *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  unint64_t v64;
  int64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *v73;
  _OWORD *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  unint64_t v87;
  int64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  _OWORD *v97;
  uint64_t v98;
  __int128 v99;
  unint64_t v100;
  void *v101;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 == v3)
    v5 = a2 + 1;
  else
    v5 = a2;
  if (v4 == v3)
    v6 = 0;
  else
    v6 = ((v4 - v3) << 6) - 1;
  if ((v5 & 0x1FF) != 0)
    v7 = (v5 >> 9) + 1;
  else
    v7 = v5 >> 9;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = (unint64_t)(v6 - (*(_QWORD *)(a1 + 40) + v8)) >> 9;
  if (v7 >= v9)
    v10 = (unint64_t)(v6 - (*(_QWORD *)(a1 + 40) + v8)) >> 9;
  else
    v10 = v7;
  if (v7 <= v9)
  {
    for (*(_QWORD *)(a1 + 32) = v8 + (v10 << 9); v10; --v10)
    {
      v17 = *(_QWORD *)(a1 + 16);
      v101 = *(void **)(v17 - 8);
      *(_QWORD *)(a1 + 16) = v17 - 8;
      sub_100280A34((void **)a1, &v101);
    }
    return;
  }
  v11 = v7 - v10;
  v12 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v13 = (v4 - v3) >> 3;
  if (v7 - v10 <= (v12 >> 3) - v13)
  {
    if (v11)
    {
      if (v3 == *(_QWORD *)a1)
      {
LABEL_31:
        v20 = v11;
        do
        {
          v101 = operator new(0x1000uLL);
          sub_1002808A8((char **)a1, &v101);
          --v20;
        }
        while (v20);
        v10 += v11;
        v8 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        while (1)
        {
          v101 = operator new(0x1000uLL);
          sub_100280A34((void **)a1, &v101);
          v18 = *(_QWORD *)(a1 + 8);
          v19 = *(_QWORD *)(a1 + 16) - v18 == 8 ? 511 : 512;
          v8 = v19 + *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v8;
          if (!--v11)
            break;
          if (v18 == *(_QWORD *)a1)
            goto LABEL_31;
        }
      }
    }
    for (*(_QWORD *)(a1 + 32) = v8 + (v10 << 9); v10; --v10)
    {
      v21 = *(_QWORD *)(a1 + 16);
      v101 = *(void **)(v21 - 8);
      *(_QWORD *)(a1 + 16) = v21 - 8;
      sub_100280A34((void **)a1, &v101);
    }
    return;
  }
  v14 = v4 == v3;
  if (v12 >> 2 <= v11 + v13)
    v15 = v11 + v13;
  else
    v15 = v12 >> 2;
  if (v15)
  {
    if (v15 >> 61)
      sub_100008FF8();
    v16 = (char *)operator new(8 * v15);
  }
  else
  {
    v16 = 0;
  }
  v100 = (v7 << 9) - v14;
  v22 = &v16[8 * v15];
  v23 = v16;
  v24 = v16;
  v25 = v16;
  do
  {
    v26 = operator new(0x1000uLL);
    if (v24 != v22)
      goto LABEL_40;
    if (v23 > v25)
    {
      v27 = v25;
      v28 = (v23 - v25) >> 3;
      if (v28 >= -1)
        v29 = v28 + 1;
      else
        v29 = v28 + 2;
      v30 = v29 >> 1;
      v31 = &v23[-8 * (v29 >> 1)];
      v32 = v22;
      if (v22 != v23)
      {
        memmove(v31, v23, v22 - v23);
        v32 = v23;
      }
      v24 = &v31[v22 - v23];
      v23 = &v32[-8 * v30];
      v25 = v27;
      goto LABEL_40;
    }
    if (v22 == v25)
      v33 = 1;
    else
      v33 = (v22 - v25) >> 2;
    if (v33 >> 61)
      sub_100008FF8();
    v34 = operator new(8 * v33);
    v35 = v25;
    v36 = v33 >> 2;
    v37 = &v34[8 * (v33 >> 2)];
    v24 = v37;
    v38 = v22 - v23;
    if (v22 != v23)
    {
      v24 = &v37[v38 & 0xFFFFFFFFFFFFFFF8];
      v39 = v38 - 8;
      if (v39 >= 0x38 && (v40 = 8 * v36, (unint64_t)(&v34[8 * v36] - v23) >= 0x20))
      {
        v44 = (v39 >> 3) + 1;
        v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
        v41 = &v37[v45];
        v42 = &v23[v45];
        v46 = (__int128 *)(v23 + 16);
        v47 = &v34[v40 + 16];
        v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v46 += 2;
          v47 += 2;
          v48 -= 4;
        }
        while (v48);
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_57;
      }
      else
      {
        v41 = &v34[8 * (v33 >> 2)];
        v42 = v23;
      }
      do
      {
        v43 = *(_QWORD *)v42;
        v42 += 8;
        *(_QWORD *)v41 = v43;
        v41 += 8;
      }
      while (v41 != v24);
    }
LABEL_57:
    v22 = &v34[8 * v33];
    if (v35)
      operator delete(v35);
    v23 = &v34[8 * (v33 >> 2)];
    v25 = v34;
LABEL_40:
    *(_QWORD *)v24 = v26;
    v24 += 8;
    --v11;
  }
  while (v11);
  v50 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    while (1)
    {
      if (v24 == v22)
      {
        if (v23 <= v25)
        {
          if (v22 == v25)
            v61 = 1;
          else
            v61 = (v22 - v25) >> 2;
          if (v61 >> 61)
            sub_100008FF8();
          v62 = operator new(8 * v61);
          v63 = v62;
          v64 = v61 >> 2;
          v51 = &v62[8 * (v61 >> 2)];
          v24 = v51;
          v65 = v22 - v23;
          if (v22 != v23)
          {
            v24 = &v51[v65 & 0xFFFFFFFFFFFFFFF8];
            v66 = v65 - 8;
            if (v66 < 0x38 || (v67 = 8 * v64, (unint64_t)(&v62[8 * v64] - v23) < 0x20))
            {
              v68 = &v62[8 * (v61 >> 2)];
              v69 = v23;
              goto LABEL_88;
            }
            v71 = (v66 >> 3) + 1;
            v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
            v68 = &v51[v72];
            v69 = &v23[v72];
            v73 = (__int128 *)(v23 + 16);
            v74 = &v62[v67 + 16];
            v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v76 = *v73;
              *(v74 - 1) = *(v73 - 1);
              *v74 = v76;
              v73 += 2;
              v74 += 2;
              v75 -= 4;
            }
            while (v75);
            if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_88:
                v70 = *(_QWORD *)v69;
                v69 += 8;
                *(_QWORD *)v68 = v70;
                v68 += 8;
              }
              while (v68 != v24);
            }
          }
          v22 = &v62[8 * v61];
          if (v25)
            operator delete(v25);
          v25 = v63;
          goto LABEL_71;
        }
        v55 = v25;
        v56 = (v23 - v25) >> 3;
        if (v56 >= -1)
          v57 = v56 + 1;
        else
          v57 = v56 + 2;
        v58 = v57 >> 1;
        v59 = &v23[-8 * (v57 >> 1)];
        v60 = v22;
        if (v22 != v23)
        {
          memmove(v59, v23, v22 - v23);
          v60 = v23;
        }
        v24 = &v59[v22 - v23];
        v51 = &v60[-8 * v58];
        v25 = v55;
      }
      else
      {
        v51 = v23;
      }
LABEL_71:
      *(_QWORD *)v24 = *(_QWORD *)(v50 - 8);
      v24 += 8;
      v50 = *(_QWORD *)(a1 + 16) - 8;
      *(_QWORD *)(a1 + 16) = v50;
      v23 = v51;
      if (!--v10)
        goto LABEL_66;
    }
  }
  v51 = v23;
LABEL_66:
  v52 = *(uint64_t **)(a1 + 8);
  if (v52 != (uint64_t *)v50)
  {
    while (1)
    {
      if (v24 == v22)
      {
        if (v51 <= v25)
        {
          if (v22 == v25)
            v84 = 1;
          else
            v84 = (v22 - v25) >> 2;
          if (v84 >> 61)
            sub_100008FF8();
          v85 = operator new(8 * v84);
          v86 = v85;
          v87 = v84 >> 2;
          v53 = &v85[8 * (v84 >> 2)];
          v24 = v53;
          v88 = v22 - v51;
          if (v22 != v51)
          {
            v24 = &v53[v88 & 0xFFFFFFFFFFFFFFF8];
            v89 = v88 - 8;
            if (v89 < 0x38 || (v90 = 8 * v87, (unint64_t)(&v85[8 * v87] - v51) < 0x20))
            {
              v91 = &v85[8 * (v84 >> 2)];
              v92 = v51;
              goto LABEL_114;
            }
            v94 = (v89 >> 3) + 1;
            v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
            v91 = &v53[v95];
            v92 = &v51[v95];
            v96 = (__int128 *)(v51 + 16);
            v97 = &v85[v90 + 16];
            v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v99 = *v96;
              *(v97 - 1) = *(v96 - 1);
              *v97 = v99;
              v96 += 2;
              v97 += 2;
              v98 -= 4;
            }
            while (v98);
            if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_114:
                v93 = *(_QWORD *)v92;
                v92 += 8;
                *(_QWORD *)v91 = v93;
                v91 += 8;
              }
              while (v91 != v24);
            }
          }
          v22 = &v85[8 * v84];
          if (v25)
            operator delete(v25);
          v25 = v86;
          goto LABEL_97;
        }
        v78 = v25;
        v79 = (v51 - v25) >> 3;
        if (v79 >= -1)
          v80 = v79 + 1;
        else
          v80 = v79 + 2;
        v81 = v80 >> 1;
        v82 = &v51[-8 * (v80 >> 1)];
        v83 = v22;
        if (v22 != v51)
        {
          memmove(v82, v51, v22 - v51);
          v83 = v51;
        }
        v24 = &v82[v22 - v51];
        v53 = &v83[-8 * v81];
        v25 = v78;
      }
      else
      {
        v53 = v51;
      }
LABEL_97:
      v77 = *v52++;
      *(_QWORD *)v24 = v77;
      v24 += 8;
      v51 = v53;
      if (v52 == *(uint64_t **)(a1 + 16))
        goto LABEL_68;
    }
  }
  v53 = v51;
LABEL_68:
  v54 = *(void **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v53;
  *(_QWORD *)(a1 + 16) = v24;
  *(_QWORD *)(a1 + 24) = v22;
  *(_QWORD *)(a1 + 32) += v100;
  if (v54)
    operator delete(v54);
}

void sub_1002B6E4C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_1002B6E98()
{
  __cxa_end_catch();
  JUMPOUT(0x1002B6EA0);
}

void sub_1002B6EB8(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    *(_QWORD *)(a1 + 32) = v7 - (v8 << 9);
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0x1000uLL);
        sub_1002808A8((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0x1000uLL);
        sub_100280A34((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 511;
        else
          v116 = 512;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - (v6 << 9);
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= v8 << 9;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      sub_100008FF8();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = v8 << 9;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0x1000uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      sub_100008FF8();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            sub_100008FF8();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            sub_100008FF8();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) -= v144;
  if (v71)
    operator delete(v71);
}

void sub_1002B77A4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_1002B77F0()
{
  __cxa_end_catch();
  JUMPOUT(0x1002B77F8);
}

const void **sub_1002B7810(const void **result, _BYTE *__src, const void **a3, _BYTE *a4, uint64_t a5)
{
  _BYTE *v7;
  char *v8;
  void **v9;
  const void **v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const void **i;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void **v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void **v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;

  v7 = __src;
  v9 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (result != a3)
  {
    v11 = result;
    v12 = (char *)*result + 4096;
    if (v12 != __src)
    {
      v14 = (char *)*v9++;
      v13 = v14;
      while (1)
      {
        v15 = (v13 - v8 + 4096) >> 3;
        if ((v12 - v7) >> 3 >= v15)
          v16 = v15;
        else
          v16 = (v12 - v7) >> 3;
        if (v16)
          result = (const void **)memmove(v8, v7, 8 * v16);
        v7 += 8 * v16;
        if (v7 == v12)
          break;
        v17 = (char *)*v9++;
        v13 = v17;
        v8 = v17;
      }
      v8 += 8 * v16;
      if ((char *)*(v9 - 1) + 4096 == v8)
      {
        v8 = (char *)*v9;
        *(_QWORD *)a5 = v9;
        *(_QWORD *)(a5 + 8) = v8;
        i = v11 + 1;
        if (v11 + 1 != a3)
          goto LABEL_16;
LABEL_39:
        v33 = *a3;
        if (v33 == a4)
          goto LABEL_50;
        v35 = (char *)*v9++;
        v34 = v35;
        while (1)
        {
          v36 = (v34 - v8 + 4096) >> 3;
          v37 = (a4 - v33) >> 3 >= v36 ? v36 : (a4 - v33) >> 3;
          if (v37)
            result = (const void **)memmove(v8, v33, 8 * v37);
          v33 += 8 * v37;
          if (v33 == a4)
            break;
          v38 = (char *)*v9++;
          v34 = v38;
          v8 = v38;
        }
        v8 += 8 * v37;
        v32 = v9 - 1;
        if ((char *)*(v9 - 1) + 4096 != v8)
        {
LABEL_49:
          v9 = v32;
          goto LABEL_50;
        }
        goto LABEL_37;
      }
      --v9;
    }
    *(_QWORD *)a5 = v9;
    *(_QWORD *)(a5 + 8) = v8;
    for (i = v11 + 1; i != a3; ++i)
    {
LABEL_16:
      while (1)
      {
        v19 = 0;
        v20 = (char *)*i;
        v22 = (char *)*v9++;
        v21 = v22;
        while (1)
        {
          v23 = (v21 - v8 + 4096) >> 3;
          if ((4096 - 8 * v19) >> 3 >= v23)
            v24 = v23;
          else
            v24 = (4096 - 8 * v19) >> 3;
          if (v24)
            result = (const void **)memmove(v8, &v20[8 * v19], 8 * v24);
          v19 += v24;
          if (v19 == 512)
            break;
          v25 = (char *)*v9++;
          v21 = v25;
          v8 = v25;
        }
        v8 += 8 * v24;
        v26 = v9 - 1;
        if ((char *)*(v9 - 1) + 4096 != v8)
          break;
        v8 = (char *)*v9;
        *(_QWORD *)a5 = v9;
        *(_QWORD *)(a5 + 8) = v8;
        if (++i == a3)
          goto LABEL_39;
      }
      --v9;
      *(_QWORD *)a5 = v26;
      *(_QWORD *)(a5 + 8) = v8;
    }
    goto LABEL_39;
  }
  if (__src != a4)
  {
    v28 = (char *)*v9++;
    v27 = v28;
    while (1)
    {
      v29 = (v27 - v8 + 4096) >> 3;
      if ((a4 - v7) >> 3 >= v29)
        v30 = v29;
      else
        v30 = (a4 - v7) >> 3;
      if (v30)
        result = (const void **)memmove(v8, v7, 8 * v30);
      v7 += 8 * v30;
      if (v7 == a4)
        break;
      v31 = (char *)*v9++;
      v27 = v31;
      v8 = v31;
    }
    v8 += 8 * v30;
    v32 = v9 - 1;
    if ((char *)*(v9 - 1) + 4096 != v8)
      goto LABEL_49;
LABEL_37:
    v8 = (char *)*v9;
  }
LABEL_50:
  *(_QWORD *)a5 = v9;
  *(_QWORD *)(a5 + 8) = v8;
  return result;
}

void *sub_1002B7A90@<X0>(const void **a1@<X1>, char *a2@<X2>, const void **a3@<X3>, char *a4@<X4>, const void **a5@<X5>, char *a6@<X6>, const void ***a7@<X8>)
{
  const void **v8;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *result;
  uint64_t v19;
  char *v20;
  const void **v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;

  v8 = a5;
  if (a1 == a3)
  {
    if (a2 == a4)
      goto LABEL_42;
    v32 = (uint64_t)*a5;
    v33 = a4;
    while (1)
    {
      v34 = (uint64_t)&a6[-v32] >> 3;
      if ((v33 - a2) >> 3 < v34)
        v34 = (v33 - a2) >> 3;
      v33 -= 8 * v34;
      a6 -= 8 * v34;
      if (v34)
        result = memmove(a6, v33, 8 * v34);
      if (v33 == a2)
        break;
      v35 = (uint64_t)*--v8;
      v32 = v35;
      a6 = (char *)(v35 + 4096);
    }
    goto LABEL_40;
  }
  v14 = *a3;
  if (*a3 != a4)
  {
    v15 = (uint64_t)*a5;
    v16 = a4;
    while (1)
    {
      v17 = (uint64_t)&a6[-v15] >> 3;
      if ((v16 - v14) >> 3 < v17)
        v17 = (v16 - v14) >> 3;
      v16 -= 8 * v17;
      a6 -= 8 * v17;
      if (v17)
        result = memmove(a6, v16, 8 * v17);
      if (v16 == v14)
        break;
      v19 = (uint64_t)*--v8;
      v15 = v19;
      a6 = (char *)(v19 + 4096);
    }
    if ((char *)*v8 + 4096 == a6)
    {
      v20 = (char *)v8[1];
      ++v8;
      a6 = v20;
    }
  }
  v21 = a3 - 1;
  if (a3 - 1 != a1)
  {
    v22 = (char *)*v8;
    do
    {
      while (1)
      {
        v23 = *v21;
        v24 = (char *)*v21 + 4096;
        while (1)
        {
          v25 = (a6 - v22) >> 3;
          if ((v24 - v23) >> 3 < v25)
            v25 = (v24 - v23) >> 3;
          v24 -= 8 * v25;
          a6 -= 8 * v25;
          if (v25)
            result = memmove(a6, v24, 8 * v25);
          if (v24 == v23)
            break;
          v26 = (char *)*--v8;
          v22 = v26;
          a6 = v26 + 4096;
        }
        v22 = (char *)*v8;
        if ((char *)*v8 + 4096 == a6)
          break;
        if (--v21 == a1)
          goto LABEL_24;
      }
      v27 = (char *)v8[1];
      ++v8;
      v22 = v27;
      a6 = v27;
      --v21;
    }
    while (v21 != a1);
  }
LABEL_24:
  v28 = (char *)*a1 + 4096;
  if (v28 != a2)
  {
    v29 = (uint64_t)*v8;
    while (1)
    {
      v30 = (uint64_t)&a6[-v29] >> 3;
      if ((v28 - a2) >> 3 < v30)
        v30 = (v28 - a2) >> 3;
      v28 -= 8 * v30;
      a6 -= 8 * v30;
      if (v30)
        result = memmove(a6, v28, 8 * v30);
      if (v28 == a2)
        break;
      v31 = (uint64_t)*--v8;
      v29 = v31;
      a6 = (char *)(v31 + 4096);
    }
LABEL_40:
    if ((char *)*v8 + 4096 == a6)
    {
      v36 = (char *)v8[1];
      ++v8;
      a6 = v36;
    }
  }
LABEL_42:
  *a7 = a3;
  a7[1] = (const void **)a4;
  a7[2] = v8;
  a7[3] = (const void **)a6;
  return result;
}

void sub_1002B7CC0(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002B7CE4(uint64_t result, int *a2, double a3, int8x16_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a2;
  if ((int)v4 < a2[1])
  {
    v5 = *(_QWORD *)(result + 16);
    v6 = v4 + 1;
    v7.i64[0] = 0x202020202020202;
    v7.i64[1] = 0x202020202020202;
    do
    {
      v8 = *(_QWORD *)(v5 + 16) + **(_QWORD **)(v5 + 72) * v4;
      v9 = *(_QWORD *)(result + 8);
      ++v4;
      v10 = *(_QWORD *)(v9 + 16);
      v11 = **(_QWORD **)(v9 + 72);
      LODWORD(v12) = *(unsigned __int8 *)(result + 24);
      if (*(_BYTE *)(result + 24))
        v13 = 16;
      else
        v13 = 1;
      if (*(_BYTE *)(result + 24))
      {
        LODWORD(v14) = *(_DWORD *)(v5 + 12);
        if ((int)v14 >= 16)
        {
          v12 = 0;
          do
          {
            a4 = vceqq_s8(*(int8x16_t *)(v10 + v13 + v11 * v6 + v12), v7);
            *(int8x16_t *)(v8 + v12) = a4;
            v12 += 16;
            v5 = *(_QWORD *)(result + 16);
            v14 = *(int *)(v5 + 12);
          }
          while (v12 <= v14 - 16);
        }
        else
        {
          LODWORD(v12) = 0;
        }
        if ((int)v12 <= (int)v14 - 8)
        {
          a4.i64[0] = *(_QWORD *)(v10 + v11 * v4 + v13 + v12);
          a4 = vceqq_s8(a4, v7);
          *(_QWORD *)(v8 + v12) = a4.i64[0];
          LODWORD(v12) = v12 | 8;
          v5 = *(_QWORD *)(result + 16);
        }
      }
      if ((int)v12 < *(_DWORD *)(v5 + 12))
      {
        v12 = (int)v12;
        v15 = v10 + v13 + v11 * v6;
        do
        {
          *(_BYTE *)(v8 + v12) = -(*(unsigned __int8 *)(v15 + v12) >> 1);
          ++v12;
          v5 = *(_QWORD *)(result + 16);
        }
        while (v12 < *(int *)(v5 + 12));
      }
      ++v6;
    }
    while (v4 < a2[1]);
  }
  return result;
}

uint64_t sub_1002B7DFC(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1002B7EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, char a10)
{
  int v18;
  _BYTE v19[8];
  int v20;
  uint64_t (**v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_100298C2C(v19, &off_1004502E0);
  if (a10)
    v18 = 2;
  else
    v18 = 0;
  if (a7 == 2)
  {
    v30 = a8;
    v31 = a9;
    v32 = v18;
    v28 = 0;
    v29 = a6;
    v21 = &off_100450670;
    v22 = a1;
    v23 = a2;
    v24 = a3;
    v25 = a4;
    v26 = a5;
    v27 = &v30;
    sub_10026F638(&v28, (uint64_t)&v21, (double)(a6 * a5) * 0.0000152587891);
  }
  else
  {
    v30 = a8;
    v31 = a9;
    v32 = v18;
    if (a7)
    {
      v28 = 0;
      v29 = a6;
      v21 = &off_1004506D0;
      v22 = a1;
      v23 = a2;
      v24 = a3;
      v25 = a4;
      v26 = a5;
      v27 = &v30;
      sub_10026F638(&v28, (uint64_t)&v21, (double)(a6 * a5) * 0.0000152587891);
    }
    else
    {
      v33 = -1;
      v34 = -1;
      v35 = -1;
      v28 = 0;
      v29 = a6;
      v21 = &off_100450610;
      v22 = a1;
      v23 = a2;
      v24 = a3;
      v25 = a4;
      v26 = a5;
      v27 = &v30;
      sub_10026F638(&v28, (uint64_t)&v21, (double)(a6 * a5) * 0.0000152587891);
    }
  }
  nullsub_1(&v21);
  if (v20)
    sub_1002989D0(v19);
}

void sub_1002B8084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  nullsub_1(&a11);
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002B80A8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1002B80C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  int v17;
  __int128 v18;
  _DWORD v19[4];
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[8];
  int v26;
  _QWORD v27[5];
  int v28;
  _DWORD *v29;
  _DWORD v30[2];

  sub_100298C2C(v25, &off_100450300);
  if (a8)
    v17 = 2;
  else
    v17 = 0;
  v19[0] = a7;
  v19[1] = v17;
  v19[2] = a9;
  v20 = 0xFCFCFCFCFCFCFCFCLL;
  v21 = 0xF8F8F8F8F8F8F8F8;
  *(_QWORD *)&v18 = 0x8000800080008000;
  *((_QWORD *)&v18 + 1) = 0x8000800080008000;
  v22 = v18;
  v23 = 0u;
  *(_QWORD *)&v18 = -1;
  *((_QWORD *)&v18 + 1) = -1;
  v24 = v18;
  v30[0] = 0;
  v30[1] = a6;
  v27[0] = &off_100450730;
  v27[1] = a1;
  v27[2] = a2;
  v27[3] = a3;
  v27[4] = a4;
  v28 = a5;
  v29 = v19;
  sub_10026F638(v30, (uint64_t)v27, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v27);
  if (v26)
    sub_1002989D0(v25);
}

void sub_1002B81CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  nullsub_1(va1);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002B81E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  int v17;
  __int128 v18;
  __int128 v19;
  _DWORD v20[4];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[8];
  int v27;
  _QWORD v28[5];
  int v29;
  _DWORD *v30;
  _DWORD v31[2];

  sub_100298C2C(v26, &off_100450320);
  if (a8)
    v17 = 2;
  else
    v17 = 0;
  v20[0] = a7;
  v20[1] = v17;
  v20[2] = a9;
  *(_QWORD *)&v18 = 0x3000300030003;
  *((_QWORD *)&v18 + 1) = 0x3000300030003;
  *(_QWORD *)&v19 = 0x7000700070007;
  *((_QWORD *)&v19 + 1) = 0x7000700070007;
  v21 = v18;
  v22 = v19;
  *(_QWORD *)&v18 = -1;
  *((_QWORD *)&v18 + 1) = -1;
  LOBYTE(v19) = 0;
  v24 = v18;
  v25 = (unsigned __int16)v19;
  *(_QWORD *)&v19 = 0x8000800080008000;
  *((_QWORD *)&v19 + 1) = 0x8000800080008000;
  v23 = v19;
  v31[0] = 0;
  v31[1] = a6;
  v28[0] = &off_100450790;
  v28[1] = a1;
  v28[2] = a2;
  v28[3] = a3;
  v28[4] = a4;
  v29 = a5;
  v30 = v20;
  sub_10026F638(v31, (uint64_t)v28, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v28);
  if (v27)
    sub_1002989D0(v26);
}

void sub_1002B82F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  nullsub_1(va1);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002B830C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9)
{
  int32x2_t v17;
  int32x2_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t *v33;
  unsigned int v34;
  unsigned int v35;
  int32x4_t v36;
  int v37;
  _BYTE v38[28];
  int32x4_t v39;
  int32x4_t v40;
  _BYTE v41[8];
  int v42;
  uint64_t (**v43)(_QWORD);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int *v49;
  int v50;
  int v51;

  sub_100298C2C(v41, &off_100450340);
  if (a7 == 2)
  {
    v37 = a8;
    *(_QWORD *)v38 = 0x259100001323;
    v34 = 1868;
    *(_DWORD *)&v38[8] = 1868;
    v35 = 4899;
    if ((a9 & 1) == 0)
    {
      *(_DWORD *)v38 = 1868;
      *(_DWORD *)&v38[8] = 4899;
      v35 = 1868;
      v34 = 4899;
    }
    *(int16x4_t *)&v38[12] = vdup_n_s16(v35);
    *(int16x4_t *)&v38[20] = vdup_n_s16(0x2591u);
    *(int16x4_t *)v39.i8 = vdup_n_s16(v34);
    v36.i64[0] = 0x200000002000;
    v36.i64[1] = 0x200000002000;
    v40 = v36;
    v50 = 0;
    v51 = a6;
    v43 = &off_100450850;
    v44 = a1;
    v45 = a2;
    v46 = a3;
    v47 = a4;
    v48 = a5;
    v49 = &v37;
    sub_10026F638(&v50, (uint64_t)&v43, (double)(a6 * a5) * 0.0000152587891);
  }
  else if (a7)
  {
    v37 = a8;
    *(_DWORD *)&v38[8] = 1038710997;
    *(_QWORD *)v38 = 0x3F1645A23E991687;
    if ((a9 & 1) != 0)
    {
      v18.i32[0] = 1050220167;
      v17.i32[0] = 1038710997;
    }
    else
    {
      *(_DWORD *)v38 = 1038710997;
      *(_DWORD *)&v38[8] = 1050220167;
      v18.i32[0] = 1038710997;
      v17.i32[0] = 1050220167;
    }
    *(int32x4_t *)&v38[12] = vdupq_lane_s32(v18, 0);
    v39 = vdupq_lane_s32(*(int32x2_t *)&v38[4], 0);
    v40 = vdupq_lane_s32(v17, 0);
    v50 = 0;
    v51 = a6;
    v43 = &off_1004508B0;
    v44 = a1;
    v45 = a2;
    v46 = a3;
    v47 = a4;
    v48 = a5;
    v49 = &v37;
    sub_10026F638(&v50, (uint64_t)&v43, (double)(a6 * a5) * 0.0000152587891);
  }
  else
  {
    if (a9)
      v19 = 2;
    else
      v19 = 0;
    v20 = dword_1003C00D4[v19];
    v21 = dword_1003C00D4[v19 ^ 2];
    v37 = a8;
    v22.i64[0] = 0x200000002000;
    v22.i64[1] = 0x200000002000;
    v23 = vmlaq_s32(v22, vdupq_n_s32(v20), (int32x4_t)xmmword_1003BCB00);
    v24 = vdupq_n_s32(4 * v20);
    v25 = vmulq_s32(vdupq_n_s32(v21), (int32x4_t)xmmword_1003BCB00);
    v26 = vdupq_n_s32(4 * v21);
    v27 = (int32x4_t)xmmword_1003BFDE0;
    v28 = 1028;
    v29 = vdupq_n_s32(0x9644u);
    v30 = vdupq_n_s32(0x12C88u);
    do
    {
      v31 = vaddq_s32(v23, v24);
      v32 = vaddq_s32(v25, v26);
      v33 = (int32x4_t *)&v38[v28 - 4];
      *(int32x4_t *)&v38[v28 - 1028] = v25;
      *(int32x4_t *)&v38[v28 - 1012] = v32;
      *v33 = v27;
      v33[1] = vaddq_s32(v27, v29);
      v33[64] = v23;
      v33[65] = v31;
      v23 = vaddq_s32(v31, v24);
      v27 = vaddq_s32(v27, v30);
      v25 = vaddq_s32(v32, v26);
      v28 += 32;
    }
    while (v28 != 2052);
    v50 = 0;
    v51 = a6;
    v43 = &off_1004507F0;
    v44 = a1;
    v45 = a2;
    v46 = a3;
    v47 = a4;
    v48 = a5;
    v49 = &v37;
    sub_10026F638(&v50, (uint64_t)&v43, (double)(a6 * a5) * 0.0000152587891);
  }
  nullsub_1(&v43);
  if (v42)
    sub_1002989D0(v41);
}

void sub_1002B85E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1 - 144);
  sub_1001D40CC(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_1002B8608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  int v16;
  _BYTE v17[8];
  int v18;
  uint64_t (**v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int *v25;
  int v26;
  int v27;

  sub_100298C2C(v17, &off_100450360);
  if (a7 == 2)
  {
    v16 = a8;
    v26 = 0;
    v27 = a6;
    v19 = &off_100450970;
    v20 = a1;
    v21 = a2;
    v22 = a3;
    v23 = a4;
    v24 = a5;
    v25 = &v16;
    sub_10026F638(&v26, (uint64_t)&v19, (double)(a6 * a5) * 0.0000152587891);
  }
  else
  {
    v16 = a8;
    v26 = 0;
    v27 = a6;
    if (a7)
    {
      v19 = &off_1004509D0;
      v20 = a1;
      v21 = a2;
      v22 = a3;
      v23 = a4;
      v24 = a5;
      v25 = &v16;
      sub_10026F638(&v26, (uint64_t)&v19, (double)(a6 * a5) * 0.0000152587891);
    }
    else
    {
      v19 = &off_100450910;
      v20 = a1;
      v21 = a2;
      v22 = a3;
      v23 = a4;
      v24 = a5;
      v25 = &v16;
      sub_10026F638(&v26, (uint64_t)&v19, (double)(a6 * a5) * 0.0000152587891);
    }
  }
  nullsub_1(&v19);
  if (v18)
    sub_1002989D0(v17);
}

void sub_1002B8774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  nullsub_1(va1);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002B879C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  __int128 v14;
  __int128 v15;
  int v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[8];
  int v24;
  _QWORD v25[5];
  int v26;
  int *v27;
  _DWORD v28[2];

  sub_100298C2C(v23, &off_100450380);
  v16 = a7;
  v17 = vdup_n_s16(0x74Cu);
  v18 = vdup_n_s16(0x2591u);
  v19 = vdup_n_s16(0x1323u);
  *(_QWORD *)&v14 = 0x200000002000;
  *((_QWORD *)&v14 + 1) = 0x200000002000;
  *(_QWORD *)&v15 = 0xF800F800F800F8;
  *((_QWORD *)&v15 + 1) = 0xF800F800F800F8;
  v20 = v14;
  v21 = v15;
  *(_QWORD *)&v14 = 0xFC00FC00FC00FCLL;
  *((_QWORD *)&v14 + 1) = 0xFC00FC00FC00FCLL;
  v22 = v14;
  v28[0] = 0;
  v28[1] = a6;
  v25[0] = &off_100450A30;
  v25[1] = a1;
  v25[2] = a2;
  v25[3] = a3;
  v25[4] = a4;
  v26 = a5;
  v27 = &v16;
  sub_10026F638(v28, (uint64_t)v25, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v25);
  if (v24)
    sub_1002989D0(v23);
}

void sub_1002B8898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  nullsub_1(va1);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002B88B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE v17[8];
  int v18;
  _QWORD v19[5];
  int v20;
  int *v21;
  _DWORD v22[2];

  sub_100298C2C(v17, &off_1004503A0);
  v14 = a7;
  v15 = 0xF8F8F8F8F8F8F8F8;
  v16 = 0xFCFCFCFCFCFCFCFCLL;
  v22[0] = 0;
  v22[1] = a6;
  v19[0] = &off_100450A90;
  v19[1] = a1;
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a4;
  v20 = a5;
  v21 = &v14;
  sub_10026F638(v22, (uint64_t)v19, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v19);
  if (v18)
    sub_1002989D0(v17);
}

void sub_1002B8988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  nullsub_1(va1);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002B89A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9, char a10)
{
  int32x2_t v18;
  int v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  __int128 v27;
  int v28;
  const __int16 *v29;
  int16x4_t v30;
  int16x4_t v31;
  const float *v32;
  float32x4_t v33;
  const float *v34;
  float32x4_t v35;
  int32x4_t v36;
  const float *v37;
  float32x4_t v38;
  int32x4_t v39;
  const float *v40;
  float32x4_t v41;
  const float *v42;
  float32x4_t v43;
  float32x4_t v44;
  int v45;
  int v46;
  _BYTE v47[40];
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  char v54[8];
  int v55;
  uint64_t (**v56)(_QWORD);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int *v62;
  int v63;
  int v64;

  sub_100298C2C(v54, &off_1004503C0);
  if (a9)
    v19 = 2;
  else
    v19 = 0;
  if (a7 == 2)
  {
    v45 = a8;
    v46 = v19;
    v47[20] = a10;
    v23 = &unk_1003C0128;
    if (a10)
      v23 = &unk_1003C0114;
    *(_OWORD *)v47 = *(_OWORD *)v23;
    *(_DWORD *)&v47[16] = v23[4];
    if (a9)
    {
      v24 = *(_DWORD *)v47;
      v25 = *(_DWORD *)&v47[8];
    }
    else
    {
      v25 = *(_DWORD *)v47;
      v24 = *(_DWORD *)&v47[8];
      *(_DWORD *)v47 = *(_DWORD *)&v47[8];
      *(_DWORD *)&v47[8] = v25;
    }
    v37 = (const float *)((unint64_t)&v45 | 0xC);
    v38 = vld1q_dup_f32(v37);
    *(int32x4_t *)&v47[24] = vdupq_n_s32(v24);
    v48 = (int32x4_t)v38;
    v39 = vdupq_n_s32(v25);
    v40 = (const float *)&v47[12];
    v41 = vld1q_dup_f32(v40);
    v49 = v39;
    v50 = (int32x4_t)v41;
    v42 = (const float *)&v47[16];
    v43 = vld1q_dup_f32(v42);
    v41.i64[0] = 0x2000000020000000;
    v41.i64[1] = 0x2000000020000000;
    v51 = (int32x4_t)v43;
    v52 = v41;
    v43.i64[0] = 0x200000002000;
    v43.i64[1] = 0x200000002000;
    v53 = v43;
    v63 = 0;
    v64 = a6;
    v56 = &off_100450B50;
    v57 = a1;
    v58 = a2;
    v59 = a3;
    v60 = a4;
    v61 = a5;
    v62 = &v45;
    sub_10026F638(&v63, (uint64_t)&v56, (double)(a6 * a5) * 0.0000152587891);
  }
  else if (a7)
  {
    v45 = a8;
    v46 = v19;
    v47[0] = a10;
    v26 = &unk_1003C0150;
    if (a10)
      v26 = &unk_1003C013C;
    v27 = *(_OWORD *)v26;
    *(_OWORD *)&v47[4] = *(_OWORD *)v26;
    *(_DWORD *)&v47[20] = v26[4];
    v28 = *(_DWORD *)&v47[4];
    v18.i32[0] = *(_DWORD *)&v47[12];
    if ((a9 & 1) != 0)
    {
      LODWORD(v27) = *(_DWORD *)&v47[12];
      v18.i32[0] = *(_DWORD *)&v47[4];
    }
    else
    {
      *(_DWORD *)&v47[4] = *(_DWORD *)&v47[12];
      *(_DWORD *)&v47[12] = v28;
      LODWORD(v27) = v28;
    }
    *(int32x4_t *)&v47[24] = vdupq_lane_s32(v18, 0);
    v48 = vdupq_lane_s32(*(int32x2_t *)&v47[8], 0);
    v49 = vdupq_lane_s32(*(int32x2_t *)&v27, 0);
    v50 = vdupq_lane_s32(*(int32x2_t *)&v47[16], 0);
    v44.i64[0] = 0x3F0000003F000000;
    v44.i64[1] = 0x3F0000003F000000;
    v51 = vdupq_lane_s32(*(int32x2_t *)&v47[20], 0);
    v52 = v44;
    v63 = 0;
    v64 = a6;
    v56 = &off_100450BB0;
    v57 = a1;
    v58 = a2;
    v59 = a3;
    v60 = a4;
    v61 = a5;
    v62 = &v45;
    sub_10026F638(&v63, (uint64_t)&v56, (double)(a6 * a5) * 0.0000152587891);
  }
  else
  {
    v45 = a8;
    v46 = v19;
    v47[20] = a10;
    v20 = &unk_1003C0100;
    if (a10)
      v20 = &unk_1003C00EC;
    *(_OWORD *)v47 = *(_OWORD *)v20;
    *(_DWORD *)&v47[16] = v20[4];
    if (a9)
    {
      v21 = *(_DWORD *)v47;
      v22 = *(_DWORD *)&v47[8];
    }
    else
    {
      v22 = *(_DWORD *)v47;
      v21 = *(_DWORD *)&v47[8];
      *(_DWORD *)v47 = *(_DWORD *)&v47[8];
      *(_DWORD *)&v47[8] = v22;
    }
    v29 = (const __int16 *)((unint64_t)&v45 | 0xC);
    v30 = vld1_dup_s16(v29);
    *(int16x4_t *)&v47[24] = vdup_n_s16(v21);
    *(int16x4_t *)&v47[32] = v30;
    v31 = vdup_n_s16(v22);
    v32 = (const float *)&v47[12];
    v33 = vld1q_dup_f32(v32);
    v34 = (const float *)&v47[16];
    v35 = vld1q_dup_f32(v34);
    *(int16x4_t *)v48.i8 = v31;
    v49 = (int32x4_t)v33;
    v50 = (int32x4_t)v35;
    v36.i64[0] = 0x20000000200000;
    v36.i64[1] = 0x20000000200000;
    v33.i64[0] = 0x200000002000;
    v33.i64[1] = 0x200000002000;
    v51 = v36;
    v52 = v33;
    v63 = 0;
    v64 = a6;
    v56 = &off_100450AF0;
    v57 = a1;
    v58 = a2;
    v59 = a3;
    v60 = a4;
    v61 = a5;
    v62 = &v45;
    sub_10026F638(&v63, (uint64_t)&v56, (double)(a6 * a5) * 0.0000152587891);
  }
  nullsub_1(&v56);
  if (v55)
    sub_1002989D0(v54);
}

void sub_1002B8CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  nullsub_1(v28 - 152);
  sub_1001D40CC((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_1002B8CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9, char a10)
{
  int v18;
  const float *v19;
  _OWORD *v20;
  float32x4_t v21;
  const float *v22;
  float32x4_t v23;
  const float *v24;
  float32x4_t v25;
  const float *v26;
  float32x4_t v27;
  _OWORD *v28;
  const float *v29;
  float32x4_t v30;
  const float *v31;
  float32x4_t v32;
  const float *v33;
  float32x4_t v34;
  const float *v35;
  float32x4_t v36;
  _OWORD *v37;
  float32x4_t v38;
  char v44[8];
  int v45;
  uint64_t (**v46)(_QWORD);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  char v57;
  _BYTE v58[20];
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  sub_100298C2C(v44, &off_1004503E0);
  if (a9)
    v18 = 2;
  else
    v18 = 0;
  if (a7 == 2)
  {
    v55 = a8;
    v56 = v18;
    v28 = &unk_1003C0194;
    if (a10)
      v28 = &unk_1003C0184;
    *(_OWORD *)v58 = *v28;
    v29 = (const float *)((unint64_t)&v55 | 0xC);
    v30 = vld1q_dup_f32(v29);
    v31 = (const float *)&v58[4];
    v32 = vld1q_dup_f32(v31);
    v57 = a10;
    v59 = (int32x4_t)v30;
    v60 = (int32x4_t)v32;
    v33 = (const float *)&v58[8];
    v34 = vld1q_dup_f32(v33);
    v35 = (const float *)&v58[12];
    v36 = vld1q_dup_f32(v35);
    v61 = (int32x4_t)v34;
    v62 = (int32x4_t)v36;
    v34.i64[0] = 0x800000008000;
    v34.i64[1] = 0x800000008000;
    v36.i64[0] = 0x200000002000;
    v36.i64[1] = 0x200000002000;
    v63 = v36;
    v64 = v34;
    v65 = -1;
    v66 = -1;
    v67 = -1;
    v53 = 0;
    v54 = a6;
    v46 = &off_100450C70;
    v47 = a1;
    v48 = a2;
    v49 = a3;
    v50 = a4;
    v51 = a5;
    v52 = &v55;
    sub_10026F638(&v53, (uint64_t)&v46, (double)(a6 * a5) * 0.0000152587891);
  }
  else if (a7)
  {
    v55 = a8;
    v56 = v18;
    v37 = &unk_1003C01B4;
    if (a10)
      v37 = &unk_1003C01A4;
    *(_OWORD *)v58 = *v37;
    v57 = a10;
    v59 = vdupq_lane_s32(*(int32x2_t *)v58, 0);
    v60 = vdupq_lane_s32(*(int32x2_t *)&v58[4], 0);
    v61 = vdupq_lane_s32(*(int32x2_t *)&v58[8], 0);
    v62 = vdupq_lane_s32(*(int32x2_t *)&v58[12], 0);
    v38.i64[0] = 0x3F0000003F000000;
    v38.i64[1] = 0x3F0000003F000000;
    __asm { FMOV            V1.4S, #1.0 }
    v63 = _Q1;
    v64 = v38;
    v53 = 0;
    v54 = a6;
    v46 = &off_100450CD0;
    v47 = a1;
    v48 = a2;
    v49 = a3;
    v50 = a4;
    v51 = a5;
    v52 = &v55;
    sub_10026F638(&v53, (uint64_t)&v46, (double)(a6 * a5) * 0.0000152587891);
  }
  else
  {
    v55 = a8;
    v56 = v18;
    v57 = a10;
    if (a10)
      v20 = &unk_1003C0164;
    else
      v20 = &unk_1003C0174;
    *(_OWORD *)v58 = *v20;
    v19 = (const float *)((unint64_t)&v55 | 0xC);
    v21 = vld1q_dup_f32(v19);
    v22 = (const float *)&v58[4];
    v23 = vld1q_dup_f32(v22);
    v59 = (int32x4_t)v21;
    v60 = (int32x4_t)v23;
    v24 = (const float *)&v58[8];
    v25 = vld1q_dup_f32(v24);
    v26 = (const float *)&v58[12];
    v27 = vld1q_dup_f32(v26);
    v61 = (int32x4_t)v25;
    v62 = (int32x4_t)v27;
    v27.i64[0] = 0x200000002000;
    v27.i64[1] = 0x200000002000;
    v63 = v27;
    v64.i64[0] = 0x80008000800080;
    v64.i64[1] = -1;
    v53 = 0;
    v54 = a6;
    v46 = &off_100450C10;
    v47 = a1;
    v48 = a2;
    v49 = a3;
    v50 = a4;
    v51 = a5;
    v52 = &v55;
    sub_10026F638(&v53, (uint64_t)&v46, (double)(a6 * a5) * 0.0000152587891);
  }
  nullsub_1(&v46);
  if (v45)
    sub_1002989D0(v44);
}

void sub_1002B8FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  nullsub_1(&a11);
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002B8FD0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1002B8FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9)
{
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int32x2_t v34;
  int32x2_t v35;
  int32x2_t v36;
  int32x2_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int v40;
  _BYTE v41[32];
  int v42;
  int16x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  _BYTE v53[8];
  int v54;
  uint64_t (**v55)(_QWORD);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int *v61;
  int v62;
  int v63;

  sub_100298C2C(v53, &off_100450400);
  if (a7 == 2)
  {
    v40 = a8;
    *(_OWORD *)v41 = xmmword_1003BFDF0;
    *(_OWORD *)&v41[16] = xmmword_1003BFE00;
    v28 = 3892;
    v42 = 3892;
    v29 = 739;
    v30 = 79;
    if ((a9 & 1) != 0)
    {
      v31 = 1689;
      v32 = 871;
      v33 = 296;
    }
    else
    {
      *(_DWORD *)v41 = 739;
      *(_QWORD *)&v41[8] = 0x12800000699;
      v31 = 739;
      v29 = 1689;
      *(_QWORD *)&v41[20] = 0xF3400000367;
      v42 = 79;
      v32 = 296;
      v33 = 871;
      v30 = 3892;
      v28 = 79;
    }
    v43 = vdup_n_s16(v31);
    *(int16x4_t *)v44.i8 = vdup_n_s16(0x5B9u);
    v44.u64[1] = (unint64_t)vdup_n_s16(v29);
    *(int16x4_t *)v45.i8 = vdup_n_s16(v32);
    v45.u64[1] = (unint64_t)vdup_n_s16(0xB71u);
    *(int16x4_t *)v46.i8 = vdup_n_s16(v33);
    v46.u64[1] = (unint64_t)vdup_n_s16(v30);
    *(int16x4_t *)v47.i8 = vdup_n_s16(0x1E8u);
    v47.u64[1] = (unint64_t)vdup_n_s16(v28);
    v39.i64[0] = 0x80000000800;
    v39.i64[1] = 0x80000000800;
    v48 = v39;
    v62 = 0;
    v63 = a6;
    v55 = &off_100450D90;
    v56 = a1;
    v57 = a2;
    v58 = a3;
    v59 = a4;
    v60 = a5;
    v61 = &v40;
    sub_10026F638(&v62, (uint64_t)&v55, (double)(a6 * a5) * 0.0000152587891);
  }
  else if (a7)
  {
    v40 = a8;
    v34 = (int32x2_t)vcvt_f32_f64((float64x2_t)xmmword_1004AE690);
    *(int32x2_t *)v41 = v34;
    *(float *)v18.i32 = *(double *)&qword_1004AE6A0;
    *(_DWORD *)&v41[8] = v18.i32[0];
    v35 = (int32x2_t)vcvt_f32_f64(unk_1004AE6A8);
    *(int32x2_t *)&v41[12] = v35;
    *(float *)v17.i32 = *(double *)&qword_1004AE6B8;
    *(_DWORD *)&v41[20] = v17.i32[0];
    v36 = (int32x2_t)vcvt_f32_f64((float64x2_t)xmmword_1004AE6C0);
    *(int32x2_t *)&v41[24] = v36;
    v37.i32[1] = HIDWORD(qword_1004AE6D0);
    *(float *)v37.i32 = *(double *)&qword_1004AE6D0;
    v42 = v37.i32[0];
    if ((a9 & 1) != 0)
    {
      *(float *)v19.i32 = *(double *)&qword_1004AE6D0;
      v37.i32[0] = v36.i32[0];
      *(float *)v20.i32 = *(double *)&qword_1004AE6B8;
      v17.i32[0] = v35.i32[0];
      *(float *)v21.i32 = *(double *)&qword_1004AE6A0;
      v18.i32[0] = v34.i32[0];
    }
    else
    {
      *(float *)v41 = *(double *)&qword_1004AE6A0;
      *(_DWORD *)&v41[8] = v34.i32[0];
      *(float *)&v41[12] = *(double *)&qword_1004AE6B8;
      *(_DWORD *)&v41[20] = v35.i32[0];
      *(float *)&v41[24] = *(double *)&qword_1004AE6D0;
      v19.i32[0] = v36.i32[0];
      v20.i32[0] = v35.i32[0];
      v21.i32[0] = v34.i32[0];
      v42 = v36.i32[0];
    }
    v44 = vdupq_lane_s32(v18, 0);
    v45 = vdupq_lane_s32(v34, 1);
    v46 = vdupq_lane_s32(v21, 0);
    v47 = vdupq_lane_s32(v17, 0);
    v48 = vdupq_lane_s32(v35, 1);
    v49 = vdupq_lane_s32(v20, 0);
    v50 = vdupq_lane_s32(v37, 0);
    v51 = vdupq_lane_s32(v36, 1);
    v52 = vdupq_lane_s32(v19, 0);
    v62 = 0;
    v63 = a6;
    v55 = &off_100450DF0;
    v56 = a1;
    v57 = a2;
    v58 = a3;
    v59 = a4;
    v60 = a5;
    v61 = &v40;
    sub_10026F638(&v62, (uint64_t)&v55, (double)(a6 * a5) * 0.0000152587891);
  }
  else
  {
    v40 = a8;
    *(_OWORD *)v41 = xmmword_1003BFDF0;
    *(_OWORD *)&v41[16] = xmmword_1003BFE00;
    v22 = 3892;
    v42 = 3892;
    v23 = 739;
    v24 = 79;
    if ((a9 & 1) != 0)
    {
      v25 = 1689;
      v26 = 871;
      v27 = 296;
    }
    else
    {
      *(_DWORD *)v41 = 739;
      *(_QWORD *)&v41[8] = 0x12800000699;
      v25 = 739;
      v23 = 1689;
      *(_QWORD *)&v41[20] = 0xF3400000367;
      v42 = 79;
      v26 = 296;
      v27 = 871;
      v24 = 3892;
      v22 = 79;
    }
    v43 = vdup_n_s16(v25);
    *(int16x4_t *)v44.i8 = vdup_n_s16(0x5B9u);
    v44.u64[1] = (unint64_t)vdup_n_s16(v23);
    *(int16x4_t *)v45.i8 = vdup_n_s16(v26);
    v45.u64[1] = (unint64_t)vdup_n_s16(0xB71u);
    *(int16x4_t *)v46.i8 = vdup_n_s16(v27);
    v46.u64[1] = (unint64_t)vdup_n_s16(v24);
    *(int16x4_t *)v47.i8 = vdup_n_s16(0x1E8u);
    v47.u64[1] = (unint64_t)vdup_n_s16(v22);
    v38.i64[0] = 0x80000000800;
    v38.i64[1] = 0x80000000800;
    v48 = v38;
    v62 = 0;
    v63 = a6;
    v55 = &off_100450D30;
    v56 = a1;
    v57 = a2;
    v58 = a3;
    v59 = a4;
    v60 = a5;
    v61 = &v40;
    sub_10026F638(&v62, (uint64_t)&v55, (double)(a6 * a5) * 0.0000152587891);
  }
  nullsub_1(&v55);
  if (v54)
    sub_1002989D0(v53);
}

void sub_1002B93A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1 - 144);
  sub_1001D40CC(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_1002B93D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, unsigned int a8, char a9)
{
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  float v30;
  float32x4_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t (**v39)(_QWORD);
  __int128 v40;
  __int128 v41;
  int v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  __int128 v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  _BYTE v55[8];
  int v56;
  uint64_t (**v57)(_QWORD);
  _BYTE v58[24];
  _BYTE v59[12];
  uint64_t (***v60)(_QWORD);
  int v61;
  int v62;

  sub_100298C2C(v55, &off_100450420);
  if (a9)
    v17 = 2;
  else
    v17 = 0;
  if (a7 == 2)
  {
    v39 = (uint64_t (**)(_QWORD))__PAIR64__(v17, a8);
    v40 = xmmword_1003BFE10;
    v41 = xmmword_1003BFE20;
    v24 = 4331;
    v42 = 4331;
    v25 = -2042;
    if ((a9 & 1) != 0)
    {
      v26 = 13273;
      v27 = -6296;
      v28 = 228;
      v29 = -836;
    }
    else
    {
      *(_QWORD *)&v40 = 0xFFFFFCBC000000E4;
      *((_QWORD *)&v41 + 1) = 0xFFFFE768000033D9;
      v26 = 228;
      v27 = -836;
      DWORD2(v40) = 4331;
      v42 = -2042;
      v25 = 4331;
      v28 = 13273;
      v29 = -6296;
      v24 = -2042;
    }
    v43 = vdupq_n_s32(v26);
    v44 = vdupq_n_s32(v27);
    v45 = vdupq_n_s32(v25);
    v46 = vdupq_n_s32(0xFFFFF07E);
    *(_QWORD *)&v37 = 0xAA000000AALL;
    *((_QWORD *)&v37 + 1) = 0xAA000000AALL;
    v47 = vdupq_n_s32(0x1E04u);
    v48 = v37;
    v49 = vdupq_n_s32(v28);
    v50 = vdupq_n_s32(v29);
    *(_QWORD *)&v37 = 0x80000000800;
    *((_QWORD *)&v37 + 1) = 0x80000000800;
    v51 = vdupq_n_s32(v24);
    v52 = v37;
    *(_QWORD *)&v38 = -1;
    *((_QWORD *)&v38 + 1) = -1;
    v54 = v38;
    v53 = -1;
    v61 = 0;
    v62 = a6;
    v57 = &off_100450EB0;
    *(_QWORD *)v58 = a1;
    *(_QWORD *)&v58[8] = a2;
    *(_QWORD *)&v58[16] = a3;
    *(_QWORD *)v59 = a4;
    *(_DWORD *)&v59[8] = a5;
    v60 = &v39;
    sub_10026F638(&v61, (uint64_t)&v57, (double)(a6 * a5) * 0.0000152587891);
LABEL_18:
    nullsub_1(&v57);
    if (!v56)
      return;
    goto LABEL_19;
  }
  if (!a7)
  {
    v39 = (uint64_t (**)(_QWORD))__PAIR64__(v17, a8);
    v40 = xmmword_1003BFE10;
    v41 = xmmword_1003BFE20;
    v18 = 4331;
    v42 = 4331;
    if ((a9 & 1) != 0)
    {
      v19 = 13273;
      v20 = 59240;
      v21 = 63494;
      v22 = 228;
      v23 = 64700;
    }
    else
    {
      *(_QWORD *)&v40 = 0xFFFFFCBC000000E4;
      *((_QWORD *)&v41 + 1) = 0xFFFFE768000033D9;
      v19 = 228;
      v20 = 64700;
      DWORD2(v40) = 4331;
      v42 = -2042;
      v21 = 4331;
      v22 = 13273;
      v23 = 59240;
      v18 = 63494;
    }
    *(int16x4_t *)v43.i8 = vdup_n_s16(v19);
    v43.u64[1] = (unint64_t)vdup_n_s16(v20);
    *(int16x4_t *)v44.i8 = vdup_n_s16(v21);
    v44.u64[1] = (unint64_t)vdup_n_s16(0xF07Eu);
    *(int16x4_t *)v45.i8 = vdup_n_s16(0x1E04u);
    v45.i64[1] = 0xAA00AA00AA00AALL;
    *(int16x4_t *)v46.i8 = vdup_n_s16(v22);
    v46.u64[1] = (unint64_t)vdup_n_s16(v23);
    *(_QWORD *)&v36 = 0x80000000800;
    *((_QWORD *)&v36 + 1) = 0x80000000800;
    v48 = v36;
    *(int16x4_t *)v47.i8 = vdup_n_s16(v18);
    v47.i64[1] = -1;
    v61 = 0;
    v62 = a6;
    v57 = &off_100450E50;
    *(_QWORD *)v58 = a1;
    *(_QWORD *)&v58[8] = a2;
    *(_QWORD *)&v58[16] = a3;
    *(_QWORD *)v59 = a4;
    *(_DWORD *)&v59[8] = a5;
    v60 = &v39;
    sub_10026F638(&v61, (uint64_t)&v57, (double)(a6 * a5) * 0.0000152587891);
    goto LABEL_18;
  }
  v57 = (uint64_t (**)(_QWORD))__PAIR64__(v17, a8);
  v30 = *(double *)&xmmword_1004AE6E0;
  v31 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)((char *)&xmmword_1004AE6E0 + 8)), *(float64x2_t *)&qword_1004AE6F8);
  *(float32x4_t *)&v58[4] = v31;
  v32 = *((double *)&xmmword_1004AE700 + 1);
  *(float *)v58 = v30;
  v33 = *(double *)&qword_1004AE710;
  v34 = *(double *)&qword_1004AE718;
  *(float *)&v58[20] = v32;
  *(float *)v59 = v33;
  v35 = *(double *)&qword_1004AE720;
  *(float *)&v59[4] = v34;
  *(float *)&v59[8] = v35;
  if ((a9 & 1) == 0)
  {
    *(float *)v58 = *(double *)&qword_1004AE710;
    *(float *)&v58[4] = *(double *)&qword_1004AE718;
    *(_QWORD *)&v59[4] = v31.i64[0];
    *(float *)v59 = *(double *)&xmmword_1004AE6E0;
    *(float *)&v58[8] = *(double *)&qword_1004AE720;
  }
  v61 = 0;
  v62 = a6;
  v39 = &off_100450F10;
  *(_QWORD *)&v40 = a1;
  *((_QWORD *)&v40 + 1) = a2;
  *(_QWORD *)&v41 = a3;
  *((_QWORD *)&v41 + 1) = a4;
  v42 = a5;
  v43.i64[0] = (uint64_t)&v57;
  sub_10026F638(&v61, (uint64_t)&v39, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(&v39);
  if (v56)
LABEL_19:
    sub_1002989D0(v55);
}

void sub_1002B974C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1 - 144);
  sub_1001D40CC(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_1002B976C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  nullsub_1(&a9);
  sub_1001D40CC(v9 - 160);
  _Unwind_Resume(a1);
}

void sub_1002B978C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int32 a5, int a6, int a7, unsigned int a8, char a9, char a10, char a11)
{
  int v19;
  int v20;
  float v21;
  char v22[8];
  int v23;
  uint64_t (**v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int32 v29;
  uint64_t (***v30)(_QWORD);
  int v31;
  int v32;
  uint64_t (**v33)(_QWORD);
  uint64_t v34;
  int32x4_t v35;
  int32x4_t v36;
  uint64_t v37;

  sub_100298C2C(v22, &off_100450440);
  if (a10)
    v19 = 256;
  else
    v19 = 180;
  if (a7 == 5)
    v19 = 360;
  if (a9)
    v20 = 2;
  else
    v20 = 0;
  if (a11)
  {
    if (a7)
    {
      v24 = (uint64_t (**)(_QWORD))__PAIR64__(v20, a8);
      *(float *)&v25 = (float)v19;
      v31 = 0;
      v32 = a6;
      v33 = &off_100450FD0;
      v34 = a1;
      v35.i64[0] = a2;
      v35.i64[1] = a3;
      v36.i64[0] = a4;
      v36.i32[2] = a5;
      v37 = (uint64_t)&v24;
      sub_10026F638(&v31, (uint64_t)&v33, (double)(a6 * a5) * 0.0000152587891);
    }
    else
    {
      v24 = (uint64_t (**)(_QWORD))__PAIR64__(v20, a8);
      LODWORD(v25) = v19;
      if (v19 != 180 && v19 != 256)
      {
        v33 = 0;
        v34 = 0;
        qmemcpy((void *)sub_10029430C(&v33, 30), "hrange == 180 || hrange == 256", 30);
        sub_100294B74(-215, (uint64_t *)&v33, "RGB2HSV_b", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 4489);
      }
      v31 = 0;
      v32 = a6;
      v33 = &off_100450F70;
      v34 = a1;
      v35.i64[0] = a2;
      v35.i64[1] = a3;
      v36.i64[0] = a4;
      v36.i32[2] = a5;
      v37 = (uint64_t)&v24;
      sub_10026F638(&v31, (uint64_t)&v33, (double)(a6 * a5) * 0.0000152587891);
    }
LABEL_18:
    nullsub_1(&v33);
    if (!v23)
      return;
    goto LABEL_19;
  }
  v21 = (float)v19;
  if (a7)
  {
    v24 = (uint64_t (**)(_QWORD))__PAIR64__(v20, a8);
    *(float *)&v25 = v21 / 360.0;
    v31 = 0;
    v32 = a6;
    v33 = &off_100451090;
    v34 = a1;
    v35.i64[0] = a2;
    v35.i64[1] = a3;
    v36.i64[0] = a4;
    v36.i32[2] = a5;
    v37 = (uint64_t)&v24;
    sub_10026F638(&v31, (uint64_t)&v33, (double)(a6 * a5) * 0.0000152587891);
    goto LABEL_18;
  }
  v33 = (uint64_t (**)(_QWORD))(a8 | 0x300000000);
  LODWORD(v34) = v20;
  *((float *)&v34 + 1) = v21 / 360.0;
  v35 = vdupq_n_s32(0x437F0000u);
  v36 = vdupq_n_s32(0x3B808081u);
  v37 = -1;
  v31 = 0;
  v32 = a6;
  v24 = &off_100451030;
  v25 = a1;
  v26 = a2;
  v27 = a3;
  v28 = a4;
  v29 = a5;
  v30 = &v33;
  sub_10026F638(&v31, (uint64_t)&v24, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(&v24);
  if (!v23)
    return;
LABEL_19:
  sub_1002989D0(v22);
}

void sub_1002B9A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1002B9AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int32 a5, int a6, int a7, unsigned int a8, char a9, char a10, char a11)
{
  int v19;
  int v20;
  int v21;
  float v22;
  char v23[8];
  int v24;
  uint64_t (**v25)(_QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int32 v30;
  uint64_t (***v31)(_QWORD);
  int v32;
  int v33;
  uint64_t (**v34)(_QWORD);
  uint64_t v35;
  int32x4_t v36;
  int32x4_t v37;
  uint64_t v38;

  sub_100298C2C(v23, &off_100450460);
  if (a10)
    v19 = 255;
  else
    v19 = 180;
  if (a7 == 5)
    v20 = 360;
  else
    v20 = v19;
  if (a9)
    v21 = 2;
  else
    v21 = 0;
  v22 = (float)v20;
  if (a11)
  {
    if (a7)
    {
      v25 = (uint64_t (**)(_QWORD))__PAIR64__(v21, a8);
      *(float *)&v26 = 6.0 / v22;
      v32 = 0;
      v33 = a6;
      v34 = &off_100451150;
      v35 = a1;
      v36.i64[0] = a2;
      v36.i64[1] = a3;
      v37.i64[0] = a4;
      v37.i32[2] = a5;
      v38 = (uint64_t)&v25;
      sub_10026F638(&v32, (uint64_t)&v34, (double)(a6 * a5) * 0.0000152587891);
      goto LABEL_15;
    }
    v34 = (uint64_t (**)(_QWORD))(a8 | 0x300000000);
    LODWORD(v35) = v21;
    *((float *)&v35 + 1) = 6.0 / v22;
    v36 = vdupq_n_s32(0x437F0000u);
    v37 = vdupq_n_s32(0x3B808081u);
    v38 = -1;
    v32 = 0;
    v33 = a6;
    v25 = &off_1004510F0;
    v26 = a1;
    v27 = a2;
    v28 = a3;
    v29 = a4;
    v30 = a5;
    v31 = &v34;
    sub_10026F638(&v32, (uint64_t)&v25, (double)(a6 * a5) * 0.0000152587891);
LABEL_19:
    nullsub_1(&v25);
    if (!v24)
      return;
    goto LABEL_20;
  }
  if (!a7)
  {
    v34 = (uint64_t (**)(_QWORD))(a8 | 0x300000000);
    LODWORD(v35) = v21;
    *((float *)&v35 + 1) = 6.0 / v22;
    v36 = vdupq_n_s32(0x437F0000u);
    v37 = vdupq_n_s32(0x3B808081u);
    v38 = -1;
    v32 = 0;
    v33 = a6;
    v25 = &off_1004511B0;
    v26 = a1;
    v27 = a2;
    v28 = a3;
    v29 = a4;
    v30 = a5;
    v31 = &v34;
    sub_10026F638(&v32, (uint64_t)&v25, (double)(a6 * a5) * 0.0000152587891);
    goto LABEL_19;
  }
  v25 = (uint64_t (**)(_QWORD))__PAIR64__(v21, a8);
  *(float *)&v26 = 6.0 / v22;
  v32 = 0;
  v33 = a6;
  v34 = &off_100451210;
  v35 = a1;
  v36.i64[0] = a2;
  v36.i64[1] = a3;
  v37.i64[0] = a4;
  v37.i32[2] = a5;
  v38 = (uint64_t)&v25;
  sub_10026F638(&v32, (uint64_t)&v34, (double)(a6 * a5) * 0.0000152587891);
LABEL_15:
  nullsub_1(&v34);
  if (v24)
LABEL_20:
    sub_1002989D0(v23);
}

void sub_1002B9DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  nullsub_1(&a11);
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002B9DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  nullsub_1(&a19);
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002B9DE0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1002B9DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9, char a10, char a11)
{
  int v18;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  _BYTE v26[8];
  int v27;
  _QWORD v28[5];
  int v29;
  float32x4_t *v30;
  int v31;
  int v32;

  sub_100298C2C(v26, &off_100450480);
  if (a9)
    v18 = 2;
  else
    v18 = 0;
  if (a10)
  {
    if (a7)
    {
      sub_1002C1D10((uint64_t)v28, a8, v18, 0, 0, a11);
      v31 = 0;
      v32 = a6;
      v20.i64[0] = (uint64_t)&off_1004512D0;
      v20.i64[1] = a1;
      v21 = a2;
      v22 = a3;
      v23 = a4;
      v24 = a5;
      v25 = v28;
      sub_10026F638(&v31, (uint64_t)&v20, (double)(a6 * a5) * 0.0000152587891);
    }
    else
    {
      sub_1002BF198((uint64_t)v28, a8, v18, 0, 0, a11);
      v31 = 0;
      v32 = a6;
      v20.i64[0] = (uint64_t)&off_100451270;
      v20.i64[1] = a1;
      v21 = a2;
      v22 = a3;
      v23 = a4;
      v24 = a5;
      v25 = v28;
      sub_10026F638(&v31, (uint64_t)&v20, (double)(a6 * a5) * 0.0000152587891);
    }
LABEL_10:
    nullsub_1(&v20);
    if (!v27)
      return;
    goto LABEL_11;
  }
  if (a7)
  {
    sub_1002C2218((uint64_t)v28, a8, v18, 0, 0, a11);
    HIDWORD(v30) = a8;
    v31 = 0;
    v32 = a6;
    v20.i64[0] = (uint64_t)&off_100451390;
    v20.i64[1] = a1;
    v21 = a2;
    v22 = a3;
    v23 = a4;
    v24 = a5;
    v25 = v28;
    sub_10026F638(&v31, (uint64_t)&v20, (double)(a6 * a5) * 0.0000152587891);
    goto LABEL_10;
  }
  sub_1002C20AC(&v20, a8, v18, 0, 0, a11);
  v31 = 0;
  v32 = a6;
  v28[0] = &off_100451330;
  v28[1] = a1;
  v28[2] = a2;
  v28[3] = a3;
  v28[4] = a4;
  v29 = a5;
  v30 = &v20;
  sub_10026F638(&v31, (uint64_t)v28, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v28);
  if (!v27)
    return;
LABEL_11:
  sub_1002989D0(v26);
}

void sub_1002BA048(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1 - 152);
  sub_1001D40CC(v1 - 168);
  _Unwind_Resume(a1);
}

void sub_1002BA064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  nullsub_1(va);
  sub_1001D40CC(v3 - 168);
  _Unwind_Resume(a1);
}

void sub_1002BA0C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 168);
  _Unwind_Resume(a1);
}

void sub_1002BA0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9, char a10, unsigned __int8 a11)
{
  int v19;
  __int128 v20;
  _BYTE v21[8];
  int v22;
  uint64_t (**v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  int v31;
  _QWORD v32[5];
  int v33;
  uint64_t (***v34)(_QWORD);
  _DWORD v35[12];
  char v36;
  int32x4_t v37;
  int32x4_t v38;
  __int128 v39;
  uint64_t v40;
  int v41;

  sub_100298C2C(v21, &off_1004504A0);
  if (a9)
    v19 = 2;
  else
    v19 = 0;
  if (a10)
  {
    if (a7)
    {
      sub_1002C276C((uint64_t)v32, a8, v19, 0, 0, a11);
      v35[0] = a8;
      v30 = 0;
      v31 = a6;
      v23 = &off_100451450;
      v24 = a1;
      v25 = a2;
      v26 = a3;
      v27 = a4;
      v28 = a5;
      v29 = v32;
      sub_10026F638(&v30, (uint64_t)&v23, (double)(a6 * a5) * 0.0000152587891);
    }
    else
    {
      sub_1002C276C((uint64_t)v32, 3, v19, 0, 0, a11);
      sub_1002C2AC4((uint64_t)v35, a8, v19, 0, 0, a11);
      v41 = a8;
      v37 = vdupq_n_s32(0x437F0000u);
      v38 = vdupq_n_s32(0x3EC8C8C9u);
      v40 = -1;
      *(_QWORD *)&v20 = 0x4300000043000000;
      *((_QWORD *)&v20 + 1) = 0x4300000043000000;
      v39 = v20;
      v30 = 0;
      v31 = a6;
      v23 = &off_1004513F0;
      v24 = a1;
      v25 = a2;
      v26 = a3;
      v27 = a4;
      v28 = a5;
      v29 = v32;
      sub_10026F638(&v30, (uint64_t)&v23, (double)(a6 * a5) * 0.0000152587891);
    }
LABEL_12:
    nullsub_1(&v23);
    if (!v22)
      return;
    goto LABEL_13;
  }
  if (!a7)
  {
    LODWORD(v32[0]) = a8;
    sub_1002C2EE4((uint64_t)v32 + 4, a8, v19, 0, 0, a11);
    sub_1002C32D0((uint64_t)v35, a8, v19, 0, 0, a11);
    v36 = 1;
    v30 = 0;
    v31 = a6;
    v23 = &off_1004514B0;
    v24 = a1;
    v25 = a2;
    v26 = a3;
    v27 = a4;
    v28 = a5;
    v29 = v32;
    sub_10026F638(&v30, (uint64_t)&v23, (double)(a6 * a5) * 0.0000152587891);
    goto LABEL_12;
  }
  sub_1002C2EE4((uint64_t)&v23, a8, v19, 0, 0, a11);
  HIDWORD(v29) = a8;
  v30 = 0;
  v31 = a6;
  v32[0] = &off_100451510;
  v32[1] = a1;
  v32[2] = a2;
  v32[3] = a3;
  v32[4] = a4;
  v33 = a5;
  v34 = &v23;
  sub_10026F638(&v30, (uint64_t)v32, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v32);
  if (v22)
LABEL_13:
    sub_1002989D0(v21);
}

void sub_1002BA3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  nullsub_1(&a11);
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002BA424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002BA438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002BA44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002BA460(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1002BA47C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, char a9, int a10)
{
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BYTE v28[8];
  int v29;
  int v30;
  int v31;
  uint64_t (**v32)(_QWORD);
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  sub_100298C2C(v28, &off_1004504E0);
  if (a9)
    v18 = 20;
  else
    v18 = 0;
  v19 = v18 + 100 * a8 + a10;
  switch(v19)
  {
    case 300:
      v32 = &off_100451570;
      v33 = a4;
      v34 = a5;
      v35 = a6;
      v36 = a1;
      v37 = a2;
      v38 = a3;
      if (a7 >= 0)
        v21 = a7;
      else
        v21 = a7 + 1;
      v30 = 0;
      v31 = v21 >> 1;
      if (a7 * a6 > 76799)
        goto LABEL_47;
      sub_1002D1700((uint64_t)&v32, &v30);
      break;
    case 301:
      v32 = &off_1004515B0;
      v33 = a4;
      v34 = a5;
      v35 = a6;
      v36 = a1;
      v37 = a2;
      v38 = a3;
      if (a7 >= 0)
        v22 = a7;
      else
        v22 = a7 + 1;
      v30 = 0;
      v31 = v22 >> 1;
      if (a7 * a6 > 76799)
        goto LABEL_47;
      sub_1002D1990((uint64_t)&v32, &v30);
      break;
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
LABEL_32:
      v32 = 0;
      v33 = 0;
      qmemcpy((void *)sub_10029430C(&v32, 41), "Unknown/unsupported color conversion code", 41);
      sub_100294B74(-206, (uint64_t *)&v32, "cvtTwoPlaneYUVtoBGR", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 10858);
    case 320:
      v32 = &off_1004515F0;
      v33 = a4;
      v34 = a5;
      v35 = a6;
      v36 = a1;
      v37 = a2;
      v38 = a3;
      if (a7 >= 0)
        v23 = a7;
      else
        v23 = a7 + 1;
      v30 = 0;
      v31 = v23 >> 1;
      if (a7 * a6 > 76799)
        goto LABEL_47;
      sub_1002D1C10((uint64_t)&v32, &v30);
      break;
    case 321:
      v32 = &off_100451630;
      v33 = a4;
      v34 = a5;
      v35 = a6;
      v36 = a1;
      v37 = a2;
      v38 = a3;
      if (a7 >= 0)
        v24 = a7;
      else
        v24 = a7 + 1;
      v30 = 0;
      v31 = v24 >> 1;
      if (a7 * a6 <= 76799)
        sub_1002D1ED4((uint64_t)&v32, &v30);
      else
LABEL_47:
        sub_10026F638(&v30, (uint64_t)&v32, -1.0);
      break;
    default:
      switch(v19)
      {
        case 400:
          v32 = &off_100451670;
          v33 = a4;
          v34 = a5;
          v35 = a6;
          v36 = a1;
          v37 = a2;
          v38 = a3;
          if (a7 >= 0)
            v20 = a7;
          else
            v20 = a7 + 1;
          v30 = 0;
          v31 = v20 >> 1;
          if (a7 * a6 > 76799)
            goto LABEL_47;
          sub_1002D2188((uint64_t)&v32, &v30);
          break;
        case 401:
          v32 = &off_1004516B0;
          v33 = a4;
          v34 = a5;
          v35 = a6;
          v36 = a1;
          v37 = a2;
          v38 = a3;
          if (a7 >= 0)
            v27 = a7;
          else
            v27 = a7 + 1;
          v30 = 0;
          v31 = v27 >> 1;
          if (a7 * a6 > 76799)
            goto LABEL_47;
          sub_1002D2434((uint64_t)&v32, &v30);
          break;
        case 420:
          v32 = &off_1004516F0;
          v33 = a4;
          v34 = a5;
          v35 = a6;
          v36 = a1;
          v37 = a2;
          v38 = a3;
          if (a7 >= 0)
            v25 = a7;
          else
            v25 = a7 + 1;
          v30 = 0;
          v31 = v25 >> 1;
          if (a7 * a6 > 76799)
            goto LABEL_47;
          sub_1002D26D0((uint64_t)&v32, &v30);
          break;
        case 421:
          v32 = &off_100451730;
          v33 = a4;
          v34 = a5;
          v35 = a6;
          v36 = a1;
          v37 = a2;
          v38 = a3;
          if (a7 >= 0)
            v26 = a7;
          else
            v26 = a7 + 1;
          v30 = 0;
          v31 = v26 >> 1;
          if (a7 * a6 > 76799)
            goto LABEL_47;
          sub_1002D299C((uint64_t)&v32, &v30);
          break;
        default:
          goto LABEL_32;
      }
      break;
  }
  nullsub_1(&v32);
  if (v29)
    sub_1002989D0(v28);
}

void sub_1002BA904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  nullsub_1(&a12);
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002BA960(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  JUMPOUT(0x1002BA94CLL);
}

void sub_1002BA974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002BA98C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  _BOOL4 v24;
  _BOOL4 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  char v31[8];
  int v32;
  int v33;
  int v34;
  uint64_t (**v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  _BOOL4 v44;

  sub_100298C2C(v31, &off_100450500);
  v17 = a6 + 3;
  if (a6 >= 0)
    v17 = a6;
  v18 = a1 + (a6 + (v17 >> 2)) * a2;
  if (a5 >= 0)
    v19 = a5;
  else
    v19 = a5 + 1;
  v20 = a6 - (v17 & 0xFFFFFFFC);
  v21 = v18 + (v19 >> 1) * ((int)((v20 + ((v20 & 0x80) >> 7)) << 24) >> 25);
  v22 = v20 == 2;
  if (a9 == 1)
    v23 = v21;
  else
    v23 = a1 + a6 * a2;
  if (a9 == 1)
  {
    v21 = a1 + a6 * a2;
    v24 = v20 == 2;
  }
  else
  {
    v24 = 0;
  }
  v25 = a9 != 1 && v22;
  if (a8)
    v26 = 2;
  else
    v26 = 0;
  switch((v26 + 10 * a7 - 30) >> 1)
  {
    case 0u:
      v35 = &off_100451770;
      v36 = a3;
      v37 = a4;
      v38 = a5;
      v39 = a1;
      v40 = v23;
      v41 = v21;
      v42 = a2;
      v43 = v24;
      v44 = v25;
      if (a6 >= 0)
        v27 = a6;
      else
        v27 = a6 + 1;
      v33 = 0;
      v34 = v27 >> 1;
      if (a6 * a5 > 76799)
        goto LABEL_39;
      sub_1002D2C58((uint64_t)&v35, &v33);
      break;
    case 1u:
      v35 = &off_1004517B0;
      v36 = a3;
      v37 = a4;
      v38 = a5;
      v39 = a1;
      v40 = v23;
      v41 = v21;
      v42 = a2;
      v43 = v24;
      v44 = v25;
      if (a6 >= 0)
        v28 = a6;
      else
        v28 = a6 + 1;
      v33 = 0;
      v34 = v28 >> 1;
      if (a6 * a5 > 76799)
        goto LABEL_39;
      sub_1002D2FA8((uint64_t)&v35, &v33);
      break;
    case 5u:
      v35 = &off_1004517F0;
      v36 = a3;
      v37 = a4;
      v38 = a5;
      v39 = a1;
      v40 = v23;
      v41 = v21;
      v42 = a2;
      v43 = v24;
      v44 = v25;
      if (a6 >= 0)
        v29 = a6;
      else
        v29 = a6 + 1;
      v33 = 0;
      v34 = v29 >> 1;
      if (a6 * a5 > 76799)
        goto LABEL_39;
      sub_1002D3324((uint64_t)&v35, &v33);
      break;
    case 6u:
      v35 = &off_100451830;
      v36 = a3;
      v37 = a4;
      v38 = a5;
      v39 = a1;
      v40 = v23;
      v41 = v21;
      v42 = a2;
      v43 = v24;
      v44 = v25;
      if (a6 >= 0)
        v30 = a6;
      else
        v30 = a6 + 1;
      v33 = 0;
      v34 = v30 >> 1;
      if (a6 * a5 <= 76799)
        sub_1002D3684((uint64_t)&v35, &v33);
      else
LABEL_39:
        sub_10026F638(&v33, (uint64_t)&v35, -1.0);
      break;
    default:
      v35 = 0;
      v36 = 0;
      qmemcpy((void *)sub_10029430C(&v35, 41), "Unknown/unsupported color conversion code", 41);
      sub_100294B74(-206, (uint64_t *)&v35, "cvtThreePlaneYUVtoBGR", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 10885);
  }
  nullsub_1(&v35);
  if (v32)
    sub_1002989D0(v31);
}

void sub_1002BACC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  nullsub_1(&a12);
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002BACFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10029434C(&a12);
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002BAD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, char a8, int a9)
{
  int v17;
  _QWORD v18[6];
  int v19;
  int v20;
  int v21;
  char v22;
  BOOL v23;
  char v24;
  _BYTE v25[8];
  int v26;
  int v27[2];

  sub_100298C2C(v25, &off_100450520);
  v18[0] = &off_1004505D0;
  v18[1] = a1;
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a3 + a6 * a4;
  v18[5] = a4;
  v19 = a5;
  v20 = a6;
  v21 = a7;
  v22 = a8;
  v23 = a9 == 2;
  v24 = 0;
  if (a6 >= 0)
    v17 = a6;
  else
    v17 = a6 + 1;
  v27[0] = 0;
  v27[1] = v17 >> 1;
  if (a6 * a5 < 76800)
    sub_1002C373C((uint64_t)v18, v27);
  else
    sub_10026F638(v27, (uint64_t)v18, -1.0);
  nullsub_1(v18);
  if (v26)
    sub_1002989D0(v25);
}

void sub_1002BAE38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  nullsub_1((uint64_t *)va);
  sub_1001D40CC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002BAE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  int v18;
  int v19;
  _BYTE v20[8];
  int v21;
  int v22;
  int v23;
  uint64_t (**v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  sub_100298C2C(v20, &off_100450540);
  if (a8)
    v18 = 200;
  else
    v18 = 0;
  v19 = v18 + 1000 * a7 + 10 * a9 + a10;
  if (v19 <= 3999)
  {
    if (v19 > 3199)
    {
      switch(v19)
      {
        case 3200:
          v24 = &off_100451930;
          v25 = a3;
          v26 = a4;
          v27 = a1;
          v28 = a2;
          v29 = a5;
          v22 = 0;
          v23 = a6;
          if (a6 * a5 > 76799)
            goto LABEL_42;
          sub_1002D3EE8((uint64_t)&v24, &v22);
          goto LABEL_56;
        case 3201:
          v24 = &off_100451970;
          v25 = a3;
          v26 = a4;
          v27 = a1;
          v28 = a2;
          v29 = a5;
          v22 = 0;
          v23 = a6;
          if (a6 * a5 > 76799)
            goto LABEL_42;
          sub_1002D4094((uint64_t)&v24, &v22);
          goto LABEL_56;
        case 3210:
          v24 = &off_1004519B0;
          v25 = a3;
          v26 = a4;
          v27 = a1;
          v28 = a2;
          v29 = a5;
          v22 = 0;
          v23 = a6;
          if (a6 * a5 > 76799)
            goto LABEL_42;
          sub_1002D4240((uint64_t)&v24, &v22);
          goto LABEL_56;
      }
    }
    else
    {
      switch(v19)
      {
        case 3000:
          v24 = &off_100451870;
          v25 = a3;
          v26 = a4;
          v27 = a1;
          v28 = a2;
          v29 = a5;
          v22 = 0;
          v23 = a6;
          if (a6 * a5 > 76799)
            goto LABEL_42;
          sub_1002D3A14((uint64_t)&v24, &v22);
          goto LABEL_56;
        case 3001:
          v24 = &off_1004518B0;
          v25 = a3;
          v26 = a4;
          v27 = a1;
          v28 = a2;
          v29 = a5;
          v22 = 0;
          v23 = a6;
          if (a6 * a5 > 76799)
            goto LABEL_42;
          sub_1002D3BAC((uint64_t)&v24, &v22);
          goto LABEL_56;
        case 3010:
          v24 = &off_1004518F0;
          v25 = a3;
          v26 = a4;
          v27 = a1;
          v28 = a2;
          v29 = a5;
          v22 = 0;
          v23 = a6;
          if (a6 * a5 > 76799)
            goto LABEL_42;
          sub_1002D3D50((uint64_t)&v24, &v22);
          goto LABEL_56;
      }
    }
LABEL_43:
    v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(&v24, 41), "Unknown/unsupported color conversion code", 41);
    sub_100294B74(-206, (uint64_t *)&v24, "cvtOnePlaneYUVtoBGR", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 10935);
  }
  if (v19 <= 4199)
  {
    switch(v19)
    {
      case 4000:
        v24 = &off_1004519F0;
        v25 = a3;
        v26 = a4;
        v27 = a1;
        v28 = a2;
        v29 = a5;
        v22 = 0;
        v23 = a6;
        if (a6 * a5 > 76799)
          goto LABEL_42;
        sub_1002D43EC((uint64_t)&v24, &v22);
        goto LABEL_56;
      case 4001:
        v24 = &off_100451A30;
        v25 = a3;
        v26 = a4;
        v27 = a1;
        v28 = a2;
        v29 = a5;
        v22 = 0;
        v23 = a6;
        if (a6 * a5 > 76799)
          goto LABEL_42;
        sub_1002D4588((uint64_t)&v24, &v22);
        goto LABEL_56;
      case 4010:
        v24 = &off_100451A70;
        v25 = a3;
        v26 = a4;
        v27 = a1;
        v28 = a2;
        v29 = a5;
        v22 = 0;
        v23 = a6;
        if (a6 * a5 > 76799)
          goto LABEL_42;
        sub_1002D4730((uint64_t)&v24, &v22);
        goto LABEL_56;
    }
    goto LABEL_43;
  }
  if (v19 == 4200)
  {
    v24 = &off_100451AB0;
    v25 = a3;
    v26 = a4;
    v27 = a1;
    v28 = a2;
    v29 = a5;
    v22 = 0;
    v23 = a6;
    if (a6 * a5 > 76799)
      goto LABEL_42;
    sub_1002D48CC((uint64_t)&v24, &v22);
    goto LABEL_56;
  }
  if (v19 != 4201)
  {
    if (v19 == 4210)
    {
      v24 = &off_100451B30;
      v25 = a3;
      v26 = a4;
      v27 = a1;
      v28 = a2;
      v29 = a5;
      v22 = 0;
      v23 = a6;
      if (a6 * a5 > 76799)
        goto LABEL_42;
      sub_1002D4C34((uint64_t)&v24, &v22);
      goto LABEL_56;
    }
    goto LABEL_43;
  }
  v24 = &off_100451AF0;
  v25 = a3;
  v26 = a4;
  v27 = a1;
  v28 = a2;
  v29 = a5;
  v22 = 0;
  v23 = a6;
  if (a6 * a5 > 76799)
  {
LABEL_42:
    sub_10026F638(&v22, (uint64_t)&v24, -1.0);
    goto LABEL_56;
  }
  sub_1002D4A80((uint64_t)&v24, &v22);
LABEL_56:
  nullsub_1(&v24);
  if (v21)
    sub_1002989D0(v20);
}

void sub_1002BB404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  nullsub_1(va1);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002BB480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10029434C((uint64_t *)va);
  JUMPOUT(0x1002BB46CLL);
}

void sub_1002BB494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002BB4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  char v12;
  _BYTE v13[8];
  int v14;
  _QWORD v15[5];
  int v16;
  char *v17;
  _DWORD v18[2];

  sub_100298C2C(v13, &off_100450560);
  v18[0] = 0;
  v18[1] = a6;
  v15[0] = &off_100451B70;
  v15[1] = a1;
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  v16 = a5;
  v17 = &v12;
  sub_10026F638(v18, (uint64_t)v15, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v15);
  if (v14)
    sub_1002989D0(v13);
}

void sub_1002BB564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  nullsub_1(va1);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002BB580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  char v12;
  _BYTE v13[8];
  int v14;
  _QWORD v15[5];
  int v16;
  char *v17;
  _DWORD v18[2];

  sub_100298C2C(v13, &off_100450580);
  v18[0] = 0;
  v18[1] = a6;
  v15[0] = &off_100451BD0;
  v15[1] = a1;
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  v16 = a5;
  v17 = &v12;
  sub_10026F638(v18, (uint64_t)v15, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v15);
  if (v14)
    sub_1002989D0(v13);
}

void sub_1002BB638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  nullsub_1(va1);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002BB654(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int *v19;
  uint64_t *v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t *v41;
  unsigned int v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t *v57;
  int v58;
  _BOOL4 v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t *v102;
  uint64_t *v103;
  _BOOL4 v104;
  char v105;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t *v113;
  uint64_t *v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  int *v119;
  uint64_t *v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  uint64_t *v144;
  uint64_t *v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  char v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  char v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  uint64_t *v170;
  uint64_t *v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  int *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int v187;
  uint64_t v188;
  int *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int32 v195;
  int v196;
  char v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  int *v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  char v210;
  unsigned int *v211;
  unsigned int v212;
  unsigned int v213;
  uint64_t v214;
  int *v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  __int32 v221;
  int v222;
  char v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  int *v228;
  uint64_t *v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  char v237;
  unsigned int *v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v241;
  int *v242;
  uint64_t *v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  int v250;
  int v251;
  unsigned int *v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t v255;
  int *v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  char v264;
  unsigned int *v265;
  unsigned int v266;
  unsigned int v267;
  uint64_t v268;
  int *v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  int v276;
  char v277;
  unsigned int *v278;
  unsigned int v279;
  unsigned int v280;
  uint64_t v281;
  int *v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  int v289;
  char v290;
  int v291;
  uint64_t v292;
  int v293;
  int v294;
  unsigned int *v295;
  unsigned int v296;
  unsigned int v297;
  uint64_t v298;
  int *v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  int v306;
  char v307;
  unsigned int *v308;
  unsigned int v309;
  unsigned int v310;
  uint64_t v311;
  int *v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  int v319;
  char v320;
  unsigned int *v321;
  unsigned int v322;
  unsigned int v323;
  uint64_t v324;
  int *v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  int v332;
  char v333;
  int v334;
  uint64_t v335;
  __int128 v336;
  uint64_t v337;
  unsigned int *v338;
  unsigned int v339;
  uint64_t *v340;
  uint64_t *v341;
  unsigned int *v342;
  unsigned int v343;
  unsigned int v344;
  uint64_t v345;
  int *v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  int v353;
  int v354;
  unsigned int *v355;
  unsigned int v356;
  unsigned int v357;
  uint64_t v358;
  int *v359;
  unsigned int *v360;
  unsigned int v361;
  unsigned int v362;
  uint64_t v363;
  int *v364;
  int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  unsigned int v370;
  int v371;
  int32x2_t v373;
  int32x2_t v374;
  int32x2_t v375;
  int32x2_t v376;
  _QWORD v377[3];
  int32x2_t v378;
  int32x2_t v379;
  int32x2_t v380;
  int32x2_t v381;
  int32x2_t v382;
  int32x2_t v383;
  int32x2_t v384;
  int32x2_t v385;
  int32x2_t v386;
  int32x2_t v387;
  int32x2_t v388;
  int32x2_t v389;
  int32x2_t v390;
  int32x2_t v391;
  int32x2_t v392;
  int32x2_t v393;
  int32x2_t v394;
  int32x2_t v395;
  _BYTE v396[64];
  int *v397;
  uint64_t *v398;
  uint64_t v399;
  uint64_t v400;
  _BYTE v401[64];
  int *v402;
  void *v403;
  uint64_t v404;
  uint64_t v405;
  _BYTE v406[64];
  int *v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  char v411[8];
  int v412;
  uint64_t v413[3];

  sub_100298C2C(v411, &off_1004505A0);
  v7 = sub_10025E20C((int *)a1, -1);
  *(_DWORD *)v406 = 1124007936;
  memset(&v406[4], 0, 60);
  v407 = (int *)&v406[8];
  v408 = &v409;
  v409 = 0;
  v410 = 0;
  *(_DWORD *)v401 = 1124007936;
  memset(&v401[4], 0, 60);
  v402 = (int *)&v401[8];
  v403 = &v404;
  v404 = 0;
  v405 = 0;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
  {
    if (sub_10025D914((_DWORD *)a1) == 0x10000)
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)v396 = *(_OWORD *)v8;
      *(_OWORD *)&v396[16] = v9;
      *(_OWORD *)&v396[32] = *(_OWORD *)(v8 + 32);
      v10 = *(_QWORD *)(v8 + 56);
      *(_QWORD *)&v396[48] = *(_QWORD *)(v8 + 48);
      *(_QWORD *)&v396[56] = v10;
      v397 = (int *)&v396[8];
      v398 = &v399;
      v399 = 0;
      v400 = 0;
      if (v10)
      {
        v11 = (unsigned int *)(v10 + 20);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
      if (*(int *)(v8 + 4) > 2)
      {
        *(_DWORD *)&v396[4] = 0;
        sub_100256B48((uint64_t)v396, v8);
      }
      else
      {
        v13 = *(uint64_t **)(v8 + 72);
        v14 = v398;
        *v398 = *v13;
        v14[1] = v13[1];
      }
    }
    else
    {
      sub_10025CCB8(a1, -1, (uint64_t)v396);
    }
    if (*(_QWORD *)&v406[56])
    {
      v15 = (unsigned int *)(*(_QWORD *)&v406[56] + 20);
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        sub_100256C90((uint64_t)v406);
    }
    if (*(int *)&v406[4] >= 1)
    {
      v18 = 0;
      v19 = v407;
      do
        v19[v18++] = 0;
      while (v18 < *(int *)&v406[4]);
    }
    *(_OWORD *)v406 = *(_OWORD *)v396;
    *(_OWORD *)&v406[16] = *(_OWORD *)&v396[16];
    *(_OWORD *)&v406[32] = *(_OWORD *)&v396[32];
    *(_OWORD *)&v406[48] = *(_OWORD *)&v396[48];
    if (v408 == &v409)
    {
      v20 = v398;
      if (*(int *)&v396[4] <= 2)
        goto LABEL_21;
    }
    else
    {
      j__free(v408);
      v407 = (int *)&v406[8];
      v408 = &v409;
      v20 = v398;
      if (*(int *)&v396[4] <= 2)
      {
LABEL_21:
        v409 = *v20;
        v410 = v20[1];
        goto LABEL_24;
      }
    }
    v407 = v397;
    v408 = v20;
    v20 = &v399;
    v397 = (int *)&v396[8];
    v398 = &v399;
LABEL_24:
    *(_DWORD *)v396 = 1124007936;
    memset(&v396[4], 0, 60);
    if (v20 != &v399)
      j__free(v20);
    goto LABEL_26;
  }
  *(_DWORD *)v396 = 33619968;
  *(_QWORD *)&v396[8] = v406;
  *(_QWORD *)&v396[16] = 0;
  sub_1002617AC(a1, v396);
LABEL_26:
  v21 = v7 & 7;
  v22 = *v407;
  v23 = v407[1];
  if (v21 > 5 || ((1 << v21) & 0x25) == 0)
  {
    *(_QWORD *)v396 = 0;
    *(_QWORD *)&v396[8] = 0;
    qmemcpy((void *)sub_10029430C(v396, 38), "depth == 0 || depth == 2 || depth == 5", 38);
    sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11073);
  }
  v24 = (v7 >> 3) & 0x1FF;
  v370 = v24 + 1;
  switch(a3)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      if ((v7 & 0xFF0) != 0x10)
      {
        *(_QWORD *)v396 = 0;
        *(_QWORD *)&v396[8] = 0;
        v70 = sub_10029430C(v396, 20);
        *(_DWORD *)(v70 + 16) = 874528061;
        *(_OWORD *)v70 = *(_OWORD *)"scn == 3 || scn == 4";
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11079);
      }
      if ((a3 & 0xFFFFFFFD) == 0 || a3 == 5)
        v72 = 4;
      else
        v72 = 3;
      v395.i32[0] = v407[1];
      v395.i32[1] = v22;
      v73 = v7 & 7;
      v74 = v21 | (8 * v72);
      v75 = v72;
      sub_10026214C(a2, &v395, v74 - 8, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
      {
        v76 = *(_QWORD *)(a2 + 8);
        v77 = *(_OWORD *)(v76 + 16);
        *(_OWORD *)v396 = *(_OWORD *)v76;
        *(_OWORD *)&v396[16] = v77;
        *(_OWORD *)&v396[32] = *(_OWORD *)(v76 + 32);
        v78 = *(_QWORD *)(v76 + 56);
        *(_QWORD *)&v396[48] = *(_QWORD *)(v76 + 48);
        *(_QWORD *)&v396[56] = v78;
        v397 = (int *)&v396[8];
        v398 = &v399;
        v399 = 0;
        v400 = 0;
        if (v78)
        {
          v79 = (unsigned int *)(v78 + 20);
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 + 1, v79));
        }
        if (*(int *)(v76 + 4) > 2)
        {
          *(_DWORD *)&v396[4] = 0;
          sub_100256B48((uint64_t)v396, v76);
        }
        else
        {
          v81 = *(uint64_t **)(v76 + 72);
          v82 = v398;
          *v398 = *v81;
          v82[1] = v81[1];
        }
      }
      else
      {
        sub_10025CCB8(a2, -1, (uint64_t)v396);
      }
      if (*(_QWORD *)&v401[56])
      {
        v278 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
        do
        {
          v279 = __ldaxr(v278);
          v280 = v279 - 1;
        }
        while (__stlxr(v280, v278));
        if (!v280)
          sub_100256C90((uint64_t)v401);
      }
      if (*(int *)&v401[4] >= 1)
      {
        v281 = 0;
        v282 = v402;
        do
          v282[v281++] = 0;
        while (v281 < *(int *)&v401[4]);
      }
      *(_OWORD *)v401 = *(_OWORD *)v396;
      *(_OWORD *)&v401[16] = *(_OWORD *)&v396[16];
      *(_OWORD *)&v401[32] = *(_OWORD *)&v396[32];
      *(_OWORD *)&v401[48] = *(_OWORD *)&v396[48];
      if (v403 == &v404)
      {
        v283 = v398;
        if (*(int *)&v396[4] <= 2)
          goto LABEL_437;
      }
      else
      {
        j__free(v403);
        v402 = (int *)&v401[8];
        v403 = &v404;
        v283 = v398;
        if (*(int *)&v396[4] <= 2)
        {
LABEL_437:
          v404 = *v283;
          v405 = v283[1];
          goto LABEL_440;
        }
      }
      v402 = v397;
      v403 = v283;
      v283 = &v399;
      v397 = (int *)&v396[8];
      v398 = &v399;
LABEL_440:
      *(_DWORD *)v396 = 1124007936;
      memset(&v396[4], 0, 60);
      if (v283 != &v399)
        j__free(v283);
      v284 = *(_QWORD *)&v406[16];
      v285 = v409;
      v286 = *(_QWORD *)&v401[16];
      v287 = v404;
      v289 = *(_DWORD *)&v406[8];
      v288 = *(_DWORD *)&v406[12];
      v290 = sub_1002BF160(a3);
      sub_1002B7EC0(v284, v285, v286, v287, v288, v289, v73, v370, v75, v290);
      goto LABEL_557;
    case 6u:
    case 7u:
    case 0xAu:
    case 0xBu:
      if ((v7 & 0xFF0) != 0x10)
      {
        sub_1001F37D4(v396, "scn == 3 || scn == 4");
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11111);
      }
      v392.i32[0] = v407[1];
      v392.i32[1] = v22;
      sub_10026214C(a2, &v392, v7 & 7, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
      {
        v83 = *(_QWORD *)(a2 + 8);
        v84 = *(_OWORD *)(v83 + 16);
        *(_OWORD *)v396 = *(_OWORD *)v83;
        *(_OWORD *)&v396[16] = v84;
        *(_OWORD *)&v396[32] = *(_OWORD *)(v83 + 32);
        v85 = *(_QWORD *)(v83 + 56);
        *(_QWORD *)&v396[48] = *(_QWORD *)(v83 + 48);
        *(_QWORD *)&v396[56] = v85;
        v397 = (int *)&v396[8];
        v398 = &v399;
        v399 = 0;
        v400 = 0;
        if (v85)
        {
          v86 = (unsigned int *)(v85 + 20);
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 + 1, v86));
        }
        if (*(int *)(v83 + 4) > 2)
        {
          *(_DWORD *)&v396[4] = 0;
          sub_100256B48((uint64_t)v396, v83);
        }
        else
        {
          v88 = *(uint64_t **)(v83 + 72);
          v89 = v398;
          *v398 = *v88;
          v89[1] = v88[1];
        }
      }
      else
      {
        sub_10025CCB8(a2, -1, (uint64_t)v396);
      }
      if (*(_QWORD *)&v401[56])
      {
        v295 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
        do
        {
          v296 = __ldaxr(v295);
          v297 = v296 - 1;
        }
        while (__stlxr(v297, v295));
        if (!v297)
          sub_100256C90((uint64_t)v401);
      }
      if (*(int *)&v401[4] >= 1)
      {
        v298 = 0;
        v299 = v402;
        do
          v299[v298++] = 0;
        while (v298 < *(int *)&v401[4]);
      }
      *(_OWORD *)v401 = *(_OWORD *)v396;
      *(_OWORD *)&v401[16] = *(_OWORD *)&v396[16];
      *(_OWORD *)&v401[32] = *(_OWORD *)&v396[32];
      *(_OWORD *)&v401[48] = *(_OWORD *)&v396[48];
      if (v403 != &v404)
      {
        j__free(v403);
        v402 = (int *)&v401[8];
        v403 = &v404;
      }
      v300 = v398;
      if (*(int *)&v396[4] > 2)
      {
        v402 = v397;
        v403 = v398;
        v300 = &v399;
        v397 = (int *)&v396[8];
        v398 = &v399;
      }
      else
      {
        v404 = *v398;
        v405 = v398[1];
      }
      *(_DWORD *)v396 = 1124007936;
      memset(&v396[4], 0, 60);
      if (v300 != &v399)
        j__free(v300);
      v301 = *(_QWORD *)&v406[16];
      v302 = v409;
      v303 = *(_QWORD *)&v401[16];
      v304 = v404;
      v306 = *(_DWORD *)&v406[8];
      v305 = *(_DWORD *)&v406[12];
      v307 = sub_1002BF160(a3);
      sub_1002B830C(v301, v302, v303, v304, v305, v306, v21, v370, v307);
      goto LABEL_557;
    case 8u:
    case 9u:
      if (a3 == 9)
        v146 = 4;
      else
        v146 = 3;
      if (a4 >= 1)
        v147 = a4;
      else
        v147 = v146;
      if ((v147 - 3) > 1 || v24)
      {
        sub_1001F37D4(v396, "scn == 1 && (dcn == 3 || dcn == 4)");
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11128);
      }
      v390.i32[0] = v407[1];
      v390.i32[1] = v22;
      sub_10026214C(a2, &v390, (v21 | (8 * v147)) - 8, -1, 0, 0);
      sub_1002BF084(a2, -1, (uint64_t)v396);
      sub_10024B080((uint64_t)v401, (uint64_t)v396);
      sub_100006BE4((uint64_t)v396);
      sub_1002B8608(*(uint64_t *)&v406[16], v409, *(uint64_t *)&v401[16], v404, *(int *)&v406[12], *(int *)&v406[8], v7 & 7, v147);
      goto LABEL_557;
    case 0xCu:
    case 0xDu:
    case 0x10u:
    case 0x11u:
    case 0x16u:
    case 0x17u:
    case 0x1Au:
    case 0x1Bu:
      if ((v7 & 0xFF7) != 0x10)
      {
        *(_QWORD *)v396 = 0;
        *(_QWORD *)&v396[8] = 0;
        qmemcpy((void *)sub_10029430C(v396, 36), "(scn == 3 || scn == 4) && depth == 0", 36);
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11089);
      }
      if (a3 <= 0x10 && ((1 << a3) & 0x13000) != 0)
      {
        v27 = 6;
      }
      else if (a3 == 17)
      {
        v27 = 6;
      }
      else
      {
        v27 = 5;
      }
      v394.i32[0] = v407[1];
      v394.i32[1] = v22;
      sub_10026214C(a2, &v394, 8, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
      {
        v165 = *(_QWORD *)(a2 + 8);
        v166 = *(_OWORD *)(v165 + 16);
        *(_OWORD *)v396 = *(_OWORD *)v165;
        *(_OWORD *)&v396[16] = v166;
        *(_OWORD *)&v396[32] = *(_OWORD *)(v165 + 32);
        v167 = *(_QWORD *)(v165 + 56);
        *(_QWORD *)&v396[48] = *(_QWORD *)(v165 + 48);
        *(_QWORD *)&v396[56] = v167;
        v397 = (int *)&v396[8];
        v398 = &v399;
        v399 = 0;
        v400 = 0;
        if (v167)
        {
          v168 = (unsigned int *)(v167 + 20);
          do
            v169 = __ldaxr(v168);
          while (__stlxr(v169 + 1, v168));
        }
        if (*(int *)(v165 + 4) > 2)
        {
          *(_DWORD *)&v396[4] = 0;
          sub_100256B48((uint64_t)v396, v165);
        }
        else
        {
          v170 = *(uint64_t **)(v165 + 72);
          v171 = v398;
          *v398 = *v170;
          v171[1] = v170[1];
        }
      }
      else
      {
        sub_10025CCB8(a2, -1, (uint64_t)v396);
      }
      if (*(_QWORD *)&v401[56])
      {
        v172 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
        do
        {
          v173 = __ldaxr(v172);
          v174 = v173 - 1;
        }
        while (__stlxr(v174, v172));
        if (!v174)
          sub_100256C90((uint64_t)v401);
      }
      if (*(int *)&v401[4] >= 1)
      {
        v175 = 0;
        v176 = v402;
        do
          v176[v175++] = 0;
        while (v175 < *(int *)&v401[4]);
      }
      *(_OWORD *)v401 = *(_OWORD *)v396;
      *(_OWORD *)&v401[16] = *(_OWORD *)&v396[16];
      *(_OWORD *)&v401[32] = *(_OWORD *)&v396[32];
      *(_OWORD *)&v401[48] = *(_OWORD *)&v396[48];
      if (v403 == &v404)
      {
        v177 = v398;
        if (*(int *)&v396[4] <= 2)
          goto LABEL_300;
      }
      else
      {
        j__free(v403);
        v402 = (int *)&v401[8];
        v403 = &v404;
        v177 = v398;
        if (*(int *)&v396[4] <= 2)
        {
LABEL_300:
          v404 = *v177;
          v405 = v177[1];
          goto LABEL_303;
        }
      }
      v402 = v397;
      v403 = v177;
      v177 = &v399;
      v397 = (int *)&v396[8];
      v398 = &v399;
LABEL_303:
      *(_DWORD *)v396 = 1124007936;
      memset(&v396[4], 0, 60);
      if (v177 != &v399)
        j__free(v177);
      v178 = *(_QWORD *)&v406[16];
      v179 = v409;
      v180 = *(_QWORD *)&v401[16];
      v181 = v404;
      v183 = *(_DWORD *)&v406[8];
      v182 = *(_DWORD *)&v406[12];
      v184 = sub_1002BF160(a3);
      sub_1002B80C4(v178, v179, v180, v181, v182, v183, v370, v184, v27);
      goto LABEL_557;
    case 0xEu:
    case 0xFu:
    case 0x12u:
    case 0x13u:
    case 0x18u:
    case 0x19u:
    case 0x1Cu:
    case 0x1Du:
      if (a4 <= 0)
      {
        if (a3 <= 0x1C && ((1 << a3) & 0x100C0000) != 0)
        {
          a4 = 4;
        }
        else if (a3 == 29)
        {
          a4 = 4;
        }
        else
        {
          a4 = 3;
        }
      }
      if ((v7 & 7) != 0 || (a4 - 3) > 1 || v24 != 1)
      {
        *(_QWORD *)v396 = 0;
        *(_QWORD *)&v396[8] = 0;
        qmemcpy((void *)sub_10029430C(v396, 48), "(dcn == 3 || dcn == 4) && scn == 2 && depth == 0", 48);
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11101);
      }
      if (a3 <= 0x12 && ((1 << a3) & 0x4C000) != 0)
      {
        v334 = 6;
      }
      else if (a3 == 19)
      {
        v334 = 6;
      }
      else
      {
        v334 = 5;
      }
      v393.i32[0] = v407[1];
      v393.i32[1] = v22;
      sub_10026214C(a2, &v393, 8 * a4 - 8, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
      {
        v335 = *(_QWORD *)(a2 + 8);
        v336 = *(_OWORD *)(v335 + 16);
        *(_OWORD *)v396 = *(_OWORD *)v335;
        *(_OWORD *)&v396[16] = v336;
        *(_OWORD *)&v396[32] = *(_OWORD *)(v335 + 32);
        v337 = *(_QWORD *)(v335 + 56);
        *(_QWORD *)&v396[48] = *(_QWORD *)(v335 + 48);
        *(_QWORD *)&v396[56] = v337;
        v397 = (int *)&v396[8];
        v398 = &v399;
        v399 = 0;
        v400 = 0;
        if (v337)
        {
          v338 = (unsigned int *)(v337 + 20);
          do
            v339 = __ldaxr(v338);
          while (__stlxr(v339 + 1, v338));
        }
        if (*(int *)(v335 + 4) > 2)
        {
          *(_DWORD *)&v396[4] = 0;
          sub_100256B48((uint64_t)v396, v335);
        }
        else
        {
          v340 = *(uint64_t **)(v335 + 72);
          v341 = v398;
          *v398 = *v340;
          v341[1] = v340[1];
        }
      }
      else
      {
        sub_10025CCB8(a2, -1, (uint64_t)v396);
      }
      if (*(_QWORD *)&v401[56])
      {
        v342 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
        do
        {
          v343 = __ldaxr(v342);
          v344 = v343 - 1;
        }
        while (__stlxr(v344, v342));
        if (!v344)
          sub_100256C90((uint64_t)v401);
      }
      if (*(int *)&v401[4] >= 1)
      {
        v345 = 0;
        v346 = v402;
        do
          v346[v345++] = 0;
        while (v345 < *(int *)&v401[4]);
      }
      *(_OWORD *)v401 = *(_OWORD *)v396;
      *(_OWORD *)&v401[16] = *(_OWORD *)&v396[16];
      *(_OWORD *)&v401[32] = *(_OWORD *)&v396[32];
      *(_OWORD *)&v401[48] = *(_OWORD *)&v396[48];
      if (v403 == &v404)
      {
        v347 = v398;
        if (*(int *)&v396[4] <= 2)
          goto LABEL_551;
      }
      else
      {
        j__free(v403);
        v402 = (int *)&v401[8];
        v403 = &v404;
        v347 = v398;
        if (*(int *)&v396[4] <= 2)
        {
LABEL_551:
          v404 = *v347;
          v405 = v347[1];
          goto LABEL_554;
        }
      }
      v402 = v397;
      v403 = v347;
      v347 = &v399;
      v397 = (int *)&v396[8];
      v398 = &v399;
LABEL_554:
      *(_DWORD *)v396 = 1124007936;
      memset(&v396[4], 0, 60);
      if (v347 != &v399)
        j__free(v347);
      v348 = *(_QWORD *)&v406[16];
      v349 = v409;
      v350 = *(_QWORD *)&v401[16];
      v351 = v404;
      v353 = *(_DWORD *)&v406[8];
      v352 = *(_DWORD *)&v406[12];
      v354 = sub_1002BF160(a3);
      sub_1002B81E8(v348, v349, v350, v351, v352, v353, a4, v354, v334);
      goto LABEL_557;
    case 0x14u:
    case 0x1Eu:
      if (v24 | v21)
      {
        sub_1001F37D4(v396, "scn == 1 && depth == 0");
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11135);
      }
      if (a3 == 20)
        v148 = 6;
      else
        v148 = 5;
      v389.i32[0] = v407[1];
      v389.i32[1] = v22;
      sub_10026214C(a2, &v389, 8, -1, 0, 0);
      sub_1002BF084(a2, -1, (uint64_t)v396);
      sub_10024B080((uint64_t)v401, (uint64_t)v396);
      sub_100006BE4((uint64_t)v396);
      sub_1002B88B4(*(uint64_t *)&v406[16], v409, *(uint64_t *)&v401[16], v404, *(int *)&v406[12], *(int *)&v406[8], v148);
      goto LABEL_557;
    case 0x15u:
    case 0x1Fu:
      if ((v7 & 7) != 0 || v24 != 1)
      {
        sub_1001F37D4(v396, "scn == 2 && depth == 0");
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11119);
      }
      if (a3 == 21)
        v149 = 6;
      else
        v149 = 5;
      v391.i32[0] = v407[1];
      v391.i32[1] = v22;
      sub_10026214C(a2, &v391, 0, -1, 0, 0);
      sub_1002BF084(a2, -1, (uint64_t)v396);
      sub_10024B080((uint64_t)v401, (uint64_t)v396);
      sub_100006BE4((uint64_t)v396);
      sub_1002B879C(*(uint64_t *)&v406[16], v409, *(uint64_t *)&v401[16], v404, *(int *)&v406[12], *(int *)&v406[8], v149);
      goto LABEL_557;
    case 0x20u:
    case 0x21u:
      if ((v7 & 0xFF0) != 0x10)
      {
        sub_1001F37D4(v396, "scn == 3 || scn == 4");
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11162);
      }
      v386.i32[0] = v407[1];
      v386.i32[1] = v22;
      sub_10026214C(a2, &v386, v21 | 0x10, -1, 0, 0);
      sub_1002BF084(a2, -1, (uint64_t)v396);
      sub_10024B080((uint64_t)v401, (uint64_t)v396);
      sub_100006BE4((uint64_t)v396);
      v150 = *(_QWORD *)&v406[16];
      v151 = v409;
      v152 = *(_QWORD *)&v401[16];
      v153 = v404;
      v155 = *(_DWORD *)&v406[8];
      v154 = *(_DWORD *)&v406[12];
      v156 = sub_1002BF160(a3);
      sub_1002B8FEC(v150, v151, v152, v153, v154, v155, v21, v370, v156);
      goto LABEL_557;
    case 0x22u:
    case 0x23u:
      if (a4 < 1)
        a4 = 3;
      if ((a4 - 3) > 1 || v24 != 2)
      {
        sub_1001F37D4(v396, "scn == 3 && (dcn == 3 || dcn == 4)");
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11170);
      }
      v385.i32[0] = v407[1];
      v385.i32[1] = v22;
      v157 = v7 & 7;
      sub_10026214C(a2, &v385, (v21 | (8 * a4)) - 8, -1, 0, 0);
      sub_1002BF084(a2, -1, (uint64_t)v396);
      sub_10024B080((uint64_t)v401, (uint64_t)v396);
      sub_100006BE4((uint64_t)v396);
      v158 = *(_QWORD *)&v406[16];
      v159 = v409;
      v160 = *(_QWORD *)&v401[16];
      v161 = v404;
      v163 = *(_DWORD *)&v406[8];
      v162 = *(_DWORD *)&v406[12];
      v164 = sub_1002BF160(a3);
      sub_1002B93D0(v158, v159, v160, v161, v162, v163, v157, a4, v164);
      goto LABEL_557;
    case 0x24u:
    case 0x25u:
    case 0x52u:
    case 0x53u:
      if ((v7 & 0xFF0) != 0x10)
      {
        sub_1001F37D4(v396, "scn == 3 || scn == 4");
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11144);
      }
      v388.i32[0] = v407[1];
      v388.i32[1] = v22;
      sub_10026214C(a2, &v388, v21 | 0x10, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
      {
        v90 = *(_QWORD *)(a2 + 8);
        v91 = *(_OWORD *)(v90 + 16);
        *(_OWORD *)v396 = *(_OWORD *)v90;
        *(_OWORD *)&v396[16] = v91;
        *(_OWORD *)&v396[32] = *(_OWORD *)(v90 + 32);
        v92 = *(_QWORD *)(v90 + 56);
        *(_QWORD *)&v396[48] = *(_QWORD *)(v90 + 48);
        *(_QWORD *)&v396[56] = v92;
        v397 = (int *)&v396[8];
        v398 = &v399;
        v399 = 0;
        v400 = 0;
        if (v92)
        {
          v93 = (unsigned int *)(v92 + 20);
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 + 1, v93));
        }
        if (*(int *)(v90 + 4) > 2)
        {
          *(_DWORD *)&v396[4] = 0;
          sub_100256B48((uint64_t)v396, v90);
        }
        else
        {
          v95 = *(uint64_t **)(v90 + 72);
          v96 = v398;
          *v398 = *v95;
          v96[1] = v95[1];
        }
      }
      else
      {
        sub_10025CCB8(a2, -1, (uint64_t)v396);
      }
      if (*(_QWORD *)&v401[56])
      {
        v308 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
        do
        {
          v309 = __ldaxr(v308);
          v310 = v309 - 1;
        }
        while (__stlxr(v310, v308));
        if (!v310)
          sub_100256C90((uint64_t)v401);
      }
      if (*(int *)&v401[4] >= 1)
      {
        v311 = 0;
        v312 = v402;
        do
          v312[v311++] = 0;
        while (v311 < *(int *)&v401[4]);
      }
      *(_OWORD *)v401 = *(_OWORD *)v396;
      *(_OWORD *)&v401[16] = *(_OWORD *)&v396[16];
      *(_OWORD *)&v401[32] = *(_OWORD *)&v396[32];
      *(_OWORD *)&v401[48] = *(_OWORD *)&v396[48];
      if (v403 != &v404)
      {
        j__free(v403);
        v402 = (int *)&v401[8];
        v403 = &v404;
      }
      v313 = v398;
      if (*(int *)&v396[4] > 2)
      {
        v402 = v397;
        v403 = v398;
        v313 = &v399;
        v397 = (int *)&v396[8];
        v398 = &v399;
      }
      else
      {
        v404 = *v398;
        v405 = v398[1];
      }
      *(_DWORD *)v396 = 1124007936;
      memset(&v396[4], 0, 60);
      if (v313 != &v399)
        j__free(v313);
      v314 = *(_QWORD *)&v406[16];
      v315 = v409;
      v316 = *(_QWORD *)&v401[16];
      v317 = v404;
      v319 = *(_DWORD *)&v406[8];
      v318 = *(_DWORD *)&v406[12];
      v320 = sub_1002BF160(a3);
      sub_1002B89A4(v314, v315, v316, v317, v318, v319, v21, v370, v320, (a3 & 0xFFFFFFFE) == 36);
      goto LABEL_557;
    case 0x26u:
    case 0x27u:
    case 0x54u:
    case 0x55u:
      if (a4 < 1)
        a4 = 3;
      if ((a4 - 3) > 1 || v24 != 2)
      {
        sub_1001F37D4(v396, "scn == 3 && (dcn == 3 || dcn == 4)");
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11154);
      }
      v387.i32[0] = v407[1];
      v387.i32[1] = v22;
      sub_10026214C(a2, &v387, (v21 | (8 * a4)) - 8, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
      {
        v97 = *(_QWORD *)(a2 + 8);
        v98 = *(_OWORD *)(v97 + 16);
        *(_OWORD *)v396 = *(_OWORD *)v97;
        *(_OWORD *)&v396[16] = v98;
        *(_OWORD *)&v396[32] = *(_OWORD *)(v97 + 32);
        v99 = *(_QWORD *)(v97 + 56);
        *(_QWORD *)&v396[48] = *(_QWORD *)(v97 + 48);
        *(_QWORD *)&v396[56] = v99;
        v397 = (int *)&v396[8];
        v398 = &v399;
        v399 = 0;
        v400 = 0;
        if (v99)
        {
          v100 = (unsigned int *)(v99 + 20);
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 + 1, v100));
        }
        if (*(int *)(v97 + 4) > 2)
        {
          *(_DWORD *)&v396[4] = 0;
          sub_100256B48((uint64_t)v396, v97);
        }
        else
        {
          v102 = *(uint64_t **)(v97 + 72);
          v103 = v398;
          *v398 = *v102;
          v103[1] = v102[1];
        }
      }
      else
      {
        sub_10025CCB8(a2, -1, (uint64_t)v396);
      }
      if (*(_QWORD *)&v401[56])
      {
        v321 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
        do
        {
          v322 = __ldaxr(v321);
          v323 = v322 - 1;
        }
        while (__stlxr(v323, v321));
        if (!v323)
          sub_100256C90((uint64_t)v401);
      }
      if (*(int *)&v401[4] >= 1)
      {
        v324 = 0;
        v325 = v402;
        do
          v325[v324++] = 0;
        while (v324 < *(int *)&v401[4]);
      }
      *(_OWORD *)v401 = *(_OWORD *)v396;
      *(_OWORD *)&v401[16] = *(_OWORD *)&v396[16];
      *(_OWORD *)&v401[32] = *(_OWORD *)&v396[32];
      *(_OWORD *)&v401[48] = *(_OWORD *)&v396[48];
      if (v403 != &v404)
      {
        j__free(v403);
        v402 = (int *)&v401[8];
        v403 = &v404;
      }
      v326 = v398;
      if (*(int *)&v396[4] > 2)
      {
        v402 = v397;
        v403 = v398;
        v326 = &v399;
        v397 = (int *)&v396[8];
        v398 = &v399;
      }
      else
      {
        v404 = *v398;
        v405 = v398[1];
      }
      *(_DWORD *)v396 = 1124007936;
      memset(&v396[4], 0, 60);
      if (v326 != &v399)
        j__free(v326);
      v327 = *(_QWORD *)&v406[16];
      v328 = v409;
      v329 = *(_QWORD *)&v401[16];
      v330 = v404;
      v332 = *(_DWORD *)&v406[8];
      v331 = *(_DWORD *)&v406[12];
      v333 = sub_1002BF160(a3);
      sub_1002B8CDC(v327, v328, v329, v330, v331, v332, v21, a4, v333, (a3 & 0xFFFFFFFE) == 38);
      goto LABEL_557;
    case 0x28u:
    case 0x29u:
    case 0x34u:
    case 0x35u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
      if ((v7 & 0xFF0) != 0x10 || (v7 & 7) != 0 && v21 != 5)
      {
        *(_QWORD *)v396 = 0;
        *(_QWORD *)&v396[8] = 0;
        qmemcpy((void *)sub_10029430C(v396, 52), "(scn == 3 || scn == 4) && (depth == 0 || depth == 5)", 52);
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11178);
      }
      v384.i32[0] = v407[1];
      v384.i32[1] = v22;
      sub_10026214C(a2, &v384, v21 | 0x10, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
      {
        v28 = *(_QWORD *)(a2 + 8);
        v29 = *(_OWORD *)(v28 + 16);
        *(_OWORD *)v396 = *(_OWORD *)v28;
        *(_OWORD *)&v396[16] = v29;
        *(_OWORD *)&v396[32] = *(_OWORD *)(v28 + 32);
        v30 = *(_QWORD *)(v28 + 56);
        *(_QWORD *)&v396[48] = *(_QWORD *)(v28 + 48);
        *(_QWORD *)&v396[56] = v30;
        v397 = (int *)&v396[8];
        v398 = &v399;
        v399 = 0;
        v400 = 0;
        if (v30)
        {
          v31 = (unsigned int *)(v30 + 20);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 + 1, v31));
        }
        if (*(int *)(v28 + 4) > 2)
        {
          *(_DWORD *)&v396[4] = 0;
          sub_100256B48((uint64_t)v396, v28);
        }
        else
        {
          v33 = *(uint64_t **)(v28 + 72);
          v34 = v398;
          *v398 = *v33;
          v34[1] = v33[1];
        }
      }
      else
      {
        sub_10025CCB8(a2, -1, (uint64_t)v396);
      }
      if (*(_QWORD *)&v401[56])
      {
        v185 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
        do
        {
          v186 = __ldaxr(v185);
          v187 = v186 - 1;
        }
        while (__stlxr(v187, v185));
        if (!v187)
          sub_100256C90((uint64_t)v401);
      }
      if (*(int *)&v401[4] >= 1)
      {
        v188 = 0;
        v189 = v402;
        do
          v189[v188++] = 0;
        while (v188 < *(int *)&v401[4]);
      }
      *(_OWORD *)v401 = *(_OWORD *)v396;
      *(_OWORD *)&v401[16] = *(_OWORD *)&v396[16];
      *(_OWORD *)&v401[32] = *(_OWORD *)&v396[32];
      *(_OWORD *)&v401[48] = *(_OWORD *)&v396[48];
      if (v403 == &v404)
      {
        v190 = v398;
        if (*(int *)&v396[4] <= 2)
          goto LABEL_317;
      }
      else
      {
        j__free(v403);
        v402 = (int *)&v401[8];
        v403 = &v404;
        v190 = v398;
        if (*(int *)&v396[4] <= 2)
        {
LABEL_317:
          v404 = *v190;
          v405 = v190[1];
          goto LABEL_320;
        }
      }
      v402 = v397;
      v403 = v190;
      v190 = &v399;
      v397 = (int *)&v396[8];
      v398 = &v399;
LABEL_320:
      *(_DWORD *)v396 = 1124007936;
      memset(&v396[4], 0, 60);
      if (v190 != &v399)
        j__free(v190);
      v191 = *(_QWORD *)&v406[16];
      v192 = v409;
      v193 = *(_QWORD *)&v401[16];
      v194 = v404;
      v196 = *(_DWORD *)&v406[8];
      v195 = *(_DWORD *)&v406[12];
      v197 = sub_1002BF160(a3);
      sub_1002B978C(v191, v192, v193, v194, v195, v196, v21, v370, v197, a3 - 66 < 8, (a3 - 40 < 0x20) & (0xCC00C003 >> (a3 - 40)));
      goto LABEL_557;
    case 0x2Cu:
    case 0x2Du:
    case 0x32u:
    case 0x33u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
      if ((v7 & 0xFF0) != 0x10 || (v7 & 7) != 0 && v21 != 5)
      {
        *(_QWORD *)v396 = 0;
        *(_QWORD *)&v396[8] = 0;
        qmemcpy((void *)sub_10029430C(v396, 52), "(scn == 3 || scn == 4) && (depth == 0 || depth == 5)", 52);
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11197);
      }
      v382.i32[0] = v407[1];
      v382.i32[1] = v22;
      sub_10026214C(a2, &v382, v21 | 0x10, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
      {
        v35 = *(_QWORD *)(a2 + 8);
        v36 = *(_OWORD *)(v35 + 16);
        *(_OWORD *)v396 = *(_OWORD *)v35;
        *(_OWORD *)&v396[16] = v36;
        *(_OWORD *)&v396[32] = *(_OWORD *)(v35 + 32);
        v37 = *(_QWORD *)(v35 + 56);
        *(_QWORD *)&v396[48] = *(_QWORD *)(v35 + 48);
        *(_QWORD *)&v396[56] = v37;
        v397 = (int *)&v396[8];
        v398 = &v399;
        v399 = 0;
        v400 = 0;
        if (v37)
        {
          v38 = (unsigned int *)(v37 + 20);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 + 1, v38));
        }
        if (*(int *)(v35 + 4) > 2)
        {
          *(_DWORD *)&v396[4] = 0;
          sub_100256B48((uint64_t)v396, v35);
        }
        else
        {
          v40 = *(uint64_t **)(v35 + 72);
          v41 = v398;
          *v398 = *v40;
          v41[1] = v40[1];
        }
      }
      else
      {
        sub_10025CCB8(a2, -1, (uint64_t)v396);
      }
      if (*(_QWORD *)&v401[56])
      {
        v198 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
        do
        {
          v199 = __ldaxr(v198);
          v200 = v199 - 1;
        }
        while (__stlxr(v200, v198));
        if (!v200)
          sub_100256C90((uint64_t)v401);
      }
      if (*(int *)&v401[4] >= 1)
      {
        v201 = 0;
        v202 = v402;
        do
          v202[v201++] = 0;
        while (v201 < *(int *)&v401[4]);
      }
      *(_OWORD *)v401 = *(_OWORD *)v396;
      *(_OWORD *)&v401[16] = *(_OWORD *)&v396[16];
      *(_OWORD *)&v401[32] = *(_OWORD *)&v396[32];
      *(_OWORD *)&v401[48] = *(_OWORD *)&v396[48];
      if (v403 == &v404)
      {
        v203 = v398;
        if (*(int *)&v396[4] <= 2)
          goto LABEL_334;
      }
      else
      {
        j__free(v403);
        v402 = (int *)&v401[8];
        v403 = &v404;
        v203 = v398;
        if (*(int *)&v396[4] <= 2)
        {
LABEL_334:
          v404 = *v203;
          v405 = v203[1];
          goto LABEL_337;
        }
      }
      v402 = v397;
      v403 = v203;
      v203 = &v399;
      v397 = (int *)&v396[8];
      v398 = &v399;
LABEL_337:
      *(_DWORD *)v396 = 1124007936;
      memset(&v396[4], 0, 60);
      if (v203 != &v399)
        j__free(v203);
      v204 = *(_QWORD *)&v406[16];
      v205 = v409;
      v206 = *(_QWORD *)&v401[16];
      v207 = v404;
      v209 = *(_DWORD *)&v406[8];
      v208 = *(_DWORD *)&v406[12];
      v210 = sub_1002BF160(a3);
      sub_1002B9DFC(v204, v205, v206, v207, v208, v209, v21, v370, v210, (a3 - 44 < 0x24) & (0xCC0003003uLL >> (a3 - 44)), (a3 < 0x3C) & (0xF0C300000000000uLL >> a3));
      goto LABEL_557;
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x3Eu:
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x56u:
    case 0x57u:
    case 0x58u:
    case 0x59u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
      *(_DWORD *)v396 = 16842752;
      *(_QWORD *)&v396[8] = v406;
      *(_QWORD *)&v396[16] = 0;
      sub_1002DBC34((uint64_t)v396, a2, a3, a4);
      goto LABEL_557;
    case 0x36u:
    case 0x37u:
    case 0x3Cu:
    case 0x3Du:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
      v365 = v7 & 7;
      if (a4 >= 1)
        v42 = a4;
      else
        v42 = 3;
      if (v42 - 3 > 1 || v24 != 2 || (v7 & 7) != 0 && v365 != 5)
      {
        *(_QWORD *)v396 = 0;
        *(_QWORD *)&v396[8] = 0;
        qmemcpy((void *)sub_10029430C(v396, 64), "scn == 3 && (dcn == 3 || dcn == 4) && (depth == 0 || depth == 5)", 64);
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11188);
      }
      v383.i32[0] = v407[1];
      v383.i32[1] = v22;
      sub_10026214C(a2, &v383, (v365 | (8 * v42)) - 8, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
      {
        v43 = *(_QWORD *)(a2 + 8);
        v44 = *(_OWORD *)(v43 + 16);
        *(_OWORD *)v396 = *(_OWORD *)v43;
        *(_OWORD *)&v396[16] = v44;
        *(_OWORD *)&v396[32] = *(_OWORD *)(v43 + 32);
        v45 = *(_QWORD *)(v43 + 56);
        *(_QWORD *)&v396[48] = *(_QWORD *)(v43 + 48);
        *(_QWORD *)&v396[56] = v45;
        v397 = (int *)&v396[8];
        v398 = &v399;
        v399 = 0;
        v400 = 0;
        if (v45)
        {
          v46 = (unsigned int *)(v45 + 20);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 + 1, v46));
        }
        if (*(int *)(v43 + 4) > 2)
        {
          *(_DWORD *)&v396[4] = 0;
          sub_100256B48((uint64_t)v396, v43);
        }
        else
        {
          v48 = *(uint64_t **)(v43 + 72);
          v49 = v398;
          *v398 = *v48;
          v49[1] = v48[1];
        }
      }
      else
      {
        sub_10025CCB8(a2, -1, (uint64_t)v396);
      }
      if (*(_QWORD *)&v401[56])
      {
        v211 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
        do
        {
          v212 = __ldaxr(v211);
          v213 = v212 - 1;
        }
        while (__stlxr(v213, v211));
        if (!v213)
          sub_100256C90((uint64_t)v401);
      }
      if (*(int *)&v401[4] >= 1)
      {
        v214 = 0;
        v215 = v402;
        do
          v215[v214++] = 0;
        while (v214 < *(int *)&v401[4]);
      }
      *(_OWORD *)v401 = *(_OWORD *)v396;
      *(_OWORD *)&v401[16] = *(_OWORD *)&v396[16];
      *(_OWORD *)&v401[32] = *(_OWORD *)&v396[32];
      *(_OWORD *)&v401[48] = *(_OWORD *)&v396[48];
      if (v403 == &v404)
      {
        v216 = v398;
        if (*(int *)&v396[4] <= 2)
          goto LABEL_351;
      }
      else
      {
        j__free(v403);
        v402 = (int *)&v401[8];
        v403 = &v404;
        v216 = v398;
        if (*(int *)&v396[4] <= 2)
        {
LABEL_351:
          v404 = *v216;
          v405 = v216[1];
          goto LABEL_354;
        }
      }
      v402 = v397;
      v403 = v216;
      v216 = &v399;
      v397 = (int *)&v396[8];
      v398 = &v399;
LABEL_354:
      *(_DWORD *)v396 = 1124007936;
      memset(&v396[4], 0, 60);
      if (v216 != &v399)
        j__free(v216);
      v217 = *(_QWORD *)&v406[16];
      v218 = v409;
      v219 = *(_QWORD *)&v401[16];
      v220 = v404;
      v222 = *(_DWORD *)&v406[8];
      v221 = *(_DWORD *)&v406[12];
      v223 = sub_1002BF160(a3);
      sub_1002B9AF4(v217, v218, v219, v220, v221, v222, v365, v42, v223, a3 - 66 < 8, (a3 - 40 < 0x20) & (0xCC00C003 >> (a3 - 40)));
      goto LABEL_557;
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
    case 0x4Eu:
    case 0x4Fu:
    case 0x50u:
    case 0x51u:
      if (a4 >= 1)
        v50 = a4;
      else
        v50 = 3;
      if ((v50 - 3) > 1 || v24 != 2 || (v7 & 7) != 0 && v21 != 5)
      {
        *(_QWORD *)v396 = 0;
        *(_QWORD *)&v396[8] = 0;
        qmemcpy((void *)sub_10029430C(v396, 64), "scn == 3 && (dcn == 3 || dcn == 4) && (depth == 0 || depth == 5)", 64);
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11207);
      }
      v381.i32[0] = v407[1];
      v381.i32[1] = v22;
      sub_10026214C(a2, &v381, (v21 | (8 * v50)) - 8, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
      {
        v51 = *(_QWORD *)(a2 + 8);
        v52 = *(_OWORD *)(v51 + 16);
        *(_OWORD *)v396 = *(_OWORD *)v51;
        *(_OWORD *)&v396[16] = v52;
        *(_OWORD *)&v396[32] = *(_OWORD *)(v51 + 32);
        v53 = *(_QWORD *)(v51 + 56);
        *(_QWORD *)&v396[48] = *(_QWORD *)(v51 + 48);
        *(_QWORD *)&v396[56] = v53;
        v397 = (int *)&v396[8];
        v398 = &v399;
        v399 = 0;
        v400 = 0;
        if (v53)
        {
          v54 = (unsigned int *)(v53 + 20);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 + 1, v54));
        }
        if (*(int *)(v51 + 4) > 2)
        {
          *(_DWORD *)&v396[4] = 0;
          sub_100256B48((uint64_t)v396, v51);
        }
        else
        {
          v56 = *(uint64_t **)(v51 + 72);
          v57 = v398;
          *v398 = *v56;
          v57[1] = v56[1];
        }
      }
      else
      {
        sub_10025CCB8(a2, -1, (uint64_t)v396);
      }
      if (*(_QWORD *)&v401[56])
      {
        v224 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
        do
        {
          v225 = __ldaxr(v224);
          v226 = v225 - 1;
        }
        while (__stlxr(v226, v224));
        if (!v226)
          sub_100256C90((uint64_t)v401);
      }
      if (*(int *)&v401[4] >= 1)
      {
        v227 = 0;
        v228 = v402;
        do
          v228[v227++] = 0;
        while (v227 < *(int *)&v401[4]);
      }
      *(_OWORD *)v401 = *(_OWORD *)v396;
      *(_OWORD *)&v401[16] = *(_OWORD *)&v396[16];
      *(_OWORD *)&v401[32] = *(_OWORD *)&v396[32];
      *(_OWORD *)&v401[48] = *(_OWORD *)&v396[48];
      if (v403 == &v404)
      {
        v229 = v398;
        v369 = v50;
        if (*(int *)&v396[4] <= 2)
          goto LABEL_368;
      }
      else
      {
        j__free(v403);
        v402 = (int *)&v401[8];
        v403 = &v404;
        v229 = v398;
        v369 = v50;
        if (*(int *)&v396[4] <= 2)
        {
LABEL_368:
          v404 = *v229;
          v405 = v229[1];
          goto LABEL_371;
        }
      }
      v402 = v397;
      v403 = v229;
      v229 = &v399;
      v397 = (int *)&v396[8];
      v398 = &v399;
LABEL_371:
      v230 = v7 & 7;
      *(_DWORD *)v396 = 1124007936;
      memset(&v396[4], 0, 60);
      if (v229 != &v399)
        j__free(v229);
      v231 = *(_QWORD *)&v406[16];
      v232 = v409;
      v233 = *(_QWORD *)&v401[16];
      v234 = v404;
      v236 = *(_DWORD *)&v406[8];
      v235 = *(_DWORD *)&v406[12];
      v237 = sub_1002BF160(a3);
      sub_1002BA0DC(v231, v232, v233, v234, v235, v236, v230, v369, v237, (a3 - 44 < 0x24) & (0xCC0003003uLL >> (a3 - 44)), (a3 < 0x3C) & (0xF0C300000000000uLL >> a3));
      goto LABEL_557;
    case 0x5Au:
    case 0x5Bu:
    case 0x5Cu:
    case 0x5Du:
    case 0x5Eu:
    case 0x5Fu:
    case 0x60u:
    case 0x61u:
      if (a3 - 94 >= 4)
        v58 = 3;
      else
        v58 = 4;
      if (a4 < 1)
        a4 = v58;
      if (a3 - 92 <= 5 && (v59 = 1, ((1 << (a3 - 92)) & 0x23) != 0))
      {
        if ((a4 - 3) < 2)
          goto LABEL_228;
      }
      else
      {
        v59 = a3 == 96;
        if ((a4 - 3) < 2)
        {
LABEL_228:
          if ((v23 & 1) != 0 || (v22 % 3) | v21)
          {
            *(_QWORD *)v396 = 0;
            *(_QWORD *)&v396[8] = 0;
            qmemcpy((void *)sub_10029430C(v396, 53), "sz.width % 2 == 0 && sz.height % 3 == 0 && depth == 0", 53);
            sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11229);
          }
          v368 = v59;
          v380.i32[0] = v407[1];
          v380.i32[1] = 2 * v22 / 3;
          v371 = a4;
          sub_10026214C(a2, &v380, (v21 | (8 * a4)) - 8, -1, 0, 0);
          if (sub_10025D914((_DWORD *)a2) == 0x10000)
          {
            v139 = *(_QWORD *)(a2 + 8);
            v140 = *(_OWORD *)(v139 + 16);
            *(_OWORD *)v396 = *(_OWORD *)v139;
            *(_OWORD *)&v396[16] = v140;
            *(_OWORD *)&v396[32] = *(_OWORD *)(v139 + 32);
            v141 = *(_QWORD *)(v139 + 56);
            *(_QWORD *)&v396[48] = *(_QWORD *)(v139 + 48);
            *(_QWORD *)&v396[56] = v141;
            v397 = (int *)&v396[8];
            v398 = &v399;
            v399 = 0;
            v400 = 0;
            if (v141)
            {
              v142 = (unsigned int *)(v141 + 20);
              do
                v143 = __ldaxr(v142);
              while (__stlxr(v143 + 1, v142));
            }
            if (*(int *)(v139 + 4) > 2)
            {
              *(_DWORD *)&v396[4] = 0;
              sub_100256B48((uint64_t)v396, v139);
            }
            else
            {
              v144 = *(uint64_t **)(v139 + 72);
              v145 = v398;
              *v398 = *v144;
              v145[1] = v144[1];
            }
          }
          else
          {
            sub_10025CCB8(a2, -1, (uint64_t)v396);
          }
          if (*(_QWORD *)&v401[56])
          {
            v252 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
            do
            {
              v253 = __ldaxr(v252);
              v254 = v253 - 1;
            }
            while (__stlxr(v254, v252));
            if (!v254)
              sub_100256C90((uint64_t)v401);
          }
          if (*(int *)&v401[4] >= 1)
          {
            v255 = 0;
            v256 = v402;
            do
              v256[v255++] = 0;
            while (v255 < *(int *)&v401[4]);
          }
          *(_OWORD *)v401 = *(_OWORD *)v396;
          *(_OWORD *)&v401[16] = *(_OWORD *)&v396[16];
          *(_OWORD *)&v401[32] = *(_OWORD *)&v396[32];
          *(_OWORD *)&v401[48] = *(_OWORD *)&v396[48];
          if (v403 == &v404)
          {
            v257 = v398;
            if (*(int *)&v396[4] <= 2)
              goto LABEL_402;
          }
          else
          {
            j__free(v403);
            v402 = (int *)&v401[8];
            v403 = &v404;
            v257 = v398;
            if (*(int *)&v396[4] <= 2)
            {
LABEL_402:
              v404 = *v257;
              v405 = v257[1];
LABEL_405:
              *(_DWORD *)v396 = 1124007936;
              memset(&v396[4], 0, 60);
              if (v257 != &v399)
                j__free(v257);
              v258 = *(_QWORD *)&v406[16];
              v259 = v409;
              v260 = *(_QWORD *)&v401[16];
              v261 = v404;
              v262 = *(_DWORD *)&v401[12];
              v263 = *(int *)&v401[8];
              sub_100298C2C(v396, &off_1004504C0);
              v264 = sub_1002BF160(a3);
              sub_1002BA47C(v258, v258 + v259 * v263, v259, v260, v261, v262, v263, v371, v264, v368);
              if (*(_DWORD *)&v396[8])
                sub_1002989D0(v396);
              goto LABEL_557;
            }
          }
          v402 = v397;
          v403 = v257;
          v257 = &v399;
          v397 = (int *)&v396[8];
          v398 = &v399;
          goto LABEL_405;
        }
      }
      *(_QWORD *)v396 = 0;
      *(_QWORD *)&v396[8] = 0;
      v138 = sub_10029430C(v396, 20);
      *(_DWORD *)(v138 + 16) = 874528061;
      *(_OWORD *)v138 = *(_OWORD *)"dcn == 3 || dcn == 4";
      sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11228);
    case 0x62u:
    case 0x63u:
    case 0x64u:
    case 0x65u:
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
      if (a3 - 102 >= 4)
        v25 = 3;
      else
        v25 = 4;
      if (a4 < 1)
        a4 = v25;
      if (a3 - 98 <= 5 && (v26 = 1, ((1 << (a3 - 98)) & 0x23) != 0))
      {
        if ((a4 - 3) < 2)
          goto LABEL_216;
      }
      else
      {
        v26 = a3 == 102;
        if ((a4 - 3) < 2)
        {
LABEL_216:
          if ((v23 & 1) != 0 || (v22 % 3) | v21)
          {
            *(_QWORD *)v396 = 0;
            *(_QWORD *)&v396[8] = 0;
            qmemcpy((void *)sub_10029430C(v396, 53), "sz.width % 2 == 0 && sz.height % 3 == 0 && depth == 0", 53);
            sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11242);
          }
          v379.i32[0] = v407[1];
          v379.i32[1] = 2 * v22 / 3;
          sub_10026214C(a2, &v379, (v21 | (8 * a4)) - 8, -1, 0, 0);
          if (sub_10025D914((_DWORD *)a2) == 0x10000)
          {
            v131 = *(_QWORD *)(a2 + 8);
            v132 = *(_OWORD *)(v131 + 16);
            *(_OWORD *)v396 = *(_OWORD *)v131;
            *(_OWORD *)&v396[16] = v132;
            *(_OWORD *)&v396[32] = *(_OWORD *)(v131 + 32);
            v133 = *(_QWORD *)(v131 + 56);
            *(_QWORD *)&v396[48] = *(_QWORD *)(v131 + 48);
            *(_QWORD *)&v396[56] = v133;
            v397 = (int *)&v396[8];
            v398 = &v399;
            v399 = 0;
            v400 = 0;
            if (v133)
            {
              v134 = (unsigned int *)(v133 + 20);
              do
                v135 = __ldaxr(v134);
              while (__stlxr(v135 + 1, v134));
            }
            if (*(int *)(v131 + 4) > 2)
            {
              *(_DWORD *)&v396[4] = 0;
              sub_100256B48((uint64_t)v396, v131);
            }
            else
            {
              v136 = *(uint64_t **)(v131 + 72);
              v137 = v398;
              *v398 = *v136;
              v137[1] = v136[1];
            }
          }
          else
          {
            sub_10025CCB8(a2, -1, (uint64_t)v396);
          }
          if (*(_QWORD *)&v401[56])
          {
            v238 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
            do
            {
              v239 = __ldaxr(v238);
              v240 = v239 - 1;
            }
            while (__stlxr(v240, v238));
            if (!v240)
              sub_100256C90((uint64_t)v401);
          }
          if (*(int *)&v401[4] >= 1)
          {
            v241 = 0;
            v242 = v402;
            do
              v242[v241++] = 0;
            while (v241 < *(int *)&v401[4]);
          }
          *(_OWORD *)v401 = *(_OWORD *)v396;
          *(_OWORD *)&v401[16] = *(_OWORD *)&v396[16];
          *(_OWORD *)&v401[32] = *(_OWORD *)&v396[32];
          *(_OWORD *)&v401[48] = *(_OWORD *)&v396[48];
          if (v403 == &v404)
          {
            v243 = v398;
            if (*(int *)&v396[4] <= 2)
              goto LABEL_385;
          }
          else
          {
            j__free(v403);
            v402 = (int *)&v401[8];
            v403 = &v404;
            v243 = v398;
            if (*(int *)&v396[4] <= 2)
            {
LABEL_385:
              v404 = *v243;
              v405 = v243[1];
LABEL_388:
              v244 = a4;
              *(_DWORD *)v396 = 1124007936;
              memset(&v396[4], 0, 60);
              if (v243 != &v399)
                j__free(v243);
              v245 = *(_QWORD *)&v406[16];
              v246 = v409;
              v247 = *(_QWORD *)&v401[16];
              v248 = v404;
              v249 = *(_DWORD *)&v401[12];
              v250 = *(_DWORD *)&v401[8];
              v251 = sub_1002BF160(a3);
              sub_1002BA98C(v245, v246, v247, v248, v249, v250, v244, v251, v26);
              goto LABEL_557;
            }
          }
          v402 = v397;
          v403 = v243;
          v243 = &v399;
          v397 = (int *)&v396[8];
          v398 = &v399;
          goto LABEL_388;
        }
      }
      *(_QWORD *)v396 = 0;
      *(_QWORD *)&v396[8] = 0;
      v130 = sub_10029430C(v396, 20);
      *(_DWORD *)(v130 + 16) = 874528061;
      *(_OWORD *)v130 = *(_OWORD *)"dcn == 3 || dcn == 4";
      sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11241);
    case 0x6Au:
      if (a4 <= 1)
        v291 = 1;
      else
        v291 = a4;
      if (a4 >= 2)
      {
        sub_1001F37D4(v396, "dcn == 1");
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11253);
      }
      if ((v23 & 1) != 0 || (v22 % 3) | v21)
      {
        sub_1001F37D4(v396, "sz.width % 2 == 0 && sz.height % 3 == 0 && depth == 0");
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11254);
      }
      v292 = (2 * v22 / 3);
      v378.i32[0] = v407[1];
      v378.i32[1] = v292;
      sub_10026214C(a2, &v378, (v21 | (8 * v291)) - 8, -1, 0, 0);
      sub_1002BF084(a2, -1, (uint64_t)v396);
      sub_10024B080((uint64_t)v401, (uint64_t)v396);
      sub_100006BE4((uint64_t)v396);
      v377[0] = v292 << 32;
      v413[0] = 0x7FFFFFFF80000000;
      sub_100257548((uint64_t)v396, v406, (int *)v377, v413);
      LODWORD(v377[0]) = 33619968;
      v377[1] = v401;
      v377[2] = 0;
      sub_1002181EC((uint64_t)v396, (uint64_t)v377);
      sub_100006BE4((uint64_t)v396);
      goto LABEL_557;
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Fu:
    case 0x70u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
      if (a4 <= 0)
      {
        if (a3 - 111 > 0xB)
          a4 = 3;
        else
          a4 = dword_1003C0E1C[a3 - 111];
      }
      if (a3 - 107 <= 4 && (v104 = 1, ((1 << (a3 - 107)) & 0x13) != 0))
      {
        v105 = a3 - 117;
        if (a3 - 117 > 4)
          goto LABEL_185;
      }
      else
      {
        v104 = a3 == 112;
        v105 = a3 - 117;
        if (a3 - 117 > 4)
          goto LABEL_185;
      }
      v106 = 1;
      if (((1 << v105) & 0x13) != 0)
      {
        if ((a4 - 3) < 2)
          goto LABEL_187;
        goto LABEL_186;
      }
LABEL_185:
      v106 = a3 == 122;
      if ((a4 - 3) < 2)
      {
LABEL_187:
        if (v21 || v370 != 2)
        {
          *(_QWORD *)v396 = 0;
          *(_QWORD *)&v396[8] = 0;
          qmemcpy((void *)sub_10029430C(v396, 22), "scn == 2 && depth == 0", 22);
          sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11291);
        }
        v375.i32[0] = v407[1];
        v375.i32[1] = v22;
        sub_10026214C(a2, &v375, 8 * a4 - 8, -1, 0, 0);
        if (sub_10025D914((_DWORD *)a2) == 0x10000)
        {
          v108 = *(_QWORD *)(a2 + 8);
          v109 = *(_OWORD *)(v108 + 16);
          *(_OWORD *)v396 = *(_OWORD *)v108;
          *(_OWORD *)&v396[16] = v109;
          *(_OWORD *)&v396[32] = *(_OWORD *)(v108 + 32);
          v110 = *(_QWORD *)(v108 + 56);
          *(_QWORD *)&v396[48] = *(_QWORD *)(v108 + 48);
          *(_QWORD *)&v396[56] = v110;
          v397 = (int *)&v396[8];
          v398 = &v399;
          v399 = 0;
          v400 = 0;
          if (v110)
          {
            v111 = (unsigned int *)(v110 + 20);
            do
              v112 = __ldaxr(v111);
            while (__stlxr(v112 + 1, v111));
          }
          if (*(int *)(v108 + 4) > 2)
          {
            *(_DWORD *)&v396[4] = 0;
            sub_100256B48((uint64_t)v396, v108);
          }
          else
          {
            v113 = *(uint64_t **)(v108 + 72);
            v114 = v398;
            *v398 = *v113;
            v114[1] = v113[1];
          }
        }
        else
        {
          sub_10025CCB8(a2, -1, (uint64_t)v396);
        }
        if (*(_QWORD *)&v401[56])
        {
          v115 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
          do
          {
            v116 = __ldaxr(v115);
            v117 = v116 - 1;
          }
          while (__stlxr(v117, v115));
          if (!v117)
            sub_100256C90((uint64_t)v401);
        }
        if (*(int *)&v401[4] >= 1)
        {
          v118 = 0;
          v119 = v402;
          do
            v119[v118++] = 0;
          while (v118 < *(int *)&v401[4]);
        }
        *(_OWORD *)v401 = *(_OWORD *)v396;
        *(_OWORD *)&v401[16] = *(_OWORD *)&v396[16];
        *(_OWORD *)&v401[32] = *(_OWORD *)&v396[32];
        *(_OWORD *)&v401[48] = *(_OWORD *)&v396[48];
        if (v403 == &v404)
        {
          v120 = v398;
          v367 = a4;
          if (*(int *)&v396[4] <= 2)
            goto LABEL_208;
        }
        else
        {
          j__free(v403);
          v402 = (int *)&v401[8];
          v403 = &v404;
          v120 = v398;
          v367 = a4;
          if (*(int *)&v396[4] <= 2)
          {
LABEL_208:
            v121 = a3;
            v404 = *v120;
            v405 = v120[1];
LABEL_211:
            v122 = v106;
            *(_DWORD *)v396 = 1124007936;
            memset(&v396[4], 0, 60);
            if (v120 != &v399)
              j__free(v120);
            v123 = *(_QWORD *)&v406[16];
            v124 = v409;
            v125 = *(_QWORD *)&v401[16];
            v126 = v404;
            v128 = *(_DWORD *)&v406[8];
            v127 = *(_DWORD *)&v406[12];
            v129 = sub_1002BF160(v121);
            sub_1002BAE58(v123, v124, v125, v126, v127, v128, v367, v129, v122, v104);
            goto LABEL_557;
          }
        }
        v121 = a3;
        v402 = v397;
        v403 = v120;
        v120 = &v399;
        v397 = (int *)&v396[8];
        v398 = &v399;
        goto LABEL_211;
      }
LABEL_186:
      *(_QWORD *)v396 = 0;
      *(_QWORD *)&v396[8] = 0;
      v107 = sub_10029430C(v396, 20);
      *(_DWORD *)(v107 + 16) = 874528061;
      *(_OWORD *)v107 = *(_OWORD *)"dcn == 3 || dcn == 4";
      sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11290);
    case 0x7Bu:
    case 0x7Cu:
      if (a4 >= 2)
      {
        sub_1001F37D4(v396, "dcn == 1");
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11301);
      }
      if ((v7 & 7) != 0 || v24 != 1)
      {
        sub_1001F37D4(v396, "scn == 2 && depth == 0");
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11302);
      }
      sub_1002564BC((uint64_t)v406);
      sub_1001F9C48(a1, a2, a3 == 123);
      goto LABEL_557;
    case 0x7Du:
      if (a4 >= 1)
        v293 = a4;
      else
        v293 = 4;
      if ((v7 & 7) != 0 || v293 != 4 || v24 != 3)
      {
        sub_1001F37D4(v396, "scn == 4 && dcn == 4 && depth == 0");
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11310);
      }
      v374.i32[0] = v407[1];
      v374.i32[1] = v22;
      sub_10026214C(a2, &v374, 24, -1, 0, 0);
      sub_1002BF084(a2, -1, (uint64_t)v396);
      sub_10024B080((uint64_t)v401, (uint64_t)v396);
      sub_100006BE4((uint64_t)v396);
      sub_1002BB4AC(*(uint64_t *)&v406[16], v409, *(uint64_t *)&v401[16], v404, *(int *)&v406[12], *(int *)&v406[8]);
      goto LABEL_557;
    case 0x7Eu:
      if (a4 >= 1)
        v294 = a4;
      else
        v294 = 4;
      if ((v7 & 7) != 0 || v294 != 4 || v24 != 3)
      {
        sub_1001F37D4(v396, "scn == 4 && dcn == 4 && depth == 0");
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11317);
      }
      v373.i32[0] = v407[1];
      v373.i32[1] = v22;
      sub_10026214C(a2, &v373, 24, -1, 0, 0);
      sub_1002BF084(a2, -1, (uint64_t)v396);
      sub_10024B080((uint64_t)v401, (uint64_t)v396);
      sub_100006BE4((uint64_t)v396);
      sub_1002BB580(*(uint64_t *)&v406[16], v409, *(uint64_t *)&v401[16], v404, *(int *)&v406[12], *(int *)&v406[8]);
      goto LABEL_557;
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
      if (a4 <= 1)
        v60 = 1;
      else
        v60 = a4;
      if (a3 - 127 < 4)
        v61 = 1;
      else
        v61 = 2;
      v366 = v61;
      if ((v7 & 0xFF7) != 0x10)
      {
        *(_QWORD *)v396 = 0;
        *(_QWORD *)&v396[8] = 0;
        qmemcpy((void *)sub_10029430C(v396, 36), "(scn == 3 || scn == 4) && depth == 0", 36);
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11273);
      }
      if (a4 >= 2)
      {
        *(_QWORD *)v396 = 0;
        *(_QWORD *)&v396[8] = 0;
        *(_QWORD *)sub_10029430C(v396, 8) = 0x31203D3D206E6364;
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11274);
      }
      if (((v23 | v22) & 1) != 0)
      {
        *(_QWORD *)v396 = 0;
        *(_QWORD *)&v396[8] = 0;
        qmemcpy((void *)sub_10029430C(v396, 39), "sz.width % 2 == 0 && sz.height % 2 == 0", 39);
        sub_100294B74(-215, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11275);
      }
      if (v22 >= 0)
        v62 = *v407;
      else
        v62 = v22 + 1;
      v376.i32[0] = v407[1];
      v376.i32[1] = (v62 & 0xFFFFFFFE) + (v62 >> 1);
      sub_10026214C(a2, &v376, (v21 | (8 * v60)) - 8, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
      {
        v63 = *(_QWORD *)(a2 + 8);
        v64 = *(_OWORD *)(v63 + 16);
        *(_OWORD *)v396 = *(_OWORD *)v63;
        *(_OWORD *)&v396[16] = v64;
        *(_OWORD *)&v396[32] = *(_OWORD *)(v63 + 32);
        v65 = *(_QWORD *)(v63 + 56);
        *(_QWORD *)&v396[48] = *(_QWORD *)(v63 + 48);
        *(_QWORD *)&v396[56] = v65;
        v397 = (int *)&v396[8];
        v398 = &v399;
        v399 = 0;
        v400 = 0;
        if (v65)
        {
          v66 = (unsigned int *)(v65 + 20);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 + 1, v66));
        }
        if (*(int *)(v63 + 4) > 2)
        {
          *(_DWORD *)&v396[4] = 0;
          sub_100256B48((uint64_t)v396, v63);
        }
        else
        {
          v68 = *(uint64_t **)(v63 + 72);
          v69 = v398;
          *v398 = *v68;
          v69[1] = v68[1];
        }
      }
      else
      {
        sub_10025CCB8(a2, -1, (uint64_t)v396);
      }
      if (*(_QWORD *)&v401[56])
      {
        v265 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
        do
        {
          v266 = __ldaxr(v265);
          v267 = v266 - 1;
        }
        while (__stlxr(v267, v265));
        if (!v267)
          sub_100256C90((uint64_t)v401);
      }
      if (*(int *)&v401[4] >= 1)
      {
        v268 = 0;
        v269 = v402;
        do
          v269[v268++] = 0;
        while (v268 < *(int *)&v401[4]);
      }
      *(_OWORD *)v401 = *(_OWORD *)v396;
      *(_OWORD *)&v401[16] = *(_OWORD *)&v396[16];
      *(_OWORD *)&v401[32] = *(_OWORD *)&v396[32];
      *(_OWORD *)&v401[48] = *(_OWORD *)&v396[48];
      if (v403 == &v404)
      {
        v270 = v398;
        if (*(int *)&v396[4] <= 2)
          goto LABEL_420;
      }
      else
      {
        j__free(v403);
        v402 = (int *)&v401[8];
        v403 = &v404;
        v270 = v398;
        if (*(int *)&v396[4] <= 2)
        {
LABEL_420:
          v404 = *v270;
          v405 = v270[1];
          goto LABEL_423;
        }
      }
      v402 = v397;
      v403 = v270;
      v270 = &v399;
      v397 = (int *)&v396[8];
      v398 = &v399;
LABEL_423:
      *(_DWORD *)v396 = 1124007936;
      memset(&v396[4], 0, 60);
      if (v270 != &v399)
        j__free(v270);
      v271 = *(_QWORD *)&v406[16];
      v272 = v409;
      v273 = *(_QWORD *)&v401[16];
      v274 = v404;
      v276 = *(_DWORD *)&v406[8];
      v275 = *(_DWORD *)&v406[12];
      v277 = sub_1002BF160(a3);
      sub_1002BAD28(v271, v272, v273, v274, v275, v276, v370, v277, v366);
LABEL_557:
      if (*(_QWORD *)&v401[56])
      {
        v355 = (unsigned int *)(*(_QWORD *)&v401[56] + 20);
        do
        {
          v356 = __ldaxr(v355);
          v357 = v356 - 1;
        }
        while (__stlxr(v357, v355));
        if (!v357)
          sub_100256C90((uint64_t)v401);
      }
      *(_QWORD *)&v401[56] = 0;
      memset(&v401[16], 0, 32);
      if (*(int *)&v401[4] >= 1)
      {
        v358 = 0;
        v359 = v402;
        do
          v359[v358++] = 0;
        while (v358 < *(int *)&v401[4]);
      }
      if (v403 != &v404)
        j__free(v403);
      if (*(_QWORD *)&v406[56])
      {
        v360 = (unsigned int *)(*(_QWORD *)&v406[56] + 20);
        do
        {
          v361 = __ldaxr(v360);
          v362 = v361 - 1;
        }
        while (__stlxr(v362, v360));
        if (!v362)
          sub_100256C90((uint64_t)v406);
      }
      *(_QWORD *)&v406[56] = 0;
      memset(&v406[16], 0, 32);
      if (*(int *)&v406[4] >= 1)
      {
        v363 = 0;
        v364 = v407;
        do
          v364[v363++] = 0;
        while (v363 < *(int *)&v406[4]);
      }
      if (v408 != &v409)
        j__free(v408);
      if (v412)
        sub_1002989D0(v411);
      return;
    default:
      sub_1001F37D4(v396, "Unknown/unsupported color conversion code");
      sub_100294B74(-206, (uint64_t *)v396, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11323);
  }
}

void sub_1002BEBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  sub_10029434C(&a41);
  sub_100006BE4((uint64_t)&a53);
  sub_100006BE4(v53 - 224);
  sub_1001D40CC(v53 - 120);
  _Unwind_Resume(a1);
}

void sub_1002BF084(uint64_t a1@<X0>, signed int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;

  v6 = sub_10025D914((_DWORD *)a1);
  if (a2 < 0 && v6 == 0x10000)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v7;
    *(_OWORD *)(a3 + 16) = v8;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v7 + 32);
    v9 = *(_QWORD *)(v7 + 56);
    *(_QWORD *)(a3 + 48) = *(_QWORD *)(v7 + 48);
    *(_QWORD *)(a3 + 56) = v9;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 64) = a3 + 8;
    *(_QWORD *)(a3 + 72) = a3 + 80;
    *(_QWORD *)(a3 + 88) = 0;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 20);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    if (*(int *)(v7 + 4) > 2)
    {
      *(_DWORD *)(a3 + 4) = 0;
      sub_100256B48(a3, v7);
    }
    else
    {
      v12 = *(_QWORD **)(v7 + 72);
      v13 = *(_QWORD **)(a3 + 72);
      *v13 = *v12;
      v13[1] = v12[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, a2, a3);
  }
}

uint64_t sub_1002BF160(int a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
    case 1:
    case 6:
    case 10:
    case 12:
    case 14:
    case 16:
    case 18:
    case 22:
    case 24:
    case 26:
    case 28:
    case 32:
    case 34:
    case 36:
    case 38:
    case 40:
    case 44:
    case 50:
    case 52:
    case 54:
    case 56:
    case 58:
    case 60:
    case 66:
    case 68:
    case 70:
    case 72:
    case 74:
    case 76:
    case 78:
    case 80:
    case 82:
    case 84:
    case 91:
    case 93:
    case 95:
    case 97:
    case 99:
    case 101:
    case 103:
    case 105:
    case 108:
    case 112:
    case 116:
    case 118:
    case 120:
    case 122:
    case 128:
    case 130:
    case 132:
    case 134:
      return result;
    default:
      result = 1;
      break;
  }
  return result;
}

uint64_t sub_1002BF198(uint64_t a1, int a2, int a3, uint64_t a4, float32x2_t *a5, char a6)
{
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float32x2_t *v15;
  char *v16;
  float64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27[2];
  unint64_t v28;
  float64x2_t v29;
  unint64_t v30[2];
  float64x2_t v31;
  double v32;

  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 40) = a6;
  sub_1002BF508();
  if (a5)
  {
    v31 = vcvtq_f64_f32(*a5);
    v32 = a5[1].f32[0];
    v9 = atomic_load((unsigned __int8 *)&qword_10048ACA0);
    if ((v9 & 1) != 0)
      goto LABEL_5;
  }
  else
  {
    v31 = (float64x2_t)xmmword_1004AE670;
    v32 = *(double *)&qword_1004AE680;
    v10 = atomic_load((unsigned __int8 *)&qword_10048ACA0);
    if ((v10 & 1) != 0)
      goto LABEL_5;
  }
  if (__cxa_guard_acquire(&qword_10048ACA0))
  {
    sub_100289D28(&qword_10048AC98, 4096);
    __cxa_guard_release(&qword_10048ACA0);
  }
LABEL_5:
  if (dword_10048AC90 >= 1)
  {
    v11 = 0;
    v24 = a1 + 4 * a3;
    v25 = a1 + 4 * (a3 ^ 2);
    v12 = (uint64_t *)&v31;
    v13 = 1;
    do
    {
      v29 = 0uLL;
      v14 = (v13 - 1);
      v30[0] = 0;
      if (a4)
      {
        v15 = (float32x2_t *)(a4 + 4 * v14);
        v29 = vcvtq_f64_f32(*v15);
        *(double *)v30 = v15[1].f32[0];
      }
      else
      {
        v16 = &byte_1004AE500[8 * v14];
        if (v16 + 400 != (char *)&v29)
          v29.f64[0] = *((float64_t *)v16 + 50);
        v17 = (float64_t *)(v16 + 408);
        if (v17 != &v29.f64[1])
          v29.f64[1] = *v17;
        v18 = (unint64_t *)&byte_1004AE500[8 * v14 + 416];
        if (v18 != v30)
          v30[0] = *v18;
      }
      sub_10028A2EC(&qword_10048AC98, (unint64_t *)&v29, &v28);
      sub_10028A5A4(&v28, v12, (unint64_t *)v27);
      *(_DWORD *)(v25 + 4 * v13) = sub_100289F48(v27);
      sub_10028A2EC(&qword_10048AC98, (unint64_t *)&v29.f64[1], &v28);
      sub_10028A5A4(&v28, v12, (unint64_t *)v27);
      v19 = a1 + 4 * v13;
      *(_DWORD *)(v19 + 4) = sub_100289F48(v27);
      v20 = (_DWORD *)(v19 + 4);
      sub_10028A2EC(&qword_10048AC98, v30, &v28);
      sub_10028A5A4(&v28, v12, (unint64_t *)v27);
      *(_DWORD *)(v24 + 4 * v13) = sub_100289F48(v27);
      v21 = *(_DWORD *)(a1 + 4 * v14 + 4);
      if (v21 < 0
        || (*v20 & 0x80000000) != 0
        || (v22 = *(_DWORD *)(a1 + 4 * (v13 + 1) + 4), v22 < 0)
        || (*v20 + v21 + v22) >= 0x2000)
      {
        v27[0] = 0;
        v27[1] = 0;
        qmemcpy((void *)sub_10029430C(v27, 128), "coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 2*(1 << xyz_shift)", 128);
        sub_100294B74(-215, v27, "RGB2Lab_b", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 6378);
      }
      ++v11;
      v13 += 3;
      ++v12;
    }
    while (v11 < dword_10048AC90);
  }
  return a1;
}

void sub_1002BF4C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10048ACA0);
  _Unwind_Resume(a1);
}

void sub_1002BF4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1002BF508()
{
  uint64_t v0;
  unint64_t *i;
  BOOL v2;
  uint64_t v3;
  uint64_t j;
  unsigned __int8 v5;
  uint64_t k;
  __int16 v7;
  char *v8;
  unsigned __int8 v9;
  uint64_t m;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t n;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  __int16 *v18;
  __int16 v19;
  __int16 v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int *v25;
  _DWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _DWORD *ii;
  int *v30;
  uint64_t jj;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _DWORD *v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unint64_t v75;
  uint64_t v76[2];
  _DWORD v77[278];
  uint64_t v78;
  int v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _BYTE v84[4100];
  _BYTE v85[4100];
  _BYTE v86[4100];
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;

  if ((byte_1004AE500[0] & 1) == 0)
  {
    bzero(v86, 0x1004uLL);
    bzero(v85, 0x1004uLL);
    bzero(v84, 0x1004uLL);
    LODWORD(v76[0]) = 1065353216;
    LODWORD(v75) = dword_1004AE504;
    sub_1002899DC((int *)v76, (unsigned int *)&v75, &v74);
    v0 = -1025;
    for (i = (unint64_t *)v86; ; i = (unint64_t *)((char *)i + 4))
    {
      sub_100289608((unsigned int *)&v75, v0 + 1025);
      sub_100289790(&v74, (int *)&v75, v76);
      if (sub_100289CB0((unsigned int *)v76, &dword_1004AE520))
        sub_10028A964((uint64_t)v76, dword_1004AE524, &dword_1004AE524[1], (int *)&v75);
      else
        sub_10028C398((unint64_t *)v76, (int *)&v75);
      if (i != &v75)
        *(_DWORD *)i = v75;
      v2 = __CFADD__(v0++, 1);
      if (v2)
      {
        qword_1004AE5A0 = (uint64_t)sub_1002C18F0((uint64_t)v86);
        LODWORD(v75) = 1065353216;
        LODWORD(v87) = 1149239296;
        sub_1002899DC((int *)&v75, (unsigned int *)&v87, v76);
        v3 = 0;
        v74 = v76[0];
        for (j = -1025; ; ++j)
        {
          sub_100289608((unsigned int *)&v75, j + 1025);
          sub_100289790(&v74, (int *)&v75, v76);
          v73 = v76[0];
          sub_1002C1B74(&v75, &v73);
          if (&v85[v3] != (_BYTE *)&v75)
            *(_DWORD *)&v85[v3] = v75;
          v72 = v76[0];
          sub_1002C1C38(&v75, &v72);
          if (&v84[v3] != (_BYTE *)&v75)
            *(_DWORD *)&v84[v3] = v75;
          v3 += 4;
          v2 = __CFADD__(j, 1);
          if (v2)
          {
            qword_1004AE5A8 = (uint64_t)sub_1002C18F0((uint64_t)v85);
            qword_1004AE5B0 = (uint64_t)sub_1002C18F0((uint64_t)v84);
            v5 = atomic_load((unsigned __int8 *)&qword_1004AE5B8);
            if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE5B8))
            {
              sub_100289608(&dword_1004AE530, 2040);
              __cxa_guard_release(&qword_1004AE5B8);
            }
            for (k = 0; k != 256; ++k)
            {
              sub_100289608((unsigned int *)&v75, k);
              sub_1002899DC((int *)&v75, (unsigned int *)&dword_1004AE52C, v76);
              v71 = v76[0];
              sub_1002C1B74(&v87, &v71);
              sub_100289790((int *)&dword_1004AE530, (int *)&v87, &v75);
              v7 = sub_100289E8C((unsigned int *)&v75);
              v8 = &byte_1004AE500[2 * k];
              *((_WORD *)v8 + 276) = v7;
              *((_WORD *)v8 + 532) = 8 * k;
            }
            v9 = atomic_load((unsigned __int8 *)&qword_1004AE5C0);
            if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE5C0))
            {
              LODWORD(v76[0]) = 1065353216;
              sub_100289608((unsigned int *)&v75, 4096);
              sub_1002899DC((int *)v76, (unsigned int *)&v75, &dword_1004AE534);
              __cxa_guard_release(&qword_1004AE5C0);
            }
            for (m = 0; m != 4096; ++m)
            {
              sub_100289608((unsigned int *)&v75, m);
              sub_100289790(&dword_1004AE534, (int *)&v75, v76);
              v70 = v76[0];
              sub_1002C1C38(&v87, &v70);
              sub_100289790(&dword_1004AE52C, (int *)&v87, &v75);
              word_100498D00[m] = sub_100289E8C((unsigned int *)&v75);
              sub_100289790(&dword_1004AE52C, (int *)v76, &v75);
              word_10049AD00[m] = sub_100289E18((int *)&v75);
            }
            v11 = atomic_load((unsigned __int8 *)&qword_1004AE5C8);
            if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE5C8))
            {
              *(float *)&dword_1004AE538 = 1.0 / (float)(*(float *)&dword_1004AE52C * 8.0);
              __cxa_guard_release(&qword_1004AE5C8);
            }
            v12 = atomic_load((unsigned __int8 *)&qword_1004AE5D0);
            if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE5D0))
            {
              sub_100289608(&dword_1004AE53C, 0x8000);
              __cxa_guard_release(&qword_1004AE5D0);
            }
            for (n = 0; n != 3072; ++n)
            {
              sub_100289608((unsigned int *)&v75, n);
              sub_100289790(&dword_1004AE538, (int *)&v75, v76);
              if (sub_100289CB0((unsigned int *)v76, &dword_1004AE520))
                sub_10028A964((uint64_t)v76, dword_1004AE524, &dword_1004AE524[1], (int *)&v87);
              else
                sub_10028C398((unint64_t *)v76, (int *)&v87);
              sub_100289790((int *)&dword_1004AE53C, (int *)&v87, &v75);
              word_10049CD00[n] = sub_100289E8C((unsigned int *)&v75);
            }
            v14 = 0;
            v15 = 0;
            v16 = 0;
            v17 = 0;
            v18 = &word_1004AEB2A;
            do
            {
              if (v17 > 0x14)
              {
                sub_100289608((unsigned int *)&v87, v14);
                sub_100289608((unsigned int *)&v83, 29580);
                sub_1002899DC((int *)&v87, (unsigned int *)&v83, &v75);
                sub_100289608((unsigned int *)&v81, 0x40000);
                sub_100289608(&v80, 116);
                sub_1002899DC((int *)&v81, &v80, &v82);
                sub_100289748((unsigned int *)&v75, (unsigned int *)&v82, (int *)v76);
                v19 = sub_100289E8C((unsigned int *)v76);
                sub_100289790((int *)v76, (int *)v76, &v83);
                sub_100289790((int *)&v83, (int *)v76, &v87);
                sub_100289608((unsigned int *)&v82, 0x10000000);
                sub_1002899DC((int *)&v87, (unsigned int *)&v82, &v75);
                v20 = sub_100289E8C((unsigned int *)&v75);
              }
              else
              {
                sub_100289608((unsigned int *)&v75, v15);
                sub_100289608((unsigned int *)&v87, 414613);
                sub_1002899DC((int *)&v75, (unsigned int *)&v87, v76);
                v20 = sub_100289E8C((unsigned int *)v76);
                sub_100289608((unsigned int *)&v75, 0x4000);
                sub_100289608((unsigned int *)&v82, 16);
                sub_100289608((unsigned int *)&v81, 116);
                sub_1002899DC((int *)&v82, (unsigned int *)&v81, &v83);
                sub_100289608((unsigned int *)&v79, v16);
                sub_100289608((unsigned int *)&v78, 1479);
                sub_1002899DC(&v79, (unsigned int *)&v78, &v80);
                sub_100289748((unsigned int *)&v83, &v80, (int *)&v87);
                sub_100289790((int *)&v75, (int *)&v87, v76);
                v19 = sub_100289E8C((unsigned int *)v76);
              }
              ++v17;
              v16 += 5;
              *(v18 - 1) = v20;
              *v18 = v19;
              v18 += 2;
              v15 += 2949120;
              v14 += 1638400;
            }
            while (v17 != 256);
            v21 = sub_1001D444C(0x24000uLL);
            v22 = 0;
            v23 = -879660;
            do
            {
              if (v22 - 8145 <= 3390)
                v24 = v23 / 841 - 290;
              else
                v24 = ((((v22 - 8145) * (v22 - 8145)) >> 14) * ((_DWORD)v22 - 8145)) >> 14;
              v21[v22] = v24;
              v23 += 108;
              ++v22;
            }
            while (v22 != 36864);
            qword_1004AE5D8 = (uint64_t)v21;
            sub_100289D28(&v83, 15);
            sub_10028A2EC((unint64_t *)&xmmword_1004AE670 + 1, &v83, &v87);
            sub_10028A294((unint64_t *)&xmmword_1004AE670, &v87, &v75);
            sub_100289D28(&v81, 3);
            sub_10028A2EC((unint64_t *)&qword_1004AE680, &v81, &v82);
            sub_10028A294(&v75, &v82, (unint64_t *)v76);
            sub_10028A170(v76, &v69);
            LODWORD(v75) = 1065353216;
            LODWORD(v83) = 872415232;
            if (sub_100289C38((unsigned int *)&v69, (unsigned int *)&v83))
              v25 = &v69;
            else
              v25 = (int *)&v83;
            LODWORD(v87) = *v25;
            sub_1002899DC((int *)&v75, (unsigned int *)&v87, v76);
            v69 = v76[0];
            sub_100289608((unsigned int *)&v75, 52);
            sub_100289790(&v69, (int *)&v75, v76);
            sub_10028A170((uint64_t *)&xmmword_1004AE670, &v87);
            sub_100289790((int *)v76, (int *)&v87, &v68);
            sub_100289608((unsigned int *)&v75, 117);
            sub_100289790(&v69, (int *)&v75, v76);
            sub_10028A170((uint64_t *)&xmmword_1004AE670 + 1, &v87);
            sub_100289790((int *)v76, (int *)&v87, &v67);
            LODWORD(v75) = 1065353216;
            sub_100289608((unsigned int *)&v87, 4);
            sub_1002899DC((int *)&v75, (unsigned int *)&v87, v76);
            v63 = sub_1001D444C(0x40000uLL);
            v26 = sub_1001D444C(0x40000uLL);
            v27 = sub_1001D444C(0x80000uLL);
            v65 = 0;
            v28 = 0;
            for (ii = v63; ; ii += 256)
            {
              v30 = (int *)sub_100289608((unsigned int *)&v87, 100 * (int)v28);
              sub_1002899DC(v30, (unsigned int *)&dword_1004AE52C, &v75);
              for (jj = 0; jj != 256; ++jj)
              {
                sub_100289608((unsigned int *)&v81, jj);
                sub_100289790((int *)&v81, (int *)&dword_1004AE510, &v82);
                sub_1002899DC((int *)&v82, (unsigned int *)&dword_1004AE52C, &v83);
                sub_100289748((unsigned int *)&v83, (unsigned int *)&dword_1004AE508, (int *)&v87);
                sub_100289608((unsigned int *)&v82, 9);
                sub_100289790((int *)&v75, &v68, &v80);
                sub_100289748((unsigned int *)&v87, &v80, (int *)&v81);
                sub_100289790((int *)&v82, (int *)&v81, &v83);
                sub_100289608((unsigned int *)&v81, 16);
                sub_100289790((int *)&v83, (int *)&v81, &v82);
                ii[jj] = sub_100289E8C((unsigned int *)&v82);
              }
              v32 = -256;
              v33 = v65;
              do
              {
                sub_100289608((unsigned int *)&v81, v32 + 256);
                sub_100289790((int *)&v81, (int *)&dword_1004AE51C, &v82);
                sub_1002899DC((int *)&v82, (unsigned int *)&dword_1004AE52C, &v83);
                sub_100289748((unsigned int *)&v83, (unsigned int *)&dword_1004AE514, (int *)&v87);
                sub_100289790((int *)&v75, &v67, &v81);
                sub_100289748((unsigned int *)&v87, (unsigned int *)&v81, (int *)&v82);
                sub_1002899DC((int *)v76, (unsigned int *)&v82, &v83);
                if (sub_100289C38((unsigned int *)&v83, (unsigned int *)v76))
                  LODWORD(v83) = v76[0];
                LODWORD(v82) = LODWORD(v76[0]) ^ 0x80000000;
                if (sub_100289CB0((unsigned int *)&v83, (unsigned int *)&v82))
                  LODWORD(v83) = LODWORD(v76[0]) ^ 0x80000000;
                sub_100289608((unsigned int *)&v81, 0x1000000);
                sub_100289790((int *)&v83, (int *)&v81, &v82);
                v34 = sub_100289E8C((unsigned int *)&v82);
                v26[v33] = v34;
                v27[v33++] = 249600 * v34 * (int)v28;
                v2 = __CFADD__(v32++, 1);
              }
              while (!v2);
              ++v28;
              v65 += 256;
              if (v28 == 256)
              {
                qword_1004AE5E0 = (uint64_t)v63;
                *(_QWORD *)algn_1004AE5E8 = v26;
                qword_1004AE5F0 = (uint64_t)v27;
                v76[0] = 0x3FF0000000000000;
                sub_10028A5A4((unint64_t *)v76, (uint64_t *)&xmmword_1004AE670, &v87);
                v88 = 0x3FF0000000000000;
                v75 = 0x3FF0000000000000;
                sub_10028A5A4(&v75, &qword_1004AE680, &v89);
                sub_10028A170((uint64_t *)&xmmword_1004AE690, v76);
                v66 = v76[0];
                sub_10028A170((uint64_t *)&xmmword_1004AE690 + 1, v76);
                v64 = v76[0];
                sub_10028A170(&qword_1004AE6A0, v76);
                v62 = v76[0];
                sub_10028A2EC((unint64_t *)&qword_1004AE6A0, &v87, (unint64_t *)v76);
                sub_10028A170(v76, &v75);
                v61 = v75;
                sub_10028A2EC((unint64_t *)&xmmword_1004AE690 + 1, &v87, (unint64_t *)v76);
                sub_10028A170(v76, &v75);
                v60 = v75;
                sub_10028A2EC((unint64_t *)&xmmword_1004AE690, &v87, (unint64_t *)v76);
                sub_10028A170(v76, &v75);
                v59 = v75;
                sub_10028A170((uint64_t *)&qword_1004AE6A8, v76);
                v58 = v76[0];
                sub_10028A170((uint64_t *)&qword_1004AE6B0, v76);
                v57 = v76[0];
                sub_10028A170(&qword_1004AE6B8, v76);
                v35 = v76[0];
                sub_10028A2EC((unint64_t *)&qword_1004AE6B8, &v88, (unint64_t *)v76);
                sub_10028A170(v76, &v75);
                v36 = v75;
                sub_10028A2EC(&qword_1004AE6B0, &v88, (unint64_t *)v76);
                sub_10028A170(v76, &v75);
                v37 = v75;
                sub_10028A2EC(&qword_1004AE6A8, &v88, (unint64_t *)v76);
                sub_10028A170(v76, &v75);
                v38 = v75;
                sub_10028A170((uint64_t *)&xmmword_1004AE6C0, v76);
                v39 = v76[0];
                sub_10028A170((uint64_t *)&xmmword_1004AE6C0 + 1, v76);
                v40 = v76[0];
                sub_10028A170(&qword_1004AE6D0, v76);
                v41 = v76[0];
                sub_10028A2EC((unint64_t *)&qword_1004AE6D0, &v89, (unint64_t *)v76);
                sub_10028A170(v76, &v75);
                v42 = v75;
                sub_10028A2EC((unint64_t *)&xmmword_1004AE6C0 + 1, &v89, (unint64_t *)v76);
                sub_10028A170(v76, &v75);
                v43 = v75;
                sub_10028A2EC((unint64_t *)&xmmword_1004AE6C0, &v89, (unint64_t *)v76);
                sub_10028A170(v76, &v75);
                v77[277] = v61;
                v77[276] = v60;
                v77[275] = v59;
                v77[274] = v36;
                v77[273] = v37;
                v77[272] = v38;
                v77[271] = v42;
                v77[270] = v43;
                v77[269] = v75;
                v77[268] = v62;
                v77[267] = v64;
                v77[266] = v66;
                v77[265] = v35;
                v77[264] = v57;
                v77[263] = v58;
                v77[262] = v41;
                v77[261] = v40;
                v77[260] = v39;
                v44 = atomic_load((unsigned __int8 *)&qword_1004AE5F8);
                if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE5F8))
                {
                  sub_100289608(&dword_1004AE540, 32);
                  __cxa_guard_release(&qword_1004AE5F8);
                }
                v45 = atomic_load((unsigned __int8 *)&qword_1004AE600);
                if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE600))
                {
                  sub_100289608(&dword_1004AE544, 116);
                  __cxa_guard_release(&qword_1004AE600);
                }
                v46 = atomic_load((unsigned __int8 *)&qword_1004AE608);
                if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE608))
                {
                  sub_100289608(&dword_1004AE548, 16);
                  __cxa_guard_release(&qword_1004AE608);
                }
                v47 = atomic_load((unsigned __int8 *)&qword_1004AE610);
                if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE610))
                {
                  sub_100289608(&dword_1004AE54C, 500);
                  __cxa_guard_release(&qword_1004AE610);
                }
                v48 = atomic_load((unsigned __int8 *)&qword_1004AE618);
                if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE618))
                {
                  sub_100289608(&dword_1004AE550, 200);
                  __cxa_guard_release(&qword_1004AE618);
                }
                v49 = atomic_load((unsigned __int8 *)&qword_1004AE620);
                if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE620))
                {
                  sub_100289608(&dword_1004AE554, 100);
                  __cxa_guard_release(&qword_1004AE620);
                }
                v50 = atomic_load((unsigned __int8 *)&qword_1004AE628);
                if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE628))
                {
                  sub_100289608(&dword_1004AE558, 128);
                  __cxa_guard_release(&qword_1004AE628);
                }
                v51 = atomic_load((unsigned __int8 *)&qword_1004AE630);
                if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE630))
                {
                  sub_100289608(&dword_1004AE55C, 256);
                  __cxa_guard_release(&qword_1004AE630);
                }
                v52 = atomic_load((unsigned __int8 *)&qword_1004AE638);
                if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE638))
                {
                  sub_100289608(&dword_1004AE560, 0x4000);
                  __cxa_guard_release(&qword_1004AE638);
                }
                v53 = atomic_load((unsigned __int8 *)&qword_1004AE640);
                if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE640))
                {
                  sub_100289608((unsigned int *)v76, 24389);
                  sub_100289608((unsigned int *)&v75, 27);
                  sub_1002899DC((int *)v76, (unsigned int *)&v75, &dword_1004AE564);
                  __cxa_guard_release(&qword_1004AE640);
                }
                v54 = atomic_load((unsigned __int8 *)&qword_1004AE648);
                if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE648))
                {
                  sub_100289608((unsigned int *)v76, 9);
                  sub_100289608((unsigned int *)&v75, 4);
                  sub_1002899DC((int *)v76, (unsigned int *)&v75, &dword_1004AE568);
                  __cxa_guard_release(&qword_1004AE648);
                }
                v55 = atomic_load((unsigned __int8 *)&qword_1004AE650);
                if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_1004AE650))
                {
                  sub_100289608(&dword_1004AE56C, 15);
                  __cxa_guard_release(&qword_1004AE650);
                }
                v56 = atomic_load((unsigned __int8 *)&qword_1004AE658);
                if ((v56 & 1) == 0)
                {
                  if (__cxa_guard_acquire(&qword_1004AE658))
                  {
                    sub_100289608((unsigned int *)&unk_1004AE570, 3);
                    __cxa_guard_release(&qword_1004AE658);
                  }
                }
                v76[0] = (uint64_t)v77;
                v76[1] = 107811;
                operator new[]();
              }
            }
          }
        }
      }
    }
  }
}

void sub_1002C1618(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE658);
  _Unwind_Resume(a1);
}

void sub_1002C1630(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE650);
  _Unwind_Resume(a1);
}

void sub_1002C1648(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE648);
  _Unwind_Resume(a1);
}

void sub_1002C1660(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE640);
  _Unwind_Resume(a1);
}

void sub_1002C1678(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE638);
  _Unwind_Resume(a1);
}

void sub_1002C1690(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE630);
  _Unwind_Resume(a1);
}

void sub_1002C16A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE628);
  _Unwind_Resume(a1);
}

void sub_1002C16C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE620);
  _Unwind_Resume(a1);
}

void sub_1002C16D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE618);
  _Unwind_Resume(a1);
}

void sub_1002C16F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE610);
  _Unwind_Resume(a1);
}

void sub_1002C1708(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE608);
  _Unwind_Resume(a1);
}

void sub_1002C1720(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE600);
  _Unwind_Resume(a1);
}

void sub_1002C1738(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE5F8);
  _Unwind_Resume(a1);
}

void sub_1002C1750(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE5D0);
  _Unwind_Resume(a1);
}

void sub_1002C1768(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE5B8);
  _Unwind_Resume(a1);
}

void sub_1002C1780(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE648);
  _Unwind_Resume(a1);
}

void sub_1002C1798(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE640);
  _Unwind_Resume(a1);
}

void sub_1002C17B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004AE5C0);
  _Unwind_Resume(a1);
}

void sub_1002C17C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (a43 != a11 && a43 != 0)
    operator delete[]();
  if (STACK[0x530] != a12 && STACK[0x530] != 0)
    operator delete[]();
  _Unwind_Resume(a1);
}

_QWORD *sub_1002C18F0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  int *v9;
  int *v10;
  int *v11;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;

  v2 = sub_1001D444C(0x4000uLL);
  sub_100289608((unsigned int *)&v22, 2);
  sub_100289608((unsigned int *)&v21, 3);
  sub_100289608(&v20, 4);
  sub_100289608((unsigned int *)&v19, 0);
  v3 = 0;
  v4 = 0;
  *v2 = 0;
  do
  {
    sub_100289790((int *)(a1 + v4 + 4), &v22, &v15);
    sub_10028976C((unsigned int *)(a1 + v4 + 8), (unsigned int *)&v15, (unsigned int *)&v16);
    sub_100289748((unsigned int *)&v16, (unsigned int *)(a1 + v4), (int *)&v17);
    sub_100289790((int *)&v17, &v21, &v18);
    v16 = 1065353216;
    v5 = &v2[v3];
    sub_10028976C(&v20, (unsigned int *)&v2[v3], (unsigned int *)&v15);
    sub_1002899DC(&v16, (unsigned int *)&v15, &v17);
    if (&v2[v3 + 2] != (_QWORD *)&v17)
      v5[4] = v17;
    sub_10028976C((unsigned int *)&v18, v5 + 1, (unsigned int *)&v15);
    sub_100289790(&v15, (int *)&v17, &v16);
    if (v5 + 5 != &v16)
      v5[5] = v16;
    v4 += 4;
    v3 += 2;
  }
  while (v4 != 4092);
  v6 = (unsigned int *)(a1 + 4092);
  v7 = 2048;
  do
  {
    v8 = (unsigned int *)&v2[v7 - 1] - 1;
    v9 = (int *)&v2[v7 - 2];
    sub_100289790(v9, &v19, &v17);
    sub_10028976C(v8, &v17, (unsigned int *)&v18);
    sub_10028976C(v6 + 1, v6, (unsigned int *)&v16);
    sub_100289790(&v18, &v22, &v13);
    sub_100289748((unsigned int *)&v19, &v13, &v14);
    sub_1002899DC(&v14, (unsigned int *)&v21, &v15);
    sub_10028976C((unsigned int *)&v16, (unsigned int *)&v15, &v17);
    sub_10028976C((unsigned int *)&v19, (unsigned int *)&v18, (unsigned int *)&v15);
    sub_1002899DC(&v15, (unsigned int *)&v21, &v16);
    if (v6 != (unsigned int *)v9)
      *v9 = *v6;
    if (v8 != &v17)
      *v8 = v17;
    v10 = (int *)&v2[v7 - 1];
    if (v10 != &v18)
      *v10 = v18;
    v11 = (int *)&v2[v7 - 1] + 1;
    if (v11 != &v16)
      *v11 = v16;
    v19 = v18;
    --v6;
    v7 -= 2;
  }
  while (v7 * 8);
  return v2;
}

uint64_t *sub_1002C1B74(_DWORD *a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  sub_100289678(a2, &v9);
  if (sub_10028A8DC(&v9, &qword_1004AE578))
  {
    sub_10028A5A4(&v9, (uint64_t *)&qword_1004AE588, (unint64_t *)&v8);
  }
  else
  {
    sub_10028A294(&v9, &qword_1004AE598, &v6);
    v4 = 0x3FF0000000000000;
    sub_10028A294(&v4, &qword_1004AE598, (unint64_t *)&v5);
    sub_10028A5A4(&v6, &v5, &v7);
    sub_10028BBF8(&v7, &qword_1004AE590, (unint64_t *)&v8);
  }
  return sub_10028A170(&v8, a1);
}

uint64_t *sub_1002C1C38(_DWORD *a1, unsigned int *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  sub_100289678(a2, &v11);
  if (sub_10028A8DC(&v11, &qword_1004AE580))
  {
    sub_10028A2EC(&v11, &qword_1004AE588, (unint64_t *)&v10);
  }
  else
  {
    v6 = 0x3FF0000000000000;
    sub_10028A5A4(&v6, (uint64_t *)&qword_1004AE590, &v7);
    sub_10028BBF8(&v11, &v7, &v8);
    v4 = 0x3FF0000000000000;
    sub_10028A294(&v4, &qword_1004AE598, &v5);
    sub_10028A2EC(&v8, &v5, &v9);
    sub_10028A2C0(&v9, &qword_1004AE598, (unint64_t *)&v10);
  }
  return sub_10028A170(&v10, a1);
}

uint64_t sub_1002C1D10(uint64_t a1, int a2, int a3, uint64_t a4, float32x2_t *a5, char a6)
{
  unsigned int v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  float v16;
  uint64_t v18[2];
  double v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  float v23;
  unint64_t v24[2];
  unint64_t v25;
  float64x2_t v26;
  double v27;

  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 44) = a3;
  v21 = 3;
  sub_1002BF508();
  if (a4 | (unint64_t)a5)
  {
    *(_BYTE *)(a1 + 41) = 0;
    if (a5)
    {
      v26 = vcvtq_f64_f32(*a5);
      v27 = a5[1].f32[0];
      goto LABEL_6;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
  }
  v26 = (float64x2_t)xmmword_1004AE670;
  v27 = *(double *)&qword_1004AE680;
LABEL_6:
  v18[0] = 0x3FF0000000000000;
  sub_10028A5A4((unint64_t *)v18, (uint64_t *)&v26, v24);
  v24[1] = 0x3FF0000000000000;
  v22 = 0x3FF0000000000000;
  sub_10028A5A4(&v22, (uint64_t *)&v27, &v25);
  if (v21 >= 1)
  {
    v9 = 0;
    v10 = 0;
    v11 = v24;
    do
    {
      v23 = 0.0;
      v22 = 0;
      v12 = v9;
      if (a4)
      {
        v19 = *(float *)(a4 + 4 * v9);
        sub_10028A2EC(v11, (unint64_t *)&v19, (unint64_t *)v18);
        sub_10028A170(v18, &v20);
        LODWORD(v22) = v20;
        v19 = *(float *)(a4 + 4 * v12 + 4);
        sub_10028A2EC(v11, (unint64_t *)&v19, (unint64_t *)v18);
        sub_10028A170(v18, &v20);
        HIDWORD(v22) = v20;
        v19 = *(float *)(a4 + 4 * v12 + 8);
        sub_10028A2EC(v11, (unint64_t *)&v19, (unint64_t *)v18);
        sub_10028A170(v18, &v20);
        v13 = v20;
      }
      else
      {
        sub_10028A2EC(v11, (unint64_t *)&byte_1004AE500[8 * v9 + 400], (unint64_t *)v18);
        sub_10028A170(v18, &v19);
        LODWORD(v22) = LODWORD(v19);
        sub_10028A2EC(v11, (unint64_t *)&byte_1004AE500[8 * v12 + 408], (unint64_t *)v18);
        sub_10028A170(v18, &v19);
        HIDWORD(v22) = LODWORD(v19);
        sub_10028A2EC(v11, (unint64_t *)&byte_1004AE500[8 * v12 + 416], (unint64_t *)v18);
        sub_10028A170(v18, &v19);
        v13 = LODWORD(v19);
      }
      v23 = *(float *)&v13;
      v14 = *(_DWORD *)(a1 + 44);
      v15 = v22;
      *(_DWORD *)(a1 + 4 + 4 * (int)(v12 + (v14 ^ 2))) = v22;
      *(_DWORD *)(a1 + 4 + 4 * (v12 + 1)) = HIDWORD(v15);
      v16 = v23;
      *(float *)(a1 + 4 + 4 * ((int)v12 + v14)) = v23;
      if (*(float *)&v15 < 0.0
        || *((float *)&v15 + 1) < 0.0
        || v16 < 0.0
        || (sub_100289748((unsigned int *)&v22, (unsigned int *)&v22 + 1, (int *)&v19),
            sub_100289748((unsigned int *)&v19, (unsigned int *)&v23, (int *)v18),
            sub_100289608(&v20, 1024),
            !sub_100289CB0((unsigned int *)v18, &v20)))
      {
        v18[0] = 0;
        v18[1] = 0;
        qmemcpy((void *)sub_10029430C(v18, 93), "c[0] >= 0 && c[1] >= 0 && c[2] >= 0 && c[0] + c[1] + c[2] < softfloat((int)LAB_CBRT_TAB_SIZE)", 93);
        sub_100294B74(-215, v18, "RGB2Lab_f", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 6454);
      }
      ++v10;
      v9 = v12 + 3;
      ++v11;
    }
    while (v10 < v21);
  }
  return a1;
}

void sub_1002C207C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

float32x4_t *sub_1002C20AC(float32x4_t *a1, __int32 a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  char v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unsigned int v20;
  int v21;
  int v22;

  a1->i32[0] = a2;
  sub_1002C2218((uint64_t)a1->i64 + 4, 3, a3, a4, a5, a6);
  a1[3].i32[2] = a2;
  a1[3].i32[3] = a3;
  sub_1002BF508();
  if (a4 | a5)
    v12 = 0;
  else
    v12 = a6;
  a1[10].i8[8] = v12;
  v21 = 1065353216;
  sub_1002899DC(&v21, (unsigned int *)&dword_1004AE52C, &v22);
  v13 = vld1q_dup_f32((const float *)&v22);
  a1[5] = v13;
  sub_100289608((unsigned int *)&v21, 100);
  sub_1002899DC(&dword_1004AE52C, (unsigned int *)&v21, &v22);
  v14 = vld1q_dup_f32((const float *)&v22);
  a1[4] = v14;
  sub_1002899DC(&dword_1004AE52C, &dword_1004AE510, &v22);
  v15 = vld1q_dup_f32((const float *)&v22);
  a1[6] = v15;
  v20 = dword_1004AE508 ^ 0x80000000;
  sub_100289790((int *)&v20, &dword_1004AE52C, &v21);
  sub_1002899DC(&v21, &dword_1004AE510, &v22);
  v16 = vld1q_dup_f32((const float *)&v22);
  a1[7] = v16;
  sub_1002899DC(&dword_1004AE52C, &dword_1004AE51C, &v22);
  v17 = vld1q_dup_f32((const float *)&v22);
  a1[8] = v17;
  v20 = dword_1004AE514 ^ 0x80000000;
  sub_100289790((int *)&v20, &dword_1004AE52C, &v21);
  sub_1002899DC(&v21, &dword_1004AE51C, &v22);
  v18 = vld1q_dup_f32((const float *)&v22);
  a1[9] = v18;
  a1[10].i64[0] = -1;
  return a1;
}

uint64_t sub_1002C2218(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  int *v14;
  int v15;
  int *v16;
  char *v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int i;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 48) = a6;
  sub_1002BF508();
  v29 = 0;
  v30 = 0;
  v31 = 0;
  i = 0;
  if (a5)
  {
    do
    {
      *((double *)&v29 + i) = *(float *)(a5 + 4 * i);
      ++i;
    }
    while (i < 3);
  }
  else
  {
    do
    {
      v18 = &byte_1004AE500[8 * i + 368];
      v19 = &v29 + i;
      if (v18 != (char *)v19)
        *v19 = *(_QWORD *)v18;
      ++i;
    }
    while (i < 3);
  }
  for (i = 0; i < 3; ++i)
  {
    if (a4)
    {
      *(_DWORD *)(a1 + 4 + 12 * i) = *(_DWORD *)(a4 + 12 * i);
      *(_DWORD *)(a1 + 4 + 12 * i + 4) = *(_DWORD *)(a4 + 12 * i + 4);
      *(_DWORD *)(a1 + 12 * i + 12) = *(_DWORD *)(a4 + 12 * i + 8);
      if (a3)
        goto LABEL_6;
    }
    else
    {
      v10 = *((double *)&xmmword_1004AE690 + 3 * i);
      *(float *)(a1 + 4 + 12 * i) = v10;
      v11 = *((double *)&xmmword_1004AE690 + 3 * i + 1);
      *(float *)(a1 + 4 + 12 * i + 4) = v11;
      v12 = *((double *)&xmmword_1004AE690 + 3 * i + 2);
      *(float *)(a1 + 12 * i + 12) = v12;
      if (a3)
      {
LABEL_6:
        if (*(float *)(a1 + 12 * i + 4) < 0.0)
          goto LABEL_13;
        goto LABEL_10;
      }
    }
    v13 = 12 * i;
    v14 = (int *)(a1 + 4 + v13);
    v15 = *v14;
    *v14 = v14[2];
    v14[2] = v15;
    if (*(float *)(a1 + 12 * i + 4) < 0.0)
      goto LABEL_13;
LABEL_10:
    if (*(float *)(a1 + 12 * i + 8) >= 0.0 && *(float *)(a1 + 12 * i + 12) >= 0.0)
    {
      LODWORD(v23) = *(_DWORD *)(a1 + 4 + 12 * i);
      LODWORD(v22) = *(_DWORD *)(a1 + 4 + 12 * i + 4);
      sub_100289748((unsigned int *)&v23, (unsigned int *)&v22, (int *)&v24);
      LODWORD(v21) = *(_DWORD *)(a1 + 12 * i + 12);
      sub_100289748((unsigned int *)&v24, (unsigned int *)&v21, (int *)&v26);
      LODWORD(v20) = 1069547520;
      if (sub_100289CB0((unsigned int *)&v26, (unsigned int *)&v20))
        continue;
    }
LABEL_13:
    v26 = 0;
    v27 = 0;
    qmemcpy((void *)sub_10029430C(&v26, 158), "coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && softfloat(coeffs[i*3]) + softfloat(coeffs[i*3+1]) + softfloat(coeffs[i*3+2]) < softfloat(1.5f)", 158);
    sub_100294B74(-215, &v26, "RGB2Luvfloat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 7532);
  }
  sub_100289D28(&v22, 15);
  sub_10028A2EC((unint64_t *)&v30, &v22, &v23);
  sub_10028A294((unint64_t *)&v29, &v23, &v24);
  sub_100289D28(&v20, 3);
  sub_10028A2EC(&v31, &v20, &v21);
  sub_10028A294(&v24, &v21, (unint64_t *)&v26);
  sub_10028A170(&v26, &v25);
  LODWORD(v24) = 1065353216;
  LODWORD(v22) = 872415232;
  if (sub_100289C38((unsigned int *)&v25, (unsigned int *)&v22))
    v16 = &v25;
  else
    v16 = (int *)&v22;
  LODWORD(v23) = *v16;
  sub_1002899DC((int *)&v24, (unsigned int *)&v23, &v26);
  v25 = v26;
  sub_100289608((unsigned int *)&v23, 52);
  sub_100289790(&v25, (int *)&v23, &v24);
  sub_10028A170(&v29, &v22);
  sub_100289790((int *)&v24, (int *)&v22, &v26);
  *(_DWORD *)(a1 + 40) = v26;
  sub_100289608((unsigned int *)&v23, 117);
  sub_100289790(&v25, (int *)&v23, &v24);
  sub_10028A170(&v30, &v22);
  sub_100289790((int *)&v24, (int *)&v22, &v26);
  *(_DWORD *)(a1 + 44) = v26;
  v26 = 0x3FF0000000000000;
  if (!sub_10028A88C(&v30, &v26))
  {
    v26 = 0;
    v27 = 0;
    qmemcpy((void *)sub_10029430C(&v26, 31), "whitePt[1] == softdouble::one()", 31);
    sub_100294B74(-215, &v26, "RGB2Luvfloat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 7546);
  }
  return a1;
}

void sub_1002C2724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C276C(uint64_t a1, int a2, int a3, float *a4, float32x2_t *a5, char a6)
{
  unint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  unsigned int v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  float64x2_t v30;
  double v31;

  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 52) = a3;
  sub_1002BF508();
  if (a5)
  {
    v30 = vcvtq_f64_f32(*a5);
    v31 = a5[1].f32[0];
    v27 = 0.0;
    v28 = 0;
    v29 = 0;
    if (a4)
    {
LABEL_3:
      *(double *)&v9 = a4[3];
      v27 = *a4;
      v28 = v9;
      *(double *)&v10 = a4[6];
      goto LABEL_6;
    }
  }
  else
  {
    v30 = (float64x2_t)xmmword_1004AE670;
    v31 = *(double *)&qword_1004AE680;
    v27 = 0.0;
    v28 = 0;
    v29 = 0;
    if (a4)
      goto LABEL_3;
  }
  v27 = *(double *)&xmmword_1004AE6E0;
  v28 = qword_1004AE6F8;
  v10 = qword_1004AE710;
LABEL_6:
  v29 = v10;
  sub_10028A2EC((unint64_t *)&v27, (unint64_t *)&v30, (unint64_t *)&v26);
  v11 = v26;
  *(float *)(a1 + 4 + 12 * (*(_DWORD *)(a1 + 52) ^ 2)) = v11;
  sub_10028A2EC((unint64_t *)&v28, (unint64_t *)&v30, (unint64_t *)&v26);
  v12 = v26;
  *(float *)(a1 + 16) = v12;
  sub_10028A2EC((unint64_t *)&v29, (unint64_t *)&v30, (unint64_t *)&v26);
  v13 = v26;
  *(float *)(a1 + 4 + 12 * *(int *)(a1 + 52)) = v13;
  v27 = 0.0;
  v28 = 0;
  v29 = 0;
  if (a4)
  {
    *(double *)&v14 = a4[4];
    v27 = a4[1];
    v28 = v14;
    *(double *)&v15 = a4[7];
  }
  else
  {
    v27 = *((double *)&xmmword_1004AE6E0 + 1);
    v28 = xmmword_1004AE700;
    v15 = qword_1004AE718;
  }
  v29 = v15;
  sub_10028A2EC((unint64_t *)&v27, (unint64_t *)&v30.f64[1], (unint64_t *)&v26);
  v16 = v26;
  *(float *)(a1 + 4 + 12 * (*(_DWORD *)(a1 + 52) ^ 2) + 4) = v16;
  sub_10028A2EC((unint64_t *)&v28, (unint64_t *)&v30.f64[1], (unint64_t *)&v26);
  v17 = v26;
  *(float *)(a1 + 20) = v17;
  sub_10028A2EC((unint64_t *)&v29, (unint64_t *)&v30.f64[1], (unint64_t *)&v26);
  v18 = v26;
  *(float *)(a1 + 4 + 12 * *(int *)(a1 + 52) + 4) = v18;
  v27 = 0.0;
  v28 = 0;
  v29 = 0;
  if (a4)
  {
    *(double *)&v19 = a4[5];
    v27 = a4[2];
    v28 = v19;
    *(double *)&v20 = a4[8];
  }
  else
  {
    v27 = *(double *)&qword_1004AE6F0;
    v28 = *((_QWORD *)&xmmword_1004AE700 + 1);
    v20 = qword_1004AE720;
  }
  v29 = v20;
  sub_10028A2EC((unint64_t *)&v27, (unint64_t *)&v31, (unint64_t *)&v26);
  v21 = v26;
  *(float *)(a1 + 4 + 12 * (*(_DWORD *)(a1 + 52) ^ 2) + 8) = v21;
  sub_10028A2EC((unint64_t *)&v28, (unint64_t *)&v31, (unint64_t *)&v26);
  v22 = v26;
  *(float *)(a1 + 24) = v22;
  sub_10028A2EC((unint64_t *)&v29, (unint64_t *)&v31, (unint64_t *)&v26);
  v23 = v26;
  *(float *)(a1 + 4 + 12 * *(int *)(a1 + 52) + 8) = v23;
  sub_100289608((unsigned int *)&v27, 8);
  *(_DWORD *)(a1 + 44) = LODWORD(v27);
  sub_100289608((unsigned int *)&v26, 6);
  sub_100289608(&v25, 29);
  sub_1002899DC((int *)&v26, &v25, &v27);
  *(_DWORD *)(a1 + 48) = LODWORD(v27);
  return a1;
}

uint64_t sub_1002C2AC4(uint64_t a1, int a2, int a3, float *a4, float32x2_t *a5, int a6)
{
  unsigned __int8 v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  float64x2_t v25;
  double v26;

  *(_DWORD *)a1 = a2;
  if (a5)
  {
    v25 = vcvtq_f64_f32(*a5);
    v26 = a5[1].f32[0];
    v10 = atomic_load((unsigned __int8 *)&qword_10048ACB0);
    if ((v10 & 1) != 0)
      goto LABEL_5;
  }
  else
  {
    v25 = (float64x2_t)xmmword_1004AE670;
    v26 = *(double *)&qword_1004AE680;
    v11 = atomic_load((unsigned __int8 *)&qword_10048ACB0);
    if ((v11 & 1) != 0)
      goto LABEL_5;
  }
  if (__cxa_guard_acquire(&qword_10048ACB0))
  {
    sub_100289D28(&qword_10048ACA8, 4096);
    __cxa_guard_release(&qword_10048ACB0);
  }
LABEL_5:
  v22 = 0.0;
  v23 = 0;
  v24 = 0;
  if (a4)
  {
    *(double *)&v12 = a4[3];
    v22 = *a4;
    v23 = v12;
    *(double *)&v13 = a4[6];
  }
  else
  {
    v22 = *(double *)&xmmword_1004AE6E0;
    v23 = qword_1004AE6F8;
    v13 = qword_1004AE710;
  }
  v24 = v13;
  sub_10028A2EC(&qword_10048ACA8, (unint64_t *)&v22, &v20);
  sub_10028A2EC(&v20, (unint64_t *)&v25, (unint64_t *)&v21);
  *(_DWORD *)(a1 + 12 * a3 + 4) = sub_100289F48(&v21);
  sub_10028A2EC(&qword_10048ACA8, (unint64_t *)&v23, &v20);
  sub_10028A2EC(&v20, (unint64_t *)&v25, (unint64_t *)&v21);
  *(_DWORD *)(a1 + 16) = sub_100289F48(&v21);
  sub_10028A2EC(&qword_10048ACA8, (unint64_t *)&v24, &v20);
  sub_10028A2EC(&v20, (unint64_t *)&v25, (unint64_t *)&v21);
  *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 4) = sub_100289F48(&v21);
  v22 = 0.0;
  v23 = 0;
  v24 = 0;
  if (a4)
  {
    *(double *)&v14 = a4[4];
    v22 = a4[1];
    v23 = v14;
    *(double *)&v15 = a4[7];
  }
  else
  {
    v22 = *((double *)&xmmword_1004AE6E0 + 1);
    v23 = xmmword_1004AE700;
    v15 = qword_1004AE718;
  }
  v24 = v15;
  sub_10028A2EC(&qword_10048ACA8, (unint64_t *)&v22, &v20);
  sub_10028A2EC(&v20, (unint64_t *)&v25.f64[1], (unint64_t *)&v21);
  *(_DWORD *)(a1 + 12 * a3 + 8) = sub_100289F48(&v21);
  sub_10028A2EC(&qword_10048ACA8, (unint64_t *)&v23, &v20);
  sub_10028A2EC(&v20, (unint64_t *)&v25.f64[1], (unint64_t *)&v21);
  *(_DWORD *)(a1 + 20) = sub_100289F48(&v21);
  sub_10028A2EC(&qword_10048ACA8, (unint64_t *)&v24, &v20);
  sub_10028A2EC(&v20, (unint64_t *)&v25.f64[1], (unint64_t *)&v21);
  *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 8) = sub_100289F48(&v21);
  v22 = 0.0;
  v23 = 0;
  v24 = 0;
  if (a4)
  {
    *(double *)&v16 = a4[5];
    v22 = a4[2];
    v23 = v16;
    *(double *)&v17 = a4[8];
  }
  else
  {
    v22 = *(double *)&qword_1004AE6F0;
    v23 = *((_QWORD *)&xmmword_1004AE700 + 1);
    v17 = qword_1004AE720;
  }
  v24 = v17;
  sub_10028A2EC(&qword_10048ACA8, (unint64_t *)&v22, &v20);
  sub_10028A2EC(&v20, (unint64_t *)&v26, (unint64_t *)&v21);
  *(_DWORD *)(a1 + 12 * a3 + 12) = sub_100289F48(&v21);
  sub_10028A2EC(&qword_10048ACA8, (unint64_t *)&v23, &v20);
  sub_10028A2EC(&v20, (unint64_t *)&v26, (unint64_t *)&v21);
  *(_DWORD *)(a1 + 24) = sub_100289F48(&v21);
  sub_10028A2EC(&qword_10048ACA8, (unint64_t *)&v24, &v20);
  sub_10028A2EC(&v20, (unint64_t *)&v26, (unint64_t *)&v21);
  *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 12) = sub_100289F48(&v21);
  v18 = word_10049AD00;
  if (a6)
    v18 = word_100498D00;
  *(_QWORD *)(a1 + 40) = v18;
  return a1;
}

void sub_1002C2EC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10048ACB0);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C2EE4(uint64_t a1, int a2, int a3, _DWORD *a4, float32x2_t *a5, char a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int *v27;
  uint64_t v29[2];
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  float64x2_t v36;
  double v37;

  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 48) = a6;
  sub_1002BF508();
  if (a5)
  {
    v36 = vcvtq_f64_f32(*a5);
    v37 = a5[1].f32[0];
    v10 = 3 * (a3 ^ 2);
    v11 = 3 * a3;
    if (a4)
    {
LABEL_3:
      v12 = a4[3];
      v13 = a4[6];
      v14 = (_DWORD *)(a1 + 4 + 4 * v10);
      *v14 = *a4;
      *(_DWORD *)(a1 + 16) = v12;
      v15 = (_DWORD *)(a1 + 4 + 4 * v11);
      *v15 = v13;
      v16 = a4[4];
      v17 = a4[7];
      v14[1] = a4[1];
      *(_DWORD *)(a1 + 20) = v16;
      v15[1] = v17;
      v18 = a4[2];
      v19 = a4[5];
      v20 = a4[8];
      goto LABEL_6;
    }
  }
  else
  {
    v36 = (float64x2_t)xmmword_1004AE670;
    v37 = *(double *)&qword_1004AE680;
    v10 = 3 * (a3 ^ 2);
    v11 = 3 * a3;
    if (a4)
      goto LABEL_3;
  }
  sub_10028A170((uint64_t *)&xmmword_1004AE6E0, v29);
  v21 = v29[0];
  sub_10028A170(&qword_1004AE6F8, v29);
  v22 = v29[0];
  sub_10028A170(&qword_1004AE710, v29);
  v23 = v29[0];
  *(_DWORD *)(a1 + 4 + 4 * v10) = v21;
  *(_DWORD *)(a1 + 16) = v22;
  *(_DWORD *)(a1 + 4 + 4 * v11) = v23;
  sub_10028A170((uint64_t *)&xmmword_1004AE6E0 + 1, v29);
  v24 = v29[0];
  sub_10028A170((uint64_t *)&xmmword_1004AE700, v29);
  v25 = v29[0];
  sub_10028A170(&qword_1004AE718, v29);
  v26 = v29[0];
  *(_DWORD *)(a1 + 4 + 4 * v10 + 4) = v24;
  *(_DWORD *)(a1 + 20) = v25;
  *(_DWORD *)(a1 + 4 + 4 * v11 + 4) = v26;
  sub_10028A170(&qword_1004AE6F0, v29);
  v18 = v29[0];
  sub_10028A170((uint64_t *)&xmmword_1004AE700 + 1, v29);
  v19 = v29[0];
  sub_10028A170(&qword_1004AE720, v29);
  v20 = v29[0];
LABEL_6:
  *(_DWORD *)(a1 + 4 + 4 * v10 + 8) = v18;
  *(_DWORD *)(a1 + 24) = v19;
  *(_DWORD *)(a1 + 4 + 4 * v11 + 8) = v20;
  sub_100289D28(&v32, 15);
  sub_10028A2EC((unint64_t *)&v36.f64[1], &v32, &v33);
  sub_10028A294((unint64_t *)&v36, &v33, &v34);
  sub_100289D28(&v30, 3);
  sub_10028A2EC((unint64_t *)&v37, &v30, &v31);
  sub_10028A294(&v34, &v31, (unint64_t *)v29);
  sub_10028A170(v29, &v35);
  LODWORD(v34) = 1065353216;
  LODWORD(v32) = 872415232;
  if (sub_100289C38((unsigned int *)&v35, (unsigned int *)&v32))
    v27 = &v35;
  else
    v27 = (int *)&v32;
  LODWORD(v33) = *v27;
  sub_1002899DC((int *)&v34, (unsigned int *)&v33, v29);
  v35 = v29[0];
  sub_100289608((unsigned int *)&v33, 52);
  sub_100289790((int *)&v33, &v35, &v34);
  sub_10028A170((uint64_t *)&v36, &v32);
  sub_100289790((int *)&v34, (int *)&v32, v29);
  *(_DWORD *)(a1 + 40) = v29[0];
  sub_100289608((unsigned int *)&v33, 117);
  sub_100289790((int *)&v33, &v35, &v34);
  sub_10028A170((uint64_t *)&v36.f64[1], &v32);
  sub_100289790((int *)&v34, (int *)&v32, v29);
  *(_DWORD *)(a1 + 44) = v29[0];
  v29[0] = 0x3FF0000000000000;
  if (!sub_10028A88C((uint64_t *)&v36.f64[1], v29))
  {
    v29[0] = 0;
    v29[1] = 0;
    qmemcpy((void *)sub_10029430C(v29, 31), "whitePt[1] == softdouble::one()", 31);
    sub_100294B74(-215, v29, "Luv2RGBfloat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 7871);
  }
  return a1;
}

void sub_1002C32A0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C32D0(uint64_t a1, int a2, int a3, float *a4, uint64_t a5, int a6)
{
  unsigned __int8 v10;
  unint64_t v11;
  _WORD *v12;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)a1 = a2;
  sub_1002BF508();
  v10 = atomic_load((unsigned __int8 *)&qword_10048ACC0);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_10048ACC0))
  {
    sub_100289D28(&qword_10048ACB8, 4096);
    __cxa_guard_release(&qword_10048ACC0);
  }
  if (a4)
  {
    *(double *)&v11 = a4[3];
    v15 = *a4;
    v16 = v11;
    *(double *)&v17 = a4[6];
    sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v15, (unint64_t *)&v14);
    *(_DWORD *)(a1 + 12 * a3 + 4) = sub_100289F48(&v14);
    sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v16, (unint64_t *)&v14);
    *(_DWORD *)(a1 + 16) = sub_100289F48(&v14);
    sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v17, (unint64_t *)&v14);
    *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 4) = sub_100289F48(&v14);
    v15 = a4[1];
    *(double *)&v16 = a4[4];
    *(double *)&v17 = a4[7];
    sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v15, (unint64_t *)&v14);
    *(_DWORD *)(a1 + 12 * a3 + 8) = sub_100289F48(&v14);
    sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v16, (unint64_t *)&v14);
    *(_DWORD *)(a1 + 20) = sub_100289F48(&v14);
    sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v17, (unint64_t *)&v14);
    *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 8) = sub_100289F48(&v14);
    v15 = a4[2];
    *(double *)&v16 = a4[5];
    *(double *)&v17 = a4[8];
  }
  else
  {
    v15 = *(double *)&xmmword_1004AE6E0;
    v16 = qword_1004AE6F8;
    v17 = qword_1004AE710;
    sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v15, (unint64_t *)&v14);
    *(_DWORD *)(a1 + 12 * a3 + 4) = sub_100289F48(&v14);
    sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v16, (unint64_t *)&v14);
    *(_DWORD *)(a1 + 16) = sub_100289F48(&v14);
    sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v17, (unint64_t *)&v14);
    *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 4) = sub_100289F48(&v14);
    v15 = *((double *)&xmmword_1004AE6E0 + 1);
    v16 = *(uint64_t *)&xmmword_1004AE700;
    v17 = qword_1004AE718;
    sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v15, (unint64_t *)&v14);
    *(_DWORD *)(a1 + 12 * a3 + 8) = sub_100289F48(&v14);
    sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v16, (unint64_t *)&v14);
    *(_DWORD *)(a1 + 20) = sub_100289F48(&v14);
    sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v17, (unint64_t *)&v14);
    *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 8) = sub_100289F48(&v14);
    v15 = *(double *)&qword_1004AE6F0;
    v16 = *((uint64_t *)&xmmword_1004AE700 + 1);
    v17 = qword_1004AE720;
  }
  sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v15, (unint64_t *)&v14);
  *(_DWORD *)(a1 + 12 * a3 + 12) = sub_100289F48(&v14);
  sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v16, (unint64_t *)&v14);
  *(_DWORD *)(a1 + 24) = sub_100289F48(&v14);
  sub_10028A2EC(&qword_10048ACB8, (unint64_t *)&v17, (unint64_t *)&v14);
  *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 12) = sub_100289F48(&v14);
  v12 = word_10049AD00;
  if (a6)
    v12 = word_100498D00;
  *(_QWORD *)(a1 + 40) = v12;
  return a1;
}

void sub_1002C36FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10048ACC0);
  _Unwind_Resume(a1);
}

void sub_1002C3718(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002C373C(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  _BYTE *v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v2 = a2[1];
  v3 = *a2;
  if ((int)v3 < v2)
  {
    v4 = *(int *)(result + 56);
    v5 = *(_DWORD *)(result + 48);
    if (v5 >= 0)
      v6 = *(_DWORD *)(result + 48);
    else
      v6 = v5 + 1;
    v7 = v6 >> 1;
    v55 = *(_DWORD *)(result + 52) / 2;
    v8 = 2 * v4;
    v9 = 2 * (int)v4;
    v60 = v4 * v5;
    if ((int)v4 * v5 > 2 * (int)v4)
      v8 = v4 * v5;
    v57 = v8 - 1;
    v10 = 2 * v3;
    v58 = *(int *)(result + 56);
    v56 = v4 + 1;
    v11 = (2 * v3) | 1;
    do
    {
      v13 = *(_QWORD *)(result + 8);
      v12 = *(_QWORD *)(result + 16);
      v14 = v13 + v12 * 2 * (int)v3;
      v15 = v13 + v12 * (int)((2 * v3) | 1);
      if (*(_BYTE *)(result + 60))
      {
        v16 = v14 + 2;
        v17 = v15 + 2;
        v19 = *(_QWORD *)(result + 32);
        v18 = *(_QWORD *)(result + 40);
        if (!*(_BYTE *)(result + 62))
          goto LABEL_13;
      }
      else
      {
        v16 = v13 + v12 * 2 * (int)v3;
        v14 += 2;
        v17 = v13 + v12 * (int)((2 * v3) | 1);
        v15 += 2;
        v19 = *(_QWORD *)(result + 32);
        v18 = *(_QWORD *)(result + 40);
        if (!*(_BYTE *)(result + 62))
        {
LABEL_13:
          if ((int)v3 >= 0)
            v22 = v3;
          else
            v22 = v3 + 1;
          v20 = v19 + v18 * ((uint64_t)v22 >> 1) + (int)(v3 - (v22 & 0xFFFFFFFE)) * (uint64_t)v7;
          v23 = v55 + v3;
          if (v55 + (int)v3 >= 0)
            v24 = v55 + v3;
          else
            v24 = v23 + 1;
          v21 = v19 + v18 * ((uint64_t)v24 >> 1) + (int)(v23 - (v24 & 0xFFFFFFFE)) * (uint64_t)v7;
          goto LABEL_20;
        }
      }
      v20 = v19 + v18 * v3;
      v21 = v20 + 1;
LABEL_20:
      v25 = v10;
      v26 = v11;
      if (*(_BYTE *)(result + 61))
        v27 = v21;
      else
        v27 = v20;
      if (*(_BYTE *)(result + 61))
        v28 = v20;
      else
        v28 = v21;
      if (v60 >= 1)
      {
        v62 = v3;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v67 = *(_QWORD *)(result + 24) + v18 * v10;
        v32 = v12 * v10;
        v66 = v13 + v56 + v32;
        v65 = v16 + v58;
        v61 = v11;
        v33 = v12 * v11;
        v63 = v13 + v56 + v33;
        v64 = v15 + v58;
        v34 = v13 + 1;
        v35 = v34 + v32;
        v36 = v34 + v33;
        do
        {
          v37 = *(unsigned __int8 *)(v14 + v31);
          v38 = v28;
          v39 = *(unsigned __int8 *)(v35 + v31);
          v40 = *(unsigned __int8 *)(v16 + v31);
          v41 = v16;
          v42 = v15;
          v43 = *(unsigned __int8 *)(v64 + v31);
          v44 = *(unsigned __int8 *)(v63 + v31);
          v45 = 528482 * *(unsigned __int8 *)(v66 + v31)
              + 269484 * *(unsigned __int8 *)(v14 + v58 + v31)
              + 102760 * *(unsigned __int8 *)(v65 + v31);
          v46 = *(unsigned __int8 *)(v17 + v58 + v31);
          v47 = 528482 * *(unsigned __int8 *)(v36 + v31)
              + 269484 * *(unsigned __int8 *)(v15 + v31)
              + 102760 * *(unsigned __int8 *)(v17 + v31);
          v48 = (_BYTE *)(v67 + v29);
          *v48 = (528482 * v39 + 269484 * v37 + 102760 * v40 + 17301504) >> 20;
          v48[1] = (v45 + 17301504) >> 20;
          v48[*(_QWORD *)(result + 40)] = (v47 + 17301504) >> 20;
          v48[*(_QWORD *)(result + 40) + 1] = (528482 * v44 + 269484 * v43 + 102760 * v46 + 17301504) >> 20;
          v49 = 268130321 * v39 + 268280268 * v37;
          v15 = v42;
          v50 = 268049581 * v39;
          v28 = v38;
          v51 = v49 + 460324 * v40 + 134742016;
          v52 = v50 + 460324 * v37 + 268361008 * v40;
          v53 = v51 >> 20;
          if (*(_BYTE *)(result + 62))
            v54 = v29;
          else
            v54 = v30;
          *(_BYTE *)(v27 + v54) = v53;
          v16 = v41;
          *(_BYTE *)(v38 + v54) = (v52 + 134742016) >> 20;
          v31 += v9;
          ++v30;
          v29 += 2;
        }
        while (v57 / v9 + 1 != v30);
        v2 = a2[1];
        v25 = v10;
        v3 = v62;
        v26 = v61;
      }
      ++v3;
      v10 = v25 + 2;
      v11 = v26 + 2;
    }
    while (v3 < v2);
  }
  return result;
}

void sub_1002C3AE4(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C3B08(uint64_t a1, int *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450640);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (char *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4;
    do
    {
      sub_1002C3BB8(*(_QWORD *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

uint64_t sub_1002C3BB8(uint64_t result, uint64_t a2, char *a3, int a4)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  char *v16;
  char *v17;
  char v18;
  char v19;
  const char *v20;
  const char *v21;
  char *v22;
  char v23;
  char v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  char v30;
  const char *v31;
  char *v32;
  const char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  int8x16x4_t v41;
  int8x8x3_t v42;
  int8x16x3_t v43;
  int8x8x4_t v44;
  int8x8x4_t v45;
  int8x8x4_t v46;
  int8x16x4_t v47;
  int8x16x4_t v48;
  int8x16x4_t v49;

  v4 = *(_DWORD *)result;
  v5 = *(int *)(result + 8);
  if (*(_DWORD *)(result + 4) == 3)
  {
    v6 = 3 * a4;
    if (v4 == 3)
    {
      if (a4 >= 16)
      {
        v7 = 0;
        do
        {
          v14 = (const char *)(a2 + v7);
          v43 = vld3q_s8(v14);
          *(int8x16x3_t *)v41.val[0].i8 = v43;
          v43.val[0] = v41.val[v5];
          v43.val[2] = v41.val[(int)(v5 ^ 2)];
          v15 = &a3[v7];
          vst3q_s8(v15, v43);
          v7 += 48;
        }
        while (v7 <= v6 - 48);
        a2 += v7;
        v8 = v6 - 24;
        if ((int)v7 > v6 - 24)
        {
LABEL_18:
          if ((int)v7 < v6)
          {
            v17 = &a3[v7 + 2];
            do
            {
              v18 = *(_BYTE *)(a2 + 1);
              v19 = *(_BYTE *)(a2 + (v5 ^ 2));
              *(v17 - 2) = *(_BYTE *)(a2 + v5);
              *(v17 - 1) = v18;
              *v17 = v19;
              v17 += 3;
              a2 += 3;
              LODWORD(v7) = v7 + 3;
            }
            while (v6 > (int)v7);
          }
          return result;
        }
      }
      else
      {
        LODWORD(v7) = 0;
        v8 = v6 - 24;
        if (v6 - 24 < 0)
          goto LABEL_18;
      }
      v7 = v7;
      do
      {
        v42 = vld3_s8((const char *)a2);
        a2 += 24;
        *(int8x8x3_t *)v41.val[0].i8 = v42;
        v42.val[0] = (int8x8_t)v41.val[0].i64[v5];
        v42.val[2] = (int8x8_t)v41.val[0].i64[(int)(v5 ^ 2)];
        v16 = &a3[v7];
        vst3_s8(v16, v42);
        v7 += 24;
      }
      while (v7 <= v8);
      goto LABEL_18;
    }
    if (a4 >= 16)
    {
      v11 = 0;
      do
      {
        v48 = vld4q_s8((const char *)a2);
        a2 += 64;
        v41 = v48;
        v48.val[0] = v41.val[v5];
        v48.val[2] = v41.val[(int)(v5 ^ 2)];
        v26 = &a3[v11];
        vst3q_s8(v26, *(int8x16x3_t *)v48.val[0].i8);
        v11 += 48;
      }
      while (v11 <= v6 - 48);
    }
    else
    {
      LODWORD(v11) = 0;
    }
    if ((int)v11 <= v6 - 24)
    {
      v11 = v11;
      do
      {
        v45 = vld4_s8((const char *)a2);
        a2 += 32;
        *(int8x8x4_t *)v41.val[0].i8 = v45;
        v45.val[0] = (int8x8_t)v41.val[0].i64[v5];
        v45.val[2] = (int8x8_t)v41.val[0].i64[(int)(v5 ^ 2)];
        v27 = &a3[v11];
        vst3_s8(v27, *(int8x8x3_t *)v45.val[0].i8);
        v11 += 24;
      }
      while (v11 <= v6 - 24);
    }
    if ((int)v11 < v6)
    {
      v28 = &a3[v11 + 2];
      do
      {
        v29 = *(_BYTE *)(a2 + 1);
        v30 = *(_BYTE *)(a2 + (v5 ^ 2));
        *(v28 - 2) = *(_BYTE *)(a2 + v5);
        *(v28 - 1) = v29;
        *v28 = v30;
        v28 += 3;
        a2 += 4;
        LODWORD(v11) = v11 + 3;
      }
      while (v6 > (int)v11);
    }
  }
  else if (v4 == 3)
  {
    v9 = 3 * a4;
    if (a4 >= 16)
    {
      v10 = 0;
      do
      {
        v20 = (const char *)(a2 + v10);
        *(int8x16x3_t *)v47.val[0].i8 = vld3q_s8(v20);
        v41.val[v5] = v47.val[0];
        v41.val[1] = v47.val[1];
        v41.val[(int)(v5 ^ 2)] = v47.val[2];
        v47.val[3] = *(int8x16_t *)(result + 16);
        v47.val[0] = v41.val[0];
        v47.val[1] = v41.val[1];
        v47.val[2] = v41.val[2];
        vst4q_s8(a3, v47);
        a3 += 64;
        v10 += 48;
      }
      while (v10 <= v9 - 48);
    }
    else
    {
      LODWORD(v10) = 0;
    }
    if ((int)v10 <= v9 - 24)
    {
      v10 = v10;
      do
      {
        v21 = (const char *)(a2 + v10);
        *(int8x8x3_t *)v44.val[0].i8 = vld3_s8(v21);
        v41.val[0].i64[v5] = (uint64_t)v44.val[0];
        v41.val[0].i64[1] = (uint64_t)v44.val[1];
        v41.val[0].i64[(int)(v5 ^ 2)] = (uint64_t)v44.val[2];
        v44.val[3] = *(int8x8_t *)(result + 32);
        *(int8x16_t *)v44.val[0].i8 = v41.val[0];
        v44.val[2] = (int8x8_t)v41.val[1].i64[0];
        vst4_s8(a3, v44);
        a3 += 32;
        v10 += 24;
      }
      while (v10 <= v9 - 24);
    }
    if ((int)v10 < v9)
    {
      v22 = (char *)(a2 + v10 + 2);
      do
      {
        v23 = *(v22 - 2);
        v24 = *(v22 - 1);
        v25 = *v22;
        v22 += 3;
        a3[v5] = v23;
        a3[1] = v24;
        a3[v5 ^ 2] = v25;
        a3[3] = -1;
        a3 += 4;
        LODWORD(v10) = v10 + 3;
      }
      while (v9 > (int)v10);
    }
  }
  else
  {
    v12 = 4 * a4;
    if (a4 >= 16)
    {
      v13 = 0;
      do
      {
        v31 = (const char *)(a2 + v13);
        v49 = vld4q_s8(v31);
        v41 = v49;
        v49.val[0] = v41.val[v5];
        v49.val[2] = v41.val[v5 ^ 2];
        v32 = &a3[v13];
        vst4q_s8(v32, v49);
        v13 += 64;
      }
      while (v13 <= v12 - 64);
    }
    else
    {
      LODWORD(v13) = 0;
    }
    if ((int)v13 <= v12 - 32)
    {
      v13 = v13;
      do
      {
        v33 = (const char *)(a2 + v13);
        v46 = vld4_s8(v33);
        *(int8x8x4_t *)v41.val[0].i8 = v46;
        v46.val[0] = (int8x8_t)v41.val[0].i64[v5];
        v46.val[2] = (int8x8_t)v41.val[0].i64[v5 ^ 2];
        v34 = &a3[v13];
        vst4_s8(v34, v46);
        v13 += 32;
      }
      while (v13 <= v12 - 32);
    }
    if ((int)v13 < v12)
    {
      v13 = v13;
      v35 = &a3[v5 ^ 2];
      v36 = &a3[v5];
      do
      {
        v37 = v13 & 0xFFFFFFFE | 1;
        v38 = *(_BYTE *)(a2 + v37);
        v39 = v13 & 0xFFFFFFFC | 3;
        result = *(unsigned __int8 *)(a2 + v39);
        v40 = *(_BYTE *)(a2 + (v13 & 0xFFFFFFFD) + 2);
        v36[v13] = *(_BYTE *)(a2 + v13);
        a3[v37] = v38;
        v35[v13] = v40;
        a3[v39] = result;
        v13 += 4;
      }
      while (v13 < v12);
    }
  }
  return result;
}

void sub_1002C3FA4(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C3FC8(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_1004506A0);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4;
    v6 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4;
    do
    {
      sub_1002C4078(*(int **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

int *sub_1002C4078(int *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  __int16 v9;
  __int16 v10;
  uint64_t v11;
  __int16 *v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  __int16 *v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;

  v4 = *result;
  v5 = result[2];
  if (result[1] == 3)
  {
    if (a4 >= 1)
    {
      v6 = 0;
      v7 = 2 * v4;
      v8 = (_WORD *)(a3 + 2);
      do
      {
        v9 = *(_WORD *)(a2 + 2);
        v10 = *(_WORD *)(a2 + 2 * (int)(v5 ^ 2));
        *(v8 - 1) = *(_WORD *)(a2 + 2 * v5);
        *v8 = v9;
        v8[1] = v10;
        v6 += 3;
        a2 += v7;
        v8 += 3;
      }
      while (v6 < 3 * a4);
    }
  }
  else if ((_DWORD)v4 == 3)
  {
    if (a4 >= 1)
    {
      v11 = 0;
      v12 = (__int16 *)(a2 + 2);
      do
      {
        v13 = *v12;
        v14 = v12[1];
        *(_WORD *)(a3 + 2 * v5) = *(v12 - 1);
        *(_WORD *)(a3 + 2) = v13;
        *(_WORD *)(a3 + 2 * (int)(v5 ^ 2)) = v14;
        *(_WORD *)(a3 + 6) = -1;
        v11 += 3;
        a3 += 8;
        v12 += 3;
      }
      while (v11 < 3 * a4);
    }
  }
  else if (a4 >= 1)
  {
    v15 = 0;
    v16 = (__int16 *)(a2 + 4);
    do
    {
      v17 = *(v16 - 1);
      v18 = *v16;
      v19 = v16[1];
      *(_WORD *)(a3 + 2 * v5) = *(v16 - 2);
      *(_WORD *)(a3 + 2) = v17;
      *(_WORD *)(a3 + 2 * (int)(v5 ^ 2)) = v18;
      *(_WORD *)(a3 + 6) = v19;
      v15 += 4;
      a3 += 8;
      v16 += 4;
    }
    while (v15 < 4 * a4);
  }
  return result;
}

void sub_1002C419C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C41C0(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450700);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4;
    v6 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4;
    do
    {
      sub_1002C4270(*(int **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

float sub_1002C4270(int *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float result;
  int v10;
  int v11;
  uint64_t v12;
  float *v13;
  float v14;
  int v15;
  uint64_t v16;
  float *v17;
  int v18;
  float v19;
  int v20;

  v4 = *a1;
  v5 = a1[2];
  if (a1[1] == 3)
  {
    if (a4 >= 1)
    {
      v6 = 0;
      v7 = 4 * v4;
      v8 = (float *)(a3 + 4);
      do
      {
        result = *(float *)(a2 + 4 * v5);
        v10 = *(_DWORD *)(a2 + 4);
        v11 = *(_DWORD *)(a2 + 4 * (int)(v5 ^ 2));
        *(v8 - 1) = result;
        *(_DWORD *)v8 = v10;
        *((_DWORD *)v8 + 1) = v11;
        v6 += 3;
        a2 += v7;
        v8 += 3;
      }
      while (v6 < 3 * a4);
    }
  }
  else if ((_DWORD)v4 == 3)
  {
    if (a4 >= 1)
    {
      v12 = 0;
      v13 = (float *)(a2 + 4);
      do
      {
        result = *(v13 - 1);
        v14 = *v13;
        v15 = *((_DWORD *)v13 + 1);
        *(float *)(a3 + 4 * v5) = result;
        *(float *)(a3 + 4) = v14;
        *(_DWORD *)(a3 + 4 * (int)(v5 ^ 2)) = v15;
        *(_DWORD *)(a3 + 12) = 1065353216;
        v12 += 3;
        a3 += 16;
        v13 += 3;
      }
      while (v12 < 3 * a4);
    }
  }
  else if (a4 >= 1)
  {
    v16 = 0;
    v17 = (float *)(a2 + 8);
    do
    {
      result = *(v17 - 2);
      v18 = *((_DWORD *)v17 - 1);
      v19 = *v17;
      v20 = *((_DWORD *)v17 + 1);
      v17 += 4;
      *(float *)(a3 + 4 * v5) = result;
      *(_DWORD *)(a3 + 4) = v18;
      *(float *)(a3 + 4 * (int)(v5 ^ 2)) = v19;
      *(_DWORD *)(a3 + 12) = v20;
      v16 += 4;
      a3 += 16;
    }
    while (v16 < 4 * a4);
  }
  return result;
}

void sub_1002C4380(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C43A4(uint64_t a1, int *a2)
{
  int v4;
  int8x16_t *v5;
  uint64_t v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450760);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (int8x16_t *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4;
    do
    {
      sub_1002C4468(*(_QWORD *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 = (int8x16_t *)((char *)v5 + *(_QWORD *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002C4454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_1002C4468(unint64_t result, uint64_t a2, int8x16_t *a3, unsigned int a4)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int8x16_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  unint64_t v21;
  int8x16_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  unint64_t v33;
  int8x16_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  unint64_t v47;
  int8x16_t *v48;
  int8x8_t v49;
  int8x16_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  int8x16_t *v63;
  int8x16_t v64;
  int8x16_t v65;
  unint64_t v66;
  uint64_t v67;
  const char *v68;
  unsigned __int128 v69;
  uint8x16_t v70;
  int8x16_t v71;
  const char *v72;
  unsigned __int128 v73;
  uint8x16_t v74;
  int8x16_t v75;
  unsigned __int128 v76;
  int8x16_t v77;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int8x16_t *v90;
  const char *v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  const char *v95;
  unint64_t v96;
  __int16 *v97;
  uint64_t v98;
  unint64_t v99;
  int8x16_t *v100;
  int8x16_t v101;
  unint64_t v102;
  uint64_t v103;
  const char *v104;
  unsigned __int128 v105;
  uint8x16_t v106;
  int8x16_t v107;
  const char *v108;
  unsigned __int128 v109;
  uint8x16_t v110;
  int8x16_t v111;
  unsigned __int128 v112;
  int8x16_t v113;
  uint8x16_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int8x16_t *v122;
  const char *v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  const char *v127;
  unint64_t v128;
  __int16 *v129;
  uint64_t v130;
  unint64_t v131;
  int8x16_t *v132;
  int8x16_t v133;
  int8x16_t v134;
  unint64_t v135;
  uint64_t v136;
  const char *v137;
  unsigned __int128 v138;
  uint8x16_t v139;
  int8x16_t v140;
  const char *v141;
  unsigned __int128 v142;
  uint8x16_t v143;
  int8x16_t v144;
  unsigned __int128 v145;
  int8x16_t v146;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int8x16_t *v156;
  const char *v157;
  unint64_t v158;
  const char *v159;
  unint64_t v160;
  const char *v161;
  unint64_t v162;
  __int16 *v163;
  uint64_t v164;
  unint64_t v165;
  int8x16_t *v166;
  int8x16_t v167;
  int8x16_t v168;
  unint64_t v169;
  uint64_t v170;
  const char *v171;
  unsigned __int128 v172;
  uint8x16_t v173;
  int8x16_t v174;
  const char *v175;
  uint8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  unsigned __int128 v179;
  uint8x16_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  int8x16_t *v188;
  int8x16_t v189;
  const char *v190;
  unint64_t v191;
  const char *v192;
  const char *v193;
  unint64_t v194;
  __int16 *v195;
  uint64_t v196;
  int8x8x4_t v197;
  int8x8x3_t v198;
  int8x8x3_t v199;
  int8x8x4_t v200;
  int8x8x4_t v201;
  int8x8x4_t v202;
  int8x16x4_t v203;

  v4 = *(_DWORD *)result;
  v5 = *(int *)(result + 4);
  if (*(_DWORD *)(result + 8) != 6)
  {
    if (v4 == 3)
    {
      if ((int)a4 >= 8)
      {
        v7 = 0;
        v22 = a3;
        do
        {
          v199 = vld3_s8((const char *)a2);
          a2 += 24;
          *(int8x8x3_t *)v197.val[0].i8 = v199;
          *v22++ = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(*(int8x8_t *)(result + 24), v199.val[1]), 2uLL), (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v197.val[v5], 3uLL))), (int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(v197.val[v5 ^ 2], *(int8x8_t *)(result + 24)), 7uLL));
          v7 += 8;
        }
        while (v7 <= a4 - 8);
      }
      else
      {
        LODWORD(v7) = 0;
      }
      if ((int)v7 >= (int)a4)
        return result;
      v23 = v5 ^ 2;
      v24 = v7;
      v25 = a4 - (unint64_t)v7;
      if (v25 >= 9)
      {
        v26 = (unint64_t)a3 + 2 * v7;
        v27 = (unint64_t)a3 + 2 * a4;
        result = 3 * a4 + v23 - 3 * v7 + a2 - 2;
        v28 = v26 >= a2 + 3 * a4 + ~(3 * (unint64_t)v7) || a2 + 1 >= v27;
        v29 = !v28;
        v30 = v26 >= 3 * a4 + v5 - 3 * (unint64_t)v7 + a2 - 2 || a2 + v5 >= v27;
        v31 = !v30;
        v32 = a2 + v23 >= v27 || v26 >= result;
        if (v32 && !v29 && !v31)
        {
          if (v25 < 0x11)
          {
            v33 = 0;
LABEL_133:
            if ((v25 & 7) != 0)
              v115 = v25 & 7;
            else
              v115 = 8;
            v116 = v25 - v115;
            v117 = a4 - v115;
            v118 = a2 + 3 * v116;
            v119 = a2 + 3 * v33;
            v120 = v33 + v7;
            v121 = v120 + v115 - a4;
            v122 = (int8x16_t *)((char *)a3 + 2 * v120);
            do
            {
              v123 = (const char *)(v119 + v5);
              v124 = (unint64_t)vld3_s8(v123);
              v125 = (const char *)(v119 + 1);
              v126 = (unint64_t)vld3_s8(v125);
              v127 = (const char *)(v119 + v23);
              v128 = (unint64_t)vld3_s8(v127);
              *v122++ = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8((int8x8_t)v126, (int8x8_t)0xF8F8F8F8F8F8F8F8), 2uLL), (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v124, 3uLL))), (int8x16_t)vshll_n_u8((uint8x8_t)vand_s8((int8x8_t)v128, (int8x8_t)0xF8F8F8F8F8F8F8F8), 7uLL));
              v119 += 24;
              v121 += 8;
            }
            while (v121);
            v24 = v117;
            a2 = v118;
            goto LABEL_139;
          }
          v99 = 16;
          if ((v25 & 0xF) != 0)
            v99 = v25 & 0xF;
          v33 = v25 - v99;
          v100 = (int8x16_t *)((char *)a3 + 2 * v7);
          v101.i64[0] = 0xF8F8F8F8F8F8F8F8;
          v101.i64[1] = 0xF8F8F8F8F8F8F8F8;
          v102 = a4 - (unint64_t)v7;
          v103 = a2;
          do
          {
            v104 = (const char *)(v103 + v5);
            v105 = (unsigned __int128)vld3q_s8(v104);
            v106 = vshrq_n_u8((uint8x16_t)v105, 3uLL);
            v107 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v106.i8);
            v108 = (const char *)(v103 + 1);
            v109 = (unsigned __int128)vld3q_s8(v108);
            v110 = (uint8x16_t)vandq_s8((int8x16_t)v109, v101);
            v111 = vorrq_s8((int8x16_t)vshll_high_n_u8(v110, 2uLL), (int8x16_t)vmovl_high_u8(v106));
            result = v103 + v23;
            v112 = (unsigned __int128)vld3q_s8((const char *)result);
            v113 = vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v110.i8, 2uLL), v107);
            v114 = (uint8x16_t)vandq_s8((int8x16_t)v112, v101);
            *v100 = vorrq_s8(v113, (int8x16_t)vshll_n_u8(*(uint8x8_t *)v114.i8, 7uLL));
            v100[1] = vorrq_s8(v111, (int8x16_t)vshll_high_n_u8(v114, 7uLL));
            v100 += 2;
            v103 += 48;
            v102 -= 16;
          }
          while (v99 != v102);
          if (v99 > 8)
            goto LABEL_133;
          a2 += 3 * v33;
          v24 = v33 + v7;
        }
      }
LABEL_139:
      v129 = &a3->i16[v24];
      v130 = a4 - v24;
      do
      {
        *v129++ = (*(_BYTE *)(a2 + v5) >> 3) & 0x1F | (32 * (((*(_BYTE *)(a2 + 1) & 0xF8) >> 3) & 0x1F)) & 0x83FF | ((((*(_BYTE *)(a2 + v23) & 0xF8) >> 3) & 0x1F) << 10);
        a2 += 3;
        --v130;
      }
      while (v130);
      return result;
    }
    if ((int)a4 >= 8)
    {
      v9 = 0;
      v48 = a3;
      do
      {
        v201 = vld4_s8((const char *)a2);
        a2 += 32;
        v197 = v201;
        v49 = *(int8x8_t *)(result + 24);
        v50 = (int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(v49, v201.val[1]), 2uLL);
        *(_OWORD *)v201.val[1].i8 = *(_OWORD *)(result + 48);
        *(int8x16_t *)v201.val[0].i8 = veorq_s8(*(int8x16_t *)(result + 64), (int8x16_t)vceqq_s16(*(int16x8_t *)v201.val[1].i8, (int16x8_t)vmovl_u8((uint8x8_t)v201.val[3])));
        *v48++ = vorrq_s8(vorrq_s8(vorrq_s8(v50, (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v197.val[v5], 3uLL))), (int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(v197.val[v5 ^ 2], v49), 7uLL)), vorrq_s8(vbicq_s8(*(int8x16_t *)v201.val[1].i8, *(int8x16_t *)v201.val[0].i8), vandq_s8(*(int8x16_t *)v201.val[0].i8, *(int8x16_t *)(result + 32))));
        v9 += 8;
      }
      while (v9 <= a4 - 8);
    }
    else
    {
      LODWORD(v9) = 0;
    }
    if ((int)v9 >= (int)a4)
      return result;
    v51 = v5 ^ 2;
    v52 = v9;
    v53 = a4 - (unint64_t)v9;
    if (v53 >= 9)
    {
      v54 = (unint64_t)a3 + 2 * v9;
      v55 = (unint64_t)a3 + 2 * a4;
      result = a2 + 4 * a4 - 4 * v9;
      v56 = v54 >= 4 * a4 + v51 - 4 * (unint64_t)v9 + a2 - 3 || a2 + v51 >= v55;
      v57 = !v56;
      v58 = v54 >= 4 * a4 + v5 - 4 * (unint64_t)v9 + a2 - 3 || a2 + v5 >= v55;
      v59 = !v58;
      v60 = a2 + 1 >= v55 || v54 >= result;
      if (v60 && !v57 && !v59)
      {
        if (v53 < 0x11)
        {
          v61 = 0;
LABEL_163:
          if ((v53 & 7) != 0)
            v181 = v53 & 7;
          else
            v181 = 8;
          v182 = v53 - v181;
          v183 = a4 - v181;
          v184 = a2 + 4 * v182;
          v185 = a2 + 4 * v61;
          v186 = v61 + v9;
          v187 = v186 + v181 - a4;
          v188 = (int8x16_t *)((char *)a3 + 2 * v186);
          v189.i64[0] = 0x8000800080008000;
          v189.i64[1] = 0x8000800080008000;
          do
          {
            v190 = (const char *)(v185 + v5);
            v191 = (unint64_t)vld4_s8(v190);
            v192 = (const char *)(v185 + 1);
            v202 = vld4_s8(v192);
            v193 = (const char *)(v185 + v51);
            v194 = (unint64_t)vld4_s8(v193);
            *v188++ = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(v202.val[0], (int8x8_t)0xF8F8F8F8F8F8F8F8), 2uLL), (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v191, 3uLL))), (int8x16_t)vshll_n_u8((uint8x8_t)vand_s8((int8x8_t)v194, (int8x8_t)0xF8F8F8F8F8F8F8F8), 7uLL)), vbicq_s8(v189, (int8x16_t)vmovl_s8(vceqz_s8(v202.val[2]))));
            v185 += 32;
            v187 += 8;
          }
          while (v187);
          v52 = v183;
          a2 = v184;
          goto LABEL_169;
        }
        v165 = 16;
        if ((v53 & 0xF) != 0)
          v165 = v53 & 0xF;
        v61 = v53 - v165;
        v166 = (int8x16_t *)((char *)a3 + 2 * v9);
        v167.i64[0] = 0xF8F8F8F8F8F8F8F8;
        v167.i64[1] = 0xF8F8F8F8F8F8F8F8;
        v168.i64[0] = 0x8000800080008000;
        v168.i64[1] = 0x8000800080008000;
        v169 = a4 - (unint64_t)v9;
        v170 = a2;
        do
        {
          v171 = (const char *)(v170 + v5);
          v172 = (unsigned __int128)vld4q_s8(v171);
          v173 = vshrq_n_u8((uint8x16_t)v172, 3uLL);
          v174 = (int8x16_t)vmovl_high_u8(v173);
          v175 = (const char *)(v170 + 1);
          v203 = vld4q_s8(v175);
          v176 = (uint8x16_t)vandq_s8(v203.val[0], v167);
          v177 = vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v176.i8, 2uLL), (int8x16_t)vmovl_u8(*(uint8x8_t *)v173.i8));
          v178 = vorrq_s8((int8x16_t)vshll_high_n_u8(v176, 2uLL), v174);
          result = v170 + v51;
          v179 = (unsigned __int128)vld4q_s8((const char *)result);
          v180 = (uint8x16_t)vandq_s8((int8x16_t)v179, v167);
          v203.val[0] = vceqzq_s8(v203.val[2]);
          *v166 = vorrq_s8(vorrq_s8(v177, (int8x16_t)vshll_n_u8(*(uint8x8_t *)v180.i8, 7uLL)), vbicq_s8(v168, (int8x16_t)vmovl_s8(*(int8x8_t *)v203.val[0].i8)));
          v166[1] = vorrq_s8(vorrq_s8(v178, (int8x16_t)vshll_high_n_u8(v180, 7uLL)), vbicq_s8(v168, (int8x16_t)vmovl_high_s8(v203.val[0])));
          v166 += 2;
          v170 += 64;
          v169 -= 16;
        }
        while (v165 != v169);
        if (v165 > 8)
          goto LABEL_163;
        a2 += 4 * v61;
        v52 = v61 + v9;
      }
    }
LABEL_169:
    v195 = &a3->i16[v52];
    v196 = a4 - v52;
    do
    {
      *v195++ = (*(_BYTE *)(a2 + v5) >> 3) & 0x1F | (32 * (((*(_BYTE *)(a2 + 1) & 0xF8) >> 3) & 0x1F)) & 0x83FF | ((((*(_BYTE *)(a2 + v51) & 0xF8) >> 3) & 0x1F) << 10) | ((*(_BYTE *)(a2 + 3) != 0) << 15);
      a2 += 4;
      --v196;
    }
    while (v196);
    return result;
  }
  if (v4 != 3)
  {
    if ((int)a4 >= 8)
    {
      v8 = 0;
      v34 = a3;
      do
      {
        v200 = vld4_s8((const char *)a2);
        a2 += 32;
        v197 = v200;
        *v34++ = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(*(int8x8_t *)(result + 16), v200.val[1]), 3uLL), (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v197.val[v5], 3uLL))), (int8x16_t)vshll_n_s8(vand_s8(*(int8x8_t *)(result + 24), v197.val[(int)(v5 ^ 2)]), 8uLL));
        v8 += 8;
      }
      while (v8 <= a4 - 8);
    }
    else
    {
      LODWORD(v8) = 0;
    }
    if ((int)v8 >= (int)a4)
      return result;
    v35 = v5 ^ 2;
    v36 = v8;
    v37 = a4;
    v38 = a4 - v36;
    if (v38 >= 9)
    {
      v39 = (unint64_t)a3 + 2 * v36;
      v40 = (unint64_t)a3 + 2 * a4;
      v41 = 4 * a4 + v35 - 4 * v36 + a2 - 3;
      result = 4 * v37 + v5 - 4 * v36 + a2 - 3;
      v42 = v39 >= 4 * v37 - 4 * v36 + a2 - 2 || a2 + 1 >= v40;
      v43 = !v42;
      v44 = v39 >= result || a2 + v5 >= v40;
      v45 = !v44;
      v46 = a2 + v35 >= v40 || v39 >= v41;
      if (v46 && !v43 && !v45)
      {
        if (v38 < 0x11)
        {
          v47 = 0;
LABEL_148:
          if ((v38 & 7) != 0)
            v149 = v38 & 7;
          else
            v149 = 8;
          v150 = v38 - v149;
          v151 = v38 - v149 + v36;
          v152 = a2 + 4 * v150;
          v153 = a2 + 4 * v47;
          v154 = v47 + v36;
          v155 = v154 + v149 - v37;
          v156 = (int8x16_t *)((char *)a3 + 2 * v154);
          do
          {
            v157 = (const char *)(v153 + v5);
            v158 = (unint64_t)vld4_s8(v157);
            v159 = (const char *)(v153 + 1);
            v160 = (unint64_t)vld4_s8(v159);
            v161 = (const char *)(v153 + v35);
            v162 = (unint64_t)vld4_s8(v161);
            *v156++ = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8((int8x8_t)v160, (int8x8_t)0xFCFCFCFCFCFCFCFCLL), 3uLL), (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v158, 3uLL))), (int8x16_t)vshll_n_s8(vand_s8((int8x8_t)v162, (int8x8_t)0xF8F8F8F8F8F8F8F8), 8uLL));
            v153 += 32;
            v155 += 8;
          }
          while (v155);
          v36 = v151;
          a2 = v152;
          goto LABEL_154;
        }
        v131 = 16;
        if ((v38 & 0xF) != 0)
          v131 = v38 & 0xF;
        v47 = v38 - v131;
        v132 = (int8x16_t *)((char *)a3 + 2 * v36);
        v133.i64[0] = 0xFCFCFCFCFCFCFCFCLL;
        v133.i64[1] = 0xFCFCFCFCFCFCFCFCLL;
        v134.i64[0] = 0xF8F8F8F8F8F8F8F8;
        v134.i64[1] = 0xF8F8F8F8F8F8F8F8;
        v135 = v38;
        v136 = a2;
        do
        {
          v137 = (const char *)(v136 + v5);
          v138 = (unsigned __int128)vld4q_s8(v137);
          v139 = vshrq_n_u8((uint8x16_t)v138, 3uLL);
          v140 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v139.i8);
          v141 = (const char *)(v136 + 1);
          v142 = (unsigned __int128)vld4q_s8(v141);
          v143 = (uint8x16_t)vandq_s8((int8x16_t)v142, v133);
          v144 = vorrq_s8((int8x16_t)vshll_high_n_u8(v143, 3uLL), (int8x16_t)vmovl_high_u8(v139));
          result = v136 + v35;
          v145 = (unsigned __int128)vld4q_s8((const char *)result);
          v146 = vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v143.i8, 3uLL), v140);
          _Q4 = vandq_s8((int8x16_t)v145, v134);
          __asm { SHLL2           V5.8H, V4.16B, #8 }
          *v132 = vorrq_s8(v146, (int8x16_t)vshll_n_s8(*(int8x8_t *)_Q4.i8, 8uLL));
          v132[1] = vorrq_s8(v144, _Q5);
          v132 += 2;
          v136 += 64;
          v135 -= 16;
        }
        while (v131 != v135);
        if (v131 > 8)
          goto LABEL_148;
        a2 += 4 * v47;
        v36 += v47;
      }
    }
LABEL_154:
    v163 = &a3->i16[v36];
    v164 = v37 - v36;
    do
    {
      *v163++ = (*(_BYTE *)(a2 + v5) >> 3) & 0x1F | (32 * (((*(_BYTE *)(a2 + 1) & 0xFC) >> 2) & 0x3F)) & 0x7FF | ((((*(_BYTE *)(a2 + v35) & 0xF8) >> 3) & 0x1F) << 11);
      a2 += 4;
      --v164;
    }
    while (v164);
    return result;
  }
  if ((int)a4 >= 8)
  {
    v6 = 0;
    v10 = a3;
    do
    {
      v198 = vld3_s8((const char *)a2);
      a2 += 24;
      *(int8x8x3_t *)v197.val[0].i8 = v198;
      *v10++ = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(*(int8x8_t *)(result + 16), v198.val[1]), 3uLL), (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v197.val[v5], 3uLL))), (int8x16_t)vshll_n_s8(vand_s8(*(int8x8_t *)(result + 24), v197.val[(int)(v5 ^ 2)]), 8uLL));
      v6 += 8;
    }
    while (v6 <= a4 - 8);
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((int)v6 < (int)a4)
  {
    v11 = v5 ^ 2;
    v12 = v6;
    v13 = a4 - (unint64_t)v6;
    if (v13 < 9)
      goto LABEL_124;
    v14 = (unint64_t)a3 + 2 * v6;
    v15 = (unint64_t)a3 + 2 * a4;
    result = 3 * a4 + v11 - 3 * v6 + a2 - 2;
    _CF = v14 >= a2 + 3 * a4 + ~(3 * (unint64_t)v6) || a2 + 1 >= v15;
    v17 = !_CF;
    v18 = v14 >= 3 * a4 + v5 - 3 * (unint64_t)v6 + a2 - 2 || a2 + v5 >= v15;
    v19 = !v18;
    v20 = a2 + v11 >= v15 || v14 >= result;
    if (!v20 || v17 || v19)
      goto LABEL_124;
    if (v13 >= 0x11)
    {
      v62 = 16;
      if ((v13 & 0xF) != 0)
        v62 = v13 & 0xF;
      v21 = v13 - v62;
      v63 = (int8x16_t *)((char *)a3 + 2 * v6);
      v64.i64[0] = 0xFCFCFCFCFCFCFCFCLL;
      v64.i64[1] = 0xFCFCFCFCFCFCFCFCLL;
      v65.i64[0] = 0xF8F8F8F8F8F8F8F8;
      v65.i64[1] = 0xF8F8F8F8F8F8F8F8;
      v66 = a4 - (unint64_t)v6;
      v67 = a2;
      do
      {
        v68 = (const char *)(v67 + v5);
        v69 = (unsigned __int128)vld3q_s8(v68);
        v70 = vshrq_n_u8((uint8x16_t)v69, 3uLL);
        v71 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v70.i8);
        v72 = (const char *)(v67 + 1);
        v73 = (unsigned __int128)vld3q_s8(v72);
        v74 = (uint8x16_t)vandq_s8((int8x16_t)v73, v64);
        v75 = vorrq_s8((int8x16_t)vshll_high_n_u8(v74, 3uLL), (int8x16_t)vmovl_high_u8(v70));
        result = v67 + v11;
        v76 = (unsigned __int128)vld3q_s8((const char *)result);
        v77 = vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v74.i8, 3uLL), v71);
        _Q4 = vandq_s8((int8x16_t)v76, v65);
        __asm { SHLL2           V5.8H, V4.16B, #8 }
        *v63 = vorrq_s8(v77, (int8x16_t)vshll_n_s8(*(int8x8_t *)_Q4.i8, 8uLL));
        v63[1] = vorrq_s8(v75, _Q5);
        v63 += 2;
        v67 += 48;
        v66 -= 16;
      }
      while (v62 != v66);
      if (v62 <= 8)
      {
        a2 += 3 * v21;
        v12 = v21 + v6;
LABEL_124:
        v97 = &a3->i16[v12];
        v98 = a4 - v12;
        do
        {
          *v97++ = (*(_BYTE *)(a2 + v5) >> 3) & 0x1F | (32 * (((*(_BYTE *)(a2 + 1) & 0xFC) >> 2) & 0x3F)) & 0x7FF | ((((*(_BYTE *)(a2 + v11) & 0xF8) >> 3) & 0x1F) << 11);
          a2 += 3;
          --v98;
        }
        while (v98);
        return result;
      }
    }
    else
    {
      v21 = 0;
    }
    if ((v13 & 7) != 0)
      v83 = v13 & 7;
    else
      v83 = 8;
    v84 = v13 - v83;
    v85 = a4 - v83;
    v86 = a2 + 3 * v84;
    v87 = a2 + 3 * v21;
    v88 = v21 + v6;
    v89 = v88 + v83 - a4;
    v90 = (int8x16_t *)((char *)a3 + 2 * v88);
    do
    {
      v91 = (const char *)(v87 + v5);
      v92 = (unint64_t)vld3_s8(v91);
      v93 = (const char *)(v87 + 1);
      v94 = (unint64_t)vld3_s8(v93);
      v95 = (const char *)(v87 + v11);
      v96 = (unint64_t)vld3_s8(v95);
      *v90++ = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8((int8x8_t)v94, (int8x8_t)0xFCFCFCFCFCFCFCFCLL), 3uLL), (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v92, 3uLL))), (int8x16_t)vshll_n_s8(vand_s8((int8x8_t)v96, (int8x8_t)0xF8F8F8F8F8F8F8F8), 8uLL));
      v87 += 24;
      v89 += 8;
    }
    while (v89);
    v12 = v85;
    a2 = v86;
    goto LABEL_124;
  }
  return result;
}

void sub_1002C4ECC(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C4EF0(uint64_t a1, int *a2)
{
  int v4;
  char *v5;
  int16x8_t *v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_1004507C0);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (char *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = (int16x8_t *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4);
    do
    {
      sub_1002C4FB4(*(int8x16_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 = (int16x8_t *)((char *)v6 + *(_QWORD *)(a1 + 16));
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002C4FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int8x16_t *sub_1002C4FB4(int8x16_t *result, int16x8_t *a2, char *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t *v12;
  int16x8_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int16x8_t *v25;
  int16x8_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int8x16x3_t v38;
  int8x16x3_t v39;
  int8x16x3_t v40;
  int8x16x4_t v41;
  int8x16x4_t v42;

  v4 = result->i32[0];
  v5 = result->i32[1];
  if (result->i32[2] == 6)
  {
    v6 = (a4 - 16);
    if (a4 >= 16)
    {
      v7 = 0;
      v10 = (int)(v5 ^ 2);
      v11 = 16 * v4;
      v12 = a2 + 1;
      do
      {
        while (1)
        {
          v13 = v12[-1];
          *(int8x8_t *)v14.i8 = vshl_n_s8(vmovn_s16(v13), 3uLL);
          v14.u64[1] = (unint64_t)vshl_n_s8(vmovn_s16(*v12), 3uLL);
          v15 = vuzp1q_s8(vandq_s8(result[1], (int8x16_t)vshrq_n_u16((uint16x8_t)v13, 3uLL)), vandq_s8((int8x16_t)vshrq_n_u16(*(uint16x8_t *)v12, 3uLL), result[1]));
          v16 = vuzp1q_s8(vandq_s8(result[2], (int8x16_t)vshrq_n_u16((uint16x8_t)v13, 8uLL)), vandq_s8(result[2], (int8x16_t)vshrq_n_u16(*(uint16x8_t *)v12, 8uLL)));
          if ((_DWORD)v4 == 3)
            break;
          v38.val[v5] = v14;
          v38.val[1] = v15;
          v38.val[v10] = v16;
          v41.val[3] = result[4];
          v41.val[0] = v38.val[0];
          v41.val[1] = v38.val[1];
          v41.val[2] = v38.val[2];
          vst4q_s8(a3, v41);
          v7 += 16;
          a3 += v11;
          v12 += 2;
          if (v7 > v6)
            goto LABEL_10;
        }
        v38.val[v5] = v14;
        v38.val[1] = v15;
        v38.val[v10] = v16;
        v39 = v38;
        vst3q_s8(a3, v39);
        v7 += 16;
        a3 += v11;
        v12 += 2;
      }
      while (v7 <= v6);
    }
    else
    {
      LODWORD(v7) = 0;
    }
LABEL_10:
    if ((int)v7 < a4)
    {
      v17 = v5 ^ 2;
      v18 = v7;
      v19 = (unsigned __int16 *)a2 + v7;
      v20 = a4 - v18;
      if ((_DWORD)v4 == 4)
      {
        do
        {
          v21 = *v19++;
          a3[v5] = 8 * v21;
          a3[1] = (v21 >> 3) & 0xFC;
          a3[v17] = BYTE1(v21) & 0xF8;
          a3[3] = -1;
          a3 += v4;
          --v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v22 = *v19++;
          a3[v5] = 8 * v22;
          a3[1] = (v22 >> 3) & 0xFC;
          a3[v17] = BYTE1(v22) & 0xF8;
          a3 += v4;
          --v20;
        }
        while (v20);
      }
    }
  }
  else
  {
    v8 = (a4 - 16);
    if (a4 >= 16)
    {
      v9 = 0;
      v23 = (int)(v5 ^ 2);
      v24 = 16 * v4;
      v25 = a2 + 1;
      do
      {
        while (1)
        {
          v26 = v25[-1];
          v27 = *(int8x16_t *)v25;
          *(int8x8_t *)v28.i8 = vshl_n_s8(vmovn_s16(v26), 3uLL);
          v28.u64[1] = (unint64_t)vshl_n_s8(vmovn_s16(*v25), 3uLL);
          v29 = result[2];
          v30 = vuzp1q_s8(vandq_s8(v29, (int8x16_t)vshrq_n_u16((uint16x8_t)v26, 2uLL)), vandq_s8((int8x16_t)vshrq_n_u16(*(uint16x8_t *)v25, 2uLL), v29));
          v31 = vuzp1q_s8(vandq_s8(v29, (int8x16_t)vshrq_n_u16((uint16x8_t)v26, 7uLL)), vandq_s8((int8x16_t)vshrq_n_u16(*(uint16x8_t *)v25, 7uLL), v29));
          if ((_DWORD)v4 == 3)
            break;
          v38.val[v5] = v28;
          v38.val[1] = v30;
          v38.val[v23] = v31;
          v42.val[3] = vbslq_s8((int8x16_t)vqmovn_high_u16(vqmovn_u16((uint16x8_t)vandq_s8(result[3], (int8x16_t)v26)), (uint16x8_t)vandq_s8(result[3], v27)), result[4], result[5]);
          v42.val[0] = v38.val[0];
          v42.val[1] = v38.val[1];
          v42.val[2] = v38.val[2];
          vst4q_s8(a3, v42);
          v9 += 16;
          a3 += v24;
          v25 += 2;
          if (v9 > v8)
            goto LABEL_20;
        }
        v38.val[v5] = v28;
        v38.val[1] = v30;
        v38.val[v23] = v31;
        v40 = v38;
        vst3q_s8(a3, v40);
        v9 += 16;
        a3 += v24;
        v25 += 2;
      }
      while (v9 <= v8);
    }
    else
    {
      LODWORD(v9) = 0;
    }
LABEL_20:
    if ((int)v9 < a4)
    {
      v32 = v5 ^ 2;
      v33 = v9;
      v34 = (unsigned __int16 *)a2 + v9;
      v35 = a4 - v33;
      if ((_DWORD)v4 == 4)
      {
        do
        {
          v36 = (__int16)*v34++;
          a3[v5] = 8 * v36;
          a3[1] = (v36 >> 2) & 0xF8;
          a3[v32] = (v36 >> 7) & 0xF8;
          a3[3] = v36 >> 15;
          a3 += v4;
          --v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v37 = *v34++;
          a3[v5] = 8 * v37;
          a3[1] = (v37 >> 2) & 0xF8;
          a3[v32] = (v37 >> 7) & 0xF8;
          a3 += v4;
          --v35;
        }
        while (v35);
      }
    }
  }
  return result;
}

void sub_1002C52B8(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C52DC(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  _BYTE v16[8];
  int v17;

  sub_100298C2C(v16, &off_100450820);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 < v5 && *(int *)(a1 + 40) >= 1)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = (_BYTE *)(*(_QWORD *)(a1 + 24) + v6 * v4);
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 8) + v8 * v4;
    do
    {
      v10 = *(unsigned int *)(a1 + 40);
      if ((int)v10 >= 1)
      {
        v11 = *(int **)(a1 + 48);
        v12 = v11 + 1;
        v13 = *v11;
        v14 = (unsigned __int8 *)(v9 + 2);
        v15 = v7;
        do
        {
          *v15++ = (v12[*(v14 - 1) + 256] + v12[*(v14 - 2)] + v12[*v14 + 512]) >> 14;
          v14 += v13;
          --v10;
        }
        while (v10);
        v8 = *(_QWORD *)(a1 + 16);
        v6 = *(_QWORD *)(a1 + 32);
        v5 = a2[1];
      }
      ++v4;
      v9 += v8;
      v7 += v6;
    }
    while (v4 < v5);
  }
  if (v17)
    sub_1002989D0(v16);
}

void sub_1002C53DC(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C5400(uint64_t a1, int *a2)
{
  int v4;
  int16x8_t *v5;
  const __int16 *v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450880);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (int16x8_t *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = (const __int16 *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4);
    do
    {
      sub_1002C54C4(*(int32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 = (const __int16 *)((char *)v6 + *(_QWORD *)(a1 + 16));
      v5 = (int16x8_t *)((char *)v5 + *(_QWORD *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002C54B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int32x4_t *sub_1002C54C4(int32x4_t *result, const __int16 *a2, int16x8_t *a3, int a4)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int64_t v8;
  int v9;
  uint64_t v10;
  int16x4_t *v11;
  __int16 *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unint64_t v15;
  int16x8_t *v16;
  int16x4x3_t v17;
  int16x4x4_t v18;
  int16x8x4_t v19;

  v4 = result->i32[1];
  v5 = result->i32[0];
  v6 = result->i32[2];
  v7 = result->i32[3];
  if (a4 >= 8)
  {
    v8 = 0;
    v16 = a3;
    do
    {
      if ((_DWORD)v5 == 3)
        *(int16x8x3_t *)v19.val[0].i8 = vld3q_s16(a2);
      else
        v19 = vld4q_s16(a2);
      *v16++ = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v19.val[1].i8, (uint16x4_t)result[1].u64[1]), *(uint16x4_t *)v19.val[0].i8, *(uint16x4_t *)result[1].i8), *(uint16x4_t *)v19.val[2].i8, *(uint16x4_t *)result[2].i8), result[3]), 0xEuLL), vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v19.val[1], (int8x16_t)v19.val[1], 8uLL), (uint16x4_t)result[1].u64[1]), (uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v19.val[0], (int8x16_t)v19.val[0], 8uLL), *(uint16x4_t *)result[1].i8),
                                (uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v19.val[2], (int8x16_t)v19.val[2], 8uLL),
                                *(uint16x4_t *)result[2].i8),
                   result[3]),
                 0xEuLL);
      v8 += 8;
      a2 += 8 * v5;
    }
    while (v8 <= (unint64_t)(a4 - 8));
  }
  else
  {
    LODWORD(v8) = 0;
  }
  v9 = a4 - 4;
  if ((int)v8 <= a4 - 4)
  {
    v8 = v8;
    v10 = 8 * v5;
    v11 = (int16x4_t *)((char *)a3 + 2 * v8);
    if ((_DWORD)v5 == 3)
    {
      do
      {
        v17 = vld3_s16(a2);
        a2 = (const __int16 *)((char *)a2 + v10);
        *v11++ = vshrn_n_s32(vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v17.val[1], (uint16x4_t)result[1].u64[1]), (uint16x4_t)v17.val[0], *(uint16x4_t *)result[1].i8), (uint16x4_t)v17.val[2], *(uint16x4_t *)result[2].i8), result[3]), 0xEuLL);
        v8 += 4;
      }
      while (v8 <= v9);
    }
    else
    {
      do
      {
        v18 = vld4_s16(a2);
        a2 = (const __int16 *)((char *)a2 + v10);
        *v11++ = vshrn_n_s32(vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v18.val[1], (uint16x4_t)result[1].u64[1]), (uint16x4_t)v18.val[0], *(uint16x4_t *)result[1].i8), (uint16x4_t)v18.val[2], *(uint16x4_t *)result[2].i8), result[3]), 0xEuLL);
        v8 += 4;
      }
      while (v8 <= v9);
    }
  }
  if ((int)v8 < a4)
  {
    v12 = &a3->i16[v8];
    v13 = (unsigned __int16 *)(a2 + 1);
    v14 = 2 * v5;
    v15 = a4 - (unint64_t)v8;
    do
    {
      *v12++ = (v6 * *v13 + v4 * *(v13 - 1) + v7 * v13[1] + 0x2000) >> 14;
      v13 = (unsigned __int16 *)((char *)v13 + v14);
      --v15;
    }
    while (v15);
  }
  return result;
}

void sub_1002C563C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C5660(uint64_t a1, int *a2)
{
  int v4;
  float32x4_t *v5;
  const float *v6;
  float32x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  unint64_t v14;
  const float *v15;
  int64_t v16;
  int64_t v17;
  float32x4_t *v18;
  const float *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  uint64_t v22;
  const float *v23;
  float32x4_t *v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  float *v29;
  _BYTE v30[8];
  int v31;
  float32x4x3_t v32;
  float32x4x3_t v33;
  float32x4x3_t v34;
  float32x4x4_t v35;
  float32x4x4_t v36;
  float32x4x4_t v37;

  sub_100298C2C(v30, &off_1004508E0);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (float32x4_t *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = (const float *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4);
    do
    {
      v7 = *(float32x4_t **)(a1 + 48);
      v8 = *(int *)(a1 + 40);
      v9 = *(unsigned int *)(a1 + 40);
      v10 = v7->i32[0];
      v11 = v7->f32[1];
      v12 = v7->f32[2];
      v13 = v7->f32[3];
      if ((_DWORD)v10 == 3)
      {
        if ((int)v8 >= 8)
        {
          v14 = 0;
          v18 = v5 + 1;
          v15 = v6;
          do
          {
            v19 = v15;
            v32 = vld3q_f32(v19);
            v19 += 12;
            v18[-1] = vmlaq_f32(vmlaq_f32(vmulq_f32(v32.val[0], v7[1]), v7[2], v32.val[1]), v7[3], v32.val[2]);
            v33 = vld3q_f32(v19);
            *v18 = vmlaq_f32(vmlaq_f32(vmulq_f32(v33.val[0], v7[1]), v7[2], v33.val[1]), v7[3], v33.val[2]);
            v18 += 2;
            v14 += 8;
            v15 += 24;
          }
          while (v14 <= (v9 - 8));
          v14 = v14;
          v16 = v8 - 4;
          if ((int)v14 > (int)v16)
            goto LABEL_23;
        }
        else
        {
          v14 = 0;
          v15 = v6;
          v16 = v8 - 4;
          if ((int)v16 < 0)
            goto LABEL_23;
        }
        v20 = (float32x4_t *)((char *)v5 + 4 * v14);
        do
        {
          v34 = vld3q_f32(v15);
          v15 += 12;
          *v20++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v34.val[0], v7[1]), v7[2], v34.val[1]), v7[3], v34.val[2]);
          v14 += 4;
        }
        while ((uint64_t)v14 <= v16);
      }
      else
      {
        if ((int)v8 >= 8)
        {
          v14 = 0;
          v21 = v5 + 1;
          v15 = v6;
          do
          {
            v23 = &v15[4 * v10];
            v35 = vld4q_f32(v15);
            v22 = 32 * v10;
            v15 = (const float *)((char *)v15 + v22);
            v21[-1] = vmlaq_f32(vmlaq_f32(vmulq_f32(v35.val[0], v7[1]), v7[2], v35.val[1]), v7[3], v35.val[2]);
            v36 = vld4q_f32(v23);
            *v21 = vmlaq_f32(vmlaq_f32(vmulq_f32(v36.val[0], v7[1]), v7[2], v36.val[1]), v7[3], v36.val[2]);
            v21 += 2;
            v14 += 8;
          }
          while (v14 <= (v8 - 8));
          v14 = v14;
          v17 = v8 - 4;
          if ((int)v14 > (int)v17)
            goto LABEL_23;
        }
        else
        {
          v14 = 0;
          v15 = v6;
          v17 = v8 - 4;
          if ((int)v17 < 0)
            goto LABEL_23;
        }
        v24 = (float32x4_t *)((char *)v5 + 4 * v14);
        do
        {
          v37 = vld4q_f32(v15);
          v25 = 16 * (_DWORD)v10;
          v15 = (const float *)((char *)v15 + v25);
          *v24++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v37.val[0], v7[1]), v7[2], v37.val[1]), v7[3], v37.val[2]);
          v14 += 4;
        }
        while ((uint64_t)v14 <= v17);
      }
      v14 = v14;
LABEL_23:
      if ((int)v14 < (int)v9)
      {
        v26 = v9 - v14;
        v27 = (float *)(v15 + 2);
        v28 = 4 * v10;
        v29 = &v5->f32[v14];
        do
        {
          *v29++ = (float)((float)(v12 * *(v27 - 1)) + (float)(*(v27 - 2) * v11)) + (float)(*v27 * v13);
          v27 = (float *)((char *)v27 + v28);
          --v26;
        }
        while (v26);
      }
      ++v4;
      v6 = (const float *)((char *)v6 + *(_QWORD *)(a1 + 16));
      v5 = (float32x4_t *)((char *)v5 + *(_QWORD *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v31)
    sub_1002989D0(v30);
}

void sub_1002C58D8(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C58FC(uint64_t a1, int *a2)
{
  int v4;
  char *v5;
  unint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _BYTE *v17;
  char v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  char v23;
  int8x16_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int8x8_t *v30;
  char *v31;
  uint64_t v32;
  int8x8_t v33;
  int8x16_t *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[8];
  int v50;
  int8x8x3_t v51;
  int8x16x3_t v52;
  int8x16x3_t v53;
  int8x16x4_t v54;

  sub_100298C2C(v49, &off_100450940);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (char *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4;
    v7.i64[0] = -1;
    v7.i64[1] = -1;
    v8 = -1;
    do
    {
      v9 = *(unsigned int *)(a1 + 40);
      if (**(_DWORD **)(a1 + 48) == 3)
      {
        if ((int)v9 >= 1)
        {
          if (v9 < 8
            || ((unint64_t)v5 < v6 + v9 ? (v10 = v6 >= (unint64_t)&v5[3 * v9]) : (v10 = 1), !v10))
          {
            v11 = 0;
            v14 = v5;
            goto LABEL_24;
          }
          if (v9 >= 0x20)
          {
            v11 = v9 & 0x7FFFFFE0;
            v24 = (int8x16_t *)(v6 + 16);
            v25 = v9 & 0xFFFFFFE0;
            v26 = v5;
            do
            {
              v52.val[0] = v24[-1];
              v53.val[0] = *v24;
              v52.val[1] = v52.val[0];
              v52.val[2] = v52.val[0];
              v53.val[1] = *v24;
              v53.val[2] = *v24;
              v27 = v26 + 96;
              vst3q_s8(v26, v52);
              v28 = v26 + 48;
              vst3q_s8(v28, v53);
              v24 += 2;
              v26 = v27;
              v25 -= 32;
            }
            while (v25);
            if (v11 == v9)
              goto LABEL_3;
            if ((v9 & 0x18) == 0)
            {
              v14 = &v5[3 * v11];
LABEL_24:
              v15 = v9 - v11;
              v16 = (char *)(v6 + v11);
              v17 = v14 + 2;
              do
              {
                v18 = *v16++;
                *v17 = v18;
                *(v17 - 1) = v18;
                *(v17 - 2) = v18;
                v17 += 3;
                --v15;
              }
              while (v15);
              goto LABEL_3;
            }
          }
          else
          {
            v11 = 0;
          }
          v29 = v11;
          v11 = v9 & 0xFFFFFFF8;
          v14 = &v5[3 * v11];
          v30 = (int8x8_t *)(v6 + v29);
          v31 = &v5[3 * v29];
          v32 = v29 - v11;
          do
          {
            v33 = *v30++;
            v51.val[0] = v33;
            v51.val[1] = v33;
            v51.val[2] = v33;
            vst3_s8(v31, v51);
            v31 += 24;
            v32 += 8;
          }
          while (v32);
          if (v11 == v9)
            goto LABEL_3;
          goto LABEL_24;
        }
      }
      else if ((int)v9 >= 1)
      {
        if (v9 < 8
          || ((unint64_t)v5 < v6 + v9 ? (v12 = v6 >= (unint64_t)&v5[4 * v9]) : (v12 = 1), !v12))
        {
          v13 = 0;
          v19 = v5;
          goto LABEL_28;
        }
        if (v9 >= 0x20)
        {
          v13 = v9 & 0x7FFFFFE0;
          v34 = (int8x16_t *)(v6 + 16);
          v35 = v5 + 64;
          v36 = v9 & 0xFFFFFFE0;
          do
          {
            v37 = v35 - 64;
            v38 = v34[-1];
            v54.val[0] = *v34;
            v39 = v38;
            v40 = v38;
            v54.val[1] = *v34;
            v54.val[2] = *v34;
            v54.val[3] = v7;
            vst4q_s8(v37, *(int8x16x4_t *)(&v7 - 3));
            vst4q_s8(v35, v54);
            v34 += 2;
            v35 += 128;
            v36 -= 32;
          }
          while (v36);
          if (v13 == v9)
            goto LABEL_3;
          if ((v9 & 0x18) == 0)
          {
            v19 = &v5[4 * v13];
LABEL_28:
            v20 = v9 - v13;
            v21 = (char *)(v6 + v13);
            v22 = v19 + 3;
            do
            {
              v23 = *v21++;
              *(v22 - 1) = v23;
              *(v22 - 2) = v23;
              *(v22 - 3) = v23;
              *v22 = -1;
              v22 += 4;
              --v20;
            }
            while (v20);
            goto LABEL_3;
          }
        }
        else
        {
          v13 = 0;
        }
        v41 = v13;
        v13 = v9 & 0xFFFFFFF8;
        v19 = &v5[4 * v13];
        v42 = (uint64_t *)(v6 + v41);
        v43 = &v5[4 * v41];
        v44 = v41 - v13;
        do
        {
          v45 = *v42++;
          v46 = v45;
          v47 = v45;
          v48 = v45;
          vst4_s8(v43, *(int8x8x4_t *)(&v8 - 3));
          v43 += 32;
          v44 += 8;
        }
        while (v44);
        if (v13 == v9)
          goto LABEL_3;
        goto LABEL_28;
      }
LABEL_3:
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v50)
    sub_1002989D0(v49);
}

void sub_1002C5BBC(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C5BE0(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int16x4_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  __int16 v19;
  uint64_t i;
  int16x4_t v21;
  int16x4_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  int16x8_t *v28;
  __int16 *v29;
  uint64_t v30;
  int16x4_t *v31;
  _WORD *v32;
  __int16 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int16x8_t v38;
  uint64_t v39;
  __int16 *v41;
  __int16 *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int16x4_t v46;
  int16x4_t v47;
  uint64_t v48;
  uint64_t v49;
  int16x8_t v50;
  unint64_t v52;
  int16x8_t *v53;
  __int16 *v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  uint64_t v58;
  int16x4_t *v59;
  int16x4_t v60;
  int16x4_t v61;
  char v62[8];
  int v63;
  int16x8x3_t v64;
  int16x8x3_t v65;
  int16x8x4_t v66;
  int16x8x4_t v67;

  sub_100298C2C(v62, &off_1004509A0);
  v4 = a2[1];
  v5 = *a2;
  if ((int)v5 >= v4)
    goto LABEL_53;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = v6 * v5;
  v9 = v7 + v6 * v5;
  v11 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v12 = v10 * v5;
  v13 = (int16x4_t *)(v11 + v10 * v5);
  v14 = *(unsigned int *)(a1 + 40);
  if (**(_DWORD **)(a1 + 48) == 3)
  {
    if ((int)v14 < 1)
      goto LABEL_53;
    if (v14 < 0x10)
    {
      v15 = 2 * v14;
      v16 = v12 + v11 + 2;
      do
      {
        v17 = 0;
        v18 = (_WORD *)v16;
        do
        {
          v19 = *(_WORD *)(v9 + v17);
          v18[1] = v19;
          *v18 = v19;
          *(v18 - 1) = v19;
          v17 += 2;
          v18 += 3;
        }
        while (v15 != v17);
        LODWORD(v5) = v5 + 1;
        v9 += v6;
        v16 += v10;
      }
      while ((_DWORD)v5 != v4);
      goto LABEL_53;
    }
    v23 = 0;
    v24 = v8 + v7 + 16;
    v25 = v8 + 2 * v14;
    while (1)
    {
      if ((unint64_t)v13 >= v7 + v25 + v6 * v23
        || v9 >= v11 + v12 + 6 * (unint64_t)v14 + v10 * v23)
      {
        v27 = 0;
        v31 = (int16x4_t *)((char *)v13 + 6 * (v14 & 0xFFFFFFF0));
        v28 = (int16x8_t *)v24;
        do
        {
          v29 = (__int16 *)&v13[v27];
          v64.val[0] = v28[-1];
          v65.val[0] = *v28;
          v64.val[1] = v64.val[0];
          v64.val[2] = v64.val[0];
          v65.val[1] = *v28;
          v65.val[2] = *v28;
          vst3q_s16(v29, v64);
          v29 += 24;
          vst3q_s16(v29, v65);
          v27 += 12;
          v28 += 2;
        }
        while (12 * (v14 >> 4) != v27);
        v30 = v14 & 0x7FFFFFF0;
        if ((v14 & 0xFFFFFFF0) == v14)
          goto LABEL_17;
      }
      else
      {
        v30 = 0;
        v31 = v13;
      }
      v32 = (_WORD *)v31 + 2;
      do
      {
        v33 = *(_WORD *)(v9 + 2 * v30);
        *v32 = v33;
        *(v32 - 1) = v33;
        *(v32 - 2) = v33;
        ++v30;
        v32 += 3;
      }
      while (v14 != v30);
LABEL_17:
      LODWORD(v5) = v5 + 1;
      v9 += v6;
      v13 = (int16x4_t *)((char *)v13 + v10);
      ++v23;
      v24 += v6;
      if ((_DWORD)v5 == v4)
        goto LABEL_53;
    }
  }
  if ((int)v14 >= 1)
  {
    if (v14 > 0xF)
    {
      v34 = v12 + 8 * v14;
      v35 = v8 + 2 * v14;
      if ((v14 & 0xFFFFFFF0) == v14)
      {
        v36 = 0;
        v37 = v12 + v11 + 64;
        v38.i64[0] = -1;
        v38.i64[1] = -1;
        do
        {
          v39 = 0;
          if ((unint64_t)v13 >= v7 + v35 + v6 * v36 || v9 >= v11 + v34 + v10 * v36)
          {
            v41 = (__int16 *)v37;
            do
            {
              v42 = v41 - 32;
              v43 = *(_OWORD *)(v9 + v39);
              v66.val[0] = *(int16x8_t *)(v9 + v39 + 16);
              v44 = v43;
              v45 = v43;
              v66.val[1] = v66.val[0];
              v66.val[2] = v66.val[0];
              v66.val[3] = v38;
              vst4q_s16(v42, *(int16x8x4_t *)(&v38 - 3));
              vst4q_s16(v41, v66);
              v39 += 32;
              v41 += 64;
            }
            while (((2 * v14) & 0x1FFFFFFE0) != v39);
          }
          else
          {
            do
            {
              v46 = (int16x4_t)-1;
              v46.i16[0] = *(_WORD *)(v9 + 2 * v39);
              v47 = vzip1_s16(v46, v46);
              v47.i16[2] = v46.i16[0];
              v13[v39++] = v47;
            }
            while (v14 != v39);
          }
          LODWORD(v5) = v5 + 1;
          v9 += v6;
          v13 = (int16x4_t *)((char *)v13 + v10);
          ++v36;
          v37 += v10;
        }
        while ((_DWORD)v5 != v4);
      }
      else
      {
        v48 = 0;
        v49 = v8 + v7 + 16;
        v50.i64[0] = -1;
        v50.i64[1] = -1;
        do
        {
          if ((unint64_t)v13 >= v7 + v35 + v6 * v48 || v9 >= v11 + v34 + v10 * v48)
          {
            v52 = 0;
            v59 = &v13[v14 & 0xFFFFFFF0];
            v53 = (int16x8_t *)v49;
            do
            {
              v54 = (__int16 *)&v13[v52 / 8];
              v55 = v53[-1];
              v67.val[0] = *v53;
              v56 = v55;
              v57 = v55;
              v67.val[1] = *v53;
              v67.val[2] = *v53;
              v67.val[3] = v50;
              vst4q_s16(v54, *(int16x8x4_t *)(&v50 - 3));
              v54 += 32;
              vst4q_s16(v54, v67);
              v52 += 128;
              v53 += 2;
            }
            while (((8 * v14) & 0x7FFFFFF80) != v52);
            v58 = v14 & 0x7FFFFFF0;
          }
          else
          {
            v58 = 0;
            v59 = v13;
          }
          do
          {
            v60 = (int16x4_t)-1;
            v60.i16[0] = *(_WORD *)(v9 + 2 * v58);
            v61 = vzip1_s16(v60, v60);
            v61.i16[2] = v60.i16[0];
            *v59++ = v61;
            ++v58;
          }
          while (v14 != v58);
          LODWORD(v5) = v5 + 1;
          v9 += v6;
          v13 = (int16x4_t *)((char *)v13 + v10);
          ++v48;
          v49 += v6;
        }
        while ((_DWORD)v5 != v4);
      }
    }
    else
    {
      do
      {
        for (i = 0; i != v14; ++i)
        {
          v21 = (int16x4_t)-1;
          v21.i16[0] = *(_WORD *)(v9 + 2 * i);
          v22 = vzip1_s16(v21, v21);
          v22.i16[2] = v21.i16[0];
          v13[i] = v22;
        }
        LODWORD(v5) = v5 + 1;
        v9 += v6;
        v13 = (int16x4_t *)((char *)v13 + v10);
      }
      while ((_DWORD)v5 != v4);
    }
  }
LABEL_53:
  if (v63)
    sub_1002989D0(v62);
}

void sub_1002C5F9C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C5FC0(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t *v14;
  unint64_t v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  __int32 *v25;
  int32x4_t *v26;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v49;
  float32x4_t *v50;
  float *i32;
  uint64_t v52;
  int32x4_t *v53;
  __int32 *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  float *v63;
  float *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int32x4_t v68;
  int32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v74;
  float32x4_t *v75;
  float *v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  uint64_t v80;
  int32x4_t *v81;
  int32x4_t v82;
  int32x4_t v83;
  char v84[8];
  int v85;
  float32x4x3_t v86;
  float32x4x3_t v87;
  float32x4x4_t v88;
  float32x4x4_t v89;

  sub_100298C2C(v84, &off_100450A00);
  v4 = a2[1];
  v5 = *a2;
  v6 = v4 - v5;
  if (v4 <= (int)v5)
    goto LABEL_62;
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = v7 * v5;
  v10 = v8 + v7 * v5;
  v12 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v13 = v11 * v5;
  v14 = (int32x4_t *)(v12 + v11 * v5);
  v15 = *(unsigned int *)(a1 + 40);
  if (**(_DWORD **)(a1 + 48) == 3)
  {
    if ((int)v15 < 1)
      goto LABEL_62;
    if (v15 < 8)
    {
      v16 = (int *)(v9 + v8 + 12);
      v17 = (int *)(v13 + v12 + 40);
      do
      {
        v18 = *(v16 - 3);
        *(v17 - 9) = v18;
        *(v17 - 8) = v18;
        *(v17 - 10) = v18;
        if ((_DWORD)v15 != 1)
        {
          v19 = *(v16 - 2);
          *(v17 - 6) = v19;
          *(v17 - 5) = v19;
          *(v17 - 7) = v19;
          if ((_DWORD)v15 != 2)
          {
            v20 = *(v16 - 1);
            *(v17 - 3) = v20;
            *(v17 - 2) = v20;
            *(v17 - 4) = v20;
            if ((_DWORD)v15 != 3)
            {
              v21 = *v16;
              *v17 = *v16;
              v17[1] = v21;
              *(v17 - 1) = v21;
              if ((_DWORD)v15 != 4)
              {
                v22 = v16[1];
                v17[3] = v22;
                v17[4] = v22;
                v17[2] = v22;
                if ((_DWORD)v15 != 5)
                {
                  v23 = v16[2];
                  v17[6] = v23;
                  v17[7] = v23;
                  v17[5] = v23;
                  if ((_DWORD)v15 != 6)
                  {
                    v24 = v16[3];
                    v17[9] = v24;
                    v17[10] = v24;
                    v17[8] = v24;
                  }
                }
              }
            }
          }
        }
        v16 = (int *)((char *)v16 + v7);
        v17 = (int *)((char *)v17 + v11);
        --v6;
      }
      while (v6);
      goto LABEL_62;
    }
    v45 = 0;
    v46 = v9 + v8 + 16;
    v47 = v9 + 4 * v15;
    while (1)
    {
      if ((unint64_t)v14 >= v8 + v47 + v7 * v45
        || v10 >= v12 + v13 + 12 * (unint64_t)v15 + v11 * v45)
      {
        v49 = 0;
        v53 = (int32x4_t *)((char *)v14 + 12 * (v15 & 0xFFFFFFF8));
        v50 = (float32x4_t *)v46;
        do
        {
          i32 = (float *)v14[v49].i32;
          v86.val[0] = v50[-1];
          v87.val[0] = *v50;
          v86.val[1] = v86.val[0];
          v86.val[2] = v86.val[0];
          v87.val[1] = *v50;
          v87.val[2] = *v50;
          vst3q_f32(i32, v86);
          i32 += 12;
          vst3q_f32(i32, v87);
          v49 += 6;
          v50 += 2;
        }
        while (6 * (v15 >> 3) != v49);
        v52 = v15 & 0x7FFFFFF8;
        if ((v15 & 0xFFFFFFF8) == v15)
          goto LABEL_26;
      }
      else
      {
        v52 = 0;
        v53 = v14;
      }
      v54 = &v53->i32[2];
      do
      {
        v55 = *(_DWORD *)(v10 + 4 * v52);
        *(v54 - 1) = v55;
        *v54 = v55;
        *(v54 - 2) = v55;
        ++v52;
        v54 += 3;
      }
      while (v15 != v52);
LABEL_26:
      LODWORD(v5) = v5 + 1;
      v10 += v7;
      v14 = (int32x4_t *)((char *)v14 + v11);
      ++v45;
      v46 += v7;
      if ((_DWORD)v5 == v4)
        goto LABEL_62;
    }
  }
  if ((int)v15 >= 1)
  {
    if (v15 > 7)
    {
      v56 = v13 + 16 * v15;
      v57 = v9 + 4 * v15;
      if ((v15 & 0xFFFFFFF8) == v15)
      {
        v58 = 0;
        v59 = v13 + v12 + 64;
        __asm { FMOV            V3.4S, #1.0 }
        do
        {
          v61 = 0;
          if ((unint64_t)v14 >= v8 + v57 + v7 * v58 || v10 >= v12 + v56 + v11 * v58)
          {
            v63 = (float *)v59;
            do
            {
              v64 = v63 - 16;
              v65 = *(_OWORD *)(v10 + v61);
              v88.val[0] = *(float32x4_t *)(v10 + v61 + 16);
              v66 = v65;
              v67 = v65;
              v88.val[1] = v88.val[0];
              v88.val[2] = v88.val[0];
              v88.val[3] = _Q3;
              vst4q_f32(v64, *(float32x4x4_t *)(&_Q3 - 3));
              vst4q_f32(v63, v88);
              v61 += 32;
              v63 += 32;
            }
            while (((4 * v15) & 0x3FFFFFFE0) != v61);
          }
          else
          {
            do
            {
              v68 = (int32x4_t)_Q3;
              v68.i32[0] = *(_DWORD *)(v10 + 4 * v61);
              v69 = vzip1q_s32(v68, v68);
              v69.i32[2] = *(_DWORD *)(v10 + 4 * v61);
              v14[v61++] = v69;
            }
            while (v15 != v61);
          }
          LODWORD(v5) = v5 + 1;
          v10 += v7;
          v14 = (int32x4_t *)((char *)v14 + v11);
          ++v58;
          v59 += v11;
        }
        while ((_DWORD)v5 != v4);
      }
      else
      {
        v70 = 0;
        v71 = v9 + v8 + 16;
        __asm { FMOV            V3.4S, #1.0 }
        do
        {
          if ((unint64_t)v14 >= v8 + v57 + v7 * v70 || v10 >= v12 + v56 + v11 * v70)
          {
            v74 = 0;
            v81 = &v14[v15 & 0xFFFFFFF8];
            v75 = (float32x4_t *)v71;
            do
            {
              v76 = (float *)v14[v74 / 0x10].i32;
              v77 = v75[-1];
              v89.val[0] = *v75;
              v78 = v77;
              v79 = v77;
              v89.val[1] = *v75;
              v89.val[2] = *v75;
              v89.val[3] = _Q3;
              vst4q_f32(v76, *(float32x4x4_t *)(&_Q3 - 3));
              v76 += 16;
              vst4q_f32(v76, v89);
              v74 += 128;
              v75 += 2;
            }
            while (((16 * v15) & 0xFFFFFFF80) != v74);
            v80 = v15 & 0x7FFFFFF8;
          }
          else
          {
            v80 = 0;
            v81 = v14;
          }
          do
          {
            v82 = (int32x4_t)_Q3;
            v82.i32[0] = *(_DWORD *)(v10 + 4 * v80);
            v83 = vzip1q_s32(v82, v82);
            v83.i32[2] = *(_DWORD *)(v10 + 4 * v80);
            *v81++ = v83;
            ++v80;
          }
          while (v15 != v80);
          LODWORD(v5) = v5 + 1;
          v10 += v7;
          v14 = (int32x4_t *)((char *)v14 + v11);
          ++v70;
          v71 += v7;
        }
        while ((_DWORD)v5 != v4);
      }
    }
    else
    {
      v25 = (__int32 *)(v9 + v8 + 12);
      v26 = (int32x4_t *)(v13 + v12 + 48);
      __asm { FMOV            V0.4S, #1.0 }
      do
      {
        v31 = _Q0;
        v31.i32[0] = *(v25 - 3);
        v32 = vzip1q_s32(v31, v31);
        v32.i32[2] = *(v25 - 3);
        v26[-3] = v32;
        if ((_DWORD)v15 != 1)
        {
          v33 = _Q0;
          v33.i32[0] = *(v25 - 2);
          v34 = vzip1q_s32(v33, v33);
          v34.i32[2] = *(v25 - 2);
          v26[-2] = v34;
          if ((_DWORD)v15 != 2)
          {
            v35 = _Q0;
            v35.i32[0] = *(v25 - 1);
            v36 = vzip1q_s32(v35, v35);
            v36.i32[2] = *(v25 - 1);
            v26[-1] = v36;
            if ((_DWORD)v15 != 3)
            {
              v37 = _Q0;
              v37.i32[0] = *v25;
              v38 = vzip1q_s32(v37, v37);
              v38.i32[2] = *v25;
              *v26 = v38;
              if ((_DWORD)v15 != 4)
              {
                v39 = _Q0;
                v39.i32[0] = v25[1];
                v40 = vzip1q_s32(v39, v39);
                v40.i32[2] = v25[1];
                v26[1] = v40;
                if ((_DWORD)v15 != 5)
                {
                  v41 = _Q0;
                  v41.i32[0] = v25[2];
                  v42 = vzip1q_s32(v41, v41);
                  v42.i32[2] = v25[2];
                  v26[2] = v42;
                  if ((_DWORD)v15 != 6)
                  {
                    v43 = _Q0;
                    v43.i32[0] = v25[3];
                    v44 = vzip1q_s32(v43, v43);
                    v44.i32[2] = v25[3];
                    v26[3] = v44;
                  }
                }
              }
            }
          }
        }
        v25 = (__int32 *)((char *)v25 + v7);
        v26 = (int32x4_t *)((char *)v26 + v11);
        --v6;
      }
      while (v6);
    }
  }
LABEL_62:
  if (v85)
    sub_1002989D0(v84);
}

void sub_1002C649C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C64C0(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  int16x8_t *v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450A60);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4;
    v6 = (int16x8_t *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4);
    do
    {
      sub_1002C6584(*(_QWORD *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 = (int16x8_t *)((char *)v6 + *(_QWORD *)(a1 + 16));
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002C6570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C6584(uint64_t result, int16x8_t *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  int16x8_t *v6;
  int16x8_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unsigned int v17;
  int16x8_t *v18;
  int16x8_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  uint16x8_t *v32;
  int8x16_t *v33;
  uint16x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  uint16x4_t v37;
  uint16x4_t v38;
  int32x4_t v39;
  unint64_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint32x4_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint16x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint16x8_t *v53;
  uint16x4_t v54;
  uint16x4_t v55;
  int32x4_t v56;
  uint16x8_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  int8x16_t *v60;
  int8x16_t v61;
  uint16x8_t *v62;
  uint16x4_t v63;
  uint16x4_t v64;
  uint16x4_t v65;
  int32x4_t v66;
  unint64_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint32x4_t v70;
  uint32x4_t v71;
  uint32x4_t v72;
  uint32x4_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  int8x16_t v77;
  uint16x4_t v78;
  uint16x4_t v79;
  uint16x8_t *v80;
  uint16x4_t v81;
  int32x4_t v82;
  uint16x8_t v83;
  uint32x4_t v84;
  uint32x4_t v85;
  int8x16x2_t v86;
  int8x16x2_t v87;
  int8x16x4_t v88;
  int8x16x4_t v89;

  if (*(_DWORD *)result != 6)
  {
    if ((int)a4 >= 8)
    {
      v5 = 0;
      v18 = a2;
      do
      {
        v19 = *v18++;
        v20 = *(int8x16_t *)(result + 48);
        v21 = vandq_s8((int8x16_t)vshlq_n_s16(v19, 3uLL), v20);
        v22 = vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v19, 2uLL), v20);
        v23 = vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v19, 7uLL), v20);
        *(int8x8_t *)(a3 + v5) = vmovn_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v22.i8, *(uint16x4_t *)(result + 16)), *(uint16x4_t *)v21.i8, *(uint16x4_t *)(result + 8)), *(uint16x4_t *)v23.i8, *(uint16x4_t *)(result + 24)), *(int32x4_t *)(result + 32)), 0xEuLL), vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), *(uint16x4_t *)(result + 16)), (uint16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL),
                                                      *(uint16x4_t *)(result + 8)),
                                                    (uint16x4_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL),
                                                    *(uint16x4_t *)(result + 24)),
                                       *(int32x4_t *)(result + 32)),
                                     0xEuLL));
        v5 += 8;
      }
      while (v5 <= a4 - 8);
    }
    else
    {
      LODWORD(v5) = 0;
    }
    if ((int)v5 >= (int)a4)
      return result;
    v24 = a4 - (unint64_t)v5;
    if (v24 < 8
      || a3 + (unint64_t)v5 < (unint64_t)a2 + 2 * a4
      && (unint64_t)a2 + 2 * v5 < a3 + (unint64_t)a4)
    {
      v25 = v5;
      goto LABEL_23;
    }
    if (v24 >= 0x10)
    {
      v31 = v24 & 0xFFFFFFFFFFFFFFF0;
      v60 = (int8x16_t *)(a3 + v5);
      v61.i64[0] = 0xF8000000F8;
      v61.i64[1] = 0xF8000000F8;
      v62 = (uint16x8_t *)((char *)a2 + 2 * v5);
      v63 = (uint16x4_t)vdup_n_s16(0x74Cu);
      v64 = (uint16x4_t)vdup_n_s16(0x2591u);
      v65 = (uint16x4_t)vdup_n_s16(0x1323u);
      v66.i64[0] = 0x200000002000;
      v66.i64[1] = 0x200000002000;
      v67 = v24 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v69 = *v62;
        v68 = v62[1];
        v62 += 2;
        v70 = vmovl_u16(*(uint16x4_t *)v69.i8);
        v71 = vmovl_u16(*(uint16x4_t *)v68.i8);
        v72 = vmovl_high_u16(v69);
        v73 = vmovl_high_u16(v68);
        v88.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v73, 2uLL), v61)), v64), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v68, 3uLL), v61)), v63), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v73, 7uLL), v61)), v65), v66), 0xEuLL);
        v88.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v72, 2uLL), v61)), v64), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v69, 3uLL), v61)), v63), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v72, 7uLL), v61)), v65), v66), 0xEuLL);
        v88.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v71, 2uLL), v61)), v64), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v68.i8, 3uLL), v61)), v63), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v71, 7uLL), v61)), v65), v66), 0xEuLL);
        v88.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v70, 2uLL), v61)), v64), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v69.i8, 3uLL), v61)), v63), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v70, 7uLL), v61)), v65), v66), 0xEuLL);
        *v60++ = vqtbl4q_s8(v88, (int8x16_t)xmmword_1003BC960);
        v67 -= 16;
      }
      while (v67);
      if (v24 == v31)
        return result;
      if ((v24 & 8) == 0)
      {
        v25 = v31 + v5;
        goto LABEL_23;
      }
    }
    else
    {
      v31 = 0;
    }
    v25 = (v24 & 0xFFFFFFFFFFFFFFF8) + v5;
    v74 = v31 - (v24 & 0xFFFFFFFFFFFFFFF8);
    v75 = v31 + v5;
    v76 = (_QWORD *)(a3 + v75);
    v77.i64[0] = 0xF8000000F8;
    v77.i64[1] = 0xF8000000F8;
    v78 = (uint16x4_t)vdup_n_s16(0x74Cu);
    v79 = (uint16x4_t)vdup_n_s16(0x2591u);
    v80 = (uint16x8_t *)((char *)a2 + 2 * v75);
    v81 = (uint16x4_t)vdup_n_s16(0x1323u);
    v82.i64[0] = 0x200000002000;
    v82.i64[1] = 0x200000002000;
    do
    {
      v83 = *v80++;
      v84 = vmovl_u16(*(uint16x4_t *)v83.i8);
      v85 = vmovl_high_u16(v83);
      v87.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v85, 2uLL), v77)), v79), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v83, 3uLL), v77)), v78), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v85, 7uLL), v77)), v81), v82), 0xEuLL);
      v87.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v84, 2uLL), v77)), v79), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v83.i8, 3uLL), v77)), v78), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v84, 7uLL), v77)), v81), v82), 0xEuLL);
      *v76++ = vqtbl2q_s8(v87, (int8x16_t)xmmword_1003BC970).u64[0];
      v74 += 8;
    }
    while (v74);
    if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
      return result;
LABEL_23:
    v26 = (_BYTE *)(a3 + v25);
    v27 = a4 - v25;
    v28 = (unsigned __int16 *)a2 + v25;
    do
    {
      v29 = *v28++;
      *v26++ = (14944 * (v29 & 0x1F) + 9617 * ((v29 >> 2) & 0xF8) + 4899 * ((v29 >> 7) & 0xF8) + 0x2000) >> 14;
      --v27;
    }
    while (v27);
    return result;
  }
  if ((int)a4 >= 8)
  {
    v4 = 0;
    v6 = a2;
    do
    {
      v7 = *v6++;
      v8 = *(int8x16_t *)(result + 48);
      v9 = vandq_s8((int8x16_t)vshlq_n_s16(v7, 3uLL), v8);
      v10 = vandq_s8(*(int8x16_t *)(result + 64), (int8x16_t)vshrq_n_u16((uint16x8_t)v7, 3uLL));
      v11 = vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v7, 8uLL), v8);
      *(int8x8_t *)(a3 + v4) = vmovn_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v10.i8, *(uint16x4_t *)(result + 16)), *(uint16x4_t *)v9.i8, *(uint16x4_t *)(result + 8)), *(uint16x4_t *)v11.i8, *(uint16x4_t *)(result + 24)), *(int32x4_t *)(result + 32)), 0xEuLL), vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), *(uint16x4_t *)(result + 16)), (uint16x4_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL),
                                                    *(uint16x4_t *)(result + 8)),
                                                  (uint16x4_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL),
                                                  *(uint16x4_t *)(result + 24)),
                                     *(int32x4_t *)(result + 32)),
                                   0xEuLL));
      v4 += 8;
    }
    while (v4 <= a4 - 8);
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((int)v4 < (int)a4)
  {
    v12 = a4 - (unint64_t)v4;
    if (v12 < 8
      || a3 + (unint64_t)v4 < (unint64_t)a2 + 2 * a4
      && (unint64_t)a2 + 2 * v4 < a3 + (unint64_t)a4)
    {
      v13 = v4;
      goto LABEL_13;
    }
    if (v12 >= 0x10)
    {
      v30 = v12 & 0xFFFFFFFFFFFFFFF0;
      v32 = (uint16x8_t *)((char *)a2 + 2 * v4);
      v33 = (int8x16_t *)(a3 + v4);
      v34 = (uint16x4_t)vdup_n_s16(0x74Cu);
      v35.i64[0] = 0xF8000000F8;
      v35.i64[1] = 0xF8000000F8;
      v36.i64[0] = 0xFC000000FCLL;
      v36.i64[1] = 0xFC000000FCLL;
      v37 = (uint16x4_t)vdup_n_s16(0x2591u);
      v38 = (uint16x4_t)vdup_n_s16(0x1323u);
      v39.i64[0] = 0x200000002000;
      v39.i64[1] = 0x200000002000;
      v40 = v12 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v42 = *v32;
        v41 = v32[1];
        v32 += 2;
        v43 = vmovl_u16(*(uint16x4_t *)v42.i8);
        v44 = vmovl_u16(*(uint16x4_t *)v41.i8);
        v45 = vmovl_high_u16(v42);
        v46 = vmovl_high_u16(v41);
        v89.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v46, 3uLL), v36)), v37), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v41, 3uLL), v35)), v34), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v46, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v38), v39), 0xEuLL);
        v89.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v45, 3uLL), v36)), v37), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v42, 3uLL), v35)), v34), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v45, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v38), v39), 0xEuLL);
        v89.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v44, 3uLL), v36)), v37), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v41.i8, 3uLL), v35)), v34), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v44, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v38), v39), 0xEuLL);
        v89.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v43, 3uLL), v36)), v37), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v42.i8, 3uLL), v35)), v34), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v43, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v38), v39), 0xEuLL);
        *v33++ = vqtbl4q_s8(v89, (int8x16_t)xmmword_1003BC960);
        v40 -= 16;
      }
      while (v40);
      if (v12 == v30)
        return result;
      if ((v12 & 8) == 0)
      {
        v13 = v30 + v4;
LABEL_13:
        v14 = (_BYTE *)(a3 + v13);
        v15 = a4 - v13;
        v16 = (unsigned __int16 *)a2 + v13;
        do
        {
          v17 = *v16++;
          *v14++ = (14944 * (v17 & 0x1F) + 9617 * ((v17 >> 3) & 0xFC) + 4899 * ((v17 >> 8) & 0xF8) + 0x2000) >> 14;
          --v15;
        }
        while (v15);
        return result;
      }
    }
    else
    {
      v30 = 0;
    }
    v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + v4;
    v47 = v30 - (v12 & 0xFFFFFFFFFFFFFFF8);
    v48 = v30 + v4;
    v49 = (_QWORD *)(a3 + v48);
    v50 = (uint16x4_t)vdup_n_s16(0x74Cu);
    v51.i64[0] = 0xF8000000F8;
    v51.i64[1] = 0xF8000000F8;
    v52.i64[0] = 0xFC000000FCLL;
    v52.i64[1] = 0xFC000000FCLL;
    v53 = (uint16x8_t *)((char *)a2 + 2 * v48);
    v54 = (uint16x4_t)vdup_n_s16(0x2591u);
    v55 = (uint16x4_t)vdup_n_s16(0x1323u);
    v56.i64[0] = 0x200000002000;
    v56.i64[1] = 0x200000002000;
    do
    {
      v57 = *v53++;
      v58 = vmovl_u16(*(uint16x4_t *)v57.i8);
      v59 = vmovl_high_u16(v57);
      v86.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v59, 3uLL), v52)), v54), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v57, 3uLL), v51)), v50), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v59, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v55), v56), 0xEuLL);
      v86.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v58, 3uLL), v52)), v54), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v57.i8, 3uLL), v51)), v50), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v58, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v55), v56), 0xEuLL);
      *v49++ = vqtbl2q_s8(v86, (int8x16_t)xmmword_1003BC970).u64[0];
      v47 += 8;
    }
    while (v47);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_13;
  }
  return result;
}

void sub_1002C6C48(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C6C6C(uint64_t a1, int *a2)
{
  int8x16_t v4;
  int v5;
  int8x16_t *v6;
  uint64_t v7;
  int16x8_t v8;
  int8x8_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int8x16_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unint64_t v20;
  int8x16_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  int8x16_t *v32;
  uint64_t v33;
  int32x4_t v34;
  int32x4_t v35;
  unint64_t v36;
  int8x16_t *v37;
  int8x16_t *v38;
  unint64_t v39;
  int8x16_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint8x16_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint8x16_t v48;
  uint8x16_t v49;
  unint64_t v50;
  uint64_t v51;
  uint8x8_t *v52;
  int8x16_t *v53;
  uint8x8_t v54;
  char v55[8];
  int v56;

  sub_100298C2C(v55, &off_100450AC0);
  v5 = *a2;
  if (*a2 < a2[1])
  {
    v6 = (int8x16_t *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v5);
    v7 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v5;
    v8 = vdupq_n_s16(0x421u);
    do
    {
      v9 = *(int8x8_t **)(a1 + 48);
      v10 = *(unsigned int *)(a1 + 40);
      if (v9->i32[0] == 6)
      {
        if ((int)v10 >= 8)
        {
          v11 = 0;
          v13 = v6;
          do
          {
            v4 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(v9[2], *(int8x8_t *)(v7 + v11)), 3uLL), (int8x16_t)vmovl_u8(vshr_n_u8(*(uint8x8_t *)(v7 + v11), 3uLL))), (int8x16_t)vshll_n_s8(vand_s8(v9[1], *(int8x8_t *)(v7 + v11)), 8uLL));
            *v13++ = v4;
            v11 += 8;
          }
          while (v11 <= (v10 - 8));
          v11 = v11;
          if ((int)v11 >= (int)v10)
            goto LABEL_3;
LABEL_14:
          v14 = v10 - v11;
          if (v10 - v11 < 8 || (unint64_t)v6 + 2 * v11 < v7 + v10 && v7 + v11 < (unint64_t)v6 + 2 * v10)
          {
            v15 = v11;
            goto LABEL_18;
          }
          if (v14 >= 0x10)
          {
            v28 = v14 & 0xFFFFFFFFFFFFFFF0;
            v37 = (int8x16_t *)(v7 + v11);
            v38 = (int8x16_t *)((char *)v6 + 2 * v11);
            v39 = v14 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v40 = *v37++;
              v41 = (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1003BCA90);
              v42 = (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1003BCAA0);
              v43 = (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1003BCAB0);
              v44 = (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1003BCAC0);
              v4 = (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v43, 3uLL) & __PAIR128__(0xFFFFFFE7FFFFFFE7, 0xFFFFFFE7FFFFFFE7)), (int8x16_t)vshrq_n_u32((uint32x4_t)v43, 3uLL)), (int8x16_t)(*(_OWORD *)&vshlq_n_s32(v43, 8uLL) & __PAIR128__(0xFFFFF8FFFFFFF8FFLL, 0xFFFFF8FFFFFFF8FFLL))), (int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v44, 3uLL) & __PAIR128__(0xFFFFFFE7FFFFFFE7, 0xFFFFFFE7FFFFFFE7)), (int8x16_t)vshrq_n_u32((uint32x4_t)v44, 3uLL)), (int8x16_t)(*(_OWORD *)&vshlq_n_s32(v44, 8uLL) & __PAIR128__(0xFFFFF8FFFFFFF8FFLL, 0xFFFFF8FFFFFFF8FFLL))));
              *(int16x8_t *)v38 = vuzp1q_s16((int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v41, 3uLL) & __PAIR128__(0xFFFFFFE7FFFFFFE7, 0xFFFFFFE7FFFFFFE7)), (int8x16_t)vshrq_n_u32((uint32x4_t)v41, 3uLL)), (int8x16_t)(*(_OWORD *)&vshlq_n_s32(v41, 8uLL) & __PAIR128__(0xFFFFF8FFFFFFF8FFLL, 0xFFFFF8FFFFFFF8FFLL))), (int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v42, 3uLL) & __PAIR128__(0xFFFFFFE7FFFFFFE7, 0xFFFFFFE7FFFFFFE7)), (int8x16_t)vshrq_n_u32((uint32x4_t)v42, 3uLL)), (int8x16_t)(*(_OWORD *)&vshlq_n_s32(v42, 8uLL) & __PAIR128__(0xFFFFF8FFFFFFF8FFLL, 0xFFFFF8FFFFFFF8FFLL))));
              v38[1] = v4;
              v38 += 2;
              v39 -= 16;
            }
            while (v39);
            if (v14 == v28)
              goto LABEL_3;
            if ((v14 & 8) == 0)
            {
              v15 = v28 + v11;
LABEL_18:
              v16 = v10 - v15;
              v17 = &v6->i16[v15];
              v18 = (unsigned __int8 *)(v7 + v15);
              do
              {
                v19 = *v18++;
                *v17++ = (v19 >> 3) & 0x1F | (32 * (v19 >> 2)) & 0x7FF | (v19 >> 3 << 11);
                --v16;
              }
              while (v16);
              goto LABEL_3;
            }
          }
          else
          {
            v28 = 0;
          }
          v15 = (v14 & 0xFFFFFFFFFFFFFFF8) + v11;
          v29 = v28 - (v14 & 0xFFFFFFFFFFFFFFF8);
          v30 = v28 + v11;
          v31 = (uint64_t *)(v7 + v30);
          v32 = (int8x16_t *)((char *)v6 + 2 * v30);
          do
          {
            v33 = *v31++;
            v4.i64[0] = v33;
            v34 = (int32x4_t)vqtbl1q_s8(v4, (int8x16_t)xmmword_1003BCA90);
            v35 = (int32x4_t)vqtbl1q_s8(v4, (int8x16_t)xmmword_1003BCAA0);
            v4 = (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v34, 3uLL) & __PAIR128__(0xFFFFFFE7FFFFFFE7, 0xFFFFFFE7FFFFFFE7)), (int8x16_t)vshrq_n_u32((uint32x4_t)v34, 3uLL)), (int8x16_t)(*(_OWORD *)&vshlq_n_s32(v34, 8uLL) & __PAIR128__(0xFFFFF8FFFFFFF8FFLL, 0xFFFFF8FFFFFFF8FFLL))), (int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v35, 3uLL) & __PAIR128__(0xFFFFFFE7FFFFFFE7, 0xFFFFFFE7FFFFFFE7)), (int8x16_t)vshrq_n_u32((uint32x4_t)v35, 3uLL)), (int8x16_t)(*(_OWORD *)&vshlq_n_s32(v35, 8uLL) & __PAIR128__(0xFFFFF8FFFFFFF8FFLL, 0xFFFFF8FFFFFFF8FFLL))));
            *v32++ = v4;
            v29 += 8;
          }
          while (v29);
          if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_3;
          goto LABEL_18;
        }
        v11 = 0;
        if ((int)v10 > 0)
          goto LABEL_14;
      }
      else
      {
        if ((int)v10 >= 8)
        {
          v20 = 0;
          v21 = v6;
          do
          {
            v4 = (int8x16_t)vmulq_s16((int16x8_t)vmovl_u8(vshr_n_u8(*(uint8x8_t *)(v7 + v20), 3uLL)), v8);
            *v21++ = v4;
            v20 += 8;
          }
          while (v20 <= (v10 - 8));
          v12 = v20;
          if ((int)v20 >= (int)v10)
            goto LABEL_3;
LABEL_24:
          v22 = v10 - v12;
          if ((unint64_t)(v10 - v12) < 8
            || (unint64_t)v6 + 2 * v12 < v7 + v10 && v7 + v12 < (unint64_t)v6 + 2 * v10)
          {
            v23 = v12;
            goto LABEL_28;
          }
          if (v22 >= 0x20)
          {
            v36 = v22 & 0xFFFFFFFFFFFFFFE0;
            v45 = (uint8x16_t *)(v7 + v12 + 16);
            v46 = (uint64_t)v6[2].i64 + 2 * v12;
            v47 = v22 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v48 = vshrq_n_u8(v45[-1], 3uLL);
              v49 = vshrq_n_u8(*v45, 3uLL);
              *(int16x8_t *)(v46 - 32) = vmulq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v48.i8), v8);
              *(int16x8_t *)(v46 - 16) = vmulq_s16((int16x8_t)vmovl_high_u8(v48), v8);
              v4 = (int8x16_t)vmulq_s16((int16x8_t)vmovl_high_u8(v49), v8);
              *(int16x8_t *)v46 = vmulq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v49.i8), v8);
              *(int8x16_t *)(v46 + 16) = v4;
              v46 += 64;
              v45 += 2;
              v47 -= 32;
            }
            while (v47);
            if (v22 == v36)
              goto LABEL_3;
            if ((v22 & 0x18) == 0)
            {
              v23 = v36 + v12;
LABEL_28:
              v24 = v10 - v23;
              v25 = &v6->i16[v23];
              v26 = (unsigned __int8 *)(v7 + v23);
              do
              {
                v27 = *v26++;
                *v25++ = 1057 * (v27 >> 3);
                --v24;
              }
              while (v24);
              goto LABEL_3;
            }
          }
          else
          {
            v36 = 0;
          }
          v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + v12;
          v50 = v36 - (v22 & 0xFFFFFFFFFFFFFFF8);
          v51 = v36 + v12;
          v52 = (uint8x8_t *)(v7 + v51);
          v53 = (int8x16_t *)((char *)v6 + 2 * v51);
          do
          {
            v54 = *v52++;
            v4 = (int8x16_t)vmulq_s16((int16x8_t)vmovl_u8(vshr_n_u8(v54, 3uLL)), v8);
            *v53++ = v4;
            v50 += 8;
          }
          while (v50);
          if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_3;
          goto LABEL_28;
        }
        v12 = 0;
        if ((int)v10 > 0)
          goto LABEL_24;
      }
LABEL_3:
      ++v5;
      v7 += *(_QWORD *)(a1 + 16);
      v6 = (int8x16_t *)((char *)v6 + *(_QWORD *)(a1 + 32));
    }
    while (v5 < a2[1]);
  }
  if (v56)
    sub_1002989D0(v55);
}

void sub_1002C70B0(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C70D4(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  const char *v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450B20);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4;
    v6 = (const char *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4);
    do
    {
      sub_1002C7198(*(_QWORD *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002C7184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C7198(uint64_t result, const char *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int v17;
  int64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int32x4_t v32;
  int16x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  char *v44;
  _BYTE v45[24];
  _QWORD v46[3];
  int8x8x4_t v47;

  v4 = *(int *)result;
  v5 = *(int *)(result + 4);
  v6 = *(unsigned __int8 *)(result + 28);
  v7 = *(_DWORD *)(result + 8);
  v8 = *(_DWORD *)(result + 12);
  v9 = *(_DWORD *)(result + 16);
  v10 = *(_DWORD *)(result + 20);
  v11 = 3 * a4;
  v12 = *(_DWORD *)(result + 24);
  if (a4 >= 8)
  {
    v13 = 0;
    v25 = 1;
    if (*(_BYTE *)(result + 28))
      v26 = 1;
    else
      v26 = 2;
    if (*(_BYTE *)(result + 28))
      v25 = 2;
    do
    {
      if ((_DWORD)v4 == 3)
        *(int8x8x3_t *)v47.val[0].i8 = vld3_s8(a2);
      else
        v47 = vld4_s8(a2);
      v27 = (int8x16_t)vmovl_u8((uint8x8_t)v47.val[2]);
      v28 = (int8x16_t)vmovl_u8((uint8x8_t)v47.val[1]);
      v29 = (int8x16_t)vmovl_u8((uint8x8_t)v47.val[0]);
      v30 = *(int16x4_t *)(result + 32);
      v31 = *(int16x4_t *)(result + 40);
      v32 = vmlal_s16(vmull_s16(*(int16x4_t *)v28.i8, v31), *(int16x4_t *)v29.i8, v30);
      v33 = (int16x4_t)vextq_s8(v29, v29, 8uLL).u64[0];
      v29.i64[1] = v28.i64[0];
      *(int8x16_t *)v45 = v29;
      *(_QWORD *)&v45[16] = v27.i64[0];
      v29.i64[0] = *(_QWORD *)(result + 48);
      v34 = *(int32x4_t *)(result + 112);
      v35 = vshrq_n_s32(vaddq_s32(vmlal_s16(v32, *(int16x4_t *)v27.i8, *(int16x4_t *)v29.i8), v34), 0xEuLL);
      v36 = vaddq_s32(*(int32x4_t *)(result + 96), v34);
      v37 = *(int32x4_t *)(result + 64);
      v38 = *(int32x4_t *)(result + 80);
      v39 = vshrq_n_s32(vmlaq_s32(v36, vsubq_s32(vmovl_s16(*(int16x4_t *)&v45[8 * (int)(v5 ^ 2)]), v35), v37), 0xEuLL);
      v40 = vshrq_n_s32(vmlaq_s32(v36, vsubq_s32(vmovl_s16(*(int16x4_t *)&v45[8 * v5]), v35), v38), 0xEuLL);
      *(int16x4_t *)v45 = v33;
      v28.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
      v28.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
      *(int8x16_t *)&v45[8] = v28;
      v41 = vshrq_n_s32(vmlal_s16(vmlal_s16(vmlal_s16(v34, v33, v30), *(int16x4_t *)v28.i8, v31), (int16x4_t)v28.u64[1], *(int16x4_t *)v29.i8), 0xEuLL);
      v42 = vshrq_n_s32(vmlaq_s32(v36, vsubq_s32(vmovl_s16(*(int16x4_t *)&v45[8 * (int)(v5 ^ 2)]), v41), v37), 0xEuLL);
      v43 = vshrq_n_s32(vmlaq_s32(v36, vsubq_s32(vmovl_s16(*(int16x4_t *)&v45[8 * v5]), v41), v38), 0xEuLL);
      *(int8x8_t *)v35.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v35), v41));
      v46[0] = v35.i64[0];
      v46[v26] = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v39), v42));
      v46[v25] = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v40), v43));
      v27.i64[0] = v46[1];
      v28.i64[0] = v46[2];
      v44 = (char *)(a3 + v13);
      vst3_s8(v44, *(int8x8x3_t *)((char *)&v27 - 8));
      v13 += 24;
      a2 += 8 * v4;
    }
    while (v13 <= v11 - 24);
  }
  else
  {
    LODWORD(v13) = 0;
  }
  if ((int)v13 < v11)
  {
    result = 2105344;
    v14 = v6 == 0;
    if (v6)
      v15 = 1;
    else
      v15 = 2;
    v16 = v13;
    if (v14)
      v17 = 1;
    else
      v17 = 2;
    v18 = (unint64_t)(v17 + v13) << 32;
    do
    {
      v19 = v8 * *((unsigned __int8 *)a2 + 1) + v7 * *(unsigned __int8 *)a2 + v9 * *((unsigned __int8 *)a2 + 2) + 0x2000;
      v20 = (a2[v5 ^ 2] - (v19 >> 14)) * v10 + 2105344;
      v21 = (a2[v5] - (v19 >> 14)) * v12 + 2105344;
      v22 = (v19 >> 14) & ~(v19 >> 31);
      if (v22 >= 255)
        LOBYTE(v22) = -1;
      *(_BYTE *)(a3 + v16) = v22;
      v23 = (v20 >> 14) & ~(v20 >> 31);
      if (v23 >= 255)
        LOBYTE(v23) = -1;
      *(_BYTE *)(a3 + (v15 + v16)) = v23;
      v24 = (v21 >> 14) & ~(v21 >> 31);
      if (v24 >= 255)
        LOBYTE(v24) = -1;
      *(_BYTE *)(a3 + (v18 >> 32)) = v24;
      v16 += 3;
      a2 += v4;
      v18 += 0x300000000;
    }
    while (v16 < v11);
  }
  return result;
}

void sub_1002C740C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C7430(uint64_t a1, int *a2)
{
  int v4;
  __int16 *v5;
  const __int16 *v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450B80);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (__int16 *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = (const __int16 *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4);
    do
    {
      sub_1002C74F4(*(_QWORD *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 = (const __int16 *)((char *)v6 + *(_QWORD *)(a1 + 16));
      v5 = (__int16 *)((char *)v5 + *(_QWORD *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002C74E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C74F4(uint64_t result, const __int16 *a2, __int16 *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  int32x4_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  int v24;
  int64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int16 *v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int16x8_t v54;
  int16x4x3_t v55;
  int16x4x3_t v56;
  int16x4x3_t v57;
  int16x8x3_t v58;
  int16x4x4_t v59;
  int16x8x4_t v60;

  v5 = *(int *)result;
  v4 = *(int *)(result + 4);
  v6 = *(unsigned __int8 *)(result + 28);
  v7 = *(_DWORD *)(result + 8);
  v8 = *(_DWORD *)(result + 12);
  v9 = *(_DWORD *)(result + 16);
  v10 = *(_DWORD *)(result + 20);
  v11 = 3 * a4;
  v12 = *(_DWORD *)(result + 24);
  if (a4 >= 8)
  {
    v13 = 0;
    v33 = 1;
    if (*(_BYTE *)(result + 28))
      v34 = 1;
    else
      v34 = 2;
    if (*(_BYTE *)(result + 28))
      v33 = 2;
    v35 = a3;
    do
    {
      if ((_DWORD)v5 == 3)
        *(int16x8x3_t *)v60.val[0].i8 = vld3q_s16(a2);
      else
        v60 = vld4q_s16(a2);
      v49 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v60.val[0].i8);
      v50 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v60.val[1].i8);
      v51 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v60.val[2].i8);
      v36 = *(int32x4_t *)(result + 32);
      v37 = *(int32x4_t *)(result + 48);
      v38 = *(int32x4_t *)(result + 64);
      v39 = *(int32x4_t *)(result + 80);
      v40 = *(int32x4_t *)(result + 128);
      v41 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v36, v49), v37, v50), v38, v51), v40), 0xEuLL);
      v42 = *(int32x4_t *)(result + 96);
      v43 = vaddq_s32(*(int32x4_t *)(result + 112), v40);
      v44 = vshrq_n_s32(vmlaq_s32(v43, vsubq_s32(*(&v49 + (int)(v4 ^ 2)), v41), v39), 0xEuLL);
      v45 = vshrq_n_s32(vmlaq_s32(v43, vsubq_s32(*(&v49 + v4), v41), v42), 0xEuLL);
      v49 = (int32x4_t)vmovl_high_u16((uint16x8_t)v60.val[0]);
      v50 = (int32x4_t)vmovl_high_u16((uint16x8_t)v60.val[1]);
      v51 = (int32x4_t)vmovl_high_u16((uint16x8_t)v60.val[2]);
      v46 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v36, v49), v37, v50), v38, v51), v40), 0xEuLL);
      v47 = vshrq_n_s32(vmlaq_s32(v43, vsubq_s32(*(&v49 + (int)(v4 ^ 2)), v46), v39), 0xEuLL);
      v48 = vshrq_n_s32(vmlaq_s32(v43, vsubq_s32(*(&v49 + v4), v46), v42), 0xEuLL);
      v58.val[0] = vqmovun_high_s32(vqmovun_s32(v41), v46);
      v52 = (int32x4_t)v58.val[0];
      *((int16x8_t *)&v52 + v34) = vqmovun_high_s32(vqmovun_s32(v44), v47);
      *((int16x8_t *)&v52 + v33) = vqmovun_high_s32(vqmovun_s32(v45), v48);
      v58.val[1] = (int16x8_t)v53;
      v58.val[2] = v54;
      vst3q_s16(v35, v58);
      v35 += 24;
      v13 += 24;
      a2 += 8 * v5;
    }
    while (v13 <= v11 - 24);
  }
  else
  {
    LODWORD(v13) = 0;
  }
  v14 = v11 - 12;
  if ((int)v13 <= v11 - 12)
  {
    v15 = (int)(v4 ^ 2);
    v16 = 1;
    if (v6)
      v17 = 1;
    else
      v17 = 2;
    if (v6)
      v16 = 2;
    v18 = 8 * v5;
    v19 = &a3[v13];
    if ((_DWORD)v5 == 3)
    {
      do
      {
        v55 = vld3_s16(a2);
        a2 = (const __int16 *)((char *)a2 + v18);
        v52 = (int32x4_t)vmovl_u16((uint16x4_t)v55.val[0]);
        v53 = (int32x4_t)vmovl_u16((uint16x4_t)v55.val[1]);
        *(uint32x4_t *)v55.val[0].i8 = vmovl_u16((uint16x4_t)v55.val[2]);
        *(_OWORD *)v55.val[2].i8 = *(_OWORD *)(result + 48);
        *(int32x4_t *)v55.val[1].i8 = vmulq_s32(*(int32x4_t *)(result + 32), v52);
        v54 = *(int16x8_t *)v55.val[0].i8;
        *(int32x4_t *)v55.val[1].i8 = vmlaq_s32(vmlaq_s32(*(int32x4_t *)v55.val[1].i8, *(int32x4_t *)v55.val[2].i8, v53), *(int32x4_t *)(result + 64), *(int32x4_t *)v55.val[0].i8);
        *(_OWORD *)v55.val[0].i8 = *(_OWORD *)(result + 128);
        *(int32x4_t *)v55.val[1].i8 = vshrq_n_s32(vaddq_s32(*(int32x4_t *)v55.val[1].i8, *(int32x4_t *)v55.val[0].i8), 0xEuLL);
        *(int32x4_t *)v55.val[0].i8 = vaddq_s32(*(int32x4_t *)(result + 112), *(int32x4_t *)v55.val[0].i8);
        v20 = vshrq_n_s32(vmlaq_s32(*(int32x4_t *)v55.val[0].i8, vsubq_s32(*(&v52 + v15), *(int32x4_t *)v55.val[1].i8), *(int32x4_t *)(result + 80)), 0xEuLL);
        *(int32x4_t *)v55.val[0].i8 = vshrq_n_s32(vmlaq_s32(*(int32x4_t *)v55.val[0].i8, vsubq_s32(*(&v52 + v4), *(int32x4_t *)v55.val[1].i8), *(int32x4_t *)(result + 96)), 0xEuLL);
        v56.val[0] = vqmovun_s32(*(int32x4_t *)v55.val[1].i8);
        v49.i64[0] = (uint64_t)v56.val[0];
        *(int16x4_t *)&v49.i8[8 * v17] = vqmovun_s32(v20);
        *(int16x4_t *)&v49.i8[8 * v16] = vqmovun_s32(*(int32x4_t *)v55.val[0].i8);
        v56.val[1] = (int16x4_t)v49.i64[1];
        v56.val[2] = (int16x4_t)v50.i64[0];
        vst3_s16(v19, v56);
        v19 += 12;
        LODWORD(v13) = v13 + 12;
      }
      while (v14 >= (int)v13);
    }
    else
    {
      do
      {
        v59 = vld4_s16(a2);
        a2 = (const __int16 *)((char *)a2 + v18);
        v52 = (int32x4_t)vmovl_u16((uint16x4_t)v59.val[0]);
        v53 = (int32x4_t)vmovl_u16((uint16x4_t)v59.val[1]);
        *(uint32x4_t *)v59.val[0].i8 = vmovl_u16((uint16x4_t)v59.val[2]);
        *(_OWORD *)v59.val[2].i8 = *(_OWORD *)(result + 48);
        *(int32x4_t *)v59.val[1].i8 = vmulq_s32(*(int32x4_t *)(result + 32), v52);
        v54 = *(int16x8_t *)v59.val[0].i8;
        *(int32x4_t *)v59.val[1].i8 = vmlaq_s32(vmlaq_s32(*(int32x4_t *)v59.val[1].i8, *(int32x4_t *)v59.val[2].i8, v53), *(int32x4_t *)(result + 64), *(int32x4_t *)v59.val[0].i8);
        *(_OWORD *)v59.val[0].i8 = *(_OWORD *)(result + 128);
        *(int32x4_t *)v59.val[1].i8 = vshrq_n_s32(vaddq_s32(*(int32x4_t *)v59.val[1].i8, *(int32x4_t *)v59.val[0].i8), 0xEuLL);
        *(int32x4_t *)v59.val[0].i8 = vaddq_s32(*(int32x4_t *)(result + 112), *(int32x4_t *)v59.val[0].i8);
        *(int32x4_t *)v59.val[3].i8 = vshrq_n_s32(vmlaq_s32(*(int32x4_t *)v59.val[0].i8, vsubq_s32(*(&v52 + v15), *(int32x4_t *)v59.val[1].i8), *(int32x4_t *)(result + 80)), 0xEuLL);
        *(int32x4_t *)v59.val[0].i8 = vshrq_n_s32(vmlaq_s32(*(int32x4_t *)v59.val[0].i8, vsubq_s32(*(&v52 + v4), *(int32x4_t *)v59.val[1].i8), *(int32x4_t *)(result + 96)), 0xEuLL);
        v57.val[0] = vqmovun_s32(*(int32x4_t *)v59.val[1].i8);
        v49.i64[0] = (uint64_t)v57.val[0];
        *(int16x4_t *)&v49.i8[8 * v17] = vqmovun_s32(*(int32x4_t *)v59.val[3].i8);
        *(int16x4_t *)&v49.i8[8 * v16] = vqmovun_s32(*(int32x4_t *)v59.val[0].i8);
        v57.val[1] = (int16x4_t)v49.i64[1];
        v57.val[2] = (int16x4_t)v50.i64[0];
        vst3_s16(v19, v57);
        v19 += 12;
        LODWORD(v13) = v13 + 12;
      }
      while (v14 >= (int)v13);
    }
  }
  if ((int)v13 < v11)
  {
    result = 536879104;
    v21 = v6 == 0;
    if (v6)
      v22 = 1;
    else
      v22 = 2;
    v23 = (int)v13;
    if (v21)
      v24 = 1;
    else
      v24 = 2;
    v25 = (unint64_t)(v24 + v13) << 32;
    v26 = 2 * v5;
    do
    {
      v27 = v8 * *((unsigned __int16 *)a2 + 1)
          + v7 * *(unsigned __int16 *)a2
          + v9 * *((unsigned __int16 *)a2 + 2)
          + 0x2000;
      v28 = ((unsigned __int16)a2[v4 ^ 2] - (v27 >> 14)) * v10 + 536879104;
      v29 = ((unsigned __int16)a2[v4] - (v27 >> 14)) * v12 + 536879104;
      v30 = (v27 >> 14) & ~(v27 >> 31);
      if (v30 >= 0xFFFF)
        LOWORD(v30) = -1;
      a3[v23] = v30;
      v31 = (v28 >> 14) & ~(v28 >> 31);
      if (v31 >= 0xFFFF)
        LOWORD(v31) = -1;
      a3[(v22 + v23)] = v31;
      v32 = (v29 >> 14) & ~(v29 >> 31);
      if (v32 >= 0xFFFF)
        LOWORD(v32) = -1;
      *(__int16 *)((char *)a3 + (v25 >> 31)) = v32;
      v23 += 3;
      v25 += 0x300000000;
      a2 = (const __int16 *)((char *)a2 + v26);
    }
    while (v23 < v11);
  }
  return result;
}

void sub_1002C78B4(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C78D8(uint64_t a1, int *a2)
{
  int v4;
  float *v5;
  uint64_t v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450BE0);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (float *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4;
    do
    {
      sub_1002C799C(*(float32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 = (float *)((char *)v5 + *(_QWORD *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002C7988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float32_t sub_1002C799C(float32x4_t *a1, uint64_t a2, float *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  float32_t result;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  int v29;
  int64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float32x4x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4x3_t v39;
  float32x4x3_t v40;
  float32x4x3_t v41;
  float32x4x4_t v42;

  v5 = a1->i32[0];
  v4 = a1->i32[1];
  v6 = a1->u8[8];
  result = a1->f32[3];
  v8 = a1[1].f32[0];
  v9 = a1[1].f32[1];
  v10 = a1[1].f32[2];
  v11 = a1[1].f32[3];
  v12 = 3 * a4;
  if ((_DWORD)v5 == 3)
  {
    if (a4 >= 4)
    {
      v13 = 0;
      v14 = 1;
      if (a1->i8[8])
        v15 = 1;
      else
        v15 = 2;
      if (a1->i8[8])
        v14 = 2;
      v16 = a3;
      do
      {
        v39 = vld3q_f32((const float *)a2);
        a2 += 48;
        v35.val[0] = v39.val[0];
        v35.val[1] = v39.val[1];
        v17 = a1[2];
        v18 = a1[3];
        v35.val[2] = v39.val[2];
        v40.val[0] = vmlaq_f32(vmlaq_f32(vmulq_f32(v39.val[0], v17), v18, v39.val[1]), a1[4], v39.val[2]);
        v39.val[2] = a1[6];
        v39.val[1] = a1[7];
        v19 = vmlaq_f32(v39.val[1], a1[5], vsubq_f32(v35.val[(int)(v4 ^ 2)], v40.val[0]));
        v36 = v40.val[0];
        v39.val[0] = vsubq_f32(v35.val[v4], v40.val[0]);
        *(&v36 + v15) = v19;
        *(&v36 + v14) = vmlaq_f32(v39.val[1], v39.val[2], v39.val[0]);
        v40.val[1] = v37;
        v40.val[2] = v38;
        vst3q_f32(v16, v40);
        v16 += 12;
        v13 += 12;
      }
      while (v13 <= v12 - 12);
      if ((int)v13 >= v12)
        return result;
LABEL_23:
      v26 = v6 == 0;
      if (v6)
        v27 = 1;
      else
        v27 = 2;
      v28 = v13;
      if (v26)
        v29 = 1;
      else
        v29 = 2;
      v30 = (unint64_t)(v29 + v13) << 32;
      v31 = 4 * v5;
      do
      {
        v32 = (float)((float)(v8 * *(float *)(a2 + 4)) + (float)(*(float *)a2 * result))
            + (float)(*(float *)(a2 + 8) * v9);
        v33 = *(float *)(a2 + 4 * (v4 ^ 2)) - v32;
        v34 = *(float *)(a2 + 4 * v4);
        a3[v28] = v32;
        a3[(v27 + v28)] = (float)(v33 * v10) + 0.5;
        *(float *)((char *)a3 + (v30 >> 30)) = (float)((float)(v34 - v32) * v11) + 0.5;
        v28 += 3;
        v30 += 0x300000000;
        a2 += v31;
      }
      while (v28 < v12);
      return result;
    }
LABEL_13:
    LODWORD(v13) = 0;
    if (v12 <= 0)
      return result;
    goto LABEL_23;
  }
  if (a4 < 4)
    goto LABEL_13;
  v13 = 0;
  v20 = 1;
  if (a1->i8[8])
    v21 = 1;
  else
    v21 = 2;
  if (a1->i8[8])
    v20 = 2;
  v22 = a3;
  do
  {
    v42 = vld4q_f32((const float *)a2);
    a2 += 64;
    v23 = a1[5];
    v41.val[0] = vmlaq_f32(vmlaq_f32(vmulq_f32(v42.val[0], a1[2]), a1[3], v42.val[1]), a1[4], v42.val[2]);
    v35 = v42;
    v36 = v41.val[0];
    v42.val[0] = a1[6];
    v24 = a1[7];
    v25 = vsubq_f32(v35.val[v4], v41.val[0]);
    *(&v36 + v21) = vmlaq_f32(v24, v23, vsubq_f32(v35.val[(int)(v4 ^ 2)], v41.val[0]));
    *(&v36 + v20) = vmlaq_f32(v24, v42.val[0], v25);
    v41.val[1] = v37;
    v41.val[2] = v38;
    vst3q_f32(v22, v41);
    v22 += 12;
    v13 += 12;
  }
  while (v13 <= v12 - 12);
  if ((int)v13 < v12)
    goto LABEL_23;
  return result;
}

void sub_1002C7BA4(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C7BC8(uint64_t a1, int *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450C40);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (char *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4;
    do
    {
      sub_1002C7C8C(*(int32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002C7C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int32x4_t *sub_1002C7C8C(int32x4_t *result, uint64_t a2, char *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int16x8_t v32;
  int32x4_t v33;
  int16x8_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int8x8_t v37;
  int8x8_t v38;
  int16x4_t v39;
  int8x8_t v40;
  BOOL v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int8x8x3_t v62[2];
  uint16x8_t v63;
  uint16x8_t v64;
  int8x8x3_t v65;
  int8x8x3_t v66;
  int8x8x4_t v67;

  v4 = result->i32[0];
  v5 = result->i32[1];
  v6 = result->u8[8];
  v7 = result->i32[3];
  v8 = result[1].i32[0];
  v9 = 3 * a4;
  v10 = result[1].i32[1];
  v11 = result[1].i32[2];
  if (a4 >= 8)
  {
    v12 = 0;
    v13 = v9 - 24;
    v14 = 1;
    if (result->i8[8])
      v15 = 1;
    else
      v15 = 2;
    if (result->i8[8])
      v14 = 2;
    v16 = v5 ^ 2;
    v17 = 8 * v4;
    do
    {
      while (1)
      {
        v18 = (const char *)(a2 + v12);
        v65 = vld3_s8(v18);
        v19 = (int8x16_t)vmovl_u8((uint8x8_t)v65.val[0]);
        v63 = vmovl_u8((uint8x8_t)v65.val[1]);
        v64 = vmovl_u8((uint8x8_t)v65.val[2]);
        v20 = *(int8x16_t *)v62[1].val[2 * v15 + 1].i8;
        v21 = *(int8x16_t *)v62[1].val[2 * v14 + 1].i8;
        v22 = *(int16x4_t *)result[7].i8;
        v23 = vsubl_s16(*(int16x4_t *)v21.i8, v22);
        v24 = result[5];
        v26 = result[3];
        v25 = result[4];
        v27 = vmlaq_s32(result[6], v23, v24);
        v28 = vsubl_s16(*(int16x4_t *)v20.i8, v22);
        v29 = result[2];
        v30 = vmlaq_s32(vmlaq_s32(result[6], v28, v26), v25, v23);
        v31 = vmlaq_s32(result[6], v29, v28);
        v28.i64[0] = vextq_s8(v19, v19, 8uLL).u64[0];
        v19.i64[0] = vextq_s8(v20, v20, 8uLL).u64[0];
        v32 = (int16x8_t)vsubl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), v22);
        v33 = vmlaq_s32(result[6], (int32x4_t)v32, v24);
        v34 = (int16x8_t)vsubl_s16(*(int16x4_t *)v19.i8, v22);
        v35 = vmlaq_s32(vmlaq_s32(result[6], (int32x4_t)v34, v26), v25, (int32x4_t)v32);
        v36 = vmlaq_s32(result[6], v29, (int32x4_t)v34);
        *(int16x4_t *)v34.i8 = vshrn_n_s32(v27, 0xEuLL);
        v34.i64[0] = vaddw_u8((uint16x8_t)v34, (uint8x8_t)v65.val[0]).u64[0];
        v34.u64[1] = (unint64_t)vadd_s16(*(int16x4_t *)v28.i8, vshrn_n_s32(v33, 0xEuLL));
        v37 = vqmovun_s16(v34);
        *(int16x4_t *)v32.i8 = vshrn_n_s32(v30, 0xEuLL);
        v32.i64[0] = vaddw_u8((uint16x8_t)v32, (uint8x8_t)v65.val[0]).u64[0];
        v32.u64[1] = (unint64_t)vadd_s16(*(int16x4_t *)v28.i8, vshrn_n_s32(v35, 0xEuLL));
        v38 = vqmovun_s16(v32);
        *(int16x4_t *)v33.i8 = vshrn_n_s32(v31, 0xEuLL);
        v65.val[0] = (int8x8_t)vaddw_u8((uint16x8_t)v33, (uint8x8_t)v65.val[0]).u64[0];
        v39 = vadd_s16(*(int16x4_t *)v28.i8, vshrn_n_s32(v36, 0xEuLL));
        v40 = vqmovun_s16(*(int16x8_t *)v65.val[0].i8);
        if ((_DWORD)v4 == 3)
          break;
        v62[0].val[v5] = v37;
        v62[0].val[1] = v38;
        v62[0].val[v16] = v40;
        v67.val[3] = (int8x8_t)result[7].i64[1];
        v67.val[0] = v62[0].val[0];
        v67.val[1] = v62[0].val[1];
        v67.val[2] = v62[0].val[2];
        vst4_s8(a3, v67);
        v12 += 24;
        a3 += v17;
        if (v12 > v13)
          goto LABEL_12;
      }
      v62[0].val[v5] = v37;
      v62[0].val[1] = v38;
      v62[0].val[v16] = v40;
      v66 = v62[0];
      vst3_s8(a3, v66);
      v12 += 24;
      a3 += v17;
    }
    while (v12 <= v13);
  }
  else
  {
    LODWORD(v12) = 0;
  }
LABEL_12:
  if ((int)v12 < v9)
  {
    v41 = v6 == 0;
    if (v6)
      v42 = 1;
    else
      v42 = 2;
    if (v41)
      v43 = 1;
    else
      v43 = 2;
    result = (int32x4_t *)(v5 ^ 2);
    v12 = v12;
    if ((_DWORD)v4 == 4)
    {
      do
      {
        v44 = *(unsigned __int8 *)(a2 + v12);
        v45 = *(unsigned __int8 *)(a2 + v43 + (int)v12) - 128;
        v46 = v44 + ((v45 * v11 + 0x2000) >> 14);
        v47 = *(unsigned __int8 *)(a2 + (v42 + v12)) - 128;
        v48 = v44 + ((v45 * v10 + v47 * v8 + 0x2000) >> 14);
        v49 = v44 + ((v47 * v7 + 0x2000) >> 14);
        v50 = v46 & ~(v46 >> 31);
        if (v50 >= 255)
          LOBYTE(v50) = -1;
        a3[v5] = v50;
        v51 = v48 & ~(v48 >> 31);
        if (v51 >= 255)
          LOBYTE(v51) = -1;
        a3[1] = v51;
        v52 = v49 & ~(v49 >> 31);
        if (v52 >= 255)
          LOBYTE(v52) = -1;
        result->i8[(_QWORD)a3] = v52;
        a3[3] = -1;
        v12 += 3;
        a3 += v4;
      }
      while (v12 < v9);
    }
    else
    {
      do
      {
        v53 = *(unsigned __int8 *)(a2 + v12);
        v54 = *(unsigned __int8 *)(a2 + v43 + (int)v12) - 128;
        v55 = v53 + ((v54 * v11 + 0x2000) >> 14);
        v56 = *(unsigned __int8 *)(a2 + (v42 + v12)) - 128;
        v57 = v53 + ((v54 * v10 + v56 * v8 + 0x2000) >> 14);
        v58 = v53 + ((v56 * v7 + 0x2000) >> 14);
        v59 = v55 & ~(v55 >> 31);
        if (v59 >= 255)
          LOBYTE(v59) = -1;
        a3[v5] = v59;
        v60 = v57 & ~(v57 >> 31);
        if (v60 >= 255)
          LOBYTE(v60) = -1;
        a3[1] = v60;
        v61 = v58 & ~(v58 >> 31);
        if (v61 >= 255)
          LOBYTE(v61) = -1;
        result->i8[(_QWORD)a3] = v61;
        v12 += 3;
        a3 += v4;
      }
      while (v12 < v9);
    }
  }
  return result;
}

void sub_1002C7F50(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C7F74(uint64_t a1, int *a2)
{
  int v4;
  __int16 *v5;
  const __int16 *v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450CA0);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (__int16 *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = (const __int16 *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4);
    do
    {
      sub_1002C8038(*(_QWORD *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 = (const __int16 *)((char *)v6 + *(_QWORD *)(a1 + 16));
      v5 = (__int16 *)((char *)v5 + *(_QWORD *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002C8024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C8038(uint64_t result, const __int16 *a2, __int16 *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __int16 *v18;
  uint16x8_t v19;
  int32x4_t v20;
  uint16x8_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const __int16 *v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  BOOL v52;
  int v53;
  int v54;
  int64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  _BYTE v65[72];
  int16x4_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x4x3_t v69;
  int16x4x3_t v70;
  int16x4x3_t v71;
  int16x4x3_t v72;
  int16x8x3_t v73;
  int16x8x3_t v74;
  int16x8x4_t v75;

  v4 = *(int *)result;
  v5 = *(int *)(result + 4);
  v6 = *(unsigned __int8 *)(result + 8);
  v7 = *(_DWORD *)(result + 12);
  v8 = *(_DWORD *)(result + 16);
  v9 = 3 * a4;
  v10 = *(_DWORD *)(result + 20);
  v11 = *(_DWORD *)(result + 24);
  if (a4 >= 8)
  {
    v12 = 0;
    v13 = v9 - 24;
    v14 = 1;
    if (*(_BYTE *)(result + 8))
      v15 = 1;
    else
      v15 = 2;
    if (*(_BYTE *)(result + 8))
      v14 = 2;
    v16 = (int)(v5 ^ 2);
    v17 = 16 * v4;
    v18 = a2;
    do
    {
      while (1)
      {
        v73 = vld3q_s16(v18);
        v67 = v73.val[1];
        v68 = v73.val[2];
        v19 = *(uint16x8_t *)&v65[16 * v15 + 64];
        v20 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v73.val[0].i8);
        v21 = *(uint16x8_t *)&v65[16 * v14 + 64];
        v22 = *(int32x4_t *)(result + 112);
        v23 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v21.i8), v22);
        v25 = *(int32x4_t *)(result + 64);
        v24 = *(int32x4_t *)(result + 80);
        v26 = vsraq_n_s32(v20, vmlaq_s32(*(int32x4_t *)(result + 96), v23, v24), 0xEuLL);
        v27 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v19.i8), v22);
        v29 = *(int32x4_t *)(result + 32);
        v28 = *(int32x4_t *)(result + 48);
        v30 = vsraq_n_s32(v20, vmlaq_s32(vmlaq_s32(*(int32x4_t *)(result + 96), v28, v27), v25, v23), 0xEuLL);
        v31 = vsraq_n_s32(v20, vmlaq_s32(*(int32x4_t *)(result + 96), v29, v27), 0xEuLL);
        v32 = vsubq_s32((int32x4_t)vmovl_high_u16(v21), v22);
        v33 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vmlaq_s32(*(int32x4_t *)(result + 96), v32, v24), 0xEuLL), (uint16x8_t)v73.val[0]);
        v34 = vsubq_s32((int32x4_t)vmovl_high_u16(v19), v22);
        v35 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vmlaq_s32(vmlaq_s32(*(int32x4_t *)(result + 96), v28, v34), v25, v32), 0xEuLL), (uint16x8_t)v73.val[0]);
        v36 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vmlaq_s32(*(int32x4_t *)(result + 96), v29, v34), 0xEuLL), (uint16x8_t)v73.val[0]);
        v37 = vqmovun_high_s32(vqmovun_s32(v26), v33);
        v38 = vqmovun_high_s32(vqmovun_s32(v30), v35);
        v39 = vqmovun_high_s32(vqmovun_s32(v31), v36);
        if ((_DWORD)v4 == 3)
          break;
        *(int16x8_t *)&v65[16 * v5] = v37;
        *(int16x8_t *)&v65[16] = v38;
        *(int16x8_t *)&v65[16 * v16] = v39;
        v75.val[3] = *(int16x8_t *)(result + 128);
        v75.val[0] = *(int16x8_t *)v65;
        v75.val[1] = *(int16x8_t *)&v65[16];
        v75.val[2] = *(int16x8_t *)&v65[32];
        vst4q_s16(a3, v75);
        v12 += 24;
        v18 += 24;
        a3 = (__int16 *)((char *)a3 + v17);
        if (v12 > v13)
          goto LABEL_12;
      }
      *(int16x8_t *)&v65[16 * v5] = v37;
      *(int16x8_t *)&v65[16] = v38;
      *(int16x8_t *)&v65[16 * v16] = v39;
      v74 = *(int16x8x3_t *)v65;
      vst3q_s16(a3, v74);
      v12 += 24;
      v18 += 24;
      a3 = (__int16 *)((char *)a3 + v17);
    }
    while (v12 <= v13);
  }
  else
  {
    LODWORD(v12) = 0;
  }
LABEL_12:
  v40 = v9 - 12;
  if ((int)v12 <= v9 - 12)
  {
    v41 = 1;
    if (v6)
      v42 = 1;
    else
      v42 = 2;
    if (v6)
      v41 = 2;
    v43 = v5 ^ 2;
    v44 = 8 * v4;
    v45 = &a2[v12];
    if ((_DWORD)v4 == 3)
    {
      do
      {
        v69 = vld3_s16(v45);
        v45 += 12;
        v66 = v69.val[1];
        v67.i64[0] = (uint64_t)v69.val[2];
        *(uint32x4_t *)v69.val[0].i8 = vmovl_u16((uint16x4_t)v69.val[0]);
        v46 = *(int32x4_t *)(result + 112);
        *(int32x4_t *)v69.val[2].i8 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)&v65[8 * v41 + 64]), v46);
        *(int32x4_t *)v69.val[1].i8 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)&v65[8 * v42 + 64]), v46);
        v47 = vsraq_n_s32(*(int32x4_t *)v69.val[0].i8, vmlaq_s32(*(int32x4_t *)(result + 96), *(int32x4_t *)v69.val[2].i8, *(int32x4_t *)(result + 80)), 0xEuLL);
        *(int32x4_t *)v69.val[2].i8 = vsraq_n_s32(*(int32x4_t *)v69.val[0].i8, vmlaq_s32(vmlaq_s32(*(int32x4_t *)(result + 96), *(int32x4_t *)(result + 48), *(int32x4_t *)v69.val[1].i8), *(int32x4_t *)(result + 64), *(int32x4_t *)v69.val[2].i8), 0xEuLL);
        *(int32x4_t *)v69.val[0].i8 = vsraq_n_s32(*(int32x4_t *)v69.val[0].i8, vmlaq_s32(*(int32x4_t *)(result + 96), *(int32x4_t *)(result + 32), *(int32x4_t *)v69.val[1].i8), 0xEuLL);
        *(int16x4_t *)&v65[8 * v5] = vqmovun_s32(v47);
        *(int16x4_t *)&v65[8] = vqmovun_s32(*(int32x4_t *)v69.val[2].i8);
        *(int16x4_t *)&v65[8 * v43] = vqmovun_s32(*(int32x4_t *)v69.val[0].i8);
        v70 = *(int16x4x3_t *)v65;
        vst3_s16(a3, v70);
        a3 = (__int16 *)((char *)a3 + v44);
        LODWORD(v12) = v12 + 12;
      }
      while (v40 >= (int)v12);
    }
    else
    {
      do
      {
        v71 = vld3_s16(v45);
        v45 += 12;
        v66 = v71.val[1];
        v67.i64[0] = (uint64_t)v71.val[2];
        *(uint32x4_t *)v71.val[0].i8 = vmovl_u16((uint16x4_t)v71.val[0]);
        v49 = *(int32x4_t *)(result + 96);
        v48 = *(int32x4_t *)(result + 112);
        *(int32x4_t *)v71.val[2].i8 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)&v65[8 * v41 + 64]), v48);
        *(int32x4_t *)v71.val[1].i8 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)&v65[8 * v42 + 64]), v48);
        v50 = vmlaq_s32(vmlaq_s32(v49, *(int32x4_t *)(result + 48), *(int32x4_t *)v71.val[1].i8), *(int32x4_t *)(result + 64), *(int32x4_t *)v71.val[2].i8);
        *(int32x4_t *)v71.val[2].i8 = vsraq_n_s32(*(int32x4_t *)v71.val[0].i8, vmlaq_s32(v49, *(int32x4_t *)v71.val[2].i8, *(int32x4_t *)(result + 80)), 0xEuLL);
        v51 = vsraq_n_s32(*(int32x4_t *)v71.val[0].i8, v50, 0xEuLL);
        *(int32x4_t *)v71.val[0].i8 = vsraq_n_s32(*(int32x4_t *)v71.val[0].i8, vmlaq_s32(v49, *(int32x4_t *)(result + 32), *(int32x4_t *)v71.val[1].i8), 0xEuLL);
        *(int16x4_t *)&v65[8 * v5] = vqmovun_s32(*(int32x4_t *)v71.val[2].i8);
        *(int16x4_t *)&v65[8] = vqmovun_s32(v51);
        *(int16x4_t *)&v65[8 * v43] = vqmovun_s32(*(int32x4_t *)v71.val[0].i8);
        v51.i64[0] = *(_QWORD *)(result + 144);
        v72 = *(int16x4x3_t *)v65;
        vst4_s16(a3, *(int16x4x4_t *)((char *)&v51 - 24));
        a3 = (__int16 *)((char *)a3 + v44);
        LODWORD(v12) = v12 + 12;
      }
      while (v40 >= (int)v12);
    }
  }
  if ((int)v12 < v9)
  {
    v52 = v6 == 0;
    if (v6)
      v53 = 1;
    else
      v53 = 2;
    result = (int)v12;
    if (v52)
      v54 = 1;
    else
      v54 = 2;
    v55 = (unint64_t)(v54 + v12) << 32;
    do
    {
      v56 = (unsigned __int16)a2[result];
      v57 = *(unsigned __int16 *)((char *)a2 + (v55 >> 31)) - 0x8000;
      v58 = v56 + ((v57 * v11 + 0x2000) >> 14);
      v59 = (unsigned __int16)a2[(v53 + result)] - 0x8000;
      v60 = v56 + ((v57 * v10 + v59 * v8 + 0x2000) >> 14);
      v61 = v56 + ((v59 * v7 + 0x2000) >> 14);
      v62 = v58 & ~(v58 >> 31);
      if (v62 >= 0xFFFF)
        LOWORD(v62) = -1;
      a3[v5] = v62;
      v63 = v60 & ~(v60 >> 31);
      if (v63 >= 0xFFFF)
        LOWORD(v63) = -1;
      a3[1] = v63;
      v64 = v61 & ~(v61 >> 31);
      if (v64 >= 0xFFFF)
        LOWORD(v64) = -1;
      a3[(int)(v5 ^ 2)] = v64;
      if ((_DWORD)v4 == 4)
        a3[3] = -1;
      result += 3;
      v55 += 0x300000000;
      a3 += v4;
    }
    while (result < v9);
  }
  return result;
}

void sub_1002C8408(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C842C(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  const float *v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450D00);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4;
    v6 = (const float *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4);
    do
    {
      sub_1002C84F0(*(float32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 = (const float *)((char *)v6 + *(_QWORD *)(a1 + 16));
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002C84DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float32x4_t *sub_1002C84F0(float32x4_t *result, const float *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const float *v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  const float *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4x3_t v44;
  float32x4x3_t v45;
  float32x4x3_t v46;
  float32x4x3_t v47;
  float32x4x4_t v48;

  v5 = result->i32[0];
  v4 = result->i32[1];
  v6 = result->u8[8];
  v7 = result->f32[3];
  v8 = result[1].f32[0];
  v9 = result[1].f32[1];
  v10 = result[1].f32[2];
  v11 = 3 * a4;
  if ((_DWORD)v5 != 3)
  {
    if (a4 >= 4)
    {
      v12 = 0;
      v25 = 1;
      if (result->i8[8])
        v26 = 1;
      else
        v26 = 2;
      if (result->i8[8])
        v25 = 2;
      v27 = a2;
      do
      {
        v47 = vld3q_f32(v27);
        v27 += 12;
        v44.val[1] = v47.val[1];
        v44.val[2] = v47.val[2];
        v48.val[3] = result[6];
        v28 = result[7];
        v29 = vsubq_f32(v44.val[v25], v28);
        v30 = vsubq_f32(v44.val[v26], v28);
        v31 = vmlaq_f32(v47.val[0], result[5], v29);
        v32 = vaddq_f32(v47.val[0], vmlaq_f32(vmulq_f32(v29, result[4]), result[3], v30));
        v47.val[0] = vmlaq_f32(v47.val[0], result[2], v30);
        *(&v41 + v4) = v31;
        v42 = v32;
        *(&v41 + (int)(v4 ^ 2)) = v47.val[0];
        v48.val[0] = v41;
        v48.val[1] = v42;
        v48.val[2] = v43;
        vst4q_f32((float *)a3, v48);
        a3 += 64;
        v12 += 12;
      }
      while (v12 <= v11 - 12);
      if ((int)v12 >= v11)
        return result;
    }
    else
    {
      LODWORD(v12) = 0;
      if (v11 <= 0)
        return result;
    }
    goto LABEL_31;
  }
  if (a4 < 4)
  {
    if (a4 < 1)
      return result;
    LODWORD(v12) = 0;
    if (result->i8[8])
      v13 = 1;
    else
      v13 = 2;
    if (result->i8[8])
      v14 = 2;
    else
      v14 = 1;
    v15 = (int)(v4 ^ 2);
    v5 = 3;
    goto LABEL_41;
  }
  v12 = 0;
  v16 = 1;
  if (result->i8[8])
    v17 = 1;
  else
    v17 = 2;
  if (result->i8[8])
    v16 = 2;
  v18 = a2;
  do
  {
    v45 = vld3q_f32(v18);
    v18 += 12;
    v42 = v45.val[1];
    v43 = v45.val[2];
    v19 = result[7];
    v20 = vsubq_f32(*(&v41 + v16), v19);
    v21 = vmlaq_f32(v45.val[0], result[5], v20);
    v22 = vmulq_f32(v20, result[4]);
    v23 = vsubq_f32(*(&v41 + v17), v19);
    v44.val[v4] = v21;
    v24 = vaddq_f32(v45.val[0], vmlaq_f32(v22, result[3], v23));
    v45.val[0] = vmlaq_f32(v45.val[0], result[2], v23);
    v44.val[1] = v24;
    v44.val[(int)(v4 ^ 2)] = v45.val[0];
    v46 = v44;
    vst3q_f32((float *)a3, v46);
    a3 += 48;
    v12 += 12;
  }
  while (v12 <= v11 - 12);
  if ((int)v12 < v11)
  {
LABEL_31:
    if (v6)
      v13 = 1;
    else
      v13 = 2;
    if (v6)
      v14 = 2;
    else
      v14 = 1;
    v15 = (int)(v4 ^ 2);
    if ((_DWORD)v5 != 4)
    {
LABEL_41:
      v12 = v12;
      v37 = 4 * v5;
      do
      {
        v38 = a2[v12];
        v39 = a2[v14 + (int)v12] + -0.5;
        v40 = a2[(v13 + v12)] + -0.5;
        *(float *)(a3 + 4 * v4) = v38 + (float)(v39 * v10);
        *(float *)(a3 + 4) = (float)(v38 + (float)(v39 * v9)) + (float)(v40 * v8);
        *(float *)(a3 + 4 * v15) = v38 + (float)(v40 * v7);
        v12 += 3;
        a3 += v37;
      }
      while (v12 < v11);
      return result;
    }
    v33 = 4 * v5;
    v12 = v12;
    do
    {
      v34 = a2[v12];
      v35 = a2[v14 + (int)v12] + -0.5;
      v36 = a2[(v13 + v12)] + -0.5;
      *(float *)(a3 + 4 * v4) = v34 + (float)(v35 * v10);
      *(float *)(a3 + 4) = (float)(v34 + (float)(v35 * v9)) + (float)(v36 * v8);
      *(float *)(a3 + 4 * v15) = v34 + (float)(v36 * v7);
      *(_DWORD *)(a3 + 12) = 1065353216;
      v12 += 3;
      a3 += v33;
    }
    while (v12 < v11);
  }
  return result;
}

void sub_1002C8780(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C87A4(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  const char *v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450D60);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4;
    v6 = (const char *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4);
    do
    {
      sub_1002C8868(*(int32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002C8854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int32x4_t *sub_1002C8868(int32x4_t *result, const char *a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint16x4_t v30;
  uint16x4_t v31;
  uint16x4_t v32;
  uint16x4_t v33;
  uint16x4_t v34;
  uint16x4_t v35;
  uint16x4_t v36;
  uint16x4_t v37;
  uint16x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint8x8_t v43;
  char *v44;
  int8x8x4_t v45;

  v4 = result->i32[1];
  v5 = result->i32[0];
  v6 = result->i32[2];
  v7 = result->i32[3];
  v8 = result[1].i32[0];
  v9 = result[1].i32[1];
  v10 = result[1].i32[2];
  v11 = result[1].i32[3];
  v12 = 3 * a4;
  v13 = result[2].i32[0];
  v14 = result[2].i32[1];
  if (a4 >= 8)
  {
    v15 = 0;
    do
    {
      if ((_DWORD)v5 == 3)
        *(int8x8x3_t *)v45.val[0].i8 = vld3_s8(a2);
      else
        v45 = vld4_s8(a2);
      v27 = (int8x16_t)vmovl_u8((uint8x8_t)v45.val[2]);
      v28 = (int8x16_t)vmovl_u8((uint8x8_t)v45.val[1]);
      v29 = (int8x16_t)vmovl_u8((uint8x8_t)v45.val[0]);
      v30 = (uint16x4_t)result[2].u64[1];
      v31 = *(uint16x4_t *)result[3].i8;
      v32 = (uint16x4_t)result[3].u64[1];
      v33 = *(uint16x4_t *)result[4].i8;
      v34 = (uint16x4_t)result[4].u64[1];
      v35 = *(uint16x4_t *)result[5].i8;
      v36 = (uint16x4_t)result[5].u64[1];
      v37 = *(uint16x4_t *)result[6].i8;
      v38 = (uint16x4_t)result[6].u64[1];
      v39 = result[7];
      v40 = vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v28.i8, v31), *(uint16x4_t *)v29.i8, v30), *(uint16x4_t *)v27.i8, v32), v39);
      v41 = vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v28.i8, v34), *(uint16x4_t *)v29.i8, v33), *(uint16x4_t *)v27.i8, v35), v39);
      v42 = vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v28.i8, v37), *(uint16x4_t *)v29.i8, v36), *(uint16x4_t *)v27.i8, v38), v39);
      v29.i64[0] = vextq_s8(v29, v29, 8uLL).u64[0];
      v28.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
      v27.i64[0] = vextq_s8(v27, v27, 8uLL).u64[0];
      v43 = vqmovn_u16((uint16x8_t)vshrn_high_n_s32(vshrn_n_s32(v40, 0xCuLL), (int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v39, *(uint16x4_t *)v29.i8, v30), *(uint16x4_t *)v28.i8, v31), *(uint16x4_t *)v27.i8, v32), 0xCuLL));
      *(uint8x8_t *)v40.i8 = vqmovn_u16((uint16x8_t)vshrn_high_n_s32(vshrn_n_s32(v41, 0xCuLL), (int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v39, *(uint16x4_t *)v29.i8, v33), *(uint16x4_t *)v28.i8, v34), *(uint16x4_t *)v27.i8, v35), 0xCuLL));
      *(uint8x8_t *)v27.i8 = vqmovn_u16((uint16x8_t)vshrn_high_n_s32(vshrn_n_s32(v42, 0xCuLL), (int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v39, *(uint16x4_t *)v29.i8, v36), *(uint16x4_t *)v28.i8, v37), *(uint16x4_t *)v27.i8, v38), 0xCuLL));
      v44 = (char *)(a3 + v15);
      vst3_s8(v44, *(int8x8x3_t *)(&v27 - 1));
      v15 += 24;
      a2 += 8 * v5;
    }
    while (v15 <= v12 - 24);
  }
  else
  {
    LODWORD(v15) = 0;
  }
  if ((int)v15 < v12)
  {
    result = (int32x4_t *)v12;
    v16 = (unsigned __int8 *)(a2 + 1);
    v15 = v15;
    do
    {
      v17 = *(v16 - 1);
      v18 = *v16;
      v19 = v16[1];
      v20 = v6 * v18 + v4 * v17 + v7 * v19 + 2048;
      v21 = v9 * v18 + v8 * v17 + v10 * v19 + 2048;
      v22 = v13 * v18 + v11 * v17 + v14 * v19 + 2048;
      v23 = (v20 >> 12) & ~(v20 >> 31);
      if (v23 >= 255)
        LOBYTE(v23) = -1;
      v24 = a3 + v15;
      *(_BYTE *)(a3 + v15) = v23;
      v25 = (v21 >> 12) & ~(v21 >> 31);
      if (v25 >= 255)
        LOBYTE(v25) = -1;
      *(_BYTE *)(v24 + 1) = v25;
      v26 = (v22 >> 12) & ~(v22 >> 31);
      if (v26 >= 255)
        LOBYTE(v26) = -1;
      *(_BYTE *)(v24 + 2) = v26;
      v15 += 3;
      v16 += v5;
    }
    while (v15 < v12);
  }
  return result;
}

void sub_1002C8A3C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C8A60(uint64_t a1, int *a2)
{
  int v4;
  __int16 *v5;
  const __int16 *v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450DC0);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (__int16 *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = (const __int16 *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4);
    do
    {
      sub_1002C8B24(*(int32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 = (const __int16 *)((char *)v6 + *(_QWORD *)(a1 + 16));
      v5 = (__int16 *)((char *)v5 + *(_QWORD *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002C8B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int32x4_t *sub_1002C8B24(int32x4_t *result, const __int16 *a2, __int16 *a3, int a4)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 *v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  __int16 *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  __int16 *v35;
  uint16x4_t v36;
  uint16x4_t v37;
  uint16x4_t v38;
  uint16x4_t v39;
  uint16x4_t v40;
  uint16x4_t v41;
  uint16x4_t v42;
  uint16x4_t v43;
  uint16x4_t v44;
  int32x4_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  uint32x4_t v48;
  uint16x4_t v49;
  uint16x4_t v50;
  uint16x4_t v51;
  int16x4x3_t v52;
  int16x4x3_t v53;
  int16x8x3_t v54;
  int16x4x4_t v55;
  int16x8x4_t v56;

  v4 = result->i32[1];
  v5 = result->i32[0];
  v6 = result->i32[2];
  v7 = result->i32[3];
  v8 = result[1].i32[0];
  v9 = result[1].i32[1];
  v10 = result[1].i32[2];
  v11 = result[1].i32[3];
  v12 = 3 * a4;
  v13 = result[2].i32[0];
  v14 = result[2].i32[1];
  if (a4 >= 8)
  {
    v15 = 0;
    v35 = a3;
    do
    {
      if ((_DWORD)v5 == 3)
        *(int16x8x3_t *)v56.val[0].i8 = vld3q_s16(a2);
      else
        v56 = vld4q_s16(a2);
      v36 = (uint16x4_t)result[2].u64[1];
      v37 = *(uint16x4_t *)result[3].i8;
      v38 = (uint16x4_t)result[3].u64[1];
      v39 = *(uint16x4_t *)result[4].i8;
      v40 = (uint16x4_t)result[4].u64[1];
      v41 = *(uint16x4_t *)result[5].i8;
      v42 = (uint16x4_t)result[5].u64[1];
      v43 = *(uint16x4_t *)result[6].i8;
      v44 = (uint16x4_t)result[6].u64[1];
      v45 = result[7];
      v46 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v56.val[1].i8, v37), *(uint16x4_t *)v56.val[0].i8, v36), *(uint16x4_t *)v56.val[2].i8, v38), v45), 0xCuLL);
      v47 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v56.val[1].i8, v40), *(uint16x4_t *)v56.val[0].i8, v39), *(uint16x4_t *)v56.val[2].i8, v41), v45), 0xCuLL);
      v48 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v56.val[1].i8, v43), *(uint16x4_t *)v56.val[0].i8, v42), *(uint16x4_t *)v56.val[2].i8, v44), v45), 0xCuLL);
      v49 = (uint16x4_t)vextq_s8((int8x16_t)v56.val[0], (int8x16_t)v56.val[0], 8uLL).u64[0];
      v50 = (uint16x4_t)vextq_s8((int8x16_t)v56.val[1], (int8x16_t)v56.val[1], 8uLL).u64[0];
      v51 = (uint16x4_t)vextq_s8((int8x16_t)v56.val[2], (int8x16_t)v56.val[2], 8uLL).u64[0];
      v54.val[0] = (int16x8_t)vqmovn_high_u32(vqmovn_u32(v46), vshrq_n_u32(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v45, v49, v36), v50, v37), v51, v38), 0xCuLL));
      v54.val[1] = (int16x8_t)vqmovn_high_u32(vqmovn_u32(v47), vshrq_n_u32(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v45, v49, v39), v50, v40), v51, v41), 0xCuLL));
      v54.val[2] = (int16x8_t)vqmovn_high_u32(vqmovn_u32(v48), vshrq_n_u32(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v45, v49, v42), v50, v43), v51, v44), 0xCuLL));
      vst3q_s16(v35, v54);
      v35 += 24;
      v15 += 24;
      a2 += 8 * v5;
    }
    while (v15 <= v12 - 24);
  }
  else
  {
    LODWORD(v15) = 0;
  }
  v16 = v12 - 12;
  if ((int)v15 <= v12 - 12)
  {
    v17 = 8 * v5;
    v18 = &a3[v15];
    if ((_DWORD)v5 == 3)
    {
      do
      {
        v52 = vld3_s16(a2);
        a2 = (const __int16 *)((char *)a2 + v17);
        v19 = (int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v52.val[1], *(uint16x4_t *)result[3].i8), (uint16x4_t)v52.val[0], (uint16x4_t)result[2].u64[1]), (uint16x4_t)v52.val[2], (uint16x4_t)result[3].u64[1]);
        v20 = (int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v52.val[1], (uint16x4_t)result[4].u64[1]), (uint16x4_t)v52.val[0], *(uint16x4_t *)result[4].i8), (uint16x4_t)v52.val[2], *(uint16x4_t *)result[5].i8);
        v21 = (int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v52.val[1], *(uint16x4_t *)result[6].i8), (uint16x4_t)v52.val[0], (uint16x4_t)result[5].u64[1]), (uint16x4_t)v52.val[2], (uint16x4_t)result[6].u64[1]);
        *(int32x4_t *)v52.val[0].i8 = result[7];
        v53.val[0] = (int16x4_t)vqmovn_u32(vshrq_n_u32((uint32x4_t)vaddq_s32(v19, *(int32x4_t *)v52.val[0].i8), 0xCuLL));
        v53.val[1] = (int16x4_t)vqmovn_u32(vshrq_n_u32((uint32x4_t)vaddq_s32(v20, *(int32x4_t *)v52.val[0].i8), 0xCuLL));
        v53.val[2] = (int16x4_t)vqmovn_u32(vshrq_n_u32((uint32x4_t)vaddq_s32(v21, *(int32x4_t *)v52.val[0].i8), 0xCuLL));
        vst3_s16(v18, v53);
        v18 += 12;
        LODWORD(v15) = v15 + 12;
      }
      while (v16 >= (int)v15);
    }
    else
    {
      do
      {
        v55 = vld4_s16(a2);
        a2 = (const __int16 *)((char *)a2 + v17);
        v22 = (int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v55.val[1], *(uint16x4_t *)result[3].i8), (uint16x4_t)v55.val[0], (uint16x4_t)result[2].u64[1]), (uint16x4_t)v55.val[2], (uint16x4_t)result[3].u64[1]);
        v23 = (int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v55.val[1], (uint16x4_t)result[4].u64[1]), (uint16x4_t)v55.val[0], *(uint16x4_t *)result[4].i8), (uint16x4_t)v55.val[2], *(uint16x4_t *)result[5].i8);
        v24 = (int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v55.val[1], *(uint16x4_t *)result[6].i8), (uint16x4_t)v55.val[0], (uint16x4_t)result[5].u64[1]), (uint16x4_t)v55.val[2], (uint16x4_t)result[6].u64[1]);
        *(int32x4_t *)v55.val[0].i8 = result[7];
        v55.val[1] = (int16x4_t)vqmovn_u32(vshrq_n_u32((uint32x4_t)vaddq_s32(v22, *(int32x4_t *)v55.val[0].i8), 0xCuLL));
        v55.val[2] = (int16x4_t)vqmovn_u32(vshrq_n_u32((uint32x4_t)vaddq_s32(v23, *(int32x4_t *)v55.val[0].i8), 0xCuLL));
        v55.val[3] = (int16x4_t)vqmovn_u32(vshrq_n_u32((uint32x4_t)vaddq_s32(v24, *(int32x4_t *)v55.val[0].i8), 0xCuLL));
        vst3_s16(v18, *(int16x4x3_t *)v55.val[1].i8);
        v18 += 12;
        LODWORD(v15) = v15 + 12;
      }
      while (v16 >= (int)v15);
    }
  }
  if ((int)v15 < v12)
  {
    result = (int32x4_t *)(a2 + 1);
    v25 = &a3[v15 + 1];
    do
    {
      v26 = result[-1].u16[7];
      v27 = result->u16[0];
      v28 = result->u16[1];
      v29 = v6 * v27 + v4 * v26 + v7 * v28 + 2048;
      v30 = v9 * v27 + v8 * v26 + v10 * v28 + 2048;
      v31 = v13 * v27 + v11 * v26 + v14 * v28 + 2048;
      v32 = (v29 >> 12) & ~(v29 >> 31);
      if (v32 >= 0xFFFF)
        LOWORD(v32) = -1;
      *(v25 - 1) = v32;
      v33 = (v30 >> 12) & ~(v30 >> 31);
      if (v33 >= 0xFFFF)
        LOWORD(v33) = -1;
      *v25 = v33;
      v34 = (v31 >> 12) & ~(v31 >> 31);
      if (v34 >= 0xFFFF)
        LOWORD(v34) = -1;
      v25[1] = v34;
      result = (int32x4_t *)((char *)result + 2 * v5);
      LODWORD(v15) = v15 + 3;
      v25 += 3;
    }
    while (v12 > (int)v15);
  }
  return result;
}

void sub_1002C8E0C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C8E30(uint64_t a1, int *a2)
{
  int v4;
  float *v5;
  const float *v6;
  float32x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  const float *v22;
  uint64_t v23;
  float *v24;
  float *v25;
  uint64_t v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  _BYTE v33[8];
  int v34;
  float32x4x3_t v35;
  float32x4x3_t v36;
  float32x4x3_t v37;
  float32x4x4_t v38;

  sub_100298C2C(v33, &off_100450E20);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (float *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = (const float *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4);
    do
    {
      v7 = *(float32x4_t **)(a1 + 48);
      v8 = *(int *)(a1 + 40);
      v9 = v7->i32[0];
      v10 = v7->f32[1];
      v11 = v7->f32[2];
      v12 = v7->f32[3];
      v13 = v7[1].f32[0];
      v14 = v7[1].f32[1];
      v15 = v7[1].f32[2];
      v16 = v7[1].f32[3];
      v17 = v7[2].f32[0];
      v18 = v7[2].f32[1];
      v19 = 3 * v8;
      if ((_DWORD)v9 == 3)
      {
        if ((int)v8 < 4)
          goto LABEL_10;
        v20 = 0;
        v21 = v5;
        v22 = v6;
        do
        {
          v35 = vld3q_f32(v22);
          v22 += 12;
          v36.val[0] = vmlaq_f32(vmlaq_f32(vmulq_f32(v35.val[0], v7[3]), v7[4], v35.val[1]), v7[5], v35.val[2]);
          v36.val[1] = vmlaq_f32(vmlaq_f32(vmulq_f32(v35.val[0], v7[6]), v7[7], v35.val[1]), v7[8], v35.val[2]);
          v36.val[2] = vmlaq_f32(vmlaq_f32(vmulq_f32(v35.val[0], v7[9]), v7[10], v35.val[1]), v7[11], v35.val[2]);
          vst3q_f32(v21, v36);
          v21 += 12;
          v20 += 12;
        }
        while (v20 <= (int)v19 - 12);
      }
      else
      {
        if ((int)v8 < 4)
        {
LABEL_10:
          v23 = 0;
          v22 = v6;
          if ((int)v19 > 0)
            goto LABEL_15;
          goto LABEL_3;
        }
        v20 = 0;
        v24 = v5;
        v22 = v6;
        do
        {
          v38 = vld4q_f32(v22);
          v22 += 16;
          v37.val[0] = vmlaq_f32(vmlaq_f32(vmulq_f32(v38.val[0], v7[3]), v7[4], v38.val[1]), v7[5], v38.val[2]);
          v37.val[1] = vmlaq_f32(vmlaq_f32(vmulq_f32(v38.val[0], v7[6]), v7[7], v38.val[1]), v7[8], v38.val[2]);
          v37.val[2] = vmlaq_f32(vmlaq_f32(vmulq_f32(v38.val[0], v7[9]), v7[10], v38.val[1]), v7[11], v38.val[2]);
          vst3q_f32(v24, v37);
          v24 += 12;
          v20 += 12;
        }
        while (v20 <= v19 - 12);
      }
      v23 = v20;
      if ((int)v20 < (int)v19)
      {
LABEL_15:
        v25 = (float *)(v22 + 2);
        v26 = 4 * v9;
        v27 = &v5[v23 + 1];
        do
        {
          v28 = *(v25 - 2);
          v29 = *(v25 - 1);
          v30 = (float)((float)(v11 * v29) + (float)(v28 * v10)) + (float)(*v25 * v12);
          v31 = (float)((float)(v14 * v29) + (float)(v28 * v13)) + (float)(*v25 * v15);
          v32 = (float)((float)(v17 * v29) + (float)(v28 * v16)) + (float)(*v25 * v18);
          *(v27 - 1) = v30;
          *v27 = v31;
          v27[1] = v32;
          v23 += 3;
          v25 = (float *)((char *)v25 + v26);
          v27 += 3;
        }
        while (v23 < (int)v19);
      }
LABEL_3:
      ++v4;
      v6 = (const float *)((char *)v6 + *(_QWORD *)(a1 + 16));
      v5 = (float *)((char *)v5 + *(_QWORD *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v34)
    sub_1002989D0(v33);
}

void sub_1002C9040(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C9064(uint64_t a1, int *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450E80);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (char *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4;
    do
    {
      sub_1002C9128(*(int32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002C9114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int32x4_t *sub_1002C9128(int32x4_t *result, uint64_t a2, char *a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int8x8_t v35;
  int8x8_t v36;
  int8x8_t v37;
  _BYTE *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  _BYTE *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int8x8x3_t v58;

  v4 = result->i32[0];
  v5 = result->i32[2];
  v6 = result->i32[3];
  v7 = result[1].i32[0];
  v8 = result[1].i32[1];
  v9 = result[1].i32[2];
  v10 = result[1].i32[3];
  v11 = result[2].i32[0];
  v12 = result[2].i32[1];
  v13 = 3 * a4;
  v14 = result[2].i32[2];
  if (a4 >= 8)
  {
    v15 = 0;
    v16 = 8 * v4;
    v17 = v13 - 24;
    do
    {
      while (1)
      {
        v19 = (const char *)(a2 + v15);
        v58 = vld3_s8(v19);
        v20 = (int8x16_t)vmovl_u8((uint8x8_t)v58.val[0]);
        v21 = (int8x16_t)vmovl_u8((uint8x8_t)v58.val[1]);
        *(uint16x8_t *)v58.val[0].i8 = vmovl_u8((uint8x8_t)v58.val[2]);
        v58.val[1] = (int8x8_t)result[3].i64[0];
        v58.val[2] = (int8x8_t)result[3].i64[1];
        v22 = *(int16x4_t *)result[4].i8;
        v23 = (int16x4_t)result[4].u64[1];
        v24 = *(int16x4_t *)result[5].i8;
        v25 = (int16x4_t)result[5].u64[1];
        v26 = *(int16x4_t *)result[6].i8;
        v27 = (int16x4_t)result[6].u64[1];
        v28 = *(int16x4_t *)result[7].i8;
        v29 = result[8];
        v30 = vshrq_n_s32(vaddq_s32(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v21.i8, (int16x4_t)v58.val[2]), *(int16x4_t *)v20.i8, (int16x4_t)v58.val[1]), (int16x4_t)v58.val[0], v22), v29), 0xCuLL);
        v31 = vshrq_n_s32(vaddq_s32(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v21.i8, v24), *(int16x4_t *)v20.i8, v23), (int16x4_t)v58.val[0], v25), v29), 0xCuLL);
        v32 = vshrq_n_s32(vaddq_s32(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v21.i8, v27), *(int16x4_t *)v20.i8, v26), (int16x4_t)v58.val[0], v28), v29), 0xCuLL);
        v20.i64[0] = vextq_s8(v20, v20, 8uLL).u64[0];
        v21.i64[0] = vextq_s8(v21, v21, 8uLL).u64[0];
        v58.val[0] = (int8x8_t)vextq_s8(*(int8x16_t *)v58.val[0].i8, *(int8x16_t *)v58.val[0].i8, 8uLL).u64[0];
        *(int32x4_t *)v58.val[1].i8 = vshrq_n_s32(vmlal_s16(vmlal_s16(vmlal_s16(v29, *(int16x4_t *)v20.i8, (int16x4_t)v58.val[1]), *(int16x4_t *)v21.i8, (int16x4_t)v58.val[2]), (int16x4_t)v58.val[0], v22), 0xCuLL);
        v33 = vshrq_n_s32(vmlal_s16(vmlal_s16(vmlal_s16(v29, *(int16x4_t *)v20.i8, v23), *(int16x4_t *)v21.i8, v24), (int16x4_t)v58.val[0], v25), 0xCuLL);
        v34 = vshrq_n_s32(vmlal_s16(vmlal_s16(vmlal_s16(v29, *(int16x4_t *)v20.i8, v26), *(int16x4_t *)v21.i8, v27), (int16x4_t)v58.val[0], v28), 0xCuLL);
        v35 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v30), *(int32x4_t *)v58.val[1].i8));
        v36 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v31), v33));
        v37 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v32), v34));
        if ((_DWORD)v4 == 3)
          break;
        v18 = result[7].i64[1];
        vst4_s8(a3, *(int8x8x4_t *)v35.i8);
        v15 += 24;
        a3 += v16;
        if (v15 > v17)
          goto LABEL_7;
      }
      vst3_s8(a3, *(int8x8x3_t *)v35.i8);
      v15 += 24;
      a3 += v16;
    }
    while (v15 <= v17);
  }
  else
  {
    LODWORD(v15) = 0;
  }
LABEL_7:
  if ((int)v15 < v13)
  {
    result = (int32x4_t *)v13;
    v15 = v15;
    if ((_DWORD)v4 == 4)
    {
      v38 = a3 + 3;
      do
      {
        v39 = *(unsigned __int8 *)(a2 + v15);
        v40 = *(unsigned __int8 *)(a2 + v15 + 1);
        v41 = *(unsigned __int8 *)(a2 + v15 + 2);
        v42 = v6 * v40 + v5 * v39 + v7 * v41 + 2048;
        v43 = v9 * v40 + v8 * v39 + v10 * v41 + 2048;
        v44 = v12 * v40 + v11 * v39 + v14 * v41 + 2048;
        v45 = (v42 >> 12) & ~(v42 >> 31);
        if (v45 >= 255)
          LOBYTE(v45) = -1;
        *(v38 - 3) = v45;
        v46 = (v43 >> 12) & ~(v43 >> 31);
        if (v46 >= 255)
          LOBYTE(v46) = -1;
        *(v38 - 2) = v46;
        v47 = (v44 >> 12) & ~(v44 >> 31);
        if (v47 >= 255)
          LOBYTE(v47) = -1;
        *(v38 - 1) = v47;
        *v38 = -1;
        v15 += 3;
        v38 += v4;
      }
      while (v15 < v13);
    }
    else
    {
      v48 = a3 + 1;
      do
      {
        v49 = *(unsigned __int8 *)(a2 + v15);
        v50 = *(unsigned __int8 *)(a2 + v15 + 1);
        v51 = *(unsigned __int8 *)(a2 + v15 + 2);
        v52 = v6 * v50 + v5 * v49 + v7 * v51 + 2048;
        v53 = v9 * v50 + v8 * v49 + v10 * v51 + 2048;
        v54 = v12 * v50 + v11 * v49 + v14 * v51 + 2048;
        v55 = (v52 >> 12) & ~(v52 >> 31);
        if (v55 >= 255)
          LOBYTE(v55) = -1;
        *(v48 - 1) = v55;
        v56 = (v53 >> 12) & ~(v53 >> 31);
        if (v56 >= 255)
          LOBYTE(v56) = -1;
        *v48 = v56;
        v57 = (v54 >> 12) & ~(v54 >> 31);
        if (v57 >= 255)
          LOBYTE(v57) = -1;
        v48[1] = v57;
        v15 += 3;
        v48 += v4;
      }
      while (v15 < v13);
    }
  }
  return result;
}

void sub_1002C93CC(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C93F0(uint64_t a1, int *a2)
{
  int v4;
  __int16 *v5;
  const __int16 *v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450EE0);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (__int16 *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = (const __int16 *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4);
    do
    {
      sub_1002C94A0(*(int32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 = (const __int16 *)((char *)v6 + *(_QWORD *)(a1 + 16));
      v5 = (__int16 *)((char *)v5 + *(_QWORD *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

int32x4_t *sub_1002C94A0(int32x4_t *result, const __int16 *a2, __int16 *a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __int16 *v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int v46;
  uint64_t v47;
  const __int16 *v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  uint64_t v57;
  const __int16 *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int16x4x3_t v68;
  int16x4x3_t v69;
  int16x8x3_t v70;

  v4 = result->i32[0];
  v5 = result->i32[2];
  v6 = result->i32[3];
  v7 = result[1].i32[0];
  v8 = result[1].i32[1];
  v9 = result[1].i32[2];
  v10 = result[1].i32[3];
  v11 = result[2].i32[0];
  v12 = result[2].i32[1];
  v13 = 3 * a4;
  v14 = result[2].i32[2];
  if (a4 >= 8)
  {
    v15 = 0;
    v16 = v13 - 24;
    v17 = 16 * v4;
    v18 = a2;
    do
    {
      while (1)
      {
        v70 = vld3q_s16(v18);
        v20 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v70.val[0].i8);
        v21 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v70.val[1].i8);
        v22 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v70.val[2].i8);
        v23 = result[3];
        v24 = result[4];
        v25 = result[5];
        v26 = result[6];
        v27 = vmlaq_s32(vmlaq_s32(vmulq_s32(v23, v20), v24, v21), v25, v22);
        v28 = result[7];
        v29 = result[8];
        v30 = vmlaq_s32(vmlaq_s32(vmulq_s32(v26, v20), v28, v21), v29, v22);
        v31 = result[9];
        v32 = result[10];
        v33 = vmlaq_s32(vmulq_s32(v31, v20), v32, v21);
        v34 = result[11];
        v35 = result[12];
        v36 = vmlaq_s32(v33, v34, v22);
        v37 = vshrq_n_s32(vaddq_s32(v27, v35), 0xCuLL);
        v38 = vshrq_n_s32(vaddq_s32(v30, v35), 0xCuLL);
        v39 = vshrq_n_s32(vaddq_s32(v36, v35), 0xCuLL);
        v40 = (int32x4_t)vmovl_high_u16((uint16x8_t)v70.val[0]);
        v41 = (int32x4_t)vmovl_high_u16((uint16x8_t)v70.val[1]);
        v70.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v70.val[2]);
        v70.val[1] = (int16x8_t)vmlaq_s32(vmlaq_s32(vmulq_s32(v23, v40), v24, v41), v25, (int32x4_t)v70.val[0]);
        v70.val[2] = (int16x8_t)vmlaq_s32(vmlaq_s32(vmulq_s32(v26, v40), v28, v41), v29, (int32x4_t)v70.val[0]);
        v42 = vmlaq_s32(vmlaq_s32(vmulq_s32(v31, v40), v32, v41), v34, (int32x4_t)v70.val[0]);
        v43 = vqmovun_high_s32(vqmovun_s32(v37), vshrq_n_s32(vaddq_s32((int32x4_t)v70.val[1], v35), 0xCuLL));
        v44 = vqmovun_high_s32(vqmovun_s32(v38), vshrq_n_s32(vaddq_s32((int32x4_t)v70.val[2], v35), 0xCuLL));
        v45 = vqmovun_high_s32(vqmovun_s32(v39), vshrq_n_s32(vaddq_s32(v42, v35), 0xCuLL));
        if ((_DWORD)v4 == 3)
          break;
        v19 = result[14];
        vst4q_s16(a3, *(int16x8x4_t *)v43.i8);
        v15 += 24;
        v18 += 24;
        a3 = (__int16 *)((char *)a3 + v17);
        if (v15 > v16)
          goto LABEL_7;
      }
      vst3q_s16(a3, *(int16x8x3_t *)v43.i8);
      v15 += 24;
      v18 += 24;
      a3 = (__int16 *)((char *)a3 + v17);
    }
    while (v15 <= v16);
  }
  else
  {
    LODWORD(v15) = 0;
  }
LABEL_7:
  v46 = v13 - 12;
  if ((int)v15 <= v13 - 12)
  {
    v47 = 8 * v4;
    v48 = &a2[v15];
    if ((_DWORD)v4 == 3)
    {
      do
      {
        v68 = vld3_s16(v48);
        v48 += 12;
        v49 = (int32x4_t)vmovl_u16((uint16x4_t)v68.val[0]);
        v50 = (int32x4_t)vmovl_u16((uint16x4_t)v68.val[1]);
        *(uint32x4_t *)v68.val[0].i8 = vmovl_u16((uint16x4_t)v68.val[2]);
        *(int32x4_t *)v68.val[1].i8 = vmlaq_s32(vmlaq_s32(vmulq_s32(result[3], v49), result[4], v50), result[5], *(int32x4_t *)v68.val[0].i8);
        *(int32x4_t *)v68.val[2].i8 = vmlaq_s32(vmlaq_s32(vmulq_s32(result[6], v49), result[7], v50), result[8], *(int32x4_t *)v68.val[0].i8);
        v51 = result[12];
        v52 = vmlaq_s32(vmlaq_s32(vmulq_s32(result[9], v49), result[10], v50), result[11], *(int32x4_t *)v68.val[0].i8);
        *(int32x4_t *)v68.val[0].i8 = vshrq_n_s32(vaddq_s32(*(int32x4_t *)v68.val[1].i8, v51), 0xCuLL);
        *(int32x4_t *)v68.val[1].i8 = vshrq_n_s32(vaddq_s32(*(int32x4_t *)v68.val[2].i8, v51), 0xCuLL);
        *(int32x4_t *)v68.val[2].i8 = vshrq_n_s32(vaddq_s32(v52, v51), 0xCuLL);
        *(int16x4_t *)v52.i8 = vqmovun_s32(*(int32x4_t *)v68.val[0].i8);
        *(int16x4_t *)v50.i8 = vqmovun_s32(*(int32x4_t *)v68.val[1].i8);
        *(int16x4_t *)v51.i8 = vqmovun_s32(*(int32x4_t *)v68.val[2].i8);
        vst3_s16(a3, *(int16x4x3_t *)((char *)&v50 - 8));
        a3 = (__int16 *)((char *)a3 + v47);
        LODWORD(v15) = v15 + 12;
      }
      while (v46 >= (int)v15);
    }
    else
    {
      do
      {
        v69 = vld3_s16(v48);
        v48 += 12;
        v53 = (int32x4_t)vmovl_u16((uint16x4_t)v69.val[0]);
        v54 = (int32x4_t)vmovl_u16((uint16x4_t)v69.val[1]);
        *(uint32x4_t *)v69.val[0].i8 = vmovl_u16((uint16x4_t)v69.val[2]);
        *(int32x4_t *)v69.val[1].i8 = vmlaq_s32(vmlaq_s32(vmulq_s32(result[3], v53), result[4], v54), result[5], *(int32x4_t *)v69.val[0].i8);
        *(int32x4_t *)v69.val[2].i8 = vmlaq_s32(vmlaq_s32(vmulq_s32(result[6], v53), result[7], v54), result[8], *(int32x4_t *)v69.val[0].i8);
        v55 = result[12];
        v56 = vmlaq_s32(vmlaq_s32(vmulq_s32(result[9], v53), result[10], v54), result[11], *(int32x4_t *)v69.val[0].i8);
        *(int32x4_t *)v69.val[0].i8 = vshrq_n_s32(vaddq_s32(*(int32x4_t *)v69.val[1].i8, v55), 0xCuLL);
        *(int32x4_t *)v69.val[1].i8 = vshrq_n_s32(vaddq_s32(*(int32x4_t *)v69.val[2].i8, v55), 0xCuLL);
        *(int32x4_t *)v69.val[2].i8 = vshrq_n_s32(vaddq_s32(v56, v55), 0xCuLL);
        *(int16x4_t *)v56.i8 = vqmovun_s32(*(int32x4_t *)v69.val[0].i8);
        *(int16x4_t *)v54.i8 = vqmovun_s32(*(int32x4_t *)v69.val[1].i8);
        *(int16x4_t *)v55.i8 = vqmovun_s32(*(int32x4_t *)v69.val[2].i8);
        v57 = result[13].i64[0];
        vst4_s16(a3, *(int16x4x4_t *)((char *)&v54 - 8));
        a3 = (__int16 *)((char *)a3 + v47);
        LODWORD(v15) = v15 + 12;
      }
      while (v46 >= (int)v15);
    }
  }
  if ((int)v15 < v13)
  {
    result = (int32x4_t *)(a3 + 2);
    v58 = &a2[v15 + 1];
    do
    {
      v59 = *((unsigned __int16 *)v58 - 1);
      v60 = *(unsigned __int16 *)v58;
      v61 = *((unsigned __int16 *)v58 + 1);
      v62 = v6 * v60 + v5 * v59 + v7 * v61 + 2048;
      v63 = v9 * v60 + v8 * v59 + v10 * v61 + 2048;
      v64 = v12 * v60 + v11 * v59 + v14 * v61 + 2048;
      v65 = (v62 >> 12) & ~(v62 >> 31);
      if (v65 >= 0xFFFF)
        LOWORD(v65) = -1;
      result[-1].i16[6] = v65;
      v66 = (v63 >> 12) & ~(v63 >> 31);
      if (v66 >= 0xFFFF)
        LOWORD(v66) = -1;
      result[-1].i16[7] = v66;
      v67 = (v64 >> 12) & ~(v64 >> 31);
      if (v67 >= 0xFFFF)
        LOWORD(v67) = -1;
      result->i16[0] = v67;
      if ((_DWORD)v4 == 4)
        result->i16[1] = -1;
      v58 += 3;
      result = (int32x4_t *)((char *)result + 2 * v4);
      LODWORD(v15) = v15 + 3;
    }
    while (v13 > (int)v15);
  }
  return result;
}

void sub_1002C97E0(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C9804(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float *v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  _BYTE v53[8];
  int v54;

  sub_100298C2C(v53, &off_100450F40);
  v4 = a2[1];
  v5 = *a2;
  if ((int)v5 < v4)
  {
    v6 = *(int *)(a1 + 40);
    if ((int)v6 >= 1)
    {
      v8 = *(_QWORD *)(a1 + 8);
      v7 = *(_QWORD *)(a1 + 16);
      v9 = v7 * v5;
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(float **)(a1 + 48);
      v12 = 3 * v6;
      v13 = *(int *)v11;
      v14 = v10 * v5 + *(_QWORD *)(a1 + 24) + 8;
      if ((_DWORD)v13 == 4)
      {
        v15 = 4 * v13;
        v16 = v9 + v8 + 4;
        do
        {
          v17 = 0;
          v18 = v11[2];
          v19 = v11[3];
          v20 = v11[4];
          v21 = v11[5];
          v22 = v11[6];
          v23 = v11[7];
          v24 = v11[8];
          v25 = v11[9];
          v26 = (float *)v16;
          v27 = v14;
          v28 = v11[10];
          do
          {
            v29 = *(v26 - 1);
            v30 = v26[1];
            v31 = (float)((float)(v19 * *v26) + (float)(v29 * v18)) + (float)(v30 * v20);
            v32 = (float)((float)(v22 * *v26) + (float)(v29 * v21)) + (float)(v30 * v23);
            v33 = (float)((float)(v25 * *v26) + (float)(v29 * v24)) + (float)(v30 * v28);
            *(float *)(v27 - 8) = v31;
            *(float *)(v27 - 4) = v32;
            *(float *)v27 = v33;
            *(_DWORD *)(v27 + 4) = 1065353216;
            v17 += 3;
            v27 += v15;
            v26 += 3;
          }
          while (v17 < v12);
          LODWORD(v5) = v5 + 1;
          v14 += v10;
          v16 += v7;
        }
        while ((_DWORD)v5 != v4);
      }
      else
      {
        v34 = 4 * v13;
        v35 = v9 + v8 + 4;
        do
        {
          v36 = 0;
          v37 = v11[2];
          v38 = v11[3];
          v39 = v11[4];
          v40 = v11[5];
          v41 = v11[6];
          v42 = v11[7];
          v43 = v11[8];
          v44 = v11[9];
          v45 = (float *)v35;
          v46 = (float *)v14;
          v47 = v11[10];
          do
          {
            v48 = *(v45 - 1);
            v49 = v45[1];
            v50 = (float)((float)(v38 * *v45) + (float)(v48 * v37)) + (float)(v49 * v39);
            v51 = (float)((float)(v41 * *v45) + (float)(v48 * v40)) + (float)(v49 * v42);
            v52 = (float)((float)(v44 * *v45) + (float)(v48 * v43)) + (float)(v49 * v47);
            *(v46 - 2) = v50;
            *(v46 - 1) = v51;
            *v46 = v52;
            v36 += 3;
            v46 = (float *)((char *)v46 + v34);
            v45 += 3;
          }
          while (v36 < v12);
          LODWORD(v5) = v5 + 1;
          v14 += v10;
          v35 += v7;
        }
        while ((_DWORD)v5 != v4);
      }
    }
  }
  if (v54)
    sub_1002989D0(v53);
}

void sub_1002C99B8(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C99DC(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100450FA0);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4;
    v6 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4;
    do
    {
      sub_1002C9AA0(*(_QWORD *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002C9A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C9AA0(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;

  v5 = *(int *)result;
  v4 = *(int *)(result + 4);
  v6 = *(_DWORD *)(result + 8);
  if (v6 == 180)
    v7 = dword_10048B198;
  else
    v7 = dword_10048B598;
  if (byte_10048B998)
  {
    if (a4 < 1)
      return result;
  }
  else
  {
    dword_10048B598[0] = 0;
    dword_10048B198[0] = 0;
    dword_10048AD98[0] = 0;
    v8 = 1;
    result = 0x4126800000000000;
    do
    {
      v9 = v8;
      v10 = (double)(int)v8 * 6.0;
      dword_10048AD98[v9] = (uint64_t)rint(1044480.0 / (double)(int)v8);
      dword_10048B198[v9] = (uint64_t)rint(737280.0 / v10);
      dword_10048B598[v9] = (uint64_t)rint(1048576.0 / v10);
      ++v8;
    }
    while (v8 != 256);
    byte_10048B998 = 1;
    if (a4 < 1)
      return result;
  }
  v11 = 0;
  v12 = 3 * a4;
  result = 2048;
  do
  {
    v25 = *(unsigned __int8 *)(a2 + v4);
    v26 = *(unsigned __int8 *)(a2 + 1);
    v27 = *(unsigned __int8 *)(a2 + (v4 ^ 2));
    v28 = v26 - v25;
    v29 = byte_1003C45C4[(v26 - v25 + 256)] + (_DWORD)v25;
    if (v27 - v29 < -256)
      v30 = 0;
    else
      v30 = byte_1003C45C4[v27 - v29 + 256];
    v31 = v25 - byte_1003C45C4[(v25 | 0x100) - v26];
    if (v31 - v27 >= -256)
      v13 = byte_1003C45C4[v31 - v27 + 256];
    else
      v13 = 0;
    v14 = v30 + v29;
    v15 = (v14 - v31 + v13) & ~((v14 - v31 + v13) >> 31);
    if (v15 >= 255)
      v15 = 255;
    v16 = (v15 * dword_10048AD98[v14] + 2048) >> 12;
    v17 = v25 - v27 + 2 * v15;
    if (v14 == (_DWORD)v26)
      v18 = v17;
    else
      v18 = v27 - v26 + 4 * v15;
    if (v14 == v27)
      v19 = v28;
    else
      v19 = v18;
    v20 = v19 * v7[v15];
    v21 = v20 + 2048;
    if (v20 >= -2048)
      v22 = 0;
    else
      v22 = v6;
    v23 = (v22 + (v21 >> 12)) & ~((v22 + (v21 >> 12)) >> 31);
    if (v23 >= 255)
      LOBYTE(v23) = -1;
    v24 = (_BYTE *)(a3 + v11);
    *v24 = v23;
    v24[1] = v16;
    v24[2] = v14;
    v11 += 3;
    a2 += v5;
  }
  while (v11 < v12);
  return result;
}

void sub_1002C9CA0(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C9CC4(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float *v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  BOOL v29;
  float v30;
  float v31;
  _BYTE v32[8];
  int v33;

  sub_100298C2C(v32, &off_100451000);
  v4 = a2[1];
  v5 = *a2;
  if ((int)v5 < v4)
  {
    v6 = *(int *)(a1 + 40);
    if ((int)v6 >= 1)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v8 = *(_QWORD *)(a1 + 8) + v7 * v5;
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(float **)(a1 + 48);
      v11 = 3 * v6;
      v12 = *((int *)v10 + 1);
      v14 = 4 * *(int *)v10;
      v15 = v9 * v5 + *(_QWORD *)(a1 + 24) + 8;
      do
      {
        v16 = 0;
        v17 = v10[2] * 0.0027778;
        v18 = (float *)v15;
        v19 = v8;
        do
        {
          v20 = *(float *)(v19 + 4 * v12);
          v21 = *(float *)(v19 + 4);
          v13 = v12 ^ 2;
          v22 = *(float *)(v19 + 4 * (v12 ^ 2));
          if (v22 >= v21)
            v23 = *(float *)(v19 + 4 * v13);
          else
            v23 = *(float *)(v19 + 4);
          if (v22 <= v21)
            v24 = *(float *)(v19 + 4 * v13);
          else
            v24 = *(float *)(v19 + 4);
          if (v23 < v20)
            v23 = *(float *)(v19 + 4 * v12);
          if (v24 > v20)
            v24 = *(float *)(v19 + 4 * v12);
          v25 = v23 - v24;
          v26 = 60.0 / (float)(v25 + 0.00000011921);
          v27 = v25 / (float)(fabsf(v23) + 0.00000011921);
          v28 = (float)(v21 - v20) * v26;
          v29 = v23 == v21;
          v30 = (float)((float)(v20 - v22) * v26) + 120.0;
          v31 = (float)((float)(v22 - v21) * v26) + 240.0;
          if (!v29)
            v30 = v31;
          if (v23 == v22)
            v30 = v28;
          if (v30 < 0.0)
            v30 = v30 + 360.0;
          *(v18 - 2) = v17 * v30;
          *(v18 - 1) = v27;
          *v18 = v23;
          v18 += 3;
          v16 += 3;
          v19 += v14;
        }
        while (v16 < v11);
        LODWORD(v5) = v5 + 1;
        v8 += v7;
        v15 += v9;
      }
      while ((_DWORD)v5 != v4);
    }
  }
  if (v33)
    sub_1002989D0(v32);
}

void sub_1002C9E44(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002C9E68(uint64_t a1, int *a2)
{
  float32x4_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  int v9;

  sub_100298C2C(v8, &off_100451060);
  v5 = *a2;
  if (*a2 < a2[1])
  {
    v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v5;
    v7 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v5;
    do
    {
      sub_1002C9F2C(*(_QWORD *)(a1 + 48), v7, v6, *(_DWORD *)(a1 + 40), v4);
      ++v5;
      v7 += *(_QWORD *)(a1 + 16);
      v6 += *(_QWORD *)(a1 + 32);
    }
    while (v5 < a2[1]);
  }
  if (v9)
    sub_1002989D0(v8);
}

void sub_1002C9F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C9F2C(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t a5)
{
  float32x4_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  float *v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  float *v20;
  float *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  const float *v46;
  const float *v47;
  float32x4_t v48;
  unsigned __int8 v49;
  float32x4_t v50;
  float32x4_t v51;
  unsigned __int8 v52;
  float32x4_t v53;
  float32x4_t v54;
  unsigned __int8 v55;
  float32x4_t v56;
  float32x4_t v57;
  unsigned __int8 v58;
  float32x4_t v59;
  float32x4_t v60;
  unsigned __int8 v61;
  uint8x8_t v62;
  uint8x8_t v63;
  char *v64;
  int v65;
  __int128 v66;
  int v67;
  __int128 v68;
  int v69;
  __int128 v70;
  int v71;
  __int128 v72;
  int v73;
  __int128 v74;
  int v75;
  __int128 v76;
  uint64_t v77;
  float *v78;
  float v79;
  int32x2_t v80;
  _BYTE *v81;
  char v82;
  __int128 v83;
  float32x4_t v84;
  __int128 v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  __int128 v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  __int128 v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  __int128 v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4x3_t v108;
  float32x4x3_t v109;
  float32x4x3_t v110;
  float32x4x3_t v111;
  float32x4x3_t v112;
  float32x4x3_t v113;
  float32x4x3_t v114;
  float32x4x3_t v115;
  float32x4x3_t v116;
  float32x4x3_t v117;
  float32x4x3_t v118;
  float32x4x3_t v119;
  float *v120;
  float *v121;
  float *v122;
  float *v123;
  float *v124;
  float *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  _BYTE v144[4];
  int v145;
  float32x4x3_t v146;
  float32x4x3_t v147;
  float32x4x3_t v148;
  int8x8x4_t v149;

  if (a4 >= 1)
  {
    v7 = (float32x4_t *)result;
    v8 = 0;
    v9 = *(int *)result;
    v10 = 8 * v9;
    v11 = (float *)&v145;
    result = 255;
    while (1)
    {
      if (a4 - v8 >= 256)
        v12 = 256;
      else
        v12 = a4 - v8;
      v13 = 3 * v12;
      v14 = 0;
      v15 = (v13 - 24);
      if (v13 - 24 >= 0)
      {
        a5 = v7[2];
        v16 = (float *)v144;
        do
        {
          if ((_DWORD)v9 == 3)
            *(int8x8x3_t *)v149.val[0].i8 = vld3_s8((const char *)a2);
          else
            v149 = vld4_s8((const char *)a2);
          v17 = vmovl_u8((uint8x8_t)v149.val[0]);
          v18 = vmovl_u8((uint8x8_t)v149.val[1]);
          v19 = vmovl_u8((uint8x8_t)v149.val[2]);
          v146.val[0] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v17.i8)));
          v146.val[1] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v18.i8)));
          v146.val[2] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v19.i8)));
          v20 = v16;
          vst3q_f32(v20, v146);
          v20 += 12;
          v146.val[0] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_high_u16(v17)));
          v146.val[1] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_high_u16(v18)));
          v146.val[2] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_high_u16(v19)));
          vst3q_f32(v20, v146);
          v14 += 24;
          a2 += v10;
          v16 += 24;
        }
        while (v14 <= v15);
        v14 = v14;
      }
      if ((int)v14 < v13)
      {
        v21 = &v11[v14];
        do
        {
          a5.i8[0] = *(_BYTE *)a2;
          *(float *)&v22 = (float)a5.u32[0] * 0.0039216;
          *(v21 - 1) = *(float *)&v22;
          LOBYTE(v22) = *(_BYTE *)(a2 + 1);
          *(float *)&v23 = (float)v22 * 0.0039216;
          *v21 = *(float *)&v23;
          LOBYTE(v23) = *(_BYTE *)(a2 + 2);
          a5.f32[0] = (float)v23 * 0.0039216;
          v21[1] = a5.f32[0];
          v14 += 3;
          a2 += v9;
          v21 += 3;
        }
        while ((uint64_t)v14 < v13);
      }
      if (a4 - v8 >= 1)
      {
        v24 = 0;
        v25 = v7->i32[2];
        a5.i32[0] = v7->i32[3];
        v27 = 4 * v7->i32[1];
        v28 = (float *)v144;
        v29 = v11;
        do
        {
          v30 = v28[v25];
          v31 = v28[1];
          v26 = v25 ^ 2;
          v32 = v28[v25 ^ 2];
          if (v32 >= v31)
            v33 = v28[v26];
          else
            v33 = v28[1];
          if (v32 <= v31)
            v34 = v28[v26];
          else
            v34 = v28[1];
          if (v33 >= v30)
            v35 = v33;
          else
            v35 = v28[v25];
          if (v34 <= v30)
            v36 = v34;
          else
            v36 = v28[v25];
          v37 = v35 - v36;
          v38 = (float)(v35 + v36) * 0.5;
          v39 = 0.0;
          v40 = 0.0;
          if ((float)(v35 - v36) > 0.00000011921)
          {
            v41 = (float)(2.0 - v35) - v36;
            if (v38 < 0.5)
              v41 = v35 + v36;
            v40 = v37 / v41;
            v42 = 60.0 / v37;
            v43 = (float)((float)(v32 - v31) * (float)(60.0 / v37)) + 240.0;
            if (v35 == v31)
              v43 = (float)((float)(v30 - v32) * v42) + 120.0;
            v44 = (float)(v31 - v30) * v42;
            if (v35 == v32)
              v39 = v44;
            else
              v39 = v43;
            if (v39 < 0.0)
              v39 = v39 + 360.0;
          }
          *(v29 - 1) = v39 * a5.f32[0];
          *v29 = v38;
          v29[1] = v40;
          v24 += 3;
          v28 = (float *)((char *)v28 + v27);
          v29 += 3;
        }
        while (v24 < v13);
      }
      if ((v15 & 0x80000000) == 0)
        break;
      v77 = 0;
      if (v13 > 0)
        goto LABEL_67;
LABEL_3:
      v8 += 256;
      a3 += 768;
      if (v8 >= a4)
        return result;
    }
    v45 = 0;
    v46 = (const float *)v144;
    do
    {
      v47 = v46;
      v148 = vld3q_f32(v47);
      v47 += 12;
      v147 = vld3q_f32(v47);
      LOBYTE(v47) = atomic_load((unsigned __int8 *)qword_10048AA40);
      if ((v47 & 1) == 0)
      {
        v138 = a4;
        v132 = v8;
        v120 = v11;
        v126 = v10;
        v114 = v147;
        v108 = v148;
        v65 = __cxa_guard_acquire(qword_10048AA40);
        v148 = v108;
        v147 = v114;
        *(_QWORD *)&v66 = 0x3F0000003F000000;
        *((_QWORD *)&v66 + 1) = 0x3F0000003F000000;
        v11 = v120;
        v10 = v126;
        v8 = v132;
        a4 = v138;
        if (v65)
        {
          xmmword_10048AA30 = v66;
          __cxa_guard_release(qword_10048AA40);
          v148 = v108;
          v147 = v114;
          v11 = v120;
          v10 = v126;
          v8 = v132;
          a4 = v138;
        }
      }
      v48 = (float32x4_t)xmmword_10048AA30;
      v49 = atomic_load((unsigned __int8 *)qword_10048AA40);
      if ((v49 & 1) == 0)
      {
        v139 = a4;
        v133 = v8;
        v121 = v11;
        v127 = v10;
        v115 = v147;
        v109 = v148;
        v103 = xmmword_10048AA30;
        v67 = __cxa_guard_acquire(qword_10048AA40);
        v48 = (float32x4_t)v103;
        v148 = v109;
        v147 = v115;
        *(_QWORD *)&v68 = 0x3F0000003F000000;
        *((_QWORD *)&v68 + 1) = 0x3F0000003F000000;
        v11 = v121;
        v10 = v127;
        v8 = v133;
        a4 = v139;
        if (v67)
        {
          xmmword_10048AA30 = v68;
          __cxa_guard_release(qword_10048AA40);
          v48 = (float32x4_t)v103;
          v148 = v109;
          v147 = v115;
          v11 = v121;
          v10 = v127;
          v8 = v133;
          a4 = v139;
        }
      }
      v50 = (float32x4_t)xmmword_10048AA30;
      v51 = v7[1];
      v52 = atomic_load((unsigned __int8 *)qword_10048AA40);
      if ((v52 & 1) == 0)
      {
        v140 = a4;
        v134 = v8;
        v122 = v11;
        v128 = v10;
        v116 = v147;
        v110 = v148;
        v99 = v7[1];
        v104 = v48;
        v95 = xmmword_10048AA30;
        v69 = __cxa_guard_acquire(qword_10048AA40);
        v50 = (float32x4_t)v95;
        v51 = v99;
        v48 = v104;
        v148 = v110;
        v147 = v116;
        *(_QWORD *)&v70 = 0x3F0000003F000000;
        *((_QWORD *)&v70 + 1) = 0x3F0000003F000000;
        v11 = v122;
        v10 = v128;
        v8 = v134;
        a4 = v140;
        if (v69)
        {
          xmmword_10048AA30 = v70;
          __cxa_guard_release(qword_10048AA40);
          v50 = (float32x4_t)v95;
          v51 = v99;
          v48 = v104;
          v148 = v110;
          v147 = v116;
          v11 = v122;
          v10 = v128;
          v8 = v134;
          a4 = v140;
        }
      }
      v53 = (float32x4_t)xmmword_10048AA30;
      v54 = v7[1];
      v55 = atomic_load((unsigned __int8 *)qword_10048AA40);
      if ((v55 & 1) == 0)
      {
        v141 = a4;
        v135 = v8;
        v123 = v11;
        v129 = v10;
        v117 = v147;
        v111 = v148;
        v100 = v51;
        v105 = v48;
        v92 = v7[1];
        v96 = v50;
        v89 = xmmword_10048AA30;
        v71 = __cxa_guard_acquire(qword_10048AA40);
        v53 = (float32x4_t)v89;
        v54 = v92;
        v50 = v96;
        v51 = v100;
        v48 = v105;
        v148 = v111;
        v147 = v117;
        *(_QWORD *)&v72 = 0x3F0000003F000000;
        *((_QWORD *)&v72 + 1) = 0x3F0000003F000000;
        v11 = v123;
        v10 = v129;
        v8 = v135;
        a4 = v141;
        if (v71)
        {
          xmmword_10048AA30 = v72;
          __cxa_guard_release(qword_10048AA40);
          v53 = (float32x4_t)v89;
          v54 = v92;
          v50 = v96;
          v51 = v100;
          v48 = v105;
          v148 = v111;
          v147 = v117;
          v11 = v123;
          v10 = v129;
          v8 = v135;
          a4 = v141;
        }
      }
      v56 = (float32x4_t)xmmword_10048AA30;
      v57 = v7[1];
      v58 = atomic_load((unsigned __int8 *)qword_10048AA40);
      if ((v58 & 1) == 0)
      {
        v142 = a4;
        v136 = v8;
        v124 = v11;
        v130 = v10;
        v118 = v147;
        v112 = v148;
        v101 = v51;
        v106 = v48;
        v93 = v54;
        v97 = v50;
        v87 = v7[1];
        v90 = v53;
        v85 = xmmword_10048AA30;
        v73 = __cxa_guard_acquire(qword_10048AA40);
        v56 = (float32x4_t)v85;
        v57 = v87;
        v53 = v90;
        v54 = v93;
        v50 = v97;
        v51 = v101;
        v48 = v106;
        v148 = v112;
        v147 = v118;
        *(_QWORD *)&v74 = 0x3F0000003F000000;
        *((_QWORD *)&v74 + 1) = 0x3F0000003F000000;
        v11 = v124;
        v10 = v130;
        v8 = v136;
        a4 = v142;
        if (v73)
        {
          xmmword_10048AA30 = v74;
          __cxa_guard_release(qword_10048AA40);
          v56 = (float32x4_t)v85;
          v57 = v87;
          v53 = v90;
          v54 = v93;
          v50 = v97;
          v51 = v101;
          v48 = v106;
          v148 = v112;
          v147 = v118;
          v11 = v124;
          v10 = v130;
          v8 = v136;
          a4 = v142;
        }
      }
      v59 = (float32x4_t)xmmword_10048AA30;
      v60 = v7[1];
      v61 = atomic_load((unsigned __int8 *)qword_10048AA40);
      if ((v61 & 1) == 0)
      {
        v143 = a4;
        v137 = v8;
        v125 = v11;
        v131 = v10;
        v119 = v147;
        v113 = v148;
        v102 = v51;
        v107 = v48;
        v94 = v54;
        v98 = v50;
        v88 = v57;
        v91 = v53;
        v84 = v7[1];
        v86 = v56;
        v83 = xmmword_10048AA30;
        v75 = __cxa_guard_acquire(qword_10048AA40);
        v59 = (float32x4_t)v83;
        v60 = v84;
        v56 = v86;
        v57 = v88;
        v53 = v91;
        v54 = v94;
        v50 = v98;
        v51 = v102;
        v48 = v107;
        v148 = v113;
        v147 = v119;
        *(_QWORD *)&v76 = 0x3F0000003F000000;
        *((_QWORD *)&v76 + 1) = 0x3F0000003F000000;
        v11 = v125;
        v10 = v131;
        v8 = v137;
        a4 = v143;
        if (v75)
        {
          xmmword_10048AA30 = v76;
          __cxa_guard_release(qword_10048AA40);
          v59 = (float32x4_t)v83;
          v60 = v84;
          v56 = v86;
          v57 = v88;
          v53 = v91;
          v54 = v94;
          v50 = v98;
          v51 = v102;
          v48 = v107;
          v148 = v113;
          v147 = v119;
          v11 = v125;
          v10 = v131;
          v8 = v137;
          a4 = v143;
        }
      }
      *(uint8x8_t *)a5.f32 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(v148.val[0], v48))), vcvtq_u32_f32(vaddq_f32(v147.val[0], v50))));
      v62 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v148.val[1], v51), v53))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(v147.val[1], v54), v56))));
      v63 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v148.val[2], v57), v59))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(v147.val[2], v60), (float32x4_t)xmmword_10048AA30))));
      v64 = (char *)(a3 + v45);
      vst3_s8(v64, *(int8x8x3_t *)a5.f32);
      v45 += 24;
      v46 += 24;
    }
    while ((int)v15 >= (int)v45);
    v77 = v45;
    result = 255;
    if ((int)v45 >= v13)
      goto LABEL_3;
LABEL_67:
    v78 = &v11[v77];
    do
    {
      v79 = v78[1];
      v80.i32[0] = (uint64_t)rintf(*(v78 - 1));
      v80.i32[1] = (uint64_t)rintf(*v78 * 255.0);
      *(int32x2_t *)a5.f32 = vmin_s32(vmax_s32(v80, 0), (int32x2_t)0xFF000000FFLL);
      v81 = (_BYTE *)(a3 + v77);
      *v81 = a5.i8[0];
      a5.f32[0] = rintf(v79 * 255.0);
      v81[1] = a5.i8[4];
      if ((int)((uint64_t)a5.f32[0] & ~((int)(uint64_t)a5.f32[0] >> 31)) >= 255)
        v82 = -1;
      else
        v82 = (uint64_t)a5.f32[0] & ~((int)(uint64_t)a5.f32[0] >> 31);
      v81[2] = v82;
      v77 += 3;
      v78 += 3;
    }
    while (v13 > (int)v77);
    goto LABEL_3;
  }
  return result;
}

void sub_1002CA8D0(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002CA8F4(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  float v35;
  _BYTE v36[8];
  int v37;

  sub_100298C2C(v36, &off_1004510C0);
  v4 = a2[1];
  v5 = *a2;
  if ((int)v5 < v4)
  {
    v6 = *(int *)(a1 + 40);
    if ((int)v6 >= 1)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v8 = *(_QWORD *)(a1 + 8) + v7 * v5;
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 3 * v6;
      v11 = *(float **)(a1 + 48);
      v12 = *((int *)v11 + 1);
      v14 = 4 * *(int *)v11;
      v15 = v9 * v5 + *(_QWORD *)(a1 + 24) + 8;
      do
      {
        v16 = 0;
        v17 = (float *)v15;
        v18 = v8;
        do
        {
          v19 = *(float *)(v18 + 4 * v12);
          v20 = *(float *)(v18 + 4);
          v13 = v12 ^ 2;
          v21 = *(float *)(v18 + 4 * (v12 ^ 2));
          if (v21 >= v20)
            v22 = *(float *)(v18 + 4 * v13);
          else
            v22 = *(float *)(v18 + 4);
          if (v21 <= v20)
            v23 = *(float *)(v18 + 4 * v13);
          else
            v23 = *(float *)(v18 + 4);
          if (v22 >= v19)
            v24 = v22;
          else
            v24 = *(float *)(v18 + 4 * v12);
          if (v23 <= v19)
            v25 = v23;
          else
            v25 = *(float *)(v18 + 4 * v12);
          v26 = v24 - v25;
          v27 = (float)(v24 + v25) * 0.5;
          v28 = 0.0;
          v29 = 0.0;
          if ((float)(v24 - v25) > 0.00000011921)
          {
            v30 = (float)(2.0 - v24) - v25;
            if (v27 < 0.5)
              v30 = v24 + v25;
            v29 = v26 / v30;
            v31 = 60.0 / v26;
            v32 = (float)(v20 - v19) * (float)(60.0 / v26);
            v33 = v24 == v20;
            v34 = (float)((float)(v19 - v21) * v31) + 120.0;
            v35 = (float)((float)(v21 - v20) * v31) + 240.0;
            if (v33)
              v35 = v34;
            if (v24 == v21)
              v28 = v32;
            else
              v28 = v35;
            if (v28 < 0.0)
              v28 = v28 + 360.0;
          }
          *(v17 - 2) = v28 * v11[2];
          *(v17 - 1) = v27;
          *v17 = v29;
          v17 += 3;
          v16 += 3;
          v18 += v14;
        }
        while (v16 < v10);
        LODWORD(v5) = v5 + 1;
        v8 += v7;
        v15 += v9;
      }
      while ((_DWORD)v5 != v4);
    }
  }
  if (v37)
    sub_1002989D0(v36);
}

void sub_1002CAA98(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002CAABC(uint64_t a1, int *a2)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  _BYTE v10[8];
  int v11;

  sub_100298C2C(v10, &off_100451120);
  v7 = *a2;
  if (*a2 < a2[1])
  {
    v8 = (char *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v7);
    v9 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v7;
    do
    {
      sub_1002CAB80(*(float32x4_t **)(a1 + 48), v9, v8, *(_DWORD *)(a1 + 40), v4, v5, v6);
      ++v7;
      v9 += *(_QWORD *)(a1 + 16);
      v8 += *(_QWORD *)(a1 + 32);
    }
    while (v7 < a2[1]);
  }
  if (v11)
    sub_1002989D0(v10);
}

void sub_1002CAB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CAB80(float32x4_t *a1, uint64_t a2, char *a3, int a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  int v10;
  int v11;
  uint64_t v12;
  float32x2_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  float *v29;
  const char *v30;
  uint16x8_t v31;
  uint16x8_t v32;
  float *v33;
  float32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  float *v46;
  unint64_t v47;
  const char *v48;
  int8x16_t v49;
  float *v50;
  float *v51;
  float *v52;
  unint64_t v53;
  unint64_t v54;
  float *v55;
  const char *v56;
  float *v57;
  float *v58;
  _QWORD *v59;
  uint32x2_t v60;
  int v61;
  const float *v62;
  uint64_t v63;
  const float *v64;
  float32x4_t v65;
  float32x4_t v66;
  unsigned __int8 v67;
  float32x4_t v68;
  float32x4_t v69;
  unsigned __int8 v70;
  float32x4_t v71;
  float32x4_t v72;
  unsigned __int8 v73;
  float32x4_t v74;
  float32x4_t v75;
  unsigned __int8 v76;
  float32x4_t v77;
  float32x4_t v78;
  unsigned __int8 v79;
  uint8x8_t v80;
  uint64_t v81;
  int v82;
  __int128 v83;
  int v84;
  __int128 v85;
  int v86;
  __int128 v87;
  int v88;
  __int128 v89;
  int v90;
  __int128 v91;
  int v92;
  __int128 v93;
  float *v94;
  float v95;
  int v96;
  float v97;
  int v98;
  int v99;
  __int128 v100;
  float32x4_t v101;
  __int128 v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  __int128 v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  __int128 v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  __int128 v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4x3_t v136;
  float32x4x3_t v137;
  float32x4x3_t v138;
  float32x4x3_t v139;
  float32x4x3_t v140;
  float32x4x3_t v141;
  float32x4x3_t v142;
  float32x4x3_t v143;
  float32x4x3_t v144;
  float32x4x3_t v145;
  float32x4x3_t v146;
  float32x4x3_t v147;
  float *v148;
  int v149;
  float32x4_t v150;
  int v151;
  int v152;
  int v153;
  int v154;
  _BYTE v155[3072];
  int8x8x3_t v156;
  float32x4x3_t v157;
  float32x4x3_t v158;
  float32x4x3_t v159;
  float32x4x3_t v160;
  float32x4x3_t v161;
  float32x4x3_t v162;
  float32x4x3_t v163;
  float32x4x3_t v164;

  if (a4 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = a1->i32[0];
    v148 = &a1->f32[1];
    v13 = (float32x2_t)vdup_n_s32(0x3B808081u);
    v14 = (int8x16_t)xmmword_1003BCA90;
    v15 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v16 = (int8x16_t)xmmword_1003BCAA0;
    v17 = (int8x16_t)xmmword_1003BCAB0;
    v18 = (int8x16_t)xmmword_1003BCAC0;
    v19 = a4;
    v149 = a4;
    v150 = v15;
    do
    {
      v152 = v19 - 256;
      if (v19 >= 256)
        v23 = 256;
      else
        v23 = v19;
      v154 = v10;
      v24 = a4 - (v10 << 8);
      if (v24 >= 256)
        v24 = 256;
      v153 = v11;
      if (a4 - v11 >= 256)
        v25 = 256;
      else
        v25 = a4 - v11;
      v26 = 3 * v25;
      v27 = 0;
      v28 = (3 * v25 - 24);
      if (3 * v25 - 24 >= 0)
      {
        a5 = a1[2];
        v29 = (float *)v155;
        do
        {
          v30 = (const char *)(a2 + v27);
          v156 = vld3_s8(v30);
          v31 = vmovl_u8((uint8x8_t)v156.val[0]);
          v32 = vmovl_u8((uint8x8_t)v156.val[1]);
          *(uint16x8_t *)v156.val[0].i8 = vmovl_u8((uint8x8_t)v156.val[2]);
          v159.val[0] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v31.i8));
          v159.val[1] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v32.i8)));
          v159.val[2] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_u16((uint16x4_t)v156.val[0])));
          v33 = v29;
          vst3q_f32(v33, v159);
          v33 += 12;
          a7 = vcvtq_f32_u32(vmovl_high_u16(v31));
          *(float32x4_t *)v156.val[2].i8 = vmulq_f32(a5, vcvtq_f32_u32(vmovl_high_u16(v32)));
          a6 = vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v156.val[0].i8));
          v34 = vmulq_f32(a5, a6);
          vst3q_f32(v33, *(float32x4x3_t *)a7.f32);
          v27 += 24;
          v29 += 24;
        }
        while (v27 <= v28);
        v27 = v27;
      }
      if ((int)v27 >= v26)
        goto LABEL_44;
      v35 = 3 * v24;
      v36 = v27 + 3;
      if ((uint64_t)(v27 + 3) > v35)
        v35 = v27 + 3;
      v37 = v35 - 3;
      if (v37 == v27)
        v38 = 0;
      else
        v38 = -1;
      v39 = 1;
      if (v37 != v27)
        v39 = 2;
      v40 = v39 + (v37 - (v37 != v27) - v27) / 3;
      if (v40 >= 8)
      {
        v42 = 3 * v23;
        if (v40 < 0x10)
        {
          v43 = 0;
LABEL_37:
          v41 = 3 * (v40 & 0x7FFFFFFFFFFFFFF8) + v27;
          if (v36 <= v42)
            v36 = v42;
          v53 = v43 - ((v39 + (v36 + v38 - v27 - 3) / 3) & 0xFFFFFFFFFFFFFFF8);
          v54 = 3 * v43 + v27;
          v55 = (float *)&v155[12 * v43 + 4 * v27];
          do
          {
            v56 = (const char *)(a2 + v54);
            *(int8x8x3_t *)a5.f32 = vld3_s8(v56);
            v157.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a5, v16));
            v157.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v16)), v15);
            v157.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v16)), v15);
            v161.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a5, v14));
            v161.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v14)), v15);
            a5 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v14));
            v161.val[2] = vmulq_f32(a5, v15);
            v57 = v55 + 24;
            vst3q_f32(v55, v161);
            v58 = v55 + 12;
            vst3q_f32(v58, v157);
            v54 += 24;
            v55 = v57;
            v53 += 8;
          }
          while (v53);
          if (v40 == (v40 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_44;
          goto LABEL_42;
        }
        v43 = v40 & 0x7FFFFFFFFFFFFFF0;
        if (v36 <= v42)
          v44 = v42;
        else
          v44 = v27 + 3;
        v45 = (v39 + (v44 + v38 - v27 - 3) / 3) & 0xFFFFFFFFFFFFFFF0;
        v46 = (float *)&v155[4 * v27];
        v47 = v27;
        do
        {
          v48 = (const char *)(a2 + v47);
          *(int8x16x3_t *)(&a6 - 1) = vld3q_s8(v48);
          v160.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v14));
          v160.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v14)), v15);
          v160.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v14)), v15);
          v50 = v46;
          vst3q_f32(v50, v160);
          v50 += 12;
          v160.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v18));
          v158.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v17));
          v164.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v16));
          v164.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v16)), v15);
          v164.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v16)), v15);
          vst3q_f32(v50, v164);
          v158.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v17)), v15);
          v158.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v17)), v15);
          v51 = v46 + 24;
          vst3q_f32(v51, v158);
          v160.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v18)), v15);
          a5 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v18));
          v160.val[2] = vmulq_f32(a5, v15);
          v52 = v46 + 36;
          vst3q_f32(v52, v160);
          v47 += 48;
          v46 += 48;
          v45 -= 16;
        }
        while (v45);
        if (v40 == v43)
          goto LABEL_44;
        if ((v40 & 8) != 0)
          goto LABEL_37;
        v41 = 3 * v43 + v27;
      }
      else
      {
        v41 = v27;
      }
LABEL_42:
      v59 = &v155[4 * v41 + 4];
      do
      {
        a5.i8[0] = *(_BYTE *)(a2 + v41);
        *((float *)v59 - 1) = (float)a5.u32[0];
        v60.i32[0] = *(unsigned __int8 *)(a2 + v41 + 1);
        v60.i32[1] = *(unsigned __int8 *)(a2 + v41 + 2);
        *(float32x2_t *)a5.f32 = vmul_f32(vcvt_f32_u32(v60), v13);
        *v59 = a5.i64[0];
        v59 = (_QWORD *)((char *)v59 + 12);
        v41 += 3;
      }
      while (v41 < v26);
LABEL_44:
      v151 = 3 * v25;
      sub_1002CB58C(v148, (uint64_t)v155, (uint64_t)v155, v25);
      v61 = 0;
      if ((v28 & 0x80000000) != 0)
      {
        v15 = v150;
        v14 = (int8x16_t)xmmword_1003BCA90;
        v17 = (int8x16_t)xmmword_1003BCAB0;
        v16 = (int8x16_t)xmmword_1003BCAA0;
        v18 = (int8x16_t)xmmword_1003BCAC0;
      }
      else
      {
        v62 = (const float *)v155;
        v63 = 8 * v12;
        v15 = v150;
        v14 = (int8x16_t)xmmword_1003BCA90;
        v17 = (int8x16_t)xmmword_1003BCAB0;
        v16 = (int8x16_t)xmmword_1003BCAA0;
        v18 = (int8x16_t)xmmword_1003BCAC0;
        do
        {
          while (1)
          {
            v64 = v62;
            v163 = vld3q_f32(v64);
            v64 += 12;
            v162 = vld3q_f32(v64);
            v65 = a1[1];
            LOBYTE(v64) = atomic_load((unsigned __int8 *)qword_10048AA40);
            if ((v64 & 1) == 0)
            {
              v142 = v162;
              v136 = v163;
              v130 = a1[1];
              v82 = __cxa_guard_acquire(qword_10048AA40);
              v65 = v130;
              v163 = v136;
              v162 = v142;
              v18 = (int8x16_t)xmmword_1003BCAC0;
              v17 = (int8x16_t)xmmword_1003BCAB0;
              v16 = (int8x16_t)xmmword_1003BCAA0;
              v15 = v150;
              v14 = (int8x16_t)xmmword_1003BCA90;
              v63 = 8 * v12;
              if (v82)
              {
                *(_QWORD *)&v83 = 0x3F0000003F000000;
                *((_QWORD *)&v83 + 1) = 0x3F0000003F000000;
                xmmword_10048AA30 = v83;
                __cxa_guard_release(qword_10048AA40);
                v65 = v130;
                v163 = v136;
                v162 = v142;
                v18 = (int8x16_t)xmmword_1003BCAC0;
                v17 = (int8x16_t)xmmword_1003BCAB0;
                v16 = (int8x16_t)xmmword_1003BCAA0;
                v15 = v150;
                v14 = (int8x16_t)xmmword_1003BCA90;
                v63 = 8 * v12;
              }
            }
            a7 = (float32x4_t)xmmword_10048AA30;
            v66 = a1[1];
            v67 = atomic_load((unsigned __int8 *)qword_10048AA40);
            if ((v67 & 1) == 0)
            {
              v143 = v162;
              v137 = v163;
              v125 = a1[1];
              v131 = v65;
              v120 = xmmword_10048AA30;
              v84 = __cxa_guard_acquire(qword_10048AA40);
              a7 = (float32x4_t)v120;
              v66 = v125;
              v65 = v131;
              v163 = v137;
              v162 = v143;
              v18 = (int8x16_t)xmmword_1003BCAC0;
              v17 = (int8x16_t)xmmword_1003BCAB0;
              v16 = (int8x16_t)xmmword_1003BCAA0;
              v15 = v150;
              v14 = (int8x16_t)xmmword_1003BCA90;
              v63 = 8 * v12;
              if (v84)
              {
                *(_QWORD *)&v85 = 0x3F0000003F000000;
                *((_QWORD *)&v85 + 1) = 0x3F0000003F000000;
                xmmword_10048AA30 = v85;
                __cxa_guard_release(qword_10048AA40);
                a7 = (float32x4_t)v120;
                v66 = v125;
                v65 = v131;
                v163 = v137;
                v162 = v143;
                v18 = (int8x16_t)xmmword_1003BCAC0;
                v17 = (int8x16_t)xmmword_1003BCAB0;
                v16 = (int8x16_t)xmmword_1003BCAA0;
                v15 = v150;
                v14 = (int8x16_t)xmmword_1003BCA90;
                v63 = 8 * v12;
              }
            }
            v68 = (float32x4_t)xmmword_10048AA30;
            v69 = a1[1];
            v70 = atomic_load((unsigned __int8 *)qword_10048AA40);
            if ((v70 & 1) == 0)
            {
              v144 = v162;
              v138 = v163;
              v126 = v66;
              v132 = v65;
              v116 = a1[1];
              v121 = a7;
              v112 = xmmword_10048AA30;
              v86 = __cxa_guard_acquire(qword_10048AA40);
              v68 = (float32x4_t)v112;
              v69 = v116;
              a7 = v121;
              v66 = v126;
              v65 = v132;
              v163 = v138;
              v162 = v144;
              v18 = (int8x16_t)xmmword_1003BCAC0;
              v17 = (int8x16_t)xmmword_1003BCAB0;
              v16 = (int8x16_t)xmmword_1003BCAA0;
              v15 = v150;
              v14 = (int8x16_t)xmmword_1003BCA90;
              v63 = 8 * v12;
              if (v86)
              {
                *(_QWORD *)&v87 = 0x3F0000003F000000;
                *((_QWORD *)&v87 + 1) = 0x3F0000003F000000;
                xmmword_10048AA30 = v87;
                __cxa_guard_release(qword_10048AA40);
                v68 = (float32x4_t)v112;
                v69 = v116;
                a7 = v121;
                v66 = v126;
                v65 = v132;
                v163 = v138;
                v162 = v144;
                v18 = (int8x16_t)xmmword_1003BCAC0;
                v17 = (int8x16_t)xmmword_1003BCAB0;
                v16 = (int8x16_t)xmmword_1003BCAA0;
                v15 = v150;
                v14 = (int8x16_t)xmmword_1003BCA90;
                v63 = 8 * v12;
              }
            }
            v71 = (float32x4_t)xmmword_10048AA30;
            v72 = a1[1];
            v73 = atomic_load((unsigned __int8 *)qword_10048AA40);
            if ((v73 & 1) == 0)
            {
              v145 = v162;
              v139 = v163;
              v127 = v66;
              v133 = v65;
              v117 = v69;
              v122 = a7;
              v109 = a1[1];
              v113 = v68;
              v106 = xmmword_10048AA30;
              v88 = __cxa_guard_acquire(qword_10048AA40);
              v71 = (float32x4_t)v106;
              v72 = v109;
              v68 = v113;
              v69 = v117;
              a7 = v122;
              v66 = v127;
              v65 = v133;
              v163 = v139;
              v162 = v145;
              v18 = (int8x16_t)xmmword_1003BCAC0;
              v17 = (int8x16_t)xmmword_1003BCAB0;
              v16 = (int8x16_t)xmmword_1003BCAA0;
              v15 = v150;
              v14 = (int8x16_t)xmmword_1003BCA90;
              v63 = 8 * v12;
              if (v88)
              {
                *(_QWORD *)&v89 = 0x3F0000003F000000;
                *((_QWORD *)&v89 + 1) = 0x3F0000003F000000;
                xmmword_10048AA30 = v89;
                __cxa_guard_release(qword_10048AA40);
                v71 = (float32x4_t)v106;
                v72 = v109;
                v68 = v113;
                v69 = v117;
                a7 = v122;
                v66 = v127;
                v65 = v133;
                v163 = v139;
                v162 = v145;
                v18 = (int8x16_t)xmmword_1003BCAC0;
                v17 = (int8x16_t)xmmword_1003BCAB0;
                v16 = (int8x16_t)xmmword_1003BCAA0;
                v15 = v150;
                v14 = (int8x16_t)xmmword_1003BCA90;
                v63 = 8 * v12;
              }
            }
            v74 = (float32x4_t)xmmword_10048AA30;
            v75 = a1[1];
            v76 = atomic_load((unsigned __int8 *)qword_10048AA40);
            if ((v76 & 1) == 0)
            {
              v146 = v162;
              v140 = v163;
              v128 = v66;
              v134 = v65;
              v118 = v69;
              v123 = a7;
              v110 = v72;
              v114 = v68;
              v104 = a1[1];
              v107 = v71;
              v102 = xmmword_10048AA30;
              v90 = __cxa_guard_acquire(qword_10048AA40);
              v74 = (float32x4_t)v102;
              v75 = v104;
              v71 = v107;
              v72 = v110;
              v68 = v114;
              v69 = v118;
              a7 = v123;
              v66 = v128;
              v65 = v134;
              v163 = v140;
              v162 = v146;
              v18 = (int8x16_t)xmmword_1003BCAC0;
              v17 = (int8x16_t)xmmword_1003BCAB0;
              v16 = (int8x16_t)xmmword_1003BCAA0;
              v15 = v150;
              v14 = (int8x16_t)xmmword_1003BCA90;
              v63 = 8 * v12;
              if (v90)
              {
                *(_QWORD *)&v91 = 0x3F0000003F000000;
                *((_QWORD *)&v91 + 1) = 0x3F0000003F000000;
                xmmword_10048AA30 = v91;
                __cxa_guard_release(qword_10048AA40);
                v74 = (float32x4_t)v102;
                v75 = v104;
                v71 = v107;
                v72 = v110;
                v68 = v114;
                v69 = v118;
                a7 = v123;
                v66 = v128;
                v65 = v134;
                v163 = v140;
                v162 = v146;
                v18 = (int8x16_t)xmmword_1003BCAC0;
                v17 = (int8x16_t)xmmword_1003BCAB0;
                v16 = (int8x16_t)xmmword_1003BCAA0;
                v15 = v150;
                v14 = (int8x16_t)xmmword_1003BCA90;
                v63 = 8 * v12;
              }
            }
            v77 = (float32x4_t)xmmword_10048AA30;
            v78 = a1[1];
            v79 = atomic_load((unsigned __int8 *)qword_10048AA40);
            if ((v79 & 1) == 0)
            {
              v147 = v162;
              v141 = v163;
              v129 = v66;
              v135 = v65;
              v119 = v69;
              v124 = a7;
              v111 = v72;
              v115 = v68;
              v105 = v75;
              v108 = v71;
              v101 = a1[1];
              v103 = v74;
              v100 = xmmword_10048AA30;
              v92 = __cxa_guard_acquire(qword_10048AA40);
              v77 = (float32x4_t)v100;
              v78 = v101;
              v74 = v103;
              v75 = v105;
              v71 = v108;
              v72 = v111;
              v68 = v115;
              v69 = v119;
              a7 = v124;
              v66 = v129;
              v65 = v135;
              v163 = v141;
              v162 = v147;
              v18 = (int8x16_t)xmmword_1003BCAC0;
              v17 = (int8x16_t)xmmword_1003BCAB0;
              v16 = (int8x16_t)xmmword_1003BCAA0;
              v15 = v150;
              v14 = (int8x16_t)xmmword_1003BCA90;
              v63 = 8 * v12;
              if (v92)
              {
                *(_QWORD *)&v93 = 0x3F0000003F000000;
                *((_QWORD *)&v93 + 1) = 0x3F0000003F000000;
                xmmword_10048AA30 = v93;
                __cxa_guard_release(qword_10048AA40);
                v77 = (float32x4_t)v100;
                v78 = v101;
                v74 = v103;
                v75 = v105;
                v71 = v108;
                v72 = v111;
                v68 = v115;
                v69 = v119;
                a7 = v124;
                v66 = v129;
                v65 = v135;
                v163 = v141;
                v162 = v147;
                v18 = (int8x16_t)xmmword_1003BCAC0;
                v17 = (int8x16_t)xmmword_1003BCAB0;
                v16 = (int8x16_t)xmmword_1003BCAA0;
                v15 = v150;
                v14 = (int8x16_t)xmmword_1003BCA90;
                v63 = 8 * v12;
              }
            }
            a6 = (float32x4_t)vcvtq_u32_f32(vaddq_f32(vmulq_f32(v162.val[0], v66), v68));
            a5 = (float32x4_t)vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v163.val[0], v65), a7))), (uint32x4_t)a6);
            *(uint8x8_t *)a5.f32 = vqmovn_u16((uint16x8_t)a5);
            *(uint8x8_t *)a6.f32 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v163.val[1], v69), v71))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(v162.val[1], v72), v74))));
            v80 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v163.val[2], v75), v77))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(v162.val[2], v78), (float32x4_t)xmmword_10048AA30))));
            if ((_DWORD)v12 == 4)
              break;
            vst3_s8(a3, *(int8x8x3_t *)a5.f32);
            a3 += v63;
            v62 += 24;
            v61 += 24;
            if ((int)v28 < v61)
              goto LABEL_69;
          }
          v81 = a1[3].i64[0];
          vst4_s8(a3, *(int8x8x4_t *)a5.f32);
          a3 += v63;
          v62 += 24;
          v61 += 24;
        }
        while ((int)v28 >= v61);
      }
LABEL_69:
      if (v61 >= v151)
      {
        a4 = v149;
        v20 = v154;
        v21 = v153;
        v22 = v152;
      }
      else
      {
        v94 = (float *)&v155[4 * v61 + 4];
        a4 = v149;
        v20 = v154;
        v21 = v153;
        v22 = v152;
        do
        {
          v95 = rintf(*(v94 - 1) * 255.0);
          v96 = (uint64_t)v95 & ~((int)(uint64_t)v95 >> 31);
          if (v96 >= 255)
            LOBYTE(v96) = -1;
          *a3 = v96;
          v97 = rintf(*v94 * 255.0);
          v98 = (uint64_t)v97 & ~((int)(uint64_t)v97 >> 31);
          if (v98 >= 255)
            LOBYTE(v98) = -1;
          a3[1] = v98;
          a5.f32[0] = rintf(v94[1] * 255.0);
          v99 = (uint64_t)a5.f32[0] & ~((int)(uint64_t)a5.f32[0] >> 31);
          if (v99 >= 255)
            LOBYTE(v99) = -1;
          a3[2] = v99;
          if ((_DWORD)v12 == 4)
            a3[3] = -1;
          a3 += v12;
          v94 += 3;
          v61 += 3;
        }
        while (v151 > v61);
      }
      v11 = v21 + 256;
      a2 += 768;
      v10 = v20 + 1;
      v19 = v22;
    }
    while (v11 < a4);
  }
}

float *sub_1002CB58C(float *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  unsigned int v13;
  float v14;
  int *v15;
  int v16;
  int v17;
  _DWORD v18[4];

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = result[2];
    v6 = *(int *)result;
    v7 = *((int *)result + 1);
    v8 = v7 ^ 2;
    while (1)
    {
      v9 = a2 + 4 * v4;
      v11 = *(float *)(v9 + 4);
      v10 = *(float *)(v9 + 8);
      if (v11 != 0.0)
        break;
      *(float *)(a3 + 4 * v7) = v10;
      *(float *)(a3 + 4) = v10;
      *(float *)(a3 + 4 * v8) = v10;
      if ((_DWORD)v6 == 4)
        goto LABEL_12;
LABEL_3:
      v4 += 3;
      a3 += 4 * v6;
      if (v4 >= 3 * a4)
        return result;
    }
    v12 = v5 * *(float *)(a2 + 4 * v4);
    if (v12 >= 0.0)
    {
      while (v12 >= 6.0)
        v12 = v12 + -6.0;
    }
    else
    {
      do
        v12 = v12 + 6.0;
      while (v12 < 0.0);
    }
    v13 = (__PAIR64__((int)v12, LODWORD(v12)) - COERCE_UNSIGNED_INT((float)(int)v12)) >> 32;
    v14 = v12 - (float)(int)v13;
    if (v13 > 5)
    {
      v14 = 0.0;
      v13 = 0;
    }
    *(float *)v18 = v10;
    *(float *)&v18[1] = v10 * (float)(1.0 - v11);
    *(float *)&v18[2] = v10 * (float)(1.0 - (float)(v11 * v14));
    *(float *)&v18[3] = v10 * (float)(1.0 - (float)(v11 * (float)(1.0 - v14)));
    v15 = (int *)((char *)&unk_1003C075C + 12 * v13);
    result = (float *)*v15;
    v16 = v18[v15[1]];
    v17 = v18[v15[2]];
    *(_DWORD *)(a3 + 4 * v7) = v18[(_QWORD)result];
    *(_DWORD *)(a3 + 4) = v16;
    *(_DWORD *)(a3 + 4 * v8) = v17;
    if ((_DWORD)v6 != 4)
      goto LABEL_3;
LABEL_12:
    *(_DWORD *)(a3 + 12) = 1065353216;
    goto LABEL_3;
  }
  return result;
}

void sub_1002CB70C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002CB730(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100451180);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4;
    v6 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4;
    do
    {
      sub_1002CB58C(*(float **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002CB7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CB7F8(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002CB81C(uint64_t a1, int *a2)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  _BYTE v10[8];
  int v11;

  sub_100298C2C(v10, &off_1004511E0);
  v7 = *a2;
  if (*a2 < a2[1])
  {
    v8 = (char *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v7);
    v9 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v7;
    do
    {
      sub_1002CB8E0(*(float32x4_t **)(a1 + 48), v9, v8, *(_DWORD *)(a1 + 40), v4, v5, v6);
      ++v7;
      v9 += *(_QWORD *)(a1 + 16);
      v8 += *(_QWORD *)(a1 + 32);
    }
    while (v7 < a2[1]);
  }
  if (v11)
    sub_1002989D0(v10);
}

void sub_1002CB8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CB8E0(float32x4_t *a1, uint64_t a2, char *a3, int a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  int v10;
  int v11;
  uint64_t v12;
  float32x2_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  float *v29;
  const char *v30;
  uint16x8_t v31;
  uint16x8_t v32;
  float *v33;
  float32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  float *v46;
  unint64_t v47;
  const char *v48;
  int8x16_t v49;
  float *v50;
  float *v51;
  float *v52;
  unint64_t v53;
  unint64_t v54;
  float *v55;
  const char *v56;
  float *v57;
  float *v58;
  _QWORD *v59;
  uint32x2_t v60;
  int v61;
  const float *v62;
  uint64_t v63;
  const float *v64;
  float32x4_t v65;
  float32x4_t v66;
  unsigned __int8 v67;
  float32x4_t v68;
  float32x4_t v69;
  unsigned __int8 v70;
  float32x4_t v71;
  float32x4_t v72;
  unsigned __int8 v73;
  float32x4_t v74;
  float32x4_t v75;
  unsigned __int8 v76;
  float32x4_t v77;
  float32x4_t v78;
  unsigned __int8 v79;
  uint8x8_t v80;
  uint64_t v81;
  int v82;
  __int128 v83;
  int v84;
  __int128 v85;
  int v86;
  __int128 v87;
  int v88;
  __int128 v89;
  int v90;
  __int128 v91;
  int v92;
  __int128 v93;
  float *v94;
  float v95;
  int v96;
  float v97;
  int v98;
  int v99;
  __int128 v100;
  float32x4_t v101;
  __int128 v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  __int128 v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  __int128 v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  __int128 v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4x3_t v136;
  float32x4x3_t v137;
  float32x4x3_t v138;
  float32x4x3_t v139;
  float32x4x3_t v140;
  float32x4x3_t v141;
  float32x4x3_t v142;
  float32x4x3_t v143;
  float32x4x3_t v144;
  float32x4x3_t v145;
  float32x4x3_t v146;
  float32x4x3_t v147;
  float *v148;
  int v149;
  float32x4_t v150;
  int v151;
  int v152;
  int v153;
  int v154;
  _BYTE v155[3072];
  int8x8x3_t v156;
  float32x4x3_t v157;
  float32x4x3_t v158;
  float32x4x3_t v159;
  float32x4x3_t v160;
  float32x4x3_t v161;
  float32x4x3_t v162;
  float32x4x3_t v163;
  float32x4x3_t v164;

  if (a4 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = a1->i32[0];
    v148 = &a1->f32[1];
    v13 = (float32x2_t)vdup_n_s32(0x3B808081u);
    v14 = (int8x16_t)xmmword_1003BCA90;
    v15 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v16 = (int8x16_t)xmmword_1003BCAA0;
    v17 = (int8x16_t)xmmword_1003BCAB0;
    v18 = (int8x16_t)xmmword_1003BCAC0;
    v19 = a4;
    v149 = a4;
    v150 = v15;
    do
    {
      v152 = v19 - 256;
      if (v19 >= 256)
        v23 = 256;
      else
        v23 = v19;
      v154 = v10;
      v24 = a4 - (v10 << 8);
      if (v24 >= 256)
        v24 = 256;
      v153 = v11;
      if (a4 - v11 >= 256)
        v25 = 256;
      else
        v25 = a4 - v11;
      v26 = 3 * v25;
      v27 = 0;
      v28 = (3 * v25 - 24);
      if (3 * v25 - 24 >= 0)
      {
        a5 = a1[2];
        v29 = (float *)v155;
        do
        {
          v30 = (const char *)(a2 + v27);
          v156 = vld3_s8(v30);
          v31 = vmovl_u8((uint8x8_t)v156.val[0]);
          v32 = vmovl_u8((uint8x8_t)v156.val[1]);
          *(uint16x8_t *)v156.val[0].i8 = vmovl_u8((uint8x8_t)v156.val[2]);
          v159.val[0] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v31.i8));
          v159.val[1] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v32.i8)));
          v159.val[2] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_u16((uint16x4_t)v156.val[0])));
          v33 = v29;
          vst3q_f32(v33, v159);
          v33 += 12;
          a7 = vcvtq_f32_u32(vmovl_high_u16(v31));
          *(float32x4_t *)v156.val[2].i8 = vmulq_f32(a5, vcvtq_f32_u32(vmovl_high_u16(v32)));
          a6 = vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v156.val[0].i8));
          v34 = vmulq_f32(a5, a6);
          vst3q_f32(v33, *(float32x4x3_t *)a7.f32);
          v27 += 24;
          v29 += 24;
        }
        while (v27 <= v28);
        v27 = v27;
      }
      if ((int)v27 >= v26)
        goto LABEL_44;
      v35 = 3 * v24;
      v36 = v27 + 3;
      if ((uint64_t)(v27 + 3) > v35)
        v35 = v27 + 3;
      v37 = v35 - 3;
      if (v37 == v27)
        v38 = 0;
      else
        v38 = -1;
      v39 = 1;
      if (v37 != v27)
        v39 = 2;
      v40 = v39 + (v37 - (v37 != v27) - v27) / 3;
      if (v40 >= 8)
      {
        v42 = 3 * v23;
        if (v40 < 0x10)
        {
          v43 = 0;
LABEL_37:
          v41 = 3 * (v40 & 0x7FFFFFFFFFFFFFF8) + v27;
          if (v36 <= v42)
            v36 = v42;
          v53 = v43 - ((v39 + (v36 + v38 - v27 - 3) / 3) & 0xFFFFFFFFFFFFFFF8);
          v54 = 3 * v43 + v27;
          v55 = (float *)&v155[12 * v43 + 4 * v27];
          do
          {
            v56 = (const char *)(a2 + v54);
            *(int8x8x3_t *)a5.f32 = vld3_s8(v56);
            v157.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a5, v16));
            v157.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v16)), v15);
            v157.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v16)), v15);
            v161.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a5, v14));
            v161.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v14)), v15);
            a5 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v14));
            v161.val[2] = vmulq_f32(a5, v15);
            v57 = v55 + 24;
            vst3q_f32(v55, v161);
            v58 = v55 + 12;
            vst3q_f32(v58, v157);
            v54 += 24;
            v55 = v57;
            v53 += 8;
          }
          while (v53);
          if (v40 == (v40 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_44;
          goto LABEL_42;
        }
        v43 = v40 & 0x7FFFFFFFFFFFFFF0;
        if (v36 <= v42)
          v44 = v42;
        else
          v44 = v27 + 3;
        v45 = (v39 + (v44 + v38 - v27 - 3) / 3) & 0xFFFFFFFFFFFFFFF0;
        v46 = (float *)&v155[4 * v27];
        v47 = v27;
        do
        {
          v48 = (const char *)(a2 + v47);
          *(int8x16x3_t *)(&a6 - 1) = vld3q_s8(v48);
          v160.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v14));
          v160.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v14)), v15);
          v160.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v14)), v15);
          v50 = v46;
          vst3q_f32(v50, v160);
          v50 += 12;
          v160.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v18));
          v158.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v17));
          v164.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v16));
          v164.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v16)), v15);
          v164.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v16)), v15);
          vst3q_f32(v50, v164);
          v158.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v17)), v15);
          v158.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v17)), v15);
          v51 = v46 + 24;
          vst3q_f32(v51, v158);
          v160.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v18)), v15);
          a5 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v18));
          v160.val[2] = vmulq_f32(a5, v15);
          v52 = v46 + 36;
          vst3q_f32(v52, v160);
          v47 += 48;
          v46 += 48;
          v45 -= 16;
        }
        while (v45);
        if (v40 == v43)
          goto LABEL_44;
        if ((v40 & 8) != 0)
          goto LABEL_37;
        v41 = 3 * v43 + v27;
      }
      else
      {
        v41 = v27;
      }
LABEL_42:
      v59 = &v155[4 * v41 + 4];
      do
      {
        a5.i8[0] = *(_BYTE *)(a2 + v41);
        *((float *)v59 - 1) = (float)a5.u32[0];
        v60.i32[0] = *(unsigned __int8 *)(a2 + v41 + 1);
        v60.i32[1] = *(unsigned __int8 *)(a2 + v41 + 2);
        *(float32x2_t *)a5.f32 = vmul_f32(vcvt_f32_u32(v60), v13);
        *v59 = a5.i64[0];
        v59 = (_QWORD *)((char *)v59 + 12);
        v41 += 3;
      }
      while (v41 < v26);
LABEL_44:
      v151 = 3 * v25;
      sub_1002CC2EC(v148, (uint64_t)v155, (uint64_t)v155, v25);
      v61 = 0;
      if ((v28 & 0x80000000) != 0)
      {
        v15 = v150;
        v14 = (int8x16_t)xmmword_1003BCA90;
        v17 = (int8x16_t)xmmword_1003BCAB0;
        v16 = (int8x16_t)xmmword_1003BCAA0;
        v18 = (int8x16_t)xmmword_1003BCAC0;
      }
      else
      {
        v62 = (const float *)v155;
        v63 = 8 * v12;
        v15 = v150;
        v14 = (int8x16_t)xmmword_1003BCA90;
        v17 = (int8x16_t)xmmword_1003BCAB0;
        v16 = (int8x16_t)xmmword_1003BCAA0;
        v18 = (int8x16_t)xmmword_1003BCAC0;
        do
        {
          while (1)
          {
            v64 = v62;
            v163 = vld3q_f32(v64);
            v64 += 12;
            v162 = vld3q_f32(v64);
            v65 = a1[1];
            LOBYTE(v64) = atomic_load((unsigned __int8 *)qword_10048AA40);
            if ((v64 & 1) == 0)
            {
              v142 = v162;
              v136 = v163;
              v130 = a1[1];
              v82 = __cxa_guard_acquire(qword_10048AA40);
              v65 = v130;
              v163 = v136;
              v162 = v142;
              v18 = (int8x16_t)xmmword_1003BCAC0;
              v17 = (int8x16_t)xmmword_1003BCAB0;
              v16 = (int8x16_t)xmmword_1003BCAA0;
              v15 = v150;
              v14 = (int8x16_t)xmmword_1003BCA90;
              v63 = 8 * v12;
              if (v82)
              {
                *(_QWORD *)&v83 = 0x3F0000003F000000;
                *((_QWORD *)&v83 + 1) = 0x3F0000003F000000;
                xmmword_10048AA30 = v83;
                __cxa_guard_release(qword_10048AA40);
                v65 = v130;
                v163 = v136;
                v162 = v142;
                v18 = (int8x16_t)xmmword_1003BCAC0;
                v17 = (int8x16_t)xmmword_1003BCAB0;
                v16 = (int8x16_t)xmmword_1003BCAA0;
                v15 = v150;
                v14 = (int8x16_t)xmmword_1003BCA90;
                v63 = 8 * v12;
              }
            }
            a7 = (float32x4_t)xmmword_10048AA30;
            v66 = a1[1];
            v67 = atomic_load((unsigned __int8 *)qword_10048AA40);
            if ((v67 & 1) == 0)
            {
              v143 = v162;
              v137 = v163;
              v125 = a1[1];
              v131 = v65;
              v120 = xmmword_10048AA30;
              v84 = __cxa_guard_acquire(qword_10048AA40);
              a7 = (float32x4_t)v120;
              v66 = v125;
              v65 = v131;
              v163 = v137;
              v162 = v143;
              v18 = (int8x16_t)xmmword_1003BCAC0;
              v17 = (int8x16_t)xmmword_1003BCAB0;
              v16 = (int8x16_t)xmmword_1003BCAA0;
              v15 = v150;
              v14 = (int8x16_t)xmmword_1003BCA90;
              v63 = 8 * v12;
              if (v84)
              {
                *(_QWORD *)&v85 = 0x3F0000003F000000;
                *((_QWORD *)&v85 + 1) = 0x3F0000003F000000;
                xmmword_10048AA30 = v85;
                __cxa_guard_release(qword_10048AA40);
                a7 = (float32x4_t)v120;
                v66 = v125;
                v65 = v131;
                v163 = v137;
                v162 = v143;
                v18 = (int8x16_t)xmmword_1003BCAC0;
                v17 = (int8x16_t)xmmword_1003BCAB0;
                v16 = (int8x16_t)xmmword_1003BCAA0;
                v15 = v150;
                v14 = (int8x16_t)xmmword_1003BCA90;
                v63 = 8 * v12;
              }
            }
            v68 = (float32x4_t)xmmword_10048AA30;
            v69 = a1[1];
            v70 = atomic_load((unsigned __int8 *)qword_10048AA40);
            if ((v70 & 1) == 0)
            {
              v144 = v162;
              v138 = v163;
              v126 = v66;
              v132 = v65;
              v116 = a1[1];
              v121 = a7;
              v112 = xmmword_10048AA30;
              v86 = __cxa_guard_acquire(qword_10048AA40);
              v68 = (float32x4_t)v112;
              v69 = v116;
              a7 = v121;
              v66 = v126;
              v65 = v132;
              v163 = v138;
              v162 = v144;
              v18 = (int8x16_t)xmmword_1003BCAC0;
              v17 = (int8x16_t)xmmword_1003BCAB0;
              v16 = (int8x16_t)xmmword_1003BCAA0;
              v15 = v150;
              v14 = (int8x16_t)xmmword_1003BCA90;
              v63 = 8 * v12;
              if (v86)
              {
                *(_QWORD *)&v87 = 0x3F0000003F000000;
                *((_QWORD *)&v87 + 1) = 0x3F0000003F000000;
                xmmword_10048AA30 = v87;
                __cxa_guard_release(qword_10048AA40);
                v68 = (float32x4_t)v112;
                v69 = v116;
                a7 = v121;
                v66 = v126;
                v65 = v132;
                v163 = v138;
                v162 = v144;
                v18 = (int8x16_t)xmmword_1003BCAC0;
                v17 = (int8x16_t)xmmword_1003BCAB0;
                v16 = (int8x16_t)xmmword_1003BCAA0;
                v15 = v150;
                v14 = (int8x16_t)xmmword_1003BCA90;
                v63 = 8 * v12;
              }
            }
            v71 = (float32x4_t)xmmword_10048AA30;
            v72 = a1[1];
            v73 = atomic_load((unsigned __int8 *)qword_10048AA40);
            if ((v73 & 1) == 0)
            {
              v145 = v162;
              v139 = v163;
              v127 = v66;
              v133 = v65;
              v117 = v69;
              v122 = a7;
              v109 = a1[1];
              v113 = v68;
              v106 = xmmword_10048AA30;
              v88 = __cxa_guard_acquire(qword_10048AA40);
              v71 = (float32x4_t)v106;
              v72 = v109;
              v68 = v113;
              v69 = v117;
              a7 = v122;
              v66 = v127;
              v65 = v133;
              v163 = v139;
              v162 = v145;
              v18 = (int8x16_t)xmmword_1003BCAC0;
              v17 = (int8x16_t)xmmword_1003BCAB0;
              v16 = (int8x16_t)xmmword_1003BCAA0;
              v15 = v150;
              v14 = (int8x16_t)xmmword_1003BCA90;
              v63 = 8 * v12;
              if (v88)
              {
                *(_QWORD *)&v89 = 0x3F0000003F000000;
                *((_QWORD *)&v89 + 1) = 0x3F0000003F000000;
                xmmword_10048AA30 = v89;
                __cxa_guard_release(qword_10048AA40);
                v71 = (float32x4_t)v106;
                v72 = v109;
                v68 = v113;
                v69 = v117;
                a7 = v122;
                v66 = v127;
                v65 = v133;
                v163 = v139;
                v162 = v145;
                v18 = (int8x16_t)xmmword_1003BCAC0;
                v17 = (int8x16_t)xmmword_1003BCAB0;
                v16 = (int8x16_t)xmmword_1003BCAA0;
                v15 = v150;
                v14 = (int8x16_t)xmmword_1003BCA90;
                v63 = 8 * v12;
              }
            }
            v74 = (float32x4_t)xmmword_10048AA30;
            v75 = a1[1];
            v76 = atomic_load((unsigned __int8 *)qword_10048AA40);
            if ((v76 & 1) == 0)
            {
              v146 = v162;
              v140 = v163;
              v128 = v66;
              v134 = v65;
              v118 = v69;
              v123 = a7;
              v110 = v72;
              v114 = v68;
              v104 = a1[1];
              v107 = v71;
              v102 = xmmword_10048AA30;
              v90 = __cxa_guard_acquire(qword_10048AA40);
              v74 = (float32x4_t)v102;
              v75 = v104;
              v71 = v107;
              v72 = v110;
              v68 = v114;
              v69 = v118;
              a7 = v123;
              v66 = v128;
              v65 = v134;
              v163 = v140;
              v162 = v146;
              v18 = (int8x16_t)xmmword_1003BCAC0;
              v17 = (int8x16_t)xmmword_1003BCAB0;
              v16 = (int8x16_t)xmmword_1003BCAA0;
              v15 = v150;
              v14 = (int8x16_t)xmmword_1003BCA90;
              v63 = 8 * v12;
              if (v90)
              {
                *(_QWORD *)&v91 = 0x3F0000003F000000;
                *((_QWORD *)&v91 + 1) = 0x3F0000003F000000;
                xmmword_10048AA30 = v91;
                __cxa_guard_release(qword_10048AA40);
                v74 = (float32x4_t)v102;
                v75 = v104;
                v71 = v107;
                v72 = v110;
                v68 = v114;
                v69 = v118;
                a7 = v123;
                v66 = v128;
                v65 = v134;
                v163 = v140;
                v162 = v146;
                v18 = (int8x16_t)xmmword_1003BCAC0;
                v17 = (int8x16_t)xmmword_1003BCAB0;
                v16 = (int8x16_t)xmmword_1003BCAA0;
                v15 = v150;
                v14 = (int8x16_t)xmmword_1003BCA90;
                v63 = 8 * v12;
              }
            }
            v77 = (float32x4_t)xmmword_10048AA30;
            v78 = a1[1];
            v79 = atomic_load((unsigned __int8 *)qword_10048AA40);
            if ((v79 & 1) == 0)
            {
              v147 = v162;
              v141 = v163;
              v129 = v66;
              v135 = v65;
              v119 = v69;
              v124 = a7;
              v111 = v72;
              v115 = v68;
              v105 = v75;
              v108 = v71;
              v101 = a1[1];
              v103 = v74;
              v100 = xmmword_10048AA30;
              v92 = __cxa_guard_acquire(qword_10048AA40);
              v77 = (float32x4_t)v100;
              v78 = v101;
              v74 = v103;
              v75 = v105;
              v71 = v108;
              v72 = v111;
              v68 = v115;
              v69 = v119;
              a7 = v124;
              v66 = v129;
              v65 = v135;
              v163 = v141;
              v162 = v147;
              v18 = (int8x16_t)xmmword_1003BCAC0;
              v17 = (int8x16_t)xmmword_1003BCAB0;
              v16 = (int8x16_t)xmmword_1003BCAA0;
              v15 = v150;
              v14 = (int8x16_t)xmmword_1003BCA90;
              v63 = 8 * v12;
              if (v92)
              {
                *(_QWORD *)&v93 = 0x3F0000003F000000;
                *((_QWORD *)&v93 + 1) = 0x3F0000003F000000;
                xmmword_10048AA30 = v93;
                __cxa_guard_release(qword_10048AA40);
                v77 = (float32x4_t)v100;
                v78 = v101;
                v74 = v103;
                v75 = v105;
                v71 = v108;
                v72 = v111;
                v68 = v115;
                v69 = v119;
                a7 = v124;
                v66 = v129;
                v65 = v135;
                v163 = v141;
                v162 = v147;
                v18 = (int8x16_t)xmmword_1003BCAC0;
                v17 = (int8x16_t)xmmword_1003BCAB0;
                v16 = (int8x16_t)xmmword_1003BCAA0;
                v15 = v150;
                v14 = (int8x16_t)xmmword_1003BCA90;
                v63 = 8 * v12;
              }
            }
            a6 = (float32x4_t)vcvtq_u32_f32(vaddq_f32(vmulq_f32(v162.val[0], v66), v68));
            a5 = (float32x4_t)vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v163.val[0], v65), a7))), (uint32x4_t)a6);
            *(uint8x8_t *)a5.f32 = vqmovn_u16((uint16x8_t)a5);
            *(uint8x8_t *)a6.f32 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v163.val[1], v69), v71))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(v162.val[1], v72), v74))));
            v80 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v163.val[2], v75), v77))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(v162.val[2], v78), (float32x4_t)xmmword_10048AA30))));
            if ((_DWORD)v12 == 4)
              break;
            vst3_s8(a3, *(int8x8x3_t *)a5.f32);
            a3 += v63;
            v62 += 24;
            v61 += 24;
            if ((int)v28 < v61)
              goto LABEL_69;
          }
          v81 = a1[3].i64[0];
          vst4_s8(a3, *(int8x8x4_t *)a5.f32);
          a3 += v63;
          v62 += 24;
          v61 += 24;
        }
        while ((int)v28 >= v61);
      }
LABEL_69:
      if (v61 >= v151)
      {
        a4 = v149;
        v20 = v154;
        v21 = v153;
        v22 = v152;
      }
      else
      {
        v94 = (float *)&v155[4 * v61 + 4];
        a4 = v149;
        v20 = v154;
        v21 = v153;
        v22 = v152;
        do
        {
          v95 = rintf(*(v94 - 1) * 255.0);
          v96 = (uint64_t)v95 & ~((int)(uint64_t)v95 >> 31);
          if (v96 >= 255)
            LOBYTE(v96) = -1;
          *a3 = v96;
          v97 = rintf(*v94 * 255.0);
          v98 = (uint64_t)v97 & ~((int)(uint64_t)v97 >> 31);
          if (v98 >= 255)
            LOBYTE(v98) = -1;
          a3[1] = v98;
          a5.f32[0] = rintf(v94[1] * 255.0);
          v99 = (uint64_t)a5.f32[0] & ~((int)(uint64_t)a5.f32[0] >> 31);
          if (v99 >= 255)
            LOBYTE(v99) = -1;
          a3[2] = v99;
          if ((_DWORD)v12 == 4)
            a3[3] = -1;
          a3 += v12;
          v94 += 3;
          v61 += 3;
        }
        while (v151 > v61);
      }
      v11 = v21 + 256;
      a2 += 768;
      v10 = v20 + 1;
      v19 = v22;
    }
    while (v11 < a4);
  }
}

float *sub_1002CC2EC(float *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  float v16;
  float v17;
  int *v18;
  int v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = result[2];
    v6 = *(int *)result;
    v7 = *((int *)result + 1);
    v8 = v7 ^ 2;
    while (1)
    {
      v9 = (float *)(a2 + 4 * v4);
      v10 = v9[1];
      v11 = v9[2];
      if (v11 != 0.0)
        break;
      *(float *)(a3 + 4 * v7) = v10;
      *(float *)(a3 + 4) = v10;
      *(float *)(a3 + 4 * v8) = v10;
      if ((_DWORD)v6 == 4)
        goto LABEL_12;
LABEL_3:
      v4 += 3;
      a3 += 4 * v6;
      if (v4 >= 3 * a4)
        return result;
    }
    v12 = (float)(v10 + v11) - (float)(v10 * v11);
    v13 = v10 * (float)(v11 + 1.0);
    if (v10 > 0.5)
      v13 = v12;
    v14 = v5 * *v9;
    if (v14 >= 0.0)
    {
      while (v14 >= 6.0)
        v14 = v14 + -6.0;
    }
    else
    {
      do
        v14 = v14 + 6.0;
      while (v14 < 0.0);
    }
    v15 = (__PAIR64__((int)v14, LODWORD(v14)) - COERCE_UNSIGNED_INT((float)(int)v14)) >> 32;
    v16 = v14 - (float)v15;
    v21 = v13;
    v22 = -(float)(v13 - (float)(v10 * 2.0));
    v17 = v13 - v22;
    v23 = v22 + (float)(v17 * (float)(1.0 - v16));
    v24 = v22 + (float)(v17 * v16);
    v18 = (int *)((char *)&unk_1003C07FC + 12 * v15);
    result = (float *)*v18;
    v19 = *((_DWORD *)&v21 + v18[1]);
    v20 = *((_DWORD *)&v21 + v18[2]);
    *(float *)(a3 + 4 * v7) = *(&v21 + (_QWORD)result);
    *(_DWORD *)(a3 + 4) = v19;
    *(_DWORD *)(a3 + 4 * v8) = v20;
    if ((_DWORD)v6 != 4)
      goto LABEL_3;
LABEL_12:
    *(_DWORD *)(a3 + 12) = 1065353216;
    goto LABEL_3;
  }
  return result;
}

void sub_1002CC474(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002CC498(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100451240);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4;
    v6 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4;
    do
    {
      sub_1002CC2EC(*(float **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002CC54C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002CC570(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_1004512A0);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4;
    v6 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4;
    do
    {
      sub_1002CC620(*(int **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

int *sub_1002CC620(int *result, uint64_t a2, uint64_t a3, int a4)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE *v25;
  int v26;
  int32x2_t v27;
  int v28;

  if (*((_BYTE *)result + 40))
    v4 = (unsigned __int16 *)&unk_1004AE728;
  else
    v4 = (unsigned __int16 *)&unk_1004AE928;
  if (a4 >= 1)
  {
    v5 = 0;
    v6 = result[2];
    v7 = result[3];
    v8 = result[4];
    v9 = result[5];
    v10 = result[6];
    v11 = result[7];
    v12 = result[8];
    v13 = result[9];
    v14 = 3 * a4;
    v15 = (unsigned __int8 *)(a2 + 1);
    v16 = result[1];
    result = (int *)*result;
    do
    {
      v17 = v4[*(v15 - 1)];
      v18 = v4[*v15];
      v19 = v4[v15[1]];
      v20 = word_10049CD00[(v6 * v18 + v16 * v17 + v7 * v19 + 2048) >> 12];
      v21 = (v9 * v18 + v8 * v17 + v10 * v19 + 2048) >> 12;
      v22 = v12 * v18 + v11 * v17 + v13 * v19;
      v23 = word_10049CD00[v21];
      v24 = v20 - v23;
      v25 = (_BYTE *)(a3 + v5);
      v26 = 200 * (v23 - word_10049CD00[(v22 + 2048) >> 12]) + 4210688;
      v27 = vmin_s32(vmax_s32(vshr_n_s32(vmla_s32((int32x2_t)0x404000FFEBD99ALL, (int32x2_t)__PAIR64__(v24, v23), (int32x2_t)0x1F400000128), 0xFuLL), 0), (int32x2_t)0xFF000000FFLL);
      *v25 = v27.i8[0];
      v28 = (v26 >> 15) & ~(v26 >> 31);
      v25[1] = v27.i8[4];
      if (v28 >= 255)
        LOBYTE(v28) = -1;
      v25[2] = v28;
      v5 += 3;
      v15 = (unsigned __int8 *)result + (_QWORD)v15;
    }
    while (v5 < v14);
  }
  return result;
}

void sub_1002CC774(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002CC798(uint64_t a1, int *a2)
{
  int v4;
  float *v5;
  float *v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100451300);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (float *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = (float *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4);
    do
    {
      sub_1002CC85C(*(int **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 = (float *)((char *)v6 + *(_QWORD *)(a1 + 16));
      v5 = (float *)((char *)v5 + *(_QWORD *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002CC848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CC85C(int *a1, float *a2, float *a3, int a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  float *v14;
  const float *v15;
  float32x4_t v16;
  float32x4_t v17;
  unsigned __int8 v18;
  const float *v19;
  uint64_t v20;
  const float *v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  int8x16_t v24;
  int8x16_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  int8x16_t v28;
  int8x16_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  int8x16_t v32;
  int8x16_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  int8x16_t v36;
  int8x16_t v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  int8x16_t v40;
  int8x16_t v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float *v51;
  float *v52;
  int v53;
  __int128 v54;
  int v55;
  __int128 v56;
  int v57;
  __int128 v58;
  int v59;
  __int128 v60;
  int v61;
  __int128 v62;
  int v63;
  __int128 v64;
  int v65;
  __int128 v66;
  int v67;
  __int128 v68;
  int v69;
  __int128 v70;
  int v71;
  __int128 v72;
  int v73;
  __int128 v74;
  int v75;
  __int128 v76;
  uint64_t v77;
  float32x2_t *v78;
  uint64_t v79;
  float *v80;
  uint64_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  float v92;
  unsigned __int8 v93;
  uint64_t v94;
  float *v95;
  float *v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  __int128 v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  __int128 v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  __int128 v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  __int128 v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  __int128 v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  __int128 v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  __int128 v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  __int128 v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  int v245;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  uint64_t v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  int16x8_t v261;
  int16x8_t v262;
  uint16x8_t v263[2];
  float32x4x3_t v264;
  float32x4x3_t v265;
  float32x4x3_t v266;
  float32x4x3_t v267;

  v251 = *a1;
  if (*((_BYTE *)a1 + 40))
    v5 = qword_1004AE5A8;
  else
    v5 = 0;
  v259 = *((float *)a1 + 2);
  v260 = *((float *)a1 + 1);
  v257 = *((float *)a1 + 4);
  v258 = *((float *)a1 + 3);
  v255 = *((float *)a1 + 6);
  v256 = *((float *)a1 + 5);
  v253 = *((float *)a1 + 8);
  v254 = *((float *)a1 + 7);
  v252 = *((float *)a1 + 9);
  v6 = 3 * a4;
  if (*((_BYTE *)a1 + 41))
  {
    v7 = a1[11];
    v245 = 3 * a4;
    v8 = 0;
    if (a4 >= 9)
    {
      __asm { FMOV            V1.4S, #1.0 }
      v249 = (float32x4_t)vdupq_n_s32(0x46800000u);
      v250 = _Q1;
      v247 = (float32x4_t)vdupq_n_s32(0x3C800000u);
      v248 = (float32x4_t)vdupq_n_s32(0x3BC80000u);
      v14 = a3;
      do
      {
        if ((_DWORD)v251 == 3)
        {
          v15 = a2;
          v265 = vld3q_f32(v15);
          v15 += 12;
          v267 = vld3q_f32(v15);
          if ((_DWORD)v7)
            goto LABEL_9;
        }
        else
        {
          v19 = a2;
          v20 = 4 * v251;
          *(float32x4x4_t *)v265.val[0].f32 = vld4q_f32(v19);
          v21 = &v19[v20];
          *(float32x4x4_t *)v267.val[0].f32 = vld4q_f32(v21);
          if ((_DWORD)v7)
          {
LABEL_9:
            v16 = v267.val[0];
            v17 = v265.val[0];
            v18 = atomic_load((unsigned __int8 *)qword_10048AA00);
            if ((v18 & 1) == 0)
              goto LABEL_26;
            goto LABEL_13;
          }
        }
        v16 = v267.val[2];
        v267.val[2] = v267.val[0];
        v17 = v265.val[2];
        v265.val[2] = v265.val[0];
        v22 = atomic_load((unsigned __int8 *)qword_10048AA00);
        if ((v22 & 1) == 0)
        {
LABEL_26:
          v221 = v265.val[1];
          v233 = v265.val[2];
          v197 = v267.val[1];
          v209 = v267.val[2];
          v173 = v17;
          v185 = v16;
          v53 = __cxa_guard_acquire(qword_10048AA00);
          v17 = v173;
          v16 = v185;
          v267.val[1] = v197;
          v267.val[2] = v209;
          v265.val[1] = v221;
          v265.val[2] = v233;
          if (v53)
          {
            *(_QWORD *)&v54 = 0x8000000080000000;
            *((_QWORD *)&v54 + 1) = 0x8000000080000000;
            xmmword_10048A9F0 = v54;
            __cxa_guard_release(qword_10048AA00);
            v17 = v173;
            v16 = v185;
            v267.val[1] = v197;
            v267.val[2] = v209;
            v265.val[1] = v221;
            v265.val[2] = v233;
          }
        }
LABEL_13:
        v23 = atomic_load((unsigned __int8 *)qword_10048AA20);
        if ((v23 & 1) == 0)
        {
          v222 = v265.val[1];
          v234 = v265.val[2];
          v198 = v267.val[1];
          v210 = v267.val[2];
          v174 = v17;
          v186 = v16;
          v55 = __cxa_guard_acquire(qword_10048AA20);
          v17 = v174;
          v16 = v186;
          v267.val[1] = v198;
          v267.val[2] = v210;
          v265.val[1] = v222;
          v265.val[2] = v234;
          if (v55)
          {
            *(_QWORD *)&v56 = 0x3F0000003F000000;
            *((_QWORD *)&v56 + 1) = 0x3F0000003F000000;
            xmmword_10048AA10 = v56;
            __cxa_guard_release(qword_10048AA20);
            v17 = v174;
            v16 = v186;
            v267.val[1] = v198;
            v267.val[2] = v210;
            v265.val[1] = v222;
            v265.val[2] = v234;
          }
        }
        v24 = (int8x16_t)xmmword_10048AA10;
        v25 = (int8x16_t)xmmword_10048A9F0;
        v26 = atomic_load((unsigned __int8 *)qword_10048AA00);
        if ((v26 & 1) == 0)
        {
          v223 = v265.val[1];
          v235 = v265.val[2];
          v199 = v267.val[1];
          v211 = v267.val[2];
          v175 = v17;
          v187 = v16;
          v153 = xmmword_10048A9F0;
          v163 = xmmword_10048AA10;
          v57 = __cxa_guard_acquire(qword_10048AA00);
          v25 = (int8x16_t)v153;
          v24 = (int8x16_t)v163;
          v17 = v175;
          v16 = v187;
          v267.val[1] = v199;
          v267.val[2] = v211;
          v265.val[1] = v223;
          v265.val[2] = v235;
          if (v57)
          {
            *(_QWORD *)&v58 = 0x8000000080000000;
            *((_QWORD *)&v58 + 1) = 0x8000000080000000;
            xmmword_10048A9F0 = v58;
            __cxa_guard_release(qword_10048AA00);
            v25 = (int8x16_t)v153;
            v24 = (int8x16_t)v163;
            v17 = v175;
            v16 = v187;
            v267.val[1] = v199;
            v267.val[2] = v211;
            v265.val[1] = v223;
            v265.val[2] = v235;
          }
        }
        v27 = atomic_load((unsigned __int8 *)qword_10048AA20);
        if ((v27 & 1) == 0)
        {
          v224 = v265.val[1];
          v236 = v265.val[2];
          v200 = v267.val[1];
          v212 = v267.val[2];
          v176 = v17;
          v188 = v16;
          v154 = v25;
          v164 = v24;
          v59 = __cxa_guard_acquire(qword_10048AA20);
          v25 = v154;
          v24 = v164;
          v17 = v176;
          v16 = v188;
          v267.val[1] = v200;
          v267.val[2] = v212;
          v265.val[1] = v224;
          v265.val[2] = v236;
          if (v59)
          {
            *(_QWORD *)&v60 = 0x3F0000003F000000;
            *((_QWORD *)&v60 + 1) = 0x3F0000003F000000;
            xmmword_10048AA10 = v60;
            __cxa_guard_release(qword_10048AA20);
            v25 = v154;
            v24 = v164;
            v17 = v176;
            v16 = v188;
            v267.val[1] = v200;
            v267.val[2] = v212;
            v265.val[1] = v224;
            v265.val[2] = v236;
          }
        }
        v28 = (int8x16_t)xmmword_10048AA10;
        v29 = (int8x16_t)xmmword_10048A9F0;
        v30 = atomic_load((unsigned __int8 *)qword_10048AA00);
        if ((v30 & 1) == 0)
        {
          v225 = v265.val[1];
          v237 = v265.val[2];
          v201 = v267.val[1];
          v213 = v267.val[2];
          v177 = v17;
          v189 = v16;
          v155 = v25;
          v165 = v24;
          v137 = xmmword_10048A9F0;
          v145 = xmmword_10048AA10;
          v61 = __cxa_guard_acquire(qword_10048AA00);
          v29 = (int8x16_t)v137;
          v28 = (int8x16_t)v145;
          v25 = v155;
          v24 = v165;
          v17 = v177;
          v16 = v189;
          v267.val[1] = v201;
          v267.val[2] = v213;
          v265.val[1] = v225;
          v265.val[2] = v237;
          if (v61)
          {
            *(_QWORD *)&v62 = 0x8000000080000000;
            *((_QWORD *)&v62 + 1) = 0x8000000080000000;
            xmmword_10048A9F0 = v62;
            __cxa_guard_release(qword_10048AA00);
            v29 = (int8x16_t)v137;
            v28 = (int8x16_t)v145;
            v25 = v155;
            v24 = v165;
            v17 = v177;
            v16 = v189;
            v267.val[1] = v201;
            v267.val[2] = v213;
            v265.val[1] = v225;
            v265.val[2] = v237;
          }
        }
        v31 = atomic_load((unsigned __int8 *)qword_10048AA20);
        if ((v31 & 1) == 0)
        {
          v226 = v265.val[1];
          v238 = v265.val[2];
          v202 = v267.val[1];
          v214 = v267.val[2];
          v178 = v17;
          v190 = v16;
          v156 = v25;
          v166 = v24;
          v138 = v29;
          v146 = v28;
          v63 = __cxa_guard_acquire(qword_10048AA20);
          v29 = v138;
          v28 = v146;
          v25 = v156;
          v24 = v166;
          v17 = v178;
          v16 = v190;
          v267.val[1] = v202;
          v267.val[2] = v214;
          v265.val[1] = v226;
          v265.val[2] = v238;
          if (v63)
          {
            *(_QWORD *)&v64 = 0x3F0000003F000000;
            *((_QWORD *)&v64 + 1) = 0x3F0000003F000000;
            xmmword_10048AA10 = v64;
            __cxa_guard_release(qword_10048AA20);
            v29 = v138;
            v28 = v146;
            v25 = v156;
            v24 = v166;
            v17 = v178;
            v16 = v190;
            v267.val[1] = v202;
            v267.val[2] = v214;
            v265.val[1] = v226;
            v265.val[2] = v238;
          }
        }
        v32 = (int8x16_t)xmmword_10048AA10;
        v33 = (int8x16_t)xmmword_10048A9F0;
        v34 = atomic_load((unsigned __int8 *)qword_10048AA00);
        if ((v34 & 1) == 0)
        {
          v227 = v265.val[1];
          v239 = v265.val[2];
          v203 = v267.val[1];
          v215 = v267.val[2];
          v179 = v17;
          v191 = v16;
          v157 = v25;
          v167 = v24;
          v139 = v29;
          v147 = v28;
          v125 = xmmword_10048A9F0;
          v131 = xmmword_10048AA10;
          v65 = __cxa_guard_acquire(qword_10048AA00);
          v33 = (int8x16_t)v125;
          v32 = (int8x16_t)v131;
          v29 = v139;
          v28 = v147;
          v25 = v157;
          v24 = v167;
          v17 = v179;
          v16 = v191;
          v267.val[1] = v203;
          v267.val[2] = v215;
          v265.val[1] = v227;
          v265.val[2] = v239;
          if (v65)
          {
            *(_QWORD *)&v66 = 0x8000000080000000;
            *((_QWORD *)&v66 + 1) = 0x8000000080000000;
            xmmword_10048A9F0 = v66;
            __cxa_guard_release(qword_10048AA00);
            v33 = (int8x16_t)v125;
            v32 = (int8x16_t)v131;
            v29 = v139;
            v28 = v147;
            v25 = v157;
            v24 = v167;
            v17 = v179;
            v16 = v191;
            v267.val[1] = v203;
            v267.val[2] = v215;
            v265.val[1] = v227;
            v265.val[2] = v239;
          }
        }
        v35 = atomic_load((unsigned __int8 *)qword_10048AA20);
        if ((v35 & 1) == 0)
        {
          v228 = v265.val[1];
          v240 = v265.val[2];
          v204 = v267.val[1];
          v216 = v267.val[2];
          v180 = v17;
          v192 = v16;
          v158 = v25;
          v168 = v24;
          v140 = v29;
          v148 = v28;
          v126 = v33;
          v132 = v32;
          v67 = __cxa_guard_acquire(qword_10048AA20);
          v33 = v126;
          v32 = v132;
          v29 = v140;
          v28 = v148;
          v25 = v158;
          v24 = v168;
          v17 = v180;
          v16 = v192;
          v267.val[1] = v204;
          v267.val[2] = v216;
          v265.val[1] = v228;
          v265.val[2] = v240;
          if (v67)
          {
            *(_QWORD *)&v68 = 0x3F0000003F000000;
            *((_QWORD *)&v68 + 1) = 0x3F0000003F000000;
            xmmword_10048AA10 = v68;
            __cxa_guard_release(qword_10048AA20);
            v33 = v126;
            v32 = v132;
            v29 = v140;
            v28 = v148;
            v25 = v158;
            v24 = v168;
            v17 = v180;
            v16 = v192;
            v267.val[1] = v204;
            v267.val[2] = v216;
            v265.val[1] = v228;
            v265.val[2] = v240;
          }
        }
        v36 = (int8x16_t)xmmword_10048AA10;
        v37 = (int8x16_t)xmmword_10048A9F0;
        v38 = atomic_load((unsigned __int8 *)qword_10048AA00);
        if ((v38 & 1) == 0)
        {
          v229 = v265.val[1];
          v241 = v265.val[2];
          v205 = v267.val[1];
          v217 = v267.val[2];
          v181 = v17;
          v193 = v16;
          v159 = v25;
          v169 = v24;
          v141 = v29;
          v149 = v28;
          v127 = v33;
          v133 = v32;
          v117 = xmmword_10048A9F0;
          v121 = xmmword_10048AA10;
          v69 = __cxa_guard_acquire(qword_10048AA00);
          v37 = (int8x16_t)v117;
          v36 = (int8x16_t)v121;
          v33 = v127;
          v32 = v133;
          v29 = v141;
          v28 = v149;
          v25 = v159;
          v24 = v169;
          v17 = v181;
          v16 = v193;
          v267.val[1] = v205;
          v267.val[2] = v217;
          v265.val[1] = v229;
          v265.val[2] = v241;
          if (v69)
          {
            *(_QWORD *)&v70 = 0x8000000080000000;
            *((_QWORD *)&v70 + 1) = 0x8000000080000000;
            xmmword_10048A9F0 = v70;
            __cxa_guard_release(qword_10048AA00);
            v37 = (int8x16_t)v117;
            v36 = (int8x16_t)v121;
            v33 = v127;
            v32 = v133;
            v29 = v141;
            v28 = v149;
            v25 = v159;
            v24 = v169;
            v17 = v181;
            v16 = v193;
            v267.val[1] = v205;
            v267.val[2] = v217;
            v265.val[1] = v229;
            v265.val[2] = v241;
          }
        }
        v39 = atomic_load((unsigned __int8 *)qword_10048AA20);
        if ((v39 & 1) == 0)
        {
          v230 = v265.val[1];
          v242 = v265.val[2];
          v206 = v267.val[1];
          v218 = v267.val[2];
          v182 = v17;
          v194 = v16;
          v160 = v25;
          v170 = v24;
          v142 = v29;
          v150 = v28;
          v128 = v33;
          v134 = v32;
          v118 = v37;
          v122 = v36;
          v71 = __cxa_guard_acquire(qword_10048AA20);
          v37 = v118;
          v36 = v122;
          v33 = v128;
          v32 = v134;
          v29 = v142;
          v28 = v150;
          v25 = v160;
          v24 = v170;
          v17 = v182;
          v16 = v194;
          v267.val[1] = v206;
          v267.val[2] = v218;
          v265.val[1] = v230;
          v265.val[2] = v242;
          if (v71)
          {
            *(_QWORD *)&v72 = 0x3F0000003F000000;
            *((_QWORD *)&v72 + 1) = 0x3F0000003F000000;
            xmmword_10048AA10 = v72;
            __cxa_guard_release(qword_10048AA20);
            v37 = v118;
            v36 = v122;
            v33 = v128;
            v32 = v134;
            v29 = v142;
            v28 = v150;
            v25 = v160;
            v24 = v170;
            v17 = v182;
            v16 = v194;
            v267.val[1] = v206;
            v267.val[2] = v218;
            v265.val[1] = v230;
            v265.val[2] = v242;
          }
        }
        v40 = (int8x16_t)xmmword_10048AA10;
        v41 = (int8x16_t)xmmword_10048A9F0;
        v42 = atomic_load((unsigned __int8 *)qword_10048AA00);
        if ((v42 & 1) == 0)
        {
          v231 = v265.val[1];
          v243 = v265.val[2];
          v207 = v267.val[1];
          v219 = v267.val[2];
          v183 = v17;
          v195 = v16;
          v161 = v25;
          v171 = v24;
          v143 = v29;
          v151 = v28;
          v129 = v33;
          v135 = v32;
          v119 = v37;
          v123 = v36;
          v73 = __cxa_guard_acquire(qword_10048AA00);
          v37 = v119;
          v36 = v123;
          v33 = v129;
          v32 = v135;
          v29 = v143;
          v28 = v151;
          v25 = v161;
          v24 = v171;
          v17 = v183;
          v16 = v195;
          v267.val[1] = v207;
          v267.val[2] = v219;
          v265.val[1] = v231;
          v265.val[2] = v243;
          if (v73)
          {
            *(_QWORD *)&v74 = 0x8000000080000000;
            *((_QWORD *)&v74 + 1) = 0x8000000080000000;
            xmmword_10048A9F0 = v74;
            __cxa_guard_release(qword_10048AA00);
            v37 = v119;
            v36 = v123;
            v33 = v129;
            v32 = v135;
            v29 = v143;
            v28 = v151;
            v25 = v161;
            v24 = v171;
            v17 = v183;
            v16 = v195;
            v267.val[1] = v207;
            v267.val[2] = v219;
            v265.val[1] = v231;
            v265.val[2] = v243;
          }
        }
        v43 = atomic_load((unsigned __int8 *)qword_10048AA20);
        if ((v43 & 1) == 0)
        {
          v232 = v265.val[1];
          v244 = v265.val[2];
          v208 = v267.val[1];
          v220 = v267.val[2];
          v184 = v17;
          v196 = v16;
          v162 = v25;
          v172 = v24;
          v144 = v29;
          v152 = v28;
          v130 = v33;
          v136 = v32;
          v120 = v37;
          v124 = v36;
          v75 = __cxa_guard_acquire(qword_10048AA20);
          v37 = v120;
          v36 = v124;
          v33 = v130;
          v32 = v136;
          v29 = v144;
          v28 = v152;
          v25 = v162;
          v24 = v172;
          v17 = v184;
          v16 = v196;
          v267.val[1] = v208;
          v267.val[2] = v220;
          v265.val[1] = v232;
          v265.val[2] = v244;
          if (v75)
          {
            *(_QWORD *)&v76 = 0x3F0000003F000000;
            *((_QWORD *)&v76 + 1) = 0x3F0000003F000000;
            xmmword_10048AA10 = v76;
            __cxa_guard_release(qword_10048AA20);
            v37 = v120;
            v36 = v124;
            v33 = v130;
            v32 = v136;
            v29 = v144;
            v28 = v152;
            v25 = v162;
            v24 = v172;
            v17 = v184;
            v16 = v196;
            v267.val[1] = v208;
            v267.val[2] = v220;
            v265.val[1] = v232;
            v265.val[2] = v244;
          }
        }
        v44 = vmulq_f32(vminq_f32(vmaxq_f32(v265.val[2], (float32x4_t)0), v250), v249);
        v45 = vmulq_f32(vminq_f32(vmaxq_f32(v265.val[1], (float32x4_t)0), v250), v249);
        v46 = vmulq_f32(vminq_f32(vmaxq_f32(v17, (float32x4_t)0), v250), v249);
        v47 = vmulq_f32(vminq_f32(vmaxq_f32(v267.val[2], (float32x4_t)0), v250), v249);
        v48 = vmulq_f32(vminq_f32(vmaxq_f32(v267.val[1], (float32x4_t)0), v250), v249);
        v49 = vmulq_f32(vminq_f32(vmaxq_f32(v16, (float32x4_t)0), v250), v249);
        sub_1002CD5BC(qword_1004AE660, v263, (uint16x8_t *)&v262, (uint16x8_t *)&v261, (uint16x8_t)vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v44, (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)v44), v24)))), vcvtq_s32_f32(vaddq_f32(v47, (float32x4_t)vorrq_s8(vandq_s8(v29, (int8x16_t)v47), v28)))), (uint16x8_t)vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v45, (float32x4_t)vorrq_s8(vandq_s8(v33, (int8x16_t)v45), v32)))), vcvtq_s32_f32(vaddq_f32(v48, (float32x4_t)vorrq_s8(vandq_s8(v37, (int8x16_t)v48), v36)))), (uint16x8_t)vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v46, (float32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)v46), v40)))), vcvtq_s32_f32(
                          vaddq_f32(v49, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)xmmword_10048A9F0, (int8x16_t)v49), (int8x16_t)xmmword_10048AA10)))));
        v266.val[0] = vmulq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v263[0].i8)), v248);
        v50.i64[0] = 0xC3000000C3000000;
        v50.i64[1] = 0xC3000000C3000000;
        v266.val[1] = vaddq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v262.i8)), v247), v50);
        v266.val[2] = vaddq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v261.i8)), v247), v50);
        v264.val[0] = vmulq_f32(vcvtq_f32_s32(vmovl_high_s16((int16x8_t)v263[0])), v248);
        v264.val[1] = vaddq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_high_s16(v262)), v247), v50);
        v264.val[2] = vaddq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_high_s16(v261)), v247), v50);
        v51 = v14 + 24;
        vst3q_f32(v14, v266);
        v52 = v14 + 12;
        vst3q_f32(v52, v264);
        v8 += 24;
        a2 += 8 * v251;
        v14 = v51;
      }
      while (v6 - 24 > v8);
    }
    v6 = v245;
    if (v8 < v245)
    {
      v77 = qword_1004AE660;
      v78 = (float32x2_t *)&a3[v8 + 1];
      v79 = v7;
      v80 = a2 + 1;
      v81 = v7 ^ 2;
      v82 = (float32x2_t)vdup_n_s32(0x38800000u);
      v83 = (float32x2_t)vdup_n_s32(0x43800000u);
      do
      {
        v84 = v80[v79 - 1];
        if (v84 <= 1.0)
          v85 = v80[v79 - 1];
        else
          v85 = 1.0;
        if (v84 >= 0.0)
          v86 = v85;
        else
          v86 = 0.0;
        if (*v80 <= 1.0)
          v87 = *v80;
        else
          v87 = 1.0;
        if (*v80 >= 0.0)
          v88 = v87;
        else
          v88 = 0.0;
        v89 = v80[v81 - 1];
        if (v89 <= 1.0)
          v90 = v80[v81 - 1];
        else
          v90 = 1.0;
        v91 = (uint64_t)rintf(v86 * 16384.0);
        if (v89 >= 0.0)
          v92 = v90;
        else
          v92 = 0.0;
        v263[0].i32[0] = 0;
        v262.i32[0] = 0;
        v261.i32[0] = 0;
        sub_1002CDAD4(v91, (uint64_t)rintf(v88 * 16384.0), (uint64_t)rintf(v92 * 16384.0), v77, v263[0].i32, v262.i32, v261.i32);
        v78[-1].f32[1] = (float)((float)v263[0].i32[0] * 0.000061035) * 100.0;
        *v78 = vmla_f32((float32x2_t)0xC3000000C3000000, v83, vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v261.u32[0], v262.u32[0])), v82));
        v78 = (float32x2_t *)((char *)v78 + 12);
        v8 += 3;
        v80 += v251;
      }
      while (v245 > v8);
      a2 = v80 - 1;
    }
  }
  else
  {
    v8 = 0;
  }
  v93 = atomic_load((unsigned __int8 *)qword_10048B9F8);
  if ((v93 & 1) == 0 && __cxa_guard_acquire(qword_10048B9F8))
  {
    sub_100289608((unsigned int *)&v262, 16);
    sub_100289608((unsigned int *)&v261, 116);
    sub_1002899DC(v262.i32, (unsigned int *)&v261, v263);
    dword_10048B9F0 = v263[0].i32[0];
    __cxa_guard_release(qword_10048B9F8);
  }
  if (v8 < v6)
  {
    v94 = v8;
    v95 = a2 + 1;
    v96 = &a3[v8 + 1];
    do
    {
      v99 = *(v95 - 1);
      if (v99 <= 1.0)
        v100 = *(v95 - 1);
      else
        v100 = 1.0;
      if (v99 >= 0.0)
        v101 = v100;
      else
        v101 = 0.0;
      v102 = 0.0;
      if (*v95 >= 0.0)
      {
        v102 = 1.0;
        if (*v95 <= 1.0)
          v102 = *v95;
      }
      v103 = v95[1];
      if (v103 <= 1.0)
        v104 = v95[1];
      else
        v104 = 1.0;
      if (v103 >= 0.0)
        v105 = v104;
      else
        v105 = 0.0;
      if (v5)
      {
        v106 = vcvts_n_s32_f32(v101, 0xAuLL);
        v107 = v106 & ~(v106 >> 31);
        if (v107 >= 0x3FF)
          v107 = 1023;
        v101 = *(float *)(v5 + 4 * (4 * v107))
             + (float)((float)(*(float *)(v5 + 4 * (4 * v107) + 4)
                             + (float)((float)(*(float *)(v5 + 4 * (4 * v107) + 8)
                                             + (float)(*(float *)(v5 + 4 * (4 * v107) + 12)
                                                     * (float)((float)(v101 * 1024.0) - (float)v107)))
                                     * (float)((float)(v101 * 1024.0) - (float)v107)))
                     * (float)((float)(v101 * 1024.0) - (float)v107));
        v108 = vcvts_n_s32_f32(v102, 0xAuLL);
        v109 = v108 & ~(v108 >> 31);
        if (v109 >= 0x3FF)
          v109 = 1023;
        v102 = *(float *)(v5 + 4 * (4 * v109))
             + (float)((float)(*(float *)(v5 + 4 * (4 * v109) + 4)
                             + (float)((float)(*(float *)(v5 + 4 * (4 * v109) + 8)
                                             + (float)(*(float *)(v5 + 4 * (4 * v109) + 12)
                                                     * (float)((float)(v102 * 1024.0) - (float)v109)))
                                     * (float)((float)(v102 * 1024.0) - (float)v109)))
                     * (float)((float)(v102 * 1024.0) - (float)v109));
        v110 = vcvts_n_s32_f32(v105, 0xAuLL);
        v111 = v110 & ~(v110 >> 31);
        if (v111 >= 0x3FF)
          v111 = 1023;
        v105 = *(float *)(v5 + 4 * (4 * v111))
             + (float)((float)(*(float *)(v5 + 4 * (4 * v111) + 4)
                             + (float)((float)(*(float *)(v5 + 4 * (4 * v111) + 8)
                                             + (float)(*(float *)(v5 + 4 * (4 * v111) + 12)
                                                     * (float)((float)(v105 * 1024.0) - (float)v111)))
                                     * (float)((float)(v105 * 1024.0) - (float)v111)))
                     * (float)((float)(v105 * 1024.0) - (float)v111));
      }
      v112 = (float)((float)(v259 * v102) + (float)(v101 * v260)) + (float)(v105 * v258);
      if (v112 <= 0.008856)
        v113 = *(float *)&dword_10048B9F0 + (float)(v112 * 7.787);
      else
        v113 = sub_10022FC30(v112);
      v114 = (float)((float)(v256 * v102) + (float)(v101 * v257)) + (float)(v105 * v255);
      if (v114 <= 0.008856)
        v115 = *(float *)&dword_10048B9F0 + (float)(v114 * 7.787);
      else
        v115 = sub_10022FC30((float)((float)(v256 * v102) + (float)(v101 * v257)) + (float)(v105 * v255));
      v116 = (float)((float)(v253 * v102) + (float)(v101 * v254)) + (float)(v105 * v252);
      if (v116 <= 0.008856)
        v97 = *(float *)&dword_10048B9F0 + (float)(v116 * 7.787);
      else
        v97 = sub_10022FC30(v116);
      v98 = (float)(v115 * 116.0) + -16.0;
      if (v114 <= 0.008856)
        v98 = v114 * 903.3;
      *(v96 - 1) = v98;
      *v96 = (float)(v113 - v115) * 500.0;
      v96[1] = (float)(v115 - v97) * 200.0;
      v94 += 3;
      v95 += v251;
      v96 += 3;
    }
    while (v94 < v6);
  }
}

void sub_1002CD58C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_10048B9F8);
  _Unwind_Resume(a1);
}

void sub_1002CD5A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_10048B9F8);
  _Unwind_Resume(a1);
}

uint16x8_t sub_1002CD5BC(uint64_t a1, uint16x8_t *a2, uint16x8_t *a3, uint16x8_t *a4, uint16x8_t a5, uint16x8_t a6, uint16x8_t a7)
{
  uint16x8_t v7;
  uint16x8_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  int8x16_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  int16x8_t *v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t *v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int16x8_t *v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  uint64_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  int16x8_t v42;
  __int128 v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  uint64_t v50;
  uint64_t v51;
  int16x8_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  uint32x4_t v69;
  int16x8_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int16x8_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int16x8_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  __int32 v83;
  int32x4_t v84;
  int32x4_t v85;
  int16x8_t v86;
  int32x4_t v87;
  int16x8_t v88;
  uint32x4_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  uint16x8_t result;

  v7.i64[0] = 0x8000800080008;
  v7.i64[1] = 0x8000800080008;
  v8 = vshlq_u16(a5, v7);
  v9 = vshlq_u16(a6, v7);
  v10 = vshlq_u16(a7, v7);
  v11.i64[0] = 0x4000400040004;
  v11.i64[1] = 0x4000400040004;
  v12.i64[0] = 0xF000F000F000FLL;
  v12.i64[1] = 0xF000F000F000FLL;
  v13 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(a5, v11), v12);
  v14 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(a6, v11), v12);
  v15 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(a7, v11), v12);
  v16.i64[0] = 0x18001800180018;
  v16.i64[1] = 0x18001800180018;
  v17 = (uint16x8_t)vdupq_n_s16(0x318u);
  v18 = (uint16x8_t)vdupq_n_s16(0x6618u);
  v19 = (uint16x8_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v9.i8), (uint16x4_t)0x18001800180018, *(uint16x4_t *)v8.i8), *(uint16x4_t *)v18.i8, *(uint16x4_t *)v10.i8);
  v20 = (uint16x8_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v17, v9), v16, v8), v18, v10);
  v21 = (int16x8_t *)(a1 + 2 * v19.u32[0]);
  v23 = *v21;
  v22 = v21[1];
  v24 = v21[2];
  v25 = (int16x8_t *)(a1 + 2 * v19.u32[1]);
  v27 = *v25;
  v26 = v25[1];
  v28 = v25[2];
  v29 = v19.u32[3];
  *(_QWORD *)&v30 = v20.u32[2];
  *((_QWORD *)&v30 + 1) = v20.u32[3];
  v31 = v30;
  *((_QWORD *)&v30 + 1) = v20.u32[1];
  v32 = v20.u32[0];
  v33 = (int16x8_t *)(a1 + 2 * v19.u32[2]);
  v20.i64[0] = 0x8000800080008;
  v20.i64[1] = 0x8000800080008;
  v35 = *v33;
  v34 = v33[1];
  v36 = v33[2];
  v19.i64[0] = 0x80008000800080;
  v19.i64[1] = 0x80008000800080;
  v37 = *((_QWORD *)&v30 + 1);
  v38 = vmlal_u16(vmull_u16((uint16x4_t)0x80008000800080, *(uint16x4_t *)v14.i8), (uint16x4_t)0x8000800080008, *(uint16x4_t *)v13.i8);
  v39 = vmlal_high_u16(vmull_high_u16(v19, v14), v20, v13);
  v13.i64[0] = 0x800080008000800;
  v13.i64[1] = 0x800080008000800;
  v40 = vmlal_u16(v38, (uint16x4_t)0x800080008000800, *(uint16x4_t *)v15.i8);
  v41 = vmlal_high_u16(v39, v13, v15);
  v42 = *(int16x8_t *)((char *)&unk_10049E500 + 2 * v40.u32[0]);
  *(_QWORD *)&v30 = v40.u32[2];
  *((_QWORD *)&v30 + 1) = v40.u32[3];
  v43 = v30;
  *(_QWORD *)&v30 = v41.u32[2];
  *((_QWORD *)&v30 + 1) = v41.u32[3];
  v44 = *(int16x8_t *)((char *)&unk_10049E500 + 2 * v40.u32[1]);
  v45 = *(int16x8_t *)((char *)&unk_10049E500 + 2 * v43);
  v46 = *(int16x8_t *)((char *)&unk_10049E500 + 2 * *((_QWORD *)&v43 + 1));
  v47 = *(int16x8_t *)((char *)&unk_10049E500 + 2 * v41.u32[0]);
  v48 = *(int16x8_t *)((char *)&unk_10049E500 + 2 * v41.u32[1]);
  v49 = *(int16x8_t *)((char *)&unk_10049E500 + 2 * v30);
  v50 = a1 + 2 * v29;
  v51 = a1 + 2 * v32;
  v52 = *(int16x8_t *)((char *)&unk_10049E500 + 2 * *((_QWORD *)&v30 + 1));
  v53 = a1 + 2 * v37;
  v54 = a1 + 2 * v31;
  v55 = a1 + 2 * *((_QWORD *)&v31 + 1);
  v56 = vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v42.i8);
  v57 = vmull_high_s16(v23, v42);
  v58 = vaddq_s32(vuzp1q_s32(v56, v57), vuzp2q_s32(v56, v57));
  v59 = vmull_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v44.i8);
  v60 = vmull_high_s16(v27, v44);
  v61 = vaddq_s32(vuzp1q_s32(v59, v60), vuzp2q_s32(v59, v60));
  v62 = vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v45.i8);
  v63 = vmull_high_s16(v35, v45);
  v64 = vaddq_s32(vuzp1q_s32(v62, v63), vuzp2q_s32(v62, v63));
  v65 = *(int16x8_t *)(v50 + 16);
  v66 = vmull_s16(*(int16x4_t *)v50, *(int16x4_t *)v46.i8);
  v67 = vmull_high_s16(*(int16x8_t *)v50, v46);
  v68 = vaddq_s32(vuzp1q_s32(v66, v67), vuzp2q_s32(v66, v67));
  *(int32x2_t *)v69.i8 = vzip1_s32(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v58, v58), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL)), vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v61, v61), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL)));
  v69.i32[2] = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v64, v64), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL)).u32[0];
  v69.i32[3] = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v68, v68), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL)).u32[0];
  v70 = *(int16x8_t *)(v51 + 16);
  v71 = vmull_s16(*(int16x4_t *)v51, *(int16x4_t *)v47.i8);
  v72 = vmull_high_s16(*(int16x8_t *)v51, v47);
  v73 = vaddq_s32(vuzp1q_s32(v71, v72), vuzp2q_s32(v71, v72));
  v74 = *(int16x8_t *)(v53 + 16);
  v75 = vmull_s16(*(int16x4_t *)v53, *(int16x4_t *)v48.i8);
  v76 = vmull_high_s16(*(int16x8_t *)v53, v48);
  v77 = *(int16x8_t *)(v54 + 16);
  v78 = vaddq_s32(vuzp1q_s32(v75, v76), vuzp2q_s32(v75, v76));
  v79 = *(int16x8_t *)(v55 + 16);
  v80 = vmull_s16(*(int16x4_t *)v54, *(int16x4_t *)v49.i8);
  v81 = vmull_high_s16(*(int16x8_t *)v54, v49);
  v82 = vaddq_s32(vuzp1q_s32(v80, v81), vuzp2q_s32(v80, v81));
  v83 = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v82, v82), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL)).u32[0];
  v84 = vmull_s16(*(int16x4_t *)v55, *(int16x4_t *)v52.i8);
  v85 = vmull_high_s16(*(int16x8_t *)v55, v52);
  v86 = *(int16x8_t *)(v50 + 32);
  v87 = vaddq_s32(vuzp1q_s32(v84, v85), vuzp2q_s32(v84, v85));
  v88 = *(int16x8_t *)(v51 + 32);
  *(int32x2_t *)v89.i8 = vzip1_s32(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v73, v73), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL)), vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v78, v78), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL)));
  v90 = *(int16x8_t *)(v53 + 32);
  v89.i32[2] = v83;
  v91 = *(int16x8_t *)(v54 + 32);
  v89.i32[3] = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v87, v87), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL)).u32[0];
  v92 = *(int16x8_t *)(v55 + 32);
  *a2 = vqrshrn_high_n_u32(vqrshrn_n_u32(v69, 0xCuLL), v89, 0xCuLL);
  v93 = vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v42.i8);
  v94 = vmull_high_s16(v22, v42);
  v95 = vaddq_s32(vuzp1q_s32(v93, v94), vuzp2q_s32(v93, v94));
  v96 = vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v44.i8);
  v97 = vmull_high_s16(v26, v44);
  v98 = vaddq_s32(vuzp1q_s32(v96, v97), vuzp2q_s32(v96, v97));
  v99 = vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v45.i8);
  v100 = vmull_high_s16(v34, v45);
  v101 = vaddq_s32(vuzp1q_s32(v99, v100), vuzp2q_s32(v99, v100));
  v102 = vmull_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v46.i8);
  v103 = vmull_high_s16(v65, v46);
  v104 = vaddq_s32(vuzp1q_s32(v102, v103), vuzp2q_s32(v102, v103));
  *(int32x2_t *)v98.i8 = vzip1_s32(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v95, v95), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL)), vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v98, v98), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL)));
  v98.i32[2] = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v101, v101), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL)).u32[0];
  v98.i32[3] = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v104, v104), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL)).u32[0];
  v105 = vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v47.i8);
  v106 = vmull_high_s16(v70, v47);
  v107 = vaddq_s32(vuzp1q_s32(v105, v106), vuzp2q_s32(v105, v106));
  v108 = vmull_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v48.i8);
  v109 = vmull_high_s16(v74, v48);
  v110 = vaddq_s32(vuzp1q_s32(v108, v109), vuzp2q_s32(v108, v109));
  v111 = vmull_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v49.i8);
  v112 = vmull_high_s16(v77, v49);
  v113 = vaddq_s32(vuzp1q_s32(v111, v112), vuzp2q_s32(v111, v112));
  v114 = vmull_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v52.i8);
  v115 = vmull_high_s16(v79, v52);
  v116 = vaddq_s32(vuzp1q_s32(v114, v115), vuzp2q_s32(v114, v115));
  *(int32x2_t *)v107.i8 = vzip1_s32(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v107, v107), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL)), vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v110, v110), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL)));
  v107.i64[1] = __PAIR64__(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v116, v116), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL)).u32[0], vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v113, v113), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL)).u32[0]);
  *a3 = vqrshrn_high_n_u32(vqrshrn_n_u32((uint32x4_t)v98, 0xCuLL), (uint32x4_t)v107, 0xCuLL);
  v117 = vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v42.i8);
  v118 = vmull_high_s16(v24, v42);
  v119 = vaddq_s32(vuzp1q_s32(v117, v118), vuzp2q_s32(v117, v118));
  v120 = vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v44.i8);
  v121 = vmull_high_s16(v28, v44);
  v122 = vaddq_s32(vuzp1q_s32(v120, v121), vuzp2q_s32(v120, v121));
  v123 = vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v45.i8);
  v124 = vmull_high_s16(v36, v45);
  v125 = vaddq_s32(vuzp1q_s32(v123, v124), vuzp2q_s32(v123, v124));
  v126 = vmull_s16(*(int16x4_t *)v86.i8, *(int16x4_t *)v46.i8);
  v127 = vmull_high_s16(v86, v46);
  v128 = vaddq_s32(vuzp1q_s32(v126, v127), vuzp2q_s32(v126, v127));
  *(int32x2_t *)v122.i8 = vzip1_s32(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v119, v119), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL)), vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v122, v122), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL)));
  v122.i64[1] = __PAIR64__(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v128, v128), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v128, (int8x16_t)v128, 8uLL)).u32[0], vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v125, v125), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL)).u32[0]);
  v129 = vmull_s16(*(int16x4_t *)v88.i8, *(int16x4_t *)v47.i8);
  v130 = vmull_high_s16(v88, v47);
  v131 = vaddq_s32(vuzp1q_s32(v129, v130), vuzp2q_s32(v129, v130));
  v132 = vmull_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v48.i8);
  v133 = vmull_high_s16(v90, v48);
  v134 = vaddq_s32(vuzp1q_s32(v132, v133), vuzp2q_s32(v132, v133));
  v135 = vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v49.i8);
  v136 = vmull_high_s16(v91, v49);
  v137 = vaddq_s32(vuzp1q_s32(v135, v136), vuzp2q_s32(v135, v136));
  v138 = vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v52.i8);
  v139 = vmull_high_s16(v92, v52);
  v140 = vaddq_s32(vuzp1q_s32(v138, v139), vuzp2q_s32(v138, v139));
  *(int32x2_t *)v131.i8 = vzip1_s32(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v131, v131), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL)), vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v134, v134), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL)));
  v131.i32[2] = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v137, v137), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL)).u32[0];
  v131.i32[3] = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v140, v140), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL)).u32[0];
  result = vqrshrn_high_n_u32(vqrshrn_n_u32((uint32x4_t)v122, 0xCuLL), (uint32x4_t)v131, 0xCuLL);
  *a4 = result;
  return result;
}

uint64_t sub_1002CDAD4(uint64_t result, int a2, int a3, uint64_t a4, int *a5, int *a6, int *a7)
{
  __int16 *v7;
  __int16 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;

  v7 = (__int16 *)(a4 + 2 * (24 * ((int)result >> 9) + 792 * (a2 >> 9) + 26136 * (a3 >> 9)));
  v8 = (__int16 *)((char *)&unk_10049E500
                 + 2
                 * ((result >> 2) & 0x78 | (((a2 >> 5) & 0xF) << 7) & 0xFFFF87FF | (((a3 >> 5) & 0xF) << 11)));
  v9 = *v8;
  v10 = v8[1];
  v11 = v9 * *v7 + v10 * v7[1];
  v12 = v7[8] * v9 + v7[9] * v10;
  v13 = v7[16] * v9 + v7[17] * v10;
  v14 = v8[2];
  v15 = v11 + v14 * v7[2];
  v16 = v12 + v7[10] * v14;
  v17 = v13 + v7[18] * v14;
  v18 = v8[3];
  v19 = v15 + v18 * v7[3];
  v20 = v16 + v7[11] * v18;
  v21 = v17 + v7[19] * v18;
  v22 = v8[4];
  v23 = v19 + v22 * v7[4];
  v24 = v20 + v7[12] * v22;
  v25 = v21 + v7[20] * v22;
  v26 = v8[5];
  v27 = v23 + v26 * v7[5];
  v28 = v24 + v7[13] * v26;
  v29 = v25 + v7[21] * v26;
  v30 = v8[6];
  LODWORD(v8) = v8[7];
  v31 = v27 + v30 * v7[6] + (_DWORD)v8 * v7[7];
  v32 = v28 + v7[14] * v30 + v7[15] * (_DWORD)v8;
  LODWORD(v7) = v29 + v7[22] * v30 + v7[23] * (_DWORD)v8;
  *a5 = v31;
  *a6 = v32;
  *a7 = (int)v7;
  *a5 = (*a5 + 2048) >> 12;
  *a6 = (*a6 + 2048) >> 12;
  *a7 = (*a7 + 2048) >> 12;
  return result;
}

void sub_1002CDC44(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002CDC68(uint64_t a1, int *a2)
{
  uint16x8_t v4;
  float32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  int v10;

  sub_100298C2C(v9, &off_100451360);
  v6 = *a2;
  if (*a2 < a2[1])
  {
    v7 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v6;
    v8 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v6;
    do
    {
      sub_1002CDD2C(*(int **)(a1 + 48), v8, v7, *(_DWORD *)(a1 + 40), v4, v5);
      ++v6;
      v8 += *(_QWORD *)(a1 + 16);
      v7 += *(_QWORD *)(a1 + 32);
    }
    while (v6 < a2[1]);
  }
  if (v10)
    sub_1002989D0(v9);
}

void sub_1002CDD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CDD2C(int *a1, uint64_t a2, uint64_t a3, int a4, uint16x8_t a5, float32x4_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  float32x4_t v16;
  float *v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  float *v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  float v25;
  float *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  float *v30;
  float *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  unsigned __int8 v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  unsigned __int8 v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  unsigned __int8 v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  unsigned __int8 v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  unsigned __int8 v51;
  uint8x8_t v52;
  uint8x8_t v53;
  char *v54;
  int v55;
  __int128 v56;
  int v57;
  __int128 v58;
  int v59;
  __int128 v60;
  int v61;
  __int128 v62;
  int v63;
  __int128 v64;
  int v65;
  __int128 v66;
  uint64_t v67;
  unsigned __int8 v68;
  int v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  float *v75;
  float v76;
  float v77;
  int v78;
  uint64_t v79;
  float v80;
  float v81;
  int v82;
  float v83;
  int v84;
  int v85;
  __int128 v86;
  float32x4_t v87;
  float32x4_t v88;
  __int128 v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  __int128 v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  __int128 v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  __int128 v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4x3_t v132;
  float32x4x3_t v133;
  float32x4x3_t v134;
  float32x4x3_t v135;
  float32x4x3_t v136;
  float32x4x3_t v137;
  float32x4x3_t v138;
  float32x4x3_t v139;
  float32x4x3_t v140;
  float32x4x3_t v141;
  float32x4x3_t v142;
  float32x4x3_t v143;
  int v144;
  float32x2_t *v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  float v151[768];
  float32x4x3_t v152;
  float32x4x3_t v153;
  float32x4x3_t v154;
  int8x8x4_t v155;

  v6 = a4;
  v7 = a3;
  v8 = a2;
  if (*((_BYTE *)a1 + 168))
  {
    sub_1002CE760(a1 + 14, a2, a3, a4, a5, (uint16x8_t)a6);
    return;
  }
  if (a4 >= 1)
  {
    v10 = 0;
    v11 = *a1;
    v12 = 8 * v11;
    v146 = (float32x2_t *)(a1 + 1);
    do
    {
      if (v6 - v10 >= 256)
        v13 = 256;
      else
        v13 = v6 - v10;
      v148 = 3 * v13;
      v14 = (3 * v13 - 24);
      v147 = v10;
      if (3 * v13 - 24 < 0)
      {
        v22 = 0;
        v24 = atomic_load((unsigned __int8 *)&qword_10048BA18);
        if ((v24 & 1) != 0)
          goto LABEL_18;
      }
      else
      {
        v15 = 0;
        v16 = *((float32x4_t *)a1 + 5);
        v17 = v151;
        do
        {
          if ((_DWORD)v11 == 3)
            *(int8x8x3_t *)v155.val[0].i8 = vld3_s8((const char *)v8);
          else
            v155 = vld4_s8((const char *)v8);
          v18 = vmovl_u8((uint8x8_t)v155.val[0]);
          v19 = vmovl_u8((uint8x8_t)v155.val[1]);
          v20 = vmovl_u8((uint8x8_t)v155.val[2]);
          v152.val[0] = vmulq_f32(v16, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v18.i8)));
          v152.val[1] = vmulq_f32(v16, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v19.i8)));
          v152.val[2] = vmulq_f32(v16, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v20.i8)));
          v21 = v17;
          vst3q_f32(v21, v152);
          v21 += 12;
          v152.val[0] = vmulq_f32(v16, vcvtq_f32_u32(vmovl_high_u16(v18)));
          v152.val[1] = vmulq_f32(v16, vcvtq_f32_u32(vmovl_high_u16(v19)));
          a6 = vcvtq_f32_u32(vmovl_high_u16(v20));
          v152.val[2] = vmulq_f32(v16, a6);
          vst3q_f32(v21, v152);
          v15 += 24;
          v8 += v12;
          v17 += 24;
        }
        while (v15 <= v14);
        v22 = v15;
        v23 = atomic_load((unsigned __int8 *)&qword_10048BA18);
        if ((v23 & 1) != 0)
          goto LABEL_18;
      }
      v144 = v13;
      v85 = __cxa_guard_acquire(&qword_10048BA18);
      v13 = v144;
      if (v85)
      {
        v150 = 1065353216;
        sub_1002899DC(&v150, (unsigned int *)&dword_1004AE52C, &dword_10048BA10);
        __cxa_guard_release(&qword_10048BA18);
        v6 = a4;
        v13 = v144;
      }
LABEL_18:
      if ((int)v22 < v148)
      {
        v25 = *(float *)&dword_10048BA10;
        v26 = &v151[v22 + 1];
        do
        {
          a6.i8[0] = *(_BYTE *)v8;
          *(float *)&v27 = v25 * (float)a6.u32[0];
          *(v26 - 1) = *(float *)&v27;
          LOBYTE(v27) = *(_BYTE *)(v8 + 1);
          *(float *)&v28 = v25 * (float)v27;
          *v26 = *(float *)&v28;
          LOBYTE(v28) = *(_BYTE *)(v8 + 2);
          a6.f32[0] = v25 * (float)v28;
          v26[1] = a6.f32[0];
          v22 += 3;
          v8 += v11;
          v26 += 3;
        }
        while (v22 < v148);
      }
      sub_1002CE98C(v146, v151, v151, v13);
      if ((v14 & 0x80000000) == 0)
      {
        v29 = 0;
        v30 = v151;
        do
        {
          v31 = v30;
          v154 = vld3q_f32(v31);
          v31 += 12;
          v153 = vld3q_f32(v31);
          v32 = *((float32x4_t *)a1 + 4);
          LOBYTE(v31) = atomic_load((unsigned __int8 *)qword_10048AA40);
          if ((v31 & 1) == 0)
          {
            v138 = v153;
            v132 = v154;
            v126 = *((float32x4_t *)a1 + 4);
            v55 = __cxa_guard_acquire(qword_10048AA40);
            v32 = v126;
            v154 = v132;
            v153 = v138;
            if (v55)
            {
              *(_QWORD *)&v56 = 0x3F0000003F000000;
              *((_QWORD *)&v56 + 1) = 0x3F0000003F000000;
              xmmword_10048AA30 = v56;
              __cxa_guard_release(qword_10048AA40);
              v32 = v126;
              v154 = v132;
              v153 = v138;
            }
          }
          v33 = (float32x4_t)xmmword_10048AA30;
          v34 = *((float32x4_t *)a1 + 4);
          v35 = atomic_load((unsigned __int8 *)qword_10048AA40);
          if ((v35 & 1) == 0)
          {
            v139 = v153;
            v133 = v154;
            v121 = *((float32x4_t *)a1 + 4);
            v127 = v32;
            v116 = xmmword_10048AA30;
            v57 = __cxa_guard_acquire(qword_10048AA40);
            v33 = (float32x4_t)v116;
            v34 = v121;
            v32 = v127;
            v154 = v133;
            v153 = v139;
            if (v57)
            {
              *(_QWORD *)&v58 = 0x3F0000003F000000;
              *((_QWORD *)&v58 + 1) = 0x3F0000003F000000;
              xmmword_10048AA30 = v58;
              __cxa_guard_release(qword_10048AA40);
              v33 = (float32x4_t)v116;
              v34 = v121;
              v32 = v127;
              v154 = v133;
              v153 = v139;
            }
          }
          v36 = (float32x4_t)xmmword_10048AA30;
          v37 = *((float32x4_t *)a1 + 6);
          v38 = *((float32x4_t *)a1 + 7);
          v39 = atomic_load((unsigned __int8 *)qword_10048AA40);
          if ((v39 & 1) == 0)
          {
            v140 = v153;
            v134 = v154;
            v122 = v34;
            v128 = v32;
            v112 = *((float32x4_t *)a1 + 6);
            v117 = v33;
            v104 = xmmword_10048AA30;
            v108 = *((float32x4_t *)a1 + 7);
            v59 = __cxa_guard_acquire(qword_10048AA40);
            v36 = (float32x4_t)v104;
            v38 = v108;
            v37 = v112;
            v33 = v117;
            v34 = v122;
            v32 = v128;
            v154 = v134;
            v153 = v140;
            if (v59)
            {
              *(_QWORD *)&v60 = 0x3F0000003F000000;
              *((_QWORD *)&v60 + 1) = 0x3F0000003F000000;
              xmmword_10048AA30 = v60;
              __cxa_guard_release(qword_10048AA40);
              v36 = (float32x4_t)v104;
              v38 = v108;
              v37 = v112;
              v33 = v117;
              v34 = v122;
              v32 = v128;
              v154 = v134;
              v153 = v140;
            }
          }
          v40 = (float32x4_t)xmmword_10048AA30;
          v41 = *((float32x4_t *)a1 + 6);
          v42 = *((float32x4_t *)a1 + 7);
          v43 = atomic_load((unsigned __int8 *)qword_10048AA40);
          if ((v43 & 1) == 0)
          {
            v141 = v153;
            v135 = v154;
            v123 = v34;
            v129 = v32;
            v113 = v37;
            v118 = v33;
            v105 = v36;
            v109 = v38;
            v98 = *((float32x4_t *)a1 + 7);
            v101 = *((float32x4_t *)a1 + 6);
            v95 = xmmword_10048AA30;
            v61 = __cxa_guard_acquire(qword_10048AA40);
            v40 = (float32x4_t)v95;
            v42 = v98;
            v41 = v101;
            v36 = v105;
            v38 = v109;
            v37 = v113;
            v33 = v118;
            v34 = v123;
            v32 = v129;
            v154 = v135;
            v153 = v141;
            if (v61)
            {
              *(_QWORD *)&v62 = 0x3F0000003F000000;
              *((_QWORD *)&v62 + 1) = 0x3F0000003F000000;
              xmmword_10048AA30 = v62;
              __cxa_guard_release(qword_10048AA40);
              v40 = (float32x4_t)v95;
              v42 = v98;
              v41 = v101;
              v36 = v105;
              v38 = v109;
              v37 = v113;
              v33 = v118;
              v34 = v123;
              v32 = v129;
              v154 = v135;
              v153 = v141;
            }
          }
          v44 = (float32x4_t)xmmword_10048AA30;
          v45 = *((float32x4_t *)a1 + 8);
          v46 = *((float32x4_t *)a1 + 9);
          v47 = atomic_load((unsigned __int8 *)qword_10048AA40);
          if ((v47 & 1) == 0)
          {
            v142 = v153;
            v136 = v154;
            v124 = v34;
            v130 = v32;
            v114 = v37;
            v119 = v33;
            v106 = v36;
            v110 = v38;
            v99 = v42;
            v102 = v41;
            v93 = *((float32x4_t *)a1 + 8);
            v96 = v40;
            v89 = xmmword_10048AA30;
            v91 = *((float32x4_t *)a1 + 9);
            v63 = __cxa_guard_acquire(qword_10048AA40);
            v44 = (float32x4_t)v89;
            v46 = v91;
            v45 = v93;
            v40 = v96;
            v42 = v99;
            v41 = v102;
            v36 = v106;
            v38 = v110;
            v37 = v114;
            v33 = v119;
            v34 = v124;
            v32 = v130;
            v154 = v136;
            v153 = v142;
            if (v63)
            {
              *(_QWORD *)&v64 = 0x3F0000003F000000;
              *((_QWORD *)&v64 + 1) = 0x3F0000003F000000;
              xmmword_10048AA30 = v64;
              __cxa_guard_release(qword_10048AA40);
              v44 = (float32x4_t)v89;
              v46 = v91;
              v45 = v93;
              v40 = v96;
              v42 = v99;
              v41 = v102;
              v36 = v106;
              v38 = v110;
              v37 = v114;
              v33 = v119;
              v34 = v124;
              v32 = v130;
              v154 = v136;
              v153 = v142;
            }
          }
          v48 = (float32x4_t)xmmword_10048AA30;
          v49 = *((float32x4_t *)a1 + 8);
          v50 = *((float32x4_t *)a1 + 9);
          v51 = atomic_load((unsigned __int8 *)qword_10048AA40);
          if ((v51 & 1) == 0)
          {
            v143 = v153;
            v137 = v154;
            v125 = v34;
            v131 = v32;
            v115 = v37;
            v120 = v33;
            v107 = v36;
            v111 = v38;
            v100 = v42;
            v103 = v41;
            v94 = v45;
            v97 = v40;
            v90 = v44;
            v92 = v46;
            v87 = *((float32x4_t *)a1 + 9);
            v88 = *((float32x4_t *)a1 + 8);
            v86 = xmmword_10048AA30;
            v65 = __cxa_guard_acquire(qword_10048AA40);
            v48 = (float32x4_t)v86;
            v50 = v87;
            v49 = v88;
            v44 = v90;
            v46 = v92;
            v45 = v94;
            v40 = v97;
            v42 = v100;
            v41 = v103;
            v36 = v107;
            v38 = v111;
            v37 = v115;
            v33 = v120;
            v34 = v125;
            v32 = v131;
            v154 = v137;
            v153 = v143;
            if (v65)
            {
              *(_QWORD *)&v66 = 0x3F0000003F000000;
              *((_QWORD *)&v66 + 1) = 0x3F0000003F000000;
              xmmword_10048AA30 = v66;
              __cxa_guard_release(qword_10048AA40);
              v48 = (float32x4_t)v86;
              v50 = v87;
              v49 = v88;
              v44 = v90;
              v46 = v92;
              v45 = v94;
              v40 = v97;
              v42 = v100;
              v41 = v103;
              v36 = v107;
              v38 = v111;
              v37 = v115;
              v33 = v120;
              v34 = v125;
              v32 = v131;
              v154 = v137;
              v153 = v143;
            }
          }
          v52 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v154.val[0], v32), v33))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(v153.val[0], v34), v36))));
          *(uint8x8_t *)a6.f32 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vaddq_f32(vmulq_f32(v154.val[1], v37), v38), v40))), vcvtq_u32_f32(vaddq_f32(vaddq_f32(vmulq_f32(v153.val[1], v41), v42), v44))));
          v53 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vaddq_f32(vmulq_f32(v154.val[2], v45), v46), v48))), vcvtq_u32_f32(vaddq_f32(vaddq_f32(vmulq_f32(v153.val[2], v49), v50), (float32x4_t)xmmword_10048AA30))));
          v54 = (char *)(v7 + v29);
          vst3_s8(v54, *(int8x8x3_t *)((char *)&a6 - 8));
          v29 += 24;
          v30 += 24;
        }
        while ((int)v14 >= (int)v29);
        v67 = v29;
        v6 = a4;
        v68 = atomic_load((unsigned __int8 *)&qword_10048BA28);
        v69 = v148;
        if ((v68 & 1) != 0)
          goto LABEL_46;
LABEL_62:
        if (__cxa_guard_acquire(&qword_10048BA28))
        {
          sub_100289608((unsigned int *)&v150, 100);
          sub_1002899DC(&dword_1004AE52C, (unsigned int *)&v150, &dword_10048BA20);
          __cxa_guard_release(&qword_10048BA28);
          v6 = a4;
          v69 = v148;
        }
        goto LABEL_46;
      }
      v67 = 0;
      v70 = atomic_load((unsigned __int8 *)&qword_10048BA28);
      v69 = v148;
      if ((v70 & 1) == 0)
        goto LABEL_62;
LABEL_46:
      v71 = atomic_load((unsigned __int8 *)&qword_10048BA38);
      if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_10048BA38))
      {
        sub_1002899DC(&dword_1004AE52C, &dword_1004AE510, &dword_10048BA30);
        __cxa_guard_release(&qword_10048BA38);
        v6 = a4;
        v69 = v148;
      }
      v72 = atomic_load((unsigned __int8 *)&qword_10048BA48);
      if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_10048BA48))
      {
        sub_1002899DC(&dword_1004AE52C, &dword_1004AE51C, &dword_10048BA40);
        __cxa_guard_release(&qword_10048BA48);
        v6 = a4;
        v69 = v148;
      }
      v73 = atomic_load((unsigned __int8 *)&qword_10048BA58);
      if ((v73 & 1) == 0 && __cxa_guard_acquire(&qword_10048BA58))
      {
        v149 = dword_1004AE508 ^ 0x80000000;
        sub_100289790((int *)&v149, &dword_1004AE52C, &v150);
        sub_1002899DC(&v150, &dword_1004AE510, &dword_10048BA50);
        __cxa_guard_release(&qword_10048BA58);
        v6 = a4;
        v69 = v148;
      }
      v74 = atomic_load((unsigned __int8 *)&qword_10048BA68);
      if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_10048BA68))
      {
        v149 = dword_1004AE514 ^ 0x80000000;
        sub_100289790((int *)&v149, &dword_1004AE52C, &v150);
        sub_1002899DC(&v150, &dword_1004AE51C, &dword_10048BA60);
        __cxa_guard_release(&qword_10048BA68);
        v6 = a4;
        v69 = v148;
      }
      if ((int)v67 < v69)
      {
        v75 = &v151[v67 + 1];
        do
        {
          v76 = *v75;
          v77 = rintf(*(v75 - 1) * *(float *)&dword_10048BA20);
          v78 = (uint64_t)v77 & ~((int)(uint64_t)v77 >> 31);
          if (v78 >= 255)
            LOBYTE(v78) = -1;
          v79 = v7 + v67;
          *(_BYTE *)(v7 + v67) = v78;
          v80 = v75[1];
          v81 = rintf(*(float *)&dword_10048BA50 + (float)(v76 * *(float *)&dword_10048BA30));
          v82 = (uint64_t)v81 & ~((int)(uint64_t)v81 >> 31);
          if (v82 >= 255)
            LOBYTE(v82) = -1;
          *(_BYTE *)(v79 + 1) = v82;
          a6.i32[0] = dword_10048BA60;
          v83 = rintf(*(float *)&dword_10048BA60 + (float)(v80 * *(float *)&dword_10048BA40));
          v84 = (uint64_t)v83 & ~((int)(uint64_t)v83 >> 31);
          if (v84 >= 255)
            LOBYTE(v84) = -1;
          *(_BYTE *)(v79 + 2) = v84;
          v67 += 3;
          v75 += 3;
        }
        while (v69 > (int)v67);
      }
      v10 = v147 + 256;
      v7 += 768;
      v12 = 8 * v11;
    }
    while (v147 + 256 < v6);
  }
}

void sub_1002CE6CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10048BA68);
  _Unwind_Resume(a1);
}

void sub_1002CE6E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10048BA58);
  _Unwind_Resume(a1);
}

void sub_1002CE6FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10048BA48);
  _Unwind_Resume(a1);
}

void sub_1002CE714(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10048BA38);
  _Unwind_Resume(a1);
}

void sub_1002CE72C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10048BA28);
  _Unwind_Resume(a1);
}

void sub_1002CE744(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10048BA18);
  _Unwind_Resume(a1);
}

void sub_1002CE760(int *a1, uint64_t a2, uint64_t a3, int a4, uint16x8_t a5, uint16x8_t a6)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  uint16x8_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  __int32 v22;
  uint64_t v23;
  __int32 v24;
  __int32 v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  int8x16x3_t v35;
  int8x16x4_t v36;

  v8 = *a1;
  v9 = a1[1];
  v10 = 3 * a4;
  if (a4 < 17)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v11 = 0;
    v12 = qword_1004AE668;
    do
    {
      if ((_DWORD)v8 == 3)
        *(int8x16x3_t *)v36.val[0].i8 = vld3q_s8((const char *)a2);
      else
        v36 = vld4q_s8((const char *)a2);
      a5.i32[0] = 0;
      a6.i32[0] = v9;
      v13 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)a6, (int32x4_t)a5), 0);
      v14 = (uint8x16_t)vbslq_s8(v13, v36.val[2], v36.val[0]);
      v15 = (uint8x16_t)vbslq_s8(v13, v36.val[0], v36.val[2]);
      v27 = vshll_high_n_u8((uint8x16_t)v36.val[1], 6uLL);
      v28 = vshll_high_n_u8(v15, 6uLL);
      v26 = vshll_high_n_u8(v14, 6uLL);
      sub_1002CD5BC(v12, &v34, &v33, &v32, vshll_n_u8(*(uint8x8_t *)v15.i8, 6uLL), vshll_n_u8(*(uint8x8_t *)v36.val[1].i8, 6uLL), vshll_n_u8(*(uint8x8_t *)v14.i8, 6uLL));
      sub_1002CD5BC(v12, &v31, &v30, &v29, v28, v27, v26);
      v16.i64[0] = 0x5000500050005;
      v16.i64[1] = 0x5000500050005;
      a5 = vshlq_u16(v34, v16);
      a6 = vshlq_u16(v31, v16);
      v35.val[0] = (int8x16_t)vqmovn_high_u16(vqmovn_u16(a5), a6);
      v35.val[1] = (int8x16_t)vqmovn_high_u16(vqmovn_u16(vshlq_u16(v33, v16)), vshlq_u16(v30, v16));
      v35.val[2] = (int8x16_t)vqmovn_high_u16(vqmovn_u16(vshlq_u16(v32, v16)), vshlq_u16(v29, v16));
      v17 = (char *)(a3 + v11);
      vst3q_s8(v17, v35);
      v11 += 48;
      a2 += 16 * v8;
    }
    while (v11 < v10 - 48);
  }
  if ((int)v11 < v10)
  {
    v18 = qword_1004AE668;
    v11 = v11;
    do
    {
      v19 = *(unsigned __int8 *)(a2 + 1);
      v20 = *(unsigned __int8 *)(a2 + (v9 ^ 2));
      v21 = *(unsigned __int8 *)(a2 + v9) << 6;
      v34.i32[0] = 0;
      v33.i32[0] = 0;
      v32.i32[0] = 0;
      sub_1002CDAD4(v21, v19 << 6, v20 << 6, v18, v34.i32, v33.i32, v32.i32);
      v22 = (v34.i32[0] / 64) & ~((v34.i32[0] + (v34.i32[0] < 0 ? 0x3F : 0)) >> 31);
      if (v22 >= 255)
        LOBYTE(v22) = -1;
      v23 = a3 + v11;
      *(_BYTE *)(a3 + v11) = v22;
      v24 = (v33.i32[0] / 64) & ~((v33.i32[0] + (v33.i32[0] < 0 ? 0x3F : 0)) >> 31);
      if (v24 >= 255)
        LOBYTE(v24) = -1;
      *(_BYTE *)(v23 + 1) = v24;
      v25 = (v32.i32[0] / 64) & ~((v32.i32[0] + (v32.i32[0] < 0 ? 0x3F : 0)) >> 31);
      if (v25 >= 255)
        LOBYTE(v25) = -1;
      *(_BYTE *)(v23 + 2) = v25;
      v11 += 3;
      a2 += v8;
    }
    while (v11 < v10);
  }
}

float32x2_t *sub_1002CE98C(float32x2_t *result, const float *a2, float *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v9;
  uint64_t v10;
  const float *v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v24;
  float32x4_t v25;
  float *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  __int128 v34;
  __int128 v35;
  int32x4_t v36;
  int32x4_t v37;
  uint64_t v38;
  int32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int64x2_t v44;
  int64x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  float32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int64x2_t v69;
  float32x4_t v70;
  int64x2_t v71;
  float32x4_t v72;
  int32x4_t v73;
  float32x4_t v74;
  int32x4_t v75;
  __int128 v76;
  __int128 v77;
  int32x4_t v78;
  int32x4_t v79;
  uint64_t v80;
  int32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int64x2_t v84;
  float32x4_t v85;
  int64x2_t v86;
  int64x2_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  __int128 v93;
  int32x4_t v94;
  int32x4_t v95;
  uint64_t v96;
  int32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int64x2_t v100;
  float32x4_t v101;
  int64x2_t v102;
  int64x2_t v103;
  float32x4_t v104;
  float32x4_t v105;
  const float *v106;
  float32x4_t v107;
  uint64_t v108;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v115;
  float32x4_t v116;
  float *v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  __int128 v125;
  __int128 v126;
  int32x4_t v127;
  int32x4_t v128;
  uint64_t v129;
  int32x4_t v130;
  float32x4_t v131;
  int32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int64x2_t v135;
  int64x2_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int32x4_t v151;
  float32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  int64x2_t v160;
  float32x4_t v161;
  int64x2_t v162;
  float32x4_t v163;
  int32x4_t v164;
  float32x4_t v165;
  int32x4_t v166;
  __int128 v167;
  __int128 v168;
  int32x4_t v169;
  int32x4_t v170;
  uint64_t v171;
  int32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  int64x2_t v175;
  float32x4_t v176;
  int64x2_t v177;
  int64x2_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  __int128 v184;
  int32x4_t v185;
  int32x4_t v186;
  uint64_t v187;
  int32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  int64x2_t v191;
  float32x4_t v192;
  int64x2_t v193;
  int64x2_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float v197;
  uint64_t v198;
  float32x2_t *v199;
  int8x8_t *v200;
  uint64_t v201;
  float32x2_t v203;
  int v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float32x2_t v212;
  float32x2_t v213;
  float32x2_t v215;
  float32x2_t v216;
  float32x2_t v217;
  __int32 *v218;
  float32x2_t v219;
  float32x2_t v220;
  float32x2_t v221;
  float32x2_t v222;
  __int32 *v223;
  float32x4x3_t v224;
  float32x4x3_t v225;
  float32x4x3_t v226;
  float32x4x4_t v227;

  v4 = result->i32[0];
  if (result[6].i8[0])
    v5 = qword_1004AE5A8;
  else
    v5 = 0;
  _S2 = result[1].i32[1];
  _S5 = result[3].i32[0];
  _S16 = result[4].i32[1];
  v9 = 3 * a4;
  if ((_DWORD)v4 == 3)
  {
    if (a4 >= 4)
    {
      v10 = 0;
      v11 = (const float *)&dword_1004AE504;
      v12 = vld1q_dup_f32(v11);
      v13 = qword_1004AE5A0;
      __asm { FMOV            V19.4S, #1.0 }
      v19 = (float32x4_t)vdupq_n_s32(0x447FC000u);
      v20 = (float32x4_t)vdupq_n_s32(0x42E80000u);
      __asm
      {
        FMOV            V22.4S, #-16.0
        FMOV            V23.4S, #15.0
        FMOV            V24.4S, #3.0
      }
      v24.i64[0] = 0x3400000034000000;
      v24.i64[1] = 0x3400000034000000;
      v25 = (float32x4_t)vdupq_n_s32(0x42500000u);
      __asm { FMOV            V27.4S, #2.25 }
      v27 = a3;
      do
      {
        v226 = vld3q_f32(a2);
        v53 = vminq_f32(vmaxq_f32(v226.val[0], (float32x4_t)0), _Q19);
        v54 = vminq_f32(vmaxq_f32(v226.val[1], (float32x4_t)0), _Q19);
        v55 = vminq_f32(vmaxq_f32(v226.val[2], (float32x4_t)0), _Q19);
        if (v5)
        {
          v56 = (float32x4_t)vdupq_n_s32(0x44800000u);
          v57 = vmulq_f32(v53, v56);
          v58 = vmulq_f32(v54, v56);
          v59 = vmulq_f32(v55, v56);
          v60 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v57, (float32x4_t)0), v19));
          v61 = vsubq_f32(v57, vcvtq_f32_s32(v60));
          v62 = vshlq_n_s32(v60, 2uLL);
          v63 = *(int32x4_t *)(v5 + 4 * v62.i32[0]);
          v64 = *(int32x4_t *)(v5 + 4 * v62.i32[1]);
          v65 = *(int32x4_t *)(v5 + 4 * v62.i32[2]);
          v66 = *(int32x4_t *)(v5 + 4 * v62.i32[3]);
          v67 = (float32x4_t)vtrn1q_s32(v63, v64);
          v68 = (float32x4_t)vtrn2q_s32(v63, v64);
          v69 = (int64x2_t)vtrn1q_s32(v65, v66);
          v70 = (float32x4_t)vzip2q_s64((int64x2_t)v67, v69);
          v67.i64[1] = v69.i64[0];
          v71 = (int64x2_t)vtrn2q_s32(v65, v66);
          v72 = (float32x4_t)vzip2q_s64((int64x2_t)v68, v71);
          v68.i64[1] = v71.i64[0];
          v53 = vmlaq_f32(v67, v61, vmlaq_f32(v68, v61, vmlaq_f32(v70, v61, v72)));
          v73 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v58, (float32x4_t)0), v19));
          v74 = vcvtq_f32_s32(v73);
          v75 = vshlq_n_s32(v73, 2uLL);
          *(_QWORD *)&v76 = v75.i32[2];
          *((_QWORD *)&v76 + 1) = v75.i32[3];
          v77 = v76;
          *((_QWORD *)&v76 + 1) = v75.i32[1];
          v78 = *(int32x4_t *)(v5 + 4 * v75.i32[0]);
          v79 = *(int32x4_t *)(v5 + 4 * *((_QWORD *)&v76 + 1));
          v80 = *((_QWORD *)&v77 + 1);
          v81 = *(int32x4_t *)(v5 + 4 * v77);
          v82 = vsubq_f32(v58, v74);
          v83 = *(float32x4_t *)(v5 + 4 * v80);
          v84 = (int64x2_t)vtrn1q_s32(v78, v79);
          v85 = (float32x4_t)vtrn2q_s32(v78, v79);
          v86 = (int64x2_t)vtrn1q_s32(v81, (int32x4_t)v83);
          v87 = (int64x2_t)vtrn2q_s32(v81, (int32x4_t)v83);
          v88 = (float32x4_t)vzip2q_s64(v84, v86);
          v83.i64[0] = v84.i64[0];
          v83.i64[1] = v86.i64[0];
          v89 = (float32x4_t)vzip2q_s64((int64x2_t)v85, v87);
          v85.i64[1] = v87.i64[0];
          v90 = vmlaq_f32(v85, v82, vmlaq_f32(v88, v82, v89));
          v91 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v59, (float32x4_t)0), v19));
          v92 = vshlq_n_s32(v91, 2uLL);
          *(_QWORD *)&v76 = v92.i32[2];
          *((_QWORD *)&v76 + 1) = v92.i32[3];
          v93 = v76;
          *((_QWORD *)&v76 + 1) = v92.i32[1];
          v94 = *(int32x4_t *)(v5 + 4 * v92.i32[0]);
          v95 = *(int32x4_t *)(v5 + 4 * *((_QWORD *)&v76 + 1));
          v96 = *((_QWORD *)&v93 + 1);
          v97 = *(int32x4_t *)(v5 + 4 * v93);
          v54 = vmlaq_f32(v83, v82, v90);
          v98 = vsubq_f32(v59, vcvtq_f32_s32(v91));
          v99 = *(float32x4_t *)(v5 + 4 * v96);
          v100 = (int64x2_t)vtrn1q_s32(v94, v95);
          v101 = (float32x4_t)vtrn2q_s32(v94, v95);
          v102 = (int64x2_t)vtrn1q_s32(v97, (int32x4_t)v99);
          v103 = (int64x2_t)vtrn2q_s32(v97, (int32x4_t)v99);
          v104 = (float32x4_t)vzip2q_s64(v100, v102);
          v99.i64[0] = v100.i64[0];
          v99.i64[1] = v102.i64[0];
          v105 = (float32x4_t)vzip2q_s64((int64x2_t)v101, v103);
          v101.i64[1] = v103.i64[0];
          v55 = vmlaq_f32(v99, v98, vmlaq_f32(v101, v98, vmlaq_f32(v104, v98, v105)));
        }
        v28 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v53, result->f32[1]), v54, result[1].f32[0]), v55, result[1].f32[1]);
        v29 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v53, result[2].f32[0]), v54, result[2].f32[1]), v55, result[3].f32[0]);
        v30 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v53, result[3].f32[1]), v54, result[4].f32[0]), v55, result[4].f32[1]);
        v31 = vmulq_f32(v29, v12);
        v32 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v31, (float32x4_t)0), v19));
        v33 = vshlq_n_s32(v32, 2uLL);
        *(_QWORD *)&v34 = v33.i32[2];
        *((_QWORD *)&v34 + 1) = v33.i32[3];
        v35 = v34;
        *((_QWORD *)&v34 + 1) = v33.i32[1];
        v36 = *(int32x4_t *)(v13 + 4 * v33.i32[0]);
        v37 = *(int32x4_t *)(v13 + 4 * *((_QWORD *)&v34 + 1));
        v38 = *((_QWORD *)&v35 + 1);
        v39 = *(int32x4_t *)(v13 + 4 * v35);
        v40 = vsubq_f32(v31, vcvtq_f32_s32(v32));
        v41 = *(int32x4_t *)(v13 + 4 * v38);
        v42 = (float32x4_t)vtrn1q_s32(v36, v37);
        v43 = (float32x4_t)vtrn2q_s32(v36, v37);
        v44 = (int64x2_t)vtrn1q_s32(v39, v41);
        v45 = (int64x2_t)vtrn2q_s32(v39, v41);
        v46 = (float32x4_t)vzip2q_s64((int64x2_t)v42, v44);
        v42.i64[1] = v44.i64[0];
        v47 = (float32x4_t)vzip2q_s64((int64x2_t)v43, v45);
        v43.i64[1] = v45.i64[0];
        v224.val[0] = vmlaq_f32(_Q22, v20, vmlaq_f32(v42, v40, vmlaq_f32(v43, v40, vmlaq_f32(v46, v40, v47))));
        v48 = vmaxq_f32(vmlaq_f32(vmlaq_f32(v28, _Q23, v29), _Q24, v30), v24);
        v49 = vrecpeq_f32(v48);
        v50 = vmulq_f32(v49, vrecpsq_f32(v48, v49));
        v51 = vmulq_f32(vmulq_f32(vrecpsq_f32(v48, v50), v50), v25);
        v50.f32[0] = -result[5].f32[0];
        v52 = vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 0), v51, v28);
        v224.val[1] = vmulq_f32(v224.val[0], v52);
        v52.f32[0] = -result[5].f32[1];
        v224.val[2] = vmulq_f32(v224.val[0], vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), v51, vmulq_f32(v29, _Q27)));
        vst3q_f32(v27, v224);
        v27 += 12;
        v10 += 12;
        a2 += 12;
      }
      while (v10 <= v9 - 12);
LABEL_12:
      if ((int)v10 >= v9)
        return result;
      goto LABEL_19;
    }
LABEL_11:
    LODWORD(v10) = 0;
    goto LABEL_12;
  }
  if (a4 < 4)
    goto LABEL_11;
  v10 = 0;
  v106 = (const float *)&dword_1004AE504;
  v107 = vld1q_dup_f32(v106);
  v108 = qword_1004AE5A0;
  __asm { FMOV            V19.4S, #1.0 }
  v110 = (float32x4_t)vdupq_n_s32(0x447FC000u);
  v111 = (float32x4_t)vdupq_n_s32(0x42E80000u);
  __asm
  {
    FMOV            V22.4S, #-16.0
    FMOV            V23.4S, #15.0
    FMOV            V24.4S, #3.0
  }
  v115.i64[0] = 0x3400000034000000;
  v115.i64[1] = 0x3400000034000000;
  v116 = (float32x4_t)vdupq_n_s32(0x42500000u);
  __asm { FMOV            V27.4S, #2.25 }
  v118 = a3;
  do
  {
    v227 = vld4q_f32(a2);
    v144 = vminq_f32(vmaxq_f32(v227.val[0], (float32x4_t)0), _Q19);
    v145 = vminq_f32(vmaxq_f32(v227.val[1], (float32x4_t)0), _Q19);
    v146 = vminq_f32(vmaxq_f32(v227.val[2], (float32x4_t)0), _Q19);
    if (v5)
    {
      v147 = (float32x4_t)vdupq_n_s32(0x44800000u);
      v148 = vmulq_f32(v144, v147);
      v149 = vmulq_f32(v145, v147);
      v150 = vmulq_f32(v146, v147);
      v151 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v148, (float32x4_t)0), v110));
      v152 = vsubq_f32(v148, vcvtq_f32_s32(v151));
      v153 = vshlq_n_s32(v151, 2uLL);
      v154 = *(int32x4_t *)(v5 + 4 * v153.i32[0]);
      v155 = *(int32x4_t *)(v5 + 4 * v153.i32[1]);
      v156 = *(int32x4_t *)(v5 + 4 * v153.i32[2]);
      v157 = *(int32x4_t *)(v5 + 4 * v153.i32[3]);
      v158 = (float32x4_t)vtrn1q_s32(v154, v155);
      v159 = (float32x4_t)vtrn2q_s32(v154, v155);
      v160 = (int64x2_t)vtrn1q_s32(v156, v157);
      v161 = (float32x4_t)vzip2q_s64((int64x2_t)v158, v160);
      v158.i64[1] = v160.i64[0];
      v162 = (int64x2_t)vtrn2q_s32(v156, v157);
      v163 = (float32x4_t)vzip2q_s64((int64x2_t)v159, v162);
      v159.i64[1] = v162.i64[0];
      v144 = vmlaq_f32(v158, v152, vmlaq_f32(v159, v152, vmlaq_f32(v161, v152, v163)));
      v164 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v149, (float32x4_t)0), v110));
      v165 = vcvtq_f32_s32(v164);
      v166 = vshlq_n_s32(v164, 2uLL);
      *(_QWORD *)&v167 = v166.i32[2];
      *((_QWORD *)&v167 + 1) = v166.i32[3];
      v168 = v167;
      *((_QWORD *)&v167 + 1) = v166.i32[1];
      v169 = *(int32x4_t *)(v5 + 4 * v166.i32[0]);
      v170 = *(int32x4_t *)(v5 + 4 * *((_QWORD *)&v167 + 1));
      v171 = *((_QWORD *)&v168 + 1);
      v172 = *(int32x4_t *)(v5 + 4 * v168);
      v173 = vsubq_f32(v149, v165);
      v174 = *(float32x4_t *)(v5 + 4 * v171);
      v175 = (int64x2_t)vtrn1q_s32(v169, v170);
      v176 = (float32x4_t)vtrn2q_s32(v169, v170);
      v177 = (int64x2_t)vtrn1q_s32(v172, (int32x4_t)v174);
      v178 = (int64x2_t)vtrn2q_s32(v172, (int32x4_t)v174);
      v179 = (float32x4_t)vzip2q_s64(v175, v177);
      v174.i64[0] = v175.i64[0];
      v174.i64[1] = v177.i64[0];
      v180 = (float32x4_t)vzip2q_s64((int64x2_t)v176, v178);
      v176.i64[1] = v178.i64[0];
      v181 = vmlaq_f32(v176, v173, vmlaq_f32(v179, v173, v180));
      v182 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v150, (float32x4_t)0), v110));
      v183 = vshlq_n_s32(v182, 2uLL);
      *(_QWORD *)&v167 = v183.i32[2];
      *((_QWORD *)&v167 + 1) = v183.i32[3];
      v184 = v167;
      *((_QWORD *)&v167 + 1) = v183.i32[1];
      v185 = *(int32x4_t *)(v5 + 4 * v183.i32[0]);
      v186 = *(int32x4_t *)(v5 + 4 * *((_QWORD *)&v167 + 1));
      v187 = *((_QWORD *)&v184 + 1);
      v188 = *(int32x4_t *)(v5 + 4 * v184);
      v145 = vmlaq_f32(v174, v173, v181);
      v189 = vsubq_f32(v150, vcvtq_f32_s32(v182));
      v190 = *(float32x4_t *)(v5 + 4 * v187);
      v191 = (int64x2_t)vtrn1q_s32(v185, v186);
      v192 = (float32x4_t)vtrn2q_s32(v185, v186);
      v193 = (int64x2_t)vtrn1q_s32(v188, (int32x4_t)v190);
      v194 = (int64x2_t)vtrn2q_s32(v188, (int32x4_t)v190);
      v195 = (float32x4_t)vzip2q_s64(v191, v193);
      v190.i64[0] = v191.i64[0];
      v190.i64[1] = v193.i64[0];
      v196 = (float32x4_t)vzip2q_s64((int64x2_t)v192, v194);
      v192.i64[1] = v194.i64[0];
      v146 = vmlaq_f32(v190, v189, vmlaq_f32(v192, v189, vmlaq_f32(v195, v189, v196)));
    }
    v119 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v144, result->f32[1]), v145, result[1].f32[0]), v146, result[1].f32[1]);
    v120 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v144, result[2].f32[0]), v145, result[2].f32[1]), v146, result[3].f32[0]);
    v121 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v144, result[3].f32[1]), v145, result[4].f32[0]), v146, result[4].f32[1]);
    v122 = vmulq_f32(v120, v107);
    v123 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v122, (float32x4_t)0), v110));
    v124 = vshlq_n_s32(v123, 2uLL);
    *(_QWORD *)&v125 = v124.i32[2];
    *((_QWORD *)&v125 + 1) = v124.i32[3];
    v126 = v125;
    *((_QWORD *)&v125 + 1) = v124.i32[1];
    v127 = *(int32x4_t *)(v108 + 4 * v124.i32[0]);
    v128 = *(int32x4_t *)(v108 + 4 * *((_QWORD *)&v125 + 1));
    v129 = *((_QWORD *)&v126 + 1);
    v130 = *(int32x4_t *)(v108 + 4 * v126);
    v131 = vsubq_f32(v122, vcvtq_f32_s32(v123));
    v132 = *(int32x4_t *)(v108 + 4 * v129);
    v133 = (float32x4_t)vtrn1q_s32(v127, v128);
    v134 = (float32x4_t)vtrn2q_s32(v127, v128);
    v135 = (int64x2_t)vtrn1q_s32(v130, v132);
    v136 = (int64x2_t)vtrn2q_s32(v130, v132);
    v137 = (float32x4_t)vzip2q_s64((int64x2_t)v133, v135);
    v133.i64[1] = v135.i64[0];
    v138 = (float32x4_t)vzip2q_s64((int64x2_t)v134, v136);
    v134.i64[1] = v136.i64[0];
    v225.val[0] = vmlaq_f32(_Q22, v111, vmlaq_f32(v133, v131, vmlaq_f32(v134, v131, vmlaq_f32(v137, v131, v138))));
    v139 = vmaxq_f32(vmlaq_f32(vmlaq_f32(v119, _Q23, v120), _Q24, v121), v115);
    v140 = vrecpeq_f32(v139);
    v141 = vmulq_f32(v140, vrecpsq_f32(v139, v140));
    v142 = vmulq_f32(vmulq_f32(vrecpsq_f32(v139, v141), v141), v116);
    v141.f32[0] = -result[5].f32[0];
    v143 = vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v141.f32, 0), v142, v119);
    v225.val[1] = vmulq_f32(v225.val[0], v143);
    v143.f32[0] = -result[5].f32[1];
    v225.val[2] = vmulq_f32(v225.val[0], vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v143.f32, 0), v142, vmulq_f32(v120, _Q27)));
    vst3q_f32(v118, v225);
    v118 += 12;
    v10 += 12;
    a2 += 4 * v4;
  }
  while (v10 <= v9 - 12);
  if ((int)v10 < v9)
  {
LABEL_19:
    v197 = *(float *)&dword_1004AE504;
    v198 = qword_1004AE5A0;
    v199 = (float32x2_t *)&a3[v10 + 1];
    v200 = (int8x8_t *)(a2 + 1);
    v201 = 4 * v4;
    __asm { FMOV            V20.2S, #1.0 }
    v10 = v10;
    v203 = (float32x2_t)vdup_n_s32(0x44800000u);
    do
    {
      v213 = (float32x2_t)vbic_s8(*v200, (int8x8_t)vcltz_f32((float32x2_t)*v200));
      _D30 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v213, _D20), (int8x8_t)_D20, (int8x8_t)v213);
      if (v5)
      {
        v215 = vmul_f32(_D30, v203);
        v216 = (float32x2_t)vmin_u32((uint32x2_t)vmax_s32(vcvt_n_s32_f32(_D30, 0xAuLL), 0), (uint32x2_t)0x300000003);
        v217 = vcvt_f32_s32((int32x2_t)v216);
        v218 = (__int32 *)(v5 + 4 * (4 * v216.i32[0]));
        v220.i32[0] = v218[2];
        v219.i32[0] = v218[3];
        v216.i32[0] = *v218;
        v221.i32[0] = v218[1];
        v222 = vsub_f32(v215, v217);
        v223 = (__int32 *)(v5 + 4 * (4 * v216.i32[1]));
        v219.i32[1] = v223[3];
        v220.i32[1] = v223[2];
        v221.i32[1] = v223[1];
        v216.i32[1] = *v223;
        _D30 = vmla_f32(v216, v222, vmla_f32(v221, v222, vmla_f32(v220, v222, v219)));
      }
      __asm
      {
        FMLA            S31, S2, V30.S[1]
        FMLA            S8, S5, V30.S[1]
        FMLA            S29, S16, V30.S[1]
      }
      v207 = (int)(float)(v197 * _S8) & ~((int)(float)(v197 * _S8) >> 31);
      if (v207 >= 0x3FF)
        v207 = 1023;
      v208 = (float)((float)(*(float *)(v198 + 4 * (4 * v207))
                           + (float)((float)(*(float *)(v198 + 4 * (4 * v207) + 4)
                                           + (float)((float)(*(float *)(v198 + 4 * (4 * v207) + 8)
                                                           + (float)(*(float *)(v198
                                                                              + 4 * (4 * v207)
                                                                              + 12)
                                                                   * (float)((float)(v197 * _S8) - (float)v207)))
                                                   * (float)((float)(v197 * _S8) - (float)v207)))
                                   * (float)((float)(v197 * _S8) - (float)v207)))
                   * 116.0)
           + -16.0;
      v209 = (float)(_D31.f32[0] + (float)(_S8 * 15.0)) + (float)(_S29 * 3.0);
      v210 = 52.0 / v209;
      _NF = v209 < 0.00000011921;
      v211 = 436210000.0;
      if (!_NF)
        v211 = v210;
      _D31.f32[1] = _S8 * 2.25;
      v212 = vmul_n_f32(vmla_n_f32(vneg_f32(result[5]), _D31, v211), v208);
      v199[-1].f32[1] = v208;
      *v199 = v212;
      v199 = (float32x2_t *)((char *)v199 + 12);
      v10 += 3;
      v200 = (int8x8_t *)((char *)v200 + v201);
    }
    while (v10 < v9);
  }
  return result;
}

void sub_1002CF260(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002CF284(uint64_t a1, int *a2)
{
  int v4;
  float *v5;
  const float *v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_1004513C0);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = (float *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4);
    v6 = (const float *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4);
    do
    {
      sub_1002CE98C(*(float32x2_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 = (const float *)((char *)v6 + *(_QWORD *)(a1 + 16));
      v5 = (float *)((char *)v5 + *(_QWORD *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002CF334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CF34C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002CF370(uint64_t a1, int *a2)
{
  double v4;
  double v5;
  double v6;
  uint16x8_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  _BYTE v11[8];
  int v12;

  sub_100298C2C(v11, &off_100451420);
  v8 = *a2;
  if (*a2 < a2[1])
  {
    v9 = (char *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v8);
    v10 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v8;
    do
    {
      sub_1002CF438((int *)(*(_QWORD *)(a1 + 48) + 56), v10, v9, *(_DWORD *)(a1 + 40), v4, v5, v6, v7);
      ++v8;
      v10 += *(_QWORD *)(a1 + 16);
      v9 += *(_QWORD *)(a1 + 32);
    }
    while (v8 < a2[1]);
  }
  if (v12)
    sub_1002989D0(v11);
}

void sub_1002CF424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CF438(int *a1, uint64_t a2, char *a3, int a4, double a5, double a6, double a7, uint16x8_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  char v29;
  char v30;
  __int128 v31;
  const char *v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  uint64_t v36;
  const float *v37;
  const float *v38;
  const float *v39;
  const float *v40;
  const float *v41;
  const float *v42;
  int32x4_t v43;
  int32x4_t v44;
  const float *v45;
  const float *v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  const float *v52;
  int32x4_t v53;
  int32x4_t v54;
  uint64_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  uint64_t v63;
  __int32 v64;
  int32x4_t v65;
  unsigned int v66;
  int32x4_t v67;
  uint32x4_t v68;
  uint32x4_t v69;
  uint8x16_t v70;
  uint8x16_t v71;
  uint8x16_t v72;
  int v73;
  int v74;
  uint64_t v75;
  __int128 v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  uint32x4_t v80[4];
  uint32x4_t v81[4];
  uint32x4_t v82[4];
  uint32x4_t v83;
  uint32x4_t v84;
  uint32x4_t v85;
  __n128 v86;
  uint32x4_t v87;
  __int128 v88;
  __int128 v89;
  int16x8_t v90;
  uint32x4_t v91;
  uint32x4_t v92;
  uint32x4_t v93;
  uint32x4_t v94;
  int8x16x3_t v95;

  v10 = *a1;
  v73 = 3 * a4;
  if (a4 >= 16)
  {
    v11 = 0;
    v74 = 3 * a4 - 48;
    *(_QWORD *)&v31 = -1;
    *((_QWORD *)&v31 + 1) = -1;
    v75 = a2;
    do
    {
      v76 = v31;
      v32 = (const char *)(a2 + v11);
      v95 = vld3q_s8(v32);
      v78 = v95.val[1];
      v79 = v95.val[0];
      v77 = v95.val[2];
      sub_1002CF924(*(double *)v95.val[0].i64, *(double *)v95.val[1].i64, *(double *)v95.val[2].i64, *(int8x8_t *)a8.i8, (uint64_t)a1, (uint8x8_t *)&v79, (uint8x8_t *)&v78, (uint8x8_t *)&v77, &v91, &v87, &v83, &v92, &v88, &v84, &v93, &v89, &v85, &v94, &v90,
        &v86);
      v33.i64[0] = 0xF0000000FLL;
      v33.i64[1] = 0xF0000000FLL;
      v34.i64[0] = 0xD0000000DLL;
      v34.i64[1] = 0xD0000000DLL;
      v35.i64[0] = 0x200000002000;
      v35.i64[1] = 0x200000002000;
      v36 = 0;
      v37 = (const float *)(a1 + 1);
      v38 = (const float *)(a1 + 2);
      v39 = (const float *)(a1 + 3);
      v40 = (const float *)(a1 + 4);
      v41 = (const float *)(a1 + 5);
      v42 = (const float *)(a1 + 6);
      v43 = (int32x4_t)vld1q_dup_f32(v38);
      v44 = (int32x4_t)vld1q_dup_f32(v40);
      v45 = (const float *)(a1 + 7);
      v46 = (const float *)(a1 + 8);
      v47 = (int32x4_t)vld1q_dup_f32(v42);
      v48 = (int32x4_t)vld1q_dup_f32(v46);
      v49 = (int32x4_t)vld1q_dup_f32(v39);
      v50 = (int32x4_t)vld1q_dup_f32(v45);
      v51 = (int32x4_t)vld1q_dup_f32(v37);
      v52 = (const float *)(a1 + 9);
      v53 = (int32x4_t)vld1q_dup_f32(v41);
      v54 = (int32x4_t)vld1q_dup_f32(v52);
      v55 = *((_QWORD *)a1 + 5);
      do
      {
        v56 = *(int32x4_t *)((char *)&v91 + v36 * 16);
        v57 = *(int32x4_t *)((char *)&v87 + v36 * 16);
        v58 = *(int32x4_t *)((char *)&v83 + v36 * 16);
        v59 = vshlq_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v57, v43), v56, v51), v58, v49), v35), v34);
        v60 = vshlq_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v57, v53), v56, v44), v58, v47), v35), v34);
        v61 = vshlq_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v57, v48), v56, v50), v58, v54), v35), v34);
        v62 = vmaxq_s32(vminq_s32(v59, v33), (int32x4_t)0);
        v63 = v62.u32[1];
        v64 = *(unsigned __int16 *)(v55 + 2 * v62.u32[0]);
        v62.i16[1] = v62.i16[5];
        v62.i16[0] = *(_WORD *)(v55 + 2 * v62.u32[2]);
        v62.i32[1] = *(unsigned __int16 *)(v55 + 2 * v62.u32[3]);
        v59.i32[0] = v64;
        v59.i32[1] = *(unsigned __int16 *)(v55 + 2 * v63);
        v59.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v62.i8, (int8x8_t)0xFFFF0000FFFFLL);
        v65 = vmaxq_s32(vminq_s32(v60, v33), (int32x4_t)0);
        v82[v36] = (uint32x4_t)v59;
        v66 = *(unsigned __int16 *)(v55 + 2 * v65.u32[0]);
        LODWORD(v63) = *(unsigned __int16 *)(v55 + 2 * v65.u32[1]);
        v65.i16[1] = v65.i16[5];
        v65.i16[0] = *(_WORD *)(v55 + 2 * v65.u32[2]);
        v65.i32[1] = *(unsigned __int16 *)(v55 + 2 * v65.u32[3]);
        v58.i64[0] = __PAIR64__(v63, v66);
        v58.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v65.i8, (int8x8_t)0xFFFF0000FFFFLL);
        v81[v36] = (uint32x4_t)v58;
        v67 = vmaxq_s32(vminq_s32(v61, v33), (int32x4_t)0);
        v68.i64[0] = v67.u32[2];
        v68.i64[1] = v67.u32[3];
        v69 = v68;
        v68.i64[0] = v67.u32[0];
        v68.i64[1] = v67.u32[1];
        v67.i16[0] = *(_WORD *)(v55 + 2 * v69.i64[0]);
        v67.i32[1] = *(unsigned __int16 *)(v55 + 2 * v69.i64[1]);
        v69.i32[0] = *(unsigned __int16 *)(v55 + 2 * v68.i64[0]);
        v69.i32[1] = *(unsigned __int16 *)(v55 + 2 * v68.i64[1]);
        v69.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v67.i8, (int8x8_t)0xFFFF0000FFFFLL);
        v80[v36++] = v69;
      }
      while (v36 != 4);
      a8 = vqmovn_high_u32(vqmovn_u32(v81[2]), v81[3]);
      v31 = v76;
      v70 = vqmovn_high_u16(vqmovn_u16(vqmovn_high_u32(vqmovn_u32(v80[0]), v80[1])), vqmovn_high_u32(vqmovn_u32(v80[2]), v80[3]));
      v71 = vqmovn_high_u16(vqmovn_u16(vqmovn_high_u32(vqmovn_u32(v81[0]), v81[1])), a8);
      v72 = vqmovn_high_u16(vqmovn_u16(vqmovn_high_u32(vqmovn_u32(v82[0]), v82[1])), vqmovn_high_u32(vqmovn_u32(v82[2]), v82[3]));
      if ((_DWORD)v10 == 4)
        vst4q_s8(a3, *(int8x16x4_t *)(&v31 - 3));
      else
        vst3q_s8(a3, *(int8x16x3_t *)v70.i8);
      a2 = v75;
      v11 += 48;
      a3 += 16 * v10;
    }
    while (v74 >= (int)v11);
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((int)v11 < v73)
  {
    v12 = v11;
    v13 = qword_1004AE5D8;
    v14 = a3 + 1;
    do
    {
      v15 = word_1004AEB28[2 * *(unsigned __int8 *)(a2 + v12)];
      v16 = word_1004AEB28[(2 * *(unsigned __int8 *)(a2 + v12)) | 1];
      v17 = *(_DWORD *)(v13
                      + 4 * (v16 + ((268435 * *(unsigned __int8 *)(a2 + v12 + 1) + 128) >> 13) + 3951));
      v18 = *(_DWORD *)(v13
                      + 4
                      * (int)(v16 - ((41943 * *(unsigned __int8 *)(a2 + v12 + 2) + 16) >> 9) + 18629));
      v19 = (a1[2] * v15 + a1[1] * v17 + a1[3] * v18 + 0x2000) >> 14;
      v20 = (a1[5] * v15 + a1[4] * v17 + a1[6] * v18 + 0x2000) >> 14;
      v21 = (a1[8] * v15 + a1[7] * v17 + a1[9] * v18 + 0x2000) >> 14;
      if (v19 >= 4095)
        v19 = 4095;
      v22 = v19 & ~(v19 >> 31);
      if (v20 >= 4095)
        v23 = 4095;
      else
        v23 = v20;
      v24 = v23 & ~(v23 >> 31);
      if (v21 >= 4095)
        v21 = 4095;
      v25 = *((_QWORD *)a1 + 5);
      v26 = *(unsigned __int16 *)(v25 + 2 * v22);
      v27 = *(unsigned __int16 *)(v25 + 2 * v24);
      v28 = *(unsigned __int16 *)(v25 + 2 * (v21 & ~(v21 >> 31)));
      if (v28 >= 255)
        LOBYTE(v28) = -1;
      *(v14 - 1) = v28;
      if (v27 >= 255)
        v29 = -1;
      else
        v29 = v27;
      *v14 = v29;
      if (v26 >= 255)
        v30 = -1;
      else
        v30 = v26;
      v14[1] = v30;
      if ((_DWORD)v10 == 4)
        v14[2] = -1;
      v12 += 3;
      v14 += v10;
    }
    while (v73 > (int)v12);
  }
}

__n128 sub_1002CF924(double a1, double a2, double a3, int8x8_t a4, uint64_t a5, uint8x8_t *a6, uint8x8_t *a7, uint8x8_t *a8, uint32x4_t *a9, uint32x4_t *a10, uint32x4_t *a11, uint32x4_t *a12, _OWORD *a13, uint32x4_t *a14, uint32x4_t *a15, _OWORD *a16, uint32x4_t *a17, uint32x4_t *a18, int16x8_t *a19, __n128 *a20)
{
  uint16x8_t v20;
  int16x8_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  __int16 *v24;
  __int16 *v25;
  uint32x4_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  __int16 *v29;
  __int16 *v30;
  __int128 v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  __int16 *v34;
  __int16 *v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  __int16 *v38;
  __int16 *v39;
  int16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  uint32x4_t v48;
  int16x8_t v49;
  int16x8_t v50;
  uint16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  int16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint64_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  uint32x4_t v65;
  uint32x4_t v66;
  uint32x4_t v67;
  uint32x4_t v68;
  __n128 result;

  v20 = vshll_n_u8(*a6, 1uLL);
  v21 = (int16x8_t)vshll_high_n_u8(*(uint8x16_t *)a6->i8, 1uLL);
  v22 = (unsigned __int16 *)((char *)&unk_1004AEB28 + 2 * v20.u16[0]);
  v23 = (unsigned __int16 *)((char *)&unk_1004AEB28 + 2 * v20.u16[1]);
  v24 = (__int16 *)((char *)&unk_1004AEB28 + 2 * v20.u16[2]);
  v25 = (__int16 *)((char *)&unk_1004AEB28 + 2 * v20.u16[3]);
  a4.i16[0] = *v24;
  a4.i16[2] = *v25;
  v26.i32[0] = *v22;
  v26.i32[1] = *v23;
  v26.u64[1] = (unint64_t)vand_s8(a4, (int8x8_t)0xFFFF0000FFFFLL);
  *a10 = v26;
  v27 = (unsigned __int16 *)((char *)&unk_1004AEB28 + 2 * v20.u16[4]);
  v28 = (unsigned __int16 *)((char *)&unk_1004AEB28 + 2 * v20.u16[5]);
  v29 = (__int16 *)((char *)&unk_1004AEB28 + 2 * v20.u16[6]);
  v20.i16[0] = *v29;
  v30 = (__int16 *)((char *)&unk_1004AEB28 + 2 * v20.u16[7]);
  v20.i16[2] = *v30;
  LODWORD(v31) = *v27;
  DWORD1(v31) = *v28;
  *(int8x8_t *)v20.i8 = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0xFFFF0000FFFFLL);
  *((_QWORD *)&v31 + 1) = v20.i64[0];
  *a13 = v31;
  v32 = (unsigned __int16 *)((char *)&unk_1004AEB28 + 2 * v21.u16[0]);
  v33 = (unsigned __int16 *)((char *)&unk_1004AEB28 + 2 * v21.u16[1]);
  v34 = (__int16 *)((char *)&unk_1004AEB28 + 2 * v21.u16[2]);
  v35 = (__int16 *)((char *)&unk_1004AEB28 + 2 * v21.u16[3]);
  v20.i16[0] = *v34;
  v20.i16[2] = *v35;
  LODWORD(v31) = *v32;
  DWORD1(v31) = *v33;
  *((int8x8_t *)&v31 + 1) = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0xFFFF0000FFFFLL);
  *a16 = v31;
  v36 = (unsigned __int16 *)((char *)&unk_1004AEB28 + 2 * v21.u16[4]);
  v37 = (unsigned __int16 *)((char *)&unk_1004AEB28 + 2 * v21.u16[5]);
  v38 = (__int16 *)((char *)&unk_1004AEB28 + 2 * v21.u16[6]);
  v39 = (__int16 *)((char *)&unk_1004AEB28 + 2 * v21.u16[7]);
  v21.i16[0] = *v38;
  v21.i16[2] = *v39;
  v40.i32[0] = *v36;
  v40.i32[1] = *v37;
  v40.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v21.i8, (int8x8_t)0xFFFF0000FFFFLL);
  *a19 = v40;
  v21.i16[0] = v22[1];
  v21.i16[1] = v23[1];
  v21.i16[2] = v24[1];
  v21.i16[3] = v25[1];
  v21.i16[4] = v27[1];
  v21.i16[5] = v28[1];
  v21.i16[6] = v29[1];
  v21.i16[7] = v30[1];
  v40.i16[0] = v32[1];
  v40.i16[1] = v33[1];
  v40.i16[2] = v34[1];
  v40.i16[3] = v35[1];
  v40.i16[4] = v36[1];
  v40.i16[5] = v37[1];
  v40.i16[6] = v38[1];
  v40.i16[7] = v39[1];
  v41 = vmovl_u8(*a8);
  v42 = vmovl_high_u8(*(uint8x16_t *)a8->i8);
  v43 = vqaddq_u16(vmovl_u8(*a7), vshll_n_u8(*a7, 2uLL));
  v44 = (uint16x8_t)vdupq_n_s16(0xD1B7u);
  v45 = vqaddq_u16(vmovl_high_u8(*(uint8x16_t *)a7->i8), vshll_high_n_u8(*(uint8x16_t *)a7->i8, 2uLL));
  v26.i64[0] = 0x8000000080;
  v26.i64[1] = 0x8000000080;
  v46.i64[0] = 0x8000000080;
  v46.i64[1] = 0x8000000080;
  v47.i64[0] = 0xC0000000CLL;
  v47.i64[1] = 0xC0000000CLL;
  v48.i64[0] = 0x8000000080;
  v48.i64[1] = 0x8000000080;
  v49 = (int16x8_t)vqmovn_high_u32(vqmovn_u32(vshlq_u32(vmlal_u16(v46, *(uint16x4_t *)v43.i8, *(uint16x4_t *)v44.i8), v47)), vshlq_u32(vmlal_high_u16(v48, v43, v44), v47));
  v43.i64[0] = 0x8000000080;
  v43.i64[1] = 0x8000000080;
  v50 = (int16x8_t)vqmovn_high_u32(vqmovn_u32(vshlq_u32(vmlal_u16((uint32x4_t)v43, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v44.i8), v47)), vshlq_u32(vmlal_high_u16(v26, v45, v44), v47));
  v51 = (uint16x8_t)vdupq_n_s16(0xA3D7u);
  v26.i64[0] = 0x1000000010;
  v26.i64[1] = 0x1000000010;
  v44.i64[0] = 0x1000000010;
  v44.i64[1] = 0x1000000010;
  v47.i64[0] = 0x800000008;
  v47.i64[1] = 0x800000008;
  v48.i64[0] = 0x1000000010;
  v48.i64[1] = 0x1000000010;
  v52 = (int16x8_t)vqmovn_high_u32(vqmovn_u32(vshlq_u32(vmlal_u16((uint32x4_t)v44, *(uint16x4_t *)v41.i8, *(uint16x4_t *)v51.i8), v47)), vshlq_u32(vmlal_high_u16(v48, v41, v51), v47));
  v41.i64[0] = 0x1000000010;
  v41.i64[1] = 0x1000000010;
  v53 = (int16x8_t)vqmovn_high_u32(vqmovn_u32(vshlq_u32(vmlal_u16((uint32x4_t)v41, *(uint16x4_t *)v42.i8, *(uint16x4_t *)v51.i8), v47)), vshlq_u32(vmlal_high_u16(v26, v42, v51), v47));
  v54 = vdupq_n_s16(0xF6Fu);
  v55 = (uint16x8_t)vaddq_s16(v21, vaddq_s16(v49, v54));
  v56 = (uint16x8_t)vaddq_s16(v40, vaddq_s16(v50, v54));
  v57 = vdupq_n_s16(0x48C5u);
  v58 = (uint16x8_t)vaddq_s16(vsubq_s16(v21, v52), v57);
  v59 = (uint16x8_t)vaddq_s16(vsubq_s16(v40, v53), v57);
  v60 = qword_1004AE5D8;
  v61 = vmovl_high_u16(v55);
  v62 = vmovl_u16(*(uint16x4_t *)v55.i8);
  v62.i32[0] = *(_DWORD *)(qword_1004AE5D8 + 4 * v62.u32[0]);
  v62.i32[1] = *(_DWORD *)(qword_1004AE5D8 + 4 * v62.u32[1]);
  v62.i32[2] = *(_DWORD *)(qword_1004AE5D8 + 4 * v62.u32[2]);
  v62.i32[3] = *(_DWORD *)(qword_1004AE5D8 + 4 * v62.u32[3]);
  *a9 = v62;
  v61.i32[0] = *(_DWORD *)(v60 + 4 * v61.u32[0]);
  v61.i32[1] = *(_DWORD *)(v60 + 4 * v61.u32[1]);
  v61.i32[2] = *(_DWORD *)(v60 + 4 * v61.u32[2]);
  v61.i32[3] = *(_DWORD *)(v60 + 4 * v61.u32[3]);
  *a12 = v61;
  v63 = vmovl_high_u16(v56);
  v64 = vmovl_u16(*(uint16x4_t *)v56.i8);
  v64.i32[0] = *(_DWORD *)(v60 + 4 * v64.u32[0]);
  v64.i32[1] = *(_DWORD *)(v60 + 4 * v64.u32[1]);
  v64.i32[2] = *(_DWORD *)(v60 + 4 * v64.u32[2]);
  v64.i32[3] = *(_DWORD *)(v60 + 4 * v64.u32[3]);
  *a15 = v64;
  v63.i32[0] = *(_DWORD *)(v60 + 4 * v63.u32[0]);
  v63.i32[1] = *(_DWORD *)(v60 + 4 * v63.u32[1]);
  v63.i32[2] = *(_DWORD *)(v60 + 4 * v63.u32[2]);
  v63.i32[3] = *(_DWORD *)(v60 + 4 * v63.u32[3]);
  *a18 = v63;
  v65 = vmovl_high_u16(v58);
  v66 = vmovl_u16(*(uint16x4_t *)v58.i8);
  v66.i32[0] = *(_DWORD *)(v60 + 4 * v66.u32[0]);
  v66.i32[1] = *(_DWORD *)(v60 + 4 * v66.u32[1]);
  v66.i32[2] = *(_DWORD *)(v60 + 4 * v66.u32[2]);
  v66.i32[3] = *(_DWORD *)(v60 + 4 * v66.u32[3]);
  *a11 = v66;
  v65.i32[0] = *(_DWORD *)(v60 + 4 * v65.u32[0]);
  v65.i32[1] = *(_DWORD *)(v60 + 4 * v65.u32[1]);
  v65.i32[2] = *(_DWORD *)(v60 + 4 * v65.u32[2]);
  v65.i32[3] = *(_DWORD *)(v60 + 4 * v65.u32[3]);
  *a14 = v65;
  v67 = vmovl_high_u16(v59);
  v68 = vmovl_u16(*(uint16x4_t *)v59.i8);
  v68.i32[0] = *(_DWORD *)(v60 + 4 * v68.u32[0]);
  v68.i32[1] = *(_DWORD *)(v60 + 4 * v68.u32[1]);
  v68.i32[2] = *(_DWORD *)(v60 + 4 * v68.u32[2]);
  v68.i32[3] = *(_DWORD *)(v60 + 4 * v68.u32[3]);
  *a17 = v68;
  result.n128_u32[0] = *(_DWORD *)(v60 + 4 * v67.u32[0]);
  result.n128_u32[1] = *(_DWORD *)(v60 + 4 * v67.u32[1]);
  result.n128_u32[2] = *(_DWORD *)(v60 + 4 * v67.u32[2]);
  result.n128_u32[3] = *(_DWORD *)(v60 + 4 * v67.u32[3]);
  *a20 = result;
  return result;
}

void sub_1002CFDCC(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002CFDF0(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100451480);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4;
    v6 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4;
    do
    {
      sub_1002CFEB4(*(int **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002CFEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int *sub_1002CFEB4(int *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  BOOL v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;

  if (*((_BYTE *)result + 40))
    v4 = qword_1004AE5B0;
  else
    v4 = 0;
  if (a4 >= 1)
  {
    v5 = 0;
    v6 = *((float *)result + 1);
    v7 = *((float *)result + 2);
    v8 = *((float *)result + 3);
    v9 = *((float *)result + 4);
    v10 = *((float *)result + 5);
    v11 = *((float *)result + 6);
    v12 = *((float *)result + 7);
    v13 = *((float *)result + 8);
    v14 = *result;
    v15 = a3 + 8;
    v16 = (float *)(a2 + 4);
    v17 = *((float *)result + 9);
    do
    {
      v18 = *(v16 - 1);
      v19 = *((float *)result + 12);
      v20 = v18 > *((float *)result + 11);
      v21 = (float)(v18 + 16.0) / 116.0;
      v22 = v18 / 903.3;
      if (v20)
        v22 = v21 * (float)(v21 * v21);
      else
        v21 = (float)(v22 * 7.787) + 0.13793;
      v23 = (float)(*v16 / 500.0) + v21;
      v24 = v21 + (float)(v16[1] / -200.0);
      v20 = v23 > v19;
      v25 = v23 * (float)(v23 * v23);
      v26 = (float)(v23 + -0.13793) / 7.787;
      if (v20)
        v26 = v25;
      v20 = v24 > v19;
      v27 = v24 * (float)(v24 * v24);
      v28 = (float)(v24 + -0.13793) / 7.787;
      if (v20)
        v28 = v27;
      v29 = (float)((float)(v7 * v22) + (float)(v6 * v26)) + (float)(v8 * v28);
      v30 = (float)((float)(v10 * v22) + (float)(v9 * v26)) + (float)(v11 * v28);
      v31 = (float)((float)(v13 * v22) + (float)(v12 * v26)) + (float)(v17 * v28);
      if (v29 <= 1.0)
        v32 = v29;
      else
        v32 = 1.0;
      if (v29 < 0.0)
        v32 = 0.0;
      if (v30 <= 1.0)
        v33 = v30;
      else
        v33 = 1.0;
      if (v30 < 0.0)
        v33 = 0.0;
      if (v31 <= 1.0)
        v34 = v31;
      else
        v34 = 1.0;
      if (v31 < 0.0)
        v34 = 0.0;
      if (v4)
      {
        v35 = vcvts_n_s32_f32(v32, 0xAuLL);
        v36 = v35 & ~(v35 >> 31);
        if (v36 >= 0x3FF)
          v36 = 1023;
        v32 = *(float *)(v4 + 4 * (4 * v36))
            + (float)((float)(*(float *)(v4 + 4 * (4 * v36) + 4)
                            + (float)((float)(*(float *)(v4 + 4 * (4 * v36) + 8)
                                            + (float)(*(float *)(v4 + 4 * (4 * v36) + 12)
                                                    * (float)((float)(v32 * 1024.0) - (float)v36)))
                                    * (float)((float)(v32 * 1024.0) - (float)v36)))
                    * (float)((float)(v32 * 1024.0) - (float)v36));
        v37 = vcvts_n_s32_f32(v33, 0xAuLL);
        v38 = v37 & ~(v37 >> 31);
        if (v38 >= 0x3FF)
          v38 = 1023;
        v33 = *(float *)(v4 + 4 * (4 * v38))
            + (float)((float)(*(float *)(v4 + 4 * (4 * v38) + 4)
                            + (float)((float)(*(float *)(v4 + 4 * (4 * v38) + 8)
                                            + (float)(*(float *)(v4 + 4 * (4 * v38) + 12)
                                                    * (float)((float)(v33 * 1024.0) - (float)v38)))
                                    * (float)((float)(v33 * 1024.0) - (float)v38)))
                    * (float)((float)(v33 * 1024.0) - (float)v38));
        v39 = vcvts_n_s32_f32(v34, 0xAuLL);
        v40 = v39 & ~(v39 >> 31);
        if (v40 >= 0x3FF)
          v40 = 1023;
        v34 = *(float *)(v4 + 4 * (4 * v40))
            + (float)((float)(*(float *)(v4 + 4 * (4 * v40) + 4)
                            + (float)((float)(*(float *)(v4 + 4 * (4 * v40) + 8)
                                            + (float)(*(float *)(v4 + 4 * (4 * v40) + 12)
                                                    * (float)((float)(v34 * 1024.0) - (float)v40)))
                                    * (float)((float)(v34 * 1024.0) - (float)v40)))
                    * (float)((float)(v34 * 1024.0) - (float)v40));
      }
      *(float *)(v15 - 8) = v32;
      *(float *)(v15 - 4) = v33;
      *(float *)v15 = v34;
      if ((_DWORD)v14 == 4)
        *(_DWORD *)(v15 + 4) = 1065353216;
      v5 += 3;
      v15 += 4 * v14;
      v16 += 3;
    }
    while (v5 < 3 * a4);
  }
  return result;
}

void sub_1002D0114(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002D0138(uint64_t a1, int *a2)
{
  double v4;
  uint16x8_t v5;
  uint16x8_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  _BYTE v14[8];
  int v15;

  sub_100298C2C(v14, &off_1004514E0);
  v11 = *a2;
  if (*a2 < a2[1])
  {
    v12 = (char *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v11);
    v13 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v11;
    do
    {
      sub_1002D01FC(*(int **)(a1 + 48), v13, v12, *(_DWORD *)(a1 + 40), v4, v5, v6, v7, v8, v9, v10);
      ++v11;
      v13 += *(_QWORD *)(a1 + 16);
      v12 += *(_QWORD *)(a1 + 32);
    }
    while (v11 < a2[1]);
  }
  if (v15)
    sub_1002989D0(v14);
}

void sub_1002D01E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002D01FC(int *a1, uint64_t a2, char *a3, int a4, double a5, uint16x8_t a6, uint16x8_t a7, int32x4_t a8, float32x4_t a9, int32x4_t a10, int32x4_t a11)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  float v29;
  unint64_t v30;
  unint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t *v34;
  uint8x16_t v35;
  uint8x16_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint8x16_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  float32x4_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  unint64_t v57;
  uint64_t v58;
  float *v59;
  const char *v60;
  float *v61;
  float *v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  unint64_t v66;
  float *v67;
  uint64_t v68;
  const char *v69;
  int8x16_t v70;
  float *v71;
  float *v72;
  float *v73;
  float *v74;
  unsigned int v75;
  float v76;
  uint64_t v77;
  float32x4_t *v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  int8x16_t v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  int8x16_t v88;
  int8x16_t v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  float32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int v100;
  __int128 v101;
  int v102;
  __int128 v103;
  int v104;
  __int128 v105;
  int v106;
  __int128 v107;
  int v108;
  __int128 v109;
  int v110;
  __int128 v111;
  int v112;
  __int128 v113;
  int v114;
  __int128 v115;
  float *v116;
  float v117;
  int v118;
  float v119;
  int v120;
  float v121;
  int v122;
  __int128 v123;
  float32x4_t v124;
  __int128 v125;
  float32x4_t v126;
  __int128 v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  __int128 v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  __int128 v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  __int128 v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  uint64_t v179;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  _BYTE v186[32];
  uint64_t v187;
  uint64_t v188;
  float32x4x3_t v189;
  float32x4x3_t v190;
  float32x4x3_t v191;
  float32x4x3_t v192;
  float32x4x3_t v193;
  float32x4x3_t v194;

  v14 = a4;
  v15 = a3;
  v16 = a2;
  if (*((_BYTE *)a1 + 104))
  {
    sub_1002D0DF0(a1 + 14, a2, a3, a4);
    return;
  }
  v18 = *a1;
  v19 = atomic_load((unsigned __int8 *)&qword_10048BA98);
  v179 = v18;
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_10048BA98))
  {
    sub_100289608((unsigned int *)&v185, 100);
    sub_1002899DC(&v185, (unsigned int *)&dword_1004AE52C, &dword_10048BA90);
    __cxa_guard_release(&qword_10048BA98);
    v14 = a4;
  }
  v20 = atomic_load((unsigned __int8 *)&qword_10048BAA8);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_10048BAA8))
  {
    sub_1002899DC((int *)&dword_1004AE510, (unsigned int *)&dword_1004AE52C, &dword_10048BAA0);
    __cxa_guard_release(&qword_10048BAA8);
    v14 = a4;
  }
  v21 = atomic_load((unsigned __int8 *)&qword_10048BAB8);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_10048BAB8))
  {
    sub_1002899DC((int *)&dword_1004AE51C, (unsigned int *)&dword_1004AE52C, &dword_10048BAB0);
    __cxa_guard_release(&qword_10048BAB8);
    v14 = a4;
  }
  if (v14 >= 1)
  {
    v22 = 0;
    v23 = 0;
    v24 = v14;
    do
    {
      v182 = v24 - 256;
      v183 = v23;
      if (v24 >= 256)
        v25 = 256;
      else
        v25 = v24;
      v26 = v14 - (v22 << 8);
      if (v26 >= 256)
        v26 = 256;
      v27 = v14 - v23;
      if (v27 >= 256)
        v28 = 256;
      else
        v28 = v27;
      v29 = *(float *)&dword_10048BA90;
      a6.i32[0] = dword_10048BAA0;
      a7.i32[0] = dword_10048BAB0;
      a8.i32[0] = dword_1004AE508;
      a9.i32[0] = dword_1004AE514;
      v184 = 3 * v28;
      v30 = (3 * v28 - 48);
      if ((int)v30 < 1)
      {
        v45 = 0;
        if (v184 <= 0)
          goto LABEL_50;
      }
      else
      {
        v31 = 0;
        a10.i64[0] = __PAIR64__(dword_10048BAA0, dword_10048BA90);
        a10.i64[1] = __PAIR64__(dword_10048BA90, dword_10048BAB0);
        a11.i64[0] = __PAIR64__(dword_10048BAB0, dword_10048BAA0);
        a11.i64[1] = __PAIR64__(dword_10048BAA0, dword_10048BA90);
        v32.i64[0] = __PAIR64__(dword_10048BA90, dword_10048BAB0);
        v32.i64[1] = __PAIR64__(dword_10048BAB0, dword_10048BAA0);
        v33.i32[0] = 0;
        v33.i32[1] = dword_1004AE508;
        v33.i64[1] = dword_1004AE514;
        v11.i8[8] = 0;
        v11.i8[9] = 0;
        v11.i8[10] = 0;
        v11.i8[11] = 0;
        v11.i64[0] = __PAIR64__(dword_1004AE514, dword_1004AE508);
        v11.i32[3] = dword_1004AE508;
        v12.i8[4] = 0;
        v12.i8[5] = 0;
        v12.i8[6] = 0;
        v12.i8[7] = 0;
        v12.i32[0] = dword_1004AE514;
        v12.i64[1] = __PAIR64__(dword_1004AE514, dword_1004AE508);
        v34 = (float32x4_t *)&v188;
        do
        {
          v35 = *(uint8x16_t *)(v16 + v31);
          v36 = *(uint8x16_t *)(v16 + v31 + 16);
          v37 = vmovl_u8(*(uint8x8_t *)v35.i8);
          v38 = vmovl_high_u8(v35);
          v34[-6] = vmlaq_f32(v33, (float32x4_t)a10, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v37.i8)));
          v34[-5] = vmlaq_f32(v11, (float32x4_t)a11, vcvtq_f32_u32(vmovl_high_u16(v37)));
          v34[-4] = vmlaq_f32(v12, v32, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v38.i8)));
          v34[-3] = vmlaq_f32(v33, (float32x4_t)a10, vcvtq_f32_u32(vmovl_high_u16(v38)));
          v39 = vmovl_u8(*(uint8x8_t *)v36.i8);
          v40 = vmovl_high_u8(v36);
          v34[-2] = vmlaq_f32(v11, (float32x4_t)a11, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v39.i8)));
          v34[-1] = vmlaq_f32(v12, v32, vcvtq_f32_u32(vmovl_high_u16(v39)));
          *v34 = vmlaq_f32(v33, (float32x4_t)a10, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v40.i8)));
          v34[1] = vmlaq_f32(v11, (float32x4_t)a11, vcvtq_f32_u32(vmovl_high_u16(v40)));
          v41 = *(uint8x16_t *)(v16 + v31 + 32);
          v42 = vmovl_u8(*(uint8x8_t *)v41.i8);
          v43 = vmovl_high_u8(v41);
          v34[2] = vmlaq_f32(v12, v32, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v42.i8)));
          v34[3] = vmlaq_f32(v33, (float32x4_t)a10, vcvtq_f32_u32(vmovl_high_u16(v42)));
          v44 = vmlaq_f32(v11, (float32x4_t)a11, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v43.i8)));
          v13 = vcvtq_f32_u32(vmovl_high_u16(v43));
          v34[4] = v44;
          v34[5] = vmlaq_f32(v12, v32, v13);
          v31 += 48;
          v34 += 12;
        }
        while (v31 < v30);
        v45 = v31;
        if ((int)v31 >= v184)
          goto LABEL_50;
      }
      v46 = 3 * v26;
      v47 = v45 + 3;
      if (v45 + 3 > v46)
        v46 = v45 + 3;
      v48 = v46 - 3;
      if (v48 == v45)
        v49 = 0;
      else
        v49 = -1;
      v50 = 1;
      if (v48 != v45)
        v50 = 2;
      v51 = v50 + (v48 - (unint64_t)(v48 != v45) - v45) / 3;
      if (v51 < 8)
      {
        v52 = v45;
        goto LABEL_48;
      }
      v53 = 3 * v25;
      if (v51 >= 0x10)
      {
        v54 = v51 & 0x7FFFFFFFFFFFFFF0;
        a10 = vdupq_lane_s32(*(int32x2_t *)a6.i8, 0);
        a11 = vdupq_lane_s32(*(int32x2_t *)a8.i8, 0);
        v63 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.i8, 0);
        v64 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0);
        if (v47 <= v53)
          v65 = v53;
        else
          v65 = v45 + 3;
        v66 = (v50 + (v65 + v49 - v45 - 3) / 3uLL) & 0xFFFFFFFFFFFFFFF0;
        v67 = (float *)&v186[4 * v45];
        v68 = v45;
        do
        {
          v69 = (const char *)(v16 + v68);
          *(int8x16x3_t *)(&v12 - 1) = vld3q_s8(v69);
          v194.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v70, (int8x16_t)xmmword_1003BCAC0)), v29);
          v189.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v70, (int8x16_t)xmmword_1003BCA90)), v29);
          v189.val[1] = vmlaq_f32((float32x4_t)a11, (float32x4_t)a10, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_1003BCA90)));
          v189.val[2] = vmlaq_f32(v64, v63, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v13, (int8x16_t)xmmword_1003BCA90)));
          v190.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v70, (int8x16_t)xmmword_1003BCAB0)), v29);
          v71 = v67;
          vst3q_f32(v71, v189);
          v71 += 12;
          v192.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v70, (int8x16_t)xmmword_1003BCAA0)), v29);
          v192.val[1] = vmlaq_f32((float32x4_t)a11, (float32x4_t)a10, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_1003BCAA0)));
          v192.val[2] = vmlaq_f32(v64, v63, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v13, (int8x16_t)xmmword_1003BCAA0)));
          vst3q_f32(v71, v192);
          v190.val[1] = vmlaq_f32((float32x4_t)a11, (float32x4_t)a10, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_1003BCAB0)));
          v190.val[2] = vmlaq_f32(v64, v63, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v13, (int8x16_t)xmmword_1003BCAB0)));
          v72 = v67 + 24;
          vst3q_f32(v72, v190);
          v194.val[1] = vmlaq_f32((float32x4_t)a11, (float32x4_t)a10, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_1003BCAC0)));
          v11 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v13, (int8x16_t)xmmword_1003BCAC0));
          v194.val[2] = vmlaq_f32(v64, v63, v11);
          v73 = v67 + 36;
          vst3q_f32(v73, v194);
          v68 += 48;
          v67 += 48;
          v66 -= 16;
        }
        while (v66);
        if (v51 == v54)
          goto LABEL_50;
        if ((v51 & 8) == 0)
        {
          v52 = 3 * v54 + v45;
LABEL_48:
          v74 = (float *)&v186[4 * v52 + 4];
          do
          {
            a10.i8[0] = *(_BYTE *)(v16 + v52);
            *(float *)&v75 = (float)a10.u32[0];
            v76 = v29 * *(float *)&v75;
            LOBYTE(v75) = *(_BYTE *)(v16 + v52 + 1);
            *(float *)a10.i32 = *(float *)a8.i32 + (float)((float)v75 * *(float *)a6.i32);
            a11.i8[0] = *(_BYTE *)(v16 + v52 + 2);
            *(float *)a11.i32 = a9.f32[0] + (float)((float)a11.u32[0] * *(float *)a7.i32);
            *(v74 - 1) = v76;
            *v74 = *(float *)a10.i32;
            v74[1] = *(float *)a11.i32;
            v52 += 3;
            v74 += 3;
          }
          while (v52 < v184);
          goto LABEL_50;
        }
      }
      else
      {
        v54 = 0;
      }
      v52 = 3 * (v51 & 0x7FFFFFFFFFFFFFF8) + v45;
      a10 = vdupq_lane_s32(*(int32x2_t *)a6.i8, 0);
      a11 = vdupq_lane_s32(*(int32x2_t *)a8.i8, 0);
      v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.i8, 0);
      v56 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0);
      if (v47 <= v53)
        v47 = v53;
      v57 = v54 - ((v50 + (v47 + v49 - v45 - 3) / 3uLL) & 0xFFFFFFFFFFFFFFF8);
      v58 = 3 * v54 + v45;
      v59 = (float *)&v186[12 * v54 + 4 * v45];
      do
      {
        v60 = (const char *)(v16 + v58);
        *(int8x8x3_t *)v11.f32 = vld3_s8(v60);
        v191.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v11, (int8x16_t)xmmword_1003BCAA0)), v29);
        v191.val[1] = vmlaq_f32((float32x4_t)a11, (float32x4_t)a10, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_1003BCAA0)));
        v191.val[2] = vmlaq_f32(v56, v55, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v13, (int8x16_t)xmmword_1003BCAA0)));
        v193.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v11, (int8x16_t)xmmword_1003BCA90)), v29);
        v193.val[1] = vmlaq_f32((float32x4_t)a11, (float32x4_t)a10, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_1003BCA90)));
        v11 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v13, (int8x16_t)xmmword_1003BCA90));
        v193.val[2] = vmlaq_f32(v56, v55, v11);
        v61 = v59 + 24;
        vst3q_f32(v59, v193);
        v62 = v59 + 12;
        vst3q_f32(v62, v191);
        v58 += 24;
        v59 = v61;
        v57 += 8;
      }
      while (v57);
      if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_48;
LABEL_50:
      sub_1002D13D8((uint64_t)(a1 + 1), (uint64_t)v186, (uint64_t)v186, v28);
      v181 = v22;
      if (v184 >= 17)
      {
        v77 = 0;
        v78 = (float32x4_t *)&v187;
        do
        {
          v79 = v78[-2];
          v80 = v78[-1];
          v81 = *v78;
          v82 = v78[1];
          v83 = atomic_load((unsigned __int8 *)qword_10048AA00);
          if ((v83 & 1) == 0)
          {
            v163 = *v78;
            v171 = v78[1];
            v147 = v78[-2];
            v155 = v78[-1];
            v100 = __cxa_guard_acquire(qword_10048AA00);
            v79 = v147;
            v80 = v155;
            v81 = v163;
            v82 = v171;
            if (v100)
            {
              *(_QWORD *)&v101 = 0x8000000080000000;
              *((_QWORD *)&v101 + 1) = 0x8000000080000000;
              xmmword_10048A9F0 = v101;
              __cxa_guard_release(qword_10048AA00);
              v79 = v147;
              v80 = v155;
              v81 = v163;
              v82 = v171;
            }
          }
          v84 = atomic_load((unsigned __int8 *)qword_10048AA20);
          if ((v84 & 1) == 0)
          {
            v164 = v81;
            v172 = v82;
            v148 = v79;
            v156 = v80;
            v102 = __cxa_guard_acquire(qword_10048AA20);
            v79 = v148;
            v80 = v156;
            v81 = v164;
            v82 = v172;
            if (v102)
            {
              *(_QWORD *)&v103 = 0x3F0000003F000000;
              *((_QWORD *)&v103 + 1) = 0x3F0000003F000000;
              xmmword_10048AA10 = v103;
              __cxa_guard_release(qword_10048AA20);
              v79 = v148;
              v80 = v156;
              v81 = v164;
              v82 = v172;
            }
          }
          a11 = (int32x4_t)xmmword_10048AA10;
          v85 = (int8x16_t)xmmword_10048A9F0;
          v86 = atomic_load((unsigned __int8 *)qword_10048AA00);
          if ((v86 & 1) == 0)
          {
            v165 = v81;
            v173 = v82;
            v149 = v79;
            v157 = v80;
            v135 = xmmword_10048A9F0;
            v141 = xmmword_10048AA10;
            v104 = __cxa_guard_acquire(qword_10048AA00);
            v85 = (int8x16_t)v135;
            a11 = (int32x4_t)v141;
            v79 = v149;
            v80 = v157;
            v81 = v165;
            v82 = v173;
            if (v104)
            {
              *(_QWORD *)&v105 = 0x8000000080000000;
              *((_QWORD *)&v105 + 1) = 0x8000000080000000;
              xmmword_10048A9F0 = v105;
              __cxa_guard_release(qword_10048AA00);
              v85 = (int8x16_t)v135;
              a11 = (int32x4_t)v141;
              v79 = v149;
              v80 = v157;
              v81 = v165;
              v82 = v173;
            }
          }
          v87 = atomic_load((unsigned __int8 *)qword_10048AA20);
          if ((v87 & 1) == 0)
          {
            v166 = v81;
            v174 = v82;
            v150 = v79;
            v158 = v80;
            v136 = v85;
            v142 = a11;
            v106 = __cxa_guard_acquire(qword_10048AA20);
            v85 = v136;
            a11 = v142;
            v79 = v150;
            v80 = v158;
            v81 = v166;
            v82 = v174;
            if (v106)
            {
              *(_QWORD *)&v107 = 0x3F0000003F000000;
              *((_QWORD *)&v107 + 1) = 0x3F0000003F000000;
              xmmword_10048AA10 = v107;
              __cxa_guard_release(qword_10048AA20);
              v85 = v136;
              a11 = v142;
              v79 = v150;
              v80 = v158;
              v81 = v166;
              v82 = v174;
            }
          }
          v88 = (int8x16_t)xmmword_10048AA10;
          v89 = (int8x16_t)xmmword_10048A9F0;
          v90 = atomic_load((unsigned __int8 *)qword_10048AA00);
          if ((v90 & 1) == 0)
          {
            v167 = v81;
            v175 = v82;
            v151 = v79;
            v159 = v80;
            v137 = v85;
            v143 = a11;
            v127 = xmmword_10048A9F0;
            v131 = xmmword_10048AA10;
            v108 = __cxa_guard_acquire(qword_10048AA00);
            v89 = (int8x16_t)v127;
            v88 = (int8x16_t)v131;
            v85 = v137;
            a11 = v143;
            v79 = v151;
            v80 = v159;
            v81 = v167;
            v82 = v175;
            if (v108)
            {
              *(_QWORD *)&v109 = 0x8000000080000000;
              *((_QWORD *)&v109 + 1) = 0x8000000080000000;
              xmmword_10048A9F0 = v109;
              __cxa_guard_release(qword_10048AA00);
              v89 = (int8x16_t)v127;
              v88 = (int8x16_t)v131;
              v85 = v137;
              a11 = v143;
              v79 = v151;
              v80 = v159;
              v81 = v167;
              v82 = v175;
            }
          }
          v91 = atomic_load((unsigned __int8 *)qword_10048AA20);
          if ((v91 & 1) == 0)
          {
            v168 = v81;
            v176 = v82;
            v152 = v79;
            v160 = v80;
            v138 = v85;
            v144 = a11;
            v128 = v89;
            v132 = v88;
            v110 = __cxa_guard_acquire(qword_10048AA20);
            v89 = v128;
            v88 = v132;
            v85 = v138;
            a11 = v144;
            v79 = v152;
            v80 = v160;
            v81 = v168;
            v82 = v176;
            if (v110)
            {
              *(_QWORD *)&v111 = 0x3F0000003F000000;
              *((_QWORD *)&v111 + 1) = 0x3F0000003F000000;
              xmmword_10048AA10 = v111;
              __cxa_guard_release(qword_10048AA20);
              v89 = v128;
              v88 = v132;
              v85 = v138;
              a11 = v144;
              v79 = v152;
              v80 = v160;
              v81 = v168;
              v82 = v176;
            }
          }
          v11 = (float32x4_t)xmmword_10048AA10;
          v12 = (float32x4_t)xmmword_10048A9F0;
          v92 = atomic_load((unsigned __int8 *)qword_10048AA00);
          if ((v92 & 1) == 0)
          {
            v169 = v81;
            v177 = v82;
            v153 = v79;
            v161 = v80;
            v139 = v85;
            v145 = a11;
            v129 = v89;
            v133 = v88;
            v123 = xmmword_10048A9F0;
            v125 = xmmword_10048AA10;
            v112 = __cxa_guard_acquire(qword_10048AA00);
            v12 = (float32x4_t)v123;
            v11 = (float32x4_t)v125;
            v89 = v129;
            v88 = v133;
            v85 = v139;
            a11 = v145;
            v79 = v153;
            v80 = v161;
            v81 = v169;
            v82 = v177;
            if (v112)
            {
              *(_QWORD *)&v113 = 0x8000000080000000;
              *((_QWORD *)&v113 + 1) = 0x8000000080000000;
              xmmword_10048A9F0 = v113;
              __cxa_guard_release(qword_10048AA00);
              v12 = (float32x4_t)v123;
              v11 = (float32x4_t)v125;
              v89 = v129;
              v88 = v133;
              v85 = v139;
              a11 = v145;
              v79 = v153;
              v80 = v161;
              v81 = v169;
              v82 = v177;
            }
          }
          v93 = atomic_load((unsigned __int8 *)qword_10048AA20);
          if ((v93 & 1) == 0)
          {
            v170 = v81;
            v178 = v82;
            v154 = v79;
            v162 = v80;
            v140 = v85;
            v146 = a11;
            v130 = v89;
            v134 = v88;
            v124 = v12;
            v126 = v11;
            v114 = __cxa_guard_acquire(qword_10048AA20);
            v12 = v124;
            v11 = v126;
            v89 = v130;
            v88 = v134;
            v85 = v140;
            a11 = v146;
            v79 = v154;
            v80 = v162;
            v81 = v170;
            v82 = v178;
            if (v114)
            {
              *(_QWORD *)&v115 = 0x3F0000003F000000;
              *((_QWORD *)&v115 + 1) = 0x3F0000003F000000;
              xmmword_10048AA10 = v115;
              __cxa_guard_release(qword_10048AA20);
              v12 = v124;
              v11 = v126;
              v89 = v130;
              v88 = v134;
              v85 = v140;
              a11 = v146;
              v79 = v154;
              v80 = v162;
              v81 = v170;
              v82 = v178;
            }
          }
          v94 = (float32x4_t)vdupq_n_s32(0x437F0000u);
          v95 = vmulq_f32(v79, v94);
          v96 = vcvtq_s32_f32(vaddq_f32(v95, (float32x4_t)vorrq_s8(vandq_s8(v85, (int8x16_t)v95), (int8x16_t)a11)));
          v97 = vmulq_f32(v80, v94);
          v98 = vmulq_f32(v81, v94);
          a8 = vcvtq_s32_f32(vaddq_f32(v98, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v12, (int8x16_t)v98), (int8x16_t)v11)));
          v99 = vmulq_f32(v82, v94);
          a10 = (int32x4_t)vandq_s8((int8x16_t)xmmword_10048A9F0, (int8x16_t)v99);
          a9 = (float32x4_t)vorrq_s8((int8x16_t)a10, (int8x16_t)xmmword_10048AA10);
          a6 = (uint16x8_t)vqmovn_high_s32(vqmovn_s32(v96), vcvtq_s32_f32(vaddq_f32(v97, (float32x4_t)vorrq_s8(vandq_s8(v89, (int8x16_t)v97), v88))));
          a7 = (uint16x8_t)vqmovn_high_s32(vqmovn_s32(a8), vcvtq_s32_f32(vaddq_f32(v99, a9)));
          *(uint8x16_t *)&v15[v77] = vqmovn_high_u16(vqmovn_u16(a6), a7);
          v77 += 16;
          v78 += 4;
        }
        while (v184 - 16 > (int)v77);
        v15 += v77;
        v14 = a4;
        v18 = v179;
        if ((int)v77 >= v184)
          goto LABEL_8;
LABEL_81:
        v116 = (float *)&v186[4 * v77 + 4];
        do
        {
          v117 = rintf(*(v116 - 1) * 255.0);
          v118 = (uint64_t)v117 & ~((int)(uint64_t)v117 >> 31);
          if (v118 >= 255)
            LOBYTE(v118) = -1;
          *v15 = v118;
          v119 = rintf(*v116 * 255.0);
          v120 = (uint64_t)v119 & ~((int)(uint64_t)v119 >> 31);
          if (v120 >= 255)
            LOBYTE(v120) = -1;
          v15[1] = v120;
          v121 = rintf(v116[1] * 255.0);
          v122 = (uint64_t)v121 & ~((int)(uint64_t)v121 >> 31);
          if (v122 >= 255)
            LOBYTE(v122) = -1;
          v15[2] = v122;
          if ((_DWORD)v18 == 4)
            v15[3] = -1;
          v15 += v18;
          v116 += 3;
          LODWORD(v77) = v77 + 3;
        }
        while (v184 > (int)v77);
        goto LABEL_8;
      }
      LODWORD(v77) = 0;
      if (v184 > 0)
        goto LABEL_81;
LABEL_8:
      v24 = v182;
      v23 = v183 + 256;
      v16 += 768;
      v22 = v181 + 1;
    }
    while (v183 + 256 < v14);
  }
}

void sub_1002D0DA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10048BAB8);
  _Unwind_Resume(a1);
}

void sub_1002D0DBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10048BAA8);
  _Unwind_Resume(a1);
}

void sub_1002D0DD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10048BA98);
  _Unwind_Resume(a1);
}

int *sub_1002D0DF0(int *result, uint64_t a2, char *a3, int a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  const float *v27;
  const float *v28;
  const float *v29;
  const float *v30;
  const float *v31;
  const float *v32;
  const float *v33;
  const float *v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  const float *v42;
  int32x4_t v43;
  int32x4_t v44;
  uint64_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  uint64_t v53;
  __int32 v54;
  int32x4_t v55;
  unsigned int v56;
  int32x4_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  uint8x16_t v60;
  uint8x16_t v61;
  uint8x16_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint32x4_t v93[4];
  uint32x4_t v94[4];
  uint32x4_t v95[4];
  _OWORD v96[4];
  _OWORD v97[4];
  _OWORD v98[12];
  _OWORD v99[4];
  int8x16x3_t v100;

  v5 = *result;
  v6 = 3 * a4;
  if (a4 < 17)
  {
    LODWORD(v7) = 0;
    if (v6 <= 0)
      return result;
    goto LABEL_18;
  }
  v7 = 0;
  v8 = qword_1004AE5E0;
  v9 = *(_QWORD *)algn_1004AE5E8;
  v10 = qword_1004AE5F0;
  v92 = *result;
  v91 = 16 * v5;
  v90 = v6 - 48;
  v11.i64[0] = 0x200000002000;
  v11.i64[1] = 0x200000002000;
  v12.i64[0] = 0xD0000000DLL;
  v12.i64[1] = 0xD0000000DLL;
  v13.i64[0] = 0xF0000000FLL;
  v13.i64[1] = 0xF0000000FLL;
  *(_QWORD *)&v14 = -1;
  *((_QWORD *)&v14 + 1) = -1;
  do
  {
    v15 = 0;
    v16 = a2;
    v17 = (const char *)(a2 + v7);
    v100 = vld3q_s8(v17);
    v98[0] = v100.val[0];
    v97[0] = v100.val[1];
    v96[0] = v100.val[2];
    v18 = (int *)v99;
    do
    {
      v19 = *((unsigned __int8 *)v96 + v15) | (*((unsigned __int8 *)v98 + v15) << 8);
      v20 = *(unsigned __int16 *)&byte_1004AE500[4 * *((unsigned __int8 *)v98 + v15) + 1576];
      v21 = *(int *)(v9 + 4 * v19)
          * (uint64_t)*(int *)(v8 + 4 * (*((unsigned __int8 *)v97 + v15) | (*((unsigned __int8 *)v98 + v15) << 8)));
      v22 = ((((*(_QWORD *)(v10 + 8 * v19) - 85 * v21) >> 14) + 0x3FFFFEC14000) * v20) >> 14;
      v23 = (int)((v21 >> 14) * v20) >> 14;
      v24 = (int)v22 / 256 + (int)v22 / 0x10000;
      if (v23 >= 0x8000)
        v23 = 0x8000;
      v25 = v23 & ~(v23 >> 31);
      if (v24 >= 0x8000)
        v24 = 0x8000;
      *(v18 - 32) = v25;
      *(v18 - 16) = v20;
      *v18++ = v24 & ~(v24 >> 31);
      ++v15;
    }
    while (v15 != 16);
    v26 = 0;
    v98[0] = v98[4];
    v98[1] = v98[5];
    v98[2] = v98[6];
    v98[3] = v98[7];
    v97[0] = v98[8];
    v97[1] = v98[9];
    v97[2] = v98[10];
    v97[3] = v98[11];
    v96[2] = v99[2];
    v96[3] = v99[3];
    v96[0] = v99[0];
    v96[1] = v99[1];
    v27 = (const float *)(result + 1);
    v28 = (const float *)(result + 2);
    v29 = (const float *)(result + 3);
    v30 = (const float *)(result + 4);
    v31 = (const float *)(result + 5);
    v32 = (const float *)(result + 6);
    v33 = (const float *)(result + 7);
    v34 = (const float *)(result + 8);
    v35 = (int32x4_t)vld1q_dup_f32(v28);
    v36 = (int32x4_t)vld1q_dup_f32(v30);
    v37 = (int32x4_t)vld1q_dup_f32(v32);
    v38 = (int32x4_t)vld1q_dup_f32(v34);
    v39 = (int32x4_t)vld1q_dup_f32(v29);
    v40 = (int32x4_t)vld1q_dup_f32(v33);
    v41 = (int32x4_t)vld1q_dup_f32(v27);
    v42 = (const float *)(result + 9);
    v43 = (int32x4_t)vld1q_dup_f32(v31);
    v44 = (int32x4_t)vld1q_dup_f32(v42);
    v45 = *((_QWORD *)result + 5);
    do
    {
      v46 = (int32x4_t)v98[v26];
      v47 = (int32x4_t)v97[v26];
      v48 = (int32x4_t)v96[v26];
      v49 = vshlq_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v47, v35), v46, v41), v48, v39), v11), v12);
      v50 = vshlq_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v47, v43), v46, v36), v48, v37), v11), v12);
      v51 = vshlq_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v47, v38), v46, v40), v48, v44), v11), v12);
      v52 = vmaxq_s32(vminq_s32(v49, v13), (int32x4_t)0);
      v53 = v52.u32[1];
      v54 = *(unsigned __int16 *)(v45 + 2 * v52.u32[0]);
      v52.i16[1] = v52.i16[5];
      v52.i16[0] = *(_WORD *)(v45 + 2 * v52.u32[2]);
      v52.i32[1] = *(unsigned __int16 *)(v45 + 2 * v52.u32[3]);
      v49.i32[0] = v54;
      v49.i32[1] = *(unsigned __int16 *)(v45 + 2 * v53);
      v49.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v52.i8, (int8x8_t)0xFFFF0000FFFFLL);
      v55 = vmaxq_s32(vminq_s32(v50, v13), (int32x4_t)0);
      v95[v26] = (uint32x4_t)v49;
      v56 = *(unsigned __int16 *)(v45 + 2 * v55.u32[0]);
      LODWORD(v53) = *(unsigned __int16 *)(v45 + 2 * v55.u32[1]);
      v55.i16[1] = v55.i16[5];
      v55.i16[0] = *(_WORD *)(v45 + 2 * v55.u32[2]);
      v55.i32[1] = *(unsigned __int16 *)(v45 + 2 * v55.u32[3]);
      v48.i64[0] = __PAIR64__(v53, v56);
      v48.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v55.i8, (int8x8_t)0xFFFF0000FFFFLL);
      v94[v26] = (uint32x4_t)v48;
      v57 = vmaxq_s32(vminq_s32(v51, v13), (int32x4_t)0);
      v58.i64[0] = v57.u32[2];
      v58.i64[1] = v57.u32[3];
      v59 = v58;
      v58.i64[0] = v57.u32[0];
      v58.i64[1] = v57.u32[1];
      v57.i16[0] = *(_WORD *)(v45 + 2 * v59.i64[0]);
      v57.i32[1] = *(unsigned __int16 *)(v45 + 2 * v59.i64[1]);
      v59.i32[0] = *(unsigned __int16 *)(v45 + 2 * v58.i64[0]);
      v59.i32[1] = *(unsigned __int16 *)(v45 + 2 * v58.i64[1]);
      v59.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v57.i8, (int8x8_t)0xFFFF0000FFFFLL);
      v93[v26++] = v59;
    }
    while (v26 != 4);
    v60 = vqmovn_high_u16(vqmovn_u16(vqmovn_high_u32(vqmovn_u32(v93[0]), v93[1])), vqmovn_high_u32(vqmovn_u32(v93[2]), v93[3]));
    v61 = vqmovn_high_u16(vqmovn_u16(vqmovn_high_u32(vqmovn_u32(v94[0]), v94[1])), vqmovn_high_u32(vqmovn_u32(v94[2]), v94[3]));
    v62 = vqmovn_high_u16(vqmovn_u16(vqmovn_high_u32(vqmovn_u32(v95[0]), v95[1])), vqmovn_high_u32(vqmovn_u32(v95[2]), v95[3]));
    if ((_DWORD)v92 == 4)
      vst4q_s8(a3, *(int8x16x4_t *)(&v14 - 3));
    else
      vst3q_s8(a3, *(int8x16x3_t *)v60.i8);
    a2 = v16;
    v7 += 48;
    a3 += v91;
  }
  while (v7 < v90);
  v5 = v92;
  v6 = 3 * a4;
  if ((int)v7 < 3 * a4)
  {
LABEL_18:
    v63 = qword_1004AE5E0;
    v64 = *(_QWORD *)algn_1004AE5E8;
    v65 = a3 + 1;
    v66 = qword_1004AE5F0;
    v7 = v7;
    do
    {
      v67 = *(unsigned __int16 *)&byte_1004AE500[4 * *(unsigned __int8 *)(a2 + v7) + 1576];
      v68 = *(unsigned __int8 *)(a2 + v7 + 2) | (*(unsigned __int8 *)(a2 + v7) << 8);
      v69 = *(int *)(v64 + 4 * v68)
          * (uint64_t)*(int *)(v63 + 4 * (*(unsigned __int8 *)(a2 + v7 + 1) | (*(unsigned __int8 *)(a2 + v7) << 8)));
      v70 = v69 + 0x3FFF;
      if (v69 >= 0)
        v70 = *(int *)(v64 + 4 * v68)
            * (uint64_t)*(int *)(v63 + 4 * (*(unsigned __int8 *)(a2 + v7 + 1) | (*(unsigned __int8 *)(a2 + v7) << 8)));
      v71 = (int)((v70 >> 14) * v67) / 0x4000;
      v72 = *(_QWORD *)(v66 + 8 * v68) - 85 * v69;
      v73 = ((v72 / 0x4000 - 20889600) * v67 + ((v72 / 0x4000 - 20889600) * v67 < 0 ? 0x3FFFuLL : 0)) >> 14;
      v74 = (int)v73 / 256 + (int)v73 / 0x10000;
      if (v71 >= 0x8000)
        v71 = 0x8000;
      v75 = v71 & ~(v71 >> 31);
      if (v74 >= 0x8000)
        v74 = 0x8000;
      v76 = v74 & ~(v74 >> 31);
      v77 = (v75 * result[1] + result[2] * (int)v67 + v76 * result[3] + 0x2000) >> 14;
      v78 = (v75 * result[4] + result[5] * (int)v67 + v76 * result[6] + 0x2000) >> 14;
      v79 = (result[8] * (int)v67 + result[7] * v75 + v76 * result[9] + 0x2000) >> 14;
      if (v77 >= 4095)
        v80 = 4095;
      else
        v80 = v77;
      v81 = v80 & ~(v80 >> 31);
      if (v78 >= 4095)
        v82 = 4095;
      else
        v82 = v78;
      v83 = v82 & ~(v82 >> 31);
      if (v79 >= 4095)
        v79 = 4095;
      v84 = *((_QWORD *)result + 5);
      v85 = *(unsigned __int16 *)(v84 + 2 * v81);
      v86 = *(unsigned __int16 *)(v84 + 2 * v83);
      v87 = *(unsigned __int16 *)(v84 + 2 * (v79 & ~(v79 >> 31)));
      if (v87 >= 255)
        LOBYTE(v87) = -1;
      *(v65 - 1) = v87;
      if (v86 >= 255)
        v88 = -1;
      else
        v88 = v86;
      *v65 = v88;
      if (v85 >= 255)
        v89 = -1;
      else
        v89 = v85;
      v65[1] = v89;
      if ((_DWORD)v5 == 4)
        v65[2] = -1;
      v7 += 3;
      v65 += v5;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t sub_1002D13D8(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;

  if (*(_BYTE *)(result + 48))
    v4 = qword_1004AE5B0;
  else
    v4 = 0;
  if (a4 >= 1)
  {
    v5 = 0;
    v6 = *(float *)(result + 4);
    v7 = *(float *)(result + 8);
    v8 = *(float *)(result + 12);
    v9 = *(float *)(result + 16);
    v10 = *(float *)(result + 20);
    v11 = *(float *)(result + 24);
    v12 = *(float *)(result + 28);
    v13 = *(float *)(result + 32);
    v14 = *(int *)result;
    v15 = 3 * a4;
    v16 = a3 + 8;
    v17 = (float *)(a2 + 4);
    v18 = *(float *)(result + 36);
    v19 = *(float *)(result + 40);
    v20 = *(float *)(result + 44);
    result = 1023;
    do
    {
      v21 = *(v17 - 1);
      v22 = v21 * 0.0011071;
      if (v21 >= 8.0)
        v22 = (float)((float)(v21 + 16.0) * 0.0086207)
            * (float)((float)((float)(v21 + 16.0) * 0.0086207) * (float)((float)(v21 + 16.0) * 0.0086207));
      v23 = (float)(*v17 + (float)(v21 * v19)) * 3.0;
      v24 = 0.25 / (float)(v17[1] + (float)(v21 * v20));
      if (v24 > 0.25)
        v24 = 0.25;
      if (v24 < -0.25)
        v24 = -0.25;
      v25 = v24 * (float)(v23 * (float)(v22 * 3.0));
      v26 = (float)((float)((float)-(float)(v23 - (float)(v21 * 156.0)) * v24) + -5.0) * v22;
      v27 = (float)((float)(v7 * v22) + (float)(v25 * v6)) + (float)(v26 * v8);
      v28 = (float)((float)(v10 * v22) + (float)(v25 * v9)) + (float)(v26 * v11);
      v29 = (float)((float)(v13 * v22) + (float)(v25 * v12)) + (float)(v26 * v18);
      if (v27 >= 0.0)
        v30 = v27;
      else
        v30 = 0.0;
      if (v30 > 1.0)
        v30 = 1.0;
      if (v28 >= 0.0)
        v31 = v28;
      else
        v31 = 0.0;
      if (v31 > 1.0)
        v31 = 1.0;
      if (v29 >= 0.0)
        v32 = v29;
      else
        v32 = 0.0;
      if (v32 > 1.0)
        v32 = 1.0;
      if (v4)
      {
        v33 = vcvts_n_s32_f32(v30, 0xAuLL);
        v34 = v33 & ~(v33 >> 31);
        if (v34 >= 0x3FF)
          v34 = 1023;
        v30 = *(float *)(v4 + 4 * (4 * v34))
            + (float)((float)(*(float *)(v4 + 4 * (4 * v34) + 4)
                            + (float)((float)(*(float *)(v4 + 4 * (4 * v34) + 8)
                                            + (float)(*(float *)(v4 + 4 * (4 * v34) + 12)
                                                    * (float)((float)(v30 * 1024.0) - (float)v34)))
                                    * (float)((float)(v30 * 1024.0) - (float)v34)))
                    * (float)((float)(v30 * 1024.0) - (float)v34));
        v35 = vcvts_n_s32_f32(v31, 0xAuLL);
        v36 = v35 & ~(v35 >> 31);
        if (v36 >= 0x3FF)
          v36 = 1023;
        v31 = *(float *)(v4 + 4 * (4 * v36))
            + (float)((float)(*(float *)(v4 + 4 * (4 * v36) + 4)
                            + (float)((float)(*(float *)(v4 + 4 * (4 * v36) + 8)
                                            + (float)(*(float *)(v4 + 4 * (4 * v36) + 12)
                                                    * (float)((float)(v31 * 1024.0) - (float)v36)))
                                    * (float)((float)(v31 * 1024.0) - (float)v36)))
                    * (float)((float)(v31 * 1024.0) - (float)v36));
        v37 = vcvts_n_s32_f32(v32, 0xAuLL);
        v38 = v37 & ~(v37 >> 31);
        if (v38 >= 0x3FF)
          v38 = 1023;
        v32 = *(float *)(v4 + 4 * (4 * v38))
            + (float)((float)(*(float *)(v4 + 4 * (4 * v38) + 4)
                            + (float)((float)(*(float *)(v4 + 4 * (4 * v38) + 8)
                                            + (float)(*(float *)(v4 + 4 * (4 * v38) + 12)
                                                    * (float)((float)(v32 * 1024.0) - (float)v38)))
                                    * (float)((float)(v32 * 1024.0) - (float)v38)))
                    * (float)((float)(v32 * 1024.0) - (float)v38));
      }
      *(float *)(v16 - 8) = v30;
      *(float *)(v16 - 4) = v31;
      *(float *)v16 = v32;
      if ((_DWORD)v14 == 4)
        *(_DWORD *)(v16 + 4) = 1065353216;
      v5 += 3;
      v16 += 4 * v14;
      v17 += 3;
    }
    while (v5 < v15);
  }
  return result;
}

void sub_1002D1618(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002D163C(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_100451540);
  v4 = *a2;
  if (*a2 < a2[1])
  {
    v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) * v4;
    v6 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v4;
    do
    {
      sub_1002D13D8(*(_QWORD *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(_QWORD *)(a1 + 16);
      v5 += *(_QWORD *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8)
    sub_1002989D0(v7);
}

void sub_1002D16EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D1700(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int32x2_t v18;
  int v19;
  int32x2_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  __int32 v24;
  int v25;
  int32x2_t v26;
  int32x2_t v27;
  char v28;
  int32x2_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int32x2_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int32x2_t v37;

  v2 = 2 * *a2;
  v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      v5 = *(_QWORD *)(result + 48);
      v6 = *(_QWORD *)(result + 32) + v5 * v2;
      v7 = *(_QWORD *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          v9 = 0;
          v10 = *(_QWORD *)(result + 8);
          v11 = *(_QWORD *)(result + 16);
          v12 = (_BYTE *)(v10 + v11 * v8 + 2);
          v13 = (_BYTE *)(v10 + v11 * v2 + 3);
          v14 = v6 + 1 + v5;
          do
          {
            v15 = *(unsigned __int8 *)(v7 + v9) - 128;
            v16 = *(unsigned __int8 *)(v6 + v9);
            if (v16 <= 0x10)
              v16 = 16;
            v17 = 1220542 * v16 - 19528672;
            v18 = vmla_s32((int32x2_t)((0x80000 - 409993 * v15) | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v7 + 1 + v9) - 128), (int32x2_t)0x198937FFF2FDF4);
            v19 = 2116026 * v15 + 0x80000;
            v20 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v17), v18), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            *(v13 - 2) = v20.i8[0];
            v21 = ((int)(v17 + v19) >> 20) & ~((int)(v17 + v19) >> 31);
            *(v13 - 1) = v20.i8[4];
            if (v21 >= 255)
              LOBYTE(v21) = -1;
            *(v13 - 3) = v21;
            v22 = *(unsigned __int8 *)(v6 + 1 + v9);
            if (v22 <= 0x10)
              v22 = 16;
            v23 = 1220542 * v22 - 19528672;
            v24 = v18.i32[1];
            v25 = ((int)(v23 + v18.i32[1]) >> 20) & ~((int)(v23 + v18.i32[1]) >> 31);
            v26 = vdup_n_s32(v23);
            v27 = vdup_lane_s32(v18, 0);
            if (v25 >= 255)
              v28 = -1;
            else
              v28 = v25;
            v27.i32[0] = v19;
            v13[2] = v28;
            v29 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(v26, v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            *v13 = v29.i8[0];
            v13[1] = v29.i8[4];
            v30 = *(unsigned __int8 *)(v14 + v9 - 1);
            if (v30 <= 0x10)
              v30 = 16;
            v31 = 1220542 * v30 - 19528672;
            v32 = ((int)(v31 + v24) >> 20) & ~((int)(v31 + v24) >> 31);
            v33 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v31), v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            if (v32 >= 255)
              LOBYTE(v32) = -1;
            *v12 = v32;
            *(v12 - 2) = v33.i8[0];
            *(v12 - 1) = v33.i8[4];
            v34 = *(unsigned __int8 *)(v14 + v9);
            if (v34 <= 0x10)
              v34 = 16;
            v35 = 1220542 * v34 - 19528672;
            v36 = ((int)(v35 + v24) >> 20) & ~((int)(v35 + v24) >> 31);
            if (v36 >= 255)
              LOBYTE(v36) = -1;
            v12[3] = v36;
            v37 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v35), v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v12[1] = v37.i8[0];
            v12[2] = v37.i8[4];
            v9 += 2;
            v4 = *(int *)(result + 24);
            v12 += 6;
            v13 += 6;
          }
          while (v9 < v4);
          v5 = *(_QWORD *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_1002D196C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D1990(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int32x2_t v18;
  int v19;
  int32x2_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  __int32 v24;
  int v25;
  int32x2_t v26;
  int32x2_t v27;
  char v28;
  int32x2_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int32x2_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int32x2_t v37;

  v2 = 2 * *a2;
  v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      v5 = *(_QWORD *)(result + 48);
      v6 = *(_QWORD *)(result + 32) + v5 * v2;
      v7 = *(_QWORD *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          v9 = 0;
          v10 = v6 + v5;
          v11 = *(_QWORD *)(result + 8);
          v12 = *(_QWORD *)(result + 16);
          v13 = (_BYTE *)(v11 + v12 * v8 + 2);
          v14 = (_BYTE *)(v11 + v12 * v2 + 3);
          do
          {
            v15 = *(unsigned __int8 *)(v7 + v9 + 1) - 128;
            v16 = *(unsigned __int8 *)(v6 + v9);
            if (v16 <= 0x10)
              v16 = 16;
            v17 = 1220542 * v16 - 19528672;
            v18 = vmla_s32((int32x2_t)((0x80000 - 409993 * v15) | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v7 + v9) - 128), (int32x2_t)0x198937FFF2FDF4);
            v19 = 2116026 * v15 + 0x80000;
            v20 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v17), v18), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            *(v14 - 2) = v20.i8[0];
            v21 = ((int)(v17 + v19) >> 20) & ~((int)(v17 + v19) >> 31);
            *(v14 - 1) = v20.i8[4];
            if (v21 >= 255)
              LOBYTE(v21) = -1;
            *(v14 - 3) = v21;
            v22 = *(unsigned __int8 *)(v6 + v9 + 1);
            if (v22 <= 0x10)
              v22 = 16;
            v23 = 1220542 * v22 - 19528672;
            v24 = v18.i32[1];
            v25 = ((int)(v23 + v18.i32[1]) >> 20) & ~((int)(v23 + v18.i32[1]) >> 31);
            v26 = vdup_n_s32(v23);
            v27 = vdup_lane_s32(v18, 0);
            if (v25 >= 255)
              v28 = -1;
            else
              v28 = v25;
            v27.i32[0] = v19;
            v14[2] = v28;
            v29 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(v26, v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            *v14 = v29.i8[0];
            v14[1] = v29.i8[4];
            v30 = *(unsigned __int8 *)(v10 + v9);
            if (v30 <= 0x10)
              v30 = 16;
            v31 = 1220542 * v30 - 19528672;
            v32 = ((int)(v31 + v24) >> 20) & ~((int)(v31 + v24) >> 31);
            v33 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v31), v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            if (v32 >= 255)
              LOBYTE(v32) = -1;
            *v13 = v32;
            *(v13 - 2) = v33.i8[0];
            *(v13 - 1) = v33.i8[4];
            v34 = *(unsigned __int8 *)(v10 + v9 + 1);
            if (v34 <= 0x10)
              v34 = 16;
            v35 = 1220542 * v34 - 19528672;
            v36 = ((int)(v35 + v24) >> 20) & ~((int)(v35 + v24) >> 31);
            if (v36 >= 255)
              LOBYTE(v36) = -1;
            v13[3] = v36;
            v37 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v35), v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v13[1] = v37.i8[0];
            v13[2] = v37.i8[4];
            v9 += 2;
            v4 = *(int *)(result + 24);
            v13 += 6;
            v14 += 6;
          }
          while (v9 < v4);
          v5 = *(_QWORD *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_1002D1BEC(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D1C10(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  char v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;

  v2 = 2 * *a2;
  v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      v5 = *(_QWORD *)(result + 48);
      v6 = *(_QWORD *)(result + 32) + v5 * v2;
      v7 = *(_QWORD *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          v9 = 0;
          v10 = *(_QWORD *)(result + 16);
          v11 = *(_QWORD *)(result + 8) + 2;
          v12 = (_BYTE *)(v11 + v10 * v8);
          v13 = (_BYTE *)(v11 + v10 * v2);
          v14 = v6 + 1 + v5;
          do
          {
            v15 = *(unsigned __int8 *)(v7 + v9) - 128;
            v16 = *(unsigned __int8 *)(v7 + 1 + v9) - 128;
            v17 = 1673527 * v16 + 0x80000;
            v18 = -852492 * v16;
            v19 = 2116026 * v15 + 0x80000;
            v20 = v18 - 409993 * v15;
            v21 = *(unsigned __int8 *)(v6 + v9);
            if (v21 <= 0x10)
              v21 = 16;
            v22 = 1220542 * v21 - 19528672;
            v23 = v20 + 0x80000;
            v24 = ((v22 + v17) >> 20) & ~((v22 + v17) >> 31);
            if (v24 >= 255)
              LOBYTE(v24) = -1;
            *(v13 - 2) = v24;
            v25 = ((v22 + v23) >> 20) & ~((v22 + v23) >> 31);
            if (v25 >= 255)
              LOBYTE(v25) = -1;
            *(v13 - 1) = v25;
            v26 = ((v22 + v19) >> 20) & ~((v22 + v19) >> 31);
            if (v26 >= 255)
              LOBYTE(v26) = -1;
            *v13 = v26;
            v27 = *(unsigned __int8 *)(v6 + 1 + v9);
            if (v27 <= 0x10)
              v27 = 16;
            v28 = 1220542 * v27 - 19528672;
            v29 = ((v28 + v17) >> 20) & ~((v28 + v17) >> 31);
            if (v29 >= 255)
              LOBYTE(v29) = -1;
            v13[1] = v29;
            v30 = ((v28 + v23) >> 20) & ~((v28 + v23) >> 31);
            if (v30 >= 255)
              LOBYTE(v30) = -1;
            v13[2] = v30;
            v31 = ((v28 + v19) >> 20) & ~((v28 + v19) >> 31);
            if (v31 >= 255)
              LOBYTE(v31) = -1;
            v13[3] = v31;
            v32 = *(unsigned __int8 *)(v14 + v9 - 1);
            if (v32 <= 0x10)
              v32 = 16;
            v33 = 1220542 * v32 - 19528672;
            v34 = ((v33 + v17) >> 20) & ~((v33 + v17) >> 31);
            if (v34 >= 255)
              LOBYTE(v34) = -1;
            *(v12 - 2) = v34;
            if ((((v33 + v23) >> 20) & ~((v33 + v23) >> 31)) >= 255)
              v35 = -1;
            else
              v35 = ((v33 + v23) >> 20) & ~((v33 + v23) >> 31);
            v36 = ((v33 + v19) >> 20) & ~((v33 + v19) >> 31);
            *(v12 - 1) = v35;
            if (v36 >= 255)
              LOBYTE(v36) = -1;
            *v12 = v36;
            v37 = *(unsigned __int8 *)(v14 + v9);
            if (v37 <= 0x10)
              v37 = 16;
            v38 = 1220542 * v37 - 19528672;
            v39 = ((v38 + v17) >> 20) & ~((v38 + v17) >> 31);
            if (v39 >= 255)
              LOBYTE(v39) = -1;
            v12[1] = v39;
            v40 = ((v38 + v23) >> 20) & ~((v38 + v23) >> 31);
            if (v40 >= 255)
              LOBYTE(v40) = -1;
            v41 = ((v38 + v19) >> 20) & ~((v38 + v19) >> 31);
            if (v41 >= 255)
              LOBYTE(v41) = -1;
            v12[2] = v40;
            v12[3] = v41;
            v9 += 2;
            v4 = *(int *)(result + 24);
            v12 += 6;
            v13 += 6;
          }
          while (v9 < v4);
          v5 = *(_QWORD *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_1002D1EB0(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D1ED4(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  char v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;

  v2 = 2 * *a2;
  v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      v5 = *(_QWORD *)(result + 48);
      v6 = *(_QWORD *)(result + 32) + v5 * v2;
      v7 = *(_QWORD *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          v9 = 0;
          v10 = v6 + v5;
          v11 = *(_QWORD *)(result + 16);
          v12 = *(_QWORD *)(result + 8) + 2;
          v13 = (_BYTE *)(v12 + v11 * v8);
          v14 = (_BYTE *)(v12 + v11 * v2);
          do
          {
            v15 = *(unsigned __int8 *)(v7 + v9 + 1) - 128;
            v16 = *(unsigned __int8 *)(v7 + v9) - 128;
            v17 = 1673527 * v16 + 0x80000;
            v18 = -852492 * v16;
            v19 = 2116026 * v15 + 0x80000;
            v20 = v18 - 409993 * v15;
            v21 = *(unsigned __int8 *)(v6 + v9);
            if (v21 <= 0x10)
              v21 = 16;
            v22 = 1220542 * v21 - 19528672;
            v23 = v20 + 0x80000;
            v24 = ((v22 + v17) >> 20) & ~((v22 + v17) >> 31);
            if (v24 >= 255)
              LOBYTE(v24) = -1;
            *(v14 - 2) = v24;
            v25 = ((v22 + v23) >> 20) & ~((v22 + v23) >> 31);
            if (v25 >= 255)
              LOBYTE(v25) = -1;
            *(v14 - 1) = v25;
            v26 = ((v22 + v19) >> 20) & ~((v22 + v19) >> 31);
            if (v26 >= 255)
              LOBYTE(v26) = -1;
            *v14 = v26;
            v27 = *(unsigned __int8 *)(v6 + v9 + 1);
            if (v27 <= 0x10)
              v27 = 16;
            v28 = 1220542 * v27 - 19528672;
            v29 = ((v28 + v17) >> 20) & ~((v28 + v17) >> 31);
            if (v29 >= 255)
              LOBYTE(v29) = -1;
            v14[1] = v29;
            v30 = ((v28 + v23) >> 20) & ~((v28 + v23) >> 31);
            if (v30 >= 255)
              LOBYTE(v30) = -1;
            v14[2] = v30;
            v31 = ((v28 + v19) >> 20) & ~((v28 + v19) >> 31);
            if (v31 >= 255)
              LOBYTE(v31) = -1;
            v14[3] = v31;
            v32 = *(unsigned __int8 *)(v10 + v9);
            if (v32 <= 0x10)
              v32 = 16;
            v33 = 1220542 * v32 - 19528672;
            v34 = ((v33 + v17) >> 20) & ~((v33 + v17) >> 31);
            if (v34 >= 255)
              LOBYTE(v34) = -1;
            *(v13 - 2) = v34;
            if ((((v33 + v23) >> 20) & ~((v33 + v23) >> 31)) >= 255)
              v35 = -1;
            else
              v35 = ((v33 + v23) >> 20) & ~((v33 + v23) >> 31);
            v36 = ((v33 + v19) >> 20) & ~((v33 + v19) >> 31);
            *(v13 - 1) = v35;
            if (v36 >= 255)
              LOBYTE(v36) = -1;
            *v13 = v36;
            v37 = *(unsigned __int8 *)(v10 + v9 + 1);
            if (v37 <= 0x10)
              v37 = 16;
            v38 = 1220542 * v37 - 19528672;
            v39 = ((v38 + v17) >> 20) & ~((v38 + v17) >> 31);
            if (v39 >= 255)
              LOBYTE(v39) = -1;
            v13[1] = v39;
            v40 = ((v38 + v23) >> 20) & ~((v38 + v23) >> 31);
            if (v40 >= 255)
              LOBYTE(v40) = -1;
            v41 = ((v38 + v19) >> 20) & ~((v38 + v19) >> 31);
            if (v41 >= 255)
              LOBYTE(v41) = -1;
            v13[2] = v40;
            v13[3] = v41;
            v9 += 2;
            v4 = *(int *)(result + 24);
            v13 += 6;
            v14 += 6;
          }
          while (v9 < v4);
          v5 = *(_QWORD *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_1002D2164(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D2188(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int32x2_t v18;
  int v19;
  int32x2_t v20;
  _BYTE *v21;
  int v22;
  unsigned int v23;
  __int32 v24;
  unsigned int v25;
  int v26;
  int32x2_t v27;
  int32x2_t v28;
  char v29;
  int32x2_t v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  int32x2_t v34;
  char v35;
  int32x2_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int32x2_t v40;

  v2 = 2 * *a2;
  v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      v5 = *(_QWORD *)(result + 48);
      v6 = *(_QWORD *)(result + 32) + v5 * v2;
      v7 = *(_QWORD *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          v9 = 0;
          v10 = *(_QWORD *)(result + 8);
          v11 = *(_QWORD *)(result + 16);
          v12 = v11 * v2;
          v13 = v11 * v8;
          v14 = v6 + 1 + v5;
          do
          {
            v15 = *(unsigned __int8 *)(v7 + v9) - 128;
            v16 = *(unsigned __int8 *)(v6 + v9);
            if (v16 <= 0x10)
              v16 = 16;
            v17 = 1220542 * v16 - 19528672;
            v18 = vmla_s32((int32x2_t)((0x80000 - 409993 * v15) | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v7 + 1 + v9) - 128), (int32x2_t)0x198937FFF2FDF4);
            v19 = 2116026 * v15 + 0x80000;
            v20 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v17), v18), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v21 = (_BYTE *)(v10 + v12);
            *(_BYTE *)(v10 + v12 + 1) = v20.i8[0];
            v22 = ((int)(v17 + v19) >> 20) & ~((int)(v17 + v19) >> 31);
            if (v22 >= 255)
              LOBYTE(v22) = -1;
            *v21 = v22;
            v21[3] = -1;
            v21[2] = v20.i8[4];
            v23 = *(unsigned __int8 *)(v6 + 1 + v9);
            if (v23 <= 0x10)
              v23 = 16;
            v24 = v18.i32[1];
            v25 = 1220542 * v23 - 19528672;
            v26 = ((int)(v25 + v18.i32[1]) >> 20) & ~((int)(v25 + v18.i32[1]) >> 31);
            v27 = vdup_lane_s32(v18, 0);
            v27.i32[0] = v19;
            v28 = vadd_s32(vdup_n_s32(v25), v27);
            if (v26 >= 255)
              v29 = -1;
            else
              v29 = v26;
            v30 = vmin_s32(vmax_s32(vshr_n_s32(v28, 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v21[6] = v29;
            v21[4] = v30.i8[0];
            v21[5] = v30.i8[4];
            v21[7] = -1;
            v31 = (_BYTE *)(v10 + v13);
            v32 = *(unsigned __int8 *)(v14 + v9 - 1);
            if (v32 <= 0x10)
              v32 = 16;
            v33 = 1220542 * v32 - 19528672;
            v34 = vadd_s32(vdup_n_s32(v33), v27);
            if ((((int)(v33 + v24) >> 20) & ~((int)(v33 + v24) >> 31)) >= 255)
              v35 = -1;
            else
              v35 = ((int)(v33 + v24) >> 20) & ~((int)(v33 + v24) >> 31);
            v36 = vmin_s32(vmax_s32(vshr_n_s32(v34, 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v31[2] = v35;
            *v31 = v36.i8[0];
            v31[1] = v36.i8[4];
            v31[3] = -1;
            v37 = *(unsigned __int8 *)(v14 + v9);
            if (v37 <= 0x10)
              v37 = 16;
            v38 = 1220542 * v37 - 19528672;
            v39 = ((int)(v38 + v24) >> 20) & ~((int)(v38 + v24) >> 31);
            if (v39 >= 255)
              LOBYTE(v39) = -1;
            v31[6] = v39;
            v40 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v38), v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v31[5] = v40.i8[4];
            v31[4] = v40.i8[0];
            v31[7] = -1;
            v9 += 2;
            v4 = *(int *)(result + 24);
            v10 += 8;
          }
          while (v9 < v4);
          v5 = *(_QWORD *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_1002D2410(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D2434(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int32x2_t v18;
  int v19;
  int32x2_t v20;
  _BYTE *v21;
  int v22;
  unsigned int v23;
  __int32 v24;
  unsigned int v25;
  int v26;
  int32x2_t v27;
  int32x2_t v28;
  char v29;
  int32x2_t v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  int32x2_t v34;
  char v35;
  int32x2_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int32x2_t v40;

  v2 = 2 * *a2;
  v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      v5 = *(_QWORD *)(result + 48);
      v6 = *(_QWORD *)(result + 32) + v5 * v2;
      v7 = *(_QWORD *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          v9 = 0;
          v10 = v6 + v5;
          v11 = *(_QWORD *)(result + 8);
          v12 = *(_QWORD *)(result + 16);
          v13 = v12 * v2;
          v14 = v12 * v8;
          do
          {
            v15 = *(unsigned __int8 *)(v7 + v9 + 1) - 128;
            v16 = *(unsigned __int8 *)(v6 + v9);
            if (v16 <= 0x10)
              v16 = 16;
            v17 = 1220542 * v16 - 19528672;
            v18 = vmla_s32((int32x2_t)((0x80000 - 409993 * v15) | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v7 + v9) - 128), (int32x2_t)0x198937FFF2FDF4);
            v19 = 2116026 * v15 + 0x80000;
            v20 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v17), v18), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v21 = (_BYTE *)(v11 + v13);
            *(_BYTE *)(v11 + v13 + 1) = v20.i8[0];
            v22 = ((int)(v17 + v19) >> 20) & ~((int)(v17 + v19) >> 31);
            if (v22 >= 255)
              LOBYTE(v22) = -1;
            *v21 = v22;
            v21[3] = -1;
            v21[2] = v20.i8[4];
            v23 = *(unsigned __int8 *)(v6 + v9 + 1);
            if (v23 <= 0x10)
              v23 = 16;
            v24 = v18.i32[1];
            v25 = 1220542 * v23 - 19528672;
            v26 = ((int)(v25 + v18.i32[1]) >> 20) & ~((int)(v25 + v18.i32[1]) >> 31);
            v27 = vdup_lane_s32(v18, 0);
            v27.i32[0] = v19;
            v28 = vadd_s32(vdup_n_s32(v25), v27);
            if (v26 >= 255)
              v29 = -1;
            else
              v29 = v26;
            v30 = vmin_s32(vmax_s32(vshr_n_s32(v28, 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v21[6] = v29;
            v21[4] = v30.i8[0];
            v21[5] = v30.i8[4];
            v21[7] = -1;
            v31 = (_BYTE *)(v11 + v14);
            v32 = *(unsigned __int8 *)(v10 + v9);
            if (v32 <= 0x10)
              v32 = 16;
            v33 = 1220542 * v32 - 19528672;
            v34 = vadd_s32(vdup_n_s32(v33), v27);
            if ((((int)(v33 + v24) >> 20) & ~((int)(v33 + v24) >> 31)) >= 255)
              v35 = -1;
            else
              v35 = ((int)(v33 + v24) >> 20) & ~((int)(v33 + v24) >> 31);
            v36 = vmin_s32(vmax_s32(vshr_n_s32(v34, 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v31[2] = v35;
            *v31 = v36.i8[0];
            v31[1] = v36.i8[4];
            v31[3] = -1;
            v37 = *(unsigned __int8 *)(v10 + v9 + 1);
            if (v37 <= 0x10)
              v37 = 16;
            v38 = 1220542 * v37 - 19528672;
            v39 = ((int)(v38 + v24) >> 20) & ~((int)(v38 + v24) >> 31);
            if (v39 >= 255)
              LOBYTE(v39) = -1;
            v31[6] = v39;
            v40 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v38), v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v31[5] = v40.i8[4];
            v31[4] = v40.i8[0];
            v31[7] = -1;
            v9 += 2;
            v4 = *(int *)(result + 24);
            v11 += 8;
          }
          while (v9 < v4);
          v5 = *(_QWORD *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_1002D26AC(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D26D0(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;

  v2 = 2 * *a2;
  v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      v5 = *(_QWORD *)(result + 48);
      v6 = *(_QWORD *)(result + 32) + v5 * v2;
      v7 = *(_QWORD *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          v9 = 0;
          v10 = *(_QWORD *)(result + 16);
          v11 = *(_QWORD *)(result + 8) + 3;
          v12 = (_BYTE *)(v11 + v10 * v8);
          v13 = (_BYTE *)(v11 + v10 * v2);
          v14 = v6 + 1 + v5;
          do
          {
            v15 = *(unsigned __int8 *)(v7 + v9) - 128;
            v16 = *(unsigned __int8 *)(v7 + 1 + v9) - 128;
            v17 = 1673527 * v16 + 0x80000;
            v18 = -852492 * v16 - 409993 * v15;
            v19 = 2116026 * v15 + 0x80000;
            v20 = v18 + 0x80000;
            if (*(unsigned __int8 *)(v6 + v9) <= 0x10u)
              v21 = 16;
            else
              v21 = *(unsigned __int8 *)(v6 + v9);
            v22 = 1220542 * v21 - 19528672;
            v23 = ((v22 + v17) >> 20) & ~((v22 + v17) >> 31);
            if (v23 >= 255)
              LOBYTE(v23) = -1;
            *(v13 - 3) = v23;
            v24 = ((v22 + v20) >> 20) & ~((v22 + v20) >> 31);
            if (v24 >= 255)
              LOBYTE(v24) = -1;
            v25 = ((v22 + v19) >> 20) & ~((v22 + v19) >> 31);
            *(v13 - 2) = v24;
            if (v25 >= 255)
              LOBYTE(v25) = -1;
            *(v13 - 1) = v25;
            *v13 = -1;
            v26 = *(unsigned __int8 *)(v6 + 1 + v9);
            if (v26 <= 0x10)
              v26 = 16;
            v27 = 1220542 * v26 - 19528672;
            v28 = ((v27 + v17) >> 20) & ~((v27 + v17) >> 31);
            if (v28 >= 255)
              LOBYTE(v28) = -1;
            v13[1] = v28;
            v29 = ((v27 + v20) >> 20) & ~((v27 + v20) >> 31);
            if (v29 >= 255)
              LOBYTE(v29) = -1;
            v30 = ((v27 + v19) >> 20) & ~((v27 + v19) >> 31);
            if (v30 >= 255)
              LOBYTE(v30) = -1;
            v13[2] = v29;
            v13[3] = v30;
            v13[4] = -1;
            v31 = *(unsigned __int8 *)(v14 + v9 - 1);
            if (v31 <= 0x10)
              v31 = 16;
            v32 = 1220542 * v31 - 19528672;
            v33 = ((v32 + v17) >> 20) & ~((v32 + v17) >> 31);
            if (v33 >= 255)
              LOBYTE(v33) = -1;
            *(v12 - 3) = v33;
            v34 = ((v32 + v20) >> 20) & ~((v32 + v20) >> 31);
            if (v34 >= 255)
              LOBYTE(v34) = -1;
            v35 = ((v32 + v19) >> 20) & ~((v32 + v19) >> 31);
            if (v35 >= 255)
              LOBYTE(v35) = -1;
            *(v12 - 2) = v34;
            *(v12 - 1) = v35;
            *v12 = -1;
            v36 = *(unsigned __int8 *)(v14 + v9);
            if (v36 <= 0x10)
              v36 = 16;
            v37 = 1220542 * v36 - 19528672;
            v38 = ((v37 + v17) >> 20) & ~((v37 + v17) >> 31);
            if (v38 >= 255)
              LOBYTE(v38) = -1;
            v12[1] = v38;
            v39 = ((v37 + v20) >> 20) & ~((v37 + v20) >> 31);
            if (v39 >= 255)
              LOBYTE(v39) = -1;
            v12[2] = v39;
            v40 = ((v37 + v19) >> 20) & ~((v37 + v19) >> 31);
            if (v40 >= 255)
              LOBYTE(v40) = -1;
            v12[3] = v40;
            v12[4] = -1;
            v9 += 2;
            v4 = *(int *)(result + 24);
            v12 += 8;
            v13 += 8;
          }
          while (v9 < v4);
          v5 = *(_QWORD *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_1002D2978(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D299C(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;

  v2 = 2 * *a2;
  v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      v5 = *(_QWORD *)(result + 48);
      v6 = *(_QWORD *)(result + 32) + v5 * v2;
      v7 = *(_QWORD *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          v9 = 0;
          v10 = v6 + v5;
          v11 = *(_QWORD *)(result + 16);
          v12 = *(_QWORD *)(result + 8) + 3;
          v13 = (_BYTE *)(v12 + v11 * v8);
          v14 = (_BYTE *)(v12 + v11 * v2);
          do
          {
            v15 = *(unsigned __int8 *)(v7 + v9 + 1) - 128;
            v16 = *(unsigned __int8 *)(v7 + v9) - 128;
            v17 = 1673527 * v16 + 0x80000;
            v18 = -852492 * v16 - 409993 * v15;
            v19 = 2116026 * v15 + 0x80000;
            v20 = v18 + 0x80000;
            if (*(unsigned __int8 *)(v6 + v9) <= 0x10u)
              v21 = 16;
            else
              v21 = *(unsigned __int8 *)(v6 + v9);
            v22 = 1220542 * v21 - 19528672;
            v23 = ((v22 + v17) >> 20) & ~((v22 + v17) >> 31);
            if (v23 >= 255)
              LOBYTE(v23) = -1;
            *(v14 - 3) = v23;
            v24 = ((v22 + v20) >> 20) & ~((v22 + v20) >> 31);
            if (v24 >= 255)
              LOBYTE(v24) = -1;
            v25 = ((v22 + v19) >> 20) & ~((v22 + v19) >> 31);
            *(v14 - 2) = v24;
            if (v25 >= 255)
              LOBYTE(v25) = -1;
            *(v14 - 1) = v25;
            *v14 = -1;
            v26 = *(unsigned __int8 *)(v6 + v9 + 1);
            if (v26 <= 0x10)
              v26 = 16;
            v27 = 1220542 * v26 - 19528672;
            v28 = ((v27 + v17) >> 20) & ~((v27 + v17) >> 31);
            if (v28 >= 255)
              LOBYTE(v28) = -1;
            v14[1] = v28;
            v29 = ((v27 + v20) >> 20) & ~((v27 + v20) >> 31);
            if (v29 >= 255)
              LOBYTE(v29) = -1;
            v30 = ((v27 + v19) >> 20) & ~((v27 + v19) >> 31);
            if (v30 >= 255)
              LOBYTE(v30) = -1;
            v14[2] = v29;
            v14[3] = v30;
            v14[4] = -1;
            v31 = *(unsigned __int8 *)(v10 + v9);
            if (v31 <= 0x10)
              v31 = 16;
            v32 = 1220542 * v31 - 19528672;
            v33 = ((v32 + v17) >> 20) & ~((v32 + v17) >> 31);
            if (v33 >= 255)
              LOBYTE(v33) = -1;
            *(v13 - 3) = v33;
            v34 = ((v32 + v20) >> 20) & ~((v32 + v20) >> 31);
            if (v34 >= 255)
              LOBYTE(v34) = -1;
            v35 = ((v32 + v19) >> 20) & ~((v32 + v19) >> 31);
            if (v35 >= 255)
              LOBYTE(v35) = -1;
            *(v13 - 2) = v34;
            *(v13 - 1) = v35;
            *v13 = -1;
            v36 = *(unsigned __int8 *)(v10 + v9 + 1);
            if (v36 <= 0x10)
              v36 = 16;
            v37 = 1220542 * v36 - 19528672;
            v38 = ((v37 + v17) >> 20) & ~((v37 + v17) >> 31);
            if (v38 >= 255)
              LOBYTE(v38) = -1;
            v13[1] = v38;
            v39 = ((v37 + v20) >> 20) & ~((v37 + v20) >> 31);
            if (v39 >= 255)
              LOBYTE(v39) = -1;
            v13[2] = v39;
            v40 = ((v37 + v19) >> 20) & ~((v37 + v19) >> 31);
            if (v40 >= 255)
              LOBYTE(v40) = -1;
            v13[3] = v40;
            v13[4] = -1;
            v9 += 2;
            v4 = *(int *)(result + 24);
            v13 += 8;
            v14 += 8;
          }
          while (v9 < v4);
          v5 = *(_QWORD *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_1002D2C34(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D2C58(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int32x2_t v31;
  int v32;
  int32x2_t v33;
  _BYTE *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  __int32 v38;
  int v39;
  int32x2_t v40;
  int32x2_t v41;
  char v42;
  int32x2_t v43;
  unsigned int v44;
  _BYTE *v45;
  unsigned int v46;
  int v47;
  int32x2_t v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int32x2_t v52;
  int v53;
  _DWORD v54[2];

  v2 = *a2;
  v3 = 2 * v2;
  v4 = 2 * a2[1];
  v5 = *(_DWORD *)(result + 24);
  if (v5 >= 0)
    v6 = *(_DWORD *)(result + 24);
  else
    v6 = v5 + 1;
  v7 = v6 >> 1;
  v9 = *(_QWORD *)(result + 48);
  v8 = *(_QWORD *)(result + 56);
  v54[0] = v7;
  v54[1] = v8 - v7;
  v11 = *(_DWORD *)(result + 64);
  v10 = *(_DWORD *)(result + 68);
  if ((int)v2 >= 0)
    v12 = v2;
  else
    v12 = v2 + 1;
  v13 = v8 * ((uint64_t)v12 >> 1);
  v14 = *(_QWORD *)(result + 40) + v13;
  v15 = v9 + v13;
  if ((v2 & 0x80000001) == 1)
  {
    v16 = v11++ & 1;
    v14 += (int)v54[v16];
    v17 = v10++ & 1;
    v15 += (int)v54[v17];
  }
  if ((int)v3 < (int)v4)
  {
    v18 = (unsigned __int8 *)(*(_QWORD *)(result + 32) + v8 * v3);
    v19 = v3 + 1;
    do
    {
      if (v5 >= 2)
      {
        v22 = 0;
        v24 = *(_QWORD *)(result + 8);
        v23 = *(_QWORD *)(result + 16);
        v25 = v23 * v3;
        v26 = v23 * v19;
        v27 = v18;
        do
        {
          v28 = *(unsigned __int8 *)(v14 + v22) - 128;
          v29 = *v27;
          if (v29 <= 0x10)
            v29 = 16;
          v30 = 1220542 * v29 - 19528672;
          v31 = vmla_s32((int32x2_t)((0x80000 - 409993 * v28) | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v15 + v22) - 128), (int32x2_t)0x198937FFF2FDF4);
          v32 = 2116026 * v28 + 0x80000;
          v33 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v30), v31), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          v34 = (_BYTE *)(v24 + v25);
          v34[1] = v33.i8[0];
          v34[2] = v33.i8[4];
          v35 = ((int)(v30 + v32) >> 20) & ~((int)(v30 + v32) >> 31);
          if (v35 >= 255)
            LOBYTE(v35) = -1;
          *v34 = v35;
          v36 = v27[1];
          if (v36 <= 0x10)
            v36 = 16;
          v37 = 1220542 * v36 - 19528672;
          v38 = v31.i32[1];
          v39 = v37 + v31.i32[1];
          v40 = vdup_lane_s32(v31, 0);
          v40.i32[0] = v32;
          v41 = vshr_n_s32(vadd_s32(vdup_n_s32(v37), v40), 0x14uLL);
          if (((v39 >> 20) & ~(v39 >> 31)) >= 255)
            v42 = -1;
          else
            v42 = (v39 >> 20) & ~(v39 >> 31);
          v43 = vmin_s32(vmax_s32(v41, 0), (int32x2_t)0xFF000000FFLL);
          v34[5] = v42;
          v34[3] = v43.i8[0];
          v34[4] = v43.i8[4];
          v44 = v27[v8];
          v45 = (_BYTE *)(v24 + v26);
          if (v44 <= 0x10)
            v44 = 16;
          v46 = 1220542 * v44 - 19528672;
          v47 = ((int)(v46 + v38) >> 20) & ~((int)(v46 + v38) >> 31);
          if (v47 >= 255)
            LOBYTE(v47) = -1;
          v45[2] = v47;
          v48 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v46), v40), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *v45 = v48.i8[0];
          v45[1] = v48.i8[4];
          v49 = v27[v8 + 1];
          if (v49 <= 0x10)
            v49 = 16;
          v50 = 1220542 * v49 - 19528672;
          v51 = ((int)(v50 + v38) >> 20) & ~((int)(v50 + v38) >> 31);
          v52 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v50), v40), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          if (v51 >= 255)
            LOBYTE(v51) = -1;
          v45[5] = v51;
          v45[3] = v52.i8[0];
          v45[4] = v52.i8[4];
          v5 = *(_DWORD *)(result + 24);
          ++v22;
          if (v5 >= 0)
            v53 = *(_DWORD *)(result + 24);
          else
            v53 = v5 + 1;
          v24 += 6;
          v27 += 2;
        }
        while (v22 < v53 >> 1);
        v8 = *(_QWORD *)(result + 56);
      }
      v3 += 2;
      v18 += 2 * v8;
      v20 = v11++ & 1;
      v14 += (int)v54[v20];
      v21 = (int)v54[v10++ & 1];
      v15 += v21;
      v19 += 2;
    }
    while (v3 < v4);
  }
  return result;
}

void sub_1002D2F84(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D2FA8(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  char v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  char v53;
  int v54;
  int v55;
  uint64_t v56;
  _DWORD v57[2];

  v2 = *a2;
  v3 = 2 * v2;
  v4 = 2 * a2[1];
  v5 = *(_DWORD *)(result + 24);
  if (v5 >= 0)
    v6 = *(_DWORD *)(result + 24);
  else
    v6 = v5 + 1;
  v7 = v6 >> 1;
  v9 = *(_QWORD *)(result + 48);
  v8 = *(_QWORD *)(result + 56);
  v57[0] = v7;
  v57[1] = v8 - v7;
  v11 = *(_DWORD *)(result + 64);
  v10 = *(_DWORD *)(result + 68);
  if ((int)v2 >= 0)
    v12 = v2;
  else
    v12 = v2 + 1;
  v13 = v8 * ((uint64_t)v12 >> 1);
  v14 = *(_QWORD *)(result + 40) + v13;
  v15 = v9 + v13;
  if ((v2 & 0x80000001) == 1)
  {
    v16 = v11++ & 1;
    v14 += (int)v57[v16];
    v17 = v10++ & 1;
    v15 += (int)v57[v17];
  }
  if ((int)v3 < (int)v4)
  {
    v18 = (unsigned __int8 *)(*(_QWORD *)(result + 32) + v8 * v3);
    v19 = v3 + 1;
    v56 = v4;
    do
    {
      if (v5 >= 2)
      {
        v22 = 0;
        v23 = *(_QWORD *)(result + 16);
        v24 = *(_QWORD *)(result + 8) + 2;
        v25 = (char *)(v24 + v23 * v3);
        v26 = (_BYTE *)(v24 + v23 * v19);
        v27 = v18;
        do
        {
          v28 = *(unsigned __int8 *)(v14 + v22) - 128;
          v29 = *(unsigned __int8 *)(v15 + v22) - 128;
          v30 = 1673527 * v29 + 0x80000;
          v31 = -852492 * v29 - 409993 * v28;
          v32 = 2116026 * v28 + 0x80000;
          v33 = *v27;
          v34 = v31 + 0x80000;
          if (v33 <= 0x10)
            v33 = 16;
          v35 = 1220542 * v33 - 19528672;
          v36 = ((v35 + v30) >> 20) & ~((v35 + v30) >> 31);
          if (v36 >= 255)
            LOBYTE(v36) = -1;
          *(v25 - 2) = v36;
          v37 = ((v35 + v34) >> 20) & ~((v35 + v34) >> 31);
          if (v37 >= 255)
            LOBYTE(v37) = -1;
          v38 = ((v35 + v32) >> 20) & ~((v35 + v32) >> 31);
          *(v25 - 1) = v37;
          if (v38 >= 255)
            v39 = -1;
          else
            v39 = v38;
          *v25 = v39;
          v40 = v27[1];
          if (v40 <= 0x10)
            v40 = 16;
          v41 = 1220542 * v40 - 19528672;
          v42 = ((v41 + v30) >> 20) & ~((v41 + v30) >> 31);
          if (v42 >= 255)
            LOBYTE(v42) = -1;
          v25[1] = v42;
          v43 = ((v41 + v34) >> 20) & ~((v41 + v34) >> 31);
          if (v43 >= 255)
            LOBYTE(v43) = -1;
          v25[2] = v43;
          v44 = ((v41 + v32) >> 20) & ~((v41 + v32) >> 31);
          if (v44 >= 255)
            LOBYTE(v44) = -1;
          v25[3] = v44;
          v45 = v27[v8];
          if (v45 <= 0x10)
            v45 = 16;
          v46 = 1220542 * v45 - 19528672;
          v47 = ((v46 + v30) >> 20) & ~((v46 + v30) >> 31);
          if (v47 >= 255)
            LOBYTE(v47) = -1;
          *(v26 - 2) = v47;
          v48 = ((v46 + v34) >> 20) & ~((v46 + v34) >> 31);
          if (v48 >= 255)
            LOBYTE(v48) = -1;
          *(v26 - 1) = v48;
          v49 = ((v46 + v32) >> 20) & ~((v46 + v32) >> 31);
          if (v49 >= 255)
            LOBYTE(v49) = -1;
          *v26 = v49;
          v50 = v27[v8 + 1];
          if (v50 <= 0x10)
            v50 = 16;
          v51 = 1220542 * v50 - 19528672;
          v52 = ((v51 + v30) >> 20) & ~((v51 + v30) >> 31);
          if (v52 >= 255)
            LOBYTE(v52) = -1;
          v26[1] = v52;
          if ((((v51 + v34) >> 20) & ~((v51 + v34) >> 31)) >= 255)
            v53 = -1;
          else
            v53 = ((v51 + v34) >> 20) & ~((v51 + v34) >> 31);
          v54 = ((v51 + v32) >> 20) & ~((v51 + v32) >> 31);
          v26[2] = v53;
          if (v54 >= 255)
            LOBYTE(v54) = -1;
          v26[3] = v54;
          v5 = *(_DWORD *)(result + 24);
          ++v22;
          if (v5 >= 0)
            v55 = *(_DWORD *)(result + 24);
          else
            v55 = v5 + 1;
          v25 += 6;
          v27 += 2;
          v26 += 6;
        }
        while (v22 < v55 >> 1);
        v8 = *(_QWORD *)(result + 56);
        v4 = v56;
      }
      v3 += 2;
      v18 += 2 * v8;
      v20 = v11++ & 1;
      v14 += (int)v57[v20];
      v21 = (int)v57[v10++ & 1];
      v15 += v21;
      v19 += 2;
    }
    while (v3 < v4);
  }
  return result;
}

void sub_1002D3300(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D3324(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  _BYTE *v31;
  int32x2_t v32;
  int v33;
  int32x2_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  __int32 v38;
  int32x2_t v39;
  int v40;
  int32x2_t v41;
  char v42;
  int32x2_t v43;
  unsigned int v44;
  unsigned int v45;
  _BYTE *v46;
  int32x2_t v47;
  char v48;
  int32x2_t v49;
  unsigned int v50;
  unsigned int v51;
  int32x2_t v52;
  char v53;
  int32x2_t v54;
  int v55;
  _DWORD v56[2];

  v2 = *a2;
  v3 = 2 * v2;
  v4 = 2 * a2[1];
  v5 = *(_DWORD *)(result + 24);
  if (v5 >= 0)
    v6 = *(_DWORD *)(result + 24);
  else
    v6 = v5 + 1;
  v7 = v6 >> 1;
  v9 = *(_QWORD *)(result + 48);
  v8 = *(_QWORD *)(result + 56);
  v56[0] = v7;
  v56[1] = v8 - v7;
  v11 = *(_DWORD *)(result + 64);
  v10 = *(_DWORD *)(result + 68);
  if ((int)v2 >= 0)
    v12 = v2;
  else
    v12 = v2 + 1;
  v13 = v8 * ((uint64_t)v12 >> 1);
  v14 = *(_QWORD *)(result + 40) + v13;
  v15 = v9 + v13;
  if ((v2 & 0x80000001) == 1)
  {
    v16 = v11++ & 1;
    v14 += (int)v56[v16];
    v17 = v10++ & 1;
    v15 += (int)v56[v17];
  }
  if ((int)v3 < (int)v4)
  {
    v18 = (unsigned __int8 *)(*(_QWORD *)(result + 32) + v8 * v3);
    v19 = v3 + 1;
    do
    {
      if (v5 >= 2)
      {
        v22 = 0;
        v24 = *(_QWORD *)(result + 8);
        v23 = *(_QWORD *)(result + 16);
        v25 = v23 * v3;
        v26 = v23 * v19;
        v27 = v18;
        do
        {
          v28 = *(unsigned __int8 *)(v14 + v22) - 128;
          v29 = *v27;
          if (v29 <= 0x10)
            v29 = 16;
          v30 = 1220542 * v29 - 19528672;
          v31 = (_BYTE *)(v24 + v25);
          v32 = vmla_s32((int32x2_t)((0x80000 - 409993 * v28) | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v15 + v22) - 128), (int32x2_t)0x198937FFF2FDF4);
          v33 = 2116026 * v28 + 0x80000;
          v34 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v30), v32), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(_BYTE *)(v24 + v25 + 1) = v34.i8[0];
          v35 = ((int)(v30 + v33) >> 20) & ~((int)(v30 + v33) >> 31);
          if (v35 >= 255)
            LOBYTE(v35) = -1;
          v31[2] = v34.i8[4];
          *v31 = v35;
          v31[3] = -1;
          v36 = v27[1];
          if (v36 <= 0x10)
            v36 = 16;
          v37 = 1220542 * v36 - 19528672;
          v38 = v32.i32[1];
          v39 = vdup_n_s32(v37);
          v40 = ((int)(v37 + v32.i32[1]) >> 20) & ~((int)(v37 + v32.i32[1]) >> 31);
          v41 = vdup_lane_s32(v32, 0);
          v41.i32[0] = v33;
          if (v40 >= 255)
            v42 = -1;
          else
            v42 = v40;
          v43 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(v39, v41), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          v31[6] = v42;
          v31[4] = v43.i8[0];
          v31[7] = -1;
          v31[5] = v43.i8[4];
          v44 = v27[v8];
          if (v44 <= 0x10)
            v44 = 16;
          v45 = 1220542 * v44 - 19528672;
          v46 = (_BYTE *)(v24 + v26);
          v47 = vdup_n_s32(v45);
          if ((((int)(v45 + v38) >> 20) & ~((int)(v45 + v38) >> 31)) >= 255)
            v48 = -1;
          else
            v48 = ((int)(v45 + v38) >> 20) & ~((int)(v45 + v38) >> 31);
          v49 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(v47, v41), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          v46[2] = v48;
          *v46 = v49.i8[0];
          v46[3] = -1;
          v46[1] = v49.i8[4];
          v50 = v27[v8 + 1];
          if (v50 <= 0x10)
            v50 = 16;
          v51 = 1220542 * v50 - 19528672;
          v52 = vadd_s32(vdup_n_s32(v51), v41);
          if ((((int)(v51 + v38) >> 20) & ~((int)(v51 + v38) >> 31)) >= 255)
            v53 = -1;
          else
            v53 = ((int)(v51 + v38) >> 20) & ~((int)(v51 + v38) >> 31);
          v54 = vmin_s32(vmax_s32(vshr_n_s32(v52, 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          v46[6] = v53;
          v46[5] = v54.i8[4];
          v46[4] = v54.i8[0];
          v46[7] = -1;
          v5 = *(_DWORD *)(result + 24);
          ++v22;
          if (v5 >= 0)
            v55 = *(_DWORD *)(result + 24);
          else
            v55 = v5 + 1;
          v24 += 8;
          v27 += 2;
        }
        while (v22 < v55 >> 1);
        v8 = *(_QWORD *)(result + 56);
      }
      v3 += 2;
      v18 += 2 * v8;
      v20 = v11++ & 1;
      v14 += (int)v56[v20];
      v21 = (int)v56[v10++ & 1];
      v15 += v21;
      v19 += 2;
    }
    while (v3 < v4);
  }
  return result;
}

void sub_1002D3660(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D3684(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  char v49;
  unsigned int v50;
  int v51;
  int v52;
  char v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  _DWORD v58[2];

  v2 = *a2;
  v3 = 2 * v2;
  v4 = 2 * a2[1];
  v5 = *(_DWORD *)(result + 24);
  if (v5 >= 0)
    v6 = *(_DWORD *)(result + 24);
  else
    v6 = v5 + 1;
  v7 = v6 >> 1;
  v9 = *(_QWORD *)(result + 48);
  v8 = *(_QWORD *)(result + 56);
  v58[0] = v7;
  v58[1] = v8 - v7;
  v11 = *(_DWORD *)(result + 64);
  v10 = *(_DWORD *)(result + 68);
  if ((int)v2 >= 0)
    v12 = v2;
  else
    v12 = v2 + 1;
  v13 = v8 * ((uint64_t)v12 >> 1);
  v14 = *(_QWORD *)(result + 40) + v13;
  v15 = v9 + v13;
  if ((v2 & 0x80000001) == 1)
  {
    v16 = v11++ & 1;
    v14 += (int)v58[v16];
    v17 = v10++ & 1;
    v15 += (int)v58[v17];
  }
  if ((int)v3 < (int)v4)
  {
    v18 = (unsigned __int8 *)(*(_QWORD *)(result + 32) + v8 * v3);
    v19 = v3 + 1;
    v56 = v4;
    do
    {
      if (v5 >= 2)
      {
        v57 = v10;
        v22 = 0;
        v23 = *(_QWORD *)(result + 16);
        v24 = *(_QWORD *)(result + 8) + 3;
        v25 = (_BYTE *)(v24 + v23 * v3);
        v26 = (_BYTE *)(v24 + v23 * v19);
        v27 = v18;
        do
        {
          v28 = *(unsigned __int8 *)(v14 + v22) - 128;
          v29 = *(unsigned __int8 *)(v15 + v22) - 128;
          v30 = 1673527 * v29 + 0x80000;
          v31 = -852492 * v29 - 409993 * v28;
          v32 = 2116026 * v28 + 0x80000;
          v33 = v31 + 0x80000;
          v34 = *v27;
          if (v34 <= 0x10)
            v34 = 16;
          v35 = 1220542 * v34 - 19528672;
          v36 = ((v35 + v30) >> 20) & ~((v35 + v30) >> 31);
          if (v36 >= 255)
            LOBYTE(v36) = -1;
          *(v25 - 3) = v36;
          v37 = ((v35 + v33) >> 20) & ~((v35 + v33) >> 31);
          if (v37 >= 255)
            LOBYTE(v37) = -1;
          *(v25 - 2) = v37;
          v38 = ((v35 + v32) >> 20) & ~((v35 + v32) >> 31);
          if (v38 >= 255)
            LOBYTE(v38) = -1;
          *(v25 - 1) = v38;
          *v25 = -1;
          v39 = v27[1];
          if (v39 <= 0x10)
            v39 = 16;
          v40 = 1220542 * v39 - 19528672;
          v41 = ((v40 + v30) >> 20) & ~((v40 + v30) >> 31);
          if (v41 >= 255)
            LOBYTE(v41) = -1;
          v42 = ((v40 + v33) >> 20) & ~((v40 + v33) >> 31);
          v25[1] = v41;
          if (v42 >= 255)
            LOBYTE(v42) = -1;
          v43 = ((v40 + v32) >> 20) & ~((v40 + v32) >> 31);
          v25[2] = v42;
          if (v43 >= 255)
            LOBYTE(v43) = -1;
          v25[3] = v43;
          v25[4] = -1;
          v44 = v27[v8];
          if (v44 <= 0x10)
            v44 = 16;
          v45 = 1220542 * v44 - 19528672;
          v46 = ((v45 + v30) >> 20) & ~((v45 + v30) >> 31);
          v47 = ((v45 + v33) >> 20) & ~((v45 + v33) >> 31);
          if (v46 >= 255)
            LOBYTE(v46) = -1;
          *(v26 - 3) = v46;
          if (v47 >= 255)
            LOBYTE(v47) = -1;
          v48 = ((v45 + v32) >> 20) & ~((v45 + v32) >> 31);
          *(v26 - 2) = v47;
          if (v48 >= 255)
            v49 = -1;
          else
            v49 = v48;
          *(v26 - 1) = v49;
          *v26 = -1;
          v50 = v27[v8 + 1];
          if (v50 <= 0x10)
            v50 = 16;
          v51 = 1220542 * v50 - 19528672;
          v52 = ((v51 + v30) >> 20) & ~((v51 + v30) >> 31);
          if (v52 >= 255)
            LOBYTE(v52) = -1;
          v26[1] = v52;
          if ((((v51 + v33) >> 20) & ~((v51 + v33) >> 31)) >= 255)
            v53 = -1;
          else
            v53 = ((v51 + v33) >> 20) & ~((v51 + v33) >> 31);
          v54 = ((v51 + v32) >> 20) & ~((v51 + v32) >> 31);
          v26[2] = v53;
          if (v54 >= 255)
            LOBYTE(v54) = -1;
          v26[3] = v54;
          v26[4] = -1;
          v5 = *(_DWORD *)(result + 24);
          ++v22;
          if (v5 >= 0)
            v55 = *(_DWORD *)(result + 24);
          else
            v55 = v5 + 1;
          v25 += 8;
          v27 += 2;
          v26 += 8;
        }
        while (v22 < v55 >> 1);
        v8 = *(_QWORD *)(result + 56);
        v4 = v56;
        v10 = v57;
      }
      v3 += 2;
      v18 += 2 * v8;
      v20 = v11++ & 1;
      v14 += (int)v58[v20];
      v21 = (int)v58[v10++ & 1];
      v15 += v21;
      v19 += 2;
    }
    while (v3 < v4);
  }
  return result;
}

void sub_1002D39F0(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D3A14(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int32x2_t v14;
  int32x2_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int32x2_t v20;
  int32x2_t v21;

  v2 = *a2;
  v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        v7 = 0;
        v8 = (_BYTE *)(*(_QWORD *)(result + 8) + *(_QWORD *)(result + 16) * v2 + 3);
        do
        {
          v9 = *(unsigned __int8 *)(v5 + v7 + 1) - 128;
          v10 = 0x80000 - 409993 * v9;
          v11 = 2116026 * v9 + 0x80000;
          v12 = *(unsigned __int8 *)(v5 + v7);
          if (v12 <= 0x10)
            v12 = 16;
          v13 = 1220542 * v12 - 19528672;
          v14 = vmla_s32((int32x2_t)(v10 | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v5 + v7 + 3) - 128), (int32x2_t)0x198937FFF2FDF4);
          v15 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v13), v14), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 1) = v15.i8[4];
          *(v8 - 2) = v15.i8[0];
          v16 = ((int)(v13 + v11) >> 20) & ~((int)(v13 + v11) >> 31);
          if (v16 >= 255)
            LOBYTE(v16) = -1;
          *(v8 - 3) = v16;
          v17 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v17 <= 0x10)
            v17 = 16;
          v18 = 1220542 * v17 - 19528672;
          v19 = ((int)(v18 + v14.i32[1]) >> 20) & ~((int)(v18 + v14.i32[1]) >> 31);
          if (v19 >= 255)
            LOBYTE(v19) = -1;
          v8[2] = v19;
          v20 = vdup_lane_s32(v14, 0);
          v20.i32[0] = v11;
          v21 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v18), v20), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *v8 = v21.i8[0];
          v8[1] = v21.i8[4];
          v7 += 4;
          v6 = *(int *)(result + 40);
          v8 += 6;
        }
        while (v7 < 2 * v6);
        v4 = *(_QWORD *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1002D3B88(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D3BAC(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int32x2_t v15;
  int32x2_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int32x2_t v21;
  int32x2_t v22;

  v2 = *a2;
  v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        v7 = 0;
        v8 = (_BYTE *)(*(_QWORD *)(result + 8) + *(_QWORD *)(result + 16) * v2 + 3);
        v9 = v5 + 3;
        do
        {
          v10 = *(unsigned __int8 *)(v5 + v7) - 128;
          v11 = 0x80000 - 409993 * v10;
          v12 = 2116026 * v10 + 0x80000;
          v13 = *(unsigned __int8 *)(v9 + v7 - 2);
          if (v13 <= 0x10)
            v13 = 16;
          v14 = 1220542 * v13 - 19528672;
          v15 = vmla_s32((int32x2_t)(v11 | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v9 + v7 - 1) - 128), (int32x2_t)0x198937FFF2FDF4);
          v16 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v14), v15), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 1) = v16.i8[4];
          *(v8 - 2) = v16.i8[0];
          v17 = ((int)(v14 + v12) >> 20) & ~((int)(v14 + v12) >> 31);
          if (v17 >= 255)
            LOBYTE(v17) = -1;
          *(v8 - 3) = v17;
          v18 = *(unsigned __int8 *)(v9 + v7);
          if (v18 <= 0x10)
            v18 = 16;
          v19 = 1220542 * v18 - 19528672;
          v20 = ((int)(v19 + v15.i32[1]) >> 20) & ~((int)(v19 + v15.i32[1]) >> 31);
          if (v20 >= 255)
            LOBYTE(v20) = -1;
          v8[2] = v20;
          v21 = vdup_lane_s32(v15, 0);
          v21.i32[0] = v12;
          v22 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v19), v21), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *v8 = v22.i8[0];
          v8[1] = v22.i8[4];
          v7 += 4;
          v6 = *(int *)(result + 40);
          v8 += 6;
        }
        while (v7 < 2 * v6);
        v4 = *(_QWORD *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1002D3D2C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D3D50(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int32x2_t v14;
  int32x2_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int32x2_t v20;
  int32x2_t v21;

  v2 = *a2;
  v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        v7 = 0;
        v8 = (_BYTE *)(*(_QWORD *)(result + 8) + *(_QWORD *)(result + 16) * v2 + 3);
        do
        {
          v9 = *(unsigned __int8 *)(v5 + v7 + 3) - 128;
          v10 = 0x80000 - 409993 * v9;
          v11 = 2116026 * v9 + 0x80000;
          v12 = *(unsigned __int8 *)(v5 + v7);
          if (v12 <= 0x10)
            v12 = 16;
          v13 = 1220542 * v12 - 19528672;
          v14 = vmla_s32((int32x2_t)(v10 | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v5 + v7 + 1) - 128), (int32x2_t)0x198937FFF2FDF4);
          v15 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v13), v14), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 1) = v15.i8[4];
          *(v8 - 2) = v15.i8[0];
          v16 = ((int)(v13 + v11) >> 20) & ~((int)(v13 + v11) >> 31);
          if (v16 >= 255)
            LOBYTE(v16) = -1;
          *(v8 - 3) = v16;
          v17 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v17 <= 0x10)
            v17 = 16;
          v18 = 1220542 * v17 - 19528672;
          v19 = ((int)(v18 + v14.i32[1]) >> 20) & ~((int)(v18 + v14.i32[1]) >> 31);
          if (v19 >= 255)
            LOBYTE(v19) = -1;
          v8[2] = v19;
          v20 = vdup_lane_s32(v14, 0);
          v20.i32[0] = v11;
          v21 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v18), v20), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *v8 = v21.i8[0];
          v8[1] = v21.i8[4];
          v7 += 4;
          v6 = *(int *)(result + 40);
          v8 += 6;
        }
        while (v7 < 2 * v6);
        v4 = *(_QWORD *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1002D3EC4(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D3EE8(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v2 = *a2;
  v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        v7 = 0;
        v8 = (_BYTE *)(*(_QWORD *)(result + 8) + *(_QWORD *)(result + 16) * v2);
        do
        {
          v9 = *(unsigned __int8 *)(v5 + v7 + 1) - 128;
          v10 = *(unsigned __int8 *)(v5 + v7 + 3) - 128;
          v11 = 1673527 * v10 + 0x80000;
          v12 = -852492 * v10 - 409993 * v9 + 0x80000;
          v13 = 2116026 * v9 + 0x80000;
          v14 = *(unsigned __int8 *)(v5 + v7);
          if (v14 <= 0x10)
            v14 = 16;
          v15 = 1220542 * v14 - 19528672;
          v16 = ((v15 + v11) >> 20) & ~((v15 + v11) >> 31);
          if (v16 >= 255)
            LOBYTE(v16) = -1;
          *v8 = v16;
          v17 = ((v15 + v12) >> 20) & ~((v15 + v12) >> 31);
          if (v17 >= 255)
            LOBYTE(v17) = -1;
          v8[1] = v17;
          v18 = ((v15 + v13) >> 20) & ~((v15 + v13) >> 31);
          if (v18 >= 255)
            LOBYTE(v18) = -1;
          v8[2] = v18;
          v19 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v19 <= 0x10)
            v19 = 16;
          v20 = 1220542 * v19 - 19528672;
          v21 = ((v20 + v11) >> 20) & ~((v20 + v11) >> 31);
          if (v21 >= 255)
            LOBYTE(v21) = -1;
          v8[3] = v21;
          v22 = ((v20 + v12) >> 20) & ~((v20 + v12) >> 31);
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          v8[4] = v22;
          v23 = ((v20 + v13) >> 20) & ~((v20 + v13) >> 31);
          if (v23 >= 255)
            LOBYTE(v23) = -1;
          v8[5] = v23;
          v7 += 4;
          v8 += 6;
          v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        v4 = *(_QWORD *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1002D4070(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D4094(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v2 = *a2;
  v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        v7 = 0;
        v8 = (_BYTE *)(*(_QWORD *)(result + 8) + *(_QWORD *)(result + 16) * v2);
        do
        {
          v9 = *(unsigned __int8 *)(v5 + v7) - 128;
          v10 = *(unsigned __int8 *)(v5 + v7 + 2) - 128;
          v11 = 1673527 * v10 + 0x80000;
          v12 = -852492 * v10 - 409993 * v9 + 0x80000;
          v13 = 2116026 * v9 + 0x80000;
          v14 = *(unsigned __int8 *)(v5 + v7 + 1);
          if (v14 <= 0x10)
            v14 = 16;
          v15 = 1220542 * v14 - 19528672;
          v16 = ((v15 + v11) >> 20) & ~((v15 + v11) >> 31);
          if (v16 >= 255)
            LOBYTE(v16) = -1;
          *v8 = v16;
          v17 = ((v15 + v12) >> 20) & ~((v15 + v12) >> 31);
          if (v17 >= 255)
            LOBYTE(v17) = -1;
          v8[1] = v17;
          v18 = ((v15 + v13) >> 20) & ~((v15 + v13) >> 31);
          if (v18 >= 255)
            LOBYTE(v18) = -1;
          v8[2] = v18;
          v19 = *(unsigned __int8 *)(v5 + v7 + 3);
          if (v19 <= 0x10)
            v19 = 16;
          v20 = 1220542 * v19 - 19528672;
          v21 = ((v20 + v11) >> 20) & ~((v20 + v11) >> 31);
          if (v21 >= 255)
            LOBYTE(v21) = -1;
          v8[3] = v21;
          v22 = ((v20 + v12) >> 20) & ~((v20 + v12) >> 31);
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          v8[4] = v22;
          v23 = ((v20 + v13) >> 20) & ~((v20 + v13) >> 31);
          if (v23 >= 255)
            LOBYTE(v23) = -1;
          v8[5] = v23;
          v7 += 4;
          v8 += 6;
          v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        v4 = *(_QWORD *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1002D421C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D4240(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v2 = *a2;
  v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        v7 = 0;
        v8 = (_BYTE *)(*(_QWORD *)(result + 8) + *(_QWORD *)(result + 16) * v2);
        do
        {
          v9 = *(unsigned __int8 *)(v5 + v7 + 3) - 128;
          v10 = *(unsigned __int8 *)(v5 + v7 + 1) - 128;
          v11 = 1673527 * v10 + 0x80000;
          v12 = -852492 * v10 - 409993 * v9 + 0x80000;
          v13 = 2116026 * v9 + 0x80000;
          v14 = *(unsigned __int8 *)(v5 + v7);
          if (v14 <= 0x10)
            v14 = 16;
          v15 = 1220542 * v14 - 19528672;
          v16 = ((v15 + v11) >> 20) & ~((v15 + v11) >> 31);
          if (v16 >= 255)
            LOBYTE(v16) = -1;
          *v8 = v16;
          v17 = ((v15 + v12) >> 20) & ~((v15 + v12) >> 31);
          if (v17 >= 255)
            LOBYTE(v17) = -1;
          v8[1] = v17;
          v18 = ((v15 + v13) >> 20) & ~((v15 + v13) >> 31);
          if (v18 >= 255)
            LOBYTE(v18) = -1;
          v8[2] = v18;
          v19 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v19 <= 0x10)
            v19 = 16;
          v20 = 1220542 * v19 - 19528672;
          v21 = ((v20 + v11) >> 20) & ~((v20 + v11) >> 31);
          if (v21 >= 255)
            LOBYTE(v21) = -1;
          v8[3] = v21;
          v22 = ((v20 + v12) >> 20) & ~((v20 + v12) >> 31);
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          v8[4] = v22;
          v23 = ((v20 + v13) >> 20) & ~((v20 + v13) >> 31);
          if (v23 >= 255)
            LOBYTE(v23) = -1;
          v8[5] = v23;
          v7 += 4;
          v8 += 6;
          v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        v4 = *(_QWORD *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1002D43C8(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D43EC(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int32x2_t v14;
  int32x2_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int32x2_t v20;
  int32x2_t v21;

  v2 = *a2;
  v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        v7 = 0;
        v8 = (_BYTE *)(*(_QWORD *)(result + 8) + *(_QWORD *)(result + 16) * v2 + 7);
        do
        {
          v9 = *(unsigned __int8 *)(v5 + v7 + 1) - 128;
          v10 = 0x80000 - 409993 * v9;
          v11 = 2116026 * v9 + 0x80000;
          v12 = *(unsigned __int8 *)(v5 + v7);
          if (v12 <= 0x10)
            v12 = 16;
          v13 = 1220542 * v12 - 19528672;
          v14 = vmla_s32((int32x2_t)(v10 | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v5 + v7 + 3) - 128), (int32x2_t)0x198937FFF2FDF4);
          v15 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v13), v14), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 5) = v15.i8[4];
          *(v8 - 6) = v15.i8[0];
          v16 = ((int)(v13 + v11) >> 20) & ~((int)(v13 + v11) >> 31);
          if (v16 >= 255)
            LOBYTE(v16) = -1;
          *(v8 - 7) = v16;
          *(v8 - 4) = -1;
          v17 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v17 <= 0x10)
            v17 = 16;
          v18 = 1220542 * v17 - 19528672;
          v19 = ((int)(v18 + v14.i32[1]) >> 20) & ~((int)(v18 + v14.i32[1]) >> 31);
          if (v19 >= 255)
            LOBYTE(v19) = -1;
          *(v8 - 1) = v19;
          v20 = vdup_lane_s32(v14, 0);
          v20.i32[0] = v11;
          v21 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v18), v20), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 2) = v21.i8[4];
          *(v8 - 3) = v21.i8[0];
          *v8 = -1;
          v8 += 8;
          v7 += 4;
          v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        v4 = *(_QWORD *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1002D4564(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D4588(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int32x2_t v15;
  int32x2_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int32x2_t v21;
  int32x2_t v22;

  v2 = *a2;
  v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        v7 = 0;
        v8 = (_BYTE *)(*(_QWORD *)(result + 8) + *(_QWORD *)(result + 16) * v2 + 7);
        v9 = v5 + 3;
        do
        {
          v10 = *(unsigned __int8 *)(v5 + v7) - 128;
          v11 = 0x80000 - 409993 * v10;
          v12 = 2116026 * v10 + 0x80000;
          v13 = *(unsigned __int8 *)(v9 + v7 - 2);
          if (v13 <= 0x10)
            v13 = 16;
          v14 = 1220542 * v13 - 19528672;
          v15 = vmla_s32((int32x2_t)(v11 | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v9 + v7 - 1) - 128), (int32x2_t)0x198937FFF2FDF4);
          v16 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v14), v15), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 5) = v16.i8[4];
          *(v8 - 6) = v16.i8[0];
          v17 = ((int)(v14 + v12) >> 20) & ~((int)(v14 + v12) >> 31);
          if (v17 >= 255)
            LOBYTE(v17) = -1;
          *(v8 - 7) = v17;
          *(v8 - 4) = -1;
          v18 = *(unsigned __int8 *)(v9 + v7);
          if (v18 <= 0x10)
            v18 = 16;
          v19 = 1220542 * v18 - 19528672;
          v20 = ((int)(v19 + v15.i32[1]) >> 20) & ~((int)(v19 + v15.i32[1]) >> 31);
          if (v20 >= 255)
            LOBYTE(v20) = -1;
          *(v8 - 1) = v20;
          v21 = vdup_lane_s32(v15, 0);
          v21.i32[0] = v12;
          v22 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v19), v21), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 2) = v22.i8[4];
          *(v8 - 3) = v22.i8[0];
          *v8 = -1;
          v8 += 8;
          v7 += 4;
          v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        v4 = *(_QWORD *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1002D470C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D4730(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int32x2_t v14;
  int32x2_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int32x2_t v20;
  int32x2_t v21;

  v2 = *a2;
  v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        v7 = 0;
        v8 = (_BYTE *)(*(_QWORD *)(result + 8) + *(_QWORD *)(result + 16) * v2 + 7);
        do
        {
          v9 = *(unsigned __int8 *)(v5 + v7 + 3) - 128;
          v10 = 0x80000 - 409993 * v9;
          v11 = 2116026 * v9 + 0x80000;
          v12 = *(unsigned __int8 *)(v5 + v7);
          if (v12 <= 0x10)
            v12 = 16;
          v13 = 1220542 * v12 - 19528672;
          v14 = vmla_s32((int32x2_t)(v10 | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v5 + v7 + 1) - 128), (int32x2_t)0x198937FFF2FDF4);
          v15 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v13), v14), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 5) = v15.i8[4];
          *(v8 - 6) = v15.i8[0];
          v16 = ((int)(v13 + v11) >> 20) & ~((int)(v13 + v11) >> 31);
          if (v16 >= 255)
            LOBYTE(v16) = -1;
          *(v8 - 7) = v16;
          *(v8 - 4) = -1;
          v17 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v17 <= 0x10)
            v17 = 16;
          v18 = 1220542 * v17 - 19528672;
          v19 = ((int)(v18 + v14.i32[1]) >> 20) & ~((int)(v18 + v14.i32[1]) >> 31);
          if (v19 >= 255)
            LOBYTE(v19) = -1;
          *(v8 - 1) = v19;
          v20 = vdup_lane_s32(v14, 0);
          v20.i32[0] = v11;
          v21 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v18), v20), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 2) = v21.i8[4];
          *(v8 - 3) = v21.i8[0];
          *v8 = -1;
          v8 += 8;
          v7 += 4;
          v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        v4 = *(_QWORD *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1002D48A8(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D48CC(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v2 = *a2;
  v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        v7 = 0;
        v8 = (_BYTE *)(*(_QWORD *)(result + 8) + *(_QWORD *)(result + 16) * v2);
        do
        {
          v9 = *(unsigned __int8 *)(v5 + v7 + 1) - 128;
          v10 = *(unsigned __int8 *)(v5 + v7 + 3) - 128;
          v11 = 1673527 * v10 + 0x80000;
          v12 = -852492 * v10 - 409993 * v9 + 0x80000;
          v13 = 2116026 * v9 + 0x80000;
          v14 = *(unsigned __int8 *)(v5 + v7);
          if (v14 <= 0x10)
            v14 = 16;
          v15 = 1220542 * v14 - 19528672;
          v16 = ((v15 + v11) >> 20) & ~((v15 + v11) >> 31);
          if (v16 >= 255)
            LOBYTE(v16) = -1;
          *v8 = v16;
          v17 = ((v15 + v12) >> 20) & ~((v15 + v12) >> 31);
          if (v17 >= 255)
            LOBYTE(v17) = -1;
          v8[1] = v17;
          v18 = ((v15 + v13) >> 20) & ~((v15 + v13) >> 31);
          if (v18 >= 255)
            LOBYTE(v18) = -1;
          v8[2] = v18;
          v8[3] = -1;
          v19 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v19 <= 0x10)
            v19 = 16;
          v20 = 1220542 * v19 - 19528672;
          v21 = ((v20 + v11) >> 20) & ~((v20 + v11) >> 31);
          if (v21 >= 255)
            LOBYTE(v21) = -1;
          v8[4] = v21;
          v22 = ((v20 + v12) >> 20) & ~((v20 + v12) >> 31);
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          v8[5] = v22;
          v23 = ((v20 + v13) >> 20) & ~((v20 + v13) >> 31);
          if (v23 >= 255)
            LOBYTE(v23) = -1;
          v8[6] = v23;
          v8[7] = -1;
          v7 += 4;
          v8 += 8;
          v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        v4 = *(_QWORD *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1002D4A5C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D4A80(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v2 = *a2;
  v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        v7 = 0;
        v8 = (_BYTE *)(*(_QWORD *)(result + 8) + *(_QWORD *)(result + 16) * v2);
        do
        {
          v9 = *(unsigned __int8 *)(v5 + v7) - 128;
          v10 = *(unsigned __int8 *)(v5 + v7 + 2) - 128;
          v11 = 1673527 * v10 + 0x80000;
          v12 = -852492 * v10 - 409993 * v9 + 0x80000;
          v13 = 2116026 * v9 + 0x80000;
          v14 = *(unsigned __int8 *)(v5 + v7 + 1);
          if (v14 <= 0x10)
            v14 = 16;
          v15 = 1220542 * v14 - 19528672;
          v16 = ((v15 + v11) >> 20) & ~((v15 + v11) >> 31);
          if (v16 >= 255)
            LOBYTE(v16) = -1;
          *v8 = v16;
          v17 = ((v15 + v12) >> 20) & ~((v15 + v12) >> 31);
          if (v17 >= 255)
            LOBYTE(v17) = -1;
          v8[1] = v17;
          v18 = ((v15 + v13) >> 20) & ~((v15 + v13) >> 31);
          if (v18 >= 255)
            LOBYTE(v18) = -1;
          v8[2] = v18;
          v8[3] = -1;
          v19 = *(unsigned __int8 *)(v5 + v7 + 3);
          if (v19 <= 0x10)
            v19 = 16;
          v20 = 1220542 * v19 - 19528672;
          v21 = ((v20 + v11) >> 20) & ~((v20 + v11) >> 31);
          if (v21 >= 255)
            LOBYTE(v21) = -1;
          v8[4] = v21;
          v22 = ((v20 + v12) >> 20) & ~((v20 + v12) >> 31);
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          v8[5] = v22;
          v23 = ((v20 + v13) >> 20) & ~((v20 + v13) >> 31);
          if (v23 >= 255)
            LOBYTE(v23) = -1;
          v8[6] = v23;
          v8[7] = -1;
          v7 += 4;
          v8 += 8;
          v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        v4 = *(_QWORD *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1002D4C10(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_1002D4C34(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v2 = *a2;
  v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        v7 = 0;
        v8 = (_BYTE *)(*(_QWORD *)(result + 8) + *(_QWORD *)(result + 16) * v2);
        do
        {
          v9 = *(unsigned __int8 *)(v5 + v7 + 3) - 128;
          v10 = *(unsigned __int8 *)(v5 + v7 + 1) - 128;
          v11 = 1673527 * v10 + 0x80000;
          v12 = -852492 * v10 - 409993 * v9 + 0x80000;
          v13 = 2116026 * v9 + 0x80000;
          v14 = *(unsigned __int8 *)(v5 + v7);
          if (v14 <= 0x10)
            v14 = 16;
          v15 = 1220542 * v14 - 19528672;
          v16 = ((v15 + v11) >> 20) & ~((v15 + v11) >> 31);
          if (v16 >= 255)
            LOBYTE(v16) = -1;
          *v8 = v16;
          v17 = ((v15 + v12) >> 20) & ~((v15 + v12) >> 31);
          if (v17 >= 255)
            LOBYTE(v17) = -1;
          v8[1] = v17;
          v18 = ((v15 + v13) >> 20) & ~((v15 + v13) >> 31);
          if (v18 >= 255)
            LOBYTE(v18) = -1;
          v8[2] = v18;
          v8[3] = -1;
          v19 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v19 <= 0x10)
            v19 = 16;
          v20 = 1220542 * v19 - 19528672;
          v21 = ((v20 + v11) >> 20) & ~((v20 + v11) >> 31);
          if (v21 >= 255)
            LOBYTE(v21) = -1;
          v8[4] = v21;
          v22 = ((v20 + v12) >> 20) & ~((v20 + v12) >> 31);
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          v8[5] = v22;
          v23 = ((v20 + v13) >> 20) & ~((v20 + v13) >> 31);
          if (v23 >= 255)
            LOBYTE(v23) = -1;
          v8[6] = v23;
          v8[7] = -1;
          v7 += 4;
          v8 += 8;
          v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        v4 = *(_QWORD *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1002D4DC4(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002D4DEC(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002D4E10(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint16x8_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  int v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  _BYTE v29[8];
  int v30;
  int8x8x4_t v31;

  sub_100298C2C(v29, &off_100451BA0);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 < v5 && *(int *)(a1 + 40) >= 1)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 24) + v6 * v4;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 8) + v8 * v4;
    v10 = (uint16x8_t)vdupq_n_s16(0x8081u);
    do
    {
      v11 = *(unsigned int *)(a1 + 40);
      if ((int)v11 < 1)
        goto LABEL_5;
      if (v11 >= 8
        && ((v12 = 4 * (v11 - 1), v7 < v9 + v12 + 4) ? (v13 = v9 >= v7 + v12 + 4) : (v13 = 1), v13))
      {
        v14 = v11 & 0x7FFFFFF8;
        v15 = 4 * (v11 & 0xFFFFFFF8);
        v16 = (unsigned __int8 *)(v9 + v15);
        v17 = (_BYTE *)(v7 + v15);
        v18 = v11 & 0xFFFFFFF8;
        v19 = (const char *)v9;
        v20 = (char *)v7;
        do
        {
          v21.i64[0] = 0x80008000800080;
          v21.i64[1] = 0x80008000800080;
          v31 = vld4_s8(v19);
          v19 += 32;
          v22 = vmlal_u8(v21, (uint8x8_t)v31.val[3], (uint8x8_t)v31.val[0]);
          v31.val[0] = vshrn_n_s16(vuzp2q_s16((int16x8_t)vmull_u16(*(uint16x4_t *)v22.i8, *(uint16x4_t *)v10.i8), (int16x8_t)vmull_high_u16(v22, v10)), 7uLL);
          v22.i64[0] = 0x80008000800080;
          v22.i64[1] = 0x80008000800080;
          v23 = vmlal_u8(v22, (uint8x8_t)v31.val[3], (uint8x8_t)v31.val[1]);
          v31.val[1] = vshrn_n_s16(vuzp2q_s16((int16x8_t)vmull_u16(*(uint16x4_t *)v23.i8, *(uint16x4_t *)v10.i8), (int16x8_t)vmull_high_u16(v23, v10)), 7uLL);
          v23.i64[0] = 0x80008000800080;
          v23.i64[1] = 0x80008000800080;
          v24 = vmlal_u8(v23, (uint8x8_t)v31.val[3], (uint8x8_t)v31.val[2]);
          v31.val[2] = vshrn_n_s16(vuzp2q_s16((int16x8_t)vmull_u16(*(uint16x4_t *)v24.i8, *(uint16x4_t *)v10.i8), (int16x8_t)vmull_high_u16(v24, v10)), 7uLL);
          vst4_s8(v20, v31);
          v20 += 32;
          v18 -= 8;
        }
        while (v18);
        if (v14 == v11)
          goto LABEL_4;
      }
      else
      {
        LODWORD(v14) = 0;
        v16 = (unsigned __int8 *)v9;
        v17 = (_BYTE *)v7;
      }
      v25 = v11 - v14;
      do
      {
        v26 = v16[1];
        v27 = v16[2];
        v28 = v16[3];
        *v17 = (unsigned __int16)(v28 * *v16 + 128) / 0xFFu;
        v17[1] = (unsigned __int16)(v28 * v26 + 128) / 0xFFu;
        v17[2] = (unsigned __int16)(v28 * v27 + 128) / 0xFFu;
        v17[3] = v28;
        v17 += 4;
        v16 += 4;
        --v25;
      }
      while (v25);
LABEL_4:
      v8 = *(_QWORD *)(a1 + 16);
      v6 = *(_QWORD *)(a1 + 32);
      v5 = a2[1];
LABEL_5:
      ++v4;
      v9 += v8;
      v7 += v6;
    }
    while (v4 < v5);
  }
  if (v30)
    sub_1002989D0(v29);
}

void sub_1002D4FE8(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1002D500C(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _BYTE v17[8];
  int v18;

  sub_100298C2C(v17, &off_100451C00);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 < v5 && *(int *)(a1 + 40) >= 1)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = (_BYTE *)(*(_QWORD *)(a1 + 24) + v6 * v4);
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 8) + v8 * v4;
    do
    {
      v10 = *(_DWORD *)(a1 + 40);
      if (v10 >= 1)
      {
        v11 = (_BYTE *)(v9 + 3);
        v12 = v7;
        do
        {
          v16 = *v11;
          if (*v11)
          {
            v13 = (unsigned __int16)((v16 >> 1) - *(v11 - 3) + (*(v11 - 3) << 8))
                / v16;
            v14 = (unsigned __int16)((v16 >> 1) - *(v11 - 2) + (*(v11 - 2) << 8))
                / v16;
            v15 = (unsigned __int16)((v16 >> 1) - *(v11 - 1) + (*(v11 - 1) << 8))
                / v16;
          }
          else
          {
            LOBYTE(v13) = 0;
            LOBYTE(v14) = 0;
            LOBYTE(v15) = 0;
          }
          *v12 = v13;
          v12[1] = v14;
          v12[2] = v15;
          v12[3] = v16;
          v12 += 4;
          v11 += 4;
          --v10;
        }
        while (v10);
        v8 = *(_QWORD *)(a1 + 16);
        v6 = *(_QWORD *)(a1 + 32);
        v5 = a2[1];
      }
      ++v4;
      v9 += v8;
      v7 += v6;
    }
    while (v4 < v5);
  }
  if (v18)
    sub_1002989D0(v17);
}

unsigned int *sub_1002D5138()
{
  unsigned int *v0;
  unsigned int *v1;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;

  xmmword_1004AE690 = xmmword_1003BFE30;
  *(_OWORD *)&qword_1004AE6A0 = xmmword_1003BFE40;
  unk_1004AE6B0 = xmmword_1003BFE50;
  xmmword_1004AE6C0 = xmmword_1003BFE60;
  qword_1004AE6D0 = 0x3FEE68427418D691;
  xmmword_1004AE6E0 = xmmword_1003BFE70;
  *(_OWORD *)&qword_1004AE6F0 = xmmword_1003BFE80;
  xmmword_1004AE700 = xmmword_1003BFE90;
  *(_OWORD *)&qword_1004AE710 = xmmword_1003BFEA0;
  qword_1004AE720 = 0x3FF0EABEF06B3786;
  xmmword_1004AE670 = xmmword_1003BFEB0;
  qword_1004AE680 = 0x3FF16B8950763A19;
  sub_100289608((unsigned int *)&v4, 2048);
  sub_100289608(&v3, 3);
  sub_1002899DC((int *)&v4, &v3, &v5);
  dword_1004AE504 = v5;
  sub_100289608((unsigned int *)&dword_1004AE508, -134);
  v0 = sub_100289608((unsigned int *)algn_1004AE50C, 220);
  sub_10028976C(v0, (unsigned int *)&dword_1004AE508, &dword_1004AE510);
  sub_100289608((unsigned int *)&dword_1004AE514, -140);
  v1 = sub_100289608(&dword_1004AE518, 122);
  sub_10028976C(v1, (unsigned int *)&dword_1004AE514, &dword_1004AE51C);
  sub_100289D28(&v5, 809);
  sub_100289D28(&v4, 20000);
  sub_10028A5A4(&v5, &v4, &qword_1004AE578);
  sub_100289D28(&v5, 7827);
  sub_100289D28(&v4, 2500000);
  sub_10028A5A4(&v5, &v4, &qword_1004AE580);
  sub_100289D28(&v5, 323);
  sub_100289D28(&v4, 25);
  sub_10028A5A4(&v5, &v4, &qword_1004AE588);
  sub_100289D28(&v5, 12);
  sub_100289D28(&v4, 5);
  sub_10028A5A4(&v5, &v4, &qword_1004AE590);
  sub_100289D28(&v5, 11);
  sub_100289D28(&v4, 200);
  sub_10028A5A4(&v5, &v4, &qword_1004AE598);
  sub_100289608((unsigned int *)&v5, 216);
  sub_100289608((unsigned int *)&v4, 24389);
  sub_1002899DC((int *)&v5, (unsigned int *)&v4, &dword_1004AE520);
  sub_100289608((unsigned int *)&v5, 841);
  sub_100289608((unsigned int *)&v4, 108);
  sub_1002899DC((int *)&v5, (unsigned int *)&v4, dword_1004AE524);
  sub_100289608((unsigned int *)&v5, 16);
  sub_100289608((unsigned int *)&v4, 116);
  sub_1002899DC((int *)&v5, (unsigned int *)&v4, &dword_1004AE524[1]);
  return sub_100289608((unsigned int *)&dword_1004AE52C, 255);
}

double sub_1002D53D8(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v5;
  uint64_t v6;

  if (!a1 || !a2)
  {
    v5 = 0;
    v6 = 0;
    sub_100294B74(-27, &v5, "cvStartReadChainPoints", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 60);
  }
  if (*(_DWORD *)(a1 + 44) != 1 || *(int *)(a1 + 4) <= 103)
  {
    v5 = 0;
    v6 = 0;
    sub_100294B74(-201, &v5, "cvStartReadChainPoints", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 63);
  }
  sub_10021EEC4(a1, a2, 0);
  *(_QWORD *)(a2 + 68) = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(a2 + 76) = -16711679;
  *(_BYTE *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 81) = -1;
  *(_QWORD *)&result = 130816;
  *(_DWORD *)(a2 + 85) = 130816;
  *(_WORD *)(a2 + 89) = 257;
  *(_BYTE *)(a2 + 91) = 1;
  return result;
}

void sub_1002D54C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D54F8(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  uint64_t v13;
  BOOL v14;
  int v15;
  BOOL v16;
  int v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t i;
  unint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  int v64;
  _DWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[5];

  if (!a2)
  {
    v71[0] = 0;
    v71[1] = 0;
    sub_100294B74(-27, v71, "cvStartFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 188);
  }
  v13 = sub_1001F68F4(a1, (uint64_t)v71, 0, 0);
  v14 = (*(_DWORD *)v13 & 0xFFF) == 4;
  if (a4 == 2 && v14)
    v15 = 4;
  else
    v15 = a4;
  v66 = v15;
  if (v15 != 4)
    v14 = 0;
  v16 = v15 < 4 && (*(_DWORD *)v13 & 0xFFE) == 0;
  if (!v16 && !v14)
  {
    v69 = 0;
    v70 = 0;
    qmemcpy((void *)sub_10029430C(&v69, 119), "[Start]FindContours supports only CV_8UC1 images when mode != CV_RETR_FLOODFILL otherwise supports CV_32SC1 images only", 119);
    sub_100294B74(-210, &v69, "cvStartFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 199);
  }
  v67 = *(unsigned int *)(v13 + 36);
  v68 = *(unsigned int *)(v13 + 32);
  v17 = *(_DWORD *)(v13 + 4);
  v18 = *(char **)(v13 + 24);
  if (a5 >= 5)
  {
    v69 = 0;
    v70 = 0;
    sub_100294B74(-211, &v69, "cvStartFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 206);
  }
  if (a5)
    v19 = 128;
  else
    v19 = 104;
  if (v19 > a3)
  {
    v69 = 0;
    v70 = 0;
    sub_100294B74(-201, &v69, "cvStartFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 209);
  }
  v64 = a7;
  v65 = (_DWORD *)v13;
  v20 = sub_1001D450C(0x598uLL);
  bzero((void *)(v20 + 16), 0x588uLL);
  *(_QWORD *)v20 = a2;
  *(_QWORD *)(v20 + 8) = a2;
  v21 = a2;
  v22 = &v18[v17];
  v63 = v18;
  *(_QWORD *)(v20 + 80) = v18;
  *(_QWORD *)(v20 + 88) = v22;
  *(_DWORD *)(v20 + 96) = v17;
  *(_DWORD *)(v20 + 100) = v67 - 1;
  v23 = v68 - 1;
  *(_DWORD *)(v20 + 104) = v68 - 1;
  *(_DWORD *)(v20 + 376) = v66;
  *(_QWORD *)(v20 + 108) = a6;
  *(_QWORD *)(v20 + 116) = 0x100000001;
  *(_QWORD *)(v20 + 128) = 0x200000001;
  *(_QWORD *)(v20 + 224) = 0;
  *(_QWORD *)(v20 + 232) = v20 + 272;
  *(_DWORD *)(v20 + 264) = 1;
  *(_QWORD *)(v20 + 216) = 0;
  *(_QWORD *)(v20 + 248) = (v68 << 32) | v67;
  *(_DWORD *)(v20 + 380) = 0;
  *(_DWORD *)(v20 + 272) = 0x8000;
  *(_DWORD *)(v20 + 368) = a5;
  *(_DWORD *)(v20 + 372) = a5;
  if ((a5 - 3) >= 2)
  {
    if (a5)
    {
      v26 = 20492;
      *(_DWORD *)(v20 + 384) = 20492;
      *(_DWORD *)(v20 + 388) = a3;
      v25 = 8;
      *(_DWORD *)(v20 + 392) = 8;
      v24 = 20492;
    }
    else
    {
      v26 = 20480;
      *(_DWORD *)(v20 + 384) = 20480;
      *(_DWORD *)(v20 + 388) = a3;
      v25 = 1;
      *(_DWORD *)(v20 + 392) = 1;
      v24 = 20480;
    }
  }
  else
  {
    *(_DWORD *)(v20 + 368) = 0;
    *(_QWORD *)(v20 + 384) = 0x6800005000;
    *(_DWORD *)(v20 + 392) = 1;
    v24 = 20492;
    v25 = 8;
    v26 = 20480;
  }
  *(_DWORD *)(v20 + 400) = a3;
  *(_DWORD *)(v20 + 404) = v25;
  *(_DWORD *)(v20 + 384) = v26;
  *(_DWORD *)(v20 + 396) = v24;
  sub_10021E480(v21, v20 + 32);
  if (a5 <= 2)
  {
    if (v66 < 2)
      goto LABEL_28;
LABEL_31:
    sub_10021E188(*(_QWORD *)(v20 + 8));
    *(_QWORD *)(v20 + 16) = v28;
    *(_QWORD *)(v20 + 24) = sub_100222C34(0, 112, 64, v28);
    if (v17 < 0)
      goto LABEL_32;
    goto LABEL_33;
  }
  sub_10021E188(*(_QWORD *)(v20 + 8));
  *(_QWORD *)v20 = v27;
  if (v66 >= 2)
    goto LABEL_31;
LABEL_28:
  if (v17 < 0)
  {
LABEL_32:
    v69 = 0;
    v70 = 0;
    v29 = sub_10029430C(&v69, 9);
    *(_BYTE *)(v29 + 8) = 48;
    *(_QWORD *)v29 = *(_QWORD *)"step >= 0";
    sub_100294B74(-215, &v69, "cvStartFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 289);
  }
LABEL_33:
  if ((int)v68 <= 0)
  {
    v69 = 0;
    v70 = 0;
    *(_OWORD *)sub_10029430C(&v69, 16) = *(_OWORD *)"size.height >= 1";
    sub_100294B74(-215, &v69, "cvStartFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 290);
  }
  if (v64)
  {
    v30 = (((*v65 >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * (*(_BYTE *)v65 & 7))) & 3);
    bzero(v63, (int)v30 * (int)v67);
    bzero(&v63[v17 * (uint64_t)v23], (int)v30 * (int)v67);
    if ((int)v68 >= 3)
    {
      v31 = (int)v30 * ((int)v67 - 1);
      if (v30 <= 7)
      {
        v32 = 1;
        do
        {
          v33 = 0;
          do
          {
            v22[v31 + v33] = 0;
            v22[v33++] = 0;
          }
          while (v30 != v33);
          ++v32;
          v22 += v17;
        }
        while (v32 != v23);
        goto LABEL_42;
      }
      v35 = &v63[v17];
      v36 = &v35[v31];
      v37 = v30 & 0x1FF8;
      if (v30 <= 0x1F)
      {
        v38 = 0;
        v39 = 1;
        while (1)
        {
          if ((unint64_t)-v31 > 0x1F)
          {
            *(_QWORD *)&v22[v31] = 0;
            *(_QWORD *)v22 = 0;
            if (v37 != 8)
            {
              *(_QWORD *)&v22[v31 + 8] = 0;
              *((_QWORD *)v22 + 1) = 0;
              if (v37 != 16)
              {
                *(_QWORD *)&v22[v31 + 16] = 0;
                *((_QWORD *)v22 + 2) = 0;
              }
            }
            v40 = v30 & 0x18;
            if (v37 == v30)
              goto LABEL_47;
          }
          else
          {
            v40 = 0;
          }
          v41 = v30 - v40;
          v42 = &v22[v40];
          v43 = v31 + v40;
          do
          {
            v22[v43] = 0;
            *v42++ = 0;
            ++v43;
            --v41;
          }
          while (v41);
LABEL_47:
          ++v39;
          v22 += v17;
          ++v38;
          if (v39 == v23)
            goto LABEL_42;
        }
      }
      v44 = v30 & 0x1FE0;
      if (v44 == v30)
      {
        v45 = 0;
        v46 = (uint64_t)&v63[v17 + 16 + v31];
        v47 = 1;
        do
        {
          if ((unint64_t)-v31 >= 0x20)
          {
            v49 = 0;
            do
            {
              v50 = (_OWORD *)(v46 + v49);
              *(v50 - 1) = 0uLL;
              *v50 = 0uLL;
              v51 = &v22[v49];
              *(_OWORD *)v51 = 0uLL;
              *((_OWORD *)v51 + 1) = 0uLL;
              v49 += 32;
            }
            while (v44 != v49);
          }
          else
          {
            for (i = 0; i != v30; ++i)
            {
              v22[v31 + i] = 0;
              v22[i] = 0;
            }
          }
          ++v47;
          v22 += v17;
          ++v45;
          v46 += v17;
        }
        while (v47 != v23);
        goto LABEL_42;
      }
      v52 = 0;
      v53 = &v63[v17 + v31];
      v54 = v53 + 16;
      v55 = v44 + v31;
      v56 = 1;
      do
      {
        if ((unint64_t)(&v35[v52 * v17] - &v36[v52 * v17]) >= 0x20)
        {
          v58 = 0;
          do
          {
            v59 = &v54[v58];
            *((_OWORD *)v59 - 1) = 0uLL;
            *(_OWORD *)v59 = 0uLL;
            v60 = &v22[v58];
            *(_OWORD *)v60 = 0uLL;
            *((_OWORD *)v60 + 1) = 0uLL;
            v58 += 32;
          }
          while (v44 != v58);
          v57 = v30 & 0x1FE0;
          if ((v30 & 0x18) != 0)
          {
            v61 = v55;
            v62 = v30 & 0x1FE0;
            do
            {
              *(_QWORD *)&v22[v61] = 0;
              *(_QWORD *)&v22[v62] = 0;
              v62 += 8;
              v61 += 8;
            }
            while (v37 != v62);
            v57 = v30 & 0x1FF8;
            if (v37 == v30)
              goto LABEL_68;
          }
        }
        else
        {
          v57 = 0;
        }
        do
        {
          v53[v57] = 0;
          v22[v57++] = 0;
        }
        while (v30 != v57);
LABEL_68:
        ++v56;
        v22 += v17;
        ++v52;
        v54 += v17;
        v53 += v17;
      }
      while (v56 != v23);
    }
  }
LABEL_42:
  if ((*v65 & 0xFFF) != 4)
    sub_1003558C8((uint64_t)v65, (uint64_t)v65, 0, 0.0, 1.0);
  return v20;
}

void sub_1002D5C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D5C94(_QWORD **a1, double a2, double a3, __n128 a4)
{
  _QWORD **v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int32x2_t *v34;
  int v35;
  int v36;
  int v37;
  __int32 v38;
  __int32 v39;
  char *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  BOOL v44;
  __int32 *v45;
  int v46;
  int32x2_t v47;
  unsigned int *v48;
  unsigned int v49;
  int32x2_t v50;
  __n128 v51;
  int32x2_t v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int32x2_t *v58;
  char *k;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  __int32 *v65;
  int32x2_t v66;
  int v67;
  int32x2_t v68;
  __n128 v69;
  int32x2_t v70;
  _BYTE *v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  BOOL v75;
  int32x2_t *v76;
  int v77;
  unsigned int *v78;
  int32x2_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int32x2_t *v84;
  int8x8_t v85;
  __n128 v86;
  char *n;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char v92;
  _BYTE *v93;
  int v94;
  _BYTE *v95;
  int32x2_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  int32x2_t *v101;
  int8x8_t v102;
  __n128 v103;
  int v104;
  char *m;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char v109;
  __int32 *v110;
  int32x2_t *v111;
  _QWORD **v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  _BYTE *v120;
  int8x8_t v121;
  __n128 v122;
  int32x2_t v123;
  __int128 v124;
  int v125;
  int32x2_t *v126;
  _DWORD *v127;
  char *v128;
  int32x2_t *v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  _DWORD *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  _DWORD *v138;
  _DWORD *i;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  _DWORD *v143;
  char *v144;
  int v145;
  unint64_t v146;
  uint64_t v147;
  BOOL v148;
  char *v149;
  char *j;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  int32x2_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char v159;
  _BYTE *v160;
  int8x8_t v161;
  __n128 v162;
  int32x2_t v163;
  int32x2_t v164;
  __int128 v165;
  int32x2_t *v166;
  int32x2_t *v167;
  int v168;
  _QWORD *v169;
  _QWORD *v170;
  _BOOL4 v172;
  unsigned int v173;
  int v174;
  _QWORD *v175;
  int32x2_t *v176;
  int v177;
  int v178;
  int v179;
  uint64_t v180;
  int v181;
  _QWORD *v182;
  int32x2_t *v183;
  int v184;
  int v185;
  int v186;
  uint64_t v187;
  unsigned int v188;
  int v189;
  _QWORD **v190;
  uint64_t *v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  __n128 v195;
  int v196;
  uint64_t v197;
  int32x2_t v198;
  int v199;
  _QWORD *v200;
  unsigned int v201;
  int v202;
  int v203;
  _DWORD *v204;
  int v205;
  int v206;
  int v207;
  int v208;
  uint64_t v209;
  int32x2_t *v210;
  unsigned int *v211;
  _BYTE *v212;
  int v213;
  uint64_t v214;
  int v216;
  __n128 v217;
  char *v218;
  __n128 v219;
  int32x2_t *v220;
  _QWORD v221[3];
  _QWORD *v222;
  unint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;

  v4 = a1;
  if (!a1)
  {
    v224 = 0uLL;
    sub_100294B74(-27, (uint64_t *)&v224, "cvFindNextContour", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1012);
  }
  if (((_DWORD)a1[12] & 0x80000000) != 0)
  {
    v224 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v224, 22), "scanner->img_step >= 0", 22);
    sub_100294B74(-215, (uint64_t *)&v224, "cvFindNextContour", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1018);
  }
  v5 = a1[17];
  if (v5)
  {
    if (*((_DWORD *)a1 + 95))
    {
      sub_10021E480((uint64_t)a1[1], (uint64_t)&v224);
      v4 = a1;
      if ((_QWORD *)v224 == a1[8] && DWORD2(v224) == *((_DWORD *)a1 + 18))
      {
        sub_10021E508((uint64_t)a1[1], (uint64_t *)a1 + 6);
        v4 = a1;
      }
      *((_DWORD *)v4 + 95) = 0;
    }
    v6 = v5[3];
    if (v6)
    {
      sub_100223CF8(v6, *(_QWORD *)(v5[2] + 24), (uint64_t)(v4 + 34));
      v4 = a1;
    }
    v4[17] = 0;
  }
  v7 = v4[11];
  v8 = *((unsigned int *)v4 + 30);
  v216 = *((_DWORD *)v4 + 26);
  v9 = *((_DWORD *)v4 + 94);
  v10 = *((int *)v4 + 29) - 1;
  if (v9 == 4)
  {
    v11 = *((_DWORD *)v7 + v10);
    v12 = -1073741824;
    if ((int)v8 >= v216)
      return 0;
  }
  else
  {
    v11 = *((char *)v7 + v10);
    v12 = -2;
    if ((int)v8 >= v216)
      return 0;
  }
  v13 = *((_DWORD *)v4 + 24);
  v14 = *((int *)v4 + 25);
  v15 = v13;
  v16 = v13 >> 2;
  v17 = v4[10];
  v181 = v13 >> 2;
  v182 = v17;
  if (v9 != 4)
    v17 = 0;
  v175 = v17;
  v192 = v12;
  v203 = ~v12;
  v205 = v13 >> 2;
  HIDWORD(v180) = -v16;
  LODWORD(v180) = 1 - v16;
  v179 = ~v16;
  v19 = *((_DWORD *)v4 + 31);
  LODWORD(v18) = *((_DWORD *)v4 + 32);
  v178 = v16 - 1;
  v177 = v16 + 1;
  v196 = *((_DWORD *)v4 + 33);
  HIDWORD(v187) = -v13;
  LODWORD(v187) = 1 - v13;
  v186 = ~v13;
  v188 = *((_DWORD *)v4 + 24);
  v184 = v13 + 1;
  v185 = v13 - 1;
  v190 = v4 + 26;
  v191 = (uint64_t *)(v4 + 6);
  v176 = (int32x2_t *)(v4 + 18);
  v20 = *((_DWORD *)v4 + 29);
  v214 = v13;
  v189 = *((_DWORD *)v4 + 94);
  while (1)
  {
    v21 = v9 == 4 ? v7 : 0;
    if (v20 < (int)v14)
      break;
LABEL_22:
    v11 = 0;
    v19 = 0;
    v18 = (v8 + 1);
    v7 = (_QWORD *)((char *)v7 + v15);
    v20 = 1;
    v8 = v18;
    if ((_DWORD)v18 == v216)
      return 0;
  }
  v22 = v205 * (uint64_t)(int)v18;
  v209 = v8 << 32;
  a4.n128_u64[0] = (unint64_t)vdup_n_s32(v8);
  v23 = (int)v15 * (uint64_t)(int)v18;
  while (1)
  {
    if (v21)
    {
      if (v20 >= (int)v14)
        goto LABEL_22;
      v24 = v20;
      while (1)
      {
        v25 = *((_DWORD *)v21 + v24);
        if (v25 != v11 && ((v25 ^ v11) & v203) != 0)
          break;
        ++v24;
        v11 = v25;
        if (v14 == v24)
          goto LABEL_21;
      }
    }
    else
    {
      if (v20 >= (int)v14)
        goto LABEL_22;
      v24 = v20;
      while (1)
      {
        v25 = *((char *)v7 + v24);
        if (v11 != v25)
          break;
        if (v14 == ++v24)
          goto LABEL_21;
      }
    }
    if ((int)v14 <= (int)v24)
    {
LABEL_21:
      v15 = v214;
      goto LABEL_22;
    }
    if (v21)
      break;
    if (!v11 && v25 == 1)
      goto LABEL_56;
    if (!v25 && v11 >= 1)
    {
      v25 = 0;
      v33 = v11 & v192;
      v28 = v24 - 1;
      if (v33)
        v19 = v24 - 1;
      if (v9)
      {
LABEL_67:
        v202 = v18;
        v197 = v8;
        v200 = v7;
        if (v9 < 2)
        {
          v30 = 0;
          v31 = 1;
          v32 = v28;
          v29 = 1;
          goto LABEL_79;
        }
        v30 = 0;
        v31 = 0;
        v29 = 1;
        v32 = v28;
        v198 = (int32x2_t)v190;
        if (v19 < 1)
          goto LABEL_80;
        goto LABEL_73;
      }
    }
LABEL_302:
    if (v25 >= 2)
      v19 = v24;
    v20 = v24 + 1;
    v11 = v25;
    v15 = v214;
    if ((int)v24 + 1 >= (int)v14)
      goto LABEL_22;
  }
  v27 = (v11 & v192) != 0 || v11 == 0;
  if (!v27 || (v25 & v192) != 0)
  {
    if ((v192 & (v11 | v25)) == 0)
    {
      v28 = v24 - 1;
      if (v9)
        goto LABEL_67;
    }
    goto LABEL_302;
  }
LABEL_56:
  if (!v9)
  {
    if (*((char *)v182 + v23 + v19) <= 0)
    {
      v202 = v18;
      v197 = v8;
      v200 = v7;
LABEL_71:
      v29 = 0;
      v31 = 1;
      v32 = v24;
      v30 = 1;
      goto LABEL_79;
    }
    goto LABEL_302;
  }
  v200 = v7;
  v197 = v8;
  v202 = v18;
  if (v9 < 2)
    goto LABEL_71;
  if (v19 < 1)
  {
    v31 = 0;
    v29 = 0;
    v30 = 1;
    goto LABEL_78;
  }
  v29 = 0;
  v30 = 1;
  if (v9 == 2)
  {
    v31 = 0;
LABEL_78:
    v32 = v24;
LABEL_79:
    v198 = (int32x2_t)v190;
    goto LABEL_80;
  }
  v28 = v24;
  v31 = 0;
  v32 = v24;
  v198 = (int32x2_t)v190;
  if (v9 == 4)
    goto LABEL_80;
LABEL_73:
  if (v175)
  {
    v34 = (int32x2_t *)v4[(*((_DWORD *)v175 + v22 + v19) & 0x7F) + 51];
    if (!v34)
      goto LABEL_310;
  }
  else
  {
    v34 = (int32x2_t *)v4[(*((_BYTE *)v182 + v23 + v19) & 0x7F) + 51];
    if (!v34)
      goto LABEL_310;
  }
  v126 = 0;
  v127 = (_DWORD *)v21 + v19;
  v128 = (char *)v200 + v19;
  while (2)
  {
    if ((v19 - v34[4].i32[0]) >= v34[5].i32[0] || (v202 - v34[4].i32[1]) >= v34[5].i32[1])
    {
      v129 = v126;
      goto LABEL_232;
    }
    v129 = v34;
    if (!v126)
    {
LABEL_232:
      v34 = (int32x2_t *)v34[1];
      v126 = v129;
      if (!v34)
        goto LABEL_271;
      continue;
    }
    break;
  }
  v130 = v126[6].i32[0];
  v131 = v126[6].i32[1];
  v132 = v126[7].u32[0];
  if (v175)
  {
    v133 = (_DWORD *)v175 + v131 * (uint64_t)v205 + v130;
    v134 = *v133 & 0x3FFFFFFF;
    LODWORD(v224) = 1;
    *(_QWORD *)((char *)&v224 + 4) = v180;
    HIDWORD(v224) = v179;
    LODWORD(v225) = -1;
    *(_QWORD *)((char *)&v225 + 4) = __PAIR64__(v181, v178);
    HIDWORD(v225) = v177;
    v226 = v224;
    v227 = v225;
    LODWORD(v132) = v132 == 0;
    v135 = 4 * v132;
    LOBYTE(v132) = 4 * v132;
    do
    {
      v132 = ((_BYTE)v132 - 1) & 7;
      v136 = *((int *)&v224 + v132);
    }
    while (v132 != v135 && (v133[v136] & 0x3FFFFFFF) != v134);
    if (v132 != v135)
    {
      v138 = &v133[v136];
      for (i = v133; ; i = v143)
      {
        do
        {
          v140 = v132;
          v141 = (char *)&v224 + 4 * v132++;
          v142 = *((int *)v141 + 1);
        }
        while (v140 <= 0xD && (i[v142] & 0x3FFFFFFF) != v134);
        if (i == v127)
          break;
        v143 = &i[v142];
        if (i == v138 && v143 == v133)
        {
          v133 = v138;
          goto LABEL_252;
        }
        v132 = ((_BYTE)v132 + 4) & 7;
      }
      goto LABEL_271;
    }
LABEL_252:
    v129 = v34;
    if (v133 == v127)
      goto LABEL_271;
    goto LABEL_232;
  }
  v144 = (char *)v182 + v131 * (uint64_t)(int)v214 + v130;
  LODWORD(v224) = 1;
  *(_QWORD *)((char *)&v224 + 4) = v187;
  HIDWORD(v224) = v186;
  LODWORD(v225) = -1;
  *(_QWORD *)((char *)&v225 + 4) = __PAIR64__(v188, v185);
  HIDWORD(v225) = v184;
  v226 = v224;
  v227 = v225;
  v145 = 4 * (v132 == 0);
  LOBYTE(v146) = 4 * (v132 == 0);
  do
  {
    LODWORD(v146) = ((_BYTE)v146 - 1) & 7;
    v147 = *((int *)&v224 + v146);
    if (v144[v147])
      v148 = 1;
    else
      v148 = (_DWORD)v146 == v145;
  }
  while (!v148);
  if ((_DWORD)v146 == v145)
  {
LABEL_270:
    v129 = v34;
    if (v144 == v128)
      goto LABEL_271;
    goto LABEL_232;
  }
  v149 = &v144[v147];
  for (j = v144; ; j = v154)
  {
    v146 = v146;
    do
    {
      v151 = v146;
      v152 = (char *)&v224 + 4 * v146++;
      v153 = *((int *)v152 + 1);
    }
    while (v151 <= 0xD && !j[v153]);
    if (j == v128)
      break;
    v154 = &j[v153];
    if (j == v149 && v154 == v144)
    {
      v144 = v149;
      goto LABEL_270;
    }
    LODWORD(v146) = ((_BYTE)v146 + 4) & 7;
  }
LABEL_271:
  if (!v126)
  {
LABEL_310:
    v224 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v224, 13), "par_info != 0", 13);
    sub_100294B74(-215, (uint64_t *)&v224, "cvFindNextContour", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1182);
  }
  v155 = (int32x2_t)v126;
  if (v126[7].i32[0] == v29)
  {
    v155 = (int32x2_t)v190;
    if (v126[2])
      v155 = v126[2];
  }
  v198 = v155;
  if (!*(_QWORD *)(*(_QWORD *)&v155 + 24))
  {
    v7 = v200;
    v8 = v197;
    LODWORD(v18) = v202;
    goto LABEL_302;
  }
  v31 = 0;
  v32 = v28;
LABEL_80:
  v206 = v32;
  v201 = v29;
  v193 = v23;
  v194 = v22;
  v195 = a4;
  v204 = v21;
  sub_10021E480((uint64_t)v4[1], (uint64_t)v191);
  v210 = (int32x2_t *)sub_10021E968(*((_DWORD *)a1 + 96), *((int *)a1 + 97), *((int *)a1 + 98), (uint64_t)*a1);
  if (v30)
    v35 = 0;
  else
    v35 = 0x8000;
  v210->i32[0] |= v35;
  if (!v31)
  {
    v220 = 0;
    sub_100222D30((uint64_t)a1[3], 0, &v220);
    v183 = v220;
    if (v204)
    {
      v46 = v204[v206];
      v47 = *(int32x2_t *)((char *)a1 + 108);
      v207 = *((_DWORD *)a1 + 92);
      v48 = &v204[(int)v24 - v29];
      v49 = *v48;
      LODWORD(v224) = 1;
      *(_QWORD *)((char *)&v224 + 4) = v180;
      HIDWORD(v224) = v179;
      LODWORD(v225) = -1;
      *(_QWORD *)((char *)&v225 + 4) = __PAIR64__(v181, v178);
      HIDWORD(v225) = v177;
      v226 = v224;
      v227 = v225;
      sub_10021F470(v210, (uint64_t)v221);
      v51 = v195;
      v51.n128_u32[0] = v206;
      v52 = vadd_s32(v47, (int32x2_t)v51.n128_u64[0]);
      if (v207 <= 0)
        v210[12] = v52;
      v174 = v46 & 0x7F;
      v53 = v49 & 0x3FFFFFFF;
      v54 = ~((unsigned __int32)v210->i32[0] >> 13) & 4;
      LOBYTE(v55) = v54;
      do
      {
        v55 = ((_BYTE)v55 - 1) & 7;
        v56 = *((int *)&v224 + v55);
      }
      while ((v48[v56] & 0x3FFFFFFF) != v53 && v55 != v54);
      if (v55 == v54)
      {
        *v48 = v49 | 0xC0000000;
        if (v207 >= 1)
        {
          v58 = (int32x2_t *)v222;
          if ((unint64_t)v222 >= v223)
          {
            sub_10021F7C0(v221);
            v58 = (int32x2_t *)v222;
          }
          *v58 = v52;
          ++v222;
        }
        v217.n128_u64[0] = (unint64_t)v52;
      }
      else
      {
        v211 = &v48[v56];
        v77 = v55 ^ 4;
        v78 = v48;
        v79 = v52;
        v51.n128_u64[0] = (unint64_t)v52;
        if (v207 < 1)
        {
          v217 = v51;
          while (1)
          {
            v116 = v55;
            do
            {
              v117 = v116;
              v118 = *((int *)&v224 + ++v116);
            }
            while (v117 <= 0xD && (v78[v118] & 0x3FFFFFFF) != v53);
            v119 = v49 | 0xC0000000;
            if ((v116 & 7) - 1 < v55 || (v119 = v49 & 0x3FFFFFFF | 0x40000000, *v78 == v53))
              *v78 = v119;
            v120 = v222;
            if ((unint64_t)v222 >= v223)
            {
              sub_10021F7C0(v221);
              v120 = v222;
            }
            *v120 = v116 & 7;
            v222 = (_QWORD *)((char *)v222 + 1);
            v51.n128_u32[0] = v77;
            v50.i32[0] = v116 & 7;
            v121 = (int8x8_t)vdup_lane_s32(vceq_s32(v50, (int32x2_t)v51.n128_u64[0]), 0);
            v122.n128_u64[1] = v217.n128_u64[1];
            v52 = (int32x2_t)vbsl_s8(v121, (int8x8_t)v52, vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v217.n128_u64[0], v79), (int8x8_t)v52, (int8x8_t)vmax_s32(v79, v52)));
            v50 = vmin_s32(v79, (int32x2_t)v217.n128_u64[0]);
            v122.n128_u64[0] = (unint64_t)vbsl_s8(v121, (int8x8_t)v217.n128_u64[0], (int8x8_t)v50);
            v217 = v122;
            if (v78 == v211 && &v78[v118] == v48)
              break;
            v51.n128_u64[0] = *((_QWORD *)&unk_1003C0E68 + (v116 & 7));
            v79 = vadd_s32((int32x2_t)v51.n128_u64[0], v79);
            v55 = ((_BYTE)v116 + 4) & 7;
            v78 += v118;
            v77 = v116 & 7;
          }
        }
        else
        {
          v217 = v51;
          while (1)
          {
            v80 = v55;
            do
            {
              v81 = v80;
              v82 = *((int *)&v224 + ++v80);
            }
            while (v81 <= 0xD && (v78[v82] & 0x3FFFFFFF) != v53);
            v83 = v49 | 0xC0000000;
            if ((v80 & 7) - 1 < v55 || (v83 = v49 & 0x3FFFFFFF | 0x40000000, *v78 == v53))
              *v78 = v83;
            if (v207 == 1 || (v80 & 7) != v77)
            {
              v84 = (int32x2_t *)v222;
              if ((unint64_t)v222 >= v223)
              {
                sub_10021F7C0(v221);
                v84 = (int32x2_t *)v222;
              }
              *v84 = v79;
              ++v222;
            }
            v51.n128_u32[0] = v77;
            v50.i32[0] = v80 & 7;
            v85 = (int8x8_t)vdup_lane_s32(vceq_s32(v50, (int32x2_t)v51.n128_u64[0]), 0);
            v86.n128_u64[1] = v217.n128_u64[1];
            v52 = (int32x2_t)vbsl_s8(v85, (int8x8_t)v52, vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v217.n128_u64[0], v79), (int8x8_t)v52, (int8x8_t)vmax_s32(v79, v52)));
            v50 = vmin_s32(v79, (int32x2_t)v217.n128_u64[0]);
            v86.n128_u64[0] = (unint64_t)vbsl_s8(v85, (int8x8_t)v217.n128_u64[0], (int8x8_t)v50);
            v217 = v86;
            if (v78 == v211 && &v78[v82] == v48)
              break;
            v51.n128_u64[0] = *((_QWORD *)&unk_1003C0E68 + (v80 & 7));
            v79 = vadd_s32((int32x2_t)v51.n128_u64[0], v79);
            v55 = ((_BYTE)v80 + 4) & 7;
            v78 += v82;
            v77 = v80 & 7;
          }
        }
      }
      sub_10021F68C(v221);
      v123 = vadd_s32(vsub_s32(v52, (int32x2_t)v217.n128_u64[0]), (int32x2_t)0x100000001);
      v115 = (uint64_t)v210;
      if (v207)
      {
        *(_QWORD *)&v124 = v217.n128_u64[0];
        *((int32x2_t *)&v124 + 1) = v123;
        *(_OWORD *)v210[12].i8 = v124;
      }
      v111 = v183;
      v183[4] = (int32x2_t)v217.n128_u64[0];
      v183[5] = v123;
      v112 = a1;
      v113 = v201;
      v114 = v206;
      v125 = v174;
    }
    else
    {
      v66 = *(int32x2_t *)((char *)a1 + 108);
      if ((((_BYTE)v196 + 1) & 0x7F) != 0)
        v67 = 0;
      else
        v67 = 3;
      v208 = *((_DWORD *)a1 + 92);
      LODWORD(v224) = 1;
      *(_QWORD *)((char *)&v224 + 4) = v187;
      HIDWORD(v224) = v186;
      LODWORD(v225) = -1;
      *(_QWORD *)((char *)&v225 + 4) = __PAIR64__(v188, v185);
      HIDWORD(v225) = v184;
      v226 = v224;
      v227 = v225;
      sub_10021F470(v210, (uint64_t)v221);
      v69 = v195;
      v69.n128_u32[0] = v206;
      v70 = vadd_s32(v66, (int32x2_t)v69.n128_u64[0]);
      if (v208 <= 0)
        v210[12] = v70;
      v199 = v67 + (((_BYTE)v196 + 1) & 0x7F);
      v71 = (char *)v200 + (int)v24 - v29;
      v72 = ~((unsigned __int32)v210->i32[0] >> 13) & 4;
      LOBYTE(v73) = v72;
      do
      {
        v73 = ((_BYTE)v73 - 1) & 7;
        v74 = *((int *)&v224 + v73);
        if (v71[v74])
          v75 = 1;
        else
          v75 = v73 == v72;
      }
      while (!v75);
      if (v73 == v72)
      {
        *v71 = v196 | 0x80;
        if (v208 >= 1)
        {
          v76 = (int32x2_t *)v222;
          if ((unint64_t)v222 >= v223)
          {
            sub_10021F7C0(v221);
            v76 = (int32x2_t *)v222;
          }
          *v76 = v70;
          ++v222;
        }
        v219.n128_u64[0] = (unint64_t)v70;
      }
      else
      {
        v212 = &v71[v74];
        v94 = v73 ^ 4;
        v95 = (char *)v200 + (int)v24 - v29;
        v96 = v70;
        v69.n128_u64[0] = (unint64_t)v70;
        if (v208 < 1)
        {
          v219 = v69;
          while (1)
          {
            v156 = v73;
            do
            {
              v157 = v156;
              v158 = *((int *)&v224 + ++v156);
            }
            while (v157 <= 0xD && !v95[v158]);
            v159 = v196 | 0x80;
            if ((v156 & 7) - 1 < v73 || (v159 = v196, *v95 == 1))
              *v95 = v159;
            v160 = v222;
            if ((unint64_t)v222 >= v223)
            {
              sub_10021F7C0(v221);
              v160 = v222;
            }
            *v160 = v156 & 7;
            v222 = (_QWORD *)((char *)v222 + 1);
            v69.n128_u32[0] = v94;
            v68.i32[0] = v156 & 7;
            v161 = (int8x8_t)vdup_lane_s32(vceq_s32(v68, (int32x2_t)v69.n128_u64[0]), 0);
            v162.n128_u64[1] = v219.n128_u64[1];
            v70 = (int32x2_t)vbsl_s8(v161, (int8x8_t)v70, vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v219.n128_u64[0], v96), (int8x8_t)v70, (int8x8_t)vmax_s32(v96, v70)));
            v68 = vmin_s32(v96, (int32x2_t)v219.n128_u64[0]);
            v162.n128_u64[0] = (unint64_t)vbsl_s8(v161, (int8x8_t)v219.n128_u64[0], (int8x8_t)v68);
            v219 = v162;
            if (v95 == v212 && &v95[v158] == v71)
              break;
            v69.n128_u64[0] = *((_QWORD *)&unk_1003C0E68 + (v156 & 7));
            v96 = vadd_s32((int32x2_t)v69.n128_u64[0], v96);
            v73 = ((_BYTE)v156 + 4) & 7;
            v95 += v158;
            v94 = v156 & 7;
          }
        }
        else
        {
          v219 = v69;
          while (1)
          {
            v97 = v73;
            do
            {
              v98 = v97;
              v99 = *((int *)&v224 + ++v97);
            }
            while (v98 <= 0xD && !v95[v99]);
            v100 = v196 | 0x80;
            if ((v97 & 7) - 1 < v73 || (v100 = v196, *v95 == 1))
              *v95 = v100;
            if (v208 == 1 || (v97 & 7) != v94)
            {
              v101 = (int32x2_t *)v222;
              if ((unint64_t)v222 >= v223)
              {
                sub_10021F7C0(v221);
                v101 = (int32x2_t *)v222;
              }
              *v101 = v96;
              ++v222;
            }
            v69.n128_u32[0] = v94;
            v68.i32[0] = v97 & 7;
            v102 = (int8x8_t)vdup_lane_s32(vceq_s32(v68, (int32x2_t)v69.n128_u64[0]), 0);
            v103.n128_u64[1] = v219.n128_u64[1];
            v70 = (int32x2_t)vbsl_s8(v102, (int8x8_t)v70, vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v219.n128_u64[0], v96), (int8x8_t)v70, (int8x8_t)vmax_s32(v96, v70)));
            v68 = vmin_s32(v96, (int32x2_t)v219.n128_u64[0]);
            v103.n128_u64[0] = (unint64_t)vbsl_s8(v102, (int8x8_t)v219.n128_u64[0], (int8x8_t)v68);
            v219 = v103;
            if (v95 == v212 && &v95[v99] == v71)
              break;
            v69.n128_u64[0] = *((_QWORD *)&unk_1003C0E68 + (v97 & 7));
            v96 = vadd_s32((int32x2_t)v69.n128_u64[0], v96);
            v73 = ((_BYTE)v97 + 4) & 7;
            v95 += v99;
            v94 = v97 & 7;
          }
        }
      }
      sub_10021F68C(v221);
      v163.i32[1] = v219.n128_i32[1];
      v163.i32[0] = 1;
      v164.i32[0] = vsub_s32(vadd_s32(v70, v163), (int32x2_t)v219.n128_u64[0]).u32[0];
      v164.i32[1] = vadd_s32(vsub_s32(v70, *(int32x2_t *)&v219), (int32x2_t)(*(unsigned int *)&v219 | 0x100000000)).i32[1];
      v115 = (uint64_t)v210;
      if (v208)
      {
        *(_QWORD *)&v165 = v219.n128_u64[0];
        *((int32x2_t *)&v165 + 1) = v164;
        *(_OWORD *)v210[12].i8 = v165;
      }
      v111 = v183;
      v183[4] = (int32x2_t)v219.n128_u64[0];
      v183[5] = v164;
      v125 = v196;
      v196 = v199;
      v112 = a1;
      v113 = v29;
      v114 = v206;
    }
    v111[4] = vsub_s32(v111[4], *(int32x2_t *)((char *)v112 + 108));
    v166 = (int32x2_t *)&v112[v125];
    v111[1] = v166[51];
    v166[51] = (int32x2_t)v111;
    goto LABEL_294;
  }
  v36 = *((_DWORD *)a1 + 27);
  v37 = *((_DWORD *)a1 + 28);
  v213 = *((_DWORD *)a1 + 92);
  LODWORD(v224) = 1;
  *(_QWORD *)((char *)&v224 + 4) = v187;
  HIDWORD(v224) = v186;
  LODWORD(v225) = -1;
  *(_QWORD *)((char *)&v225 + 4) = __PAIR64__(v188, v185);
  HIDWORD(v225) = v184;
  v226 = v224;
  v227 = v225;
  sub_10021F470(v210, (uint64_t)v221);
  v38 = v36 + v206;
  v39 = v37 + v197;
  if (v213 <= 0)
  {
    v210[12].i32[0] = v38;
    v210[12].i32[1] = v39;
  }
  v40 = (char *)v200 + (int)v24 - v29;
  v41 = ~((unsigned __int32)v210->i32[0] >> 13) & 4;
  LOBYTE(v42) = v41;
  do
  {
    v42 = ((_BYTE)v42 - 1) & 7;
    v43 = *((int *)&v224 + v42);
    if (v40[v43])
      v44 = 1;
    else
      v44 = v42 == v41;
  }
  while (!v44);
  if (v42 != v41)
  {
    v218 = &v40[v43];
    if (v213 > 0)
    {
      if (v213 == 1)
      {
        for (k = (char *)v200 + (int)v24 - v29; ; k += v63)
        {
          v60 = v42;
          v61 = v42;
          do
          {
            v62 = v61;
            v63 = *((int *)&v224 + ++v61);
          }
          while (v62 <= 0xD && !k[v63]);
          if ((v61 & 7) - 1 >= v60)
          {
            if (*k != 1)
              goto LABEL_124;
            v64 = 2;
          }
          else
          {
            v64 = -126;
          }
          *k = v64;
LABEL_124:
          v65 = (__int32 *)v222;
          if ((unint64_t)v222 >= v223)
          {
            sub_10021F7C0(v221);
            v65 = (__int32 *)v222;
          }
          *v65 = v38;
          v65[1] = v39;
          ++v222;
          if (k == v218 && &k[v63] == v40)
            goto LABEL_211;
          v39 += *((_DWORD *)&unk_1003C0E68 + 2 * (v61 & 7) + 1);
          v38 += *((_DWORD *)&unk_1003C0E68 + 2 * (v61 & 7));
          v42 = ((_BYTE)v61 + 4) & 7;
        }
      }
      v104 = v42 ^ 4;
      for (m = (char *)v200 + (int)v24 - v29; ; m += v108)
      {
        v106 = v42;
        do
        {
          v107 = v106;
          v108 = *((int *)&v224 + ++v106);
        }
        while (v107 <= 0xD && !m[v108]);
        if ((v106 & 7) - 1 >= v42)
        {
          if (*m != 1)
            goto LABEL_205;
          v109 = 2;
        }
        else
        {
          v109 = -126;
        }
        *m = v109;
LABEL_205:
        if ((v106 & 7) != v104)
        {
          v110 = (__int32 *)v222;
          if ((unint64_t)v222 >= v223)
          {
            sub_10021F7C0(v221);
            v110 = (__int32 *)v222;
          }
          *v110 = v38;
          v110[1] = v39;
          ++v222;
          v104 = v106 & 7;
        }
        if (m == v218 && &m[v108] == v40)
          goto LABEL_211;
        v39 += *((_DWORD *)&unk_1003C0E68 + 2 * (v106 & 7) + 1);
        v38 += *((_DWORD *)&unk_1003C0E68 + 2 * (v106 & 7));
        v42 = ((_BYTE)v106 + 4) & 7;
      }
    }
    for (n = (char *)v200 + (int)v24 - v29; ; n += v91)
    {
      v88 = v42;
      v89 = v42;
      do
      {
        v90 = v89;
        v91 = *((int *)&v224 + ++v89);
      }
      while (v90 <= 0xD && !n[v91]);
      if ((v89 & 7) - 1 >= v88)
      {
        if (*n != 1)
          goto LABEL_173;
        v92 = 2;
      }
      else
      {
        v92 = -126;
      }
      *n = v92;
LABEL_173:
      v93 = v222;
      if ((unint64_t)v222 >= v223)
      {
        sub_10021F7C0(v221);
        v93 = v222;
      }
      *v93 = v89 & 7;
      v222 = (_QWORD *)((char *)v222 + 1);
      if (n == v218 && &n[v91] == v40)
        goto LABEL_211;
      v42 = ((_BYTE)v89 + 4) & 7;
    }
  }
  *v40 = -126;
  if (v213 < 1)
  {
LABEL_211:
    sub_10021F68C(v221);
    if (v213)
      goto LABEL_212;
  }
  else
  {
    v45 = (__int32 *)v222;
    if ((unint64_t)v222 >= v223)
    {
      sub_10021F7C0(v221);
      v45 = (__int32 *)v222;
    }
    *v45 = v38;
    v45[1] = v39;
    ++v222;
    sub_10021F68C(v221);
LABEL_212:
    sub_100343BB0(v210, 1);
  }
  v111 = v176;
  v112 = a1;
  v113 = v201;
  v114 = v206;
  v115 = (uint64_t)v210;
LABEL_294:
  v111[7].i32[0] = v113;
  v111[6] = (int32x2_t)(v209 | v114);
  v167 = v111;
  v111[2] = v198;
  v111[3] = (int32x2_t)v115;
  v168 = *((_DWORD *)v112 + 93);
  if (*((_DWORD *)v112 + 92) != v168)
  {
    v111[3] = (int32x2_t)sub_1002B18A8(v115, *((_DWORD *)v112 + 100), (uint64_t)v112[1], v168);
    sub_10021E3D8(*a1);
    v112 = a1;
    v169 = v204;
    *(_QWORD *)(*(_QWORD *)&v167[3] + 24) = *(_QWORD *)(*(_QWORD *)&v167[2] + 24);
    if (*(_QWORD *)(*(_QWORD *)&v198 + 24))
      goto LABEL_307;
LABEL_298:
    v167[3] = 0;
    v170 = *v112;
    if (*v112 == v112[1])
      sub_10021E508((uint64_t)v170, v191);
    else
      sub_10021E3D8(v170);
    v7 = v200;
    v25 = *((char *)v200 + (int)v24);
    v4 = a1;
    v8 = v197;
    v9 = v189;
    LODWORD(v18) = v202;
    v21 = v204;
    v23 = v193;
    v22 = v194;
    a4 = v195;
    v19 = v206;
    goto LABEL_302;
  }
  v169 = v204;
  *(_QWORD *)(v115 + 24) = *(_QWORD *)(*(_QWORD *)&v198 + 24);
  if (!*(_QWORD *)(*(_QWORD *)&v198 + 24))
    goto LABEL_298;
LABEL_307:
  v172 = v169 == 0;
  sub_10021E480((uint64_t)v112[1], (uint64_t)(v112 + 8));
  a1[17] = v167;
  v173 = v201;
  if (v172)
    v173 = 0;
  *((_DWORD *)a1 + 29) = v24 - v173 + 1;
  *((_DWORD *)a1 + 30) = v197;
  *((_DWORD *)a1 + 31) = v206;
  *((_DWORD *)a1 + 32) = v202;
  a1[11] = v200;
  *((_DWORD *)a1 + 33) = v196;
  return (uint64_t)v167[3];
}

void sub_1002D71C8()
{
  uint64_t v0;

  sub_10029434C((uint64_t *)(v0 - 192));
  __break(1u);
}

void sub_1002D71D4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002D7234(void **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
  {
    v6 = 0;
    v7 = 0;
    sub_100294B74(-27, &v6, "cvEndFindContours", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1328);
  }
  v2 = *a1;
  if (*a1)
  {
    v3 = v2[17];
    if (v3)
    {
      if (*((_DWORD *)v2 + 95))
      {
        sub_10021E480(v2[1], (uint64_t)&v6);
        if (v6 == v2[8] && (_DWORD)v7 == *((_DWORD *)v2 + 18))
          sub_10021E508(v2[1], v2 + 6);
        *((_DWORD *)v2 + 95) = 0;
      }
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
        sub_100223CF8(v4, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 24), (uint64_t)(v2 + 34));
      v2[17] = 0;
    }
    if (*v2 != v2[1])
      sub_10021E204((_QWORD **)v2);
    if (v2[2])
      sub_10021E204((_QWORD **)v2 + 2);
    v2 = (_QWORD *)v2[38];
    j__free(*a1);
    *a1 = 0;
  }
  return v2;
}

void sub_1002D733C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D7354(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, int a5, int a6, uint64_t a7, int a8)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  BOOL v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  __n128 v87;
  int v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  int v104;
  int v107;
  int v108;
  char *v109;
  _DWORD *v110;
  uint64_t v111;
  int v112;
  _QWORD **v113;
  uint64_t v114[2];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD **v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  _QWORD v125[3];
  _QWORD *v126;
  unint64_t v127;
  _QWORD v128[3];
  _QWORD *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v113 = 0;
  if (!a3)
  {
    v117 = 0;
    v118 = 0;
    qmemcpy((void *)sub_10029430C(&v117, 25), "NULL double CvSeq pointer", 25);
    sub_100294B74(-27, &v117, "cvFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1817);
  }
  *a3 = 0;
  if (a6 == 5)
  {
    if (a7)
    {
      v117 = 0;
      v118 = 0;
      qmemcpy((void *)sub_10029430C(&v117, 51), "Nonzero offset is not supported in CV_LINK_RUNS yet", 51);
      sub_100294B74(-211, &v117, "cvFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1825);
    }
    v133 = 0;
    v134 = 0;
    v131 = 0;
    v132 = 0;
    if (!a2)
    {
      v115 = 0;
      v116 = 0;
      v9 = sub_10029430C(&v115, 20);
      *(_DWORD *)(v9 + 16) = 1919251566;
      *(_OWORD *)v9 = *(_OWORD *)"NULL storage pointer";
      sub_100294B74(-27, &v115, "icvFindContoursInInterval", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1508);
    }
    if (a4 <= 127)
    {
      v115 = 0;
      v116 = 0;
      qmemcpy((void *)sub_10029430C(&v115, 48), "Contour header size must be >= sizeof(CvContour)", 48);
      sub_100294B74(-201, &v115, "icvFindContoursInInterval", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1514);
    }
    sub_10021E188(a2);
    if (v10)
      operator new();
    v133 = 0;
    v134 = 0;
    sub_10021E188(a2);
    if (v15)
      operator new();
    v131 = 0;
    v132 = 0;
    v16 = sub_1001F68F4(a1, (uint64_t)&v115, 0, 0);
    if ((*(_WORD *)v16 & 0xFFE) != 0)
    {
      v114[0] = 0;
      v114[1] = 0;
      qmemcpy((void *)sub_10029430C(v114, 32), "Input array must be 8uC1 or 8sC1", 32);
      sub_100294B74(-5, v114, "icvFindContoursInInterval", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1525);
    }
    v17 = *(_QWORD *)(v16 + 24);
    v111 = *(int *)(v16 + 4);
    v18 = *(_DWORD *)(v16 + 36);
    v104 = *(_DWORD *)(v16 + 32);
    v110 = sub_10021E968(0, 0x60uLL, 0x18uLL, 0);
    sub_10021F470(v110, (uint64_t)&v121);
    sub_10021F520(0, 96, 8, 0, (uint64_t)v128);
    sub_10021F520(0, 96, 8, 0, (uint64_t)v125);
    v19 = v123;
    if ((unint64_t)v123 >= v124)
    {
      sub_10021F7C0(&v121);
      v19 = v123;
    }
    *v19 = 0;
    v19[1] = 0;
    v19[2] = 0;
    v20 = v123 + 3;
    v123 = v20;
    v21 = (char *)v20 - *(int *)(v122 + 44);
    v22 = v21;
    if (v18 >= 1)
    {
      v23 = 0;
      v22 = (char *)v20 - *(int *)(v122 + 44);
      do
      {
        v24 = (unsigned __int8 *)(v17 + v23);
        v25 = v23 + 1;
        while (!*v24++)
        {
          ++v23;
          ++v25;
          if (v18 == v23)
            goto LABEL_42;
        }
        if (v18 == v23)
          break;
        v27 = v123;
        if ((unint64_t)v123 >= v124)
        {
          sub_10021F7C0(&v121);
          v27 = v123;
        }
        *v27 = 0;
        v27[1] = 0;
        *((_DWORD *)v27 + 4) = v23;
        *((_DWORD *)v27 + 5) = 0;
        v28 = v123 + 3;
        v123 = v28;
        v29 = (_QWORD *)((char *)v28 - *(int *)(v122 + 44));
        *((_QWORD *)v22 + 1) = v29;
        if (v18 <= ++v23)
        {
LABEL_35:
          if ((unint64_t)v28 < v124)
            goto LABEL_39;
        }
        else
        {
          v30 = (unsigned __int8 *)(v17 + v25);
          while (*v30++)
          {
            if (v18 == ++v25)
            {
              v23 = v18;
              goto LABEL_35;
            }
          }
          v23 = v25;
          if ((unint64_t)v28 < v124)
            goto LABEL_39;
        }
        sub_10021F7C0(&v121);
        v28 = v123;
LABEL_39:
        *v28 = 0;
        v28[1] = 0;
        *((_DWORD *)v28 + 4) = v23 - 1;
        *((_DWORD *)v28 + 5) = 0;
        v123 += 3;
        v32 = (char *)v123 - *(int *)(v122 + 44);
        *v29 = v32;
        v29[1] = v32;
        v33 = v129;
        if ((unint64_t)v129 >= v130)
        {
          sub_10021F7C0(v128);
          v33 = v129;
        }
        *v33 = v29;
        ++v129;
        v22 = (char *)v29[1];
      }
      while (v23 < v18);
    }
LABEL_42:
    sub_10021F5D0(&v121);
    v34 = *((_QWORD *)v21 + 1);
    v35 = v110[10] - 1;
    *((_QWORD *)v22 + 1) = 0;
    if (v104 > 1)
    {
      v36 = 0;
      v112 = 1;
      while (1)
      {
        v37 = v34;
        v38 = v22;
        v108 = v110[10];
        if (v18 >= 1)
        {
          v39 = 0;
          do
          {
            v40 = v111 + v39;
            v41 = v39 + 1;
            while (!*(_BYTE *)(v17 + v40))
            {
              ++v39;
              ++v40;
              ++v41;
              if (v18 == v39)
                goto LABEL_64;
            }
            if (v18 == v39)
              break;
            v42 = v123;
            if ((unint64_t)v123 >= v124)
            {
              sub_10021F7C0(&v121);
              v42 = v123;
            }
            *v42 = 0;
            v42[1] = 0;
            *((_DWORD *)v42 + 4) = v39;
            *((_DWORD *)v42 + 5) = v112;
            v43 = v123 + 3;
            v123 = v43;
            v44 = (uint64_t)v43 - *(int *)(v122 + 44);
            *((_QWORD *)v22 + 1) = v44;
            if (v18 <= ++v39)
            {
LABEL_59:
              if ((unint64_t)v43 < v124)
                goto LABEL_63;
            }
            else
            {
              v45 = v111 + v41;
              while (*(_BYTE *)(v17 + v45))
              {
                ++v41;
                ++v45;
                if (v18 == v41)
                {
                  v39 = v18;
                  goto LABEL_59;
                }
              }
              v39 = v41;
              if ((unint64_t)v43 < v124)
                goto LABEL_63;
            }
            sub_10021F7C0(&v121);
            v43 = v123;
LABEL_63:
            *v43 = 0;
            v43[1] = 0;
            *((_DWORD *)v43 + 4) = v39 - 1;
            *((_DWORD *)v43 + 5) = v112;
            v123 += 3;
            v22 = (char *)v123 - *(int *)(v122 + 44);
            *(_QWORD *)(v44 + 8) = v22;
          }
          while (v39 < v18);
        }
LABEL_64:
        sub_10021F5D0(&v121);
        v34 = *((_QWORD *)v38 + 1);
        v46 = v110[10] - v108;
        v109 = v22;
        *((_QWORD *)v22 + 1) = 0;
        if (v35 >= 0)
          v47 = v35;
        else
          v47 = v35 + 1;
        v48 = v47 >> 1;
        if (v46 >= 0)
          v49 = v46;
        else
          v49 = v46 + 1;
        v50 = v49 >> 1;
        v107 = v46;
        if (v35 < 2 || v46 < 2)
        {
          v53 = 0;
          v52 = 0;
          v51 = 0;
          v54 = v34;
          if (v46 <= 1)
            goto LABEL_119;
LABEL_115:
          *(_QWORD *)v54 = *(_QWORD *)(v54 + 8);
          v70 = v129;
          if ((unint64_t)v129 >= v130)
          {
            sub_10021F7C0(v128);
            v70 = v129;
          }
          *v70 = v54;
          ++v129;
          v66 = *(_QWORD *)(v54 + 8);
          if (v52 + 1 == v50)
            goto LABEL_118;
LABEL_110:
          v67 = v129;
          v68 = ~v52 + v50;
          do
          {
            v69 = *(_QWORD **)(v66 + 8);
            *v69 = v69[1];
            if ((unint64_t)v67 >= v130)
            {
              sub_10021F7C0(v128);
              v67 = v129;
            }
            *v67 = v69;
            v67 = ++v129;
            v66 = v69[1];
            --v68;
          }
          while (v68);
          v51 = 0;
          if (v53 < v48)
            goto LABEL_120;
          goto LABEL_44;
        }
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v54 = v34;
        do
        {
          if (v51 == -1)
          {
            v63 = *(_QWORD *)(v37 + 8);
            if (*(_DWORD *)(v54 + 16) > *(_DWORD *)(v63 + 16) + 1)
            {
              v51 = 0;
              *(_QWORD *)v63 = v36;
              ++v53;
              v37 = *(_QWORD *)(v63 + 8);
              if (v53 >= v48)
                break;
              continue;
            }
            v64 = v126;
            if ((unint64_t)v126 >= v127)
            {
              sub_10021F7C0(v125);
              v64 = v126;
            }
            *v64 = v54;
            ++v126;
            *(_QWORD *)v54 = v36;
            v36 = *(_QWORD *)(v54 + 8);
            v57 = *(_QWORD *)(v37 + 8);
            if (*(_DWORD *)(v36 + 16) < *(_DWORD *)(v57 + 16))
            {
              ++v52;
              v54 = *(_QWORD *)(v36 + 8);
              v51 = -1;
              if (v53 >= v48)
                break;
              continue;
            }
            ++v53;
            v37 = *(_QWORD *)(v57 + 8);
            v51 = 1;
            goto LABEL_106;
          }
          if (v51 == 1)
          {
            v57 = *(_QWORD *)(v54 + 8);
            v62 = *(_DWORD *)(v57 + 16);
            if (*(_DWORD *)(v37 + 16) > v62 + 1)
            {
              v51 = 0;
              *(_QWORD *)v36 = v57;
              goto LABEL_102;
            }
            *(_QWORD *)v36 = v37;
            v36 = *(_QWORD *)(v37 + 8);
            if (*(_DWORD *)(v36 + 16) < v62)
            {
              ++v53;
              v37 = *(_QWORD *)(v36 + 8);
              v51 = 1;
              if (v53 >= v48)
                break;
              continue;
            }
            ++v52;
            v54 = *(_QWORD *)(v57 + 8);
            v51 = -1;
LABEL_106:
            v36 = v57;
            if (v53 >= v48)
              break;
            continue;
          }
          v55 = *(_QWORD *)(v37 + 8);
          v56 = *(_DWORD *)(v55 + 16);
          v57 = *(_QWORD *)(v54 + 8);
          v58 = *(_DWORD *)(v57 + 16);
          if (v56 >= v58)
          {
            if (*(_DWORD *)(v37 + 16) <= v58 + 1)
            {
              *(_QWORD *)v54 = v37;
              v51 = -1;
              v36 = v57;
            }
            else
            {
              *(_QWORD *)v54 = v57;
              v65 = v129;
              if ((unint64_t)v129 >= v130)
              {
                sub_10021F7C0(v128);
                v65 = v129;
              }
              v51 = 0;
              *v65 = v54;
              ++v129;
              v57 = *(_QWORD *)(v54 + 8);
            }
LABEL_102:
            ++v52;
            v54 = *(_QWORD *)(v57 + 8);
            if (v53 >= v48)
              break;
            continue;
          }
          v59 = *(_DWORD *)(v54 + 16) - 1;
          v60 = v56 < v59;
          v51 = v56 >= v59;
          if (v60)
            v61 = *(_QWORD **)(v37 + 8);
          else
            v61 = (_QWORD *)v54;
          if (!v60)
            v36 = *(_QWORD *)(v37 + 8);
          *v61 = v37;
          ++v53;
          v37 = *(_QWORD *)(v55 + 8);
          if (v53 >= v48)
            break;
        }
        while (v52 < v50);
        if (v52 >= v50)
          goto LABEL_119;
        if (!v51)
          goto LABEL_115;
        v66 = *(_QWORD *)(v54 + 8);
        *(_QWORD *)v36 = v66;
        if (v52 + 1 != v50)
          goto LABEL_110;
LABEL_118:
        v51 = 0;
LABEL_119:
        if (v53 < v48)
        {
LABEL_120:
          v71 = *(_QWORD **)(v37 + 8);
          if (v51)
            v72 = v36;
          else
            v72 = v37;
          *v71 = v72;
          if (v53 + 1 != v48)
          {
            v73 = ~v53 + v48;
            do
            {
              v74 = v71[1];
              v71 = *(_QWORD **)(v74 + 8);
              *v71 = v74;
              --v73;
            }
            while (v73);
          }
        }
LABEL_44:
        v17 += v111;
        ++v112;
        v22 = v109;
        v35 = v107;
        if (v112 == v104)
          goto LABEL_133;
      }
    }
    if (v35 >= 0)
      v75 = v35;
    else
      v75 = v35 + 1;
    v50 = v75 >> 1;
LABEL_133:
    if (v35 >= 2)
    {
      do
      {
        v76 = *(_QWORD **)(v34 + 8);
        *v76 = v34;
        v34 = v76[1];
        --v50;
      }
      while (v50);
    }
    v77 = sub_10021F68C(v128);
    v78 = sub_10021F68C(v125);
    sub_10021EEC4(v77, (uint64_t)&v117, 0);
    if (*(int *)(v77 + 40) < 1)
    {
      v82 = 0;
      v80 = 0;
      v79 = 0;
    }
    else
    {
      v79 = 0;
      v80 = 0;
      v81 = 0;
      do
      {
        v83 = *v119++;
        if ((unint64_t)v119 >= v120)
          sub_10021FB9C(&v117, 1);
        if (*v83)
        {
          sub_10021F520(0x500Cu, a4, 8, a2, (uint64_t)&v121);
          v84 = v123;
          v85 = v83;
          do
          {
            if ((unint64_t)v84 >= v124)
            {
              sub_10021F7C0(&v121);
              v84 = v123;
            }
            *v84 = v85[2];
            v84 = ++v123;
            v86 = (_QWORD *)*v85;
            *v85 = 0;
            v85 = v86;
          }
          while (v86 != v83);
          v82 = sub_10021F68C(&v121);
          sub_100343BB0((_DWORD *)v82, 1);
          if (v80)
          {
            *(_QWORD *)(v82 + 8) = v81;
            *(_QWORD *)(v81 + 16) = v82;
          }
          else
          {
            v80 = v82;
          }
        }
        else
        {
          v82 = v81;
        }
        ++v79;
        v81 = v82;
      }
      while ((signed int)v79 < *(_DWORD *)(v77 + 40));
    }
    v87.n128_f64[0] = sub_10021EEC4(v78, (uint64_t)&v117, 0);
    if (*(int *)(v78 + 40) >= 1)
    {
      v88 = 0;
      do
      {
        v90 = *v119++;
        if ((unint64_t)v119 >= v120)
          sub_10021FB9C(&v117, 1);
        if (*v90)
        {
          sub_10021F520(0x500Cu, a4, 8, a2, (uint64_t)&v121);
          v91 = v123;
          v92 = v90;
          do
          {
            if ((unint64_t)v91 >= v124)
            {
              sub_10021F7C0(&v121);
              v91 = v123;
            }
            *v91 = v92[2];
            v91 = ++v123;
            v93 = (_QWORD *)*v92;
            *v92 = 0;
            v92 = v93;
          }
          while (v93 != v90);
          v89 = sub_10021F68C(&v121);
          sub_100343BB0((_DWORD *)v89, 1);
          *(_DWORD *)v89 |= 0x8000u;
          if (v80)
          {
            *(_QWORD *)(v89 + 8) = v82;
            *(_QWORD *)(v82 + 16) = v89;
          }
          else
          {
            v80 = v89;
          }
        }
        else
        {
          v89 = v82;
        }
        ++v88;
        ++v79;
        v82 = v89;
      }
      while (v88 < *(_DWORD *)(v78 + 40));
    }
    *a3 = v80;
    v94 = v131;
    if (v131)
    {
      v95 = (unsigned int *)(v131 + 8);
      do
      {
        v96 = __ldaxr(v95);
        v97 = v96 - 1;
      }
      while (__stlxr(v97, v95));
      if (!v97)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v94 + 16))(v94, v87);
    }
    v98 = v133;
    if (v133)
    {
      v99 = (unsigned int *)(v133 + 8);
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v98 + 16))(v98, v87);
    }
    if (v80)
      return v79;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v113 = (_QWORD **)sub_1002D54F8(a1, a2, a4, a5, a6, a7, a8);
    LODWORD(v14) = -1;
    do
      v14 = (v14 + 1);
    while (sub_1002D5C94(v113, v11, v12, v13));
    *a3 = sub_1002D7234((void **)&v113);
  }
  return v14;
}

void sub_1002D8034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_10029434C((uint64_t *)va);
  sub_1002D8A80((unsigned int **)(v13 - 120));
  sub_1002D8A80((unsigned int **)(v13 - 104));
  _Unwind_Resume(a1);
}

void sub_1002D8134(uint64_t a1, int *a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  signed int v17;
  signed int i;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int *v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  void *v68;
  _QWORD v69[2];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  uint64_t v75;
  _DWORD v76[2];
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[64];
  _BYTE *v85;
  uint64_t *v86;
  _QWORD v87[2];
  _BYTE v88[8];
  int v89;

  sub_100298C2C(v88, &off_100451C20);
  if (sub_10025D914(a2) != 0x40000
    && sub_10025D914(a2) != 327680
    && sub_10025D914(a2) != 720896)
  {
    *(_QWORD *)v84 = 0;
    *(_QWORD *)&v84[8] = 0;
    qmemcpy((void *)sub_10029430C(v84, 155), "(_contours.kind() == _InputArray::STD_VECTOR_VECTOR || _contours.kind() == _InputArray::STD_VECTOR_MAT || _contours.kind() == _InputArray::STD_VECTOR_UMAT)", 155);
    sub_100294B74(-215, (uint64_t *)v84, "findContours", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1892);
  }
  if (!sub_100261284((uint64_t)a2)
    && (sub_100261268(a2, -1) != 2 || sub_100261250(a2, -1) != 4))
  {
    *(_QWORD *)v84 = 0;
    *(_QWORD *)&v84[8] = 0;
    qmemcpy((void *)sub_10029430C(v84, 74), "_contours.empty() || (_contours.channels() == 2 && _contours.depth() == 4)", 74);
    sub_100294B74(-215, (uint64_t *)v84, "findContours", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1894);
  }
  *(_DWORD *)v84 = 1124007936;
  memset(&v84[4], 0, 60);
  v85 = &v84[8];
  v86 = v87;
  v87[0] = 0;
  v87[1] = 0;
  LODWORD(v70) = 33619968;
  *((_QWORD *)&v70 + 1) = v84;
  *(_QWORD *)&v71 = 0;
  v63 = 0u;
  v64 = 0u;
  sub_10021C528(a1, (uint64_t)&v70, 1, 1, 1, 1, 16, (double *)&v63);
  sub_10021E0DC(0);
  if (v12)
    operator new();
  v82 = 0;
  v83 = 0;
  v79 = *(_QWORD *)&v84[16];
  v13 = *(_DWORD *)&v84[12];
  if (*(_DWORD *)&v84[4] == 1)
    v13 = 1;
  v77 = 0;
  v78 = 0;
  v80 = *(_DWORD *)&v84[8];
  v81 = v13;
  v14 = *v86;
  v76[0] = *(_WORD *)v84 & 0x4FFF | 0x42420000;
  v76[1] = v14;
  v75 = 0;
  if (sub_1002637F8(a3))
    sub_1002636E8(a3);
  sub_1002D7354((uint64_t)v76, 0, &v75, 128, a4, a5, (*a6 - 1) | ((unint64_t)(a6[1] - 1) << 32), 0);
  if (v75)
  {
    v15 = sub_1002239A0(v75, 96, 0);
    v16 = (uint64_t)v15;
    if (v15)
    {
      if (v15[11] != 8)
      {
        v63 = 0uLL;
        qmemcpy((void *)sub_10029430C(&v63, 39), "!_seq || _seq->elem_size == sizeof(_Tp)", 39);
        sub_100294B74(-215, (uint64_t *)&v63, "Seq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/core_c.h", 2974);
      }
      v17 = v15[10];
    }
    else
    {
      v17 = 0;
    }
    sub_10026285C((uint64_t)a2, v17, 1u, 0, -1, 1, 0);
    sub_10021EEC4(v16, (uint64_t)&v70, 0);
    v61 = a3;
    v74 = 0;
    if (v17 >= 1)
    {
      for (i = 0; i != v17; ++i)
      {
        v20 = **((_QWORD **)&v71 + 1);
        *(_DWORD *)(v20 + 112) = i;
        sub_10026285C((uint64_t)a2, *(_DWORD *)(v20 + 40), 1u, 12, i, 1, 0);
        sub_10025D914(a2);
        sub_10025CCB8((uint64_t)a2, i, (uint64_t)&v63);
        if ((BYTE1(v63) & 0x40) == 0)
        {
          v62[0] = 0;
          v62[1] = 0;
          v21 = sub_10029430C(v62, 17);
          *(_BYTE *)(v21 + 16) = 41;
          *(_OWORD *)v21 = *(_OWORD *)"ci.isContinuous()";
          sub_100294B74(-215, v62, "findContours", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1919);
        }
        sub_10021ED58(v20, (char *)v64, 0x3FFFFFFF00000000);
        if (*((_QWORD *)&v66 + 1))
        {
          v22 = (unsigned int *)(*((_QWORD *)&v66 + 1) + 20);
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
            sub_100256C90((uint64_t)&v63);
        }
        *((_QWORD *)&v66 + 1) = 0;
        v64 = 0u;
        v65 = 0u;
        if (SDWORD1(v63) >= 1)
        {
          v25 = 0;
          v26 = v67;
          do
            *(_DWORD *)&v26[4 * v25++] = 0;
          while (v25 < SDWORD1(v63));
        }
        if (v68 != v69)
          j__free(v68);
        *((_QWORD *)&v71 + 1) += 8;
        if (*((_QWORD *)&v71 + 1) >= *((_QWORD *)&v72 + 1))
          sub_10021FB9C(&v70, 1);
        if (v74 + 1 < 2 * *(_DWORD *)(*((_QWORD *)&v70 + 1) + 40))
          v19 = v74 + 1;
        else
          v19 = 0;
        v74 = v19;
      }
    }
    if (sub_1002637F8(v61))
    {
      sub_10026285C(v61, 1u, v17, 28, -1, 1, 0);
      if (sub_10025D914((_DWORD *)v61) == 0x10000)
      {
        v27 = *(_QWORD *)(v61 + 8);
        v28 = *(_OWORD *)(v27 + 16);
        v63 = *(_OWORD *)v27;
        v64 = v28;
        v65 = *(_OWORD *)(v27 + 32);
        v29 = *(_QWORD *)(v27 + 56);
        *(_QWORD *)&v66 = *(_QWORD *)(v27 + 48);
        *((_QWORD *)&v66 + 1) = v29;
        v67 = (char *)&v63 + 8;
        v68 = v69;
        v69[0] = 0;
        v69[1] = 0;
        if (v29)
        {
          v30 = (unsigned int *)(v29 + 20);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
        }
        if (*(int *)(v27 + 4) > 2)
        {
          DWORD1(v63) = 0;
          sub_100256B48((uint64_t)&v63, v27);
        }
        else
        {
          v32 = *(_QWORD **)(v27 + 72);
          v33 = v68;
          *(_QWORD *)v68 = *v32;
          v33[1] = v32[1];
        }
      }
      else
      {
        sub_10025CCB8(v61, -1, (uint64_t)&v63);
      }
      v34 = v64;
      if (*((_QWORD *)&v66 + 1))
      {
        v35 = (unsigned int *)(*((_QWORD *)&v66 + 1) + 20);
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
          sub_100256C90((uint64_t)&v63);
      }
      *((_QWORD *)&v66 + 1) = 0;
      v64 = 0u;
      v65 = 0u;
      if (SDWORD1(v63) >= 1)
      {
        v38 = 0;
        v39 = v67;
        do
          *(_DWORD *)&v39[4 * v38++] = 0;
        while (v38 < SDWORD1(v63));
      }
      if (v68 != v69)
        j__free(v68);
      sub_10021EEC4(v16, (uint64_t)&v63, 0);
      v72 = v65;
      v73 = v66;
      v74 = 0;
      v70 = v63;
      v71 = v64;
      if (v17 >= 1)
      {
        v40 = v17;
        v41 = (int *)(v34 + 8);
        do
        {
          v43 = (_QWORD *)**((_QWORD **)&v71 + 1);
          v44 = *(_QWORD *)(**((_QWORD **)&v71 + 1) + 16);
          if (v44)
          {
            v45 = *(_DWORD *)(v44 + 112);
            v46 = v43[1];
            if (v46)
              goto LABEL_69;
          }
          else
          {
            v45 = -1;
            v46 = v43[1];
            if (v46)
            {
LABEL_69:
              v47 = *(_DWORD *)(v46 + 112);
              v48 = v43[4];
              if (v48)
                goto LABEL_70;
              goto LABEL_74;
            }
          }
          v47 = -1;
          v48 = v43[4];
          if (v48)
          {
LABEL_70:
            v49 = *(_DWORD *)(v48 + 112);
            v50 = v43[3];
            if (!v50)
              goto LABEL_75;
            goto LABEL_71;
          }
LABEL_74:
          v49 = -1;
          v50 = v43[3];
          if (!v50)
          {
LABEL_75:
            v51 = -1;
            goto LABEL_76;
          }
LABEL_71:
          v51 = *(_DWORD *)(v50 + 112);
LABEL_76:
          *(v41 - 2) = v45;
          *(v41 - 1) = v47;
          *v41 = v49;
          v41[1] = v51;
          *((_QWORD *)&v71 + 1) += 8;
          if (*((_QWORD *)&v71 + 1) >= *((_QWORD *)&v72 + 1))
            sub_10021FB9C(&v70, 1);
          if (v74 + 1 < 2 * *(_DWORD *)(*((_QWORD *)&v70 + 1) + 40))
            v42 = v74 + 1;
          else
            v42 = 0;
          v74 = v42;
          v41 += 4;
          --v40;
        }
        while (v40);
      }
    }
    v52 = v82;
    if (v82)
    {
      v53 = (unsigned int *)(v82 + 8);
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
    }
  }
  else
  {
    sub_1002636E8((uint64_t)a2);
  }
  if (*(_QWORD *)&v84[56])
  {
    v56 = (unsigned int *)(*(_QWORD *)&v84[56] + 20);
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
      sub_100256C90((uint64_t)v84);
  }
  *(_QWORD *)&v84[56] = 0;
  memset(&v84[16], 0, 32);
  if (*(int *)&v84[4] >= 1)
  {
    v59 = 0;
    v60 = v85;
    do
      *(_DWORD *)&v60[4 * v59++] = 0;
    while (v59 < *(int *)&v84[4]);
  }
  if (v86 != v87)
    j__free(v86);
  if (v89)
    sub_1002989D0(v88);
}

void sub_1002D8964(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029434C((uint64_t *)(v1 - 208));
  sub_1001D40CC(v1 - 112);
  _Unwind_Resume(a1);
}

unsigned int **sub_1002D8A80(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002D8AD4(uint64_t a1, int *a2, int a3, int a4, uint64_t *a5)
{
  int *v10;
  uint64_t v11;
  _BYTE v12[8];
  int v13;

  sub_100298C2C(v12, &off_100451C40);
  v10 = sub_100263CBC();
  v11 = *a5;
  sub_1002D8134(a1, a2, (uint64_t)v10, a3, a4, &v11);
  if (v13)
    sub_1002989D0(v12);
}

void sub_1002D8B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002D8B7C()
{
  operator delete();
}

uint64_t sub_1002D8B90(_QWORD **a1)
{
  sub_1001F8560((uint64_t)(a1 + 3), a1[2]);
  return ((uint64_t (*)(_QWORD **))(*a1)[1])(a1);
}

void sub_1002D8BC4(uint64_t a1, uint64_t a2, int a3, BOOL a4)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  int v15;
  char v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int64x2_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  uint64_t v27;
  int64x2_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t i;
  float v37;
  uint64_t j;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  signed int v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  int *v46;
  int v47;
  int *v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  int *v52;
  uint64_t v53;
  unint64_t v54;
  _DWORD *v55;
  unsigned int v56;
  uint64_t v57;
  BOOL v58;
  int v59;
  int v60;
  int *v61;
  int v62;
  int *v63;
  int v64;
  int *v65;
  int v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  unint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  _QWORD *v80;
  _QWORD *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  char *v86;
  void *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  char *v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  char *v101;
  BOOL v102;
  int v103[2];
  int v104;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  void *v112;
  int64x2_t v113;
  _DWORD *v114;
  uint64_t v115;
  _DWORD v116[264];
  _DWORD *v117;
  uint64_t v118;
  _DWORD v119[264];
  int64x2_t *v120;
  uint64_t v121;
  _BYTE v122[1088];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  _QWORD *v129;
  _QWORD v130[3];
  char v131[8];
  int v132;

  sub_100298C2C(v131, &off_100451CA0);
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    v121 = 0;
    v120 = 0;
    qmemcpy((void *)sub_10029430C(&v120, 34), "_points.getObj() != _hull.getObj()", 34);
    sub_100294B74(-215, (uint64_t *)&v120, "convexHull", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/convhull.cpp", 133);
  }
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_OWORD *)(v7 + 16);
    v123 = *(_OWORD *)v7;
    v124 = v8;
    v125 = *(_OWORD *)(v7 + 32);
    v9 = *(_QWORD *)(v7 + 56);
    v126 = *(_QWORD *)(v7 + 48);
    v127 = v9;
    v128 = (char *)&v123 + 8;
    v129 = v130;
    v130[0] = 0;
    v130[1] = 0;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 20);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    if (*(int *)(v7 + 4) > 2)
    {
      DWORD1(v123) = 0;
      sub_100256B48((uint64_t)&v123, v7);
    }
    else
    {
      v12 = *(_QWORD **)(v7 + 72);
      v13 = v129;
      *v129 = *v12;
      v13[1] = v12[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v123);
  }
  v14 = sub_10025C460((unsigned int *)&v123, 2, -1, 1);
  v15 = v14;
  v16 = v123;
  if (v14 < 0 || (v123 & 6) != 4)
  {
    v121 = 0;
    v120 = 0;
    qmemcpy((void *)sub_10029430C(&v120, 40), "total >= 0 && (depth == 5 || depth == 4)", 40);
    sub_100294B74(-215, (uint64_t *)&v120, "convexHull", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/convhull.cpp", 137);
  }
  if (!v14)
  {
    sub_100261B50(a2);
    goto LABEL_148;
  }
  if (sub_100262140((_DWORD *)a2))
    a4 = sub_10025E20C((int *)a2, -1) != 4;
  v120 = (int64x2_t *)v122;
  v121 = v15;
  if (v15 > 0x88)
    operator new[]();
  v117 = v119;
  v118 = (v15 + 2);
  v17 = v116;
  v114 = v116;
  v115 = v15;
  v18 = (uint64_t)v120;
  v19 = v124;
  if ((BYTE1(v123) & 0x40) == 0)
  {
    v106 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v106, 21), "points.isContinuous()", 21);
    sub_100294B74(-215, (uint64_t *)&v106, "convexHull", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/convhull.cpp", 156);
  }
  v20 = v16 & 7;
  if (v15 >= 1)
  {
    if (v15 < 4)
    {
      v21 = 0;
LABEL_28:
      v29 = (_QWORD *)(v18 + 8 * v21);
      v30 = v19 + 8 * v21;
      v31 = v15 - v21;
      do
      {
        *v29++ = v30;
        v30 += 8;
        --v31;
      }
      while (v31);
      goto LABEL_30;
    }
    v21 = v15 & 0xFFFFFFFC;
    v22 = (int64x2_t)xmmword_1003BA9E0;
    v23 = v120 + 1;
    v24 = vdupq_n_s64(v124);
    v25 = vdupq_n_s64(0x10uLL);
    v26 = vdupq_n_s64(4uLL);
    v27 = v21;
    do
    {
      v28 = vaddq_s64(v24, vshlq_n_s64(v22, 3uLL));
      v23[-1] = v28;
      *v23 = vaddq_s64(v28, v25);
      v22 = vaddq_s64(v22, v26);
      v23 += 2;
      v27 -= 4;
    }
    while (v27);
    if (v21 != v15)
      goto LABEL_28;
  }
LABEL_30:
  v32 = (char *)(v18 + 8 * v15);
  v33 = 126 - 2 * __clz(v15);
  *(_QWORD *)v103 = a2;
  v102 = a4;
  if (v20 == 5)
  {
    sub_1002DAC38(v18, v32, (uint64_t)&v106, v33, 1);
    if (v15 >= 2)
    {
      v34 = 0;
      v35 = 0;
      for (i = 1; i != v15; ++i)
      {
        v37 = *(float *)(*(_QWORD *)(v18 + 8 * i) + 4);
        if (*(float *)(*(_QWORD *)(v18 + 8 * v35) + 4) > v37)
          v35 = i;
        if (*(float *)(*(_QWORD *)(v18 + 8 * v34) + 4) < v37)
          v34 = i;
      }
      goto LABEL_48;
    }
LABEL_47:
    v35 = 0;
    v34 = 0;
    goto LABEL_48;
  }
  sub_1002D9BEC(v18, v32, (uint64_t)&v106, v33, 1);
  if (v15 < 2)
    goto LABEL_47;
  v34 = 0;
  v35 = 0;
  for (j = 1; j != v15; ++j)
  {
    v39 = *(_DWORD *)(*(_QWORD *)(v18 + 8 * j) + 4);
    if (*(_DWORD *)(*(_QWORD *)(v18 + 8 * v35) + 4) > v39)
      v35 = j;
    if (*(_DWORD *)(*(_QWORD *)(v18 + 8 * v34) + 4) < v39)
      v34 = j;
  }
LABEL_48:
  v40 = v15 - 1;
  v41 = *(_DWORD **)(v18 + 8 * v40);
  if (**(_DWORD **)v18 == *v41 && *(_DWORD *)(*(_QWORD *)v18 + 4) == v41[1])
  {
    v116[0] = 0;
    v42 = 1;
    v43 = *(_QWORD *)v103;
    v44 = v102;
    goto LABEL_102;
  }
  v104 = v20;
  if (v20 == 5)
  {
    v45 = sub_1002D9A80(v18, 0, v34, v119, -1, 1);
    v46 = &v119[v45];
    v47 = sub_1002D9A80(v18, v15 - 1, v34, v46, -1, -1);
    if ((a3 & 1) == 0)
      goto LABEL_53;
LABEL_56:
    v48 = v119;
    v49 = v45;
    v45 = v47;
    if (v49 < 2)
      goto LABEL_54;
    goto LABEL_57;
  }
  v45 = sub_1002D9920(v18, 0, v34, v119, -1, 1);
  v46 = &v119[v45];
  v47 = sub_1002D9920(v18, v15 - 1, v34, v46, -1, -1);
  if ((a3 & 1) != 0)
    goto LABEL_56;
LABEL_53:
  v48 = v46;
  v49 = v47;
  v46 = v119;
  if (v47 < 2)
  {
LABEL_54:
    v42 = 0;
    goto LABEL_59;
  }
LABEL_57:
  v42 = v49 - 1;
  v50 = (v49 - 1);
  v51 = v116;
  v52 = v48;
  do
  {
    v53 = *v52++;
    *v51++ = (unint64_t)(*(_QWORD *)(v18 + 8 * v53) - v19) >> 3;
    --v50;
  }
  while (v50);
LABEL_59:
  if (v45 >= 2)
  {
    v54 = v45 + 1;
    v55 = &v116[v42];
    do
    {
      *v55++ = (unint64_t)(*(_QWORD *)(v18 + 8 * v46[(v54 - 2)]) - v19) >> 3;
      --v54;
      ++v42;
    }
    while (v54 > 2);
    if (v45 >= 3)
    {
      v56 = v46[1];
      v57 = v18;
      if (v104 == 5)
        goto LABEL_69;
LABEL_67:
      v60 = sub_1002D9920(v57, 0, v35, v119, 1, -1);
      v61 = &v119[v60];
      v62 = sub_1002D9920(v18, v40, v35, v61, 1, 1);
      goto LABEL_70;
    }
  }
  v58 = __OFSUB__(v49, 2);
  v59 = v49 - 2;
  if ((v59 < 0) ^ v58 | (v59 == 0))
  {
    v56 = -1;
    v57 = v18;
    if (v104 != 5)
      goto LABEL_67;
  }
  else
  {
    v56 = v48[v59];
    v57 = v18;
    if (v104 != 5)
      goto LABEL_67;
  }
LABEL_69:
  v60 = sub_1002D9A80(v57, 0, v35, v119, 1, -1);
  v61 = &v119[v60];
  v62 = sub_1002D9A80(v18, v40, v35, v61, 1, 1);
LABEL_70:
  if (a3)
    v63 = v61;
  else
    v63 = v119;
  if (a3)
    v64 = v62;
  else
    v64 = v60;
  if (a3)
    v65 = v119;
  else
    v65 = v61;
  if (a3)
    v66 = v60;
  else
    v66 = v62;
  v43 = *(_QWORD *)v103;
  v44 = v102;
  if ((v56 & 0x80000000) != 0)
  {
    v20 = v104;
  }
  else
  {
    v20 = v104;
    if (v64 < 3)
    {
      if (v66 + v64 <= 2)
        goto LABEL_96;
      v67 = v65[2 - v64];
      if ((_DWORD)v67 == v56)
      {
LABEL_92:
        if (v64 >= 2)
          v64 = 2;
        if (v66 >= 2)
          v66 = 2;
        goto LABEL_96;
      }
    }
    else
    {
      v67 = v63[1];
      if ((_DWORD)v67 == v56)
        goto LABEL_92;
    }
    if ((v67 & 0x80000000) == 0)
    {
      v68 = *(_DWORD **)(v18 + 8 * v67);
      v69 = *(_DWORD **)(v18 + 8 * v56);
      if (*v68 == *v69 && v68[1] == v69[1])
        goto LABEL_92;
    }
  }
LABEL_96:
  if (v64 >= 2)
  {
    v70 = (v64 - 1);
    v71 = &v116[v42];
    v42 += v70;
    do
    {
      v72 = *v63++;
      *v71++ = (unint64_t)(*(_QWORD *)(v18 + 8 * v72) - v19) >> 3;
      --v70;
    }
    while (v70);
  }
  if (v66 >= 2)
  {
    v73 = v66 + 1;
    v74 = &v116[v42];
    do
    {
      *v74++ = (unint64_t)(*(_QWORD *)(v18 + 8 * v65[(v73 - 2)]) - v19) >> 3;
      --v73;
      ++v42;
    }
    while (v73 > 2);
  }
LABEL_102:
  if (v44)
  {
    sub_10026285C(v43, v42, 1u, v20 | 8, -1, 0, 0);
    if (sub_10025D914((_DWORD *)v43) == 0x10000)
    {
      v75 = *(_QWORD *)(v43 + 8);
      v76 = *(_OWORD *)(v75 + 16);
      v106 = *(_OWORD *)v75;
      v107 = v76;
      v108 = *(_OWORD *)(v75 + 32);
      v77 = *(_QWORD *)(v75 + 56);
      v109 = *(_QWORD *)(v75 + 48);
      v110 = v77;
      v111 = (char *)&v106 + 8;
      v112 = &v113;
      v113 = 0uLL;
      if (v77)
      {
        v78 = (unsigned int *)(v77 + 20);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 + 1, v78));
      }
      if (*(int *)(v75 + 4) > 2)
      {
        DWORD1(v106) = 0;
        sub_100256B48((uint64_t)&v106, v75);
      }
      else
      {
        v80 = *(_QWORD **)(v75 + 72);
        v81 = v112;
        *(_QWORD *)v112 = *v80;
        v81[1] = v80[1];
      }
    }
    else
    {
      sub_10025CCB8(v43, -1, (uint64_t)&v106);
    }
    if ((BYTE1(v106) & 0x40) != 0)
    {
      v88 = 8;
      if (v42 < 1)
        goto LABEL_127;
    }
    else
    {
      v88 = *(_QWORD *)v112;
      if (v42 < 1)
        goto LABEL_127;
    }
    v89 = (_QWORD *)v107;
    v90 = v42;
    do
    {
      v91 = *v17++;
      *v89 = *(_QWORD *)(v19 + 8 * v91);
      v89 = (_QWORD *)((char *)v89 + v88);
      --v90;
    }
    while (v90);
LABEL_127:
    if (v110)
    {
      v92 = (unsigned int *)(v110 + 20);
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
        sub_100256C90((uint64_t)&v106);
    }
    v110 = 0;
    v107 = 0u;
    v108 = 0u;
    if (SDWORD1(v106) >= 1)
    {
      v95 = 0;
      v96 = v111;
      do
        *(_DWORD *)&v96[4 * v95++] = 0;
      while (v95 < SDWORD1(v106));
    }
    v87 = v112;
    if (v112 == &v113)
      goto LABEL_137;
    goto LABEL_136;
  }
  *((_QWORD *)&v106 + 1) = v42 | 0x100000000;
  *(_QWORD *)&v107 = v116;
  *((_QWORD *)&v107 + 1) = v116;
  v109 = 0;
  v110 = 0;
  v111 = (char *)&v106 + 8;
  v112 = &v113;
  *(_QWORD *)&v106 = 0x242FF4004;
  v113 = vdupq_n_s64(4uLL);
  *(_QWORD *)&v108 = &v116[v42];
  *((_QWORD *)&v108 + 1) = v108;
  sub_1002181EC((uint64_t)&v106, v43);
  if (v110)
  {
    v82 = (unsigned int *)(v110 + 20);
    do
    {
      v83 = __ldaxr(v82);
      v84 = v83 - 1;
    }
    while (__stlxr(v84, v82));
    if (!v84)
      sub_100256C90((uint64_t)&v106);
  }
  v110 = 0;
  v107 = 0u;
  v108 = 0u;
  if (SDWORD1(v106) >= 1)
  {
    v85 = 0;
    v86 = v111;
    do
      *(_DWORD *)&v86[4 * v85++] = 0;
    while (v85 < SDWORD1(v106));
  }
  v87 = v112;
  if (v112 == &v113)
    goto LABEL_137;
LABEL_136:
  j__free(v87);
LABEL_137:
  if (v114 != v116)
  {
    if (v114)
      operator delete[]();
    v115 = 264;
  }
  if (v117 != v119)
  {
    if (v117)
      operator delete[]();
    v118 = 264;
  }
  if (v120 != (int64x2_t *)v122 && v120)
    operator delete[]();
LABEL_148:
  if (v127)
  {
    v97 = (unsigned int *)(v127 + 20);
    do
    {
      v98 = __ldaxr(v97);
      v99 = v98 - 1;
    }
    while (__stlxr(v99, v97));
    if (!v99)
      sub_100256C90((uint64_t)&v123);
  }
  v127 = 0;
  v124 = 0u;
  v125 = 0u;
  if (SDWORD1(v123) >= 1)
  {
    v100 = 0;
    v101 = v128;
    do
      *(_DWORD *)&v101[4 * v100++] = 0;
    while (v100 < SDWORD1(v123));
  }
  if (v129 != v130)
    j__free(v129);
  if (v132)
    sub_1002989D0(v131);
}

void sub_1002D9768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  unint64_t v15;

  if (STACK[0x4C0] == a11)
  {
    v15 = STACK[0x8F0];
    if (STACK[0x8F0] == a13)
      goto LABEL_9;
  }
  else
  {
    if (STACK[0x4C0])
      operator delete[]();
    STACK[0x4C8] = 264;
    v15 = STACK[0x8F0];
    if (STACK[0x8F0] == a13)
    {
LABEL_9:
      sub_100006BE4(v13 - 208);
      sub_1001D40CC(v13 - 104);
      _Unwind_Resume(a1);
    }
  }
  if (v15)
    operator delete[]();
  goto LABEL_9;
}

uint64_t sub_1002D9920(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int a5, int a6)
{
  int v6;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  _DWORD *v29;

  if (a3 > (int)a2)
    v6 = 1;
  else
    v6 = -1;
  if ((_DWORD)a2 == a3
    || (v8 = *(_DWORD **)(a1 + 8 * (int)a2), v9 = *(_DWORD **)(a1 + 8 * a3), *v8 == *v9) && v8[1] == v9[1])
  {
    *a4 = a2;
    return 1;
  }
  else
  {
    v10 = (v6 + a2);
    v11 = (v10 + v6);
    *a4 = a2;
    a4[1] = v10;
    a4[2] = v11;
    if ((_DWORD)v10 == a3)
    {
      v12 = 3;
    }
    else
    {
      v13 = v6 + a3;
      v12 = 3;
      v14 = a2;
      do
      {
        v16 = *(int **)(a1 + 8 * (int)v10);
        v17 = *(_DWORD **)(a1 + 8 * (int)v11);
        v18 = v16[1];
        v19 = v17[1] - v18;
        if (((v17[1] != v18) | (v19 >> 31)) == a5)
        {
          v11 = (v11 + v6);
          a4[v12 - 1] = v11;
          v15 = v14;
          v14 = v10;
        }
        else
        {
          v20 = *v16;
          v21 = *(int **)(a1 + 8 * (int)v14);
          v22 = *v21;
          v23 = v21[1];
          v24 = (v18 - v23) * (*v17 - v20);
          v25 = (v20 - v22) * v19;
          v26 = v24 < v25;
          v27 = v24 != v25;
          if (v26)
            v27 = -1;
          if (v27 != a6 || (v20 == v22 ? (v28 = v18 == v23) : (v28 = 0), v28))
          {
            if ((_DWORD)v14 == (_DWORD)a2)
            {
              a4[1] = v11;
              v14 = v11;
              v11 = (v11 + v6);
              a4[2] = v11;
              v15 = a2;
            }
            else
            {
              v29 = &a4[v12];
              *(v29 - 2) = v11;
              v15 = *(v29 - 4);
              --v12;
            }
          }
          else
          {
            v14 = v11;
            v11 = (v11 + v6);
            a4[v12++] = v11;
            v15 = v10;
          }
        }
        v10 = v14;
        v14 = v15;
      }
      while ((_DWORD)v11 != v13);
    }
    return (v12 - 1);
  }
}

uint64_t sub_1002D9A80(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int a5, int a6)
{
  int v6;
  float *v7;
  float *v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  float *v17;
  float v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  unsigned int v23;
  _DWORD *v24;

  if (a3 > (int)a2)
    v6 = 1;
  else
    v6 = -1;
  if ((_DWORD)a2 == a3
    || (v7 = *(float **)(a1 + 8 * (int)a2), v8 = *(float **)(a1 + 8 * a3), *v7 == *v8) && v7[1] == v8[1])
  {
    *a4 = a2;
    return 1;
  }
  else
  {
    v10 = (v6 + a2);
    v11 = (v10 + v6);
    *a4 = a2;
    a4[1] = v10;
    a4[2] = v11;
    if ((_DWORD)v10 == a3)
    {
      return 2;
    }
    else
    {
      v12 = 3;
      v13 = a2;
      do
      {
        v15 = *(float **)(a1 + 8 * (int)v10);
        v16 = v15[1];
        v17 = *(float **)(a1 + 8 * (int)v11);
        v18 = v17[1] - v16;
        if ((__PAIR64__(v18 > 0.0, LODWORD(v18)) - COERCE_UNSIGNED_INT(0.0)) >> 32 == a5)
        {
          v11 = (v11 + v6);
          a4[v12 - 1] = v11;
          v14 = v13;
          v13 = v10;
        }
        else
        {
          v19 = *v15;
          v20 = *(float **)(a1 + 8 * (int)v13);
          v21 = v19 - *v20;
          v22 = v16 - v20[1];
          *(float *)&v23 = (float)(v22 * (float)(*v17 - v19)) - (float)(v21 * v18);
          if ((__PAIR64__(*(float *)&v23 > 0.0, v23) - COERCE_UNSIGNED_INT(0.0)) >> 32 != a6
            || v21 == 0.0 && v22 == 0.0)
          {
            if ((_DWORD)v13 == (_DWORD)a2)
            {
              a4[1] = v11;
              v13 = v11;
              v11 = (v11 + v6);
              a4[2] = v11;
              v14 = a2;
            }
            else
            {
              v24 = &a4[v12];
              *(v24 - 2) = v11;
              v14 = *(v24 - 4);
              --v12;
            }
          }
          else
          {
            v13 = v11;
            v11 = (v11 + v6);
            a4[v12++] = v11;
            v14 = v10;
          }
        }
        v10 = v13;
        v13 = v14;
      }
      while ((_DWORD)v11 != v6 + a3);
      return (v12 - 1);
    }
  }
}

uint64_t sub_1002D9BEC(uint64_t result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int **v9;
  int **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int **v16;
  uint64_t v17;
  int **v18;
  int **v19;
  int *v20;
  int *v21;
  int v22;
  int **v23;
  char v24;
  BOOL v25;
  int *v26;
  int *v27;
  int v28;
  int **v29;
  int **v30;
  int *v31;
  int *v32;
  int *v33;
  int *v34;
  int v35;
  int v36;
  int *v37;
  int v38;
  char *v39;
  BOOL v41;
  uint64_t v42;
  int **v43;
  int **v44;
  int **v45;
  int *v46;
  int *v47;
  int v48;
  int v49;
  uint64_t v50;
  int *v51;
  unint64_t v52;
  unint64_t v53;
  int **v54;
  int **v55;
  int *v56;
  int *v57;
  int v58;
  int v59;
  int **v60;
  int *v61;
  int v62;
  int **v63;
  int **v64;
  char *v65;

  v8 = result;
LABEL_2:
  v9 = (int **)(a2 - 8);
  v63 = (int **)(a2 - 24);
  v64 = (int **)(a2 - 16);
  v10 = (int **)v8;
  v65 = a2;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = (uint64_t)v10;
    v12 = v11;
    v13 = a2 - (char *)v10;
    v14 = (a2 - (char *)v10) >> 3;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v26 = (int *)*((_QWORD *)a2 - 1);
        v27 = *v10;
        v28 = **v10;
        if (*v26 < v28 || *v26 == v28 && v26[1] < v27[1])
        {
          *v10 = v26;
          *((_QWORD *)a2 - 1) = v27;
        }
        return result;
      case 3uLL:
        return sub_1002DA118(v10, v10 + 1, v9);
      case 4uLL:
        v29 = v10 + 1;
        v30 = v10 + 2;
        result = sub_1002DA118(v10, v10 + 1, v10 + 2);
        v31 = (int *)*((_QWORD *)a2 - 1);
        v32 = v10[2];
        if (*v31 < *v32 || *v31 == *v32 && v31[1] < v32[1])
        {
          *v30 = v31;
          *((_QWORD *)a2 - 1) = v32;
          v33 = *v30;
          v34 = *v29;
          v35 = **v30;
          v36 = **v29;
          if (v35 < v36 || v35 == v36 && v33[1] < v34[1])
          {
            v10[1] = v33;
            v10[2] = v34;
            v37 = *v10;
            v38 = **v10;
            if (v35 < v38 || v35 == v38 && v33[1] < v37[1])
            {
              *v10 = v33;
              v10[1] = v37;
            }
          }
        }
        return result;
      case 5uLL:
        return sub_1002DA7A8(v10, v10 + 1, v10 + 2, v10 + 3, v9);
      default:
        if (v13 > 191)
        {
          if (v12 == 1)
          {
            if (v10 != (int **)a2)
            {
              v52 = (v14 - 2) >> 1;
              v53 = v52 + 1;
              v54 = &v10[v52];
              do
              {
                sub_1002DA984((uint64_t)v10, a3, (a2 - (char *)v10) >> 3, v54--);
                --v53;
              }
              while (v53);
              return (uint64_t)sub_1002DAAC0((char *)v10, a2);
            }
            return result;
          }
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            sub_1002DA118(v16, v10, v9);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            sub_1002DA118(v10, v16, v9);
            v17 = a5;
            v18 = v9;
            v19 = &v10[v15];
            sub_1002DA118(v10 + 1, v19 - 1, v64);
            sub_1002DA118(v10 + 2, &v10[v15 + 1], v63);
            sub_1002DA118(v19 - 1, v16, &v10[v15 + 1]);
            v20 = *v10;
            *v10 = *v19;
            *v19 = v20;
            v9 = v18;
            a5 = v17;
            a2 = v65;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v21 = *(v10 - 1);
          v22 = **v10;
          if (*v21 >= v22 && (*v21 != v22 || v21[1] >= (*v10)[1]))
          {
            result = (uint64_t)sub_1002DA230(v10, (int **)a2);
            v10 = (int **)result;
            goto LABEL_19;
          }
LABEL_14:
          v23 = sub_1002DA38C(v10, (int **)a2);
          if ((v24 & 1) == 0)
            goto LABEL_17;
          v25 = sub_1002DA4E0(v10, v23);
          v10 = v23 + 1;
          result = sub_1002DA4E0(v23 + 1, (int **)a2);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v25)
              continue;
LABEL_17:
            result = sub_1002D9BEC(v8, v23, a3, -v12, a5 & 1);
            v10 = v23 + 1;
LABEL_19:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = (char *)v23;
          if (v25)
            return result;
          goto LABEL_2;
        }
        v39 = (char *)(v10 + 1);
        v41 = v10 == (int **)a2 || v39 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v41)
          {
            v42 = 0;
            v43 = v10;
            do
            {
              v45 = v43;
              v43 = (int **)v39;
              v47 = *v45;
              v46 = v45[1];
              v48 = *v46;
              v49 = **v45;
              if (*v46 < v49 || v48 == v49 && v46[1] < v47[1])
              {
                v45[1] = v47;
                v44 = v10;
                if (v45 != v10)
                {
                  v50 = v42;
                  while (1)
                  {
                    v51 = *(int **)((char *)v10 + v50 - 8);
                    if (v48 >= *v51)
                    {
                      if (v48 != *v51)
                      {
                        v44 = (int **)((char *)v10 + v50);
                        goto LABEL_43;
                      }
                      if (v46[1] >= v51[1])
                        break;
                    }
                    --v45;
                    *(int **)((char *)v10 + v50) = v51;
                    v50 -= 8;
                    if (!v50)
                    {
                      v44 = v10;
                      goto LABEL_43;
                    }
                  }
                  v44 = v45;
                }
LABEL_43:
                *v44 = v46;
              }
              v39 = (char *)(v43 + 1);
              v42 += 8;
            }
            while (v43 + 1 != (int **)a2);
          }
        }
        else if (!v41)
        {
          do
          {
            v55 = (int **)v8;
            v8 = (uint64_t)v39;
            v57 = *v55;
            v56 = v55[1];
            v58 = *v56;
            v59 = **v55;
            if (*v56 < v59 || v58 == v59 && v56[1] < v57[1])
            {
              do
              {
                do
                {
                  v60 = v55;
                  v61 = *--v55;
                  v55[2] = v57;
                  v57 = v61;
                  v62 = *v61;
                }
                while (v58 < *v61);
              }
              while (v58 == v62 && v56[1] < v57[1]);
              *v60 = v56;
            }
            v39 = (char *)(v8 + 8);
          }
          while ((char *)(v8 + 8) != a2);
        }
        return result;
    }
  }
}

uint64_t sub_1002DA118(int **a1, int **a2, int **a3)
{
  int *v3;
  int *v4;
  int v5;
  int v6;
  int *v7;
  int v8;
  int *v10;
  int v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  int *v16;
  int v17;

  v3 = *a2;
  v4 = *a1;
  v5 = **a2;
  v6 = **a1;
  if (v5 < v6 || v5 == v6 && v3[1] < v4[1])
  {
    v7 = *a3;
    v8 = **a3;
    if (v8 < v5 || v8 == v5 && v7[1] < v3[1])
    {
      *a1 = v7;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    v16 = *a3;
    v17 = **a3;
    if (v17 < v6 || v17 == v6 && v16[1] < v4[1])
    {
      *a2 = v16;
      *a3 = v4;
      return 2;
    }
  }
  else
  {
    v10 = *a3;
    v11 = **a3;
    if (v11 >= v5 && (v11 != v5 || v10[1] >= v3[1]))
      return 0;
    *a2 = v10;
    *a3 = v3;
    v12 = *a2;
    v13 = *a1;
    v14 = **a2;
    v15 = **a1;
    if (v14 < v15 || v14 == v15 && v12[1] < v13[1])
    {
      *a1 = v12;
      *a2 = v13;
      return 2;
    }
  }
  return 1;
}

int **sub_1002DA230(int **a1, int **a2)
{
  int *v2;
  int *v3;
  int v4;
  int v5;
  int **i;
  int *v7;
  int *v8;
  int v9;
  int v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  int *v16;
  int v17;

  v2 = *a1;
  v3 = *(a2 - 1);
  v4 = **a1;
  v5 = *v3;
  if (v4 < *v3 || v4 == v5 && v2[1] < v3[1])
  {
    i = a1;
    do
    {
      v8 = i[1];
      ++i;
      v7 = v8;
      v9 = *v8;
    }
    while (v4 >= *v8 && (v4 != v9 || v2[1] >= v7[1]));
  }
  else
  {
    for (i = a1 + 1; i < a2; ++i)
    {
      v10 = **i;
      if (v4 < v10 || v4 == v10 && v2[1] < (*i)[1])
        break;
    }
  }
  if (i < a2)
  {
    --a2;
    while (v4 < v5 || v4 == v5 && v2[1] < v3[1])
    {
      v11 = *--a2;
      v3 = v11;
      v5 = *v11;
    }
  }
  if (i < a2)
  {
    v12 = *i;
    v13 = *a2;
    do
    {
      *i = v13;
      *a2 = v12;
      do
      {
        v14 = i[1];
        ++i;
        v12 = v14;
        v15 = *v14;
      }
      while (v4 >= *v14 && (v4 != v15 || v2[1] >= v12[1]));
      do
      {
        do
        {
          v16 = *--a2;
          v13 = v16;
          v17 = *v16;
        }
        while (v4 < *v16);
      }
      while (v4 == v17 && v2[1] < v13[1]);
    }
    while (i < a2);
  }
  if (i - 1 != a1)
    *a1 = *(i - 1);
  *(i - 1) = v2;
  return i;
}

int **sub_1002DA38C(int **a1, int **a2)
{
  uint64_t v2;
  int *v3;
  int v4;
  int *v5;
  int **v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  int *v15;
  int **v16;
  int **v17;
  int v18;
  int *v19;
  int v20;

  v2 = 0;
  v3 = *a1;
  v4 = **a1;
  while (1)
  {
    v5 = a1[v2 + 1];
    if (*v5 >= v4 && (*v5 != v4 || v5[1] >= v3[1]))
      break;
    ++v2;
  }
  v6 = &a1[v2];
  v7 = (unint64_t)&a1[v2 + 1];
  if (v2 * 8)
  {
    do
    {
      v9 = *--a2;
      v8 = v9;
      v10 = *v9;
    }
    while (*v9 >= v4 && (v10 != v4 || v8[1] >= v3[1]));
  }
  else
  {
LABEL_19:
    if (v7 < (unint64_t)a2)
    {
      do
      {
        v12 = *--a2;
        v11 = v12;
        v13 = *v12;
        if (*v12 < v4)
          break;
        if (v13 != v4)
          goto LABEL_19;
      }
      while (v11[1] >= v3[1] && v7 < (unint64_t)a2);
    }
  }
  if (v7 < (unint64_t)a2)
  {
    v15 = *a2;
    v16 = (int **)v7;
    v17 = a2;
    do
    {
      *v16++ = v15;
      *v17 = v5;
      while (1)
      {
        v5 = *v16;
        v18 = **v16;
        if (v18 >= v4 && (v18 != v4 || v5[1] >= v3[1]))
          break;
        ++v16;
      }
      do
      {
        v19 = *--v17;
        v15 = v19;
        v20 = *v19;
      }
      while (*v19 >= v4 && (v20 != v4 || v15[1] >= v3[1]));
    }
    while (v16 < v17);
    v6 = v16 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL sub_1002DA4E0(int **a1, int **a2)
{
  uint64_t v4;
  _BOOL8 result;
  int **v6;
  int **v7;
  uint64_t v8;
  int v9;
  int **v10;
  int *v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int *v18;
  int v19;
  int **v20;
  int **v21;
  int *v22;
  int *v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  int *v28;
  int v29;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v17 = *(a2 - 1);
      v18 = *a1;
      v19 = **a1;
      if (*v17 < v19 || *v17 == v19 && v17[1] < v18[1])
      {
        *a1 = v17;
        *(a2 - 1) = v18;
      }
      return result;
    case 3:
      sub_1002DA118(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1 + 2;
      sub_1002DA118(a1, a1 + 1, a1 + 2);
      v22 = *(a2 - 1);
      v23 = a1[2];
      if (*v22 >= *v23 && (*v22 != *v23 || v22[1] >= v23[1]))
        return 1;
      *v21 = v22;
      *(a2 - 1) = v23;
      v24 = *v21;
      v25 = *v20;
      v26 = **v21;
      v27 = **v20;
      if (v26 >= v27 && (v26 != v27 || v24[1] >= v25[1]))
        return 1;
      a1[1] = v24;
      a1[2] = v25;
      v28 = *a1;
      v29 = **a1;
      if (v26 >= v29 && (v26 != v29 || v24[1] >= v28[1]))
        return 1;
      *a1 = v24;
      a1[1] = v28;
      return 1;
    case 5:
      sub_1002DA7A8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      sub_1002DA118(a1, a1 + 1, a1 + 2);
      v7 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *v7;
    v12 = *v6;
    v13 = **v7;
    v14 = **v6;
    if (v13 < v14 || v13 == v14 && v11[1] < v12[1])
    {
      *v7 = v12;
      v10 = a1;
      if (v6 != a1)
      {
        v15 = v8;
        while (1)
        {
          v16 = *(int **)((char *)a1 + v15 + 8);
          if (v13 >= *v16)
          {
            if (v13 != *v16)
            {
              v10 = v6;
              goto LABEL_6;
            }
            if (v11[1] >= v16[1])
              break;
          }
          --v6;
          *(int **)((char *)a1 + v15 + 16) = v16;
          v15 -= 8;
          if (v15 == -16)
          {
            v10 = a1;
            goto LABEL_6;
          }
        }
        v10 = (int **)((char *)a1 + v15 + 16);
      }
LABEL_6:
      *v10 = v11;
      if (++v9 == 8)
        return v7 + 1 == a2;
    }
    v6 = v7;
    v8 += 8;
    if (++v7 == a2)
      return 1;
  }
}

uint64_t sub_1002DA7A8(int **a1, int **a2, int **a3, int **a4, int **a5)
{
  uint64_t result;
  int *v11;
  int *v12;
  int v13;
  int v14;
  int *v15;
  int *v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  int v21;
  int v22;
  int *v23;
  int *v24;
  int v25;
  int v26;
  int *v27;
  int *v28;
  int v29;
  int v30;
  int *v31;
  int *v32;
  int v33;
  int v34;
  int *v35;
  int *v36;
  int v37;
  int v38;

  result = sub_1002DA118(a1, a2, a3);
  v11 = *a4;
  v12 = *a3;
  v13 = **a4;
  v14 = **a3;
  if (v13 < v14 || v13 == v14 && v11[1] < v12[1])
  {
    *a3 = v11;
    *a4 = v12;
    v15 = *a3;
    v16 = *a2;
    v17 = **a3;
    v18 = **a2;
    if (v17 < v18 || v17 == v18 && v15[1] < v16[1])
    {
      *a2 = v15;
      *a3 = v16;
      v19 = *a2;
      v20 = *a1;
      v21 = **a2;
      v22 = **a1;
      if (v21 < v22 || v21 == v22 && v19[1] < v20[1])
      {
        *a1 = v19;
        *a2 = v20;
      }
    }
  }
  v23 = *a5;
  v24 = *a4;
  v25 = **a5;
  v26 = **a4;
  if (v25 < v26 || v25 == v26 && v23[1] < v24[1])
  {
    *a4 = v23;
    *a5 = v24;
    v27 = *a4;
    v28 = *a3;
    v29 = **a4;
    v30 = **a3;
    if (v29 < v30 || v29 == v30 && v27[1] < v28[1])
    {
      *a3 = v27;
      *a4 = v28;
      v31 = *a3;
      v32 = *a2;
      v33 = **a3;
      v34 = **a2;
      if (v33 < v34 || v33 == v34 && v31[1] < v32[1])
      {
        *a2 = v31;
        *a3 = v32;
        v35 = *a2;
        v36 = *a1;
        v37 = **a2;
        v38 = **a1;
        if (v37 < v38 || v37 == v38 && v35[1] < v36[1])
        {
          *a1 = v35;
          *a2 = v36;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1002DA984(uint64_t result, uint64_t a2, uint64_t a3, int **a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int **v8;
  uint64_t v9;
  int *v10;
  int v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  int **v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  int *v21;
  int v22;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (int **)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[1];
        v11 = **v8;
        if (v11 < *v10 || v11 == *v10 && (*v8)[1] < v10[1])
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *v8;
      v13 = *a4;
      v14 = **v8;
      v15 = **a4;
      if (v14 >= v15 && (v14 != v15 || v12[1] >= v13[1]))
      {
        *a4 = v12;
        if (v5 >= v7)
        {
          while (1)
          {
            v17 = 2 * v7;
            v7 = (2 * v7) | 1;
            v16 = (int **)(result + 8 * v7);
            v18 = v17 + 2;
            if (v18 < a3)
            {
              v19 = v16[1];
              v20 = **v16;
              if (v20 < *v19 || v20 == *v19 && (*v16)[1] < v19[1])
              {
                ++v16;
                v7 = v18;
              }
            }
            v21 = *v16;
            v22 = **v16;
            if (v22 < v15 || v22 == v15 && v21[1] < v13[1])
              break;
            *v8 = v21;
            v8 = v16;
            if (v5 < v7)
              goto LABEL_13;
          }
        }
        v16 = v8;
LABEL_13:
        *v16 = v13;
      }
    }
  }
  return result;
}

char *sub_1002DAAC0(char *result, char *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v5;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int *v16;
  int v17;
  int v18;
  unint64_t v19;
  int *v20;
  int v21;

  if (a2 - result >= 9)
  {
    v2 = (unint64_t)(a2 - result) >> 3;
    do
    {
      v5 = 0;
      v6 = *(int **)result;
      v3 = result;
      do
      {
        v7 = v3;
        v3 += 8 * v5 + 8;
        v8 = 2 * v5;
        v5 = (2 * v5) | 1;
        v9 = v8 + 2;
        if (v9 < v2)
        {
          v10 = (_DWORD *)*((_QWORD *)v3 + 1);
          v11 = **(_DWORD **)v3;
          if (v11 < *v10 || v11 == *v10 && *(_DWORD *)(*(_QWORD *)v3 + 4) < v10[1])
          {
            v3 += 8;
            v5 = v9;
          }
        }
        *(_QWORD *)v7 = *(_QWORD *)v3;
      }
      while (v5 <= (uint64_t)((unint64_t)(v2 - 2) >> 1));
      a2 -= 8;
      if (v3 != a2)
      {
        *(_QWORD *)v3 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v6;
        v12 = v3 - result + 8;
        if (v12 < 9)
          continue;
        v13 = ((unint64_t)v12 >> 3) - 2;
        v14 = v13 >> 1;
        v15 = &result[8 * (v13 >> 1)];
        v16 = *(int **)v15;
        v6 = *(int **)v3;
        v17 = **(_DWORD **)v15;
        v18 = **(_DWORD **)v3;
        if (v17 >= v18 && (v17 != v18 || v16[1] >= v6[1]))
          continue;
        *(_QWORD *)v3 = v16;
        if (v13 >= 2)
        {
          while (1)
          {
            v19 = v14 - 1;
            v14 = (v14 - 1) >> 1;
            v3 = &result[8 * v14];
            v20 = *(int **)v3;
            v21 = **(_DWORD **)v3;
            if (v21 >= v18 && (v21 != v18 || v20[1] >= v6[1]))
              break;
            *(_QWORD *)v15 = v20;
            v15 = &result[8 * v14];
            if (v19 <= 1)
              goto LABEL_4;
          }
        }
        v3 = v15;
      }
LABEL_4:
      *(_QWORD *)v3 = v6;
    }
    while (v2-- > 2);
  }
  return result;
}

uint64_t sub_1002DAC38(uint64_t result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  float **v9;
  float **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float **v16;
  uint64_t v17;
  float **v18;
  float **v19;
  float *v20;
  float *v21;
  float v22;
  float **v23;
  char v24;
  BOOL v25;
  float *v26;
  float *v27;
  float v28;
  float **v29;
  float **v30;
  float *v31;
  float *v32;
  float *v33;
  float *v34;
  float v35;
  float v36;
  float *v37;
  float v38;
  char *v39;
  BOOL v41;
  uint64_t v42;
  float **v43;
  float **v44;
  float **v45;
  float *v46;
  float *v47;
  float v48;
  float v49;
  uint64_t v50;
  float *v51;
  unint64_t v52;
  unint64_t v53;
  float **v54;
  uint64_t v55;
  float *v56;
  float *v57;
  float v58;
  float v59;
  float **v60;
  float *v61;
  BOOL v62;
  float **v63;
  float **v64;
  char *v65;

  v8 = result;
LABEL_2:
  v9 = (float **)(a2 - 8);
  v63 = (float **)(a2 - 24);
  v64 = (float **)(a2 - 16);
  v10 = (float **)v8;
  v65 = a2;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = (uint64_t)v10;
    v12 = v11;
    v13 = a2 - (char *)v10;
    v14 = (a2 - (char *)v10) >> 3;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v26 = (float *)*((_QWORD *)a2 - 1);
        v27 = *v10;
        v28 = **v10;
        if (*v26 < v28 || *v26 == v28 && v26[1] < v27[1])
        {
          *v10 = v26;
          *((_QWORD *)a2 - 1) = v27;
        }
        return result;
      case 3uLL:
        return sub_1002DB158(v10, v10 + 1, v9);
      case 4uLL:
        v29 = v10 + 1;
        v30 = v10 + 2;
        result = sub_1002DB158(v10, v10 + 1, v10 + 2);
        v31 = (float *)*((_QWORD *)a2 - 1);
        v32 = v10[2];
        if (*v31 < *v32 || *v31 == *v32 && v31[1] < v32[1])
        {
          *v30 = v31;
          *((_QWORD *)a2 - 1) = v32;
          v33 = *v30;
          v34 = *v29;
          v35 = **v30;
          v36 = **v29;
          if (v35 < v36 || v35 == v36 && v33[1] < v34[1])
          {
            v10[1] = v33;
            v10[2] = v34;
            v37 = *v10;
            v38 = **v10;
            if (v35 < v38 || v35 == v38 && v33[1] < v37[1])
            {
              *v10 = v33;
              v10[1] = v37;
            }
          }
        }
        return result;
      case 5uLL:
        return sub_1002DB7D4(v10, v10 + 1, v10 + 2, v10 + 3, v9);
      default:
        if (v13 > 191)
        {
          if (v12 == 1)
          {
            if (v10 != (float **)a2)
            {
              v52 = (v14 - 2) >> 1;
              v53 = v52 + 1;
              v54 = &v10[v52];
              do
              {
                sub_1002DB984((uint64_t)v10, a3, (a2 - (char *)v10) >> 3, v54--);
                --v53;
              }
              while (v53);
              return (uint64_t)sub_1002DBAC0((char *)v10, a2);
            }
            return result;
          }
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            sub_1002DB158(v16, v10, v9);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            sub_1002DB158(v10, v16, v9);
            v17 = a5;
            v18 = v9;
            v19 = &v10[v15];
            sub_1002DB158(v10 + 1, v19 - 1, v64);
            sub_1002DB158(v10 + 2, &v10[v15 + 1], v63);
            sub_1002DB158(v19 - 1, v16, &v10[v15 + 1]);
            v20 = *v10;
            *v10 = *v19;
            *v19 = v20;
            v9 = v18;
            a5 = v17;
            a2 = v65;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v21 = *(v10 - 1);
          v22 = **v10;
          if (*v21 >= v22 && (*v21 != v22 || v21[1] >= (*v10)[1]))
          {
            result = (uint64_t)sub_1002DB26C(v10, (float **)a2);
            v10 = (float **)result;
            goto LABEL_19;
          }
LABEL_14:
          v23 = sub_1002DB3C8(v10, (float **)a2);
          if ((v24 & 1) == 0)
            goto LABEL_17;
          v25 = sub_1002DB51C(v10, v23);
          v10 = v23 + 1;
          result = sub_1002DB51C(v23 + 1, (float **)a2);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v25)
              continue;
LABEL_17:
            result = sub_1002DAC38(v8, v23, a3, -v12, a5 & 1);
            v10 = v23 + 1;
LABEL_19:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = (char *)v23;
          if (v25)
            return result;
          goto LABEL_2;
        }
        v39 = (char *)(v10 + 1);
        v41 = v10 == (float **)a2 || v39 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v41)
          {
            v42 = 0;
            v43 = v10;
            do
            {
              v45 = v43;
              v43 = (float **)v39;
              v47 = *v45;
              v46 = v45[1];
              v48 = *v46;
              v49 = **v45;
              if (*v46 < v49 || *v46 == v49 && v46[1] < v47[1])
              {
                v45[1] = v47;
                v44 = v10;
                if (v45 != v10)
                {
                  v50 = v42;
                  while (1)
                  {
                    v51 = *(float **)((char *)v10 + v50 - 8);
                    if (v48 >= *v51)
                    {
                      if (v48 != *v51)
                      {
                        v44 = (float **)((char *)v10 + v50);
                        goto LABEL_49;
                      }
                      if (v46[1] >= v51[1])
                        break;
                    }
                    --v45;
                    *(float **)((char *)v10 + v50) = v51;
                    v50 -= 8;
                    if (!v50)
                    {
                      v44 = v10;
                      goto LABEL_49;
                    }
                  }
                  v44 = v45;
                }
LABEL_49:
                *v44 = v46;
              }
              v39 = (char *)(v43 + 1);
              v42 += 8;
            }
            while (v43 + 1 != (float **)a2);
          }
        }
        else if (!v41)
        {
          do
          {
            v55 = v8;
            v8 = (uint64_t)v39;
            v57 = *(float **)v55;
            v56 = *(float **)(v55 + 8);
            v58 = *v56;
            v59 = **(float **)v55;
            if (*v56 < v59 || *v56 == v59 && v56[1] < v57[1])
            {
              do
              {
                do
                {
                  v60 = (float **)v55;
                  v61 = *(float **)(v55 - 8);
                  v55 -= 8;
                  *(_QWORD *)(v55 + 16) = v57;
                  v57 = v61;
                  v62 = v58 == *v61;
                }
                while (v58 < *v61);
              }
              while (v62 && v56[1] < v57[1]);
              *v60 = v56;
            }
            v39 = (char *)(v8 + 8);
          }
          while ((char *)(v8 + 8) != a2);
        }
        return result;
    }
  }
}

uint64_t sub_1002DB158(float **a1, float **a2, float **a3)
{
  float *v3;
  float *v4;
  float v5;
  float v6;
  float *v7;
  float v8;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float *v16;
  float v17;

  v3 = *a2;
  v4 = *a1;
  v5 = **a2;
  v6 = **a1;
  if (v5 < v6 || v5 == v6 && v3[1] < v4[1])
  {
    v7 = *a3;
    v8 = **a3;
    if (v8 < v5 || v8 == v5 && v7[1] < v3[1])
    {
      *a1 = v7;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    v16 = *a3;
    v17 = **a3;
    if (v17 < v6 || v17 == v6 && v16[1] < v4[1])
    {
      *a2 = v16;
      *a3 = v4;
      return 2;
    }
    return 1;
  }
  v10 = *a3;
  v11 = **a3;
  if (v11 < v5 || v11 == v5 && v10[1] < v3[1])
  {
    *a2 = v10;
    *a3 = v3;
    v12 = *a2;
    v13 = *a1;
    v14 = **a2;
    v15 = **a1;
    if (v14 < v15 || v14 == v15 && v12[1] < v13[1])
    {
      *a1 = v12;
      *a2 = v13;
      return 2;
    }
    return 1;
  }
  return 0;
}

float **sub_1002DB26C(float **a1, float **a2)
{
  float *v2;
  float *v3;
  float v4;
  float v5;
  float **i;
  float *v7;
  float *v8;
  float v9;
  float v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  BOOL v17;

  v2 = *a1;
  v3 = *(a2 - 1);
  v4 = **a1;
  v5 = *v3;
  if (v4 < *v3 || v4 == *v3 && v2[1] < v3[1])
  {
    i = a1;
    do
    {
      v8 = i[1];
      ++i;
      v7 = v8;
      v9 = *v8;
    }
    while (v4 >= *v8 && (v4 != v9 || v2[1] >= v7[1]));
  }
  else
  {
    for (i = a1 + 1; i < a2; ++i)
    {
      v10 = **i;
      if (v4 < v10 || v4 == v10 && v2[1] < (*i)[1])
        break;
    }
  }
  if (i < a2)
  {
    --a2;
    while (v4 < v5 || v4 == v5 && v2[1] < v3[1])
    {
      v11 = *--a2;
      v3 = v11;
      v5 = *v11;
    }
  }
  if (i < a2)
  {
    v12 = *i;
    v13 = *a2;
    do
    {
      *i = v13;
      *a2 = v12;
      do
      {
        v14 = i[1];
        ++i;
        v12 = v14;
        v15 = *v14;
      }
      while (v4 >= *v14 && (v4 != v15 || v2[1] >= v12[1]));
      do
      {
        do
        {
          v16 = *--a2;
          v13 = v16;
          v17 = v4 == *v16;
        }
        while (v4 < *v16);
      }
      while (v17 && v2[1] < v13[1]);
    }
    while (i < a2);
  }
  if (i - 1 != a1)
    *a1 = *(i - 1);
  *(i - 1) = v2;
  return i;
}

float **sub_1002DB3C8(float **a1, float **a2)
{
  uint64_t v2;
  float *v3;
  float v4;
  float *v5;
  float **v6;
  unint64_t v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v15;
  float **v16;
  float **v17;
  float v18;
  float *v19;
  float v20;

  v2 = 0;
  v3 = *a1;
  v4 = **a1;
  while (1)
  {
    v5 = a1[v2 + 1];
    if (*v5 >= v4 && (*v5 != v4 || v5[1] >= v3[1]))
      break;
    ++v2;
  }
  v6 = &a1[v2];
  v7 = (unint64_t)&a1[v2 + 1];
  if (v2 * 8)
  {
    do
    {
      v9 = *--a2;
      v8 = v9;
      v10 = *v9;
    }
    while (*v9 >= v4 && (v10 != v4 || v8[1] >= v3[1]));
  }
  else
  {
LABEL_19:
    if (v7 < (unint64_t)a2)
    {
      do
      {
        v12 = *--a2;
        v11 = v12;
        v13 = *v12;
        if (*v12 < v4)
          break;
        if (v13 != v4)
          goto LABEL_19;
      }
      while (v11[1] >= v3[1] && v7 < (unint64_t)a2);
    }
  }
  if (v7 < (unint64_t)a2)
  {
    v15 = *a2;
    v16 = (float **)v7;
    v17 = a2;
    do
    {
      *v16++ = v15;
      *v17 = v5;
      while (1)
      {
        v5 = *v16;
        v18 = **v16;
        if (v18 >= v4 && (v18 != v4 || v5[1] >= v3[1]))
          break;
        ++v16;
      }
      do
      {
        v19 = *--v17;
        v15 = v19;
        v20 = *v19;
      }
      while (*v19 >= v4 && (v20 != v4 || v15[1] >= v3[1]));
    }
    while (v16 < v17);
    v6 = v16 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL sub_1002DB51C(float **a1, float **a2)
{
  uint64_t v4;
  _BOOL8 result;
  float **v6;
  float **v7;
  uint64_t v8;
  int v9;
  float **v10;
  float *v11;
  float *v12;
  float v13;
  float v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  float v19;
  float **v20;
  float **v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  float v26;
  float v27;
  float *v28;
  float v29;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v17 = *(a2 - 1);
      v18 = *a1;
      v19 = **a1;
      if (*v17 < v19 || *v17 == v19 && v17[1] < v18[1])
      {
        *a1 = v17;
        *(a2 - 1) = v18;
      }
      return result;
    case 3:
      sub_1002DB158(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1 + 2;
      sub_1002DB158(a1, a1 + 1, a1 + 2);
      v22 = *(a2 - 1);
      v23 = a1[2];
      if (*v22 >= *v23 && (*v22 != *v23 || v22[1] >= v23[1]))
        return 1;
      *v21 = v22;
      *(a2 - 1) = v23;
      v24 = *v21;
      v25 = *v20;
      v26 = **v21;
      v27 = **v20;
      if (v26 >= v27 && (v26 != v27 || v24[1] >= v25[1]))
        return 1;
      a1[1] = v24;
      a1[2] = v25;
      v28 = *a1;
      v29 = **a1;
      if (v26 >= v29 && (v26 != v29 || v24[1] >= v28[1]))
        return 1;
      *a1 = v24;
      a1[1] = v28;
      return 1;
    case 5:
      sub_1002DB7D4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      sub_1002DB158(a1, a1 + 1, a1 + 2);
      v7 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *v7;
    v12 = *v6;
    v13 = **v7;
    v14 = **v6;
    if (v13 < v14 || v13 == v14 && v11[1] < v12[1])
    {
      *v7 = v12;
      v10 = a1;
      if (v6 != a1)
      {
        v15 = v8;
        while (1)
        {
          v16 = *(float **)((char *)a1 + v15 + 8);
          if (v13 >= *v16)
          {
            if (v13 != *v16)
            {
              v10 = v6;
              goto LABEL_6;
            }
            if (v11[1] >= v16[1])
              break;
          }
          --v6;
          *(float **)((char *)a1 + v15 + 16) = v16;
          v15 -= 8;
          if (v15 == -16)
          {
            v10 = a1;
            goto LABEL_6;
          }
        }
        v10 = (float **)((char *)a1 + v15 + 16);
      }
LABEL_6:
      *v10 = v11;
      if (++v9 == 8)
        return v7 + 1 == a2;
    }
    v6 = v7;
    v8 += 8;
    if (++v7 == a2)
      return 1;
  }
}

uint64_t sub_1002DB7D4(float **a1, float **a2, float **a3, float **a4, float **a5)
{
  uint64_t result;
  float *v11;
  float *v12;
  float v13;
  float v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  float *v23;
  float *v24;
  float v25;
  float v26;
  float *v27;
  float *v28;
  float v29;
  float v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  float *v35;
  float *v36;
  float v37;
  float v38;

  result = sub_1002DB158(a1, a2, a3);
  v11 = *a4;
  v12 = *a3;
  v13 = **a4;
  v14 = **a3;
  if (v13 < v14 || v13 == v14 && v11[1] < v12[1])
  {
    *a3 = v11;
    *a4 = v12;
    v15 = *a3;
    v16 = *a2;
    v17 = **a3;
    v18 = **a2;
    if (v17 < v18 || v17 == v18 && v15[1] < v16[1])
    {
      *a2 = v15;
      *a3 = v16;
      v19 = *a2;
      v20 = *a1;
      v21 = **a2;
      v22 = **a1;
      if (v21 < v22 || v21 == v22 && v19[1] < v20[1])
      {
        *a1 = v19;
        *a2 = v20;
      }
    }
  }
  v23 = *a5;
  v24 = *a4;
  v25 = **a5;
  v26 = **a4;
  if (v25 < v26 || v25 == v26 && v23[1] < v24[1])
  {
    *a4 = v23;
    *a5 = v24;
    v27 = *a4;
    v28 = *a3;
    v29 = **a4;
    v30 = **a3;
    if (v29 < v30 || v29 == v30 && v27[1] < v28[1])
    {
      *a3 = v27;
      *a4 = v28;
      v31 = *a3;
      v32 = *a2;
      v33 = **a3;
      v34 = **a2;
      if (v33 < v34 || v33 == v34 && v31[1] < v32[1])
      {
        *a2 = v31;
        *a3 = v32;
        v35 = *a2;
        v36 = *a1;
        v37 = **a2;
        v38 = **a1;
        if (v37 < v38 || v37 == v38 && v35[1] < v36[1])
        {
          *a1 = v35;
          *a2 = v36;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1002DB984(uint64_t result, uint64_t a2, uint64_t a3, float **a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float **v8;
  uint64_t v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float **v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  float *v21;
  float v22;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (float **)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[1];
        v11 = **v8;
        if (v11 < *v10 || v11 == *v10 && (*v8)[1] < v10[1])
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *v8;
      v13 = *a4;
      v14 = **v8;
      v15 = **a4;
      if (v14 >= v15 && (v14 != v15 || v12[1] >= v13[1]))
      {
        *a4 = v12;
        if (v5 >= v7)
        {
          while (1)
          {
            v17 = 2 * v7;
            v7 = (2 * v7) | 1;
            v16 = (float **)(result + 8 * v7);
            v18 = v17 + 2;
            if (v18 < a3)
            {
              v19 = v16[1];
              v20 = **v16;
              if (v20 < *v19 || v20 == *v19 && (*v16)[1] < v19[1])
              {
                ++v16;
                v7 = v18;
              }
            }
            v21 = *v16;
            v22 = **v16;
            if (v22 < v15 || v22 == v15 && v21[1] < v13[1])
              break;
            *v8 = v21;
            v8 = v16;
            if (v5 < v7)
              goto LABEL_13;
          }
        }
        v16 = v8;
LABEL_13:
        *v16 = v13;
      }
    }
  }
  return result;
}

char *sub_1002DBAC0(char *result, char *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v5;
  float *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float **v15;
  float *v16;
  float v17;
  float v18;
  unint64_t v19;
  float *v20;
  float v21;

  if (a2 - result >= 9)
  {
    v2 = (unint64_t)(a2 - result) >> 3;
    do
    {
      v5 = 0;
      v6 = *(float **)result;
      v3 = result;
      do
      {
        v7 = v3;
        v3 += 8 * v5 + 8;
        v8 = 2 * v5;
        v5 = (2 * v5) | 1;
        v9 = v8 + 2;
        if (v9 < v2)
        {
          v10 = (float *)*((_QWORD *)v3 + 1);
          v11 = **(float **)v3;
          if (v11 < *v10 || v11 == *v10 && *(float *)(*(_QWORD *)v3 + 4) < v10[1])
          {
            v3 += 8;
            v5 = v9;
          }
        }
        *(_QWORD *)v7 = *(_QWORD *)v3;
      }
      while (v5 <= (uint64_t)((unint64_t)(v2 - 2) >> 1));
      a2 -= 8;
      if (v3 != a2)
      {
        *(_QWORD *)v3 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v6;
        v12 = v3 - result + 8;
        if (v12 < 9)
          continue;
        v13 = ((unint64_t)v12 >> 3) - 2;
        v14 = v13 >> 1;
        v15 = (float **)&result[8 * (v13 >> 1)];
        v16 = *v15;
        v6 = *(float **)v3;
        v17 = **v15;
        v18 = **(float **)v3;
        if (v17 >= v18 && (v17 != v18 || v16[1] >= v6[1]))
          continue;
        *(_QWORD *)v3 = v16;
        if (v13 >= 2)
        {
          while (1)
          {
            v19 = v14 - 1;
            v14 = (v14 - 1) >> 1;
            v3 = &result[8 * v14];
            v20 = *(float **)v3;
            v21 = **(float **)v3;
            if (v21 >= v18 && (v21 != v18 || v20[1] >= v6[1]))
              break;
            *v15 = v20;
            v15 = (float **)&result[8 * v14];
            if (v19 <= 1)
              goto LABEL_4;
          }
        }
        v3 = (char *)v15;
      }
LABEL_4:
      *(_QWORD *)v3 = v6;
    }
    while (v2-- > 2);
  }
  return result;
}

void sub_1002DBC34(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  __int32 v15;
  int v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int32x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t *v49;
  unint64_t v50;
  unsigned int v51;
  int32x2_t v52;
  int32x2_t v53;
  _BOOL4 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  int32x2_t *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  int *v80;
  unint64_t *v81;
  int32x2_t v82;
  int32x2_t v83;
  int v84;
  int v85;
  _BOOL4 v87;
  uint64_t v88;
  int32x2_t v89;
  int32x2_t v90;
  int v91;
  int v92;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  int *v100;
  unint64_t *v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  int *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD *v128;
  _OWORD *v129;
  uint64_t v130;
  _WORD *v131;
  _WORD *v132;
  BOOL v134;
  _BOOL4 v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  BOOL v147;
  char v148;
  BOOL v150;
  BOOL v152;
  BOOL v153;
  char *v154;
  char *v155;
  BOOL v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  BOOL v186;
  BOOL v188;
  BOOL v190;
  BOOL v192;
  BOOL v194;
  BOOL v196;
  BOOL v198;
  BOOL v200;
  BOOL v202;
  uint64_t v203;
  BOOL v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  _BYTE *v217;
  _BYTE *v218;
  _BYTE *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int16x8_t *v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  char *v244;
  char *v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unsigned __int8 *v253;
  int v254;
  int v255;
  __int16 v256;
  int v257;
  int v258;
  int v259;
  __int16 v260;
  int v261;
  int v262;
  int v263;
  int v264;
  __int16 v265;
  int v266;
  int v267;
  __int16 v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  char *v286;
  unint64_t v287;
  char *v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  BOOL v294;
  char v301;
  BOOL v303;
  BOOL v305;
  BOOL v307;
  unint64_t v308;
  BOOL v310;
  BOOL v312;
  BOOL v314;
  BOOL v315;
  unint64_t v316;
  char v317;
  BOOL v319;
  BOOL v321;
  BOOL v323;
  BOOL v325;
  BOOL v327;
  BOOL v329;
  unint64_t v330;
  BOOL v332;
  BOOL v333;
  char *v334;
  char v335;
  BOOL v337;
  BOOL v339;
  BOOL v341;
  BOOL v343;
  BOOL v345;
  unint64_t v346;
  unint64_t v347;
  BOOL v349;
  BOOL v351;
  BOOL v352;
  char *v353;
  char v354;
  BOOL v356;
  BOOL v358;
  BOOL v360;
  BOOL v362;
  BOOL v364;
  BOOL v366;
  BOOL v368;
  BOOL v369;
  char *v370;
  char v371;
  BOOL v373;
  BOOL v375;
  BOOL v377;
  BOOL v379;
  unint64_t v380;
  unint64_t v381;
  char v383;
  unint64_t v384;
  BOOL v386;
  BOOL v388;
  BOOL v389;
  char *v390;
  char v391;
  BOOL v393;
  BOOL v395;
  BOOL v397;
  BOOL v399;
  BOOL v401;
  BOOL v403;
  BOOL v405;
  BOOL v406;
  char *v407;
  char v408;
  BOOL v410;
  BOOL v412;
  BOOL v414;
  BOOL v416;
  BOOL v418;
  BOOL v420;
  BOOL v422;
  BOOL v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  int16x8_t *v433;
  uint8x8_t v434;
  uint8x8_t v435;
  uint16x8_t v436;
  uint8x8_t v437;
  uint8x8_t v438;
  int8x16_t v439;
  int16x4_t v440;
  uint32x4_t v441;
  uint8x8_t v442;
  uint32x4_t v443;
  uint16x8_t v444;
  uint16x8_t v445;
  int8x16_t v446;
  int16x4_t v447;
  uint32x4_t v448;
  uint32x4_t v449;
  uint16x8_t v450;
  uint16x8_t v451;
  uint16x8_t v452;
  uint16x8_t v453;
  uint32x4_t v454;
  uint32x4_t v455;
  uint16x8_t v456;
  uint16x8_t v457;
  uint32x4_t v458;
  uint32x4_t v459;
  uint16x8_t v460;
  uint64_t v461;
  int16x8_t *v462;
  uint8x16_t v463;
  uint8x16_t v464;
  uint8x16_t v465;
  uint16x8_t v466;
  uint8x16_t v467;
  uint8x16_t v468;
  uint16x8_t v469;
  uint8x16_t v470;
  int8x16_t v471;
  int16x4_t v472;
  int8x16_t v473;
  int16x4_t v474;
  uint32x4_t v475;
  uint32x4_t v476;
  uint8x16_t v477;
  uint8x16_t v478;
  uint32x4_t v479;
  uint32x4_t v480;
  uint8x16_t v481;
  uint16x8_t v482;
  uint16x8_t v483;
  uint8x16_t v484;
  uint16x8_t v485;
  uint8x16_t v486;
  uint8x16_t v487;
  uint8x16_t v488;
  uint16x8_t v489;
  int8x16_t v490;
  int16x4_t v491;
  int8x16_t v492;
  int16x4_t v493;
  uint32x4_t v494;
  uint32x4_t v495;
  uint32x4_t v496;
  uint8x16_t v497;
  uint16x8_t v498;
  uint16x8_t v499;
  int16x8_t v500;
  uint8x16_t v501;
  int16x8_t v502;
  uint16x8_t v503;
  uint16x8_t v504;
  uint8x16_t v505;
  uint16x8_t v506;
  uint8x16_t v507;
  uint32x4_t v508;
  uint16x8_t v509;
  uint16x8_t v510;
  uint8x16_t v511;
  uint32x4_t v512;
  uint16x8_t v513;
  int16x8_t v514;
  uint16x8_t v515;
  int16x8_t v516;
  int16x8_t v517;
  uint8x16_t v518;
  uint16x8_t v519;
  uint8x16_t v520;
  int16x8_t v521;
  uint16x8_t v522;
  int16x8_t *v523;
  uint16x8_t *v524;
  int16x8_t v525;
  uint16x8_t v526;
  uint16x8_t *v527;
  int16x8_t *v528;
  uint16x8_t v529;
  uint16x8_t v530;
  int16x8_t *v531;
  uint16x8_t *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  _BYTE *v537;
  uint64_t v538;
  char v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  char *v543;
  uint64_t v544;
  float v545;
  int v546;
  uint64_t v547;
  int v548;
  int v549;
  int v550;
  _BYTE *v551;
  int v552;
  int v553;
  unsigned int v554;
  unsigned int v555;
  int v556;
  unsigned int v557;
  unsigned int v558;
  unsigned int v559;
  unsigned int v560;
  unsigned int v561;
  unsigned int v562;
  int v563;
  unsigned int v564;
  unsigned int v565;
  int v566;
  unsigned int v567;
  unsigned int v568;
  unsigned int v569;
  int v570;
  unsigned int v571;
  int v572;
  int v573;
  int v574;
  uint64_t v575;
  int v576;
  unsigned int v577;
  unsigned int v578;
  int v579;
  unsigned int v580;
  unsigned int v581;
  unsigned int v582;
  int v583;
  unsigned int v584;
  int v585;
  int v586;
  int v587;
  uint64_t v588;
  float v589;
  float v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  _OWORD *v602;
  uint64_t v603;
  __int128 v604;
  __int128 v605;
  _OWORD *v606;
  _WORD *v607;
  uint64_t v608;
  __int16 *v609;
  _WORD *v610;
  __int16 *v611;
  __int16 v612;
  __int16 v613;
  int *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  int *v619;
  uint64_t v620;
  uint64_t v621;
  int v622;
  int v623;
  uint64_t v624;
  int v625;
  _BYTE *v626;
  uint64_t v627;
  uint64_t v628;
  _BYTE *v629;
  int *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  int *v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  unint64_t v639;
  uint64_t v640;
  uint64_t v641;
  unint64_t v642;
  unint64_t v643;
  uint64_t v644;
  int *v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  unint64_t v649;
  int *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  unint64_t v655;
  uint64_t v656;
  int v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  int v661;
  uint64_t v662;
  uint64_t v663;
  _OWORD *v664;
  _OWORD *v665;
  uint64_t v666;
  _WORD *v667;
  _WORD *v668;
  int *v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  int *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  unint64_t v685;
  uint64_t v686;
  uint64_t v687;
  _WORD *v688;
  uint64_t v689;
  uint64_t v690;
  _OWORD *v691;
  uint64_t v692;
  _OWORD *v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  unint64_t v700;
  uint64_t v701;
  uint64_t v702;
  _OWORD *v703;
  uint64_t v704;
  __int128 v705;
  __int128 v706;
  _OWORD *v707;
  _WORD *v708;
  uint64_t v709;
  __int16 *v710;
  _WORD *v711;
  __int16 *v712;
  __int16 v713;
  __int16 v714;
  unint64_t v715;
  unint64_t v716;
  uint64_t v717;
  _OWORD *v718;
  uint64_t v719;
  _OWORD *v720;
  __int128 v721;
  _OWORD *v722;
  __int128 v723;
  _OWORD *v724;
  uint64_t v725;
  __int128 v726;
  __int128 v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  char v746;
  char v747;
  uint64_t v748;
  _WORD *v749;
  uint64_t v750;
  int v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  int v760;
  uint64_t v761;
  uint64_t v762;
  char *v763;
  char *v764;
  int v765;
  char *v766;
  char *v767;
  char *v768;
  char *v769;
  char *v770;
  char *v771;
  char *v772;
  char *v773;
  int v774;
  char *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  char *v788;
  uint64_t v789;
  char *v790;
  char *v791;
  char *v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  unsigned int v800;
  unsigned int v801;
  uint64_t v802;
  uint64_t v803;
  char v804;
  uint64_t v805;
  unsigned int v806;
  uint64_t v807;
  int v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  char *v812;
  char *v813;
  char *v814;
  char *v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  char v821;
  BOOL v822;
  BOOL v823;
  BOOL v824;
  BOOL v825;
  BOOL v826;
  BOOL v827;
  BOOL v828;
  BOOL v829;
  BOOL v830;
  char *v831;
  BOOL v832;
  char *v833;
  char *v834;
  char v835;
  char *v836;
  unint64_t v837;
  unint64_t v838;
  char *v839;
  char *v840;
  char *v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  char *v859;
  char *v860;
  char *v861;
  char *v862;
  char *v863;
  char *v864;
  char *v865;
  char *v866;
  char *v867;
  char *v868;
  char *v869;
  char *v870;
  char *v871;
  char *v872;
  char *v873;
  char *v874;
  uint64_t v875;
  uint64_t v876;
  char *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  int v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  BOOL v895;
  BOOL v896;
  BOOL v897;
  BOOL v898;
  BOOL v899;
  char v900;
  unint64_t v901;
  BOOL v902;
  char v903;
  unint64_t v904;
  unint64_t v905;
  BOOL v906;
  BOOL v907;
  BOOL v908;
  BOOL v909;
  char v910;
  BOOL v911;
  BOOL v912;
  BOOL v913;
  uint64_t v914;
  BOOL v915;
  BOOL v916;
  char v917;
  BOOL v918;
  uint64_t v919;
  BOOL v920;
  BOOL v921;
  uint64_t v922;
  BOOL v923;
  BOOL v924;
  char v925;
  BOOL v926;
  BOOL v927;
  BOOL v928;
  BOOL v929;
  BOOL v930;
  BOOL v931;
  char v932;
  uint64_t v933;
  BOOL v934;
  BOOL v935;
  BOOL v936;
  BOOL v937;
  BOOL v938;
  char v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  int v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  char *v954;
  char *v955;
  char *v956;
  char *v957;
  char *v958;
  char *v959;
  char *v960;
  char *v961;
  uint64_t v962;
  char *v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  int v973;
  unsigned int v974;
  uint64_t v975;
  int v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  char *v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  int32x2_t v984;
  __int128 v985;
  __int128 v986;
  __int128 v987;
  uint64_t v988;
  uint64_t v989;
  int *v990;
  void *v991;
  _QWORD v992[2];
  int32x2_t v993;
  int32x2_t v994;
  _BYTE v995[64];
  int *v996;
  void *v997;
  unint64_t v998;
  unint64_t v999;
  __int128 v1000;
  __int128 v1001;
  __int128 v1002;
  uint64_t v1003;
  uint64_t v1004;
  int32x2_t *v1005;
  void *v1006;
  _QWORD v1007[3];
  char v1008[8];
  int v1009;
  _DWORD v1010[2];
  _OWORD v1011[4];
  int *v1012;
  uint64_t *v1013;
  uint64_t v1014;
  uint64_t v1015;
  int32x2_t v1016;

  sub_100298C2C(v1008, &off_100451CC0);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_OWORD *)(v8 + 16);
    v1000 = *(_OWORD *)v8;
    v1001 = v9;
    v1002 = *(_OWORD *)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 56);
    v1003 = *(_QWORD *)(v8 + 48);
    v1004 = v10;
    v1005 = (int32x2_t *)&v1000 + 1;
    v1006 = v1007;
    v1007[1] = 0;
    v1007[0] = 0;
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    if (*(int *)(v8 + 4) > 2)
    {
      DWORD1(v1000) = 0;
      sub_100256B48((uint64_t)&v1000, v8);
    }
    else
    {
      v13 = *(_QWORD **)(v8 + 72);
      v14 = v1006;
      *(_QWORD *)v1006 = *v13;
      v14[1] = v13[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v1000);
  }
  *(_DWORD *)v995 = 1124007936;
  memset(&v995[4], 0, 60);
  v996 = (int *)&v995[8];
  v997 = &v998;
  v999 = 0;
  v998 = 0;
  v15 = v1005->i32[0];
  v16 = v1000 & 7;
  if ((v1000 & 5 | 2) != 2)
  {
    v1011[0] = 0uLL;
    qmemcpy((void *)sub_10029430C(v1011, 24), "depth == 0 || depth == 2", 24);
    sub_100294B74(-215, (uint64_t *)v1011, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1624);
  }
  if (!(_QWORD)v1001)
    goto LABEL_21;
  if (SDWORD1(v1000) >= 3)
  {
    v18 = (int *)v1005 + 1;
    v19 = 1;
    v20 = DWORD1(v1000) & 0xFFFFFFFE;
    v21 = 1;
    do
    {
      v19 *= *(v18 - 1);
      v21 *= *v18;
      v18 += 2;
      v20 -= 2;
    }
    while (v20);
    v17 = v21 * v19;
    v22 = DWORD1(v1000) - (unint64_t)(DWORD1(v1000) & 0xFFFFFFFE);
    if (v22)
    {
      v23 = (int32x2_t *)((char *)v1005 + ((4 * DWORD1(v1000)) & 0x3FFFFFFF8));
      do
      {
        v24 = v23->i32[0];
        v23 = (int32x2_t *)((char *)v23 + 4);
        v17 *= v24;
        --v22;
      }
      while (v22);
    }
  }
  else
  {
    v17 = SHIDWORD(v1000) * (uint64_t)SDWORD2(v1000);
  }
  if (!DWORD1(v1000) || !v17)
  {
LABEL_21:
    v1011[0] = 0uLL;
    v25 = sub_10029430C(v1011, 12);
    *(_DWORD *)(v25 + 8) = 690518388;
    *(_QWORD *)v25 = *(_QWORD *)"!src.empty()";
    sub_100294B74(-215, (uint64_t *)v1011, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1625);
  }
  v26 = (v1000 >> 3) & 0x1FF;
  switch(a3)
  {
    case 46:
    case 47:
    case 48:
    case 49:
    case 62:
    case 63:
    case 64:
    case 65:
    case 139:
    case 140:
    case 141:
    case 142:
      if (a4 < 1)
        a4 = 3;
      if ((a4 - 3) > 1 || v26)
      {
        v1011[0] = 0uLL;
        qmemcpy((void *)sub_10029430C(v1011, 34), "scn == 1 && (dcn == 3 || dcn == 4)", 34);
        sub_100294B74(-215, (uint64_t *)v1011, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1651);
      }
      v993.i32[0] = v1005->i32[1];
      v993.i32[1] = v15;
      sub_10026214C(a2, &v993, (v16 | (8 * a4)) - 8, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
      {
        v27 = *(_QWORD *)(a2 + 8);
        v28 = *(_OWORD *)(v27 + 16);
        v985 = *(_OWORD *)v27;
        v986 = v28;
        v987 = *(_OWORD *)(v27 + 32);
        v29 = *(_QWORD *)(v27 + 56);
        v988 = *(_QWORD *)(v27 + 48);
        v989 = v29;
        v990 = (int *)&v985 + 2;
        v991 = v992;
        v992[1] = 0;
        v992[0] = 0;
        if (v29)
        {
          v30 = (unsigned int *)(v29 + 20);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
        }
        if (*(int *)(v27 + 4) > 2)
        {
          DWORD1(v985) = 0;
          sub_100256B48((uint64_t)&v985, v27);
        }
        else
        {
          v32 = *(_QWORD **)(v27 + 72);
          v33 = v991;
          *(_QWORD *)v991 = *v32;
          v33[1] = v32[1];
        }
      }
      else
      {
        sub_10025CCB8(a2, -1, (uint64_t)&v985);
      }
      if ((a3 - 139) < 4 || (a3 - 46) <= 3)
      {
        if (v16)
        {
          if (v16 != 2)
          {
            v1011[0] = 0uLL;
            qmemcpy((void *)sub_10029430C(v1011, 53), "Bayer->RGB demosaicing only supports 8u and 16u types", 53);
            sub_100294B74(-210, (uint64_t *)v1011, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1666);
          }
          v50 = v992[0];
          v51 = v985;
          v52 = *v1005;
          v53 = vadd_s32(*v1005, (int32x2_t)0x100000001);
          v1016 = vrev64_s32(v53);
          if (v52.i32[0] >= 3)
          {
            v55 = a3 == 47 || a3 == 49;
            if ((a3 & 0xFFFFFFFE) == 0x2E)
              v56 = -1;
            else
              v56 = 1;
            v1010[0] = 0;
            v1010[1] = v53.i32[0];
            sub_1002E1CB0((uint64_t)v1011, (uint64_t)&v1000, (uint64_t)&v985, v55, v56, &v1016);
            if (SDWORD1(v985) >= 3)
            {
              v108 = v990 + 1;
              v109 = 1;
              v110 = DWORD1(v985) & 0xFFFFFFFE;
              v111 = 1;
              do
              {
                v109 *= *(v108 - 1);
                v111 *= *v108;
                v108 += 2;
                v110 -= 2;
              }
              while (v110);
              v57 = v111 * v109;
              v112 = DWORD1(v985) - (unint64_t)(DWORD1(v985) & 0xFFFFFFFE);
              if (v112)
              {
                v113 = (int *)((char *)v990 + ((4 * DWORD1(v985)) & 0x3FFFFFFF8));
                do
                {
                  v114 = *v113++;
                  v57 *= v114;
                  --v112;
                }
                while (v112);
              }
            }
            else
            {
              v57 = SHIDWORD(v985) * (uint64_t)SDWORD2(v985);
            }
            sub_10026F638(v1010, (uint64_t)v1011, (double)(unint64_t)v57 * 0.0000152587891);
            sub_1002E25B4((uint64_t)v1011);
          }
          v115 = v50 >> 1;
          v116 = v986;
          v117 = *v990;
          v118 = v990[1] * (((v51 >> 3) & 0x1FF) + 1);
          if (*v990 > 2)
          {
            if ((int)v118 < 1)
              goto LABEL_82;
            v119 = (int)v115;
            v120 = (v117 - 1) * v115;
            v121 = (*v990 - 2) * (int)v115;
            v122 = v120;
            if (v118 >= 0x10)
            {
              v123 = 0;
              v599 = 2 * v122;
              if ((unint64_t)(2 * v122) >= 0x20)
              {
                v600 = 2 * (int)v115;
                if ((unint64_t)(v600 + 31) >= 0x20)
                {
                  v601 = 2 * v121;
                  if ((unint64_t)(2 * v121) >= 0x20
                    && (unint64_t)(v599 - v600) >= 0x20
                    && (unint64_t)(v599 - v601) >= 0x20)
                  {
                    v123 = v118 & 0x7FFFFFF0;
                    v602 = (_OWORD *)(v986 + 16);
                    v603 = v118 & 0xFFFFFFF0;
                    do
                    {
                      v604 = *(_OWORD *)((char *)v602 + 2 * v119);
                      *(v602 - 1) = *(_OWORD *)((char *)v602 + 2 * v119 - 16);
                      *v602 = v604;
                      v605 = *(_OWORD *)((char *)v602 + 2 * v121);
                      v606 = (_OWORD *)((char *)v602 + v599);
                      *(v606 - 1) = *(_OWORD *)((char *)v602 + v601 - 16);
                      *v606 = v605;
                      v602 += 2;
                      v603 -= 16;
                    }
                    while (v603);
                    if (v123 == v118)
                      goto LABEL_82;
                  }
                }
              }
            }
            else
            {
              v123 = 0;
            }
            v607 = (_WORD *)(v116 + 2 * (v123 + v122));
            v608 = v118 - v123;
            v609 = (__int16 *)(v116 + 2 * (v123 + v121));
            v610 = (_WORD *)(v116 + 2 * v123);
            v611 = (__int16 *)(v116 + 2 * (v123 + v119));
            do
            {
              v612 = *v611++;
              *v610++ = v612;
              v613 = *v609++;
              *v607++ = v613;
              --v608;
            }
            while (v608);
            goto LABEL_82;
          }
          if ((int)v118 >= 1)
          {
            v124 = 0;
            v125 = (v117 - 1) * v115;
            v126 = v125;
            if (v118 < 0x10)
              goto LABEL_208;
            if ((unint64_t)(-2 * v125) < 0x20)
              goto LABEL_208;
            v124 = v118 & 0x7FFFFFF0;
            v127 = v118 & 0xFFFFFFF0;
            v128 = (_OWORD *)v986;
            do
            {
              v129 = (_OWORD *)((char *)v128 + 2 * v125);
              *v129 = 0uLL;
              v129[1] = 0uLL;
              *v128 = 0uLL;
              v128[1] = 0uLL;
              v128 += 2;
              v127 -= 16;
            }
            while (v127);
            if (v124 != v118)
            {
LABEL_208:
              v130 = v118 - v124;
              v131 = (_WORD *)(v116 + 2 * v124);
              v132 = (_WORD *)(v116 + 2 * (v124 + v126));
              do
              {
                *v132++ = 0;
                *v131++ = 0;
                --v130;
              }
              while (v130);
            }
          }
LABEL_82:
          if (v989)
          {
            v61 = (unsigned int *)(v989 + 20);
            do
            {
              v62 = __ldaxr(v61);
              v63 = v62 - 1;
            }
            while (__stlxr(v63, v61));
            if (!v63)
              sub_100256C90((uint64_t)&v985);
          }
          v989 = 0;
          v986 = 0u;
          v987 = 0u;
          if (SDWORD1(v985) >= 1)
          {
            v64 = 0;
            v65 = v990;
            do
              v65[v64++] = 0;
            while (v64 < SDWORD1(v985));
          }
          if (v991 != v992)
            j__free(v991);
          goto LABEL_92;
        }
LABEL_81:
        sub_1002DFAE4((uint64_t)&v1000, (unsigned int *)&v985, a3);
        goto LABEL_82;
      }
      if (v16)
      {
        v1011[0] = 0uLL;
        v58 = sub_10029430C(v1011, 10);
        *(_WORD *)(v58 + 8) = 12320;
        *(_QWORD *)v58 = *(_QWORD *)"depth == 0";
        sub_100294B74(-215, (uint64_t *)v1011, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1670);
      }
      v59 = v1005->i32[1];
      if ((int)v59 >= v1005->i32[0])
        v60 = v1005->i32[0];
      else
        v60 = v1005->i32[1];
      if (v60 <= 7)
        goto LABEL_81;
      v842 = v1001;
      v751 = v992[0];
      v752 = v1005->i32[0];
      v134 = a3 != 62 && a3 != 64;
      v135 = (a3 & 0xFFFFFFFE) != 62;
      *(_QWORD *)&v1011[0] = &v1011[1];
      *((_QWORD *)&v1011[0] + 1) = 147 * (int)v59;
      if ((147 * v59) >= 0x209)
        operator new[]();
      v804 = v134;
      v136 = 3 * v59;
      v137 = 5 * v59;
      v138 = (v59 - 3);
      v139 = 2 * v138;
      v140 = (char *)&v1011[1] + 2 * v59;
      v876 = 2 * v59;
      v141 = v140 + 2;
      v792 = v140 + 4;
      v142 = (unint64_t)&v140[2 * v138 + 4];
      v875 = 4 * (_DWORD)v59;
      v841 = (char *)&v1011[1] + (v875 | 2);
      v840 = (char *)&v1011[1] + 2 * v138 + v875 + 4;
      v972 = 6 * (_DWORD)v59;
      v957 = (char *)&v1011[1] + v972 + 2;
      v791 = (char *)&v1011[1] + v972 + 4;
      v143 = &v791[2 * v138];
      v144 = 8 * (_DWORD)v59;
      v145 = (char *)&v1011[1] + (v144 | 2);
      v971 = v144;
      v980 = (char *)&v1011[1] + v144;
      v790 = (char *)&v1011[1] + v144 + 4;
      v839 = &v790[2 * v138];
      v146 = 10 * (_DWORD)v59;
      v147 = v140 + 2 >= v840 || (unint64_t)&v1011[1] + (v875 | 2) >= v142;
      v148 = !v147;
      v835 = v148;
      v150 = v141 < v143 && (unint64_t)&v1011[1] + v972 + 2 < v142;
      v152 = v141 < &v790[v139] && (unint64_t)v145 < v142;
      v153 = v150 || v152;
      v970 = 2 * v137;
      v154 = (char *)&v1011[1] + v146 + 2;
      v788 = (char *)&v1011[1] + v146 + 4;
      v155 = &v788[v139];
      v157 = v141 < &v788[v139] && (unint64_t)v154 < v142;
      v158 = v153 || v157;
      v159 = v139 + 4;
      v160 = 12 * (_DWORD)v59;
      v161 = (char *)&v1011[1] + (v160 | 2);
      v969 = v160;
      v162 = (char *)&v1011[1] + v160;
      v163 = &v162[v139 + 4];
      v838 = (unint64_t)v141;
      v837 = v142;
      v165 = v141 < v163 && (unint64_t)v161 < v142;
      v832 = v158 || v165;
      LODWORD(v803) = 2 * v135;
      v166 = ~LODWORD(v1007[0]);
      v167 = ((v1007[0] << 32) - 0x100000000) >> 32;
      v168 = -LODWORD(v1007[0]);
      v169 = ((uint64_t)&_mh_execute_header - (v1007[0] << 32)) >> 32;
      v170 = ((uint64_t)&_mh_execute_header + (v1007[0] << 32)) >> 32;
      v976 = v137 - 1;
      v973 = v137 + 1;
      v171 = 2 * LODWORD(v1007[0]);
      v172 = (int)v59 - 2;
      v787 = v136 - 9;
      v786 = 3 * ((int)v59 - 2);
      v951 = 4 * v59 + v172;
      v950 = 4 * v59 - 1;
      v949 = 5 * v59 + v172;
      v948 = 5 * v59 - 1;
      v947 = 3 * v59 + v172;
      v946 = 3 * v59 - 1;
      v945 = 6 * v59 + v172;
      v944 = 6 * v59 - 1;
      v831 = (char *)&v1011[1] + v159;
      v173 = v166 + 2 * LODWORD(v1007[0]);
      v798 = v173 + 1;
      v174 = (v59 - 3);
      v175 = v167 + 2 * LODWORD(v1007[0]);
      v783 = v175 + v138 + 2;
      v784 = v173 + v138 + 2;
      v176 = v168 + 2 * LODWORD(v1007[0]);
      v797 = v176 + 1;
      v782 = v176 + v138 + 2;
      v177 = v169 + 2 * LODWORD(v1007[0]);
      v781 = v177 + v138 + 2;
      v796 = v177 + 1;
      v178 = 2 * SLODWORD(v1007[0]);
      v962 = v177 + v178 + v1001;
      v795 = v175 + 1;
      v978 = v175 + v178 + v1001;
      v179 = v170 + 2 * LODWORD(v1007[0]);
      v180 = v179 + v178 + v1001;
      v181 = v179 + 1;
      v182 = v179 + v174 + 2;
      v183 = 2 * LODWORD(v1007[0]) + v174;
      v184 = v174;
      v778 = v183 + 2;
      v779 = v182;
      v776 = v183 + 3;
      v777 = v183 + 1;
      v186 = v841 < v143 && v957 < v840;
      v830 = v186;
      v188 = v841 < v839 && v145 < v840;
      v829 = v188;
      v190 = v841 < v155 && v154 < v840;
      v828 = v190;
      v192 = v841 < v163 && v161 < v840;
      v827 = v192;
      v194 = v957 < v839 && v145 < v143;
      v826 = v194;
      v196 = v957 < v155 && v154 < v143;
      v825 = v196;
      v836 = v143;
      v198 = v957 < v163 && v161 < v143;
      v824 = v198;
      v200 = v145 < v155 && v154 < v839;
      v823 = v200;
      v956 = v145;
      v202 = v145 < v163 && v161 < v839;
      v822 = v202;
      v955 = v154;
      v833 = v163;
      v147 = v154 >= v163;
      v203 = SLODWORD(v1007[0]);
      v834 = v155;
      v954 = v161;
      v204 = v147 || v161 >= v155;
      v894 = v170 + 1;
      v893 = v169 + 1;
      v892 = v168 + 1;
      v891 = v167 + 1;
      v775 = (char *)&v1011[1] + 2 * v136 + 6;
      v943 = 49 * v59;
      v774 = 49 * v59;
      v772 = (char *)&v1011[1] + 12 * (int)v59 + 2;
      v773 = (char *)&v1011[1] + 4 * (int)v59 + 2;
      v770 = (char *)&v1011[1] + 2 * v973 + 4;
      v771 = v162 + 6;
      v750 = (3 * v59);
      v768 = (char *)&v1011[1] + 2 * v136 + 2;
      v769 = (char *)&v1011[1] + 8 * (int)v59 + 2;
      v890 = v59 - 1;
      v766 = (char *)&v1011[1] + 2 * (int)v59 + 2;
      v767 = (char *)&v1011[1] + 2 * (int)v59 + 6;
      v942 = v172 + v59;
      v941 = v59 - 1;
      v763 = v980 + 6;
      v764 = (char *)&v1011[1] + 2 * v976 + 4;
      v802 = v171 + SLODWORD(v1007[0]) + (_QWORD)v1001 + 2;
      v807 = v986 + 2 * SLODWORD(v992[0]) + 7;
      v205 = v178 + v171 + -2 * LODWORD(v1007[0]) + v1001 + 3;
      v882 = v178 + v171 + (int)(v171 ^ 0xFFFFFFFE) + v1001 + 3;
      v968 = v178 + v171 + SLODWORD(v1007[0]) + (_QWORD)v1001 + 2;
      v206 = 2;
      v887 = v178 + 2 * v171 + v1001 + 3;
      v886 = v178 + v171 + v171 - 2 + v1001 + 3;
      v881 = v178 + v171 + (((v1007[0] << 32) - 0x200000000) >> 32) + v1001 + 2;
      v880 = v178 + v171 + ((uint64_t)(0xFFFFFFFE00000000 - (v1007[0] << 32)) >> 32) + v1001 + 2;
      v819 = v178 + v171 + v171 + 2 + v1001 + 2;
      v818 = v1001 + v178;
      v879 = v178 + v171 + (((v1007[0] << 32) + 0x200000000) >> 32) + v1001 + 2;
      v207 = 4 * (_DWORD)v59;
      v878 = v178 + v171 + ((0x200000000 - (v1007[0] << 32)) >> 32) + v1001 + 2;
      v889 = v166 + 1;
      v208 = v1001 + v178 + v171;
      v817 = v178 + v171 + 2 - v171 + v1001 + 2;
      v975 = v962 + 2;
      v967 = v978 + 2;
      v885 = v178 + v171 + v166 + v1001 + 2;
      v209 = 0;
      v210 = 0;
      v884 = v180 + 2;
      v964 = v1001 + v171;
      v794 = (v752 - 4);
      v952 = (int)v59 - 2;
      v940 = v876 + v172;
      v785 = v171;
      v761 = v171 + 2;
      v974 = v59 - 3;
      v211 = v184 + 1;
      v212 = !v204;
      v821 = v212;
      v760 = v211 & 0xFFFFFFF0 | 1;
      v811 = v211 & 0x1FFFFFFF0;
      v759 = 2 * (v211 & 0x1FFFFFFF0);
      v820 = v184 + 1;
      v213 = v211 & 0x1FFFFFFF8;
      v809 = 2 * v213;
      v810 = v213;
      v808 = v213 | 1;
      v780 = v181;
      v758 = v1001 + v181;
      v762 = v171 | 1;
      v756 = v1001 + v762;
      v757 = v1001 + v796;
      v755 = v1001 + v797;
      v754 = v1001 + v795;
      v753 = v798 + v1001;
      v888 = SLODWORD(v1007[0]) + 1;
      v214 = 1;
      v215 = 3;
      v216 = 2;
      v953 = SLODWORD(v1007[0]);
      v793 = v986;
      v789 = SLODWORD(v992[0]);
      v765 = v59 - 4;
LABEL_312:
      v966 = v208;
      v816 = v205;
      v223 = 0;
      v801 = v206;
      v224 = 2 * (int)(v774 * (v206 % 3));
      v874 = &v775[v224];
      v873 = &v791[v224];
      v872 = &v773[v224];
      v871 = (char *)&v1011[1] + v875 + v224 + 4;
      v815 = &v772[v224];
      v814 = &v771[v224];
      v870 = &v770[v224];
      v869 = &v769[v224];
      v963 = (char *)&v1011[1] + v224;
      v800 = v214;
      v225 = 2 * (int)(v774 * (v214 % 3));
      v868 = &v775[v225];
      v867 = &v768[v225];
      v866 = &v791[v225];
      v865 = &v773[v225];
      v877 = (char *)&v1011[1] + v225;
      v864 = &v788[v225];
      v863 = &v790[v225];
      v961 = &v767[v225];
      v960 = &v792[v225];
      v959 = &v766[v225];
      v806 = v210;
      v226 = 2 * (int)(v774 * (v210 % 3));
      v862 = &v768[v226];
      v861 = &v791[v226];
      v958 = (char *)&v1011[1] + v226;
      v813 = &v771[v226];
      v812 = &v772[v226];
      v860 = &v764[v226];
      v859 = &v763[v226];
      if (v216 == 2)
        v227 = -1;
      else
        v227 = 1;
      v805 = v209;
      v228 = v209 + v227;
      v229 = v203 * (v227 + v216);
      v230 = v203 * (v228 + 3);
      v858 = v762 + v230;
      v857 = v778 + v230;
      v799 = v215;
      v231 = v756 + v203 * (v227 + v215);
      v856 = v798 + v229;
      v855 = v784 + v229;
      v854 = v795 + v229;
      v853 = v783 + v229;
      v852 = v797 + v229;
      v851 = v782 + v229;
      v850 = v796 + v229;
      v849 = v781 + v229;
      v848 = v780 + v229;
      v847 = v779 + v229;
      v846 = v229 + v785;
      v845 = v777 + v229;
      v844 = v761 + v229;
      v843 = v776 + v229;
      v232 = v964 + v229;
      v233 = v758 + v229;
      v234 = v757 + v229;
      v235 = v755 + v229;
      v236 = v754 + v229;
      v237 = v753 + v229;
      v238 = v876;
      v965 = v216;
      while (1)
      {
        v981 = v233;
        v982 = v232;
        v983 = v231;
        v977 = v227;
        v239 = ((int)v227 + (int)v216 - 1) % 3 * v943;
        v240 = (int16x8_t *)((char *)&v1011[1] + 2 * v239 + 2);
        v240->i16[v952] = 0;
        v240[-1].i16[7] = 0;
        v240->i16[v942] = 0;
        v240->i16[v941] = 0;
        v240->i16[v940] = 0;
        v240->i16[v876 - 1] = 0;
        v240->i16[v947] = 0;
        v240->i16[v946] = 0;
        v240->i16[v951] = 0;
        v240->i16[v950] = 0;
        v240->i16[v949] = 0;
        v240->i16[v948] = 0;
        v240->i16[v945] = 0;
        v240->i16[v944] = 0;
        v241 = v964 + (v227 + v216) * v203;
        v979 = v223;
        if (v974 < 7)
        {
          v242 = 1;
          goto LABEL_319;
        }
        v914 = v237;
        v919 = v236;
        v922 = v235;
        v933 = v234;
        v270 = v239;
        v271 = v203 * v223;
        v905 = v842 + v843 + v203 * v223;
        v904 = v842 + v844 + v203 * v223;
        v272 = v842 + v845 + v203 * v223;
        v901 = v842 + v846 + v203 * v223;
        v273 = v842 + v847 + v203 * v223;
        v274 = v842 + v848 + v203 * v223;
        v275 = v842 + v849 + v203 * v223;
        v276 = v842 + v850 + v203 * v223;
        v277 = v842 + v857 + v203 * v223;
        v278 = v842 + v858 + v203 * v223;
        v279 = v842 + v851 + v203 * v223;
        v280 = v842 + v852 + v271;
        v281 = v842 + v853 + v271;
        v282 = v842 + v854 + v271;
        v283 = v842 + v855 + v271;
        v284 = v842 + v856 + v271;
        v883 = v270;
        v285 = 2 * v270;
        v286 = &v831[2 * v270];
        v287 = v837 + 2 * v270;
        v288 = &v840[2 * v270];
        v289 = (unint64_t)&v836[2 * v270];
        v290 = (unint64_t)&v839[2 * v270];
        v291 = (unint64_t)&v834[2 * v270];
        v292 = (unint64_t)&v833[2 * v270];
        v294 = (unint64_t)v240 < v287 && v838 < (unint64_t)v831;
        if (v240 < (int16x8_t *)v288 && v841 < v831)
          v294 = 1;
        if ((unint64_t)v240 < v289 && v957 < v831)
          v294 = 1;
        if ((unint64_t)v240 < v290 && v956 < v831)
          v294 = 1;
        if ((unint64_t)v240 < v291 && v955 < v831)
          v294 = 1;
        if ((unint64_t)v240 < v292 && v954 < v831)
          v294 = 1;
        v301 = (unint64_t)v240 < v283 && v284 < (unint64_t)v286 || v294;
        v939 = v301;
        v303 = (unint64_t)v240 < v281 && v282 < (unint64_t)v286;
        v938 = v303;
        v305 = (unint64_t)v240 < v279 && v280 < (unint64_t)v286;
        v937 = v305;
        v307 = (unint64_t)v240 < v277 && v278 < (unint64_t)v286;
        v936 = v307;
        v308 = v276;
        v310 = (unint64_t)v240 < v275 && v276 < (unint64_t)v286;
        v935 = v310;
        v312 = (unint64_t)v240 < v273 && v274 < (unint64_t)v286;
        v934 = v312;
        v314 = (unint64_t)v240 < v272 && v901 < (unint64_t)v286;
        v315 = (unint64_t)v240 >= v905 || v904 >= (unint64_t)v286;
        v316 = v838 + v285;
        v317 = !v315;
        v932 = v317;
        v319 = v316 < v283 && v284 < v287;
        v931 = v319;
        v321 = v316 < v281 && v282 < v287;
        v930 = v321;
        v323 = v316 < v279 && v280 < v287;
        v929 = v323;
        v325 = v316 < v277 && v278 < v287;
        v928 = v325;
        v327 = v316 < v275 && v276 < v287;
        v927 = v327;
        v329 = v316 < v273 && v274 < v287;
        v926 = v329;
        v330 = v272;
        v332 = v316 < v272 && v901 < v287;
        v333 = v316 >= v905 || v904 >= v287;
        v334 = &v841[v285];
        v335 = !v333;
        v925 = v335;
        v337 = (unint64_t)v334 < v283 && v284 < (unint64_t)v288;
        v924 = v337;
        v339 = (unint64_t)v334 < v281 && v282 < (unint64_t)v288;
        v923 = v339;
        v341 = (unint64_t)v334 < v279 && v280 < (unint64_t)v288;
        v921 = v341;
        v343 = (unint64_t)v334 < v277 && v278 < (unint64_t)v288;
        v920 = v343;
        v345 = (unint64_t)v334 < v275 && v276 < (unint64_t)v288;
        v918 = v345;
        v346 = v273;
        v347 = v274;
        v349 = (unint64_t)v334 < v273 && v274 < (unint64_t)v288;
        v351 = (unint64_t)v334 < v272 && v901 < (unint64_t)v288;
        v352 = (unint64_t)v334 >= v905 || v904 >= (unint64_t)v288;
        v353 = &v957[v285];
        v354 = !v352;
        v917 = v354;
        v356 = (unint64_t)v353 < v283 && v284 < v289;
        v916 = v356;
        v358 = (unint64_t)v353 < v281 && v282 < v289;
        v915 = v358;
        v360 = (unint64_t)v353 < v279 && v280 < v289;
        v362 = (unint64_t)v353 < v277 && v278 < v289;
        v364 = (unint64_t)v353 < v275 && v276 < v289;
        v913 = v364;
        v366 = (unint64_t)v353 < v346 && v347 < v289;
        v912 = v366;
        v368 = (unint64_t)v353 < v330 && v901 < v289;
        v911 = v368;
        v369 = (unint64_t)v353 >= v905 || v904 >= v289;
        v370 = &v956[v285];
        v371 = !v369;
        v910 = v371;
        v373 = (unint64_t)v370 < v283 && v284 < v290;
        v909 = v373;
        v375 = (unint64_t)v370 < v281 && v282 < v290;
        v908 = v375;
        v377 = (unint64_t)v370 < v279 && v280 < v290;
        v907 = v377;
        v379 = (unint64_t)v370 < v277 && v278 < v290;
        v906 = v379;
        v380 = v275;
        v147 = (unint64_t)v370 >= v275;
        v381 = v308;
        v383 = !v147 && v308 < v290;
        v903 = v383;
        v384 = v346;
        v386 = (unint64_t)v370 < v346 && v347 < v290;
        v902 = v386;
        v388 = (unint64_t)v370 < v330 && v901 < v290;
        v389 = (unint64_t)v370 >= v905 || v904 >= v290;
        v390 = &v955[v285];
        v391 = !v389;
        v900 = v391;
        v393 = (unint64_t)v390 < v283 && v284 < v291;
        v899 = v393;
        v395 = (unint64_t)v390 < v281 && v282 < v291;
        v898 = v395;
        v397 = (unint64_t)v390 < v279 && v280 < v291;
        v897 = v397;
        v399 = (unint64_t)v390 < v277 && v278 < v291;
        v896 = v399;
        v401 = (unint64_t)v390 < v380 && v381 < v291;
        v895 = v401;
        v403 = (unint64_t)v390 < v384 && v347 < v291;
        v405 = (unint64_t)v390 < v330 && v901 < v291;
        v406 = (unint64_t)v390 >= v905 || v904 >= v291;
        v407 = &v954[v285];
        v408 = !v406;
        v410 = (unint64_t)v407 < v283 && v284 < v292;
        v412 = (unint64_t)v407 < v281 && v282 < v292;
        v414 = (unint64_t)v407 < v279 && v280 < v292;
        v416 = (unint64_t)v407 < v277 && v278 < v292;
        v418 = (unint64_t)v407 < v380 && v381 < v292;
        v420 = (unint64_t)v407 < v384 && v347 < v292;
        v422 = (unint64_t)v407 < v330 && v901 < v292;
        v424 = (unint64_t)v407 < v905 && v904 < v292;
        v242 = 1;
        if ((((v939 | (v938 || v937 || v936 || v935 || v934 || v314) | v932 | v835 | (v832 || v931 || v930 || v929 || v928 || v927 || v926 || v332) | v925 | v830 | v829 | v828 | v827 | v924 | v923 | v921 | v920 | (v918 || v349 || v351) | v917 | v826 | v825 | v824 | v916 | v915 | v360 | (v362 || v913 || v912 || v911) | v910 | v823 | v822 | v909 | v908 | v907 | v906) | (v903 | v902 | v388 | v900 | v821)) & 1) != 0)
        {
          v238 = v876;
          v207 = v875;
          v234 = v933;
          v235 = v922;
          v236 = v919;
          v237 = v914;
LABEL_319:
          v243 = 0;
          v244 = &v240->i8[v972];
          v245 = &v240->i8[v207];
          v246 = v890 - v242;
          v247 = v241 + v894;
          v248 = v241 + v893;
          v249 = v241 + v888;
          v250 = v241 + v892;
          v251 = v241 + v891;
          v252 = v241 + v889;
          do
          {
            v253 = (unsigned __int8 *)(v241 + v243);
            v254 = *(unsigned __int8 *)(v252 + v243) - *(unsigned __int8 *)(v251 + v243);
            if (v254 < 0)
              LOWORD(v254) = *(unsigned __int8 *)(v251 + v243) - *(unsigned __int8 *)(v252 + v243);
            v255 = *(unsigned __int8 *)(v250 + v243) - *(unsigned __int8 *)(v249 + v243);
            if (v255 < 0)
              LOWORD(v255) = *(unsigned __int8 *)(v249 + v243) - *(unsigned __int8 *)(v250 + v243);
            v256 = v254 + 2 * v255;
            v257 = *(unsigned __int8 *)(v248 + v243) - *(unsigned __int8 *)(v247 + v243);
            if (v257 < 0)
              LOWORD(v257) = *(unsigned __int8 *)(v247 + v243) - *(unsigned __int8 *)(v248 + v243);
            v240->i16[v243] = v256 + v257;
            v258 = *(unsigned __int8 *)(v252 + v243) - *(unsigned __int8 *)(v248 + v243);
            if (v258 < 0)
              LOWORD(v258) = *(unsigned __int8 *)(v248 + v243) - *(unsigned __int8 *)(v252 + v243);
            v259 = *v253 - v253[2];
            if (v259 < 0)
              LOWORD(v259) = v253[2] - *v253;
            v260 = v258 + 2 * v259;
            v261 = *(unsigned __int8 *)(v251 + v243) - *(unsigned __int8 *)(v247 + v243);
            if (v261 < 0)
              LOWORD(v261) = *(unsigned __int8 *)(v247 + v243) - *(unsigned __int8 *)(v251 + v243);
            *(__int16 *)((char *)&v240->i16[v243] + v238) = v260 + v261;
            v262 = *(unsigned __int8 *)(v248 + v243) - *(unsigned __int8 *)(v251 + v243);
            if (v262 < 0)
              LOWORD(v262) = *(unsigned __int8 *)(v251 + v243) - *(unsigned __int8 *)(v248 + v243);
            *(_WORD *)&v245[2 * v243] = 2 * v262;
            v263 = *(unsigned __int8 *)(v252 + v243) - *(unsigned __int8 *)(v247 + v243);
            if (v263 < 0)
              LOWORD(v263) = *(unsigned __int8 *)(v247 + v243) - *(unsigned __int8 *)(v252 + v243);
            *(_WORD *)&v244[2 * v243] = 2 * v263;
            v264 = *(unsigned __int8 *)(v250 + v243) - *v253;
            if (v264 < 0)
              LOWORD(v264) = *v253 - *(unsigned __int8 *)(v250 + v243);
            v265 = v264 + *(_WORD *)&v245[2 * v243];
            v266 = *(unsigned __int8 *)(v249 + v243) - v253[2];
            if (v266 < 0)
              LOWORD(v266) = v253[2] - *(unsigned __int8 *)(v249 + v243);
            *(__int16 *)((char *)&v240->i16[v243] + v971) = v265 + v266;
            v267 = *(unsigned __int8 *)(v250 + v243) - v253[2];
            if (v267 < 0)
              LOWORD(v267) = v253[2] - *(unsigned __int8 *)(v250 + v243);
            v268 = v267 + *(_WORD *)&v244[2 * v243];
            v269 = *(unsigned __int8 *)(v249 + v243) - *v253;
            if (v269 < 0)
              LOWORD(v269) = *v253 - *(unsigned __int8 *)(v249 + v243);
            v240->i16[v243 + (unint64_t)v970 / 2] = v268 + v269;
            *(__int16 *)((char *)&v240->i16[v243] + v969) = (*v253
                                                           + *(unsigned __int8 *)(v250 + v243)
                                                           + v253[2]
                                                           + *(unsigned __int8 *)(v249 + v243)) >> 1;
            ++v243;
          }
          while (v246 != (_DWORD)v243);
          goto LABEL_316;
        }
        v238 = v876;
        v207 = v875;
        v234 = v933;
        v235 = v922;
        v236 = v919;
        v237 = v914;
        if (v899
          || v898
          || v897
          || v896
          || v895
          || v403
          || v405
          || (v408 & 1) != 0
          || v410
          || v412
          || v414
          || v416
          || v418
          || v420
          || v422
          || v424)
        {
          goto LABEL_319;
        }
        if (v974 >= 0xF)
        {
          v461 = 0;
          v462 = v240;
          do
          {
            v463 = *(uint8x16_t *)(v914 + v461);
            v464 = *(uint8x16_t *)(v919 + v461);
            v465 = vabdq_u8(v463, v464);
            v466 = vmovl_high_u8(v465);
            v467 = *(uint8x16_t *)(v922 + v461);
            v468 = *(uint8x16_t *)(v983 + v461);
            v469 = vmovl_u8(*(uint8x8_t *)v465.i8);
            v470 = vabdq_u8(v467, v468);
            v471 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v470.i8);
            v472 = (int16x4_t)vextq_s8(v471, v471, 8uLL).u64[0];
            v473 = (int8x16_t)vmovl_high_u8(v470);
            v474 = (int16x4_t)vextq_s8(v473, v473, 8uLL).u64[0];
            v475 = vaddw_high_u16(vmovl_u16((uint16x4_t)vadd_s16(v472, v472)), v469);
            v476 = vaddl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v471.i8, *(int16x4_t *)v471.i8), *(uint16x4_t *)v469.i8);
            v477 = *(uint8x16_t *)(v933 + v461);
            v478 = *(uint8x16_t *)(v981 + v461);
            v479 = vaddw_high_u16(vmovl_u16((uint16x4_t)vadd_s16(v474, v474)), v466);
            v480 = vaddl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v473.i8, *(int16x4_t *)v473.i8), *(uint16x4_t *)v466.i8);
            v481 = vabdq_u8(v477, v478);
            v482 = vmovl_u8(*(uint8x8_t *)v481.i8);
            v483 = vmovl_high_u8(v481);
            *v462 = vuzp1q_s16((int16x8_t)vaddw_u16(v476, *(uint16x4_t *)v482.i8), (int16x8_t)vaddw_high_u16(v475, v482));
            v462[1] = vuzp1q_s16((int16x8_t)vaddw_u16(v480, *(uint16x4_t *)v483.i8), (int16x8_t)vaddw_high_u16(v479, v483));
            v484 = vabdq_u8(v463, v477);
            v485 = vmovl_high_u8(v484);
            v486 = *(uint8x16_t *)(v982 + v461);
            v487 = *(uint8x16_t *)(v982 + v461 + 2);
            v488 = vabdq_u8(v486, v487);
            v489 = vmovl_u8(*(uint8x8_t *)v484.i8);
            v490 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v488.i8);
            v491 = (int16x4_t)vextq_s8(v490, v490, 8uLL).u64[0];
            v492 = (int8x16_t)vmovl_high_u8(v488);
            v493 = (int16x4_t)vextq_s8(v492, v492, 8uLL).u64[0];
            v494 = vaddl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v490.i8, *(int16x4_t *)v490.i8), *(uint16x4_t *)v489.i8);
            v495 = vaddl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v492.i8, *(int16x4_t *)v492.i8), *(uint16x4_t *)v485.i8);
            v496 = vmovl_u16((uint16x4_t)vadd_s16(v491, v491));
            v497 = vabdq_u8(v464, v478);
            v498 = vmovl_u8(*(uint8x8_t *)v497.i8);
            v499 = vmovl_high_u8(v497);
            v500 = (int16x8_t)vaddw_u16(v495, *(uint16x4_t *)v499.i8);
            v501 = vabdq_u8(v477, v464);
            v502 = (int16x8_t)vaddw_u16(v494, *(uint16x4_t *)v498.i8);
            v503 = vshll_n_u8(*(uint8x8_t *)v501.i8, 1uLL);
            v504 = vshll_high_n_u8(v501, 1uLL);
            v505 = vabdq_u8(v463, v478);
            v506 = vshll_high_n_u8(v505, 1uLL);
            v507 = vabdq_u8(v467, v486);
            v508 = vaddw_high_u16(v496, v489);
            v509 = vmovl_high_u8(v507);
            v510 = vmovl_u8(*(uint8x8_t *)v507.i8);
            v511 = vabdq_u8(v468, v487);
            v512 = vaddw_high_u16(vmovl_u16((uint16x4_t)vadd_s16(v493, v493)), v485);
            v513 = vmovl_high_u8(v511);
            v514 = (int16x8_t)vaddw_high_u16(v512, v499);
            v515 = vmovl_u8(*(uint8x8_t *)v511.i8);
            v516 = vuzp1q_s16((int16x8_t)vaddw_u16(vaddl_u16(*(uint16x4_t *)v509.i8, *(uint16x4_t *)v504.i8), *(uint16x4_t *)v513.i8), (int16x8_t)vaddw_high_u16(vaddl_high_u16(v509, v504), v513));
            v517 = (int16x8_t)vaddw_high_u16(v508, v498);
            v518 = vabdq_u8(v467, v487);
            v519 = vmovl_high_u8(v518);
            v520 = vabdq_u8(v468, v486);
            v521 = vuzp1q_s16(v502, v517);
            v522 = vmovl_high_u8(v520);
            v523 = (int16x8_t *)((char *)v462 + v876);
            v524 = (uint16x8_t *)&v462->i8[v875];
            v525 = vuzp1q_s16(v500, v514);
            v526 = vshll_n_u8(*(uint8x8_t *)v505.i8, 1uLL);
            v527 = (uint16x8_t *)&v462->i8[v972];
            v528 = (int16x8_t *)((char *)v462 + v971);
            v529 = vmovl_u8(*(uint8x8_t *)v518.i8);
            *v523 = v521;
            v523[1] = v525;
            v530 = vmovl_u8(*(uint8x8_t *)v520.i8);
            *v524 = v503;
            v524[1] = v504;
            v531 = (int16x8_t *)((char *)v462 + v970);
            *v527 = v526;
            v527[1] = v506;
            *v528 = vuzp1q_s16((int16x8_t)vaddw_u16(vaddl_u16(*(uint16x4_t *)v510.i8, *(uint16x4_t *)v503.i8), *(uint16x4_t *)v515.i8), (int16x8_t)vaddw_high_u16(vaddl_high_u16(v510, v503), v515));
            v528[1] = v516;
            *v531 = vuzp1q_s16((int16x8_t)vaddw_u16(vaddl_u16(*(uint16x4_t *)v529.i8, *(uint16x4_t *)v526.i8), *(uint16x4_t *)v530.i8), (int16x8_t)vaddw_high_u16(vaddl_high_u16(v529, v526), v530));
            v531[1] = vuzp1q_s16((int16x8_t)vaddw_u16(vaddl_u16(*(uint16x4_t *)v519.i8, *(uint16x4_t *)v506.i8), *(uint16x4_t *)v522.i8), (int16x8_t)vaddw_high_u16(vaddl_high_u16(v519, v506), v522));
            v532 = (uint16x8_t *)&v462->i8[v969];
            *v532 = vshrq_n_u16(vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)v486.i8, *(uint8x8_t *)v467.i8), *(uint8x8_t *)v487.i8), *(uint8x8_t *)v468.i8), 1uLL);
            v532[1] = vshrq_n_u16(vaddw_high_u8(vaddw_high_u8(vaddl_high_u8(v486, v467), v487), v468), 1uLL);
            v461 += 16;
            v462 += 2;
          }
          while (v811 != v461);
          if (v820 == v811)
            goto LABEL_316;
          v425 = v811;
          v426 = v972;
          v427 = v971;
          v428 = v970;
          v429 = v969;
          v430 = v983;
          v431 = v982;
          v432 = v981;
          if ((v820 & 8) == 0)
          {
            v241 += v811;
            v240 = (int16x8_t *)((char *)v240 + v759);
            v242 = v760;
            goto LABEL_319;
          }
        }
        else
        {
          v425 = 0;
          v426 = v972;
          v427 = v971;
          v428 = v970;
          v429 = v969;
          v430 = v983;
          v431 = v982;
          v432 = v981;
        }
        v240 = (int16x8_t *)((char *)v240 + v809);
        v241 += v810;
        v433 = (int16x8_t *)((char *)&v1011[1] + 2 * v425 + 2 * v883 + 2);
        do
        {
          v434 = *(uint8x8_t *)(v914 + v425);
          v435 = *(uint8x8_t *)(v919 + v425);
          v436 = vabdl_u8(v434, v435);
          v437 = *(uint8x8_t *)(v922 + v425);
          v438 = *(uint8x8_t *)(v430 + v425);
          v439 = (int8x16_t)vabdl_u8(v437, v438);
          v440 = (int16x4_t)vextq_s8(v439, v439, 8uLL).u64[0];
          v441 = vaddw_high_u16(vmovl_u16((uint16x4_t)vadd_s16(v440, v440)), v436);
          v442 = *(uint8x8_t *)(v933 + v425);
          v443 = vaddl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v439.i8, *(int16x4_t *)v439.i8), *(uint16x4_t *)v436.i8);
          v439.i64[0] = *(_QWORD *)(v432 + v425);
          v444 = vabdl_u8(v442, *(uint8x8_t *)v439.i8);
          *v433 = vuzp1q_s16((int16x8_t)vaddw_u16(v443, *(uint16x4_t *)v444.i8), (int16x8_t)vaddw_high_u16(v441, v444));
          v445 = vabdl_u8(v434, v442);
          v441.i64[0] = *(_QWORD *)(v431 + v425);
          v444.i64[0] = *(_QWORD *)(v431 + v425 + 2);
          v446 = (int8x16_t)vabdl_u8(*(uint8x8_t *)v441.i8, *(uint8x8_t *)v444.i8);
          v447 = (int16x4_t)vextq_s8(v446, v446, 8uLL).u64[0];
          v448 = vaddw_high_u16(vmovl_u16((uint16x4_t)vadd_s16(v447, v447)), v445);
          v449 = vaddl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v446.i8, *(int16x4_t *)v446.i8), *(uint16x4_t *)v445.i8);
          v450 = vabdl_u8(v435, *(uint8x8_t *)v439.i8);
          *(int16x8_t *)((char *)v433 + v876) = vuzp1q_s16((int16x8_t)vaddw_u16(v449, *(uint16x4_t *)v450.i8), (int16x8_t)vaddw_high_u16(v448, v450));
          v451 = vshll_n_u8(vabd_u8(v442, v435), 1uLL);
          *(uint16x8_t *)((char *)v433 + v875) = v451;
          v452 = vshll_n_u8(vabd_u8(v434, *(uint8x8_t *)v439.i8), 1uLL);
          *(uint16x8_t *)((char *)v433 + v426) = v452;
          v453 = vabdl_u8(v437, *(uint8x8_t *)v441.i8);
          v454 = vaddl_u16(*(uint16x4_t *)v453.i8, *(uint16x4_t *)v451.i8);
          v455 = vaddl_high_u16(v453, v451);
          v456 = vabdl_u8(v438, *(uint8x8_t *)v444.i8);
          *(int16x8_t *)((char *)v433 + v427) = vuzp1q_s16((int16x8_t)vaddw_u16(v454, *(uint16x4_t *)v456.i8), (int16x8_t)vaddw_high_u16(v455, v456));
          v457 = vabdl_u8(v437, *(uint8x8_t *)v444.i8);
          v458 = vaddl_u16(*(uint16x4_t *)v457.i8, *(uint16x4_t *)v452.i8);
          v459 = vaddl_high_u16(v457, v452);
          v460 = vabdl_u8(v438, *(uint8x8_t *)v441.i8);
          *(int16x8_t *)((char *)v433 + v428) = vuzp1q_s16((int16x8_t)vaddw_u16(v458, *(uint16x4_t *)v460.i8), (int16x8_t)vaddw_high_u16(v459, v460));
          *(uint16x8_t *)((char *)v433 + v429) = vhaddq_u16(vaddw_u8(vaddl_u8(*(uint8x8_t *)v441.i8, v437), *(uint8x8_t *)v444.i8), vmovl_u8(v438));
          v425 += 8;
          ++v433;
        }
        while (v810 != v425);
        v242 = v808;
        if (v820 != v810)
          goto LABEL_319;
LABEL_316:
        v227 = v977 + 1;
        v223 = v979 + 1;
        v203 = v953;
        v232 = v982 + v953;
        v233 = v981 + v953;
        v234 += v953;
        v231 = v983 + v953;
        v235 += v953;
        v236 += v953;
        v237 += v953;
        v216 = v965;
        if (v977 == 1)
        {
          v533 = 0;
          v534 = v965 * v751;
          v535 = v803;
          v803 = v803 ^ 2;
          v536 = v535 + 6;
          v537 = (_BYTE *)v807;
          v538 = v875 + 4;
          v539 = v804;
          v540 = v793;
          v541 = v816;
          v542 = v966;
          v543 = v877;
          while (1)
          {
            v547 = v542 + v533;
            v553 = *(unsigned __int16 *)&v543[2 * v533 + 4];
            v554 = v553 + *(unsigned __int16 *)&v958[2 * v533 + 4];
            v555 = *(unsigned __int16 *)&v963[2 * v533 + 4] + v553;
            v556 = *(unsigned __int16 *)&v960[2 * v533];
            v557 = v556 + *(unsigned __int16 *)&v959[2 * v533];
            v558 = *(unsigned __int16 *)&v961[2 * v533] + v556;
            if (v555 >= v554)
              v559 = v554;
            else
              v559 = v555;
            if (v557 < v559)
              v559 = v556 + *(unsigned __int16 *)&v959[2 * v533];
            if (v558 >= v559)
              v560 = v559;
            else
              v560 = *(unsigned __int16 *)&v961[2 * v533] + v556;
            if (v554 <= v555)
              v561 = v555;
            else
              v561 = v554;
            if (v561 <= v557)
              v561 = v556 + *(unsigned __int16 *)&v959[2 * v533];
            if (v561 <= v558)
              v562 = *(unsigned __int16 *)&v961[2 * v533] + v556;
            else
              v562 = v561;
            if ((v539 & 1) == 0)
            {
              v576 = *(unsigned __int16 *)&v863[2 * v533];
              v577 = v576 + *(unsigned __int16 *)&v859[2 * v533];
              v578 = *(unsigned __int16 *)&v869[2 * v533] + v576;
              v579 = *(unsigned __int16 *)&v864[2 * v533];
              v580 = v579 + *(unsigned __int16 *)&v860[2 * v533];
              v581 = *(unsigned __int16 *)&v870[2 * v533] + v579;
              if (v577 >= v560)
                v582 = v560;
              else
                v582 = v577;
              if (v578 < v582)
                v582 = v578;
              if (v580 < v582)
                v582 = v579 + *(unsigned __int16 *)&v860[2 * v533];
              if (v581 < v582)
                v582 = *(unsigned __int16 *)&v870[2 * v533] + v579;
              if (v562 <= v577)
                v562 = v577;
              if (v562 <= v578)
                v562 = v578;
              if (v562 <= v580)
                v562 = v579 + *(unsigned __int16 *)&v860[2 * v533];
              if (v562 <= v581)
                v562 = *(unsigned __int16 *)&v870[2 * v533] + v579;
              if (v562 <= 1)
                v583 = 1;
              else
                v583 = v562 >> 1;
              v584 = v583 + v582;
              LODWORD(v547) = *(unsigned __int8 *)(v547 + 2);
              if (v554 >= v584)
              {
                v585 = 0;
                v586 = 0;
                v587 = 0;
                v588 = 0;
                if (v555 >= v584)
                  goto LABEL_825;
              }
              else
              {
                v585 = *(unsigned __int8 *)(v541 + v533 - 1) + (_DWORD)v547;
                v586 = 2 * *(unsigned __int8 *)(v802 + v533);
                v587 = *(unsigned __int8 *)(v975 + v533) + *(unsigned __int8 *)(v885 + v533);
                v588 = 1;
                if (v555 >= v584)
                {
LABEL_825:
                  v542 = v966;
                  if (v557 < v584)
                  {
                    v585 += v547 + *(unsigned __int8 *)(v966 + v533);
                    v586 += 2 * *(unsigned __int8 *)(v966 + v533 + 1);
                    v587 += *(unsigned __int8 *)(v885 + v533) + *(unsigned __int8 *)(v967 + v533);
                    ++v588;
                    if (v558 < v584)
                      goto LABEL_840;
LABEL_827:
                    if (v577 >= v584)
                      goto LABEL_828;
LABEL_841:
                    v585 += v547 + *(unsigned __int8 *)(v817 + v533);
                    v586 += *(unsigned __int16 *)&v813[2 * v533];
                    v587 += 2 * *(unsigned __int8 *)(v975 + v533);
                    ++v588;
                    if (v578 < v584)
                      goto LABEL_842;
LABEL_829:
                    if (v580 >= v584)
                      goto LABEL_830;
LABEL_843:
                    v585 += v547 + *(unsigned __int8 *)(v818 + v533);
                    v586 += *(unsigned __int16 *)&v812[2 * v533];
                    v587 += 2 * *(unsigned __int8 *)(v975 + v533);
                    ++v588;
                    if (v581 < v584)
                    {
LABEL_831:
                      v585 += v547 + *(unsigned __int8 *)(v819 + v533);
                      v586 += *(unsigned __int16 *)&v814[2 * v533];
                      v587 += 2 * *(unsigned __int8 *)(v975 + v533);
                      ++v588;
                    }
                  }
                  else
                  {
                    if (v558 >= v584)
                      goto LABEL_827;
LABEL_840:
                    v585 += v547 + *(unsigned __int8 *)(v966 + v533 + 4);
                    v586 += 2 * *(unsigned __int8 *)(v966 + v533 + 3);
                    v587 += *(unsigned __int8 *)(v975 + v533) + *(unsigned __int8 *)(v884 + v533);
                    ++v588;
                    if (v577 < v584)
                      goto LABEL_841;
LABEL_828:
                    if (v578 >= v584)
                      goto LABEL_829;
LABEL_842:
                    v585 += v547 + *(unsigned __int8 *)(v886 + v533 - 1);
                    v586 += *(unsigned __int16 *)&v815[2 * v533];
                    v587 += 2 * *(unsigned __int8 *)(v967 + v533);
                    ++v588;
                    if (v580 < v584)
                      goto LABEL_843;
LABEL_830:
                    if (v581 < v584)
                      goto LABEL_831;
                  }
                  v589 = flt_1003C0FD4[v588];
                  v590 = (float)(v587 - v585);
                  v548 = v547 + (uint64_t)rintf(v589 * (float)(v586 - v585));
                  v544 = (uint64_t)rintf(v589 * v590);
                  v546 = v547;
                  goto LABEL_744;
                }
              }
              v585 += v547 + *(unsigned __int8 *)(v887 + v533 - 1);
              v586 += 2 * *(unsigned __int8 *)(v968 + v533);
              v587 += *(unsigned __int8 *)(v967 + v533) + *(unsigned __int8 *)(v884 + v533);
              ++v588;
              goto LABEL_825;
            }
            v563 = *(unsigned __int16 *)&v543[v538];
            v564 = *(unsigned __int16 *)&v958[v538 + 2]
                 + *(unsigned __int16 *)&v958[v538]
                 + v563
                 + *(unsigned __int16 *)&v543[v538 + 2];
            v565 = *(unsigned __int16 *)&v865[2 * v533]
                 + v563
                 + *(unsigned __int16 *)&v871[2 * v533]
                 + *(unsigned __int16 *)&v872[2 * v533];
            v566 = *(unsigned __int16 *)&v866[2 * v533];
            v567 = *(unsigned __int16 *)&v862[2 * v533]
                 + *(unsigned __int16 *)&v861[2 * v533]
                 + v566
                 + *(unsigned __int16 *)&v867[2 * v533];
            v568 = *(unsigned __int16 *)&v868[2 * v533]
                 + v566
                 + *(unsigned __int16 *)&v873[2 * v533]
                 + *(unsigned __int16 *)&v874[2 * v533];
            if (v564 >= v560)
              v569 = v560;
            else
              v569 = v564;
            if (v565 < v569)
              v569 = v565;
            if (v567 < v569)
              v569 = *(unsigned __int16 *)&v862[2 * v533]
                   + *(unsigned __int16 *)&v861[2 * v533]
                   + v566
                   + *(unsigned __int16 *)&v867[2 * v533];
            if (v568 < v569)
              v569 = *(unsigned __int16 *)&v868[2 * v533]
                   + v566
                   + *(unsigned __int16 *)&v873[2 * v533]
                   + *(unsigned __int16 *)&v874[2 * v533];
            if (v562 <= v564)
              v562 = v564;
            if (v562 <= v565)
              v562 = v565;
            if (v562 <= v567)
              v562 = *(unsigned __int16 *)&v862[2 * v533]
                   + *(unsigned __int16 *)&v861[2 * v533]
                   + v566
                   + *(unsigned __int16 *)&v867[2 * v533];
            if (v562 <= v568)
              v562 = *(unsigned __int16 *)&v868[2 * v533]
                   + v566
                   + *(unsigned __int16 *)&v873[2 * v533]
                   + *(unsigned __int16 *)&v874[2 * v533];
            v570 = v562 <= 1 ? 1 : v562 >> 1;
            v571 = v570 + v569;
            if (v554 >= v571)
              break;
            v572 = *(unsigned __int8 *)(v541 + v533) + *(unsigned __int8 *)(v882 + v533);
            v573 = *(unsigned __int8 *)(v547 + 2) + *(unsigned __int8 *)(v541 + v533 - 1);
            v574 = 2 * *(unsigned __int8 *)(v802 + v533);
            v575 = 1;
            v543 = v877;
            if (v555 < v571)
              goto LABEL_815;
LABEL_816:
            v542 = v966;
            if (v557 < v571)
            {
              v572 += 2 * *(unsigned __int8 *)(v966 + v533 + 1);
              v573 += *(unsigned __int8 *)(v966 + v533) + *(unsigned __int8 *)(v547 + 2);
              v574 += *(unsigned __int8 *)(v880 + v533) + *(unsigned __int8 *)(v881 + v533);
              ++v575;
              if (v558 >= v571)
              {
LABEL_818:
                if (v564 >= v571)
                  goto LABEL_819;
                goto LABEL_835;
              }
            }
            else if (v558 >= v571)
            {
              goto LABEL_818;
            }
            v572 += 2 * *(unsigned __int8 *)(v966 + v533 + 3);
            v573 += *(unsigned __int8 *)(v966 + v533 + 4) + *(unsigned __int8 *)(v547 + 2);
            v574 += *(unsigned __int8 *)(v878 + v533) + *(unsigned __int8 *)(v879 + v533);
            ++v575;
            if (v564 >= v571)
            {
LABEL_819:
              if (v565 >= v571)
                goto LABEL_820;
              goto LABEL_836;
            }
LABEL_835:
            v572 += *(unsigned __int8 *)(v541 + v533) + *(unsigned __int8 *)(v966 + v533 + 3);
            v573 += 2 * *(unsigned __int8 *)(v975 + v533);
            v574 += *(unsigned __int8 *)(v802 + v533) + *(unsigned __int8 *)(v878 + v533);
            ++v575;
            if (v565 >= v571)
            {
LABEL_820:
              if (v567 >= v571)
                goto LABEL_821;
              goto LABEL_837;
            }
LABEL_836:
            v572 += *(unsigned __int8 *)(v886 + v533) + *(unsigned __int8 *)(v966 + v533 + 1);
            v573 += 2 * *(unsigned __int8 *)(v967 + v533);
            v574 += *(unsigned __int8 *)(v968 + v533) + *(unsigned __int8 *)(v881 + v533);
            ++v575;
            if (v567 >= v571)
            {
LABEL_821:
              if (v568 < v571)
                goto LABEL_838;
              goto LABEL_743;
            }
LABEL_837:
            v572 += *(unsigned __int8 *)(v882 + v533) + *(unsigned __int8 *)(v966 + v533 + 1);
            v573 += 2 * *(unsigned __int8 *)(v885 + v533);
            v574 += *(unsigned __int8 *)(v880 + v533) + *(unsigned __int8 *)(v802 + v533);
            ++v575;
            if (v568 < v571)
            {
LABEL_838:
              v572 += *(unsigned __int8 *)(v887 + v533) + *(unsigned __int8 *)(v966 + v533 + 3);
              v573 += 2 * *(unsigned __int8 *)(v884 + v533);
              v574 += *(unsigned __int8 *)(v879 + v533) + *(unsigned __int8 *)(v968 + v533);
              ++v575;
            }
LABEL_743:
            LODWORD(v544) = *(unsigned __int8 *)(v547 + 2);
            v545 = flt_1003C0FD4[v575];
            v546 = (uint64_t)rintf(v545 * (float)(v572 - v573)) + v544;
            v547 = (uint64_t)rintf(v545 * (float)(v574 - v573));
            v548 = v544;
LABEL_744:
            v549 = (v547 + v544) & ~(((int)v547 + (int)v544) >> 31);
            if (v549 >= 255)
              LOBYTE(v549) = -1;
            v537[v536 - 7] = v549;
            v550 = v548 & ~(v548 >> 31);
            if (v550 >= 255)
              LOBYTE(v550) = -1;
            v551 = &v537[v803 + 6];
            *v537 = v550;
            v537 += 3;
            v552 = v546 & ~(v546 >> 31);
            if (v552 >= 255)
              LOBYTE(v552) = -1;
            *(v551 - 7) = v552;
            v539 ^= 1u;
            ++v533;
            v538 += 2;
            if (v765 == (_DWORD)v533)
            {
              v217 = (_BYTE *)(v793 + v534);
              v217[5] = *(_BYTE *)(v793 + v534 + 8);
              v218 = (_BYTE *)(v793 + v534 + v787);
              v219 = (_BYTE *)(v793 + v534 + v786);
              *v219 = *v218;
              v220 = v534 << 32;
              v221 = (v220 + 0x400000000) >> 32;
              *(_BYTE *)(v793 + v221) = *(_BYTE *)(v793 + ((v220 + 0x700000000) >> 32));
              v219[1] = v218[1];
              v222 = (v220 + 0x300000000) >> 32;
              *(_BYTE *)(v793 + v222) = *(_BYTE *)(v793 + ((v220 + 0x600000000) >> 32));
              v219[2] = v218[2];
              *(_BYTE *)(v793 + ((v220 + 0x200000000) >> 32)) = *(_BYTE *)(v793 + ((v220 + 0x500000000) >> 32));
              v219[3] = v218[3];
              *(_BYTE *)(v793 + (((uint64_t)&_mh_execute_header + v220) >> 32)) = *(_BYTE *)(v793 + v221);
              v219[4] = v218[4];
              *v217 = *(_BYTE *)(v793 + v222);
              v219[5] = v218[5];
              v804 ^= 1u;
              v216 = v965 + 1;
              v209 = v805 + 1;
              v215 = v799 + 1;
              v206 = v801 + 1;
              v214 = v800 + 1;
              v210 = v806 + 1;
              v802 += v953;
              v807 += v789;
              v205 = v541 + v953;
              v882 += v953;
              v968 += v953;
              v887 += v953;
              v886 += v953;
              v881 += v953;
              v880 += v953;
              v819 += v953;
              v818 += v953;
              v879 += v953;
              v878 += v953;
              v208 = v542 + v953;
              v817 += v953;
              v975 += v953;
              v967 += v953;
              v885 += v953;
              v884 += v953;
              v207 = v875;
              if (v965 + 1 != v794)
                goto LABEL_312;
              v591 = v750;
              if ((int)v750 >= 1)
              {
                v592 = 2 * v751;
                v593 = (v752 - 5) * v751;
                v594 = (v752 - 1) * v751;
                v595 = (v752 - 2) * v751;
                v596 = (v752 - 3) * v751;
                v597 = (int)v794 * v751;
                if (v750 < 8)
                {
                  v598 = 0;
                  goto LABEL_983;
                }
                v598 = 0;
                if ((unint64_t)(v789 + 15) < 0x10)
                  goto LABEL_983;
                v694 = v793 + v594;
                if ((unint64_t)(v594 - v789) < 0x10)
                  goto LABEL_983;
                v695 = v793 + v595;
                if ((unint64_t)(v595 - v789) < 0x10)
                  goto LABEL_983;
                v696 = v793 + v596;
                if ((unint64_t)(v596 - v789) < 0x10)
                  goto LABEL_983;
                v697 = v793 + v597;
                if ((unint64_t)(v597 - v789) < 0x10)
                  goto LABEL_983;
                v698 = v793 + v592;
                if ((unint64_t)(v789 - v592) < 0x10)
                  goto LABEL_983;
                v699 = v793 + v593;
                if ((unint64_t)(v593 - v789) < 0x10
                  || v594 < 0x10
                  || v595 < 0x10
                  || v596 < 0x10
                  || v597 < 0x10
                  || (unint64_t)(v592 + 15) < 0x10
                  || v593 < 0x10
                  || (unint64_t)(v695 - v694) < 0x10
                  || (unint64_t)(v696 - v694) < 0x10
                  || (unint64_t)(v697 - v694) < 0x10
                  || (unint64_t)(v694 - v698) < 0x10
                  || (unint64_t)(v694 - v699) < 0x10
                  || (unint64_t)(v696 - v695) < 0x10
                  || (unint64_t)(v697 - v695) < 0x10
                  || (unint64_t)(v695 - v698) < 0x10
                  || (unint64_t)(v695 - v699) < 0x10
                  || (unint64_t)(v697 - v696) < 0x10
                  || (unint64_t)(v696 - v698) < 0x10
                  || (unint64_t)(v696 - v699) < 0x10
                  || (unint64_t)(v697 - v698) < 0x10
                  || (unint64_t)(v697 - v699) < 0x10)
                {
                  goto LABEL_983;
                }
                if (v750 < 0x10)
                {
                  v598 = 0;
                  goto LABEL_980;
                }
                v725 = 0;
                v598 = v750 & 0xFFFFFFF0;
                do
                {
                  v726 = *(_OWORD *)(v793 + v592 + v725);
                  *(_OWORD *)(v793 + v789 + v725) = v726;
                  *(_OWORD *)(v793 + v725) = v726;
                  v727 = *(_OWORD *)(v793 + v593 + v725);
                  *(_OWORD *)(v793 + v594 + v725) = v727;
                  *(_OWORD *)(v793 + v595 + v725) = v727;
                  *(_OWORD *)(v793 + v596 + v725) = v727;
                  *(_OWORD *)(v793 + v597 + v725) = v727;
                  v725 += 16;
                }
                while (v598 != v725);
                if (v598 != v750)
                {
                  if ((v750 & 8) == 0)
                    goto LABEL_983;
LABEL_980:
                  v728 = v793 + v592;
                  v729 = v793 + v789;
                  v730 = v793 + v593;
                  v731 = v793 + v594;
                  v732 = v793 + v595;
                  v733 = v793 + v596;
                  v734 = v793 + v597;
                  v735 = v750 & 0xFFFFFFF8;
                  v736 = v793;
                  do
                  {
                    v737 = *(_QWORD *)(v728 + v598);
                    *(_QWORD *)(v729 + v598) = v737;
                    *(_QWORD *)(v736 + v598) = v737;
                    v738 = *(_QWORD *)(v730 + v598);
                    *(_QWORD *)(v731 + v598) = v738;
                    *(_QWORD *)(v732 + v598) = v738;
                    *(_QWORD *)(v733 + v598) = v738;
                    *(_QWORD *)(v734 + v598) = v738;
                    v728 += 8;
                    v729 += 8;
                    v736 += 8;
                    v730 += 8;
                    v731 += 8;
                    v732 += 8;
                    v733 += 8;
                    v734 += 8;
                    v735 -= 8;
                  }
                  while (v598 != v735);
                  v598 = v750 & 0x7FFFFFF8;
                  if (v598 != v750)
                  {
LABEL_983:
                    v739 = v793 + v597;
                    v740 = v793 + v596;
                    v741 = v793 + v595;
                    v742 = v793 + v594;
                    v743 = v793 + v593;
                    v744 = v793 + v789;
                    v745 = v793 + v592;
                    do
                    {
                      v746 = *(_BYTE *)(v745 + v598);
                      *(_BYTE *)(v744 + v598) = v746;
                      *(_BYTE *)(v540 + v598) = v746;
                      v747 = *(_BYTE *)(v743 + v598);
                      *(_BYTE *)(v742 + v598) = v747;
                      *(_BYTE *)(v741 + v598) = v747;
                      *(_BYTE *)(v740 + v598) = v747;
                      *(_BYTE *)(v739 + v598) = v747;
                      --v591;
                      ++v739;
                      ++v740;
                      ++v741;
                      ++v742;
                      ++v743;
                      ++v540;
                      ++v744;
                      ++v745;
                    }
                    while (v598 != v591);
                  }
                }
              }
              if (*(_OWORD **)&v1011[0] != &v1011[1] && *(_QWORD *)&v1011[0])
                operator delete[]();
              goto LABEL_82;
            }
          }
          v572 = 0;
          v573 = 0;
          v574 = 0;
          v575 = 0;
          v543 = v877;
          if (v555 >= v571)
            goto LABEL_816;
LABEL_815:
          v572 += *(unsigned __int8 *)(v886 + v533) + *(unsigned __int8 *)(v887 + v533);
          v541 = v816;
          v573 += *(unsigned __int8 *)(v887 + v533 - 1) + *(unsigned __int8 *)(v547 + 2);
          v574 += 2 * *(unsigned __int8 *)(v968 + v533);
          ++v575;
          goto LABEL_816;
        }
      }
    case 86:
    case 87:
    case 88:
    case 89:
      if (a4 > 1 || v26)
      {
        v1011[0] = 0uLL;
        v34 = sub_10029430C(v1011, 20);
        *(_DWORD *)(v34 + 16) = 824196413;
        *(_OWORD *)v34 = *(_OWORD *)"scn == 1 && dcn == 1";
        sub_100294B74(-215, (uint64_t *)v1011, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1632);
      }
      v994.i32[0] = v1005->i32[1];
      v994.i32[1] = v15;
      sub_10026214C(a2, &v994, (v16 | 8) - 8, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
      {
        v35 = *(_QWORD *)(a2 + 8);
        v36 = *(_OWORD *)(v35 + 16);
        v1011[0] = *(_OWORD *)v35;
        v1011[1] = v36;
        v1011[2] = *(_OWORD *)(v35 + 32);
        v37 = *(_QWORD *)(v35 + 56);
        *(_QWORD *)&v1011[3] = *(_QWORD *)(v35 + 48);
        *((_QWORD *)&v1011[3] + 1) = v37;
        v1012 = (int *)v1011 + 2;
        v1013 = &v1014;
        v1015 = 0;
        v1014 = 0;
        if (v37)
        {
          v38 = (unsigned int *)(v37 + 20);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 + 1, v38));
        }
        if (*(int *)(v35 + 4) > 2)
        {
          DWORD1(v1011[0]) = 0;
          sub_100256B48((uint64_t)v1011, v35);
        }
        else
        {
          v40 = *(uint64_t **)(v35 + 72);
          v41 = v1013;
          *v1013 = *v40;
          v41[1] = v40[1];
        }
      }
      else
      {
        sub_10025CCB8(a2, -1, (uint64_t)v1011);
      }
      if (*(_QWORD *)&v995[56])
      {
        v76 = (unsigned int *)(*(_QWORD *)&v995[56] + 20);
        do
        {
          v77 = __ldaxr(v76);
          v78 = v77 - 1;
        }
        while (__stlxr(v78, v76));
        if (!v78)
          sub_100256C90((uint64_t)v995);
      }
      if (*(int *)&v995[4] >= 1)
      {
        v79 = 0;
        v80 = v996;
        do
          v80[v79++] = 0;
        while (v79 < *(int *)&v995[4]);
      }
      *(_OWORD *)v995 = v1011[0];
      *(_OWORD *)&v995[16] = v1011[1];
      *(_OWORD *)&v995[32] = v1011[2];
      *(_OWORD *)&v995[48] = v1011[3];
      if (v997 == &v998)
      {
        v81 = (unint64_t *)v1013;
        if (SDWORD1(v1011[0]) <= 2)
          goto LABEL_127;
      }
      else
      {
        j__free(v997);
        v997 = &v998;
        v996 = (int *)&v995[8];
        v81 = (unint64_t *)v1013;
        if (SDWORD1(v1011[0]) <= 2)
        {
LABEL_127:
          v998 = *v81;
          v999 = v81[1];
          goto LABEL_130;
        }
      }
      v997 = v81;
      v996 = v1012;
      v81 = (unint64_t *)&v1014;
      v1013 = &v1014;
      v1012 = (int *)v1011 + 2;
LABEL_130:
      LODWORD(v1011[0]) = 1124007936;
      memset((char *)v1011 + 4, 0, 60);
      if (v81 != (unint64_t *)&v1014)
        j__free(v81);
      if (v16)
      {
        if (v16 != 2)
        {
          v1011[0] = 0uLL;
          qmemcpy((void *)sub_10029430C(v1011, 54), "Bayer->Gray demosaicing only supports 8u and 16u types", 54);
          sub_100294B74(-210, (uint64_t *)v1011, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1642);
        }
        v82 = *v1005;
        v83 = vadd_s32(*v1005, (int32x2_t)0x100000001);
        *(int32x2_t *)&v985 = vrev64_s32(v83);
        if (v82.i32[0] >= 3)
        {
          if ((a3 & 0xFFFFFFFE) == 0x56)
            v84 = 1868;
          else
            v84 = 4899;
          if ((a3 & 0xFFFFFFFE) == 0x56)
            v85 = 4899;
          else
            v85 = 1868;
          v87 = a3 == 87 || a3 == 89;
          v1016.i32[0] = 0;
          v1016.i32[1] = v83.i32[0];
          sub_1002E136C((uint64_t)v1011, (uint64_t)&v1000, (uint64_t)v995, v87, (a3 & 0xFFFFFFFE) == 86, &v985, v84, v85);
          if (*(int *)&v995[4] >= 3)
          {
            v645 = v996 + 1;
            v646 = 1;
            v647 = *(_DWORD *)&v995[4] & 0xFFFFFFFE;
            v648 = 1;
            do
            {
              v646 *= *(v645 - 1);
              v648 *= *v645;
              v645 += 2;
              v647 -= 2;
            }
            while (v647);
            v88 = v648 * v646;
            v649 = *(unsigned int *)&v995[4] - (unint64_t)(*(_DWORD *)&v995[4] & 0xFFFFFFFE);
            if (v649)
            {
              v650 = (int *)((char *)v996 + ((4 * *(unsigned int *)&v995[4]) & 0x3FFFFFFF8));
              do
              {
                v651 = *v650++;
                v88 *= v651;
                --v649;
              }
              while (v649);
            }
          }
          else
          {
            v88 = *(int *)&v995[12] * (uint64_t)*(int *)&v995[8];
          }
          sub_10026F638(&v1016, (uint64_t)v1011, (double)(unint64_t)v88 * 0.0000152587891);
          sub_1002E1B90((uint64_t)v1011);
        }
        v652 = *(_QWORD *)&v995[16];
        v654 = *v996;
        v653 = v996[1];
        v655 = v998 >> 1;
        if (*v996 > 2)
        {
          if ((int)v653 < 1)
            goto LABEL_92;
          v656 = (int)v655;
          v657 = (v654 - 1) * v655;
          v658 = (*v996 - 2) * (int)v655;
          if (v653 >= 0x10)
          {
            v659 = 0;
            v700 = 2 * v657;
            if (v700 >= 0x20)
            {
              v701 = 2 * (int)v655;
              if ((unint64_t)(v701 + 31) >= 0x20)
              {
                v702 = 2 * v658;
                if ((unint64_t)(2 * v658) >= 0x20 && v700 - v701 >= 0x20 && v700 - v702 >= 0x20)
                {
                  v659 = v653 & 0x7FFFFFF0;
                  v703 = (_OWORD *)(*(_QWORD *)&v995[16] + 16);
                  v704 = v653 & 0xFFFFFFF0;
                  do
                  {
                    v705 = *(_OWORD *)((char *)v703 + 2 * v656);
                    *(v703 - 1) = *(_OWORD *)((char *)v703 + 2 * v656 - 16);
                    *v703 = v705;
                    v706 = *(_OWORD *)((char *)v703 + 2 * v658);
                    v707 = (_OWORD *)((char *)v703 + v700);
                    *(v707 - 1) = *(_OWORD *)((char *)v703 + v702 - 16);
                    *v707 = v706;
                    v703 += 2;
                    v704 -= 16;
                  }
                  while (v704);
                  if (v659 == v653)
                    goto LABEL_92;
                }
              }
            }
          }
          else
          {
            v659 = 0;
          }
          v708 = (_WORD *)(v652 + 2 * (v659 + v657));
          v709 = v653 - v659;
          v710 = (__int16 *)(v652 + 2 * (v659 + v658));
          v711 = (_WORD *)(v652 + 2 * v659);
          v712 = (__int16 *)(v652 + 2 * (v659 + v656));
          do
          {
            v713 = *v712++;
            *v711++ = v713;
            v714 = *v710++;
            *v708++ = v714;
            --v709;
          }
          while (v709);
          goto LABEL_92;
        }
        if ((int)v653 >= 1)
        {
          v660 = 0;
          v661 = (v654 - 1) * v655;
          v662 = v661;
          if (v653 < 0x10)
            goto LABEL_905;
          if ((unint64_t)(-2 * v661) < 0x20)
            goto LABEL_905;
          v660 = v653 & 0x7FFFFFF0;
          v663 = v653 & 0xFFFFFFF0;
          v664 = *(_OWORD **)&v995[16];
          do
          {
            v665 = (_OWORD *)((char *)v664 + 2 * v661);
            *v665 = 0uLL;
            v665[1] = 0uLL;
            *v664 = 0uLL;
            v664[1] = 0uLL;
            v664 += 2;
            v663 -= 16;
          }
          while (v663);
          if (v660 != v653)
          {
LABEL_905:
            v666 = v653 - v660;
            v667 = (_WORD *)(v652 + 2 * v660);
            v668 = (_WORD *)(v652 + 2 * (v660 + v662));
            do
            {
              *v668++ = 0;
              *v667++ = 0;
              --v666;
            }
            while (v666);
          }
        }
      }
      else
      {
        v89 = *v1005;
        v90 = vadd_s32(*v1005, (int32x2_t)0x100000001);
        *(int32x2_t *)&v985 = vrev64_s32(v90);
        if (v89.i32[0] >= 3)
        {
          if ((a3 & 0xFFFFFFFE) == 0x56)
            v91 = 1868;
          else
            v91 = 4899;
          if ((a3 & 0xFFFFFFFE) == 0x56)
            v92 = 4899;
          else
            v92 = 1868;
          v94 = a3 == 87 || a3 == 89;
          v1016.i32[0] = 0;
          v1016.i32[1] = v90.i32[0];
          sub_1002E0808((uint64_t)v1011, (uint64_t)&v1000, (uint64_t)v995, v94, (a3 & 0xFFFFFFFE) == 86, &v985, v91, v92);
          if (*(int *)&v995[4] >= 3)
          {
            v614 = v996 + 1;
            v615 = 1;
            v616 = *(_DWORD *)&v995[4] & 0xFFFFFFFE;
            v617 = 1;
            do
            {
              v615 *= *(v614 - 1);
              v617 *= *v614;
              v614 += 2;
              v616 -= 2;
            }
            while (v616);
            v95 = v617 * v615;
            v618 = *(unsigned int *)&v995[4] - (unint64_t)(*(_DWORD *)&v995[4] & 0xFFFFFFFE);
            if (v618)
            {
              v619 = (int *)((char *)v996 + ((4 * *(unsigned int *)&v995[4]) & 0x3FFFFFFF8));
              do
              {
                v620 = *v619++;
                v95 *= v620;
                --v618;
              }
              while (v618);
            }
          }
          else
          {
            v95 = *(int *)&v995[12] * (uint64_t)*(int *)&v995[8];
          }
          sub_10026F638(&v1016, (uint64_t)v1011, (double)(unint64_t)v95 * 0.0000152587891);
          sub_1002E124C((uint64_t)v1011);
        }
        v621 = *(_QWORD *)&v995[16];
        v623 = *v996;
        v622 = v996[1];
        *(_QWORD *)&v985 = __PAIR64__(*v996, v622);
        if (v623 <= 2)
        {
          if (v622 >= 1)
          {
            v627 = 0;
            v628 = (int)v998;
            do
            {
              v629 = (_BYTE *)(v621 + v627);
              v629[(SDWORD1(v985) - 1) * v628] = 0;
              *v629 = 0;
              ++v627;
            }
            while (v627 < (int)v985);
          }
        }
        else if (v622 >= 1)
        {
          v624 = 0;
          v625 = v998;
          do
          {
            v626 = (_BYTE *)(v621 + v624);
            *v626 = *(_BYTE *)(v621 + v625 + v624);
            v626[(SDWORD1(v985) - 1) * v625] = *(_BYTE *)(v621 + v624++ + (SDWORD1(v985) - 2) * v625);
          }
          while (v624 < (int)v985);
        }
      }
LABEL_92:
      if (*(_QWORD *)&v995[56])
      {
        v66 = (unsigned int *)(*(_QWORD *)&v995[56] + 20);
        do
        {
          v67 = __ldaxr(v66);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v66));
        if (!v68)
          sub_100256C90((uint64_t)v995);
      }
      *(_QWORD *)&v995[56] = 0;
      memset(&v995[16], 0, 32);
      if (*(int *)&v995[4] >= 1)
      {
        v69 = 0;
        v70 = v996;
        do
          v70[v69++] = 0;
        while (v69 < *(int *)&v995[4]);
      }
      if (v997 != &v998)
        j__free(v997);
      if (v1004)
      {
        v71 = (unsigned int *)(v1004 + 20);
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
          sub_100256C90((uint64_t)&v1000);
      }
      v1004 = 0;
      v1001 = 0u;
      v1002 = 0u;
      if (SDWORD1(v1000) >= 1)
      {
        v74 = 0;
        v75 = v1005;
        do
          v75->i32[v74++] = 0;
        while (v74 < SDWORD1(v1000));
      }
      if (v1006 != v1007)
        j__free(v1006);
      if (v1009)
        sub_1002989D0(v1008);
      return;
    case 135:
    case 136:
    case 137:
    case 138:
      if (a4 < 1)
        a4 = 3;
      if (a4 != 3 || v26)
      {
        v1011[0] = 0uLL;
        v42 = sub_10029430C(v1011, 20);
        *(_DWORD *)(v42 + 16) = 857750845;
        *(_OWORD *)v42 = *(_OWORD *)"scn == 1 && dcn == 3";
        sub_100294B74(-215, (uint64_t *)v1011, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1680);
      }
      v984.i32[0] = v1005->i32[1];
      v984.i32[1] = v15;
      sub_10026214C(a2, &v984, (v16 | 0x18) - 8, -1, 0, 0);
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
      {
        v43 = *(_QWORD *)(a2 + 8);
        v44 = *(_OWORD *)(v43 + 16);
        v1011[0] = *(_OWORD *)v43;
        v1011[1] = v44;
        v1011[2] = *(_OWORD *)(v43 + 32);
        v45 = *(_QWORD *)(v43 + 56);
        *(_QWORD *)&v1011[3] = *(_QWORD *)(v43 + 48);
        *((_QWORD *)&v1011[3] + 1) = v45;
        v1012 = (int *)v1011 + 2;
        v1013 = &v1014;
        v1015 = 0;
        v1014 = 0;
        if (v45)
        {
          v46 = (unsigned int *)(v45 + 20);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 + 1, v46));
        }
        if (*(int *)(v43 + 4) > 2)
        {
          DWORD1(v1011[0]) = 0;
          sub_100256B48((uint64_t)v1011, v43);
        }
        else
        {
          v48 = *(uint64_t **)(v43 + 72);
          v49 = v1013;
          *v1013 = *v48;
          v49[1] = v48[1];
        }
      }
      else
      {
        sub_10025CCB8(a2, -1, (uint64_t)v1011);
      }
      if (*(_QWORD *)&v995[56])
      {
        v96 = (unsigned int *)(*(_QWORD *)&v995[56] + 20);
        do
        {
          v97 = __ldaxr(v96);
          v98 = v97 - 1;
        }
        while (__stlxr(v98, v96));
        if (!v98)
          sub_100256C90((uint64_t)v995);
      }
      if (*(int *)&v995[4] >= 1)
      {
        v99 = 0;
        v100 = v996;
        do
          v100[v99++] = 0;
        while (v99 < *(int *)&v995[4]);
      }
      *(_OWORD *)v995 = v1011[0];
      *(_OWORD *)&v995[16] = v1011[1];
      *(_OWORD *)&v995[32] = v1011[2];
      *(_OWORD *)&v995[48] = v1011[3];
      if (v997 == &v998)
      {
        v101 = (unint64_t *)v1013;
        if (SDWORD1(v1011[0]) <= 2)
          goto LABEL_176;
      }
      else
      {
        j__free(v997);
        v997 = &v998;
        v996 = (int *)&v995[8];
        v101 = (unint64_t *)v1013;
        if (SDWORD1(v1011[0]) <= 2)
        {
LABEL_176:
          v998 = *v101;
          v999 = v101[1];
          goto LABEL_179;
        }
      }
      v997 = v101;
      v996 = v1012;
      v101 = (unint64_t *)&v1014;
      v1013 = &v1014;
      v1012 = (int *)v1011 + 2;
LABEL_179:
      LODWORD(v1011[0]) = 1124007936;
      memset((char *)v1011 + 4, 0, 60);
      if (v101 != (unint64_t *)&v1014)
        j__free(v101);
      if (v16)
      {
        if (v16 != 2)
        {
          v1011[0] = 0uLL;
          qmemcpy((void *)sub_10029430C(v1011, 74), "Bayer->RGB Edge-Aware demosaicing only currently supports 8u and 16u types", 74);
          sub_100294B74(-210, (uint64_t *)v1011, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1689);
        }
        v102 = v1005->i32[1];
        if (v102 >= 3)
        {
          v103 = v1005->i32[0] - 2;
          if (v1005->i32[0] > 2)
          {
            LODWORD(v985) = v102 - 2;
            DWORD1(v985) = v103;
            sub_1002E2EFC((uint64_t)v1011, (uint64_t)&v1000, (uint64_t)v995, &v985, (a3 - 135) < 2, (a3 & 0xFFFFFFFD) == 136);
            v1016.i32[0] = 0;
            v1016.i32[1] = DWORD1(v985);
            if (*(int *)&v995[4] >= 3)
            {
              v669 = v996 + 1;
              v670 = 1;
              v671 = *(_DWORD *)&v995[4] & 0xFFFFFFFE;
              v672 = 1;
              do
              {
                v670 *= *(v669 - 1);
                v672 *= *v669;
                v669 += 2;
                v671 -= 2;
              }
              while (v671);
              v104 = v672 * v670;
              v673 = *(unsigned int *)&v995[4] - (unint64_t)(*(_DWORD *)&v995[4] & 0xFFFFFFFE);
              if (v673)
              {
                v674 = (int *)((char *)v996 + ((4 * *(unsigned int *)&v995[4]) & 0x3FFFFFFF8));
                do
                {
                  v675 = *v674++;
                  v104 *= v675;
                  --v673;
                }
                while (v673);
              }
            }
            else
            {
              v104 = *(int *)&v995[12] * (uint64_t)*(int *)&v995[8];
            }
            sub_10026F638(&v1016, (uint64_t)v1011, (double)(unint64_t)v104 * 0.0000152587891);
            sub_1002E35DC((uint64_t)v1011);
            v676 = *(_QWORD *)&v995[16];
            v677 = *v996;
            v678 = v996[1] + v996[1] * ((*(_DWORD *)v995 >> 3) & 0x1FFu);
            v679 = v998 / ((0x88442211uLL >> (4 * (v995[0] & 7u))) & 0xF);
            v680 = v677 - 1;
            v681 = v679 * (v677 - 1);
            v682 = *(_QWORD *)&v995[16] + 2 * v681;
            if ((int)v677 > 2)
            {
              if ((int)v678 < 1)
                goto LABEL_92;
              v683 = 2 * v679;
              v684 = *(_QWORD *)&v995[16] + 2 * v679;
              v685 = v682 - 2 * v679;
              if (v678 >= 0x18)
              {
                v686 = 0;
                v715 = 2 * v681;
                if (v715 >= 0x20 && (unint64_t)(v683 + 31) >= 0x20)
                {
                  v716 = v679 * (2 * v680 - 2);
                  if (v716 >= 0x20 && v715 - v683 >= 0x20 && v715 - v716 >= 0x20)
                  {
                    v717 = 0;
                    v686 = v678 & 0xFFFFFFF0;
                    v718 = (_OWORD *)(*(_QWORD *)&v995[16] + 16);
                    v719 = v686;
                    do
                    {
                      v720 = (_OWORD *)(v684 + 2 * v717);
                      v721 = v720[1];
                      *(v718 - 1) = *v720;
                      *v718 = v721;
                      v722 = (_OWORD *)(v685 + 2 * v717);
                      v723 = v722[1];
                      v724 = (_OWORD *)(v682 + 2 * v717);
                      *v724 = *v722;
                      v724[1] = v723;
                      v717 += 16;
                      v718 += 2;
                      v719 -= 16;
                    }
                    while (v719);
                    if (v686 == v678)
                      goto LABEL_92;
                  }
                }
              }
              else
              {
                v686 = 0;
              }
              v687 = v678 - v686;
              v688 = (_WORD *)(v676 + 2 * v686);
              do
              {
                *v688++ = *(_WORD *)(v684 + 2 * v686);
                *(_WORD *)(v682 + 2 * v686) = *(_WORD *)(v685 + 2 * v686);
                ++v686;
                --v687;
              }
              while (v687);
              goto LABEL_92;
            }
            if ((int)v678 < 1)
              goto LABEL_92;
            if (v678 < 0x10)
            {
              v689 = 0;
            }
            else
            {
              v689 = 0;
              if ((unint64_t)(-2 * v681) >= 0x20)
              {
                v690 = 0;
                v689 = v678 & 0xFFFFFFF0;
                v691 = (_OWORD *)(*(_QWORD *)&v995[16] + 16);
                v692 = v689;
                do
                {
                  v693 = (_OWORD *)(v682 + 2 * v690);
                  *v693 = 0uLL;
                  v693[1] = 0uLL;
                  *(v691 - 1) = 0uLL;
                  *v691 = 0uLL;
                  v690 += 16;
                  v691 += 2;
                  v692 -= 16;
                }
                while (v692);
                if (v689 == v678)
                  goto LABEL_92;
              }
            }
            v748 = v678 - v689;
            v749 = (_WORD *)(v676 + 2 * v689);
            do
            {
              *(_WORD *)(v682 + 2 * v689) = 0;
              *v749++ = 0;
              ++v689;
              --v748;
            }
            while (v748);
            goto LABEL_92;
          }
        }
      }
      else
      {
        v105 = v1005->i32[1];
        if (v105 >= 3)
        {
          v106 = v1005->i32[0] - 2;
          if (v1005->i32[0] > 2)
          {
            LODWORD(v985) = v105 - 2;
            DWORD1(v985) = v106;
            sub_1002E26D4((uint64_t)v1011, (uint64_t)&v1000, (uint64_t)v995, &v985, (a3 - 135) < 2, (a3 & 0xFFFFFFFD) == 136);
            v1016.i32[0] = 0;
            v1016.i32[1] = DWORD1(v985);
            if (*(int *)&v995[4] >= 3)
            {
              v630 = v996 + 1;
              v631 = 1;
              v632 = *(_DWORD *)&v995[4] & 0xFFFFFFFE;
              v633 = 1;
              do
              {
                v631 *= *(v630 - 1);
                v633 *= *v630;
                v630 += 2;
                v632 -= 2;
              }
              while (v632);
              v107 = v633 * v631;
              v634 = *(unsigned int *)&v995[4] - (unint64_t)(*(_DWORD *)&v995[4] & 0xFFFFFFFE);
              if (v634)
              {
                v635 = (int *)((char *)v996 + ((4 * *(unsigned int *)&v995[4]) & 0x3FFFFFFF8));
                do
                {
                  v636 = *v635++;
                  v107 *= v636;
                  --v634;
                }
                while (v634);
              }
            }
            else
            {
              v107 = *(int *)&v995[12] * (uint64_t)*(int *)&v995[8];
            }
            sub_10026F638(&v1016, (uint64_t)v1011, (double)(unint64_t)v107 * 0.0000152587891);
            sub_1002E2DDC((uint64_t)v1011);
            v637 = *(_QWORD *)&v995[16];
            v638 = v996[1] + v996[1] * ((*(_DWORD *)v995 >> 3) & 0x1FF);
            DWORD1(v985) = *v996;
            LODWORD(v985) = v638;
            v639 = v998 / ((0x88442211uLL >> (4 * (v995[0] & 7u))) & 0xF);
            v640 = *(_QWORD *)&v995[16] + v639 * (SDWORD1(v985) - 1);
            if (SDWORD1(v985) <= 2)
            {
              if (v638 >= 1)
              {
                v644 = 0;
                do
                {
                  *(_BYTE *)(v640 + v644) = 0;
                  *(_BYTE *)(v637 + v644++) = 0;
                }
                while (v644 < (int)v985);
              }
            }
            else if (v638 >= 1)
            {
              v641 = 0;
              v642 = *(_QWORD *)&v995[16] + v639;
              v643 = v640 - v639;
              do
              {
                *(_BYTE *)(v637 + v641) = *(_BYTE *)(v642 + v641);
                *(_BYTE *)(v640 + v641) = *(_BYTE *)(v643 + v641);
                ++v641;
              }
              while (v641 < (int)v985);
            }
            goto LABEL_92;
          }
        }
      }
      memset(v1011, 0, 32);
      sub_10021956C((uint64_t)v995, (uint64_t)v1011);
      goto LABEL_92;
    default:
      v1011[0] = 0uLL;
      qmemcpy((void *)sub_10029430C(v1011, 43), "Unknown / unsupported color conversion code", 43);
      sub_100294B74(-206, (uint64_t *)v1011, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1694);
  }
}

void sub_1002DF8FC(_Unwind_Exception *a1)
{
  sub_1002E35DC((uint64_t)&STACK[0x810]);
  sub_100006BE4((uint64_t)&STACK[0x730]);
  sub_100006BE4((uint64_t)&STACK[0x790]);
  sub_1001D40CC((uint64_t)&STACK[0x7F8]);
  _Unwind_Resume(a1);
}

void sub_1002DFAD0(_Unwind_Exception *a1)
{
  sub_1001D40CC((uint64_t)&STACK[0x7F8]);
  _Unwind_Resume(a1);
}

uint64_t sub_1002DFAE4(uint64_t result, unsigned int *a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  int32x2_t v6;
  int32x2_t v7;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE v30[216];
  _DWORD v31[2];
  int32x2_t v32;

  v4 = *((_QWORD *)a2 + 10);
  v5 = *a2;
  v6 = **(int32x2_t **)(result + 64);
  v7 = vadd_s32(v6, (int32x2_t)0x100000001);
  v32 = vrev64_s32(v7);
  if (v6.i32[0] >= 3)
  {
    v9 = a3 == 47 || a3 == 49;
    if ((a3 & 0xFFFFFFFE) == 0x2E)
      v10 = -1;
    else
      v10 = 1;
    v31[0] = 0;
    v31[1] = v7.i32[0];
    sub_1002DFCDC((uint64_t)v30, result, (uint64_t)a2, v9, v10, &v32);
    v11 = a2[1];
    if ((int)v11 >= 3)
    {
      v13 = *((_QWORD *)a2 + 8);
      v14 = (int *)(v13 + 4);
      v15 = 1;
      v16 = v11 & 0xFFFFFFFE;
      v17 = 1;
      do
      {
        v15 *= *(v14 - 1);
        v17 *= *v14;
        v14 += 2;
        v16 -= 2;
      }
      while (v16);
      v12 = v17 * v15;
      v18 = v11 - (v11 & 0xFFFFFFFE);
      if (v18)
      {
        v19 = (int *)(v13 + ((4 * v11) & 0x3FFFFFFF8));
        do
        {
          v20 = *v19++;
          v12 *= v20;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      v12 = (int)a2[3] * (uint64_t)(int)a2[2];
    }
    sub_10026F638(v31, (uint64_t)v30, (double)(unint64_t)v12 * 0.0000152587891);
    result = sub_1002E06E8((uint64_t)v30);
  }
  v21 = ((v5 >> 3) & 0x1FF) + 1;
  v22 = (int *)*((_QWORD *)a2 + 8);
  v23 = *v22;
  v32.i32[0] = v22[1];
  v32.i32[1] = v23;
  v24 = *((_QWORD *)a2 + 2);
  v25 = v32.i32[0] * v21;
  if (v23 <= 2)
  {
    if (v25 >= 1)
    {
      v28 = 0;
      do
      {
        v29 = (_BYTE *)(v24 + v28);
        v29[(v32.i32[1] - 1) * (int)v4] = 0;
        *v29 = 0;
        ++v28;
      }
      while (v28 < v32.i32[0] * (uint64_t)(int)v21);
    }
  }
  else if (v25 >= 1)
  {
    v26 = 0;
    do
    {
      v27 = (_BYTE *)(v24 + v26);
      *v27 = *(_BYTE *)(v24 + (int)v4 + v26);
      v27[(v32.i32[1] - 1) * (int)v4] = *(_BYTE *)(v24 + v26++ + (v32.i32[1] - 2) * (int)v4);
    }
    while (v26 < v32.i32[0] * (uint64_t)(int)v21);
  }
  return result;
}

void sub_1002DFCC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002E06E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002DFCDC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, _QWORD *a6)
{
  __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;

  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a1 = off_100451CF0;
  *(_OWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 20);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v15 = *(_QWORD **)(a2 + 72);
    v16 = *(_QWORD **)(a1 + 80);
    *v16 = *v15;
    v16[1] = v15[1];
  }
  v17 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v19 = *(_QWORD *)(a3 + 48);
  v18 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v19;
  *(_QWORD *)(a1 + 160) = v18;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v17;
  if (v18)
  {
    v20 = (unsigned int *)(v18 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v22 = *(_QWORD **)(a3 + 72);
    v23 = *(_QWORD **)(a1 + 176);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(_QWORD *)(a1 + 208) = *a6;
  return a1;
}

void sub_1002DFE30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100006BE4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1002DFE4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1002DFE60(uint64_t a1)
{
  sub_1002E06E8(a1);
  operator delete();
}

uint64_t sub_1002DFE84(uint64_t result, _DWORD *a2, double a3, double a4, double a5, double a6, double a7, int8x16_t a8)
{
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  _BYTE *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint16x8_t *v29;
  _BYTE *v30;
  int v31;
  __int8 *v32;
  unint64_t v33;
  uint16x8_t *v34;
  char *v35;
  int16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  int16x8_t v39;
  unsigned __int128 v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int16x8_t v48;
  unint64_t v49;
  char *v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  _BYTE *v64;
  unint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned __int8 *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned __int8 *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned __int8 *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  _BYTE *v81;
  _DWORD *v82;
  int v83;
  uint64_t v84;
  int8x16x4_t v85;
  int8x16x3_t v86;
  int8x16x4_t v87;

  v8 = *a2;
  if (*a2 < a2[1])
  {
    v9 = (((unint64_t)*(unsigned int *)(result + 104) >> 3) & 0x1FF) + 1;
    if ((v8 & 1) != 0)
      v10 = *(_DWORD *)(result + 200) == 0;
    else
      v10 = *(_DWORD *)(result + 200);
    if ((v8 & 1) != 0)
      v11 = -*(_DWORD *)(result + 204);
    else
      v11 = *(_DWORD *)(result + 204);
    v12 = *(_QWORD *)(result + 184);
    v13 = (_BYTE *)(*(_QWORD *)(result + 120) + (int)v12 + (int)v12 * v8 + v9 + 1);
    v14 = *(_QWORD *)(result + 88);
    v15 = (int)v14;
    v16 = *(_QWORD *)(result + 24) + v8 * (uint64_t)(int)v14;
    v17 = (2 * v9);
    v18 = 2 * (int)v14;
    v84 = v18 | 1;
    v19 = v14 << 32;
    v20 = ((v14 << 32) + 0x200000000) >> 32;
    v21 = ((uint64_t)&_mh_execute_header + v19) >> 32;
    v22 = (int)v18 + 2;
    v23 = (v19 + 0x300000000) >> 32;
    v24.i64[0] = -1;
    v24.i64[1] = -1;
    v82 = a2;
    do
    {
      v28 = *(int *)(result + 208);
      if ((int)v28 <= 0)
      {
        if ((_DWORD)v9 == 3)
        {
          v13[3 * v28 + 1] = 0;
          v13[3 * *(int *)(result + 208)] = 0;
          v13[3 * *(int *)(result + 208) - 1] = 0;
          *(_WORD *)(v13 - 3) = 0;
          *(v13 - 4) = 0;
        }
        else
        {
          v13[(int)v28 * (uint64_t)(int)v9 + 1] = 0;
          v13[*(int *)(result + 208) * (uint64_t)(int)v9] = 0;
          v13[*(int *)(result + 208) * (uint64_t)(int)v9 - 1] = 0;
          *(v13 - 3) = 0;
          *(_WORD *)(v13 - 5) = 0;
          v13[*(int *)(result + 208) * (uint64_t)(int)v9 + 2] = -1;
          *(v13 - 2) = -1;
        }
        goto LABEL_12;
      }
      v29 = (uint16x8_t *)v16;
      v30 = v13;
      if (v10)
      {
        v29 = (uint16x8_t *)(v16 + 1);
        v31 = *(unsigned __int8 *)(v16 + v15) + *(unsigned __int8 *)(v16 + v20);
        v13[-v11] = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v84) + 1) >> 1;
        *v13 = *(_BYTE *)(v16 + v21);
        v13[v11] = (v31 + 1) >> 1;
        if ((_DWORD)v9 == 4)
          v13[2] = -1;
        v30 = &v13[v9];
      }
      v32 = &v29->i8[*(int *)(result + 208)];
      if ((_DWORD)v9 == 4)
      {
        v85.val[3] = v24;
        v33 = (unint64_t)(v32 - 18);
        LODWORD(v34) = (_DWORD)v29;
        if (v33 >= (unint64_t)v29)
        {
          v35 = v30 - 1;
          v34 = v29;
          do
          {
            v36 = *(int16x8_t *)((char *)v34 + v15);
            v37 = *(uint16x8_t *)((char *)v34 + v18);
            v38 = *v34;
            v34 = (uint16x8_t *)((char *)v34 + 14);
            v39 = (int16x8_t)vshrq_n_u16((uint16x8_t)v36, 8uLL);
            *(int8x8_t *)a8.i8 = vshrn_n_s16(v36, 8uLL);
            v40 = *(_OWORD *)&v36 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
            v41 = (int16x8_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 2uLL);
            v42 = (int16x8_t)vsraq_n_u16(vsraq_n_u16((uint16x8_t)v40, v38, 8uLL), v37, 8uLL);
            v43 = vaddq_s16((int16x8_t)(*(_OWORD *)&v37 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), (int16x8_t)(*(_OWORD *)&v38 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)));
            v44 = (int16x8_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 2uLL);
            v45 = vaddq_s16(v44, v43);
            *(int8x8_t *)v45.i8 = vrshrn_n_s16(v45, 2uLL);
            *(int8x8_t *)v44.i8 = vrshrn_n_s16(v44, 1uLL);
            v46 = vzip1q_s8((int8x16_t)v45, (int8x16_t)v44);
            v85.val[1 - v11] = v46;
            v47 = vaddq_s16(v42, v41);
            *(int8x8_t *)v47.i8 = vrshrn_n_s16(v47, 2uLL);
            *(int8x8_t *)v46.i8 = vmovn_s16(v41);
            v85.val[1] = vzip1q_s8((int8x16_t)v47, v46);
            v48 = vsubq_s16(v39, (int16x8_t)vmvnq_s8(vextq_s8((int8x16_t)v39, (int8x16_t)v39, 2uLL)));
            *(int8x8_t *)v48.i8 = vshrn_n_s16(v48, 1uLL);
            v85.val[v11 + 1] = vzip1q_s8(a8, (int8x16_t)v48);
            v87 = v85;
            vst4q_s8(v35, v87);
            v35 += 56;
          }
          while ((unint64_t)v34 <= v33);
        }
      }
      else
      {
        v49 = (unint64_t)(v32 - 18);
        LODWORD(v34) = (_DWORD)v29;
        if (v49 >= (unint64_t)v29)
        {
          v50 = v30 - 1;
          v34 = v29;
          do
          {
            v51 = *(int16x8_t *)((char *)v34 + v15);
            v52 = (int16x8_t)vshrq_n_u16((uint16x8_t)v51, 8uLL);
            *(int8x8_t *)a8.i8 = vshrn_n_s16(v51, 8uLL);
            v51.i16[0] = v51.u8[0];
            v51.i16[1] = BYTE2(*(_OWORD *)((char *)v34 + v15));
            v51.i16[2] = BYTE4(*(unint64_t *)((char *)v34->i64 + v15));
            v51.i16[3] = BYTE6(*(unint64_t *)((char *)v34->i64 + v15));
            v51.i16[4] = *(uint64_t *)((char *)&v34->i64[1] + v15);
            v51.i16[5] = BYTE2(*(uint64_t *)((char *)&v34->i64[1] + v15));
            v51.i16[6] = BYTE12(*(unsigned __int128 *)((char *)v34 + v15));
            v51.i16[7] = BYTE14(*(unsigned __int128 *)((char *)v34 + v15));
            v53 = (int16x8_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 2uLL);
            v54.i16[0] = v34->u8[0];
            v54.i16[1] = BYTE2(v34->u32[0]);
            v54.i16[2] = BYTE4(v34->i64[0]);
            v54.i16[3] = BYTE6(v34->i64[0]);
            v54.i16[4] = v34->i64[1];
            v54.i16[5] = BYTE2(v34->i64[1]);
            v54.i16[6] = BYTE12(*(unsigned __int128 *)v34);
            v54.i16[7] = BYTE14(*(unsigned __int128 *)v34);
            v55 = (int16x8_t)vsraq_n_u16(vsraq_n_u16((uint16x8_t)v51, *v34, 8uLL), *(uint16x8_t *)((char *)v34 + v18), 8uLL);
            v56.i16[0] = *(_OWORD *)((char *)v34 + v18);
            v56.i16[1] = BYTE2(*(_OWORD *)((char *)v34 + v18));
            v56.i16[2] = BYTE4(*(unint64_t *)((char *)v34->i64 + v18));
            v56.i16[3] = BYTE6(*(unint64_t *)((char *)v34->i64 + v18));
            v56.i16[4] = *(uint64_t *)((char *)&v34->i64[1] + v18);
            v56.i16[5] = BYTE2(*(uint64_t *)((char *)&v34->i64[1] + v18));
            v56.i16[6] = BYTE12(*(unsigned __int128 *)((char *)v34 + v18));
            v56.i16[7] = BYTE14(*(unsigned __int128 *)((char *)v34 + v18));
            v57 = vaddq_s16(v56, v54);
            v58 = (int16x8_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 2uLL);
            v59 = vaddq_s16(v58, v57);
            *(int8x8_t *)v59.i8 = vrshrn_n_s16(v59, 2uLL);
            *(int8x8_t *)v58.i8 = vrshrn_n_s16(v58, 1uLL);
            v85.val[1 - v11] = vzip1q_s8((int8x16_t)v59, (int8x16_t)v58);
            v60 = vaddq_s16(v55, v53);
            *(int8x8_t *)v60.i8 = vrshrn_n_s16(v60, 2uLL);
            *(int8x8_t *)v55.i8 = vmovn_s16(v53);
            v85.val[1] = vzip1q_s8((int8x16_t)v60, (int8x16_t)v55);
            v61 = vsubq_s16(v52, (int16x8_t)vmvnq_s8(vextq_s8((int8x16_t)v52, (int8x16_t)v52, 2uLL)));
            *(int8x8_t *)v61.i8 = vshrn_n_s16(v61, 1uLL);
            v85.val[v11 + 1] = vzip1q_s8(a8, (int8x16_t)v61);
            v86 = *(int8x16x3_t *)v85.val[0].i8;
            vst3q_s8(v50, v86);
            v34 = (uint16x8_t *)((char *)v34 + 14);
            v50 += 42;
          }
          while ((unint64_t)v34 <= v49);
        }
      }
      v62 = (int)v34 - (int)v29;
      v63 = &v29->u8[v62];
      v64 = &v30[(int)v9 * (uint64_t)(int)v62];
      v65 = v16 + v28 - 2;
      if ((_DWORD)v9 == 3)
      {
        if (v11 <= 0)
        {
          if ((unint64_t)v63 <= v65)
          {
            v83 = v10;
            v66 = &v29->u8[v62 + 1];
            do
            {
              v73 = v66 + 1;
              v74 = (*v66 + v66[v15 - 1] + v66[v20 - 1] + v66[v18] + 2) >> 2;
              v64[1] = (*(v66 - 1) + v66[1] + v66[v18 - 1] + v66[v22 - 1] + 2) >> 2;
              *v64 = v74;
              *(v64 - 1) = v66[v21 - 1];
              v75 = (v66[v21 - 1] + v66[v23 - 1] + 1) >> 1;
              v64[4] = (v66[1] + v66[v22 - 1] + 1) >> 1;
              v64[3] = v66[v20 - 1];
              v64[2] = v75;
              v64 += v17;
              v66 += 2;
            }
            while ((unint64_t)v73 <= v65);
            goto LABEL_47;
          }
        }
        else if ((unint64_t)v63 <= v65)
        {
          v83 = v10;
          v66 = &v29->u8[v62 + 1];
          do
          {
            v67 = v66 + 1;
            v68 = (*v66 + v66[v15 - 1] + v66[v20 - 1] + v66[v18] + 2) >> 2;
            *(v64 - 1) = (*(v66 - 1) + v66[1] + v66[v18 - 1] + v66[v22 - 1] + 2) >> 2;
            *v64 = v68;
            v64[1] = v66[v21 - 1];
            v69 = (v66[v21 - 1] + v66[v23 - 1] + 1) >> 1;
            v64[2] = (v66[1] + v66[v22 - 1] + 1) >> 1;
            v64[3] = v66[v20 - 1];
            v64[4] = v69;
            v64 += v17;
            v66 += 2;
          }
          while ((unint64_t)v67 <= v65);
LABEL_47:
          v63 = v66 - 1;
          a2 = v82;
          v10 = v83;
        }
      }
      else if (v11 <= 0)
      {
        if ((unint64_t)v63 <= v65)
        {
          v83 = v10;
          v66 = &v29->u8[v62 + 1];
          do
          {
            v76 = v66 + 1;
            v77 = (*(v66 - 1) + v66[1] + v66[v18 - 1] + v66[v22 - 1] + 2) >> 2;
            v78 = (*v66 + v66[v15 - 1] + v66[v20 - 1] + v66[v18] + 2) >> 2;
            *(v64 - 1) = v66[v21 - 1];
            *v64 = v78;
            v64[1] = v77;
            v64[2] = -1;
            v79 = (v66[1] + v66[v22 - 1] + 1) >> 1;
            v64[3] = (v66[v21 - 1] + v66[v23 - 1] + 1) >> 1;
            v64[4] = v66[v20 - 1];
            v64[5] = v79;
            v64[6] = -1;
            v64 += v17;
            v66 += 2;
          }
          while ((unint64_t)v76 <= v65);
          goto LABEL_47;
        }
      }
      else if ((unint64_t)v63 <= v65)
      {
        v83 = v10;
        v66 = &v29->u8[v62 + 1];
        do
        {
          v70 = v66 + 1;
          v71 = (*v66 + v66[v15 - 1] + v66[v20 - 1] + v66[v18] + 2) >> 2;
          *(v64 - 1) = (*(v66 - 1) + v66[1] + v66[v18 - 1] + v66[v22 - 1] + 2) >> 2;
          *v64 = v71;
          v64[1] = v66[v21 - 1];
          v64[2] = -1;
          v72 = (v66[v21 - 1] + v66[v23 - 1] + 1) >> 1;
          v64[3] = (v66[1] + v66[v22 - 1] + 1) >> 1;
          v64[4] = v66[v20 - 1];
          v64[5] = v72;
          v64[6] = -1;
          v64 += v17;
          v66 += 2;
        }
        while ((unint64_t)v70 <= v65);
        goto LABEL_47;
      }
      if ((unint64_t)v63 < v16 + v28
        && (v80 = (v63[1] + v63[v15] + v63[v20] + v63[v84] + 2) >> 2,
            v64[-v11] = (*v63 + v63[2] + v63[v18] + v63[v22] + 2) >> 2,
            *v64 = v80,
            v64[v11] = v63[v21],
            (_DWORD)v9 == 4))
      {
        v64[2] = -1;
      }
      else if ((_DWORD)v9 == 3)
      {
        *(v13 - 4) = *(v13 - 1);
        *(_WORD *)(v13 - 3) = *(_WORD *)v13;
        v13[3 * *(_DWORD *)(result + 208) - 1] = v13[3 * *(int *)(result + 208) - 4];
        v81 = &v13[3 * *(int *)(result + 208)];
        *v81 = *(v81 - 3);
        v26 = 3 * *(_DWORD *)(result + 208);
        v27 = v26 + 1;
        goto LABEL_11;
      }
      *(_DWORD *)(v13 - 5) = *(_DWORD *)(v13 - 1);
      v13[*(_DWORD *)(result + 208) * (int)v9 - 1] = v13[*(int *)(result + 208) * (uint64_t)(int)v9 - 5];
      v25 = &v13[*(int *)(result + 208) * (uint64_t)(int)v9];
      *v25 = *(v25 - 4);
      v13[*(_DWORD *)(result + 208) * (int)v9 + 1] = v13[*(int *)(result + 208) * (uint64_t)(int)v9 - 3];
      v26 = *(_DWORD *)(result + 208) * v9;
      v27 = v26 + 2;
LABEL_11:
      v10 = v10 == 0;
      v13[v27] = v13[v26 - 2];
      v11 = -v11;
LABEL_12:
      v16 += v15;
      v13 += (int)v12;
      ++v8;
    }
    while (v8 < a2[1]);
  }
  return result;
}

uint64_t sub_1002E06E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100451CF0;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_1002E0808(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, _QWORD *a6, int a7, int a8)
{
  __int128 v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;

  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a1 = off_100451D30;
  *(_OWORD *)(a1 + 24) = v15;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v16)
  {
    v17 = (unsigned int *)(v16 + 20);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v19 = *(_QWORD **)(a2 + 72);
    v20 = *(_QWORD **)(a1 + 80);
    *v20 = *v19;
    v20[1] = v19[1];
  }
  v21 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v23 = *(_QWORD *)(a3 + 48);
  v22 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 160) = v22;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v21;
  if (v22)
  {
    v24 = (unsigned int *)(v22 + 20);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v26 = *(_QWORD **)(a3 + 72);
    v27 = *(_QWORD **)(a1 + 176);
    *v27 = *v26;
    v27[1] = v26[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_BYTE *)(a1 + 204) = a5;
  *(_QWORD *)(a1 + 208) = *a6;
  *(_DWORD *)(a1 + 216) = a7;
  *(_DWORD *)(a1 + 220) = a8;
  return a1;
}

void sub_1002E0974(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100006BE4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1002E0990(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1002E09A4(uint64_t a1)
{
  sub_1002E124C(a1);
  operator delete();
}

uint64_t sub_1002E09C8(uint64_t result, _DWORD *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int16x4_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  __int128 v24;
  uint16x4_t v25;
  uint16x4_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int8x8_t *v32;
  unint64_t v33;
  int8x8_t *v34;
  int8x16_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _BYTE *v47;
  unint64_t v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  BOOL v58;
  BOOL v60;
  BOOL v62;
  BOOL v64;
  BOOL v66;
  BOOL v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int8x16_t v85;
  const char *v86;
  const char *v87;
  unsigned __int128 v88;
  unsigned __int128 v89;
  const char *v90;
  uint16x4_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  const char *v100;
  unsigned __int128 v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  const char *v105;
  int32x4_t v106;
  const char *v107;
  unsigned __int128 v108;
  int8x16_t v109;
  uint16x8_t v110;
  const char *v111;
  unsigned __int128 v112;
  int8x16_t v113;
  uint16x8_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  uint32x4_t v119;
  uint32x4_t v120;
  uint16x8_t v121;
  const char *v122;
  unsigned __int128 v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  uint16x8_t v131;
  int32x4_t v132;
  int32x4_t v133;
  const char *v134;
  uint32x4_t v135;
  uint32x4_t v136;
  int32x4_t v137;
  char *v138;
  uint64_t v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  BOOL v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _DWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  int8x16x2_t v159;
  int8x16x2_t v160;
  int8x16x4_t v161;
  int8x16x4_t v162;

  v6 = *a2;
  if (*a2 < a2[1])
  {
    v7 = 0;
    if ((v6 & 1) != 0)
      v8 = *(_DWORD *)(result + 200) == 0;
    else
      v8 = *(_DWORD *)(result + 200);
    v10 = *(_DWORD *)(result + 216);
    LODWORD(v9) = *(_DWORD *)(result + 220);
    if ((v6 & 1) != 0)
      v11 = v10;
    else
      v11 = v9;
    if ((v6 & 1) != 0)
      v9 = v9;
    else
      v9 = v10;
    v12 = *(_QWORD *)(result + 184);
    v13 = *(_QWORD *)(result + 88);
    v14 = (int)v13;
    v15 = *(_QWORD *)(result + 24) + v6 * (uint64_t)(int)v13;
    v16 = 2 * (int)v13;
    v17 = v16 | 1;
    v18 = ((v13 << 32) + 0x200000000) >> 32;
    v158 = (int)v16 + 2;
    v19 = ((uint64_t)&_mh_execute_header + (v13 << 32)) >> 32;
    v20 = (int)v12;
    v21 = v15 - 1;
    v153 = ((v13 << 32) + 0x300000000) >> 32;
    v146 = v19 + 1;
    v145 = v18 + 1;
    v22 = (int8x16_t)xmmword_1003BCAC0;
    v23 = (int8x16_t)xmmword_1003BCAB0;
    v24 = xmmword_1003BCAA0;
    v25 = (uint16x4_t)vdup_n_s16(0x2591u);
    v26 = (uint16x4_t)vdup_n_s16(0x4B22u);
    v144 = (int)v13 + 1;
    v27 = (_BYTE *)(*(_QWORD *)(result + 120) + (int)v12 + 1 + v6 * (int)v12);
    v149 = v15 - 1;
    v150 = (int)v12;
    v154 = v19;
    v155 = v18;
    v151 = result;
    v152 = a2;
    do
    {
      v29 = *(int *)(result + 208);
      if ((int)v29 <= 0)
      {
        v27[v29] = 0;
        *(v27 - 1) = 0;
      }
      else
      {
        v30 = *(int *)(result + 208);
        v31 = v15;
        v32 = (int8x8_t *)v27;
        if (v8)
        {
          v31 = v15 + 1;
          *v27 = ((*(unsigned __int8 *)(v15 + v18) + *(unsigned __int8 *)(v15 + v14)) * (_DWORD)v9
                + (*(unsigned __int8 *)(v15 + v17) + *(unsigned __int8 *)(v15 + 1)) * (_DWORD)v11
                + 19234 * *(unsigned __int8 *)(v15 + v19)
                + 0x4000) >> 15;
          v32 = (int8x8_t *)(v27 + 1);
          v30 = *(int *)(result + 208);
        }
        v33 = v31 + v30 - 18;
        LODWORD(v30) = v31;
        if (v33 >= v31)
        {
          v30 = v31;
          v34 = v32;
          do
          {
            v35 = *(int8x16_t *)(v30 + v14);
            v36 = (int16x8_t)vshrq_n_u16((uint16x8_t)v35, 8uLL);
            v37 = (int16x8_t)vsraq_n_u16((uint16x8_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 2uLL), (uint16x8_t)v35, 8uLL);
            v35.i16[0] = v35.u8[0];
            v35.i16[1] = BYTE2(*(_OWORD *)(v30 + v14));
            v35.i16[2] = BYTE4(*(_QWORD *)(v30 + v14));
            v35.i16[3] = BYTE6(*(_QWORD *)(v30 + v14));
            v35.i16[4] = *(_QWORD *)(v30 + v14 + 8);
            v35.i16[5] = BYTE2(*(_QWORD *)(v30 + v14 + 8));
            v35.i16[6] = BYTE12(*(_OWORD *)(v30 + v14));
            v35.i16[7] = BYTE14(*(_OWORD *)(v30 + v14));
            v38 = (int16x8_t)vextq_s8(v35, v35, 2uLL);
            v39.i16[0] = *(_OWORD *)v30;
            v39.i16[1] = BYTE2(*(_OWORD *)v30);
            v39.i16[2] = BYTE4(*(_QWORD *)v30);
            v39.i16[3] = BYTE6(*(_QWORD *)v30);
            v39.i16[4] = *(_QWORD *)(v30 + 8);
            v39.i16[5] = BYTE2(*(_QWORD *)(v30 + 8));
            v39.i16[6] = BYTE12(*(_OWORD *)v30);
            v39.i16[7] = BYTE14(*(_OWORD *)v30);
            v40.i16[0] = *(_OWORD *)(v30 + v16);
            v40.i16[1] = BYTE2(*(_OWORD *)(v30 + v16));
            v40.i16[2] = BYTE4(*(_QWORD *)(v30 + v16));
            v40.i16[3] = BYTE6(*(_QWORD *)(v30 + v16));
            v40.i16[4] = *(_QWORD *)(v30 + v16 + 8);
            v40.i16[5] = BYTE2(*(_QWORD *)(v30 + v16 + 8));
            v40.i16[6] = BYTE12(*(_OWORD *)(v30 + v16));
            v40.i16[7] = BYTE14(*(_OWORD *)(v30 + v16));
            v41 = vaddq_s16(v40, v39);
            v42 = (int16x8_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 2uLL);
            v43 = vdupq_n_s16(0x4B22u);
            v2.i32[0] = 2 * v11;
            v3.i32[0] = 4 * v11;
            v4.i32[0] = 2 * v9;
            v5.i32[0] = 4 * v9;
            *(int8x8_t *)v35.i8 = vrshrn_n_s16(vaddq_s16(vqdmulhq_s16(vaddq_s16((int16x8_t)vsraq_n_u16(vsraq_n_u16((uint16x8_t)v35, *(uint16x8_t *)v30, 8uLL), *(uint16x8_t *)(v30 + v16), 8uLL), v38), v43), vaddq_s16(vqdmulhq_lane_s16(vaddq_s16(v42, v41), *(int16x4_t *)v2.i8, 0), vqdmulhq_lane_s16(vshlq_n_s16(v36, 2uLL), v4, 0))), 2uLL);
            *(int8x8_t *)v41.i8 = vrshrn_n_s16(vaddq_s16(vaddq_s16(vqdmulhq_s16(vshlq_n_s16(v38, 2uLL), v43), vqdmulhq_lane_s16(v42, *(int16x4_t *)v3.i8, 0)), vqdmulhq_lane_s16(v37, *(int16x4_t *)v5.i8, 0)), 2uLL);
            *v34 = vzip1_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v41.i8);
            v34[1] = vzip2_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v41.i8);
            v30 += 14;
            v34 = (int8x8_t *)((char *)v34 + 14);
          }
          while (v30 <= v33);
        }
        v44 = v15 + v29;
        v45 = (int)v30 - (int)v31;
        v46 = (unsigned __int8 *)(v31 + v45);
        v47 = (char *)v32 + v45;
        v48 = v15 + v29 - 2;
        if (v31 + v45 <= v48)
        {
          v156 = v15 + v29;
          v157 = v8;
          v49 = 4 * v9;
          v50 = v46 + 2;
          v51 = v149 + v14 * v7 + v29;
          if ((unint64_t)(v46 + 2) > v51)
            v51 = (unint64_t)(v46 + 2);
          v52 = v51 + ~v31 - v45;
          if (v52 >= 0x20)
          {
            v53 = (v52 & 0xFFFFFFFFFFFFFFFELL) + v45;
            v54 = (unint64_t)v32 + v53 + 2;
            v55 = v31 + v53;
            v56 = v31 + v18 + v45;
            v58 = (unint64_t)v47 < v31 + v53 + v146 && v31 + v19 + v45 < v54;
            v148 = v58;
            v60 = (unint64_t)v47 < v55 + v16 + 2 && v31 + v16 + v45 < v54;
            v147 = v60;
            v62 = (unint64_t)v47 < v55 + v145 && v56 < v54;
            v64 = (unint64_t)v47 < v55 + v144 && v31 + v14 + v45 < v54;
            v66 = (unint64_t)v47 < v55 + 3 && (unint64_t)v46 < v54;
            v68 = (unint64_t)v47 < v55 + (int)v16 + 3 && v31 + v158 + v45 < v54;
            if (v31 + v153 + v45 >= v54 || (unint64_t)v47 >= v55 + v153 + 1)
            {
              v19 = v154;
              if (v148 || v147 || v62 || v64 || v66)
              {
                v18 = v155;
              }
              else
              {
                v18 = v155;
                if (!v68)
                {
                  v70 = (v52 >> 1) + 1;
                  v71 = v70 & 0xF;
                  if ((v70 & 0xF) == 0)
                    v71 = 16;
                  v72 = 2 * (v70 - v71);
                  v47 += v72;
                  v73 = vdupq_n_s32(v11);
                  v74 = vdupq_n_s32(v49);
                  v46 += v72;
                  v75 = vdupq_n_s32(v9);
                  v76 = (unsigned __int8 *)(v21 + v29);
                  if ((unint64_t)v50 > v21 + v29)
                    v76 = v50;
                  v77 = ~((unint64_t)&v76[~v31 - v45] >> 1) + v71;
                  v78 = v31 + v153;
                  v79 = v31 + v154;
                  v80 = v31 + v155;
                  v81 = v31 + v14;
                  v82 = v31 + v158;
                  v83 = v31 + v16;
                  v84 = v31 + 2;
                  v85 = (int8x16_t)v24;
                  do
                  {
                    v86 = (const char *)(v84 + v45);
                    v87 = (const char *)(v84 + v45 - 2);
                    v88 = (unsigned __int128)vld2q_s8(v87);
                    v89 = (unsigned __int128)vld2q_s8(v86);
                    v90 = (const char *)(v83 + v45);
                    v159 = vld2q_s8(v90);
                    v91 = v26;
                    v92 = vaddl_u8(*(uint8x8_t *)&v89, *(uint8x8_t *)&v88);
                    v93 = vaddl_high_u8((uint8x16_t)v89, (uint8x16_t)v88);
                    v94 = vmovl_u8(*(uint8x8_t *)v159.val[0].i8);
                    v95 = vmovl_high_u8((uint8x16_t)v159.val[0]);
                    v96 = (int32x4_t)vaddl_high_u16(v93, v95);
                    v97 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v93.i8, *(uint16x4_t *)v95.i8);
                    v98 = (int32x4_t)vaddl_high_u16(v92, v94);
                    v99 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v92.i8, *(uint16x4_t *)v94.i8);
                    v100 = (const char *)(v82 + v45);
                    v101 = (unsigned __int128)vld2q_s8(v100);
                    v102 = (int32x4_t)vqtbl1q_s8((int8x16_t)v101, v22);
                    v103 = (int32x4_t)vqtbl1q_s8((int8x16_t)v101, v23);
                    v104 = (int32x4_t)vqtbl1q_s8((int8x16_t)v101, v85);
                    v105 = (const char *)(v84 + v45 - 1);
                    v160 = vld2q_s8(v105);
                    v106 = (int32x4_t)vqtbl1q_s8((int8x16_t)v101, (int8x16_t)xmmword_1003BCA90);
                    v107 = (const char *)(v81 + v45);
                    v108 = (unsigned __int128)vld2q_s8(v107);
                    v109 = v22;
                    v110 = vaddl_u8(*(uint8x8_t *)&v108, *(uint8x8_t *)v160.val[0].i8);
                    v111 = (const char *)(v80 + v45);
                    v112 = (unsigned __int128)vld2q_s8(v111);
                    v113 = v23;
                    v114 = vaddl_high_u8((uint8x16_t)v108, (uint8x16_t)v160.val[0]);
                    v115 = (int32x4_t)vqtbl1q_s8((int8x16_t)v112, (int8x16_t)xmmword_1003BCA90);
                    v116 = (int32x4_t)vqtbl1q_s8((int8x16_t)v112, v85);
                    v117 = (int32x4_t)vqtbl1q_s8((int8x16_t)v112, v113);
                    v118 = (int32x4_t)vqtbl1q_s8((int8x16_t)v112, v109);
                    v119 = vaddw_high_u16((uint32x4_t)v118, v114);
                    v120 = vaddw_u16((uint32x4_t)v117, *(uint16x4_t *)v114.i8);
                    v121 = vmovl_high_u8((uint8x16_t)v159.val[1]);
                    v159.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v159.val[1].i8);
                    v159.val[1] = (int8x16_t)vaddw_u16(vaddw_u16((uint32x4_t)v115, *(uint16x4_t *)v110.i8), *(uint16x4_t *)v159.val[0].i8);
                    v159.val[0] = (int8x16_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v116, v110), (uint16x8_t)v159.val[0]);
                    v122 = (const char *)(v79 + v45);
                    v123 = (unsigned __int128)vld2q_s8(v122);
                    v124 = (int32x4_t)vaddw_u16(v120, *(uint16x4_t *)v121.i8);
                    v125 = (int32x4_t)vaddw_high_u16(v119, v121);
                    v126 = (int32x4_t)vqtbl1q_s8((int8x16_t)v123, v109);
                    v127 = (int32x4_t)vqtbl1q_s8((int8x16_t)v123, v113);
                    v128 = (int32x4_t)vqtbl1q_s8((int8x16_t)v123, v85);
                    v129 = (int32x4_t)vqtbl1q_s8((int8x16_t)v123, (int8x16_t)xmmword_1003BCA90);
                    v23 = v113;
                    v130 = (int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32(vaddq_s32(v99, v106), v73), (uint16x4_t)vmovn_s32((int32x4_t)v159.val[1]), v25);
                    v159.val[1] = (int8x16_t)vmulq_s32(vaddq_s32(v98, v104), v73);
                    v4 = vmovn_s32(v124);
                    v22 = v109;
                    v159.val[1] = (int8x16_t)vmlal_u16((uint32x4_t)v159.val[1], (uint16x4_t)vmovn_s32((int32x4_t)v159.val[0]), v25);
                    v2.i64[0] = 0x800000008000;
                    v2.i64[1] = 0x800000008000;
                    v162.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32(vaddq_s32(v96, v102), v73), (uint16x4_t)vmovn_s32(v125), v25), v74, v126), v2), 0x10uLL);
                    v162.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32(vaddq_s32(v97, v103), v73), (uint16x4_t)v4, v25), v74, v127), v2), 0x10uLL);
                    v3 = vmlaq_s32((int32x4_t)v159.val[1], v74, v128);
                    v162.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v3, v2), 0x10uLL);
                    v5 = vmlaq_s32(v130, v74, v129);
                    v162.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v5, v2), 0x10uLL);
                    v2.i32[1] = 471340048;
                    v162.val[2] = vqtbl4q_s8(v162, (int8x16_t)xmmword_1003BC960);
                    v131 = vmovl_high_u8((uint8x16_t)v160.val[1]);
                    v160.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v160.val[1].i8);
                    v132 = (int32x4_t)vaddw_u16((uint32x4_t)v106, *(uint16x4_t *)v160.val[0].i8);
                    v133 = (int32x4_t)vaddw_high_u16((uint32x4_t)v104, (uint16x8_t)v160.val[0]);
                    v134 = (const char *)(v78 + v45);
                    v160.val[0] = (int8x16_t)vld2q_s8(v134);
                    v135 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v160.val[0], v85), v128), v75), v133, v73);
                    v136 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v160.val[0], v23), v127), v75), (int32x4_t)vaddw_u16((uint32x4_t)v103, *(uint16x4_t *)v131.i8), v73);
                    v26 = v91;
                    v137.i64[0] = 0x400000004000;
                    v137.i64[1] = 0x400000004000;
                    v161.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v160.val[0], v22), v126), v75), (int32x4_t)vaddw_high_u16((uint32x4_t)v102, v131), v73), (uint16x4_t)vmovn_s32(v118), v26), v137), 0xFuLL);
                    v161.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(v136, (uint16x4_t)vmovn_s32(v117), v26), v137), 0xFuLL);
                    v161.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(v135, (uint16x4_t)vmovn_s32(v116), v26), v137), 0xFuLL);
                    v161.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v160.val[0], (int8x16_t)xmmword_1003BCA90), v129), v75), v132, v73), (uint16x4_t)vmovn_s32(v115), v26), v137), 0xFuLL);
                    v162.val[3] = vqtbl4q_s8(v161, (int8x16_t)xmmword_1003BC960);
                    v138 = (char *)v32 + v45;
                    vst2q_s8(v138, *(int8x16x2_t *)v162.val[2].i8);
                    v78 += 32;
                    v79 += 32;
                    v80 += 32;
                    v81 += 32;
                    v32 += 4;
                    v82 += 32;
                    v83 += 32;
                    v84 += 32;
                    v77 += 16;
                  }
                  while (v77);
                  v19 = v154;
                  v18 = v155;
                  v24 = (__int128)v85;
                }
              }
            }
            else
            {
              v19 = v154;
              v18 = v155;
            }
          }
          v139 = 0;
          v140 = &v46[v19];
          v141 = &v46[v18];
          v142 = &v46[v158];
          do
          {
            v143 = &v47[v139];
            *v143 = (9617 * (v46[v14 + v139] + v46[v139 + 1] + v141[v139] + v46[v16 + 1 + v139])
                   + (v46[v139 + 2] + v46[v139] + v46[v16 + v139] + v142[v139]) * (_DWORD)v11
                   + v49 * v140[v139]
                   + 0x8000) >> 16;
            v143[1] = ((v46[v153 + v139] + v140[v139]) * (_DWORD)v9
                     + (v142[v139] + v46[v139 + 2]) * (_DWORD)v11
                     + 19234 * v141[v139]
                     + 0x4000) >> 15;
            v139 += 2;
          }
          while ((unint64_t)&v46[v139] <= v48);
          v47 += v139;
          v46 += v139;
          result = v151;
          a2 = v152;
          v8 = v157;
          v20 = v150;
          v17 = v16 | 1;
          v19 = v154;
          v18 = v155;
          v44 = v156;
        }
        if ((unint64_t)v46 < v44)
          *v47 = (9617 * (v46[v14] + v46[1] + v46[v18] + v46[v17])
                + (v46[2] + *v46 + v46[v16] + v46[v158]) * (_DWORD)v11
                + 4 * v9 * v46[v19]
                + 0x8000) >> 16;
        v8 = v8 == 0;
        *(v27 - 1) = *v27;
        v27[*(int *)(result + 208)] = v27[*(int *)(result + 208) - 1];
        v28 = v11;
        v11 = v9;
        v9 = v28;
      }
      ++v6;
      v15 += v14;
      v27 += v20;
      ++v7;
      v21 += v14;
    }
    while (v6 < a2[1]);
  }
  return result;
}

uint64_t sub_1002E124C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100451D30;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_1002E136C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, _QWORD *a6, int a7, int a8)
{
  __int128 v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;

  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a1 = off_100451D70;
  *(_OWORD *)(a1 + 24) = v15;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v16)
  {
    v17 = (unsigned int *)(v16 + 20);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v19 = *(_QWORD **)(a2 + 72);
    v20 = *(_QWORD **)(a1 + 80);
    *v20 = *v19;
    v20[1] = v19[1];
  }
  v21 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v23 = *(_QWORD *)(a3 + 48);
  v22 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 160) = v22;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v21;
  if (v22)
  {
    v24 = (unsigned int *)(v22 + 20);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v26 = *(_QWORD **)(a3 + 72);
    v27 = *(_QWORD **)(a1 + 176);
    *v27 = *v26;
    v27[1] = v26[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_BYTE *)(a1 + 204) = a5;
  *(_QWORD *)(a1 + 208) = *a6;
  *(_DWORD *)(a1 + 216) = a7;
  *(_DWORD *)(a1 + 220) = a8;
  return a1;
}

void sub_1002E14D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100006BE4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1002E14F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1002E1508(uint64_t a1)
{
  sub_1002E1B90(a1);
  operator delete();
}

uint64_t sub_1002E152C(uint64_t result, int *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int32x4_t v28;
  uint16x8_t v29;
  unint64_t v30;
  __int16 v31;
  uint64_t v32;
  unint64_t v33;
  _WORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v48;
  BOOL v50;
  BOOL v52;
  BOOL v54;
  BOOL v56;
  BOOL v58;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  unint64_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  unint64_t v69;
  unint64_t v70;
  const __int16 *v71;
  unsigned __int128 v72;
  const __int16 *v73;
  const __int16 *v74;
  unsigned __int128 v75;
  const __int16 *v76;
  unsigned __int128 v77;
  const __int16 *v78;
  uint32x4_t v79;
  const __int16 *v80;
  unsigned __int128 v81;
  uint32x4_t v82;
  const __int16 *v83;
  unsigned __int128 v84;
  uint32x4_t v85;
  const __int16 *v86;
  unsigned __int128 v87;
  int32x4_t v88;
  int32x4_t v89;
  const __int16 *v90;
  __int16 *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _WORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int16x8x2_t v122;
  int16x8x2_t v123;

  v3 = *a2;
  v2 = a2[1];
  LODWORD(v4) = *(_DWORD *)(result + 216);
  v5 = *(_DWORD *)(result + 220);
  if ((v3 & 1) != 0)
    v6 = v5;
  else
    v6 = v4;
  if ((v3 & 1) != 0)
    v4 = v4;
  else
    v4 = v5;
  if ((v3 & 1) != 0)
    v7 = *(_DWORD *)(result + 200) == 0;
  else
    v7 = *(_DWORD *)(result + 200);
  v8 = v2 - v3;
  if (v2 > v3)
  {
    v9 = *(_QWORD *)(result + 184);
    v10 = (_WORD *)(*(_QWORD *)(result + 120)
                  + ((uint64_t)((uint64_t)&_mh_execute_header + ((unint64_t)v9 >> 1 << 32)) >> 31)
                  + 2 * (int)(v3 * ((unint64_t)v9 >> 1)));
    v11 = *(int *)(result + 208);
    v12 = (int)(v9 >> 1);
    if ((int)v11 <= 0)
    {
      do
      {
        v10[v11] = 0;
        *(v10 - 1) = 0;
        v10 += v12;
        --v8;
      }
      while (v8);
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(result + 88) >> 1;
      v15 = v14 << 32;
      v16 = (int)v14;
      v17 = v14;
      v18 = 2 * (int)v14;
      v19 = (int)v18 | 1;
      v20 = ((v14 << 32) + 0x200000000) >> 32;
      v21 = (uint64_t)&_mh_execute_header + (v14 << 32);
      v22 = v21 >> 32;
      v23 = *(_QWORD *)(result + 24);
      result = v15 + 0x300000000;
      v102 = v11;
      v24 = (int)v11 - 1;
      v25 = v23 + 2 * v3 * (uint64_t)v17;
      v26 = v11;
      v27 = v15 >> 31;
      v101 = (v15 + 0x300000000) >> 31;
      v100 = v21 >> 31;
      v99 = (v21 >> 31) + 2;
      v111 = v18;
      v120 = 2 * v18;
      v98 = 2 * v18 + 4;
      v97 = (v15 + 0x200000000) >> 31;
      v96 = (v15 >> 31) + 2;
      v107 = (int)v18 + 2;
      v119 = 2 * v107;
      v118 = 2 * ((v15 + 0x300000000) >> 32);
      v117 = 2 * (v21 >> 32);
      v116 = 2 * v20;
      v115 = 2 * v16;
      v28 = vdupq_n_s32(0x2591u);
      v29 = (uint16x8_t)vdupq_n_s16(0x4B22u);
      v104 = v15 >> 31;
      v105 = v23 + 2 * (v11 + v3 * (uint64_t)v17) - 3;
      v30 = v105;
      v114 = v2;
      v112 = v16;
      v113 = (int)(v9 >> 1);
      v109 = (v15 + 0x200000000) >> 32;
      v110 = v19;
      v108 = v21 >> 32;
      v106 = v24;
      do
      {
        v32 = v4;
        v33 = v25;
        v34 = v10;
        if (v7)
        {
          v33 = v25 + 2;
          *v10 = ((*(unsigned __int16 *)(v25 + 2 * v20) + *(unsigned __int16 *)(v25 + 2 * v16)) * (_DWORD)v6
                + (*(unsigned __int16 *)(v25 + 2 * v19) + *(unsigned __int16 *)(v25 + 2)) * (_DWORD)v32
                + 19234 * *(unsigned __int16 *)(v25 + 2 * v22)
                + 0x4000) >> 15;
          v34 = v10 + 1;
        }
        v35 = v25 + 2 * v26;
        v36 = v35 - 4;
        if (v33 <= v35 - 4)
        {
          v121 = v25 + 2 * v26;
          v37 = v105 + v27 * v13;
          v38 = 4 * v6;
          if (v37 <= v33 + 4)
            v37 = v33 + 4;
          v39 = v37 + ~v33;
          if (v39 >= 0x20)
          {
            v40 = (unint64_t)v34 + (v39 & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v41 = v33 + (v39 & 0xFFFFFFFFFFFFFFFCLL);
            v103 = v41 + v101 + 2;
            v42 = v41 + v98;
            v43 = v41 + v97 + 2;
            v44 = v41 + v96;
            v45 = v41 + 6;
            v46 = v41 + ((2 * v107) | 2);
            v48 = (unint64_t)v34 < v41 + v99 && v33 + v100 < v40;
            v50 = (unint64_t)v34 < v42 && v33 + v120 < v40;
            v52 = (unint64_t)v34 < v43 && v33 + v97 < v40;
            v54 = (unint64_t)v34 < v44 && v33 + v27 < v40;
            v56 = (unint64_t)v34 < v45 && v33 < v40;
            v58 = (unint64_t)v34 < v46 && v33 + v119 < v40;
            if (v33 + v101 >= v40 || (unint64_t)v34 >= v103)
            {
              v26 = v102;
              if (!v48 && !v50 && !v52 && !v54 && !v56 && !v58)
              {
                v60 = 0;
                v61 = (v39 >> 2) + 1;
                v62 = v61 & 7;
                if ((v61 & 7) == 0)
                  v62 = 8;
                v63 = 2 * (v61 - v62);
                v64 = &v34[v63];
                v65 = v33 + v63 * 2;
                v66 = vdupq_n_s32(v32);
                v67 = vdupq_n_s32(v38);
                v68 = vdupq_n_s32(v6);
                if (v30 <= v33 + 4)
                  v69 = v33 + 4;
                else
                  v69 = v30;
                v70 = ~((~v33 + v69) >> 2) + v62;
                do
                {
                  v71 = (const __int16 *)(v33 + v60);
                  v72 = (unsigned __int128)vld2q_s16(v71);
                  v73 = (const __int16 *)(v33 + v120 + v60);
                  v122 = vld2q_s16(v73);
                  v74 = (const __int16 *)(v33 + v119 + v60);
                  v75 = (unsigned __int128)vld2q_s16(v74);
                  v76 = (const __int16 *)(v33 + v60 + 4);
                  v77 = (unsigned __int128)vld2q_s16(v76);
                  v78 = (const __int16 *)(v33 + v60 + 2);
                  v123 = vld2q_s16(v78);
                  v79 = vaddl_u16(*(uint16x4_t *)&v77, *(uint16x4_t *)&v72);
                  v80 = (const __int16 *)(v33 + v115 + v60);
                  v81 = (unsigned __int128)vld2q_s16(v80);
                  v82 = vaddl_high_u16((uint16x8_t)v77, (uint16x8_t)v72);
                  v83 = (const __int16 *)(v33 + v116 + v60);
                  v84 = (unsigned __int128)vld2q_s16(v83);
                  v85 = vaddw_u16(v79, *(uint16x4_t *)v122.val[0].i8);
                  v86 = (const __int16 *)(v33 + v117 + v60);
                  v87 = (unsigned __int128)vld2q_s16(v86);
                  v88 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(v82, (uint16x8_t)v122.val[0]), (uint16x8_t)v75);
                  v122.val[0] = (int16x8_t)vmulq_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddl_high_u16((uint16x8_t)v81, (uint16x8_t)v123.val[0]), (uint16x8_t)v84), (uint16x8_t)v122.val[1]), v28);
                  v89 = vmlaq_s32(vmulq_s32((int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)&v81, *(uint16x4_t *)v123.val[0].i8), *(uint16x4_t *)&v84), *(uint16x4_t *)v122.val[1].i8), v28), (int32x4_t)vaddw_u16(v85, *(uint16x4_t *)&v75), v66);
                  v90 = (const __int16 *)(v33 + v118 + v60);
                  v122.val[1] = (int16x8_t)vld2q_s16(v90);
                  v123.val[0] = vraddhn_high_s32(vraddhn_s32(vmlaq_s32(v89, v67, (int32x4_t)vmovl_u16(*(uint16x4_t *)&v87)), (int32x4_t)0), vmlaq_s32(vmlaq_s32((int32x4_t)v122.val[0], v88, v66), v67, (int32x4_t)vmovl_high_u16((uint16x8_t)v87)), (int32x4_t)0);
                  v123.val[1] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v122.val[1].i8, *(uint16x4_t *)&v87), v68), (int32x4_t)vaddl_u16(*(uint16x4_t *)&v75, *(uint16x4_t *)v123.val[1].i8), v66), *(uint16x4_t *)&v84, *(uint16x4_t *)v29.i8), 0xFuLL), (int32x4_t)vmlal_high_u16((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)vaddl_high_u16(
                                                                            (uint16x8_t)v122.val[1],
                                                                            (uint16x8_t)v87),
                                                               v68),
                                                             (int32x4_t)vaddl_high_u16((uint16x8_t)v75, (uint16x8_t)v123.val[1]), v66), (uint16x8_t)v84, v29), 0xFuLL);
                  v91 = &v34[v60 / 2];
                  vst2q_s16(v91, v123);
                  v60 += 32;
                  v70 += 8;
                }
                while (v70);
                v34 = v64;
                v33 = v65;
              }
            }
            else
            {
              v26 = v102;
            }
          }
          v92 = 0;
          result = v33 + v117;
          v93 = v33 + v116;
          v94 = v33 + v119;
          do
          {
            v95 = &v34[v92 / 2];
            *v95 = (9617
                  * (*(unsigned __int16 *)(v33 + v115 + v92)
                   + *(unsigned __int16 *)(v33 + v92 + 2)
                   + *(unsigned __int16 *)(v93 + v92)
                   + *(unsigned __int16 *)(v33 + v120 + v92 + 2))
                  + (*(unsigned __int16 *)(v33 + v92 + 4)
                   + *(unsigned __int16 *)(v33 + v92)
                   + *(unsigned __int16 *)(v33 + v120 + v92)
                   + *(unsigned __int16 *)(v94 + v92))
                  * (_DWORD)v32
                  + v38 * *(unsigned __int16 *)(result + v92)
                  + 0x8000) >> 16;
            v95[1] = ((*(unsigned __int16 *)(v33 + v118 + v92) + *(unsigned __int16 *)(result + v92)) * (_DWORD)v6
                    + (*(unsigned __int16 *)(v94 + v92) + *(unsigned __int16 *)(v33 + v92 + 4)) * (_DWORD)v32
                    + 19234 * *(unsigned __int16 *)(v93 + v92)
                    + 0x4000) >> 15;
            v92 += 4;
          }
          while (v33 + v92 <= v36);
          v34 = (_WORD *)((char *)v34 + v92);
          v33 += v92;
          v2 = v114;
          v16 = v112;
          v12 = v113;
          v20 = v109;
          v19 = v110;
          v22 = v108;
          v24 = v106;
          v27 = v104;
          v35 = v121;
        }
        if (v33 < v35)
          *v34 = (9617
                * (*(unsigned __int16 *)(v33 + 2 * v16)
                 + *(unsigned __int16 *)(v33 + 2)
                 + *(unsigned __int16 *)(v33 + 2 * v20)
                 + *(unsigned __int16 *)(v33 + 2 * v19))
                + (*(unsigned __int16 *)(v33 + 4)
                 + *(unsigned __int16 *)v33
                 + *(unsigned __int16 *)(v33 + 2 * v111)
                 + *(unsigned __int16 *)(v33 + 2 * v107))
                * (_DWORD)v32
                + 4 * v6 * *(unsigned __int16 *)(v33 + 2 * v22)
                + 0x8000) >> 16;
        v7 = v7 == 0;
        v31 = v10[v24];
        v25 += 2 * v16;
        *(v10 - 1) = *v10;
        v10[v26] = v31;
        v10 += v12;
        ++v3;
        ++v13;
        v30 += v27;
        v4 = v6;
        v6 = v32;
      }
      while (v3 != v2);
    }
  }
  return result;
}

uint64_t sub_1002E1B90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100451D70;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_1002E1CB0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, _QWORD *a6)
{
  __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;

  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a1 = off_100451DB0;
  *(_OWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 20);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v15 = *(_QWORD **)(a2 + 72);
    v16 = *(_QWORD **)(a1 + 80);
    *v16 = *v15;
    v16[1] = v15[1];
  }
  v17 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v19 = *(_QWORD *)(a3 + 48);
  v18 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v19;
  *(_QWORD *)(a1 + 160) = v18;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v17;
  if (v18)
  {
    v20 = (unsigned int *)(v18 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v22 = *(_QWORD **)(a3 + 72);
    v23 = *(_QWORD **)(a1 + 176);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(_QWORD *)(a1 + 208) = *a6;
  return a1;
}

void sub_1002E1E04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100006BE4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1002E1E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1002E1E34(uint64_t a1)
{
  sub_1002E25B4(a1);
  operator delete();
}

uint64_t sub_1002E1E58(uint64_t result, int *a2)
{
  int v2;
  int v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  unsigned __int16 *v37;
  _WORD *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned __int16 *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned __int16 *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  _WORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v2 = *a2;
  v3 = a2[1];
  v4 = v3 - *a2;
  if (v3 > *a2)
  {
    v5 = *(unsigned int *)(result + 104);
    v6 = ((v5 >> 3) & 0x1FF) + 1;
    v7 = *(_QWORD *)(result + 184) >> 1;
    v8 = *(_QWORD *)(result + 120);
    v9 = v7 + v7 * v2;
    v10 = *(int *)(result + 208);
    v64 = 3 * v10 - 1;
    v63 = 3 * (int)v10;
    v61 = 3 * v10;
    v62 = 3 * (int)v10 + 1;
    v72 = (int)v10 * (int)v6 - 1;
    v73 = v10;
    v71 = (int)v10 * (int)v6;
    v69 = (int)v10 * (int)v6 + 1;
    v70 = (int)v10 * (int)v6 + 2;
    v74 = (int)v7;
    if ((int)v10 >= 1)
    {
      v11 = (_WORD *)(v8 + 2 * v9 + 2 * v6 + 2);
      v12 = *(_QWORD *)(result + 88);
      v13 = (unint64_t)v12 >> 1;
      v14 = (int)(v12 >> 1);
      v15 = 2 * (int)v14;
      v75 = v15 | 1;
      v16 = (uint64_t)((v13 << 32) + 0x200000000) >> 32;
      v17 = (uint64_t)((uint64_t)&_mh_execute_header + (v13 << 32)) >> 32;
      v18 = v15 + 2;
      v67 = (int)v10 * (int)v6 - 5;
      v68 = v10 * v6;
      if ((v2 & 1) != 0)
        v19 = -*(_DWORD *)(result + 204);
      else
        v19 = *(_DWORD *)(result + 204);
      if ((v2 & 1) != 0)
        v20 = *(_DWORD *)(result + 200) == 0;
      else
        v20 = *(_DWORD *)(result + 200);
      v21 = *(_QWORD *)(result + 24);
      v66 = v18;
      result = 2 * v18;
      v22 = v16;
      v23 = 2 * v14;
      v24 = v17;
      v25 = (unsigned __int16 *)(v21 + 2 * v2 * (int)v13);
      v26 = 4 * ((v5 >> 3) & 0x1FF) + 4;
      v27 = (uint64_t)((v13 << 32) + 0x300000000) >> 32;
      v65 = a2[1];
      while (1)
      {
        v37 = v25;
        v38 = v11;
        if (v20)
        {
          v37 = v25 + 1;
          v39 = v25[v14] + v25[v16];
          v40 = 2 * v19;
          v11[v40 / 0xFFFFFFFFFFFFFFFELL] = (v25[1] + v25[v75] + 1) >> 1;
          *v11 = v25[v17];
          v11[(unint64_t)v40 / 2] = (v39 + 1) >> 1;
          if (((v5 >> 3) & 0x1FF) == 3)
            v11[2] = -1;
          v38 = &v11[v6];
        }
        v41 = (unint64_t)&v25[v73];
        v42 = v41 - 4;
        if (((v5 >> 3) & 0x1FF) == 2)
        {
          if (v19 <= 0)
          {
            if ((unint64_t)v37 <= v42)
            {
              v43 = v37 + 1;
              do
              {
                v50 = v43 + 1;
                v51 = (*v43 + v43[v14 - 1] + v43[v22 - 1] + v43[2 * v14] + 2) >> 2;
                v38[1] = (*(v43 - 1) + v43[1] + v43[v23 - 1] + v43[(unint64_t)result / 2 - 1] + 2) >> 2;
                *v38 = v51;
                *(v38 - 1) = v43[v24 - 1];
                v52 = (v43[v24 - 1] + v43[v27 - 1] + 1) >> 1;
                v38[4] = (v43[1] + v43[(unint64_t)result / 2 - 1] + 1) >> 1;
                v38[3] = v43[v22 - 1];
                v38[2] = v52;
                v43 += 2;
                v38 = (_WORD *)((char *)v38 + v26);
              }
              while ((unint64_t)v50 <= v42);
              goto LABEL_35;
            }
          }
          else if ((unint64_t)v37 <= v42)
          {
            v43 = v37 + 1;
            do
            {
              v44 = v43 + 1;
              v45 = (*v43 + v43[v14 - 1] + v43[v22 - 1] + v43[2 * v14] + 2) >> 2;
              *(v38 - 1) = (*(v43 - 1) + v43[1] + v43[v23 - 1] + v43[(unint64_t)result / 2 - 1] + 2) >> 2;
              *v38 = v45;
              v38[1] = v43[v24 - 1];
              v46 = (v43[v24 - 1] + v43[v27 - 1] + 1) >> 1;
              v38[2] = (v43[1] + v43[(unint64_t)result / 2 - 1] + 1) >> 1;
              v38[3] = v43[v22 - 1];
              v38[4] = v46;
              v43 += 2;
              v38 = (_WORD *)((char *)v38 + v26);
            }
            while ((unint64_t)v44 <= v42);
LABEL_35:
            v37 = v43 - 1;
            v3 = v65;
          }
        }
        else if (v19 <= 0)
        {
          if ((unint64_t)v37 <= v42)
          {
            v43 = v37 + 1;
            do
            {
              v53 = v43 + 1;
              v54 = (*(v43 - 1) + v43[1] + v43[v23 - 1] + v43[(unint64_t)result / 2 - 1] + 2) >> 2;
              v55 = (*v43 + v43[v14 - 1] + v43[v22 - 1] + v43[2 * v14] + 2) >> 2;
              *(v38 - 1) = v43[v24 - 1];
              *v38 = v55;
              v38[1] = v54;
              v38[2] = -1;
              v56 = (v43[1] + v43[(unint64_t)result / 2 - 1] + 1) >> 1;
              v38[3] = (v43[v24 - 1] + v43[v27 - 1] + 1) >> 1;
              v38[4] = v43[v22 - 1];
              v38[5] = v56;
              v38[6] = -1;
              v43 += 2;
              v38 = (_WORD *)((char *)v38 + v26);
            }
            while ((unint64_t)v53 <= v42);
            goto LABEL_35;
          }
        }
        else if ((unint64_t)v37 <= v42)
        {
          v43 = v37 + 1;
          do
          {
            v47 = v43 + 1;
            v48 = (*v43 + v43[v14 - 1] + v43[v22 - 1] + v43[2 * v14] + 2) >> 2;
            *(v38 - 1) = (*(v43 - 1) + v43[1] + v43[v23 - 1] + v43[(unint64_t)result / 2 - 1] + 2) >> 2;
            *v38 = v48;
            v38[1] = v43[v24 - 1];
            v38[2] = -1;
            v49 = (v43[v24 - 1] + v43[v27 - 1] + 1) >> 1;
            v38[3] = (v43[1] + v43[(unint64_t)result / 2 - 1] + 1) >> 1;
            v38[4] = v43[v22 - 1];
            v38[5] = v49;
            v38[6] = -1;
            v43 += 2;
            v38 = (_WORD *)((char *)v38 + v26);
          }
          while ((unint64_t)v47 <= v42);
          goto LABEL_35;
        }
        if ((unint64_t)v37 < v41
          && (v57 = (v37[1] + v37[v14] + v37[v16] + v37[v75] + 2) >> 2,
              v58 = 2 * v19,
              v38[v58 / 0xFFFFFFFFFFFFFFFELL] = (*v37 + v37[2] + v37[2 * v14] + v37[v66] + 2) >> 2,
              *v38 = v57,
              v38[(unint64_t)v58 / 2] = v37[v17],
              ((v5 >> 3) & 0x1FF) == 3))
        {
          v38[2] = -1;
        }
        else if (((v5 >> 3) & 0x1FF) == 2)
        {
          v31 = -2;
          v29 = -3;
          v28 = v11;
          v32 = 1;
          *(v11 - 4) = *(v11 - 1);
          v34 = v62;
          v33 = v61;
          v35 = v63;
          v30 = v64;
          goto LABEL_12;
        }
        *(v11 - 5) = *(v11 - 1);
        v28 = v11 + 2;
        v29 = -2;
        v30 = v71;
        v31 = v72;
        *((_DWORD *)v11 - 2) = *(_DWORD *)v11;
        v32 = v67;
        v33 = v68;
        v35 = v69;
        v34 = v70;
LABEL_12:
        v11[v29] = *v28;
        v11[v31] = v11[v32];
        v36 = &v11[v33];
        v11[v30] = *(v36 - 4);
        v11[v35] = *(v36 - 3);
        v11[v34] = *(v36 - 2);
        v20 = v20 == 0;
        v19 = -v19;
        v25 += v14;
        v11 += v74;
        if (++v2 == v3)
          return result;
      }
    }
    if (((*(_DWORD *)(result + 104) >> 3) & 0x1FF) == 2)
    {
      v59 = 2 * v9 + 2 * ((v5 >> 3) & 0x1FF) + v8 - 4;
      do
      {
        *(_WORD *)(v59 + 2 * v62 + 4 + 4) = 0;
        *(_WORD *)(v59 + 2 * v63 + 4 + 4) = 0;
        *(_WORD *)(v59 + 2 * v64 + 4 + 4) = 0;
        *(_DWORD *)(v59 + 2) = 0;
        *(_WORD *)v59 = 0;
        v59 += 2 * (int)v7;
        --v4;
      }
      while (v4);
    }
    else
    {
      v60 = (_WORD *)(v8 + 2 * v9 + 2 * ((v5 >> 3) & 0x1FF));
      do
      {
        v60[v69 + 2] = 0;
        v60[v71 + 2] = 0;
        v60[v72 + 2] = 0;
        *(v60 - 1) = 0;
        *(_DWORD *)(v60 - 3) = 0;
        v60[v70 + 2] = -1;
        *v60 = -1;
        v60 += (int)v7;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t sub_1002E25B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100451DB0;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_1002E26D4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, int a6)
{
  __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;

  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a1 = off_100451DF0;
  *(_OWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 20);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v15 = *(_QWORD **)(a2 + 72);
    v16 = *(_QWORD **)(a1 + 80);
    *v16 = *v15;
    v16[1] = v15[1];
  }
  v17 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v19 = *(_QWORD *)(a3 + 48);
  v18 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v19;
  *(_QWORD *)(a1 + 160) = v18;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v17;
  if (v18)
  {
    v20 = (unsigned int *)(v18 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v22 = *(_QWORD **)(a3 + 72);
    v23 = *(_QWORD **)(a1 + 176);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  *(_QWORD *)(a1 + 200) = *a4;
  *(_DWORD *)(a1 + 208) = a5;
  *(_DWORD *)(a1 + 212) = a6;
  return a1;
}

void sub_1002E2828(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100006BE4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1002E2844(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1002E2858(uint64_t a1)
{
  sub_1002E2DDC(a1);
  operator delete();
}

uint64_t sub_1002E287C(uint64_t result, _DWORD *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  __int128 v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  _OWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _DWORD *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v2 = *a2;
  if (*a2 < a2[1])
  {
    v3 = *(unsigned int *)(result + 104);
    v4 = (v3 >> 3) & 0x1FF;
    v5 = v4 + 1;
    v6 = *a2 & 1 ^ *(_DWORD *)(result + 208);
    v7 = *a2 & 1 ^ *(_DWORD *)(result + 212);
    v8 = *(_QWORD *)(result + 184);
    v9 = v2 + 1;
    v10 = (_BYTE *)(*(_QWORD *)(result + 120) + v8 * v9 + v4 + 1);
    v11 = (_BYTE *)(*(_QWORD *)(result + 24) + **(_QWORD **)(result + 80) * v9 + 1);
    v12 = *(_QWORD *)(result + 88) / ((0x88442211uLL >> (4 * (*(_DWORD *)(result + 8) & 7u))) & 0xF);
    v13 = (2 * (v4 + 1));
    v14 = -(int)v12;
    v15 = ~(_DWORD)v12;
    v85 = (uint64_t)((v12 << 32) - 0x100000000) >> 32;
    v86 = (uint64_t)((uint64_t)&_mh_execute_header - (v12 << 32)) >> 32;
    v84 = (uint64_t)((uint64_t)&_mh_execute_header + (v12 << 32)) >> 32;
    v16 = v8 / ((0x88442211uLL >> (4 * (v3 & 7u))) & 0xF);
    v17 = v13 - v16;
    LODWORD(v16) = v4 + 1 - v16;
    v18 = (int)v17;
    v19 = (int)v16;
    v20 = ~(unint64_t)v4;
    v23 = v16 < 0x20 || v4 < 0x1F || v17 < 0x20;
    v82 = v23;
    v78 = v5 & 0x18;
    v79 = v4 + 1;
    v24 = -(uint64_t)v4;
    v83 = v5 & 0x3E0;
    v76 = (v5 & 0x3F8) - v83;
    v77 = v5 & 0x3F8;
    v80 = v4;
    v81 = a2;
    do
    {
      v25 = 2 * v6;
      if (v7)
      {
        v10[v25] = (v11[(int)v12] + v11[v14]) >> 1;
        v10[1] = *v11;
        v26 = *++v11;
        v10[-v25 + 2] = (v26 + *(v11 - 2)) >> 1;
        v10 += v5;
        v27 = 2;
        v28 = *(_DWORD *)(result + 200);
        v29 = v28 > 2;
        if (v6)
          goto LABEL_15;
      }
      else
      {
        v27 = 1;
        v28 = *(_DWORD *)(result + 200);
        v29 = v28 > 1;
        if (v6)
        {
LABEL_15:
          if (v29)
          {
            v30 = 0;
            v31 = &v11[v84];
            v32 = &v11[v86];
            v33 = v11;
            do
            {
              v34 = &v11[v30];
              *v10 = v11[v30];
              v35 = v11[v30 - 1];
              v36 = v11[v30 + 1];
              v37 = v35 - v36;
              if (v35 - v36 < 0)
                v37 = v36 - v35;
              v38 = v33[(int)v12];
              v39 = v11[v14 + v30];
              v40 = v38 - v39;
              if (v38 - v39 < 0)
                v40 = v39 - v38;
              v41 = v39 + v38;
              v42 = v36 + v35;
              if (v37 > v40)
                v42 = v41;
              v10[1] = (v42 + 1) >> 1;
              v10[2] = (v32[v30]
                      + v33[v15]
                      + v11[v85 + v30]
                      + v31[v30]) >> 2;
              v10[3] = (*v34 + v34[2] + 1) >> 1;
              v10[4] = v34[1];
              v33 += 2;
              v10[5] = (v32[v30] + v31[v30] + 1) >> 1;
              v10 += v13;
              v28 = *(_DWORD *)(result + 200);
              v30 += 2;
            }
            while (v27 + (int)v30 < v28);
LABEL_37:
            v27 += v30;
            v11 += v30;
            LODWORD(v4) = v80;
            a2 = v81;
            v5 = v79;
            goto LABEL_38;
          }
          goto LABEL_38;
        }
      }
      if (v29)
      {
        v30 = 0;
        v43 = &v11[v84];
        v44 = &v11[v86];
        v45 = v11;
        do
        {
          v46 = &v11[v30];
          *v10 = (v45[v15]
                + v44[v30]
                + v11[v85 + v30]
                + v43[v30]
                + 2) >> 2;
          v47 = v11[v30 - 1];
          v48 = v11[v30 + 1];
          v49 = v47 - v48;
          v50 = v45[(int)v12];
          if (v47 - v48 < 0)
            v49 = v48 - v47;
          v51 = v11[v14 + v30];
          v52 = v50 - v51;
          if (v50 - v51 < 0)
            v52 = v51 - v50;
          v53 = v51 + v50;
          v54 = v48 + v47;
          if (v49 > v52)
            v54 = v53;
          v10[1] = (v54 + 1) >> 1;
          v10[2] = *v46;
          v10[3] = (v44[v30] + v43[v30] + 1) >> 1;
          v10[4] = v46[1];
          v45 += 2;
          v10[5] = (*v46 + v46[2] + 1) >> 1;
          v10 += v13;
          v28 = *(_DWORD *)(result + 200);
          v30 += 2;
        }
        while (v27 + (int)v30 < v28);
        goto LABEL_37;
      }
LABEL_38:
      if (v27 <= v28)
      {
        v10[v25] = (v11[v15]
                  + v11[v86]
                  + v11[v85]
                  + v11[v84]
                  + 2) >> 2;
        v55 = *(v11 - 1);
        v56 = v11[1];
        v57 = v55 - v56;
        if (v55 - v56 < 0)
          v57 = v56 - v55;
        v58 = v11[(int)v12];
        v59 = v11[v14];
        v60 = v58 - v59;
        if (v58 - v59 < 0)
          v60 = v59 - v58;
        v61 = v59 + v58;
        v62 = v56 + v55;
        if (v57 > v60)
          v62 = v61;
        v10[1] = (v62 + 1) >> 1;
        v10[-v25 + 2] = *v11;
        v10 += v5;
        ++v11;
      }
      if (v4 >= 7)
      {
        v63 = 0;
        v64 = v82;
        if (v19 - v20 < 0x20)
          v64 = 1;
        if ((v64 & 1) == 0 && (unint64_t)(v19 - v18) >= 0x20)
        {
          v65 = 0;
          v66 = v83;
          v67 = v10;
          do
          {
            v68 = *(_OWORD *)((char *)v67 + v24 + 15);
            *v67 = *(_OWORD *)((char *)v67 + v24 - 1);
            v67[1] = v68;
            v67 += 2;
            v69 = (__int128 *)&v10[v65 + v18];
            v70 = *v69;
            v71 = v69[1];
            v72 = &v10[v65 + v19];
            *v72 = v70;
            v72[1] = v71;
            v65 += 32;
            v66 -= 32;
          }
          while (v66);
          if (v83 == v5)
            goto LABEL_12;
          v63 = v83;
          if (v78)
          {
            v73 = v83;
            v74 = &v10[v83];
            v75 = v76;
            do
            {
              *v74 = *(_QWORD *)((char *)v74 + v20);
              ++v74;
              *(_QWORD *)&v10[v73 + v19] = *(_QWORD *)&v10[v73 + v18];
              v73 += 8;
              v75 -= 8;
            }
            while (v75);
            v63 = v77;
            if (v77 == v5)
              goto LABEL_12;
          }
        }
      }
      else
      {
        v63 = 0;
      }
      do
      {
        v10[v63] = v10[v24 - 1 + v63];
        v10[v63 + v19] = v10[v63 + v18];
        ++v63;
      }
      while (v24 + v63 != 1);
LABEL_12:
      v7 ^= 1u;
      v6 ^= 1u;
      v11 += 2;
      v10 += v13;
      ++v2;
    }
    while (v2 < a2[1]);
  }
  return result;
}

uint64_t sub_1002E2DDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100451DF0;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_1002E2EFC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, int a6)
{
  __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;

  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a1 = off_100451E30;
  *(_OWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 20);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v15 = *(_QWORD **)(a2 + 72);
    v16 = *(_QWORD **)(a1 + 80);
    *v16 = *v15;
    v16[1] = v15[1];
  }
  v17 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v19 = *(_QWORD *)(a3 + 48);
  v18 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v19;
  *(_QWORD *)(a1 + 160) = v18;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v17;
  if (v18)
  {
    v20 = (unsigned int *)(v18 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v22 = *(_QWORD **)(a3 + 72);
    v23 = *(_QWORD **)(a1 + 176);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  *(_QWORD *)(a1 + 200) = *a4;
  *(_DWORD *)(a1 + 208) = a5;
  *(_DWORD *)(a1 + 212) = a6;
  return a1;
}

void sub_1002E3050(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100006BE4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1002E306C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1002E3080(uint64_t a1)
{
  sub_1002E35DC(a1);
  operator delete();
}

uint64_t sub_1002E30A4(uint64_t result, int *a2)
{
  int v2;
  unint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  _WORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  _WORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 v64;
  __int128 *v65;
  __int128 v66;
  __int128 v67;
  _OWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;

  v2 = *a2;
  v77 = a2[1];
  if (*a2 < v77)
  {
    v3 = *(unsigned int *)(result + 104);
    v76 = (v3 >> 3) & 0x1FF;
    v4 = *a2 & 1 ^ *(_DWORD *)(result + 208);
    v5 = *a2 & 1 ^ *(_DWORD *)(result + 212);
    v6 = *(_QWORD *)(result + 184);
    v7 = v2 + 1;
    v8 = (_WORD *)(*(_QWORD *)(result + 120) + v6 * v7 + 2 * (v76 + 1));
    v9 = *(_QWORD *)(result + 88) / ((0x88442211uLL >> (4 * (*(_DWORD *)(result + 8) & 7u))) & 0xF);
    v10 = ~(_DWORD)v9;
    v11 = v6 / ((0x88442211uLL >> (4 * (v3 & 7u))) & 0xF);
    v75 = (2 * (v76 + 1));
    v12 = (int)v75 - (int)v11;
    v13 = (int)v76 + 1 - (int)v11;
    v74 = 2 * v13;
    v14 = v76 + 1;
    v15 = 2 * ((*(_DWORD *)(result + 104) >> 3) & 0x1FFu);
    v73 = 2 * v12;
    v16 = -(int)v9;
    v17 = (_WORD *)(*(_QWORD *)(result + 24) + **(_QWORD **)(result + 80) * v7 + 2);
    v70 = (uint64_t)((uint64_t)&_mh_execute_header + (v9 << 32)) >> 32;
    v18 = v70;
    v71 = (uint64_t)((v9 << 32) - 0x100000000) >> 32;
    v72 = (uint64_t)((uint64_t)&_mh_execute_header - (v9 << 32)) >> 32;
    v19 = v71;
    v20 = v72;
    result = *(unsigned int *)(result + 200);
    v21 = 4 * v76 + 4;
    v22 = v16;
    v69 = v15;
    v23 = v15 ^ 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v24 = 2 * v4;
      if (v5)
      {
        v8[v24] = ((unsigned __int16)v17[(int)v9] + (unsigned __int16)v17[v16]) >> 1;
        v8[1] = *v17;
        v25 = (unsigned __int16)v17[1];
        ++v17;
        v26 = 2;
        v8[2 - v24] = (v25 + (unsigned __int16)*(v17 - 2)) >> 1;
        v8 += v14;
        v27 = (int)result > 2;
        if (v4)
          goto LABEL_6;
      }
      else
      {
        v26 = 1;
        v27 = (int)result > 1;
        if (v4)
        {
LABEL_6:
          if (v27)
          {
            v28 = v17 - 1;
            v29 = v17 - 1;
            do
            {
              *v8 = v28[1];
              v31 = v29[2];
              v29 += 2;
              v30 = v31;
              v32 = *v28;
              v33 = v32 - v31;
              if (v32 - v31 < 0)
                v33 = -v33;
              v34 = (unsigned __int16)v17[(int)v9];
              v35 = v28[v22 + 1];
              v36 = v34 - v35;
              if (v34 - v35 < 0)
                v36 = v35 - v34;
              v37 = v35 + v34;
              v38 = v30 + v32;
              if (v33 <= v36)
                v37 = v38;
              v8[1] = (v37 + 1) >> 1;
              v8[2] = (v28[v20 + 1] + (unsigned __int16)v17[v10] + v28[v19 + 1] + v28[v18 + 1]) >> 2;
              v17 += 2;
              v8[3] = (v28[1] + v28[3] + 1) >> 1;
              v8[4] = *v29;
              v8[5] = (v28[v20 + 1] + v28[v18 + 1] + 1) >> 1;
              v26 += 2;
              v8 = (_WORD *)((char *)v8 + v21);
              v28 = v29;
            }
            while (v26 < (int)result);
            v17 = v29 + 1;
LABEL_29:
            v16 = -(int)v9;
            v14 = v76 + 1;
            goto LABEL_30;
          }
          goto LABEL_30;
        }
      }
      if (v27)
      {
        v39 = v17 - 1;
        v40 = v17 - 1;
        do
        {
          *v8 = ((unsigned __int16)v17[v10] + v39[v20 + 1] + v39[v19 + 1] + v39[v18 + 1] + 2) >> 2;
          v41 = *v39;
          v43 = v40[2];
          v40 += 2;
          v42 = v43;
          v44 = v41 - v43;
          if (v41 - v43 < 0)
            v44 = -v44;
          v45 = (unsigned __int16)v17[(int)v9];
          v46 = v39[v22 + 1];
          v47 = v45 - v46;
          if (v45 - v46 < 0)
            v47 = v46 - v45;
          v48 = v46 + v45;
          v49 = v42 + v41;
          if (v44 > v47)
            v49 = v48;
          v8[1] = (v49 + 1) >> 1;
          v8[2] = v39[1];
          v8[3] = (v39[v20 + 1] + v39[v18 + 1] + 1) >> 1;
          v8[4] = *v40;
          v17 += 2;
          v8[5] = (v39[1] + v39[3] + 1) >> 1;
          v26 += 2;
          v8 = (_WORD *)((char *)v8 + v21);
          v39 = v40;
        }
        while (v26 < (int)result);
        v17 = v40 + 1;
        goto LABEL_29;
      }
LABEL_30:
      if (v26 <= (int)result)
      {
        v8[v24] = ((unsigned __int16)v17[v10]
                 + (unsigned __int16)v17[v72]
                 + (unsigned __int16)v17[v71]
                 + (unsigned __int16)v17[v70]
                 + 2) >> 2;
        v50 = (unsigned __int16)*(v17 - 1);
        v51 = (unsigned __int16)v17[1];
        v52 = v50 - v51;
        v53 = (unsigned __int16)v17[(int)v9];
        if (v50 - v51 < 0)
          v52 = v51 - v50;
        v54 = (unsigned __int16)v17[v16];
        v55 = v53 - v54;
        if (v53 - v54 < 0)
          v55 = v54 - v53;
        v56 = v54 + v53;
        v57 = v51 + v50;
        if (v52 > v55)
          v57 = v56;
        v8[1] = (v57 + 1) >> 1;
        v8[2 - v24] = *v17;
        v8 += v14;
        ++v17;
      }
      if (v76 >= 0xF)
      {
        v58 = 0;
        if (v74 >= 0x20
          && (unint64_t)(v69 + 2) >= 0x20
          && v73 >= 0x20
          && v74 - (-v69 - 2) >= 0x20
          && v74 - v73 >= 0x20)
        {
          v61 = 0;
          v62 = (v76 + 1) & 0x3F0;
          v63 = v8;
          do
          {
            v64 = *(_OWORD *)((char *)v63 - 2 * v76 + 14);
            *v63 = *(_OWORD *)((char *)v63 - 2 * v76 - 2);
            v63[1] = v64;
            v63 += 2;
            v65 = (__int128 *)&v8[v61 + v12];
            v66 = *v65;
            v67 = v65[1];
            v68 = &v8[v61 + v13];
            *v68 = v66;
            v68[1] = v67;
            v61 += 16;
            v62 -= 16;
          }
          while (v62);
          v58 = (v76 + 1) & 0x3F0;
          if (v58 == v14)
            goto LABEL_3;
        }
      }
      else
      {
        v58 = 0;
      }
      v59 = &v8[v58];
      v60 = v76 + 1 - v58;
      do
      {
        *v59 = *(_WORD *)((char *)v59 + v23);
        ++v59;
        v8[v58 + v13] = v8[v58 + v12];
        ++v58;
        --v60;
      }
      while (v60);
LABEL_3:
      v5 ^= 1u;
      v4 ^= 1u;
      v17 += 2;
      v8 += v75;
      ++v2;
    }
    while (v2 != v77);
  }
  return result;
}

uint64_t sub_1002E35DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100451E30;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

void sub_1002E36F8(uint64_t a1, uint64_t a2, int a3, int a4, unsigned __int8 a5, int a6)
{
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  double v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  double v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  char *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  int v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void *v72;
  _QWORD v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  void *v80;
  _QWORD v81[3];
  uint64_t v82;
  int v83;

  if ((a6 - 5) >= 2)
  {
    v74 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v74, 24), "ktype == 5 || ktype == 6", 24);
    sub_100294B74(-215, (uint64_t *)&v74, "getScharrKernels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/deriv.cpp", 61);
  }
  sub_10026285C(a1, 3u, 1u, a6, -1, 1, 0);
  sub_10026285C(a2, 3u, 1u, a6, -1, 1, 0);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_OWORD *)(v12 + 16);
    v74 = *(_OWORD *)v12;
    v75 = v13;
    v76 = *(_OWORD *)(v12 + 32);
    v14 = *(_QWORD *)(v12 + 56);
    v77 = *(_QWORD *)(v12 + 48);
    v78 = v14;
    v79 = (char *)&v74 + 8;
    v80 = v81;
    v81[0] = 0;
    v81[1] = 0;
    if (v14)
    {
      v15 = (unsigned int *)(v14 + 20);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
    }
    if (*(int *)(v12 + 4) > 2)
    {
      DWORD1(v74) = 0;
      sub_100256B48((uint64_t)&v74, v12);
    }
    else
    {
      v17 = *(_QWORD **)(v12 + 72);
      v18 = v80;
      *(_QWORD *)v80 = *v17;
      v18[1] = v17[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v74);
  }
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = *(_OWORD *)(v19 + 16);
    v66 = *(_OWORD *)v19;
    v21 = *(_OWORD *)(v19 + 32);
    v67 = v20;
    v68 = v21;
    v22 = *(_QWORD *)(v19 + 56);
    v69 = *(_QWORD *)(v19 + 48);
    v70 = v22;
    v71 = (char *)&v66 + 8;
    v72 = v73;
    v73[0] = 0;
    v73[1] = 0;
    if (v22)
    {
      v23 = (unsigned int *)(v22 + 20);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
    }
    if (*(int *)(v19 + 4) > 2)
    {
      DWORD1(v66) = 0;
      sub_100256B48((uint64_t)&v66, v19);
    }
    else
    {
      v25 = *(_QWORD **)(v19 + 72);
      v26 = v72;
      *(_QWORD *)v72 = *v25;
      v26[1] = v25[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v66);
  }
  if ((a4 | a3) < 0 || a4 + a3 != 1)
  {
    v56 = 0;
    v57 = 0;
    qmemcpy((void *)sub_10029430C(&v56, 32), "dx >= 0 && dy >= 0 && dx+dy == 1", 32);
    sub_100294B74(-215, &v56, "getScharrKernels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/deriv.cpp", 67);
  }
  if (a3)
  {
    if (a3 != 1)
      goto LABEL_27;
    v27 = 0xFFFFFFFFLL;
    v28 = 1;
  }
  else
  {
    v27 = 0xA00000003;
    v28 = 3;
  }
  v82 = v27;
  v83 = v28;
LABEL_27:
  v57 = *((_QWORD *)&v74 + 1);
  *(_QWORD *)&v58 = &v82;
  *((_QWORD *)&v58 + 1) = &v82;
  v60 = 0;
  v61 = 0;
  v62 = &v57;
  v63 = &v64;
  v56 = 0x242FF4004;
  v64 = 4 * SHIDWORD(v74);
  v65 = 4;
  *(_QWORD *)&v59 = (char *)&v82 + v64 * SDWORD2(v74);
  *((_QWORD *)&v59 + 1) = v59;
  v53 = 33619968;
  v54 = &v74;
  v55 = 0;
  v29 = 0.03125;
  if (((a3 != 1) & a5) == 0)
    v29 = 1.0;
  sub_1002044A8((unsigned int *)&v56, (uint64_t)&v53, a6, v29, 0.0);
  if (v61)
  {
    v30 = (unsigned int *)(v61 + 20);
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
      sub_100256C90((uint64_t)&v56);
  }
  v61 = 0;
  v58 = 0u;
  v59 = 0u;
  if (SHIDWORD(v56) >= 1)
  {
    v33 = 0;
    v34 = v62;
    do
      *((_DWORD *)v34 + v33++) = 0;
    while (v33 < SHIDWORD(v56));
  }
  if (v63 != &v64)
    j__free(v63);
  if (a4 == 1)
  {
    v35 = 0xFFFFFFFFLL;
    v36 = 1;
  }
  else
  {
    if (a4)
      goto LABEL_44;
    v35 = 0xA00000003;
    v36 = 3;
  }
  v82 = v35;
  v83 = v36;
LABEL_44:
  v57 = *((_QWORD *)&v66 + 1);
  *(_QWORD *)&v58 = &v82;
  *((_QWORD *)&v58 + 1) = &v82;
  v60 = 0;
  v61 = 0;
  v62 = &v57;
  v63 = &v64;
  v56 = 0x242FF4004;
  v64 = 4 * SHIDWORD(v66);
  v65 = 4;
  *(_QWORD *)&v59 = (char *)&v82 + v64 * SDWORD2(v66);
  *((_QWORD *)&v59 + 1) = v59;
  v53 = 33619968;
  v54 = &v66;
  v55 = 0;
  v37 = 0.03125;
  if (((a4 != 1) & a5) == 0)
    v37 = 1.0;
  sub_1002044A8((unsigned int *)&v56, (uint64_t)&v53, a6, v37, 0.0);
  if (v61)
  {
    v38 = (unsigned int *)(v61 + 20);
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
      sub_100256C90((uint64_t)&v56);
  }
  v61 = 0;
  v58 = 0u;
  v59 = 0u;
  if (SHIDWORD(v56) >= 1)
  {
    v41 = 0;
    v42 = v62;
    do
      *((_DWORD *)v42 + v41++) = 0;
    while (v41 < SHIDWORD(v56));
  }
  if (v63 != &v64)
    j__free(v63);
  if (v70)
  {
    v43 = (unsigned int *)(v70 + 20);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
      sub_100256C90((uint64_t)&v66);
  }
  v70 = 0;
  v67 = 0u;
  v68 = 0u;
  if (SDWORD1(v66) >= 1)
  {
    v46 = 0;
    v47 = v71;
    do
      *(_DWORD *)&v47[4 * v46++] = 0;
    while (v46 < SDWORD1(v66));
  }
  if (v72 != v73)
    j__free(v72);
  if (v78)
  {
    v48 = (unsigned int *)(v78 + 20);
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
      sub_100256C90((uint64_t)&v74);
  }
  v78 = 0;
  v75 = 0u;
  v76 = 0u;
  if (SDWORD1(v74) >= 1)
  {
    v51 = 0;
    v52 = v79;
    do
      *(_DWORD *)&v52[4 * v51++] = 0;
    while (v51 < SDWORD1(v74));
  }
  if (v80 != v81)
    j__free(v80);
}

void sub_1002E3CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1002E3D7C(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  unsigned int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  size_t v29;
  char v30;
  char v31;
  __int128 *v32;
  int v33;
  int v34;
  _DWORD *v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  float v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  double v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t *v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int8x16_t v68;
  unint64_t v69;
  int8x16_t *v70;
  int8x16_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  __int32 v77;
  __int32 v78;
  uint64_t v79;
  int *v80;
  int v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  float v85;
  unsigned int v86;
  uint64_t v87;
  int8x16_t v88;
  int8x16_t v89;
  unint64_t v90;
  int8x16_t *v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int8x16_t v95;
  int8x16_t v96;
  float *v97;
  uint64_t v98;
  float v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  char *v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  char *v109;
  signed int v114;
  signed int v115;
  int v116;
  __int128 *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  void *v126;
  _QWORD v127[2];
  void *__p;
  char *v129;
  char *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  void *v137;
  _QWORD v138[2];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  _QWORD *v145;
  _QWORD v146[4];

  if (a3 > 0 && a5 == 1)
    v10 = 3;
  else
    v10 = a5;
  if (a4 > 0 && a5 == 1)
    v11 = 3;
  else
    v11 = a5;
  v114 = v11;
  v115 = v10;
  if ((a7 - 5) >= 2)
  {
    v139 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v139, 24), "ktype == 5 || ktype == 6", 24);
    sub_100294B74(-215, (uint64_t *)&v139, "getSobelKernels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/deriv.cpp", 96);
  }
  sub_10026285C(a1, v10, 1u, a7, -1, 1, 0);
  sub_10026285C(a2, v114, 1u, a7, -1, 1, 0);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_OWORD *)(v12 + 16);
    v139 = *(_OWORD *)v12;
    v140 = v13;
    v141 = *(_OWORD *)(v12 + 32);
    v14 = *(_QWORD *)(v12 + 56);
    v142 = *(_QWORD *)(v12 + 48);
    v143 = v14;
    v144 = (char *)&v139 + 8;
    v145 = v146;
    v146[0] = 0;
    v146[1] = 0;
    if (v14)
    {
      v15 = (unsigned int *)(v14 + 20);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
    }
    if (*(int *)(v12 + 4) > 2)
    {
      DWORD1(v139) = 0;
      sub_100256B48((uint64_t)&v139, v12);
    }
    else
    {
      v17 = *(_QWORD **)(v12 + 72);
      v18 = v145;
      *v145 = *v17;
      v18[1] = v17[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v139);
  }
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = *(_OWORD *)(v19 + 16);
    v131 = *(_OWORD *)v19;
    v132 = v20;
    v133 = *(_OWORD *)(v19 + 32);
    v21 = *(_QWORD *)(v19 + 56);
    v134 = *(_QWORD *)(v19 + 48);
    v135 = v21;
    v136 = (char *)&v131 + 8;
    v137 = v138;
    v138[0] = 0;
    v138[1] = 0;
    if (v21)
    {
      v22 = (unsigned int *)(v21 + 20);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
    if (*(int *)(v19 + 4) > 2)
    {
      DWORD1(v131) = 0;
      sub_100256B48((uint64_t)&v131, v19);
    }
    else
    {
      v24 = *(_QWORD **)(v19 + 72);
      v25 = v137;
      *(_QWORD *)v137 = *v24;
      v25[1] = v24[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v131);
  }
  if (a5 > 31 || (a5 & 1) == 0)
  {
    v119 = 0;
    v120 = 0;
    qmemcpy((void *)sub_10029430C(&v119, 50), "The kernel size must be odd and not larger than 31", 50);
    sub_100294B74(-211, &v119, "getSobelKernels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/deriv.cpp", 104);
  }
  v26 = v115;
  if (v115 <= v114)
    v26 = v114;
  __p = 0;
  v129 = 0;
  v130 = 0;
  v27 = v26 + 1;
  if (v26 != -1)
  {
    if (v26 <= -2)
      sub_100008F3C();
    v28 = v27;
    v29 = 4 * v27;
    __p = operator new(v29);
    v130 = (char *)__p + 4 * v28;
    bzero(__p, v29);
    v129 = (char *)__p + v29;
  }
  if ((a4 | a3) < 0 || (a4 + a3 < 0) ^ __OFADD__(a4, a3) | (a4 + a3 == 0))
  {
    v119 = 0;
    v120 = 0;
    qmemcpy((void *)sub_10029430C(&v119, 31), "dx >= 0 && dy >= 0 && dx+dy > 0", 31);
    sub_100294B74(-215, &v119, "getSobelKernels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/deriv.cpp", 107);
  }
  v30 = 1;
  do
  {
    v31 = v30;
    if ((v30 & 1) != 0)
      v32 = &v139;
    else
      v32 = &v131;
    if ((v30 & 1) != 0)
      v33 = a3;
    else
      v33 = a4;
    if ((v30 & 1) != 0)
      v34 = v115;
    else
      v34 = v114;
    if (v34 <= v33)
    {
      v119 = 0;
      v120 = 0;
      qmemcpy((void *)sub_10029430C(&v119, 13), "ksize > order", 13);
      sub_100294B74(-215, &v119, "getSobelKernels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/deriv.cpp", 115);
    }
    if (v34 == 3)
    {
      if (v33 == 1)
      {
        v36 = (char *)__p;
        v52 = (char *)__p;
        *(_QWORD *)__p = 0xFFFFFFFFLL;
        v35 = v52 + 8;
      }
      else
      {
        v36 = (char *)__p;
        v37 = (char *)__p;
        if (v33)
          *(_QWORD *)__p = 0xFFFFFFFE00000001;
        else
          *(_QWORD *)__p = 0x200000001;
        v35 = v37 + 8;
      }
      goto LABEL_70;
    }
    if (v34 == 1)
    {
      v35 = __p;
      v36 = (char *)__p;
LABEL_70:
      *v35 = 1;
      goto LABEL_71;
    }
    v36 = (char *)__p;
    *(_DWORD *)__p = 1;
    if (v34 >= 1)
      bzero(v36 + 4, 4 * v34);
    v38 = v34 + ~v33;
    if (v38 >= 1 && v34 >= 1)
    {
      v39 = (v34 + 1);
      if (v34 >= 8)
      {
        v63 = 0;
        v64 = v39 - 1;
        v65 = (v39 - 1) & 0xFFFFFFFFFFFFFFF8;
        v66 = (unint64_t)&v36[32 * ((unint64_t)(v39 - 1) >> 3) + 4];
        v67 = ~v65 + v39;
        do
        {
          v68 = (int8x16_t)vld1q_dup_f32((const float *)v36);
          v69 = v65;
          v70 = (int8x16_t *)(v36 + 20);
          v71 = v68;
          do
          {
            v72 = (int32x4_t)v70[-1];
            v73 = (int32x4_t)vextq_s8(v68, (int8x16_t)v72, 0xCuLL);
            v68 = *v70;
            v74 = (int32x4_t)vextq_s8((int8x16_t)v72, *v70, 0xCuLL);
            v75 = (int8x16_t)vaddq_s32(v73, v72);
            v76 = vextq_s8(v71, v75, 0xCuLL);
            v71 = (int8x16_t)vaddq_s32(v74, *(int32x4_t *)v70);
            *(int8x16_t *)((char *)v70 - 20) = v76;
            *(int8x16_t *)((char *)v70 - 4) = vextq_s8(v75, v71, 0xCuLL);
            v70 += 2;
            v69 -= 8;
          }
          while (v69);
          if (v64 != v65)
          {
            v77 = v71.i32[3];
            v78 = v68.i32[3];
            v79 = v67;
            v80 = (int *)v66;
            do
            {
              v81 = *v80;
              *(v80 - 1) = v77;
              v77 = v78 + v81;
              ++v80;
              v78 = v81;
              --v79;
            }
            while (v79);
          }
          ++v63;
        }
        while (v63 != v38);
      }
      else
      {
        v40 = *(float *)v36;
        v41 = *((_DWORD *)v36 + 1);
        do
        {
          v42 = LODWORD(v40) + v41;
          v43 = *((_DWORD *)v36 + 2);
          *((_DWORD *)v36 + 1) = LODWORD(v40) + v41;
          if (v34 != 2)
          {
            v44 = v41 + v43;
            v45 = *((_DWORD *)v36 + 3);
            *((_DWORD *)v36 + 2) = v44;
            v46 = v43 + v45;
            v47 = *((_DWORD *)v36 + 4);
            *((_DWORD *)v36 + 3) = v46;
            if (v34 != 4)
            {
              v48 = v45 + v47;
              v49 = *((_DWORD *)v36 + 5);
              *((_DWORD *)v36 + 4) = v48;
              if (v34 != 5)
              {
                v50 = v47 + v49;
                v51 = *((_DWORD *)v36 + 6);
                *((_DWORD *)v36 + 5) = v50;
                if (v34 != 6)
                  *((_DWORD *)v36 + 6) = v49 + v51;
              }
            }
          }
          v41 = v42;
          --v38;
        }
        while (v38);
        *(float *)v36 = v40;
      }
    }
    if (v33 >= 1 && v34 >= 1)
    {
      v82 = 0;
      v83 = (v34 + 1);
      v84 = (v83 - 1) & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v85 = *(float *)v36;
        v86 = -*(_DWORD *)v36;
        if (v34 >= 8)
        {
          v88 = (int8x16_t)vdupq_n_s32(LODWORD(v85));
          v89 = (int8x16_t)vdupq_n_s32(v86);
          v90 = (v83 - 1) & 0xFFFFFFFFFFFFFFF8;
          v91 = (int8x16_t *)(v36 + 20);
          do
          {
            v92 = (int32x4_t)v91[-1];
            v93 = (int32x4_t)vextq_s8(v88, (int8x16_t)v92, 0xCuLL);
            v88 = *v91;
            v94 = (int32x4_t)vextq_s8((int8x16_t)v92, *v91, 0xCuLL);
            v95 = (int8x16_t)vsubq_s32(v93, v92);
            v96 = vextq_s8(v89, v95, 0xCuLL);
            v89 = (int8x16_t)vsubq_s32(v94, *(int32x4_t *)v91);
            *(int8x16_t *)((char *)v91 - 20) = v96;
            *(int8x16_t *)((char *)v91 - 4) = vextq_s8(v95, v89, 0xCuLL);
            v91 += 2;
            v90 -= 8;
          }
          while (v90);
          if (v83 - 1 == v84)
            goto LABEL_99;
          v85 = *(float *)&v88.i32[3];
          v86 = v89.u32[3];
          v87 = v84 | 1;
        }
        else
        {
          v87 = 1;
        }
        v97 = (float *)&v36[4 * v87];
        v98 = v83 - v87;
        do
        {
          v99 = *v97;
          *((_DWORD *)v97 - 1) = v86;
          v86 = LODWORD(v85) - LODWORD(v99);
          ++v97;
          v85 = v99;
          --v98;
        }
        while (v98);
LABEL_99:
        ++v82;
      }
      while (v82 != v33);
    }
LABEL_71:
    v53 = (char *)&v139 + 8;
    if ((v31 & 1) == 0)
      v53 = (char *)&v131 + 8;
    v54 = *(int *)v53;
    v55 = (int *)((unint64_t)&v139 | 0xC);
    if ((v31 & 1) == 0)
      v55 = (int *)((unint64_t)&v131 | 0xC);
    v56 = *v55;
    v120 = __PAIR64__(v56, v54);
    *(_QWORD *)&v121 = v36;
    *((_QWORD *)&v121 + 1) = v36;
    v123 = 0;
    v124 = 0;
    v125 = &v120;
    v126 = v127;
    v119 = 0x242FF4004;
    v127[0] = 4 * v56;
    v127[1] = 4;
    *(_QWORD *)&v122 = &v36[4 * v56 * v54];
    *((_QWORD *)&v122 + 1) = v122;
    v57 = 1.0;
    if (a6)
      v57 = 1.0 / (double)(1 << (v34 + ~(_BYTE)v33));
    v116 = 33619968;
    v117 = v32;
    v118 = 0;
    sub_1002044A8((unsigned int *)&v119, (uint64_t)&v116, a7, v57, 0.0);
    if (v124)
    {
      v58 = (unsigned int *)(v124 + 20);
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
        sub_100256C90((uint64_t)&v119);
    }
    v124 = 0;
    v121 = 0u;
    v122 = 0u;
    if (SHIDWORD(v119) >= 1)
    {
      v61 = 0;
      v62 = v125;
      do
        *((_DWORD *)v62 + v61++) = 0;
      while (v61 < SHIDWORD(v119));
    }
    if (v126 != v127)
      j__free(v126);
    v30 = 0;
  }
  while ((v31 & 1) != 0);
  if (__p)
    operator delete(__p);
  if (v135)
  {
    v100 = (unsigned int *)(v135 + 20);
    do
    {
      v101 = __ldaxr(v100);
      v102 = v101 - 1;
    }
    while (__stlxr(v102, v100));
    if (!v102)
      sub_100256C90((uint64_t)&v131);
  }
  v135 = 0;
  v132 = 0u;
  v133 = 0u;
  if (SDWORD1(v131) >= 1)
  {
    v103 = 0;
    v104 = v136;
    do
      *(_DWORD *)&v104[4 * v103++] = 0;
    while (v103 < SDWORD1(v131));
  }
  if (v137 != v138)
    j__free(v137);
  if (v143)
  {
    v105 = (unsigned int *)(v143 + 20);
    do
    {
      v106 = __ldaxr(v105);
      v107 = v106 - 1;
    }
    while (__stlxr(v107, v105));
    if (!v107)
      sub_100256C90((uint64_t)&v139);
  }
  v143 = 0;
  v140 = 0u;
  v141 = 0u;
  if (SDWORD1(v139) >= 1)
  {
    v108 = 0;
    v109 = v144;
    do
      *(_DWORD *)&v109[4 * v108++] = 0;
    while (v108 < SDWORD1(v139));
  }
  if (v145 != v146)
    j__free(v145);
}

void sub_1002E469C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,char a31)
{
  void *v31;
  uint64_t v32;

  sub_10029434C(&a16);
  if (v31)
  {
    a29 = v31;
    operator delete(v31);
  }
  sub_100006BE4((uint64_t)&a31);
  sub_100006BE4(v32 - 240);
  _Unwind_Resume(a1);
}

void sub_1002E4770(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, char a7, double a8)
{
  __int16 v16;
  __int16 v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  unsigned int *v41;
  uint64_t v42;
  int v43;
  __int128 *v44;
  uint64_t v45;
  int v46;
  __int128 *v47;
  uint64_t v48;
  int32x2_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void *v57;
  _QWORD v58[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void *v65;
  _QWORD v66[3];
  unsigned int v67[16];
  unsigned int *v68;
  void *v69;
  _QWORD v70[2];
  unsigned int v71[9];
  _BYTE v72[28];
  unsigned int *v73;
  _QWORD *v74;
  _QWORD v75[2];
  int32x2_t v76;
  _BYTE v77[8];

  sub_100298C2C(v77, &off_100451E60);
  v16 = sub_10025E20C((int *)a1, -1);
  v17 = v16;
  v18 = v16 & 7;
  if (a3 < 0)
    a3 = v16 & 7;
  sub_10025D920(a1, 0xFFFFFFFF, (uint64_t)&v76);
  sub_10026214C(a2, &v76, v17 & 0xFF8 | a3 & 7, -1, 0, 0);
  v71[0] = 1124007936;
  memset(&v71[1], 0, 32);
  if (a3 <= v18)
    v19 = v18;
  else
    v19 = a3;
  *(_OWORD *)v72 = 0uLL;
  if (v19 <= 5)
    v20 = 5;
  else
    v20 = v19;
  *(_OWORD *)&v72[12] = 0uLL;
  v73 = &v71[2];
  v74 = v75;
  v75[0] = 0;
  v75[1] = 0;
  v67[0] = 1124007936;
  memset(&v67[1], 0, 60);
  v68 = &v67[2];
  v69 = v70;
  v70[0] = 0;
  v70[1] = 0;
  LODWORD(v59) = 33619968;
  *((_QWORD *)&v59 + 1) = v71;
  *(_QWORD *)&v60 = 0;
  LODWORD(v51) = 33619968;
  *((_QWORD *)&v51 + 1) = v67;
  *(_QWORD *)&v52 = 0;
  if (a6 <= 0)
    sub_1002E36F8((uint64_t)&v59, (uint64_t)&v51, a4, a5, 0, v20);
  else
    sub_1002E3D7C((uint64_t)&v59, (uint64_t)&v51, a4, a5, a6, 0, v20);
  if (a8 != 1.0)
  {
    LODWORD(v59) = 33619968;
    if (a4)
    {
      *((_QWORD *)&v59 + 1) = v67;
      *(_QWORD *)&v60 = 0;
      sub_1002044A8(v67, (uint64_t)&v59, -1, a8, 0.0);
    }
    else
    {
      *((_QWORD *)&v59 + 1) = v71;
      *(_QWORD *)&v60 = 0;
      sub_1002044A8(v71, (uint64_t)&v59, -1, a8, 0.0);
    }
  }
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v21 = *(_QWORD *)(a1 + 8);
    v22 = *(_OWORD *)(v21 + 16);
    v59 = *(_OWORD *)v21;
    v60 = v22;
    v61 = *(_OWORD *)(v21 + 32);
    v23 = *(_QWORD *)(v21 + 56);
    v62 = *(_QWORD *)(v21 + 48);
    v63 = v23;
    v64 = (char *)&v59 + 8;
    v65 = v66;
    v66[0] = 0;
    v66[1] = 0;
    if (v23)
    {
      v24 = (unsigned int *)(v23 + 20);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
    }
    if (*(int *)(v21 + 4) > 2)
    {
      DWORD1(v59) = 0;
      sub_100256B48((uint64_t)&v59, v21);
    }
    else
    {
      v26 = *(_QWORD **)(v21 + 72);
      v27 = v65;
      *(_QWORD *)v65 = *v26;
      v27[1] = v26[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v59);
  }
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v28 = *(_QWORD *)(a2 + 8);
    v29 = *(_OWORD *)(v28 + 16);
    v51 = *(_OWORD *)v28;
    v30 = *(_OWORD *)(v28 + 32);
    v52 = v29;
    v53 = v30;
    v31 = *(_QWORD *)(v28 + 56);
    v54 = *(_QWORD *)(v28 + 48);
    v55 = v31;
    v56 = (char *)&v51 + 8;
    v57 = v58;
    v58[0] = 0;
    v58[1] = 0;
    if (v31)
    {
      v32 = (unsigned int *)(v31 + 20);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    if (*(int *)(v28 + 4) > 2)
    {
      DWORD1(v51) = 0;
      sub_100256B48((uint64_t)&v51, v28);
    }
    else
    {
      v34 = *(_QWORD **)(v28 + 72);
      v35 = v57;
      *(_QWORD *)v57 = *v34;
      v35[1] = v34[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v51);
  }
  v50 = 0;
  v49 = vrev64_s32(*(int32x2_t *)((char *)&v59 + 8));
  if ((a7 & 0x10) == 0)
    sub_100258BD0((uint64_t)&v59, &v49, &v50);
  v48 = 0;
  v46 = 16842752;
  v47 = &v59;
  v43 = 33619968;
  v44 = &v51;
  v45 = 0;
  v42 = 0;
  v40 = 16842752;
  v41 = v71;
  v39 = 0;
  v37 = 16842752;
  v38 = v67;
  v36 = -1;
  sub_1002F26C8((uint64_t)&v46, (uint64_t)&v43, a3, (uint64_t)&v40, (uint64_t)&v37, (int *)&v36, a7);
}

void sub_1002E4D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  sub_100006BE4((uint64_t)&a25);
  sub_100006BE4((uint64_t)&a37);
  sub_100006BE4((uint64_t)&a50);
  sub_100006BE4(v50 - 232);
  sub_1001D40CC(v50 - 128);
  _Unwind_Resume(a1);
}

void sub_1002E4DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 128);
  _Unwind_Resume(a1);
}

unsigned int **sub_1002E4DB4(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

BOOL sub_1002E4E08(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  char v27[8];
  int v28;

  sub_100298C2C(v27, &off_100451E80);
  v6 = *a1;
  v7 = a1[1];
  v8 = *a1 - 1;
  if (*a1 < 1 || v7 < 1)
  {
    v10 = 0;
    if (!v28)
      return v10;
    goto LABEL_35;
  }
  v11 = *a2;
  v12 = a2[1];
  v13 = ((unint64_t)*a2 >> 63) | (2 * (*a2 >= v6)) | (8 * (v12 >= v7)) | ((unint64_t)v12 >> 61) & 4;
  v14 = a3[1];
  v15 = ((unint64_t)*a3 >> 63) | (2 * (*a3 >= v6)) | (8 * (v14 >= v7)) | ((unint64_t)v14 >> 61) & 4;
  if ((v15 & v13) == 0 && (v15 | v13) != 0)
  {
    v17 = v7 - 1;
    if (v13 >= 4)
    {
      if (v13 >= 8)
        v18 = v17;
      else
        v18 = 0;
      v11 += (uint64_t)((double)(*a3 - v11) * (double)(v18 - v12) / (double)(v14 - v12));
      *a2 = v11;
      a2[1] = v18;
      v13 = ((unint64_t)v11 >> 63) | (2 * (v11 >= v6));
      v12 = v18;
      if (v15 < 4)
      {
LABEL_14:
        if ((v15 & v13) != 0)
          goto LABEL_34;
LABEL_24:
        if (v15 | v13)
        {
          if (v13)
          {
            if (v13 == 1)
              v21 = 0;
            else
              v21 = v8;
            v22 = a2[1];
            v23 = (double)(v21 - *a2) * (double)(a3[1] - v22) / (double)(*a3 - *a2);
            *a2 = v21;
            a2[1] = v22 + (uint64_t)v23;
          }
          v13 = 0;
          if (v15)
          {
            if (v15 == 1)
              v8 = 0;
            v24 = a3[1];
            v25 = (double)(v8 - *a3) * (double)(v24 - a2[1]) / (double)(*a3 - *a2);
            *a3 = v8;
            a3[1] = v24 + (uint64_t)v25;
            v15 = 0;
          }
        }
        goto LABEL_34;
      }
    }
    else if (v15 < 4)
    {
      goto LABEL_14;
    }
    if (v15 >= 8)
      v19 = v17;
    else
      v19 = 0;
    v20 = *a3 + (uint64_t)((double)(v19 - a3[1]) * (double)(*a3 - v11) / (double)(a3[1] - v12));
    *a3 = v20;
    a3[1] = v19;
    v15 = ((unint64_t)v20 >> 63) | (2 * (v20 >= v6));
    if ((v15 & v13) != 0)
      goto LABEL_34;
    goto LABEL_24;
  }
LABEL_34:
  v10 = (v13 | v15) == 0;
  if (v28)
LABEL_35:
    sub_1002989D0(v27);
  return v10;
}

uint64_t sub_1002E504C(uint64_t a1, uint64_t a2, int *a3, unsigned int *a4, int a5, int a6)
{
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v53[2];
  uint64_t v54;
  uint64_t v55;
  int64x2_t v56;

  *(_DWORD *)(a1 + 28) = -1;
  if (a5 != 4 && a5 != 8)
  {
    v56 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v56, 38), "connectivity == 8 || connectivity == 4", 38);
    sub_100294B74(-215, v56.i64, "LineIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/drawing.cpp", 170);
  }
  v12 = *(_DWORD *)(a2 + 12);
  v13 = *a4;
  v14 = *a3 >= v12 || v13 >= v12;
  if (v14 || (v15 = *(_DWORD *)(a2 + 8), a3[1] >= v15) || (v16 = a4[1], v16 >= v15))
  {
    v17 = **(int **)(a2 + 64);
    v18 = *(int *)(*(_QWORD *)(a2 + 64) + 4);
    v19 = a3[1];
    v56.i64[0] = *a3;
    v56.i64[1] = v19;
    v20 = (int)a4[1];
    v54 = (int)v13;
    v55 = v20;
    v53[0] = v18;
    v53[1] = v17;
    v21 = sub_1002E4E08(v53, v56.i64, &v54);
    *(int32x2_t *)a3 = vmovn_s64(v56);
    v13 = v54;
    v16 = v55;
    *a4 = v54;
    a4[1] = v16;
    if (!v21)
    {
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_QWORD *)(a1 + 40) = 0;
      return a1;
    }
  }
  v22 = *(_DWORD *)(a2 + 4);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v24 < 0 != v23)
  {
    v25 = 0;
    v26 = *(_QWORD *)(a2 + 80);
    v27 = *a3;
    v28 = a3[1];
    v29 = v13 - *a3;
    v30 = v16 - v28;
    v31 = v29 >> 31;
    if (a6)
      goto LABEL_13;
LABEL_16:
    v32 = (v25 ^ v31) - v31;
    goto LABEL_17;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v24);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *a3;
  v28 = a3[1];
  v29 = v13 - *a3;
  v30 = v16 - v28;
  v31 = v29 >> 31;
  if (!a6)
    goto LABEL_16;
LABEL_13:
  v30 = (v30 ^ v31) - v31;
  v27 = v13 & v31 | v27 & ~v31;
  v28 = v16 & v31 | v28 & ~v31;
  *a3 = v27;
  a3[1] = v28;
  v32 = v25;
LABEL_17:
  v33 = (v31 ^ v29) - v31;
  v34 = *(_QWORD *)(a2 + 16);
  v35 = v34 + v26 * v28;
  v36 = v30 >> 31;
  if (v30 < 0)
    v30 = -v30;
  v37 = (v26 ^ v36) - v36;
  v38 = v30 <= v33;
  if (v30 <= v33)
    v39 = 0;
  else
    v39 = -1;
  v40 = v30 & v39 ^ v33;
  v41 = v40 & v39 ^ v30;
  v42 = v41 & v39 ^ v40;
  if (v38)
    v43 = 0;
  else
    v43 = -1;
  v44 = v37 & v43 ^ v32;
  v45 = v44 & v43 ^ v37;
  v46 = v45 & v43 ^ v44;
  v47 = -2 * v41;
  v48 = v42 + v41;
  v49 = 2 * v41;
  if (a5 == 8)
    v48 = v42;
  v50 = v42 - v49;
  if (a5 == 8)
  {
    v51 = -v49;
  }
  else
  {
    v50 = 0;
    v51 = v47;
  }
  if (a5 != 8)
    v45 -= v46;
  *(_DWORD *)(a1 + 32) = v51;
  *(_DWORD *)(a1 + 36) = 2 * v48;
  *(_DWORD *)(a1 + 40) = v46;
  *(_DWORD *)(a1 + 44) = v45;
  *(_DWORD *)(a1 + 24) = v50;
  *(_DWORD *)(a1 + 28) = v48 + 1;
  *(_QWORD *)a1 = v35 + v25 * v27;
  *(_QWORD *)(a1 + 8) = v34;
  *(_DWORD *)(a1 + 16) = v26;
  *(_DWORD *)(a1 + 20) = v25;
  return a1;
}

void sub_1002E52CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002E52E4(uint64_t *a1, double *a2, int a3, int a4, int a5, uint64_t a6, double **a7)
{
  double v14;
  double v15;
  double v16;
  int64x2_t v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  double *v33;
  double *v34;
  double v35;
  double v36;
  BOOL v37;
  int v38;
  int v39;
  double v40;
  double v41;
  double v42;
  unint64_t v43;
  double *v44;
  uint64_t *v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  double *v54;
  unint64_t v55;
  double *v56;
  double *v57;
  __int128 v58;
  unint64_t v59;
  unint64_t v60;
  double *v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  BOOL v65;
  BOOL v66;
  unint64_t v68;
  uint64_t v69;
  const double *v70;
  double *v71;
  uint64_t v72;
  const double *v73;
  double *v74;
  int v75;
  char v76[8];
  int v77;

  sub_100298C2C(v76, &off_100451EA0);
  v18 = a3 + 360 * ((a3 >> 31) + ((a3 & ~(a3 >> 31)) - ((a3 >> 31) + a3)) / 0x168);
  if (v18 >= 360)
    v19 = 360;
  else
    v19 = a3 + 360 * ((a3 >> 31) + ((a3 & ~(a3 >> 31)) - ((a3 >> 31) + a3)) / 0x168);
  v20 = v18 - 360 * ((v18 - v19 + 359) / 0x168u);
  if (a4 <= a5)
    v21 = a5;
  else
    v21 = a4;
  if (a4 >= a5)
    v22 = a5;
  else
    v22 = a4;
  if (v22 < 0)
  {
    if (v22 <= -360)
      v23 = -360;
    else
      v23 = v22;
    if (v22 >= 0xFFFFFE98)
      v24 = v22;
    else
      v24 = v22 + 1;
    v25 = (v23 - v24) / 0x168u;
    if (v22 < 0xFFFFFE98)
      ++v25;
    v26 = 360 * v25;
    v22 += v26 + 360;
    v21 += v26 + 360;
  }
  if (v21 >= 720)
    v27 = 720;
  else
    v27 = v21;
  v28 = 360 * ((v21 - v27 + 359) / 0x168u);
  v29 = v21 - v28 - 360;
  v30 = v22 - v28 - 360;
  if (v21 < 361)
    v30 = v22;
  else
    v21 = v29;
  if (v21 - v30 <= 360)
    v31 = v21;
  else
    v31 = 360;
  if (v21 - v30 <= 360)
    v32 = v30;
  else
    v32 = 0;
  *(float *)&v14 = flt_1003C11A0[v20];
  *(float *)&v15 = flt_1003C11A0[450 - v20];
  v33 = *a7;
  v34 = a7[1];
  if (v34 != *a7)
  {
    a7[1] = v33;
    v34 = v33;
  }
  if (v32 < v31 + (int)a6)
  {
    v35 = *(float *)&v15;
    v36 = *(float *)&v14;
    v75 = v31;
    while (1)
    {
      while (1)
      {
        v38 = v32 >= v31 ? v31 : v32;
        v39 = v38 + (v38 < 0 ? 0x168 : 0);
        v16 = a2[1] * flt_1003C11A0[v39];
        v40 = *a2 * flt_1003C11A0[450 - v39];
        v17.i64[0] = a1[1];
        v15 = *(double *)a1 + v40 * v35;
        v41 = v15 - v16 * v36;
        v14 = *(double *)v17.i64 + v40 * v36;
        v42 = v14 + v16 * v35;
        v43 = (unint64_t)a7[2];
        if ((unint64_t)v34 >= v43)
          break;
        *v34 = v41;
        v34[1] = v42;
        v34 += 2;
        a7[1] = v34;
        v37 = v32 < v31;
        v32 += a6;
        if (!v37)
          goto LABEL_81;
      }
      v44 = a2;
      v45 = a1;
      v46 = a6;
      v47 = *a7;
      v48 = (char *)v34 - (char *)*a7;
      v49 = v48 >> 4;
      v50 = (v48 >> 4) + 1;
      if (v50 >> 60)
        sub_100008F3C();
      v51 = v43 - (_QWORD)v47;
      if (v51 >> 3 > v50)
        v50 = v51 >> 3;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
        v52 = 0xFFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52 >> 60)
        sub_100008FF8();
      v53 = (char *)operator new(16 * v52);
      v54 = (double *)&v53[16 * v49];
      *v54 = v41;
      v54[1] = v42;
      if (v34 == v47)
      {
        a6 = v46;
        a1 = v45;
        a2 = v44;
        v34 = v54 + 2;
        *a7 = v54;
        a7[1] = v54 + 2;
        a7[2] = (double *)&v53[16 * v52];
        if (!v47)
          goto LABEL_56;
LABEL_55:
        operator delete(v47);
        goto LABEL_56;
      }
      v55 = (char *)v34 - (char *)v47 - 16;
      if (v55 < 0x310)
        break;
      v59 = v55 & 0xFFFFFFFFFFFFFFF0;
      if (&v53[v48 - 16 - (v55 & 0xFFFFFFFFFFFFFFF0)] > &v53[v48 - 16])
        break;
      if ((double *)((char *)v34 - v59 - 16) > v34 - 2)
        break;
      v60 = (unint64_t)&v53[v48 - 8];
      if (v60 - v59 > v60)
        break;
      v61 = v34 - 1;
      if ((double *)((char *)v34 - v59 - 8) > v34 - 1)
        break;
      v62 = v55 >> 4;
      v63 = v48 - v59;
      v64 = &v53[v63 - 16];
      v65 = &v53[v63 - 8] >= (char *)v34 || &v61[-2 * v62] >= v54;
      v66 = !v65;
      if ((unint64_t)&v34[-2 * v62 - 2] < v60 && v64 < (char *)v61)
        break;
      a6 = v46;
      if (v66)
      {
        v56 = v34;
        v57 = (double *)&v53[16 * v49];
        goto LABEL_52;
      }
      v68 = v62 + 1;
      v69 = (v62 + 1) & 0x1FFFFFFFFFFFFFFCLL;
      v56 = &v34[-2 * v69];
      v57 = &v54[-2 * v69];
      v70 = v34 - 4;
      v71 = v54 - 4;
      v72 = v69;
      a1 = v45;
      do
      {
        *(float64x2x2_t *)&v14 = vld2q_f64(v70);
        v73 = v70 - 4;
        *(float64x2x2_t *)&v16 = vld2q_f64(v73);
        vst2q_f64(v71, *(float64x2x2_t *)&v14);
        v74 = v71 - 4;
        vst2q_f64(v74, *(float64x2x2_t *)&v16);
        v71 -= 8;
        v70 -= 8;
        v72 -= 4;
      }
      while (v72);
      a2 = v44;
      if (v68 != v69)
        goto LABEL_53;
LABEL_54:
      v34 = v54 + 2;
      *a7 = v57;
      a7[1] = v54 + 2;
      a7[2] = (double *)&v53[16 * v52];
      if (v47)
        goto LABEL_55;
LABEL_56:
      v31 = v75;
      a7[1] = v34;
      v37 = v32 < v75;
      v32 += a6;
      if (!v37)
      {
LABEL_81:
        v33 = *a7;
        goto LABEL_82;
      }
    }
    v56 = v34;
    v57 = (double *)&v53[16 * v49];
    a6 = v46;
LABEL_52:
    a1 = v45;
    a2 = v44;
    do
    {
LABEL_53:
      v58 = *((_OWORD *)v56 - 1);
      v56 -= 2;
      v14 = *(double *)&v58;
      *((_OWORD *)v57 - 1) = v58;
      v57 -= 2;
    }
    while (v56 != v47);
    goto LABEL_54;
  }
LABEL_82:
  if ((char *)v34 - (char *)v33 == 16)
    sub_1002E5780((uint64_t)a7, 2uLL, a1, v14, v15, v16, v17);
  if (v77)
    sub_1002989D0(v76);
}

void sub_1002E5740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002E5758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002E576C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

int64x2_t *sub_1002E5780(uint64_t a1, unint64_t a2, uint64_t *a3, double a4, double a5, double a6, int64x2_t a7)
{
  uint64_t v10;
  uint64_t *v11;
  int64x2_t *result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  unint64_t v18;
  int64x2_t *v19;
  unint64_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t *v25;
  uint64_t v26;
  _OWORD *v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _OWORD *v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  BOOL v36;
  uint64_t v38;
  _OWORD *v39;
  int64x2_t *v40;
  uint64_t v41;
  int64x2_t v42;
  int64x2_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  BOOL v47;
  BOOL v48;
  int64x2_t *v50;
  unint64_t v51;
  int64x2_t v52;
  int64x2_t v53;
  BOOL v54;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(uint64_t **)a1;
  result = (int64x2_t *)v11;
  if (a2 > (v10 - (uint64_t)v11) >> 4)
  {
    if (v11)
    {
      *(_QWORD *)(a1 + 8) = v11;
      operator delete(v11);
      v10 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 60)
      goto LABEL_60;
    v13 = v10 >> 3;
    if (v10 >> 3 <= a2)
      v13 = a2;
    v35 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0;
    v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v35)
      v14 = v13;
    if (v14 >> 60)
LABEL_60:
      sub_100008F3C();
    v15 = v14;
    result = (int64x2_t *)operator new(16 * v14);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v15];
    v16 = &result[a2];
    v17 = *(int64x2_t *)a3;
    v18 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    v19 = result;
    if (v18 < 3)
      goto LABEL_63;
    v20 = v18 + 1;
    v19 = &result[v20 & 0x1FFFFFFFFFFFFFFCLL];
    v21 = vdupq_lane_s64(v17.i64[0], 0);
    v22 = vdupq_laneq_s64(v17, 1);
    v23 = vzip2q_s64(v21, v22);
    v24 = vzip1q_s64(v21, v22);
    v25 = result + 2;
    v26 = v20 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v25[-2] = v24;
      v25[-1] = v23;
      *v25 = v24;
      v25[1] = v23;
      v25 += 4;
      v26 -= 4;
    }
    while (v26);
    if (v20 != (v20 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_63:
      do
        *v19++ = v17;
      while (v19 != v16);
    }
    goto LABEL_42;
  }
  v27 = *(_OWORD **)(a1 + 8);
  v28 = (char *)v27 - (char *)v11;
  v29 = ((char *)v27 - (char *)v11) >> 4;
  if (v29 >= a2)
    v30 = a2;
  else
    v30 = ((char *)v27 - (char *)v11) >> 4;
  if (v30)
  {
    if (v30 < 0xA)
      goto LABEL_64;
    v44 = a3 + 1;
    v45 = &v11[2 * v30];
    v46 = (unint64_t)(v45 - 1);
    v47 = v11 + 1 >= a3 + 2 || v44 >= v45;
    v48 = !v47;
    if (v46 > (unint64_t)a3 && v11 < v44)
      goto LABEL_64;
    if (v48)
      goto LABEL_64;
    result = (int64x2_t *)&v11[2 * (v30 & 0xFFFFFFFFFFFFFFFCLL)];
    v50 = (int64x2_t *)(v11 + 4);
    v51 = v30 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v52 = *(int64x2_t *)a3;
      a7.i64[1] = a3[1];
      v52.i64[1] = a7.i64[1];
      v53 = vzip2q_s64(vdupq_lane_s64(*a3, 0), a7);
      v50[-2] = v52;
      v50[-1] = v53;
      *v50 = v52;
      v50[1] = v53;
      v50 += 4;
      v51 -= 4;
    }
    while (v51);
    v54 = v30 == (v30 & 0xFFFFFFFFFFFFFFFCLL);
    v30 &= 3u;
    if (!v54)
    {
LABEL_64:
      do
      {
        *result++ = *(int64x2_t *)a3;
        --v30;
      }
      while (v30);
    }
  }
  v35 = a2 >= v29;
  v31 = a2 - v29;
  if (v31 == 0 || !v35)
  {
    v16 = (int64x2_t *)&v11[2 * a2];
LABEL_42:
    *(_QWORD *)(a1 + 8) = v16;
    return result;
  }
  v32 = &v27[v31];
  v33 = 16 * a2 - (v28 & 0xFFFFFFFFFFFFFFF0) - 16;
  if (v33 < 0x110)
    goto LABEL_65;
  v34 = (unint64_t)(a3 + 1);
  v35 = (_OWORD *)((char *)v27 + 8) >= (_OWORD *)a3 + 1 || v34 >= (unint64_t)v27 + v33 + 16;
  v36 = !v35;
  if ((uint64_t *)((char *)v27 + (v33 | 8)) > a3 && (unint64_t)v27 < v34)
    goto LABEL_65;
  if (v36)
    goto LABEL_65;
  v38 = (v33 >> 4) + 1;
  v39 = &v27[v38 & 0x1FFFFFFFFFFFFFFCLL];
  v40 = (int64x2_t *)(v27 + 2);
  v41 = v38 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    v42 = *(int64x2_t *)a3;
    a7.i64[1] = a3[1];
    v42.i64[1] = a7.i64[1];
    v43 = vzip2q_s64(vdupq_lane_s64(*a3, 0), a7);
    v40[-2] = v42;
    v40[-1] = v43;
    *v40 = v42;
    v40[1] = v43;
    v40 += 4;
    v41 -= 4;
  }
  while (v41);
  v27 = v39;
  if (v38 != (v38 & 0x1FFFFFFFFFFFFFFCLL))
  {
LABEL_65:
    do
      *v27++ = *(_OWORD *)a3;
    while (v27 != v32);
  }
  *(_QWORD *)(a1 + 8) = v32;
  return result;
}

void sub_1002E5A10(uint64_t a1, _QWORD *a2, _QWORD *a3, double *a4, unsigned int a5, int a6, unsigned int a7)
{
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int64x2_t v22;
  uint64x2_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  int64x2_t v29;
  uint64x2_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  _QWORD v38[3];
  _BYTE v39[8];
  int v40;
  uint64_t v41;
  uint64_t v42;

  sub_100298C2C(v39, &off_100451EC0);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_OWORD *)(v14 + 16);
    v31 = *(_OWORD *)v14;
    v32 = v15;
    v33 = *(_OWORD *)(v14 + 32);
    v16 = *(_QWORD *)(v14 + 56);
    v34 = *(_QWORD *)(v14 + 48);
    v35 = v16;
    v36 = (char *)&v31 + 8;
    v37 = v38;
    v38[0] = 0;
    v38[1] = 0;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 20);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }
    if (*(int *)(v14 + 4) > 2)
    {
      DWORD1(v31) = 0;
      sub_100256B48((uint64_t)&v31, v14);
    }
    else
    {
      v19 = *(_QWORD **)(v14 + 72);
      v20 = v37;
      *(_QWORD *)v37 = *v19;
      v20[1] = v19[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v31);
  }
  if ((v31 & 7) != 0)
    v21 = 8;
  else
    v21 = 16;
  if (a6 == 16)
    a6 = v21;
  if (a5 >= 0x8000)
  {
    v41 = 0;
    v42 = 0;
    qmemcpy((void *)sub_10029430C(&v41, 44), "0 <= thickness && thickness <= MAX_THICKNESS", 44);
    sub_100294B74(-215, &v41, "line", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/drawing.cpp", 1817);
  }
  if (a7 >= 0x11)
  {
    v41 = 0;
    v42 = 0;
    qmemcpy((void *)sub_10029430C(&v41, 31), "0 <= shift && shift <= XY_SHIFT", 31);
    sub_100294B74(-215, &v41, "line", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/drawing.cpp", 1818);
  }
  sub_10025C560(a4, (uint64_t)&v41, v31 & 0xFFF, 0);
  v22.i64[0] = (int)*a2;
  v22.i64[1] = (int)HIDWORD(*a2);
  v23 = (uint64x2_t)v22;
  v22.i64[0] = (int)*a3;
  v22.i64[1] = (int)HIDWORD(*a3);
  v29 = v22;
  v30 = v23;
  sub_1002E5D68((unsigned int *)&v31, &v30, &v29, (unsigned __int8 *)&v41, a5, a6, 3, a7);
  if (v35)
  {
    v24 = (unsigned int *)(v35 + 20);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      sub_100256C90((uint64_t)&v31);
  }
  v35 = 0;
  v32 = 0u;
  v33 = 0u;
  if (SDWORD1(v31) >= 1)
  {
    v27 = 0;
    v28 = v36;
    do
      *(_DWORD *)&v28[4 * v27++] = 0;
    while (v27 < SDWORD1(v31));
  }
  if (v37 != v38)
    j__free(v37);
  if (v40)
    sub_1002989D0(v39);
}

void sub_1002E5CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1002E5D38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_1002E5D68(unsigned int *a1, uint64x2_t *a2, int64x2_t *a3, unsigned __int8 *a4, int a5, int a6, char a7, int a8)
{
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  int64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  int v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64x2_t v40;
  uint64x2_t v41;
  int32x2_t v42;
  uint64_t v43[2];
  uint64x2_t v44;
  uint64_t v45[2];
  uint64x2_t v46;
  _QWORD v47[8];

  *a2 = vshlq_u64(*a2, (uint64x2_t)vdupq_n_s64((16 - a8)));
  v13 = a3->i64[0] << (16 - a8);
  v14 = a3->i64[1] << (16 - a8);
  a3->i64[0] = v13;
  a3->i64[1] = v14;
  if (a5 > 1)
  {
    v27 = a2->i64[0];
    v28 = a2->i64[1];
    v29 = (double)(a2->i64[0] - v13) * 0.0000152587891;
    v30 = (double)(v14 - v28) * 0.0000152587891;
    v31 = v30 * v30 + v29 * v29;
    v32 = a5 << 15;
    if (fabs(v31) > 2.22044605e-16)
    {
      v33 = ((double)v32 + (double)((a5 & 1) << 16) * 0.5) / sqrt(v31);
      v34 = (int)(uint64_t)rint(v30 * v33);
      v35 = (int)(uint64_t)rint(v29 * v33);
      v47[0] = v34 + v27;
      v47[1] = v35 + v28;
      v47[2] = v27 - v34;
      v47[3] = v28 - v35;
      v47[4] = v13 - v34;
      v47[5] = v14 - v35;
      v47[6] = v34 + v13;
      v47[7] = v35 + v14;
      sub_1002E62D8((uint64_t)a1, v47, 4, a4, a6, 16);
    }
    if (a6 >= 16)
    {
      if ((a7 & 1) != 0)
      {
        v41 = *a2;
        v40.i64[0] = v32;
        v40.i64[1] = v32;
        sub_1002E69BC(a1, (int64x2_t *)&v41, &v40, 0, 0, 360, a4, -1, a6);
      }
      v38 = a3->i64[0];
      a2->i64[0] = a3->i64[0];
      v39 = a3->i64[1];
      a2->i64[1] = v39;
      if ((a7 & 2) != 0)
      {
        v41.i64[0] = v38;
        v41.i64[1] = v39;
        v40.i64[0] = v32;
        v40.i64[1] = v32;
        sub_1002E69BC(a1, (int64x2_t *)&v41, &v40, 0, 0, 360, a4, -1, a6);
      }
    }
    else
    {
      if ((a7 & 1) != 0)
      {
        v42 = vrshrn_n_s64(*(int64x2_t *)a2, 0x10uLL);
        sub_1002E7034(a1, &v42, (v32 + 0x8000) >> 16, a4, 1);
      }
      v36 = a3->i64[0];
      a2->i64[0] = a3->i64[0];
      v37 = a3->i64[1];
      a2->i64[1] = v37;
      if ((a7 & 2) != 0)
      {
        v42.i32[0] = (unint64_t)(v36 + 0x8000) >> 16;
        v42.i32[1] = (unint64_t)(v37 + 0x8000) >> 16;
        sub_1002E7034(a1, &v42, (v32 + 0x8000) >> 16, a4, 1);
      }
    }
    *a2 = *(uint64x2_t *)a3;
  }
  else if (a6 > 15)
  {
    v44 = *a2;
    v43[0] = v13;
    v43[1] = v14;
    sub_1002E97AC(a1, v44.i64, v43, a4);
  }
  else if (!a8 || a6 == 4 || a6 == 1)
  {
    v15 = vdupq_n_s64(0x8000uLL);
    *(int64x2_t *)a2 = vshrq_n_s64(vaddq_s64(*(int64x2_t *)a2, v15), 0x10uLL);
    v16 = vshrq_n_s64(vaddq_s64(*a3, v15), 0x10uLL);
    *a3 = v16;
    v17 = 0xFFFFFFFF80000000;
    v18 = a2->i64[0];
    v19 = a2->i64[1];
    if (a2->i64[0] <= (int64_t)0xFFFFFFFF80000000)
      v18 = 0xFFFFFFFF80000000;
    if (v18 >= 0x7FFFFFFF)
      v20 = 0x7FFFFFFF;
    else
      v20 = v18;
    if (v19 <= (uint64_t)0xFFFFFFFF80000000)
      v21 = 0xFFFFFFFF80000000;
    else
      v21 = a2->i64[1];
    if (v21 >= 0x7FFFFFFF)
      v22 = 0x7FFFFFFF;
    else
      v22 = v21;
    v23 = v16.i64[0];
    if (v16.i64[0] <= (uint64_t)0xFFFFFFFF80000000)
      v23 = 0xFFFFFFFF80000000;
    if (v23 >= 0x7FFFFFFF)
      v24 = 0x7FFFFFFF;
    else
      v24 = v23;
    if (v16.i64[1] > (uint64_t)0xFFFFFFFF80000000)
      v17 = v16.i64[1];
    if (v17 >= 0x7FFFFFFF)
      v25 = 0x7FFFFFFF;
    else
      v25 = v17;
    sub_1002E8DDC((uint64_t)a1, v20, v22, v24, v25, a4, a6);
  }
  else
  {
    v46 = *a2;
    v45[0] = v13;
    v45[1] = v14;
    sub_1002E8F98((uint64_t)a1, v46.i64, v45, a4);
  }
}

__n128 sub_1002E6130(unsigned int *a1, uint64_t a2, unsigned int a3, int a4, unsigned __int8 *a5, int a6, int a7, unsigned int a8)
{
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64x2_t v17;
  uint64_t v18;
  __n128 result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 *v23;
  __n128 v24;
  int64x2_t v25;
  int64x2_t v26;
  uint64x2_t v27;
  uint64_t v28[2];

  if (a2 && (int)a3 >= 1)
  {
    if (a4)
      v14 = 2;
    else
      v14 = 3;
    if (a6 < 0 || a8 >= 0x11)
    {
      v28[0] = 0;
      v28[1] = 0;
      qmemcpy((void *)sub_10029430C(v28, 49), "0 <= shift && shift <= XY_SHIFT && thickness >= 0", 49);
      sub_100294B74(-215, v28, "PolyLine", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/drawing.cpp", 1726);
    }
    if ((a4 ^ 1u) < a3)
    {
      if (a4)
        v15 = a3 - 1;
      else
        v15 = 0;
      v16 = a3;
      v17 = *(uint64x2_t *)(a2 + 16 * v15);
      v25 = *(int64x2_t *)(a2 + 16 * (a4 ^ 1u));
      v26 = v25;
      v27 = v17;
      if (a4)
        v18 = 1;
      else
        v18 = 2;
      sub_1002E5D68(a1, &v27, &v26, a5, a6, a7, v14, a8);
      v20 = v16 - v18;
      if (v16 != v18)
      {
        v21 = v25.i64[1];
        v22 = v25.i64[0];
        v23 = (__n128 *)(a2 + 16 * v18);
        do
        {
          v27.i64[0] = v22;
          v27.i64[1] = v21;
          v24 = *v23++;
          v26 = (int64x2_t)v24;
          sub_1002E5D68(a1, &v27, &v26, a5, a6, a7, 2, a8);
          result = v24;
          v21 = v24.n128_i64[1];
          v22 = v24.n128_u64[0];
          --v20;
        }
        while (v20);
      }
    }
  }
  return result;
}

void sub_1002E62C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E62D8(uint64_t result, _QWORD *a2, int a3, unsigned __int8 *a4, int a5, int a6)
{
  int *v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  _QWORD *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  size_t v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BOOL4 v88;
  int v89;
  uint64_t v90;
  int v91;
  unsigned __int8 *__src;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108[2];
  uint64_t v109[2];
  uint64_t v110[2];
  uint64_t v111[3];
  uint64_t v112;
  uint64_t v113;

  v6 = *(int **)(result + 64);
  v7 = *(_DWORD *)(result + 4);
  v8 = __OFSUB__(v7, 1);
  v9 = v7 - 1;
  if (v9 < 0 != v8)
    LODWORD(v94) = 0;
  else
    v94 = *(_QWORD *)(*(_QWORD *)(result + 72) + 8 * v9);
  v95 = *v6;
  v97 = a6;
  v99 = v6[1];
  v88 = a5 < 16;
  v90 = *(_QWORD *)(result + 16);
  v10 = 0xFFFFLL;
  if (a5 < 16)
    v10 = 0x8000;
  v93 = v10;
  v11 = 16 - a6;
  v12 = *a2;
  v13 = a2[1];
  v106 = 16 - a6;
  v107 = result;
  v100 = a3 - 1;
  if (a3 < 1)
  {
    v20 = 0;
    v23 = *a2;
    v22 = a2[1];
    v18 = a4;
  }
  else
  {
    v14 = &a2[2 * a3 - 2];
    v15 = v14[1];
    v16 = *v14 << v11;
    v17 = v15 << v11;
    v104 = a3;
    if (a5 >= 9)
    {
      v28 = 0;
      LODWORD(v20) = 0;
      v29 = a2 + 1;
      v22 = a2[1];
      v23 = *a2;
      v18 = a4;
      do
      {
        v30 = *(v29 - 1);
        v31 = *v29;
        if (*v29 >= v22)
          v20 = v20;
        else
          v20 = v28;
        if (*v29 < v22)
          v22 = *v29;
        if (v13 <= v31)
          v13 = *v29;
        if (v12 <= v30)
          v12 = *(v29 - 1);
        if (v23 >= v30)
          v23 = *(v29 - 1);
        v32 = v30 << v11;
        v109[0] = v16;
        v109[1] = v17;
        v33 = v31 << v11;
        v108[0] = v30 << v11;
        v108[1] = v31 << v11;
        sub_1002E97AC((unsigned int *)v107, v109, v108, v18);
        v11 = v106;
        result = v107;
        ++v28;
        v29 += 2;
        v16 = v32;
        v17 = v33;
      }
      while (v104 != v28);
    }
    else
    {
      v18 = a4;
      if (a6)
      {
        v19 = 0;
        LODWORD(v20) = 0;
        v21 = a2 + 1;
        v22 = a2[1];
        v23 = *a2;
        do
        {
          v24 = *(v21 - 1);
          v25 = *v21;
          if (*v21 >= v22)
            v20 = v20;
          else
            v20 = v19;
          if (*v21 < v22)
            v22 = *v21;
          if (v13 <= v25)
            v13 = *v21;
          if (v12 <= v24)
            v12 = *(v21 - 1);
          if (v23 >= v24)
            v23 = *(v21 - 1);
          v26 = v24 << v11;
          v111[0] = v16;
          v111[1] = v17;
          v27 = v25 << v11;
          v110[0] = v24 << v11;
          v110[1] = v25 << v11;
          sub_1002E8F98(v107, v111, v110, v18);
          v11 = v106;
          result = v107;
          ++v19;
          v21 += 2;
          v16 = v26;
          v17 = v27;
        }
        while (v104 != v19);
      }
      else
      {
        v34 = 0;
        LODWORD(v20) = 0;
        v35 = a2 + 1;
        v22 = a2[1];
        v23 = *a2;
        do
        {
          v36 = *(v35 - 1);
          v37 = *v35;
          if (*v35 >= v22)
            v20 = v20;
          else
            v20 = v34;
          if (*v35 < v22)
            v22 = *v35;
          if (v13 <= v37)
            v13 = *v35;
          v38 = v36 << v11;
          v39 = v37 << v11;
          if (v12 <= v36)
            v12 = *(v35 - 1);
          if (v23 >= v36)
            v23 = *(v35 - 1);
          sub_1002E8DDC(v107, v16 >> 16, v17 >> 16, v38 >> 16, v39 >> 16, v18, a5);
          v11 = v106;
          result = v107;
          ++v34;
          v35 += 2;
          v16 = v38;
          v17 = v39;
        }
        while (v104 != v34);
      }
    }
  }
  __src = v18;
  v41 = a2;
  v40 = a3;
  v42 = a5;
  v43 = v100;
  if (a3 < 3)
    return result;
  v44 = 1 << v97 >> 1;
  if ((((v12 + v44) >> v97) & 0x80000000) != 0)
    return result;
  v45 = (v13 + v44) >> v97;
  if ((v45 & 0x80000000) != 0)
    return result;
  v46 = v97;
  if (v99 <= (int)((v23 + v44) >> v97))
    return result;
  v87 = (v22 + v44) >> v97;
  if ((int)v95 <= (int)v87)
    return result;
  v85 = 0;
  v86 = 0;
  v82 = (unint64_t)v88 << 15;
  if (v45 >= v95 - 1)
    LODWORD(v47) = v95 - 1;
  else
    v47 = (v13 + v44) >> v97;
  v113 = -65536;
  v105 = -65536;
  v112 = -65536;
  v48 = v90 + *(_QWORD *)(result + 80) * (int)v87;
  v91 = v47;
  if ((int)v87 <= (int)v47)
    v49 = v47;
  else
    v49 = (v22 + v44) >> v97;
  v89 = v49;
  v50 = -65536;
  LODWORD(v51) = (v22 + v44) >> v97;
  result = v20;
  v96 = (v22 + v44) >> v97;
  v52 = v51;
  v53 = a3;
  v83 = 1 << v97 >> 1;
  v84 = v97;
  while (1)
  {
    if (v42 >= 16 && v52 >= v91 && v52 != (_DWORD)v87)
    {
LABEL_83:
      if (v53 < 0)
        return result;
      v98 = result;
      if ((v52 & 0x80000000) == 0)
        goto LABEL_85;
      goto LABEL_64;
    }
    v55 = v96;
    if (v52 >= (int)v96)
    {
      v8 = __OFSUB__(v53--, 1);
      if (v53 < 0 == v8)
        break;
    }
LABEL_82:
    v96 = v55;
    if (v52 < (int)v51)
      goto LABEL_83;
    if (v53 < 1)
      return result;
    if (v43 + (int)v20 >= v40)
      v74 = v40;
    else
      v74 = 0;
    v75 = v43 + v20 - v74;
    v51 = (v41[2 * v75 + 1] + v44) >> v46;
    if (v52 >= (int)v51)
    {
      while (1)
      {
        v8 = __OFSUB__(v53--, 1);
        if ((v53 < 0) ^ v8 | (v53 == 0))
          return result;
        LODWORD(v20) = v75;
        v77 = v75 + v43;
        if (v77 >= v40)
          v78 = v40;
        else
          v78 = 0;
        v75 = v77 - v78;
        v51 = (v41[2 * v75 + 1] + v44) >> v46;
        if (v52 < (int)v51)
        {
          v76 = v75;
          --v53;
          goto LABEL_111;
        }
      }
    }
    v76 = v75;
    --v53;
LABEL_111:
    v79 = 2 * v76;
    v80 = v41[2 * (int)v20];
    v81 = 2 * ((v41[v79] - v80) << v11) + (int)v51 - v52;
    v105 = v80 << v11;
    v113 = v80 << v11;
    LODWORD(v20) = v75;
    v86 = v81 / (2 * ((int)v51 - v52));
    v98 = result;
    if ((v52 & 0x80000000) == 0)
    {
LABEL_85:
      v64 = (v111[4 * (v50 <= v105) + 3] + v82) >> 16;
      if ((v64 & 0x80000000) == 0)
      {
        v65 = (unint64_t)(v111[4 * (v50 > v105) + 3] + v93) >> 16;
        if (v99 > (int)v65)
        {
          v66 = v65 & ~((int)v65 >> 31);
          v67 = v99 - 1;
          if (v99 > (int)v64)
            v67 = (v111[4 * (v50 <= v105) + 3] + v82) >> 16;
          v68 = v66 * v94;
          v69 = (char *)(v48 + v66 * (int)v94);
          v70 = (int)v94 + (int)v94 * (uint64_t)v67;
          v71 = v48 + v70;
          if ((_DWORD)v94 == 1)
          {
            memset(v69, *__src, v71 - (_QWORD)v69);
          }
          else
          {
            v72 = v69;
            if (v68 < (int)v70)
            {
              memcpy(v69, __src, (int)v94);
              v72 = &v69[(int)v94];
            }
            if ((unint64_t)v72 < v71)
            {
              v73 = (int)v94;
              do
              {
                memcpy(v72, v69, v73);
                v72 += v73;
                if (v71 - (unint64_t)v72 >= 2 * v73)
                  v73 *= 2;
                else
                  v73 = v71 - (_QWORD)v72;
              }
              while (v71 > (unint64_t)v72);
            }
          }
        }
      }
    }
LABEL_64:
    v11 = v106;
    v50 += v85;
    v112 = v50;
    v105 += v86;
    v113 = v105;
    v48 += *(_QWORD *)(v107 + 80);
    v54 = v52++ == v89;
    v41 = a2;
    v40 = a3;
    v43 = v100;
    v44 = v83;
    v46 = v84;
    v42 = a5;
    result = v98;
    if (v54)
      return result;
  }
  if ((int)result + 1 >= v40)
    v56 = v40;
  else
    v56 = 0;
  v57 = (result + 1 - v56);
  if (v52 < (int)((v41[2 * (int)v57 + 1] + v44) >> v46))
  {
    v58 = (v41[2 * (int)v57 + 1] + v44) >> v46;
    v59 = (int)v57;
LABEL_81:
    v62 = v41[2 * (int)result];
    v63 = 2 * ((v41[2 * v59] - v62) << v11) + (int)v58 - v52;
    v50 = v62 << v11;
    v112 = v62 << v11;
    result = v57;
    v85 = v63 / (2 * ((int)v58 - v52));
    v55 = v58;
    goto LABEL_82;
  }
  while (v53 > 0)
  {
    result = v57;
    v60 = v57 + 1;
    if (v60 >= v40)
      v61 = v40;
    else
      v61 = 0;
    v57 = (v60 - v61);
    --v53;
    v58 = (v41[2 * (int)v57 + 1] + v44) >> v46;
    if (v52 < (int)v58)
    {
      v59 = (int)v57;
      goto LABEL_81;
    }
  }
  return result;
}

void sub_1002E69BC(unsigned int *a1, int64x2_t *a2, int64x2_t *a3, int a4, int a5, int a6, unsigned __int8 *a7, int a8, int a9)
{
  int v12;
  int64x2_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float64x2_t v18;
  int64x2_t v19;
  double *v20;
  double *v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  BOOL v34;
  char *v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  const double *v58;
  double *v59;
  uint64_t v60;
  const double *v61;
  double *v62;
  unsigned int *v63;
  int64x2_t *v64;
  char *v65;
  char *i8;
  _BYTE *v67;
  int64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  int64x2_t *v74;
  unint64_t v75;
  int64x2_t *v76;
  int64x2_t v77;
  char *v78;
  BOOL v79;
  BOOL v80;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  const double *v85;
  double *i64;
  uint64_t v87;
  const double *v88;
  double *v89;
  int v90;
  int v91;
  int v92;
  unsigned __int8 *v93;
  unsigned int *v94;
  uint64_t v96;
  void *__p;
  void *v98;
  uint64_t v99;
  void *v100;
  char *v101;
  char *v102;
  float64x2_t v103;
  float64x2_t v104;
  double *v105;
  double *v106;
  uint64_t v107;
  float64x2x2_t v108;
  float64x2x2_t v109;

  v12 = a5;
  v14 = vabsq_s64(*a3);
  *a3 = v14;
  v15 = v14.i64[1];
  if (v14.i64[0] > (unint64_t)v14.i64[1])
    v15 = v14.i64[0];
  v16 = (unint64_t)(v15 + 0x8000) >> 16;
  if ((int)v16 >= 3)
  {
    if (v16 >= 0xA)
    {
      if (v16 >= 0xF)
        v17 = 5;
      else
        v17 = 18;
    }
    else
    {
      v17 = 30;
    }
  }
  else
  {
    v17 = 90;
  }
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v18 = vcvtq_f64_s64(*a2);
  v103 = vcvtq_f64_s64(v14);
  v104 = v18;
  sub_1002E52E4((uint64_t *)&v104, v103.f64, a4, a5, a6, v17, &v105);
  v93 = a7;
  v94 = a1;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v21 = v105;
  v20 = v106;
  if (v106 == v105)
  {
    v63 = a1;
    v64 = a2;
    goto LABEL_60;
  }
  v90 = v12;
  v91 = a6;
  v92 = a8;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = -1;
  v26 = -1;
  do
  {
    v27 = &v21[2 * v23];
    v28 = *v27;
    v29 = v27[1];
    *(double *)v19.i64 = rint(*v27 * 0.0000152587891);
    v30 = (uint64_t)rint(v29 * 0.0000152587891) << 32 >> 16;
    v31 = ((uint64_t)*(double *)v19.i64 << 32 >> 16)
        + (int)(uint64_t)rint(*v27 - (double)((uint64_t)*(double *)v19.i64 << 32 >> 16));
    v32 = rint(v29 - (double)v30);
    v33 = v30 + (int)(uint64_t)v32;
    v34 = v31 == v25 && v33 == v26;
    if (!v34)
    {
      if (v22 < v102)
      {
        *(_QWORD *)v22 = v31;
        *((_QWORD *)v22 + 1) = v33;
        v22 += 16;
        goto LABEL_13;
      }
      v35 = (char *)v100;
      v36 = v22 - (_BYTE *)v100;
      v37 = (v22 - (_BYTE *)v100) >> 4;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 60)
        sub_100008F3C();
      v39 = v102 - (_BYTE *)v100;
      if ((v102 - (_BYTE *)v100) >> 3 > v38)
        v38 = v39 >> 3;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
        v40 = 0xFFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40 >> 60)
        sub_100008FF8();
      v41 = (char *)operator new(16 * v40);
      v42 = (uint64_t *)&v41[16 * v37];
      *v42 = v31;
      v42[1] = v33;
      if (v22 == v35)
      {
        v22 = (char *)(v42 + 2);
        v100 = &v41[16 * v37];
        v101 = (char *)(v42 + 2);
        v102 = &v41[16 * v40];
        if (!v35)
          goto LABEL_13;
        goto LABEL_32;
      }
      v43 = v22 - v35 - 16;
      if (v43 < 0x310)
        goto LABEL_29;
      v47 = v43 & 0xFFFFFFFFFFFFFFF0;
      if (&v41[v36 - 16 - (v43 & 0xFFFFFFFFFFFFFFF0)] > &v41[v36 - 16])
        goto LABEL_29;
      if (&v22[-v47 - 16] > v22 - 16)
        goto LABEL_29;
      v48 = (unint64_t)&v41[v36 - 8];
      if (v48 - v47 > v48)
        goto LABEL_29;
      v49 = v22 - 8;
      if (&v22[-v47 - 8] > v22 - 8)
        goto LABEL_29;
      v50 = v43 >> 4;
      v51 = v36 - v47;
      v52 = &v41[v51 - 16];
      v53 = &v41[v51 - 8] >= v22 || &v49[-16 * v50] >= (char *)v42;
      v54 = !v53;
      v55 = (unint64_t)&v22[-16 * v50 - 16] >= v48 || v52 >= v49;
      if (!v55 || v54)
      {
LABEL_29:
        v44 = v22;
        v45 = (uint64_t *)&v41[16 * v37];
      }
      else
      {
        v56 = v50 + 1;
        v57 = (v50 + 1) & 0x1FFFFFFFFFFFFFFCLL;
        v44 = &v22[-16 * v57];
        v45 = &v42[-2 * v57];
        v58 = (const double *)(v22 - 32);
        v59 = (double *)(v42 - 4);
        v60 = v57;
        do
        {
          *(float64x2x2_t *)&v32 = vld2q_f64(v58);
          v61 = v58 - 4;
          *(float64x2x2_t *)(&v19 - 1) = vld2q_f64(v61);
          vst2q_f64(v59, *(float64x2x2_t *)&v32);
          v62 = v59 - 4;
          vst2q_f64(v62, *(float64x2x2_t *)(&v19 - 1));
          v59 -= 8;
          v58 -= 8;
          v60 -= 4;
        }
        while (v60);
        if (v56 == v57)
        {
LABEL_31:
          v22 = (char *)(v42 + 2);
          v100 = v45;
          v101 = (char *)(v42 + 2);
          v102 = &v41[16 * v40];
          if (v35)
          {
LABEL_32:
            operator delete(v35);
            v21 = v105;
            v20 = v106;
          }
LABEL_13:
          v101 = v22;
          v25 = v31;
          v26 = v33;
          goto LABEL_14;
        }
      }
      do
      {
        v46 = *((_OWORD *)v44 - 1);
        v44 -= 16;
        v32 = *(double *)&v46;
        *((_OWORD *)v45 - 1) = v46;
        v45 -= 2;
      }
      while (v44 != v35);
      goto LABEL_31;
    }
LABEL_14:
    v23 = ++v24;
  }
  while (v24 < (unint64_t)(((char *)v20 - (char *)v21) >> 4));
  a6 = v91;
  a8 = v92;
  v12 = v90;
  v34 = v22 - (_BYTE *)v100 == 16;
  v63 = v94;
  v64 = a2;
  if (v34)
    sub_1002E5780((uint64_t)&v100, 2uLL, a2->i64, v32, v28, v29, v19);
LABEL_60:
  if (a8 < 0)
  {
    if (a6 - v12 < 360)
    {
      v65 = v101;
      if (v101 >= v102)
      {
        v67 = v100;
        v68 = v101 - (_BYTE *)v100;
        v69 = (v101 - (_BYTE *)v100) >> 4;
        v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 60)
          sub_100008F3C();
        v71 = v102 - (_BYTE *)v100;
        if ((v102 - (_BYTE *)v100) >> 3 > v70)
          v70 = v71 >> 3;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0)
          v72 = 0xFFFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72 >> 60)
          sub_100008FF8();
        v73 = (char *)operator new(16 * v72);
        v74 = (int64x2_t *)&v73[16 * v69];
        *v74 = *v64;
        i8 = v74[1].i8;
        if (v65 == v67)
        {
          v76 = v74;
        }
        else
        {
          v75 = v65 - v67 - 16;
          if (v75 < 0x130)
            goto LABEL_75;
          v78 = &v65[-(v75 & 0xFFFFFFFFFFFFFFF0)];
          v79 = &v73[v68 - 8 - (v75 & 0xFFFFFFFFFFFFFFF0)] >= v65 || v78 - 8 >= (char *)v74;
          v80 = !v79;
          if (v78 - 16 < &v73[v68 - 8] && &v73[v68 - (v75 & 0xFFFFFFFFFFFFFFF0) - 16] < v65 - 8)
            goto LABEL_75;
          if (v80)
            goto LABEL_75;
          v82 = (v75 >> 4) + 1;
          v83 = 16 * (v82 & 0x1FFFFFFFFFFFFFFCLL);
          v84 = &v65[-v83];
          v76 = &v74[v83 / 0xFFFFFFFFFFFFFFF0];
          v85 = (const double *)(v65 - 32);
          i64 = (double *)v74[-2].i64;
          v87 = v82 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v108 = vld2q_f64(v85);
            v88 = v85 - 4;
            v109 = vld2q_f64(v88);
            vst2q_f64(i64, v108);
            v89 = i64 - 4;
            vst2q_f64(v89, v109);
            i64 -= 8;
            v85 -= 8;
            v87 -= 4;
          }
          while (v87);
          v65 = v84;
          v74 = v76;
          if (v82 != (v82 & 0x1FFFFFFFFFFFFFFCLL))
          {
LABEL_75:
            v76 = v74;
            do
            {
              v77 = *((int64x2_t *)v65 - 1);
              v65 -= 16;
              v76[-1] = v77;
              --v76;
            }
            while (v65 != v67);
          }
        }
        v100 = v76;
        v101 = i8;
        v102 = &v73[16 * v72];
        if (v67)
          operator delete(v67);
      }
      else
      {
        *(int64x2_t *)v101 = *v64;
        i8 = v65 + 16;
      }
      v101 = i8;
      __p = 0;
      v98 = 0;
      v99 = 0;
      v96 = 0;
      sub_1002E79C8(v63, (uint64_t)v100, (unint64_t)(i8 - (_BYTE *)v100) >> 4, (char **)&__p, v93, a9, 16, (int *)&v96);
      sub_1002E7D28((uint64_t)v63, (uint64_t)&__p, v93);
      if (__p)
      {
        v98 = __p;
        operator delete(__p);
      }
    }
    else
    {
      sub_1002E62D8((uint64_t)v63, v100, (unint64_t)(v101 - (_BYTE *)v100) >> 4, v93, a9, 16);
    }
  }
  else
  {
    sub_1002E6130(v63);
  }
  if (v100)
  {
    v101 = (char *)v100;
    operator delete(v100);
  }
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
}

void sub_1002E6FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;
  void *v22;

  if (__p)
  {
    operator delete(__p);
    v21 = a18;
    if (!a18)
    {
LABEL_3:
      v22 = *(void **)(v19 - 112);
      if (!v22)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v21 = a18;
    if (!a18)
      goto LABEL_3;
  }
  operator delete(v21);
  v22 = *(void **)(v19 - 112);
  if (!v22)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(v19 - 104) = v22;
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002E7034(_QWORD *result, _DWORD *a2, int a3, unsigned __int8 *a4, int a5)
{
  int v5;
  unsigned int *v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  signed int v24;
  signed int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  size_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  size_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  size_t v55;
  uint64_t v56;
  char *v57;
  size_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  size_t v64;
  int v65;
  int v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  int v73;
  char *v74;
  int v75;
  size_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  size_t v82;
  int v83;
  unsigned int v84;
  int v85;
  int v87;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  _BOOL4 v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;

  v5 = a3;
  v6 = (unsigned int *)result[8];
  v85 = v6[1];
  v7 = *((_DWORD *)result + 1);
  v8 = __OFSUB__(v7, 1);
  v9 = v7 - 1;
  if (v9 < 0 != v8)
    LODWORD(v93) = 0;
  else
    v93 = *(_QWORD *)(result[9] + 8 * v9);
  v84 = *v6;
  v10 = *a2 >= a3 && *a2 < v85 - a3;
  if (v10 && (v11 = a2[1], v11 >= a3))
  {
    v92 = v11 < (int)(v84 - a3);
    if (a3 < 0)
      return result;
  }
  else
  {
    v92 = 0;
    if (a3 < 0)
      return result;
  }
  v12 = 0;
  v13 = 0;
  v14 = 2 * a3 - 1;
  v89 = result[2];
  v90 = result[10];
  v83 = v85 - 1;
  v15 = 1;
  v91 = a2;
  do
  {
    v23 = a2[1];
    v24 = v23 - v12;
    v25 = v23 + v12;
    v26 = *a2 - v5;
    v27 = *a2 + v5;
    v103 = v15;
    v104 = v14;
    if (v92)
    {
      v96 = v23 + v5;
      v98 = *a2 + v12;
      v28 = v89 + v90 * v24;
      v29 = v89 + v90 * v25;
      v30 = v26 * (uint64_t)(int)v93;
      v31 = (char *)(v28 + v30);
      v100 = *a2 - v12;
      v94 = v23 - v5;
      if (a5)
      {
        v32 = (int)v93 + (int)v93 * (uint64_t)v27;
        v33 = v28 + v32;
        if ((_DWORD)v93 == 1)
        {
          memset((void *)(v28 + v30), *a4, v33 - (_QWORD)v31);
          result = memset((void *)(v29 + v30), *a4, v32 - v30);
        }
        else
        {
          v38 = (char *)(v28 + v30);
          if ((int)v30 < (int)v32)
          {
            result = memcpy(v31, a4, (int)v93);
            v38 = &v31[(int)v93];
          }
          if ((unint64_t)v38 < v33)
          {
            v39 = (int)v93;
            do
            {
              result = memcpy(v38, v31, v39);
              v38 += v39;
              if (v33 - (unint64_t)v38 >= 2 * v39)
                v39 *= 2;
              else
                v39 = v33 - (_QWORD)v38;
            }
            while (v33 > (unint64_t)v38);
          }
          v40 = (char *)(v29 + v30);
          v41 = (char *)(v29 + v30);
          if ((int)v30 < (int)v32)
          {
            result = memcpy((void *)(v29 + v30), a4, (int)v93);
            v41 = &v40[(int)v93];
          }
          v42 = v29 + v32;
          if ((unint64_t)v41 < v29 + v32)
          {
            v43 = (int)v93;
            do
            {
              result = memcpy(v41, v40, v43);
              v41 += v43;
              if (v42 - (unint64_t)v41 >= 2 * v43)
                v43 *= 2;
              else
                v43 = v42 - (_QWORD)v41;
            }
            while (v42 > (unint64_t)v41);
          }
        }
        v44 = v89 + v90 * v94;
        v45 = v89 + v90 * v96;
        v46 = (int)v93 * (uint64_t)v100;
        v47 = (char *)(v44 + v46);
        v48 = (int)v93 + (int)v93 * (uint64_t)v98;
        v49 = v44 + v48;
        if ((_DWORD)v93 == 1)
        {
          memset(v47, *a4, v49 - (_QWORD)v47);
          result = memset((void *)(v45 + v46), *a4, v48 - v46);
        }
        else
        {
          v50 = (char *)(v44 + v46);
          if ((int)v46 < (int)v48)
          {
            result = memcpy(v47, a4, (int)v93);
            v50 = &v47[(int)v93];
          }
          if ((unint64_t)v50 < v49)
          {
            v51 = (int)v93;
            do
            {
              result = memcpy(v50, v47, v51);
              v50 += v51;
              if (v49 - (unint64_t)v50 >= 2 * v51)
                v51 *= 2;
              else
                v51 = v49 - (_QWORD)v50;
            }
            while (v49 > (unint64_t)v50);
          }
          v52 = (char *)(v45 + v46);
          v53 = (char *)(v45 + v46);
          if ((int)v46 < (int)v48)
          {
            result = memcpy((void *)(v45 + v46), a4, (int)v93);
            v53 = &v52[(int)v93];
          }
          v54 = v45 + v48;
          if ((unint64_t)v53 < v54)
          {
            v55 = (int)v93;
            do
            {
              result = memcpy(v53, v52, v55);
              v53 += v55;
              if (v54 - (unint64_t)v53 >= 2 * v55)
                v55 *= 2;
              else
                v55 = v54 - (_QWORD)v53;
            }
            while (v54 > (unint64_t)v53);
          }
        }
      }
      else
      {
        v16 = *a2 + v5;
        memcpy((void *)(v28 + v30), a4, (int)v93);
        memcpy((void *)(v29 + v30), a4, (int)v93);
        memcpy((void *)(v28 + (int)v93 * (uint64_t)v16), a4, (int)v93);
        memcpy((void *)(v29 + (int)v93 * (uint64_t)v16), a4, (int)v93);
        v17 = v89 + v90 * v94;
        v18 = v89 + v90 * v96;
        memcpy((void *)(v17 + (int)v93 * (uint64_t)v100), a4, (int)v93);
        memcpy((void *)(v18 + (int)v93 * (uint64_t)v100), a4, (int)v93);
        memcpy((void *)(v17 + (int)v93 * (uint64_t)v98), a4, (int)v93);
        result = memcpy((void *)(v18 + (int)v93 * (uint64_t)v98), a4, (int)v93);
      }
    }
    else if (v26 < v85 && (v27 & 0x80000000) == 0 && v23 - v5 < (int)v84 && ((v23 + v5) & 0x80000000) == 0)
    {
      v99 = *a2 + v12;
      v101 = *a2 - v12;
      v95 = v23 - v5;
      v97 = (v23 + v5);
      if (a5)
      {
        v26 &= ~(v26 >> 31);
        if (v27 >= v83)
          v27 = v85 - 1;
        v87 = v27;
        if (v24 < v84)
        {
          v34 = v89 + v90 * v24;
          v35 = (char *)(v34 + v26 * (uint64_t)(int)v93);
          v36 = (int)v93 + (int)v93 * (uint64_t)v27;
          v37 = v34 + v36;
          if ((_DWORD)v93 == 1)
          {
            result = memset(v35, *a4, v37 - (_QWORD)v35);
          }
          else
          {
            v57 = (char *)(v34 + v26 * (uint64_t)(int)v93);
            if (v26 * (int)v93 < (int)v36)
            {
              result = memcpy(v35, a4, (int)v93);
              v57 = &v35[(int)v93];
            }
            if ((unint64_t)v57 < v37)
            {
              v58 = (int)v93;
              do
              {
                result = memcpy(v57, v35, v58);
                v57 += v58;
                if (v37 - (unint64_t)v57 >= 2 * v58)
                  v58 *= 2;
                else
                  v58 = v37 - (_QWORD)v57;
              }
              while (v37 > (unint64_t)v57);
            }
          }
        }
      }
      else
      {
        v87 = *a2 + v5;
        if (v24 < v84)
        {
          v56 = v89 + v90 * v24;
          if ((v26 & 0x80000000) == 0)
          {
            result = memcpy((void *)(v56 + v26 * (uint64_t)(int)v93), a4, (int)v93);
            v27 = v87;
          }
          if (v27 < v85)
            result = memcpy((void *)(v56 + v27 * (uint64_t)(int)v93), a4, (int)v93);
        }
      }
      if (v25 < v84)
      {
        v59 = v89 + v90 * v25;
        if (a5)
        {
          v60 = (char *)(v59 + v26 * (uint64_t)(int)v93);
          v61 = (int)v93 + (int)v93 * (uint64_t)v87;
          v62 = v59 + v61;
          if ((_DWORD)v93 == 1)
          {
            result = memset(v60, *a4, v62 - (_QWORD)v60);
          }
          else
          {
            v63 = v60;
            if (v26 * (int)v93 < (int)v61)
            {
              result = memcpy(v60, a4, (int)v93);
              v63 = &v60[(int)v93];
            }
            if ((unint64_t)v63 < v62)
            {
              v64 = (int)v93;
              do
              {
                result = memcpy(v63, v60, v64);
                v63 += v64;
                if (v62 - (unint64_t)v63 >= 2 * v64)
                  v64 *= 2;
                else
                  v64 = v62 - (_QWORD)v63;
              }
              while (v62 > (unint64_t)v63);
            }
          }
        }
        else
        {
          if ((v26 & 0x80000000) == 0)
            result = memcpy((void *)(v59 + v26 * (uint64_t)(int)v93), a4, (int)v93);
          if (v87 < v85)
            result = memcpy((void *)(v59 + v87 * (uint64_t)(int)v93), a4, (int)v93);
        }
      }
      v66 = v99;
      v65 = v101;
      if (v101 < v85 && (v99 & 0x80000000) == 0)
      {
        if (a5)
        {
          v65 = v101 & ~(v101 >> 31);
          if (v99 >= v83)
            v66 = v85 - 1;
          else
            v66 = v99;
          if (v95 < v84)
          {
            v67 = v89 + v90 * (int)v95;
            v68 = (char *)(v67 + v65 * (uint64_t)(int)v93);
            v69 = (int)v93 + (int)v93 * (uint64_t)v66;
            v70 = v67 + v69;
            if ((_DWORD)v93 == 1)
            {
              result = memset(v68, *a4, v70 - (_QWORD)v68);
              v65 = v101 & ~(v101 >> 31);
            }
            else
            {
              v74 = (char *)(v67 + v65 * (uint64_t)(int)v93);
              if (v65 * (int)v93 < (int)v69)
              {
                result = memcpy(v68, a4, (int)v93);
                v65 = v101 & ~(v101 >> 31);
                v74 = &v68[(int)v93];
              }
              if ((unint64_t)v74 < v70)
              {
                v102 = v65;
                v75 = v66;
                v76 = (int)v93;
                do
                {
                  result = memcpy(v74, v68, v76);
                  v74 += v76;
                  if (v70 - (unint64_t)v74 >= 2 * v76)
                    v76 *= 2;
                  else
                    v76 = v70 - (_QWORD)v74;
                }
                while (v70 > (unint64_t)v74);
                v66 = v75;
                v65 = v102;
              }
            }
          }
        }
        else if (v95 < v84)
        {
          v71 = v89 + v90 * (int)v95;
          if ((v101 & 0x80000000) == 0)
          {
            result = memcpy((void *)(v71 + v101 * (uint64_t)(int)v93), a4, (int)v93);
            v65 = v101;
          }
          if (v99 < v85)
          {
            v72 = (void *)(v71 + v99 * (uint64_t)(int)v93);
            v73 = v65;
            result = memcpy(v72, a4, (int)v93);
            v65 = v73;
          }
        }
        if (v97 < v84)
        {
          v77 = v89 + v90 * v97;
          if (a5)
          {
            v78 = (char *)(v77 + v65 * (uint64_t)(int)v93);
            v79 = (int)v93 + (int)v93 * (uint64_t)v66;
            v80 = v77 + v79;
            if ((_DWORD)v93 == 1)
            {
              result = memset(v78, *a4, v80 - (_QWORD)v78);
            }
            else
            {
              v81 = v78;
              if (v65 * (int)v93 < (int)v79)
              {
                result = memcpy(v78, a4, (int)v93);
                v81 = &v78[(int)v93];
              }
              if ((unint64_t)v81 < v80)
              {
                v82 = (int)v93;
                do
                {
                  result = memcpy(v81, v78, v82);
                  v81 += v82;
                  if (v80 - (unint64_t)v81 >= 2 * v82)
                    v82 *= 2;
                  else
                    v82 = v80 - (_QWORD)v81;
                }
                while (v80 > (unint64_t)v81);
              }
            }
          }
          else
          {
            if ((v65 & 0x80000000) == 0)
              result = memcpy((void *)(v77 + v65 * (uint64_t)(int)v93), a4, (int)v93);
            if (v66 < v85)
              result = memcpy((void *)(v77 + v66 * (uint64_t)(int)v93), a4, (int)v93);
          }
        }
      }
    }
    v15 = v103 + 2;
    if ((v103 + v13 < 0) ^ __OFADD__(v103, v13) | (v103 + v13 == 0))
      v19 = 0;
    else
      v19 = 1;
    if ((v103 + v13 < 0) ^ __OFADD__(v103, v13) | (v103 + v13 == 0))
      v20 = 0;
    else
      v20 = -1;
    v21 = v104 & v20;
    if ((v103 + v13 < 0) ^ __OFADD__(v103, v13) | (v103 + v13 == 0))
      v22 = 0;
    else
      v22 = -2;
    v13 = v103 + v13 - v21;
    v5 -= v19;
    v14 = v22 + v104;
    v10 = v5 <= v12++;
    a2 = v91;
  }
  while (!v10);
  return result;
}

void sub_1002E79C8(unsigned int *a1, uint64_t a2, int a3, char **a4, _BYTE *a5, int a6, char a7, int *a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char **v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v66;
  uint64_t v71[2];
  uint64_t v72[2];

  v10 = a2 + 16 * a3;
  v12 = *(_QWORD *)(v10 - 16);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = *a8;
  v14 = a8[1];
  v16 = *a4;
  v15 = a4[1];
  v17 = (v15 - *a4) >> 5;
  v18 = v17 + a3;
  if (v18 > (a4[2] - *a4) >> 5)
  {
    if (v18 >> 59)
LABEL_67:
      sub_100008F3C();
    v19 = 32 * v18;
    v20 = (char *)operator new(32 * v18);
    v21 = &v20[32 * v17];
    if (v15 != v16)
    {
      v22 = &v20[32 * v17];
      do
      {
        v23 = *((_OWORD *)v15 - 1);
        v21 = v22 - 32;
        *((_OWORD *)v22 - 2) = *((_OWORD *)v15 - 2);
        *((_OWORD *)v22 - 1) = v23;
        v15 -= 32;
        v22 -= 32;
      }
      while (v15 != v16);
    }
    *a4 = v21;
    a4[1] = &v20[32 * v17];
    a4[2] = &v20[v19];
    if (v16)
      operator delete(v16);
  }
  v24 = a6;
  if (a3 >= 1)
  {
    v25 = 0;
    v26 = a7;
    v27 = v14 + (1 << a7 >> 1);
    v28 = v12 + v13;
    v29 = 16 - a7;
    v30 = v28 << (16 - a7);
    v66 = a3;
    v31 = (v11 + v27) >> a7;
    v62 = v27;
    v63 = a7;
    v61 = 16 - a7;
    do
    {
      v33 = (_QWORD *)(a2 + 16 * v25);
      v34 = (*v33 + *a8) << v29;
      v35 = (v33[1] + v27) >> v26;
      if (v24 > 15)
      {
        v72[0] = v30;
        v72[1] = v31 << 16;
        v71[0] = v34;
        v71[1] = v35 << 16;
        sub_1002E97AC(a1, v72, v71, a5);
        if (v35 == v31)
          goto LABEL_12;
      }
      else
      {
        v36 = (v30 + 0x8000) >> 16;
        if (v36 <= (uint64_t)0xFFFFFFFF80000000)
          v36 = 0xFFFFFFFF80000000;
        if (v36 >= 0x7FFFFFFF)
          v37 = 0x7FFFFFFF;
        else
          v37 = v36;
        if (v31 <= (uint64_t)0xFFFFFFFF80000000)
          v38 = 0xFFFFFFFF80000000;
        else
          v38 = v31;
        if (v38 >= 0x7FFFFFFF)
          v39 = 0x7FFFFFFF;
        else
          v39 = v38;
        if ((v34 + 0x8000) >> 16 <= (uint64_t)0xFFFFFFFF80000000)
          v40 = 0xFFFFFFFF80000000;
        else
          v40 = (v34 + 0x8000) >> 16;
        if (v40 >= 0x7FFFFFFF)
          v41 = 0x7FFFFFFF;
        else
          v41 = v40;
        if (v35 <= (uint64_t)0xFFFFFFFF80000000)
          v42 = 0xFFFFFFFF80000000;
        else
          v42 = v35;
        if (v42 >= 0x7FFFFFFF)
          v43 = 0x7FFFFFFF;
        else
          v43 = v42;
        sub_1002E8DDC((uint64_t)a1, v37, v39, v41, v43, a5, v24);
        if (v35 == v31)
          goto LABEL_12;
      }
      if (v31 >= v35)
        v44 = v35;
      else
        v44 = v31;
      if (v31 <= v35)
        v45 = v35;
      else
        v45 = v31;
      v46 = v35 - v31;
      if (v35 <= v31)
        v47 = v34;
      else
        v47 = v30;
      v48 = a4;
      v50 = a4[1];
      v49 = (unint64_t)a4[2];
      v51 = (v34 - v30) / v46;
      if ((unint64_t)v50 < v49)
      {
        *(_DWORD *)v50 = v44;
        *((_DWORD *)v50 + 1) = v45;
        *((_QWORD *)v50 + 1) = v47;
        *((_QWORD *)v50 + 2) = v51;
        v32 = v50 + 32;
        *((_QWORD *)v50 + 3) = 0;
        v24 = a6;
        v29 = v61;
      }
      else
      {
        v52 = *a4;
        v53 = (v50 - *a4) >> 5;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 59)
          goto LABEL_67;
        v55 = v49 - (_QWORD)v52;
        if (v55 >> 4 > v54)
          v54 = v55 >> 4;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0)
          v54 = 0x7FFFFFFFFFFFFFFLL;
        v60 = v54;
        if (v54)
        {
          if (v54 >> 59)
            sub_100008FF8();
          v56 = (char *)operator new(32 * v54);
        }
        else
        {
          v56 = 0;
        }
        v57 = &v56[32 * v53];
        *(_DWORD *)v57 = v44;
        *((_DWORD *)v57 + 1) = v45;
        *((_QWORD *)v57 + 1) = v47;
        *((_QWORD *)v57 + 2) = v51;
        *((_QWORD *)v57 + 3) = 0;
        v58 = v57;
        if (v50 != v52)
        {
          v24 = a6;
          v29 = v61;
          do
          {
            v59 = *((_OWORD *)v50 - 1);
            *((_OWORD *)v58 - 2) = *((_OWORD *)v50 - 2);
            *((_OWORD *)v58 - 1) = v59;
            v58 -= 32;
            v50 -= 32;
          }
          while (v50 != v52);
          v48 = a4;
          v50 = *a4;
          v32 = v57 + 32;
          *a4 = v58;
          a4[1] = v57 + 32;
          a4[2] = &v56[32 * v60];
          if (!v50)
            goto LABEL_11;
LABEL_65:
          operator delete(v50);
          goto LABEL_11;
        }
        v48 = a4;
        v24 = a6;
        v29 = v61;
        v32 = v57 + 32;
        *a4 = v57;
        a4[1] = v57 + 32;
        a4[2] = &v56[32 * v60];
        if (v50)
          goto LABEL_65;
      }
LABEL_11:
      v48[1] = v32;
      v27 = v62;
      v26 = v63;
LABEL_12:
      ++v25;
      v31 = v35;
      v30 = v34;
    }
    while (v25 != v66);
  }
}

void sub_1002E7D28(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  signed __int32 *v11;
  unint64_t v12;
  int8x8_t v13;
  unint64_t v14;
  signed __int32 v15;
  int8x8_t v16;
  signed __int32 v17;
  uint64_t v18;
  int64x2_t v19;
  __int32 *v20;
  int32x2_t v21;
  int64x2_t v22;
  int32x2_t v23;
  unint64_t v24;
  int32x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int32x2_t v28;
  __int32 *v29;
  __int32 *v30;
  const double *v31;
  const double *v32;
  __int32 v33;
  int32x2_t v34;
  __int32 *v35;
  int32x2_t v36;
  int32x2_t v37;
  int32x2_t v38;
  int32x2_t v39;
  int32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int32x2_t v51;
  int8x16_t v52;
  uint64_t v53;
  int8x16_t v54;
  int32x2_t v55;
  signed __int32 v56;
  int8x8_t *v57;
  unint64_t v58;
  signed __int32 v59;
  signed __int32 v60;
  int8x8_t v61;
  int8x8_t v62;
  int8x8_t v63;
  int8x8_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _OWORD *v68;
  __int128 v69;
  _OWORD *v70;
  _OWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  signed __int32 v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *i;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  size_t v105;
  __int128 *v106;
  int v107;
  uint64_t v108;
  __int128 *v109;
  __int128 *v110;
  signed __int32 v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  char v121;
  float64x2x4_t v122;
  float64x2x4_t v123;

  v3 = (uint64_t *)a2;
  v119 = 0u;
  v120 = 0u;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *v3;
  v7 = v5 - *v3;
  v117 = v7 >> 5;
  v8 = *(_DWORD *)(a1 + 4);
  v9 = __OFSUB__(v8, 1);
  v10 = v8 - 1;
  v114 = a1;
  if (v10 < 0 != v9)
  {
    LODWORD(v113) = 0;
    if ((int)v117 <= 1)
      return;
  }
  else
  {
    v113 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v10);
    if ((int)v117 <= 1)
      return;
  }
  v11 = *(signed __int32 **)(a1 + 64);
  v115 = v11[1];
  v12 = ((unint64_t)v7 >> 5);
  v13 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
  if (v12 >= 5)
  {
    v18 = ((unint64_t)v7 >> 5) & 3;
    v19 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    if (!v18)
      v18 = 4;
    v14 = v12 - v18;
    v20 = (__int32 *)(v6 + 64);
    v21 = (int32x2_t)0x8000000080000000;
    v22.i64[0] = -1;
    v22.i64[1] = -1;
    v23 = (int32x2_t)0x8000000080000000;
    v24 = v14;
    v25 = (int32x2_t)0x8000000080000000;
    v26 = v19;
    v27.i64[0] = -1;
    v27.i64[1] = -1;
    v28 = (int32x2_t)0x8000000080000000;
    do
    {
      v29 = v20 - 8;
      v30 = v20 + 8;
      v31 = (const double *)(v20 - 14);
      v32 = (const double *)(v20 + 2);
      v122 = vld4q_f64(v31);
      v123 = vld4q_f64(v32);
      v33 = *(v20 - 16);
      v34.i32[0] = *(v20 - 15);
      v34.i32[1] = *(v20 - 7);
      v35 = v20 + 9;
      v37.i32[0] = *v20;
      v36.i32[0] = v20[1];
      v20 += 32;
      v36.i32[1] = *v35;
      v38.i32[0] = v33;
      v38.i32[1] = *v29;
      v37.i32[1] = *v30;
      v39 = vsub_s32(v36, v37);
      v40 = vsub_s32(v34, v38);
      v41 = *(_QWORD *)&v122.val[1].f64[1] * v40.i32[1];
      v42 = *(_QWORD *)&v123.val[1].f64[1] * v39.i32[1];
      v43 = v39.i32[0];
      v44.i64[0] = *(_QWORD *)&v122.val[1].f64[0] * v40.i32[0];
      v45.i64[0] = *(_QWORD *)&v123.val[1].f64[0] * v43;
      v45.i64[1] = v42;
      v44.i64[1] = v41;
      v21 = vmin_s32(v38, v21);
      v28 = vmin_s32(v37, v28);
      v23 = vmax_s32(v23, v34);
      v25 = vmax_s32(v25, v36);
      v46 = vaddq_s64(v45, (int64x2_t)v123.val[0]);
      v47 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v19, (int64x2_t)v122.val[0]), (int8x16_t)v122.val[0], (int8x16_t)v19);
      v48 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v26, (int64x2_t)v123.val[0]), (int8x16_t)v123.val[0], (int8x16_t)v26);
      v49 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v22, (int64x2_t)v122.val[0]), (int8x16_t)v22, (int8x16_t)v122.val[0]);
      v122.val[0] = (float64x2_t)vaddq_s64(v44, (int64x2_t)v122.val[0]);
      v50 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v27, (int64x2_t)v123.val[0]), (int8x16_t)v27, (int8x16_t)v123.val[0]);
      v26 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v48, v46), (int8x16_t)v46, (int8x16_t)v48);
      v19 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v47, (int64x2_t)v122.val[0]), (int8x16_t)v122.val[0], (int8x16_t)v47);
      v22 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v49, (int64x2_t)v122.val[0]), (int8x16_t)v49, (int8x16_t)v122.val[0]);
      v27 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v50, v46), (int8x16_t)v50, (int8x16_t)v46);
      v24 -= 4;
    }
    while (v24);
    v51 = vmin_s32(v21, v28);
    v15 = vpmin_s32(v51, v51).u32[0];
    v52 = vbslq_s8((int8x16_t)vcgtq_s64(v22, v27), (int8x16_t)v22, (int8x16_t)v27);
    v53 = vextq_s8(v52, v52, 8uLL).u64[0];
    v16 = vbsl_s8((int8x8_t)vcgtd_s64(v52.i64[0], v53), *(int8x8_t *)v52.i8, (int8x8_t)v53);
    v54 = vbslq_s8((int8x16_t)vcgtq_s64(v26, v19), (int8x16_t)v19, (int8x16_t)v26);
    v52.i64[0] = vextq_s8(v54, v54, 8uLL).u64[0];
    v13 = vbsl_s8((int8x8_t)vcgtd_s64(v52.i64[0], v54.i64[0]), *(int8x8_t *)v54.i8, *(int8x8_t *)v52.i8);
    v55 = vmax_s32(v23, v25);
    v17 = vpmax_s32(v55, v55).u32[0];
  }
  else
  {
    v14 = 0;
    v15 = 0x7FFFFFFF;
    v16 = (int8x8_t)-1;
    v17 = 0x80000000;
  }
  v56 = *v11;
  v57 = (int8x8_t *)(v6 + 32 * v14 + 8);
  v58 = v12 - v14;
  do
  {
    v60 = v57[-1].i32[0];
    v59 = v57[-1].i32[1];
    v61 = *v57;
    v62 = v57[1];
    v57 += 4;
    v63 = (int8x8_t)(*(_QWORD *)&v61 + *(_QWORD *)&v62 * (v59 - v60));
    if (v60 < v15)
      v15 = v60;
    if (v17 <= v59)
      v17 = v59;
    if (*(_QWORD *)&v61 >= *(_QWORD *)&v13)
      v64 = v13;
    else
      v64 = v61;
    if (*(_QWORD *)&v16 <= *(_QWORD *)&v61)
      v16 = v61;
    if (*(_QWORD *)&v63 >= *(_QWORD *)&v64)
      v13 = v64;
    else
      v13 = v63;
    if (*(_QWORD *)&v16 <= *(_QWORD *)&v63)
      v16 = v63;
    --v58;
  }
  while (v58);
  if ((v17 & 0x80000000) == 0
    && v15 < v56
    && (*(_QWORD *)&v16 & 0x8000000000000000) == 0
    && *(_QWORD *)&v13 < v115 << 16)
  {
    v65 = 126 - 2 * __clz(v117);
    v66 = v5 == v6 ? 0 : v65;
    sub_1002EABB0(v6, v5, (uint64_t)&v121, v66, 1);
    LODWORD(v119) = 0x7FFFFFFF;
    v68 = (_OWORD *)v3[1];
    v67 = v3[2];
    if ((unint64_t)v68 >= v67)
    {
      v71 = (_OWORD *)*v3;
      v72 = ((uint64_t)v68 - *v3) >> 5;
      v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 59)
        sub_100008F3C();
      v74 = v67 - (_QWORD)v71;
      if (v74 >> 4 > v73)
        v73 = v74 >> 4;
      v75 = (unint64_t)v74 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v73;
      if (v75)
      {
        if (v75 >> 59)
          sub_100008FF8();
        v76 = (char *)operator new(32 * v75);
      }
      else
      {
        v76 = 0;
      }
      v77 = &v76[32 * v72];
      v78 = v120;
      *(_OWORD *)v77 = v119;
      *((_OWORD *)v77 + 1) = v78;
      v70 = v77 + 32;
      if (v68 != v71)
      {
        do
        {
          v79 = *(v68 - 1);
          *((_OWORD *)v77 - 2) = *(v68 - 2);
          *((_OWORD *)v77 - 1) = v79;
          v77 -= 32;
          v68 -= 2;
        }
        while (v68 != v71);
        v68 = (_OWORD *)*v3;
      }
      *v3 = (uint64_t)v77;
      v3[1] = (uint64_t)v70;
      v3[2] = (uint64_t)&v76[32 * v75];
      if (v68)
        operator delete(v68);
    }
    else
    {
      v69 = v120;
      *v68 = v119;
      v68[1] = v69;
      v70 = v68 + 2;
    }
    v3[1] = (uint64_t)v70;
    *((_QWORD *)&v120 + 1) = 0;
    v80 = *v3;
    v81 = v17 >= v56 ? v56 : v17;
    v82 = *(_DWORD *)v80;
    v111 = v81;
    if (*(_DWORD *)v80 < v81)
    {
      v83 = 0;
      v116 = v3;
LABEL_58:
      v84 = 0;
      v85 = *((_QWORD *)&v120 + 1);
      v86 = v82;
      for (i = &v119; ; i = (__int128 *)v88)
      {
        v88 = v85;
        if (!v85)
          break;
        while (*(_DWORD *)(v88 + 4) == (_DWORD)v86)
        {
          *((_QWORD *)i + 3) = *(_QWORD *)(v88 + 24);
          v88 = *(_QWORD *)(v88 + 24);
          if (!v88)
            goto LABEL_65;
        }
        if (*(_DWORD *)v80 <= (int)v86 && *(_QWORD *)(v88 + 8) >= *(_QWORD *)(v80 + 8))
        {
          if ((int)v83 >= (int)v117)
            goto LABEL_94;
LABEL_71:
          *((_QWORD *)i + 3) = v80;
          *(_QWORD *)(v80 + 24) = v88;
          v83 = (v83 + 1);
          v90 = *v3 + 32 * (int)v83;
          v85 = v88;
          v88 = v80;
          if (!v84)
            goto LABEL_61;
          goto LABEL_76;
        }
        v85 = *(_QWORD *)(v88 + 24);
        v90 = v80;
        if (!v84)
          goto LABEL_61;
LABEL_76:
        v118 = v83;
        if ((v86 & 0x80000000) == 0)
        {
          v91 = *((_QWORD *)i + 1);
          v92 = *(_QWORD *)(v88 + 8);
          v89 = v91 <= v92;
          v93 = (unint64_t)(v91 + 0xFFFF) >> 16;
          v94 = (unint64_t)v92 >> 16;
          v95 = (v92 + 0xFFFF) >> 16;
          v96 = v91 >> 16;
          if (v89)
          {
            LODWORD(v95) = v93;
            LODWORD(v96) = v94;
          }
          if ((int)v115 > (int)v95 && (v96 & 0x80000000) == 0)
          {
            v97 = *(_QWORD *)(v114 + 16) + **(_QWORD **)(v114 + 72) * v86;
            v98 = v95 & ~((int)v95 >> 31);
            v99 = v115 - 1;
            if ((int)v115 > (int)v96)
              v99 = v96;
            v100 = v98 * v113;
            v101 = (char *)(v97 + v98 * (int)v113);
            v102 = (int)v113 + (int)v113 * (uint64_t)v99;
            v103 = v97 + v102;
            if ((_DWORD)v113 == 1)
            {
              memset(v101, *a3, v103 - (_QWORD)v101);
            }
            else
            {
              v104 = v101;
              if (v100 < (int)v102)
              {
                memcpy(v101, a3, (int)v113);
                v104 = &v101[(int)v113];
              }
              if ((unint64_t)v104 < v103)
              {
                v105 = (int)v113;
                do
                {
                  memcpy(v104, v101, v105);
                  v104 += v105;
                  if (v103 - (unint64_t)v104 >= 2 * v105)
                    v105 *= 2;
                  else
                    v105 = v103 - (_QWORD)v104;
                }
                while (v103 > (unint64_t)v104);
              }
            }
          }
        }
        *((_QWORD *)i + 1) += *((_QWORD *)i + 2);
        *(_QWORD *)(v88 + 8) += *(_QWORD *)(v88 + 16);
        v3 = v116;
        v83 = v118;
LABEL_61:
        v84 ^= 1u;
        v80 = v90;
      }
LABEL_65:
      v89 = *(_DWORD *)v80 == (_DWORD)v86 && (int)v83 < (int)v117;
      if (v89)
      {
        v88 = 0;
        goto LABEL_71;
      }
LABEL_94:
      v106 = 0;
      v107 = 0;
      v108 = *((_QWORD *)&v120 + 1);
      while (1)
      {
        if ((__int128 *)v108 == v106)
        {
          v110 = &v119;
LABEL_103:
          if (!v107)
          {
LABEL_57:
            v82 = v86 + 1;
            if ((_DWORD)v86 + 1 == v111)
              return;
            goto LABEL_58;
          }
        }
        else
        {
          v109 = &v119;
          while (1)
          {
            v110 = *(__int128 **)(v108 + 24);
            if (!v110)
              break;
            if (*(_QWORD *)(v108 + 8) > *((_QWORD *)v110 + 1))
            {
              *((_QWORD *)v109 + 3) = v110;
              *(_QWORD *)(v108 + 24) = *((_QWORD *)v110 + 3);
              *((_QWORD *)v110 + 3) = v108;
              v107 = 1;
              v109 = v110;
              if ((__int128 *)v108 == v106)
                goto LABEL_103;
            }
            else
            {
              v110 = (__int128 *)v108;
              v108 = *(_QWORD *)(v108 + 24);
              v109 = v110;
              if ((__int128 *)v108 == v106)
                goto LABEL_103;
            }
          }
          v110 = v109;
          if (!v107)
            goto LABEL_57;
        }
        if (v110 != &v119)
        {
          v108 = *((_QWORD *)&v120 + 1);
          v107 = 1;
          v106 = v110;
          if (v110 != *((__int128 **)&v120 + 1))
            continue;
        }
        goto LABEL_57;
      }
    }
  }
}

void sub_1002E83C4(unsigned int *a1, uint64_t a2, uint64_t a3, int a4, int a5, double *a6, int a7, int a8, unsigned int a9)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  const float *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  const float *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  const float *v26;
  double *v27;
  float64x2_t v28;
  double *v29;
  double *v30;
  uint64_t v31;
  __int128 v32;
  char v36[8];
  int v37;
  uint64_t v38[4];
  float32x4x2_t v39;
  float64x2x2_t v40;
  float64x2x2_t v41;

  sub_100298C2C(v36, &off_100451EE0);
  if ((*a1 & 7) != 0)
    v14 = 8;
  else
    v14 = 16;
  if (a8 == 16)
    a8 = v14;
  if (a9 > 0x10 || a7 >= 0x8000 || !a2 || !a3 || (a7 | a4) < 0)
  {
    v38[0] = 0;
    v38[1] = 0;
    qmemcpy((void *)sub_10029430C(v38, 112), "pts && npts && ncontours >= 0 && 0 <= thickness && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT", 112);
    sub_100294B74(-215, v38, "polylines", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/drawing.cpp", 2041);
  }
  sub_10025C560(a6, (uint64_t)v38, *a1 & 0xFFF, 0);
  if (a4 >= 1)
  {
    v15 = 0;
    v16 = a4;
    do
    {
      v17 = *(const float **)(a2 + 8 * v15);
      v18 = *(int *)(a3 + 4 * v15);
      if ((_DWORD)v18)
      {
        v19 = 8 * v18;
        if ((unint64_t)(8 * v18) >= 0x7FFFFFFFFFFFFFF9)
          sub_100008F3C();
        v20 = (char *)operator new(16 * v18);
        v21 = v20;
        if ((unint64_t)(v19 - 8) >= 0x18)
        {
          v24 = ((unint64_t)(v19 - 8) >> 3) + 1;
          v22 = &v17[2 * (v24 & 0x3FFFFFFFFFFFFFFCLL)];
          v23 = &v20[16 * (v24 & 0x3FFFFFFFFFFFFFFCLL)];
          v25 = v24 & 0x3FFFFFFFFFFFFFFCLL;
          v26 = v17;
          v27 = (double *)v20;
          do
          {
            v39 = vld2q_f32(v26);
            v26 += 8;
            *(_QWORD *)&v28.f64[0] = v39.val[0].i32[2];
            *(_QWORD *)&v28.f64[1] = v39.val[0].i32[3];
            v40.val[0] = v28;
            *(_QWORD *)&v28.f64[0] = v39.val[1].i32[2];
            *(_QWORD *)&v28.f64[1] = v39.val[1].i32[3];
            v40.val[1] = v28;
            *(_QWORD *)&v28.f64[0] = v39.val[0].i32[0];
            *(_QWORD *)&v28.f64[1] = v39.val[0].i32[1];
            v41.val[0] = v28;
            *(_QWORD *)&v28.f64[0] = v39.val[1].i32[0];
            *(_QWORD *)&v28.f64[1] = v39.val[1].i32[1];
            v41.val[1] = v28;
            v29 = v27 + 8;
            vst2q_f64(v27, v41);
            v30 = v27 + 4;
            vst2q_f64(v30, v40);
            v27 = v29;
            v25 -= 4;
          }
          while (v25);
          if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_24;
        }
        else
        {
          v22 = v17;
          v23 = v20;
        }
        do
        {
          v31 = *(_QWORD *)v22;
          v22 += 2;
          *(_QWORD *)&v32 = (int)v31;
          *((_QWORD *)&v32 + 1) = SHIDWORD(v31);
          *(_OWORD *)v23 = v32;
          v23 += 16;
        }
        while (v22 != &v17[2 * v18]);
      }
      else
      {
        v21 = 0;
      }
LABEL_24:
      sub_1002E6130(a1, (uint64_t)v21, v18, a5, (unsigned __int8 *)v38, a7, a8, a9);
      if (v21)
        operator delete(v21);
      ++v15;
    }
    while (v15 != v16);
  }
  if (v37)
    sub_1002989D0(v36);
}

void sub_1002E8654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1002E86B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002E86C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  sub_1001D40CC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1002E86F8(uint64_t a1, uint64_t a2, int a3, double *a4, int a5, int a6, unsigned int a7)
{
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t i;
  signed int v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  char *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  char *v54;
  unsigned int v55;
  int v56;
  double *v57;
  int v58;
  int v59;
  uint64_t v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void *v67;
  _QWORD v68[2];
  _DWORD *v69;
  uint64_t v70;
  _DWORD v71[264];
  _QWORD *v72;
  uint64_t v73;
  _QWORD v74[136];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD v82[3];
  _BYTE v83[8];
  int v84;

  sub_100298C2C(v83, &off_100451F00);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_OWORD *)(v14 + 16);
    v75 = *(_OWORD *)v14;
    v76 = v15;
    v77 = *(_OWORD *)(v14 + 32);
    v16 = *(_QWORD *)(v14 + 56);
    v78 = *(_QWORD *)(v14 + 48);
    v79 = v16;
    v80 = (char *)&v75 + 8;
    v81 = v82;
    v82[0] = 0;
    v82[1] = 0;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 20);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }
    if (*(int *)(v14 + 4) > 2)
    {
      DWORD1(v75) = 0;
      sub_100256B48((uint64_t)&v75, v14);
    }
    else
    {
      v19 = *(_QWORD **)(v14 + 72);
      v20 = v81;
      *v81 = *v19;
      v20[1] = v19[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v75);
  }
  if (sub_10025D914((_DWORD *)a2) == 0x40000 || sub_10025D914((_DWORD *)a2) == 327680)
  {
    v21 = sub_100260CAC(a2, 0xFFFFFFFF);
    if (!(_DWORD)v21)
      goto LABEL_63;
    v22 = v21;
    v23 = (int)v21;
    v72 = v74;
    v73 = (int)v21;
    v58 = a5;
    v59 = a6;
    v57 = a4;
    v55 = a7;
    v56 = a3;
    if ((unint64_t)(v21 << 32) >= 0x8800000001)
      operator new[]();
    v24 = 1;
  }
  else
  {
    v55 = a7;
    v56 = a3;
    v57 = a4;
    v58 = a5;
    v59 = a6;
    v24 = 0;
    v23 = 1;
    v72 = v74;
    v73 = 1;
    v22 = 1;
  }
  v69 = v71;
  v70 = v23;
  if (v22 >= 1)
  {
    for (i = 0; i != v22; ++i)
    {
      if (v24)
        v26 = i;
      else
        v26 = -1;
      if (sub_10025D914((_DWORD *)a2) == 0x10000)
        v27 = v24;
      else
        v27 = 1;
      if ((v27 & 1) != 0)
      {
        sub_10025CCB8(a2, v26, (uint64_t)&v61);
      }
      else
      {
        v28 = *(_QWORD *)(a2 + 8);
        v29 = *(_OWORD *)(v28 + 16);
        v61 = *(_OWORD *)v28;
        v62 = v29;
        v63 = *(_OWORD *)(v28 + 32);
        v30 = *(_QWORD *)(v28 + 56);
        v64 = *(_QWORD *)(v28 + 48);
        v65 = v30;
        v66 = (char *)&v61 + 8;
        v67 = v68;
        v68[0] = 0;
        v68[1] = 0;
        if (v30)
        {
          v31 = (unsigned int *)(v30 + 20);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 + 1, v31));
        }
        if (*(int *)(v28 + 4) <= 2)
        {
          v33 = *(_QWORD **)(v28 + 72);
          v34 = v67;
          *(_QWORD *)v67 = *v33;
          v34[1] = v33[1];
          v35 = DWORD1(v61);
          if (SDWORD1(v61) < 3)
            goto LABEL_44;
          goto LABEL_32;
        }
        DWORD1(v61) = 0;
        sub_100256B48((uint64_t)&v61, v28);
      }
      v35 = DWORD1(v61);
      if (SDWORD1(v61) < 3)
      {
LABEL_44:
        if (SHIDWORD(v61) * (uint64_t)SDWORD2(v61))
          goto LABEL_38;
        goto LABEL_45;
      }
LABEL_32:
      v36 = (int *)(v66 + 4);
      v37 = v35 & 0xFFFFFFFE;
      v38 = 1;
      v39 = 1;
      do
      {
        v38 *= *(v36 - 1);
        v39 *= *v36;
        v36 += 2;
        v37 -= 2;
      }
      while (v37);
      v40 = v39 * v38;
      v41 = v35 - (v35 & 0xFFFFFFFE);
      if (v41)
      {
        v42 = &v66[(4 * v35) & 0x3FFFFFFF8];
        do
        {
          v43 = *(int *)v42;
          v42 += 4;
          v40 *= v43;
          --v41;
        }
        while (v41);
      }
      if (v40)
      {
LABEL_38:
        if ((sub_10025C460((unsigned int *)&v61, 2, 4, 1) & 0x80000000) != 0)
        {
          v60[0] = 0;
          v60[1] = 0;
          qmemcpy((void *)sub_10029430C(v60, 24), "p.checkVector(2, 4) >= 0", 24);
          sub_100294B74(-215, v60, "polylines", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/drawing.cpp", 2432);
        }
        v74[i] = v62;
        v71[i] = (int)(HIDWORD(v61) * DWORD2(v61) + HIDWORD(v61) * DWORD2(v61) * ((v61 >> 3) & 0x1FF)) / 2;
        v44 = v65;
        if (!v65)
          goto LABEL_50;
LABEL_46:
        v45 = (unsigned int *)(v44 + 20);
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
          sub_100256C90((uint64_t)&v61);
        goto LABEL_50;
      }
LABEL_45:
      v74[i] = 0;
      v71[i] = 0;
      v44 = v65;
      if (v65)
        goto LABEL_46;
LABEL_50:
      v65 = 0;
      v62 = 0u;
      v63 = 0u;
      if (SDWORD1(v61) >= 1)
      {
        v48 = 0;
        v49 = v66;
        do
          *(_DWORD *)&v49[4 * v48++] = 0;
        while (v48 < SDWORD1(v61));
      }
      if (v67 != v68)
        j__free(v67);
    }
  }
  sub_1002E83C4((unsigned int *)&v75, (uint64_t)v74, (uint64_t)v71, v22, v56, v57, v58, v59, v55);
  if (v69 != v71)
  {
    if (v69)
      operator delete[]();
    v70 = 264;
  }
  if (v72 != v74)
  {
    if (v72)
      operator delete[]();
    v73 = 136;
  }
LABEL_63:
  if (v79)
  {
    v50 = (unsigned int *)(v79 + 20);
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
      sub_100256C90((uint64_t)&v75);
  }
  v79 = 0;
  v76 = 0u;
  v77 = 0u;
  if (SDWORD1(v75) >= 1)
  {
    v53 = 0;
    v54 = v80;
    do
      *(_DWORD *)&v54[4 * v53++] = 0;
    while (v53 < SDWORD1(v75));
  }
  if (v81 != v82)
    j__free(v81);
  if (v84)
    sub_1002989D0(v83);
}

void sub_1002E8CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (STACK[0x4E0] != a14)
  {
    if (STACK[0x4E0])
      operator delete[]();
    STACK[0x4E8] = 136;
  }
  sub_100006BE4(v14 - 208);
  sub_1001D40CC(v14 - 104);
  _Unwind_Resume(a1);
}

char *sub_1002E8DDC(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5, _BYTE *a6, int a7)
{
  int v9;
  char *result;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  char *v16;
  int v17;
  _BYTE *v18;
  int v19;
  size_t v20;
  int v21;
  unsigned int v22[2];
  int v23[2];
  void *__dst;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;

  if (a7 == 1)
    v9 = 4;
  else
    v9 = a7;
  v23[0] = a2;
  v23[1] = a3;
  if (!a7)
    v9 = 8;
  v22[0] = a4;
  v22[1] = a5;
  result = (char *)sub_1002E504C((uint64_t)&__dst, a1, v23, v22, v9, 1);
  v11 = v26;
  v12 = *(_DWORD *)(a1 + 4);
  v13 = __OFSUB__(v12, 1);
  v14 = v12 - 1;
  if (v14 < 0 != v13)
  {
    LODWORD(v15) = 0;
    if (v26 < 1)
      return result;
  }
  else
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v14);
    if (v26 < 1)
      return result;
  }
  if ((_DWORD)v15 == 1)
  {
    v18 = __dst;
    do
    {
      *v18 = *a6;
      v19 = v25 >> 31;
      v25 += v27 + (v28 & (v25 >> 31));
      v18 = (char *)__dst + v29 + (uint64_t)(v30 & v19);
      __dst = v18;
      --v11;
    }
    while (v11);
  }
  else if ((_DWORD)v15 == 3)
  {
    v16 = (char *)__dst;
    do
    {
      *v16 = *a6;
      v16[1] = a6[1];
      v16[2] = a6[2];
      v17 = v25 >> 31;
      v25 += v27 + (v28 & (v25 >> 31));
      v16 = (char *)__dst + v29 + (uint64_t)(v30 & v17);
      __dst = v16;
      --v11;
    }
    while (v11);
  }
  else
  {
    v20 = (int)v15;
    result = (char *)__dst;
    do
    {
      memcpy(result, a6, v20);
      v21 = v25 >> 31;
      v25 += v27 + (v28 & (v25 >> 31));
      result = (char *)__dst + v29 + (uint64_t)(v30 & v21);
      __dst = result;
      --v11;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1002E8F98(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  int v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  char *v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  char *v78;
  char v79;
  unint64_t v80;
  _OWORD *v81;
  unint64_t v82;
  __int128 *v83;
  __int128 v84;
  uint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  char *v107;
  char v108;
  unint64_t v109;
  _OWORD *v110;
  unint64_t v111;
  __int128 *v112;
  __int128 v113;
  uint64_t *v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  __int128 *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126[2];

  v7 = *(_DWORD *)(a1 + 4);
  v8 = __OFSUB__(v7, 1);
  v9 = v7 - 1;
  if (v9 < 0 != v8)
    v10 = 0;
  else
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 8 * v9);
  v11 = *a4;
  v12 = a4[1];
  v13 = a4[2];
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(int **)(a1 + 64);
  v17 = *v15;
  v16 = v15[1];
  v125 = *(_QWORD *)(a1 + 80);
  v126[0] = v16 << 16;
  v126[1] = v17 << 16;
  result = sub_1002E4E08(v126, a2, a3);
  if (!(_DWORD)result)
    return result;
  v20 = *a3;
  v19 = a3[1];
  v22 = *a2;
  v21 = a2[1];
  v23 = *a3 - *a2;
  v24 = v19 - v21;
  if (v23 >= 0)
    v25 = *a3 - *a2;
  else
    v25 = *a2 - *a3;
  if (v24 >= 0)
    v26 = v19 - v21;
  else
    v26 = v21 - v19;
  if (v25 <= v26)
  {
    v46 = v24 >> 63;
    v47 = (v46 ^ v23) - v46;
    v48 = v46 & v20 ^ v22;
    v49 = v46 & v19 ^ v21;
    *a2 = v48;
    a2[1] = v49;
    v50 = *a3 ^ v48 & v46;
    v51 = a3[1] ^ v49 & v46;
    *a3 = v50;
    a3[1] = v51;
    v52 = *a2 ^ v50 & v46;
    v53 = a2[1] ^ v51 & v46;
    a2[1] = v53;
    v38 = (v47 << 16) / (v26 | 1);
    v37 = (unint64_t)(a3[1] - v53) >> 16;
    v36 = 0x10000;
    *a2 = v52 + 0x8000;
    a2[1] = v53 + 0x8000;
    if ((_DWORD)v10 != 1)
    {
LABEL_13:
      if ((_DWORD)v10 == 3)
      {
        v39 = (unint64_t)(*a3 + 0x8000) >> 16;
        if ((v39 & 0x80000000) == 0 && (int)v16 > (int)v39)
        {
          v40 = a3[1] + 0x8000;
          if (((v40 >> 16) & 0x80000000) == 0 && (int)v17 > (int)(v40 >> 16))
          {
            v41 = (_BYTE *)(v14 + (v40 >> 16) * v125 + 3 * (int)v39);
            *v41 = v11;
            v41[1] = v12;
            v41[2] = v13;
          }
        }
        if (v25 <= v26)
        {
          v89 = a2[1] >> 16;
          a2[1] = v89;
          if ((v37 & 0x80000000) == 0)
          {
            v90 = *a2;
            v91 = v37 + 1;
            do
            {
              v92 = v90 >> 16;
              if (((v90 >> 16) & 0x80000000) == 0
                && (int)v16 > (int)v92
                && (v89 & 0x80000000) == 0
                && (int)v17 > (int)v89)
              {
                v93 = (_BYTE *)(v14 + v89 * v125 + 3 * (int)v92);
                *v93 = v11;
                v93[1] = v12;
                v93[2] = v13;
                v90 = *a2;
                v89 = a2[1];
              }
              v90 += v38;
              ++v89;
              *a2 = v90;
              a2[1] = v89;
              --v91;
            }
            while (v91);
          }
        }
        else
        {
          v42 = *a2 >> 16;
          *a2 = v42;
          if ((v37 & 0x80000000) == 0)
          {
            v43 = a2[1];
            v44 = v37 + 1;
            do
            {
              if ((v42 & 0x80000000) == 0
                && (int)v16 > (int)v42
                && ((v43 >> 16) & 0x80000000) == 0
                && (int)v17 > (int)(v43 >> 16))
              {
                v45 = (_BYTE *)(v14 + (v43 >> 16) * v125 + 3 * (int)v42);
                *v45 = v11;
                v45[1] = v12;
                v45[2] = v13;
                v42 = *a2;
                v43 = a2[1];
              }
              ++v42;
              v43 += v36;
              *a2 = v42;
              a2[1] = v43;
              --v44;
            }
            while (v44);
          }
        }
        return result;
      }
      v59 = (unint64_t)(*a3 + 0x8000) >> 16;
      if ((v59 & 0x80000000) != 0)
        goto LABEL_56;
      if ((int)v16 <= (int)v59)
        goto LABEL_56;
      v60 = a3[1] + 0x8000;
      if (((v60 >> 16) & 0x80000000) != 0 || (int)v17 <= (int)(v60 >> 16) || v10 << 32 < 1)
        goto LABEL_56;
      v61 = (v60 >> 16) * v125;
      v62 = (uint64_t)((v10 << 32) * v59) >> 32;
      if (v10 <= 1)
        v63 = 1;
      else
        v63 = v10;
      if (v63 < 8 || (unint64_t)(v62 + v14 + v61 - (_QWORD)a4) < 0x20)
      {
        v64 = 0;
LABEL_54:
        v65 = v63 - v64;
        v66 = (_BYTE *)(v14 + v64 + v62 + v61);
        v67 = &a4[v64];
        do
        {
          v68 = *v67++;
          *v66++ = v68;
          --v65;
        }
        while (v65);
LABEL_56:
        if (v25 > v26)
        {
          v69 = *a2 >> 16;
          *a2 = v69;
          if ((v37 & 0x80000000) != 0)
            return result;
          v70 = v10 << 32;
          v71 = (int)v10;
          if ((int)v10 <= 1)
            v71 = 1;
          result = a2[1];
          while (1)
          {
            if ((v69 & 0x80000000) != 0
              || (int)v16 <= (int)v69
              || ((result >> 16) & 0x80000000) != 0
              || (int)v17 <= (int)(result >> 16)
              || v70 < 1)
            {
              goto LABEL_62;
            }
            v73 = (result >> 16) * v125;
            v74 = (v70 * v69) >> 32;
            if (v71 >= 8 && (unint64_t)(v74 + v14 + v73 - (_QWORD)a4) >= 0x20)
            {
              if (v71 < 0x20)
              {
                v80 = 0;
LABEL_80:
                v85 = (uint64_t *)&a4[v80];
                v86 = (_QWORD *)(v14 + v80 + v74 + v73);
                v87 = v80 - (v71 & 0x7FFFFFF8);
                do
                {
                  v88 = *v85++;
                  *v86++ = v88;
                  v87 += 8;
                }
                while (v87);
                v75 = v71 & 0x7FFFFFF8;
                if (v71 == v75)
                  goto LABEL_61;
                goto LABEL_71;
              }
              v81 = (_OWORD *)(v14 + 16 + v74 + v73);
              v82 = v71 & 0x7FFFFFE0;
              v83 = (__int128 *)(a4 + 16);
              do
              {
                v84 = *v83;
                *(v81 - 1) = *(v83 - 1);
                *v81 = v84;
                v83 += 2;
                v81 += 2;
                v82 -= 32;
              }
              while (v82);
              if (v71 == (v71 & 0x7FFFFFE0))
                goto LABEL_61;
              v80 = v71 & 0x7FFFFFE0;
              v75 = v80;
              if ((v71 & 0x18) != 0)
                goto LABEL_80;
            }
            else
            {
              v75 = 0;
            }
LABEL_71:
            v76 = v71 - v75;
            v77 = (_BYTE *)(v14 + v75 + v74 + v73);
            v78 = &a4[v75];
            do
            {
              v79 = *v78++;
              *v77++ = v79;
              --v76;
            }
            while (v76);
LABEL_61:
            v69 = *a2;
            result = a2[1];
LABEL_62:
            ++v69;
            result += v36;
            *a2 = v69;
            a2[1] = result;
            v72 = (int)v37 <= 0;
            LODWORD(v37) = v37 - 1;
            if (v72)
              return result;
          }
        }
        result = a2[1] >> 16;
        a2[1] = result;
        if ((v37 & 0x80000000) != 0)
          return result;
        v98 = v10 << 32;
        v99 = (int)v10;
        if ((int)v10 <= 1)
          v99 = 1;
        v100 = *a2;
        while (1)
        {
          v101 = v100 >> 16;
          if (((v100 >> 16) & 0x80000000) != 0
            || (int)v16 <= (int)v101
            || (result & 0x80000000) != 0
            || (int)v17 <= (int)result
            || v98 < 1)
          {
            goto LABEL_105;
          }
          v102 = result * v125;
          v103 = (uint64_t)(v98 * v101) >> 32;
          if (v99 >= 8 && (unint64_t)(v103 + v14 + v102 - (_QWORD)a4) >= 0x20)
          {
            if (v99 < 0x20)
            {
              v109 = 0;
LABEL_123:
              v114 = (uint64_t *)&a4[v109];
              v115 = (_QWORD *)(v14 + v109 + v103 + v102);
              v116 = v109 - (v99 & 0x7FFFFFF8);
              do
              {
                v117 = *v114++;
                *v115++ = v117;
                v116 += 8;
              }
              while (v116);
              v104 = v99 & 0x7FFFFFF8;
              if (v99 == v104)
                goto LABEL_104;
              goto LABEL_114;
            }
            v110 = (_OWORD *)(v14 + 16 + v103 + v102);
            v111 = v99 & 0x7FFFFFE0;
            v112 = (__int128 *)(a4 + 16);
            do
            {
              v113 = *v112;
              *(v110 - 1) = *(v112 - 1);
              *v110 = v113;
              v112 += 2;
              v110 += 2;
              v111 -= 32;
            }
            while (v111);
            if (v99 == (v99 & 0x7FFFFFE0))
              goto LABEL_104;
            v109 = v99 & 0x7FFFFFE0;
            v104 = v109;
            if ((v99 & 0x18) != 0)
              goto LABEL_123;
          }
          else
          {
            v104 = 0;
          }
LABEL_114:
          v105 = v99 - v104;
          v106 = (_BYTE *)(v14 + v104 + v103 + v102);
          v107 = &a4[v104];
          do
          {
            v108 = *v107++;
            *v106++ = v108;
            --v105;
          }
          while (v105);
LABEL_104:
          v100 = *a2;
          result = a2[1];
LABEL_105:
          v100 += v38;
          ++result;
          *a2 = v100;
          a2[1] = result;
          v72 = (int)v37 <= 0;
          LODWORD(v37) = v37 - 1;
          if (v72)
            return result;
        }
      }
      if (v63 >= 0x20)
      {
        v64 = v63 & 0xFFFFFFE0;
        v118 = (__int128 *)(a4 + 16);
        result = v62 + v61 + v14 + 16;
        v119 = v64;
        do
        {
          v120 = *v118;
          *(_OWORD *)(result - 16) = *(v118 - 1);
          *(_OWORD *)result = v120;
          v118 += 2;
          result += 32;
          v119 -= 32;
        }
        while (v119);
        if (v63 == v64)
          goto LABEL_56;
        if ((v63 & 0x18) == 0)
          goto LABEL_54;
      }
      else
      {
        v64 = 0;
      }
      v121 = v64;
      v64 = v63 & 0xFFFFFFF8;
      v122 = (uint64_t *)&a4[v121];
      result = v14 + v121 + v62 + v61;
      v123 = v121 - v64;
      do
      {
        v124 = *v122++;
        *(_QWORD *)result = v124;
        result += 8;
        v123 += 8;
      }
      while (v123);
      if (v63 == v64)
        goto LABEL_56;
      goto LABEL_54;
    }
  }
  else
  {
    v27 = v23 >> 63;
    v28 = (v24 ^ v27) - v27;
    v29 = v27 & v20 ^ v22;
    v30 = v27 & v19 ^ v21;
    *a2 = v29;
    a2[1] = v30;
    v31 = *a3 ^ v29 & v27;
    v32 = a3[1] ^ v30 & v27;
    *a3 = v31;
    a3[1] = v32;
    v33 = a2[1];
    v34 = *a2 ^ v31 & v27;
    *a2 = v34;
    v35 = v33 ^ v32 & v27;
    v36 = (v28 << 16) / (v25 | 1);
    v37 = (*a3 - v34) >> 16;
    v38 = 0x10000;
    *a2 = v34 + 0x8000;
    a2[1] = v35 + 0x8000;
    if ((_DWORD)v10 != 1)
      goto LABEL_13;
  }
  v54 = (unint64_t)(*a3 + 0x8000) >> 16;
  if ((v54 & 0x80000000) == 0 && (int)v16 > (int)v54)
  {
    v55 = a3[1] + 0x8000;
    if (((v55 >> 16) & 0x80000000) == 0 && (int)v17 > (int)(v55 >> 16))
      *(_BYTE *)(v14 + (v55 >> 16) * v125 + v54) = v11;
  }
  if (v25 <= v26)
  {
    v94 = a2[1] >> 16;
    a2[1] = v94;
    if ((v37 & 0x80000000) == 0)
    {
      v95 = *a2;
      v96 = v37 + 1;
      do
      {
        v97 = v95 >> 16;
        if (((v95 >> 16) & 0x80000000) == 0 && (int)v16 > (int)v97 && (v94 & 0x80000000) == 0 && (int)v17 > (int)v94)
        {
          *(_BYTE *)(v14 + v94 * v125 + v97) = v11;
          v95 = *a2;
          v94 = a2[1];
        }
        v95 += v38;
        ++v94;
        *a2 = v95;
        a2[1] = v94;
        --v96;
      }
      while (v96);
    }
  }
  else
  {
    v56 = *a2 >> 16;
    *a2 = v56;
    if ((v37 & 0x80000000) == 0)
    {
      v57 = a2[1];
      v58 = v37 + 1;
      do
      {
        if ((v56 & 0x80000000) == 0
          && (int)v16 > (int)v56
          && ((v57 >> 16) & 0x80000000) == 0
          && (int)v17 > (int)(v57 >> 16))
        {
          *(_BYTE *)(v14 + (v57 >> 16) * v125 + v56) = v11;
          v56 = *a2;
          v57 = a2[1];
        }
        ++v56;
        v57 += v36;
        *a2 = v56;
        a2[1] = v57;
        --v58;
      }
      while (v58);
    }
  }
  return result;
}

uint64_t sub_1002E97AC(unsigned int *a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  uint8x8_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int8x16_t v17;
  uint8x8_t v18;
  uint16x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int32x4_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  __int16 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  uint64_t v76;
  unsigned __int8 *v77;
  __int16 v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  unsigned __int8 *v82;
  int v83;
  unsigned int v84;
  __int16 v85;
  __int16 v86;
  uint64_t v87;
  _BYTE *v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  __int16 v92;
  unsigned __int8 v93;
  _BYTE *v94;
  __int16 v95;
  int v96;
  int v97;
  _BYTE *v98;
  unsigned int v99;
  __int16 v100;
  __int16 v101;
  unsigned __int8 v102;
  _BYTE *v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  BOOL v112;
  int v113;
  int v114;
  unsigned int v115;
  __int16 v116;
  unsigned __int8 v117;
  uint64_t v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  uint64_t v122;
  __int32 *v123;
  unsigned int v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  int8x16_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int16x8_t v133;
  uint8x8_t v134;
  _DWORD *v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int16x8_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int16x8_t v142;
  uint8x8_t v143;
  uint64_t v144;
  int v145;
  int v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int16x8_t v150;
  _DWORD *v151;
  int32x4_t v152;
  int32x4_t v153;
  int16x8_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int16x8_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int8x16_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int16x8_t v170;
  unsigned int v171;
  uint64_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int16x8_t v175;
  uint64_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int16x8_t v179;
  uint64_t v180;
  uint64_t v181;
  uint32x4_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  int32x2_t v188;
  int8x8_t v189;
  unsigned int v190;
  unsigned int v191;
  int8x8_t v192;
  int16x8_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int8x8_t v198;
  int16x8_t v199;
  int32x4_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  int32x2_t v206;
  int8x8_t v207;
  unsigned int v208;
  unsigned int v209;
  __int16 v210;
  int8x8_t v211;
  uint16x8_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int16x8_t v216;
  uint16x8_t v217;
  int16x8_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  int v224;
  unsigned int v225;
  int32x2_t v226;
  int8x8_t v227;
  unsigned int v228;
  int8x8_t v229;
  uint16x8_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  uint16x8_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  int v241;
  __int16 v242;
  unsigned __int8 *v243;
  unsigned __int8 v244;
  __int16 v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  int v249;
  int v250;
  unsigned __int8 *v251;
  int v252;
  unsigned int v253;
  __int16 v254;
  int v255;
  unsigned int v256;
  __int16 v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;
  int v261;
  int v262;
  int v263;
  _BYTE *v264;
  unsigned int v265;
  __int16 v266;
  unsigned __int8 v267;
  __int16 v268;
  __int16 v269;
  unsigned int v270;
  uint64_t v271;
  int8x16_t v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int32x2_t v278;
  int32x2_t v279;
  int8x8_t v280;
  uint16x8_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int8x8_t v284;
  uint16x8_t v285;
  uint8x8_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int16x8_t v289;
  int8x16_t v290;
  _DWORD v291[9];
  int8x16x2_t v292;
  int8x16x2_t v293;
  int8x16x2_t v294;

  v7 = *a1;
  v8 = (v7 >> 3) & 0x1FF;
  if (v8 > 3 || (_DWORD)v8 == 1 || (*a1 & 7) != 0)
    return (uint64_t)sub_1002E8DDC((uint64_t)a1, *(_DWORD *)((char *)a2 + 2), *(_DWORD *)((char *)a2 + 10), *(_DWORD *)((char *)a3 + 2), *(_DWORD *)((char *)a3 + 10), a4, 8);
  v4.i32[0] = *(_DWORD *)a4;
  v12 = *((_QWORD *)a1 + 2);
  v13 = *((_QWORD *)a1 + 10);
  v14 = **((_QWORD **)a1 + 8);
  v15.i64[0] = (int)v14;
  v15.i64[1] = SHIDWORD(v14);
  v16 = vdupq_n_s64(0xFFFFFFFFFFFE0000);
  *(int64x2_t *)a2 = vaddq_s64(*(int64x2_t *)a2, v16);
  *(int64x2_t *)a3 = vaddq_s64(*(int64x2_t *)a3, v16);
  v17 = (int8x16_t)vaddq_s64(vshlq_n_s64(v15, 0x10uLL), vdupq_n_s64(0xFFFFFFFFFFFB0001));
  v290 = vextq_s8(v17, v17, 8uLL);
  result = sub_1002E4E08(v290.i64, a2, a3);
  if ((_DWORD)result)
  {
    v19 = (uint16x4_t)vmovl_u8(v4).u64[0];
    v20 = 2 * v8 + 2 * v13;
    v22 = *a3;
    v21 = a3[1];
    v24 = *a2;
    v23 = a2[1];
    v25 = *a3 - *a2;
    v26 = v21 - v23;
    if (v25 >= 0)
      v27 = *a3 - *a2;
    else
      v27 = *a2 - *a3;
    if (v26 >= 0)
      v28 = v21 - v23;
    else
      v28 = v23 - v21;
    if (v27 <= v28)
    {
      v48 = v26 >> 63;
      v49 = v48 & v22 ^ v24;
      *a2 = v49;
      v50 = *a3 ^ v49 & v48;
      *a3 = v50;
      v51 = *a2 ^ v50 & v48;
      v52 = v48 & v21 ^ v23;
      a2[1] = v52;
      v53 = a3[1] ^ v52 & v48;
      a3[1] = v53;
      a2[1] ^= v53 & v48;
      v43 = (((v48 ^ v25) - v48) << 16) / (v28 | 1);
      v54 = a3[1] + 0x10000;
      a3[1] = v54;
      v40 = a2[1];
      v39 = (v54 >> 16) - ((unint64_t)v40 >> 16);
      v38 = v51 + (-(v43 * (unsigned __int16)v40) >> 16) + 0x8000;
      *a2 = v38;
      v41 = ((v43 >> 63) ^ (v43 >> 11)) & 0x3F;
      v55 = v54 >> 9;
      v37 = 0x10000;
      v44 = v20 + v12;
      v45 = ((unint64_t)v40 >> 9) & 0x78;
      v46 = v55 & 0x78;
      if ((((v43 >> 63) ^ (v43 >> 11)) & 0x20) != 0)
        goto LABEL_18;
    }
    else
    {
      v29 = v25 >> 63;
      v30 = (v26 ^ v29) - v29;
      v31 = v29 & v22 ^ v24;
      *a2 = v31;
      v32 = *a3 ^ v31 & v29;
      *a3 = v32;
      v33 = v29 & v21 ^ v23;
      *a2 ^= v32 & v29;
      a2[1] = v33;
      v34 = *a3;
      v35 = a3[1] ^ v33 & v29;
      a3[1] = v35;
      v36 = a2[1] ^ v35 & v29;
      v37 = (v30 << 16) / (v27 | 1);
      v34 += 0x10000;
      *a3 = v34;
      v38 = *a2;
      v39 = (v34 >> 16) - (*a2 >> 16);
      v40 = v36 + (-(v37 * (unsigned __int16)*a2) >> 16) + 0x8000;
      a2[1] = v40;
      v41 = ((v37 >> 63) ^ (v37 >> 11)) & 0x3F;
      v42 = v34 >> 9;
      v43 = 0x10000;
      v44 = v20 + v12;
      v45 = (v38 >> 9) & 0x78;
      v46 = v42 & 0x78;
      if ((((v37 >> 63) ^ (v37 >> 11)) & 0x20) != 0)
      {
LABEL_18:
        v47 = 256;
        goto LABEL_21;
      }
    }
    v47 = byte_1003C18AC[v41];
LABEL_21:
    v56 = (int32x4_t)vmovl_u16(v19);
    v57 = v44 + 2;
    v58 = v47 * (124 - v45);
    v59 = v47 * (v46 | 4);
    v291[8] = v47;
    v60 = v46 - v45;
    result = ((v60 & 0x78 | 4u) * (unint64_t)v47) >> 8;
    v291[0] = 0;
    v291[1] = result;
    v291[2] = v58 >> 8;
    v291[3] = result;
    v291[4] = (v47 * (v60 + 132)) >> 8;
    v291[5] = (v58 + (v47 << 7)) >> 8;
    v291[6] = v59 >> 8;
    v291[7] = (v59 + (v47 << 7)) >> 8;
    if ((_DWORD)v8)
    {
      if ((_DWORD)v8 == 2)
      {
        if (v27 <= v28)
        {
          if ((v39 & 0x80000000) == 0)
          {
            v180 = v40 >> 16;
            v181 = v57 + (v40 >> 16) * v13;
            v182 = (uint32x4_t)vextq_s8(vextq_s8((int8x16_t)v56, (int8x16_t)v56, 0xCuLL), (int8x16_t)v56, 8uLL);
            v56.i32[3] = v56.i32[0];
            v183 = 3 * (v38 >> 16);
            v184 = v39 - 1;
            v185 = v39 <= 1 ? 1 : 2;
            result = (uint64_t)v291;
            v186 = v291[v185 & (v39 | 2)];
            v187 = v181 + v183;
            v188.i32[0] = dword_1003C18CC[((unsigned __int16)v38 >> 11) | 0x20];
            v188.i32[1] = dword_1003C18CC[(unsigned __int16)v38 >> 11];
            v189 = vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)vmul_s32(v188, vdup_n_s32(v186)), 8uLL), (int8x8_t)0xFF000000FFLL);
            v190 = ((unsigned __int16)(LOWORD(dword_1003C18CC[((unsigned __int16)v38 >> 11) ^ 0x3F])
                                                      * v186) >> 8);
            v191 = *(unsigned __int8 *)(v181 + v183 + 5)
                 + (((v56.i32[2] - *(unsigned __int8 *)(v181 + v183 + 5)) * v190 + 127) >> 8);
            v192 = *(int8x8_t *)(v181 + v183 - 3);
            v193 = (int16x8_t)vmovl_u8((uint8x8_t)v192);
            v194 = (int32x4_t)vsubw_high_u16(v182, (uint16x8_t)v193);
            v195.i32[0] = v189.i32[0];
            v196 = vdupq_n_s32(v190);
            v196.i32[0] = v189.i32[1];
            v195.i32[1] = v189.i32[0];
            v195.u64[1] = (unint64_t)v189;
            v197 = vtrn1q_s32(v196, v196);
            *(uint16x4_t *)v193.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32((int32x4_t)vsubw_u16((uint32x4_t)v56, *(uint16x4_t *)v193.i8), v195)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
            v193.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(v194, v197)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
            v198 = vadd_s8(v192, vmovn_s16(v193));
            v199 = (int16x8_t)vmovl_u8((uint8x8_t)v198);
            v200 = (int32x4_t)vsubw_high_u16(v182, (uint16x8_t)v199);
            *(uint16x4_t *)v199.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32((int32x4_t)vsubw_u16((uint32x4_t)v56, *(uint16x4_t *)v199.i8), v195)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
            v199.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(v200, v197)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
            *(int8x8_t *)(v187 - 3) = vadd_s8(v198, vmovn_s16(v199));
            *(_BYTE *)(v187 + 5) = v191 + ((unsigned __int16)((v56.i16[4] - v191) * v190 + 127) >> 8);
            v201 = *a2 + v43;
            *a2 = v201;
            if ((_DWORD)v39)
            {
              v202 = v181 + v13;
              v203 = v184 <= 1 ? 1 : 2;
              v204 = v291[(v203 & (v184 | 2)) + 3];
              v205 = v202 + 3 * (v201 >> 16);
              result = (uint64_t)&dword_1003C18CC[(unsigned __int16)v201 >> 11];
              v206.i32[0] = dword_1003C18CC[((unsigned __int16)v201 >> 11) | 0x20];
              v206.i32[1] = *(_DWORD *)result;
              v207 = vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)vmul_s32(v206, vdup_n_s32(v204)), 8uLL), (int8x8_t)0xFF000000FFLL);
              v208 = ((unsigned __int16)(LOWORD(dword_1003C18CC[((unsigned __int16)v201 >> 11) ^ 0x3F])
                                                        * v204) >> 8);
              v209 = *(unsigned __int8 *)(v205 + 5)
                   + (((v56.i32[2] - *(unsigned __int8 *)(v205 + 5)) * v208 + 127) >> 8);
              v210 = (v56.i16[4]
                    - (*(_BYTE *)(v205 + 5)
                                      + ((unsigned __int16)((v56.i16[4] - *(unsigned __int8 *)(v205 + 5)) * v208 + 127) >> 8)))
                   * v208
                   + 127;
              v211 = *(int8x8_t *)(v205 - 3);
              v212 = vmovl_u8((uint8x8_t)v211);
              v213.i32[0] = v207.i32[0];
              v214 = vdupq_n_s32(v208);
              v214.i32[0] = v207.i32[1];
              v215 = vtrn1q_s32(v214, v214);
              v213.i32[1] = v207.i32[0];
              v213.u64[1] = (unint64_t)v207;
              *(uint16x4_t *)v216.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32((int32x4_t)vsubw_u16((uint32x4_t)v56, *(uint16x4_t *)v212.i8), v213)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
              v216.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32((int32x4_t)vsubw_high_u16(v182, v212), v215)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
              *(int8x8_t *)v216.i8 = vadd_s8(v211, vmovn_s16(v216));
              v217 = vmovl_u8(*(uint8x8_t *)v216.i8);
              *(uint16x4_t *)v218.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32((int32x4_t)vsubw_u16((uint32x4_t)v56, *(uint16x4_t *)v217.i8), v213)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
              v218.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32((int32x4_t)vsubw_high_u16(v182, v217), v215)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
              *(int8x8_t *)(v205 - 3) = vadd_s8(*(int8x8_t *)v216.i8, vmovn_s16(v218));
              *(_BYTE *)(v205 + 5) = v209 + HIBYTE(v210);
              v219 = *a2 + v43;
              *a2 = v219;
              if ((_DWORD)v39 != 1)
              {
                LODWORD(result) = v39 - 2;
                v220 = v12 + v13 * (v180 + 4) + 2 * ((v7 >> 3) & 0x1FF);
                do
                {
                  v221 = v220 + 3 * (v219 >> 16);
                  v222 = result | 2;
                  v223 = (result - 1);
                  if (result <= 1)
                    v224 = 1;
                  else
                    v224 = 2;
                  v225 = v291[(v224 & v222) + 6];
                  v226.i32[0] = dword_1003C18CC[((unsigned __int16)v219 >> 11) | 0x20];
                  v226.i32[1] = dword_1003C18CC[(unsigned __int16)v219 >> 11];
                  v227 = vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)vmul_s32(v226, vdup_n_s32(v225)), 8uLL), (int8x8_t)0xFF000000FFLL);
                  v228 = ((unsigned __int16)(LOWORD(dword_1003C18CC[((unsigned __int16)v219 >> 11) ^ 0x3F])
                                                            * v225) >> 8);
                  LOBYTE(v225) = *(_BYTE *)(v221 + 7)
                               + ((unsigned __int16)((v56.i16[4] - *(unsigned __int8 *)(v221 + 7)) * v228 + 127) >> 8);
                  v229 = *(int8x8_t *)(v221 - 1);
                  v230 = vmovl_u8((uint8x8_t)v229);
                  v231 = (int32x4_t)vsubw_u16((uint32x4_t)v56, *(uint16x4_t *)v230.i8);
                  v232.i32[0] = v227.i32[0];
                  v233 = vdupq_n_s32(v228);
                  v233.i32[0] = v227.i32[1];
                  v232.i32[1] = v227.i32[0];
                  v232.u64[1] = (unint64_t)v227;
                  v234 = (int32x4_t)vsubw_high_u16(v182, v230);
                  v235 = vtrn1q_s32(v233, v233);
                  v233.i64[0] = 0x7F0000007FLL;
                  v233.i64[1] = 0x7F0000007FLL;
                  v236 = vmlaq_s32(v233, v231, v232);
                  v231.i64[0] = 0x7F0000007FLL;
                  v231.i64[1] = 0x7F0000007FLL;
                  v293.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(v231, v234, v235), 8uLL);
                  v293.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)v236, 8uLL);
                  *(int8x8_t *)v234.i8 = vadd_s8(v229, (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v293, (int8x16_t)xmmword_1003BC970));
                  v237 = vmovl_u8(*(uint8x8_t *)v234.i8);
                  v236.i64[0] = 0x7F0000007FLL;
                  v236.i64[1] = 0x7F0000007FLL;
                  v231.i64[0] = 0x7F0000007FLL;
                  v231.i64[1] = 0x7F0000007FLL;
                  v292.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(v231, (int32x4_t)vsubw_high_u16(v182, v237), v235), 8uLL);
                  v292.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(v236, (int32x4_t)vsubw_u16((uint32x4_t)v56, *(uint16x4_t *)v237.i8), v232), 8uLL);
                  *(int8x8_t *)(v221 - 1) = vadd_s8(*(int8x8_t *)v234.i8, (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v292, (int8x16_t)xmmword_1003BC970));
                  *(_BYTE *)(v221 + 7) = v225
                                       + ((unsigned __int16)((v56.i16[4] - v225) * v228 + 127) >> 8);
                  v219 = *a2 + v43;
                  *a2 = v219;
                  v220 += v13;
                  result = v223;
                }
                while ((_DWORD)v223 != -1);
              }
            }
          }
        }
        else if ((v39 & 0x80000000) == 0)
        {
          v61 = 0;
          v62 = v57 + 3 * (v38 >> 16);
          result = (uint64_t)dword_1003C18CC;
          do
          {
            v63 = v40 >> 16;
            v64 = (unsigned __int8 *)(v62 + ((v40 >> 16) - 1) * v13);
            if (v61 <= 1)
              v65 = 1;
            else
              v65 = 2;
            v66 = 3 * (v65 & (v61 | 2));
            v67 = v39 | 2;
            v68 = v39 - 1;
            if (v39 <= 1)
              v69 = 1;
            else
              v69 = 2;
            v70 = v291[v66 + (v69 & v67)];
            v71 = (unsigned __int16)v40 >> 11;
            v72 = ((unsigned __int16)(LOWORD(dword_1003C18CC[v71 | 0x20]) * v70) >> 8);
            v73 = *v64 + ((unsigned __int16)((v56.i16[0] - *v64) * v72 + 127) >> 8);
            v74 = v64[1] + ((unsigned __int16)((v56.i16[2] - v64[1]) * v72 + 127) >> 8);
            v75 = v64[2] + ((unsigned __int16)((v56.i16[4] - v64[2]) * v72 + 127) >> 8);
            *v64 = v73 + ((unsigned __int16)((v56.i16[0] - v73) * v72 + 127) >> 8);
            v64[1] = v74 + ((unsigned __int16)((v56.i16[2] - v74) * v72 + 127) >> 8);
            v64[2] = v75 + ((unsigned __int16)((v56.i16[4] - v75) * v72 + 127) >> 8);
            v76 = v13 * v63;
            v77 = (unsigned __int8 *)(v62 + v13 * v63);
            v78 = ((unsigned __int16)(LOWORD(dword_1003C18CC[v71]) * v70) >> 8);
            v79 = *v77 + ((unsigned __int16)((v56.i16[0] - *v77) * v78 + 127) >> 8);
            v80 = v77[1] + ((unsigned __int16)((v56.i16[2] - v77[1]) * v78 + 127) >> 8);
            v81 = v77[2] + ((unsigned __int16)((v56.i16[4] - v77[2]) * v78 + 127) >> 8);
            *v77 = v79 + ((unsigned __int16)((v56.i16[0] - v79) * v78 + 127) >> 8);
            v77[1] = v80 + ((unsigned __int16)((v56.i16[2] - v80) * v78 + 127) >> 8);
            v77[2] = v81 + ((unsigned __int16)((v56.i16[4] - v81) * v78 + 127) >> 8);
            v82 = (unsigned __int8 *)(v62 + v13 + v76);
            v83 = ((unsigned __int16)(LOWORD(dword_1003C18CC[v71 ^ 0x3F]) * v70) >> 8);
            LOBYTE(v71) = *v82 + ((unsigned __int16)((v56.i16[0] - *v82) * v83 + 127) >> 8);
            LODWORD(v77) = v82[1] + (((v56.i32[1] - v82[1]) * v83 + 127) >> 8);
            v84 = v82[2] + (((v56.i32[2] - v82[2]) * v83 + 127) >> 8);
            v85 = (v56.i16[2] - (v82[1] + ((unsigned __int16)((v56.i16[2] - v82[1]) * v83 + 127) >> 8)))
                * v83
                + 127;
            v86 = v56.i16[4] - (v82[2] + ((unsigned __int16)((v56.i16[4] - v82[2]) * v83 + 127) >> 8));
            *v82 = v71 + ((unsigned __int16)((v56.i16[0] - v71) * v83 + 127) >> 8);
            v82[1] = (_BYTE)v77 + HIBYTE(v85);
            v82[2] = v84 + ((unsigned __int16)(v86 * v83 + 127) >> 8);
            v40 = a2[1] + v37;
            a2[1] = v40;
            v62 += 3;
            ++v61;
            LODWORD(v39) = v68;
          }
          while (v68 != -1);
        }
      }
      else if (v27 <= v28)
      {
        if ((v39 & 0x80000000) == 0)
        {
          v270 = 0;
          v271 = v12 + v13 * ((v40 >> 16) + 2) + 2 * ((v7 >> 3) & 0x1FF);
          v272.i64[0] = 0xFF000000FFLL;
          v272.i64[1] = 0xFF000000FFLL;
          do
          {
            if (v270 <= 1)
              v273 = 1;
            else
              v273 = 2;
            v274 = 3 * (v273 & (v270 | 2));
            v275 = v39 | 2;
            v276 = v39 - 1;
            if (v39 <= 1)
              v277 = 1;
            else
              v277 = 2;
            result = v291[v274 + (v277 & v275)];
            v278.i32[0] = dword_1003C18CC[((unsigned __int16)v38 >> 11) | 0x20];
            v278.i32[1] = dword_1003C18CC[(unsigned __int16)v38 >> 11];
            v39 = v271 + 4 * (v38 >> 16);
            v279 = (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)vmul_s32(v278, vdup_n_s32(result)), 8uLL), (int8x8_t)0xFF000000FFLL);
            v280 = *(int8x8_t *)(v39 - 2);
            v281 = vmovl_u8((uint8x8_t)v280);
            v282.i64[0] = 0x7F0000007FLL;
            v282.i64[1] = 0x7F0000007FLL;
            v283.i64[0] = 0x7F0000007FLL;
            v283.i64[1] = 0x7F0000007FLL;
            v294.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_lane_s32(v283, (int32x4_t)vsubw_high_u16((uint32x4_t)v56, v281), v279, 1), 8uLL);
            v294.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_lane_s32(v282, (int32x4_t)vsubw_u16((uint32x4_t)v56, *(uint16x4_t *)v281.i8), v279, 0), 8uLL);
            v284 = vadd_s8(v280, (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v294, (int8x16_t)xmmword_1003BC970));
            v285 = vmovl_u8((uint8x8_t)v284);
            v282.i64[0] = 0x7F0000007FLL;
            v282.i64[1] = 0x7F0000007FLL;
            v283.i64[0] = 0x7F0000007FLL;
            v283.i64[1] = 0x7F0000007FLL;
            v294.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_lane_s32(v283, (int32x4_t)vsubw_high_u16((uint32x4_t)v56, v285), v279, 1), 8uLL);
            v294.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_lane_s32(v282, (int32x4_t)vsubw_u16((uint32x4_t)v56, *(uint16x4_t *)v285.i8), v279, 0), 8uLL);
            v286 = (uint8x8_t)vadd_s8(v284, (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v294, (int8x16_t)xmmword_1003BC970));
            *(uint8x8_t *)(v39 - 2) = v286;
            v286.i32[0] = *(_DWORD *)(v39 + 6);
            v287 = (int32x4_t)vsubw_u16((uint32x4_t)v56, (uint16x4_t)*(_OWORD *)&vmovl_u8(v286));
            v288 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_1003C18CC[((unsigned __int16)v38 >> 11) ^ 0x3F])
                                                                  * result) >> 8));
            v283.i64[0] = 0x7F0000007FLL;
            v283.i64[1] = 0x7F0000007FLL;
            *(int16x4_t *)v287.i8 = vshrn_n_s32(vmlaq_s32(v283, v287, v288), 8uLL);
            v289 = (int16x8_t)vaddw_u8((uint16x8_t)v287, v286);
            *(uint16x4_t *)v289.i8 = vsra_n_u16(*(uint16x4_t *)v289.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v56, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v289.i8), v272)), v288)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
            *(_DWORD *)(v39 + 6) = vmovn_s16(v289).u32[0];
            v38 = *a2 + v43;
            *a2 = v38;
            ++v270;
            v271 += v13;
            LODWORD(v39) = v276;
          }
          while (v276 != -1);
        }
      }
      else if ((v39 & 0x80000000) == 0)
      {
        v122 = v57 + 4 * (v38 >> 16);
        v123 = (__int32 *)(v122 + ((v40 >> 16) - 1) * v13);
        v124 = v39 - 1;
        v125 = v39 <= 1 ? 1 : 2;
        v126 = v291[v125 & (v39 | 2)];
        v127 = (unsigned __int16)v40 >> 11;
        v18.i32[0] = *v123;
        v128.i64[0] = 0xFF000000FFLL;
        v128.i64[1] = 0xFF000000FFLL;
        v129 = (int32x4_t)vsubw_u16((uint32x4_t)v56, (uint16x4_t)*(_OWORD *)&vmovl_u8(v18));
        v130 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_1003C18CC[v127 | 0x20]) * v126) >> 8));
        v131.i64[0] = 0x7F0000007FLL;
        v131.i64[1] = 0x7F0000007FLL;
        v132.i64[0] = 0x7F0000007FLL;
        v132.i64[1] = 0x7F0000007FLL;
        *(int16x4_t *)v129.i8 = vshrn_n_s32(vmlaq_s32(v132, v129, v130), 8uLL);
        v133 = (int16x8_t)vaddw_u8((uint16x8_t)v129, v18);
        v134.i32[1] = 8323199;
        *(uint16x4_t *)v133.i8 = vsra_n_u16(*(uint16x4_t *)v133.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v56, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v133.i8), v128)), v130)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
        *(int8x8_t *)v133.i8 = vmovn_s16(v133);
        *v123 = v133.i32[0];
        v135 = (__int32 *)((char *)v123 + v13);
        v133.i32[0] = *(__int32 *)((char *)v123 + v13);
        v136 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_1003C18CC[v127]) * v126) >> 8));
        v137 = (int32x4_t)vsubw_u16((uint32x4_t)v56, (uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v133.i8));
        v138.i64[0] = 0x7F0000007FLL;
        v138.i64[1] = 0x7F0000007FLL;
        *(int16x4_t *)v137.i8 = vshrn_n_s32(vmlaq_s32(v138, v137, v136), 8uLL);
        v139 = (int16x8_t)vaddw_u8((uint16x8_t)v137, *(uint8x8_t *)v133.i8);
        *(uint16x4_t *)v139.i8 = vsra_n_u16(*(uint16x4_t *)v139.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v56, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v139.i8), v128)), v136)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
        *(int8x8_t *)v139.i8 = vmovn_s16(v139);
        *v135 = v139.i32[0];
        result = dword_1003C18CC[v127 ^ 0x3F];
        v139.i32[0] = *(__int32 *)((char *)v123 + v13 + v13);
        v140 = vdupq_n_s32(((unsigned __int16)(result * v126) >> 8));
        v141 = (int32x4_t)vsubw_u16((uint32x4_t)v56, (uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v139.i8));
        v138.i64[0] = 0x7F0000007FLL;
        v138.i64[1] = 0x7F0000007FLL;
        *(int16x4_t *)v141.i8 = vshrn_n_s32(vmlaq_s32(v138, v141, v140), 8uLL);
        v142 = (int16x8_t)vaddw_u8((uint16x8_t)v141, *(uint8x8_t *)v139.i8);
        *(uint16x4_t *)v142.i8 = vsra_n_u16(*(uint16x4_t *)v142.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v56, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v142.i8), v128)), v140)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
        v143 = (uint8x8_t)vmovn_s16(v142);
        *(_DWORD *)((char *)v135 + v13) = v143.i32[0];
        v144 = a2[1] + v37;
        a2[1] = v144;
        if ((_DWORD)v39)
        {
          result = v122 + 4 + ((v144 >> 16) - 1) * v13;
          v145 = v124 <= 1 ? 1 : 2;
          v146 = v291[(v145 & (v124 | 2)) + 3];
          v143.i32[0] = *(_DWORD *)result;
          v147 = (int32x4_t)vsubw_u16((uint32x4_t)v56, (uint16x4_t)*(_OWORD *)&vmovl_u8(v143));
          v148 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_1003C18CC[((unsigned __int16)v144 >> 11) | 0x20])
                                                                * v146) >> 8));
          v149.i64[0] = 0x7F0000007FLL;
          v149.i64[1] = 0x7F0000007FLL;
          *(int16x4_t *)v147.i8 = vshrn_n_s32(vmlaq_s32(v149, v147, v148), 8uLL);
          v150 = (int16x8_t)vaddw_u8((uint16x8_t)v147, v143);
          *(uint16x4_t *)v150.i8 = vsra_n_u16(*(uint16x4_t *)v150.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v56, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v150.i8), v128)), v148)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
          *(int8x8_t *)v150.i8 = vmovn_s16(v150);
          *(_DWORD *)result = v150.i32[0];
          v151 = (_DWORD *)(result + v13);
          v150.i32[0] = *(_DWORD *)(result + v13);
          v152 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_1003C18CC[(unsigned __int16)v144 >> 11])
                                                                * v146) >> 8));
          v153 = (int32x4_t)vsubw_u16((uint32x4_t)v56, (uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v150.i8));
          v149.i64[0] = 0x7F0000007FLL;
          v149.i64[1] = 0x7F0000007FLL;
          *(int16x4_t *)v153.i8 = vshrn_n_s32(vmlaq_s32(v149, v153, v152), 8uLL);
          v154 = (int16x8_t)vaddw_u8((uint16x8_t)v153, *(uint8x8_t *)v150.i8);
          *(uint16x4_t *)v154.i8 = vsra_n_u16(*(uint16x4_t *)v154.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v56, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v154.i8), v128)), v152)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
          *(int8x8_t *)v154.i8 = vmovn_s16(v154);
          *v151 = v154.i32[0];
          v154.i32[0] = *(_DWORD *)(result + v13 + v13);
          v155 = vdupq_n_s32(((unsigned __int16)(dword_1003C18CC[((unsigned __int16)v144 >> 11) ^ 0x3F]
                                                                * v146) >> 8));
          v156 = vmlaq_s32(v131, (int32x4_t)vsubw_u16((uint32x4_t)v56, (uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v154.i8)), v155);
          *(int16x4_t *)v156.i8 = vshrn_n_s32(v156, 8uLL);
          v157 = (int16x8_t)vaddw_u8((uint16x8_t)v156, *(uint8x8_t *)v154.i8);
          *(uint16x4_t *)v157.i8 = vsra_n_u16(*(uint16x4_t *)v157.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v56, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v157.i8), v128)), v155)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
          *(_DWORD *)((char *)v151 + v13) = vmovn_s16(v157).u32[0];
          v158 = a2[1] + v37;
          a2[1] = v158;
          if ((_DWORD)v39 != 1)
          {
            v159 = 0;
            v160 = v122 + 8;
            v161 = v39 - 2;
            v162.i64[0] = 0xFF000000FFLL;
            v162.i64[1] = 0xFF000000FFLL;
            do
            {
              v163 = v158 >> 16;
              v164 = v160 + ((v158 >> 16) - 1) * v13;
              v165 = v161 | 2;
              v112 = v161-- != 0;
              if (v161 != 0 && v112)
                v166 = 2;
              else
                v166 = 1;
              result = v291[(v166 & v165) + 6];
              v134.i32[0] = *(_DWORD *)(v164 + 4 * v159);
              v167 = (int32x4_t)vsubw_u16((uint32x4_t)v56, (uint16x4_t)*(_OWORD *)&vmovl_u8(v134));
              v168 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_1003C18CC[((unsigned __int16)v158 >> 11) | 0x20])
                                                                    * result) >> 8));
              v169.i64[0] = 0x7F0000007FLL;
              v169.i64[1] = 0x7F0000007FLL;
              *(int16x4_t *)v167.i8 = vshrn_n_s32(vmlaq_s32(v169, v167, v168), 8uLL);
              v170 = (int16x8_t)vaddw_u8((uint16x8_t)v167, v134);
              *(uint16x4_t *)v170.i8 = vsra_n_u16(*(uint16x4_t *)v170.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v56, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v170.i8), v162)), v168)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
              *(int8x8_t *)v170.i8 = vmovn_s16(v170);
              *(_DWORD *)(v164 + 4 * v159) = v170.i32[0];
              v171 = (unsigned __int16)v158 >> 11;
              v172 = v13 * v163;
              v170.i32[0] = *(_DWORD *)(v160 + v172 + 4 * v159);
              v173 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_1003C18CC[v171]) * result) >> 8));
              v174 = (int32x4_t)vsubw_u16((uint32x4_t)v56, (uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v170.i8));
              v169.i64[0] = 0x7F0000007FLL;
              v169.i64[1] = 0x7F0000007FLL;
              *(int16x4_t *)v174.i8 = vshrn_n_s32(vmlaq_s32(v169, v174, v173), 8uLL);
              v175 = (int16x8_t)vaddw_u8((uint16x8_t)v174, *(uint8x8_t *)v170.i8);
              *(uint16x4_t *)v175.i8 = vsra_n_u16(*(uint16x4_t *)v175.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v56, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v175.i8), v162)), v173)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
              *(int8x8_t *)v175.i8 = vmovn_s16(v175);
              *(_DWORD *)(v160 + v172 + 4 * v159) = v175.i32[0];
              v176 = v160 + v13 + v172;
              v175.i32[0] = *(_DWORD *)(v176 + 4 * v159);
              v177 = (int32x4_t)vsubw_u16((uint32x4_t)v56, (uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v175.i8));
              v178 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_1003C18CC[v171 ^ 0x3F]) * result) >> 8));
              v169.i64[0] = 0x7F0000007FLL;
              v169.i64[1] = 0x7F0000007FLL;
              *(int16x4_t *)v177.i8 = vshrn_n_s32(vmlaq_s32(v169, v177, v178), 8uLL);
              v179 = (int16x8_t)vaddw_u8((uint16x8_t)v177, *(uint8x8_t *)v175.i8);
              *(uint16x4_t *)v179.i8 = vsra_n_u16(*(uint16x4_t *)v179.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v56, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v179.i8), v162)), v178)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
              v134 = (uint8x8_t)vmovn_s16(v179);
              *(_DWORD *)(v176 + 4 * v159) = v134.i32[0];
              v158 = a2[1] + v37;
              a2[1] = v158;
              ++v159;
            }
            while ((_DWORD)v39 - 1 != (_DWORD)v159);
          }
        }
      }
    }
    else if (v27 <= v28)
    {
      if ((v39 & 0x80000000) == 0)
      {
        v238 = v57 + (v40 >> 16) * v13;
        v239 = v39 - 1;
        v240 = v39 <= 1 ? 1 : 2;
        v241 = v291[v240 & (v39 | 2)];
        result = 32;
        v242 = ((unsigned __int16)(LOWORD(dword_1003C18CC[((unsigned __int16)v38 >> 11) | 0x20]) * v241) >> 8);
        v243 = (unsigned __int8 *)(v238 + (v38 >> 16));
        v244 = *(v243 - 1) + ((unsigned __int16)((v56.i16[0] - *(v243 - 1)) * v242 + 127) >> 8);
        *(v243 - 1) = v244 + ((unsigned __int16)((v56.i16[0] - v244) * v242 + 127) >> 8);
        v245 = ((unsigned __int16)(LOWORD(dword_1003C18CC[(unsigned __int16)v38 >> 11]) * v241) >> 8);
        *v243 += ((unsigned __int16)((v56.i16[0] - *v243) * v245 + 127) >> 8)
               + ((unsigned __int16)((v56.i16[0]
                                    - (*v243
                                                      + ((unsigned __int16)((v56.i16[0] - *v243) * v245 + 127) >> 8)))
                                   * v245
                                   + 127) >> 8);
        LOWORD(v241) = ((unsigned __int16)(LOWORD(dword_1003C18CC[((unsigned __int16)v38 >> 11) ^ 0x3F])
                                                          * v241) >> 8);
        v243[1] += ((unsigned __int16)((v56.i16[0] - v243[1]) * v241 + 127) >> 8)
                 + ((unsigned __int16)((v56.i16[0]
                                      - (v243[1]
                                                        + ((unsigned __int16)((v56.i16[0] - v243[1]) * v241 + 127) >> 8)))
                                     * v241
                                     + 127) >> 8);
        v246 = *a2 + v43;
        *a2 = v246;
        if ((_DWORD)v39)
        {
          v247 = v238 + v13;
          v248 = v239 <= 1 ? 1 : 2;
          v249 = v291[(v248 & (v239 | 2)) + 3];
          v250 = ((unsigned __int16)(LOWORD(dword_1003C18CC[((unsigned __int16)v246 >> 11) | 0x20])
                                                    * v249) >> 8);
          v251 = (unsigned __int8 *)(v247 + (v246 >> 16));
          result = *(v251 - 1) + (((v56.i32[0] - *(v251 - 1)) * v250 + 127) >> 8);
          v252 = ((unsigned __int16)(LOWORD(dword_1003C18CC[(unsigned __int16)v246 >> 11]) * v249) >> 8);
          v253 = *v251 + (((v56.i32[0] - *v251) * v252 + 127) >> 8);
          v254 = v56.i16[0] - (*v251 + ((unsigned __int16)((v56.i16[0] - *v251) * v252 + 127) >> 8));
          v255 = ((unsigned __int16)(LOWORD(dword_1003C18CC[((unsigned __int16)v246 >> 11) ^ 0x3F])
                                                    * v249) >> 8);
          v256 = v251[1] + (((v56.i32[0] - v251[1]) * v255 + 127) >> 8);
          v257 = v56.i16[0]
               - (v251[1] + ((unsigned __int16)((v56.i16[0] - v251[1]) * v255 + 127) >> 8));
          *(v251 - 1) += ((unsigned __int16)((v56.i16[0] - *(v251 - 1)) * v250 + 127) >> 8)
                       + ((unsigned __int16)((v56.i16[0]
                                            - (*(v251 - 1)
                                                              + ((unsigned __int16)((v56.i16[0] - *(v251 - 1)) * v250
                                                                                  + 127) >> 8)))
                                           * v250
                                           + 127) >> 8);
          *v251 = v253 + ((unsigned __int16)(v254 * v252 + 127) >> 8);
          v251[1] = v256 + ((unsigned __int16)(v257 * v255 + 127) >> 8);
          v258 = *a2 + v43;
          *a2 = v258;
          if ((_DWORD)v39 != 1)
          {
            v259 = v39 - 2;
            v260 = v13 * ((v40 >> 16) + 4) + 2 * ((v7 >> 3) & 0x1FF) + v12 + 3;
            do
            {
              v261 = v259 | 2;
              result = v259 - 1;
              if (v259 <= 1)
                v262 = 1;
              else
                v262 = 2;
              v263 = v291[(v262 & v261) + 6];
              v264 = (_BYTE *)(v260 + (v258 >> 16));
              v265 = (unsigned __int16)v258 >> 11;
              v266 = ((unsigned __int16)(LOWORD(dword_1003C18CC[v265 | 0x20]) * v263) >> 8);
              v267 = *(v264 - 2) + ((unsigned __int16)((v56.i16[0] - *(v264 - 2)) * v266 + 127) >> 8);
              *(v264 - 2) = v267 + ((unsigned __int16)((v56.i16[0] - v267) * v266 + 127) >> 8);
              v268 = ((unsigned __int16)(LOWORD(dword_1003C18CC[v265]) * v263) >> 8);
              *(v264 - 1) += ((unsigned __int16)((v56.i16[0] - *(v264 - 1)) * v268 + 127) >> 8)
                           + ((unsigned __int16)((v56.i16[0]
                                                - (*(v264 - 1)
                                                                  + ((unsigned __int16)((v56.i16[0]
                                                                                       - *(v264 - 1))
                                                                                      * v268
                                                                                      + 127) >> 8)))
                                               * v268
                                               + 127) >> 8);
              v269 = ((unsigned __int16)(LOWORD(dword_1003C18CC[v265 ^ 0x3F]) * v263) >> 8);
              LOBYTE(v263) = *v264 + ((unsigned __int16)((v56.i16[0] - *v264) * v269 + 127) >> 8);
              *v264 = v263 + ((unsigned __int16)((v56.i16[0] - v263) * v269 + 127) >> 8);
              v258 = *a2 + v43;
              *a2 = v258;
              v260 += v13;
              v259 = result;
            }
            while ((_DWORD)result != -1);
          }
        }
      }
    }
    else if ((v39 & 0x80000000) == 0)
    {
      v87 = v57 + (v38 >> 16);
      v88 = (_BYTE *)(v87 + ((v40 >> 16) - 1) * v13);
      v89 = v39 - 1;
      v90 = v39 <= 1 ? 1 : 2;
      v91 = v291[v90 & (v39 | 2)];
      v92 = ((unsigned __int16)(LOWORD(dword_1003C18CC[((unsigned __int16)v40 >> 11) | 0x20]) * v91) >> 8);
      v93 = *v88 + ((unsigned __int16)((v56.i16[0] - *v88) * v92 + 127) >> 8);
      *v88 = v93 + ((unsigned __int16)((v56.i16[0] - v93) * v92 + 127) >> 8);
      v94 = &v88[v13];
      v95 = ((unsigned __int16)(LOWORD(dword_1003C18CC[(unsigned __int16)v40 >> 11]) * v91) >> 8);
      *v94 += ((unsigned __int16)((v56.i16[0] - *v94) * v95 + 127) >> 8)
            + ((unsigned __int16)((v56.i16[0]
                                 - (*v94
                                                   + ((unsigned __int16)((v56.i16[0] - *v94) * v95 + 127) >> 8)))
                                * v95
                                + 127) >> 8);
      LOWORD(v91) = ((unsigned __int16)(LOWORD(dword_1003C18CC[((unsigned __int16)v40 >> 11) ^ 0x3F])
                                                       * v91) >> 8);
      v94[v13] += ((unsigned __int16)((v56.i16[0] - v94[v13]) * v91 + 127) >> 8)
                + ((unsigned __int16)((v56.i16[0]
                                     - (v94[v13]
                                                       + ((unsigned __int16)((v56.i16[0] - v94[v13])
                                                                           * v91
                                                                           + 127) >> 8)))
                                    * v91
                                    + 127) >> 8);
      result = a2[1] + v37;
      a2[1] = result;
      if ((_DWORD)v39)
      {
        v96 = v89 <= 1 ? 1 : 2;
        v97 = v291[(v96 & (v89 | 2)) + 3];
        v98 = (_BYTE *)(v87 + ((result >> 16) - 1) * v13);
        v99 = (unsigned __int16)result >> 11;
        v100 = ((unsigned __int16)(LOWORD(dword_1003C18CC[v99 | 0x20]) * v97) >> 8);
        v101 = *++v98;
        v102 = v101 + ((unsigned __int16)((v56.i16[0] - v101) * v100 + 127) >> 8);
        *v98 = v102 + ((unsigned __int16)((v56.i16[0] - v102) * v100 + 127) >> 8);
        v103 = &v98[v13];
        v104 = ((unsigned __int16)(LOWORD(dword_1003C18CC[v99]) * v97) >> 8);
        result = *v103 + (((v56.i32[0] - *v103) * v104 + 127) >> 8);
        *v103 += ((unsigned __int16)((v56.i16[0] - *v103) * v104 + 127) >> 8)
               + ((unsigned __int16)((v56.i16[0]
                                    - (*v103
                                                      + ((unsigned __int16)((v56.i16[0] - *v103) * v104
                                                                          + 127) >> 8)))
                                   * v104
                                   + 127) >> 8);
        LOWORD(v97) = ((unsigned __int16)(LOWORD(dword_1003C18CC[v99 ^ 0x3F]) * v97) >> 8);
        v103[v13] += ((unsigned __int16)((v56.i16[0] - v103[v13]) * v97 + 127) >> 8)
                   + ((unsigned __int16)((v56.i16[0]
                                        - (v103[v13]
                                                          + ((unsigned __int16)((v56.i16[0] - v103[v13])
                                                                              * v97
                                                                              + 127) >> 8)))
                                       * v97
                                       + 127) >> 8);
        v105 = a2[1] + v37;
        a2[1] = v105;
        v106 = v39 - 1;
        if ((_DWORD)v39 != 1)
        {
          v107 = 0;
          LODWORD(result) = v39 - 2;
          v108 = v87 + 2;
          do
          {
            v109 = v105 >> 16;
            v110 = v108 + ((v105 >> 16) - 1) * v13;
            v111 = result | 2;
            v112 = (_DWORD)result != 0;
            result = (result - 1);
            if ((_DWORD)result != 0 && v112)
              v113 = 2;
            else
              v113 = 1;
            v114 = v291[(v113 & v111) + 6];
            v115 = (unsigned __int16)v105 >> 11;
            v116 = ((unsigned __int16)(LOWORD(dword_1003C18CC[v115 | 0x20]) * v114) >> 8);
            v117 = *(_BYTE *)(v110 + v107)
                 + ((unsigned __int16)((v56.i16[0] - *(unsigned __int8 *)(v110 + v107)) * v116 + 127) >> 8);
            *(_BYTE *)(v110 + v107) = v117 + ((unsigned __int16)((v56.i16[0] - v117) * v116 + 127) >> 8);
            v118 = v13 * v109;
            v119 = v108 + v13 * v109;
            v120 = ((unsigned __int16)(LOWORD(dword_1003C18CC[v115]) * v114) >> 8);
            *(_BYTE *)(v119 + v107) += ((unsigned __int16)((v56.i16[0] - *(unsigned __int8 *)(v119 + v107)) * v120 + 127) >> 8)
                                     + ((unsigned __int16)((v56.i16[0]
                                                          - (*(_BYTE *)(v119 + v107)
                                                                            + ((unsigned __int16)((v56.i16[0]
                                                                                                 - *(unsigned __int8 *)(v119 + v107))
                                                                                                * v120
                                                                                                + 127) >> 8)))
                                                         * v120
                                                         + 127) >> 8);
            v121 = v108 + v13 + v118;
            LOWORD(v119) = ((unsigned __int16)(LOWORD(dword_1003C18CC[v115 ^ 0x3F]) * v114) >> 8);
            *(_BYTE *)(v121 + v107) += ((unsigned __int16)((v56.i16[0] - *(unsigned __int8 *)(v121 + v107)) * v119 + 127) >> 8)
                                     + ((unsigned __int16)((v56.i16[0]
                                                          - (*(_BYTE *)(v121 + v107)
                                                                            + ((unsigned __int16)((v56.i16[0]
                                                                                                 - *(unsigned __int8 *)(v121 + v107))
                                                                                                * v119
                                                                                                + 127) >> 8)))
                                                         * v119
                                                         + 127) >> 8);
            v105 = a2[1] + v37;
            a2[1] = v105;
            ++v107;
          }
          while (v106 != (_DWORD)v107);
        }
      }
    }
  }
  return result;
}

void sub_1002EABB0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  int *v17;
  __int128 v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  __int128 *v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  BOOL v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  _OWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  _OWORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int *v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

uint64_t sub_1002EB100(__int128 *a1, int *a2, __int128 *a3)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v3 = *a2;
  v4 = *a2 < *(_DWORD *)a1;
  if (*a2 == *(_DWORD *)a1)
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = *((_QWORD *)a1 + 1);
    v4 = v5 < v6;
    if (v5 == v6)
      v4 = *((_QWORD *)a2 + 2) < *((_QWORD *)a1 + 2);
  }
  if (v4)
  {
    v7 = *(_DWORD *)a3 < v3;
    if (*(_DWORD *)a3 == v3 && (v8 = *((_QWORD *)a3 + 1), v9 = *((_QWORD *)a2 + 1), v7 = v8 < v9, v8 == v9))
    {
      if (*((_QWORD *)a3 + 2) >= *((_QWORD *)a2 + 2))
        goto LABEL_9;
    }
    else if (!v7)
    {
LABEL_9:
      v11 = *a1;
      v10 = a1[1];
      v12 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v12;
      *(_OWORD *)a2 = v11;
      *((_OWORD *)a2 + 1) = v10;
      if (*(_DWORD *)a3 == *a2)
      {
        v13 = *((_QWORD *)a3 + 1);
        v14 = *((_QWORD *)a2 + 1);
        if (v13 == v14)
        {
          if (*((_QWORD *)a3 + 2) >= *((_QWORD *)a2 + 2))
            return 1;
        }
        else if (v13 >= v14)
        {
          return 1;
        }
      }
      else if (*(_DWORD *)a3 >= *a2)
      {
        return 1;
      }
      v28 = *(_OWORD *)a2;
      v27 = *((_OWORD *)a2 + 1);
      v29 = a3[1];
      *(_OWORD *)a2 = *a3;
      *((_OWORD *)a2 + 1) = v29;
      *a3 = v28;
      a3[1] = v27;
      return 2;
    }
    v20 = *a1;
    v19 = a1[1];
    v21 = a3[1];
    *a1 = *a3;
    a1[1] = v21;
    *a3 = v20;
    a3[1] = v19;
    return 1;
  }
  v15 = *(_DWORD *)a3 < v3;
  if (*(_DWORD *)a3 == v3 && (v16 = *((_QWORD *)a3 + 1), v17 = *((_QWORD *)a2 + 1), v15 = v16 < v17, v16 == v17))
  {
    if (*((_QWORD *)a3 + 2) >= *((_QWORD *)a2 + 2))
      return 0;
  }
  else if (!v15)
  {
    return 0;
  }
  v23 = *(_OWORD *)a2;
  v22 = *((_OWORD *)a2 + 1);
  v24 = a3[1];
  *(_OWORD *)a2 = *a3;
  *((_OWORD *)a2 + 1) = v24;
  *a3 = v23;
  a3[1] = v22;
  if (*a2 != *(_DWORD *)a1)
  {
    if (*a2 >= *(_DWORD *)a1)
      return 1;
    goto LABEL_33;
  }
  v25 = *((_QWORD *)a2 + 1);
  v26 = *((_QWORD *)a1 + 1);
  if (v25 == v26)
  {
    if (*((_QWORD *)a2 + 2) >= *((_QWORD *)a1 + 2))
      return 1;
    goto LABEL_33;
  }
  if (v25 < v26)
  {
LABEL_33:
    v31 = *a1;
    v30 = a1[1];
    v32 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v32;
    *(_OWORD *)a2 = v31;
    *((_OWORD *)a2 + 1) = v30;
    return 2;
  }
  return 1;
}

__int128 *sub_1002EB2B8(__int128 *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  __int128 *i;
  int v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  __int128 v27;
  __int128 v29;
  __int128 v30;

  v2 = *(_QWORD *)a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  v5 = *(_DWORD *)(a2 - 32);
  v6 = *(_QWORD *)a1;
  v7 = v6 < v5;
  if (v6 == v5)
  {
    v8 = *(_QWORD *)(a2 - 24);
    v7 = v3 < v8;
    if (v3 == v8)
      v7 = v4 < *(_QWORD *)(a2 - 16);
  }
  if (v7)
  {
    i = a1 + 2;
    v10 = *((_DWORD *)a1 + 8);
    v11 = v6 < v10;
    if (v6 != v10)
      goto LABEL_9;
LABEL_7:
    v12 = *((_QWORD *)i + 1);
    v11 = v3 < v12;
    if (v3 == v12)
      v11 = v4 < *((_QWORD *)i + 2);
LABEL_9:
    while (!v11)
    {
      v13 = *((_DWORD *)i + 8);
      i += 2;
      v11 = v6 < v13;
      if (v6 == v13)
        goto LABEL_7;
    }
  }
  else
  {
    for (i = a1 + 2; (unint64_t)i < a2; i += 2)
    {
      v14 = v6 < *(_DWORD *)i;
      if (v6 == *(_DWORD *)i)
      {
        v15 = *((_QWORD *)i + 1);
        v14 = v3 < v15;
        if (v3 == v15)
          v14 = v4 < *((_QWORD *)i + 2);
      }
      if (v14)
        break;
    }
  }
  if ((unint64_t)i < a2)
  {
    a2 -= 32;
    v16 = v6 < v5;
    if (v6 != v5)
      goto LABEL_22;
LABEL_20:
    v17 = *(_QWORD *)(a2 + 8);
    v16 = v3 < v17;
    if (v3 == v17)
      v16 = v4 < *(_QWORD *)(a2 + 16);
LABEL_22:
    while (v16)
    {
      v18 = *(_DWORD *)(a2 - 32);
      a2 -= 32;
      v16 = v6 < v18;
      if (v6 == v18)
        goto LABEL_20;
    }
  }
  v19 = *((_QWORD *)a1 + 3);
LABEL_27:
  while ((unint64_t)i < a2)
  {
    v29 = *i;
    v30 = i[1];
    v20 = *(_OWORD *)(a2 + 16);
    *i = *(_OWORD *)a2;
    i[1] = v20;
    *(_OWORD *)a2 = v29;
    *(_OWORD *)(a2 + 16) = v30;
    do
    {
      while (1)
      {
        while (1)
        {
          v21 = *((_DWORD *)i + 8);
          i += 2;
          v22 = v6 < v21;
          if (v6 == v21)
            break;
          if (v22)
            goto LABEL_38;
        }
        v23 = *((_QWORD *)i + 1);
        if (v3 != v23)
          break;
        if (v4 < *((_QWORD *)i + 2))
          goto LABEL_38;
      }
    }
    while (v3 >= v23);
    do
    {
      while (1)
      {
LABEL_38:
        while (1)
        {
          v24 = *(_DWORD *)(a2 - 32);
          a2 -= 32;
          v25 = v6 < v24;
          if (v6 == v24)
            break;
          if (!v25)
            goto LABEL_27;
        }
        v26 = *(_QWORD *)(a2 + 8);
        if (v3 != v26)
          break;
        if (v4 >= *(_QWORD *)(a2 + 16))
          goto LABEL_27;
      }
    }
    while (v3 < v26);
  }
  if (i - 2 != a1)
  {
    v27 = *(i - 1);
    *a1 = *(i - 2);
    a1[1] = v27;
  }
  *((_QWORD *)i - 4) = v2;
  *((_QWORD *)i - 3) = v3;
  *((_QWORD *)i - 2) = v4;
  *((_QWORD *)i - 1) = v19;
  return i;
}

unint64_t sub_1002EB458(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  int v27;
  BOOL v28;
  uint64_t v29;
  __int128 v30;
  __int128 v32;
  __int128 v33;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = *a1;
  v8 = a1;
  v9 = *((_DWORD *)a1 + 8);
  v10 = v9 < v7;
  if (v9 != v7)
    goto LABEL_4;
LABEL_2:
  v11 = v8[5];
  v10 = v11 < v4;
  if (v11 == v4)
    v10 = a1[v2 + 6] < v5;
LABEL_4:
  while (v10)
  {
    v2 += 4;
    v8 = &a1[v2];
    v12 = a1[v2 + 4];
    v10 = v12 < v7;
    if (v12 == v7)
      goto LABEL_2;
  }
  v13 = (unint64_t)&a1[v2 + 4];
  if (v2 * 8)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          v14 = *(_DWORD *)(a2 - 32);
          a2 -= 32;
          v15 = v14 < v7;
          if (v14 == v7)
            break;
          if (v15)
            goto LABEL_17;
        }
        v16 = *(_QWORD *)(a2 + 8);
        if (v16 != v4)
          break;
        if (*(_QWORD *)(a2 + 16) < v5)
          goto LABEL_17;
      }
    }
    while (v16 >= v4);
  }
  else if (v13 < a2)
  {
    do
    {
      v27 = *(_DWORD *)(a2 - 32);
      a2 -= 32;
      v28 = v27 < v7;
      if (v27 == v7)
      {
        v29 = *(_QWORD *)(a2 + 8);
        v28 = v29 < v4;
        if (v29 == v4)
          v28 = *(_QWORD *)(a2 + 16) < v5;
      }
    }
    while (!v28 && v13 < a2);
  }
LABEL_17:
  v17 = v13;
  if (v13 < a2)
  {
    v18 = a2;
    do
    {
      v32 = *(_OWORD *)v17;
      v33 = *(_OWORD *)(v17 + 16);
      v19 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_OWORD *)(v17 + 16) = v19;
      *(_OWORD *)v18 = v32;
      *(_OWORD *)(v18 + 16) = v33;
      do
      {
        while (1)
        {
          while (1)
          {
            v20 = *(_DWORD *)(v17 + 32);
            v17 += 32;
            v21 = v20 < v7;
            if (v20 == v7)
              break;
            if (!v21)
              goto LABEL_30;
          }
          v22 = *(_QWORD *)(v17 + 8);
          if (v22 != v4)
            break;
          if (*(_QWORD *)(v17 + 16) >= v5)
            goto LABEL_30;
        }
      }
      while (v22 < v4);
      do
      {
        while (1)
        {
LABEL_30:
          while (1)
          {
            v23 = *(_DWORD *)(v18 - 32);
            v18 -= 32;
            v24 = v23 < v7;
            if (v23 == v7)
              break;
            if (v24)
              goto LABEL_19;
          }
          v25 = *(_QWORD *)(v18 + 8);
          if (v25 != v4)
            break;
          if (*(_QWORD *)(v18 + 16) < v5)
            goto LABEL_19;
        }
      }
      while (v25 >= v4);
LABEL_19:
      ;
    }
    while (v17 < v18);
  }
  if ((uint64_t *)(v17 - 32) != a1)
  {
    v30 = *(_OWORD *)(v17 - 16);
    *(_OWORD *)a1 = *(_OWORD *)(v17 - 32);
    *((_OWORD *)a1 + 1) = v30;
  }
  *(_QWORD *)(v17 - 32) = v3;
  *(_QWORD *)(v17 - 24) = v4;
  *(_QWORD *)(v17 - 16) = v5;
  *(_QWORD *)(v17 - 8) = v6;
  return v17 - 32;
}

BOOL sub_1002EB5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  _OWORD *v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v23 = (_OWORD *)(a2 - 32);
      v24 = *(_DWORD *)(a2 - 32);
      v25 = v24 < *(_DWORD *)a1;
      if (v24 == *(_DWORD *)a1 && (v26 = *(_QWORD *)(a2 - 24), v27 = *(_QWORD *)(a1 + 8), v25 = v26 < v27, v26 == v27))
      {
        if (*(_QWORD *)(a2 - 16) >= *(_QWORD *)(a1 + 16))
          return result;
      }
      else if (!v25)
      {
        return result;
      }
      v29 = *(_OWORD *)a1;
      v28 = *(_OWORD *)(a1 + 16);
      v30 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)a1 = *v23;
      *(_OWORD *)(a1 + 16) = v30;
      *v23 = v29;
      *(_OWORD *)(a2 - 16) = v28;
      return result;
    case 3:
      sub_1002EB100((__int128 *)a1, (int *)(a1 + 32), (__int128 *)(a2 - 32));
      return 1;
    case 4:
      sub_1002EB894(a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), (__int128 *)(a2 - 32));
      return 1;
    case 5:
      sub_1002EB9B0(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      v6 = a1 + 64;
      sub_1002EB100((__int128 *)a1, (int *)(a1 + 32), (__int128 *)(a1 + 64));
      v7 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (2)
  {
    v11 = *(_DWORD *)v7;
    if (*(_DWORD *)v7 == *(_DWORD *)v6)
    {
      v12 = *(_QWORD *)(v7 + 8);
      v13 = *(_QWORD *)(v6 + 8);
      if (v12 == v13)
      {
        if (*(_QWORD *)(v7 + 16) >= *(_QWORD *)(v6 + 16))
          goto LABEL_6;
      }
      else if (v12 >= v13)
      {
        goto LABEL_6;
      }
    }
    else
    {
      if (v11 >= *(_DWORD *)v6)
        goto LABEL_6;
      v12 = *(_QWORD *)(v7 + 8);
    }
    v14 = *(_DWORD *)(v7 + 4);
    v16 = *(_QWORD *)(v7 + 16);
    v15 = *(_QWORD *)(v7 + 24);
    v17 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v6;
    *(_OWORD *)(v7 + 16) = v17;
    v10 = a1;
    if (v6 == a1)
      goto LABEL_5;
    v18 = v8;
    while (1)
    {
      v20 = *(_DWORD *)(a1 + v18 + 32);
      v21 = v11 < v20;
      if (v11 == v20)
      {
        v22 = *(_QWORD *)(a1 + v18 + 40);
        v21 = v12 < v22;
        if (v12 == v22)
          break;
      }
      if (!v21)
      {
        v10 = v6;
        goto LABEL_5;
      }
LABEL_18:
      v6 -= 32;
      v19 = *(_OWORD *)(a1 + v18 + 48);
      *(_OWORD *)(a1 + v18 + 64) = *(_OWORD *)(a1 + v18 + 32);
      *(_OWORD *)(a1 + v18 + 80) = v19;
      v18 -= 32;
      if (v18 == -64)
      {
        v10 = a1;
        goto LABEL_5;
      }
    }
    if (v16 < *(_QWORD *)(a1 + v18 + 48))
      goto LABEL_18;
    v10 = a1 + v18 + 64;
LABEL_5:
    *(_DWORD *)v10 = v11;
    *(_DWORD *)(v10 + 4) = v14;
    *(_QWORD *)(v10 + 8) = v12;
    *(_QWORD *)(v10 + 16) = v16;
    ++v9;
    *(_QWORD *)(v10 + 24) = v15;
    if (v9 == 8)
      return v7 + 32 == a2;
LABEL_6:
    v6 = v7;
    v8 += 32;
    v7 += 32;
    if (v7 != a2)
      continue;
    return 1;
  }
}

__n128 sub_1002EB894(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __n128 result;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  sub_1002EB100((__int128 *)a1, (int *)a2, a3);
  v9 = *(_DWORD *)a4 < *(_DWORD *)a3;
  if (*(_DWORD *)a4 == *(_DWORD *)a3
    && (v10 = *((_QWORD *)a4 + 1), v11 = *((_QWORD *)a3 + 1), v9 = v10 < v11, v10 == v11))
  {
    if (*((_QWORD *)a4 + 2) >= *((_QWORD *)a3 + 2))
      return result;
  }
  else if (!v9)
  {
    return result;
  }
  v12 = *a3;
  result = (__n128)a3[1];
  v13 = a4[1];
  *a3 = *a4;
  a3[1] = v13;
  *a4 = v12;
  a4[1] = (__int128)result;
  v14 = *(_DWORD *)a3 < *(_DWORD *)a2;
  if (*(_DWORD *)a3 == *(_DWORD *)a2)
  {
    v15 = *((_QWORD *)a3 + 1);
    v16 = *((_QWORD *)a2 + 1);
    v14 = v15 < v16;
    if (v15 == v16)
      v14 = *((_QWORD *)a3 + 2) < *((_QWORD *)a2 + 2);
  }
  if (v14)
  {
    v17 = *a2;
    result = (__n128)a2[1];
    v18 = a3[1];
    *a2 = *a3;
    a2[1] = v18;
    *a3 = v17;
    a3[1] = (__int128)result;
    v19 = *(_DWORD *)a2 < *(_DWORD *)a1;
    if (*(_DWORD *)a2 == *(_DWORD *)a1)
    {
      v20 = *((_QWORD *)a2 + 1);
      v21 = *(_QWORD *)(a1 + 8);
      v19 = v20 < v21;
      if (v20 == v21)
        v19 = *((_QWORD *)a2 + 2) < *(_QWORD *)(a1 + 16);
    }
    if (v19)
    {
      v22 = *(_OWORD *)a1;
      result = *(__n128 *)(a1 + 16);
      v23 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v23;
      *a2 = v22;
      a2[1] = (__int128)result;
    }
  }
  return result;
}

__n128 sub_1002EB9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  result.n128_u64[0] = sub_1002EB894(a1, (__int128 *)a2, (__int128 *)a3, (__int128 *)a4).n128_u64[0];
  v11 = *(_DWORD *)a5 < *(_DWORD *)a4;
  if (*(_DWORD *)a5 == *(_DWORD *)a4
    && (v12 = *(_QWORD *)(a5 + 8), v13 = *(_QWORD *)(a4 + 8), v11 = v12 < v13, v12 == v13))
  {
    if (*(_QWORD *)(a5 + 16) >= *(_QWORD *)(a4 + 16))
      return result;
  }
  else if (!v11)
  {
    return result;
  }
  v14 = *(_OWORD *)a4;
  result = *(__n128 *)(a4 + 16);
  v15 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_OWORD *)(a4 + 16) = v15;
  *(_OWORD *)a5 = v14;
  *(__n128 *)(a5 + 16) = result;
  v16 = *(_DWORD *)a4 < *(_DWORD *)a3;
  if (*(_DWORD *)a4 == *(_DWORD *)a3)
  {
    v17 = *(_QWORD *)(a4 + 8);
    v18 = *(_QWORD *)(a3 + 8);
    v16 = v17 < v18;
    if (v17 == v18)
      v16 = *(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16);
  }
  if (v16)
  {
    v19 = *(_OWORD *)a3;
    result = *(__n128 *)(a3 + 16);
    v20 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v20;
    *(_OWORD *)a4 = v19;
    *(__n128 *)(a4 + 16) = result;
    v21 = *(_DWORD *)a3 < *(_DWORD *)a2;
    if (*(_DWORD *)a3 == *(_DWORD *)a2)
    {
      v22 = *(_QWORD *)(a3 + 8);
      v23 = *(_QWORD *)(a2 + 8);
      v21 = v22 < v23;
      if (v22 == v23)
        v21 = *(_QWORD *)(a3 + 16) < *(_QWORD *)(a2 + 16);
    }
    if (v21)
    {
      v24 = *(_OWORD *)a2;
      result = *(__n128 *)(a2 + 16);
      v25 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v25;
      *(_OWORD *)a3 = v24;
      *(__n128 *)(a3 + 16) = result;
      v26 = *(_DWORD *)a2 < *(_DWORD *)a1;
      if (*(_DWORD *)a2 == *(_DWORD *)a1)
      {
        v27 = *(_QWORD *)(a2 + 8);
        v28 = *(_QWORD *)(a1 + 8);
        v26 = v27 < v28;
        if (v27 == v28)
          v26 = *(_QWORD *)(a2 + 16) < *(_QWORD *)(a1 + 16);
      }
      if (v26)
      {
        v29 = *(_OWORD *)a1;
        result = *(__n128 *)(a1 + 16);
        v30 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v30;
        *(_OWORD *)a2 = v29;
        *(__n128 *)(a2 + 16) = result;
      }
    }
  }
  return result;
}

uint64_t sub_1002EBB1C(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  __int128 v32;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 5)
    {
      v6 = v4 >> 4;
      v7 = (v4 >> 4) + 1;
      v8 = result + 32 * v7;
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = *(_DWORD *)(v8 + 32);
        v11 = *(_DWORD *)v8 < v10;
        if (*(_DWORD *)v8 == v10)
        {
          v12 = result + 32 * v7;
          v13 = *(_QWORD *)(v12 + 8);
          v14 = *(_QWORD *)(v8 + 40);
          v11 = v13 < v14;
          if (v13 == v14)
            v11 = *(_QWORD *)(v12 + 16) < *(_QWORD *)(v8 + 48);
        }
        if (v11)
        {
          v8 += 32;
          v7 = v9;
        }
      }
      v15 = *a4;
      if (*(_DWORD *)v8 == *a4)
      {
        v16 = *(_QWORD *)(v8 + 8);
        v17 = *((_QWORD *)a4 + 1);
        if (v16 == v17)
        {
          v17 = *(_QWORD *)(v8 + 8);
          if (*(_QWORD *)(v8 + 16) < *((_QWORD *)a4 + 2))
            return result;
        }
        else if (v16 < v17)
        {
          return result;
        }
      }
      else
      {
        if (*(_DWORD *)v8 < v15)
          return result;
        v17 = *((_QWORD *)a4 + 1);
      }
      v18 = a4[1];
      v19 = *((_QWORD *)a4 + 2);
      v20 = *((_QWORD *)a4 + 3);
      v21 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)a4 = *(_OWORD *)v8;
      *((_OWORD *)a4 + 1) = v21;
      if (v5 < v7)
      {
LABEL_31:
        *(_DWORD *)v8 = v15;
        *(_DWORD *)(v8 + 4) = v18;
        *(_QWORD *)(v8 + 8) = v17;
        *(_QWORD *)(v8 + 16) = v19;
        *(_QWORD *)(v8 + 24) = v20;
      }
      else
      {
        while (1)
        {
          v22 = v8;
          v23 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = result + 32 * v7;
          v24 = v23 + 2;
          if (v24 < a3)
          {
            v25 = *(_DWORD *)(v8 + 32);
            v26 = *(_DWORD *)v8 < v25;
            if (*(_DWORD *)v8 == v25)
            {
              v27 = result + 32 * v7;
              v28 = *(_QWORD *)(v27 + 8);
              v29 = *(_QWORD *)(v8 + 40);
              v26 = v28 < v29;
              if (v28 == v29)
                v26 = *(_QWORD *)(v27 + 16) < *(_QWORD *)(v8 + 48);
            }
            if (v26)
            {
              v8 += 32;
              v7 = v24;
            }
          }
          v30 = *(_DWORD *)v8 < v15;
          if (*(_DWORD *)v8 == v15)
          {
            v31 = *(_QWORD *)(v8 + 8);
            v30 = v31 < v17;
            if (v31 == v17)
              v30 = *(_QWORD *)(v8 + 16) < v19;
          }
          if (v30)
            break;
          v32 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)v22 = *(_OWORD *)v8;
          *(_OWORD *)(v22 + 16) = v32;
          if (v5 < v7)
            goto LABEL_31;
        }
        *(_DWORD *)v22 = v15;
        *(_DWORD *)(v22 + 4) = v18;
        *(_QWORD *)(v22 + 8) = v17;
        *(_QWORD *)(v22 + 16) = v19;
        *(_QWORD *)(v22 + 24) = v20;
      }
    }
  }
  return result;
}

_OWORD *sub_1002EBCA8(_OWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _OWORD *v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if (a4 >= 2)
  {
    v4 = 0;
    v34 = *result;
    v35 = result[1];
    v5 = result;
    do
    {
      v7 = v5;
      v8 = v4 + 1;
      v5 += 2 * v4 + 2;
      v9 = 2 * v4;
      v4 = (2 * v4) | 1;
      v10 = v9 + 2;
      if (v10 < a4)
      {
        v11 = *((_DWORD *)v5 + 8);
        v12 = *(_DWORD *)v5 < v11;
        if (*(_DWORD *)v5 == v11)
        {
          v13 = &v7[2 * v8];
          v14 = *((_QWORD *)v13 + 1);
          v15 = *((_QWORD *)v5 + 5);
          v12 = v14 < v15;
          if (v14 == v15)
            v12 = *((_QWORD *)v13 + 2) < *((_QWORD *)v5 + 6);
        }
        if (v12)
        {
          v5 += 2;
          v4 = v10;
        }
      }
      v6 = v5[1];
      *v7 = *v5;
      v7[1] = v6;
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    v16 = (_OWORD *)(a2 - 32);
    if (v5 == (_OWORD *)(a2 - 32))
    {
      *v5 = v34;
      v5[1] = v35;
      return result;
    }
    v17 = *(_OWORD *)(a2 - 16);
    *v5 = *v16;
    v5[1] = v17;
    *v16 = v34;
    *(_OWORD *)(a2 - 16) = v35;
    v18 = (char *)v5 - (char *)result + 32;
    if (v18 < 33)
      return result;
    v19 = ((unint64_t)v18 >> 5) - 2;
    v20 = v19 >> 1;
    v21 = &result[2 * (v19 >> 1)];
    v22 = *(_DWORD *)v5;
    if (*(_DWORD *)v21 == *(_DWORD *)v5)
    {
      v23 = *((_QWORD *)v21 + 1);
      v24 = *((_QWORD *)v5 + 1);
      if (v23 == v24)
      {
        v24 = *((_QWORD *)v21 + 1);
        if (*(_QWORD *)&result[2 * v20 + 1] >= *((_QWORD *)v5 + 2))
          return result;
      }
      else if (v23 >= v24)
      {
        return result;
      }
    }
    else
    {
      if (*(_DWORD *)v21 >= v22)
        return result;
      v24 = *((_QWORD *)v5 + 1);
    }
    v25 = *((_DWORD *)v5 + 1);
    v26 = *((_QWORD *)v5 + 2);
    v27 = *((_QWORD *)v5 + 3);
    v28 = v21[1];
    *v5 = *v21;
    v5[1] = v28;
    if (v19 >= 2)
    {
      while (1)
      {
        v30 = v20 - 1;
        v20 = (v20 - 1) >> 1;
        v29 = &result[2 * v20];
        v31 = *(_DWORD *)v29 < v22;
        if (*(_DWORD *)v29 == v22)
        {
          v32 = *((_QWORD *)v29 + 1);
          v31 = v32 < v24;
          if (v32 == v24)
            v31 = *(_QWORD *)&result[2 * v20 + 1] < v26;
        }
        if (!v31)
          break;
        v33 = v29[1];
        *v21 = *v29;
        v21[1] = v33;
        v21 = &result[2 * v20];
        if (v30 <= 1)
          goto LABEL_29;
      }
    }
    v29 = v21;
LABEL_29:
    *(_DWORD *)v29 = v22;
    *((_DWORD *)v29 + 1) = v25;
    *((_QWORD *)v29 + 1) = v24;
    *((_QWORD *)v29 + 2) = v26;
    *((_QWORD *)v29 + 3) = v27;
  }
  return result;
}

double sub_1002EBE54(_QWORD *a1)
{
  double result;

  *a1 = off_100451F30;
  result = NAN;
  a1[1] = -1;
  return result;
}

double sub_1002EBE74(_QWORD *a1)
{
  double result;

  *a1 = off_100451F58;
  result = NAN;
  a1[1] = -1;
  return result;
}

unsigned int **sub_1002EBE98(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

unsigned int **sub_1002EBEEC(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

uint64_t sub_1002EBF40(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, unsigned int a5, __int16 a6, __int16 a7, int a8, int a9, double *a10)
{
  *(_QWORD *)a1 = off_100451F88;
  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000001;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  sub_1002EC0B8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

void sub_1002EBFFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  sub_1002EC6E4((unsigned int **)(v1 + 288));
  sub_1002EBE98((unsigned int **)(v1 + 272));
  sub_1002EBEEC((unsigned int **)(v1 + 256));
  v5 = *(void **)(v1 + 232);
  if (v5)
  {
    *(_QWORD *)(v1 + 240) = v5;
    operator delete(v5);
    v6 = *(void **)(v1 + 184);
    if (!v6)
    {
LABEL_3:
      v7 = *(void **)(v1 + 160);
      if (!v7)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v6 = *(void **)(v1 + 184);
    if (!v6)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 192) = v6;
  operator delete(v6);
  v7 = *(void **)(v1 + 160);
  if (!v7)
  {
LABEL_4:
    v8 = *(void **)(v1 + 136);
    if (!v8)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)(v1 + 168) = v7;
  operator delete(v7);
  v8 = *(void **)(v1 + 136);
  if (!v8)
  {
LABEL_5:
    v9 = *v3;
    if (!*v3)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  *(_QWORD *)(v1 + 144) = v8;
  operator delete(v8);
  v9 = *v3;
  if (!*v3)
  {
LABEL_6:
    v10 = *v2;
    if (!*v2)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(v1 + 120) = v9;
  operator delete(v9);
  v10 = *v2;
  if (!*v2)
LABEL_7:
    _Unwind_Resume(a1);
LABEL_13:
  *(_QWORD *)(v1 + 88) = v10;
  operator delete(v10);
  _Unwind_Resume(a1);
}

double sub_1002EC0B8(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, unsigned int a5, __int16 a6, __int16 a7, int a8, int a9, double *a10)
{
  __int128 v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  __int128 v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  size_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  size_t v59;
  void *v60;
  char *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  __int128 v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char v73;
  unsigned int v74;
  int v75;
  int v76;
  double result;
  char *v78;
  uint64_t v79;
  uint64_t v80;

  *(_DWORD *)(a1 + 8) = a5 & 0xFFF;
  *(_DWORD *)(a1 + 12) = a6 & 0xFFF;
  *(_DWORD *)(a1 + 16) = a7 & 0xFFF;
  v15 = *a2;
  if (*(_QWORD *)a2)
  {
    v16 = (unsigned int *)(*(_QWORD *)a2 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  v18 = *(unsigned int **)(a1 + 256);
  *(_OWORD *)(a1 + 256) = v15;
  if (v18)
  {
    v19 = v18 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
  }
  v22 = *a3;
  if (*(_QWORD *)a3)
  {
    v23 = (unsigned int *)(*(_QWORD *)a3 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
  }
  v25 = *(unsigned int **)(a1 + 272);
  *(_OWORD *)(a1 + 272) = v22;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
  }
  v29 = *a4;
  if (*(_QWORD *)a4)
  {
    v30 = (unsigned int *)(*(_QWORD *)a4 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  v32 = *(unsigned int **)(a1 + 288);
  *(_OWORD *)(a1 + 288) = v29;
  if (v32)
  {
    v33 = v32 + 2;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 16))(v32);
  }
  v36 = a9;
  if (a9 < 0)
    v36 = a8;
  *(_DWORD *)(a1 + 72) = a8;
  *(_DWORD *)(a1 + 76) = v36;
  if (v36 == 3)
  {
    v79 = 0;
    v80 = 0;
    qmemcpy((void *)sub_10029430C(&v79, 31), "columnBorderType != BORDER_WRAP", 31);
    sub_100294B74(-215, &v79, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 127);
  }
  v37 = *(_DWORD **)(a1 + 264);
  if (v37)
  {
    if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a1 + 8))
    {
      v79 = 0;
      v80 = 0;
      v38 = sub_10029430C(&v79, 18);
      *(_WORD *)(v38 + 16) = 25968;
      *(_OWORD *)v38 = *(_OWORD *)"bufType == srcType";
      sub_100294B74(-215, &v79, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 137);
    }
    LODWORD(v39) = v37[2];
    *(_DWORD *)(a1 + 20) = v39;
    v40 = v37[3];
    *(_DWORD *)(a1 + 24) = v40;
    v41 = v37[4];
    *(_DWORD *)(a1 + 28) = v41;
    v42 = v37[5];
    *(_DWORD *)(a1 + 32) = v42;
    if (v41 < 0)
      goto LABEL_41;
  }
  else
  {
    v43 = *(_QWORD *)(a1 + 280);
    if (!v43 || (v44 = *(_QWORD *)(a1 + 296)) == 0)
    {
      v79 = 0;
      v80 = 0;
      qmemcpy((void *)sub_10029430C(&v79, 25), "rowFilter && columnFilter", 25);
      sub_100294B74(-215, &v79, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 131);
    }
    LODWORD(v39) = *(_DWORD *)(v43 + 8);
    v40 = *(_DWORD *)(v44 + 8);
    *(_DWORD *)(a1 + 20) = v39;
    *(_DWORD *)(a1 + 24) = v40;
    v41 = *(_DWORD *)(v43 + 12);
    v42 = *(_DWORD *)(v44 + 12);
    *(_DWORD *)(a1 + 28) = v41;
    *(_DWORD *)(a1 + 32) = v42;
    if (v41 < 0)
    {
LABEL_41:
      v79 = 0;
      v80 = 0;
      qmemcpy((void *)sub_10029430C(&v79, 83), "0 <= anchor.x && anchor.x < ksize.width && 0 <= anchor.y && anchor.y < ksize.height", 83);
      sub_100294B74(-215, &v79, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 143);
    }
  }
  if (v41 >= (int)v39 || v42 < 0 || v42 >= v40)
    goto LABEL_41;
  v45 = (((a5 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a5 & 7))) & 3);
  v46 = *(_QWORD *)(a1 + 80);
  v47 = v45 >> ((*(_DWORD *)(a1 + 8) >> 1) & 2);
  *(_DWORD *)(a1 + 104) = v47;
  if ((int)v39 <= 2)
    v39 = 2;
  else
    v39 = v39;
  v48 = v39 - 1;
  v49 = (v39 - 1) * v47;
  v50 = (*(_QWORD *)(a1 + 88) - v46) >> 2;
  if (v49 <= v50)
  {
    if (v49 < v50)
      *(_QWORD *)(a1 + 88) = v46 + 4 * v49;
  }
  else
  {
    sub_100223D9C(a1 + 80, v49 - v50);
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
  if (!*(_DWORD *)(a1 + 72) || !*(_DWORD *)(a1 + 76))
  {
    v51 = v48 * v45;
    v53 = *(char **)(a1 + 160);
    v52 = *(char **)(a1 + 168);
    v54 = v52 - v53;
    v55 = v51 - (v52 - v53);
    if (v51 <= v52 - v53)
    {
      if (v51 < v52 - v53)
        *(_QWORD *)(a1 + 168) = &v53[v51];
      goto LABEL_81;
    }
    v56 = *(_QWORD *)(a1 + 176);
    if (v56 - (uint64_t)v52 >= v55)
    {
      bzero(*(void **)(a1 + 168), v51 - (v52 - v53));
      *(_QWORD *)(a1 + 168) = &v53[v51];
      goto LABEL_81;
    }
    v57 = v56 - (_QWORD)v53;
    v58 = 2 * v57;
    if (2 * v57 <= v51)
      v58 = v51;
    if (v57 >= 0x3FFFFFFFFFFFFFFFLL)
      v59 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    v60 = operator new(v59);
    v61 = (char *)v60 + v59;
    v78 = (char *)v60 + v51;
    v62 = (char *)v60 + v54;
    bzero((char *)v60 + v54, v55);
    if (v52 == v53)
    {
      *(_QWORD *)(a1 + 160) = v62;
      *(_QWORD *)(a1 + 168) = v78;
      *(_QWORD *)(a1 + 176) = v61;
      if (!v52)
        goto LABEL_81;
      goto LABEL_80;
    }
    if (v54 < 8 || (unint64_t)(v53 - (_BYTE *)v60) < 0x20)
      goto LABEL_77;
    if (v54 >= 0x20)
    {
      v63 = v54 & 0xFFFFFFFFFFFFFFE0;
      v64 = v52 - 16;
      v65 = (char *)v60 + v52 - 16 - v53;
      v66 = v54 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v67 = *(_OWORD *)v64;
        *((_OWORD *)v65 - 1) = *((_OWORD *)v64 - 1);
        *(_OWORD *)v65 = v67;
        v65 -= 32;
        v64 -= 32;
        v66 -= 32;
      }
      while (v66);
      if (v54 == v63)
      {
LABEL_79:
        v52 = v53;
        *(_QWORD *)(a1 + 160) = v60;
        *(_QWORD *)(a1 + 168) = v78;
        *(_QWORD *)(a1 + 176) = v61;
        if (v53)
LABEL_80:
          operator delete(v52);
LABEL_81:
        v74 = *(_DWORD *)(a1 + 8);
        v75 = (v74 >> 3) & 0x1FF;
        if (((v74 >> 3) & 0x1FC) != 0)
          v76 = 24;
        else
          v76 = 8 * v75;
        sub_10025C560(a10, *(_QWORD *)(a1 + 160), v76 & 0xFFFFFFF8 | *(_DWORD *)(a1 + 8) & 7, v48 + v48 * v75);
        goto LABEL_85;
      }
      if ((v54 & 0x18) == 0)
      {
        v62 -= v63;
        v52 -= v63;
        goto LABEL_77;
      }
    }
    else
    {
      v63 = 0;
    }
    v62 -= v54 & 0xFFFFFFFFFFFFFFF8;
    v68 = &v52[-v63 - 8];
    v69 = (char *)(v68 - v53);
    v70 = v63 - (v54 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v71 = *(_QWORD *)v68;
      v68 -= 8;
      *(_QWORD *)&v69[(_QWORD)v60] = v71;
      v69 -= 8;
      v70 += 8;
    }
    while (v70);
    v52 -= v54 & 0xFFFFFFFFFFFFFFF8;
    if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_79;
LABEL_77:
    v72 = v62 - 1;
    do
    {
      v73 = *--v52;
      *v72-- = v73;
    }
    while (v52 != v53);
    goto LABEL_79;
  }
LABEL_85:
  result = NAN;
  *(_QWORD *)(a1 + 40) = -1;
  return result;
}

void sub_1002EC678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned int **sub_1002EC6E4(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

uint64_t sub_1002EC738(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, unsigned int a5, __int16 a6, __int16 a7, int a8, int a9, double *a10)
{
  return sub_1002EBF40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

_QWORD *sub_1002EC74C(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  *a1 = off_100451F88;
  v2 = (unsigned int *)a1[36];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  a1[36] = 0;
  a1[37] = 0;
  v6 = (unsigned int *)a1[34];
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
  }
  a1[34] = 0;
  a1[35] = 0;
  v10 = (unsigned int *)a1[32];
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
  }
  a1[32] = 0;
  a1[33] = 0;
  v14 = (void *)a1[29];
  if (v14)
  {
    a1[30] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[23];
  if (v15)
  {
    a1[24] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[20];
  if (v16)
  {
    a1[21] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[17];
  if (v17)
  {
    a1[18] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[14];
  if (v18)
  {
    a1[15] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[10];
  if (v19)
  {
    a1[11] = v19;
    operator delete(v19);
  }
  return a1;
}

void sub_1002EC884(_QWORD *a1)
{
  sub_1002EC74C(a1);
  operator delete();
}

uint64_t sub_1002EC8A8(uint64_t a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  __int128 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  size_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  __int128 v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  char *v79;
  uint64_t v80;
  char v81;
  _OWORD *v83;
  uint64_t v84;
  __int128 *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  int v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  size_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  size_t v102;
  char *v103;
  char *v104;
  char *v105;
  unint64_t v106;
  char *v107;
  char *v108;
  unint64_t v109;
  __int128 v110;
  char *v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  char v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v134;
  int v135;
  uint64_t v136;
  int32x4_t *v137;
  uint64_t v138;
  uint64_t v139;
  int32x4_t *v140;
  unsigned int v141;
  uint64_t v142;
  int32x4_t v143;
  int32x4_t v144;
  uint64_t v145;
  int32x4_t *v146;
  int32x4_t v147;
  int32x4_t v148;
  int v149;
  __int32 *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  char *v159;
  char *v160;
  char *v161;
  int v162;
  int v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;

  v5 = *a2;
  v6 = *a4;
  *(_QWORD *)&v7 = *a2;
  *((_QWORD *)&v7 + 1) = v6;
  *(_OWORD *)(a1 + 40) = v7;
  v8 = *a3;
  v9 = a3[1];
  *(_DWORD *)(a1 + 56) = *a3;
  *(_DWORD *)(a1 + 60) = v9;
  if ((v6 & 0x80000000) != 0
    || v6 < 0
    || v8 < 0
    || v9 < 0
    || ((v10 = v9 + HIDWORD(v6), v8 + (int)v6 <= (int)v5) ? (v11 = v10 <= SHIDWORD(v5)) : (v11 = 0), !v11))
  {
    v166 = 0;
    v167 = 0;
    qmemcpy((void *)sub_10029430C(&v166, 143), "roi.x >= 0 && roi.y >= 0 && roi.width >= 0 && roi.height >= 0 && roi.x + roi.width <= wholeSize.width && roi.y + roi.height <= wholeSize.height", 143);
    sub_100294B74(-215, &v166, "start", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 173);
  }
  v12 = (((*(_DWORD *)(a1 + 8) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 8) & 7))) & 3);
  v13 = (((*(_DWORD *)(a1 + 16) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 16) & 7))) & 3);
  if (*(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 168))
    v14 = 0;
  else
    v14 = *(__int128 **)(a1 + 160);
  v15 = *(_DWORD *)(a1 + 24);
  v17 = *(_DWORD *)(a1 + 32);
  v16 = *(_DWORD *)(a1 + 36);
  v18 = v15 + ~v17;
  v19 = v15 + 3;
  if (v17 <= v18)
    v17 = v18;
  v20 = (2 * v17) | 1;
  if (v19 > v20)
    v20 = v19;
  if (v16 >= v8)
  {
    v21 = *(_QWORD *)(a1 + 232);
    v22 = *(_QWORD *)(a1 + 240) - v21;
    if (v20 == ((unint64_t)v22 >> 3))
      goto LABEL_154;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 232);
    v22 = *(_QWORD *)(a1 + 240) - v21;
  }
  v23 = v22 >> 3;
  if (v20 <= v23)
  {
    if (v20 < v23)
      *(_QWORD *)(a1 + 240) = v21 + 8 * v20;
  }
  else
  {
    sub_1002F38D4((void **)(a1 + 232), v20 - v23);
    v16 = *(_DWORD *)(a1 + 36);
    v8 = *(_DWORD *)(a1 + 56);
  }
  if (v16 > v8)
    v8 = v16;
  v24 = *(char **)(a1 + 136);
  *(_DWORD *)(a1 + 36) = v8;
  v25 = v12 * (uint64_t)(v8 + *(_DWORD *)(a1 + 20) - 1);
  v26 = *(char **)(a1 + 144);
  v27 = v26 - v24;
  v28 = v25 - (v26 - v24);
  if (v25 <= v26 - v24)
  {
    if (v25 < v26 - v24)
      *(_QWORD *)(a1 + 144) = &v24[v25];
  }
  else
  {
    v29 = *(_QWORD *)(a1 + 152);
    if (v29 - (uint64_t)v26 >= v28)
    {
      bzero(*(void **)(a1 + 144), v25 - (v26 - v24));
      *(_QWORD *)(a1 + 144) = &v24[v25];
      goto LABEL_58;
    }
    v162 = v13;
    if ((v25 & 0x80000000) != 0)
      sub_100008F3C();
    v30 = v29 - (_QWORD)v24;
    v31 = 2 * v30;
    if (2 * v30 <= v25)
      v31 = v25;
    if (v30 >= 0x3FFFFFFFFFFFFFFFLL)
      v32 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    v33 = operator new(v32);
    v34 = (char *)v33 + v32;
    v160 = (char *)v33 + v25;
    v35 = (char *)v33 + v27;
    bzero((char *)v33 + v27, v28);
    if (v26 != v24)
    {
      if (v27 < 8)
      {
        v36 = v160;
        goto LABEL_54;
      }
      v36 = v160;
      if ((unint64_t)(v24 - (_BYTE *)v33) >= 0x20)
      {
        if (v27 < 0x20)
        {
          v37 = 0;
          goto LABEL_49;
        }
        v37 = v27 & 0xFFFFFFFFFFFFFFE0;
        v38 = v26 - 16;
        v39 = (char *)v33 + v26 - 16 - v24;
        v40 = v27 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v41 = *(_OWORD *)v38;
          *((_OWORD *)v39 - 1) = *((_OWORD *)v38 - 1);
          *(_OWORD *)v39 = v41;
          v39 -= 32;
          v38 -= 32;
          v40 -= 32;
        }
        while (v40);
        if (v27 == v37)
          goto LABEL_56;
        if ((v27 & 0x18) != 0)
        {
LABEL_49:
          v35 -= v27 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v26[-v37 - 8];
          v43 = (char *)(v42 - v24);
          v44 = v37 - (v27 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *(_QWORD *)&v43[(_QWORD)v33] = v45;
            v43 -= 8;
            v44 += 8;
          }
          while (v44);
          v26 -= v27 & 0xFFFFFFFFFFFFFFF8;
          if (v27 != (v27 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_54;
LABEL_56:
          v26 = v24;
          *(_QWORD *)(a1 + 136) = v33;
          *(_QWORD *)(a1 + 144) = v36;
          *(_QWORD *)(a1 + 152) = v34;
          v13 = v162;
          if (!v24)
            goto LABEL_58;
          goto LABEL_57;
        }
        v35 -= v37;
        v26 -= v37;
      }
LABEL_54:
      v46 = v35 - 1;
      do
      {
        v47 = *--v26;
        *v46-- = v47;
      }
      while (v26 != v24);
      goto LABEL_56;
    }
    *(_QWORD *)(a1 + 136) = v35;
    *(_QWORD *)(a1 + 144) = v160;
    *(_QWORD *)(a1 + 152) = v34;
    v13 = v162;
    if (v26)
LABEL_57:
      operator delete(v26);
  }
LABEL_58:
  if (*(_DWORD *)(a1 + 76))
    goto LABEL_120;
  if (!v14)
  {
    v166 = 0;
    v167 = 0;
    v48 = sub_10029430C(&v166, 18);
    *(_WORD *)(v48 + 16) = 27756;
    *(_OWORD *)v48 = *(_OWORD *)"constVal != __null";
    sub_100294B74(-215, &v166, "start", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 191);
  }
  v49 = *(char **)(a1 + 184);
  v50 = ((((*(_DWORD *)(a1 + 16) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 16) & 7))) & 3))
      * (uint64_t)(*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 20) + 63);
  v51 = *(char **)(a1 + 192);
  v52 = v51 - v49;
  v53 = v50 - (v51 - v49);
  if (v50 <= v51 - v49)
  {
    if (v50 < v51 - v49)
      *(_QWORD *)(a1 + 192) = &v49[v50];
    goto LABEL_91;
  }
  v54 = *(_QWORD *)(a1 + 200);
  if (v54 - (uint64_t)v51 < v53)
  {
    v163 = v13;
    if ((v50 & 0x8000000000000000) != 0)
      goto LABEL_201;
    v55 = v54 - (_QWORD)v49;
    v56 = 2 * v55;
    if (2 * v55 <= v50)
      v56 = ((((*(_DWORD *)(a1 + 16) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 16) & 7))) & 3))
          * (uint64_t)(*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 20) + 63);
    if (v55 >= 0x3FFFFFFFFFFFFFFFLL)
      v57 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v57 = v56;
    v58 = (char *)operator new(v57);
    v59 = &v58[v57];
    v161 = &v58[v50];
    v60 = &v58[v52];
    bzero(&v58[v52], v53);
    if (v51 == v49)
      goto LABEL_89;
    if (v52 >= 8 && (unint64_t)(v49 - v58) >= 0x20)
    {
      if (v52 < 0x20)
      {
        v61 = 0;
        goto LABEL_81;
      }
      v61 = v52 & 0xFFFFFFFFFFFFFFE0;
      v62 = v51 - 16;
      v63 = &v58[v51 - 16 - v49];
      v64 = v52 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v65 = *(_OWORD *)v62;
        *((_OWORD *)v63 - 1) = *((_OWORD *)v62 - 1);
        *(_OWORD *)v63 = v65;
        v63 -= 32;
        v62 -= 32;
        v64 -= 32;
      }
      while (v64);
      if (v52 == v61)
        goto LABEL_88;
      if ((v52 & 0x18) != 0)
      {
LABEL_81:
        v60 -= v52 & 0xFFFFFFFFFFFFFFF8;
        v66 = &v51[-v61 - 8];
        v67 = (char *)(v66 - v49);
        v68 = v61 - (v52 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v69 = *(_QWORD *)v66;
          v66 -= 8;
          *(_QWORD *)&v67[(_QWORD)v58] = v69;
          v67 -= 8;
          v68 += 8;
        }
        while (v68);
        v51 -= v52 & 0xFFFFFFFFFFFFFFF8;
        if (v52 == (v52 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_88;
        goto LABEL_86;
      }
      v60 -= v61;
      v51 -= v61;
    }
LABEL_86:
    v70 = v60 - 1;
    do
    {
      v71 = *--v51;
      *v70-- = v71;
    }
    while (v51 != v49);
LABEL_88:
    v51 = v49;
    v60 = v58;
LABEL_89:
    v13 = v163;
    *(_QWORD *)(a1 + 184) = v60;
    *(_QWORD *)(a1 + 192) = v161;
    *(_QWORD *)(a1 + 200) = v59;
    if (v51)
      operator delete(v51);
    goto LABEL_91;
  }
  bzero(*(void **)(a1 + 192), v50 - (v51 - v49));
  *(_QWORD *)(a1 + 192) = &v49[v50];
LABEL_91:
  v72 = (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 20) - 1) * v12;
  v73 = *(_QWORD *)(a1 + 264);
  v74 = (*(_QWORD *)(a1 + 184) + 63) & 0xFFFFFFFFFFFFFFC0;
  if (!v73)
    v74 = *(_QWORD *)(a1 + 136);
  if (v72 >= 1)
  {
    v75 = 0;
    LODWORD(v76) = *(_DWORD *)(a1 + 168) - *(_DWORD *)(a1 + 160);
    while (1)
    {
      if (v72 - v75 >= (int)v76)
        v76 = v76;
      else
        v76 = (v72 - v75);
      if ((int)v76 < 1)
        goto LABEL_95;
      if (v76 >= 8 && v74 + v75 - (unint64_t)v14 >= 0x20)
      {
        if (v76 < 0x20)
        {
          v77 = 0;
LABEL_113:
          v87 = v77;
          v77 = v76 & 0xFFFFFFF8;
          v88 = (uint64_t *)((char *)v14 + v87);
          v89 = (_QWORD *)(v74 + v87 + v75);
          v90 = v87 - v77;
          do
          {
            v91 = *v88++;
            *v89++ = v91;
            v90 += 8;
          }
          while (v90);
          if (v77 == v76)
            goto LABEL_95;
          goto LABEL_103;
        }
        v77 = v76 & 0x7FFFFFE0;
        v83 = (_OWORD *)(v74 + 16 + v75);
        v84 = v76 & 0xFFFFFFE0;
        v85 = v14 + 1;
        do
        {
          v86 = *v85;
          *(v83 - 1) = *(v85 - 1);
          *v83 = v86;
          v85 += 2;
          v83 += 2;
          v84 -= 32;
        }
        while (v84);
        if (v77 == v76)
          goto LABEL_95;
        if ((v76 & 0x18) != 0)
          goto LABEL_113;
      }
      else
      {
        v77 = 0;
      }
LABEL_103:
      v78 = (_BYTE *)(v74 + v77 + v75);
      v79 = (char *)v14 + v77;
      v80 = v77 - v76;
      do
      {
        v81 = *v79++;
        *v78++ = v81;
      }
      while (!__CFADD__(v80++, 1));
LABEL_95:
      v75 += v76;
      if (v75 >= v72)
      {
        v73 = *(_QWORD *)(a1 + 264);
        break;
      }
    }
  }
  if (!v73)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 280) + 16))(*(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 136));
LABEL_120:
  v92 = *(_QWORD *)(a1 + 264);
  if (v92)
    LODWORD(v92) = *(_DWORD *)(a1 + 20) - 1;
  v93 = *(char **)(a1 + 112);
  v94 = v13;
  v95 = (int)(v13 * ((*(_DWORD *)(a1 + 36) + v92 + 63) & 0xFFFFFFC0))
      * ((uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3)
      + 64;
  v96 = *(char **)(a1 + 120);
  v97 = v96 - v93;
  v98 = v95 - (v96 - v93);
  if (v95 <= v96 - v93)
  {
    v13 = v94;
    if (v95 < v96 - v93)
      *(_QWORD *)(a1 + 120) = &v93[v95];
    goto LABEL_154;
  }
  v99 = *(_QWORD *)(a1 + 128);
  if (v99 - (uint64_t)v96 >= v98)
  {
    bzero(*(void **)(a1 + 120), v95 - (v96 - v93));
    *(_QWORD *)(a1 + 120) = &v93[v95];
    v13 = v94;
    goto LABEL_154;
  }
  if ((v95 & 0x8000000000000000) != 0)
LABEL_201:
    sub_100008F3C();
  v100 = v99 - (_QWORD)v93;
  v101 = 2 * v100;
  if (2 * v100 <= v95)
    v101 = v95;
  if (v100 >= 0x3FFFFFFFFFFFFFFFLL)
    v102 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v102 = v101;
  v103 = (char *)operator new(v102);
  v165 = &v103[v102];
  v104 = v103;
  v164 = &v103[v95];
  v105 = &v103[v97];
  bzero(&v103[v97], v98);
  if (v96 != v93)
  {
    if (v97 < 8)
    {
      v13 = v94;
      goto LABEL_150;
    }
    v13 = v94;
    if ((unint64_t)(v93 - v104) >= 0x20)
    {
      if (v97 < 0x20)
      {
        v106 = 0;
        goto LABEL_145;
      }
      v106 = v97 & 0xFFFFFFFFFFFFFFE0;
      v107 = v96 - 16;
      v108 = &v104[v96 - 16 - v93];
      v109 = v97 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v110 = *(_OWORD *)v107;
        *((_OWORD *)v108 - 1) = *((_OWORD *)v107 - 1);
        *(_OWORD *)v108 = v110;
        v108 -= 32;
        v107 -= 32;
        v109 -= 32;
      }
      while (v109);
      if (v97 == v106)
        goto LABEL_152;
      if ((v97 & 0x18) != 0)
      {
LABEL_145:
        v105 -= v97 & 0xFFFFFFFFFFFFFFF8;
        v111 = &v96[-v106 - 8];
        v112 = (char *)(v111 - v93);
        v113 = v106 - (v97 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v114 = *(_QWORD *)v111;
          v111 -= 8;
          *(_QWORD *)&v112[(_QWORD)v104] = v114;
          v112 -= 8;
          v113 += 8;
        }
        while (v113);
        v96 -= v97 & 0xFFFFFFFFFFFFFFF8;
        if (v97 != (v97 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_150;
LABEL_152:
        v96 = v93;
        *(_QWORD *)(a1 + 112) = v104;
        *(_QWORD *)(a1 + 120) = v164;
        *(_QWORD *)(a1 + 128) = v165;
        if (!v93)
          goto LABEL_154;
        goto LABEL_153;
      }
      v105 -= v106;
      v96 -= v106;
    }
LABEL_150:
    v115 = v105 - 1;
    do
    {
      v116 = *--v96;
      *v115-- = v116;
    }
    while (v96 != v93);
    goto LABEL_152;
  }
  v13 = v94;
  *(_QWORD *)(a1 + 112) = v105;
  *(_QWORD *)(a1 + 120) = v164;
  *(_QWORD *)(a1 + 128) = v165;
  if (v96)
LABEL_153:
    operator delete(v96);
LABEL_154:
  v117 = *(_DWORD *)(a1 + 56);
  v118 = *(_QWORD *)(a1 + 264);
  v119 = *(_DWORD *)(a1 + 20);
  v120 = v119 - 1;
  if (!v118)
    v120 = 0;
  *(_DWORD *)(a1 + 208) = ((v117 + v120 + 15) & 0xFFFFFFF0) * v13;
  v121 = *(_DWORD *)(a1 + 28);
  v122 = *(_DWORD *)(a1 + 48);
  v123 = v121 - v122;
  LODWORD(v124) = v123 & ~(v123 >> 31);
  v125 = *(_DWORD *)(a1 + 40);
  v126 = v117 + v122 + ~v121 + v119 - v125;
  *(_DWORD *)(a1 + 64) = v124;
  *(_DWORD *)(a1 + 68) = v126 & ~(v126 >> 31);
  if (v121 <= v122 && v126 < 1)
    goto LABEL_158;
  if (*(_DWORD *)(a1 + 72))
  {
    if (v121 >= v122)
      v134 = v122;
    else
      v134 = v121;
    v135 = v134 - v122;
    v136 = *(unsigned int *)(a1 + 104);
    v137 = *(int32x4_t **)(a1 + 80);
    if (v123 >= 1)
    {
      if ((int)v136 > 0)
      {
        v138 = 0;
        v139 = 0;
        v140 = v137 + 1;
        while (1)
        {
          v141 = (sub_10021C318((v139 - v124), v125, *(_DWORD *)(a1 + 72)) + v135) * v136;
          if (v136 >= 8)
          {
            v143 = vdupq_n_s32(v141);
            v144 = vdupq_n_s32(v141 + 4);
            v145 = v136 & 0xFFFFFFF8;
            v146 = v140;
            v147 = (int32x4_t)xmmword_1003BCB00;
            v148.i64[0] = 0x800000008;
            v148.i64[1] = 0x800000008;
            do
            {
              v146[-1] = vaddq_s32(v143, v147);
              *v146 = vaddq_s32(v144, v147);
              v147 = vaddq_s32(v147, v148);
              v146 += 2;
              v145 -= 8;
            }
            while (v145);
            v142 = v136 & 0xFFFFFFF8;
            if (v142 == v136)
              goto LABEL_172;
          }
          else
          {
            v142 = 0;
          }
          v149 = v141 + v142;
          v150 = &v137->i32[v142 + v138];
          v151 = v136 - v142;
          do
          {
            *v150++ = v149++;
            --v151;
          }
          while (v151);
LABEL_172:
          ++v139;
          v124 = *(int *)(a1 + 64);
          v140 = (int32x4_t *)((char *)v140 + 4 * v136);
          v138 += v136;
          if (v139 >= v124)
            goto LABEL_187;
        }
      }
      v153 = 0;
      do
      {
        sub_10021C318((v153 - v124), v125, *(_DWORD *)(a1 + 72));
        ++v153;
        LODWORD(v124) = *(_DWORD *)(a1 + 64);
      }
      while (v153 < (int)v124);
    }
LABEL_187:
    if (*(int *)(a1 + 68) >= 1)
    {
      v154 = 0;
      do
      {
        v155 = sub_10021C318((v154 + v125), v125, *(_DWORD *)(a1 + 72));
        if ((int)v136 >= 1)
        {
          v156 = 0;
          do
          {
            v137->i32[v156 + (int)v136 * (v154 + *(_DWORD *)(a1 + 64))] = (v155 + v135) * v136 + v156;
            ++v156;
          }
          while ((_DWORD)v136 != (_DWORD)v156);
        }
        ++v154;
      }
      while (v154 < *(_DWORD *)(a1 + 68));
    }
    goto LABEL_158;
  }
  if (!v14)
  {
    v166 = 0;
    v167 = 0;
    v157 = sub_10029430C(&v166, 18);
    *(_WORD *)(v157 + 16) = 27756;
    *(_OWORD *)v157 = *(_OWORD *)"constVal != __null";
    sub_100294B74(-215, &v166, "start", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 225);
  }
  if (v118)
  {
    v152 = (*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3;
    if ((int)v152 < 1)
      goto LABEL_158;
  }
  else
  {
    LODWORD(v152) = 1;
  }
  v158 = 0;
  do
  {
    if (*(_QWORD *)(a1 + 264))
      v159 = (char *)(((*(_QWORD *)(a1 + 112) + 63) & 0xFFFFFFFFFFFFFFC0) + *(int *)(a1 + 208) * (uint64_t)v158);
    else
      v159 = *(char **)(a1 + 136);
    memcpy(v159, v14, *(int *)(a1 + 64) * (uint64_t)v12);
    memcpy(&v159[v12 * (uint64_t)(*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 56) + ~*(_DWORD *)(a1 + 68))], v14, *(_DWORD *)(a1 + 68) * v12);
    ++v158;
  }
  while ((_DWORD)v152 != v158);
LABEL_158:
  *(_QWORD *)(a1 + 224) = 0;
  v127 = *(_DWORD *)(a1 + 52);
  v128 = *(_DWORD *)(a1 + 32);
  v129 = (v127 - v128) & ~((v127 - v128) >> 31);
  *(_DWORD *)(a1 + 212) = v129;
  *(_DWORD *)(a1 + 216) = v129;
  v130 = v127 + *(_DWORD *)(a1 + 60) + ~v128 + *(_DWORD *)(a1 + 24);
  if (*(_DWORD *)(a1 + 44) < v130)
    v130 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 220) = v130;
  v131 = *(_QWORD *)(a1 + 296);
  if (v131)
    (*(void (**)(uint64_t))(*(_QWORD *)v131 + 24))(v131);
  v132 = *(_QWORD *)(a1 + 264);
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 24))(v132);
  return *(unsigned int *)(a1 + 212);
}

void sub_1002ED53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002ED584(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int32x2_t v7;

  v7 = vrev64_s32(**(int32x2_t **)(a2 + 64));
  (*(void (**)(_DWORD *, uint64_t, int32x2_t *))(*(_QWORD *)a1 + 16))(a1, a3, &v7);
  return (a1[53] - *(_DWORD *)(a4 + 4));
}

uint64_t sub_1002ED5E0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, unsigned int a6)
{
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  size_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  int v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  int *v41;
  _DWORD *v42;
  uint64_t v43;
  int *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  _BYTE *v50;
  uint64_t v51;
  int *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;

  if (*(int *)(a1 + 40) < 1 || *(int *)(a1 + 44) <= 0)
  {
    v88 = 0;
    v89 = 0;
    qmemcpy((void *)sub_10029430C(&v88, 43), "wholeSize.width > 0 && wholeSize.height > 0", 43);
    sub_100294B74(-215, &v88, "proceed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 288);
  }
  v7 = *(_DWORD *)(a1 + 64);
  v8 = *(_DWORD *)(a1 + 68);
  v9 = *(_DWORD *)(a1 + 28);
  if (v9 >= *(_DWORD *)(a1 + 48))
    v9 = *(_DWORD *)(a1 + 48);
  v87 = (v7 > 0 || v8 >= 1) && *(_DWORD *)(a1 + 72) != 0;
  v85 = *(_QWORD *)(a1 + 232);
  v84 = *(int **)(a1 + 80);
  v79 = *(_DWORD *)(a1 + 56);
  v10 = *(_DWORD *)(a1 + 104);
  v66 = *(_DWORD *)(a1 + 24);
  v67 = *(_DWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 264);
  if (*(_DWORD *)(a1 + 220) - (*(_DWORD *)(a1 + 212) + *(_DWORD *)(a1 + 224)) >= a4)
    v12 = a4;
  else
    v12 = *(_DWORD *)(a1 + 220) - (*(_DWORD *)(a1 + 212) + *(_DWORD *)(a1 + 224));
  if (!a2 || !a5 || v12 <= 0)
  {
    v88 = 0;
    v89 = 0;
    qmemcpy((void *)sub_10029430C(&v88, 23), "src && dst && count > 0", 23);
    sub_100294B74(-215, &v88, "proceed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 307);
  }
  v13 = 0;
  v14 = (((*(_DWORD *)(a1 + 8) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 8) & 7))) & 3);
  v15 = (unint64_t)(*(_QWORD *)(a1 + 240) - v85) >> 3;
  v65 = ((*(_DWORD *)(a1 + 16) >> 3) & 0x1FF) + 1;
  v16 = (char *)(a2 - v9 * v14);
  v17 = (v7 * v14);
  v86 = (int)v17;
  v18 = *(_DWORD *)(a1 + 20) + v79 + ~v8;
  v19 = (v18 - v7) * v14;
  v82 = 4 * v10;
  v83 = v14;
  v81 = (v8 * v14);
  v20 = v18 * v14;
  v21 = (v7 * v10);
  v80 = (v8 * v10);
  v22 = a3;
  v70 = v66 - 1;
  v75 = v20;
  v77 = v21;
  v78 = v17;
  v73 = v18 * v10;
  v74 = &v84[(int)v17];
  v72 = &v84[(int)v21];
  v23 = a6;
  v24 = a5;
  v25 = v12;
  while (1)
  {
    v76 = v13;
    v71 = v24;
    v26 = *(_DWORD *)(a1 + 52);
    v27 = v15 - (v67 + *(_DWORD *)(a1 + 212) + *(_DWORD *)(a1 + 224));
    v28 = __OFADD__(v27, v26);
    v29 = v27 + v26;
    if ((v29 < 0) ^ v28 | (v29 == 0))
      v29 = v15 - v66 + 1;
    if (v25 >= v29)
      v30 = v29;
    else
      v30 = v25;
    v68 = v30;
    v69 = v25;
    if (v30 >= 1)
    {
      while (1)
      {
        v36 = *(_DWORD *)(a1 + 212);
        v37 = *(_DWORD *)(a1 + 224);
        v38 = ((*(_QWORD *)(a1 + 112) + 63) & 0xFFFFFFFFFFFFFFC0)
            + *(int *)(a1 + 208) * (uint64_t)((v36 - *(_DWORD *)(a1 + 216) + v37) % (int)v15);
        v39 = (_DWORD *)v38;
        if (!v11)
          break;
        *(_DWORD *)(a1 + 224) = v37 + 1;
        if (v37 >= (int)v15)
          goto LABEL_36;
LABEL_37:
        memcpy((char *)v39 + v86, v16, v19);
        if (v87)
        {
          if (v82 == v83)
          {
            v40 = v77;
            v41 = v84;
            v42 = v39;
            if ((int)v77 >= 1)
            {
              do
              {
                v43 = *v41++;
                *v42++ = *(_DWORD *)&v16[4 * v43];
                --v40;
              }
              while (v40);
            }
            if ((int)v80 >= 1)
            {
              v44 = v72;
              v45 = &v39[v73];
              v46 = v80;
              do
              {
                v47 = *v44++;
                *v45++ = *(_DWORD *)&v16[4 * v47];
                --v46;
              }
              while (v46);
            }
          }
          else
          {
            v48 = v78;
            v49 = v84;
            v50 = v39;
            if ((int)v78 >= 1)
            {
              do
              {
                v51 = *v49++;
                *v50++ = v16[v51];
                --v48;
              }
              while (v48);
            }
            if ((int)v81 >= 1)
            {
              v52 = v74;
              v53 = (char *)v39 + v75;
              v54 = v81;
              do
              {
                v55 = *v52++;
                *v53++ = v16[v55];
                --v54;
              }
              while (v54);
            }
          }
        }
        if (v11)
        {
          v16 += v22;
          v35 = v30-- <= 1;
          if (v35)
            goto LABEL_27;
        }
        else
        {
          (*(void (**)(_QWORD, _DWORD *, unint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 280) + 16))(*(_QWORD *)(a1 + 280), v39, v38, v79, ((*(_DWORD *)(a1 + 8) >> 3) & 0x1FFu) + 1);
          v16 += v22;
          v35 = v30-- <= 1;
          if (v35)
            goto LABEL_27;
        }
      }
      v39 = *(_DWORD **)(a1 + 136);
      *(_DWORD *)(a1 + 224) = v37 + 1;
      if (v37 < (int)v15)
        goto LABEL_37;
LABEL_36:
      *(_DWORD *)(a1 + 224) = v37;
      *(_DWORD *)(a1 + 212) = v36 + 1;
      goto LABEL_37;
    }
LABEL_27:
    v31 = v76;
    v32 = v70 + *(_DWORD *)(a1 + 60) - (v76 + *(_DWORD *)(a1 + 228));
    v33 = v32 >= (int)v15 ? v15 : v32;
    if ((int)v33 >= 1)
      break;
    LODWORD(v33) = 0;
    v58 = v69;
    if (v66 > 0)
      goto LABEL_69;
LABEL_67:
    v59 = (v33 - v70);
    v60 = *(_QWORD *)(a1 + 264);
    if (v60)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v60 + 16))(v60, v85, v71, v23, v59, *(unsigned int *)(a1 + 56), v65);
    else
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 296) + 16))(*(_QWORD *)(a1 + 296), v85, v71, v23, v59, *(_DWORD *)(a1 + 56) * v65);
    v25 = v58 - v68;
    v24 = v71 + (int)v59 * (int)v23;
    v13 = v59 + v76;
  }
  v34 = 0;
  while (1)
  {
    while (1)
    {
      v56 = sub_10021C318(v76 - v67 + v34 + *(_DWORD *)(a1 + 52) + *(_DWORD *)(a1 + 228), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 76));
      if ((v56 & 0x80000000) == 0)
        break;
      *(_QWORD *)(v85 + 8 * v34++) = (*(_QWORD *)(a1 + 184) + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v33 == v34)
        goto LABEL_66;
    }
    v57 = *(_DWORD *)(a1 + 212);
    if (v56 < v57)
    {
      v88 = 0;
      v89 = 0;
      qmemcpy((void *)sub_10029430C(&v88, 14), "srcY >= startY", 14);
      sub_100294B74(-215, &v88, "proceed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 363);
    }
    if (v56 >= *(_DWORD *)(a1 + 224) + v57)
      break;
    *(_QWORD *)(v85 + 8 * v34++) = ((*(_QWORD *)(a1 + 112) + 63) & 0xFFFFFFFFFFFFFFC0)
                                 + *(int *)(a1 + 208) * (uint64_t)((v56 - *(_DWORD *)(a1 + 216)) % (int)v15);
    if (v33 == v34)
      goto LABEL_66;
  }
  LODWORD(v33) = v34;
LABEL_66:
  v23 = a6;
  v31 = v76;
  v58 = v69;
  if ((int)v33 >= v66)
    goto LABEL_67;
LABEL_69:
  v61 = *(_DWORD *)(a1 + 228) + v31;
  *(_DWORD *)(a1 + 228) = v61;
  if (v61 > *(_DWORD *)(a1 + 60))
  {
    v88 = 0;
    v89 = 0;
    v62 = sub_10029430C(&v88, 18);
    *(_WORD *)(v62 + 16) = 29800;
    *(_OWORD *)v62 = *(_OWORD *)"dstY <= roi.height";
    sub_100294B74(-215, &v88, "proceed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 380);
  }
  return v31;
}

void sub_1002EDCD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029434C((uint64_t *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1002EDD30(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11[2];
  _BYTE v12[8];
  int v13;

  sub_100298C2C(v12, &off_100451FB8);
  if ((*(_DWORD *)a2 & 0xFFF) != a1[2] || (*(_DWORD *)a3 & 0xFFF) != a1[3])
  {
    v11[0] = 0;
    v11[1] = 0;
    qmemcpy((void *)sub_10029430C(v11, 46), "src.type() == srcType && dst.type() == dstType", 46);
    sub_100294B74(-215, v11, "apply", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 388);
  }
  v10 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, a4, a5);
  (*(void (**)(_DWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 80) * v10, *(_QWORD *)(a2 + 80), (a1[55] - a1[53]), *(_QWORD *)(a3 + 16), *(unsigned int *)(a3 + 80));
  if (v13)
    sub_1002989D0(v12);
}

void sub_1002EDE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_10029434C(&a9);
  sub_1001D40CC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EDE90(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  int v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE v38[64];
  _BYTE *v39;
  void *v40;
  _QWORD v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void *v48;
  _QWORD v49[2];

  if (sub_10025D914((_DWORD *)a1) != 0x10000)
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v42);
    if ((v42 & 0xFF8) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_OWORD *)(v4 + 16);
  v42 = *(_OWORD *)v4;
  v6 = *(_OWORD *)(v4 + 32);
  v43 = v5;
  v44 = v6;
  v7 = *(_QWORD *)(v4 + 56);
  v45 = *(_QWORD *)(v4 + 48);
  v46 = v7;
  v47 = (char *)&v42 + 8;
  v48 = v49;
  v49[0] = 0;
  v49[1] = 0;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 20);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  if (*(int *)(v4 + 4) <= 2)
  {
    v10 = *(_QWORD **)(v4 + 72);
    v11 = v48;
    *(_QWORD *)v48 = *v10;
    v11[1] = v10[1];
    if ((v42 & 0xFF8) == 0)
      goto LABEL_12;
LABEL_11:
    *(_OWORD *)v38 = 0uLL;
    qmemcpy((void *)sub_10029430C(v38, 23), "_kernel.channels() == 1", 23);
    sub_100294B74(-215, (uint64_t *)v38, "getKernelType", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 407);
  }
  DWORD1(v42) = 0;
  sub_100256B48((uint64_t)&v42, v4);
  if ((v42 & 0xFF8) != 0)
    goto LABEL_11;
LABEL_12:
  v12 = DWORD2(v42);
  v13 = HIDWORD(v42);
  *(_DWORD *)v38 = 1124007936;
  memset(&v38[4], 0, 60);
  v39 = &v38[8];
  v40 = v41;
  v41[0] = 0;
  v41[1] = 0;
  v35 = 33619968;
  v36 = v38;
  v37 = 0;
  sub_1002044A8((unsigned int *)&v42, (uint64_t)&v35, 6, 1.0, 0.0);
  v14 = (v13 * v12);
  if (DWORD2(v42) == 1 || HIDWORD(v42) == 1)
  {
    v15 = 12;
    if (((2 * *a2) | 1) == HIDWORD(v42))
    {
      if (((2 * a2[1]) | 1) == DWORD2(v42))
        v15 = 15;
      else
        v15 = 12;
    }
  }
  else
  {
    v15 = 12;
  }
  if ((int)v14 < 1)
  {
    v16 = 0.0;
    v23 = *(_QWORD *)&v38[56];
    if (!*(_QWORD *)&v38[56])
      goto LABEL_38;
    goto LABEL_34;
  }
  v16 = 0.0;
  v17 = *(double **)&v38[16];
  do
  {
    v18 = *v17++;
    v19 = v18;
    v16 = v16 + v18;
    v20 = *(double *)(*(_QWORD *)&v38[16] + 8 * (int)--v14);
    v21 = v15 & 0xFFFFFFFE;
    if (v18 == v20)
      v21 = v15;
    if (v19 != -v20)
      v21 &= ~2u;
    v22 = (uint64_t)rint(v19);
    if (v19 < 0.0)
      v21 &= ~4u;
    if (v19 == (double)(int)v22)
      v15 = v21;
    else
      v15 = v21 & 0xFFFFFFF7;
  }
  while (v14);
  v23 = *(_QWORD *)&v38[56];
  if (*(_QWORD *)&v38[56])
  {
LABEL_34:
    v24 = (unsigned int *)(v23 + 20);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      sub_100256C90((uint64_t)v38);
  }
LABEL_38:
  *(_QWORD *)&v38[56] = 0;
  memset(&v38[16], 0, 32);
  if (*(int *)&v38[4] >= 1)
  {
    v27 = 0;
    v28 = v39;
    do
      *(_DWORD *)&v28[4 * v27++] = 0;
    while (v27 < *(int *)&v38[4]);
  }
  if (v40 != v41)
    j__free(v40);
  if (v46)
  {
    v29 = (unsigned int *)(v46 + 20);
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
      sub_100256C90((uint64_t)&v42);
  }
  v46 = 0;
  v43 = 0u;
  v44 = 0u;
  if (SDWORD1(v42) >= 1)
  {
    v32 = 0;
    v33 = v47;
    do
      *(_DWORD *)&v33[4 * v32++] = 0;
    while (v32 < SDWORD1(v42));
  }
  if (v48 != v49)
    j__free(v48);
  if (fabs(v16 + -1.0) <= (fabs(v16) + 1.0) * 0.00000011920929)
    return v15;
  else
    return v15 & 0xFFFFFFFB;
}

void sub_1002EE21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_10029434C((uint64_t *)va);
  sub_100006BE4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002EE268(uint64_t a1, unsigned __int16 a2, uint64_t a3, int a4, int a5)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v20;
  _OWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  _QWORD v26[3];
  int v27;

  v27 = a4;
  if (sub_10025D914((_DWORD *)a3) == 0x10000)
  {
    v9 = *(_QWORD *)(a3 + 8);
    v10 = *(_OWORD *)(v9 + 16);
    v21[0] = *(_OWORD *)v9;
    v11 = *(_OWORD *)(v9 + 32);
    v21[1] = v10;
    v21[2] = v11;
    v12 = *(_QWORD *)(v9 + 56);
    v22 = *(_QWORD *)(v9 + 48);
    v23 = v12;
    v24 = (char *)v21 + 8;
    v25 = v26;
    v26[0] = 0;
    v26[1] = 0;
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 20);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    if (*(int *)(v9 + 4) > 2)
    {
      DWORD1(v21[0]) = 0;
      sub_100256B48((uint64_t)v21, v9);
    }
    else
    {
      v15 = *(_QWORD **)(v9 + 72);
      v16 = v25;
      *v25 = *v15;
      v16[1] = v15[1];
    }
  }
  else
  {
    sub_10025CCB8(a3, -1, (uint64_t)v21);
  }
  v17 = a1 & 7;
  v18 = a2 & 7;
  if (v17 <= 4)
    v19 = 4;
  else
    v19 = a1 & 7;
  if (v18 < v19 || ((a2 ^ (unsigned __int16)a1) & 0xFF8) != 0 || (v21[0] & 0xFFF) != v18)
  {
    v20 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v20, 109), "cn == ((((bufType) & ((512 - 1) << 3)) >> 3) + 1) && ddepth >= std::max(sdepth, 4) && kernel.type() == ddepth", 109);
    sub_100294B74(-215, (uint64_t *)&v20, "getLinearRowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3605);
  }
  if ((a5 & 3) != 0 && HIDWORD(v21[0]) + DWORD2(v21[0]) <= 6)
  {
    if ((a1 & 7) == 0 && v18 == 4)
    {
      sub_1002F30F4((uint64_t)&v20, (uint64_t)v21, a5);
      operator new();
    }
    if (v17 == 5 && v18 == 5)
    {
      sub_1002F32C8((uint64_t)&v20, (uint64_t)v21, a5);
      operator new();
    }
  }
  if ((a1 & 7) == 0 && v18 == 4)
    operator new();
  if ((a1 & 7) == 0 && v18 == 5)
    operator new();
  if ((a1 & 7) == 0 && v18 == 6)
    operator new();
  if (v17 == 2 && v18 == 5)
    operator new();
  if (v17 == 2 && v18 == 6)
    sub_1002EEE08();
  if (v17 == 3 && v18 == 5)
    sub_1002EEF14();
  if (v17 == 3 && v18 == 6)
    sub_1002EF024();
  if (v17 == 5 && v18 == 5)
    sub_1002EF130();
  if (v17 == 5 && v18 == 6)
    sub_1002EF240();
  if (v17 == 6 && v18 == 6)
    sub_1002EF34C();
  sub_10029487C((uint64_t *)&v20, "Unsupported combination of source format (=%d), and buffer format (=%d)", a1, HIDWORD(a1));
  sub_100294B74(-213, (uint64_t *)&v20, "getLinearRowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3644);
}

void sub_1002EEB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_10029434C(&a13);
  sub_100006BE4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EECE0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 20);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      sub_100256C90(a1);
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 64);
    do
      *(_DWORD *)(v7 + 4 * v6++) = 0;
    while (v6 < *(int *)(a1 + 4));
  }
  v8 = *(void **)(a1 + 72);
  if (v8 != (void *)(a1 + 80))
    j__free(v8);
  return a1;
}

uint64_t sub_1002EED74(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 20);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      sub_100256C90(a1);
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 64);
    do
      *(_DWORD *)(v7 + 4 * v6++) = 0;
    while (v6 < *(int *)(a1 + 4));
  }
  v8 = *(void **)(a1 + 72);
  if (v8 != (void *)(a1 + 80))
    j__free(v8);
  return a1;
}

void sub_1002EEE08()
{
  operator new();
}

void sub_1002EEE9C()
{
  operator delete();
}

unsigned int **sub_1002EEEC0(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002EEF14()
{
  operator new();
}

void sub_1002EEFAC()
{
  operator delete();
}

unsigned int **sub_1002EEFD0(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002EF024()
{
  operator new();
}

void sub_1002EF0B8()
{
  operator delete();
}

unsigned int **sub_1002EF0DC(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002EF130()
{
  operator new();
}

void sub_1002EF1C8()
{
  operator delete();
}

unsigned int **sub_1002EF1EC(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002EF240()
{
  operator new();
}

void sub_1002EF2D4()
{
  operator delete();
}

unsigned int **sub_1002EF2F8(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002EF34C()
{
  operator new();
}

void sub_1002EF3E0()
{
  operator delete();
}

unsigned int **sub_1002EF404(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002EF458(uint64_t a1, unsigned __int16 a2, uint64_t a3, int a4, int a5, unsigned int a6, double a7)
{
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24[3];
  unsigned int v25;
  int v26;
  _OWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  _QWORD v32[2];
  double v33;
  int v34;
  int v35;

  v34 = a5;
  v35 = a4;
  v33 = a7;
  if (sub_10025D914((_DWORD *)a3) == 0x10000)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = *(_OWORD *)(v11 + 16);
    v27[0] = *(_OWORD *)v11;
    v27[1] = v12;
    v27[2] = *(_OWORD *)(v11 + 32);
    v13 = *(_QWORD *)(v11 + 56);
    v28 = *(_QWORD *)(v11 + 48);
    v29 = v13;
    v30 = (char *)v27 + 8;
    v31 = v32;
    v32[0] = 0;
    v32[1] = 0;
    if (v13)
    {
      v14 = (unsigned int *)(v13 + 20);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
    if (*(int *)(v11 + 4) > 2)
    {
      DWORD1(v27[0]) = 0;
      sub_100256B48((uint64_t)v27, v11);
    }
    else
    {
      v16 = *(_QWORD **)(v11 + 72);
      v17 = v31;
      *(_QWORD *)v31 = *v16;
      v17[1] = v16[1];
    }
  }
  else
  {
    sub_10025CCB8(a3, -1, (uint64_t)v27);
  }
  v18 = a1 & 7;
  v19 = a2 & 7;
  if (v19 <= 4)
    v20 = 4;
  else
    v20 = a2 & 7;
  if (((a2 ^ (unsigned __int16)a1) & 0xFF8) != 0 || v18 < v20 || (v27[0] & 0xFFF) != v18)
  {
    *(_OWORD *)v24 = 0uLL;
    qmemcpy((void *)sub_10029430C(v24, 109), "cn == ((((bufType) & ((512 - 1) << 3)) >> 3) + 1) && sdepth >= std::max(ddepth, 4) && kernel.type() == sdepth", 109);
    sub_100294B74(-215, v24, "getLinearColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3660);
  }
  if ((v34 & 3) != 0)
  {
    if (HIDWORD(v27[0]) + DWORD2(v27[0]) == 4)
    {
      if (v18 == 4 && (a2 & 7) == 0)
      {
        v21 = 1 << (a6 - 1);
        if (!a6)
          v21 = 0;
        v25 = a6;
        v26 = v21;
        sub_1002F3440((uint64_t)v24, (unsigned int *)v27, v34, a6, v33);
        operator new();
      }
      if (v18 == 4 && v19 == 3 && !a6)
      {
        sub_1002F357C((uint64_t)v24, (unsigned int *)v27, v34, 0, v33);
        operator new();
      }
      if (v18 == 5 && v19 == 5)
        operator new();
    }
    if (v18 == 4 && (a2 & 7) == 0)
    {
      v23 = 1 << (a6 - 1);
      if (!a6)
        v23 = 0;
      v25 = a6;
      v26 = v23;
      sub_1002F3440((uint64_t)v24, (unsigned int *)v27, v34, a6, v33);
      operator new();
    }
    if (v18 == 5 && (a2 & 7) == 0)
      operator new();
    if (v18 == 6 && (a2 & 7) == 0)
      operator new();
    if (v18 == 5 && v19 == 2)
      operator new();
    if (v18 == 6 && v19 == 2)
      sub_1002F0E6C();
    if (v18 == 4 && v19 == 3)
      sub_1002F0F94();
    if (v18 == 5 && v19 == 3)
    {
      sub_1002F36B8((int *)v24, (uint64_t)v27, v34, v33);
      sub_1002F10BC();
    }
    if (v18 == 6 && v19 == 3)
      sub_1002F1284();
    if (v18 == 5 && v19 == 5)
      sub_1002F13AC();
    if (v18 == 6 && v19 == 6)
      sub_1002F14DC();
  }
  else
  {
    if (v18 == 4 && (a2 & 7) == 0)
    {
      v22 = 1 << (a6 - 1);
      if (!a6)
        v22 = 0;
      v24[0] = __PAIR64__(v22, a6);
      operator new();
    }
    if (v18 == 5 && (a2 & 7) == 0)
      operator new();
    if (v18 == 6 && (a2 & 7) == 0)
      operator new();
    if (v18 == 5 && v19 == 2)
      operator new();
    if (v18 == 6 && v19 == 2)
      sub_1002F079C();
    if (v18 == 5 && v19 == 3)
      sub_1002F08BC();
    if (v18 == 6 && v19 == 3)
      sub_1002F09DC();
    if (v18 == 5 && v19 == 5)
      sub_1002F0AFC();
    if (v18 == 6 && v19 == 6)
      sub_1002F0C1C();
  }
  sub_10029487C(v24, "Unsupported combination of buffer format (=%d), and destination format (=%d)", a1, HIDWORD(a1));
  sub_100294B74(-213, v24, "getLinearColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3741);
}

void sub_1002F0404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_100006BE4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_1002F0418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_100006BE4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_1002F042C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_100006BE4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_1002F0444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_10029434C(&a11);
  sub_100006BE4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_1002F079C()
{
  operator new();
}

void sub_1002F0844()
{
  operator delete();
}

unsigned int **sub_1002F0868(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002F08BC()
{
  operator new();
}

void sub_1002F0964()
{
  operator delete();
}

unsigned int **sub_1002F0988(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002F09DC()
{
  operator new();
}

void sub_1002F0A84()
{
  operator delete();
}

unsigned int **sub_1002F0AA8(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002F0AFC()
{
  operator new();
}

void sub_1002F0BA4()
{
  operator delete();
}

unsigned int **sub_1002F0BC8(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002F0C1C()
{
  operator new();
}

void sub_1002F0CC4()
{
  operator delete();
}

unsigned int **sub_1002F0CE8(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

uint64_t sub_1002F0D3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = a1 + 8;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88))
    j__free(v9);
  return a1;
}

uint64_t sub_1002F0DD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = a1 + 8;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88))
    j__free(v9);
  return a1;
}

void sub_1002F0E6C()
{
  operator new();
}

void sub_1002F0F1C()
{
  operator delete();
}

unsigned int **sub_1002F0F40(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002F0F94()
{
  operator new();
}

void sub_1002F1044()
{
  operator delete();
}

unsigned int **sub_1002F1068(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002F10BC()
{
  operator new();
}

void sub_1002F1174()
{
  operator delete();
}

unsigned int **sub_1002F1198(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

uint64_t sub_1002F11EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = a1 + 8;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88))
    j__free(v9);
  return a1;
}

void sub_1002F1284()
{
  operator new();
}

void sub_1002F1334()
{
  operator delete();
}

unsigned int **sub_1002F1358(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002F13AC()
{
  operator new();
}

void sub_1002F1464()
{
  operator delete();
}

unsigned int **sub_1002F1488(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002F14DC()
{
  operator new();
}

void sub_1002F158C()
{
  operator delete();
}

unsigned int **sub_1002F15B0(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1002F1604(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  _QWORD *v42;
  _QWORD *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  double v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE v59[64];
  _BYTE *v60;
  void *v61;
  _QWORD v62[2];
  _BYTE v63[64];
  _BYTE *v64;
  void *v65;
  _QWORD v66[2];
  _DWORD v67[2];
  _DWORD v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  void *v74;
  _QWORD v75[2];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  _QWORD v83[4];

  if (sub_10025D914((_DWORD *)a3) == 0x10000)
  {
    v10 = *(_QWORD *)(a3 + 8);
    v11 = *(_OWORD *)(v10 + 16);
    v76 = *(_OWORD *)v10;
    v77 = v11;
    v78 = *(_OWORD *)(v10 + 32);
    v12 = *(_QWORD *)(v10 + 56);
    v79 = *(_QWORD *)(v10 + 48);
    v80 = v12;
    v81 = (char *)&v76 + 8;
    v82 = v83;
    v83[0] = 0;
    v83[1] = 0;
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 20);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    if (*(int *)(v10 + 4) > 2)
    {
      DWORD1(v76) = 0;
      sub_100256B48((uint64_t)&v76, v10);
    }
    else
    {
      v15 = *(_QWORD **)(v10 + 72);
      v16 = v82;
      *v82 = *v15;
      v16[1] = v15[1];
    }
  }
  else
  {
    sub_10025CCB8(a3, -1, (uint64_t)&v76);
  }
  if (sub_10025D914((_DWORD *)a4) == 0x10000)
  {
    v17 = *(_QWORD *)(a4 + 8);
    v18 = *(_OWORD *)(v17 + 16);
    v69 = *(_OWORD *)v17;
    v70 = v18;
    v71 = *(_OWORD *)(v17 + 32);
    v19 = *(_QWORD *)(v17 + 56);
    *(_QWORD *)&v72 = *(_QWORD *)(v17 + 48);
    *((_QWORD *)&v72 + 1) = v19;
    v73 = (char *)&v69 + 8;
    v74 = v75;
    v75[0] = 0;
    v75[1] = 0;
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 20);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
    if (*(int *)(v17 + 4) > 2)
    {
      DWORD1(v69) = 0;
      sub_100256B48((uint64_t)&v69, v17);
    }
    else
    {
      v22 = *(_QWORD **)(v17 + 72);
      v23 = v74;
      *(_QWORD *)v74 = *v22;
      v23[1] = v22[1];
    }
  }
  else
  {
    sub_10025CCB8(a4, -1, (uint64_t)&v69);
  }
  v24 = (a1 >> 3) & 0x1FF;
  if (v24 != ((a2 >> 3) & 0x1FF))
  {
    *(_QWORD *)v63 = 0;
    *(_QWORD *)&v63[8] = 0;
    qmemcpy((void *)sub_10029430C(v63, 50), "cn == ((((_dstType) & ((512 - 1) << 3)) >> 3) + 1)", 50);
    sub_100294B74(-215, (uint64_t *)v63, "createSeparableLinearFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3759);
  }
  v25 = *a5;
  if (*a5 < 0)
  {
    v54 = DWORD2(v76) + HIDWORD(v76);
    if (DWORD2(v76) + HIDWORD(v76) - 1 >= 0)
      v54 = DWORD2(v76) + HIDWORD(v76) - 1;
    v25 = v54 >> 1;
    *a5 = v25;
    if ((a5[1] & 0x80000000) == 0)
    {
LABEL_21:
      *(_DWORD *)v63 = 16842752;
      *(_QWORD *)&v63[8] = &v76;
      *(_QWORD *)&v63[16] = 0;
      if (DWORD2(v76) == 1)
        v26 = v25;
      else
        v26 = 0;
      if (DWORD2(v76) == 1)
        v25 = 0;
      v68[0] = v26;
      v68[1] = v25;
      v27 = sub_1002EDE90((uint64_t)v63, v68);
      *(_DWORD *)v63 = 16842752;
      *(_QWORD *)&v63[8] = &v69;
      *(_QWORD *)&v63[16] = 0;
      v28 = a5[1];
      if (DWORD2(v69) == 1)
        v29 = a5[1];
      else
        v29 = 0;
      if (DWORD2(v69) == 1)
        v28 = 0;
      v67[0] = v29;
      v67[1] = v28;
      v30 = sub_1002EDE90((uint64_t)v63, v67);
      *(_DWORD *)v63 = 1124007936;
      v31 = a2 & 7;
      memset(&v63[4], 0, 60);
      v64 = &v63[8];
      v65 = v66;
      v66[0] = 0;
      v66[1] = 0;
      *(_DWORD *)v59 = 1124007936;
      memset(&v59[4], 0, 60);
      v60 = &v59[8];
      v61 = v62;
      v62[0] = 0;
      v62[1] = 0;
      if ((a1 & 7) <= v31)
        v32 = a2 & 7;
      else
        v32 = a1 & 7;
      if (v32 <= 5)
        v33 = 5;
      else
        v33 = v32;
      if ((a1 & 7) == 0
        && ((a2 & 7) == 0 && v27 == 5 && v30 == 5 || (v27 & 3) != 0
                                                  && (v30 & 3) != 0
                                                  && v31 == 3
                                                  && (v27 & v30 & 8) != 0))
      {
        LODWORD(v56) = 33619968;
        v57 = v63;
        v58 = 0;
        v55 = (double)(1 << (8 * (v31 == 0)));
        sub_1002044A8((unsigned int *)&v76, (uint64_t)&v56, 4, v55, 0.0);
        LODWORD(v56) = 33619968;
        v57 = v59;
        v58 = 0;
        sub_1002044A8((unsigned int *)&v69, (uint64_t)&v56, 4, v55, 0.0);
        LOWORD(v33) = 4;
        goto LABEL_88;
      }
      if ((v76 & 0xFFF) != v33)
      {
        LODWORD(v56) = 33619968;
        v57 = v63;
        v58 = 0;
        sub_1002044A8((unsigned int *)&v76, (uint64_t)&v56, v33, 1.0, 0.0);
        if ((v69 & 0xFFF) != v33)
        {
LABEL_84:
          LODWORD(v56) = 33619968;
          v57 = v59;
          v58 = 0;
          sub_1002044A8((unsigned int *)&v69, (uint64_t)&v56, v33, 1.0, 0.0);
          goto LABEL_88;
        }
LABEL_54:
        if (*((_QWORD *)&v72 + 1))
        {
          v44 = (unsigned int *)(*((_QWORD *)&v72 + 1) + 20);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 + 1, v44));
        }
        if (*(_QWORD *)&v59[56])
        {
          v46 = (unsigned int *)(*(_QWORD *)&v59[56] + 20);
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
            sub_100256C90((uint64_t)v59);
        }
        *(_QWORD *)&v59[56] = 0;
        memset(&v59[16], 0, 32);
        if (*(uint64_t *)v59 <= 0)
        {
          *(_DWORD *)v59 = v69;
          v51 = DWORD1(v69);
          if (SDWORD1(v69) <= 2)
          {
LABEL_67:
            *(_DWORD *)&v59[4] = v51;
            *(_QWORD *)&v59[8] = *((_QWORD *)&v69 + 1);
            v52 = v74;
            v53 = v61;
            *(_QWORD *)v61 = *(_QWORD *)v74;
            v53[1] = v52[1];
LABEL_87:
            *(_OWORD *)&v59[16] = v70;
            *(_OWORD *)&v59[32] = v71;
            *(_OWORD *)&v59[48] = v72;
LABEL_88:
            LODWORD(v56) = 16842752;
            v57 = v63;
            v58 = 0;
            sub_1002EE268(a1 & 0xFFF, v33 | (8 * v24), (uint64_t)&v56, *a5, v27);
          }
        }
        else
        {
          v49 = 0;
          v50 = v60;
          do
            *(_DWORD *)&v50[4 * v49++] = 0;
          while (v49 < *(int *)&v59[4]);
          *(_DWORD *)v59 = v69;
          if (*(int *)&v59[4] <= 2)
          {
            v51 = DWORD1(v69);
            if (SDWORD1(v69) <= 2)
              goto LABEL_67;
          }
        }
        sub_100256B48((uint64_t)v59, (uint64_t)&v69);
        goto LABEL_87;
      }
      if (v80)
      {
        v34 = (unsigned int *)(v80 + 20);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 + 1, v34));
        if (*(_QWORD *)&v63[56])
        {
          v36 = (unsigned int *)(*(_QWORD *)&v63[56] + 20);
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
            sub_100256C90((uint64_t)v63);
        }
      }
      *(_QWORD *)&v63[56] = 0;
      memset(&v63[16], 0, 32);
      if (*(int *)&v63[4] <= 0)
      {
        *(_DWORD *)v63 = v76;
        v41 = DWORD1(v76);
        if (SDWORD1(v76) <= 2)
        {
LABEL_52:
          *(_DWORD *)&v63[4] = v41;
          *(_QWORD *)&v63[8] = *((_QWORD *)&v76 + 1);
          v42 = v82;
          v43 = v65;
          *(_QWORD *)v65 = *v82;
          v43[1] = v42[1];
          goto LABEL_83;
        }
      }
      else
      {
        v39 = 0;
        v40 = v64;
        do
          *(_DWORD *)&v40[4 * v39++] = 0;
        while (v39 < *(int *)&v63[4]);
        *(_DWORD *)v63 = v76;
        if (*(int *)&v63[4] <= 2)
        {
          v41 = DWORD1(v76);
          if (SDWORD1(v76) <= 2)
            goto LABEL_52;
        }
      }
      sub_100256B48((uint64_t)v63, (uint64_t)&v76);
LABEL_83:
      *(_OWORD *)&v63[16] = v77;
      *(_OWORD *)&v63[32] = v78;
      *(_QWORD *)&v63[48] = v79;
      *(_QWORD *)&v63[56] = v80;
      if ((v69 & 0xFFF) != v33)
        goto LABEL_84;
      goto LABEL_54;
    }
  }
  else if ((a5[1] & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  a5[1] = (DWORD2(v69) + HIDWORD(v69) - 1) / 2;
  goto LABEL_21;
}

void sub_1002F1FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_100006BE4((uint64_t)&a23);
  sub_100006BE4((uint64_t)&a35);
  sub_100006BE4((uint64_t)&a49);
  sub_100006BE4(v49 - 208);
  _Unwind_Resume(a1);
}

void sub_1002F20A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;

  sub_100006BE4(&a49);
  sub_100006BE4(v49 - 208);
  _Unwind_Resume(a1);
}

void sub_1002F20C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_1002F20D4(unsigned int a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, int a15, int a16, int a17)
{
  int v20;
  _BYTE *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25[2];
  int v26;
  _BYTE *v27;
  uint64_t v28;
  int v29[2];
  _BYTE v30[4];
  int v31[2];
  _BYTE v32[4];

  v31[0] = a13;
  v31[1] = 1;
  sub_10022FD68((uint64_t)v32, v31, a3, a12, 0);
  v29[0] = a15;
  v29[1] = 1;
  sub_10022FD68((uint64_t)v30, v29, a3, a14, 0);
  *(_QWORD *)&v22 = 0;
  v20 = 16842752;
  v21 = v32;
  v28 = 0;
  v25[1] = a17;
  v26 = 16842752;
  v27 = v30;
  v25[0] = a16;
  v24 = 0u;
  v23 = 0u;
  sub_1002F1604(a1, a2, (uint64_t)&v20, (uint64_t)&v26, v25);
}

void sub_1002F2478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, char a17, char a18, __int128 a19, __int128 a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,uint64_t a26,char a27,int a28,uint64_t a29,__int128 a30,__int128 a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,int a46,uint64_t a47,__int128 a48,__int128 a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,__int128 a59,__int128 a60)
{
  uint64_t v60;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;

  if (a22)
  {
    v62 = (unsigned int *)(a22 + 20);
    do
    {
      v63 = __ldaxr(v62);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, v62));
    if (!v64)
      sub_100256C90((uint64_t)&a15);
  }
  a22 = 0;
  a19 = 0u;
  a20 = 0u;
  if (a16 >= 1)
  {
    v65 = 0;
    v66 = a23;
    do
      *(_DWORD *)(v66 + 4 * v65++) = 0;
    while (v65 < a16);
  }
  if (a24 != &a25)
    j__free(a24);
  if (a33)
  {
    v67 = (unsigned int *)(a33 + 20);
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
      sub_100256C90((uint64_t)&a27);
  }
  a33 = 0;
  a30 = 0u;
  a31 = 0u;
  if (a28 >= 1)
  {
    v70 = 0;
    v71 = a34;
    do
      *(_DWORD *)(v71 + 4 * v70++) = 0;
    while (v70 < a28);
  }
  if (a35 != &a36)
    j__free(a35);
  v72 = a42;
  if (a42)
  {
    v73 = (unsigned int *)(a42 + 8);
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
      (*(void (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72);
  }
  if (a51)
  {
    v76 = (unsigned int *)(a51 + 20);
    do
    {
      v77 = __ldaxr(v76);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, v76));
    if (!v78)
      sub_100256C90((uint64_t)&a45);
  }
  a51 = 0;
  a48 = 0u;
  a49 = 0u;
  if (a46 >= 1)
  {
    v79 = 0;
    v80 = a52;
    do
      *(_DWORD *)(v80 + 4 * v79++) = 0;
    while (v79 < a46);
  }
  if (a53 != &a54)
    j__free(a53);
  v81 = *(_QWORD *)(v60 - 152);
  if (v81)
  {
    v82 = (unsigned int *)(v81 + 20);
    do
    {
      v83 = __ldaxr(v82);
      v84 = v83 - 1;
    }
    while (__stlxr(v84, v82));
    if (!v84)
      sub_100256C90(v60 - 208);
  }
  *(_QWORD *)(v60 - 152) = 0;
  a59 = 0u;
  a60 = 0u;
  if (*(int *)(v60 - 204) >= 1)
  {
    v85 = 0;
    v86 = *(_QWORD *)(v60 - 144);
    do
      *(_DWORD *)(v86 + 4 * v85++) = 0;
    while (v85 < *(int *)(v60 - 204));
  }
  v87 = *(void **)(v60 - 136);
  if (v87 != (void *)(v60 - 128))
    j__free(v87);
  _Unwind_Resume(exception_object);
}

void sub_1002F26C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int *a6, char a7)
{
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  _QWORD *v41;
  _QWORD *v42;
  unsigned int *v43;
  unsigned int v44;
  _QWORD *v45;
  _QWORD *v46;
  unsigned int *v47;
  unsigned int v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _BYTE v52[64];
  _BYTE *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[64];
  _BYTE *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void *v69;
  uint64_t v70[3];
  int32x2_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  void *v77;
  _QWORD v78[2];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char *v83;
  void *v84;
  _QWORD v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  int32x2_t *v91;
  uint64_t *v92;
  uint64_t v93[3];
  _BYTE v94[8];
  int v95;
  _BYTE *v96;
  uint64_t v97;

  sub_100298C2C(v94, &off_100451FD8);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_OWORD *)(v14 + 16);
    v86 = *(_OWORD *)v14;
    v87 = v15;
    v88 = *(_OWORD *)(v14 + 32);
    v16 = *(_QWORD *)(v14 + 56);
    v89 = *(_QWORD *)(v14 + 48);
    v90 = v16;
    v91 = (int32x2_t *)&v86 + 1;
    v92 = v93;
    v93[0] = 0;
    v93[1] = 0;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 20);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }
    if (*(int *)(v14 + 4) > 2)
    {
      DWORD1(v86) = 0;
      sub_100256B48((uint64_t)&v86, v14);
    }
    else
    {
      v19 = *(uint64_t **)(v14 + 72);
      v20 = v92;
      *v92 = *v19;
      v20[1] = v19[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v86);
  }
  if (sub_10025D914((_DWORD *)a4) == 0x10000)
  {
    v21 = *(_QWORD *)(a4 + 8);
    v22 = *(_OWORD *)(v21 + 16);
    v79 = *(_OWORD *)v21;
    v80 = v22;
    v81 = *(_OWORD *)(v21 + 32);
    v23 = *(_QWORD *)(v21 + 56);
    *(_QWORD *)&v82 = *(_QWORD *)(v21 + 48);
    *((_QWORD *)&v82 + 1) = v23;
    v83 = (char *)&v79 + 8;
    v84 = v85;
    v85[1] = 0;
    v85[0] = 0;
    if (v23)
    {
      v24 = (unsigned int *)(v23 + 20);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
    }
    if (*(int *)(v21 + 4) > 2)
    {
      DWORD1(v79) = 0;
      sub_100256B48((uint64_t)&v79, v21);
    }
    else
    {
      v26 = *(_QWORD **)(v21 + 72);
      v27 = v84;
      *(_QWORD *)v84 = *v26;
      v27[1] = v26[1];
    }
  }
  else
  {
    sub_10025CCB8(a4, -1, (uint64_t)&v79);
  }
  if (sub_10025D914((_DWORD *)a5) == 0x10000)
  {
    v28 = *(_QWORD *)(a5 + 8);
    v29 = *(_OWORD *)(v28 + 16);
    v72 = *(_OWORD *)v28;
    v73 = v29;
    v74 = *(_OWORD *)(v28 + 32);
    v30 = *(_QWORD *)(v28 + 56);
    *(_QWORD *)&v75 = *(_QWORD *)(v28 + 48);
    *((_QWORD *)&v75 + 1) = v30;
    v76 = (char *)&v72 + 8;
    v77 = v78;
    v78[0] = 0;
    v78[1] = 0;
    if (v30)
    {
      v31 = (unsigned int *)(v30 + 20);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
    }
    if (*(int *)(v28 + 4) > 2)
    {
      DWORD1(v72) = 0;
      sub_100256B48((uint64_t)&v72, v28);
    }
    else
    {
      v33 = *(_QWORD **)(v28 + 72);
      v34 = v77;
      *(_QWORD *)v77 = *v33;
      v34[1] = v33[1];
    }
  }
  else
  {
    sub_10025CCB8(a5, -1, (uint64_t)&v72);
  }
  if (a3 >= 0)
    v35 = a3;
  else
    v35 = v86;
  v71 = vrev64_s32(*v91);
  sub_10026214C(a2, &v71, v86 & 0xFF8 | v35 & 7, -1, 0, 0);
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v36 = *(_QWORD *)(a2 + 8);
    v37 = *(_OWORD *)(v36 + 16);
    v63 = *(_OWORD *)v36;
    v64 = v37;
    v65 = *(_OWORD *)(v36 + 32);
    v38 = *(_QWORD *)(v36 + 56);
    v66 = *(_QWORD *)(v36 + 48);
    v67 = v38;
    v68 = (char *)&v63 + 8;
    v69 = v70;
    v70[0] = 0;
    v70[1] = 0;
    if (v38)
    {
      v39 = (unsigned int *)(v38 + 20);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
    if (*(int *)(v36 + 4) > 2)
    {
      DWORD1(v63) = 0;
      sub_100256B48((uint64_t)&v63, v36);
    }
    else
    {
      v41 = *(_QWORD **)(v36 + 72);
      v42 = v69;
      *(_QWORD *)v69 = *v41;
      v42[1] = v41[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v63);
  }
  v62 = (unint64_t)vrev64_s32(*(int32x2_t *)((char *)&v86 + 8));
  if ((a7 & 0x10) == 0)
    sub_100258BD0((uint64_t)&v86, &v62, (_DWORD *)&v62 + 2);
  if ((((unsigned __int16)v72 ^ (unsigned __int16)v79) & 0xFFF) != 0
    || HIDWORD(v79) != 1 && DWORD2(v79) != 1
    || HIDWORD(v72) != 1 && DWORD2(v72) != 1)
  {
    *(_OWORD *)v57 = 0uLL;
    qmemcpy((void *)sub_10029430C(v57, 120), "kernelX.type() == kernelY.type() && (kernelX.cols == 1 || kernelX.rows == 1) && (kernelY.cols == 1 || kernelY.rows == 1)", 120);
    sub_100294B74(-215, (uint64_t *)v57, "sepFilter2D", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 4948);
  }
  if ((v79 & 0x4000) == 0)
  {
    *(_DWORD *)v57 = 1124007936;
    memset(&v57[4], 0, 60);
    v58 = &v57[8];
    v59 = &v60;
    v60 = 0;
    v61 = 0;
    *(_DWORD *)v52 = 33619968;
    *(_OWORD *)&v52[8] = (unint64_t)v57;
    sub_1002181EC((uint64_t)&v79, (uint64_t)v52);
    goto LABEL_53;
  }
  *(_OWORD *)v57 = v79;
  *(_OWORD *)&v57[16] = v80;
  *(_OWORD *)&v57[32] = v81;
  *(_OWORD *)&v57[48] = v82;
  v58 = &v57[8];
  v59 = &v60;
  v60 = 0;
  v61 = 0;
  if (*((_QWORD *)&v82 + 1))
  {
    v43 = (unsigned int *)(*((_QWORD *)&v82 + 1) + 20);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
    if (SDWORD1(v79) <= 2)
      goto LABEL_50;
  }
  else if (SDWORD1(v79) <= 2)
  {
LABEL_50:
    v45 = v84;
    v46 = v59;
    *(_QWORD *)v59 = *(_QWORD *)v84;
    v46[1] = v45[1];
    goto LABEL_53;
  }
  *(_DWORD *)&v57[4] = 0;
  sub_100256B48((uint64_t)v57, (uint64_t)&v79);
LABEL_53:
  if ((v72 & 0x4000) == 0)
  {
    *(_DWORD *)v52 = 1124007936;
    memset(&v52[4], 0, 60);
    v53 = &v52[8];
    v54 = &v55;
    v55 = 0;
    v56 = 0;
    v95 = 33619968;
    v96 = v52;
    v97 = 0;
    sub_1002181EC((uint64_t)&v72, (uint64_t)&v95);
    goto LABEL_62;
  }
  *(_OWORD *)v52 = v72;
  *(_OWORD *)&v52[16] = v73;
  *(_OWORD *)&v52[32] = v74;
  *(_OWORD *)&v52[48] = v75;
  v53 = &v52[8];
  v54 = &v55;
  v55 = 0;
  v56 = 0;
  if (*((_QWORD *)&v75 + 1))
  {
    v47 = (unsigned int *)(*((_QWORD *)&v75 + 1) + 20);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 + 1, v47));
    if (SDWORD1(v72) <= 2)
      goto LABEL_59;
  }
  else if (SDWORD1(v72) <= 2)
  {
LABEL_59:
    v49 = v77;
    v50 = v54;
    *(_QWORD *)v54 = *(_QWORD *)v77;
    v50[1] = v49[1];
    goto LABEL_62;
  }
  *(_DWORD *)&v52[4] = 0;
  sub_100256B48((uint64_t)v52, (uint64_t)&v72);
LABEL_62:
  LODWORD(v51) = HIDWORD(v62);
  sub_1002F20D4(v86 & 0xFFF, v63 & 0xFFF, v79 & 0xFFF, v87, v93[0], v64, v70[0], HIDWORD(v63), __SPAIR64__(v62, DWORD2(v63)), *(uint64_t *)((char *)&v62 + 4), v51, *(uint64_t *)&v57[16], HIDWORD(v79) + DWORD2(v79) - 1, *(uint64_t *)&v52[16], HIDWORD(v72) + DWORD2(v72) - 1, *a6, a6[1]);
}

void sub_1002F300C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  sub_100006BE4((uint64_t)&a29);
  sub_100006BE4((uint64_t)&a43);
  sub_100006BE4((uint64_t)&a57);
  sub_100006BE4((uint64_t)&a69);
  sub_100006BE4(v69 - 224);
  sub_1001D40CC(v69 - 120);
  _Unwind_Resume(a1);
}

void sub_1002F30BC()
{
  JUMPOUT(0x1002F309CLL);
}

void sub_1002F30C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1 - 224);
  sub_1001D40CC(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_1002F30E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 120);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F30F4(uint64_t a1, uint64_t a2, int a3)
{
  int *v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  int *v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  *(_OWORD *)(a1 + 4) = 0u;
  v5 = (int *)(a1 + 4);
  *(_DWORD *)a1 = 1124007936;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 8;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 88) = 0;
  if (a1 == a2)
  {
    v22 = 0;
    v19 = 0;
    v18 = 0;
    goto LABEL_20;
  }
  v7 = *(_QWORD *)(a2 + 56);
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 20);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = *(_QWORD *)(a1 + 56);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        sub_100256C90(a1);
    }
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) > 0)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 64);
    do
    {
      *(_DWORD *)(v15 + 4 * v14++) = 0;
      v16 = *v5;
    }
    while (v14 < v16);
    *(_DWORD *)a1 = *(_DWORD *)a2;
    if ((int)v16 <= 2)
    {
      v17 = *(_DWORD *)(a2 + 4);
      if (v17 <= 2)
        goto LABEL_15;
    }
LABEL_18:
    sub_100256B48(a1, a2);
    v18 = *(_DWORD *)(a1 + 8);
    v19 = *(_DWORD *)(a1 + 12);
    goto LABEL_19;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v17 = *(_DWORD *)(a2 + 4);
  if (v17 > 2)
    goto LABEL_18;
LABEL_15:
  v18 = *(_DWORD *)(a2 + 8);
  v19 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 4) = v17;
  *(_DWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 12) = v19;
  v20 = *(_QWORD **)(a2 + 72);
  v21 = *(_QWORD **)(a1 + 72);
  *v21 = *v20;
  v21[1] = v20[1];
LABEL_19:
  v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = v23;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v22 = (int *)v23;
LABEL_20:
  *(_DWORD *)(a1 + 96) = a3;
  *(_BYTE *)(a1 + 100) = 1;
  v24 = (v18 + v19 - 1);
  if ((int)v24 < 1)
    return a1;
  while (1)
  {
    v25 = *v22++;
    if (v25 != (__int16)v25)
      break;
    if (!--v24)
      return a1;
  }
  *(_BYTE *)(a1 + 100) = 0;
  return a1;
}

void sub_1002F32B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F32C8(uint64_t a1, uint64_t a2, int a3)
{
  int *v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;

  *(_OWORD *)(a1 + 4) = 0u;
  v5 = (int *)(a1 + 4);
  *(_DWORD *)a1 = 1124007936;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 8;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 88) = 0;
  if (a1 != a2)
  {
    v7 = *(_QWORD *)(a2 + 56);
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 20);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(_QWORD *)(a1 + 56);
      if (v10)
      {
        v11 = (unsigned int *)(v10 + 20);
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
          sub_100256C90(a1);
      }
    }
    *(_QWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    if (*(int *)(a1 + 4) <= 0)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      v17 = *(_DWORD *)(a2 + 4);
      if (v17 <= 2)
      {
LABEL_15:
        *(_DWORD *)(a1 + 4) = v17;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        v18 = *(_QWORD **)(a2 + 72);
        v19 = *(_QWORD **)(a1 + 72);
        *v19 = *v18;
        v19[1] = v18[1];
LABEL_18:
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        goto LABEL_19;
      }
    }
    else
    {
      v14 = 0;
      v15 = *(_QWORD *)(a1 + 64);
      do
      {
        *(_DWORD *)(v15 + 4 * v14++) = 0;
        v16 = *v5;
      }
      while (v14 < v16);
      *(_DWORD *)a1 = *(_DWORD *)a2;
      if ((int)v16 <= 2)
      {
        v17 = *(_DWORD *)(a2 + 4);
        if (v17 <= 2)
          goto LABEL_15;
      }
    }
    sub_100256B48(a1, a2);
    goto LABEL_18;
  }
LABEL_19:
  *(_DWORD *)(a1 + 96) = a3;
  return a1;
}

void sub_1002F342C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F3440(uint64_t a1, unsigned int *a2, int a3, char a4, double a5)
{
  double v7;
  float v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)(a1 + 8) = 1124007936;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)a1 = a3;
  LODWORD(v10) = 33619968;
  v11 = a1 + 8;
  v12 = 0;
  v7 = (double)(1 << a4);
  sub_1002044A8(a2, (uint64_t)&v10, 5, 1.0 / v7, 0.0);
  v8 = a5 / v7;
  *(float *)(a1 + 4) = v8;
  if ((*(_BYTE *)a1 & 3) == 0)
  {
    v10 = 0;
    v11 = 0;
    qmemcpy((void *)sub_10029430C(&v10, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, &v10, "SymmColumnVec_32s8u", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 2429);
  }
  return a1;
}

void sub_1002F3550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_10029434C((uint64_t *)va);
  sub_100006BE4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F357C(uint64_t a1, unsigned int *a2, int a3, char a4, double a5)
{
  double v7;
  float v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)(a1 + 8) = 1124007936;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)a1 = a3;
  LODWORD(v10) = 33619968;
  v11 = a1 + 8;
  v12 = 0;
  v7 = (double)(1 << a4);
  sub_1002044A8(a2, (uint64_t)&v10, 5, 1.0 / v7, 0.0);
  v8 = a5 / v7;
  *(float *)(a1 + 4) = v8;
  if ((*(_BYTE *)a1 & 3) == 0)
  {
    v10 = 0;
    v11 = 0;
    qmemcpy((void *)sub_10029430C(&v10, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, &v10, "SymmColumnSmallVec_32s16s", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 2581);
  }
  return a1;
}

void sub_1002F368C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_10029434C((uint64_t *)va);
  sub_100006BE4(v2);
  _Unwind_Resume(a1);
}

int *sub_1002F36B8(int *a1, uint64_t a2, int a3, double a4)
{
  _DWORD *v6;
  int *v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  float v22;
  uint64_t v24[2];

  a1[2] = 1124007936;
  v6 = a1 + 2;
  *(_OWORD *)(a1 + 3) = 0u;
  v7 = a1 + 3;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 14) = 0u;
  *((_QWORD *)a1 + 11) = 0;
  *((_QWORD *)a1 + 9) = a1 + 4;
  *((_QWORD *)a1 + 10) = a1 + 22;
  *((_QWORD *)a1 + 12) = 0;
  *a1 = a3;
  if (a1 + 2 != (int *)a2)
  {
    v9 = *(_QWORD *)(a2 + 56);
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 20);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = *((_QWORD *)a1 + 8);
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 20);
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          sub_100256C90((uint64_t)(a1 + 2));
      }
    }
    *((_QWORD *)a1 + 8) = 0;
    *(_OWORD *)(a1 + 6) = 0u;
    *(_OWORD *)(a1 + 10) = 0u;
    if (a1[3] <= 0)
    {
      *v6 = *(_DWORD *)a2;
      v19 = *(_DWORD *)(a2 + 4);
      if (v19 <= 2)
      {
LABEL_15:
        a1[3] = v19;
        *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 8);
        v20 = *(_QWORD **)(a2 + 72);
        v21 = (_QWORD *)*((_QWORD *)a1 + 10);
        *v21 = *v20;
        v21[1] = v20[1];
LABEL_18:
        *(_OWORD *)(a1 + 6) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 14) = *(_OWORD *)(a2 + 48);
        a3 = *a1;
        goto LABEL_19;
      }
    }
    else
    {
      v16 = 0;
      v17 = *((_QWORD *)a1 + 9);
      do
      {
        *(_DWORD *)(v17 + 4 * v16++) = 0;
        v18 = *v7;
      }
      while (v16 < v18);
      *v6 = *(_DWORD *)a2;
      if ((int)v18 <= 2)
      {
        v19 = *(_DWORD *)(a2 + 4);
        if (v19 <= 2)
          goto LABEL_15;
      }
    }
    sub_100256B48((uint64_t)v6, a2);
    goto LABEL_18;
  }
LABEL_19:
  v22 = a4;
  *((float *)a1 + 1) = v22;
  if ((a3 & 3) == 0)
  {
    v24[0] = 0;
    v24[1] = 0;
    qmemcpy((void *)sub_10029430C(v24, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, v24, "SymmColumnVec_32f16s", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 2760);
  }
  *((_BYTE *)a1 + 104) = sub_100294AFC(100);
  return a1;
}

void sub_1002F38A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_100006BE4(v9);
  _Unwind_Resume(a1);
}

void sub_1002F38D4(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_100008F3C();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_100008FF8();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

uint64_t sub_1002F3A74(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v9[2];

  v7 = sub_1002F3B5C(a1, a2, a3, a5);
  *(_QWORD *)v7 = off_100452038;
  *(_DWORD *)(v7 + 216) = a4;
  if ((a4 & 3) == 0 || *(int *)(a1 + 8) >= 6)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_10029430C(v9, 84), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5", 84);
    sub_100294B74(-215, v9, "SymmRowSmallFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3112);
  }
  return a1;
}

void sub_1002F3B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_1002F3F18(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F3B5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _DWORD *v8;
  int *v9;
  _DWORD *v10;
  int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = off_100452090;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 1124007936;
  v10 = (_DWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 116) = 0u;
  v11 = (int *)(a1 + 116);
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = a1 + 120;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 212) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2)
      goto LABEL_21;
    v12 = *(_QWORD *)(a2 + 56);
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 20);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v15 = *(_QWORD *)(a1 + 72);
      if (v15)
      {
        v16 = (unsigned int *)(v15 + 20);
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v8 = *(_DWORD *)a2;
      v22 = *(_DWORD *)(a2 + 4);
      if (v22 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v22;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v23 = *(_QWORD **)(a2 + 72);
        v24 = *(_QWORD **)(a1 + 88);
        *v24 = *v23;
        v24[1] = v23[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v19 = 0;
      v20 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v20 + 4 * v19++) = 0;
        v21 = *v9;
      }
      while (v19 < v21);
      *v8 = *(_DWORD *)a2;
      if ((int)v21 <= 2)
      {
        v22 = *(_DWORD *)(a2 + 4);
        if (v22 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v8, a2);
    goto LABEL_20;
  }
  LODWORD(v42) = 33619968;
  v43 = a1 + 16;
  v44 = 0;
  sub_1002181EC(a2, (uint64_t)&v42);
LABEL_21:
  v26 = *(_DWORD *)(a1 + 24);
  v25 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v26 + v25 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v26 != 1 && v25 != 1)
  {
    v42 = 0;
    v43 = 0;
    qmemcpy((void *)sub_10029430C(&v42, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v42, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  if (v10 != (_DWORD *)a4)
  {
    v27 = *(_QWORD *)(a4 + 56);
    if (v27)
    {
      v28 = (unsigned int *)(v27 + 20);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
    }
    v30 = *(_QWORD *)(a1 + 168);
    if (v30)
    {
      v31 = (unsigned int *)(v30 + 20);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
        sub_100256C90((uint64_t)v10);
    }
    *(_QWORD *)(a1 + 168) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    if (*(int *)(a1 + 116) <= 0)
    {
      *v10 = *(_DWORD *)a4;
      v37 = *(_DWORD *)(a4 + 4);
      if (v37 <= 2)
      {
LABEL_39:
        *(_DWORD *)(a1 + 116) = v37;
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a4 + 8);
        v38 = *(_QWORD **)(a4 + 72);
        v39 = *(_QWORD **)(a1 + 184);
        *v39 = *v38;
        v39[1] = v38[1];
LABEL_42:
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a4 + 32);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a4 + 48);
        goto LABEL_43;
      }
    }
    else
    {
      v34 = 0;
      v35 = *(_QWORD *)(a1 + 176);
      do
      {
        *(_DWORD *)(v35 + 4 * v34++) = 0;
        v36 = *v11;
      }
      while (v34 < v36);
      *v10 = *(_DWORD *)a4;
      if ((int)v36 <= 2)
      {
        v37 = *(_DWORD *)(a4 + 4);
        if (v37 <= 2)
          goto LABEL_39;
      }
    }
    sub_100256B48((uint64_t)v10, a4);
    goto LABEL_42;
  }
LABEL_43:
  v40 = *(_DWORD *)(a4 + 96);
  *(_BYTE *)(a1 + 212) = *(_BYTE *)(a4 + 100);
  *(_DWORD *)(a1 + 208) = v40;
  return a1;
}

void sub_1002F3EDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1002EECE0(v2);
  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F3F18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100452090;
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = a1 + 112;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  if (*(int *)(a1 + 116) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 176);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 116));
  }
  v9 = *(void **)(a1 + 184);
  if (v9 != (void *)(a1 + 192))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 16);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 20));
  }
  v16 = *(void **)(a1 + 88);
  if (v16 != (void *)(a1 + 96))
    j__free(v16);
  return a1;
}

void sub_1002F4030(uint64_t a1)
{
  sub_1002F3F18(a1);
  operator delete();
}

unint64_t sub_1002F4054(uint64_t a1, uint64_t a2, __int16 *a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t result;
  int32x4_t v15;
  uint64_t v16;
  int64_t v17;
  int8x16_t *v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int16 *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int32x4_t v41;
  float *v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  unsigned __int128 v48;
  int16x8_t v49;
  int16x8_t v50;
  int32x4_t v51;
  unsigned __int128 v52;
  int16x8_t v53;
  int32x4_t v54;
  float *v55;
  float *v56;
  float *v57;
  uint64_t v58;
  int *v59;
  unsigned __int8 *v60;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v69;
  float *v70;
  unint64_t v71;
  float *v72;
  float *v73;
  float *v74;
  __int16 *v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  BOOL v96;
  BOOL v98;
  BOOL v100;
  BOOL v102;
  BOOL v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  int32x4_t v108;
  int32x4_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float *v117;
  const char *v118;
  unsigned __int128 v119;
  const char *v120;
  int16x8_t v121;
  int16x8_t v122;
  int32x4_t v123;
  int32x4_t v124;
  const char *v125;
  const char *v126;
  unsigned __int128 v127;
  int16x8_t v128;
  int16x8_t v129;
  int32x4_t v130;
  const char *v131;
  unsigned __int128 v132;
  int16x8_t v133;
  const char *v134;
  unsigned __int128 v135;
  int16x8_t v136;
  float *v137;
  float *v138;
  float *v139;
  uint64_t v140;
  int *v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  int v146;
  float v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  __int16 *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  BOOL v172;
  BOOL v174;
  BOOL v176;
  BOOL v178;
  BOOL v180;
  BOOL v182;
  BOOL v183;
  uint64_t v184;
  uint64_t v185;
  unsigned __int8 *v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  float *v190;
  uint64_t v191;
  const char *v192;
  const char *v193;
  const char *v194;
  unsigned __int128 v195;
  uint16x8_t v196;
  uint16x8_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  const char *v202;
  unsigned __int128 v203;
  const char *v204;
  uint16x8_t v205;
  uint16x8_t v206;
  const char *v207;
  unsigned __int128 v208;
  uint16x8_t v209;
  const char *v210;
  unsigned __int128 v211;
  uint16x8_t v212;
  float *v213;
  float *v214;
  float *v215;
  unsigned int v216;
  unsigned int v217;
  int v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  __int16 *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  BOOL v232;
  BOOL v233;
  BOOL v234;
  BOOL v235;
  BOOL v236;
  BOOL v237;
  BOOL v238;
  uint64_t v239;
  uint64_t v240;
  unsigned __int8 *v241;
  float *v242;
  uint64_t v243;
  const char *v244;
  const char *v245;
  uint16x8_t v246;
  uint16x8_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  int32x4_t v251;
  uint32x4_t v252;
  uint32x4_t v253;
  uint32x4_t v254;
  const char *v255;
  unsigned __int128 v256;
  uint16x8_t v257;
  const char *v258;
  unsigned __int128 v259;
  uint16x8_t v260;
  uint16x8_t v261;
  uint16x8_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  float *v266;
  float *v267;
  float *v268;
  uint64_t v269;
  int *v270;
  unsigned __int8 *v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  __int16 *v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  BOOL v283;
  BOOL v284;
  BOOL v285;
  BOOL v286;
  BOOL v287;
  uint64_t v288;
  uint64_t v289;
  float *v290;
  uint64_t v291;
  const char *v292;
  const char *v293;
  const char *v294;
  uint64_t v295;
  unsigned __int128 v296;
  int16x8_t v297;
  unsigned __int128 v298;
  int16x8_t v299;
  int16x8_t v300;
  int16x8_t v301;
  float *v302;
  float *v303;
  float *v304;
  int *v305;
  unsigned __int8 *v306;
  int v307;
  unint64_t v308;
  unint64_t v309;
  __int16 *v310;
  BOOL v311;
  char v312;
  BOOL v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unsigned __int8 *v319;
  unsigned __int8 *v320;
  unsigned __int8 *v321;
  unsigned __int8 *j;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  _DWORD *v329;
  unint64_t v330;
  int *v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  unint64_t v335;
  unsigned __int8 *v336;
  __int16 *v337;
  unint64_t v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  __int16 *v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  BOOL v358;
  BOOL v359;
  BOOL v360;
  BOOL v361;
  BOOL v362;
  BOOL v363;
  BOOL v364;
  uint64_t v365;
  uint64_t v366;
  unsigned __int8 *v367;
  float *v368;
  uint64_t v369;
  const char *v370;
  int32x4_t v371;
  int32x4_t v372;
  int32x4_t v373;
  int32x4_t v374;
  const char *v375;
  unsigned __int128 v376;
  uint32x4_t v377;
  uint32x4_t v378;
  uint32x4_t v379;
  uint32x4_t v380;
  const char *v381;
  uint16x8_t v382;
  uint16x8_t v383;
  const char *v384;
  unsigned __int128 v385;
  int32x4_t v386;
  int32x4_t v387;
  uint16x8_t v388;
  uint16x8_t v389;
  uint32x4_t v390;
  float *v391;
  float *v392;
  float *v393;
  int *v394;
  unsigned __int8 *v395;
  unsigned __int8 *v396;
  unsigned __int8 *v397;
  int v398;
  int v399;
  uint64_t v400;
  unint64_t v401;
  unint64_t v402;
  __int16 *v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  BOOL v413;
  BOOL v414;
  BOOL v415;
  BOOL v416;
  BOOL v417;
  BOOL v418;
  BOOL v419;
  uint64_t v420;
  uint64_t v421;
  unsigned __int8 *v422;
  float *v423;
  uint64_t v424;
  const char *v425;
  const char *v426;
  int32x4_t v427;
  int32x4_t v428;
  int32x4_t v429;
  int32x4_t v430;
  uint32x4_t v431;
  uint32x4_t v432;
  uint32x4_t v433;
  const char *v434;
  unsigned __int128 v435;
  uint16x8_t v436;
  uint16x8_t v437;
  const char *v438;
  unsigned __int128 v439;
  int32x4_t v440;
  int32x4_t v441;
  uint32x4_t v442;
  uint16x8_t v443;
  uint16x8_t v444;
  int32x4_t v445;
  float *v446;
  float *v447;
  float *v448;
  int *v449;
  unsigned __int8 *v450;
  int v451;
  int v452;
  uint64_t v453;
  unint64_t v454;
  unint64_t v455;
  __int16 *v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  BOOL v466;
  BOOL v467;
  BOOL v468;
  BOOL v469;
  BOOL v470;
  BOOL v471;
  BOOL v472;
  uint64_t v473;
  uint64_t v474;
  unsigned __int8 *v475;
  int32x4_t v476;
  int32x4_t v477;
  float *v478;
  uint64_t v479;
  const char *v480;
  const char *v481;
  const char *v482;
  unsigned __int128 v483;
  uint16x8_t v484;
  uint16x8_t v485;
  const char *v486;
  unsigned __int128 v487;
  uint16x8_t v488;
  float *v489;
  float *v490;
  float *v491;
  int *v492;
  unsigned __int8 *v493;
  int v494;
  int32x4_t v495;
  int8x16_t *v496;
  uint64_t v497;
  unint64_t v498;
  int8x16_t v499;
  int32x4_t v500;
  int32x4_t v501;
  int32x4_t v502;
  int32x4_t v503;
  int32x4_t v504;
  unsigned __int8 *v505;
  unint64_t v506;
  int32x4_t *v507;
  uint64_t v508;
  int32x4_t v509;
  int *v510;
  unsigned __int8 *v511;
  unsigned __int8 *v512;
  unsigned __int8 *v513;
  unsigned __int8 *v514;
  unsigned __int8 *v515;
  int v516;
  unint64_t v517;
  unint64_t v518;
  __int16 *v519;
  BOOL v520;
  char v521;
  BOOL v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  unsigned __int8 *v528;
  unsigned __int8 *v529;
  unsigned __int8 *v530;
  unsigned __int8 *i;
  int v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  _DWORD *v538;
  unint64_t v539;
  int *v540;
  uint64_t v541;
  uint64_t v542;
  int v543;
  unint64_t v544;
  unsigned __int8 *v545;
  __int16 *v546;
  unint64_t v547;
  int v548;
  int32x4_t v549;
  int8x16_t *v550;
  uint64_t v551;
  unint64_t v552;
  int8x16_t v553;
  int32x4_t v554;
  int32x4_t v555;
  int32x4_t v556;
  int32x4_t v557;
  int32x4_t v558;
  unsigned __int8 *v559;
  unint64_t v560;
  int32x4_t *v561;
  uint64_t v562;
  int32x4_t v563;
  unint64_t v564;
  unint64_t v565;
  unint64_t v566;
  unint64_t v567;
  unint64_t v568;
  unint64_t v569;
  uint64_t v570;
  int v571;
  float32x4x2_t v573;
  float32x4x2_t v574;
  float32x4x2_t v575;
  int8x16x2_t v576;
  int8x16x2_t v577;
  float32x4x2_t v578;
  int8x16x2_t v579;
  int8x16x2_t v580;
  int8x16x2_t v581;
  float32x4x2_t v582;
  float32x4x2_t v583;
  int8x16x2_t v584;
  int8x16x2_t v585;
  float32x4x2_t v586;
  float32x4x2_t v587;
  float32x4x2_t v588;
  float32x4x2_t v589;
  float32x4x2_t v590;
  float32x4x2_t v591;
  float32x4x2_t v592;
  float32x4x2_t v593;
  float32x4x2_t v594;
  int8x16x2_t v595;
  float32x4x2_t v596;
  int8x16x2_t v597;
  float32x4x2_t v598;
  int8x16x2_t v599;
  float32x4x2_t v600;
  float32x4x2_t v601;
  float32x4x2_t v602;
  int8x16x2_t v603;
  int8x16x2_t v604;
  float32x4x2_t v605;
  float32x4x2_t v606;
  float32x4x2_t v607;
  int8x16x2_t v608;
  float32x4x2_t v609;
  float32x4x2_t v610;
  float32x4x2_t v611;
  float32x4x2_t v612;
  float32x4x2_t v613;
  int8x16x2_t v614;
  float32x4x2_t v615;
  float32x4x2_t v616;
  float32x4x2_t v617;
  int8x16x2_t v618;
  float32x4x2_t v619;

  v571 = *(_DWORD *)(a1 + 8);
  v9 = (uint64_t)(v571 + (v571 < 0)) >> 1;
  v10 = a5;
  v11 = v571 / 2 * (uint64_t)a5;
  v570 = *(_QWORD *)(a1 + 32);
  v12 = v570 + 4 * (v571 / 2);
  v13 = *(_DWORD *)(a1 + 216);
  result = sub_1002F6210(a1 + 112, a2, a3, a4, a5);
  v16 = (int)result;
  v17 = (int)result;
  v18 = (int8x16_t *)(a2 + (int)result + v571 / 2 * (uint64_t)a5);
  v19 = a5 * a4;
  v20 = *(_DWORD *)(a1 + 8);
  if ((v13 & 1) != 0)
  {
    if (v20 == 5)
    {
      v147 = *(float *)v12;
      v148 = *(_DWORD *)(v12 + 4);
      v149 = *(_DWORD *)(v12 + 8);
      v150 = v19 - 2;
      if (*(_DWORD *)v12 == -2 && v148 == 0 && v149 == 1)
      {
        if ((int)result <= v150)
        {
          v340 = -2 * a5;
          v341 = 2 * v10;
          v342 = 2 * (int)v10;
          v343 = 1 - v342;
          v344 = v342 | 1;
          v345 = v150;
          v346 = v150 - (uint64_t)(int)result;
          if (v346 >= 0x40)
          {
            v347 = v346 >> 1;
            v348 = &a3[2 * v16];
            v349 = (unint64_t)&a3[4 * (v346 >> 1) + 4 + 2 * v16];
            v350 = a2 + v341 + v16 + v11;
            v351 = v16 + v11 + (v346 & 0xFFFFFFFFFFFFFFFELL);
            v352 = v351 + v341 + a2 + 2;
            v353 = v16 + v11 - v341 + a2 + 1;
            v354 = a2 + v351 + 2 - v341;
            v355 = a2 + v351 + 2;
            v356 = a2 + v340 + v16 + v11;
            v357 = v351 + v340 + a2 + 1;
            v358 = (unint64_t)v348 >= v354 || v353 >= v349;
            v359 = !v358;
            v360 = (unint64_t)v348 >= v355 || (unint64_t)v18 >= v349;
            v361 = !v360;
            v362 = (unint64_t)v348 >= v357 || v356 >= v349;
            v363 = !v362;
            v364 = v350 >= v349 || (unint64_t)v348 >= v352;
            if (v364 && !v359 && !v361 && !v363)
            {
              v365 = 16;
              if (((v347 + 1) & 0xF) != 0)
                v365 = (v347 + 1) & 0xF;
              v366 = 2 * (v347 + 1 - v365);
              v17 = v366 + v16;
              v367 = &v18->u8[v366];
              v368 = (float *)&a3[2 * v16];
              v369 = ~v347 + v365;
              v15.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
              v370 = (const char *)v18;
              do
              {
                v580 = vld2q_s8(v370);
                v370 += 32;
                v371 = (int32x4_t)vqtbl1q_s8(v580.val[0], (int8x16_t)xmmword_1003BCA90);
                v372 = (int32x4_t)vqtbl1q_s8(v580.val[0], (int8x16_t)xmmword_1003BCAA0);
                v373 = (int32x4_t)vqtbl1q_s8(v580.val[0], (int8x16_t)xmmword_1003BCAB0);
                v374 = (int32x4_t)vqtbl1q_s8(v580.val[0], (int8x16_t)xmmword_1003BCAC0);
                v375 = &v18->i8[v340];
                v376 = (unsigned __int128)vld2q_s8(v375);
                v377 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v376, (int8x16_t)xmmword_1003BCA90), vaddq_s32(v371, v371));
                v378 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v376, (int8x16_t)xmmword_1003BCAA0), vaddq_s32(v372, v372));
                v379 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v376, (int8x16_t)xmmword_1003BCAB0), vaddq_s32(v373, v373));
                v380 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v376, (int8x16_t)xmmword_1003BCAC0), vaddq_s32(v374, v374));
                v381 = &v18->i8[v341];
                v597 = vld2q_s8(v381);
                v382 = vmovl_u8(*(uint8x8_t *)v597.val[0].i8);
                v383 = vmovl_high_u8((uint8x16_t)v597.val[0]);
                v607.val[0] = (float32x4_t)vaddw_high_u16(v380, v383);
                v384 = &v18->i8[v343];
                v385 = (unsigned __int128)vld2q_s8(v384);
                v386 = (int32x4_t)vqtbl1q_s8(v580.val[1], (int8x16_t)xmmword_1003BCAC0);
                v387 = (int32x4_t)vqtbl1q_s8(v580.val[1], (int8x16_t)xmmword_1003BCAB0);
                v388 = vmovl_high_u8((uint8x16_t)v597.val[1]);
                v616.val[0] = (float32x4_t)vaddw_u16(v379, *(uint16x4_t *)v383.i8);
                v389 = vmovl_u8(*(uint8x8_t *)v597.val[1].i8);
                v597.val[0] = vqtbl1q_s8(v580.val[1], (int8x16_t)xmmword_1003BCAA0);
                v580.val[0] = vqtbl1q_s8(v580.val[1], (int8x16_t)xmmword_1003BCA90);
                v619.val[0] = (float32x4_t)vaddw_high_u16(v378, v382);
                v580.val[1] = (int8x16_t)vaddw_u16(v377, *(uint16x4_t *)v382.i8);
                v390 = vaddw_u16((uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v385, (int8x16_t)xmmword_1003BCA90), vaddq_s32((int32x4_t)v580.val[0], (int32x4_t)v580.val[0])), *(uint16x4_t *)v389.i8);
                v391 = v368;
                vst2q_f32(v391, *(float32x4x2_t *)((char *)&v580 + 16));
                v391 += 8;
                v619.val[1] = (float32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v385, (int8x16_t)xmmword_1003BCAA0), vaddq_s32((int32x4_t)v597.val[0], (int32x4_t)v597.val[0])), v389);
                vst2q_f32(v391, v619);
                v616.val[1] = (float32x4_t)vaddw_u16((uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v385, (int8x16_t)xmmword_1003BCAB0), vaddq_s32(v387, v387)), *(uint16x4_t *)v388.i8);
                v392 = v368 + 16;
                vst2q_f32(v392, v616);
                v393 = v368 + 24;
                v368 += 32;
                v18 = (int8x16_t *)v370;
                v607.val[1] = (float32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v385, (int8x16_t)xmmword_1003BCAC0), vaddq_s32(v386, v386)), v388);
                vst2q_f32(v393, v607);
                v369 += 16;
              }
              while (v369);
              v18 = (int8x16_t *)v367;
            }
          }
          v269 = 0;
          v394 = (int *)&a3[2 * v17 + 2];
          v395 = &v18->u8[v340];
          v396 = &v18->u8[v344];
          v397 = &v18->u8[v343];
          do
          {
            v398 = v396[v269] - 2 * v18->u8[v269 + 1] + v397[v269];
            *(v394 - 1) = v396[v269 - 1] - 2 * v18->u8[v269] + v395[v269];
            *v394 = v398;
            v269 += 2;
            v394 += 2;
          }
          while (v17 + v269 <= v345);
          goto LABEL_386;
        }
      }
      else if ((int)result <= v150)
      {
        v153 = 2 * -(int)v10;
        v154 = 2 * v10;
        v155 = 1 - v10;
        v156 = v10 + 1;
        v157 = 1 - 2 * (int)v10;
        v158 = v150;
        v159 = v150 - (uint64_t)(int)result;
        if (v159 > 0x3F)
        {
          v160 = &a3[2 * (int)result];
          v564 = v159 >> 1;
          v161 = (unint64_t)&a3[4 * (v159 >> 1) + 4 + 2 * (int)result];
          v162 = (int)result + v11;
          v569 = a2 + v154 + v162;
          v163 = v162 + (v159 & 0xFFFFFFFFFFFFFFFELL);
          v568 = v163 + v154 + a2 + 2;
          v565 = a2 + v163 + 2 - v154;
          v164 = v163 + v156 + a2 + 1;
          v165 = a2 + v162 - v10;
          v166 = a2 + v163 + 2 - v10;
          v167 = a2 + v163 + 2;
          v566 = a2 + v153 + v162;
          v168 = v163 + v153 + a2 + 1;
          v169 = a2 + v10 + v162;
          v170 = v163 + v10 + a2 + 1;
          v172 = (unint64_t)v160 < v565 && v162 - v154 + a2 + 1 < v161;
          v174 = (unint64_t)v160 < v164 && a2 + v156 + v162 < v161;
          v176 = (unint64_t)v160 < v166 && v165 < v161;
          v178 = (unint64_t)v160 < v167 && (unint64_t)v18 < v161;
          v180 = (unint64_t)v160 < v168 && v566 < v161;
          v182 = (unint64_t)v160 < v170 && v169 < v161;
          v183 = v569 >= v161 || (unint64_t)v160 >= v568;
          if (!v183 || v172 || v174 || v176 || v178)
          {
            v155 = 1 - v10;
          }
          else
          {
            v155 = 1 - v10;
            if (!v180 && !v182)
            {
              v184 = (v564 + 1) & 0xF;
              if (!v184)
                v184 = 16;
              v185 = 2 * (v564 + 1 - v184);
              v17 = v185 + v16;
              v186 = &v18->u8[v185];
              v187 = vdupq_n_s32(LODWORD(v147));
              v188 = vdupq_n_s32(v148);
              v189 = vdupq_n_s32(v149);
              v190 = (float *)&a3[2 * v16];
              v191 = ~v564 + v184;
              v15.i64[1] = 0xFFFFFF03FFFFFF02;
              v192 = (const char *)v18;
              do
              {
                v604 = vld2q_s8(v192);
                v192 += 32;
                v193 = &v18->i8[-v10];
                v614 = vld2q_s8(v193);
                v194 = &v18->i8[v10];
                v195 = (unsigned __int128)vld2q_s8(v194);
                v196 = vaddl_u8(*(uint8x8_t *)&v195, *(uint8x8_t *)v614.val[0].i8);
                v197 = vaddl_high_u8((uint8x16_t)v195, (uint8x16_t)v614.val[0]);
                v198 = vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[0], (int8x16_t)xmmword_1003BCA90)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v196.i8), v188);
                v199 = vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[0], (int8x16_t)xmmword_1003BCAA0)), (int32x4_t)vmovl_high_u16(v196), v188);
                v200 = vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[0], (int8x16_t)xmmword_1003BCAB0)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v197.i8), v188);
                v201 = vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[0], (int8x16_t)xmmword_1003BCAC0)), (int32x4_t)vmovl_high_u16(v197), v188);
                v202 = &v18->i8[v153];
                v203 = (unsigned __int128)vld2q_s8(v202);
                v204 = &v18->i8[v154];
                v618 = vld2q_s8(v204);
                v205 = vaddl_high_u8((uint8x16_t)v618.val[0], (uint8x16_t)v203);
                v206 = vaddl_u8(*(uint8x8_t *)v618.val[0].i8, *(uint8x8_t *)&v203);
                v589.val[0] = (float32x4_t)vmlaq_s32(v201, (int32x4_t)vmovl_high_u16(v205), v189);
                v207 = &v18->i8[v156];
                v208 = (unsigned __int128)vld2q_s8(v207);
                v209 = vaddl_high_u8((uint8x16_t)v208, (uint8x16_t)v614.val[1]);
                v210 = &v18->i8[v157];
                v211 = (unsigned __int128)vld2q_s8(v210);
                v212 = vaddl_high_u8((uint8x16_t)v618.val[1], (uint8x16_t)v211);
                v596.val[0] = (float32x4_t)vmlaq_s32(v200, (int32x4_t)vmovl_u16(*(uint16x4_t *)v205.i8), v189);
                v606.val[0] = (float32x4_t)vmlaq_s32(v199, (int32x4_t)vmovl_high_u16(v206), v189);
                v614.val[0] = (int8x16_t)vaddl_u8(*(uint8x8_t *)&v208, *(uint8x8_t *)v614.val[1].i8);
                v614.val[1] = (int8x16_t)vaddl_u8(*(uint8x8_t *)v618.val[1].i8, *(uint8x8_t *)&v211);
                v610.val[0] = (float32x4_t)vmlaq_s32(v198, (int32x4_t)vmovl_u16(*(uint16x4_t *)v206.i8), v189);
                v610.val[1] = (float32x4_t)vmlaq_s32(vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[1], (int8x16_t)xmmword_1003BCA90)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v614.val[0].i8), v188), (int32x4_t)vmovl_u16(*(uint16x4_t *)v614.val[1].i8), v189);
                v213 = v190;
                vst2q_f32(v213, v610);
                v213 += 8;
                v606.val[1] = (float32x4_t)vmlaq_s32(vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[1], (int8x16_t)xmmword_1003BCAA0)), (int32x4_t)vmovl_high_u16((uint16x8_t)v614.val[0]), v188), (int32x4_t)vmovl_high_u16((uint16x8_t)v614.val[1]), v189);
                vst2q_f32(v213, v606);
                v596.val[1] = (float32x4_t)vmlaq_s32(vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[1], (int8x16_t)xmmword_1003BCAB0)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v209.i8), v188), (int32x4_t)vmovl_u16(*(uint16x4_t *)v212.i8), v189);
                v214 = v190 + 16;
                vst2q_f32(v214, v596);
                v589.val[1] = (float32x4_t)vmlaq_s32(vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[1], (int8x16_t)xmmword_1003BCAC0)), (int32x4_t)vmovl_high_u16(v209), v188), (int32x4_t)vmovl_high_u16(v212), v189);
                v215 = v190 + 24;
                vst2q_f32(v215, v589);
                v190 += 32;
                v18 = (int8x16_t *)v192;
                v191 += 16;
              }
              while (v191);
              v18 = (int8x16_t *)v186;
            }
          }
        }
        v269 = 0;
        v510 = (int *)&a3[2 * v17 + 2];
        v511 = &v18->u8[v157];
        v512 = &v18->u8[v153];
        v513 = &v18->u8[v154];
        v514 = &v18->u8[v155];
        v515 = &v18->u8[v156];
        do
        {
          v516 = (v515[v269] + v514[v269]) * v148
               + LODWORD(v147) * v18->u8[v269 + 1]
               + (v513[v269 + 1] + v511[v269]) * v149;
          *(v510 - 1) = (v18->u8[v10 + v269] + v514[v269 - 1]) * v148
                      + LODWORD(v147) * v18->u8[v269]
                      + (v513[v269] + v512[v269]) * v149;
          *v510 = v516;
          v269 += 2;
          v510 += 2;
        }
        while (v17 + v269 <= v158);
        goto LABEL_386;
      }
      goto LABEL_387;
    }
    if (v20 != 3)
    {
      if (v20 == 1 && *(_DWORD *)v12 == 1)
      {
        v62 = v19 - 2;
        if ((int)result <= v19 - 2)
        {
          v63 = v62 - (uint64_t)(int)result;
          if (v63 < 0x1E)
            goto LABEL_51;
          v64 = (unint64_t)&a3[2 * (int)result];
          v65 = (unint64_t)&a3[4 * (v63 >> 1) + 4 + 2 * (int)result];
          v66 = v11 + 2 * (int)result;
          v67 = (const char *)(a2 + v66);
          if (v64 < v66 + (v63 & 0xFFFFFFFFFFFFFFFELL) + a2 + 2 && (unint64_t)v67 < v65)
            goto LABEL_51;
          v69 = (v63 >> 1) + 1;
          v17 = v16 + 2 * (v69 & 0xFFFFFFFFFFFFFFF0);
          v70 = (float *)&a3[2 * v16];
          v15.i64[1] = 0xFFFFFF03FFFFFF02;
          v71 = v69 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v577 = vld2q_s8(v67);
            v67 += 32;
            v582.val[0] = (float32x4_t)vqtbl1q_s8(v577.val[0], (int8x16_t)xmmword_1003BCAC0);
            v587.val[0] = (float32x4_t)vqtbl1q_s8(v577.val[0], (int8x16_t)xmmword_1003BCAB0);
            v594.val[0] = (float32x4_t)vqtbl1q_s8(v577.val[0], (int8x16_t)xmmword_1003BCAA0);
            v602.val[0] = (float32x4_t)vqtbl1q_s8(v577.val[0], (int8x16_t)xmmword_1003BCA90);
            v587.val[1] = (float32x4_t)vqtbl1q_s8(v577.val[1], (int8x16_t)xmmword_1003BCAB0);
            v602.val[1] = (float32x4_t)vqtbl1q_s8(v577.val[1], (int8x16_t)xmmword_1003BCA90);
            v72 = v70;
            vst2q_f32(v72, v602);
            v72 += 8;
            v594.val[1] = (float32x4_t)vqtbl1q_s8(v577.val[1], (int8x16_t)xmmword_1003BCAA0);
            vst2q_f32(v72, v594);
            v73 = v70 + 16;
            vst2q_f32(v73, v587);
            v74 = v70 + 24;
            v70 += 32;
            v582.val[1] = (float32x4_t)vqtbl1q_s8(v577.val[1], (int8x16_t)xmmword_1003BCAC0);
            vst2q_f32(v74, v582);
            v71 -= 16;
          }
          while (v71);
          if (v69 != (v69 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_51:
            v75 = &a3[2 * v17 + 2];
            do
            {
              v76 = v18->u8[v17 + 1];
              *((_DWORD *)v75 - 1) = v18->u8[v17];
              *(_DWORD *)v75 = v76;
              v17 += 2;
              v75 += 4;
            }
            while (v17 <= v62);
          }
          result = v17;
          v17 = (int)v17;
        }
        v18 = (int8x16_t *)((char *)v18 + v17);
      }
      goto LABEL_387;
    }
    v216 = *(_DWORD *)v12;
    if (*(_DWORD *)v12 == -2)
    {
      v217 = *(_DWORD *)(v12 + 4);
      if (v217 == 1)
      {
        v399 = v19 - 2;
        if ((int)result <= v19 - 2)
        {
          v400 = v10 + 1;
          v401 = v399 - (uint64_t)(int)result;
          if (v401 >= 0x40)
          {
            v402 = v401 >> 1;
            v403 = &a3[2 * (int)result];
            v404 = (unint64_t)&a3[4 * (v401 >> 1) + 4 + 2 * (int)result];
            v405 = a2 + v400 + (int)result + v11;
            v406 = (int)result + v11 + (v401 & 0xFFFFFFFFFFFFFFFELL);
            v407 = v406 + v400 + a2 + 1;
            v408 = a2 + v406 + 2;
            v409 = a2 + (int)result + v11 - v10;
            v410 = a2 + v406 + 2 - v10;
            v411 = a2 + v10 + v16 + v11;
            v412 = v406 + v10 + a2 + 1;
            v413 = (unint64_t)v403 >= v408 || (unint64_t)v18 >= v404;
            v414 = !v413;
            v415 = (unint64_t)v403 >= v410 || v409 >= v404;
            v416 = !v415;
            v417 = (unint64_t)v403 >= v412 || v411 >= v404;
            v418 = !v417;
            v419 = v405 >= v404 || (unint64_t)v403 >= v407;
            if (v419 && !v414 && !v416 && !v418)
            {
              v420 = 16;
              if (((v402 + 1) & 0xF) != 0)
                v420 = (v402 + 1) & 0xF;
              v421 = 2 * (v402 + 1 - v420);
              v17 = v421 + v16;
              v422 = &v18->u8[v421];
              v423 = (float *)&a3[2 * v16];
              v424 = ~v402 + v420;
              v15.i64[1] = 0xFFFFFF03FFFFFF02;
              v425 = (const char *)v18;
              do
              {
                v426 = &v18->i8[-v10];
                v585 = vld2q_s8(v426);
                v581 = vld2q_s8(v425);
                v425 += 32;
                v427 = (int32x4_t)vqtbl1q_s8(v581.val[0], (int8x16_t)xmmword_1003BCA90);
                v428 = (int32x4_t)vqtbl1q_s8(v581.val[0], (int8x16_t)xmmword_1003BCAA0);
                v429 = (int32x4_t)vqtbl1q_s8(v581.val[0], (int8x16_t)xmmword_1003BCAB0);
                v430 = (int32x4_t)vqtbl1q_s8(v581.val[0], (int8x16_t)xmmword_1003BCAC0);
                v431 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8(v585.val[0], (int8x16_t)xmmword_1003BCA90), vaddq_s32(v427, v427));
                v432 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8(v585.val[0], (int8x16_t)xmmword_1003BCAA0), vaddq_s32(v428, v428));
                v433 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8(v585.val[0], (int8x16_t)xmmword_1003BCAB0), vaddq_s32(v429, v429));
                v434 = &v18->i8[v10];
                v435 = (unsigned __int128)vld2q_s8(v434);
                v436 = vmovl_u8(*(uint8x8_t *)&v435);
                v437 = vmovl_high_u8((uint8x16_t)v435);
                v609.val[0] = (float32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8(v585.val[0], (int8x16_t)xmmword_1003BCAC0), vaddq_s32(v430, v430)), v437);
                v438 = &v18->i8[v400];
                v439 = (unsigned __int128)vld2q_s8(v438);
                v440 = (int32x4_t)vqtbl1q_s8(v585.val[1], (int8x16_t)xmmword_1003BCAC0);
                v441 = (int32x4_t)vqtbl1q_s8(v581.val[1], (int8x16_t)xmmword_1003BCAB0);
                v442 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8(v585.val[1], (int8x16_t)xmmword_1003BCAB0), vaddq_s32(v441, v441));
                v443 = vmovl_high_u8((uint8x16_t)v439);
                v617.val[0] = (float32x4_t)vaddw_u16(v433, *(uint16x4_t *)v437.i8);
                v444 = vmovl_u8(*(uint8x8_t *)&v439);
                v445 = (int32x4_t)vqtbl1q_s8(v585.val[1], (int8x16_t)xmmword_1003BCAA0);
                v585.val[0] = vqtbl1q_s8(v585.val[1], (int8x16_t)xmmword_1003BCA90);
                v585.val[1] = vqtbl1q_s8(v581.val[1], (int8x16_t)xmmword_1003BCA90);
                v613.val[0] = (float32x4_t)vaddw_high_u16(v432, v436);
                v598.val[0] = (float32x4_t)vaddw_u16(v431, *(uint16x4_t *)v436.i8);
                v598.val[1] = (float32x4_t)vaddw_u16((uint32x4_t)vsubq_s32((int32x4_t)v585.val[0], vaddq_s32((int32x4_t)v585.val[1], (int32x4_t)v585.val[1])), *(uint16x4_t *)v444.i8);
                v585.val[0] = vqtbl1q_s8(v581.val[1], (int8x16_t)xmmword_1003BCAA0);
                v446 = v423;
                vst2q_f32(v446, v598);
                v446 += 8;
                v613.val[1] = (float32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v445, vaddq_s32((int32x4_t)v585.val[0], (int32x4_t)v585.val[0])), v444);
                vst2q_f32(v446, v613);
                v617.val[1] = (float32x4_t)vaddw_u16(v442, *(uint16x4_t *)v443.i8);
                v447 = v423 + 16;
                vst2q_f32(v447, v617);
                v581.val[0] = vqtbl1q_s8(v581.val[1], (int8x16_t)xmmword_1003BCAC0);
                v448 = v423 + 24;
                v423 += 32;
                v18 = (int8x16_t *)v425;
                v609.val[1] = (float32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v440, vaddq_s32((int32x4_t)v581.val[0], (int32x4_t)v581.val[0])), v443);
                vst2q_f32(v448, v609);
                v424 += 16;
              }
              while (v424);
              v18 = (int8x16_t *)v422;
            }
          }
          v269 = 0;
          v449 = (int *)&a3[2 * v17 + 2];
          v450 = &v18->u8[v400];
          do
          {
            v451 = v450[v269] - 2 * v18->u8[v269 + 1] + v18->u8[1 - v10 + v269];
            *(v449 - 1) = v18->u8[v10 + v269] - 2 * v18->u8[v269] + v18->u8[v269 - v10];
            *v449 = v451;
            v269 += 2;
            v449 += 2;
          }
          while (v17 + v269 <= v399);
          goto LABEL_386;
        }
        goto LABEL_387;
      }
    }
    else if (v216 == 2)
    {
      v217 = *(_DWORD *)(v12 + 4);
      if (v217 == 1)
      {
        v218 = v19 - 2;
        if ((int)result <= v19 - 2)
        {
          v219 = v10 + 1;
          v220 = v218 - (uint64_t)(int)result;
          if (v220 >= 0x40)
          {
            v221 = v220 >> 1;
            v222 = &a3[2 * (int)result];
            v223 = (unint64_t)&a3[4 * (v220 >> 1) + 4 + 2 * (int)result];
            v224 = a2 + v219 + (int)result + v11;
            v225 = (int)result + v11 + (v220 & 0xFFFFFFFFFFFFFFFELL);
            v226 = v225 + v219 + a2 + 1;
            v227 = a2 + v225 + 2;
            v228 = a2 + (int)result + v11 - v10;
            v229 = a2 + v225 + 2 - v10;
            v230 = a2 + v10 + v16 + v11;
            v231 = v225 + v10 + a2 + 1;
            v232 = (unint64_t)v222 >= v227 || (unint64_t)v18 >= v223;
            v233 = !v232;
            v234 = (unint64_t)v222 >= v229 || v228 >= v223;
            v235 = !v234;
            v236 = (unint64_t)v222 >= v231 || v230 >= v223;
            v237 = !v236;
            v238 = v224 >= v223 || (unint64_t)v222 >= v226;
            if (v238 && !v233 && !v235 && !v237)
            {
              v239 = 16;
              if (((v221 + 1) & 0xF) != 0)
                v239 = (v221 + 1) & 0xF;
              v240 = 2 * (v221 + 1 - v239);
              v17 = v240 + v16;
              v241 = &v18->u8[v240];
              v242 = (float *)&a3[2 * v16];
              v243 = ~v221 + v239;
              v15.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
              v244 = (const char *)v18;
              do
              {
                v245 = &v18->i8[-v10];
                v584 = vld2q_s8(v245);
                v246 = vmovl_high_u8((uint8x16_t)v584.val[0]);
                v579 = vld2q_s8(v244);
                v244 += 32;
                v247 = vmovl_u8(*(uint8x8_t *)v584.val[0].i8);
                v248 = (int32x4_t)vqtbl1q_s8(v579.val[0], (int8x16_t)xmmword_1003BCA90);
                v249 = (int32x4_t)vqtbl1q_s8(v579.val[0], (int8x16_t)xmmword_1003BCAA0);
                v250 = (int32x4_t)vqtbl1q_s8(v579.val[0], (int8x16_t)xmmword_1003BCAB0);
                v251 = (int32x4_t)vqtbl1q_s8(v579.val[0], (int8x16_t)xmmword_1003BCAC0);
                v252 = vaddw_u16((uint32x4_t)vaddq_s32(v248, v248), *(uint16x4_t *)v247.i8);
                v253 = vaddw_high_u16((uint32x4_t)vaddq_s32(v249, v249), v247);
                v254 = vaddw_u16((uint32x4_t)vaddq_s32(v250, v250), *(uint16x4_t *)v246.i8);
                v255 = &v18->i8[v10];
                v256 = (unsigned __int128)vld2q_s8(v255);
                v257 = vmovl_u8(*(uint8x8_t *)&v256);
                v258 = &v18->i8[v219];
                v259 = (unsigned __int128)vld2q_s8(v258);
                v260 = vmovl_high_u8((uint8x16_t)v256);
                v612.val[0] = (float32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)vaddq_s32(v251, v251), v246), v260);
                v261 = vmovl_high_u8((uint8x16_t)v584.val[1]);
                v262 = vmovl_high_u8((uint8x16_t)v259);
                v600.val[0] = (float32x4_t)vaddw_u16(v254, *(uint16x4_t *)v260.i8);
                v263 = (int32x4_t)vqtbl1q_s8(v579.val[1], (int8x16_t)xmmword_1003BCAB0);
                v584.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v584.val[1].i8);
                v615.val[0] = (float32x4_t)vaddw_high_u16(v253, v257);
                v584.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)&v259);
                v592.val[0] = (float32x4_t)vaddw_u16(v252, *(uint16x4_t *)v257.i8);
                v264 = (int32x4_t)vqtbl1q_s8(v579.val[1], (int8x16_t)xmmword_1003BCA90);
                v592.val[1] = (float32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)vaddq_s32(v264, v264), *(uint16x4_t *)v584.val[0].i8), *(uint16x4_t *)v584.val[1].i8);
                v265 = (int32x4_t)vqtbl1q_s8(v579.val[1], (int8x16_t)xmmword_1003BCAA0);
                v266 = v242;
                vst2q_f32(v266, v592);
                v266 += 8;
                v615.val[1] = (float32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)vaddq_s32(v265, v265), (uint16x8_t)v584.val[0]), (uint16x8_t)v584.val[1]);
                vst2q_f32(v266, v615);
                v600.val[1] = (float32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)vaddq_s32(v263, v263), *(uint16x4_t *)v261.i8), *(uint16x4_t *)v262.i8);
                v267 = v242 + 16;
                vst2q_f32(v267, v600);
                v579.val[0] = vqtbl1q_s8(v579.val[1], (int8x16_t)xmmword_1003BCAC0);
                v268 = v242 + 24;
                v242 += 32;
                v18 = (int8x16_t *)v244;
                v612.val[1] = (float32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)v579.val[0], (int32x4_t)v579.val[0]), v261), v262);
                vst2q_f32(v268, v612);
                v243 += 16;
              }
              while (v243);
              v18 = (int8x16_t *)v241;
            }
          }
          v269 = 0;
          v270 = (int *)&a3[2 * v17 + 2];
          v271 = &v18->u8[v219];
          do
          {
            v272 = v18->u8[1 - v10 + v269] + 2 * v18->u8[v269 + 1] + v271[v269];
            *(v270 - 1) = v18->u8[v269 - v10] + 2 * v18->u8[v269] + v18->u8[v10 + v269];
            *v270 = v272;
            v269 += 2;
            v270 += 2;
          }
          while (v17 + v269 <= v218);
LABEL_386:
          result = (v17 + v269);
          v18 = (int8x16_t *)((char *)v18 + v269);
          goto LABEL_387;
        }
        goto LABEL_387;
      }
    }
    else
    {
      v217 = *(_DWORD *)(v12 + 4);
    }
    v452 = v19 - 2;
    if ((int)result <= v19 - 2)
    {
      v453 = v10 + 1;
      v454 = v452 - (uint64_t)(int)result;
      if (v454 >= 0x20)
      {
        v455 = v454 >> 1;
        v456 = &a3[2 * (int)result];
        v457 = (unint64_t)&a3[4 * (v454 >> 1) + 4 + 2 * (int)result];
        v458 = a2 + v453 + (int)result + v11;
        v459 = (int)result + v11 + (v454 & 0xFFFFFFFFFFFFFFFELL);
        v460 = v459 + v453 + a2 + 1;
        v461 = a2 + (int)result + v11 - v10;
        v462 = a2 + v459 + 2 - v10;
        v463 = a2 + v459 + 2;
        v464 = a2 + v10 + (int)result + v11;
        v465 = v459 + v10 + a2 + 1;
        v466 = (unint64_t)v456 >= v462 || v461 >= v457;
        v467 = !v466;
        v468 = (unint64_t)v456 >= v463 || (unint64_t)v18 >= v457;
        v469 = !v468;
        v470 = (unint64_t)v456 >= v465 || v464 >= v457;
        v471 = !v470;
        v472 = v458 >= v457 || (unint64_t)v456 >= v460;
        if (v472 && !v467 && !v469 && !v471)
        {
          v473 = 16;
          if (((v455 + 1) & 0xF) != 0)
            v473 = (v455 + 1) & 0xF;
          v474 = 2 * (v455 + 1 - v473);
          v17 = v474 + v16;
          v475 = &v18->u8[v474];
          v476 = vdupq_n_s32(v216);
          v477 = vdupq_n_s32(v217);
          v478 = (float *)&a3[2 * v16];
          v479 = ~v455 + v473;
          v15.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
          v480 = (const char *)v18;
          do
          {
            v599 = vld2q_s8(v480);
            v480 += 32;
            v481 = &v18->i8[-v10];
            v608 = vld2q_s8(v481);
            v482 = &v18->i8[v10];
            v483 = (unsigned __int128)vld2q_s8(v482);
            v484 = vaddl_high_u8((uint8x16_t)v483, (uint8x16_t)v608.val[0]);
            v485 = vaddl_u8(*(uint8x8_t *)&v483, *(uint8x8_t *)v608.val[0].i8);
            v486 = &v18->i8[v453];
            v487 = (unsigned __int128)vld2q_s8(v486);
            v605.val[0] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[0], (int8x16_t)xmmword_1003BCAC0)), (int32x4_t)vmovl_high_u16(v484), v477);
            v488 = vaddl_high_u8((uint8x16_t)v487, (uint8x16_t)v608.val[1]);
            v611.val[0] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[0], (int8x16_t)xmmword_1003BCAB0)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v484.i8), v477);
            v586.val[0] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[0], (int8x16_t)xmmword_1003BCAA0)), (int32x4_t)vmovl_high_u16(v485), v477);
            v608.val[0] = (int8x16_t)vaddl_u8(*(uint8x8_t *)&v487, *(uint8x8_t *)v608.val[1].i8);
            v591.val[0] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[0], (int8x16_t)xmmword_1003BCA90)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v485.i8), v477);
            v591.val[1] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[1], (int8x16_t)xmmword_1003BCA90)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v608.val[0].i8), v477);
            v489 = v478;
            vst2q_f32(v489, v591);
            v489 += 8;
            v586.val[1] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[1], (int8x16_t)xmmword_1003BCAA0)), (int32x4_t)vmovl_high_u16((uint16x8_t)v608.val[0]), v477);
            vst2q_f32(v489, v586);
            v611.val[1] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[1], (int8x16_t)xmmword_1003BCAB0)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v488.i8), v477);
            v490 = v478 + 16;
            vst2q_f32(v490, v611);
            v605.val[1] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[1], (int8x16_t)xmmword_1003BCAC0)), (int32x4_t)vmovl_high_u16(v488), v477);
            v491 = v478 + 24;
            vst2q_f32(v491, v605);
            v478 += 32;
            v18 = (int8x16_t *)v480;
            v479 += 16;
          }
          while (v479);
          v18 = (int8x16_t *)v475;
        }
      }
      v269 = 0;
      v492 = (int *)&a3[2 * v17 + 2];
      v493 = &v18->u8[v453];
      do
      {
        v494 = v216 * v18->u8[v269 + 1] + (v493[v269] + v18->u8[1 - v10 + v269]) * v217;
        *(v492 - 1) = v216 * v18->u8[v269] + (v18->u8[v10 + v269] + v18->u8[v269 - v10]) * v217;
        *v492 = v494;
        v269 += 2;
        v492 += 2;
      }
      while (v17 + v269 <= v452);
      goto LABEL_386;
    }
LABEL_387:
    if ((int)result >= v19)
      return result;
    if (v571 < 2)
    {
      v517 = v19 - (uint64_t)(int)result;
      if (v517 < 8
        || ((v518 = (unint64_t)&a3[2 * (int)result], v519 = &a3[2 * v19],
                                                            v518 < (unint64_t)v18->u64 + v517)
          ? (v520 = v18 >= (int8x16_t *)v519)
          : (v520 = 1),
            v520 ? (v521 = 0) : (v521 = 1),
            v12 < (unint64_t)v519 ? (v522 = v518 >= v570 + 4 * v9 + 4) : (v522 = 1),
            !v522 || (v521 & 1) != 0))
      {
        v544 = (int)result;
        v545 = (unsigned __int8 *)v18;
        goto LABEL_415;
      }
      if (v517 >= 0x20)
      {
        v523 = v517 & 0xFFFFFFFFFFFFFFE0;
        v549 = (int32x4_t)vld1q_dup_f32((const float *)v12);
        v550 = v18 + 1;
        v551 = (uint64_t)&a3[2 * (int)result + 32];
        v15.i64[1] = 0xFFFFFF03FFFFFF02;
        v552 = v517 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v553 = v550[-1];
          v554 = (int32x4_t)vqtbl1q_s8(*v550, (int8x16_t)xmmword_1003BCAB0);
          v555 = vmulq_s32(v549, (int32x4_t)vqtbl1q_s8(*v550, (int8x16_t)xmmword_1003BCAC0));
          v556 = vmulq_s32(v549, (int32x4_t)vqtbl1q_s8(*v550, (int8x16_t)xmmword_1003BCA90));
          v557 = vmulq_s32(v549, (int32x4_t)vqtbl1q_s8(*v550, (int8x16_t)xmmword_1003BCAA0));
          *(int32x4_t *)(v551 - 64) = vmulq_s32(v549, (int32x4_t)vqtbl1q_s8(v553, (int8x16_t)xmmword_1003BCA90));
          *(int32x4_t *)(v551 - 48) = vmulq_s32(v549, (int32x4_t)vqtbl1q_s8(v553, (int8x16_t)xmmword_1003BCAA0));
          *(int32x4_t *)(v551 - 32) = vmulq_s32(v549, (int32x4_t)vqtbl1q_s8(v553, (int8x16_t)xmmword_1003BCAB0));
          *(int32x4_t *)(v551 - 16) = vmulq_s32(v549, (int32x4_t)vqtbl1q_s8(v553, (int8x16_t)xmmword_1003BCAC0));
          *(int32x4_t *)v551 = v556;
          *(int32x4_t *)(v551 + 16) = v557;
          *(int32x4_t *)(v551 + 32) = vmulq_s32(v549, v554);
          *(int32x4_t *)(v551 + 48) = v555;
          v550 += 2;
          v551 += 128;
          v552 -= 32;
        }
        while (v552);
        if (v517 == v523)
          return result;
        if ((v517 & 0x18) == 0)
        {
          v545 = &v18->u8[v523];
          v544 = v523 + (int)result;
          goto LABEL_415;
        }
      }
      else
      {
        v523 = 0;
      }
      v544 = (v517 & 0xFFFFFFFFFFFFFFF8) + (int)result;
      v545 = &v18->u8[v517 & 0xFFFFFFFFFFFFFFF8];
      v558 = (int32x4_t)vld1q_dup_f32((const float *)v12);
      v559 = &v18->u8[v523];
      v560 = v523 - (v517 & 0xFFFFFFFFFFFFFFF8);
      v561 = (int32x4_t *)&a3[2 * v523 + 2 * (int)result];
      do
      {
        v562 = *(_QWORD *)v559;
        v559 += 8;
        v15.i64[0] = v562;
        v563 = (int32x4_t)vqtbl1q_s8((int8x16_t)v15, (int8x16_t)xmmword_1003BCAA0);
        v15 = vmulq_s32(v558, (int32x4_t)vqtbl1q_s8((int8x16_t)v15, (int8x16_t)xmmword_1003BCA90));
        *v561 = v15;
        v561[1] = vmulq_s32(v558, v563);
        v561 += 2;
        v560 += 8;
      }
      while (v560);
      if (v517 == (v517 & 0xFFFFFFFFFFFFFFF8))
        return result;
LABEL_415:
      v546 = &a3[2 * v544];
      v547 = v19 - v544;
      do
      {
        v548 = *v545++;
        *(_DWORD *)v546 = *(_DWORD *)v12 * v548;
        v546 += 2;
        --v547;
      }
      while (v547);
      return result;
    }
    v524 = (v571 / 2 + 1);
    v525 = (int)result;
    v526 = v524 - 1;
    v527 = 2 * v10;
    v528 = (unsigned __int8 *)v18 + 2 * v10;
    result = v570 + 4 * v9;
    v529 = &v18->u8[v10];
    v530 = (unsigned __int8 *)v18 - v10;
    for (i = (unsigned __int8 *)v18 - 2 * v10; ; ++i)
    {
      v532 = *(_DWORD *)v12 * v18->u8[0];
      if (v526 >= 2)
      {
        v535 = 0;
        v536 = 0;
        v537 = 0;
        v538 = (_DWORD *)(result + 8);
        v539 = (v524 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v532 += (v530[v535] + v529[v536]) * *(v538 - 1);
          v537 += (i[v535] + v528[v536]) * *v538;
          v536 += v527;
          v538 += 2;
          v535 -= v527;
          v539 -= 2;
        }
        while (v539);
        v532 += v537;
        v533 = (v524 - 1) | 1;
        v534 = v533 * v10;
        if (v526 == ((v524 - 1) & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_405;
      }
      else
      {
        v533 = 1;
        v534 = v10;
      }
      v540 = (int *)(result + 4 * v533);
      v541 = v524 - v533;
      v542 = -v534;
      do
      {
        v543 = *v540++;
        v532 += (v18->u8[v542] + v18->u8[v534]) * v543;
        v534 += v10;
        v542 -= v10;
        --v541;
      }
      while (v541);
LABEL_405:
      *(_DWORD *)&a3[2 * v525++] = v532;
      v18 = (int8x16_t *)((char *)v18 + 1);
      ++v528;
      ++v529;
      ++v530;
      if (v525 == v19)
        return result;
    }
  }
  if (v20 == 5)
  {
    v77 = v19 - 2;
    if ((int)result <= v19 - 2)
    {
      v78 = *(_DWORD *)(v12 + 4);
      v79 = *(_DWORD *)(v12 + 8);
      v80 = 2 * (int)v10;
      v81 = -2 * v10;
      v82 = v10 + 1;
      v83 = 1 - v10;
      v84 = 1 - v80;
      v85 = v77 - (uint64_t)(int)result;
      if (v85 >= 0x40)
      {
        v86 = (unint64_t)&a3[2 * (int)result];
        v567 = v85 >> 1;
        v87 = (unint64_t)&a3[4 * (v85 >> 1) + 4 + 2 * (int)result];
        v88 = (int)result + v11 + (v85 & 0xFFFFFFFFFFFFFFFELL);
        v89 = a2 + v88 + 2 - v80;
        v90 = a2 + v88 + 2 - v10;
        v91 = a2 + v82 + (int)result + v11;
        v92 = v88 + v82 + a2 + 1;
        v93 = v88 + v81 + a2 + 1;
        v94 = v88 + v10 + a2 + 1;
        v96 = v86 < v88 + v80 + a2 + 2 && a2 + v80 + (int)result + v11 < v87;
        v98 = v86 < v90 && a2 + (int)result + v11 - v10 < v87;
        v100 = v86 < v92 && v91 < v87;
        v102 = v86 < v93 && a2 - 2 * v10 + (int)result + v11 < v87;
        v104 = v86 < v94 && a2 + v10 + (int)result + v11 < v87;
        v82 = v10 + 1;
        v81 = -2 * v10;
        v105 = (int)result + v11 - v80 + a2 + 1 >= v87 || v86 >= v89;
        if (!v105 || v96)
        {
          v83 = 1 - v10;
          v84 = 1 - v80;
        }
        else
        {
          v83 = 1 - v10;
          v84 = 1 - v80;
          if (!v98 && !v100 && !v102 && !v104)
          {
            v106 = (v567 + 1) & 0xF;
            if (!v106)
              v106 = 16;
            v107 = 2 * (v567 + 1 - v106);
            v17 = v107 + (int)result;
            v18 = (int8x16_t *)((char *)v18 + v107);
            v108 = vdupq_n_s32(v78);
            v109 = vdupq_n_s32(v79);
            v110 = (int)result - v80 + a2 + 1;
            v111 = a2 + (int)result + v10 + 1;
            v112 = a2 + (int)result - 2 * v10;
            v113 = a2 + (int)result + v80;
            v114 = a2 + (int)result - v10;
            v115 = a2 + (int)result + v10;
            v116 = ~v567 + v106;
            v117 = (float *)&a3[2 * (int)result];
            do
            {
              v118 = (const char *)(v115 + v11);
              v119 = (unsigned __int128)vld2q_s8(v118);
              v120 = (const char *)(v114 + v11);
              v595 = vld2q_s8(v120);
              v121 = (int16x8_t)vsubl_high_u8((uint8x16_t)v119, (uint8x16_t)v595.val[0]);
              v122 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v119, *(uint8x8_t *)v595.val[0].i8);
              v123 = vmulq_s32(vmovl_s16(*(int16x4_t *)v122.i8), v108);
              v124 = vmulq_s32(vmovl_high_s16(v122), v108);
              v125 = (const char *)(v113 + v11);
              v603 = vld2q_s8(v125);
              v126 = (const char *)(v112 + v11);
              v127 = (unsigned __int128)vld2q_s8(v126);
              v128 = (int16x8_t)vsubl_high_u8((uint8x16_t)v603.val[0], (uint8x16_t)v127);
              v129 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v603.val[0].i8, *(uint8x8_t *)&v127);
              v130 = vmlaq_s32(vmulq_s32(vmovl_high_s16(v121), v108), vmovl_high_s16(v128), v109);
              v131 = (const char *)(v111 + v11);
              v132 = (unsigned __int128)vld2q_s8(v131);
              v133 = (int16x8_t)vsubl_high_u8((uint8x16_t)v132, (uint8x16_t)v595.val[1]);
              v134 = (const char *)(v110 + v11);
              v135 = (unsigned __int128)vld2q_s8(v134);
              v136 = (int16x8_t)vsubl_high_u8((uint8x16_t)v603.val[1], (uint8x16_t)v135);
              v15 = vmlaq_s32(vmulq_s32(vmovl_high_s16(v133), v108), vmovl_high_s16(v136), v109);
              v578.val[0] = (float32x4_t)vmlaq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v121.i8), v108), vmovl_s16(*(int16x4_t *)v128.i8), v109);
              v578.val[1] = (float32x4_t)vmlaq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v133.i8), v108), vmovl_s16(*(int16x4_t *)v136.i8), v109);
              v583.val[0] = (float32x4_t)vmlaq_s32(v124, vmovl_high_s16(v129), v109);
              v595.val[0] = (int8x16_t)vsubl_u8(*(uint8x8_t *)&v132, *(uint8x8_t *)v595.val[1].i8);
              v595.val[1] = (int8x16_t)vsubl_u8(*(uint8x8_t *)v603.val[1].i8, *(uint8x8_t *)&v135);
              v588.val[0] = (float32x4_t)vmlaq_s32(v123, vmovl_s16(*(int16x4_t *)v129.i8), v109);
              v588.val[1] = (float32x4_t)vmlaq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v595.val[0].i8), v108), vmovl_s16(*(int16x4_t *)v595.val[1].i8), v109);
              v137 = v117;
              vst2q_f32(v137, v588);
              v137 += 8;
              v583.val[1] = (float32x4_t)vmlaq_s32(vmulq_s32(vmovl_high_s16((int16x8_t)v595.val[0]), v108), vmovl_high_s16((int16x8_t)v595.val[1]), v109);
              vst2q_f32(v137, v583);
              v138 = v117 + 16;
              vst2q_f32(v138, v578);
              v139 = v117 + 24;
              vst2q_f32(v139, *(float32x4x2_t *)(&v15 - 1));
              v117 += 32;
              v110 += 32;
              v111 += 32;
              v112 += 32;
              v113 += 32;
              v114 += 32;
              v115 += 32;
              v116 += 16;
            }
            while (v116);
          }
        }
      }
      v140 = 0;
      v141 = (int *)&a3[2 * v17 + 2];
      v142 = &v18->u8[v84];
      v143 = &v18->u8[(2 * v10) | 1];
      v144 = &v18->u8[v82];
      v145 = &v18->u8[v83];
      do
      {
        v146 = (v143[v140] - v142[v140]) * v79 + (v144[v140] - v145[v140]) * v78;
        *(v141 - 1) = (v143[v140 - 1] - v18->u8[v81 + v140]) * v79 + (v18->u8[v10 + v140] - v145[v140 - 1]) * v78;
        *v141 = v146;
        v140 += 2;
        v141 += 2;
      }
      while (v17 + v140 <= v77);
      result = (v17 + v140);
      v18 = (int8x16_t *)((char *)v18 + v140);
      v9 = (uint64_t)(v571 + (v571 < 0)) >> 1;
    }
  }
  else
  {
    if (v20 != 3)
      goto LABEL_233;
    v21 = *(_DWORD *)(v12 + 4);
    v22 = v19 - 2;
    if (*(_DWORD *)v12)
      v23 = 0;
    else
      v23 = v21 == 1;
    if (v23)
    {
      if ((int)result > v22)
        goto LABEL_233;
      v273 = v10 + 1;
      v274 = v22;
      v275 = v22 - (uint64_t)(int)result;
      if (v275 >= 0x40)
      {
        v276 = v275 >> 1;
        v277 = &a3[2 * v16];
        v278 = (unint64_t)&a3[4 * (v275 >> 1) + 4 + 2 * v16];
        v279 = v16 + v11 + (v275 & 0xFFFFFFFFFFFFFFFELL);
        v280 = v279 - v10 + a2 + 2;
        v281 = v279 + v273 + a2 + 1;
        v282 = v279 + v10 + a2 + 1;
        v283 = (unint64_t)v277 >= v281 || a2 + v273 + v16 + v11 >= v278;
        v284 = !v283;
        v285 = (unint64_t)v277 >= v282 || a2 + v10 + v16 + v11 >= v278;
        v286 = !v285;
        v287 = a2 + v16 + v11 - v10 >= v278 || (unint64_t)v277 >= v280;
        if (v287 && !v284 && !v286)
        {
          if (((v276 + 1) & 0xF) != 0)
            v288 = (v276 + 1) & 0xF;
          else
            v288 = 16;
          v289 = 2 * (v276 + 1 - v288);
          v17 = v289 + v16;
          v18 = (int8x16_t *)((char *)v18 + v289);
          v290 = (float *)&a3[2 * v16];
          v291 = v16 + v11;
          v292 = (const char *)(a2 + v273 + v16 + v11);
          v293 = (const char *)(a2 + v291 - v10);
          v294 = (const char *)(a2 + v10 + v291);
          v295 = ~v276 + v288;
          do
          {
            v296 = (unsigned __int128)vld2q_s8(v294);
            v294 += 32;
            v575 = (float32x4x2_t)vld2q_s8(v293);
            v293 += 32;
            v297 = (int16x8_t)vsubl_high_u8((uint8x16_t)v296, (uint8x16_t)v575.val[0]);
            v298 = (unsigned __int128)vld2q_s8(v292);
            v292 += 32;
            v299 = (int16x8_t)vsubl_high_u8((uint8x16_t)v298, (uint8x16_t)v575.val[1]);
            v590.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v297.i8);
            v300 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v296, *(uint8x8_t *)v575.val[0].f32);
            v301 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v298, *(uint8x8_t *)v575.val[1].f32);
            v575.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v300.i8);
            v575.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v301.i8);
            v302 = v290;
            vst2q_f32(v302, v575);
            v302 += 8;
            v575.val[0] = (float32x4_t)vmovl_high_s16(v300);
            v15 = vmovl_high_s16(v301);
            vst2q_f32(v302, *(float32x4x2_t *)(&v15 - 1));
            v590.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v299.i8);
            v303 = v290 + 16;
            vst2q_f32(v303, v590);
            v304 = v290 + 24;
            v290 += 32;
            v573.val[0] = (float32x4_t)vmovl_high_s16(v297);
            v573.val[1] = (float32x4_t)vmovl_high_s16(v299);
            vst2q_f32(v304, v573);
            v295 += 16;
          }
          while (v295);
        }
      }
      v58 = 0;
      v305 = (int *)&a3[2 * v17 + 2];
      v306 = &v18->u8[v273];
      do
      {
        v307 = v306[v58] - v18->u8[1 - v10 + v58];
        *(v305 - 1) = v18->u8[v10 + v58] - v18->u8[v58 - v10];
        *v305 = v307;
        v58 += 2;
        v305 += 2;
      }
      while (v17 + v58 <= v274);
    }
    else
    {
      if ((int)result > v22)
        goto LABEL_233;
      v24 = v10 + 1;
      v25 = v22;
      v26 = v22 - (uint64_t)(int)result;
      if (v26 >= 0x40)
      {
        v27 = v26 >> 1;
        v28 = &a3[2 * (int)result];
        v29 = (unint64_t)&a3[4 * (v26 >> 1) + 4 + 2 * v16];
        v30 = v16 + v11 + (v26 & 0xFFFFFFFFFFFFFFFELL);
        v31 = v30 - v10 + a2 + 2;
        v32 = v30 + v24 + a2 + 1;
        v33 = v30 + v10 + a2 + 1;
        v34 = (unint64_t)v28 >= v32 || a2 + v24 + v16 + v11 >= v29;
        v35 = !v34;
        v36 = (unint64_t)v28 >= v33 || a2 + v10 + v16 + v11 >= v29;
        v37 = !v36;
        v38 = a2 + v16 + v11 - v10 >= v29 || (unint64_t)v28 >= v31;
        if (v38 && !v35 && !v37)
        {
          if (((v27 + 1) & 0xF) != 0)
            v39 = (v27 + 1) & 0xF;
          else
            v39 = 16;
          v40 = 2 * (v27 + 1 - v39);
          v17 = v40 + v16;
          v18 = (int8x16_t *)((char *)v18 + v40);
          v41 = vdupq_n_s32(v21);
          v42 = (float *)&a3[2 * v16];
          v43 = v16 + v11;
          v44 = (const char *)(a2 + v24 + v16 + v11);
          v45 = (const char *)(a2 + v43 - v10);
          v46 = (const char *)(a2 + v10 + v43);
          v47 = ~v27 + v39;
          do
          {
            v48 = (unsigned __int128)vld2q_s8(v46);
            v46 += 32;
            v576 = vld2q_s8(v45);
            v45 += 32;
            v49 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v48, *(uint8x8_t *)v576.val[0].i8);
            v50 = (int16x8_t)vsubl_high_u8((uint8x16_t)v48, (uint8x16_t)v576.val[0]);
            v51 = vmovl_s16(*(int16x4_t *)v50.i8);
            v52 = (unsigned __int128)vld2q_s8(v44);
            v44 += 32;
            v593.val[0] = (float32x4_t)vmulq_s32(vmovl_high_s16(v50), v41);
            v53 = (int16x8_t)vsubl_high_u8((uint8x16_t)v52, (uint8x16_t)v576.val[1]);
            v593.val[1] = (float32x4_t)vmulq_s32(vmovl_high_s16(v53), v41);
            v601.val[0] = (float32x4_t)vmulq_s32(v51, v41);
            v601.val[1] = (float32x4_t)vmulq_s32(vmovl_s16(*(int16x4_t *)v53.i8), v41);
            v574.val[0] = (float32x4_t)vmulq_s32(vmovl_high_s16(v49), v41);
            v576.val[0] = (int8x16_t)vsubl_u8(*(uint8x8_t *)&v52, *(uint8x8_t *)v576.val[1].i8);
            v576.val[1] = (int8x16_t)vmulq_s32(vmovl_s16(*(int16x4_t *)v49.i8), v41);
            v54 = vmulq_s32(vmovl_s16(*(int16x4_t *)v576.val[0].i8), v41);
            v55 = v42;
            vst2q_f32(v55, *(float32x4x2_t *)((char *)&v576 + 16));
            v55 += 8;
            v15 = vmovl_high_s16((int16x8_t)v576.val[0]);
            v574.val[1] = (float32x4_t)vmulq_s32(v15, v41);
            vst2q_f32(v55, v574);
            v56 = v42 + 16;
            vst2q_f32(v56, v601);
            v57 = v42 + 24;
            v42 += 32;
            vst2q_f32(v57, v593);
            v47 += 16;
          }
          while (v47);
        }
      }
      v58 = 0;
      v59 = (int *)&a3[2 * v17 + 2];
      v60 = &v18->u8[v24];
      do
      {
        v61 = (v60[v58] - v18->u8[1 - v10 + v58]) * v21;
        *(v59 - 1) = (v18->u8[v10 + v58] - v18->u8[v58 - v10]) * v21;
        *v59 = v61;
        v58 += 2;
        v59 += 2;
      }
      while (v17 + v58 <= v25);
    }
    result = (v17 + v58);
    v18 = (int8x16_t *)((char *)v18 + v58);
  }
LABEL_233:
  if ((int)result >= v19)
    return result;
  if (v571 >= 2)
  {
    v315 = (v9 + 1);
    v316 = (int)result;
    v317 = v315 - 1;
    v318 = 2 * v10;
    v319 = (unsigned __int8 *)v18 + 2 * v10;
    result = v570 + 4 * v9;
    v320 = &v18->u8[v10];
    v321 = (unsigned __int8 *)v18 - v10;
    for (j = (unsigned __int8 *)v18 - 2 * v10; ; ++j)
    {
      v323 = *(_DWORD *)v12 * v18->u8[0];
      if (v317 >= 2)
      {
        v326 = 0;
        v327 = 0;
        v328 = 0;
        v329 = (_DWORD *)(result + 8);
        v330 = (v315 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v323 += (v320[v327] - v321[v326]) * *(v329 - 1);
          v328 += (v319[v327] - j[v326]) * *v329;
          v327 += v318;
          v329 += 2;
          v326 -= v318;
          v330 -= 2;
        }
        while (v330);
        v323 += v328;
        v324 = (v315 - 1) | 1;
        v325 = v324 * v10;
        if (v317 == ((v315 - 1) & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_251;
      }
      else
      {
        v324 = 1;
        v325 = v10;
      }
      v331 = (int *)(result + 4 * v324);
      v332 = v315 - v324;
      v333 = -v325;
      do
      {
        v334 = *v331++;
        v323 += (v18->u8[v325] - v18->u8[v333]) * v334;
        v325 += v10;
        v333 -= v10;
        --v332;
      }
      while (v332);
LABEL_251:
      *(_DWORD *)&a3[2 * v316++] = v323;
      v18 = (int8x16_t *)((char *)v18 + 1);
      ++v319;
      ++v320;
      ++v321;
      if (v316 == v19)
        return result;
    }
  }
  v308 = v19 - (uint64_t)(int)result;
  if (v308 < 8
    || ((v309 = (unint64_t)&a3[2 * (int)result], v310 = &a3[2 * v19], v309 < (unint64_t)v18->u64 + v308)
      ? (v311 = v18 >= (int8x16_t *)v310)
      : (v311 = 1),
        v311 ? (v312 = 0) : (v312 = 1),
        v12 < (unint64_t)v310 ? (v313 = v309 >= v570 + 4 * v9 + 4) : (v313 = 1),
        !v313 || (v312 & 1) != 0))
  {
    v335 = (int)result;
    v336 = (unsigned __int8 *)v18;
    goto LABEL_261;
  }
  if (v308 < 0x20)
  {
    v314 = 0;
    goto LABEL_378;
  }
  v314 = v308 & 0xFFFFFFFFFFFFFFE0;
  v495 = (int32x4_t)vld1q_dup_f32((const float *)v12);
  v496 = v18 + 1;
  v497 = (uint64_t)&a3[2 * (int)result + 32];
  v15.i64[1] = 0xFFFFFF03FFFFFF02;
  v498 = v308 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v499 = v496[-1];
    v500 = (int32x4_t)vqtbl1q_s8(*v496, (int8x16_t)xmmword_1003BCAB0);
    v501 = vmulq_s32(v495, (int32x4_t)vqtbl1q_s8(*v496, (int8x16_t)xmmword_1003BCAC0));
    v502 = vmulq_s32(v495, (int32x4_t)vqtbl1q_s8(*v496, (int8x16_t)xmmword_1003BCA90));
    v503 = vmulq_s32(v495, (int32x4_t)vqtbl1q_s8(*v496, (int8x16_t)xmmword_1003BCAA0));
    *(int32x4_t *)(v497 - 64) = vmulq_s32(v495, (int32x4_t)vqtbl1q_s8(v499, (int8x16_t)xmmword_1003BCA90));
    *(int32x4_t *)(v497 - 48) = vmulq_s32(v495, (int32x4_t)vqtbl1q_s8(v499, (int8x16_t)xmmword_1003BCAA0));
    *(int32x4_t *)(v497 - 32) = vmulq_s32(v495, (int32x4_t)vqtbl1q_s8(v499, (int8x16_t)xmmword_1003BCAB0));
    *(int32x4_t *)(v497 - 16) = vmulq_s32(v495, (int32x4_t)vqtbl1q_s8(v499, (int8x16_t)xmmword_1003BCAC0));
    *(int32x4_t *)v497 = v502;
    *(int32x4_t *)(v497 + 16) = v503;
    *(int32x4_t *)(v497 + 32) = vmulq_s32(v495, v500);
    *(int32x4_t *)(v497 + 48) = v501;
    v496 += 2;
    v497 += 128;
    v498 -= 32;
  }
  while (v498);
  if (v308 != v314)
  {
    if ((v308 & 0x18) == 0)
    {
      v336 = &v18->u8[v314];
      v335 = v314 + (int)result;
      goto LABEL_261;
    }
LABEL_378:
    v335 = (v308 & 0xFFFFFFFFFFFFFFF8) + (int)result;
    v336 = &v18->u8[v308 & 0xFFFFFFFFFFFFFFF8];
    v504 = (int32x4_t)vld1q_dup_f32((const float *)v12);
    v505 = &v18->u8[v314];
    v506 = v314 - (v308 & 0xFFFFFFFFFFFFFFF8);
    v507 = (int32x4_t *)&a3[2 * v314 + 2 * (int)result];
    do
    {
      v508 = *(_QWORD *)v505;
      v505 += 8;
      v15.i64[0] = v508;
      v509 = (int32x4_t)vqtbl1q_s8((int8x16_t)v15, (int8x16_t)xmmword_1003BCAA0);
      v15 = vmulq_s32(v504, (int32x4_t)vqtbl1q_s8((int8x16_t)v15, (int8x16_t)xmmword_1003BCA90));
      *v507 = v15;
      v507[1] = vmulq_s32(v504, v509);
      v507 += 2;
      v506 += 8;
    }
    while (v506);
    if (v308 == (v308 & 0xFFFFFFFFFFFFFFF8))
      return result;
LABEL_261:
    v337 = &a3[2 * v335];
    v338 = v19 - v335;
    do
    {
      v339 = *v336++;
      *(_DWORD *)v337 = *(_DWORD *)v12 * v339;
      v337 += 2;
      --v338;
    }
    while (v338);
  }
  return result;
}

void sub_1002F5DB0(uint64_t a1)
{
  sub_1002F3F18(a1);
  operator delete();
}

unint64_t sub_1002F5DD4(uint64_t a1, uint64_t a2, __int16 *a3, int a4, int a5)
{
  uint64_t v9;
  const float *v10;
  unint64_t result;
  int32x4_t v12;
  int8x16_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  const float *v21;
  int32x4_t v22;
  unint64_t v23;
  int32x4_t *v24;
  int32x4_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unint64_t v32;
  unsigned __int8 *v33;
  __int16 *v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  BOOL v42;
  unint64_t v44;
  uint64_t v45;
  float *v46;
  const char *v47;
  uint64_t v48;
  int32x4_t v49;
  float *v50;
  float *v51;
  float *v52;
  unint64_t v53;
  __int16 *v54;
  unint64_t v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  unint64_t v59;
  int32x4_t v60;
  int8x16_t *v61;
  uint64_t v62;
  unint64_t v63;
  int8x16_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  uint64_t v69;
  int32x4_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  __int16 *v74;
  uint64_t v75;
  int32x4_t v76;
  int8x16x4_t v77;
  float32x4x4_t v78;
  float32x4x4_t v79;
  float32x4x4_t v80;

  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(const float **)(a1 + 32);
  result = sub_1002F6210(a1 + 112, a2, a3, a4, a5);
  v14 = a5 * (uint64_t)a4;
  v15 = v14 - 4;
  LODWORD(v16) = result;
  if ((int)result <= (int)v14 - 4)
  {
    v17 = (int)result;
    if ((int)v9 <= 1)
    {
      v23 = v15 - (uint64_t)(int)result;
      if (v23 < 0x3C)
        goto LABEL_8;
      v37 = v23 >> 2;
      v38 = (unint64_t)&a3[2 * (int)result];
      v39 = (unint64_t)&a3[8 * (v23 >> 2) + 8 + 2 * (int)result];
      v40 = a2 + (int)result;
      result = v40;
      v41 = v38 >= (v23 & 0xFFFFFFFFFFFFFFFCLL) + v17 + a2 + 4 || v40 >= v39;
      v42 = !v41;
      if ((unint64_t)v10 < v39 && v38 < (unint64_t)(v10 + 1))
        goto LABEL_8;
      if (v42)
        goto LABEL_8;
      v44 = v37 + 1;
      v45 = (v37 + 1) & 0x7FFFFFFFFFFFFFF0;
      v16 = v17 + 4 * v45;
      v46 = (float *)&a3[2 * v17];
      v47 = (const char *)(a2 + v17);
      v12.i32[1] = -255;
      v13.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
      v48 = v45;
      do
      {
        v49 = (int32x4_t)vld1q_dup_f32(v10);
        v77 = vld4q_s8(v47);
        v47 += 64;
        v78.val[0] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[0], (int8x16_t)xmmword_1003BCA90));
        v78.val[1] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[1], (int8x16_t)xmmword_1003BCA90));
        v78.val[2] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[2], (int8x16_t)xmmword_1003BCA90));
        v78.val[3] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[3], (int8x16_t)xmmword_1003BCA90));
        v50 = v46;
        vst4q_f32(v50, v78);
        v50 += 16;
        v78.val[0] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[0], (int8x16_t)xmmword_1003BCAC0));
        v79.val[0] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[0], (int8x16_t)xmmword_1003BCAB0));
        v80.val[0] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[0], (int8x16_t)xmmword_1003BCAA0));
        v80.val[1] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[1], (int8x16_t)xmmword_1003BCAA0));
        v80.val[2] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[2], (int8x16_t)xmmword_1003BCAA0));
        v80.val[3] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[3], (int8x16_t)xmmword_1003BCAA0));
        vst4q_f32(v50, v80);
        v79.val[1] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[1], (int8x16_t)xmmword_1003BCAB0));
        v79.val[2] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[2], (int8x16_t)xmmword_1003BCAB0));
        v79.val[3] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[3], (int8x16_t)xmmword_1003BCAB0));
        v51 = v46 + 32;
        vst4q_f32(v51, v79);
        v78.val[1] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[1], (int8x16_t)xmmword_1003BCAC0));
        v78.val[2] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[2], (int8x16_t)xmmword_1003BCAC0));
        v78.val[3] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[3], (int8x16_t)xmmword_1003BCAC0));
        v52 = v46 + 48;
        vst4q_f32(v52, v78);
        v46 += 64;
        v48 -= 16;
      }
      while (v48);
      v17 = v16;
      if (v44 != v45)
      {
LABEL_8:
        v24 = (int32x4_t *)&a3[2 * v17];
        v16 = v17;
        do
        {
          v12.i32[0] = *(_DWORD *)(a2 + v16);
          v25 = (int32x4_t)vld1q_dup_f32(v10);
          v12 = vmulq_s32(v25, (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v12.i8)));
          *v24++ = v12;
          v16 += 4;
        }
        while (v16 <= v15);
      }
    }
    else
    {
      do
      {
        v12.i32[0] = *(_DWORD *)(a2 + v17);
        v18 = (int32x4_t)vld1q_dup_f32(v10);
        v12 = vmulq_s32(v18, (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v12.i8)));
        v19 = a2 + a5;
        v20 = v9 - 1;
        v21 = v10 + 1;
        do
        {
          v18.i32[0] = *(_DWORD *)(v19 + v17);
          v18 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v18.i8));
          v22 = (int32x4_t)vld1q_dup_f32(v21++);
          v12 = vmlaq_s32(v12, v22, v18);
          v19 += a5;
          --v20;
        }
        while (v20);
        *(int32x4_t *)&a3[2 * v17] = v12;
        v17 += 4;
      }
      while (v17 <= v15);
      LODWORD(v16) = v17;
    }
  }
  if ((int)v16 < (int)v14)
  {
    v26 = (int)v16;
    if ((int)v9 > 1)
    {
      do
      {
        v27 = *(_DWORD *)v10 * *(unsigned __int8 *)(a2 + v26);
        v28 = a2 + a5;
        v29 = v9 - 1;
        v30 = (unsigned int *)(v10 + 1);
        do
        {
          v31 = *v30++;
          result = v31;
          v27 += v31 * *(unsigned __int8 *)(v28 + v26);
          v28 += a5;
          --v29;
        }
        while (v29);
        *(_DWORD *)&a3[2 * v26++] = v27;
      }
      while (v26 != v14);
      return result;
    }
    v32 = v14 - (int)v16;
    if (v32 >= 8)
    {
      v53 = (unint64_t)&a3[2 * (int)v16];
      v54 = &a3[2 * v14];
      v55 = a2 + (int)v16;
      v56 = v53 >= a2 + v14 || v55 >= (unint64_t)v54;
      v57 = !v56;
      v58 = v10 >= (const float *)v54 || v53 >= (unint64_t)(v10 + 1);
      if (v58 && !v57)
      {
        if (v32 >= 0x20)
        {
          v59 = v32 & 0xFFFFFFFFFFFFFFE0;
          v60 = (int32x4_t)vld1q_dup_f32(v10);
          v61 = (int8x16_t *)(v26 + a2 + 16);
          v62 = (uint64_t)&a3[2 * v26 + 32];
          v13.i64[1] = 0xFFFFFF03FFFFFF02;
          v63 = v32 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v64 = v61[-1];
            v65 = (int32x4_t)vqtbl1q_s8(*v61, (int8x16_t)xmmword_1003BCAB0);
            v66 = vmulq_s32(v60, (int32x4_t)vqtbl1q_s8(*v61, (int8x16_t)xmmword_1003BCAC0));
            v67 = vmulq_s32(v60, (int32x4_t)vqtbl1q_s8(*v61, (int8x16_t)xmmword_1003BCA90));
            v68 = vmulq_s32(v60, (int32x4_t)vqtbl1q_s8(*v61, (int8x16_t)xmmword_1003BCAA0));
            *(int32x4_t *)(v62 - 64) = vmulq_s32(v60, (int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_1003BCA90));
            *(int32x4_t *)(v62 - 48) = vmulq_s32(v60, (int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_1003BCAA0));
            *(int32x4_t *)(v62 - 32) = vmulq_s32(v60, (int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_1003BCAB0));
            *(int32x4_t *)(v62 - 16) = vmulq_s32(v60, (int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_1003BCAC0));
            *(int32x4_t *)v62 = v67;
            *(int32x4_t *)(v62 + 16) = v68;
            *(int32x4_t *)(v62 + 32) = vmulq_s32(v60, v65);
            *(int32x4_t *)(v62 + 48) = v66;
            v61 += 2;
            v62 += 128;
            v63 -= 32;
          }
          while (v63);
          if (v32 == v59)
            return result;
          if ((v32 & 0x18) == 0)
          {
            v26 += v59;
            goto LABEL_17;
          }
        }
        else
        {
          v59 = 0;
        }
        v69 = (v32 & 0xFFFFFFFFFFFFFFF8) + v26;
        v70 = (int32x4_t)vld1q_dup_f32(v10);
        v71 = v59 - (v32 & 0xFFFFFFFFFFFFFFF8);
        v72 = v59 + v26;
        v73 = (uint64_t *)(a2 + v72);
        v74 = &a3[2 * v72];
        do
        {
          v75 = *v73++;
          v13.i64[0] = v75;
          v76 = (int32x4_t)vqtbl1q_s8(v13, (int8x16_t)xmmword_1003BCAA0);
          v13 = (int8x16_t)vmulq_s32(v70, (int32x4_t)vqtbl1q_s8(v13, (int8x16_t)xmmword_1003BCA90));
          *(int8x16_t *)v74 = v13;
          *((int32x4_t *)v74 + 1) = vmulq_s32(v70, v76);
          v74 += 16;
          v71 += 8;
        }
        while (v71);
        v26 = v69;
        if (v32 == (v32 & 0xFFFFFFFFFFFFFFF8))
          return result;
      }
    }
LABEL_17:
    v33 = (unsigned __int8 *)(a2 + v26);
    v34 = &a3[2 * v26];
    v35 = v14 - v26;
    do
    {
      v36 = *v33++;
      *(_DWORD *)v34 = *(_DWORD *)v10 * v36;
      v34 += 2;
      --v35;
    }
    while (v35);
  }
  return result;
}

unint64_t sub_1002F6210(uint64_t a1, uint64_t a2, __int16 *a3, int a4, int a5)
{
  unint64_t result;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  int32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  int16x8_t v21;
  uint8x8_t *v22;
  uint64_t v23;
  __int128 v24;
  int16x8_t v25;
  unint64_t v26;
  int32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int16x4_t v33;
  int32x4_t *v34;
  int16x8_t v35;
  int16x8_t v36;
  int32x4_t v37;
  int16x4_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int16x8_t v43;
  int32x4_t *v44;
  const float *v45;
  int32x4_t v46;
  int16x4_t v47;
  int32x4_t *v48;
  uint64_t v49;
  uint64_t v50;
  int16x8_t v51;
  unint64_t v53;
  unint64_t v54;
  int16x4_t v55;
  int32x4_t *v56;
  uint64_t v57;
  int16x8_t v58;
  int16x8_t v59;

  result = sub_100294AFC(100);
  if (!(_DWORD)result)
    return result;
  v11 = *(_DWORD *)(a1 + 12) + *(_DWORD *)(a1 + 8);
  v12 = v11 - 1;
  if (v11 < 1)
    v12 = *(_DWORD *)(a1 + 12) + *(_DWORD *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 100))
    return 0;
  v13 = v12 >> 1;
  v14 = (uint64_t)v12 >> 1;
  v15 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v13);
  v16 = (int)v14 * (uint64_t)a5;
  v17 = a5 * a4;
  if ((*(_BYTE *)(a1 + 96) & 1) != 0)
  {
    v22 = (uint8x8_t *)(a2 + (int)v14 * (uint64_t)a5);
    if (v11 == 6)
    {
      if (*v15 == -2 && !v15[1])
      {
        if (v15[2] == 1 || v17 < 8)
          return 0;
      }
      else if (v17 < 8)
      {
        return 0;
      }
      result = 0;
      v37.i64[0] = *(_QWORD *)v15;
      v37.i64[1] = v15[2];
      v38 = vqmovn_s32(v37);
      do
      {
        v39 = (int16x8_t)vmovl_u8(*v22);
        v40 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v22 + a5), *(uint8x8_t *)((char *)v22 - a5));
        v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v40.i8, v38, 1), *(int16x4_t *)v39.i8, v38, 0);
        v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v40, v38, 1), v39, v38, 0);
        v43 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v22 + 2 * a5), *(uint8x8_t *)((char *)v22 - 2 * a5));
        v44 = (int32x4_t *)&a3[2 * result];
        *v44 = vmlal_lane_s16(v41, *(int16x4_t *)v43.i8, v38, 2);
        v44[1] = vmlal_high_lane_s16(v42, v43, v38, 2);
        result += 8;
        ++v22;
      }
      while (result <= (v17 - 8));
      return result;
    }
    if (v11 != 4)
      return 0;
    if (*v15 == -2)
    {
      if (v15[1] == 1 || v17 < 8)
        return 0;
    }
    else
    {
      if (*v15 == 2 && v15[1] == 1)
      {
        if (v17 < 8)
          return 0;
        result = 0;
        v23 = a2 + v16 - a5;
        v24 = 0uLL;
        do
        {
          v25 = vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v22 + a5 + result), *(uint8x8_t *)(v23 + result)), (int16x8_t)vshll_n_u8(*(uint8x8_t *)((char *)v22 + result), 1uLL));
          vst2q_s16(a3, *(int16x8x2_t *)(&v24 - 1));
          a3 += 16;
          result += 8;
        }
        while (result <= (v17 - 8));
        return result;
      }
      if (v17 < 8)
        return 0;
    }
    result = 0;
    v53 = *(_QWORD *)v15;
    v54 = (v17 - 8);
    v55 = vqmovn_s32((int32x4_t)v53);
    v56 = (int32x4_t *)(a3 + 8);
    v57 = a2 + v16 - a5;
    do
    {
      v58 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v22 + result));
      v59 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v22 + a5 + result), *(uint8x8_t *)(v57 + result));
      v56[-1] = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v55, 1), *(int16x4_t *)v58.i8, v55, 0);
      *v56 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v55, 1), v58, v55, 0);
      result += 8;
      v56 += 2;
    }
    while (result <= v54);
    return result;
  }
  if (v11 == 6)
  {
    v26 = (v17 - 8);
    if (v17 < 8)
      return 0;
    result = 0;
    v27.i32[0] = 0;
    v27.i32[1] = v15[1];
    v27.i64[1] = v15[2];
    v28 = 2 * a5;
    v29 = a2 + v28 + v16;
    v30 = v16 - a5;
    v31 = a2 + a5 + v16;
    v32 = v16 - v28;
    v33 = vqmovn_s32(v27);
    v34 = (int32x4_t *)(a3 + 8);
    do
    {
      v35 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v31 + result), *(uint8x8_t *)(a2 + v30 + result));
      v36 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v29 + result), *(uint8x8_t *)(a2 + v32 + result));
      v34[-1] = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v36.i8, v33, 2), *(int16x4_t *)v35.i8, v33, 1);
      *v34 = vmlal_high_lane_s16(vmull_high_lane_s16(v36, v33, 2), v35, v33, 1);
      result += 8;
      v34 += 2;
    }
    while (result <= v26);
  }
  else
  {
    if (v11 != 4)
      return 0;
    if (!*v15 && v15[1] == 1)
    {
      if (v17 >= 8)
      {
        result = 0;
        v18 = (int32x4_t *)(a3 + 8);
        v19 = a2 + v16 - a5;
        v20 = a2 + a5 + v16;
        do
        {
          v21 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v20 + result), *(uint8x8_t *)(v19 + result));
          v18[-1] = vmovl_s16(*(int16x4_t *)v21.i8);
          *v18 = vmovl_high_s16(v21);
          result += 8;
          v18 += 2;
        }
        while (result <= (v17 - 8));
        return result;
      }
      return 0;
    }
    if (v17 < 8)
      return 0;
    result = 0;
    v45 = (const float *)(v15 + 1);
    v46 = (int32x4_t)vld1q_dup_f32(v45);
    v47 = vqmovn_s32(v46);
    v48 = (int32x4_t *)(a3 + 8);
    v49 = a2 + v16 - a5;
    v50 = a2 + a5 + v16;
    do
    {
      v51 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v50 + result), *(uint8x8_t *)(v49 + result));
      v48[-1] = vmull_lane_s16(*(int16x4_t *)v51.i8, v47, 1);
      *v48 = vmull_high_lane_s16(v51, v47, 1);
      result += 8;
      v48 += 2;
    }
    while (result <= (v17 - 8));
  }
  return result;
}

void sub_1002F65DC()
{
  operator delete();
}

uint64_t sub_1002F65F0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002F662C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v9[2];

  v7 = sub_1002F6714(a1, a2, a3, a5);
  *(_QWORD *)v7 = off_1004520F8;
  *(_DWORD *)(v7 + 216) = a4;
  if ((a4 & 3) == 0 || *(int *)(a1 + 8) >= 6)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_10029430C(v9, 84), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5", 84);
    sub_100294B74(-215, v9, "SymmRowSmallFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3112);
  }
  return a1;
}

void sub_1002F66EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_1002F6AC4(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F6714(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _DWORD *v8;
  int *v9;
  _DWORD *v10;
  int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = off_100452150;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_DWORD *)(a1 + 112) = 1124007936;
  v10 = (_DWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 116) = 0u;
  v11 = (int *)(a1 + 116);
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 120;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_QWORD *)(a1 + 200) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2)
      goto LABEL_21;
    v12 = *(_QWORD *)(a2 + 56);
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 20);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v15 = *(_QWORD *)(a1 + 72);
      if (v15)
      {
        v16 = (unsigned int *)(v15 + 20);
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v8 = *(_DWORD *)a2;
      v22 = *(_DWORD *)(a2 + 4);
      if (v22 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v22;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v23 = *(_QWORD **)(a2 + 72);
        v24 = *(_QWORD **)(a1 + 88);
        *v24 = *v23;
        v24[1] = v23[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v19 = 0;
      v20 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v20 + 4 * v19++) = 0;
        v21 = *v9;
      }
      while (v19 < v21);
      *v8 = *(_DWORD *)a2;
      if ((int)v21 <= 2)
      {
        v22 = *(_DWORD *)(a2 + 4);
        if (v22 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v8, a2);
    goto LABEL_20;
  }
  LODWORD(v41) = 33619968;
  v42 = a1 + 16;
  v43 = 0;
  sub_1002181EC(a2, (uint64_t)&v41);
LABEL_21:
  v26 = *(_DWORD *)(a1 + 24);
  v25 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v26 + v25 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v26 != 1 && v25 != 1)
  {
    v41 = 0;
    v42 = 0;
    qmemcpy((void *)sub_10029430C(&v41, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v41, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  if (v10 != (_DWORD *)a4)
  {
    v27 = *(_QWORD *)(a4 + 56);
    if (v27)
    {
      v28 = (unsigned int *)(v27 + 20);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
    }
    v30 = *(_QWORD *)(a1 + 168);
    if (v30)
    {
      v31 = (unsigned int *)(v30 + 20);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
        sub_100256C90((uint64_t)v10);
    }
    *(_QWORD *)(a1 + 168) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    if (*(int *)(a1 + 116) <= 0)
    {
      *v10 = *(_DWORD *)a4;
      v37 = *(_DWORD *)(a4 + 4);
      if (v37 <= 2)
      {
LABEL_39:
        *(_DWORD *)(a1 + 116) = v37;
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a4 + 8);
        v38 = *(_QWORD **)(a4 + 72);
        v39 = *(_QWORD **)(a1 + 184);
        *v39 = *v38;
        v39[1] = v38[1];
LABEL_42:
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a4 + 32);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a4 + 48);
        goto LABEL_43;
      }
    }
    else
    {
      v34 = 0;
      v35 = *(_QWORD *)(a1 + 176);
      do
      {
        *(_DWORD *)(v35 + 4 * v34++) = 0;
        v36 = *v11;
      }
      while (v34 < v36);
      *v10 = *(_DWORD *)a4;
      if ((int)v36 <= 2)
      {
        v37 = *(_DWORD *)(a4 + 4);
        if (v37 <= 2)
          goto LABEL_39;
      }
    }
    sub_100256B48((uint64_t)v10, a4);
    goto LABEL_42;
  }
LABEL_43:
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a4 + 96);
  return a1;
}

void sub_1002F6A88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1002EED74(v2);
  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F6AC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100452150;
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = a1 + 112;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  if (*(int *)(a1 + 116) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 176);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 116));
  }
  v9 = *(void **)(a1 + 184);
  if (v9 != (void *)(a1 + 192))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 16);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 20));
  }
  v16 = *(void **)(a1 + 88);
  if (v16 != (void *)(a1 + 96))
    j__free(v16);
  return a1;
}

void sub_1002F6BDC(uint64_t a1)
{
  sub_1002F6AC4(a1);
  operator delete();
}

unint64_t sub_1002F6C00(uint64_t a1, uint64_t a2, float32x4_t *a3, int a4, int a5)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t result;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  unint64_t v26;
  const float *v27;
  const float *v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t *v31;
  float32x4_t *v32;
  uint64_t v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x2_t *v56;
  int v57;
  float v58;
  int v59;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const float *v80;
  const float *v81;
  const float *v82;
  unsigned __int128 v83;
  unsigned __int128 v84;
  float32x2_t *v85;
  float32x2_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  float v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v115;
  BOOL v117;
  BOOL v119;
  BOOL v121;
  BOOL v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float32x4_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  float32x4_t *v135;
  const float *v136;
  unsigned __int128 v137;
  const float *v138;
  const float *v139;
  float32x4_t v140;
  const float *v141;
  unsigned __int128 v142;
  float32x4_t v143;
  const float *v144;
  unsigned __int128 v145;
  const float *v146;
  float *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float v152;
  float *v153;
  float v154;
  int v155;
  BOOL v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  BOOL v174;
  BOOL v175;
  BOOL v176;
  BOOL v177;
  BOOL v178;
  BOOL v179;
  BOOL v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  float32x4_t v187;
  float32x4_t *v188;
  const float *v189;
  const float *v190;
  unsigned __int128 v191;
  const float *v192;
  const float *v193;
  unsigned __int128 v194;
  float *v195;
  float32x2_t *v196;
  float32x2_t v197;
  int v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  BOOL v211;
  BOOL v212;
  BOOL v213;
  BOOL v214;
  BOOL v215;
  BOOL v216;
  BOOL v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  float32x4_t v224;
  float32x4_t *v225;
  const float *v226;
  const float *v227;
  const float *v228;
  unsigned __int128 v229;
  const float *v230;
  float *v231;
  float32x2_t *v232;
  float32x2_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  BOOL v247;
  BOOL v248;
  BOOL v249;
  BOOL v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  float *v254;
  uint64_t v255;
  const float *v256;
  const float *v257;
  unsigned __int128 v258;
  unsigned __int128 v259;
  float *v260;
  float v261;
  uint64_t v262;
  uint64_t v263;
  float v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  float v268;
  float v269;
  int v270;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  BOOL v285;
  BOOL v286;
  BOOL v287;
  BOOL v288;
  BOOL v289;
  BOOL v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  float32x4_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  float32x4_t *v298;
  const float *v299;
  const float *v300;
  const float *v301;
  unsigned __int128 v302;
  const float *v303;
  unsigned __int128 v304;
  float *v305;
  float32x2_t v306;
  float32x2_t *v307;
  float32x2_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  BOOL v336;
  BOOL v338;
  BOOL v340;
  BOOL v342;
  BOOL v344;
  BOOL v346;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  float32x4_t v351;
  float32x4_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  float32x4_t *v360;
  const float *v361;
  const float *v362;
  const float *v363;
  unsigned __int128 v364;
  const float *v365;
  unsigned __int128 v366;
  const float *v367;
  const float *v368;
  unsigned __int128 v369;
  const float *v370;
  float *v371;
  uint64_t v372;
  unint64_t v373;
  float32x2_t v374;
  float32x2_t v375;
  char *v376;
  char *v377;
  float32x2_t *v378;
  uint64_t v379;
  float32x2_t v380;
  float32x2_t v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  BOOL v394;
  BOOL v395;
  BOOL v396;
  BOOL v397;
  BOOL v398;
  BOOL v399;
  BOOL v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  float32x4_t v407;
  float32x4_t *v408;
  const float *v409;
  const float *v410;
  const float *v411;
  unsigned __int128 v412;
  const float *v413;
  float *v414;
  float32x2_t *v415;
  float32x2_t v416;
  uint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  BOOL v421;
  char v422;
  BOOL v423;
  uint64_t v424;
  float *v425;
  float32x4_t v426;
  float32x4_t *v427;
  float32x4_t *v428;
  unint64_t v429;
  float32x4_t v430;
  uint64_t v431;
  uint64_t v432;
  float v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  float v437;
  float *v438;
  uint64_t v439;
  float v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  _OWORD *v444;
  __int128 *v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  uint64_t *v450;
  _QWORD *v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  uint64_t v460;
  float32x4x2_t v461;
  float32x4x2_t v462;
  float32x4x2_t v463;
  float32x4x2_t v464;
  float32x4x2_t v465;
  float32x4x2_t v466;
  float32x4x2_t v467;
  float32x4x2_t v468;
  float32x4x2_t v469;
  float32x4x2_t v470;
  float32x4x2_t v471;
  float32x4x2_t v472;
  float32x4x2_t v473;
  float32x4x2_t v474;
  float32x4x2_t v475;
  float32x4x2_t v476;
  float32x4x2_t v477;
  float32x4x2_t v478;
  float32x4x2_t v479;
  float32x4x2_t v480;
  float32x4x2_t v481;
  float32x4x2_t v482;
  float32x4x2_t v483;

  v10 = *(_DWORD *)(a1 + 8);
  if (v10 >= 0)
    v11 = *(_DWORD *)(a1 + 8);
  else
    v11 = v10 + 1;
  v12 = (v11 >> 1) * a5;
  v13 = *(_QWORD *)(a1 + 32);
  v460 = (uint64_t)v11 >> 1;
  v14 = v13 + 4 * (v11 >> 1);
  v15 = *(_DWORD *)(a1 + 216);
  result = sub_100294AFC(100);
  if ((result & 1) == 0)
  {
    LODWORD(v26) = 0;
    v25 = a5 * a4;
    goto LABEL_27;
  }
  v20 = *(_DWORD *)(a1 + 120) + *(_DWORD *)(a1 + 124);
  v21 = v20 - 1;
  if (v20 - 1 >= 0)
    --v20;
  v22 = v20 >> 1;
  v23 = v22 * a5;
  v24 = (_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v22);
  v25 = a5 * a4;
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    if (v21 == 5)
    {
      v44 = *(float *)v24;
      if (*(float *)v24 == -2.0 && (v18.i32[0] = v24[1], v18.f32[0] == 0.0))
      {
        v19.i32[0] = v24[2];
        if (v19.f32[0] != 1.0 && v25 >= 4)
          goto LABEL_25;
      }
      else if (v25 >= 4)
      {
        v18.i32[0] = v24[1];
        v19.i32[0] = v24[2];
LABEL_25:
        v46 = 0;
        v26 = 0;
        v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0);
        v47 = 4 * v22 * a5;
        v48 = 8 * a5;
        v49 = a2 + v48 + v47;
        v50 = v47 - v48;
        v51 = 4 * a5;
        v52 = a2 + v51 + v47;
        v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 0);
        v53 = a2 + v50;
        v54 = a2 + v47 - v51;
        do
        {
          a3[v46 / 0x10] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(a2 + v47 + v46), v44), v18, vaddq_f32(*(float32x4_t *)(v54 + v46), *(float32x4_t *)(v52 + v46))), v19, vaddq_f32(*(float32x4_t *)(v53 + v46), *(float32x4_t *)(v49 + v46)));
          v26 += 4;
          v46 += 16;
        }
        while (v26 <= (v25 - 4));
        goto LABEL_27;
      }
    }
    LODWORD(v26) = 0;
    goto LABEL_27;
  }
  LODWORD(v26) = 0;
  if (v21 == 5 && v25 >= 4)
  {
    v26 = 0;
    v27 = (const float *)(v24 + 2);
    v28 = (const float *)(v24 + 1);
    v17 = vld1q_dup_f32(v28);
    v18 = vld1q_dup_f32(v27);
    v29 = 4 * v23;
    v30 = 8 * a5;
    v31 = (float32x4_t *)(a2 + v30 + 4 * v23);
    v32 = (float32x4_t *)(a2 + v29 - v30);
    v33 = 4 * a5;
    v34 = (float32x4_t *)(a2 + v33 + v29);
    v35 = (float32x4_t *)(a2 + v29 - v33);
    v36 = a3;
    do
    {
      v37 = *v35++;
      v38 = v37;
      v39 = *v34++;
      v40 = v39;
      v41 = *v32++;
      v42 = v41;
      v43 = *v31++;
      v19 = vmlaq_f32(vmulq_f32(v17, vsubq_f32(v40, v38)), v18, vsubq_f32(v43, v42));
      *v36++ = v19;
      v26 += 4;
    }
    while (v26 <= (v25 - 4));
  }
LABEL_27:
  v55 = (int)v26;
  v56 = (float32x2_t *)(a2 + 4 * (int)v26 + 4 * v12);
  v57 = *(_DWORD *)(a1 + 8);
  if ((v15 & 1) == 0)
  {
    if (v57 != 5)
    {
      if (v57 != 3)
        goto LABEL_224;
      v58 = *(float *)(v14 + 4);
      v59 = v25 - 2;
      if (*(float *)v14 == 0.0 && v58 == 1.0)
      {
        if ((int)v26 > v59)
          goto LABEL_224;
        v234 = a5 + 1;
        v235 = v59;
        v236 = v59 - v55;
        v237 = 4 * a5;
        if (v236 >= 0x30)
        {
          v238 = v55;
          v239 = (unint64_t)a3->u64 + 4 * v55;
          v240 = (4 * v236) & 0xFFFFFFFFFFFFFFF8;
          v241 = v240 + 4 * v55;
          v242 = (unint64_t)&a3->u64[1] + v241;
          v243 = 4 * v55 + 4 * v12;
          v244 = v241 + 4 * v12;
          v245 = v244 - v237 + a2 + 8;
          v246 = v243 + a2 + v240 + v237 + 4;
          v247 = v239 >= v244 + 4 * v234 + a2 + 4 || a2 + 4 * v234 + v243 >= v242;
          result = !v247;
          v248 = v239 >= v246 || a2 + v237 + v243 >= v242;
          v249 = !v248;
          v250 = a2 + v243 - v237 >= v242 || v239 >= v245;
          if (v250 && (result & 1) == 0 && !v249)
          {
            v251 = (v236 >> 1) + 1;
            v252 = v251 & 3;
            if ((v251 & 3) == 0)
              v252 = 4;
            v253 = v251 - v252;
            v55 += 2 * v253;
            v56 += v253;
            v254 = &a3->f32[v238];
            v255 = v238 * 4 + 4 * v12;
            v256 = (const float *)(a2 + v255 + 4 * v234);
            v257 = (const float *)(a2 + v255 - v237);
            result = a2 + v237 + v255;
            do
            {
              v258 = (unsigned __int128)vld2q_f32((const float *)result);
              result += 32;
              v466 = vld2q_f32(v257);
              v257 += 8;
              v461.val[0] = vsubq_f32((float32x4_t)v258, v466.val[0]);
              v259 = (unsigned __int128)vld2q_f32(v256);
              v256 += 8;
              v461.val[1] = vsubq_f32((float32x4_t)v259, v466.val[1]);
              vst2q_f32(v254, v461);
              v254 += 8;
              v253 -= 4;
            }
            while (v253);
          }
        }
        v260 = &a3->f32[v55 + 1];
        do
        {
          v261 = v56->f32[v234] - *(float *)((char *)v56->f32 + 4 - v237);
          *(v260 - 1) = v56->f32[a5] - v56->f32[-a5];
          *v260 = v261;
          v55 += 2;
          ++v56;
          v260 += 2;
        }
        while (v55 <= v235);
      }
      else
      {
        if ((int)v26 > v59)
          goto LABEL_224;
        v61 = a5 + 1;
        v62 = v59 - (uint64_t)(int)v26;
        if (v62 >= 0x28)
        {
          v63 = 4 * (int)v26;
          v64 = (unint64_t)a3 + v63;
          v65 = (4 * v62) & 0xFFFFFFFFFFFFFFF8;
          v66 = (unint64_t)&a3->u64[1] + v65 + v63;
          v67 = v63 + 4 * v12;
          v68 = 4 * a5;
          v69 = v65 + v63 + 4 * v12;
          v70 = v69 - v68 + a2 + 8;
          v71 = v67 + a2 + v65 + v68 + 4;
          v72 = (unint64_t)a3 + v63 >= v69 + 4 * v61 + a2 + 4 || a2 + 4 * v61 + v67 >= v66;
          v73 = !v72;
          v74 = v64 >= v71 || a2 + 4 * a5 + v67 >= v66;
          result = !v74;
          v75 = a2 + v67 - 4 * a5 >= v66 || v64 >= v70;
          if (v75 && !v73 && (result & 1) == 0)
          {
            v76 = (v62 >> 1) + 1;
            v77 = v76 & 3;
            if ((v76 & 3) == 0)
              v77 = 4;
            v78 = v76 - v77;
            v55 = (int)v26 + 2 * v78;
            v56 += v78;
            result = (unint64_t)a3 + v63;
            v79 = v63 + 4 * v12;
            v80 = (const float *)(a2 + v79 + 4 * v61);
            v81 = (const float *)(a2 + v79 - v68);
            v82 = (const float *)(a2 + v68 + v79);
            do
            {
              v83 = (unsigned __int128)vld2q_f32(v82);
              v82 += 8;
              v467 = vld2q_f32(v81);
              v81 += 8;
              v84 = (unsigned __int128)vld2q_f32(v80);
              v80 += 8;
              v462.val[0] = vmulq_n_f32(vsubq_f32((float32x4_t)v83, v467.val[0]), v58);
              v462.val[1] = vmulq_n_f32(vsubq_f32((float32x4_t)v84, v467.val[1]), v58);
              vst2q_f32((float *)result, v462);
              result += 32;
              v78 -= 4;
            }
            while (v78);
          }
        }
        v85 = (float32x2_t *)&a3->f32[v55];
        do
        {
          v86.i32[0] = v56->i32[a5];
          v86.i32[1] = v56->i32[v61];
          *v85++ = vmul_n_f32(vsub_f32(v86, *(float32x2_t *)((char *)v56 - 4 * a5)), v58);
          v55 += 2;
          ++v56;
        }
        while (v55 <= v59);
      }
      LODWORD(v26) = v55;
LABEL_224:
      if ((int)v26 < v25)
      {
        v262 = (int)v26;
        v263 = 4 * a5;
        do
        {
          v264 = *(float *)v14 * v56->f32[0];
          if (v10 >= 2)
          {
            v265 = -4 * a5;
            v266 = 4 * a5;
            v267 = (v460 + 1) - 1;
            result = v13 + 4 * v460 + 4;
            do
            {
              v268 = *(float *)result;
              result += 4;
              v264 = v264
                   + (float)(v268 * (float)(*(float *)((char *)v56->f32 + v266) - *(float *)((char *)v56->f32 + v265)));
              v266 += v263;
              v265 -= v263;
              --v267;
            }
            while (v267);
          }
          a3->f32[v262++] = v264;
          v56 = (float32x2_t *)((char *)v56 + 4);
        }
        while (v262 != v25);
      }
      return result;
    }
    v91 = v25 - 2;
    if ((int)v26 > v25 - 2)
      goto LABEL_224;
    v17.i32[0] = *(_DWORD *)(v14 + 4);
    v92 = *(float *)(v14 + 8);
    v93 = -2 * a5;
    v94 = a5 + 1;
    v95 = v91;
    v96 = v91 - v55;
    v97 = 4 * a5;
    v98 = 8 * a5;
    if (v96 >= 0x30)
    {
      v458 = v13;
      v99 = 4 * v55;
      v100 = (unint64_t)a3->u64 + 4 * v55;
      v101 = (4 * v96) & 0xFFFFFFFFFFFFFFF8;
      v102 = v101 + 4 * v55;
      v103 = (unint64_t)&a3->u64[1] + v102;
      v104 = 4 * v12;
      v105 = 4 * v55 + v104;
      v456 = v105 - v98 + a2 + 4;
      v106 = v102 + v104;
      v455 = a2 + v106 + 8 - v98;
      v107 = a2 + v105 - v97;
      v108 = a2 + 4 * v94 + v105;
      v109 = 4 * v93;
      v110 = a2 + v105 + v109;
      v111 = v106 + v109 + a2 + 4;
      v112 = a2 + v97 + v105;
      v113 = v105 + a2 + v101 + v97 + 4;
      v115 = v100 < v106 + v98 + a2 + 8 && a2 + v98 + v105 < v103;
      v117 = v100 < a2 + v106 + 8 - v97 && v107 < v103;
      v119 = v100 < v106 + 4 * v94 + a2 + 4 && v108 < v103;
      v121 = v100 < v111 && v110 < v103;
      v123 = v100 < v113 && v112 < v103;
      if (v456 >= v103 || v100 >= v455)
      {
        v13 = v458;
        v93 = -2 * a5;
        if (!v115)
        {
          v94 = a5 + 1;
          if (!v117 && !v119 && !v121 && !v123)
          {
            v125 = (v96 >> 1) + 1;
            v126 = v125 & 3;
            if ((v125 & 3) == 0)
              v126 = 4;
            v127 = v125 - v126;
            v55 += 2 * v127;
            v128 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0);
            v129 = v104 - v98 + a2 + 4;
            v130 = a2 + v104 + 4 * (a5 + 1);
            v131 = a2 + v104 + 4 * v93;
            v132 = a2 + v104 + v98;
            v133 = a2 + v104 - v97;
            v134 = a2 + v97 + v104;
            v135 = a3;
            v56 += v127;
            do
            {
              v136 = (const float *)(v134 + v99);
              v137 = (unsigned __int128)vld2q_f32(v136);
              v138 = (const float *)(v133 + v99);
              v472 = vld2q_f32(v138);
              v139 = (const float *)(v132 + v99);
              v478 = vld2q_f32(v139);
              v140 = vsubq_f32((float32x4_t)v137, v472.val[0]);
              v141 = (const float *)(v131 + v99);
              v142 = (unsigned __int128)vld2q_f32(v141);
              v143 = vsubq_f32(v478.val[0], (float32x4_t)v142);
              v144 = (const float *)(v130 + v99);
              v145 = (unsigned __int128)vld2q_f32(v144);
              v472.val[0] = vsubq_f32((float32x4_t)v145, v472.val[1]);
              v146 = (const float *)(v129 + v99);
              v472.val[1] = (float32x4_t)vld2q_f32(v146);
              v481.val[0] = vmlaq_f32(vmulq_n_f32(v143, v92), v128, v140);
              v481.val[1] = vmlaq_f32(vmulq_n_f32(vsubq_f32(v478.val[1], v472.val[1]), v92), v128, v472.val[0]);
              v147 = &v135->f32[(unint64_t)v99 / 4];
              vst2q_f32(v147, v481);
              v135 += 2;
              v129 += 32;
              v130 += 32;
              v131 += 32;
              v132 += 32;
              v133 += 32;
              v134 += 32;
              v127 -= 4;
            }
            while (v127);
          }
          goto LABEL_115;
        }
      }
      else
      {
        v13 = v458;
        v93 = -2 * a5;
      }
      v94 = a5 + 1;
    }
LABEL_115:
    v148 = 0;
    v149 = 0;
    result = (unint64_t)a3->u64 + 4 * v55;
    v150 = (uint64_t)&v56[v98 / 0xFFFFFFFFFFFFFFF8] + 4;
    v151 = (uint64_t)&v56[(unint64_t)v98 / 8] + 4;
    do
    {
      v152 = (float)(v92 * (float)(*(float *)(v151 + v149) - *(float *)(v150 + v149)))
           + (float)((float)(v56->f32[v94 + v149 / 4] - v56->f32[v97 / 0xFFFFFFFFFFFFFFFCLL + 1 + v149 / 4]) * v17.f32[0]);
      v153 = (float *)(result + v149);
      *v153 = (float)(v92 * (float)(*(float *)(v151 + v149 - 4) - v56[v93 / 2 + v149 / 8].f32[0]))
            + (float)((float)(v56->f32[(unint64_t)v97 / 4 + v149 / 4]
                            - v56[v149 / 8].f32[v97 / 0xFFFFFFFFFFFFFFFCLL])
                    * v17.f32[0]);
      v153[1] = v152;
      v149 += 8;
      v148 += 2;
    }
    while (v55 + v148 <= v95);
    LODWORD(v26) = v55 + v148;
    v56 = (float32x2_t *)((char *)v56 + v149);
    goto LABEL_224;
  }
  if (v57 != 5)
  {
    if (v57 != 3)
    {
      if (v57 == 1 && *(float *)v14 == 1.0)
      {
        v87 = v25 - 2;
        if ((int)v26 > v25 - 2)
          goto LABEL_398;
        v88 = v87;
        v89 = v87 - v55;
        if (v89 >= 0x1E)
        {
          v441 = (4 * v89) & 0xFFFFFFFFFFFFFFF8;
          v442 = 8 * v55 + 4 * v12;
          result = v442 + v441 + a2 + 8;
          if ((unint64_t)a3->u64 + 4 * v55 >= result
            || (v90 = v55, a2 + v442 >= (unint64_t)&a3->u64[1] + 4 * v55 + v441))
          {
            v443 = (v89 >> 1) + 1;
            v90 = v55 + 2 * (v443 & 0xFFFFFFFFFFFFFFF8);
            v444 = (_OWORD *)&a3[2].f32[v55];
            v445 = (__int128 *)(v442 + a2 + 32);
            result = v443 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v447 = *(v445 - 2);
              v446 = *(v445 - 1);
              v449 = *v445;
              v448 = v445[1];
              v445 += 4;
              *(v444 - 2) = v447;
              *(v444 - 1) = v446;
              *v444 = v449;
              v444[1] = v448;
              v444 += 4;
              result -= 8;
            }
            while (result);
            if (v443 == (v443 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_397;
          }
        }
        else
        {
          v90 = v55;
        }
        v450 = (uint64_t *)(a2 + 4 * v90 + 4 * v55 + 4 * v12);
        v451 = (uint64_t *)((char *)a3->i64 + 4 * v90);
        do
        {
          v452 = *v450++;
          *v451++ = v452;
          v90 += 2;
        }
        while (v90 <= v88);
LABEL_397:
        v55 = (int)v90;
        LODWORD(v26) = v90;
LABEL_398:
        v56 = (float32x2_t *)((char *)v56 + 4 * v55);
        if ((int)v26 >= v25)
          return result;
        goto LABEL_363;
      }
      goto LABEL_362;
    }
    v18.i32[0] = *(_DWORD *)v14;
    if (*(float *)v14 == 2.0 && *(float *)(v14 + 4) == 1.0)
    {
      v198 = v25 - 2;
      if ((int)v26 > v25 - 2)
        goto LABEL_362;
      v199 = a5 + 1;
      v200 = v198 - (uint64_t)(int)v26;
      if (v200 >= 0x28)
      {
        v201 = 4 * (int)v26;
        v202 = (unint64_t)a3 + v201;
        v203 = (4 * v200) & 0xFFFFFFFFFFFFFFF8;
        v204 = (unint64_t)&a3->u64[1] + v203 + v201;
        result = 4 * v12;
        v205 = v203 + v201 + result;
        v206 = v205 + 4 * v199 + a2 + 4;
        v205 += 8;
        v207 = a2 + v205;
        v208 = 4 * a5;
        v209 = a2 + v205 - v208;
        v210 = v201 + result + a2 + v203 + v208 + 4;
        v211 = (unint64_t)a3 + v201 >= v207 || (unint64_t)v56 >= v204;
        v212 = !v211;
        v213 = v202 >= v209 || a2 + v201 + result - v208 >= v204;
        v214 = !v213;
        v215 = v202 >= v210 || a2 + v208 + v201 + result >= v204;
        v216 = !v215;
        v217 = a2 + 4 * v199 + v201 + result >= v204 || v202 >= v206;
        if (v217 && !v212 && !v214 && !v216)
        {
          v218 = (v200 >> 1) + 1;
          v219 = v218 & 3;
          if ((v218 & 3) == 0)
            v219 = 4;
          v220 = v218 - v219;
          v55 = (int)v26 + 2 * v220;
          v56 += v220;
          v221 = a2 + result;
          v222 = a2 + result + 4 * v199;
          v223 = a2 + v208 + result;
          result = a2 + result - v208;
          v224.i64[0] = 0x4000000040000000;
          v224.i64[1] = 0x4000000040000000;
          v225 = a3;
          do
          {
            v226 = (const float *)(result + v201);
            v464 = vld2q_f32(v226);
            v227 = (const float *)(v221 + v201);
            v469 = vld2q_f32(v227);
            v228 = (const float *)(v223 + v201);
            v229 = (unsigned __int128)vld2q_f32(v228);
            v474.val[0] = vaddq_f32(vmlaq_f32(v464.val[0], v224, v469.val[0]), (float32x4_t)v229);
            v230 = (const float *)(v222 + v201);
            v469.val[0] = (float32x4_t)vld2q_f32(v230);
            v474.val[1] = vaddq_f32(vmlaq_f32(v464.val[1], v224, v469.val[1]), v469.val[0]);
            v231 = &v225->f32[(unint64_t)v201 / 4];
            vst2q_f32(v231, v474);
            v225 += 2;
            v221 += 32;
            v222 += 32;
            v223 += 32;
            result += 32;
            v220 -= 4;
          }
          while (v220);
        }
      }
      v232 = (float32x2_t *)&a3->f32[v55];
      do
      {
        v233.i32[0] = v56->i32[a5];
        v233.i32[1] = v56->i32[v199];
        *v232++ = vadd_f32(vmla_f32(*(float32x2_t *)((char *)v56 - 4 * a5), (float32x2_t)0x4000000040000000, *v56), v233);
        v55 += 2;
        ++v56;
      }
      while (v55 <= v198);
    }
    else
    {
      v269 = *(float *)(v14 + 4);
      v270 = v25 - 2;
      if (v18.f32[0] == -2.0 && v269 == 1.0)
      {
        if ((int)v26 > v270)
          goto LABEL_362;
        v382 = a5 + 1;
        v383 = v270 - (uint64_t)(int)v26;
        if (v383 >= 0x28)
        {
          v384 = 4 * (int)v26;
          v385 = (unint64_t)a3 + v384;
          v386 = (4 * v383) & 0xFFFFFFFFFFFFFFF8;
          v387 = (unint64_t)&a3->u64[1] + v386 + v384;
          result = 4 * v12;
          v388 = v386 + v384 + result;
          v389 = v388 + 4 * v382 + a2 + 4;
          v388 += 8;
          v390 = a2 + v388;
          v391 = 4 * a5;
          v392 = a2 + v388 - v391;
          v393 = v384 + result + a2 + v386 + v391 + 4;
          v394 = (unint64_t)a3 + v384 >= v390 || (unint64_t)v56 >= v387;
          v395 = !v394;
          v396 = v385 >= v392 || a2 + v384 + result - v391 >= v387;
          v397 = !v396;
          v398 = v385 >= v393 || a2 + v391 + v384 + result >= v387;
          v399 = !v398;
          v400 = a2 + 4 * v382 + v384 + result >= v387 || v385 >= v389;
          if (v400 && !v395 && !v397 && !v399)
          {
            v401 = (v383 >> 1) + 1;
            v402 = v401 & 3;
            if ((v401 & 3) == 0)
              v402 = 4;
            v403 = v401 - v402;
            v55 = (int)v26 + 2 * v403;
            v56 += v403;
            v404 = a2 + result;
            v405 = a2 + result + 4 * v382;
            v406 = a2 + v391 + result;
            result = a2 + result - v391;
            v407.i64[0] = 0x4000000040000000;
            v407.i64[1] = 0x4000000040000000;
            v408 = a3;
            do
            {
              v409 = (const float *)(result + v384);
              v465 = vld2q_f32(v409);
              v410 = (const float *)(v404 + v384);
              v471 = vld2q_f32(v410);
              v411 = (const float *)(v406 + v384);
              v412 = (unsigned __int128)vld2q_f32(v411);
              v477.val[0] = vaddq_f32(vmlsq_f32(v465.val[0], v407, v471.val[0]), (float32x4_t)v412);
              v413 = (const float *)(v405 + v384);
              v471.val[0] = (float32x4_t)vld2q_f32(v413);
              v477.val[1] = vaddq_f32(vmlsq_f32(v465.val[1], v407, v471.val[1]), v471.val[0]);
              v414 = &v408->f32[(unint64_t)v384 / 4];
              vst2q_f32(v414, v477);
              v408 += 2;
              v404 += 32;
              v405 += 32;
              v406 += 32;
              result += 32;
              v403 -= 4;
            }
            while (v403);
          }
        }
        v415 = (float32x2_t *)&a3->f32[v55];
        do
        {
          v416.i32[0] = v56->i32[a5];
          v416.i32[1] = v56->i32[v382];
          *v415++ = vadd_f32(vmla_f32(*(float32x2_t *)((char *)v56 - 4 * a5), (float32x2_t)0xC0000000C0000000, *v56), v416);
          v55 += 2;
          ++v56;
        }
        while (v55 <= v270);
      }
      else
      {
        if ((int)v26 > v270)
          goto LABEL_362;
        v272 = a5 + 1;
        v273 = v270 - (uint64_t)(int)v26;
        if (v273 >= 0x20)
        {
          v274 = 4 * (int)v26;
          v275 = (unint64_t)a3 + v274;
          v276 = (4 * v273) & 0xFFFFFFFFFFFFFFF8;
          v277 = (unint64_t)&a3->u64[1] + v276 + v274;
          v278 = 4 * v12;
          v279 = v276 + v274 + v278;
          v280 = v279 + 4 * v272 + a2 + 4;
          v281 = 4 * a5;
          v279 += 8;
          v282 = a2 + v279 - v281;
          v283 = a2 + v279;
          v284 = v274 + v278 + a2 + v276 + v281 + 4;
          v285 = (unint64_t)a3 + v274 >= v282 || a2 + v274 + v278 - 4 * a5 >= v277;
          v286 = !v285;
          v287 = v275 >= v283 || (unint64_t)v56 >= v277;
          v288 = !v287;
          v289 = v275 >= v284 || a2 + v281 + v274 + v278 >= v277;
          result = !v289;
          v290 = a2 + 4 * v272 + v274 + v278 >= v277 || v275 >= v280;
          if (v290 && !v286 && !v288 && (result & 1) == 0)
          {
            v291 = (v273 >> 1) + 1;
            v292 = v291 & 3;
            if ((v291 & 3) == 0)
              v292 = 4;
            v293 = v291 - v292;
            v55 = (int)v26 + 2 * v293;
            v56 += v293;
            v294 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0);
            v295 = a2 + v278;
            result = a2 + v278 + 4 * v272;
            v296 = a2 + v281 + v278;
            v297 = a2 + v278 - v281;
            v298 = a3;
            do
            {
              v299 = (const float *)(v295 + v274);
              v470 = vld2q_f32(v299);
              v300 = (const float *)(v297 + v274);
              v475 = vld2q_f32(v300);
              v301 = (const float *)(v296 + v274);
              v302 = (unsigned __int128)vld2q_f32(v301);
              v479.val[0] = vmlaq_f32(vmulq_n_f32(vaddq_f32(v475.val[0], (float32x4_t)v302), v269), v294, v470.val[0]);
              v303 = (const float *)(result + v274);
              v304 = (unsigned __int128)vld2q_f32(v303);
              v479.val[1] = vmlaq_f32(vmulq_n_f32(vaddq_f32(v475.val[1], (float32x4_t)v304), v269), v294, v470.val[1]);
              v305 = &v298->f32[(unint64_t)v274 / 4];
              vst2q_f32(v305, v479);
              v298 += 2;
              v295 += 32;
              result += 32;
              v296 += 32;
              v297 += 32;
              v293 -= 4;
            }
            while (v293);
          }
        }
        v306 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.f32, 0);
        v307 = (float32x2_t *)&a3->f32[v55];
        do
        {
          v308.i32[0] = v56->i32[a5];
          v308.i32[1] = v56->i32[v272];
          *v307++ = vmla_f32(vmul_n_f32(vadd_f32(*(float32x2_t *)((char *)v56 - 4 * a5), v308), v269), v306, *v56);
          v55 += 2;
          ++v56;
        }
        while (v55 <= v270);
      }
    }
LABEL_361:
    LODWORD(v26) = v55;
    goto LABEL_362;
  }
  v19.i32[0] = *(_DWORD *)v14;
  v154 = *(float *)(v14 + 4);
  v18.i32[0] = *(_DWORD *)(v14 + 8);
  v155 = v25 - 2;
  if (*(float *)v14 != -2.0 || (v154 == 0.0 ? (v156 = v18.f32[0] == 1.0) : (v156 = 0), !v156))
  {
    if ((int)v26 <= v155)
    {
      v309 = -2 * a5;
      v310 = a5 + 1;
      v311 = v155;
      v312 = v155 - v55;
      v313 = 4 * a5;
      v314 = 8 * a5;
      if (v312 > 0x27)
      {
        v459 = v25;
        v315 = 4 * v55;
        v316 = (unint64_t)a3->u64 + 4 * v55;
        v317 = (4 * v312) & 0xFFFFFFFFFFFFFFF8;
        v318 = v317 + 4 * v55;
        v319 = (unint64_t)&a3->u64[1] + v318;
        v320 = 4 * v12;
        v321 = 4 * v55 + v320;
        v454 = a2 + v314 + v321;
        v322 = v318 + v320;
        v453 = v322 + v314 + a2 + 8;
        v323 = v321 - v314 + a2 + 4;
        v457 = 8 * a5;
        v324 = a2 + v322 + 8 - v314;
        v325 = a2 + 4 * v310 + v321;
        v326 = v322 + 4 * v310 + a2 + 4;
        v327 = a2 + v321 - v313;
        v328 = a2 + v322 + 8 - v313;
        v329 = a2 + v322 + 8;
        v330 = a2 + v321 + 4 * v309;
        v331 = v322 + 4 * v309 + a2 + 4;
        v332 = a2 + v313 + v321;
        v333 = 4 * a5;
        v334 = v321 + a2 + v317 + v313 + 4;
        v336 = v316 < v324 && v323 < v319;
        v338 = v316 < v326 && v325 < v319;
        v340 = v316 < v328 && v327 < v319;
        v342 = v316 < v329 && (unint64_t)v56 < v319;
        v344 = v316 < v331 && v330 < v319;
        v346 = v316 < v334 && v332 < v319;
        if (v454 >= v319 || v316 >= v453)
        {
          v25 = v459;
          v309 = -2 * a5;
          v314 = 8 * a5;
          v313 = 4 * a5;
          if (v336)
          {
            v310 = a5 + 1;
          }
          else
          {
            v310 = a5 + 1;
            if (!v338 && !v340 && !v342 && !v344 && !v346)
            {
              v348 = (v312 >> 1) + 1;
              v349 = v348 & 3;
              if ((v348 & 3) == 0)
                v349 = 4;
              v350 = v348 - v349;
              v351 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 0);
              v55 += 2 * v350;
              v352 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0);
              v353 = a2 + v320;
              v354 = v320 - v457 + a2 + 4;
              v355 = a2 + v320 + 4 * (a5 + 1);
              v356 = a2 + v320 + v457;
              v357 = a2 + v320 + -8 * a5;
              v358 = a2 + v333 + v320;
              v359 = a2 + v320 - v333;
              v360 = a3;
              v56 += v350;
              do
              {
                v361 = (const float *)(v353 + v315);
                v476 = vld2q_f32(v361);
                v362 = (const float *)(v359 + v315);
                v480 = vld2q_f32(v362);
                v363 = (const float *)(v358 + v315);
                v364 = (unsigned __int128)vld2q_f32(v363);
                v365 = (const float *)(v357 + v315);
                v366 = (unsigned __int128)vld2q_f32(v365);
                v367 = (const float *)(v356 + v315);
                v483 = vld2q_f32(v367);
                v482.val[0] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(vaddq_f32(v480.val[0], (float32x4_t)v364), v154), v351, v476.val[0]), v352, vaddq_f32((float32x4_t)v366, v483.val[0]));
                v368 = (const float *)(v355 + v315);
                v369 = (unsigned __int128)vld2q_f32(v368);
                v370 = (const float *)(v354 + v315);
                v480.val[0] = (float32x4_t)vld2q_f32(v370);
                v482.val[1] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(vaddq_f32(v480.val[1], (float32x4_t)v369), v154), v351, v476.val[1]), v352, vaddq_f32(v480.val[0], v483.val[1]));
                v371 = &v360->f32[(unint64_t)v315 / 4];
                v360 += 2;
                vst2q_f32(v371, v482);
                v353 += 32;
                v354 += 32;
                v355 += 32;
                v356 += 32;
                v357 += 32;
                v358 += 32;
                v359 += 32;
                v350 -= 4;
              }
              while (v350);
            }
          }
        }
        else
        {
          v310 = a5 + 1;
          v25 = v459;
          v309 = -2 * a5;
          v314 = 8 * a5;
          v313 = 4 * a5;
        }
      }
      v372 = 0;
      v373 = 0;
      v374 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 0);
      result = (unint64_t)a3->u64 + 4 * v55;
      v375 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.f32, 0);
      v376 = (char *)v56 - v313;
      v377 = (char *)v56 + v313;
      v378 = &v56[(unint64_t)v314 / 8];
      v379 = (uint64_t)&v56[v314 / 0xFFFFFFFFFFFFFFF8] + 4;
      do
      {
        v380.i32[0] = *(_DWORD *)&v377[v373];
        v380.i32[1] = v56->i32[v310 + v373 / 4];
        v381 = vmla_f32(vmul_n_f32(vadd_f32(*(float32x2_t *)&v376[v373], v380), v154), v374, v56[v373 / 8]);
        v380.i32[0] = v56[v309 / 2 + v373 / 8].i32[0];
        v380.i32[1] = *(_DWORD *)(v379 + v373);
        *(float32x2_t *)(result + v373) = vmla_f32(v381, v375, vadd_f32(v380, v378[v373 / 8]));
        v373 += 8;
        v372 += 2;
      }
      while (v55 + v372 <= v311);
      LODWORD(v26) = v55 + v372;
      v56 = (float32x2_t *)((char *)v56 + v373);
      if ((int)v55 + (int)v372 >= v25)
        return result;
      goto LABEL_363;
    }
    goto LABEL_362;
  }
  if ((int)v26 <= v155)
  {
    v157 = -2 * a5;
    v158 = v155;
    v159 = v155 - v55;
    v160 = 8 * a5;
    if (v159 >= 0x28)
    {
      v161 = v159 >> 1;
      v162 = 4 * v55;
      v163 = (unint64_t)a3->u64 + 4 * v55;
      v164 = 4 * v55 + 8 * v161;
      v165 = (unint64_t)&a3->u64[1] + v164;
      result = 4 * v12;
      v166 = 4 * v55 + result;
      v167 = a2 + v160 + v166;
      v168 = v164 + result;
      v169 = v168 + v160 + a2 + 8;
      v170 = a2 + v168 + 8 - v160;
      v171 = a2 + v168 + 8;
      v172 = a2 + v166 + 4 * v157;
      v173 = v168 + 4 * v157 + a2 + 4;
      v174 = v163 >= v170 || v166 - v160 + a2 + 4 >= v165;
      v175 = !v174;
      v176 = v163 >= v171 || (unint64_t)v56 >= v165;
      v177 = !v176;
      v178 = v163 >= v173 || v172 >= v165;
      v179 = !v178;
      v180 = v167 >= v165 || v163 >= v169;
      if (v180 && !v175 && !v177 && !v179)
      {
        v181 = v161 + 1;
        v182 = (v161 + 1) & 3;
        if (!v182)
          v182 = 4;
        v183 = v181 - v182;
        v55 += 2 * v183;
        v56 += v183;
        v184 = a2 + result;
        v185 = result - v160 + a2 + 4;
        v186 = a2 + result + v160;
        result += a2 + 4 * v157;
        v187.i64[0] = 0xC0000000C0000000;
        v187.i64[1] = 0xC0000000C0000000;
        v188 = a3;
        do
        {
          v189 = (const float *)(v184 + v162);
          v463 = vld2q_f32(v189);
          v190 = (const float *)(result + v162);
          v191 = (unsigned __int128)vld2q_f32(v190);
          v192 = (const float *)(v186 + v162);
          v473 = vld2q_f32(v192);
          v468.val[0] = vaddq_f32(vmlaq_f32((float32x4_t)v191, v187, v463.val[0]), v473.val[0]);
          v193 = (const float *)(v185 + v162);
          v194 = (unsigned __int128)vld2q_f32(v193);
          v468.val[1] = vaddq_f32(vmlaq_f32((float32x4_t)v194, v187, v463.val[1]), v473.val[1]);
          v195 = &v188->f32[(unint64_t)v162 / 4];
          vst2q_f32(v195, v468);
          v188 += 2;
          v184 += 32;
          v185 += 32;
          v186 += 32;
          result += 32;
          v183 -= 4;
        }
        while (v183);
      }
    }
    v196 = (float32x2_t *)&a3->f32[v55];
    do
    {
      v197.i32[0] = v56[v157 / 2].i32[0];
      v197.i32[1] = *(__int32 *)((char *)v56->i32 + 4 - v160);
      *v196++ = vadd_f32(vmla_f32(v197, (float32x2_t)0xC0000000C0000000, *v56), v56[a5]);
      v55 += 2;
      ++v56;
    }
    while (v55 <= v158);
    goto LABEL_361;
  }
LABEL_362:
  if ((int)v26 >= v25)
    return result;
LABEL_363:
  if (v10 < 2)
  {
    v417 = (int)v26;
    v418 = v25 - (uint64_t)(int)v26;
    if (v418 < 0xC
      || ((v419 = (unint64_t)a3->u64 + 4 * (int)v26,
           v420 = (unint64_t)a3->u64 + 4 * v25,
           v419 < (unint64_t)v56 + 4 * v25 - 4 * v417)
        ? (v421 = (unint64_t)v56 >= v420)
        : (v421 = 1),
          v421 ? (v422 = 0) : (v422 = 1),
          v14 < v420 ? (v423 = v419 >= v13 + 4 * v460 + 4) : (v423 = 1),
          !v423 || (v422 & 1) != 0))
    {
      v424 = v417;
      v425 = (float *)v56;
    }
    else
    {
      v424 = (v418 & 0xFFFFFFFFFFFFFFF8) + v417;
      v425 = (float *)v56 + (v418 & 0xFFFFFFFFFFFFFFF8);
      v426 = vld1q_dup_f32((const float *)v14);
      v427 = (float32x4_t *)&v56[2];
      v428 = (float32x4_t *)((char *)a3 + 4 * v417 + 16);
      v429 = v418 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v430 = vmulq_f32(v426, *v427);
        v428[-1] = vmulq_f32(v426, v427[-1]);
        *v428 = v430;
        v427 += 2;
        v428 += 2;
        v429 -= 8;
      }
      while (v429);
      if (v418 == (v418 & 0xFFFFFFFFFFFFFFF8))
        return result;
    }
    v438 = &a3->f32[v424];
    v439 = v25 - v424;
    do
    {
      v440 = *v425++;
      *v438++ = *(float *)v14 * v440;
      --v439;
    }
    while (v439);
    return result;
  }
  v431 = (int)v26;
  v432 = 4 * a5;
  do
  {
    v433 = *(float *)v14 * v56->f32[0];
    v434 = -4 * a5;
    v435 = 4 * a5;
    v436 = (v460 + 1) - 1;
    result = v13 + 4 * v460 + 4;
    do
    {
      v437 = *(float *)result;
      result += 4;
      v433 = v433 + (float)(v437 * (float)(*(float *)((char *)v56->f32 + v435) + *(float *)((char *)v56->f32 + v434)));
      v435 += v432;
      v434 -= v432;
      --v436;
    }
    while (v436);
    a3->f32[v431++] = v433;
    v56 = (float32x2_t *)((char *)v56 + 4);
  }
  while (v431 != v25);
  return result;
}

void sub_1002F819C(uint64_t a1)
{
  sub_1002F6AC4(a1);
  operator delete();
}

uint64_t sub_1002F81C0(uint64_t a1, uint64_t a2, float32x4_t *a3, int a4, int a5)
{
  uint64_t v10;
  float *v11;
  uint64_t result;
  int32x2_t v13;
  int32x2_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v23;
  const float *v24;
  const float *v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t *v31;
  uint64_t v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int v43;
  float v44;
  uint64_t v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t *v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  unint64_t v53;
  float32x4_t *v54;
  float32x4_t *v55;
  float32x4_t v56;
  uint64_t v57;
  float *v58;
  float v59;
  float *v60;
  uint64_t v61;
  float *v62;
  float v63;
  unint64_t v64;
  float *v65;
  float *v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  BOOL v73;
  uint64_t v75;
  float *v76;
  const float *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  BOOL v81;
  BOOL v82;
  float32x4_t v84;
  uint64_t v85;
  float32x4_t *v86;
  float32x4_t *v87;
  unint64_t v88;
  float32x4_t v89;
  unint64_t v90;
  unint64_t v91;
  float32x4_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  float32x4x4_t v102;
  float32x4x4_t v103;

  v10 = *(unsigned int *)(a1 + 8);
  v11 = *(float **)(a1 + 32);
  result = sub_100294AFC(100);
  if ((result & 1) != 0)
  {
    v15 = *(_DWORD *)(a1 + 120) + *(_DWORD *)(a1 + 124);
    v16 = v15 - 1;
    if (v15 - 1 >= 0)
      --v15;
    v17 = v15 >> 1;
    v18 = v17 * a5;
    v19 = v17 * a5;
    v20 = (_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v17);
    v21 = a5 * a4;
    if ((*(_BYTE *)(a1 + 208) & 1) == 0)
    {
      if (v16 == 5 && v21 >= 4)
      {
        v23 = 0;
        v24 = (const float *)(v20 + 2);
        v25 = (const float *)(v20 + 1);
        v26 = vld1q_dup_f32(v25);
        v27 = vld1q_dup_f32(v24);
        v28 = 4 * v19;
        v29 = 8 * a5;
        v30 = (float32x4_t *)(a2 + v29 + 4 * v19);
        v31 = (float32x4_t *)(a2 + v28 - v29);
        v32 = 4 * a5;
        v33 = (float32x4_t *)(a2 + v32 + v28);
        v34 = (float32x4_t *)(a2 + v28 - v32);
        v35 = a3;
        do
        {
          v36 = *v34++;
          v37 = v36;
          v38 = *v33++;
          v39 = v38;
          v40 = *v31++;
          v41 = v40;
          v42 = *v30++;
          *v35++ = vmlaq_f32(vmulq_f32(v26, vsubq_f32(v39, v37)), v27, vsubq_f32(v42, v41));
          v23 += 4;
        }
        while (v23 <= (unint64_t)(v21 - 4));
        v43 = v21 - 4;
        if ((int)v23 > v21 - 4)
          goto LABEL_34;
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    if (v16 == 5)
    {
      v44 = *(float *)v20;
      if (*(float *)v20 == -2.0 && (v13.i32[0] = v20[1], *(float *)v13.i32 == 0.0))
      {
        v14.i32[0] = v20[2];
        if (*(float *)v14.i32 != 1.0 && v21 >= 4)
        {
LABEL_78:
          v90 = 0;
          v91 = 0;
          v92 = (float32x4_t)vdupq_lane_s32(v13, 0);
          v93 = 4 * v18;
          v94 = 8 * a5;
          v95 = a2 + v94 + v93;
          v96 = v93 - v94;
          v97 = 4 * a5;
          v98 = a2 + v97 + v93;
          v99 = (float32x4_t)vdupq_lane_s32(v14, 0);
          v100 = a2 + v96;
          v101 = a2 + v93 - v97;
          do
          {
            a3[v90 / 0x10] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(a2 + v93 + v90), v44), v92, vaddq_f32(*(float32x4_t *)(v101 + v90), *(float32x4_t *)(v98 + v90))), v99, vaddq_f32(*(float32x4_t *)(v100 + v90), *(float32x4_t *)(v95 + v90)));
            v91 += 4;
            v90 += 16;
          }
          while (v91 <= (v21 - 4));
          LODWORD(v23) = v91;
          v43 = v21 - 4;
          if ((int)v23 > v21 - 4)
            goto LABEL_34;
          goto LABEL_25;
        }
      }
      else if (v21 >= 4)
      {
        v13.i32[0] = v20[1];
        v14.i32[0] = v20[2];
        goto LABEL_78;
      }
    }
LABEL_24:
    LODWORD(v23) = 0;
    v43 = v21 - 4;
    if (v21 - 4 < 0)
      goto LABEL_34;
    goto LABEL_25;
  }
  LODWORD(v23) = 0;
  v21 = a5 * a4;
  v43 = a5 * a4 - 4;
  if (v43 < 0)
    goto LABEL_34;
LABEL_25:
  v23 = (int)v23;
  if ((int)v10 <= 1)
  {
    v52 = v21 - (uint64_t)(int)v23;
    v53 = v52 - 4;
    if ((unint64_t)(v52 - 4) < 0x1C)
      goto LABEL_32;
    v69 = 4 * (int)v23;
    v70 = ((4 * v52 - 16) & 0xFFFFFFFFFFFFFFF0) + v69 + 16;
    v71 = (unint64_t)a3 + v70;
    v72 = (unint64_t)a3 + v69 >= a2 + v70 || a2 + 4 * (int)v23 >= v71;
    v73 = !v72;
    if ((unint64_t)v11 < v71 && (char *)a3 + v69 < (char *)(v11 + 1))
      goto LABEL_32;
    if (v73)
      goto LABEL_32;
    v75 = (v53 >> 2) + 1;
    v23 = (int)v23 + 4 * (v75 & 0x7FFFFFFFFFFFFFFCLL);
    v76 = &a3->f32[(unint64_t)v69 / 4];
    v77 = (const float *)(a2 + v69);
    v78 = v75 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      v102 = vld4q_f32(v77);
      v77 += 16;
      v103.val[0] = vmulq_n_f32(v102.val[0], *v11);
      v103.val[1] = vmulq_n_f32(v102.val[1], *v11);
      v103.val[2] = vmulq_n_f32(v102.val[2], *v11);
      v103.val[3] = vmulq_n_f32(v102.val[3], *v11);
      vst4q_f32(v76, v103);
      v76 += 16;
      v78 -= 4;
    }
    while (v78);
    if (v75 != (v75 & 0x7FFFFFFFFFFFFFFCLL))
    {
LABEL_32:
      v54 = (float32x4_t *)(a2 + 4 * v23);
      v55 = (float32x4_t *)((char *)a3 + 4 * v23);
      do
      {
        v56 = *v54++;
        *v55++ = vmulq_n_f32(v56, *v11);
        v23 += 4;
      }
      while (v23 <= v43);
    }
  }
  else
  {
    v46 = 4 * a5;
    v47 = (float32x4_t *)(a2 + v46 + 4 * (int)v23);
    do
    {
      v48 = vmulq_n_f32(*(float32x4_t *)(a2 + 4 * v23), *v11);
      v49 = v47;
      v50 = v10 - 1;
      result = (uint64_t)(v11 + 1);
      do
      {
        v51 = *(float *)result;
        result += 4;
        v48 = vmlaq_n_f32(v48, *v49, v51);
        v49 = (float32x4_t *)((char *)v49 + v46);
        --v50;
      }
      while (v50);
      *(float32x4_t *)((char *)a3 + 4 * v23) = v48;
      v23 += 4;
      ++v47;
    }
    while (v23 <= v43);
  }
LABEL_34:
  if ((int)v23 < v21)
  {
    v23 = (int)v23;
    if ((int)v10 <= 1)
    {
      v64 = v21 - (uint64_t)(int)v23;
      if (v64 < 0xC)
        goto LABEL_42;
      v79 = 4 * (int)v23;
      v80 = (unint64_t)a3->u64 + 4 * v21;
      v81 = (unint64_t)a3 + v79 >= a2 + 4 * v21 || a2 + 4 * (int)v23 >= v80;
      v82 = !v81;
      if ((unint64_t)v11 < v80 && (char *)a3 + v79 < (char *)(v11 + 1))
        goto LABEL_42;
      if (v82)
        goto LABEL_42;
      v23 = (v64 & 0xFFFFFFFFFFFFFFF8) + (int)v23;
      v84 = vld1q_dup_f32(v11);
      v85 = v79 + 16;
      v86 = (float32x4_t *)(a2 + v79 + 16);
      v87 = (float32x4_t *)((char *)a3 + v85);
      v88 = v64 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v89 = vmulq_f32(v84, *v86);
        v87[-1] = vmulq_f32(v84, v86[-1]);
        *v87 = v89;
        v86 += 2;
        v87 += 2;
        v88 -= 8;
      }
      while (v88);
      if (v64 != (v64 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_42:
        v65 = (float *)(a2 + 4 * v23);
        v66 = &a3->f32[v23];
        v67 = v21 - v23;
        do
        {
          v68 = *v65++;
          *v66++ = *v11 * v68;
          --v67;
        }
        while (v67);
      }
    }
    else
    {
      v57 = 4 * a5;
      v58 = (float *)(a2 + v57 + 4 * (int)v23);
      do
      {
        v59 = *v11 * *(float *)(a2 + 4 * v23);
        v60 = v58;
        v61 = v10 - 1;
        v62 = v11 + 1;
        do
        {
          v63 = *v62++;
          v59 = v59 + (float)(v63 * *v60);
          v60 = (float *)((char *)v60 + v57);
          --v61;
        }
        while (v61);
        a3->f32[v23++] = v59;
        ++v58;
      }
      while (v23 != v21);
    }
  }
  return result;
}

void sub_1002F8668()
{
  operator delete();
}

uint64_t sub_1002F867C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002F86B8(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_1004521B8;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2)
      goto LABEL_21;
    v8 = *(_QWORD *)(a2 + 56);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = *(_QWORD *)(a1 + 72);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 20);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v6 = *(_DWORD *)a2;
      v18 = *(_DWORD *)(a2 + 4);
      if (v18 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v18;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v19 = *(_QWORD **)(a2 + 72);
        v20 = *(_QWORD **)(a1 + 88);
        *v20 = *v19;
        v20[1] = v19[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v7;
      }
      while (v15 < v17);
      *v6 = *(_DWORD *)a2;
      if ((int)v17 <= 2)
      {
        v18 = *(_DWORD *)(a2 + 4);
        if (v18 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v6, a2);
    goto LABEL_20;
  }
  LODWORD(v24) = 33619968;
  v25 = a1 + 16;
  v26 = 0;
  sub_1002181EC(a2, (uint64_t)&v24);
LABEL_21:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v22 != 1 && v21 != 1)
  {
    v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(&v24, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v24, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_1002F88EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F8920(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004521B8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002F89C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004521B8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

float *sub_1002F8A70(float *result, const char *a2, unint64_t a3, int a4, int a5, int32x4_t a6, double a7, double a8, int8x16_t a9)
{
  uint64_t v9;
  const float *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int32 *v14;
  int32x4_t v15;
  __int32 *v16;
  const float *v17;
  int32x4_t v18;
  int *v19;
  const char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  uint64_t v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  const char *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  BOOL v37;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  const char *v42;
  int32x4_t v43;
  float *v44;
  float *v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  BOOL v49;
  char v50;
  BOOL v51;
  unint64_t v52;
  int32x4_t v53;
  int8x16_t *v54;
  uint64_t v55;
  unint64_t v56;
  int8x16_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  int32x4_t v68;
  int8x16x4_t v69;
  float32x4x4_t v70;
  float32x4x4_t v71;
  float32x4x4_t v72;

  v9 = *((unsigned int *)result + 2);
  v10 = (const float *)*((_QWORD *)result + 4);
  v11 = (a5 * a4);
  v12 = (v11 - 4);
  if ((int)v11 < 4)
  {
    LODWORD(v13) = 0;
    goto LABEL_13;
  }
  if ((int)v9 > 1)
  {
    v13 = 0;
    v14 = (__int32 *)&a2[a5];
    do
    {
      a6.i32[0] = *(_DWORD *)&a2[v13];
      v15 = (int32x4_t)vld1q_dup_f32(v10);
      a6 = vmulq_s32(v15, (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a6.i8)));
      v16 = v14;
      result = (float *)(v9 - 1);
      v17 = v10 + 1;
      do
      {
        v15.i32[0] = *v16;
        v15 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v15.i8));
        v18 = (int32x4_t)vld1q_dup_f32(v17++);
        a6 = vmlaq_s32(a6, v18, v15);
        v16 = (__int32 *)((char *)v16 + a5);
        result = (float *)((char *)result - 1);
      }
      while (result);
      *(int32x4_t *)(a3 + 4 * v13) = a6;
      v13 += 4;
      ++v14;
    }
    while (v13 <= v12);
    goto LABEL_13;
  }
  if (v12 < 0x3C)
  {
    v13 = 0;
LABEL_11:
    v19 = (int *)(a3 + 4 * v13 + 8);
    v20 = a2 + 1;
    do
    {
      result = (float *)(*(_DWORD *)v10 * v20[v13]);
      v21 = *(_DWORD *)v10 * v20[v13 + 1];
      v22 = *(_DWORD *)v10 * v20[v13 + 2];
      *(v19 - 2) = *(_DWORD *)v10 * a2[v13];
      *(v19 - 1) = (int)result;
      *v19 = v21;
      v19[1] = v22;
      v19 += 4;
      v13 += 4;
    }
    while (v13 <= v12);
    goto LABEL_13;
  }
  v13 = 0;
  v35 = ((4 * v12) & 0x3FFFFFFF0) + a3 + 16;
  v37 = (unint64_t)&a2[(v12 & 0xFFFFFFFC) + 4] > a3 && v35 > (unint64_t)a2;
  if ((unint64_t)v10 < v35 && (unint64_t)(v10 + 1) > a3)
    goto LABEL_11;
  if (v37)
    goto LABEL_11;
  v39 = (v12 >> 2) + 1;
  v13 = 4 * (v39 & 0x7FFFFFF0);
  a9.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
  v40 = v39 & 0x7FFFFFF0;
  v41 = (float *)a3;
  v42 = a2;
  do
  {
    v43 = (int32x4_t)vld1q_dup_f32(v10);
    v69 = vld4q_s8(v42);
    v42 += 64;
    v70.val[0] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[0], (int8x16_t)xmmword_1003BCA90));
    v70.val[1] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[1], (int8x16_t)xmmword_1003BCA90));
    v70.val[2] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[2], (int8x16_t)xmmword_1003BCA90));
    v70.val[3] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[3], (int8x16_t)xmmword_1003BCA90));
    v44 = v41;
    vst4q_f32(v44, v70);
    v44 += 16;
    v70.val[0] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[0], (int8x16_t)xmmword_1003BCAC0));
    v71.val[0] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[0], (int8x16_t)xmmword_1003BCAB0));
    v72.val[0] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[0], (int8x16_t)xmmword_1003BCAA0));
    v72.val[1] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[1], (int8x16_t)xmmword_1003BCAA0));
    v72.val[2] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[2], (int8x16_t)xmmword_1003BCAA0));
    v72.val[3] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[3], (int8x16_t)xmmword_1003BCAA0));
    vst4q_f32(v44, v72);
    v71.val[1] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[1], (int8x16_t)xmmword_1003BCAB0));
    v71.val[2] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[2], (int8x16_t)xmmword_1003BCAB0));
    v71.val[3] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[3], (int8x16_t)xmmword_1003BCAB0));
    v45 = v41 + 32;
    vst4q_f32(v45, v71);
    v70.val[1] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[1], (int8x16_t)xmmword_1003BCAC0));
    v70.val[2] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[2], (int8x16_t)xmmword_1003BCAC0));
    v70.val[3] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[3], (int8x16_t)xmmword_1003BCAC0));
    result = v41 + 48;
    vst4q_f32(result, v70);
    v41 += 64;
    v40 -= 16;
  }
  while (v40);
  if (v39 != (v39 & 0x7FFFFFF0))
    goto LABEL_11;
LABEL_13:
  if ((int)v13 >= (int)v11)
    return result;
  v23 = v13;
  if ((int)v9 <= 1)
  {
    v29 = v11 - v13;
    if (v29 < 8
      || ((v46 = a3 + 4 * v13,
           v47 = a3 + 4 * v11,
           v48 = &a2[v13],
           v46 < (unint64_t)&a2[v11])
        ? (v49 = (unint64_t)v48 >= v47)
        : (v49 = 1),
          v49 ? (v50 = 0) : (v50 = 1),
          (unint64_t)v10 < v47 ? (v51 = v46 >= (unint64_t)(v10 + 1)) : (v51 = 1),
          !v51 || (v50 & 1) != 0))
    {
      v30 = v23;
      goto LABEL_22;
    }
    if (v29 >= 0x20)
    {
      v52 = v29 & 0xFFFFFFFFFFFFFFE0;
      v53 = (int32x4_t)vld1q_dup_f32(v10);
      v54 = (int8x16_t *)&a2[v23 + 16];
      v55 = a3 + 4 * v23 + 64;
      a9.i64[1] = 0xFFFFFF03FFFFFF02;
      v56 = v29 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v57 = v54[-1];
        v58 = (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_1003BCAB0);
        v59 = vmulq_s32(v53, (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_1003BCAC0));
        v60 = vmulq_s32(v53, (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_1003BCA90));
        v61 = vmulq_s32(v53, (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_1003BCAA0));
        *(int32x4_t *)(v55 - 64) = vmulq_s32(v53, (int32x4_t)vqtbl1q_s8(v57, (int8x16_t)xmmword_1003BCA90));
        *(int32x4_t *)(v55 - 48) = vmulq_s32(v53, (int32x4_t)vqtbl1q_s8(v57, (int8x16_t)xmmword_1003BCAA0));
        *(int32x4_t *)(v55 - 32) = vmulq_s32(v53, (int32x4_t)vqtbl1q_s8(v57, (int8x16_t)xmmword_1003BCAB0));
        *(int32x4_t *)(v55 - 16) = vmulq_s32(v53, (int32x4_t)vqtbl1q_s8(v57, (int8x16_t)xmmword_1003BCAC0));
        *(int32x4_t *)v55 = v60;
        *(int32x4_t *)(v55 + 16) = v61;
        *(int32x4_t *)(v55 + 32) = vmulq_s32(v53, v58);
        *(int32x4_t *)(v55 + 48) = v59;
        v54 += 2;
        v55 += 128;
        v56 -= 32;
      }
      while (v56);
      if (v29 == v52)
        return result;
      if ((v29 & 0x18) == 0)
      {
        v30 = v52 + v23;
        goto LABEL_22;
      }
    }
    else
    {
      v52 = 0;
    }
    v30 = (v29 & 0xFFFFFFFFFFFFFFF8) + v23;
    v62 = (int32x4_t)vld1q_dup_f32(v10);
    v63 = v52 - (v29 & 0xFFFFFFFFFFFFFFF8);
    v64 = v52 + v23;
    v65 = (unint64_t *)&a2[v64];
    v66 = a3 + 4 * v64;
    do
    {
      v67 = *v65++;
      a9.i64[0] = v67;
      v68 = (int32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_1003BCAA0);
      a9 = (int8x16_t)vmulq_s32(v62, (int32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_1003BCA90));
      *(int8x16_t *)v66 = a9;
      *(int32x4_t *)(v66 + 16) = vmulq_s32(v62, v68);
      v66 += 32;
      v63 += 8;
    }
    while (v63);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFF8))
      return result;
LABEL_22:
    v31 = (_DWORD *)(a3 + 4 * v30);
    v32 = &a2[v30];
    v33 = v11 - v30;
    do
    {
      v34 = *(unsigned __int8 *)v32++;
      *v31++ = *(_DWORD *)v10 * v34;
      --v33;
    }
    while (v33);
    return result;
  }
  v24 = v9 - 1;
  do
  {
    v25 = *(_DWORD *)v10 * a2[v23];
    v26 = &a2[a5];
    v27 = v24;
    result = (float *)(v10 + 1);
    do
    {
      v28 = *result++;
      v25 += LODWORD(v28) * v26[v23];
      v26 += a5;
      --v27;
    }
    while (v27);
    *(_DWORD *)(a3 + 4 * v23++) = v25;
  }
  while (v23 != v11);
  return result;
}

void sub_1002F8E84()
{
  operator delete();
}

uint64_t sub_1002F8E98(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002F8ED4(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_100452238;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2)
      goto LABEL_21;
    v8 = *(_QWORD *)(a2 + 56);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = *(_QWORD *)(a1 + 72);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 20);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v6 = *(_DWORD *)a2;
      v18 = *(_DWORD *)(a2 + 4);
      if (v18 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v18;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v19 = *(_QWORD **)(a2 + 72);
        v20 = *(_QWORD **)(a1 + 88);
        *v20 = *v19;
        v20[1] = v19[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v7;
      }
      while (v15 < v17);
      *v6 = *(_DWORD *)a2;
      if ((int)v17 <= 2)
      {
        v18 = *(_DWORD *)(a2 + 4);
        if (v18 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v6, a2);
    goto LABEL_20;
  }
  LODWORD(v24) = 33619968;
  v25 = a1 + 16;
  v26 = 0;
  sub_1002181EC(a2, (uint64_t)&v24);
LABEL_21:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v22 != 1 && v21 != 1)
  {
    v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(&v24, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v24, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_1002F9108(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F913C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452238;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002F91DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452238;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

float *sub_1002F928C(float *result, const char *a2, unint64_t a3, int a4, int a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, int8x16_t a9, float a10)
{
  uint64_t v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int32 *v15;
  unsigned __int32 *v16;
  float *v17;
  float v18;
  unint64_t v19;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  const char *v26;
  float *v27;
  float32x4_t v28;
  float *v29;
  _DWORD *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  float *v36;
  float v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  BOOL v42;
  char v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  float *v47;
  const char *v48;
  uint64_t v49;
  unsigned int v50;
  float32x4_t v51;
  int8x16_t *v52;
  unint64_t v53;
  float32x4_t *v54;
  int8x16_t v55;
  float32x4_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint32x4_t v62;
  float32x4x4_t v63;
  int8x16x4_t v64;
  float32x4x4_t v65;
  float32x4x4_t v66;

  v10 = *((unsigned int *)result + 2);
  v11 = (float *)*((_QWORD *)result + 4);
  v12 = (a5 * a4);
  v13 = (v12 - 4);
  if ((int)v12 < 4)
  {
    LODWORD(v14) = 0;
    goto LABEL_27;
  }
  if ((int)v10 > 1)
  {
    v14 = 0;
    v15 = (unsigned __int32 *)&a2[a5];
    do
    {
      a7.i32[0] = *(_DWORD *)&a2[v14];
      a7 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a7.f32)));
      a6 = vmulq_n_f32(a7, *v11);
      v16 = v15;
      result = (float *)(v10 - 1);
      v17 = v11 + 1;
      do
      {
        v18 = *v17++;
        a8.i32[0] = *v16;
        a8 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a8.f32)));
        a6 = vmlaq_n_f32(a6, a8, v18);
        v16 = (unsigned __int32 *)((char *)v16 + a5);
        result = (float *)((char *)result - 1);
      }
      while (result);
      *(float32x4_t *)(a3 + 4 * v14) = a6;
      v14 += 4;
      ++v15;
    }
    while (v14 <= v13);
    goto LABEL_27;
  }
  if (v13 < 0x3C)
  {
    v14 = 0;
LABEL_25:
    v30 = (_DWORD *)(a3 + 4 * v14 + 8);
    v31 = a2 + 1;
    do
    {
      a7.i8[0] = a2[v14];
      a7.f32[0] = *v11 * (float)a7.u32[0];
      a8.i8[0] = v31[v14];
      a8.f32[0] = *v11 * (float)a8.u32[0];
      a9.i8[0] = v31[v14 + 1];
      *(float *)a9.i32 = *v11 * (float)a9.u32[0];
      LOBYTE(a10) = v31[v14 + 2];
      a10 = (float)LODWORD(a10);
      a6.f32[0] = *v11 * a10;
      *(v30 - 2) = a7.i32[0];
      *(v30 - 1) = a8.i32[0];
      *v30 = a9.i32[0];
      v30[1] = a6.i32[0];
      v30 += 4;
      v14 += 4;
    }
    while (v14 <= v13);
    goto LABEL_27;
  }
  v14 = 0;
  v19 = ((4 * v13) & 0x3FFFFFFF0) + a3 + 16;
  v21 = (unint64_t)&a2[(v13 & 0xFFFFFFFC) + 4] > a3 && v19 > (unint64_t)a2;
  if ((unint64_t)v11 < v19 && (unint64_t)(v11 + 1) > a3)
    goto LABEL_25;
  if (v21)
    goto LABEL_25;
  v23 = (v13 >> 2) + 1;
  v14 = 4 * (v23 & 0x7FFFFFF0);
  a6.i32[0] = -244;
  a7.i32[0] = -248;
  a8.i32[0] = -252;
  a9 = (int8x16_t)xmmword_1003BCA90;
  v24 = v23 & 0x7FFFFFF0;
  v25 = (float *)a3;
  v26 = a2;
  do
  {
    a10 = *v11;
    v64 = vld4q_s8(v26);
    v26 += 64;
    v65.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[0], (int8x16_t)xmmword_1003BCAC0)), *v11);
    v65.val[1] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[1], (int8x16_t)xmmword_1003BCAC0)), *v11);
    v66.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[0], (int8x16_t)xmmword_1003BCAB0)), *v11);
    v63.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[0], (int8x16_t)xmmword_1003BCA90)), *v11);
    v63.val[1] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[1], (int8x16_t)xmmword_1003BCA90)), *v11);
    v63.val[2] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[2], (int8x16_t)xmmword_1003BCA90)), *v11);
    v63.val[3] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[3], (int8x16_t)xmmword_1003BCA90)), *v11);
    v27 = v25;
    vst4q_f32(v27, v63);
    v27 += 16;
    v66.val[1] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[1], (int8x16_t)xmmword_1003BCAB0)), a10);
    v28 = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[0], (int8x16_t)xmmword_1003BCAA0)), a10);
    v63.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[1], (int8x16_t)xmmword_1003BCAA0)), a10);
    v63.val[1] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[2], (int8x16_t)xmmword_1003BCAA0)), a10);
    v63.val[2] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[3], (int8x16_t)xmmword_1003BCAA0)), a10);
    vst4q_f32(v27, v63);
    v66.val[2] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[2], (int8x16_t)xmmword_1003BCAB0)), a10);
    v66.val[3] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[3], (int8x16_t)xmmword_1003BCAB0)), a10);
    v29 = v25 + 32;
    vst4q_f32(v29, v66);
    v65.val[2] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[2], (int8x16_t)xmmword_1003BCAC0)), a10);
    v65.val[3] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[3], (int8x16_t)xmmword_1003BCAC0)), a10);
    result = v25 + 48;
    vst4q_f32(result, v65);
    v25 += 64;
    v24 -= 16;
  }
  while (v24);
  if (v23 != (v23 & 0x7FFFFFF0))
    goto LABEL_25;
LABEL_27:
  if ((int)v14 >= (int)v12)
    return result;
  v32 = v14;
  if ((int)v10 <= 1)
  {
    v38 = v12 - v14;
    if (v38 < 8
      || ((v39 = a3 + 4 * v14,
           v40 = a3 + 4 * v12,
           v41 = &a2[v14],
           v39 < (unint64_t)&a2[v12])
        ? (v42 = (unint64_t)v41 >= v40)
        : (v42 = 1),
          v42 ? (v43 = 0) : (v43 = 1),
          (unint64_t)v11 < v40 ? (v44 = v39 >= (unint64_t)(v11 + 1)) : (v44 = 1),
          !v44 || (v43 & 1) != 0))
    {
      v46 = v32;
      goto LABEL_50;
    }
    if (v38 >= 0x10)
    {
      v51 = vld1q_dup_f32(v11);
      v45 = v38 & 0xFFFFFFFFFFFFFFF0;
      v52 = (int8x16_t *)&a2[v32];
      a9.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
      v53 = v38 & 0xFFFFFFFFFFFFFFF0;
      v54 = (float32x4_t *)(a3 + 4 * v32);
      do
      {
        v55 = *v52++;
        v54[2] = vmulq_f32(v51, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_1003BCAB0)));
        v54[3] = vmulq_f32(v51, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_1003BCAC0)));
        *v54 = vmulq_f32(v51, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_1003BCA90)));
        v54[1] = vmulq_f32(v51, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_1003BCAA0)));
        v54 += 4;
        v53 -= 16;
      }
      while (v53);
      if (v38 == v45)
        return result;
      if ((v38 & 8) == 0)
      {
        v46 = v45 + v32;
        goto LABEL_50;
      }
    }
    else
    {
      v45 = 0;
    }
    v46 = (v38 & 0xFFFFFFFFFFFFFFF8) + v32;
    v56 = vld1q_dup_f32(v11);
    v57 = v45 - (v38 & 0xFFFFFFFFFFFFFFF8);
    v58 = v45 + v32;
    v59 = (unint64_t *)&a2[v58];
    v60 = a3 + 4 * v58;
    do
    {
      v61 = *v59++;
      a9.i64[0] = v61;
      v62 = (uint32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_1003BCA90);
      a9 = (int8x16_t)vmulq_f32(v56, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_1003BCAA0)));
      *(float32x4_t *)v60 = vmulq_f32(v56, vcvtq_f32_u32(v62));
      *(int8x16_t *)(v60 + 16) = a9;
      v60 += 32;
      v57 += 8;
    }
    while (v57);
    if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
      return result;
LABEL_50:
    v47 = (float *)(a3 + 4 * v46);
    v48 = &a2[v46];
    v49 = v12 - v46;
    do
    {
      v50 = *(unsigned __int8 *)v48++;
      *v47++ = *v11 * (float)v50;
      --v49;
    }
    while (v49);
    return result;
  }
  v33 = v10 - 1;
  do
  {
    a6.i8[0] = a2[v32];
    a6.f32[0] = *v11 * (float)a6.u32[0];
    v34 = &a2[a5];
    v35 = v33;
    v36 = v11 + 1;
    do
    {
      v37 = *v36++;
      a8.i8[0] = v34[v32];
      a8.f32[0] = (float)a8.u32[0];
      a6.f32[0] = a6.f32[0] + (float)(v37 * a8.f32[0]);
      v34 += a5;
      --v35;
    }
    while (v35);
    *(_DWORD *)(a3 + 4 * v32++) = a6.i32[0];
  }
  while (v32 != v12);
  return result;
}

void sub_1002F96F0()
{
  operator delete();
}

uint64_t sub_1002F9704(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002F9740(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_1004522B8;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2)
      goto LABEL_21;
    v8 = *(_QWORD *)(a2 + 56);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = *(_QWORD *)(a1 + 72);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 20);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v6 = *(_DWORD *)a2;
      v18 = *(_DWORD *)(a2 + 4);
      if (v18 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v18;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v19 = *(_QWORD **)(a2 + 72);
        v20 = *(_QWORD **)(a1 + 88);
        *v20 = *v19;
        v20[1] = v19[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v7;
      }
      while (v15 < v17);
      *v6 = *(_DWORD *)a2;
      if ((int)v17 <= 2)
      {
        v18 = *(_DWORD *)(a2 + 4);
        if (v18 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v6, a2);
    goto LABEL_20;
  }
  LODWORD(v24) = 33619968;
  v25 = a1 + 16;
  v26 = 0;
  sub_1002181EC(a2, (uint64_t)&v24);
LABEL_21:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v22 != 1 && v21 != 1)
  {
    v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(&v24, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v24, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_1002F9974(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F99A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004522B8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002F9A48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004522B8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

uint64_t sub_1002F9AF8(uint64_t result, const char *a2, unint64_t a3, int a4, int a5, double a6, double a7, float64x2_t a8, double a9, float64x2_t a10, double a11)
{
  uint64_t v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  _BYTE *v18;
  uint64_t v19;
  double *v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  const char *v32;
  unint64_t v33;
  int8x8_t v34;
  int8x8_t v35;
  uint64x2_t v36;
  int8x8_t v37;
  float64x2_t v38;
  int8x8_t v39;
  uint64x2_t v40;
  int8x8_t v41;
  double *v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double *v47;
  float64x2_t v48;
  float64x2_t v49;
  double *v50;
  float64x2_t v51;
  double *v52;
  float64x2_t v53;
  double *v54;
  float64x2_t v55;
  double *v56;
  int8x8_t v57;
  int8x8_t v58;
  int8x8_t v59;
  int8x8_t v60;
  float64x2_t v61;
  double *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  double *v68;
  double v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  const char *v73;
  BOOL v74;
  char v75;
  BOOL v76;
  unint64_t v77;
  uint64_t v78;
  double *v79;
  const char *v80;
  uint64_t v81;
  unsigned int v82;
  float64x2_t v83;
  int8x16_t *v84;
  float64x2_t *v85;
  unint64_t v86;
  int8x16_t v87;
  unint64_t v88;
  int8x8_t v89;
  int8x8_t v90;
  uint64x2_t v91;
  int8x8_t v92;
  float64x2_t v93;
  int8x8_t v94;
  int8x8_t v95;
  float64x2_t v96;
  int8x8_t v97;
  float64x2_t v98;
  int8x8_t v99;
  int8x8_t v100;
  float64x2_t v101;
  int8x8_t v102;
  int8x8_t v103;
  float64x2_t v104;
  int8x8_t v105;
  float64x2_t v106;
  int8x8_t v107;
  int8x8_t v108;
  int8x8_t v109;
  float64x2_t v110;
  int8x8_t v111;
  float64x2_t v112;
  unint64_t v113;
  uint64_t v114;
  const char *v115;
  float64x2_t *v116;
  uint64_t v117;
  int8x8_t v118;
  int8x8_t v119;
  uint64x2_t v120;
  int8x8_t v121;
  float64x2_t v122;
  int8x8_t v123;
  int8x8_t v124;
  float64x2_t v125;
  int8x8_t v126;
  float64x2_t v127;
  int8x8_t v128;
  int8x8_t v129;
  int8x16x4_t v130;
  float64x2x4_t v131;

  v11 = *(unsigned int *)(result + 8);
  v12 = *(double **)(result + 32);
  v13 = (a5 * a4);
  v14 = (v13 - 4);
  if ((int)v13 < 4)
  {
    LODWORD(v15) = 0;
    goto LABEL_27;
  }
  if ((int)v11 > 1)
  {
    v15 = 0;
    v16 = (uint64_t)&a2[a5 + 1];
    do
    {
      LOBYTE(a6) = a2[v15];
      a6 = *v12 * (double)*(unint64_t *)&a6;
      LOBYTE(a7) = a2[v15 + 1];
      a7 = *v12 * (double)*(unint64_t *)&a7;
      LOBYTE(a8.f64[0]) = a2[v15 + 2];
      a8.f64[0] = *v12 * (double)*(unint64_t *)&a8.f64[0];
      LOBYTE(a10.f64[0]) = a2[v15 + 3];
      v17 = *v12 * (double)*(unint64_t *)&a10.f64[0];
      v18 = (_BYTE *)v16;
      v19 = v11 - 1;
      v20 = v12 + 1;
      do
      {
        v21 = *v20++;
        a10.f64[0] = v21;
        LOBYTE(a11) = *(v18 - 1);
        *(double *)&v22 = (double)*(unint64_t *)&a11;
        a6 = a6 + v21 * *(double *)&v22;
        LOBYTE(v22) = *v18;
        *(double *)&v23 = (double)v22;
        a7 = a7 + v21 * *(double *)&v23;
        LOBYTE(v23) = v18[1];
        *(double *)&v24 = (double)v23;
        a8.f64[0] = a8.f64[0] + v21 * *(double *)&v24;
        LOBYTE(v24) = v18[2];
        a11 = (double)v24;
        v17 = v17 + v21 * a11;
        v18 += a5;
        --v19;
      }
      while (v19);
      *(double *)(a3 + 8 * v15) = a6;
      *(double *)(a3 + ((8 * v15) | 8)) = a7;
      result = (8 * v15) | 0x10;
      *(float64_t *)(a3 + result) = a8.f64[0];
      *(double *)(a3 + ((8 * v15) | 0x18)) = v17;
      v15 += 4;
      v16 += 4;
    }
    while (v15 <= v14);
    goto LABEL_27;
  }
  if (v14 < 0x3C)
  {
    v15 = 0;
LABEL_25:
    v62 = (double *)(a3 + 8 * v15 + 16);
    v63 = a2 + 1;
    do
    {
      LOBYTE(a7) = a2[v15];
      a7 = *v12 * (double)*(unint64_t *)&a7;
      LOBYTE(a8.f64[0]) = v63[v15];
      a8.f64[0] = *v12 * (double)*(unint64_t *)&a8.f64[0];
      LOBYTE(a9) = v63[v15 + 1];
      a9 = *v12 * (double)*(unint64_t *)&a9;
      LOBYTE(a10.f64[0]) = v63[v15 + 2];
      a10.f64[0] = (double)*(unint64_t *)&a10.f64[0];
      a6 = *v12 * a10.f64[0];
      *(v62 - 2) = a7;
      *(v62 - 1) = a8.f64[0];
      *v62 = a9;
      v62[1] = a6;
      v62 += 4;
      v15 += 4;
    }
    while (v15 <= v14);
    goto LABEL_27;
  }
  v15 = 0;
  v25 = ((8 * v14) & 0x7FFFFFFE0) + a3 + 32;
  v27 = (unint64_t)&a2[(v14 & 0xFFFFFFFC) + 4] > a3 && v25 > (unint64_t)a2;
  if ((unint64_t)v12 < v25 && (unint64_t)(v12 + 1) > a3)
    goto LABEL_25;
  if (v27)
    goto LABEL_25;
  v29 = (v14 >> 2) + 1;
  v15 = 4 * (v29 & 0x7FFFFFF0);
  *(_QWORD *)&a6 = 0xFF000000FFLL;
  v30 = v29 & 0x7FFFFFF0;
  v31 = (double *)a3;
  v32 = a2;
  do
  {
    a7 = *v12;
    v130 = vld4q_s8(v32);
    v32 += 64;
    v33 = vextq_s8(v130.val[0], v130.val[0], 8uLL).u64[0];
    v34.i32[0] = v130.val[0].u8[0];
    v34.i32[1] = v130.val[0].u8[1];
    v35 = vand_s8(v34, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v35.u32[0];
    v36.i64[1] = v35.u32[1];
    v37.i32[0] = v130.val[0].u8[2];
    v37.i32[1] = v130.val[0].u8[3];
    v38 = vcvtq_f64_u64(v36);
    v39 = vand_s8(v37, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v39.u32[0];
    v36.i64[1] = v39.u32[1];
    v40 = v36;
    v41.i32[0] = v130.val[1].u8[0];
    v41.i32[1] = v130.val[1].u8[1];
    v131.val[0] = vmulq_n_f64(v38, *v12);
    *(int8x8_t *)&v38.f64[0] = vand_s8(v41, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[1] = vmulq_n_f64(vcvtq_f64_u64(v36), *v12);
    LODWORD(v38.f64[0]) = v130.val[2].u8[0];
    HIDWORD(v38.f64[0]) = v130.val[2].u8[1];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[2] = vmulq_n_f64(vcvtq_f64_u64(v36), *v12);
    LODWORD(v38.f64[0]) = v130.val[3].u8[0];
    HIDWORD(v38.f64[0]) = v130.val[3].u8[1];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[3] = vmulq_n_f64(vcvtq_f64_u64(v36), *v12);
    v42 = v31;
    vst4q_f64(v42, v131);
    v42 += 8;
    v43 = vmulq_n_f64(vcvtq_f64_u64(v40), a7);
    LODWORD(v38.f64[0]) = v130.val[1].u8[2];
    HIDWORD(v38.f64[0]) = v130.val[1].u8[3];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    LODWORD(v131.val[2].f64[0]) = v130.val[2].u8[2];
    HIDWORD(v131.val[2].f64[0]) = v130.val[2].u8[3];
    v44 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v131.val[2].f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[0] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[3].u8[2];
    HIDWORD(v38.f64[0]) = v130.val[3].u8[3];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[1] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[0].u8[4];
    HIDWORD(v38.f64[0]) = v130.val[0].u8[5];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    vst4q_f64(v42, v131);
    v45 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[1].u8[4];
    HIDWORD(v38.f64[0]) = v130.val[1].u8[5];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v46 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[2].u8[4];
    HIDWORD(v38.f64[0]) = v130.val[2].u8[5];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[0] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[3].u8[4];
    HIDWORD(v38.f64[0]) = v130.val[3].u8[5];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[1] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[0].u8[6];
    HIDWORD(v38.f64[0]) = v130.val[0].u8[7];
    v47 = v31 + 16;
    vst4q_f64(v47, v131);
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v48 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[1].u8[6];
    HIDWORD(v38.f64[0]) = v130.val[1].u8[7];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v49 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[2].u8[6];
    HIDWORD(v38.f64[0]) = v130.val[2].u8[7];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[0] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[3].u8[6];
    HIDWORD(v38.f64[0]) = v130.val[3].u8[7];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[1] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v33;
    HIDWORD(v38.f64[0]) = BYTE1(v33);
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v50 = v31 + 24;
    vst4q_f64(v50, v131);
    LODWORD(v48.f64[0]) = BYTE2(v33);
    HIDWORD(v48.f64[0]) = BYTE3(v33);
    *(int8x8_t *)&v48.f64[0] = vand_s8(*(int8x8_t *)&v48.f64[0], (int8x8_t)0xFF000000FFLL);
    *(_QWORD *)&v49.f64[0] = vextq_s8(v130.val[1], v130.val[1], 8uLL).u64[0];
    *(_QWORD *)&v131.val[0].f64[0] = vextq_s8(v130.val[2], v130.val[2], 8uLL).u64[0];
    v130.val[0].i64[0] = vextq_s8(v130.val[3], v130.val[3], 8uLL).u64[0];
    v130.val[1].i32[0] = LOBYTE(v49.f64[0]);
    v130.val[1].i32[1] = BYTE1(v49.f64[0]);
    v131.val[1] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    *(int8x8_t *)v130.val[1].i8 = vand_s8(*(int8x8_t *)v130.val[1].i8, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v130.val[1].u32[0];
    v36.i64[1] = v130.val[1].u32[1];
    v131.val[2] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v130.val[1].i32[0] = LOBYTE(v131.val[0].f64[0]);
    v130.val[1].i32[1] = BYTE1(v131.val[0].f64[0]);
    v36.i64[0] = LODWORD(v48.f64[0]);
    v36.i64[1] = HIDWORD(v48.f64[0]);
    v130.val[2] = (int8x16_t)v36;
    *(int8x8_t *)v130.val[1].i8 = vand_s8(*(int8x8_t *)v130.val[1].i8, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v130.val[1].u32[0];
    v36.i64[1] = v130.val[1].u32[1];
    v131.val[3] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v130.val[1].i32[0] = v130.val[0].u8[0];
    v130.val[1].i32[1] = v130.val[0].u8[1];
    *(int8x8_t *)v130.val[1].i8 = vand_s8(*(int8x8_t *)v130.val[1].i8, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v130.val[1].u32[0];
    v36.i64[1] = v130.val[1].u32[1];
    v51 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v130.val[1].i32[0] = BYTE4(v33);
    v130.val[1].i32[1] = BYTE5(v33);
    v52 = v31 + 32;
    vst4q_f64(v52, *(float64x2x4_t *)((char *)&v131 + 16));
    v130.val[3].i32[0] = BYTE2(v49.f64[0]);
    v130.val[3].i32[1] = BYTE3(v49.f64[0]);
    v131.val[1] = vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)v130.val[2]), a7);
    *(int8x8_t *)v130.val[2].i8 = vand_s8(*(int8x8_t *)v130.val[3].i8, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v130.val[2].u32[0];
    v36.i64[1] = v130.val[2].u32[1];
    v131.val[2] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v130.val[2].i32[0] = BYTE2(v131.val[0].f64[0]);
    v130.val[2].i32[1] = BYTE3(v131.val[0].f64[0]);
    *(int8x8_t *)v130.val[1].i8 = vand_s8(*(int8x8_t *)v130.val[1].i8, (int8x8_t)0xFF000000FFLL);
    *(int8x8_t *)v130.val[2].i8 = vand_s8(*(int8x8_t *)v130.val[2].i8, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v130.val[2].u32[0];
    v36.i64[1] = v130.val[2].u32[1];
    v131.val[3] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v130.val[2].i32[0] = v130.val[0].u8[2];
    v130.val[2].i32[1] = v130.val[0].u8[3];
    v36.i64[0] = v130.val[1].u32[0];
    v36.i64[1] = v130.val[1].u32[1];
    v130.val[1] = (int8x16_t)v36;
    *(int8x8_t *)v130.val[2].i8 = vand_s8(*(int8x8_t *)v130.val[2].i8, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v130.val[2].u32[0];
    v36.i64[1] = v130.val[2].u32[1];
    v53 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v54 = v31 + 40;
    vst4q_f64(v54, *(float64x2x4_t *)((char *)&v131 + 16));
    v130.val[1] = (int8x16_t)vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)v130.val[1]), a7);
    LODWORD(v48.f64[0]) = BYTE4(v49.f64[0]);
    HIDWORD(v48.f64[0]) = BYTE5(v49.f64[0]);
    *(int8x8_t *)&v48.f64[0] = vand_s8(*(int8x8_t *)&v48.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v48.f64[0]);
    v36.i64[1] = HIDWORD(v48.f64[0]);
    v130.val[2] = (int8x16_t)vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v48.f64[0]) = BYTE4(v131.val[0].f64[0]);
    HIDWORD(v48.f64[0]) = BYTE5(v131.val[0].f64[0]);
    *(int8x8_t *)&v48.f64[0] = vand_s8(*(int8x8_t *)&v48.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v48.f64[0]);
    v36.i64[1] = HIDWORD(v48.f64[0]);
    LODWORD(v131.val[1].f64[0]) = v130.val[0].u8[4];
    HIDWORD(v131.val[1].f64[0]) = v130.val[0].u8[5];
    v130.val[3] = (int8x16_t)vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    *(int8x8_t *)&v48.f64[0] = vand_s8(*(int8x8_t *)&v131.val[1].f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v48.f64[0]);
    v36.i64[1] = HIDWORD(v48.f64[0]);
    v55 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v56 = v31 + 48;
    vst4q_f64(v56, *(float64x2x4_t *)((char *)&v130 + 16));
    v130.val[1].i32[0] = BYTE6(v33);
    v130.val[1].i32[1] = HIBYTE(v33);
    v57 = vand_s8(*(int8x8_t *)v130.val[1].i8, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v57.u32[0];
    v36.i64[1] = v57.u32[1];
    a10 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v57.i32[0] = BYTE6(v49.f64[0]);
    v57.i32[1] = HIBYTE(v49.f64[0]);
    v58 = vand_s8(v57, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v58.u32[0];
    v36.i64[1] = v58.u32[1];
    v130.val[2] = (int8x16_t)vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v58.i32[0] = BYTE6(v131.val[0].f64[0]);
    v58.i32[1] = HIBYTE(v131.val[0].f64[0]);
    LODWORD(a9) = v130.val[0].u8[6];
    v59 = vand_s8(v58, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v59.u32[0];
    v36.i64[1] = v59.u32[1];
    HIDWORD(a9) = v130.val[0].u8[7];
    v130.val[3] = (int8x16_t)vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v60 = vand_s8(*(int8x8_t *)&a9, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v60.u32[0];
    v36.i64[1] = v60.u32[1];
    a8 = vcvtq_f64_u64(v36);
    v61 = vmulq_n_f64(a8, a7);
    result = (uint64_t)(v31 + 56);
    vst4q_f64((double *)result, *(float64x2x4_t *)a10.f64);
    v31 += 64;
    v30 -= 16;
  }
  while (v30);
  if (v29 != (v29 & 0x7FFFFFF0))
    goto LABEL_25;
LABEL_27:
  if ((int)v15 >= (int)v13)
    return result;
  v64 = v15;
  if ((int)v11 <= 1)
  {
    v70 = v13 - v15;
    if (v70 < 8
      || ((v71 = a3 + 8 * v15,
           v72 = a3 + 8 * v13,
           v73 = &a2[v15],
           v71 < (unint64_t)&a2[v13])
        ? (v74 = (unint64_t)v73 >= v72)
        : (v74 = 1),
          v74 ? (v75 = 0) : (v75 = 1),
          (unint64_t)v12 < v72 ? (v76 = v71 >= (unint64_t)(v12 + 1)) : (v76 = 1),
          !v76 || (v75 & 1) != 0))
    {
      v78 = v64;
      goto LABEL_50;
    }
    if (v70 >= 0x10)
    {
      v77 = v70 & 0xFFFFFFFFFFFFFFF0;
      v83 = vld1q_dup_f64(v12);
      v84 = (int8x16_t *)&a2[v64];
      v85 = (float64x2_t *)(a3 + 8 * v64);
      v86 = v70 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v87 = *v84++;
        v88 = vextq_s8(v87, v87, 8uLL).u64[0];
        v89.i32[0] = BYTE6(v88);
        v89.i32[1] = HIBYTE(v88);
        v90 = vand_s8(v89, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v90.u32[0];
        v91.i64[1] = v90.u32[1];
        v92.i32[0] = BYTE4(v88);
        v93 = vcvtq_f64_u64(v91);
        v92.i32[1] = BYTE5(v88);
        v94 = vand_s8(v92, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v94.u32[0];
        v91.i64[1] = v94.u32[1];
        v95.i32[0] = BYTE2(v88);
        v95.i32[1] = BYTE3(v88);
        v96 = vcvtq_f64_u64(v91);
        v97 = vand_s8(v95, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v97.u32[0];
        v91.i64[1] = v97.u32[1];
        v98 = vcvtq_f64_u64(v91);
        v99.i32[0] = v88;
        v99.i32[1] = BYTE1(v88);
        v100 = vand_s8(v99, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v100.u32[0];
        v91.i64[1] = v100.u32[1];
        v99.i32[0] = v87.u8[6];
        v101 = vcvtq_f64_u64(v91);
        v99.i32[1] = v87.u8[7];
        v102 = vand_s8(v99, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v102.u32[0];
        v91.i64[1] = v102.u32[1];
        v103.i32[0] = v87.u8[4];
        v103.i32[1] = v87.u8[5];
        v104 = vcvtq_f64_u64(v91);
        v105 = vand_s8(v103, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v105.u32[0];
        v91.i64[1] = v105.u32[1];
        v106 = vcvtq_f64_u64(v91);
        v107.i32[0] = v87.u8[2];
        v107.i32[1] = v87.u8[3];
        v108 = vand_s8(v107, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v108.u32[0];
        v91.i64[1] = v108.u32[1];
        v109.i32[0] = v87.u8[0];
        v110 = vcvtq_f64_u64(v91);
        v109.i32[1] = v87.u8[1];
        v111 = vand_s8(v109, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v111.u32[0];
        v91.i64[1] = v111.u32[1];
        v85[2] = vmulq_f64(v83, v106);
        v85[3] = vmulq_f64(v83, v104);
        *v85 = vmulq_f64(v83, vcvtq_f64_u64(v91));
        v85[1] = vmulq_f64(v83, v110);
        v85[6] = vmulq_f64(v83, v96);
        v85[7] = vmulq_f64(v83, v93);
        v85[4] = vmulq_f64(v83, v101);
        v85[5] = vmulq_f64(v83, v98);
        v85 += 8;
        v86 -= 16;
      }
      while (v86);
      if (v70 == v77)
        return result;
      if ((v70 & 8) == 0)
      {
        v78 = v77 + v64;
        goto LABEL_50;
      }
    }
    else
    {
      v77 = 0;
    }
    v112 = vld1q_dup_f64(v12);
    v78 = (v70 & 0xFFFFFFFFFFFFFFF8) + v64;
    v113 = v77 - (v70 & 0xFFFFFFFFFFFFFFF8);
    v114 = v77 + v64;
    v115 = &a2[v114];
    v116 = (float64x2_t *)(a3 + 8 * v114);
    do
    {
      v117 = *(_QWORD *)v115;
      v115 += 8;
      v118.i32[0] = BYTE6(v117);
      v118.i32[1] = HIBYTE(v117);
      v119 = vand_s8(v118, (int8x8_t)0xFF000000FFLL);
      v120.i64[0] = v119.u32[0];
      v120.i64[1] = v119.u32[1];
      v121.i32[0] = BYTE4(v117);
      v122 = vcvtq_f64_u64(v120);
      v121.i32[1] = BYTE5(v117);
      v123 = vand_s8(v121, (int8x8_t)0xFF000000FFLL);
      v120.i64[0] = v123.u32[0];
      v120.i64[1] = v123.u32[1];
      v124.i32[0] = BYTE2(v117);
      v124.i32[1] = BYTE3(v117);
      v125 = vcvtq_f64_u64(v120);
      v126 = vand_s8(v124, (int8x8_t)0xFF000000FFLL);
      v120.i64[0] = v126.u32[0];
      v120.i64[1] = v126.u32[1];
      v127 = vcvtq_f64_u64(v120);
      v128.i32[0] = v117;
      v128.i32[1] = BYTE1(v117);
      v129 = vand_s8(v128, (int8x8_t)0xFF000000FFLL);
      v120.i64[0] = v129.u32[0];
      v120.i64[1] = v129.u32[1];
      v116[2] = vmulq_f64(v112, v125);
      v116[3] = vmulq_f64(v112, v122);
      *v116 = vmulq_f64(v112, vcvtq_f64_u64(v120));
      v116[1] = vmulq_f64(v112, v127);
      v116 += 4;
      v113 += 8;
    }
    while (v113);
    if (v70 == (v70 & 0xFFFFFFFFFFFFFFF8))
      return result;
LABEL_50:
    v79 = (double *)(a3 + 8 * v78);
    v80 = &a2[v78];
    v81 = v13 - v78;
    do
    {
      v82 = *(unsigned __int8 *)v80++;
      *v79++ = *v12 * (double)v82;
      --v81;
    }
    while (v81);
    return result;
  }
  v65 = v11 - 1;
  do
  {
    LOBYTE(a6) = a2[v64];
    a6 = *v12 * (double)*(unint64_t *)&a6;
    v66 = &a2[a5];
    v67 = v65;
    v68 = v12 + 1;
    do
    {
      v69 = *v68++;
      LOBYTE(a8.f64[0]) = v66[v64];
      a8.f64[0] = (double)*(unint64_t *)&a8.f64[0];
      a6 = a6 + v69 * a8.f64[0];
      v66 += a5;
      --v67;
    }
    while (v67);
    *(double *)(a3 + 8 * v64++) = a6;
  }
  while (v64 != v13);
  return result;
}

void sub_1002FA41C()
{
  operator delete();
}

uint64_t sub_1002FA430(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002FA46C(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_100452338;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2)
      goto LABEL_21;
    v8 = *(_QWORD *)(a2 + 56);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = *(_QWORD *)(a1 + 72);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 20);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v6 = *(_DWORD *)a2;
      v18 = *(_DWORD *)(a2 + 4);
      if (v18 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v18;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v19 = *(_QWORD **)(a2 + 72);
        v20 = *(_QWORD **)(a1 + 88);
        *v20 = *v19;
        v20[1] = v19[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v7;
      }
      while (v15 < v17);
      *v6 = *(_DWORD *)a2;
      if ((int)v17 <= 2)
      {
        v18 = *(_DWORD *)(a2 + 4);
        if (v18 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v6, a2);
    goto LABEL_20;
  }
  LODWORD(v24) = 33619968;
  v25 = a1 + 16;
  v26 = 0;
  sub_1002181EC(a2, (uint64_t)&v24);
LABEL_21:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v22 != 1 && v21 != 1)
  {
    v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(&v24, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v24, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_1002FA6A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FA6D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452338;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FA774(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452338;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

float *sub_1002FA824(float *result, const __int16 *a2, unint64_t a3, int a4, int a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, uint16x8_t a9, uint16x8_t a10)
{
  uint64_t v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint16x4_t *v16;
  uint16x4_t *v17;
  float *v18;
  float v19;
  _DWORD *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  float *v28;
  float v29;
  unint64_t v30;
  unint64_t v31;
  float *v32;
  uint64_t v33;
  const __int16 *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  const __int16 *v39;
  uint16x8_t v40;
  float *v41;
  float32x4_t v42;
  uint16x8_t *v43;
  float32x4_t *v44;
  unint64_t v45;
  uint16x8_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4x4_t v49;
  float32x4x4_t v50;

  v10 = *((unsigned int *)result + 2);
  v11 = (float *)*((_QWORD *)result + 4);
  v12 = (a5 * a4);
  v13 = (v12 - 4);
  if ((int)v12 < 4)
  {
    LODWORD(v14) = 0;
    goto LABEL_15;
  }
  if ((int)v10 <= 1)
  {
    if (v13 >= 0x1C
      && ((unint64_t)(v11 + 1) <= a3 || (unint64_t)v11 >= ((4 * v13) & 0x3FFFFFFF0) + a3 + 16))
    {
      v36 = (v13 >> 2) + 1;
      v14 = 4 * (v36 & 0x7FFFFFF8);
      v37 = v36 & 0x7FFFFFF8;
      v38 = (float *)a3;
      v39 = a2;
      do
      {
        a6.f32[0] = *v11;
        *(int16x8x4_t *)(&a8 - 1) = vld4q_s16(v39);
        v39 += 32;
        v49.val[0] = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v40)), *v11);
        v49.val[1] = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)a8)), *v11);
        v49.val[2] = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(a9)), *v11);
        v49.val[3] = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(a10)), *v11);
        v50.val[0] = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v40.i8)), *v11);
        v50.val[1] = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)a8.f32)), *v11);
        v50.val[2] = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)a9.i8)), *v11);
        a7 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)a10.i8));
        v50.val[3] = vmulq_n_f32(a7, *v11);
        result = v38 + 32;
        vst4q_f32(v38, v50);
        v41 = v38 + 16;
        vst4q_f32(v41, v49);
        v38 = result;
        v37 -= 8;
      }
      while (v37);
      if (v36 == (v36 & 0x7FFFFFF8))
        goto LABEL_15;
    }
    else
    {
      v14 = 0;
    }
    v20 = (_DWORD *)(a3 + 4 * v14 + 8);
    v21 = (unsigned __int16 *)&a2[v14 + 2];
    do
    {
      a7.i16[0] = *(v21 - 2);
      a7.f32[0] = *v11 * (float)a7.u32[0];
      a8.i16[0] = *(v21 - 1);
      a8.f32[0] = *v11 * (float)a8.u32[0];
      a9.i16[0] = *v21;
      *(float *)a9.i32 = *v11 * (float)a9.u32[0];
      a10.i16[0] = v21[1];
      *(float *)a10.i32 = (float)a10.u32[0];
      a6.f32[0] = *v11 * *(float *)a10.i32;
      *(v20 - 2) = a7.i32[0];
      *(v20 - 1) = a8.i32[0];
      *v20 = a9.i32[0];
      v20[1] = a6.i32[0];
      v20 += 4;
      v14 += 4;
      v21 += 4;
    }
    while (v14 <= v13);
    goto LABEL_15;
  }
  v14 = 0;
  v15 = a5;
  v16 = (uint16x4_t *)&a2[v15];
  do
  {
    a6 = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&a2[v14])), *v11);
    v17 = v16;
    result = (float *)(v10 - 1);
    v18 = v11 + 1;
    do
    {
      v19 = *v18++;
      a8 = vcvtq_f32_u32(vmovl_u16(*v17));
      a6 = vmlaq_n_f32(a6, a8, v19);
      v17 = (uint16x4_t *)((char *)v17 + v15 * 2);
      result = (float *)((char *)result - 1);
    }
    while (result);
    *(float32x4_t *)(a3 + 4 * v14) = a6;
    v14 += 4;
    ++v16;
  }
  while (v14 <= v13);
LABEL_15:
  if ((int)v14 >= (int)v12)
    return result;
  v22 = v14;
  if ((int)v10 <= 1)
  {
    v30 = v12 - v14;
    if (v30 >= 0x10
      && ((v31 = a3 + 4 * v14, v31 >= (unint64_t)(v11 + 1))
       || (unint64_t)v11 >= a3 + 4 * v12))
    {
      v14 = (v30 & 0xFFFFFFFFFFFFFFF0) + v14;
      v42 = vld1q_dup_f32(v11);
      v43 = (uint16x8_t *)&a2[v22 + 8];
      v44 = (float32x4_t *)(v31 + 32);
      v45 = v30 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v46 = v43[-1];
        v47 = vcvtq_f32_u32(vmovl_high_u16(*v43));
        v48 = vmulq_f32(v42, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v43->i8)));
        v44[-2] = vmulq_f32(v42, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v46.i8)));
        v44[-1] = vmulq_f32(v42, vcvtq_f32_u32(vmovl_high_u16(v46)));
        *v44 = v48;
        v44[1] = vmulq_f32(v42, v47);
        v44 += 4;
        v43 += 2;
        v45 -= 16;
      }
      while (v45);
      if (v30 == (v30 & 0xFFFFFFFFFFFFFFF0))
        return result;
    }
    else
    {
      v14 = v14;
    }
    v32 = (float *)(a3 + 4 * v14);
    v33 = v12 - v14;
    v34 = &a2[v14];
    do
    {
      v35 = *(unsigned __int16 *)v34++;
      *v32++ = *v11 * (float)v35;
      --v33;
    }
    while (v33);
    return result;
  }
  v23 = v10 - 1;
  v24 = a5;
  v25 = (unsigned __int16 *)&a2[v14 + v24];
  do
  {
    a6.i16[0] = a2[v22];
    a6.f32[0] = *v11 * (float)a6.u32[0];
    v26 = v25;
    v27 = v23;
    v28 = v11 + 1;
    do
    {
      v29 = *v28++;
      a8.i16[0] = *v26;
      a8.f32[0] = (float)a8.u32[0];
      a6.f32[0] = a6.f32[0] + (float)(v29 * a8.f32[0]);
      v26 = (unsigned __int16 *)((char *)v26 + v24 * 2);
      --v27;
    }
    while (v27);
    *(_DWORD *)(a3 + 4 * v22++) = a6.i32[0];
    ++v25;
  }
  while (v22 != v12);
  return result;
}

void sub_1002FAB3C()
{
  operator delete();
}

uint64_t sub_1002FAB50(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002FAB8C(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_1004523B8;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2)
      goto LABEL_21;
    v8 = *(_QWORD *)(a2 + 56);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = *(_QWORD *)(a1 + 72);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 20);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v6 = *(_DWORD *)a2;
      v18 = *(_DWORD *)(a2 + 4);
      if (v18 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v18;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v19 = *(_QWORD **)(a2 + 72);
        v20 = *(_QWORD **)(a1 + 88);
        *v20 = *v19;
        v20[1] = v19[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v7;
      }
      while (v15 < v17);
      *v6 = *(_DWORD *)a2;
      if ((int)v17 <= 2)
      {
        v18 = *(_DWORD *)(a2 + 4);
        if (v18 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v6, a2);
    goto LABEL_20;
  }
  LODWORD(v24) = 33619968;
  v25 = a1 + 16;
  v26 = 0;
  sub_1002181EC(a2, (uint64_t)&v24);
LABEL_21:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v22 != 1 && v21 != 1)
  {
    v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(&v24, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v24, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_1002FADC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FADF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004523B8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FAE94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004523B8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

uint64_t sub_1002FAF44(uint64_t result, const __int16 *a2, unint64_t a3, int a4, int a5, double a6, float64x2_t a7, float64x2_t a8, float64x2_t a9, float64x2_t a10, double a11)
{
  uint64_t v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __int16 *v18;
  double v19;
  _WORD *v20;
  uint64_t v21;
  double *v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  uint64_t v34;
  double *v35;
  double v36;
  unint64_t v37;
  float64x2_t *v38;
  double *v39;
  uint64_t v40;
  const __int16 *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  const __int16 *v46;
  uint32x4_t v47;
  uint64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  uint32x4_t v51;
  float64x2_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint64x2_t v58;
  uint64x2_t v59;
  double *v60;
  double *v61;
  float64x2_t v62;
  uint16x8_t *v63;
  unint64_t v64;
  uint16x8_t v65;
  uint32x4_t v66;
  uint64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  uint32x4_t v70;
  float64x2_t v71;
  float64x2x4_t v72;
  int16x8x4_t v73;
  float64x2x4_t v74;
  float64x2x4_t v75;

  v11 = *(unsigned int *)(result + 8);
  v12 = *(double **)(result + 32);
  v13 = (a5 * a4);
  v14 = (v13 - 4);
  if ((int)v13 < 4)
  {
    LODWORD(v15) = 0;
    goto LABEL_15;
  }
  if ((int)v11 <= 1)
  {
    if (v14 >= 0x1C
      && ((unint64_t)(v12 + 1) <= a3 || (unint64_t)v12 >= ((8 * v14) & 0x7FFFFFFE0) + a3 + 32))
    {
      v43 = (v14 >> 2) + 1;
      v15 = 4 * (v43 & 0x7FFFFFF8);
      v44 = v43 & 0x7FFFFFF8;
      v45 = (double *)a3;
      v46 = a2;
      do
      {
        a6 = *v12;
        v73 = vld4q_s16(v46);
        v46 += 32;
        v47 = vmovl_u16(*(uint16x4_t *)v73.val[0].i8);
        v48.i64[0] = v47.u32[0];
        v48.i64[1] = v47.u32[1];
        v49 = vcvtq_f64_u64(v48);
        v48.i64[0] = v47.u32[2];
        v48.i64[1] = v47.u32[3];
        v50 = vcvtq_f64_u64(v48);
        v51 = vmovl_high_u16((uint16x8_t)v73.val[0]);
        v48.i64[0] = v51.u32[0];
        v48.i64[1] = v51.u32[1];
        v52 = vcvtq_f64_u64(v48);
        v48.i64[0] = v51.u32[2];
        v48.i64[1] = v51.u32[3];
        a7 = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        v53 = vmovl_high_u16((uint16x8_t)v73.val[1]);
        v48.i64[0] = v53.u32[2];
        v48.i64[1] = v53.u32[3];
        a8 = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        v54 = vmovl_high_u16((uint16x8_t)v73.val[2]);
        v74.val[0] = vmulq_n_f64(v52, *v12);
        v48.i64[0] = v53.u32[0];
        v48.i64[1] = v53.u32[1];
        v74.val[1] = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        v75.val[0] = vmulq_n_f64(v50, *v12);
        v55 = vmovl_u16(*(uint16x4_t *)v73.val[1].i8);
        v48.i64[0] = v55.u32[2];
        v48.i64[1] = v55.u32[3];
        v75.val[1] = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        v56 = vmovl_u16(*(uint16x4_t *)v73.val[2].i8);
        v48.i64[0] = v56.u32[2];
        v48.i64[1] = v56.u32[3];
        v75.val[2] = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        v57 = vmovl_high_u16((uint16x8_t)v73.val[3]);
        v73.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v73.val[3].i8);
        v48.i64[0] = v73.val[0].u32[2];
        v48.i64[1] = v73.val[0].u32[3];
        v75.val[3] = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        v72.val[0] = vmulq_n_f64(v49, *v12);
        v48.i64[0] = v55.u32[0];
        v48.i64[1] = v55.u32[1];
        v72.val[1] = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        v48.i64[0] = v56.u32[0];
        v48.i64[1] = v56.u32[1];
        v72.val[2] = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        v48.i64[0] = v54.u32[2];
        v48.i64[1] = v54.u32[3];
        v58 = v48;
        v48.i64[0] = v54.u32[0];
        v48.i64[1] = v54.u32[1];
        v59 = v48;
        v48.i64[0] = v73.val[0].u32[0];
        v48.i64[1] = v73.val[0].u32[1];
        v72.val[3] = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        v60 = v45;
        vst4q_f64(v60, v72);
        v60 += 8;
        vst4q_f64(v60, v75);
        v74.val[2] = vmulq_n_f64(vcvtq_f64_u64(v59), a6);
        v48.i64[0] = v57.u32[0];
        v48.i64[1] = v57.u32[1];
        v74.val[3] = vmulq_n_f64(vcvtq_f64_u64(v48), a6);
        v61 = v45 + 16;
        vst4q_f64(v61, v74);
        a9 = vmulq_n_f64(vcvtq_f64_u64(v58), a6);
        v48.i64[0] = v57.u32[2];
        v48.i64[1] = v57.u32[3];
        a10 = vmulq_n_f64(vcvtq_f64_u64(v48), a6);
        result = (uint64_t)(v45 + 24);
        vst4q_f64((double *)result, *(float64x2x4_t *)a7.f64);
        v45 += 32;
        v44 -= 8;
      }
      while (v44);
      if (v43 == (v43 & 0x7FFFFFF8))
        goto LABEL_15;
    }
    else
    {
      v15 = 0;
    }
    v27 = a3 + 8 * v15 + 16;
    v28 = (unsigned __int16 *)&a2[v15 + 2];
    do
    {
      LOWORD(a7.f64[0]) = *(v28 - 2);
      a7.f64[0] = *v12 * (double)*(unint64_t *)&a7.f64[0];
      LOWORD(a8.f64[0]) = *(v28 - 1);
      a8.f64[0] = *v12 * (double)*(unint64_t *)&a8.f64[0];
      LOWORD(a9.f64[0]) = *v28;
      a9.f64[0] = *v12 * (double)*(unint64_t *)&a9.f64[0];
      LOWORD(a10.f64[0]) = v28[1];
      a10.f64[0] = (double)*(unint64_t *)&a10.f64[0];
      a6 = *v12 * a10.f64[0];
      *(float64_t *)(v27 - 16) = a7.f64[0];
      *(float64_t *)(v27 - 8) = a8.f64[0];
      *(float64_t *)v27 = a9.f64[0];
      *(double *)(v27 + 8) = a6;
      v27 += 32;
      v15 += 4;
      v28 += 4;
    }
    while (v15 <= v14);
    goto LABEL_15;
  }
  v15 = 0;
  v16 = a5;
  v17 = (uint64_t)&a2[v16 + 2];
  do
  {
    v18 = &a2[v15];
    LOWORD(a6) = *v18;
    a6 = *v12 * (double)*(unint64_t *)&a6;
    LOWORD(a7.f64[0]) = v18[1];
    a7.f64[0] = *v12 * (double)*(unint64_t *)&a7.f64[0];
    LOWORD(a8.f64[0]) = v18[2];
    a8.f64[0] = *v12 * (double)*(unint64_t *)&a8.f64[0];
    LOWORD(a10.f64[0]) = v18[3];
    v19 = *v12 * (double)*(unint64_t *)&a10.f64[0];
    v20 = (_WORD *)v17;
    v21 = v11 - 1;
    v22 = v12 + 1;
    do
    {
      v23 = *v22++;
      a10.f64[0] = v23;
      LOWORD(a11) = *(v20 - 2);
      *(double *)&v24 = (double)*(unint64_t *)&a11;
      a6 = a6 + v23 * *(double *)&v24;
      LOWORD(v24) = *(v20 - 1);
      *(double *)&v25 = (double)v24;
      a7.f64[0] = a7.f64[0] + v23 * *(double *)&v25;
      LOWORD(v25) = *v20;
      *(double *)&v26 = (double)v25;
      a8.f64[0] = a8.f64[0] + v23 * *(double *)&v26;
      LOWORD(v26) = v20[1];
      a11 = (double)v26;
      v19 = v19 + v23 * a11;
      v20 = (_WORD *)((char *)v20 + v16 * 2);
      --v21;
    }
    while (v21);
    *(double *)(a3 + 8 * v15) = a6;
    *(float64_t *)(a3 + ((8 * v15) | 8)) = a7.f64[0];
    result = (8 * v15) | 0x10;
    *(float64_t *)(a3 + result) = a8.f64[0];
    *(double *)(a3 + ((8 * v15) | 0x18)) = v19;
    v15 += 4;
    v17 += 8;
  }
  while (v15 <= v14);
LABEL_15:
  if ((int)v15 >= (int)v13)
    return result;
  v29 = v15;
  if ((int)v11 <= 1)
  {
    v37 = v13 - v15;
    if (v37 >= 8
      && ((v38 = (float64x2_t *)(a3 + 8 * v15), v38 >= (float64x2_t *)(v12 + 1))
       || (unint64_t)v12 >= a3 + 8 * v13))
    {
      v15 = (v37 & 0xFFFFFFFFFFFFFFF8) + v15;
      v62 = vld1q_dup_f64(v12);
      v63 = (uint16x8_t *)&a2[v29];
      v64 = v37 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v65 = *v63++;
        v66 = vmovl_high_u16(v65);
        v67.i64[0] = v66.u32[2];
        v67.i64[1] = v66.u32[3];
        v68 = vcvtq_f64_u64(v67);
        v67.i64[0] = v66.u32[0];
        v67.i64[1] = v66.u32[1];
        v69 = vcvtq_f64_u64(v67);
        v70 = vmovl_u16(*(uint16x4_t *)v65.i8);
        v67.i64[0] = v70.u32[2];
        v67.i64[1] = v70.u32[3];
        v71 = vcvtq_f64_u64(v67);
        v67.i64[0] = v70.u32[0];
        v67.i64[1] = v70.u32[1];
        v38[2] = vmulq_f64(v62, v69);
        v38[3] = vmulq_f64(v62, v68);
        *v38 = vmulq_f64(v62, vcvtq_f64_u64(v67));
        v38[1] = vmulq_f64(v62, v71);
        v38 += 4;
        v64 -= 8;
      }
      while (v64);
      if (v37 == (v37 & 0xFFFFFFFFFFFFFFF8))
        return result;
    }
    else
    {
      v15 = v15;
    }
    v39 = (double *)(a3 + 8 * v15);
    v40 = v13 - v15;
    v41 = &a2[v15];
    do
    {
      v42 = *(unsigned __int16 *)v41++;
      *v39++ = *v12 * (double)v42;
      --v40;
    }
    while (v40);
    return result;
  }
  v30 = v11 - 1;
  v31 = a5;
  v32 = (unsigned __int16 *)&a2[v15 + v31];
  do
  {
    LOWORD(a6) = a2[v29];
    a6 = *v12 * (double)*(unint64_t *)&a6;
    v33 = v32;
    v34 = v30;
    v35 = v12 + 1;
    do
    {
      v36 = *v35++;
      LOWORD(a8.f64[0]) = *v33;
      a8.f64[0] = (double)*(unint64_t *)&a8.f64[0];
      a6 = a6 + v36 * a8.f64[0];
      v33 = (unsigned __int16 *)((char *)v33 + v31 * 2);
      --v34;
    }
    while (v34);
    *(double *)(a3 + 8 * v29++) = a6;
    ++v32;
  }
  while (v29 != v13);
  return result;
}

void sub_1002FB354()
{
  operator delete();
}

uint64_t sub_1002FB368(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002FB3A4(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_100452438;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2)
      goto LABEL_21;
    v8 = *(_QWORD *)(a2 + 56);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = *(_QWORD *)(a1 + 72);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 20);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v6 = *(_DWORD *)a2;
      v18 = *(_DWORD *)(a2 + 4);
      if (v18 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v18;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v19 = *(_QWORD **)(a2 + 72);
        v20 = *(_QWORD **)(a1 + 88);
        *v20 = *v19;
        v20[1] = v19[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v7;
      }
      while (v15 < v17);
      *v6 = *(_DWORD *)a2;
      if ((int)v17 <= 2)
      {
        v18 = *(_DWORD *)(a2 + 4);
        if (v18 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v6, a2);
    goto LABEL_20;
  }
  LODWORD(v24) = 33619968;
  v25 = a1 + 16;
  v26 = 0;
  sub_1002181EC(a2, (uint64_t)&v24);
LABEL_21:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v22 != 1 && v21 != 1)
  {
    v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(&v24, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v24, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_1002FB5D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FB60C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452438;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FB6AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452438;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

float *sub_1002FB75C(float *result, const __int16 *a2, unint64_t a3, int a4, int a5, double a6, float32x4_t a7, float32x4_t a8, int16x8_t a9, int16x8_t a10)
{
  uint64_t v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int16x4_t *v16;
  float32x4_t v17;
  int16x4_t *v18;
  float *v19;
  float v20;
  uint64_t v21;
  unsigned __int16 *v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  float v28;
  unsigned __int16 *v29;
  uint64_t v30;
  float *v31;
  float v32;
  unint64_t v33;
  unint64_t v34;
  float *v35;
  uint64_t v36;
  const __int16 *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  const __int16 *v42;
  int16x8_t v43;
  float *v44;
  float32x4_t v45;
  int16x8_t *v46;
  float32x4_t *v47;
  unint64_t v48;
  int16x8_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4x4_t v52;
  float32x4x4_t v53;

  v10 = *((unsigned int *)result + 2);
  v11 = (float *)*((_QWORD *)result + 4);
  v12 = (a5 * a4);
  v13 = (v12 - 4);
  if ((int)v12 < 4)
  {
    LODWORD(v14) = 0;
    goto LABEL_15;
  }
  if ((int)v10 <= 1)
  {
    if (v13 >= 0x1C
      && ((unint64_t)(v11 + 1) <= a3 || (unint64_t)v11 >= ((4 * v13) & 0x3FFFFFFF0) + a3 + 16))
    {
      v39 = (v13 >> 2) + 1;
      v14 = 4 * (v39 & 0x7FFFFFF8);
      v40 = v39 & 0x7FFFFFF8;
      v41 = (float *)a3;
      v42 = a2;
      do
      {
        *(int16x8x4_t *)(&a8 - 1) = vld4q_s16(v42);
        v42 += 32;
        v52.val[0] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v43)), *v11);
        v52.val[1] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16((int16x8_t)a8)), *v11);
        v52.val[2] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(a9)), *v11);
        v52.val[3] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(a10)), *v11);
        v53.val[0] = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v43.i8)), *v11);
        v53.val[1] = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)a8.f32)), *v11);
        v53.val[2] = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)a9.i8)), *v11);
        a7 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)a10.i8));
        v53.val[3] = vmulq_n_f32(a7, *v11);
        result = v41 + 32;
        vst4q_f32(v41, v53);
        v44 = v41 + 16;
        vst4q_f32(v44, v52);
        v41 = result;
        v40 -= 8;
      }
      while (v40);
      if (v39 == (v39 & 0x7FFFFFF8))
        goto LABEL_15;
    }
    else
    {
      v14 = 0;
    }
    v21 = a3 + 4 * v14 + 8;
    v22 = (unsigned __int16 *)&a2[v14 + 2];
    do
    {
      a7.i16[0] = *(v22 - 2);
      a7.i64[0] = vmovl_s16(*(int16x4_t *)a7.f32).u64[0];
      a7.f32[0] = *v11 * (float)a7.i32[0];
      a8.i16[0] = *(v22 - 1);
      a8.i64[0] = vmovl_s16(*(int16x4_t *)a8.f32).u64[0];
      a8.f32[0] = *v11 * (float)a8.i32[0];
      a9.i16[0] = *v22;
      a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.i8).u64[0];
      *(float *)a9.i32 = *v11 * (float)a9.i32[0];
      a10.i16[0] = v22[1];
      a10.i64[0] = vmovl_s16(*(int16x4_t *)a10.i8).u64[0];
      *(float *)a10.i32 = (float)a10.i32[0];
      v23 = *v11 * *(float *)a10.i32;
      *(_DWORD *)(v21 - 8) = a7.i32[0];
      *(_DWORD *)(v21 - 4) = a8.i32[0];
      *(_DWORD *)v21 = a9.i32[0];
      *(float *)(v21 + 4) = v23;
      v21 += 16;
      v14 += 4;
      v22 += 4;
    }
    while (v14 <= v13);
    goto LABEL_15;
  }
  v14 = 0;
  v15 = a5;
  v16 = (int16x4_t *)&a2[v15];
  do
  {
    a7 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)&a2[v14]));
    v17 = vmulq_n_f32(a7, *v11);
    v18 = v16;
    result = (float *)(v10 - 1);
    v19 = v11 + 1;
    do
    {
      v20 = *v19++;
      a7.i16[1] = HIWORD(v20);
      a8 = vcvtq_f32_s32(vmovl_s16(*v18));
      v17 = vmlaq_n_f32(v17, a8, v20);
      v18 = (int16x4_t *)((char *)v18 + v15 * 2);
      result = (float *)((char *)result - 1);
    }
    while (result);
    *(float32x4_t *)(a3 + 4 * v14) = v17;
    v14 += 4;
    ++v16;
  }
  while (v14 <= v13);
LABEL_15:
  if ((int)v14 >= (int)v12)
    return result;
  v24 = v14;
  if ((int)v10 <= 1)
  {
    v33 = v12 - v14;
    if (v33 >= 0x10
      && ((v34 = a3 + 4 * v14, v34 >= (unint64_t)(v11 + 1))
       || (unint64_t)v11 >= a3 + 4 * v12))
    {
      v14 = (v33 & 0xFFFFFFFFFFFFFFF0) + v14;
      v45 = vld1q_dup_f32(v11);
      v46 = (int16x8_t *)&a2[v24 + 8];
      v47 = (float32x4_t *)(v34 + 32);
      v48 = v33 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v49 = v46[-1];
        v50 = vcvtq_f32_s32(vmovl_high_s16(*v46));
        v51 = vmulq_f32(v45, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v46->i8)));
        v47[-2] = vmulq_f32(v45, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v49.i8)));
        v47[-1] = vmulq_f32(v45, vcvtq_f32_s32(vmovl_high_s16(v49)));
        *v47 = v51;
        v47[1] = vmulq_f32(v45, v50);
        v47 += 4;
        v46 += 2;
        v48 -= 16;
      }
      while (v48);
      if (v33 == (v33 & 0xFFFFFFFFFFFFFFF0))
        return result;
    }
    else
    {
      v14 = v14;
    }
    v35 = (float *)(a3 + 4 * v14);
    v36 = v12 - v14;
    v37 = &a2[v14];
    do
    {
      v38 = *v37++;
      *v35++ = *v11 * (float)v38;
      --v36;
    }
    while (v36);
    return result;
  }
  v25 = v10 - 1;
  v26 = a5;
  v27 = (unsigned __int16 *)&a2[v14 + v26];
  do
  {
    a7.i16[0] = a2[v24];
    a7.i64[0] = vmovl_s16(*(int16x4_t *)a7.f32).u64[0];
    v28 = *v11 * (float)a7.i32[0];
    v29 = v27;
    v30 = v25;
    v31 = v11 + 1;
    do
    {
      v32 = *v31++;
      a7.i16[1] = HIWORD(v32);
      a8.i16[0] = *v29;
      a8.i64[0] = vmovl_s16(*(int16x4_t *)a8.f32).u64[0];
      a8.f32[0] = (float)a8.i32[0];
      v28 = v28 + (float)(v32 * a8.f32[0]);
      v29 = (unsigned __int16 *)((char *)v29 + v26 * 2);
      --v30;
    }
    while (v30);
    *(float *)(a3 + 4 * v24++) = v28;
    ++v27;
  }
  while (v24 != v12);
  return result;
}

void sub_1002FBA8C()
{
  operator delete();
}

uint64_t sub_1002FBAA0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002FBADC(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_1004524B8;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2)
      goto LABEL_21;
    v8 = *(_QWORD *)(a2 + 56);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = *(_QWORD *)(a1 + 72);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 20);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v6 = *(_DWORD *)a2;
      v18 = *(_DWORD *)(a2 + 4);
      if (v18 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v18;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v19 = *(_QWORD **)(a2 + 72);
        v20 = *(_QWORD **)(a1 + 88);
        *v20 = *v19;
        v20[1] = v19[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v7;
      }
      while (v15 < v17);
      *v6 = *(_DWORD *)a2;
      if ((int)v17 <= 2)
      {
        v18 = *(_DWORD *)(a2 + 4);
        if (v18 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v6, a2);
    goto LABEL_20;
  }
  LODWORD(v24) = 33619968;
  v25 = a1 + 16;
  v26 = 0;
  sub_1002181EC(a2, (uint64_t)&v24);
LABEL_21:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v22 != 1 && v21 != 1)
  {
    v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(&v24, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v24, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_1002FBD10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FBD44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004524B8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FBDE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004524B8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

uint64_t sub_1002FBE94(uint64_t result, const __int16 *a2, unint64_t a3, int a4, int a5, double a6, float64x2_t a7, float64x2_t a8, float64x2_t a9, float64x2_t a10, int16x4_t a11)
{
  uint64_t v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __int16 *v18;
  double v19;
  __int16 *v20;
  uint64_t v21;
  double *v22;
  double v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  double v34;
  unsigned __int16 *v35;
  uint64_t v36;
  double *v37;
  double v38;
  unint64_t v39;
  float64x2_t *v40;
  double *v41;
  uint64_t v42;
  const __int16 *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  const __int16 *v48;
  double v49;
  int32x4_t v50;
  int64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  int32x4_t v54;
  float64x2_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int64x2_t v61;
  int64x2_t v62;
  double *v63;
  double *v64;
  float64x2_t v65;
  int16x8_t *v66;
  unint64_t v67;
  int16x8_t v68;
  int32x4_t v69;
  int64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  int32x4_t v73;
  float64x2_t v74;
  float64x2x4_t v75;
  int16x8x4_t v76;
  float64x2x4_t v77;
  float64x2x4_t v78;

  v11 = *(unsigned int *)(result + 8);
  v12 = *(double **)(result + 32);
  v13 = (a5 * a4);
  v14 = (v13 - 4);
  if ((int)v13 < 4)
  {
    LODWORD(v15) = 0;
    goto LABEL_15;
  }
  if ((int)v11 <= 1)
  {
    if (v14 >= 0x1C
      && ((unint64_t)(v12 + 1) <= a3 || (unint64_t)v12 >= ((8 * v14) & 0x7FFFFFFE0) + a3 + 32))
    {
      v45 = (v14 >> 2) + 1;
      v15 = 4 * (v45 & 0x7FFFFFF8);
      v46 = v45 & 0x7FFFFFF8;
      v47 = (double *)a3;
      v48 = a2;
      do
      {
        v49 = *v12;
        v76 = vld4q_s16(v48);
        v48 += 32;
        v50 = vmovl_s16(*(int16x4_t *)v76.val[0].i8);
        v51.i64[0] = v50.i32[0];
        v51.i64[1] = v50.i32[1];
        v52 = vcvtq_f64_s64(v51);
        v51.i64[0] = v50.i32[2];
        v51.i64[1] = v50.i32[3];
        v53 = vcvtq_f64_s64(v51);
        v54 = vmovl_high_s16(v76.val[0]);
        v51.i64[0] = v54.i32[0];
        v51.i64[1] = v54.i32[1];
        v55 = vcvtq_f64_s64(v51);
        v51.i64[0] = v54.i32[2];
        v51.i64[1] = v54.i32[3];
        a7 = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        v56 = vmovl_high_s16(v76.val[1]);
        v51.i64[0] = v56.i32[2];
        v51.i64[1] = v56.i32[3];
        a8 = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        v57 = vmovl_high_s16(v76.val[2]);
        v77.val[0] = vmulq_n_f64(v55, *v12);
        v51.i64[0] = v56.i32[0];
        v51.i64[1] = v56.i32[1];
        v77.val[1] = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        v78.val[0] = vmulq_n_f64(v53, *v12);
        v58 = vmovl_s16(*(int16x4_t *)v76.val[1].i8);
        v51.i64[0] = v58.i32[2];
        v51.i64[1] = v58.i32[3];
        v78.val[1] = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        v59 = vmovl_s16(*(int16x4_t *)v76.val[2].i8);
        v51.i64[0] = v59.i32[2];
        v51.i64[1] = v59.i32[3];
        v78.val[2] = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        v60 = vmovl_high_s16(v76.val[3]);
        v76.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v76.val[3].i8);
        v51.i64[0] = v76.val[0].i32[2];
        v51.i64[1] = v76.val[0].i32[3];
        v78.val[3] = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        v75.val[0] = vmulq_n_f64(v52, *v12);
        v51.i64[0] = v58.i32[0];
        v51.i64[1] = v58.i32[1];
        v75.val[1] = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        v51.i64[0] = v59.i32[0];
        v51.i64[1] = v59.i32[1];
        v75.val[2] = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        v51.i64[0] = v57.i32[2];
        v51.i64[1] = v57.i32[3];
        v61 = v51;
        v51.i64[0] = v57.i32[0];
        v51.i64[1] = v57.i32[1];
        v62 = v51;
        v51.i64[0] = v76.val[0].i32[0];
        v51.i64[1] = v76.val[0].i32[1];
        v75.val[3] = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        v63 = v47;
        vst4q_f64(v63, v75);
        v63 += 8;
        vst4q_f64(v63, v78);
        v77.val[2] = vmulq_n_f64(vcvtq_f64_s64(v62), v49);
        v51.i64[0] = v60.i32[0];
        v51.i64[1] = v60.i32[1];
        v77.val[3] = vmulq_n_f64(vcvtq_f64_s64(v51), v49);
        v64 = v47 + 16;
        vst4q_f64(v64, v77);
        a9 = vmulq_n_f64(vcvtq_f64_s64(v61), v49);
        v51.i64[0] = v60.i32[2];
        v51.i64[1] = v60.i32[3];
        a10 = vmulq_n_f64(vcvtq_f64_s64(v51), v49);
        result = (uint64_t)(v47 + 24);
        vst4q_f64((double *)result, *(float64x2x4_t *)a7.f64);
        v47 += 32;
        v46 -= 8;
      }
      while (v46);
      if (v45 == (v45 & 0x7FFFFFF8))
        goto LABEL_15;
    }
    else
    {
      v15 = 0;
    }
    v27 = a3 + 8 * v15 + 16;
    v28 = (unsigned __int16 *)&a2[v15 + 2];
    do
    {
      LOWORD(a7.f64[0]) = *(v28 - 2);
      a7.f64[0] = *v12 * (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0];
      LOWORD(a8.f64[0]) = *(v28 - 1);
      a8.f64[0] = *v12 * (double)vmovl_s16(*(int16x4_t *)&a8.f64[0]).i32[0];
      LOWORD(a9.f64[0]) = *v28;
      a9.f64[0] = *v12 * (double)vmovl_s16(*(int16x4_t *)&a9.f64[0]).i32[0];
      LOWORD(a10.f64[0]) = v28[1];
      a10.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a10.f64[0]).i32[0];
      v29 = *v12 * a10.f64[0];
      *(float64_t *)(v27 - 16) = a7.f64[0];
      *(float64_t *)(v27 - 8) = a8.f64[0];
      *(float64_t *)v27 = a9.f64[0];
      *(double *)(v27 + 8) = v29;
      v27 += 32;
      v15 += 4;
      v28 += 4;
    }
    while (v15 <= v14);
    goto LABEL_15;
  }
  v15 = 0;
  v16 = a5;
  v17 = (uint64_t)&a2[v16 + 2];
  do
  {
    v18 = &a2[v15];
    LOWORD(a6) = *v18;
    a6 = *v12 * (double)vmovl_s16(*(int16x4_t *)&a6).i32[0];
    LOWORD(a7.f64[0]) = v18[1];
    a7.f64[0] = *v12 * (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0];
    LOWORD(a8.f64[0]) = v18[2];
    a8.f64[0] = *v12 * (double)vmovl_s16(*(int16x4_t *)&a8.f64[0]).i32[0];
    LOWORD(a10.f64[0]) = v18[3];
    v19 = *v12 * (double)vmovl_s16(*(int16x4_t *)&a10.f64[0]).i32[0];
    v20 = (__int16 *)v17;
    v21 = v11 - 1;
    v22 = v12 + 1;
    do
    {
      v23 = *v22++;
      a10.f64[0] = v23;
      a11.i16[0] = *(v20 - 2);
      *(double *)&v24 = (double)vmovl_s16(a11).i32[0];
      a6 = a6 + v23 * *(double *)&v24;
      v24.i16[0] = *(v20 - 1);
      *(double *)&v25 = (double)vmovl_s16(v24).i32[0];
      a7.f64[0] = a7.f64[0] + v23 * *(double *)&v25;
      v25.i16[0] = *v20;
      *(double *)&v26 = (double)vmovl_s16(v25).i32[0];
      a8.f64[0] = a8.f64[0] + v23 * *(double *)&v26;
      v26.i16[0] = v20[1];
      *(double *)&a11 = (double)vmovl_s16(v26).i32[0];
      v19 = v19 + v23 * *(double *)&a11;
      v20 = (__int16 *)((char *)v20 + v16 * 2);
      --v21;
    }
    while (v21);
    *(double *)(a3 + 8 * v15) = a6;
    *(float64_t *)(a3 + ((8 * v15) | 8)) = a7.f64[0];
    result = (8 * v15) | 0x10;
    *(float64_t *)(a3 + result) = a8.f64[0];
    *(double *)(a3 + ((8 * v15) | 0x18)) = v19;
    v15 += 4;
    v17 += 8;
  }
  while (v15 <= v14);
LABEL_15:
  if ((int)v15 >= (int)v13)
    return result;
  v30 = v15;
  if ((int)v11 <= 1)
  {
    v39 = v13 - v15;
    if (v39 >= 8
      && ((v40 = (float64x2_t *)(a3 + 8 * v15), v40 >= (float64x2_t *)(v12 + 1))
       || (unint64_t)v12 >= a3 + 8 * v13))
    {
      v15 = (v39 & 0xFFFFFFFFFFFFFFF8) + v15;
      v65 = vld1q_dup_f64(v12);
      v66 = (int16x8_t *)&a2[v30];
      v67 = v39 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v68 = *v66++;
        v69 = vmovl_high_s16(v68);
        v70.i64[0] = v69.i32[2];
        v70.i64[1] = v69.i32[3];
        v71 = vcvtq_f64_s64(v70);
        v70.i64[0] = v69.i32[0];
        v70.i64[1] = v69.i32[1];
        v72 = vcvtq_f64_s64(v70);
        v73 = vmovl_s16(*(int16x4_t *)v68.i8);
        v70.i64[0] = v73.i32[2];
        v70.i64[1] = v73.i32[3];
        v74 = vcvtq_f64_s64(v70);
        v70.i64[0] = v73.i32[0];
        v70.i64[1] = v73.i32[1];
        v40[2] = vmulq_f64(v65, v72);
        v40[3] = vmulq_f64(v65, v71);
        *v40 = vmulq_f64(v65, vcvtq_f64_s64(v70));
        v40[1] = vmulq_f64(v65, v74);
        v40 += 4;
        v67 -= 8;
      }
      while (v67);
      if (v39 == (v39 & 0xFFFFFFFFFFFFFFF8))
        return result;
    }
    else
    {
      v15 = v15;
    }
    v41 = (double *)(a3 + 8 * v15);
    v42 = v13 - v15;
    v43 = &a2[v15];
    do
    {
      v44 = *v43++;
      *v41++ = *v12 * (double)v44;
      --v42;
    }
    while (v42);
    return result;
  }
  v31 = v11 - 1;
  v32 = a5;
  v33 = (unsigned __int16 *)&a2[v15 + v32];
  do
  {
    LOWORD(a7.f64[0]) = a2[v30];
    v34 = *v12 * (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0];
    v35 = v33;
    v36 = v31;
    v37 = v12 + 1;
    do
    {
      v38 = *v37++;
      a7.f64[0] = v38;
      LOWORD(a8.f64[0]) = *v35;
      a8.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a8.f64[0]).i32[0];
      v34 = v34 + v38 * a8.f64[0];
      v35 = (unsigned __int16 *)((char *)v35 + v32 * 2);
      --v36;
    }
    while (v36);
    *(double *)(a3 + 8 * v30++) = v34;
    ++v33;
  }
  while (v30 != v13);
  return result;
}

void sub_1002FC314()
{
  operator delete();
}

uint64_t sub_1002FC328(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002FC364(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_100452538;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2)
      goto LABEL_21;
    v8 = *(_QWORD *)(a2 + 56);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = *(_QWORD *)(a1 + 72);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 20);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v6 = *(_DWORD *)a2;
      v18 = *(_DWORD *)(a2 + 4);
      if (v18 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v18;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v19 = *(_QWORD **)(a2 + 72);
        v20 = *(_QWORD **)(a1 + 88);
        *v20 = *v19;
        v20[1] = v19[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v7;
      }
      while (v15 < v17);
      *v6 = *(_DWORD *)a2;
      if ((int)v17 <= 2)
      {
        v18 = *(_DWORD *)(a2 + 4);
        if (v18 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v6, a2);
    goto LABEL_20;
  }
  LODWORD(v24) = 33619968;
  v25 = a1 + 16;
  v26 = 0;
  sub_1002181EC(a2, (uint64_t)&v24);
LABEL_21:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v22 != 1 && v21 != 1)
  {
    v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(&v24, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v24, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_1002FC598(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FC5CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452538;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FC66C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452538;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

float32_t sub_1002FC71C(uint64_t a1, const float *a2, unint64_t a3, int a4, int a5, float32x4_t a6)
{
  uint64_t v6;
  float *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  uint64_t v14;
  float *v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  const float *v25;
  uint64_t v26;
  unint64_t v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;
  float *v40;
  float v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  BOOL v46;
  uint64_t v48;
  float32x4_t *v49;
  float32x4_t *v50;
  unint64_t v51;
  float32x4_t v52;
  _DWORD *v53;
  float *v54;
  uint64_t v55;
  float v56;
  float32x4x4_t v58;
  float32x4x4_t v59;

  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(float **)(a1 + 32);
  v8 = (a5 * a4);
  v9 = (v8 - 4);
  if ((int)v8 < 4)
  {
    LODWORD(v10) = 0;
    goto LABEL_27;
  }
  if ((int)v6 > 1)
  {
    v10 = 0;
    v11 = a5;
    v12 = (float32x4_t *)&a2[v11];
    do
    {
      a6 = vmulq_n_f32(*(float32x4_t *)&a2[v10], *v7);
      v13 = v12;
      v14 = v6 - 1;
      v15 = v7 + 1;
      do
      {
        v16 = *v15++;
        a6 = vmlaq_n_f32(a6, *v13, v16);
        v13 = (float32x4_t *)((char *)v13 + v11 * 4);
        --v14;
      }
      while (v14);
      *(float32x4_t *)(a3 + 4 * v10) = a6;
      v10 += 4;
      ++v12;
    }
    while (v10 <= v9);
    goto LABEL_27;
  }
  if (v9 < 0xC)
  {
    v10 = 0;
LABEL_25:
    v26 = 4 * v10 + 8;
    v27 = a3 + v26;
    v28 = (float *)((char *)a2 + v26);
    do
    {
      v29 = *v7 * *(v28 - 2);
      v30 = *v7 * *(v28 - 1);
      v31 = *v28;
      v32 = v28[1];
      v28 += 4;
      v33 = *v7 * v31;
      a6.f32[0] = *v7 * v32;
      *(float *)(v27 - 8) = v29;
      *(float *)(v27 - 4) = v30;
      *(float *)v27 = v33;
      *(_DWORD *)(v27 + 4) = a6.i32[0];
      v27 += 16;
      v10 += 4;
    }
    while (v10 <= v9);
    goto LABEL_27;
  }
  v10 = 0;
  v17 = ((4 * v9) & 0x3FFFFFFF0) + 16;
  v18 = a3 + v17;
  v20 = (unint64_t)a2 + v17 > a3 && v18 > (unint64_t)a2;
  if ((unint64_t)v7 < v18 && (unint64_t)(v7 + 1) > a3)
    goto LABEL_25;
  if (v20)
    goto LABEL_25;
  v22 = (v9 >> 2) + 1;
  v10 = 4 * (v22 & 0x7FFFFFFC);
  v23 = v22 & 0x7FFFFFFC;
  v24 = (float *)a3;
  v25 = a2;
  do
  {
    a6.f32[0] = *v7;
    v58 = vld4q_f32(v25);
    v25 += 16;
    v59.val[0] = vmulq_n_f32(v58.val[0], *v7);
    v59.val[1] = vmulq_n_f32(v58.val[1], *v7);
    v59.val[2] = vmulq_n_f32(v58.val[2], *v7);
    v59.val[3] = vmulq_n_f32(v58.val[3], *v7);
    vst4q_f32(v24, v59);
    v24 += 16;
    v23 -= 4;
  }
  while (v23);
  if (v22 != (v22 & 0x7FFFFFFC))
    goto LABEL_25;
LABEL_27:
  if ((int)v10 < (int)v8)
  {
    v34 = v10;
    if ((int)v6 <= 1)
    {
      v42 = v8 - v10;
      if (v42 < 0xC)
        goto LABEL_50;
      v43 = 4 * v10;
      v44 = a3 + 4 * v8;
      v45 = a3 + v43 >= (unint64_t)&a2[v8] || (unint64_t)&a2[v10] >= v44;
      v46 = !v45;
      if ((unint64_t)v7 < v44 && a3 + v43 < (unint64_t)(v7 + 1))
        goto LABEL_50;
      if (v46)
        goto LABEL_50;
      v34 += v42 & 0xFFFFFFFFFFFFFFF8;
      a6 = vld1q_dup_f32(v7);
      v48 = v43 + 16;
      v49 = (float32x4_t *)&a2[(unint64_t)v43 / 4 + 4];
      v50 = (float32x4_t *)(a3 + v48);
      v51 = v42 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v52 = vmulq_f32(a6, *v49);
        v50[-1] = vmulq_f32(a6, v49[-1]);
        *v50 = v52;
        v49 += 2;
        v50 += 2;
        v51 -= 8;
      }
      while (v51);
      if (v42 != (v42 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_50:
        v53 = (_DWORD *)(a3 + 4 * v34);
        v54 = (float *)&a2[v34];
        v55 = v8 - v34;
        do
        {
          v56 = *v54++;
          a6.f32[0] = *v7 * v56;
          *v53++ = a6.i32[0];
          --v55;
        }
        while (v55);
      }
    }
    else
    {
      v35 = v6 - 1;
      v36 = a5;
      v37 = (float *)&a2[v10 + v36];
      do
      {
        a6.f32[0] = *v7 * a2[v34];
        v38 = v37;
        v39 = v35;
        v40 = v7 + 1;
        do
        {
          v41 = *v40++;
          a6.f32[0] = a6.f32[0] + (float)(v41 * *v38);
          v38 = (float *)((char *)v38 + v36 * 4);
          --v39;
        }
        while (v39);
        *(_DWORD *)(a3 + 4 * v34++) = a6.i32[0];
        ++v37;
      }
      while (v34 != v8);
    }
  }
  return a6.f32[0];
}

void sub_1002FC9A0()
{
  operator delete();
}

uint64_t sub_1002FC9B4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002FC9F0(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_1004525B8;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2)
      goto LABEL_21;
    v8 = *(_QWORD *)(a2 + 56);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = *(_QWORD *)(a1 + 72);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 20);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v6 = *(_DWORD *)a2;
      v18 = *(_DWORD *)(a2 + 4);
      if (v18 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v18;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v19 = *(_QWORD **)(a2 + 72);
        v20 = *(_QWORD **)(a1 + 88);
        *v20 = *v19;
        v20[1] = v19[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v7;
      }
      while (v15 < v17);
      *v6 = *(_DWORD *)a2;
      if ((int)v17 <= 2)
      {
        v18 = *(_DWORD *)(a2 + 4);
        if (v18 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v6, a2);
    goto LABEL_20;
  }
  LODWORD(v24) = 33619968;
  v25 = a1 + 16;
  v26 = 0;
  sub_1002181EC(a2, (uint64_t)&v24);
LABEL_21:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v22 != 1 && v21 != 1)
  {
    v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(&v24, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v24, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_1002FCC24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FCC58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004525B8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FCCF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004525B8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

double *sub_1002FCDA8(double *result, const float *a2, unint64_t a3, int a4, int a5)
{
  uint64_t v5;
  double *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float32x2_t *v15;
  const double *v16;
  float64x2_t v17;
  double *v18;
  float *v19;
  double v20;
  double v21;
  float v22;
  float v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  double v30;
  float *v31;
  uint64_t v32;
  double *v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  double *v37;
  uint64_t v38;
  float *v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  double *v43;
  const float *v44;
  double *v45;
  float64x2_t v46;
  float32x4_t *v47;
  float64x2_t *v48;
  unint64_t v49;
  float32x4_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float32x4x4_t v53;
  float64x2x4_t v54;
  float64x2x4_t v55;

  v5 = *((unsigned int *)result + 2);
  v6 = (double *)*((_QWORD *)result + 4);
  v7 = (a5 * a4);
  v8 = (v7 - 4);
  if ((int)v7 < 4)
  {
    LODWORD(v9) = 0;
    goto LABEL_15;
  }
  if ((int)v5 <= 1)
  {
    if (v8 >= 0xC
      && ((unint64_t)(v6 + 1) <= a3 || (unint64_t)v6 >= ((8 * v8) & 0x7FFFFFFE0) + a3 + 32))
    {
      v41 = (v8 >> 2) + 1;
      v9 = 4 * (v41 & 0x7FFFFFFC);
      v42 = v41 & 0x7FFFFFFC;
      v43 = (double *)a3;
      v44 = a2;
      do
      {
        v53 = vld4q_f32(v44);
        v44 += 16;
        v54.val[0] = vmulq_n_f64(vcvt_hight_f64_f32(v53.val[0]), *v6);
        v54.val[1] = vmulq_n_f64(vcvt_hight_f64_f32(v53.val[1]), *v6);
        v54.val[2] = vmulq_n_f64(vcvt_hight_f64_f32(v53.val[2]), *v6);
        v54.val[3] = vmulq_n_f64(vcvt_hight_f64_f32(v53.val[3]), *v6);
        v55.val[0] = vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v53.val[0].f32), *v6);
        v55.val[1] = vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v53.val[1].f32), *v6);
        v55.val[2] = vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v53.val[2].f32), *v6);
        v55.val[3] = vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v53.val[3].f32), *v6);
        result = v43 + 16;
        vst4q_f64(v43, v55);
        v45 = v43 + 8;
        vst4q_f64(v45, v54);
        v43 = result;
        v42 -= 4;
      }
      while (v42);
      if (v41 == (v41 & 0x7FFFFFFC))
        goto LABEL_15;
    }
    else
    {
      v9 = 0;
    }
    v18 = (double *)(a3 + 8 * v9 + 16);
    v19 = (float *)&a2[v9 + 2];
    do
    {
      v20 = *v6 * *(v19 - 2);
      v21 = *v6 * *(v19 - 1);
      v22 = *v19;
      v23 = v19[1];
      v19 += 4;
      v24 = *v6 * v22;
      v25 = *v6 * v23;
      *(v18 - 2) = v20;
      *(v18 - 1) = v21;
      *v18 = v24;
      v18[1] = v25;
      v18 += 4;
      v9 += 4;
    }
    while (v9 <= v8);
    goto LABEL_15;
  }
  v9 = 0;
  v10 = a5;
  v11 = (uint64_t)&a2[v10 + 2];
  do
  {
    v12 = (float32x2_t *)&a2[v9];
    v13 = vmulq_n_f64(vcvtq_f64_f32(*v12), *v6);
    v14 = vmulq_n_f64(vcvtq_f64_f32(v12[1]), *v6);
    v15 = (float32x2_t *)v11;
    result = (double *)(v5 - 1);
    v16 = v6 + 1;
    do
    {
      v17 = vld1q_dup_f64(v16++);
      v13 = vmlaq_f64(v13, vcvtq_f64_f32(v15[-1]), v17);
      v14 = vmlaq_f64(v14, vcvtq_f64_f32(*v15), v17);
      v15 = (float32x2_t *)((char *)v15 + v10 * 4);
      result = (double *)((char *)result - 1);
    }
    while (result);
    *(float64x2_t *)(a3 + 8 * v9) = v13;
    *(float64x2_t *)(a3 + ((8 * v9) | 0x10)) = v14;
    v9 += 4;
    v11 += 16;
  }
  while (v9 <= v8);
LABEL_15:
  if ((int)v9 >= (int)v7)
    return result;
  v26 = v9;
  if ((int)v5 <= 1)
  {
    v35 = v7 - v9;
    if (v35 >= 8
      && ((v36 = a3 + 8 * v9, v36 >= (unint64_t)(v6 + 1)) || (unint64_t)v6 >= a3 + 8 * v7))
    {
      v9 = (v35 & 0xFFFFFFFFFFFFFFF8) + v9;
      v46 = vld1q_dup_f64(v6);
      v47 = (float32x4_t *)&a2[v26 + 4];
      v48 = (float64x2_t *)(v36 + 32);
      v49 = v35 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v50 = v47[-1];
        v51 = vcvt_hight_f64_f32(*v47);
        v52 = vmulq_f64(v46, vcvtq_f64_f32(*(float32x2_t *)v47->f32));
        v48[-2] = vmulq_f64(v46, vcvtq_f64_f32(*(float32x2_t *)v50.f32));
        v48[-1] = vmulq_f64(v46, vcvt_hight_f64_f32(v50));
        *v48 = v52;
        v48[1] = vmulq_f64(v46, v51);
        v48 += 4;
        v47 += 2;
        v49 -= 8;
      }
      while (v49);
      if (v35 == (v35 & 0xFFFFFFFFFFFFFFF8))
        return result;
    }
    else
    {
      v9 = v9;
    }
    v37 = (double *)(a3 + 8 * v9);
    v38 = v7 - v9;
    v39 = (float *)&a2[v9];
    do
    {
      v40 = *v39++;
      *v37++ = *v6 * v40;
      --v38;
    }
    while (v38);
    return result;
  }
  v27 = v5 - 1;
  v28 = a5;
  v29 = (float *)&a2[v9 + v28];
  do
  {
    v30 = *v6 * a2[v26];
    v31 = v29;
    v32 = v27;
    v33 = v6 + 1;
    do
    {
      v34 = *v33++;
      v30 = v30 + v34 * *v31;
      v31 = (float *)((char *)v31 + v28 * 4);
      --v32;
    }
    while (v32);
    *(double *)(a3 + 8 * v26++) = v30;
    ++v29;
  }
  while (v26 != v7);
  return result;
}

void sub_1002FD09C()
{
  operator delete();
}

uint64_t sub_1002FD0B0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002FD0EC(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v7 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_100452638;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2)
      goto LABEL_21;
    v8 = *(_QWORD *)(a2 + 56);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = *(_QWORD *)(a1 + 72);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 20);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v6 = *(_DWORD *)a2;
      v18 = *(_DWORD *)(a2 + 4);
      if (v18 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v18;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v19 = *(_QWORD **)(a2 + 72);
        v20 = *(_QWORD **)(a1 + 88);
        *v20 = *v19;
        v20[1] = v19[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v16 + 4 * v15++) = 0;
        v17 = *v7;
      }
      while (v15 < v17);
      *v6 = *(_DWORD *)a2;
      if ((int)v17 <= 2)
      {
        v18 = *(_DWORD *)(a2 + 4);
        if (v18 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v6, a2);
    goto LABEL_20;
  }
  LODWORD(v24) = 33619968;
  v25 = a1 + 16;
  v26 = 0;
  sub_1002181EC(a2, (uint64_t)&v24);
LABEL_21:
  v22 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v22 + v21 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v22 != 1 && v21 != 1)
  {
    v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(&v24, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v24, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_1002FD320(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FD354(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452638;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FD3F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452638;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

float64_t sub_1002FD4A4(uint64_t a1, const double *a2, unint64_t a3, int a4, int a5, float64x2_t a6)
{
  uint64_t v6;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t *v15;
  uint64_t v16;
  const double *v17;
  float64x2_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  const double *v27;
  uint64_t v28;
  double *v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;
  double *v40;
  uint64_t v41;
  double *v42;
  double v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  BOOL v48;
  uint64_t v50;
  float64x2_t *v51;
  float64x2_t *v52;
  unint64_t v53;
  float64x2_t v54;
  _QWORD *v55;
  double *v56;
  uint64_t v57;
  double v58;
  float64x2x4_t v60;
  float64x2x4_t v61;

  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(double **)(a1 + 32);
  v8 = (a5 * a4);
  v9 = (v8 - 4);
  if ((int)v8 < 4)
  {
    LODWORD(v10) = 0;
    goto LABEL_27;
  }
  if ((int)v6 > 1)
  {
    v10 = 0;
    v11 = a5;
    v12 = (uint64_t)&a2[v11 + 2];
    do
    {
      v13 = (float64x2_t *)&a2[v10];
      v14 = vmulq_n_f64(*v13, *v7);
      a6 = vmulq_n_f64(v13[1], *v7);
      v15 = (float64x2_t *)v12;
      v16 = v6 - 1;
      v17 = v7 + 1;
      do
      {
        v18 = vld1q_dup_f64(v17++);
        v14 = vmlaq_f64(v14, v15[-1], v18);
        a6 = vmlaq_f64(a6, *v15, v18);
        v15 = (float64x2_t *)((char *)v15 + v11 * 8);
        --v16;
      }
      while (v16);
      *(float64x2_t *)(a3 + 8 * v10) = v14;
      *(float64x2_t *)(a3 + ((8 * v10) | 0x10)) = a6;
      v10 += 4;
      v12 += 32;
    }
    while (v10 <= v9);
    goto LABEL_27;
  }
  if (v9 < 0xC)
  {
    v10 = 0;
LABEL_25:
    v28 = 8 * v10 + 16;
    v29 = (double *)(a3 + v28);
    v30 = (double *)((char *)a2 + v28);
    do
    {
      v31 = *v7 * *(v30 - 2);
      v32 = *v7 * *(v30 - 1);
      v33 = *v30;
      v34 = v30[1];
      v30 += 4;
      v35 = *v7 * v33;
      a6.f64[0] = *v7 * v34;
      *(v29 - 2) = v31;
      *(v29 - 1) = v32;
      *v29 = v35;
      v29[1] = a6.f64[0];
      v29 += 4;
      v10 += 4;
    }
    while (v10 <= v9);
    goto LABEL_27;
  }
  v10 = 0;
  v19 = ((8 * v9) & 0x7FFFFFFE0) + 32;
  v20 = a3 + v19;
  v22 = (unint64_t)a2 + v19 > a3 && v20 > (unint64_t)a2;
  if ((unint64_t)v7 < v20 && (unint64_t)(v7 + 1) > a3)
    goto LABEL_25;
  if (v22)
    goto LABEL_25;
  v24 = (v9 >> 2) + 1;
  v10 = 4 * (v24 & 0x7FFFFFFE);
  v25 = v24 & 0x7FFFFFFE;
  v26 = (double *)a3;
  v27 = a2;
  do
  {
    a6.f64[0] = *v7;
    v60 = vld4q_f64(v27);
    v27 += 8;
    v61.val[0] = vmulq_n_f64(v60.val[0], *v7);
    v61.val[1] = vmulq_n_f64(v60.val[1], *v7);
    v61.val[2] = vmulq_n_f64(v60.val[2], *v7);
    v61.val[3] = vmulq_n_f64(v60.val[3], *v7);
    vst4q_f64(v26, v61);
    v26 += 8;
    v25 -= 2;
  }
  while (v25);
  if (v24 != (v24 & 0x7FFFFFFE))
    goto LABEL_25;
LABEL_27:
  if ((int)v10 < (int)v8)
  {
    v36 = v10;
    if ((int)v6 <= 1)
    {
      v44 = v8 - v10;
      if (v44 < 0xA)
        goto LABEL_50;
      v45 = 8 * v10;
      v46 = a3 + 8 * v8;
      v47 = a3 + v45 >= (unint64_t)&a2[v8] || (unint64_t)&a2[v10] >= v46;
      v48 = !v47;
      if ((unint64_t)v7 < v46 && a3 + v45 < (unint64_t)(v7 + 1))
        goto LABEL_50;
      if (v48)
        goto LABEL_50;
      v36 += v44 & 0xFFFFFFFFFFFFFFFCLL;
      a6 = vld1q_dup_f64(v7);
      v50 = v45 + 16;
      v51 = (float64x2_t *)&a2[(unint64_t)v45 / 8 + 2];
      v52 = (float64x2_t *)(a3 + v50);
      v53 = v44 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v54 = vmulq_f64(a6, *v51);
        v52[-1] = vmulq_f64(a6, v51[-1]);
        *v52 = v54;
        v51 += 2;
        v52 += 2;
        v53 -= 4;
      }
      while (v53);
      if (v44 != (v44 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_50:
        v55 = (_QWORD *)(a3 + 8 * v36);
        v56 = (double *)&a2[v36];
        v57 = v8 - v36;
        do
        {
          v58 = *v56++;
          a6.f64[0] = *v7 * v58;
          *v55++ = *(_QWORD *)&a6.f64[0];
          --v57;
        }
        while (v57);
      }
    }
    else
    {
      v37 = v6 - 1;
      v38 = a5;
      v39 = (double *)&a2[v10 + v38];
      do
      {
        a6.f64[0] = *v7 * a2[v36];
        v40 = v39;
        v41 = v37;
        v42 = v7 + 1;
        do
        {
          v43 = *v42++;
          a6.f64[0] = a6.f64[0] + v43 * *v40;
          v40 = (double *)((char *)v40 + v38 * 8);
          --v41;
        }
        while (v41);
        *(float64_t *)(a3 + 8 * v36++) = a6.f64[0];
        ++v39;
      }
      while (v36 != v8);
    }
  }
  return a6.f64[0];
}

void sub_1002FD744()
{
  operator delete();
}

uint64_t sub_1002FD758(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002FD794(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, double a5)
{
  _DWORD *v10;
  int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = off_1004526B8;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v10 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v11 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v10 == (_DWORD *)a2)
      goto LABEL_21;
    v12 = *(_QWORD *)(a2 + 56);
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 20);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v15 = *(_QWORD *)(a1 + 72);
      if (v15)
      {
        v16 = (unsigned int *)(v15 + 20);
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v10 = *(_DWORD *)a2;
      v22 = *(_DWORD *)(a2 + 4);
      if (v22 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v22;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v23 = *(_QWORD **)(a2 + 72);
        v24 = *(_QWORD **)(a1 + 88);
        *v24 = *v23;
        v24[1] = v23[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v19 = 0;
      v20 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v20 + 4 * v19++) = 0;
        v21 = *v11;
      }
      while (v19 < v21);
      *v10 = *(_DWORD *)a2;
      if ((int)v21 <= 2)
      {
        v22 = *(_DWORD *)(a2 + 4);
        if (v22 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v10, a2);
    goto LABEL_20;
  }
  LODWORD(v28) = 33619968;
  v29 = a1 + 16;
  v30 = 0;
  sub_1002181EC(a2, (uint64_t)&v28);
LABEL_21:
  v26 = *(_DWORD *)(a1 + 24);
  v25 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v26 + v25 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 124) = (uint64_t)rint(a5);
  *(_QWORD *)(a1 + 112) = *a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v26 != 1 && v25 != 1)
  {
    v28 = 0;
    v29 = 0;
    qmemcpy((void *)sub_10029430C(&v28, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v28, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_1002FD9EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FDA20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004526B8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FDAC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004526B8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

uint64_t sub_1002FDB70(uint64_t result, _QWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  const float *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  _QWORD *v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v16;
  int16x8_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t i;
  const float *v21;
  int32x4_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  _DWORD *v30;
  unint64_t v31;

  if (a5)
  {
    v6 = *(const float **)(result + 32);
    v7 = *(_DWORD *)(result + 124);
    v8 = *(_DWORD *)(result + 112);
    v9 = *(_DWORD *)(result + 116);
    v10 = *(unsigned int *)(result + 8);
    result = (v10 - 1) | 1;
    v11 = vdupq_n_s32(v7);
    v12 = vdupq_n_s32(v9);
    v13 = a2 + 2;
    v14 = vnegq_s32(vdupq_n_s32(v8));
    v15.i64[0] = 0xFF000000FFLL;
    v15.i64[1] = 0xFF000000FFLL;
    while (a6 < 4)
    {
      v16 = 0;
      if (a6 > 0)
        goto LABEL_14;
LABEL_3:
      a3 += a4;
      ++a2;
      ++v13;
      if (!--a5)
        return result;
    }
    v16 = 0;
    do
    {
      v18 = (int32x4_t)vld1q_dup_f32(v6);
      v19 = vmlaq_s32(v11, *(int32x4_t *)(*a2 + 4 * v16), v18);
      if ((int)v10 >= 2)
      {
        for (i = 1; i != v10; ++i)
        {
          v21 = &v6[i];
          v22 = (int32x4_t)vld1q_dup_f32(v21);
          v19 = vmlaq_s32(v19, *(int32x4_t *)(a2[i] + 4 * v16), v22);
        }
      }
      v17 = (int16x8_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(v19, v12), v14), (int32x4_t)0), v15);
      *(int16x4_t *)v17.i8 = vmovn_s32((int32x4_t)v17);
      *(_DWORD *)(a3 + v16) = vmovn_s16(v17).u32[0];
      v16 += 4;
    }
    while (v16 <= a6 - 4);
    v16 = v16;
    if ((int)v16 >= a6)
      goto LABEL_3;
LABEL_14:
    if ((int)v10 <= 1)
    {
      do
      {
        v23 = (int)(v7 + *(_DWORD *)(*a2 + 4 * v16) * *(_DWORD *)v6 + v9) >> v8;
        v24 = v23 & ~(v23 >> 31);
        if (v24 >= 255)
          LOBYTE(v24) = -1;
        *(_BYTE *)(a3 + v16++) = v24;
      }
      while (a6 != v16);
      goto LABEL_3;
    }
    while (1)
    {
      v26 = v7 + *(_DWORD *)(*a2 + 4 * v16) * *(_DWORD *)v6;
      if (v10 >= 3)
      {
        v28 = 0;
        v29 = v13;
        v30 = v6 + 2;
        v31 = (v10 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v26 += *(_DWORD *)(*(v29 - 1) + 4 * v16) * *(v30 - 1);
          v28 += *(_DWORD *)(*v29 + 4 * v16) * *v30;
          v30 += 2;
          v29 += 2;
          v31 -= 2;
        }
        while (v31);
        v26 += v28;
        v27 = (v10 - 1) | 1;
        if (v10 - 1 == ((v10 - 1) & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_19;
      }
      else
      {
        v27 = 1;
      }
      do
      {
        v26 += *(_DWORD *)(a2[v27] + 4 * v16) * LODWORD(v6[v27]);
        ++v27;
      }
      while (v10 != v27);
LABEL_19:
      v25 = ((int)(v26 + v9) >> v8) & ~((int)(v26 + v9) >> v8 >> 31);
      if (v25 >= 255)
        LOBYTE(v25) = -1;
      *(_BYTE *)(a3 + v16++) = v25;
      if (v16 == a6)
        goto LABEL_3;
    }
  }
  return result;
}

void sub_1002FDD98()
{
  operator delete();
}

uint64_t sub_1002FDDAC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002FDDE8(uint64_t a1, uint64_t a2, int a3, double a4)
{
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  float v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_100452740;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2)
      goto LABEL_21;
    v10 = *(_QWORD *)(a2 + 56);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(a1 + 72);
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 20);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v8 = *(_DWORD *)a2;
      v20 = *(_DWORD *)(a2 + 4);
      if (v20 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v20;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v21 = *(_QWORD **)(a2 + 72);
        v22 = *(_QWORD **)(a1 + 88);
        *v22 = *v21;
        v22[1] = v21[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v18 + 4 * v17++) = 0;
        v19 = *v9;
      }
      while (v17 < v19);
      *v8 = *(_DWORD *)a2;
      if ((int)v19 <= 2)
      {
        v20 = *(_DWORD *)(a2 + 4);
        if (v20 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v8, a2);
    goto LABEL_20;
  }
  LODWORD(v27) = 33619968;
  v28 = a1 + 16;
  v29 = 0;
  sub_1002181EC(a2, (uint64_t)&v27);
LABEL_21:
  v24 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v24 + v23 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  v25 = a4;
  *(float *)(a1 + 116) = v25;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v24 != 1 && v23 != 1)
  {
    v27 = 0;
    v28 = 0;
    qmemcpy((void *)sub_10029430C(&v27, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v27, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_1002FE030(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FE064(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452740;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FE104(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452740;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

unint64_t sub_1002FE1B4(unint64_t result, uint64_t a2, _BYTE *a3, int a4, int a5, int a6)
{
  float *v6;
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  uint64_t k;
  float v14;
  int v15;
  float v16;
  uint64_t m;
  float v18;
  int v19;
  float v20;
  uint64_t n;
  float v22;
  int v23;
  _BYTE *v24;
  int32x4_t v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  int32x4_t v30;
  int16x8_t v31;
  unint64_t v32;
  _BYTE *v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t i;
  float *v40;
  float v41;
  float v42;
  uint64_t j;
  float v44;
  int v45;
  float v46;
  _BYTE *v47;
  float v48;
  int v49;
  float v50;
  int v51;
  float v52;
  int v53;

  if (a5)
  {
    v6 = *(float **)(result + 32);
    v7 = *(float *)(result + 116);
    v8 = a5 - 1;
    v9 = a4;
    v10 = *(unsigned int *)(result + 8);
    if (a6 >= 4)
    {
      v24 = a3 + 4;
      v25.i64[0] = 0xFF000000FFLL;
      v25.i64[1] = 0xFF000000FFLL;
      do
      {
        result = 0;
        v26 = v8;
        v27 = v24;
        v28 = 4;
        do
        {
          v32 = v28;
          v33 = v27;
          v34 = (float *)(*(_QWORD *)a2 + 4 * result);
          v35 = v7 + (float)(*v6 * *v34);
          v36 = v7 + (float)(*v6 * v34[1]);
          v37 = v7 + (float)(*v6 * v34[2]);
          v38 = v7 + (float)(*v6 * v34[3]);
          if ((int)v10 >= 2)
          {
            for (i = 1; i != v10; ++i)
            {
              v40 = (float *)(*(_QWORD *)(a2 + 8 * i) + 4 * result);
              v41 = v6[i];
              v35 = v35 + (float)(v41 * *v40);
              v36 = v36 + (float)(v41 * v40[1]);
              v37 = v37 + (float)(v41 * v40[2]);
              v38 = v38 + (float)(v41 * v40[3]);
            }
          }
          v29 = (uint64_t)rintf(v36);
          v30.i32[0] = (uint64_t)rintf(v35);
          v30.i32[1] = v29;
          v30.i64[1] = __PAIR64__((uint64_t)rintf(v38), (uint64_t)rintf(v37));
          v31 = (int16x8_t)vminq_s32(vmaxq_s32(v30, (int32x4_t)0), v25);
          *(int16x4_t *)v31.i8 = vmovn_s32((int32x4_t)v31);
          *(_DWORD *)&a3[result] = vmovn_s16(v31).u32[0];
          result += 4;
          v28 = v32 + 4;
          v27 = v33 + 4;
        }
        while (result <= (a6 - 4));
        if ((int)result < a6)
        {
          if ((int)v10 <= 1)
          {
            do
            {
              v46 = rintf(v7 + (float)(*v6 * *(float *)(*(_QWORD *)a2 + 4 * v32)));
              LODWORD(result) = (uint64_t)v46 & ~((int)(uint64_t)v46 >> 31);
              if ((int)result >= 255)
                result = 255;
              else
                result = result;
              *v33++ = result;
              ++v32;
            }
            while (v32 < a6);
          }
          else
          {
            do
            {
              v42 = v7 + (float)(*v6 * *(float *)(*(_QWORD *)a2 + 4 * v32));
              for (j = 1; j != v10; ++j)
              {
                result = *(_QWORD *)(a2 + 8 * j);
                v42 = v42 + (float)(v6[j] * *(float *)(result + 4 * v32));
              }
              v44 = rintf(v42);
              v45 = (uint64_t)v44 & ~((int)(uint64_t)v44 >> 31);
              if (v45 >= 255)
                LOBYTE(v45) = -1;
              a3[v32++] = v45;
            }
            while (v32 < a6);
          }
        }
        a3 += v9;
        a2 += 8;
        v8 = v26 - 1;
        v24 += v9;
      }
      while (v26);
    }
    else if (a6 >= 1)
    {
      if ((int)v10 <= 1)
      {
        v47 = a3 + 2;
        do
        {
          v48 = rintf(v7 + (float)(*v6 * **(float **)a2));
          v49 = (uint64_t)v48 & ~((int)(uint64_t)v48 >> 31);
          if (v49 >= 255)
            LOBYTE(v49) = -1;
          *(v47 - 2) = v49;
          if (a6 != 1)
          {
            v50 = rintf(v7 + (float)(*v6 * *(float *)(*(_QWORD *)a2 + 4)));
            v51 = (uint64_t)v50 & ~((int)(uint64_t)v50 >> 31);
            if (v51 >= 255)
              LOBYTE(v51) = -1;
            *(v47 - 1) = v51;
            if (a6 != 2)
            {
              v52 = rintf(v7 + (float)(*v6 * *(float *)(*(_QWORD *)a2 + 8)));
              v53 = (uint64_t)v52 & ~((int)(uint64_t)v52 >> 31);
              if (v53 >= 255)
                LOBYTE(v53) = -1;
              *v47 = v53;
            }
          }
          a2 += 8;
          v47 += a4;
          --a5;
        }
        while (a5);
      }
      else
      {
        do
        {
          v11 = v8;
          v12 = v7 + (float)(*v6 * **(float **)a2);
          for (k = 1; k != v10; ++k)
            v12 = v12 + (float)(v6[k] * **(float **)(a2 + 8 * k));
          v14 = rintf(v12);
          v15 = (uint64_t)v14 & ~((int)(uint64_t)v14 >> 31);
          if (v15 >= 255)
            LOBYTE(v15) = -1;
          *a3 = v15;
          if (a6 != 1)
          {
            v16 = v7 + (float)(*v6 * *(float *)(*(_QWORD *)a2 + 4));
            for (m = 1; m != v10; ++m)
              v16 = v16 + (float)(v6[m] * *(float *)(*(_QWORD *)(a2 + 8 * m) + 4));
            v18 = rintf(v16);
            v19 = (uint64_t)v18 & ~((int)(uint64_t)v18 >> 31);
            if (v19 >= 255)
              LOBYTE(v19) = -1;
            a3[1] = v19;
            if (a6 != 2)
            {
              v20 = v7 + (float)(*v6 * *(float *)(*(_QWORD *)a2 + 8));
              for (n = 1; n != v10; ++n)
                v20 = v20 + (float)(v6[n] * *(float *)(*(_QWORD *)(a2 + 8 * n) + 8));
              v22 = rintf(v20);
              v23 = (uint64_t)v22 & ~((int)(uint64_t)v22 >> 31);
              if (v23 >= 255)
                LOBYTE(v23) = -1;
              a3[2] = v23;
            }
          }
          a3 += a4;
          a2 += 8;
          --v8;
        }
        while (v11);
      }
    }
  }
  return result;
}

uint64_t sub_1002FE53C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452740;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FE5E0()
{
  operator delete();
}

uint64_t sub_1002FE5F4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002FE630(uint64_t a1, uint64_t a2, int a3, double a4)
{
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_1004527C8;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2)
      goto LABEL_21;
    v10 = *(_QWORD *)(a2 + 56);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(a1 + 72);
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 20);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v8 = *(_DWORD *)a2;
      v20 = *(_DWORD *)(a2 + 4);
      if (v20 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v20;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v21 = *(_QWORD **)(a2 + 72);
        v22 = *(_QWORD **)(a1 + 88);
        *v22 = *v21;
        v22[1] = v21[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v18 + 4 * v17++) = 0;
        v19 = *v9;
      }
      while (v17 < v19);
      *v8 = *(_DWORD *)a2;
      if ((int)v19 <= 2)
      {
        v20 = *(_DWORD *)(a2 + 4);
        if (v20 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v8, a2);
    goto LABEL_20;
  }
  LODWORD(v26) = 33619968;
  v27 = a1 + 16;
  v28 = 0;
  sub_1002181EC(a2, (uint64_t)&v26);
LABEL_21:
  v24 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v24 + v23 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v24 != 1 && v23 != 1)
  {
    v26 = 0;
    v27 = 0;
    qmemcpy((void *)sub_10029430C(&v26, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v26, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_1002FE874(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FE8A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004527C8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FE948(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004527C8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

uint64_t sub_1002FE9F8(uint64_t result, uint64_t a2, _BYTE *a3, int a4, int a5, int a6)
{
  double *v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  double v15;
  int v16;
  double v17;
  uint64_t v18;
  double v19;
  int v20;
  double v21;
  uint64_t v22;
  double v23;
  int v24;
  uint64_t v25;
  _BYTE *v26;
  int32x4_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int32x4_t v33;
  int16x8_t v34;
  unint64_t v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  double *v42;
  double v43;
  double v44;
  uint64_t v45;
  double v46;
  double v47;
  int v48;
  _BYTE *v49;
  double v50;
  int v51;
  double v52;
  int v53;
  double v54;
  int v55;

  if (a5)
  {
    v6 = *(double **)(result + 32);
    v7 = *(double *)(result + 120);
    v8 = a5 - 1;
    v9 = a4;
    v10 = *(unsigned int *)(result + 8);
    if (a6 >= 4)
    {
      v25 = 8 * v10;
      v26 = a3 + 4;
      v27.i64[0] = 0xFF000000FFLL;
      v27.i64[1] = 0xFF000000FFLL;
      do
      {
        v28 = 0;
        v29 = v8;
        v30 = (uint64_t)v26;
        v31 = 4;
        do
        {
          v35 = v31;
          result = v30;
          v36 = (double *)(*(_QWORD *)a2 + 8 * v28);
          v37 = v7 + *v6 * *v36;
          v38 = v7 + *v6 * v36[1];
          v39 = v7 + *v6 * v36[2];
          v40 = v7 + *v6 * v36[3];
          if ((int)v10 >= 2)
          {
            v41 = 8;
            do
            {
              v42 = (double *)(*(_QWORD *)(a2 + v41) + 8 * v28);
              v43 = v6[(unint64_t)v41 / 8];
              v37 = v37 + v43 * *v42;
              v38 = v38 + v43 * v42[1];
              v39 = v39 + v43 * v42[2];
              v40 = v40 + v43 * v42[3];
              v41 += 8;
            }
            while (v25 != v41);
          }
          v32 = (uint64_t)rint(v38);
          v33.i32[0] = (uint64_t)rint(v37);
          v33.i32[1] = v32;
          v33.i64[1] = __PAIR64__((uint64_t)rint(v40), (uint64_t)rint(v39));
          v34 = (int16x8_t)vminq_s32(vmaxq_s32(v33, (int32x4_t)0), v27);
          *(int16x4_t *)v34.i8 = vmovn_s32((int32x4_t)v34);
          *(_DWORD *)&a3[v28] = vmovn_s16(v34).u32[0];
          v28 += 4;
          v31 = v35 + 4;
          v30 = result + 4;
        }
        while (v28 <= (a6 - 4));
        if ((int)v28 < a6)
        {
          if ((int)v10 <= 1)
          {
            do
            {
              v47 = rint(v7 + *v6 * *(double *)(*(_QWORD *)a2 + 8 * v35));
              v48 = (uint64_t)v47 & ~((int)(uint64_t)v47 >> 31);
              if (v48 >= 255)
                LOBYTE(v48) = -1;
              *(_BYTE *)result++ = v48;
              ++v35;
            }
            while (v35 < a6);
          }
          else
          {
            do
            {
              v44 = v7 + *v6 * *(double *)(*(_QWORD *)a2 + 8 * v35);
              v45 = 8;
              do
              {
                v44 = v44 + v6[(unint64_t)v45 / 8] * *(double *)(*(_QWORD *)(a2 + v45) + 8 * v35);
                v45 += 8;
              }
              while (v25 != v45);
              v46 = rint(v44);
              LODWORD(result) = (uint64_t)v46 & ~((int)(uint64_t)v46 >> 31);
              if ((int)result >= 255)
                result = 255;
              else
                result = result;
              a3[v35++] = result;
            }
            while (v35 < a6);
          }
        }
        a3 += v9;
        a2 += 8;
        v8 = v29 - 1;
        v26 += v9;
      }
      while (v29);
    }
    else if (a6 >= 1)
    {
      if ((int)v10 <= 1)
      {
        v49 = a3 + 2;
        do
        {
          v50 = rint(v7 + *v6 * **(double **)a2);
          v51 = (uint64_t)v50 & ~((int)(uint64_t)v50 >> 31);
          if (v51 >= 255)
            LOBYTE(v51) = -1;
          *(v49 - 2) = v51;
          if (a6 != 1)
          {
            v52 = rint(v7 + *v6 * *(double *)(*(_QWORD *)a2 + 8));
            v53 = (uint64_t)v52 & ~((int)(uint64_t)v52 >> 31);
            if (v53 >= 255)
              LOBYTE(v53) = -1;
            *(v49 - 1) = v53;
            if (a6 != 2)
            {
              v54 = rint(v7 + *v6 * *(double *)(*(_QWORD *)a2 + 16));
              v55 = (uint64_t)v54 & ~((int)(uint64_t)v54 >> 31);
              if (v55 >= 255)
                LOBYTE(v55) = -1;
              *v49 = v55;
            }
          }
          a2 += 8;
          v49 += a4;
          --a5;
        }
        while (a5);
      }
      else
      {
        v11 = 8 * v10;
        do
        {
          v12 = v8;
          v13 = v7 + *v6 * **(double **)a2;
          v14 = 8;
          do
          {
            v13 = v13 + v6[(unint64_t)v14 / 8] * **(double **)(a2 + v14);
            v14 += 8;
          }
          while (v11 != v14);
          v15 = rint(v13);
          v16 = (uint64_t)v15 & ~((int)(uint64_t)v15 >> 31);
          if (v16 >= 255)
            LOBYTE(v16) = -1;
          *a3 = v16;
          if (a6 != 1)
          {
            v17 = v7 + *v6 * *(double *)(*(_QWORD *)a2 + 8);
            v18 = 8;
            do
            {
              v17 = v17 + v6[(unint64_t)v18 / 8] * *(double *)(*(_QWORD *)(a2 + v18) + 8);
              v18 += 8;
            }
            while (v11 != v18);
            v19 = rint(v17);
            v20 = (uint64_t)v19 & ~((int)(uint64_t)v19 >> 31);
            if (v20 >= 255)
              LOBYTE(v20) = -1;
            a3[1] = v20;
            if (a6 != 2)
            {
              v21 = v7 + *v6 * *(double *)(*(_QWORD *)a2 + 16);
              v22 = 8;
              do
              {
                v21 = v21 + v6[(unint64_t)v22 / 8] * *(double *)(*(_QWORD *)(a2 + v22) + 16);
                v22 += 8;
              }
              while (v11 != v22);
              v23 = rint(v21);
              v24 = (uint64_t)v23 & ~((int)(uint64_t)v23 >> 31);
              if (v24 >= 255)
                LOBYTE(v24) = -1;
              a3[2] = v24;
            }
          }
          a3 += a4;
          a2 += 8;
          --v8;
        }
        while (v12);
      }
    }
  }
  return result;
}

uint64_t sub_1002FED90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004527C8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FEE34()
{
  operator delete();
}

uint64_t sub_1002FEE48(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002FEE84(uint64_t a1, uint64_t a2, int a3, double a4)
{
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  float v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_100452850;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2)
      goto LABEL_21;
    v10 = *(_QWORD *)(a2 + 56);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(a1 + 72);
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 20);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v8 = *(_DWORD *)a2;
      v20 = *(_DWORD *)(a2 + 4);
      if (v20 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v20;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v21 = *(_QWORD **)(a2 + 72);
        v22 = *(_QWORD **)(a1 + 88);
        *v22 = *v21;
        v22[1] = v21[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v18 + 4 * v17++) = 0;
        v19 = *v9;
      }
      while (v17 < v19);
      *v8 = *(_DWORD *)a2;
      if ((int)v19 <= 2)
      {
        v20 = *(_DWORD *)(a2 + 4);
        if (v20 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v8, a2);
    goto LABEL_20;
  }
  LODWORD(v27) = 33619968;
  v28 = a1 + 16;
  v29 = 0;
  sub_1002181EC(a2, (uint64_t)&v27);
LABEL_21:
  v24 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v24 + v23 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  v25 = a4;
  *(float *)(a1 + 116) = v25;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v24 != 1 && v23 != 1)
  {
    v27 = 0;
    v28 = 0;
    qmemcpy((void *)sub_10029430C(&v27, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v27, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_1002FF0CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FF100(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452850;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FF1A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452850;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

uint64_t sub_1002FF250(uint64_t result, float **a2, _WORD *a3, int a4, int a5, int a6)
{
  float *v6;
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int v12;
  float *v13;
  float v14;
  uint64_t k;
  float v16;
  int v17;
  float v18;
  uint64_t m;
  float v20;
  int v21;
  float v22;
  uint64_t n;
  float v24;
  int v25;
  float v26;
  _WORD *v27;
  int32x4_t v28;
  unint64_t v29;
  int v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int32x4_t v35;
  unint64_t v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t i;
  float *v43;
  float v44;
  float v45;
  uint64_t j;
  float v47;
  float v48;
  int v49;
  _WORD *v50;
  float *v51;
  float v52;
  int v53;
  float v54;
  int v55;
  float v56;
  int v57;

  if (a5)
  {
    v6 = *(float **)(result + 32);
    v7 = *(float *)(result + 116);
    v8 = a5 - 1;
    v9 = a4;
    v10 = *(unsigned int *)(result + 8);
    if (a6 > 3)
    {
      v26 = *v6;
      v27 = a3 + 4;
      v28.i64[0] = 0xFFFF0000FFFFLL;
      v28.i64[1] = 0xFFFF0000FFFFLL;
      do
      {
        v29 = 0;
        v30 = v8;
        v31 = *a2;
        v32 = (uint64_t)v27;
        v33 = 4;
        do
        {
          v36 = v33;
          result = v32;
          v37 = &v31[v29];
          v38 = v7 + (float)(v26 * *v37);
          v39 = v7 + (float)(v26 * v37[1]);
          v40 = v7 + (float)(v26 * v37[2]);
          v41 = v7 + (float)(v26 * v37[3]);
          if ((int)v10 >= 2)
          {
            for (i = 1; i != v10; ++i)
            {
              v43 = &a2[i][v29];
              v44 = v6[i];
              v38 = v38 + (float)(v44 * *v43);
              v39 = v39 + (float)(v44 * v43[1]);
              v40 = v40 + (float)(v44 * v43[2]);
              v41 = v41 + (float)(v44 * v43[3]);
            }
          }
          v34 = (uint64_t)rintf(v39);
          v35.i32[0] = (uint64_t)rintf(v38);
          v35.i32[1] = v34;
          v35.i64[1] = __PAIR64__((uint64_t)rintf(v41), (uint64_t)rintf(v40));
          *(int16x4_t *)&a3[v29] = vmovn_s32(vminq_s32(vmaxq_s32(v35, (int32x4_t)0), v28));
          v29 += 4;
          v33 = v36 + 4;
          v32 = result + 8;
        }
        while (v29 <= (a6 - 4));
        if ((int)v29 < a6)
        {
          if ((int)v10 <= 1)
          {
            do
            {
              v48 = rintf(v7 + (float)(v26 * v31[v36]));
              v49 = (uint64_t)v48 & ~((int)(uint64_t)v48 >> 31);
              if (v49 >= 0xFFFF)
                LOWORD(v49) = -1;
              *(_WORD *)result = v49;
              result += 2;
              ++v36;
            }
            while (v36 < a6);
          }
          else
          {
            do
            {
              v45 = v7 + (float)(v26 * v31[v36]);
              for (j = 1; j != v10; ++j)
                v45 = v45 + (float)(v6[j] * a2[j][v36]);
              v47 = rintf(v45);
              LODWORD(result) = (uint64_t)v47 & ~((int)(uint64_t)v47 >> 31);
              if ((int)result >= 0xFFFF)
                result = 0xFFFFLL;
              else
                result = result;
              a3[v36++] = result;
            }
            while (v36 < a6);
          }
        }
        a3 = (_WORD *)((char *)a3 + v9);
        ++a2;
        v8 = v30 - 1;
        v27 = (_WORD *)((char *)v27 + v9);
      }
      while (v30);
    }
    else if (a6 >= 1)
    {
      v11 = *v6;
      if ((int)v10 <= 1)
      {
        v50 = a3 + 2;
        do
        {
          v51 = *a2;
          v52 = rintf(v7 + (float)(v11 * **a2));
          v53 = (uint64_t)v52 & ~((int)(uint64_t)v52 >> 31);
          if (v53 >= 0xFFFF)
            LOWORD(v53) = -1;
          *(v50 - 2) = v53;
          if (a6 != 1)
          {
            v54 = rintf(v7 + (float)(v11 * v51[1]));
            v55 = (uint64_t)v54 & ~((int)(uint64_t)v54 >> 31);
            if (v55 >= 0xFFFF)
              LOWORD(v55) = -1;
            *(v50 - 1) = v55;
            if (a6 != 2)
            {
              v56 = rintf(v7 + (float)(v11 * v51[2]));
              v57 = (uint64_t)v56 & ~((int)(uint64_t)v56 >> 31);
              if (v57 >= 0xFFFF)
                LOWORD(v57) = -1;
              *v50 = v57;
            }
          }
          ++a2;
          v50 = (_WORD *)((char *)v50 + a4);
          --a5;
        }
        while (a5);
      }
      else
      {
        do
        {
          v12 = v8;
          v13 = *a2;
          v14 = v7 + (float)(v11 * **a2);
          for (k = 1; k != v10; ++k)
            v14 = v14 + (float)(v6[k] * *a2[k]);
          v16 = rintf(v14);
          v17 = (uint64_t)v16 & ~((int)(uint64_t)v16 >> 31);
          if (v17 >= 0xFFFF)
            LOWORD(v17) = -1;
          *a3 = v17;
          if (a6 != 1)
          {
            v18 = v7 + (float)(v11 * v13[1]);
            for (m = 1; m != v10; ++m)
              v18 = v18 + (float)(v6[m] * a2[m][1]);
            v20 = rintf(v18);
            v21 = (uint64_t)v20 & ~((int)(uint64_t)v20 >> 31);
            if (v21 >= 0xFFFF)
              LOWORD(v21) = -1;
            a3[1] = v21;
            if (a6 != 2)
            {
              v22 = v7 + (float)(v11 * v13[2]);
              for (n = 1; n != v10; ++n)
                v22 = v22 + (float)(v6[n] * a2[n][2]);
              v24 = rintf(v22);
              v25 = (uint64_t)v24 & ~((int)(uint64_t)v24 >> 31);
              if (v25 >= 0xFFFF)
                LOWORD(v25) = -1;
              a3[2] = v25;
            }
          }
          a3 = (_WORD *)((char *)a3 + a4);
          ++a2;
          --v8;
        }
        while (v12);
      }
    }
  }
  return result;
}

uint64_t sub_1002FF5B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452850;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FF654()
{
  operator delete();
}

uint64_t sub_1002FF668(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002FF6A4(uint64_t a1, uint64_t a2, int a3, double a4)
{
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_1004528D8;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2)
      goto LABEL_21;
    v10 = *(_QWORD *)(a2 + 56);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(a1 + 72);
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 20);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v8 = *(_DWORD *)a2;
      v20 = *(_DWORD *)(a2 + 4);
      if (v20 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v20;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v21 = *(_QWORD **)(a2 + 72);
        v22 = *(_QWORD **)(a1 + 88);
        *v22 = *v21;
        v22[1] = v21[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v18 + 4 * v17++) = 0;
        v19 = *v9;
      }
      while (v17 < v19);
      *v8 = *(_DWORD *)a2;
      if ((int)v19 <= 2)
      {
        v20 = *(_DWORD *)(a2 + 4);
        if (v20 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v8, a2);
    goto LABEL_20;
  }
  LODWORD(v26) = 33619968;
  v27 = a1 + 16;
  v28 = 0;
  sub_1002181EC(a2, (uint64_t)&v26);
LABEL_21:
  v24 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v24 + v23 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v24 != 1 && v23 != 1)
  {
    v26 = 0;
    v27 = 0;
    qmemcpy((void *)sub_10029430C(&v26, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v26, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_1002FF8E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FF91C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004528D8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FF9BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004528D8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

unint64_t sub_1002FFA6C(unint64_t result, double **a2, _WORD *a3, int a4, int a5, int a6)
{
  double *v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  int v13;
  double *v14;
  double v15;
  uint64_t v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  double v21;
  int v22;
  double v23;
  uint64_t v24;
  double v25;
  int v26;
  double v27;
  uint64_t v28;
  _WORD *v29;
  int32x4_t v30;
  unint64_t v31;
  int v32;
  double *v33;
  _WORD *v34;
  uint64_t v35;
  uint64_t v36;
  int32x4_t v37;
  _WORD *v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double *v45;
  double v46;
  double v47;
  uint64_t v48;
  double v49;
  int v50;
  double v51;
  int v52;
  _WORD *v53;
  double *v54;
  double v55;
  int v56;
  double v57;
  int v58;
  double v59;
  int v60;

  if (a5)
  {
    v6 = *(double **)(result + 32);
    v7 = *(double *)(result + 120);
    v8 = a5 - 1;
    v9 = a4;
    v10 = *(unsigned int *)(result + 8);
    if (a6 > 3)
    {
      v27 = *v6;
      v28 = 8 * v10;
      v29 = a3 + 4;
      v30.i64[0] = 0xFFFF0000FFFFLL;
      v30.i64[1] = 0xFFFF0000FFFFLL;
      do
      {
        v31 = 0;
        v32 = v8;
        v33 = *a2;
        v34 = v29;
        v35 = 4;
        do
        {
          result = v35;
          v38 = v34;
          v39 = &v33[v31];
          v40 = v7 + v27 * *v39;
          v41 = v7 + v27 * v39[1];
          v42 = v7 + v27 * v39[2];
          v43 = v7 + v27 * v39[3];
          if ((int)v10 >= 2)
          {
            v44 = 8;
            do
            {
              v45 = &a2[(unint64_t)v44 / 8][v31];
              v46 = v6[(unint64_t)v44 / 8];
              v40 = v40 + v46 * *v45;
              v41 = v41 + v46 * v45[1];
              v42 = v42 + v46 * v45[2];
              v43 = v43 + v46 * v45[3];
              v44 += 8;
            }
            while (v28 != v44);
          }
          v36 = (uint64_t)rint(v41);
          v37.i32[0] = (uint64_t)rint(v40);
          v37.i32[1] = v36;
          v37.i64[1] = __PAIR64__((uint64_t)rint(v43), (uint64_t)rint(v42));
          *(int16x4_t *)&a3[v31] = vmovn_s32(vminq_s32(vmaxq_s32(v37, (int32x4_t)0), v30));
          v31 += 4;
          v35 = result + 4;
          v34 = v38 + 4;
        }
        while (v31 <= (a6 - 4));
        if ((int)v31 < a6)
        {
          if ((int)v10 <= 1)
          {
            do
            {
              v51 = rint(v7 + v27 * v33[result]);
              v52 = (uint64_t)v51 & ~((int)(uint64_t)v51 >> 31);
              if (v52 >= 0xFFFF)
                LOWORD(v52) = -1;
              *v38++ = v52;
              ++result;
            }
            while (result < a6);
          }
          else
          {
            do
            {
              v47 = v7 + v27 * v33[result];
              v48 = 8;
              do
              {
                v47 = v47 + v6[(unint64_t)v48 / 8] * a2[(unint64_t)v48 / 8][result];
                v48 += 8;
              }
              while (v28 != v48);
              v49 = rint(v47);
              v50 = (uint64_t)v49 & ~((int)(uint64_t)v49 >> 31);
              if (v50 >= 0xFFFF)
                LOWORD(v50) = -1;
              a3[result++] = v50;
            }
            while (result < a6);
          }
        }
        a3 = (_WORD *)((char *)a3 + v9);
        ++a2;
        v8 = v32 - 1;
        v29 = (_WORD *)((char *)v29 + v9);
      }
      while (v32);
    }
    else if (a6 >= 1)
    {
      v11 = *v6;
      if ((int)v10 <= 1)
      {
        v53 = a3 + 2;
        do
        {
          v54 = *a2;
          v55 = rint(v7 + v11 * **a2);
          v56 = (uint64_t)v55 & ~((int)(uint64_t)v55 >> 31);
          if (v56 >= 0xFFFF)
            LOWORD(v56) = -1;
          *(v53 - 2) = v56;
          if (a6 != 1)
          {
            v57 = rint(v7 + v11 * v54[1]);
            v58 = (uint64_t)v57 & ~((int)(uint64_t)v57 >> 31);
            if (v58 >= 0xFFFF)
              LOWORD(v58) = -1;
            *(v53 - 1) = v58;
            if (a6 != 2)
            {
              v59 = rint(v7 + v11 * v54[2]);
              v60 = (uint64_t)v59 & ~((int)(uint64_t)v59 >> 31);
              if (v60 >= 0xFFFF)
                LOWORD(v60) = -1;
              *v53 = v60;
            }
          }
          ++a2;
          v53 = (_WORD *)((char *)v53 + a4);
          --a5;
        }
        while (a5);
      }
      else
      {
        v12 = 8 * v10;
        do
        {
          v13 = v8;
          v14 = *a2;
          v15 = v7 + v11 * **a2;
          v16 = 8;
          do
          {
            v15 = v15 + v6[(unint64_t)v16 / 8] * *a2[(unint64_t)v16 / 8];
            v16 += 8;
          }
          while (v12 != v16);
          v17 = rint(v15);
          v18 = (uint64_t)v17 & ~((int)(uint64_t)v17 >> 31);
          if (v18 >= 0xFFFF)
            LOWORD(v18) = -1;
          *a3 = v18;
          if (a6 != 1)
          {
            v19 = v7 + v11 * v14[1];
            v20 = 8;
            do
            {
              v19 = v19 + v6[(unint64_t)v20 / 8] * a2[(unint64_t)v20 / 8][1];
              v20 += 8;
            }
            while (v12 != v20);
            v21 = rint(v19);
            v22 = (uint64_t)v21 & ~((int)(uint64_t)v21 >> 31);
            if (v22 >= 0xFFFF)
              LOWORD(v22) = -1;
            a3[1] = v22;
            if (a6 != 2)
            {
              v23 = v7 + v11 * v14[2];
              v24 = 8;
              do
              {
                v23 = v23 + v6[(unint64_t)v24 / 8] * a2[(unint64_t)v24 / 8][2];
                v24 += 8;
              }
              while (v12 != v24);
              v25 = rint(v23);
              v26 = (uint64_t)v25 & ~((int)(uint64_t)v25 >> 31);
              if (v26 >= 0xFFFF)
                LOWORD(v26) = -1;
              a3[2] = v26;
            }
          }
          a3 = (_WORD *)((char *)a3 + a4);
          ++a2;
          --v8;
        }
        while (v13);
      }
    }
  }
  return result;
}

uint64_t sub_1002FFDD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004528D8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1002FFE78()
{
  operator delete();
}

uint64_t sub_1002FFE8C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002FFEC8(uint64_t a1, uint64_t a2, int a3, double a4)
{
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  float v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_100452960;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2)
      goto LABEL_21;
    v10 = *(_QWORD *)(a2 + 56);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(a1 + 72);
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 20);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v8 = *(_DWORD *)a2;
      v20 = *(_DWORD *)(a2 + 4);
      if (v20 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v20;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v21 = *(_QWORD **)(a2 + 72);
        v22 = *(_QWORD **)(a1 + 88);
        *v22 = *v21;
        v22[1] = v21[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v18 + 4 * v17++) = 0;
        v19 = *v9;
      }
      while (v17 < v19);
      *v8 = *(_DWORD *)a2;
      if ((int)v19 <= 2)
      {
        v20 = *(_DWORD *)(a2 + 4);
        if (v20 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v8, a2);
    goto LABEL_20;
  }
  LODWORD(v27) = 33619968;
  v28 = a1 + 16;
  v29 = 0;
  sub_1002181EC(a2, (uint64_t)&v27);
LABEL_21:
  v24 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v24 + v23 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  v25 = a4;
  *(float *)(a1 + 116) = v25;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v24 != 1 && v23 != 1)
  {
    v27 = 0;
    v28 = 0;
    qmemcpy((void *)sub_10029430C(&v27, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v27, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_100300110(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100300144(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452960;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1003001E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452960;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

unint64_t sub_100300294(unint64_t result, float **a2, _WORD *a3, int a4, int a5, int a6)
{
  float *v6;
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int v12;
  float *v13;
  float v14;
  uint64_t k;
  uint64_t v16;
  float v17;
  uint64_t m;
  uint64_t v19;
  float v20;
  uint64_t n;
  uint64_t v22;
  float v23;
  _WORD *v24;
  unint64_t v25;
  int v26;
  float *v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  int32x4_t v31;
  _WORD *v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t i;
  float *v39;
  float v40;
  float v41;
  uint64_t j;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (a5)
  {
    v6 = *(float **)(result + 32);
    v7 = *(float *)(result + 116);
    v8 = a5 - 1;
    v9 = a4;
    v10 = *(unsigned int *)(result + 8);
    if (a6 > 3)
    {
      v23 = *v6;
      v24 = a3 + 4;
      do
      {
        v25 = 0;
        v26 = v8;
        v27 = *a2;
        v28 = v24;
        v29 = 4;
        do
        {
          result = v29;
          v32 = v28;
          v33 = &v27[v25];
          v34 = v7 + (float)(v23 * *v33);
          v35 = v7 + (float)(v23 * v33[1]);
          v36 = v7 + (float)(v23 * v33[2]);
          v37 = v7 + (float)(v23 * v33[3]);
          if ((int)v10 >= 2)
          {
            for (i = 1; i != v10; ++i)
            {
              v39 = &a2[i][v25];
              v40 = v6[i];
              v34 = v34 + (float)(v40 * *v39);
              v35 = v35 + (float)(v40 * v39[1]);
              v36 = v36 + (float)(v40 * v39[2]);
              v37 = v37 + (float)(v40 * v39[3]);
            }
          }
          v30 = (uint64_t)rintf(v35);
          v31.i32[0] = (uint64_t)rintf(v34);
          v31.i32[1] = v30;
          v31.i64[1] = __PAIR64__((uint64_t)rintf(v37), (uint64_t)rintf(v36));
          *(int16x4_t *)&a3[v25] = vqmovn_s32(v31);
          v25 += 4;
          v29 = result + 4;
          v28 = v32 + 4;
        }
        while (v25 <= (a6 - 4));
        if ((int)v25 < a6)
        {
          if ((int)v10 <= 1)
          {
            do
            {
              v44 = (uint64_t)rintf(v7 + (float)(v23 * v27[result]));
              if ((int)v44 <= -32768)
                LODWORD(v44) = -32768;
              if ((int)v44 >= 0x7FFF)
                LOWORD(v44) = 0x7FFF;
              *v32++ = v44;
              ++result;
            }
            while (result < a6);
          }
          else
          {
            do
            {
              v41 = v7 + (float)(v23 * v27[result]);
              for (j = 1; j != v10; ++j)
                v41 = v41 + (float)(v6[j] * a2[j][result]);
              v43 = (uint64_t)rintf(v41);
              if ((int)v43 <= -32768)
                LODWORD(v43) = -32768;
              if ((int)v43 >= 0x7FFF)
                LOWORD(v43) = 0x7FFF;
              a3[result++] = v43;
            }
            while (result < a6);
          }
        }
        a3 = (_WORD *)((char *)a3 + v9);
        ++a2;
        v8 = v26 - 1;
        v24 = (_WORD *)((char *)v24 + v9);
      }
      while (v26);
    }
    else if (a6 >= 1)
    {
      v11 = *v6;
      if ((int)v10 <= 1)
      {
        v45 = a3 + 2;
        do
        {
          v46 = *a2;
          v47 = (uint64_t)rintf(v7 + (float)(v11 * **a2));
          if ((int)v47 <= -32768)
            LODWORD(v47) = -32768;
          if ((int)v47 >= 0x7FFF)
            LOWORD(v47) = 0x7FFF;
          *(v45 - 2) = v47;
          if (a6 != 1)
          {
            v48 = (uint64_t)rintf(v7 + (float)(v11 * v46[1]));
            if ((int)v48 <= -32768)
              LODWORD(v48) = -32768;
            if ((int)v48 >= 0x7FFF)
              LOWORD(v48) = 0x7FFF;
            *(v45 - 1) = v48;
            if (a6 != 2)
            {
              v49 = (uint64_t)rintf(v7 + (float)(v11 * v46[2]));
              if ((int)v49 <= -32768)
                LODWORD(v49) = -32768;
              if ((int)v49 >= 0x7FFF)
                LOWORD(v49) = 0x7FFF;
              *v45 = v49;
            }
          }
          ++a2;
          v45 = (_WORD *)((char *)v45 + a4);
          --a5;
        }
        while (a5);
      }
      else
      {
        do
        {
          v12 = v8;
          v13 = *a2;
          v14 = v7 + (float)(v11 * **a2);
          for (k = 1; k != v10; ++k)
            v14 = v14 + (float)(v6[k] * *a2[k]);
          v16 = (uint64_t)rintf(v14);
          if ((int)v16 <= -32768)
            LODWORD(v16) = -32768;
          if ((int)v16 >= 0x7FFF)
            LOWORD(v16) = 0x7FFF;
          *a3 = v16;
          if (a6 != 1)
          {
            v17 = v7 + (float)(v11 * v13[1]);
            for (m = 1; m != v10; ++m)
              v17 = v17 + (float)(v6[m] * a2[m][1]);
            v19 = (uint64_t)rintf(v17);
            if ((int)v19 <= -32768)
              LODWORD(v19) = -32768;
            if ((int)v19 >= 0x7FFF)
              LOWORD(v19) = 0x7FFF;
            a3[1] = v19;
            if (a6 != 2)
            {
              v20 = v7 + (float)(v11 * v13[2]);
              for (n = 1; n != v10; ++n)
                v20 = v20 + (float)(v6[n] * a2[n][2]);
              v22 = (uint64_t)rintf(v20);
              if ((int)v22 <= -32768)
                LODWORD(v22) = -32768;
              if ((int)v22 >= 0x7FFF)
                LOWORD(v22) = 0x7FFF;
              a3[2] = v22;
            }
          }
          a3 = (_WORD *)((char *)a3 + a4);
          ++a2;
          --v8;
        }
        while (v12);
      }
    }
  }
  return result;
}

void sub_100300614()
{
  operator delete();
}

uint64_t sub_100300628(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_100300664(uint64_t a1, uint64_t a2, int a3, double a4)
{
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_1004529E8;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2)
      goto LABEL_21;
    v10 = *(_QWORD *)(a2 + 56);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(a1 + 72);
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 20);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v8 = *(_DWORD *)a2;
      v20 = *(_DWORD *)(a2 + 4);
      if (v20 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v20;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v21 = *(_QWORD **)(a2 + 72);
        v22 = *(_QWORD **)(a1 + 88);
        *v22 = *v21;
        v22[1] = v21[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v18 + 4 * v17++) = 0;
        v19 = *v9;
      }
      while (v17 < v19);
      *v8 = *(_DWORD *)a2;
      if ((int)v19 <= 2)
      {
        v20 = *(_DWORD *)(a2 + 4);
        if (v20 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v8, a2);
    goto LABEL_20;
  }
  LODWORD(v26) = 33619968;
  v27 = a1 + 16;
  v28 = 0;
  sub_1002181EC(a2, (uint64_t)&v26);
LABEL_21:
  v24 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v24 + v23 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v24 != 1 && v23 != 1)
  {
    v26 = 0;
    v27 = 0;
    qmemcpy((void *)sub_10029430C(&v26, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v26, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_1003008A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003008DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004529E8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_10030097C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004529E8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

double *sub_100300A2C(double *result, double **a2, _WORD *a3, int a4, int a5, int a6)
{
  double *v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  int v13;
  double *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  _WORD *v26;
  unint64_t v27;
  int v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  unint64_t v33;
  _WORD *v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  double *v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _WORD *v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  if (a5)
  {
    v6 = (double *)*((_QWORD *)result + 4);
    v7 = result[15];
    v8 = a5 - 1;
    v9 = a4;
    v10 = *((unsigned int *)result + 2);
    if (a6 > 3)
    {
      v24 = *v6;
      v25 = 8 * v10;
      v26 = a3 + 4;
      do
      {
        v27 = 0;
        v28 = v8;
        result = *a2;
        v29 = v26;
        v30 = 4;
        do
        {
          v33 = v30;
          v34 = v29;
          v35 = &result[v27];
          v36 = v7 + v24 * *v35;
          v37 = v7 + v24 * v35[1];
          v38 = v7 + v24 * v35[2];
          v39 = v7 + v24 * v35[3];
          if ((int)v10 >= 2)
          {
            v40 = 8;
            do
            {
              v41 = &a2[(unint64_t)v40 / 8][v27];
              v42 = v6[(unint64_t)v40 / 8];
              v36 = v36 + v42 * *v41;
              v37 = v37 + v42 * v41[1];
              v38 = v38 + v42 * v41[2];
              v39 = v39 + v42 * v41[3];
              v40 += 8;
            }
            while (v25 != v40);
          }
          v31 = (uint64_t)rint(v37);
          v32.i32[0] = (uint64_t)rint(v36);
          v32.i32[1] = v31;
          v32.i64[1] = __PAIR64__((uint64_t)rint(v39), (uint64_t)rint(v38));
          *(int16x4_t *)&a3[v27] = vqmovn_s32(v32);
          v27 += 4;
          v30 = v33 + 4;
          v29 = v34 + 4;
        }
        while (v27 <= (a6 - 4));
        if ((int)v27 < a6)
        {
          if ((int)v10 <= 1)
          {
            do
            {
              v46 = (uint64_t)rint(v7 + v24 * result[v33]);
              if ((int)v46 <= -32768)
                LODWORD(v46) = -32768;
              if ((int)v46 >= 0x7FFF)
                LOWORD(v46) = 0x7FFF;
              *v34++ = v46;
              ++v33;
            }
            while (v33 < a6);
          }
          else
          {
            do
            {
              v43 = v7 + v24 * result[v33];
              v44 = 8;
              do
              {
                v43 = v43 + v6[(unint64_t)v44 / 8] * a2[(unint64_t)v44 / 8][v33];
                v44 += 8;
              }
              while (v25 != v44);
              v45 = (uint64_t)rint(v43);
              if ((int)v45 <= -32768)
                LODWORD(v45) = -32768;
              if ((int)v45 >= 0x7FFF)
                LOWORD(v45) = 0x7FFF;
              a3[v33++] = v45;
            }
            while (v33 < a6);
          }
        }
        a3 = (_WORD *)((char *)a3 + v9);
        ++a2;
        v8 = v28 - 1;
        v26 = (_WORD *)((char *)v26 + v9);
      }
      while (v28);
    }
    else if (a6 >= 1)
    {
      v11 = *v6;
      if ((int)v10 <= 1)
      {
        v47 = a3 + 2;
        do
        {
          v48 = *a2;
          v49 = (uint64_t)rint(v7 + v11 * **a2);
          if ((int)v49 <= -32768)
            LODWORD(v49) = -32768;
          if ((int)v49 >= 0x7FFF)
            LOWORD(v49) = 0x7FFF;
          *(v47 - 2) = v49;
          if (a6 != 1)
          {
            v50 = (uint64_t)rint(v7 + v11 * v48[1]);
            if ((int)v50 <= -32768)
              LODWORD(v50) = -32768;
            if ((int)v50 >= 0x7FFF)
              LOWORD(v50) = 0x7FFF;
            *(v47 - 1) = v50;
            if (a6 != 2)
            {
              v51 = (uint64_t)rint(v7 + v11 * v48[2]);
              if ((int)v51 <= -32768)
                LODWORD(v51) = -32768;
              if ((int)v51 >= 0x7FFF)
                LOWORD(v51) = 0x7FFF;
              *v47 = v51;
            }
          }
          ++a2;
          v47 = (_WORD *)((char *)v47 + a4);
          --a5;
        }
        while (a5);
      }
      else
      {
        v12 = 8 * v10;
        do
        {
          v13 = v8;
          v14 = *a2;
          v15 = v7 + v11 * **a2;
          v16 = 8;
          do
          {
            v15 = v15 + v6[(unint64_t)v16 / 8] * *a2[(unint64_t)v16 / 8];
            v16 += 8;
          }
          while (v12 != v16);
          v17 = (uint64_t)rint(v15);
          if ((int)v17 <= -32768)
            LODWORD(v17) = -32768;
          if ((int)v17 >= 0x7FFF)
            LOWORD(v17) = 0x7FFF;
          *a3 = v17;
          if (a6 != 1)
          {
            v18 = v7 + v11 * v14[1];
            v19 = 8;
            do
            {
              v18 = v18 + v6[(unint64_t)v19 / 8] * a2[(unint64_t)v19 / 8][1];
              v19 += 8;
            }
            while (v12 != v19);
            v20 = (uint64_t)rint(v18);
            if ((int)v20 <= -32768)
              LODWORD(v20) = -32768;
            if ((int)v20 >= 0x7FFF)
              LOWORD(v20) = 0x7FFF;
            a3[1] = v20;
            if (a6 != 2)
            {
              v21 = v7 + v11 * v14[2];
              v22 = 8;
              do
              {
                v21 = v21 + v6[(unint64_t)v22 / 8] * a2[(unint64_t)v22 / 8][2];
                v22 += 8;
              }
              while (v12 != v22);
              v23 = (uint64_t)rint(v21);
              if ((int)v23 <= -32768)
                LODWORD(v23) = -32768;
              if ((int)v23 >= 0x7FFF)
                LOWORD(v23) = 0x7FFF;
              a3[2] = v23;
            }
          }
          a3 = (_WORD *)((char *)a3 + a4);
          ++a2;
          --v8;
        }
        while (v13);
      }
    }
  }
  return result;
}

uint64_t sub_100300DB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004529E8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_100300E5C()
{
  operator delete();
}

uint64_t sub_100300E70(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_100300EAC(uint64_t a1, uint64_t a2, int a3, double a4)
{
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  float v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_100452A70;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2)
      goto LABEL_21;
    v10 = *(_QWORD *)(a2 + 56);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(a1 + 72);
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 20);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v8 = *(_DWORD *)a2;
      v20 = *(_DWORD *)(a2 + 4);
      if (v20 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v20;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v21 = *(_QWORD **)(a2 + 72);
        v22 = *(_QWORD **)(a1 + 88);
        *v22 = *v21;
        v22[1] = v21[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v18 + 4 * v17++) = 0;
        v19 = *v9;
      }
      while (v17 < v19);
      *v8 = *(_DWORD *)a2;
      if ((int)v19 <= 2)
      {
        v20 = *(_DWORD *)(a2 + 4);
        if (v20 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v8, a2);
    goto LABEL_20;
  }
  LODWORD(v27) = 33619968;
  v28 = a1 + 16;
  v29 = 0;
  sub_1002181EC(a2, (uint64_t)&v27);
LABEL_21:
  v24 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v24 + v23 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  v25 = a4;
  *(float *)(a1 + 116) = v25;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v24 != 1 && v23 != 1)
  {
    v27 = 0;
    v28 = 0;
    qmemcpy((void *)sub_10029430C(&v27, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v27, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_1003010F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100301128(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452A70;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1003011C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452A70;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

uint64_t sub_100301278(uint64_t result, float **a2, float *a3, int a4, int a5, int a6, double a7)
{
  float *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  int v12;
  float *v13;
  float v14;
  uint64_t i;
  float v16;
  uint64_t j;
  float v18;
  uint64_t k;
  float *v20;
  unint64_t v21;
  float32x4_t v22;
  unint64_t v23;
  int v24;
  float *v25;
  uint64_t v26;
  unint64_t v27;
  float32x4_t v28;
  float v29;
  uint64_t m;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  unint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  unint64_t v39;
  float *v40;
  int v41;
  uint64_t v42;
  float *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  BOOL v49;
  uint64_t v51;
  uint64_t v52;
  const float *v53;
  float *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  float v61;
  float v62;
  float v63;
  float *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  float *v69;
  float *v70;
  unint64_t v71;
  BOOL v73;
  float32x4_t v75;
  uint64_t v76;
  unint64_t v77;
  float32x4_t v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x4x4_t v81;
  float32x4x4_t v82;

  if (!a5)
    return result;
  v7 = *(float **)(result + 32);
  LODWORD(a7) = *(_DWORD *)(result + 116);
  v8 = a5 - 1;
  v9 = a4;
  v10 = *(unsigned int *)(result + 8);
  if (a6 <= 3)
  {
    if (a6 >= 1)
    {
      if ((int)v10 > 1)
      {
        do
        {
          v12 = v8;
          v13 = *a2;
          v14 = *(float *)&a7 + (float)(*v7 * **a2);
          for (i = 1; i != v10; ++i)
            v14 = v14 + (float)(v7[i] * *a2[i]);
          *a3 = v14;
          if (a6 != 1)
          {
            v16 = *(float *)&a7 + (float)(*v7 * v13[1]);
            for (j = 1; j != v10; ++j)
              v16 = v16 + (float)(v7[j] * a2[j][1]);
            a3[1] = v16;
            if (a6 != 2)
            {
              v18 = *(float *)&a7 + (float)(*v7 * v13[2]);
              for (k = 1; k != v10; ++k)
                v18 = v18 + (float)(v7[k] * a2[k][2]);
              a3[2] = v18;
            }
          }
          a3 = (float *)((char *)a3 + a4);
          ++a2;
          --v8;
        }
        while (v12);
      }
      else
      {
        v11 = a3 + 2;
        do
        {
          v20 = *a2;
          *(v11 - 2) = *(float *)&a7 + (float)(*v7 * **a2);
          if (a6 != 1)
          {
            *(v11 - 1) = *(float *)&a7 + (float)(*v7 * v20[1]);
            if (a6 != 2)
              *v11 = *(float *)&a7 + (float)(*v7 * v20[2]);
          }
          ++a2;
          v11 = (float *)((char *)v11 + a4);
          --a5;
        }
        while (a5);
      }
    }
    return result;
  }
  v21 = (a6 - 4);
  if ((int)v10 <= 1)
  {
    v31 = 0;
    if ((unint64_t)(v21 & 0xFFFFFFFC) + 5 <= a6)
      v32 = a6;
    else
      v32 = (v21 & 0xFFFFFFFC) + 5;
    v33 = (4 * v21) & 0x3FFFFFFF0;
    v34 = 4 * v32 - v33;
    v35 = v7 + 1;
    v36 = v32 - (v21 & 0xFFFFFFFC) - 4;
    v37 = v33 + 16;
    v80 = (v21 >> 2) + 1;
    result = v80 & 0x7FFFFFFC;
    v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    v39 = v36 & 0xFFFFFFFFFFFFFFF8;
    v40 = a3;
    while (1)
    {
      v41 = v8;
      v42 = v31 * v9;
      v43 = *a2;
      if (v21 < 0xC)
        break;
      v44 = 0;
      v47 = (float *)((char *)a3 + v37 + v42);
      v49 = v40 < (float *)((char *)v43 + v37) && v43 < v47;
      v46 = 4;
      v45 = 0;
      if (v7 < v47 && v40 < v35)
        goto LABEL_54;
      if (v49)
        goto LABEL_54;
      v51 = 0;
      v52 = v80 & 0x7FFFFFFC;
      do
      {
        v53 = &v43[v51];
        v81 = vld4q_f32(v53);
        v82.val[0] = vmlaq_n_f32(v38, v81.val[0], *v7);
        v82.val[1] = vmlaq_n_f32(v38, v81.val[1], *v7);
        v82.val[2] = vmlaq_n_f32(v38, v81.val[2], *v7);
        v82.val[3] = vmlaq_n_f32(v38, v81.val[3], *v7);
        v54 = &v40[v51];
        vst4q_f32(v54, v82);
        v51 += 16;
        v52 -= 4;
      }
      while (v52);
      v44 = v80 & 0x7FFFFFFC;
      v46 = (16 * ((v44 >> 2) & 0x1FFFFFFF)) | 4;
      v45 = 4 * v44;
      v55 = v44 - 1;
      v56 = v45;
      v57 = 4 * (v80 & 0x7FFFFFFC);
      if (v80 != result)
        goto LABEL_54;
LABEL_57:
      if (v57 < a6)
      {
        if (v36 >= 0x10)
        {
          v67 = 4 * v55;
          v68 = (char *)&a3[v67 + 4] + v42;
          v69 = (float *)((char *)a3 + v34 + v42 + v67 * 4);
          v70 = &v43[v67];
          v71 = (unint64_t)&v43[v67 + 4];
          v73 = v68 < (char *)v70 + v34 && v71 < (unint64_t)v69;
          if (v7 >= v69 || v68 >= (char *)v35)
          {
            if (v73)
            {
              v66 = v56;
            }
            else
            {
              v66 = v56 + v39;
              v75 = vld1q_dup_f32(v7);
              v76 = v56;
              v77 = v36 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v78 = vmlaq_f32(v38, *(float32x4_t *)&v43[v76 + 4], v75);
                v79 = (float32x4_t *)&v40[v76];
                *v79 = vmlaq_f32(v38, *(float32x4_t *)&v43[v76], v75);
                v79[1] = v78;
                v76 += 8;
                v77 -= 8;
              }
              while (v77);
              if (v36 == v39)
                goto LABEL_36;
            }
          }
          else
          {
            v66 = v56;
          }
        }
        else
        {
          v66 = v56;
        }
        do
        {
          v40[v66] = *(float *)&a7 + (float)(*v7 * v43[v66]);
          ++v66;
        }
        while (v66 < a6);
      }
LABEL_36:
      v40 = (float *)((char *)v40 + v9);
      ++a2;
      v8 = v41 - 1;
      ++v31;
      if (!v41)
        return result;
    }
    v44 = 0;
    v45 = 0;
    v46 = 4;
LABEL_54:
    v58 = 0;
    v55 = v44 - 1;
    v59 = v45;
    v60 = v43 + 2;
    do
    {
      v61 = *(float *)&a7 + (float)(*v7 * v60[v59 - 1]);
      v62 = *(float *)&a7 + (float)(*v7 * v60[v59]);
      v63 = *(float *)&a7 + (float)(*v7 * v60[v59 + 1]);
      v64 = &v40[v59];
      *v64 = *(float *)&a7 + (float)(*v7 * v43[v59]);
      v65 = (uint64_t)&v40[v45 + v58];
      *(float *)(v65 + 4) = v61;
      *(float *)(v65 + 8) = v62;
      v64[3] = v63;
      ++v55;
      v58 += 4;
      v57 = v45 + v58;
      v59 += 4;
    }
    while (v45 + v58 <= v21);
    v56 = v46 + v58 - 4;
    goto LABEL_57;
  }
  v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
  do
  {
    v23 = 0;
    v24 = v8;
    v25 = *a2;
    v26 = 4;
    do
    {
      v27 = v26;
      v28 = vmlaq_n_f32(v22, *(float32x4_t *)&v25[v23], *v7);
      for (result = 1; result != v10; ++result)
        v28 = vmlaq_n_f32(v28, *(float32x4_t *)&a2[result][v23], v7[result]);
      *(float32x4_t *)&a3[v23] = v28;
      v23 += 4;
      v26 += 4;
    }
    while (v23 <= v21);
    if ((int)v23 < a6)
    {
      do
      {
        v29 = *(float *)&a7 + (float)(*v7 * v25[v27]);
        for (m = 1; m != v10; ++m)
          v29 = v29 + (float)(v7[m] * a2[m][v27]);
        a3[v27++] = v29;
      }
      while (v27 < a6);
    }
    a3 = (float *)((char *)a3 + a4);
    ++a2;
    --v8;
  }
  while (v24);
  return result;
}

uint64_t sub_10030174C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452A70;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1003017F0()
{
  operator delete();
}

uint64_t sub_100301804(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_100301840(uint64_t a1, uint64_t a2, int a3, double a4)
{
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_100452AF8;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2)
      goto LABEL_21;
    v10 = *(_QWORD *)(a2 + 56);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(a1 + 72);
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 20);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v8 = *(_DWORD *)a2;
      v20 = *(_DWORD *)(a2 + 4);
      if (v20 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v20;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v21 = *(_QWORD **)(a2 + 72);
        v22 = *(_QWORD **)(a1 + 88);
        *v22 = *v21;
        v22[1] = v21[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v18 + 4 * v17++) = 0;
        v19 = *v9;
      }
      while (v17 < v19);
      *v8 = *(_DWORD *)a2;
      if ((int)v19 <= 2)
      {
        v20 = *(_DWORD *)(a2 + 4);
        if (v20 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v8, a2);
    goto LABEL_20;
  }
  LODWORD(v26) = 33619968;
  v27 = a1 + 16;
  v28 = 0;
  sub_1002181EC(a2, (uint64_t)&v26);
LABEL_21:
  v24 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v24 + v23 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v24 != 1 && v23 != 1)
  {
    v26 = 0;
    v27 = 0;
    qmemcpy((void *)sub_10029430C(&v26, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v26, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_100301A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100301AB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452AF8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_100301B58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452AF8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

uint64_t sub_100301C08(uint64_t result, double **a2, double *a3, int a4, int a5, int a6)
{
  double *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  double *v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  float64x2_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  double *v27;
  double v28;
  float64x2_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float64x2_t v44;
  double *v45;
  int v46;
  uint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double *v52;
  BOOL v54;
  uint64_t v56;
  uint64_t v57;
  const double *v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  double *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  double *v76;
  double *v77;
  unint64_t v78;
  BOOL v80;
  float64x2_t v82;
  uint64_t v83;
  unint64_t v84;
  float64x2_t v85;
  float64x2_t *v86;
  double *v87;
  double *v88;
  uint64_t v89;
  float64x2x4_t v90;
  float64x2x4_t v91;

  if (!a5)
    return result;
  v6 = *(double **)(result + 32);
  v7 = *(uint64_t *)(result + 120);
  v8 = a5 - 1;
  v9 = *(_DWORD *)(result + 8);
  if (a6 <= 3)
  {
    if (a6 >= 1)
    {
      if (v9 <= 1)
      {
        v87 = a3 + 2;
        do
        {
          v88 = *a2;
          *(v87 - 2) = *(double *)&v7 + *v6 * **a2;
          if (a6 != 1)
          {
            *(v87 - 1) = *(double *)&v7 + *v6 * v88[1];
            if (a6 != 2)
              *v87 = *(double *)&v7 + *v6 * v88[2];
          }
          ++a2;
          v87 = (double *)((char *)v87 + a4);
          --a5;
        }
        while (a5);
      }
      else
      {
        v10 = 8 * *(unsigned int *)(result + 8);
        do
        {
          v11 = v8;
          v12 = *a2;
          v13 = *(double *)&v7 + *v6 * **a2;
          v14 = 8;
          do
          {
            v13 = v13 + v6[(unint64_t)v14 / 8] * *a2[(unint64_t)v14 / 8];
            v14 += 8;
          }
          while (v10 != v14);
          *a3 = v13;
          if (a6 != 1)
          {
            v15 = *(double *)&v7 + *v6 * v12[1];
            v16 = 8;
            do
            {
              v15 = v15 + v6[(unint64_t)v16 / 8] * a2[(unint64_t)v16 / 8][1];
              v16 += 8;
            }
            while (v10 != v16);
            a3[1] = v15;
            if (a6 != 2)
            {
              v17 = *(double *)&v7 + *v6 * v12[2];
              v18 = 8;
              do
              {
                v17 = v17 + v6[(unint64_t)v18 / 8] * a2[(unint64_t)v18 / 8][2];
                v18 += 8;
              }
              while (v10 != v18);
              a3[2] = v17;
            }
          }
          a3 = (double *)((char *)a3 + a4);
          ++a2;
          --v8;
        }
        while (v11);
      }
    }
    return result;
  }
  v19 = (a6 - 4);
  if (v9 <= 1)
  {
    v36 = 0;
    if ((unint64_t)(v19 & 0xFFFFFFFC) + 5 <= a6)
      v37 = a6;
    else
      v37 = (v19 & 0xFFFFFFFC) + 5;
    v38 = (8 * v19) & 0x7FFFFFFE0;
    v39 = 8 * v37 - v38;
    v40 = v6 + 1;
    v41 = v37 - (v19 & 0xFFFFFFFC) - 4;
    v42 = v38 + 32;
    v43 = (v19 >> 2) + 1;
    result = v43 & 0x7FFFFFFE;
    v44 = (float64x2_t)vdupq_lane_s64(v7, 0);
    v89 = v37 & 3;
    v45 = a3;
    while (1)
    {
      v46 = v8;
      v47 = v36 * a4;
      v48 = *a2;
      if (v19 < 0xC)
        break;
      v49 = 0;
      v52 = (double *)((char *)a3 + v42 + v47);
      v54 = v45 < (double *)((char *)v48 + v42) && v48 < v52;
      v51 = 4;
      v50 = 0;
      if (v6 < v52 && v45 < v40)
        goto LABEL_50;
      if (v54)
        goto LABEL_50;
      v56 = 0;
      v57 = v43 & 0x7FFFFFFE;
      do
      {
        v58 = &v48[v56];
        v90 = vld4q_f64(v58);
        v91.val[0] = vmlaq_n_f64(v44, v90.val[0], *v6);
        v91.val[1] = vmlaq_n_f64(v44, v90.val[1], *v6);
        v91.val[2] = vmlaq_n_f64(v44, v90.val[2], *v6);
        v91.val[3] = vmlaq_n_f64(v44, v90.val[3], *v6);
        v59 = &v45[v56];
        vst4q_f64(v59, v91);
        v56 += 8;
        v57 -= 2;
      }
      while (v57);
      v49 = v43 & 0x7FFFFFFE;
      v60 = v49 - 1;
      v51 = (4 * v43) | 4;
      v50 = 4 * v49;
      v61 = v50;
      v62 = 4 * (v43 & 0x7FFFFFFE);
      if (v43 != result)
        goto LABEL_50;
LABEL_53:
      if (v62 < a6)
      {
        if (v41 >= 0xE)
        {
          v72 = v47 + 32;
          v73 = v39 + v47;
          v74 = 4 * v60;
          v75 = (char *)&a3[4 * v60] + v72;
          v76 = (double *)((char *)a3 + v73 + v74 * 8);
          v77 = &v48[v74];
          v78 = (unint64_t)&v48[v74 + 4];
          v80 = v75 < (char *)v77 + v39 && v78 < (unint64_t)v76;
          if (v6 >= v76 || v75 >= (char *)v40)
          {
            if (v80)
            {
              v71 = v61;
            }
            else
            {
              v71 = v61 + v41 - v89;
              v82 = vld1q_dup_f64(v6);
              v83 = v61;
              v84 = v41 - v89;
              do
              {
                v85 = vmlaq_f64(v44, *(float64x2_t *)&v48[v83 + 2], v82);
                v86 = (float64x2_t *)&v45[v83];
                *v86 = vmlaq_f64(v44, *(float64x2_t *)&v48[v83], v82);
                v86[1] = v85;
                v83 += 4;
                v84 -= 4;
              }
              while (v84);
              if (!v89)
                goto LABEL_32;
            }
          }
          else
          {
            v71 = v61;
          }
        }
        else
        {
          v71 = v61;
        }
        do
        {
          v45[v71] = *(double *)&v7 + *v6 * v48[v71];
          ++v71;
        }
        while (v71 < a6);
      }
LABEL_32:
      v45 = (double *)((char *)v45 + a4);
      ++a2;
      v8 = v46 - 1;
      ++v36;
      if (!v46)
        return result;
    }
    v49 = 0;
    v50 = 0;
    v51 = 4;
LABEL_50:
    v63 = 0;
    v60 = v49 - 1;
    v64 = v50;
    v65 = v48 + 2;
    do
    {
      v66 = *(double *)&v7 + *v6 * v65[v64 - 1];
      v67 = *(double *)&v7 + *v6 * v65[v64];
      v68 = *(double *)&v7 + *v6 * v65[v64 + 1];
      v69 = &v45[v64];
      *v69 = *(double *)&v7 + *v6 * v48[v64];
      v70 = (uint64_t)&v45[v50 + v63];
      *(double *)(v70 + 8) = v66;
      *(double *)(v70 + 16) = v67;
      v69[3] = v68;
      ++v60;
      v63 += 4;
      v62 = v50 + v63;
      v64 += 4;
    }
    while (v50 + v63 <= v19);
    v61 = v51 + v63 - 4;
    goto LABEL_53;
  }
  v20 = (float64x2_t)vdupq_lane_s64(v7, 0);
  v21 = 8 * *(unsigned int *)(result + 8);
  do
  {
    v22 = 0;
    v23 = v8;
    v24 = *a2;
    v25 = 4;
    do
    {
      v26 = v25;
      v27 = &v24[v22];
      v28 = *(double *)&v7 + *v6 * *v27;
      v29 = vmlaq_n_f64(v20, *(float64x2_t *)(v27 + 1), *v6);
      v30 = *(double *)&v7 + *v6 * v27[3];
      v31 = 8;
      do
      {
        v32 = (uint64_t)&a2[(unint64_t)v31 / 8][v22];
        v33 = v6[(unint64_t)v31 / 8];
        v28 = v28 + v33 * *(double *)v32;
        v29 = vmlaq_n_f64(v29, *(float64x2_t *)(v32 + 8), v33);
        v30 = v30 + v33 * *(double *)(v32 + 24);
        v31 += 8;
      }
      while (v21 != v31);
      a3[v22] = v28;
      result = (8 * v22) | 8;
      *(float64x2_t *)((char *)a3 + result) = v29;
      *(double *)((char *)a3 + ((8 * v22) | 0x18)) = v30;
      v22 += 4;
      v25 = v26 + 4;
    }
    while (v22 <= v19);
    if ((int)v22 < a6)
    {
      do
      {
        v34 = *(double *)&v7 + *v6 * v24[v26];
        v35 = 8;
        do
        {
          v34 = v34 + v6[(unint64_t)v35 / 8] * a2[(unint64_t)v35 / 8][v26];
          v35 += 8;
        }
        while (v21 != v35);
        a3[v26++] = v34;
      }
      while (v26 < a6);
    }
    a3 = (double *)((char *)a3 + a4);
    ++a2;
    --v8;
  }
  while (v23);
  return result;
}

uint64_t sub_10030211C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452AF8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_1003021C0()
{
  operator delete();
}

uint64_t sub_1003021D4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_100302210(uint64_t a1, uint64_t a2, int a3, int a4, _QWORD *a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v10[2];

  v8 = sub_1003022C8(a1, a2, a3, a4, a5, a6, a7);
  *(_QWORD *)v8 = off_100452B80;
  if (*(_DWORD *)(v8 + 8) != 3)
  {
    v10[0] = 0;
    v10[1] = 0;
    *(_OWORD *)sub_10029430C(v10, 16) = *(_OWORD *)"this->ksize == 3";
    sub_100294B74(-215, v10, "SymmColumnSmallFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3420);
  }
  return a1;
}

void sub_1003022A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_100304C68(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003022C8(uint64_t a1, uint64_t a2, int a3, int a4, _QWORD *a5, uint64_t a6, double a7)
{
  uint64_t v9;
  uint64_t v11[2];

  v9 = sub_100304870(a1, a2, a3, a5, a6, a7);
  *(_QWORD *)v9 = off_100452BF8;
  *(_DWORD *)(v9 + 228) = a4;
  if ((a4 & 3) == 0)
  {
    v11[0] = 0;
    v11[1] = 0;
    qmemcpy((void *)sub_10029430C(v11, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, v11, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10030236C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_100304C68(v9);
  _Unwind_Resume(a1);
}

void sub_100302398(uint64_t a1)
{
  sub_100304C68(a1);
  operator delete();
}

int64_t sub_1003023BC(int64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned int *v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  signed int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t v21;
  int32x2_t v22;
  uint64_t v23;
  int v24;
  int32x4_t v25;
  int32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  unint64_t v40;
  const float *v41;
  const float *v42;
  uint64_t v43;
  const float *v44;
  const float *v45;
  const float *v46;
  const float *v47;
  const float *v48;
  const float *v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  char *v54;
  int32x2_t *v55;
  int32x2_t *v56;
  _BYTE *v57;
  int32x2_t v58;
  int32x2_t v59;
  int32x2_t v60;
  int32x2_t v61;
  int32x2_t v62;
  int32x4_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  BOOL v71;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int32x4_t *v76;
  int32x4_t *v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int v82;
  int v83;
  int32x4_t *v84;
  int32x4_t *v85;
  uint64_t v86;
  unint64_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  uint64_t v93;
  int32x2_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v114;
  BOOL v115;
  BOOL v116;
  BOOL v117;
  BOOL v118;
  unint64_t v119;
  const float *v120;
  const float *v121;
  const float *v122;
  uint64_t v123;
  const float *v124;
  const float *v125;
  const float *v126;
  const float *v127;
  const float *v128;
  const float *v129;
  int32x4_t v130;
  const float *v131;
  const float *v132;
  int32x4_t v133;
  const float *v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  char *v143;
  int32x2_t *v144;
  int32x2_t *v145;
  int32x2_t *v146;
  int32x2_t v147;
  _BYTE *v148;
  int32x2_t v149;
  int32x2_t v150;
  int32x2_t v151;
  int32x2_t v152;
  int32x2_t v153;
  int32x2_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  BOOL v162;
  BOOL v164;
  unint64_t v166;
  int32x4_t *v167;
  int32x4_t *v168;
  int32x4_t *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int32x4_t *v173;
  int32x4_t *v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int v182;
  int v183;
  int32x4_t v184;
  int32x2_t v185;
  uint64_t v186;
  int v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  BOOL v201;
  BOOL v202;
  BOOL v203;
  unint64_t v204;
  const float *v205;
  const float *v206;
  uint64_t v207;
  int32x4_t v208;
  const float *v209;
  const float *v210;
  const float *v211;
  const float *v212;
  const float *v213;
  const float *v214;
  int32x4_t v215;
  int32x4_t v216;
  char *v217;
  int32x2_t *v218;
  int32x2_t *v219;
  _BYTE *v220;
  int32x2_t v221;
  int32x2_t v222;
  int32x2_t v223;
  int32x2_t v224;
  int32x2_t v225;
  int32x4_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  BOOL v234;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  int32x4_t *v239;
  int32x4_t *v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int v246;
  int v247;
  int32x4_t *v248;
  int32x4_t *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  int32x2_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  BOOL v273;
  BOOL v274;
  BOOL v275;
  BOOL v276;
  BOOL v277;
  unint64_t v278;
  const float *v279;
  const float *v280;
  const float *v281;
  uint64_t v282;
  const float *v283;
  const float *v284;
  const float *v285;
  const float *v286;
  const float *v287;
  const float *v288;
  const float *v289;
  const float *v290;
  const float *v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int32x4_t v295;
  char *v296;
  int32x2_t *v297;
  int32x2_t *v298;
  int32x2_t *v299;
  int32x2_t v300;
  _BYTE *v301;
  int32x2_t v302;
  int32x2_t v303;
  int32x2_t v304;
  int32x2_t v305;
  int32x2_t v306;
  int32x2_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  BOOL v315;
  BOOL v317;
  unint64_t v319;
  int32x4_t *v320;
  int32x4_t *v321;
  int32x4_t *v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  int32x4_t *v326;
  int32x4_t *v327;
  int32x4_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int v335;
  int v336;
  uint64_t v337;
  int32x2_t v338;
  uint64_t v339;
  int32x4_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  BOOL v354;
  BOOL v355;
  BOOL v356;
  BOOL v357;
  BOOL v358;
  unint64_t v359;
  const float *v360;
  const float *v361;
  const float *v362;
  uint64_t v363;
  const float *v364;
  const float *v365;
  const float *v366;
  const float *v367;
  const float *v368;
  const float *v369;
  const float *v370;
  int32x4_t v371;
  const float *v372;
  int32x4_t v373;
  const float *v374;
  int32x4_t v375;
  int32x4_t v376;
  int32x4_t v377;
  char *v378;
  int32x2_t *v379;
  int32x2_t *v380;
  int32x2_t *v381;
  int32x2_t v382;
  _BYTE *v383;
  int32x2_t v384;
  int32x2_t v385;
  int32x2_t v386;
  int32x2_t v387;
  int32x2_t v388;
  int32x2_t v389;
  int32x4_t v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t v394;
  unint64_t v395;
  uint64_t v396;
  BOOL v398;
  BOOL v400;
  unint64_t v402;
  int32x4_t *v403;
  int32x4_t *v404;
  int32x4_t *v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  int32x4_t *v409;
  int32x4_t *v410;
  int32x4_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int32x4_t v414;
  int32x4_t v415;
  int32x4_t v416;
  int32x4_t v417;
  int32x4_t v418;
  int32x4_t v419;
  int v420;
  int v421;
  int32x2_t v422;
  int32x4_t v423;
  int32x2_t v424;
  int32x4_t v425;
  int32x2_t v426;
  int32x4_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  int v434;
  int32x2_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int32x4_t v438;
  int32x4_t v439;
  int32x4_t v440;
  int32x4_t v441;
  int32x4_t v442;
  int32x4_t v443;
  int32x4_t v444;
  int32x4_t v445;
  int32x4_t v446;
  int32x4_t v447;
  int32x4_t v448;
  int32x4_t v449;
  int32x4_t v450;
  int32x4_t v451;
  uint64_t v452;
  float32x4x4_t v453;
  int32x4_t v454;
  int32x2_t v455;
  int32x4_t v456;
  int32x4_t v457;
  int32x4_t v458;
  int32x4_t v459;
  int32x4_t v460;
  int32x4_t v461;
  int32x4_t v462;
  int32x4_t v463;
  int32x4_t v464;
  int32x4_t v465;
  int32x4_t v466;
  int32x4_t v467;
  uint64_t v468;
  float32x4x4_t v469;
  int32x4_t v470;
  int32x4_t v471;
  int32x4_t v472;
  int32x4_t v473;
  int32x4_t v474;
  int32x4_t v475;
  int32x4_t v476;
  float32x4x4_t v477;
  int32x4_t v478;
  int32x4_t v479;
  int32x4_t v480;
  float32x4x4_t v481;
  int32x4_t v482;
  int32x4_t v483;
  int32x4_t v484;
  int32x4_t v485;
  int32x4_t v486;
  int32x4_t v487;
  int32x4_t v488;
  int32x4_t v489;
  int32x4_t v490;
  int32x4_t v491;
  float32x4x4_t v492;
  int32x4_t v493;
  float32x4x4_t v494;
  int32x4_t v495;
  int32x4_t v496;
  int32x4_t v497;
  int32x4_t v498;
  int32x4_t v499;
  int32x4_t v500;
  float32x4x4_t v501;
  int32x4_t v502;
  int32x4_t v503;
  int32x4_t v504;
  int32x4_t v505;
  int32x4_t v506;
  float32x4x4_t v507;
  int8x16x2_t v508;
  int8x16x2_t v509;
  int8x16x2_t v510;
  int8x16x2_t v511;
  int8x16x2_t v512;
  int8x16x4_t v513;
  float32x4x4_t v514;
  float32x4x4_t v515;
  int8x16x4_t v516;
  float32x4x4_t v517;
  float32x4x4_t v518;
  int8x16x4_t v519;
  float32x4x4_t v520;
  float32x4x4_t v521;
  float32x4x4_t v522;
  float32x4x4_t v523;
  int8x16x4_t v524;
  int8x16x4_t v525;
  int8x16x4_t v526;
  int8x16x4_t v527;
  int8x16x4_t v528;
  int8x16x4_t v529;
  float32x4x4_t v530;
  float32x4x4_t v531;
  int8x16x4_t v532;
  float32x4x4_t v533;
  int8x16x4_t v534;
  float32x4x4_t v535;
  float32x4x4_t v536;
  float32x4x4_t v537;
  float32x4x4_t v538;
  float32x4x4_t v539;
  float32x4x4_t v540;
  float32x4x4_t v541;
  float32x4x4_t v542;
  float32x4x4_t v543;
  int8x16x4_t v544;
  int8x16x4_t v545;
  float32x4x4_t v546;
  float32x4x4_t v547;
  float32x4x4_t v548;
  float32x4x4_t v549;
  int8x16x4_t v550;
  int8x16x4_t v551;
  int8x16x4_t v552;
  float32x4x4_t v553;
  float32x4x4_t v554;
  int8x16x4_t v555;
  float32x4x4_t v556;
  float32x4x4_t v557;
  int8x16x4_t v558;
  float32x4x4_t v559;
  float32x4x4_t v560;
  float32x4x4_t v561;
  float32x4x4_t v562;
  float32x4x4_t v563;
  float32x4x4_t v564;

  v6 = (unsigned int *)(*(_QWORD *)(result + 32) + 4 * (*(_DWORD *)(result + 8) / 2));
  v7 = *v6;
  if (*v6 == -2)
  {
    v11 = 0;
    v9 = 0;
    v10 = v6[1];
    v8 = v10 == 1;
    if (!a5)
      return result;
LABEL_17:
    v13 = *(_QWORD *)(result + 112);
    v14 = (uint64_t *)(a2 + 8 * ((uint64_t)(*(_DWORD *)(result + 8) + (*(int *)(result + 8) < 0)) >> 1));
    v15 = a5 - 1;
    v431 = result + 120;
    v432 = a6;
    v16 = *(_DWORD *)(result + 224) + HIDWORD(v13);
    v17 = a4;
    v18 = a6 - 4;
    v19 = a6;
    v428 = 4 * a6;
    v430 = a4;
    if ((*(_DWORD *)(result + 228) & 1) == 0)
    {
      v20 = 0;
      if (v9)
      {
        v21 = vdupq_n_s32(v13);
        v22 = vneg_s32(*(int32x2_t *)v21.i8);
        v23 = a3;
        v505 = vdupq_n_s32(v16);
        v445 = vnegq_s32(v21);
        v435 = v22;
        while (1)
        {
          v24 = v15;
          v452 = a3 + v20 * v17;
          result = sub_100305620(v431, v14, v23, a6);
          v25 = 0uLL;
          v26 = v505;
          v28 = v14[1];
          ++v14;
          v27 = v28;
          if (v10 >= 0)
            v29 = *(v14 - 2);
          else
            v29 = v27;
          if (v10 < 0)
            v27 = *(v14 - 2);
          if ((int)result <= (int)v18)
          {
            v30 = (int)result;
            v31 = v18 - (int)result;
            if (v31 < 0x3C)
              goto LABEL_44;
            v32 = v31 >> 2;
            v33 = v452 + 4 + (v31 & 0xFFFFFFFFFFFFFFFCLL) + (int)result;
            v34 = 4 * (int)result;
            v35 = v34 + 16 * (v31 >> 2);
            v36 = v29 + v35 + 16;
            v37 = v23 + (int)result >= v27 + v35 + 16 || v27 + v34 >= v33;
            v38 = !v37;
            v39 = v29 + v34 >= v33 || v23 + (int)result >= v36;
            if (!v39 || v38)
            {
LABEL_44:
              result = (int)result;
LABEL_45:
              v55 = (int32x2_t *)(v29 + 4 * result + 8);
              v56 = (int32x2_t *)(v27 + 4 * result + 8);
              do
              {
                v57 = (_BYTE *)(v23 + result);
                v58 = vmin_s32(vmax_s32(vshl_s32(vsub_s32(vadd_s32(*(int32x2_t *)v26.i8, v56[-1]), v55[-1]), v22), *(int32x2_t *)v25.i8), (int32x2_t)0xFF000000FFLL);
                v57[1] = v58.i8[4];
                *v57 = v58.i8[0];
                v59 = *v56;
                v56 += 2;
                v60 = v59;
                v61 = *v55;
                v55 += 2;
                v62 = vmin_s32(vmax_s32(vshl_s32(vsub_s32(vadd_s32(*(int32x2_t *)v26.i8, v60), v61), v22), *(int32x2_t *)v25.i8), (int32x2_t)0xFF000000FFLL);
                v57[3] = v62.i8[4];
                v57[2] = v62.i8[0];
                result += 4;
              }
              while (result <= v18);
              goto LABEL_47;
            }
            v40 = v32 + 1;
            result = (int)result + 4 * (v40 & 0x7FFFFFFFFFFFFFF0);
            v41 = (const float *)(v27 + v34);
            v42 = (const float *)(v29 + v34);
            v43 = v40 & 0x7FFFFFFFFFFFFFF0;
            do
            {
              v44 = v41;
              v557 = vld4q_f32(v44);
              v44 += 16;
              v45 = v41 + 32;
              v46 = v41 + 48;
              v538 = vld4q_f32(v45);
              v471 = (int32x4_t)v538.val[1];
              v473 = (int32x4_t)v538.val[2];
              v475 = (int32x4_t)v538.val[3];
              v526 = (int8x16x4_t)vld4q_f32(v46);
              v502 = (int32x4_t)v526.val[1];
              v503 = (int32x4_t)v526.val[2];
              v504 = (int32x4_t)v526.val[3];
              v543 = vld4q_f32(v44);
              v481 = v543;
              v47 = v42;
              v552 = (int8x16x4_t)vld4q_f32(v47);
              v47 += 16;
              v48 = v42 + 32;
              v49 = v42 + 48;
              v50 = vaddq_s32(v26, (int32x4_t)v557.val[0]);
              v544 = (int8x16x4_t)vld4q_f32(v48);
              v562 = vld4q_f32(v49);
              v51 = vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v526.val[0]), (int32x4_t)v562.val[0]), v445), (int32x4_t)0);
              v52.i64[0] = 0xFF000000FFLL;
              v52.i64[1] = 0xFF000000FFLL;
              v526.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(v50, (int32x4_t)v552.val[0]), v445), (int32x4_t)0), v52);
              v526.val[3] = (int8x16_t)vminq_s32(v51, v52);
              v53 = vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v538.val[0]), (int32x4_t)v544.val[0]), v445);
              v539 = vld4q_f32(v47);
              v526.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(v53, (int32x4_t)0), v52);
              v526.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v481.val[0]), (int32x4_t)v539.val[0]), v445), (int32x4_t)0), v52);
              v513.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v557.val[1]), (int32x4_t)v552.val[1]), v445), (int32x4_t)0), v52);
              v513.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, v502), (int32x4_t)v562.val[1]), v445), (int32x4_t)0), v52);
              v513.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, v471), (int32x4_t)v544.val[1]), v445), (int32x4_t)0), v52);
              v513.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v481.val[1]), (int32x4_t)v539.val[1]), v445), (int32x4_t)0), v52);
              v526.val[0] = vqtbl4q_s8(v526, (int8x16_t)xmmword_1003BC960);
              v526.val[1] = vqtbl4q_s8(v513, (int8x16_t)xmmword_1003BC960);
              v513.val[2] = (int8x16_t)vsubq_s32(vaddq_s32(v505, v473), (int32x4_t)v544.val[2]);
              v513.val[3] = (int8x16_t)vsubq_s32(vaddq_s32(v505, v475), (int32x4_t)v544.val[3]);
              v544.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v557.val[2]), (int32x4_t)v552.val[2]), v445), (int32x4_t)0), v52);
              v552.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, v503), (int32x4_t)v562.val[2]), v445), (int32x4_t)0), v52);
              v552.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32((int32x4_t)v513.val[2], v445), (int32x4_t)0), v52);
              v544.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v481.val[2]), (int32x4_t)v539.val[2]), v445), (int32x4_t)0), v52);
              v526.val[2] = vqtbl4q_s8(v552, (int8x16_t)xmmword_1003BC960);
              v26 = v505;
              v544.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v557.val[3]), (int32x4_t)v552.val[3]), v445), (int32x4_t)0), v52);
              v544.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, v504), (int32x4_t)v562.val[3]), v445), (int32x4_t)0), v52);
              v544.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32((int32x4_t)v513.val[3], v445), (int32x4_t)0), v52);
              v544.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v481.val[3]), (int32x4_t)v539.val[3]), v445), (int32x4_t)0), v52);
              v526.val[3] = vqtbl4q_s8(v544, (int8x16_t)xmmword_1003BC960);
              v54 = (char *)(v23 + v30);
              vst4q_s8(v54, v526);
              v30 += 64;
              v41 += 64;
              v42 += 64;
              v43 -= 16;
            }
            while (v43);
            v25 = 0uLL;
            v22 = v435;
            if (v40 != (v40 & 0x7FFFFFFFFFFFFFF0))
              goto LABEL_45;
          }
LABEL_47:
          a6 = v432;
          v63.i64[0] = 0xFF000000FFLL;
          v63.i64[1] = 0xFF000000FFLL;
          if ((int)result < v432)
          {
            v64 = (int)result;
            v65 = v19 - (int)result;
            if (v65 < 8)
            {
              v66 = (int)result;
              goto LABEL_69;
            }
            v67 = v452 + v19;
            v68 = v23 + (int)result;
            v69 = 4 * (int)result;
            result = v27 + v428;
            v71 = v23 + v64 < (unint64_t)(v27 + v428) && v27 + v69 < v67;
            if (v29 + v69 < v67 && v68 < v29 + v428)
            {
              v66 = v64;
              goto LABEL_69;
            }
            if (v71)
            {
              v66 = v64;
              goto LABEL_69;
            }
            if (v65 >= 0x10)
            {
              v73 = v65 & 0xFFFFFFFFFFFFFFF0;
              v84 = (int32x4_t *)(v27 + v69);
              v85 = (int32x4_t *)(v29 + v69);
              v86 = v64;
              v87 = v65 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v89 = v84[2];
                v88 = v84[3];
                v90 = *v84;
                v91 = v84[1];
                v84 += 4;
                v525.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v26, v91), v85[1]), v445), v25), v63);
                v525.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v26, v90), *v85), v445), v25), v63);
                v525.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v26, v89), v85[2]), v445), v25), v63);
                v525.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v26, v88), v85[3]), v445), v25), v63);
                *(int8x16_t *)(v23 + v86) = vqtbl4q_s8(v525, (int8x16_t)xmmword_1003BC960);
                v85 += 4;
                v86 += 16;
                v87 -= 16;
              }
              while (v87);
              if (v65 == v73)
                goto LABEL_20;
              if ((v65 & 8) == 0)
              {
                v66 = v73 + v64;
                do
                {
LABEL_69:
                  v82 = (int)(v16 + *(_DWORD *)(v27 + 4 * v66) - *(_DWORD *)(v29 + 4 * v66)) >> v13;
                  v83 = v82 & ~(v82 >> 31);
                  if (v83 >= 255)
                    LOBYTE(v83) = -1;
                  *(_BYTE *)(v23 + v66++) = v83;
                }
                while (v19 != v66);
                goto LABEL_20;
              }
            }
            else
            {
              v73 = 0;
            }
            v66 = (v65 & 0xFFFFFFFFFFFFFFF8) + v64;
            v74 = v73 - (v65 & 0xFFFFFFFFFFFFFFF8);
            v75 = v73 + v64;
            v76 = (int32x4_t *)(v27 + 4 * v75);
            v77 = (int32x4_t *)(v29 + 4 * v75);
            do
            {
              v78 = *v76;
              v79 = v76[1];
              v76 += 2;
              v81 = *v77;
              v80 = v77[1];
              v77 += 2;
              v508.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v26, v79), v80), v445), v25), v63);
              v508.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v26, v78), v81), v445), v25), v63);
              *(_QWORD *)(v23 + v75) = vqtbl2q_s8(v508, (int8x16_t)xmmword_1003BC970).u64[0];
              v75 += 8;
              v74 += 8;
            }
            while (v74);
            if (v65 != (v65 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_69;
          }
LABEL_20:
          v17 = v430;
          v23 += v430;
          v15 = v24 - 1;
          ++v20;
          if (!v24)
            return result;
        }
      }
      v184 = vdupq_n_s32(v13);
      v185 = vneg_s32(*(int32x2_t *)v184.i8);
      v186 = a3;
      v493 = vdupq_n_s32(v10);
      v482 = vdupq_n_s32(v16);
      v464 = vnegq_s32(v184);
      v455 = v185;
      while (1)
      {
        v187 = v15;
        v468 = a3 + v20 * v17;
        result = sub_100305620(v431, v14, v186, a6);
        v188 = 0uLL;
        v189 = v482;
        v190 = v493;
        v192 = v14[1];
        ++v14;
        v191 = v192;
        v193 = *(v14 - 2);
        if ((int)result > (int)v18)
          goto LABEL_171;
        v194 = (int)result;
        v195 = v18 - (int)result;
        if (v195 < 0x3C)
          break;
        v196 = v195 >> 2;
        v197 = v468 + 4 + (v195 & 0xFFFFFFFFFFFFFFFCLL) + (int)result;
        v198 = 4 * (int)result;
        v199 = v198 + 16 * (v195 >> 2);
        v200 = v191 + v199 + 16;
        v201 = v186 + (int)result >= v193 + v199 + 16 || v193 + v198 >= v197;
        v202 = !v201;
        v203 = v191 + v198 >= v197 || v186 + (int)result >= v200;
        if (!v203 || v202)
          break;
        v204 = v196 + 1;
        result = (int)result + 4 * (v204 & 0x7FFFFFFFFFFFFFF0);
        v205 = (const float *)(v191 + v198);
        v206 = (const float *)(v193 + v198);
        v207 = v204 & 0x7FFFFFFFFFFFFFF0;
        v208.i64[0] = 0xFF000000FFLL;
        v208.i64[1] = 0xFF000000FFLL;
        do
        {
          v209 = v205;
          v517 = vld4q_f32(v209);
          v209 += 16;
          v507 = v517;
          v210 = v205 + 32;
          v211 = v205 + 48;
          v546 = vld4q_f32(v210);
          v528 = (int8x16x4_t)vld4q_f32(v211);
          v558 = (int8x16x4_t)vld4q_f32(v209);
          v212 = v206;
          v554 = vld4q_f32(v212);
          v212 += 16;
          v213 = v206 + 32;
          v214 = v206 + 48;
          v563 = vld4q_f32(v213);
          v540 = vld4q_f32(v214);
          v518 = vld4q_f32(v212);
          v215 = vsubq_s32((int32x4_t)v558.val[0], (int32x4_t)v518.val[0]);
          v499 = vsubq_s32((int32x4_t)v558.val[1], (int32x4_t)v518.val[1]);
          v216 = vsubq_s32((int32x4_t)v558.val[2], (int32x4_t)v518.val[2]);
          v518.val[0] = (float32x4_t)vsubq_s32((int32x4_t)v558.val[3], (int32x4_t)v518.val[3]);
          v518.val[1] = (float32x4_t)vsubq_s32((int32x4_t)v546.val[0], (int32x4_t)v563.val[0]);
          v518.val[2] = (float32x4_t)vsubq_s32((int32x4_t)v546.val[1], (int32x4_t)v563.val[1]);
          v518.val[3] = (float32x4_t)vsubq_s32((int32x4_t)v546.val[2], (int32x4_t)v563.val[2]);
          v546.val[0] = (float32x4_t)vsubq_s32((int32x4_t)v546.val[3], (int32x4_t)v563.val[3]);
          v189 = v482;
          v190 = v493;
          v546.val[1] = (float32x4_t)vsubq_s32((int32x4_t)v528.val[0], (int32x4_t)v540.val[0]);
          v546.val[2] = (float32x4_t)vsubq_s32((int32x4_t)v528.val[1], (int32x4_t)v540.val[1]);
          v528.val[0] = (int8x16_t)vsubq_s32((int32x4_t)v528.val[3], (int32x4_t)v540.val[3]);
          v188 = 0uLL;
          v528.val[1] = (int8x16_t)vsubq_s32((int32x4_t)v507.val[0], (int32x4_t)v554.val[0]);
          v528.val[3] = (int8x16_t)vsubq_s32((int32x4_t)v507.val[2], (int32x4_t)v554.val[2]);
          v554.val[0] = (float32x4_t)vsubq_s32((int32x4_t)v507.val[3], (int32x4_t)v554.val[3]);
          v554.val[2] = (float32x4_t)vmlaq_s32(v482, (int32x4_t)v518.val[1], v493);
          v518.val[1] = (float32x4_t)vshlq_s32(vmlaq_s32(v482, (int32x4_t)v546.val[1], v493), v464);
          v546.val[1] = (float32x4_t)vmaxq_s32(vshlq_s32((int32x4_t)v554.val[2], v464), (int32x4_t)0);
          v554.val[2] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v528.val[1], v493), v464), (int32x4_t)0), v208);
          v558.val[1] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v518.val[1], (int32x4_t)0), v208);
          v558.val[0] = (int8x16_t)vminq_s32((int32x4_t)v546.val[1], v208);
          v558.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, vsubq_s32((int32x4_t)v507.val[1], (int32x4_t)v554.val[1]), v493), v464), (int32x4_t)0), v208);
          v563.val[1] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v546.val[2], v493), v464), (int32x4_t)0), v208);
          v563.val[0] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v518.val[2], v493), v464), (int32x4_t)0), v208);
          v554.val[3] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, v215, v493), v464), (int32x4_t)0), v208);
          v558.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, v499, v493), v464), (int32x4_t)0), v208);
          v554.val[1] = (float32x4_t)vqtbl4q_s8(v558, (int8x16_t)xmmword_1003BC960);
          v554.val[2] = (float32x4_t)vqtbl4q_s8(*(int8x16x4_t *)((char *)&v558 + 32), (int8x16_t)xmmword_1003BC960);
          v558.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v528.val[3], v493), v464), (int32x4_t)0), v208);
          v563.val[0] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, vsubq_s32((int32x4_t)v528.val[2], (int32x4_t)v540.val[2]), v493), v464), (int32x4_t)0), v208);
          v558.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v518.val[3], v493), v464), (int32x4_t)0), v208);
          v558.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, v216, v493), v464), (int32x4_t)0), v208);
          v554.val[3] = (float32x4_t)vqtbl4q_s8(*(int8x16x4_t *)((char *)&v558 + 16), (int8x16_t)xmmword_1003BC960);
          v518.val[3] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v554.val[0], v493), v464), (int32x4_t)0), v208);
          v528.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v528.val[0], v493), v464), (int32x4_t)0), v208);
          v528.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v546.val[0], v493), v464), (int32x4_t)0), v208);
          v528.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v518.val[0], v493), v464), (int32x4_t)0), v208);
          v558.val[0] = vqtbl4q_s8(v528, (int8x16_t)xmmword_1003BC960);
          v217 = (char *)(v186 + v194);
          vst4q_s8(v217, v558);
          v194 += 64;
          v205 += 64;
          v206 += 64;
          v207 -= 16;
        }
        while (v207);
        v185 = v455;
        if (v204 != (v204 & 0x7FFFFFFFFFFFFFF0))
          goto LABEL_169;
LABEL_171:
        a6 = v432;
        v226.i64[0] = 0xFF000000FFLL;
        v226.i64[1] = 0xFF000000FFLL;
        if ((int)result < v432)
        {
          v227 = (int)result;
          v228 = v19 - (int)result;
          if (v228 < 8)
          {
            v229 = (int)result;
            goto LABEL_193;
          }
          v230 = v468 + v19;
          v231 = v186 + (int)result;
          v232 = 4 * (int)result;
          result = v193 + v428;
          v234 = v186 + v227 < (unint64_t)(v193 + v428) && v193 + v232 < v230;
          if (v191 + v232 < v230 && v231 < v191 + v428)
          {
            v229 = v227;
            goto LABEL_193;
          }
          if (v234)
          {
            v229 = v227;
            goto LABEL_193;
          }
          if (v228 >= 0x10)
          {
            v236 = v228 & 0xFFFFFFFFFFFFFFF0;
            v248 = (int32x4_t *)(v191 + v232);
            v249 = (int32x4_t *)(v193 + v232);
            v250 = v227;
            v251 = v228 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v529.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v189, vsubq_s32(v248[2], v249[2]), v190), v464), v188), v226);
              v529.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v189, vsubq_s32(v248[1], v249[1]), v190), v464), v188), v226);
              v529.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v189, vsubq_s32(*v248, *v249), v190), v464), v188), v226);
              v529.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v189, vsubq_s32(v248[3], v249[3]), v190), v464), v188), v226);
              *(int8x16_t *)(v186 + v250) = vqtbl4q_s8(v529, (int8x16_t)xmmword_1003BC960);
              v248 += 4;
              v249 += 4;
              v250 += 16;
              v251 -= 16;
            }
            while (v251);
            if (v228 == v236)
              goto LABEL_149;
            if ((v228 & 8) == 0)
            {
              v229 = v236 + v227;
              do
              {
LABEL_193:
                v246 = (int)(v16 + (*(_DWORD *)(v191 + 4 * v229) - *(_DWORD *)(v193 + 4 * v229)) * v10) >> v13;
                v247 = v246 & ~(v246 >> 31);
                if (v247 >= 255)
                  LOBYTE(v247) = -1;
                *(_BYTE *)(v186 + v229++) = v247;
              }
              while (v19 != v229);
              goto LABEL_149;
            }
          }
          else
          {
            v236 = 0;
          }
          v229 = (v228 & 0xFFFFFFFFFFFFFFF8) + v227;
          v237 = v236 - (v228 & 0xFFFFFFFFFFFFFFF8);
          v238 = v236 + v227;
          v239 = (int32x4_t *)(v191 + 4 * v238);
          v240 = (int32x4_t *)(v193 + 4 * v238);
          do
          {
            v242 = *v239;
            v241 = v239[1];
            v239 += 2;
            v244 = *v240;
            v243 = v240[1];
            v240 += 2;
            v245 = vmaxq_s32(vshlq_s32(vmlaq_s32(v189, vsubq_s32(v242, v244), v190), v464), v188);
            v510.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v189, vsubq_s32(v241, v243), v190), v464), v188), v226);
            v510.val[0] = (int8x16_t)vminq_s32(v245, v226);
            *(_QWORD *)(v186 + v238) = vqtbl2q_s8(v510, (int8x16_t)xmmword_1003BC970).u64[0];
            v238 += 8;
            v237 += 8;
          }
          while (v237);
          if (v228 != (v228 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_193;
        }
LABEL_149:
        v17 = v430;
        v186 += v430;
        v15 = v187 - 1;
        ++v20;
        if (!v187)
          return result;
      }
      result = (int)result;
LABEL_169:
      v218 = (int32x2_t *)(v193 + 4 * result + 8);
      v219 = (int32x2_t *)(v191 + 4 * result + 8);
      do
      {
        v220 = (_BYTE *)(v186 + result);
        v221 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(*(int32x2_t *)v189.i8, vsub_s32(v219[-1], v218[-1]), *(int32x2_t *)v190.i8), v185), *(int32x2_t *)v188.i8), (int32x2_t)0xFF000000FFLL);
        v220[1] = v221.i8[4];
        *v220 = v221.i8[0];
        v222 = *v219;
        v219 += 2;
        v223 = v222;
        v224 = *v218;
        v218 += 2;
        v225 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(*(int32x2_t *)v189.i8, vsub_s32(v223, v224), *(int32x2_t *)v190.i8), v185), *(int32x2_t *)v188.i8), (int32x2_t)0xFF000000FFLL);
        v220[3] = v225.i8[4];
        v220[2] = v225.i8[0];
        result += 4;
      }
      while (result <= v18);
      goto LABEL_171;
    }
    v506 = vdupq_n_s32(v16);
    v92 = vdupq_n_s32(v13);
    if (v11)
    {
      v93 = 0;
      v498 = vnegq_s32(v92);
      v94 = vneg_s32(*(int32x2_t *)v92.i8);
      v95 = a3;
      v426 = v94;
      while (1)
      {
        v96 = v15;
        v97 = a3 + v93 * v17;
        result = sub_100305620(v431, v14, v95, a6);
        v98.i64[0] = 0xFF000000FFLL;
        v98.i64[1] = 0xFF000000FFLL;
        v99 = 0uLL;
        v100 = v506;
        v101 = *(v14 - 1);
        v102 = *v14;
        v104 = v14[1];
        ++v14;
        v103 = v104;
        if ((int)result > (int)v18)
          goto LABEL_109;
        v105 = (int)result;
        v106 = v18 - (int)result;
        if (v106 < 0x3C)
          break;
        v107 = v106 >> 2;
        v108 = v95 + (int)result;
        v109 = v97 + 4 + (v106 & 0xFFFFFFFFFFFFFFFCLL) + (int)result;
        v110 = 4 * (int)result;
        v111 = v110 + 16 * (v106 >> 2);
        v112 = v101 + v111 + 16;
        v113 = v103 + v111 + 16;
        v114 = v108 >= v102 + v111 + 16 || v102 + 4 * (int)result >= v109;
        v115 = !v114;
        v116 = v108 >= v113 || v103 + 4 * (int)result >= v109;
        v117 = !v116;
        v118 = v101 + v110 >= v109 || v108 >= v112;
        if (!v118 || v115 || v117)
          break;
        v119 = v107 + 1;
        result = (int)result + 4 * (v119 & 0x7FFFFFFFFFFFFFF0);
        v120 = (const float *)(v101 + v110);
        v121 = (const float *)(v102 + v110);
        v122 = (const float *)(v103 + v110);
        v123 = v119 & 0x7FFFFFFFFFFFFFF0;
        do
        {
          v124 = v120;
          v125 = v120 + 32;
          v126 = v120 + 48;
          v537 = vld4q_f32(v124);
          v124 += 16;
          v514 = vld4q_f32(v125);
          v492 = v514;
          v545 = (int8x16x4_t)vld4q_f32(v126);
          v515 = vld4q_f32(v124);
          v453 = v515;
          v127 = v121;
          v553 = vld4q_f32(v127);
          v127 += 16;
          v472 = (int32x4_t)v553.val[1];
          v474 = (int32x4_t)v553.val[2];
          v476 = (int32x4_t)v553.val[3];
          v128 = v121 + 32;
          v129 = v121 + 48;
          v516 = (int8x16x4_t)vld4q_f32(v128);
          v478 = (int32x4_t)v516.val[1];
          v479 = (int32x4_t)v516.val[2];
          v480 = (int32x4_t)v516.val[3];
          v561 = vld4q_f32(v129);
          v484 = (int32x4_t)v561.val[1];
          v487 = (int32x4_t)v561.val[2];
          v489 = (int32x4_t)v561.val[3];
          v446 = (int32x4_t)v537.val[2];
          v449 = (int32x4_t)v537.val[3];
          v516.val[1] = (int8x16_t)vaddq_s32(vaddq_s32(v100, (int32x4_t)v545.val[0]), vaddq_s32((int32x4_t)v561.val[0], (int32x4_t)v561.val[0]));
          *(float32x4x4_t *)((char *)&v553 + 16) = vld4q_f32(v127);
          v130 = vaddq_s32(vaddq_s32(v100, (int32x4_t)v492.val[0]), vaddq_s32((int32x4_t)v516.val[0], (int32x4_t)v516.val[0]));
          v131 = v122;
          v132 = v122 + 48;
          v561 = vld4q_f32(v131);
          v131 += 16;
          v460 = v133;
          v516 = (int8x16x4_t)vld4q_f32(v132);
          v134 = v122 + 32;
          v136 = (int32x4_t)v561.val[3];
          v441 = v137;
          v443 = (int32x4_t)v516.val[0];
          v535 = vld4q_f32(v134);
          v456 = (int32x4_t)v535.val[1];
          v458 = (int32x4_t)v535.val[2];
          v561.val[3].i64[0] = 0xFF000000FFLL;
          v561.val[3].i64[1] = 0xFF000000FFLL;
          v516.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, (int32x4_t)v537.val[0]), vaddq_s32((int32x4_t)v553.val[0], (int32x4_t)v553.val[0])), v135), v498), v99), (int32x4_t)v561.val[3]);
          v516.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32((int32x4_t)v516.val[1], (int32x4_t)v561.val[2]), v498), v99), (int32x4_t)v561.val[3]);
          v138 = vaddq_s32(v130, (int32x4_t)v535.val[0]);
          v535 = vld4q_f32(v131);
          v436 = (int32x4_t)v535.val[0];
          v516.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(v138, v498), (int32x4_t)0), (int32x4_t)v561.val[3]);
          v545.val[0].i64[0] = 0xFF000000FFLL;
          v545.val[0].i64[1] = 0xFF000000FFLL;
          v516.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, (int32x4_t)v453.val[0]), vaddq_s32((int32x4_t)v553.val[1], (int32x4_t)v553.val[1])), v139), v498), (int32x4_t)0), (int32x4_t)v545.val[0]);
          v535.val[0].i64[0] = 0xFF000000FFLL;
          v535.val[0].i64[1] = 0xFF000000FFLL;
          v537.val[2] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v537.val[1]), vaddq_s32(v472, v472)), v460), v498), (int32x4_t)0), (int32x4_t)v535.val[0]);
          v140 = vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v545.val[1]), vaddq_s32(v484, v484)), v136), v498), (int32x4_t)0), (int32x4_t)v535.val[0]);
          v141 = vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v492.val[1]), vaddq_s32(v478, v478)), v456), v498), (int32x4_t)0), (int32x4_t)v535.val[0]);
          v537.val[3] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v453.val[1]), vaddq_s32((int32x4_t)v553.val[2], (int32x4_t)v553.val[2])), v436), v498), (int32x4_t)0), (int32x4_t)v535.val[0]);
          v137.i64[0] = 0xFF000000FFLL;
          v137.i64[1] = 0xFF000000FFLL;
          v516.val[0] = vqtbl4q_s8(v516, (int8x16_t)xmmword_1003BC960);
          v516.val[1] = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v537 + 32), (int8x16_t)xmmword_1003BC960);
          v99 = 0uLL;
          v545.val[0] = (int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v545.val[2]), vaddq_s32(v487, v487)), v441);
          v545.val[1] = (int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v545.val[3]), vaddq_s32(v489, v489)), v443);
          v545.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, v446), vaddq_s32(v474, v474)), (int32x4_t)v561.val[0]), v498), (int32x4_t)0), v137);
          v553.val[1] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32((int32x4_t)v545.val[0], v498), (int32x4_t)0), v137);
          v553.val[0] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v492.val[2]), vaddq_s32(v479, v479)), v458), v498), (int32x4_t)0), v137);
          v545.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v453.val[2]), vaddq_s32((int32x4_t)v553.val[3], (int32x4_t)v553.val[3])), (int32x4_t)v535.val[1]), v498), (int32x4_t)0), v137);
          v516.val[2] = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v545 + 32), (int8x16_t)xmmword_1003BC960);
          v98.i64[0] = 0xFF000000FFLL;
          v98.i64[1] = 0xFF000000FFLL;
          v100 = v506;
          v545.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, v449), vaddq_s32(v476, v476)), (int32x4_t)v561.val[1]), v498), (int32x4_t)0), v98);
          v545.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32((int32x4_t)v545.val[1], v498), (int32x4_t)0), v98);
          v545.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v492.val[3]), vaddq_s32(v480, v480)), (int32x4_t)v535.val[3]), v498), (int32x4_t)0), v98);
          v545.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v453.val[3]), vaddq_s32(v142, v142)), (int32x4_t)v535.val[2]), v498), (int32x4_t)0), v98);
          v516.val[3] = vqtbl4q_s8(v545, (int8x16_t)xmmword_1003BC960);
          v143 = (char *)(v95 + v105);
          vst4q_s8(v143, v516);
          v105 += 64;
          v120 += 64;
          v121 += 64;
          v122 += 64;
          v123 -= 16;
        }
        while (v123);
        v94 = v426;
        if (v119 != (v119 & 0x7FFFFFFFFFFFFFF0))
          goto LABEL_107;
LABEL_109:
        a6 = v432;
        if ((int)result < v432)
        {
          v155 = (int)result;
          v156 = v19 - (int)result;
          if (v156 < 8)
          {
            v157 = (int)result;
            goto LABEL_144;
          }
          v158 = v97 + v19;
          v159 = v95 + (int)result;
          v160 = 4 * (int)result;
          result = v101 + v160;
          v162 = v95 + v155 < (unint64_t)(v102 + v428) && v102 + 4 * v155 < v158;
          v164 = v159 < v103 + v428 && v103 + 4 * v155 < v158;
          if (result < v158 && v159 < v101 + v428)
          {
            v157 = v155;
            goto LABEL_144;
          }
          if (v162)
          {
            v157 = v155;
            do
            {
LABEL_144:
              v182 = (int)(v16
                         + *(_DWORD *)(v101 + 4 * v157)
                         + 2 * *(_DWORD *)(v102 + 4 * v157)
                         + *(_DWORD *)(v103 + 4 * v157)) >> v13;
              v183 = v182 & ~(v182 >> 31);
              if (v183 >= 255)
                LOBYTE(v183) = -1;
              *(_BYTE *)(v95 + v157++) = v183;
            }
            while (v19 != v157);
            goto LABEL_80;
          }
          if (v164)
          {
            v157 = v155;
            goto LABEL_144;
          }
          if (v156 >= 0x10)
          {
            v166 = v156 & 0xFFFFFFFFFFFFFFF0;
            v167 = (int32x4_t *)(v101 + v160);
            v168 = (int32x4_t *)(v102 + v160);
            v169 = (int32x4_t *)(v103 + v160);
            v170 = v155;
            result = v156 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v527.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, v167[1]), vaddq_s32(v168[1], v168[1])), v169[1]), v498), v99), v98);
              v527.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, *v167), vaddq_s32(*v168, *v168)), *v169), v498), v99), v98);
              v527.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, v167[2]), vaddq_s32(v168[2], v168[2])), v169[2]), v498), v99), v98);
              v527.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, v167[3]), vaddq_s32(v168[3], v168[3])), v169[3]), v498), v99), v98);
              *(int8x16_t *)(v95 + v170) = vqtbl4q_s8(v527, (int8x16_t)xmmword_1003BC960);
              v167 += 4;
              v168 += 4;
              v169 += 4;
              v170 += 16;
              result -= 16;
            }
            while (result);
            if (v156 == v166)
              goto LABEL_80;
            if ((v156 & 8) == 0)
            {
              v157 = v166 + v155;
              goto LABEL_144;
            }
          }
          else
          {
            v166 = 0;
          }
          v157 = (v156 & 0xFFFFFFFFFFFFFFF8) + v155;
          v171 = v166 - (v156 & 0xFFFFFFFFFFFFFFF8);
          v172 = v166 + v155;
          v173 = (int32x4_t *)(v101 + 4 * v172);
          v174 = (int32x4_t *)(v102 + 4 * v172);
          result = v103 + 4 * v172;
          do
          {
            v176 = *v173;
            v175 = v173[1];
            v173 += 2;
            v178 = *v174;
            v177 = v174[1];
            v174 += 2;
            v180 = *(int32x4_t *)result;
            v179 = *(int32x4_t *)(result + 16);
            result += 32;
            v181 = vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, v176), vaddq_s32(v178, v178)), v180), v498), v99);
            v509.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, v175), vaddq_s32(v177, v177)), v179), v498), v99), v98);
            v509.val[0] = (int8x16_t)vminq_s32(v181, v98);
            *(_QWORD *)(v95 + v172) = vqtbl2q_s8(v509, (int8x16_t)xmmword_1003BC970).u64[0];
            v172 += 8;
            v171 += 8;
          }
          while (v171);
          if (v156 != (v156 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_144;
        }
LABEL_80:
        v17 = v430;
        v95 += v430;
        v15 = v96 - 1;
        ++v93;
        if (!v96)
          return result;
      }
      result = (int)result;
LABEL_107:
      v144 = (int32x2_t *)(v102 + 4 * result + 8);
      v145 = (int32x2_t *)(v103 + 4 * result + 8);
      v146 = (int32x2_t *)(v101 + 4 * result + 8);
      do
      {
        v147 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vadd_s32(vadd_s32(*(int32x2_t *)v100.i8, v146[-1]), vadd_s32(v144[-1], v144[-1])), v145[-1]), v94), *(int32x2_t *)v99.i8), (int32x2_t)0xFF000000FFLL);
        v148 = (_BYTE *)(v95 + result);
        v148[1] = v147.i8[4];
        *v148 = v147.i8[0];
        v149 = *v146;
        v146 += 2;
        v150 = v149;
        v151 = *v144;
        v144 += 2;
        v152 = vadd_s32(v151, v151);
        v153 = *v145;
        v145 += 2;
        v154 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vadd_s32(vadd_s32(*(int32x2_t *)v100.i8, v150), v152), v153), v94), *(int32x2_t *)v99.i8), (int32x2_t)0xFF000000FFLL);
        v148[3] = v154.i8[4];
        result += 4;
        v148[2] = v154.i8[0];
      }
      while (result <= v18);
      goto LABEL_109;
    }
    if (v8)
    {
      v252 = 0;
      v500 = vnegq_s32(v92);
      v253 = vneg_s32(*(int32x2_t *)v92.i8);
      v254 = a3;
      v424 = v253;
      while (1)
      {
        v255 = v15;
        v256 = a3 + v252 * v17;
        result = sub_100305620(v431, v14, v254, a6);
        v257.i64[0] = 0xFF000000FFLL;
        v257.i64[1] = 0xFF000000FFLL;
        v258 = 0uLL;
        v259 = v506;
        v260 = *(v14 - 1);
        v261 = *v14;
        v263 = v14[1];
        ++v14;
        v262 = v263;
        if ((int)result > (int)v18)
          goto LABEL_233;
        v264 = (int)result;
        v265 = v18 - (int)result;
        if (v265 < 0x3C)
          break;
        v266 = v265 >> 2;
        v267 = v254 + (int)result;
        v268 = v256 + 4 + (v265 & 0xFFFFFFFFFFFFFFFCLL) + (int)result;
        v269 = 4 * (int)result;
        v270 = v269 + 16 * (v265 >> 2);
        v271 = v260 + v270 + 16;
        v272 = v262 + v270 + 16;
        v273 = v267 >= v261 + v270 + 16 || v261 + 4 * (int)result >= v268;
        v274 = !v273;
        v275 = v267 >= v272 || v262 + 4 * (int)result >= v268;
        v276 = !v275;
        v277 = v260 + v269 >= v268 || v267 >= v271;
        if (!v277 || v274 || v276)
          break;
        v278 = v266 + 1;
        result = (int)result + 4 * (v278 & 0x7FFFFFFFFFFFFFF0);
        v279 = (const float *)(v260 + v269);
        v280 = (const float *)(v261 + v269);
        v281 = (const float *)(v262 + v269);
        v282 = v278 & 0x7FFFFFFFFFFFFFF0;
        do
        {
          v283 = v279;
          v284 = v279 + 32;
          v285 = v279 + 48;
          v564 = vld4q_f32(v283);
          v283 += 16;
          v519 = (int8x16x4_t)vld4q_f32(v284);
          v495 = (int32x4_t)v519.val[1];
          v496 = (int32x4_t)v519.val[2];
          v497 = (int32x4_t)v519.val[3];
          v547 = vld4q_f32(v285);
          v461 = (int32x4_t)v547.val[1];
          v462 = (int32x4_t)v547.val[2];
          v463 = (int32x4_t)v547.val[3];
          v530 = vld4q_f32(v283);
          v469 = v530;
          v286 = v280;
          v531 = vld4q_f32(v286);
          v286 += 16;
          v287 = v280 + 32;
          v288 = v280 + 48;
          v559 = vld4q_f32(v287);
          v457 = (int32x4_t)v559.val[1];
          v536 = vld4q_f32(v288);
          v466 = (int32x4_t)v536.val[1];
          v467 = (int32x4_t)v536.val[3];
          v454 = (int32x4_t)v564.val[3];
          v559.val[1] = v531.val[1];
          v447 = (int32x4_t)v531.val[2];
          v450 = (int32x4_t)v531.val[3];
          v519.val[1] = (int8x16_t)vsubq_s32(vaddq_s32(v259, (int32x4_t)v547.val[0]), vaddq_s32((int32x4_t)v536.val[0], (int32x4_t)v536.val[0]));
          v555 = (int8x16x4_t)vld4q_f32(v286);
          v531.val[1] = (float32x4_t)vsubq_s32(vaddq_s32(v259, (int32x4_t)v519.val[0]), vaddq_s32((int32x4_t)v559.val[0], (int32x4_t)v559.val[0]));
          v289 = v281;
          v290 = v281 + 48;
          v548 = vld4q_f32(v289);
          v289 += 16;
          v485 = (int32x4_t)v548.val[1];
          v488 = (int32x4_t)v548.val[2];
          v490 = (int32x4_t)v548.val[3];
          *(float32x4x4_t *)((char *)&v531 + 32) = vld4q_f32(v290);
          v291 = v281 + 32;
          v519.val[2] = (int8x16_t)vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, (int32x4_t)v564.val[0]), vaddq_s32((int32x4_t)v531.val[0], (int32x4_t)v531.val[0])), (int32x4_t)v548.val[0]), v500);
          v549 = vld4q_f32(v291);
          v437 = (int32x4_t)v549.val[1];
          v438 = (int32x4_t)v549.val[2];
          v439 = (int32x4_t)v549.val[3];
          v531.val[0] = (float32x4_t)vmaxq_s32(vshlq_s32(vaddq_s32((int32x4_t)v519.val[1], (int32x4_t)v531.val[2]), v500), (int32x4_t)0);
          v519.val[0].i64[0] = 0xFF000000FFLL;
          v519.val[0].i64[1] = 0xFF000000FFLL;
          v519.val[0] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v519.val[2], (int32x4_t)0), (int32x4_t)v519.val[0]);
          v531.val[2].i64[0] = 0xFF000000FFLL;
          v531.val[2].i64[1] = 0xFF000000FFLL;
          v519.val[3] = (int8x16_t)vminq_s32((int32x4_t)v531.val[0], (int32x4_t)v531.val[2]);
          v292 = vaddq_s32((int32x4_t)v531.val[1], (int32x4_t)v549.val[0]);
          v550 = (int8x16x4_t)vld4q_f32(v289);
          v531.val[1].i64[0] = 0xFF000000FFLL;
          v531.val[1].i64[1] = 0xFF000000FFLL;
          v519.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(v292, v500), (int32x4_t)0), (int32x4_t)v531.val[1]);
          v519.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, (int32x4_t)v469.val[0]), vaddq_s32((int32x4_t)v555.val[0], (int32x4_t)v555.val[0])), (int32x4_t)v550.val[0]), v500), (int32x4_t)0), (int32x4_t)v531.val[1]);
          v536.val[3] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, (int32x4_t)v564.val[1]), vaddq_s32((int32x4_t)v559.val[1], (int32x4_t)v559.val[1])), v485), v500), (int32x4_t)0), (int32x4_t)v531.val[1]);
          v293 = vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, v461), vaddq_s32(v466, v466)), (int32x4_t)v531.val[3]), v500), (int32x4_t)0), (int32x4_t)v531.val[1]);
          v294 = vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, v495), vaddq_s32(v457, v457)), v437), v500), (int32x4_t)0), (int32x4_t)v531.val[1]);
          v531.val[0].i64[0] = 0xFF000000FFLL;
          v531.val[0].i64[1] = 0xFF000000FFLL;
          v295 = vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, (int32x4_t)v469.val[1]), vaddq_s32((int32x4_t)v555.val[1], (int32x4_t)v555.val[1])), (int32x4_t)v550.val[1]), v500), (int32x4_t)0), (int32x4_t)v531.val[0]);
          v519.val[0] = vqtbl4q_s8(v519, (int8x16_t)xmmword_1003BC960);
          v519.val[1] = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v536 + 48), (int8x16_t)xmmword_1003BC960);
          v258 = 0uLL;
          v550.val[1] = (int8x16_t)vaddq_s32(vsubq_s32(vaddq_s32(v506, (int32x4_t)v469.val[2]), vaddq_s32((int32x4_t)v555.val[2], (int32x4_t)v555.val[2])), (int32x4_t)v550.val[2]);
          v531.val[0] = (float32x4_t)vaddq_s32(vsubq_s32(vaddq_s32(v506, (int32x4_t)v469.val[3]), vaddq_s32((int32x4_t)v555.val[3], (int32x4_t)v555.val[3])), (int32x4_t)v550.val[3]);
          v550.val[3].i64[0] = 0xFF000000FFLL;
          v550.val[3].i64[1] = 0xFF000000FFLL;
          v550.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, (int32x4_t)v564.val[2]), vaddq_s32(v447, v447)), v488), v500), (int32x4_t)0), (int32x4_t)v550.val[3]);
          v564.val[2].i64[0] = 0xFF000000FFLL;
          v564.val[2].i64[1] = 0xFF000000FFLL;
          v555.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, v462), vaddq_s32((int32x4_t)v536.val[2], (int32x4_t)v536.val[2])), (int32x4_t)v536.val[0]), v500), (int32x4_t)0), (int32x4_t)v564.val[2]);
          v531.val[3].i64[0] = 0xFF000000FFLL;
          v531.val[3].i64[1] = 0xFF000000FFLL;
          v555.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, v496), vaddq_s32((int32x4_t)v559.val[2], (int32x4_t)v559.val[2])), v438), v500), (int32x4_t)0), (int32x4_t)v531.val[3]);
          v550.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32((int32x4_t)v550.val[1], v500), (int32x4_t)0), (int32x4_t)v531.val[3]);
          v519.val[2] = vqtbl4q_s8(v555, (int8x16_t)xmmword_1003BC960);
          v259 = v506;
          v550.val[0].i64[0] = 0xFF000000FFLL;
          v550.val[0].i64[1] = 0xFF000000FFLL;
          v550.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, v454), vaddq_s32(v450, v450)), v490), v500), (int32x4_t)0), (int32x4_t)v550.val[0]);
          v531.val[1].i64[0] = 0xFF000000FFLL;
          v531.val[1].i64[1] = 0xFF000000FFLL;
          v550.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, v463), vaddq_s32(v467, v467)), (int32x4_t)v536.val[1]), v500), (int32x4_t)0), (int32x4_t)v531.val[1]);
          v531.val[2].i64[0] = 0xFF000000FFLL;
          v531.val[2].i64[1] = 0xFF000000FFLL;
          v550.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, v497), vaddq_s32((int32x4_t)v559.val[3], (int32x4_t)v559.val[3])), v439), v500), (int32x4_t)0), (int32x4_t)v531.val[2]);
          v257.i64[0] = 0xFF000000FFLL;
          v257.i64[1] = 0xFF000000FFLL;
          v550.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32((int32x4_t)v531.val[0], v500), (int32x4_t)0), v257);
          v519.val[3] = vqtbl4q_s8(v550, (int8x16_t)xmmword_1003BC960);
          v296 = (char *)(v254 + v264);
          vst4q_s8(v296, v519);
          v264 += 64;
          v279 += 64;
          v280 += 64;
          v281 += 64;
          v282 -= 16;
        }
        while (v282);
        v253 = v424;
        if (v278 != (v278 & 0x7FFFFFFFFFFFFFF0))
          goto LABEL_231;
LABEL_233:
        a6 = v432;
        if ((int)result < v432)
        {
          v308 = (int)result;
          v309 = v19 - (int)result;
          if (v309 < 8)
          {
            v310 = (int)result;
            goto LABEL_268;
          }
          v311 = v256 + v19;
          v312 = v254 + (int)result;
          v313 = 4 * (int)result;
          result = v260 + v313;
          v315 = v254 + v308 < (unint64_t)(v261 + v428) && v261 + 4 * v308 < v311;
          v317 = v312 < v262 + v428 && v262 + 4 * v308 < v311;
          if (result < v311 && v312 < v260 + v428)
          {
            v310 = v308;
            goto LABEL_268;
          }
          if (v315)
          {
            v310 = v308;
            do
            {
LABEL_268:
              v335 = (int)(v16
                         + *(_DWORD *)(v260 + 4 * v310)
                         - 2 * *(_DWORD *)(v261 + 4 * v310)
                         + *(_DWORD *)(v262 + 4 * v310)) >> v13;
              v336 = v335 & ~(v335 >> 31);
              if (v336 >= 255)
                LOBYTE(v336) = -1;
              *(_BYTE *)(v254 + v310++) = v336;
            }
            while (v19 != v310);
            goto LABEL_204;
          }
          if (v317)
          {
            v310 = v308;
            goto LABEL_268;
          }
          if (v309 >= 0x10)
          {
            v319 = v309 & 0xFFFFFFFFFFFFFFF0;
            v320 = (int32x4_t *)(v260 + v313);
            v321 = (int32x4_t *)(v261 + v313);
            v322 = (int32x4_t *)(v262 + v313);
            v323 = v308;
            result = v309 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v532.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, v320[1]), vaddq_s32(v321[1], v321[1])), v322[1]), v500), v258), v257);
              v532.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, *v320), vaddq_s32(*v321, *v321)), *v322), v500), v258), v257);
              v532.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, v320[2]), vaddq_s32(v321[2], v321[2])), v322[2]), v500), v258), v257);
              v532.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, v320[3]), vaddq_s32(v321[3], v321[3])), v322[3]), v500), v258), v257);
              *(int8x16_t *)(v254 + v323) = vqtbl4q_s8(v532, (int8x16_t)xmmword_1003BC960);
              v320 += 4;
              v321 += 4;
              v322 += 4;
              v323 += 16;
              result -= 16;
            }
            while (result);
            if (v309 == v319)
              goto LABEL_204;
            if ((v309 & 8) == 0)
            {
              v310 = v319 + v308;
              goto LABEL_268;
            }
          }
          else
          {
            v319 = 0;
          }
          v310 = (v309 & 0xFFFFFFFFFFFFFFF8) + v308;
          v324 = v319 - (v309 & 0xFFFFFFFFFFFFFFF8);
          v325 = v319 + v308;
          v326 = (int32x4_t *)(v260 + 4 * v325);
          v327 = (int32x4_t *)(v261 + 4 * v325);
          result = v262 + 4 * v325;
          do
          {
            v329 = *v326;
            v328 = v326[1];
            v326 += 2;
            v331 = *v327;
            v330 = v327[1];
            v327 += 2;
            v333 = *(int32x4_t *)result;
            v332 = *(int32x4_t *)(result + 16);
            result += 32;
            v334 = vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, v329), vaddq_s32(v331, v331)), v333), v500), v258);
            v511.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, v328), vaddq_s32(v330, v330)), v332), v500), v258), v257);
            v511.val[0] = (int8x16_t)vminq_s32(v334, v257);
            *(_QWORD *)(v254 + v325) = vqtbl2q_s8(v511, (int8x16_t)xmmword_1003BC970).u64[0];
            v325 += 8;
            v324 += 8;
          }
          while (v324);
          if (v309 != (v309 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_268;
        }
LABEL_204:
        v17 = v430;
        v254 += v430;
        v15 = v255 - 1;
        ++v252;
        if (!v255)
          return result;
      }
      result = (int)result;
LABEL_231:
      v297 = (int32x2_t *)(v261 + 4 * result + 8);
      v298 = (int32x2_t *)(v262 + 4 * result + 8);
      v299 = (int32x2_t *)(v260 + 4 * result + 8);
      do
      {
        v300 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vsub_s32(vadd_s32(*(int32x2_t *)v259.i8, v299[-1]), vadd_s32(v297[-1], v297[-1])), v298[-1]), v253), *(int32x2_t *)v258.i8), (int32x2_t)0xFF000000FFLL);
        v301 = (_BYTE *)(v254 + result);
        v301[1] = v300.i8[4];
        *v301 = v300.i8[0];
        v302 = *v299;
        v299 += 2;
        v303 = v302;
        v304 = *v297;
        v297 += 2;
        v305 = v304;
        v306 = *v298;
        v298 += 2;
        v307 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vsub_s32(vadd_s32(*(int32x2_t *)v259.i8, v303), vadd_s32(v305, v305)), v306), v253), *(int32x2_t *)v258.i8), (int32x2_t)0xFF000000FFLL);
        v301[3] = v307.i8[4];
        result += 4;
        v301[2] = v307.i8[0];
      }
      while (result <= v18);
      goto LABEL_233;
    }
    v337 = 0;
    v338 = vneg_s32(*(int32x2_t *)v92.i8);
    v339 = a3;
    v423 = vdupq_n_s32(v7);
    v425 = vdupq_n_s32(v10);
    v427 = vnegq_s32(v92);
    v422 = v338;
    while (1)
    {
      v434 = v15;
      v429 = a3 + v337 * v17;
      result = sub_100305620(v431, v14, v339, a6);
      v340 = 0uLL;
      v341 = *(v14 - 1);
      v342 = *v14;
      v344 = v14[1];
      ++v14;
      v343 = v344;
      if ((int)result > (int)v18)
        goto LABEL_302;
      v345 = (int)result;
      v346 = v18 - (int)result;
      if (v346 < 0x3C)
        break;
      v347 = v346 >> 2;
      v348 = v339 + (int)result;
      v349 = v429 + 4 + (v346 & 0xFFFFFFFFFFFFFFFCLL) + (int)result;
      v350 = 4 * (int)result;
      v351 = v350 + 16 * (v346 >> 2);
      v352 = v341 + v351 + 16;
      v353 = v342 + v351 + 16;
      v354 = v348 >= v343 + v351 + 16 || v343 + 4 * (int)result >= v349;
      v355 = !v354;
      v356 = v348 >= v353 || v342 + 4 * (int)result >= v349;
      v357 = !v356;
      v358 = v341 + v350 >= v349 || v348 >= v352;
      if (!v358 || v355 || v357)
        break;
      v359 = v347 + 1;
      result = (int)result + 4 * (v359 & 0x7FFFFFFFFFFFFFF0);
      v360 = (const float *)(v341 + v350);
      v361 = (const float *)(v343 + v350);
      v362 = (const float *)(v342 + v350);
      v363 = v359 & 0x7FFFFFFFFFFFFFF0;
      do
      {
        v364 = v360;
        v520 = vld4q_f32(v364);
        v364 += 16;
        v501 = v520;
        v365 = v360 + 32;
        v366 = v360 + 48;
        v551 = (int8x16x4_t)vld4q_f32(v365);
        v521 = vld4q_f32(v366);
        v477 = v521;
        v522 = vld4q_f32(v364);
        v494 = v522;
        v367 = v361;
        v560 = vld4q_f32(v367);
        v367 += 16;
        v368 = v361 + 32;
        v369 = v361 + 48;
        v523 = vld4q_f32(v368);
        v533 = vld4q_f32(v369);
        v541 = vld4q_f32(v367);
        v370 = v362;
        v556 = vld4q_f32(v370);
        v370 += 16;
        v483 = (int32x4_t)v556.val[0];
        v486 = (int32x4_t)v556.val[1];
        v491 = (int32x4_t)v556.val[3];
        v556.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v523.val[0], (int32x4_t)v551.val[0]);
        v556.val[3] = (float32x4_t)vaddq_s32((int32x4_t)v523.val[1], (int32x4_t)v551.val[1]);
        v465 = vaddq_s32((int32x4_t)v523.val[2], (int32x4_t)v551.val[2]);
        v470 = vaddq_s32((int32x4_t)v523.val[3], (int32x4_t)v551.val[3]);
        v556.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v533.val[0], (int32x4_t)v477.val[0]);
        v371 = vaddq_s32((int32x4_t)v533.val[1], (int32x4_t)v477.val[1]);
        v459 = vaddq_s32((int32x4_t)v533.val[2], (int32x4_t)v477.val[2]);
        v477.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v533.val[3], (int32x4_t)v477.val[3]);
        v372 = v362 + 32;
        v533.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v560.val[1], (int32x4_t)v501.val[1]);
        *(float32x4x4_t *)((char *)&v523 + 16) = vld4q_f32(v372);
        v533.val[3] = (float32x4_t)vaddq_s32((int32x4_t)v541.val[0], (int32x4_t)v494.val[0]);
        v373 = vaddq_s32((int32x4_t)v541.val[1], (int32x4_t)v494.val[1]);
        v533.val[2] = (float32x4_t)vaddq_s32((int32x4_t)v541.val[2], (int32x4_t)v494.val[2]);
        v494.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v541.val[3], (int32x4_t)v494.val[3]);
        v542 = vld4q_f32(v370);
        v374 = v362 + 48;
        v551.val[1] = (int8x16_t)vmlaq_s32(v506, (int32x4_t)v523.val[1], v423);
        v560.val[1] = v523.val[2];
        v448 = (int32x4_t)v523.val[3];
        v451 = (int32x4_t)v533.val[0];
        v524 = (int8x16x4_t)vld4q_f32(v374);
        v440 = (int32x4_t)v524.val[1];
        v442 = (int32x4_t)v524.val[2];
        v444 = (int32x4_t)v524.val[3];
        v533.val[0] = (float32x4_t)vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, (int32x4_t)v524.val[0], v423), (int32x4_t)v556.val[1], v425), v427), (int32x4_t)0);
        v375.i64[0] = 0xFF000000FFLL;
        v375.i64[1] = 0xFF000000FFLL;
        v524.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v483, v423), vaddq_s32((int32x4_t)v560.val[0], (int32x4_t)v501.val[0]), v425), v427), (int32x4_t)0), v375);
        v524.val[3] = (int8x16_t)vminq_s32((int32x4_t)v533.val[0], v375);
        v524.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32((int32x4_t)v551.val[1], (int32x4_t)v556.val[0], v425), v427), (int32x4_t)0), v375);
        v524.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, (int32x4_t)v542.val[0], v423), (int32x4_t)v533.val[3], v425), v427), (int32x4_t)0), v375);
        v551.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v486, v423), (int32x4_t)v533.val[1], v425), v427), (int32x4_t)0), v375);
        v551.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v440, v423), v371, v425), v427), (int32x4_t)0), v375);
        v551.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, (int32x4_t)v560.val[1], v423), (int32x4_t)v556.val[3], v425), v427), (int32x4_t)0), v375);
        v551.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, (int32x4_t)v542.val[1], v423), v373, v425), v427), (int32x4_t)0), v375);
        v524.val[0] = vqtbl4q_s8(v524, (int8x16_t)xmmword_1003BC960);
        v524.val[1] = vqtbl4q_s8(v551, (int8x16_t)xmmword_1003BC960);
        v556.val[1] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, (int32x4_t)v556.val[2], v423), vaddq_s32((int32x4_t)v560.val[2], (int32x4_t)v501.val[2]), v425), v427), (int32x4_t)0), v375);
        v376 = vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v442, v423), v459, v425), v427), (int32x4_t)0), v375);
        v556.val[3] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v448, v423), v465, v425), v427), (int32x4_t)0), v375);
        v556.val[2] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, (int32x4_t)v542.val[2], v423), (int32x4_t)v533.val[2], v425), v427), (int32x4_t)0), v375);
        v524.val[2] = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v556 + 16), (int8x16_t)xmmword_1003BC960);
        v556.val[1] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v491, v423), vaddq_s32((int32x4_t)v560.val[3], (int32x4_t)v501.val[3]), v425), v427), (int32x4_t)0), v375);
        v377 = vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v444, v423), (int32x4_t)v477.val[0], v425), v427), (int32x4_t)0), v375);
        v556.val[3] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v451, v423), v470, v425), v427), (int32x4_t)0), v375);
        v556.val[2] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, (int32x4_t)v542.val[3], v423), (int32x4_t)v494.val[0], v425), v427), (int32x4_t)0), v375);
        v524.val[3] = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v556 + 16), (int8x16_t)xmmword_1003BC960);
        v378 = (char *)(v339 + v345);
        vst4q_s8(v378, v524);
        v345 += 64;
        v360 += 64;
        v361 += 64;
        v362 += 64;
        v363 -= 16;
      }
      while (v363);
      v340 = 0uLL;
      v338 = v422;
      if (v359 != (v359 & 0x7FFFFFFFFFFFFFF0))
        goto LABEL_300;
LABEL_302:
      a6 = v432;
      v390.i64[0] = 0xFF000000FFLL;
      v390.i64[1] = 0xFF000000FFLL;
      if ((int)result < v432)
      {
        v391 = (int)result;
        v392 = v19 - (int)result;
        if (v392 < 8)
        {
          v393 = (int)result;
          goto LABEL_337;
        }
        v394 = v429 + v19;
        v395 = v339 + (int)result;
        v396 = 4 * (int)result;
        result = v341 + v396;
        v398 = v339 + v391 < (unint64_t)(v343 + v428) && v343 + 4 * v391 < v394;
        v400 = v395 < v342 + v428 && v342 + 4 * v391 < v394;
        if (result < v394 && v395 < v341 + v428)
        {
          v393 = v391;
          goto LABEL_337;
        }
        if (v398)
        {
          v393 = v391;
          do
          {
LABEL_337:
            v420 = (int)(v16
                       + *(_DWORD *)(v342 + 4 * v393) * v7
                       + (*(_DWORD *)(v343 + 4 * v393) + *(_DWORD *)(v341 + 4 * v393)) * v10) >> v13;
            v421 = v420 & ~(v420 >> 31);
            if (v421 >= 255)
              LOBYTE(v421) = -1;
            *(_BYTE *)(v339 + v393++) = v421;
          }
          while (v19 != v393);
          goto LABEL_273;
        }
        if (v400)
        {
          v393 = v391;
          goto LABEL_337;
        }
        if (v392 >= 0x10)
        {
          v402 = v392 & 0xFFFFFFFFFFFFFFF0;
          v403 = (int32x4_t *)(v341 + v396);
          v404 = (int32x4_t *)(v343 + v396);
          v405 = (int32x4_t *)(v342 + v396);
          v406 = v391;
          result = v392 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v534.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v405[1], v423), vaddq_s32(v404[1], v403[1]), v425), v427), v340), v390);
            v534.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, *v405, v423), vaddq_s32(*v404, *v403), v425), v427), v340), v390);
            v534.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v405[2], v423), vaddq_s32(v404[2], v403[2]), v425), v427), v340), v390);
            v534.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v405[3], v423), vaddq_s32(v404[3], v403[3]), v425), v427), v340), v390);
            *(int8x16_t *)(v339 + v406) = vqtbl4q_s8(v534, (int8x16_t)xmmword_1003BC960);
            v403 += 4;
            v404 += 4;
            v405 += 4;
            v406 += 16;
            result -= 16;
          }
          while (result);
          if (v392 == v402)
            goto LABEL_273;
          if ((v392 & 8) == 0)
          {
            v393 = v402 + v391;
            goto LABEL_337;
          }
        }
        else
        {
          v402 = 0;
        }
        v393 = (v392 & 0xFFFFFFFFFFFFFFF8) + v391;
        v407 = v402 - (v392 & 0xFFFFFFFFFFFFFFF8);
        v408 = v402 + v391;
        v409 = (int32x4_t *)(v341 + 4 * v408);
        v410 = (int32x4_t *)(v343 + 4 * v408);
        result = v342 + 4 * v408;
        do
        {
          v412 = *v409;
          v411 = v409[1];
          v409 += 2;
          v414 = *v410;
          v413 = v410[1];
          v410 += 2;
          v415 = vaddq_s32(v414, v412);
          v416 = vaddq_s32(v413, v411);
          v418 = *(int32x4_t *)result;
          v417 = *(int32x4_t *)(result + 16);
          result += 32;
          v419 = vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v418, v423), v415, v425), v427), v340);
          v512.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v417, v423), v416, v425), v427), v340), v390);
          v512.val[0] = (int8x16_t)vminq_s32(v419, v390);
          *(_QWORD *)(v339 + v408) = vqtbl2q_s8(v512, (int8x16_t)xmmword_1003BC970).u64[0];
          v408 += 8;
          v407 += 8;
        }
        while (v407);
        if (v392 != (v392 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_337;
      }
LABEL_273:
      v17 = v430;
      v339 += v430;
      v15 = v434 - 1;
      ++v337;
      if (!v434)
        return result;
    }
    result = (int)result;
LABEL_300:
    v379 = (int32x2_t *)(v343 + 4 * result + 8);
    v380 = (int32x2_t *)(v342 + 4 * result + 8);
    v381 = (int32x2_t *)(v341 + 4 * result + 8);
    do
    {
      v382 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(vmla_s32(*(int32x2_t *)v506.i8, v380[-1], *(int32x2_t *)v423.i8), vadd_s32(v379[-1], v381[-1]), *(int32x2_t *)v425.i8), v338), *(int32x2_t *)v340.i8), (int32x2_t)0xFF000000FFLL);
      v383 = (_BYTE *)(v339 + result);
      v383[1] = v382.i8[4];
      *v383 = v382.i8[0];
      v384 = *v381;
      v381 += 2;
      v385 = v384;
      v386 = *v379;
      v379 += 2;
      v387 = vadd_s32(v386, v385);
      v388 = *v380;
      v380 += 2;
      v389 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(vmla_s32(*(int32x2_t *)v506.i8, v388, *(int32x2_t *)v423.i8), v387, *(int32x2_t *)v425.i8), v338), *(int32x2_t *)v340.i8), (int32x2_t)0xFF000000FFLL);
      v383[3] = v389.i8[4];
      result += 4;
      v383[2] = v389.i8[0];
    }
    while (result <= v18);
    goto LABEL_302;
  }
  if (v7)
  {
    if (v7 == 2)
    {
      v8 = 0;
      v9 = 0;
      v10 = v6[1];
      v11 = v10 == 1;
      if (!a5)
        return result;
    }
    else
    {
      v8 = 0;
      v11 = 0;
      v9 = 0;
      v10 = v6[1];
      if (!a5)
        return result;
    }
    goto LABEL_17;
  }
  v8 = 0;
  v11 = 0;
  v10 = v6[1];
  v9 = v10 == 1 || v10 == -1;
  if (a5)
    goto LABEL_17;
  return result;
}

uint64_t sub_100304870(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, uint64_t a5, double a6)
{
  _DWORD *v12;
  int *v13;
  _DWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  _QWORD *v43;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v12 = (_DWORD *)(a1 + 16);
  *(_QWORD *)a1 = off_100452C28;
  *(_OWORD *)(a1 + 20) = 0u;
  v13 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  v45 = (_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_DWORD *)(a1 + 128) = 1124007936;
  v14 = (_DWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  v15 = (int *)(a1 + 132);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 136;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  v16 = a1 + 120;
  if ((*(_BYTE *)(a2 + 1) & 0x40) == 0)
  {
    LODWORD(v46) = 33619968;
    v47 = a1 + 16;
    v48 = 0;
    sub_1002181EC(a2, (uint64_t)&v46);
    goto LABEL_21;
  }
  if (v12 != (_DWORD *)a2)
  {
    v17 = *(_QWORD *)(a2 + 56);
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 20);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v20 = *(_QWORD *)(a1 + 72);
      if (v20)
      {
        v21 = (unsigned int *)(v20 + 20);
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v12 = *(_DWORD *)a2;
      v27 = *(_DWORD *)(a2 + 4);
      if (v27 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v27;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v28 = *(_QWORD **)(a2 + 72);
        v29 = *(_QWORD **)(a1 + 88);
        *v29 = *v28;
        v29[1] = v28[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v24 = 0;
      v25 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v25 + 4 * v24++) = 0;
        v26 = *v13;
      }
      while (v24 < v26);
      *v12 = *(_DWORD *)a2;
      if ((int)v26 <= 2)
      {
        v27 = *(_DWORD *)(a2 + 4);
        if (v27 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v12, a2);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 224) = (uint64_t)rint(a6);
  *(_QWORD *)(a1 + 112) = *a4;
  v30 = (_DWORD *)(a5 + 8);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)a5;
  if (v16 != a5)
  {
    v31 = *(_QWORD *)(a5 + 64);
    if (v31)
    {
      v32 = (unsigned int *)(v31 + 20);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    v34 = *(_QWORD *)(a1 + 184);
    if (v34)
    {
      v35 = (unsigned int *)(v34 + 20);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
        sub_100256C90((uint64_t)v14);
    }
    *(_QWORD *)(a1 + 184) = 0;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    if (*(int *)(a1 + 132) <= 0)
    {
      *v14 = *v30;
      v41 = *(_DWORD *)(a5 + 12);
      if (v41 <= 2)
      {
LABEL_35:
        *(_DWORD *)(a1 + 132) = v41;
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a5 + 16);
        v42 = *(_QWORD **)(a5 + 80);
        v43 = *(_QWORD **)(a1 + 200);
        *v43 = *v42;
        v43[1] = v42[1];
LABEL_38:
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a5 + 24);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a5 + 40);
        *(_OWORD *)(a1 + 176) = *(_OWORD *)(a5 + 56);
        goto LABEL_39;
      }
    }
    else
    {
      v38 = 0;
      v39 = *(_QWORD *)(a1 + 192);
      do
      {
        *(_DWORD *)(v39 + 4 * v38++) = 0;
        v40 = *v15;
      }
      while (v38 < v40);
      *v14 = *v30;
      if ((int)v40 <= 2)
      {
        v41 = *(_DWORD *)(a5 + 12);
        if (v41 <= 2)
          goto LABEL_35;
      }
    }
    sub_100256B48((uint64_t)v14, a5 + 8);
    goto LABEL_38;
  }
LABEL_39:
  if ((*v12 & 0xFFF) != 4 || *v45 != 1 && *(_DWORD *)(a1 + 28) != 1)
  {
    v46 = 0;
    v47 = 0;
    qmemcpy((void *)sub_10029430C(&v46, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v46, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_100304C2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1002F0D3C(v2);
  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100304C68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100452C28;
  v2 = *(_QWORD *)(a1 + 184);
  if (v2)
  {
    v3 = a1 + 128;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  if (*(int *)(a1 + 132) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 192);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 132));
  }
  v9 = *(void **)(a1 + 200);
  if (v9 != (void *)(a1 + 208))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 16);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 20));
  }
  v16 = *(void **)(a1 + 88);
  if (v16 != (void *)(a1 + 96))
    j__free(v16);
  return a1;
}

void sub_100304D80(uint64_t a1)
{
  sub_100304C68(a1);
  operator delete();
}

int64_t sub_100304DA4(int64_t result, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, double a7, int16x8_t a8)
{
  int v8;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const float *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  signed int v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  int32x4_t v28;
  uint64_t *v29;
  uint64_t v30;
  int32x4_t v31;
  uint64_t v32;
  const float *v33;
  int32x4_t v34;
  int16x8_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  _QWORD *v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int32x4_t v54;
  int16x8_t v55;
  int32x4_t v56;
  int32x4_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  const float *v61;
  int32x4_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  _QWORD *v70;
  _DWORD *v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int32x4_t v75;
  unsigned __int32 v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int __c;
  int32x4_t __ca;
  uint64_t v82;
  int32x4_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  char v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;

  v8 = a5;
  v10 = *(_DWORD *)(result + 8);
  v88 = v10;
  if (v10 >= 0)
    v11 = *(_DWORD *)(result + 8);
  else
    v11 = v10 + 1;
  v12 = v11 >> 1;
  v13 = *(_QWORD *)(result + 32);
  v14 = (uint64_t)v11 >> 1;
  v15 = (const float *)(v13 + 4 * v12);
  v16 = *(_DWORD *)(result + 224);
  v17 = *(_DWORD *)(result + 112);
  v18 = *(_DWORD *)(result + 116);
  v19 = (_QWORD *)(a2 + 8 * v12);
  v87 = a6;
  v89 = v18;
  v90 = v17;
  if ((*(_BYTE *)(result + 228) & 1) != 0)
  {
    if (!a5)
      return result;
    v94 = result + 120;
    v86 = a4;
    v47 = (v14 + 1);
    v48 = (int)a6 - 4;
    v49 = (int)a6;
    v50 = v47 - 1;
    v51 = a2 + 8 * v14;
    v52 = (uint64_t *)(v51 - 8);
    v95 = v13 + 4 * v14 + 8;
    v96 = (_QWORD *)(v51 + 16);
    __ca = vdupq_n_s32(v18);
    v83 = vdupq_n_s32(v16);
    v78 = vnegq_s32(vdupq_n_s32(v17));
    while (1)
    {
      v92 = v8;
      v53 = a6;
      result = sub_100305620(v94, v19, a3, a6);
      v54.i64[0] = 0xFF000000FFLL;
      v54.i64[1] = 0xFF000000FFLL;
      if ((int)result <= (int)v48)
      {
        result = (int)result;
        do
        {
          v56 = (int32x4_t)vld1q_dup_f32(v15);
          v57 = vmlaq_s32(v83, *(int32x4_t *)(*v19 + 4 * result), v56);
          if (v88 >= 2)
          {
            v58 = v52;
            v59 = 1;
            do
            {
              v60 = *v58--;
              v61 = &v15[v59];
              v62 = (int32x4_t)vld1q_dup_f32(v61);
              v57 = vmlaq_s32(v57, vaddq_s32(*(int32x4_t *)(v60 + 4 * result), *(int32x4_t *)(v19[v59++] + 4 * result)), v62);
            }
            while (v47 != v59);
          }
          v55 = (int16x8_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(v57, __ca), v78), (int32x4_t)0), v54);
          *(int16x4_t *)v55.i8 = vmovn_s32((int32x4_t)v55);
          *(_DWORD *)(a3 + result) = vmovn_s16(v55).u32[0];
          result += 4;
        }
        while (result <= v48);
        v53 = v87;
      }
      a6 = v53;
      if ((int)result >= (int)v53)
        goto LABEL_35;
      v63 = (int)result;
      if (v88 >= 2)
        break;
      do
      {
        v64 = (int)(v16 + *(_DWORD *)(*v19 + 4 * v63) * *(_DWORD *)v15 + v89) >> v90;
        v65 = v64 & ~(v64 >> 31);
        if (v65 >= 255)
          LOBYTE(v65) = -1;
        *(_BYTE *)(a3 + v63++) = v65;
      }
      while (v49 != v63);
LABEL_35:
      a3 += v86;
      ++v19;
      ++v52;
      ++v96;
      v8 = v92 - 1;
      if (v92 == 1)
        return result;
    }
    while (1)
    {
      v67 = v16 + *(_DWORD *)(*v19 + 4 * v63) * *(_DWORD *)v15;
      if (v50 >= 2)
      {
        v69 = 0;
        v71 = (_DWORD *)v95;
        v70 = v96;
        v72 = (v47 - 1) & 0xFFFFFFFFFFFFFFFELL;
        v73 = v52;
        do
        {
          result = (*(_DWORD *)(*v73 + 4 * v63) + *(_DWORD *)(*(v70 - 1) + 4 * v63));
          v67 += result * *(v71 - 1);
          v69 += (*(_DWORD *)(*(v73 - 1) + 4 * v63) + *(_DWORD *)(*v70 + 4 * v63)) * *v71;
          v73 -= 2;
          v71 += 2;
          v70 += 2;
          v72 -= 2;
        }
        while (v72);
        v67 += v69;
        v68 = (v47 - 1) | 1;
        if (v50 == ((v47 - 1) & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_50;
      }
      else
      {
        v68 = 1;
      }
      v74 = -1 * v68;
      do
      {
        v67 += (*(_DWORD *)(v19[v74] + 4 * v63) + *(_DWORD *)(v19[v68] + 4 * v63)) * LODWORD(v15[v68]);
        ++v68;
        --v74;
      }
      while (v47 != v68);
LABEL_50:
      v66 = ((int)(v67 + v89) >> v90) & ~((int)(v67 + v89) >> v90 >> 31);
      if (v66 >= 255)
        LOBYTE(v66) = -1;
      *(_BYTE *)(a3 + v63++) = v66;
      if (v63 == v49)
        goto LABEL_35;
    }
  }
  if (a5)
  {
    v85 = result + 120;
    v20 = ((int)(v16 + v18) >> v17) & ~((int)(v16 + v18) >> v17 >> 31);
    if (v20 >= 255)
      v20 = 255;
    v84 = a4;
    v21 = (v14 + 1);
    v22 = (int)a6 - 4;
    v23 = v21 - 1;
    __c = v20;
    *(int16x4_t *)a8.i8 = vdup_n_s16(v20);
    v24 = a2 + 8 * v14;
    v25 = (uint64_t *)(v24 - 8);
    v93 = v13 + 4 * v14 + 8;
    v26 = (_QWORD *)(v24 + 16);
    v82 = (int)a6;
    v77 = vdupq_n_s32(v16);
    v79 = vdupq_n_s32(v18);
    v75 = vnegq_s32(vdupq_n_s32(v17));
    v76 = vmovn_s16(a8).u32[0];
    while (1)
    {
      v91 = v8;
      v27 = a6;
      result = sub_100305620(v85, v19, a3, a6);
      if ((int)result <= (int)v22)
      {
        result = (int)result;
        if (v88 >= 2)
        {
          v28.i64[0] = 0xFF000000FFLL;
          v28.i64[1] = 0xFF000000FFLL;
          do
          {
            v29 = v25;
            v30 = 1;
            v31 = v77;
            do
            {
              v32 = *v29--;
              v33 = &v15[v30];
              v34 = (int32x4_t)vld1q_dup_f32(v33);
              v31 = vmlaq_s32(v31, vsubq_s32(*(int32x4_t *)(v19[v30++] + 4 * result), *(int32x4_t *)(v32 + 4 * result)), v34);
            }
            while (v21 != v30);
            v35 = (int16x8_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(v31, v79), v75), (int32x4_t)0), v28);
            *(int16x4_t *)v35.i8 = vmovn_s32((int32x4_t)v35);
            *(_DWORD *)(a3 + result) = vmovn_s16(v35).u32[0];
            result += 4;
          }
          while (result <= v22);
        }
        else
        {
          do
          {
            *(_DWORD *)(a3 + result) = v76;
            result += 4;
          }
          while (result <= v22);
        }
        v27 = v87;
      }
      a6 = v27;
      if ((int)result >= (int)v27)
        goto LABEL_9;
      v36 = (int)result;
      if (v88 >= 2)
        break;
      result = (int64_t)memset((void *)(a3 + (int)result), __c, (~(_DWORD)result + v27) + 1);
      a6 = v87;
LABEL_9:
      a3 += v84;
      ++v19;
      ++v25;
      ++v26;
      v8 = v91 - 1;
      if (v91 == 1)
        return result;
    }
    while (v23 >= 2)
    {
      v40 = 0;
      v41 = v26;
      v42 = (_DWORD *)v93;
      v43 = (v21 - 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = v25;
      v45 = v16;
      do
      {
        result = (*(_DWORD *)(*(v41 - 1) + 4 * v36) - *(_DWORD *)(*v44 + 4 * v36));
        v45 += result * *(v42 - 1);
        v40 += (*(_DWORD *)(*v41 + 4 * v36) - *(_DWORD *)(*(v44 - 1) + 4 * v36)) * *v42;
        v44 -= 2;
        v42 += 2;
        v41 += 2;
        v43 -= 2;
      }
      while (v43);
      v39 = v40 + v45;
      v38 = (v21 - 1) | 1;
      if (v23 != ((v21 - 1) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_30;
LABEL_22:
      v37 = ((int)(v39 + v89) >> v90) & ~((int)(v39 + v89) >> v90 >> 31);
      if (v37 >= 255)
        LOBYTE(v37) = -1;
      *(_BYTE *)(a3 + v36++) = v37;
      if (v36 == v82)
        goto LABEL_9;
    }
    v38 = 1;
    v39 = v16;
LABEL_30:
    v46 = -1 * v38;
    do
    {
      v39 += (*(_DWORD *)(v19[v38] + 4 * v36) - *(_DWORD *)(v19[v46] + 4 * v36)) * LODWORD(v15[v38]);
      ++v38;
      --v46;
    }
    while (v21 != v38);
    goto LABEL_22;
  }
  return result;
}

void sub_10030536C(uint64_t a1)
{
  sub_100304C68(a1);
  operator delete();
}

int64_t sub_100305390(int64_t result, _QWORD *a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  _QWORD *v7;
  const float *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int32x4_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int32x4_t v20;
  uint64_t i;
  const float *v22;
  int32x4_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  _DWORD *v32;
  unint64_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;

  if (a5)
  {
    v7 = a2;
    v8 = *(const float **)(result + 32);
    v9 = *(_DWORD *)(result + 224);
    v10 = *(_DWORD *)(result + 112);
    v11 = *(_DWORD *)(result + 116);
    v12 = *(unsigned int *)(result + 8);
    v37 = a4;
    v38 = result + 120;
    v13 = (int)a6 - 4;
    v14 = (int)a6;
    v15 = a2 + 2;
    v35 = vdupq_n_s32(v11);
    v36 = vdupq_n_s32(v9);
    v34 = vnegq_s32(vdupq_n_s32(v10));
    while (1)
    {
      v39 = v15;
      v40 = a5;
      v16 = a6;
      result = sub_100305620(v38, v7, a3, a6);
      v17.i64[0] = 0xFF000000FFLL;
      v17.i64[1] = 0xFF000000FFLL;
      if ((int)result <= (int)v13)
      {
        result = (int)result;
        do
        {
          v19 = (int32x4_t)vld1q_dup_f32(v8);
          v20 = vmlaq_s32(v36, *(int32x4_t *)(*v7 + 4 * result), v19);
          if ((int)v12 >= 2)
          {
            for (i = 1; i != v12; ++i)
            {
              v22 = &v8[i];
              v23 = (int32x4_t)vld1q_dup_f32(v22);
              v20 = vmlaq_s32(v20, *(int32x4_t *)(v7[i] + 4 * result), v23);
            }
          }
          v18 = (int16x8_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(v20, v35), v34), (int32x4_t)0), v17);
          *(int16x4_t *)v18.i8 = vmovn_s32((int32x4_t)v18);
          *(_DWORD *)(a3 + result) = vmovn_s16(v18).u32[0];
          result += 4;
        }
        while (result <= v13);
      }
      a6 = v16;
      if ((int)result >= (int)v16)
        goto LABEL_3;
      v24 = (int)result;
      if ((int)v12 > 1)
        break;
      do
      {
        v25 = (int)(v9 + *(_DWORD *)(*v7 + 4 * v24) * *(_DWORD *)v8 + v11) >> v10;
        v26 = v25 & ~(v25 >> 31);
        if (v26 >= 255)
          LOBYTE(v26) = -1;
        *(_BYTE *)(a3 + v24++) = v26;
      }
      while (v14 != v24);
LABEL_3:
      a3 += v37;
      ++v7;
      v15 = v39 + 1;
      a5 = v40 - 1;
      if (v40 == 1)
        return result;
    }
    while (1)
    {
      v28 = v9 + *(_DWORD *)(*v7 + 4 * v24) * *(_DWORD *)v8;
      if (v12 >= 3)
      {
        v30 = 0;
        v31 = v39;
        v32 = v8 + 2;
        v33 = (v12 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v28 += *(_DWORD *)(*(v31 - 1) + 4 * v24) * *(v32 - 1);
          v30 += *(_DWORD *)(*v31 + 4 * v24) * *v32;
          v32 += 2;
          v31 += 2;
          v33 -= 2;
        }
        while (v33);
        v28 += v30;
        v29 = (v12 - 1) | 1;
        if (v12 - 1 == ((v12 - 1) & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_17;
      }
      else
      {
        v29 = 1;
      }
      do
      {
        v28 += *(_DWORD *)(v7[v29] + 4 * v24) * LODWORD(v8[v29]);
        ++v29;
      }
      while (v12 != v29);
LABEL_17:
      v27 = ((int)(v28 + v11) >> v10) & ~((int)(v28 + v11) >> v10 >> 31);
      if (v27 >= 255)
        LOBYTE(v27) = -1;
      *(_BYTE *)(a3 + v24++) = v27;
      if (v24 == v14)
        goto LABEL_3;
    }
  }
  return result;
}

unint64_t sub_100305620(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  unint64_t result;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const float *v13;
  const float *v14;
  float32x4_t v15;
  unint64_t v16;
  const float *v17;
  float32x4_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int32x4_t *v25;
  int32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t *v30;
  const float *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int32x4_t *v36;
  float32x4_t v37;
  const float *v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  int32x4_t *v49;
  int32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t *v54;
  const float *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int32x4_t *v60;
  float32x4_t v61;

  result = sub_100294AFC(100);
  if ((_DWORD)result)
  {
    v9 = *(_DWORD *)(a1 + 16) + *(_DWORD *)(a1 + 20);
    v10 = v9 - 1;
    if (v9 - 1 >= 0)
      --v9;
    v11 = *(_QWORD *)(a1 + 24);
    v12 = (uint64_t)v9 >> 1;
    v13 = (const float *)(v11 + 4 * (v9 >> 1));
    v14 = (const float *)(a1 + 4);
    v15 = vld1q_dup_f32(v14);
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      if (v10 == 1)
      {
        return 0;
      }
      else
      {
        v20 = (a4 - 8);
        if (a4 >= 8)
        {
          v39 = vld1q_dup_f32(v13);
          v38 = v13 + 1;
          v40 = vld1q_dup_f32(v38);
          if (v10 >= 4)
          {
            result = 0;
            if ((int)v12 <= 2)
              v42 = 2;
            else
              v42 = v12;
            v43 = v11 + 4 * v12 + 8;
            v44 = v42 - 1;
            do
            {
              v45 = 4 * result;
              v46 = (int32x4_t *)(*a2 + 4 * result);
              v47 = vcvtq_f32_s32(*v46);
              v48 = vcvtq_f32_s32(v46[1]);
              v49 = (int32x4_t *)(a2[1] + 4 * result);
              v50 = (int32x4_t *)(*(a2 - 1) + 4 * result);
              v51 = vmlaq_f32(vmlaq_f32(v15, v39, v47), v40, vaddq_f32(vcvtq_f32_s32(*v49), vcvtq_f32_s32(*v50)));
              v52 = vmlaq_f32(vmlaq_f32(v15, v39, v48), v40, vaddq_f32(vcvtq_f32_s32(v49[1]), vcvtq_f32_s32(v50[1])));
              v53 = v44;
              v54 = a2 + 2;
              v55 = (const float *)v43;
              v56 = a2 - 2;
              do
              {
                v58 = *v54++;
                v57 = v58;
                v59 = *v56--;
                v60 = (int32x4_t *)(v57 + v45);
                v61 = vld1q_dup_f32(v55++);
                v51 = vmlaq_f32(v51, v61, vaddq_f32(vcvtq_f32_s32(*v60), vcvtq_f32_s32(*(int32x4_t *)(v59 + 4 * result))));
                v52 = vmlaq_f32(v52, v61, vaddq_f32(vcvtq_f32_s32(v60[1]), vcvtq_f32_s32(*(int32x4_t *)(v59 + v45 + 16))));
                --v53;
              }
              while (v53);
              *(int8x8_t *)(a3 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(v51)), vcvtq_s32_f32(v52)));
              result += 8;
            }
            while (result <= v20);
          }
          else
          {
            v41 = 0;
            for (result = 0; result <= v20; result += 8)
            {
              *(int8x8_t *)(a3 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vmlaq_f32(vmlaq_f32(v15, v39, vcvtq_f32_s32(*(int32x4_t *)(*a2 + v41))), v40, vaddq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2[1] + v41)), vcvtq_f32_s32(*(int32x4_t *)(*(a2 - 1) + v41)))))), vcvtq_s32_f32(vmlaq_f32(vmlaq_f32(v15, v39, vcvtq_f32_s32(*(int32x4_t *)(*a2 + v41 + 16))), v40, vaddq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2[1] + v41 + 16)), vcvtq_f32_s32(*(int32x4_t *)(*(a2 - 1) + v41 + 16)))))));
              v41 += 32;
            }
          }
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      v16 = (a4 - 8);
      if (a4 >= 8)
      {
        v17 = v13 + 1;
        v18 = vld1q_dup_f32(v17);
        if (v10 >= 4)
        {
          result = 0;
          if ((int)v12 <= 2)
            v21 = 2;
          else
            v21 = v12;
          v22 = v11 + 4 * v12 + 8;
          v23 = v21 - 1;
          do
          {
            v24 = 4 * result;
            v25 = (int32x4_t *)(a2[1] + 4 * result);
            v26 = (int32x4_t *)(*(a2 - 1) + 4 * result);
            v27 = vmlaq_f32(v15, v18, vsubq_f32(vcvtq_f32_s32(*v25), vcvtq_f32_s32(*v26)));
            v28 = vmlaq_f32(v15, v18, vsubq_f32(vcvtq_f32_s32(v25[1]), vcvtq_f32_s32(v26[1])));
            v29 = v23;
            v30 = a2 + 2;
            v31 = (const float *)v22;
            v32 = a2 - 2;
            do
            {
              v34 = *v30++;
              v33 = v34;
              v35 = *v32--;
              v36 = (int32x4_t *)(v33 + v24);
              v37 = vld1q_dup_f32(v31++);
              v27 = vmlaq_f32(v27, v37, vsubq_f32(vcvtq_f32_s32(*v36), vcvtq_f32_s32(*(int32x4_t *)(v35 + 4 * result))));
              v28 = vmlaq_f32(v28, v37, vsubq_f32(vcvtq_f32_s32(v36[1]), vcvtq_f32_s32(*(int32x4_t *)(v35 + v24 + 16))));
              --v29;
            }
            while (v29);
            *(int8x8_t *)(a3 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(v27)), vcvtq_s32_f32(v28)));
            result += 8;
          }
          while (result <= v16);
        }
        else
        {
          v19 = 0;
          for (result = 0; result <= v16; result += 8)
          {
            *(int8x8_t *)(a3 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vmlaq_f32(v15, v18, vsubq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2[1] + v19)), vcvtq_f32_s32(*(int32x4_t *)(*(a2 - 1) + v19)))))), vcvtq_s32_f32(vmlaq_f32(v15, v18, vsubq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2[1] + v19 + 16)), vcvtq_f32_s32(*(int32x4_t *)(*(a2 - 1) + v19 + 16)))))));
            v19 += 32;
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_1003059E4()
{
  operator delete();
}

uint64_t sub_1003059F8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_100305A34(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v10[2];

  v8 = sub_100305AEC(a1, a2, a3, a4, a5, a6, a7);
  *(_QWORD *)v8 = off_100452C98;
  if (*(_DWORD *)(v8 + 8) != 3)
  {
    v10[0] = 0;
    v10[1] = 0;
    *(_OWORD *)sub_10029430C(v10, 16) = *(_OWORD *)"this->ksize == 3";
    sub_100294B74(-215, v10, "SymmColumnSmallFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3420);
  }
  return a1;
}

void sub_100305AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_100306D34(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100305AEC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v9;
  uint64_t v11[2];

  v9 = sub_100306950(a1, a2, a3, a7, a5, a6);
  *(_QWORD *)v9 = off_100452D10;
  *(_DWORD *)(v9 + 228) = a4;
  if ((a4 & 3) == 0)
  {
    v11[0] = 0;
    v11[1] = 0;
    qmemcpy((void *)sub_10029430C(v11, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, v11, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_100305B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_100306D34(v9);
  _Unwind_Resume(a1);
}

void sub_100305BBC(uint64_t a1)
{
  sub_100306D34(a1);
  operator delete();
}

int64_t sub_100305BE0(int64_t result, uint64_t a2, int16x4_t *a3, int a4, int a5, int a6)
{
  unsigned int *v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  signed int v12;
  _BOOL4 v13;
  unsigned int v15;
  int v16;
  int64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const float *v28;
  const float *v29;
  uint64_t v30;
  const float *v31;
  const float *v32;
  __int16 *v33;
  int32x4_t *v34;
  int32x4_t *v35;
  uint64_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  unint64_t v40;
  unint64_t v41;
  int16x8_t *v42;
  int32x4_t *v43;
  int32x4_t *v44;
  unint64_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int32x4_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const float *v65;
  const float *v66;
  const float *v67;
  uint64_t v68;
  const float *v69;
  const float *v70;
  const float *v71;
  int32x4_t v72;
  __int16 *v73;
  int32x4_t *v74;
  int32x4_t *v75;
  int32x4_t *v76;
  uint64_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  unint64_t v83;
  unint64_t v84;
  int32x4_t *v85;
  int32x4_t *v86;
  int32x4_t *v87;
  uint64_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const float *v105;
  const float *v106;
  uint64_t v107;
  const float *v108;
  const float *v109;
  __int16 *v110;
  int32x4_t *v111;
  int32x4_t *v112;
  uint64_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  unint64_t v117;
  unint64_t v118;
  int16x8_t *v119;
  int32x4_t *v120;
  int32x4_t *v121;
  unint64_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int v131;
  int v132;
  uint64_t v133;
  int32x4_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const float *v142;
  const float *v143;
  const float *v144;
  uint64_t v145;
  const float *v146;
  const float *v147;
  const float *v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  __int16 *v152;
  int32x4_t *v153;
  int32x4_t *v154;
  int32x4_t *v155;
  uint64_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  unint64_t v162;
  unint64_t v163;
  int32x4_t *v164;
  int32x4_t *v165;
  int32x4_t *v166;
  uint64_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int v174;
  uint64_t v175;
  int32x4_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  const float *v184;
  const float *v185;
  const float *v186;
  uint64_t v187;
  const float *v188;
  const float *v189;
  const float *v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  __int16 *v194;
  int32x4_t *v195;
  int32x4_t *v196;
  int32x4_t *v197;
  uint64_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  unint64_t v204;
  unint64_t v205;
  int32x4_t *v206;
  int32x4_t *v207;
  int32x4_t *v208;
  uint64_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  float32x4x4_t v229;
  float32x4x4_t v230;
  float32x4x4_t v231;
  float32x4x4_t v232;
  float32x4x4_t v233;
  float32x4x4_t v234;
  float32x4x4_t v235;
  float32x4x4_t v236;
  int16x8x4_t v237;
  float32x4x4_t v238;
  int16x8x4_t v239;
  float32x4x4_t v240;
  int16x8x4_t v241;
  float32x4x4_t v242;
  float32x4x4_t v243;
  float32x4x4_t v244;
  float32x4x4_t v245;
  float32x4x4_t v246;
  float32x4x4_t v247;
  float32x4x4_t v248;
  float32x4x4_t v249;
  float32x4x4_t v250;
  float32x4x4_t v251;
  float32x4x4_t v252;
  int16x8x4_t v253;
  float32x4x4_t v254;
  float32x4x4_t v255;
  float32x4x4_t v256;

  v8 = (unsigned int *)(*(_QWORD *)(result + 32) + 4 * (*(_DWORD *)(result + 8) / 2));
  v9 = *v8;
  if (*v8 == -2)
  {
    v13 = 0;
    v11 = 0;
    v12 = v8[1];
    v10 = v12 == 1;
    if (!a5)
      return result;
  }
  else if (v9)
  {
    if (v9 == 2)
    {
      v10 = 0;
      v11 = 0;
      v12 = v8[1];
      v13 = v12 == 1;
      if (!a5)
        return result;
    }
    else
    {
      v10 = 0;
      v13 = 0;
      v11 = 0;
      v12 = v8[1];
      if (!a5)
        return result;
    }
  }
  else
  {
    v10 = 0;
    v13 = 0;
    v12 = v8[1];
    v11 = v12 == 1 || v12 == -1;
    if (!a5)
      return result;
  }
  v15 = *(_DWORD *)(result + 224);
  v16 = a5 - 1;
  v227 = result + 120;
  v228 = a4;
  v17 = a6 - 4;
  v18 = a2 + 8 * ((uint64_t)(*(_DWORD *)(result + 8) + (*(int *)(result + 8) < 0)) >> 1);
  if ((*(_DWORD *)(result + 228) & 1) != 0)
  {
    if (v13)
    {
      v224 = vdupq_n_s32(v15);
      do
      {
        v55 = v16;
        result = sub_100307768(v227, (int32x4_t **)v18, a3, a6);
        v56 = *(_QWORD *)(v18 - 8);
        v57 = *(int32x4_t **)v18;
        v59 = *(_QWORD *)(v18 + 8);
        v18 += 8;
        v58 = v59;
        if ((int)result <= (int)v17)
        {
          v60 = (int)result;
          v61 = v17 - (int)result;
          result = (int)result;
          if (v61 < 0x1C)
            goto LABEL_52;
          v62 = (v61 >> 2) + 1;
          result = (int)result + 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
          v63 = 2 * v60;
          v64 = v60;
          v65 = (const float *)(v56 + 4 * v60);
          v66 = (const float *)&v57->i32[v64];
          v67 = (const float *)(v58 + v64 * 4);
          v68 = v62 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v69 = v65;
            v230 = vld4q_f32(v69);
            v69 += 16;
            v235 = vld4q_f32(v69);
            v70 = v66;
            v241 = (int16x8x4_t)vld4q_f32(v70);
            v70 += 16;
            v246 = vld4q_f32(v70);
            v71 = v67;
            v250 = vld4q_f32(v71);
            v71 += 16;
            v72 = vaddq_s32((int32x4_t)v246.val[2], (int32x4_t)v246.val[2]);
            v246.val[2] = (float32x4_t)vaddq_s32(vaddq_s32((int32x4_t)v235.val[1], v224), vaddq_s32((int32x4_t)v246.val[1], (int32x4_t)v246.val[1]));
            v235.val[1] = (float32x4_t)vaddq_s32(vaddq_s32((int32x4_t)v235.val[2], v224), v72);
            v254 = vld4q_f32(v71);
            v241.val[0] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v230.val[0], v224), vaddq_s32((int32x4_t)v241.val[0], (int32x4_t)v241.val[0])), (int32x4_t)v250.val[0])), vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v235.val[0], v224), vaddq_s32((int32x4_t)v246.val[0], (int32x4_t)v246.val[0])), (int32x4_t)v254.val[0]));
            v241.val[1] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v230.val[1], v224), vaddq_s32((int32x4_t)v241.val[1], (int32x4_t)v241.val[1])), (int32x4_t)v250.val[1])), vaddq_s32((int32x4_t)v246.val[2], (int32x4_t)v254.val[1]));
            v241.val[2] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v230.val[2], v224), vaddq_s32((int32x4_t)v241.val[2], (int32x4_t)v241.val[2])), (int32x4_t)v250.val[2])), vaddq_s32((int32x4_t)v235.val[1], (int32x4_t)v254.val[2]));
            v241.val[3] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v230.val[3], v224), vaddq_s32((int32x4_t)v241.val[3], (int32x4_t)v241.val[3])), (int32x4_t)v250.val[3])), vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v235.val[3], v224), vaddq_s32((int32x4_t)v246.val[3], (int32x4_t)v246.val[3])), (int32x4_t)v254.val[3]));
            v73 = (__int16 *)((char *)a3 + v63);
            vst4q_s16(v73, v241);
            v63 += 64;
            v65 += 32;
            v66 += 32;
            v67 += 32;
            v68 -= 8;
          }
          while (v68);
          if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_52:
            v74 = (int32x4_t *)(v56 + 4 * result);
            v75 = (int32x4_t *)((char *)v57 + 4 * result);
            v76 = (int32x4_t *)(v58 + 4 * result);
            v77 = 2 * result;
            do
            {
              v78 = *v74++;
              v79 = v78;
              v80 = *v75++;
              v81 = vaddq_s32(v80, v80);
              v82 = *v76++;
              *(int16x4_t *)((char *)a3 + v77) = vqmovn_s32(vaddq_s32(vaddq_s32(vaddq_s32(v79, v224), v81), v82));
              result += 4;
              v77 += 8;
            }
            while (result <= v17);
          }
        }
        if ((int)result < a6)
        {
          v83 = a6 - (uint64_t)(int)result;
          v84 = (int)result;
          if (v83 < 8)
            goto LABEL_128;
          v84 = (v83 & 0xFFFFFFFFFFFFFFF8) + (int)result;
          v85 = (int32x4_t *)(v56 + 4 * (int)result);
          v86 = (int32x4_t *)((char *)v57 + 4 * (int)result);
          v87 = (int32x4_t *)(v58 + 4 * (int)result);
          v88 = 2 * (int)result;
          result = v83 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v89 = *v85;
            v90 = v85[1];
            v85 += 2;
            v91 = *v86;
            v92 = v86[1];
            v86 += 2;
            v93 = *v87;
            v94 = v87[1];
            v87 += 2;
            *(int16x8_t *)&a3->i8[v88] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vaddq_s32(vaddq_s32(v89, v224), vaddq_s32(v91, v91)), v93)), vaddq_s32(vaddq_s32(vaddq_s32(v90, v224), vaddq_s32(v92, v92)), v94));
            v88 += 16;
            result -= 8;
          }
          while (result);
          if (v83 != (v83 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_128:
            do
            {
              v95 = *(_DWORD *)(v56 + 4 * v84) + v15 + 2 * v57->i32[v84] + *(_DWORD *)(v58 + 4 * v84);
              if (v95 <= -32768)
                v95 = -32768;
              if (v95 >= 0x7FFF)
                LOWORD(v95) = 0x7FFF;
              a3->i16[v84++] = v95;
            }
            while (a6 != v84);
          }
        }
        a3 = (int16x4_t *)((char *)a3 + v228);
        v16 = v55 - 1;
      }
      while (v55);
    }
    else if (v10)
    {
      v225 = vdupq_n_s32(v15);
      do
      {
        v132 = v16;
        result = sub_100307768(v227, (int32x4_t **)v18, a3, a6);
        v133 = *(_QWORD *)(v18 - 8);
        v134 = *(int32x4_t **)v18;
        v136 = *(_QWORD *)(v18 + 8);
        v18 += 8;
        v135 = v136;
        if ((int)result <= (int)v17)
        {
          v137 = (int)result;
          v138 = v17 - (int)result;
          result = (int)result;
          if (v138 < 0x1C)
            goto LABEL_93;
          v139 = (v138 >> 2) + 1;
          result = (int)result + 4 * (v139 & 0x7FFFFFFFFFFFFFF8);
          v140 = 2 * v137;
          v141 = v137;
          v142 = (const float *)(v133 + 4 * v137);
          v143 = (const float *)&v134->i32[v141];
          v144 = (const float *)(v135 + v141 * 4);
          v145 = v139 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v146 = v142;
            v232 = vld4q_f32(v146);
            v146 += 16;
            v243 = vld4q_f32(v146);
            v147 = v143;
            v237 = (int16x8x4_t)vld4q_f32(v147);
            v147 += 16;
            v248 = vld4q_f32(v147);
            v148 = v144;
            v251 = vld4q_f32(v148);
            v148 += 16;
            v149 = vaddq_s32((int32x4_t)v243.val[0], v225);
            v150 = vaddq_s32((int32x4_t)v243.val[1], v225);
            v151 = vaddq_s32((int32x4_t)v243.val[2], v225);
            v243.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v243.val[3], v225);
            v243.val[1] = (float32x4_t)vsubq_s32(v149, vaddq_s32((int32x4_t)v248.val[0], (int32x4_t)v248.val[0]));
            v243.val[2] = (float32x4_t)vsubq_s32(v150, vaddq_s32((int32x4_t)v248.val[1], (int32x4_t)v248.val[1]));
            v243.val[3] = (float32x4_t)vsubq_s32(v151, vaddq_s32((int32x4_t)v248.val[2], (int32x4_t)v248.val[2]));
            v255 = vld4q_f32(v148);
            v237.val[0] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vsubq_s32(vaddq_s32((int32x4_t)v232.val[0], v225), vaddq_s32((int32x4_t)v237.val[0], (int32x4_t)v237.val[0])), (int32x4_t)v251.val[0])), vaddq_s32((int32x4_t)v243.val[1], (int32x4_t)v255.val[0]));
            v237.val[1] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vsubq_s32(vaddq_s32((int32x4_t)v232.val[1], v225), vaddq_s32((int32x4_t)v237.val[1], (int32x4_t)v237.val[1])), (int32x4_t)v251.val[1])), vaddq_s32((int32x4_t)v243.val[2], (int32x4_t)v255.val[1]));
            v237.val[2] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vsubq_s32(vaddq_s32((int32x4_t)v232.val[2], v225), vaddq_s32((int32x4_t)v237.val[2], (int32x4_t)v237.val[2])), (int32x4_t)v251.val[2])), vaddq_s32((int32x4_t)v243.val[3], (int32x4_t)v255.val[2]));
            v237.val[3] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vsubq_s32(vaddq_s32((int32x4_t)v232.val[3], v225), vaddq_s32((int32x4_t)v237.val[3], (int32x4_t)v237.val[3])), (int32x4_t)v251.val[3])), vaddq_s32(vsubq_s32((int32x4_t)v243.val[0], vaddq_s32((int32x4_t)v248.val[3], (int32x4_t)v248.val[3])), (int32x4_t)v255.val[3]));
            v152 = (__int16 *)((char *)a3 + v140);
            vst4q_s16(v152, v237);
            v140 += 64;
            v142 += 32;
            v143 += 32;
            v144 += 32;
            v145 -= 8;
          }
          while (v145);
          if (v139 != (v139 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_93:
            v153 = (int32x4_t *)(v133 + 4 * result);
            v154 = (int32x4_t *)((char *)v134 + 4 * result);
            v155 = (int32x4_t *)(v135 + 4 * result);
            v156 = 2 * result;
            do
            {
              v157 = *v153++;
              v158 = v157;
              v159 = *v154++;
              v160 = v159;
              v161 = *v155++;
              *(int16x4_t *)((char *)a3 + v156) = vqmovn_s32(vaddq_s32(vsubq_s32(vaddq_s32(v158, v225), vaddq_s32(v160, v160)), v161));
              result += 4;
              v156 += 8;
            }
            while (result <= v17);
          }
        }
        if ((int)result < a6)
        {
          v162 = a6 - (uint64_t)(int)result;
          v163 = (int)result;
          if (v162 < 8)
            goto LABEL_129;
          v163 = (v162 & 0xFFFFFFFFFFFFFFF8) + (int)result;
          v164 = (int32x4_t *)(v133 + 4 * (int)result);
          v165 = (int32x4_t *)((char *)v134 + 4 * (int)result);
          v166 = (int32x4_t *)(v135 + 4 * (int)result);
          v167 = 2 * (int)result;
          result = v162 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v168 = *v164;
            v169 = v164[1];
            v164 += 2;
            v170 = *v165;
            v171 = v165[1];
            v165 += 2;
            v172 = *v166;
            v173 = v166[1];
            v166 += 2;
            *(int16x8_t *)&a3->i8[v167] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vsubq_s32(vaddq_s32(v168, v225), vaddq_s32(v170, v170)), v172)), vaddq_s32(vsubq_s32(vaddq_s32(v169, v225), vaddq_s32(v171, v171)), v173));
            v167 += 16;
            result -= 8;
          }
          while (result);
          if (v162 != (v162 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_129:
            do
            {
              v174 = *(_DWORD *)(v133 + 4 * v163) + v15 - 2 * v134->i32[v163] + *(_DWORD *)(v135 + 4 * v163);
              if (v174 <= -32768)
                v174 = -32768;
              if (v174 >= 0x7FFF)
                LOWORD(v174) = 0x7FFF;
              a3->i16[v163++] = v174;
            }
            while (a6 != v163);
          }
        }
        a3 = (int16x4_t *)((char *)a3 + v228);
        v16 = v132 - 1;
      }
      while (v132);
    }
    else
    {
      v220 = vdupq_n_s32(v9);
      v222 = vdupq_n_s32(v12);
      v219 = vdupq_n_s32(v15);
      do
      {
        v226 = v16;
        result = sub_100307768(v227, (int32x4_t **)v18, a3, a6);
        v175 = *(_QWORD *)(v18 - 8);
        v176 = *(int32x4_t **)v18;
        v178 = *(_QWORD *)(v18 + 8);
        v18 += 8;
        v177 = v178;
        if ((int)result <= (int)v17)
        {
          v179 = (int)result;
          v180 = v17 - (int)result;
          result = (int)result;
          if (v180 < 0x1C)
            goto LABEL_113;
          v181 = (v180 >> 2) + 1;
          result = (int)result + 4 * (v181 & 0x7FFFFFFFFFFFFFF8);
          v182 = 2 * v179;
          v183 = v179;
          v184 = (const float *)(v175 + 4 * v179);
          v185 = (const float *)(v177 + v183 * 4);
          v186 = (const float *)&v176->i32[v183];
          v187 = v181 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v188 = v184;
            v233 = vld4q_f32(v188);
            v188 += 16;
            v238 = vld4q_f32(v188);
            v189 = v185;
            v244 = vld4q_f32(v189);
            v189 += 16;
            v249 = vld4q_f32(v189);
            v190 = v186;
            v252 = vld4q_f32(v190);
            v190 += 16;
            v256 = vld4q_f32(v190);
            v191 = vaddq_s32((int32x4_t)v249.val[0], (int32x4_t)v238.val[0]);
            v192 = vaddq_s32((int32x4_t)v249.val[1], (int32x4_t)v238.val[1]);
            v193 = vaddq_s32((int32x4_t)v249.val[2], (int32x4_t)v238.val[2]);
            v238.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v249.val[3], (int32x4_t)v238.val[3]);
            v249.val[1] = (float32x4_t)vqmovn_high_s32(vqmovn_s32(vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v252.val[0], v220), vaddq_s32((int32x4_t)v244.val[0], (int32x4_t)v233.val[0]), v222)), vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v256.val[0], v220), v191, v222));
            v249.val[2] = (float32x4_t)vqmovn_high_s32(vqmovn_s32(vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v252.val[1], v220), vaddq_s32((int32x4_t)v244.val[1], (int32x4_t)v233.val[1]), v222)), vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v256.val[1], v220), v192, v222));
            v249.val[3] = (float32x4_t)vqmovn_high_s32(vqmovn_s32(vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v252.val[2], v220), vaddq_s32((int32x4_t)v244.val[2], (int32x4_t)v233.val[2]), v222)), vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v256.val[2], v220), v193, v222));
            v252.val[0] = (float32x4_t)vqmovn_high_s32(vqmovn_s32(vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v252.val[3], v220), vaddq_s32((int32x4_t)v244.val[3], (int32x4_t)v233.val[3]), v222)), vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v256.val[3], v220), (int32x4_t)v238.val[0], v222));
            v194 = (__int16 *)((char *)a3 + v182);
            vst4q_s16(v194, *(int16x8x4_t *)((char *)&v249 + 16));
            v182 += 64;
            v184 += 32;
            v185 += 32;
            v186 += 32;
            v187 -= 8;
          }
          while (v187);
          if (v181 != (v181 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_113:
            v195 = (int32x4_t *)(v175 + 4 * result);
            v196 = (int32x4_t *)(v177 + 4 * result);
            v197 = (int32x4_t *)((char *)v176 + 4 * result);
            v198 = 2 * result;
            do
            {
              v199 = *v195++;
              v200 = v199;
              v201 = *v196++;
              v202 = vaddq_s32(v201, v200);
              v203 = *v197++;
              *(int16x4_t *)((char *)a3 + v198) = vqmovn_s32(vmlaq_s32(vmlaq_s32(v219, v203, v220), v202, v222));
              result += 4;
              v198 += 8;
            }
            while (result <= v17);
          }
        }
        if ((int)result < a6)
        {
          v204 = a6 - (uint64_t)(int)result;
          v205 = (int)result;
          if (v204 < 8)
            goto LABEL_130;
          v205 = (v204 & 0xFFFFFFFFFFFFFFF8) + (int)result;
          v206 = (int32x4_t *)(v175 + 4 * (int)result);
          v207 = (int32x4_t *)(v177 + 4 * (int)result);
          v208 = (int32x4_t *)((char *)v176 + 4 * (int)result);
          v209 = 2 * (int)result;
          result = v204 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v210 = *v206;
            v211 = v206[1];
            v206 += 2;
            v212 = *v207;
            v213 = v207[1];
            v207 += 2;
            v214 = vaddq_s32(v213, v211);
            v215 = vaddq_s32(v212, v210);
            v216 = *v208;
            v217 = v208[1];
            v208 += 2;
            *(int16x8_t *)&a3->i8[v209] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(vmlaq_s32(v219, v216, v220), v215, v222)), vmlaq_s32(vmlaq_s32(v219, v217, v220), v214, v222));
            v209 += 16;
            result -= 8;
          }
          while (result);
          if (v204 != (v204 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_130:
            do
            {
              v218 = v15 + v176->i32[v205] * v9 + (*(_DWORD *)(v177 + 4 * v205) + *(_DWORD *)(v175 + 4 * v205)) * v12;
              if (v218 <= -32768)
                v218 = -32768;
              if (v218 >= 0x7FFF)
                LOWORD(v218) = 0x7FFF;
              a3->i16[v205++] = v218;
            }
            while (a6 != v205);
          }
        }
        a3 = (int16x4_t *)((char *)a3 + v228);
        v16 = v226 - 1;
      }
      while (v226);
    }
  }
  else
  {
    v223 = vdupq_n_s32(v15);
    if (v11)
    {
      do
      {
        v19 = v16;
        result = sub_100307768(v227, (int32x4_t **)v18, a3, a6);
        v21 = *(_QWORD *)(v18 + 8);
        v18 += 8;
        v20 = v21;
        if (v12 >= 0)
          v22 = *(_QWORD *)(v18 - 16);
        else
          v22 = v20;
        if (v12 < 0)
          v20 = *(_QWORD *)(v18 - 16);
        if ((int)result <= (int)v17)
        {
          v23 = (int)result;
          v24 = v17 - (int)result;
          result = (int)result;
          if (v24 < 0x1C)
            goto LABEL_31;
          v25 = (v24 >> 2) + 1;
          result = (int)result + 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
          v26 = 2 * v23;
          v27 = 4 * v23;
          v28 = (const float *)(v20 + 4 * v23);
          v29 = (const float *)(v22 + v27);
          v30 = v25 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v31 = v28;
            v229 = vld4q_f32(v31);
            v31 += 16;
            v234 = vld4q_f32(v31);
            v32 = v29;
            v240 = vld4q_f32(v32);
            v32 += 16;
            v245 = vld4q_f32(v32);
            v253.val[0] = vqmovn_high_s32(vqmovn_s32(vsubq_s32(vaddq_s32((int32x4_t)v229.val[0], v223), (int32x4_t)v240.val[0])), vsubq_s32(vaddq_s32((int32x4_t)v234.val[0], v223), (int32x4_t)v245.val[0]));
            v253.val[1] = vqmovn_high_s32(vqmovn_s32(vsubq_s32(vaddq_s32((int32x4_t)v229.val[1], v223), (int32x4_t)v240.val[1])), vsubq_s32(vaddq_s32((int32x4_t)v234.val[1], v223), (int32x4_t)v245.val[1]));
            v253.val[2] = vqmovn_high_s32(vqmovn_s32(vsubq_s32(vaddq_s32((int32x4_t)v229.val[2], v223), (int32x4_t)v240.val[2])), vsubq_s32(vaddq_s32((int32x4_t)v234.val[2], v223), (int32x4_t)v245.val[2]));
            v253.val[3] = vqmovn_high_s32(vqmovn_s32(vsubq_s32(vaddq_s32((int32x4_t)v229.val[3], v223), (int32x4_t)v240.val[3])), vsubq_s32(vaddq_s32((int32x4_t)v234.val[3], v223), (int32x4_t)v245.val[3]));
            v33 = (__int16 *)((char *)a3 + v26);
            vst4q_s16(v33, v253);
            v26 += 64;
            v28 += 32;
            v29 += 32;
            v30 -= 8;
          }
          while (v30);
          if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_31:
            v34 = (int32x4_t *)(v20 + 4 * result);
            v35 = (int32x4_t *)(v22 + 4 * result);
            v36 = 2 * result;
            do
            {
              v37 = *v34++;
              v38 = v37;
              v39 = *v35++;
              *(int16x4_t *)((char *)a3 + v36) = vqmovn_s32(vsubq_s32(vaddq_s32(v38, v223), v39));
              result += 4;
              v36 += 8;
            }
            while (result <= v17);
          }
        }
        if ((int)result < a6)
        {
          v40 = a6 - (uint64_t)(int)result;
          v41 = (int)result;
          if (v40 < 0x10)
            goto LABEL_131;
          v41 = (v40 & 0xFFFFFFFFFFFFFFF0) + (int)result;
          v42 = (int16x8_t *)((char *)a3 + 2 * (int)result);
          v43 = (int32x4_t *)(v20 + 4 * (int)result + 32);
          v44 = (int32x4_t *)(v22 + 4 * (int)result + 32);
          v45 = v40 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v47 = v43[-2];
            v46 = v43[-1];
            v49 = *v43;
            v48 = v43[1];
            v43 += 4;
            v50 = v44[-2];
            v51 = v44[-1];
            v52 = *v44;
            v53 = v44[1];
            v44 += 4;
            *v42 = vqmovn_high_s32(vqmovn_s32(vsubq_s32(vaddq_s32(v47, v223), v50)), vsubq_s32(vaddq_s32(v46, v223), v51));
            v42[1] = vqmovn_high_s32(vqmovn_s32(vsubq_s32(vaddq_s32(v49, v223), v52)), vsubq_s32(vaddq_s32(v48, v223), v53));
            v42 += 2;
            v45 -= 16;
          }
          while (v45);
          if (v40 != (v40 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_131:
            do
            {
              v54 = *(_DWORD *)(v20 + 4 * v41) + v15 - *(_DWORD *)(v22 + 4 * v41);
              if (v54 <= -32768)
                v54 = -32768;
              if (v54 >= 0x7FFF)
                LOWORD(v54) = 0x7FFF;
              a3->i16[v41++] = v54;
            }
            while (a6 != v41);
          }
        }
        a3 = (int16x4_t *)((char *)a3 + v228);
        v16 = v19 - 1;
      }
      while (v19);
    }
    else
    {
      v221 = vdupq_n_s32(v12);
      do
      {
        v96 = v16;
        result = sub_100307768(v227, (int32x4_t **)v18, a3, a6);
        v98 = *(_QWORD *)(v18 + 8);
        v18 += 8;
        v97 = v98;
        v99 = *(_QWORD *)(v18 - 16);
        if ((int)result <= (int)v17)
        {
          v100 = (int)result;
          v101 = v17 - (int)result;
          result = (int)result;
          if (v101 < 0x1C)
            goto LABEL_72;
          v102 = (v101 >> 2) + 1;
          result = (int)result + 4 * (v102 & 0x7FFFFFFFFFFFFFF8);
          v103 = 2 * v100;
          v104 = 4 * v100;
          v105 = (const float *)(v97 + 4 * v100);
          v106 = (const float *)(v99 + v104);
          v107 = v102 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v108 = v105;
            v231 = vld4q_f32(v108);
            v108 += 16;
            v236 = vld4q_f32(v108);
            v109 = v106;
            v242 = vld4q_f32(v109);
            v109 += 16;
            v247 = vld4q_f32(v109);
            v239.val[0] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v223, vsubq_s32((int32x4_t)v231.val[0], (int32x4_t)v242.val[0]), v221)), vmlaq_s32(v223, vsubq_s32((int32x4_t)v236.val[0], (int32x4_t)v247.val[0]), v221));
            v239.val[1] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v223, vsubq_s32((int32x4_t)v231.val[1], (int32x4_t)v242.val[1]), v221)), vmlaq_s32(v223, vsubq_s32((int32x4_t)v236.val[1], (int32x4_t)v247.val[1]), v221));
            v239.val[2] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v223, vsubq_s32((int32x4_t)v231.val[2], (int32x4_t)v242.val[2]), v221)), vmlaq_s32(v223, vsubq_s32((int32x4_t)v236.val[2], (int32x4_t)v247.val[2]), v221));
            v239.val[3] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v223, vsubq_s32((int32x4_t)v231.val[3], (int32x4_t)v242.val[3]), v221)), vmlaq_s32(v223, vsubq_s32((int32x4_t)v236.val[3], (int32x4_t)v247.val[3]), v221));
            v110 = (__int16 *)((char *)a3 + v103);
            vst4q_s16(v110, v239);
            v103 += 64;
            v105 += 32;
            v106 += 32;
            v107 -= 8;
          }
          while (v107);
          if (v102 != (v102 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_72:
            v111 = (int32x4_t *)(v97 + 4 * result);
            v112 = (int32x4_t *)(v99 + 4 * result);
            v113 = 2 * result;
            do
            {
              v114 = *v111++;
              v115 = v114;
              v116 = *v112++;
              *(int16x4_t *)((char *)a3 + v113) = vqmovn_s32(vmlaq_s32(v223, vsubq_s32(v115, v116), v221));
              result += 4;
              v113 += 8;
            }
            while (result <= v17);
          }
        }
        if ((int)result < a6)
        {
          v117 = a6 - (uint64_t)(int)result;
          v118 = (int)result;
          if (v117 < 0x10)
            goto LABEL_132;
          v118 = (v117 & 0xFFFFFFFFFFFFFFF0) + (int)result;
          v119 = (int16x8_t *)((char *)a3 + 2 * (int)result);
          v120 = (int32x4_t *)(v97 + 4 * (int)result + 32);
          v121 = (int32x4_t *)(v99 + 4 * (int)result + 32);
          v122 = v117 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v123 = v120[-2];
            v124 = v120[-1];
            v125 = *v120;
            v126 = v120[1];
            v120 += 4;
            v127 = v121[-2];
            v128 = v121[-1];
            v129 = *v121;
            v130 = v121[1];
            v121 += 4;
            *v119 = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v223, vsubq_s32(v123, v127), v221)), vmlaq_s32(v223, vsubq_s32(v124, v128), v221));
            v119[1] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v223, vsubq_s32(v125, v129), v221)), vmlaq_s32(v223, vsubq_s32(v126, v130), v221));
            v119 += 2;
            v122 -= 16;
          }
          while (v122);
          if (v117 != (v117 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_132:
            do
            {
              v131 = v15 + (*(_DWORD *)(v97 + 4 * v118) - *(_DWORD *)(v99 + 4 * v118)) * v12;
              if (v131 <= -32768)
                v131 = -32768;
              if (v131 >= 0x7FFF)
                LOWORD(v131) = 0x7FFF;
              a3->i16[v118++] = v131;
            }
            while (a6 != v118);
          }
        }
        a3 = (int16x4_t *)((char *)a3 + v228);
        v16 = v96 - 1;
      }
      while (v96);
    }
  }
  return result;
}

uint64_t sub_100306950(uint64_t a1, uint64_t a2, int a3, double a4, uint64_t a5, uint64_t a6)
{
  _DWORD *v11;
  int *v12;
  _DWORD *v13;
  _DWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = off_100452D40;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v11 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v12 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  v13 = (_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_DWORD *)(a1 + 128) = 1124007936;
  v14 = (_DWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  v15 = (int *)(a1 + 132);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 136;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  v16 = a1 + 120;
  if ((*(_BYTE *)(a2 + 1) & 0x40) == 0)
  {
    LODWORD(v45) = 33619968;
    v46 = a1 + 16;
    v47 = 0;
    sub_1002181EC(a2, (uint64_t)&v45);
    goto LABEL_21;
  }
  if (v11 != (_DWORD *)a2)
  {
    v17 = *(_QWORD *)(a2 + 56);
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 20);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v20 = *(_QWORD *)(a1 + 72);
      if (v20)
      {
        v21 = (unsigned int *)(v20 + 20);
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v11 = *(_DWORD *)a2;
      v27 = *(_DWORD *)(a2 + 4);
      if (v27 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v27;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v28 = *(_QWORD **)(a2 + 72);
        v29 = *(_QWORD **)(a1 + 88);
        *v29 = *v28;
        v29[1] = v28[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v24 = 0;
      v25 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v25 + 4 * v24++) = 0;
        v26 = *v12;
      }
      while (v24 < v26);
      *v11 = *(_DWORD *)a2;
      if ((int)v26 <= 2)
      {
        v27 = *(_DWORD *)(a2 + 4);
        if (v27 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v11, a2);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 224) = (uint64_t)rint(a4);
  v30 = (_DWORD *)(a6 + 8);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)a6;
  if (v16 != a6)
  {
    v31 = *(_QWORD *)(a6 + 64);
    if (v31)
    {
      v32 = (unsigned int *)(v31 + 20);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    v34 = *(_QWORD *)(a1 + 184);
    if (v34)
    {
      v35 = (unsigned int *)(v34 + 20);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
        sub_100256C90((uint64_t)v14);
    }
    *(_QWORD *)(a1 + 184) = 0;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    if (*(int *)(a1 + 132) <= 0)
    {
      *v14 = *v30;
      v41 = *(_DWORD *)(a6 + 12);
      if (v41 <= 2)
      {
LABEL_35:
        *(_DWORD *)(a1 + 132) = v41;
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a6 + 16);
        v42 = *(_QWORD **)(a6 + 80);
        v43 = *(_QWORD **)(a1 + 200);
        *v43 = *v42;
        v43[1] = v42[1];
LABEL_38:
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a6 + 24);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a6 + 40);
        *(_OWORD *)(a1 + 176) = *(_OWORD *)(a6 + 56);
        goto LABEL_39;
      }
    }
    else
    {
      v38 = 0;
      v39 = *(_QWORD *)(a1 + 192);
      do
      {
        *(_DWORD *)(v39 + 4 * v38++) = 0;
        v40 = *v15;
      }
      while (v38 < v40);
      *v14 = *v30;
      if ((int)v40 <= 2)
      {
        v41 = *(_DWORD *)(a6 + 12);
        if (v41 <= 2)
          goto LABEL_35;
      }
    }
    sub_100256B48((uint64_t)v14, a6 + 8);
    goto LABEL_38;
  }
LABEL_39:
  if ((*v11 & 0xFFF) != 4 || *v13 != 1 && *(_DWORD *)(a1 + 28) != 1)
  {
    v45 = 0;
    v46 = 0;
    qmemcpy((void *)sub_10029430C(&v45, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v45, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_100306CF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1002F0DD4(v2);
  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100306D34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100452D40;
  v2 = *(_QWORD *)(a1 + 184);
  if (v2)
  {
    v3 = a1 + 128;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  if (*(int *)(a1 + 132) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 192);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 132));
  }
  v9 = *(void **)(a1 + 200);
  if (v9 != (void *)(a1 + 208))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 16);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 20));
  }
  v16 = *(void **)(a1 + 88);
  if (v16 != (void *)(a1 + 96))
    j__free(v16);
  return a1;
}

void sub_100306E4C(uint64_t a1)
{
  sub_100306D34(a1);
  operator delete();
}

int64_t sub_100306E70(int64_t result, uint64_t a2, int16x4_t *a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const float *v13;
  signed int v14;
  int32x4_t **v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int32x4_t v29;
  uint64_t v30;
  const float *v31;
  int32x4_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int16x8_t *v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  _QWORD *v42;
  _DWORD *v43;
  unint64_t v44;
  uint64_t *v45;
  signed int v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int32x4_t *v55;
  int32x4_t v56;
  int32x4_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  const float *v61;
  int32x4_t v62;
  float v63;
  int32x4_t *v64;
  unint64_t v65;
  unint64_t v66;
  int32x4_t v67;
  int32x4_t *v68;
  uint64_t v69;
  unint64_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int16x8_t *v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  _QWORD *v80;
  _DWORD *v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int32x4_t v85;
  uint64_t v86;
  int32x4_t v87;
  uint64_t v88;
  uint64_t v89;
  int16x8_t v91;
  uint64_t v92;
  signed int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;

  v6 = a6;
  v8 = *(_DWORD *)(result + 8);
  v94 = v8;
  if (v8 >= 0)
    v9 = *(_DWORD *)(result + 8);
  else
    v9 = v8 + 1;
  v10 = v9 >> 1;
  v11 = *(_QWORD *)(result + 32);
  v12 = (uint64_t)v9 >> 1;
  v13 = (const float *)(v11 + 4 * v10);
  v14 = *(_DWORD *)(result + 224);
  v15 = (int32x4_t **)(a2 + 8 * v10);
  v93 = v14;
  if ((*(_BYTE *)(result + 228) & 1) != 0)
  {
    if (!a5)
      return result;
    v92 = result + 120;
    v89 = a4;
    v48 = (v12 + 1);
    v49 = (int)a6 - 4;
    v50 = (int)a6;
    v51 = v48 - 1;
    v52 = a2 + 8 * v12;
    v53 = (uint64_t *)(v52 - 8);
    v98 = v11 + 4 * v12 + 8;
    v99 = (_QWORD *)(v52 + 16);
    v87 = vdupq_n_s32(v14);
    while (1)
    {
      v96 = a5;
      v54 = v6;
      result = sub_100307768(v92, v15, a3, v6);
      if ((int)result <= (int)v49)
      {
        v55 = *v15;
        result = (int)result;
        v56 = (int32x4_t)vld1q_dup_f32(v13);
        do
        {
          v57 = vmlaq_s32(v87, *(int32x4_t *)((char *)v55 + 4 * result), v56);
          if (v94 >= 2)
          {
            v58 = v53;
            v59 = 1;
            do
            {
              v60 = *v58--;
              v61 = &v13[v59];
              v62 = (int32x4_t)vld1q_dup_f32(v61);
              v57 = vmlaq_s32(v57, vaddq_s32(*(int32x4_t *)(v60 + 4 * result), *(int32x4_t *)((char *)v15[v59++] + 4 * result)), v62);
            }
            while (v48 != v59);
          }
          *(int16x4_t *)((char *)a3 + 2 * result) = vqmovn_s32(v57);
          result += 4;
        }
        while (result <= v49);
        v54 = a6;
      }
      v6 = v54;
      if ((int)result >= (int)v54)
        goto LABEL_47;
      v63 = *v13;
      v64 = *v15;
      v65 = (int)result;
      if (v94 >= 2)
        break;
      v66 = v50 - (int)result;
      if (v66 < 0x10)
        goto LABEL_83;
      v67 = vdupq_n_s32(LODWORD(v63));
      v68 = (int32x4_t *)((char *)v64 + 4 * (int)result + 32);
      v69 = 2 * (int)result;
      v70 = v66 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v72 = v68[-2];
        v71 = v68[-1];
        v74 = *v68;
        v73 = v68[1];
        v68 += 4;
        v75 = (int16x8_t *)((char *)a3 + v69);
        *v75 = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v87, v72, v67)), vmlaq_s32(v87, v71, v67));
        v75[1] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v87, v74, v67)), vmlaq_s32(v87, v73, v67));
        v69 += 32;
        v70 -= 16;
      }
      while (v70);
      v65 = (v66 & 0xFFFFFFFFFFFFFFF0) + (int)result;
      if (v66 != (v66 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_83:
        do
        {
          v76 = v93 + v64->i32[v65] * LODWORD(v63);
          if (v76 <= -32768)
            v76 = -32768;
          if (v76 >= 0x7FFF)
            LOWORD(v76) = 0x7FFF;
          a3->i16[v65++] = v76;
        }
        while (v50 != v65);
      }
LABEL_47:
      a3 = (int16x4_t *)((char *)a3 + v89);
      ++v15;
      ++v53;
      ++v99;
      a5 = v96 - 1;
      if (v96 == 1)
        return result;
    }
    while (1)
    {
      v77 = v93 + v64->i32[v65] * LODWORD(v63);
      if (v51 >= 2)
      {
        v79 = 0;
        v80 = v99;
        v81 = (_DWORD *)v98;
        v82 = (v48 - 1) & 0xFFFFFFFFFFFFFFFELL;
        v83 = v53;
        do
        {
          result = *(v81 - 1);
          v77 += (*(_DWORD *)(*v83 + 4 * v65) + *(_DWORD *)(*(v80 - 1) + 4 * v65)) * result;
          v79 += (*(_DWORD *)(*(v83 - 1) + 4 * v65) + *(_DWORD *)(*v80 + 4 * v65)) * *v81;
          v83 -= 2;
          v81 += 2;
          v80 += 2;
          v82 -= 2;
        }
        while (v82);
        v77 += v79;
        v78 = (v48 - 1) | 1;
        if (v51 == ((v48 - 1) & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_68;
      }
      else
      {
        v78 = 1;
      }
      v84 = -1 * v78;
      do
      {
        v77 += (v15[v84]->i32[v65] + v15[v78]->i32[v65]) * LODWORD(v13[v78]);
        ++v78;
        --v84;
      }
      while (v48 != v78);
LABEL_68:
      if (v77 <= -32768)
        v77 = -32768;
      if (v77 >= 0x7FFF)
        LOWORD(v77) = 0x7FFF;
      a3->i16[v65++] = v77;
      if (v65 == v50)
        goto LABEL_47;
    }
  }
  if (a5)
  {
    v88 = result + 120;
    if (v14 <= -32768)
      v16 = -32768;
    else
      v16 = *(_DWORD *)(result + 224);
    if (v16 >= 0x7FFF)
      v17 = 0x7FFF;
    else
      v17 = v16;
    v86 = a4;
    v18 = (v12 + 1);
    v19 = (int)a6 - 4;
    v20 = (int)a6;
    v21 = v18 - 1;
    v22 = a2 + 8 * v12;
    v23 = (uint64_t *)(v22 - 8);
    v97 = v11 + 4 * v12 + 8;
    v24 = (_QWORD *)(v22 + 16);
    v91 = vdupq_n_s16(v17);
    v85 = vdupq_n_s32(v14);
    while (1)
    {
      v95 = a5;
      v25 = v6;
      result = sub_100307768(v88, v15, a3, v6);
      if ((int)result <= (int)v19)
      {
        result = (int)result;
        if (v94 >= 2)
        {
          do
          {
            v27 = v23;
            v28 = 1;
            v29 = v85;
            do
            {
              v30 = *v27--;
              v31 = &v13[v28];
              v32 = (int32x4_t)vld1q_dup_f32(v31);
              v29 = vmlaq_s32(v29, vsubq_s32(*(int32x4_t *)((char *)v15[v28++] + 4 * result), *(int32x4_t *)(v30 + 4 * result)), v32);
            }
            while (v18 != v28);
            *(int16x4_t *)((char *)a3 + 2 * result) = vqmovn_s32(v29);
            result += 4;
          }
          while (result <= v19);
        }
        else
        {
          v26 = 2 * (int)result;
          do
          {
            *(int16x4_t *)((char *)a3 + v26) = *(int16x4_t *)v91.i8;
            result += 4;
            v26 += 8;
          }
          while (result <= v19);
        }
        v25 = a6;
      }
      v6 = v25;
      if ((int)result >= (int)v25)
        goto LABEL_13;
      v33 = (int)result;
      if (v94 >= 2)
        break;
      v34 = v20 - (int)result;
      if (v34 < 0x10)
        goto LABEL_84;
      v35 = 2 * (int)result;
      v36 = v34 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v37 = (int16x8_t *)((char *)a3 + v35);
        *v37 = v91;
        v37[1] = v91;
        v35 += 32;
        v36 -= 16;
      }
      while (v36);
      v33 = (v34 & 0xFFFFFFFFFFFFFFF0) + (int)result;
      if (v34 != (v34 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_84:
        do
          a3->i16[v33++] = v17;
        while (v20 != v33);
      }
LABEL_13:
      a3 = (int16x4_t *)((char *)a3 + v86);
      ++v15;
      ++v23;
      ++v24;
      a5 = v95 - 1;
      if (v95 == 1)
        return result;
    }
    while (v21 >= 2)
    {
      v41 = 0;
      v42 = v24;
      v43 = (_DWORD *)v97;
      v44 = (v18 - 1) & 0xFFFFFFFFFFFFFFFELL;
      v45 = v23;
      v46 = v93;
      do
      {
        result = (*(_DWORD *)(*(v42 - 1) + 4 * v33) - *(_DWORD *)(*v45 + 4 * v33));
        v46 += result * *(v43 - 1);
        v41 += (*(_DWORD *)(*v42 + 4 * v33) - *(_DWORD *)(*(v45 - 1) + 4 * v33)) * *v43;
        v45 -= 2;
        v43 += 2;
        v42 += 2;
        v44 -= 2;
      }
      while (v44);
      v40 = v41 + v46;
      v39 = (v18 - 1) | 1;
      if (v21 != ((v18 - 1) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_42;
LABEL_31:
      if (v40 <= -32768)
        v38 = -32768;
      else
        v38 = v40;
      if (v38 >= 0x7FFF)
        LOWORD(v38) = 0x7FFF;
      a3->i16[v33++] = v38;
      if (v33 == v20)
        goto LABEL_13;
    }
    v39 = 1;
    v40 = v93;
LABEL_42:
    v47 = -1 * v39;
    do
    {
      v40 += (v15[v39]->i32[v33] - v15[v47]->i32[v33]) * LODWORD(v13[v39]);
      ++v39;
      --v47;
    }
    while (v18 != v39);
    goto LABEL_31;
  }
  return result;
}

void sub_100307478(uint64_t a1)
{
  sub_100306D34(a1);
  operator delete();
}

int64_t sub_10030749C(int64_t result, int32x4_t **a2, int16x4_t *a3, int a4, int a5, uint64_t a6)
{
  int32x4_t **v7;
  const float *v8;
  unsigned int v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int32x4_t *v15;
  int32x4_t v16;
  int32x4_t v17;
  uint64_t i;
  const float *v19;
  int32x4_t v20;
  float v21;
  int32x4_t *v22;
  unint64_t v23;
  unint64_t v24;
  int32x4_t v25;
  int32x4_t *v26;
  uint64_t v27;
  unint64_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int16x8_t *v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  _DWORD *v39;
  unint64_t v40;
  int32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;

  if (a5)
  {
    v7 = a2;
    v8 = *(const float **)(result + 32);
    v9 = *(_DWORD *)(result + 224);
    v10 = *(unsigned int *)(result + 8);
    v42 = a4;
    v43 = result + 120;
    v11 = (int)a6 - 4;
    v12 = (int)a6;
    v13 = a2 + 2;
    v41 = vdupq_n_s32(v9);
    while (1)
    {
      v44 = a5;
      v14 = a6;
      result = sub_100307768(v43, v7, a3, a6);
      if ((int)result <= (int)v11)
      {
        v15 = *v7;
        result = (int)result;
        v16 = (int32x4_t)vld1q_dup_f32(v8);
        do
        {
          v17 = vmlaq_s32(v41, *(int32x4_t *)((char *)v15 + 4 * result), v16);
          if ((int)v10 >= 2)
          {
            for (i = 1; i != v10; ++i)
            {
              v19 = &v8[i];
              v20 = (int32x4_t)vld1q_dup_f32(v19);
              v17 = vmlaq_s32(v17, *(int32x4_t *)((char *)v7[i] + 4 * result), v20);
            }
          }
          *(int16x4_t *)((char *)a3 + 2 * result) = vqmovn_s32(v17);
          result += 4;
        }
        while (result <= v11);
      }
      a6 = v14;
      if ((int)result >= (int)v14)
        goto LABEL_3;
      v21 = *v8;
      v22 = *v7;
      v23 = (int)result;
      if ((int)v10 >= 2)
        break;
      v24 = v12 - (int)result;
      if (v24 < 0x10)
        goto LABEL_37;
      v25 = vdupq_n_s32(LODWORD(v21));
      v26 = (int32x4_t *)((char *)v22 + 4 * (int)result + 32);
      v27 = 2 * (int)result;
      v28 = v24 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v30 = v26[-2];
        v29 = v26[-1];
        v32 = *v26;
        v31 = v26[1];
        v26 += 4;
        v33 = (int16x8_t *)((char *)a3 + v27);
        *v33 = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v41, v30, v25)), vmlaq_s32(v41, v29, v25));
        v33[1] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v41, v32, v25)), vmlaq_s32(v41, v31, v25));
        v27 += 32;
        v28 -= 16;
      }
      while (v28);
      v23 = (v24 & 0xFFFFFFFFFFFFFFF0) + (int)result;
      if (v24 != (v24 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_37:
        do
        {
          v34 = v9 + v22->i32[v23] * LODWORD(v21);
          if (v34 <= -32768)
            v34 = -32768;
          if (v34 >= 0x7FFF)
            LOWORD(v34) = 0x7FFF;
          a3->i16[v23++] = v34;
        }
        while (v12 != v23);
      }
LABEL_3:
      a3 = (int16x4_t *)((char *)a3 + v42);
      ++v7;
      ++v13;
      a5 = v44 - 1;
      if (v44 == 1)
        return result;
    }
    while (1)
    {
      v35 = v9 + v22->i32[v23] * LODWORD(v21);
      if (v10 >= 3)
      {
        v37 = 0;
        v38 = v13;
        v39 = v8 + 2;
        v40 = (v10 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = *(unsigned int *)(*v38 + 4 * v23);
          v35 += *(_DWORD *)(*(v38 - 1) + 4 * v23) * *(v39 - 1);
          v37 += result * *v39;
          v39 += 2;
          v38 += 2;
          v40 -= 2;
        }
        while (v40);
        v35 += v37;
        v36 = (v10 - 1) | 1;
        if (v10 - 1 == ((v10 - 1) & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_23;
      }
      else
      {
        v36 = 1;
      }
      do
      {
        v35 += v7[v36]->i32[v23] * LODWORD(v8[v36]);
        ++v36;
      }
      while (v10 != v36);
LABEL_23:
      if (v35 <= -32768)
        v35 = -32768;
      if (v35 >= 0x7FFF)
        LOWORD(v35) = 0x7FFF;
      a3->i16[v23++] = v35;
      if (v23 == v12)
        goto LABEL_3;
    }
  }
  return result;
}

unint64_t sub_100307768(uint64_t a1, int32x4_t **a2, int16x4_t *a3, int a4)
{
  unint64_t result;
  int32x2_t v9;
  int v10;
  uint64_t v11;
  int32x4_t *v12;
  int32x4_t *v13;
  const float *v14;
  float32x4_t v15;
  int32x4_t v16;
  int32x4_t *v17;
  int32x4_t *v18;
  float32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  const float *v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;

  result = sub_100294AFC(100);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a1 + 16) + *(_DWORD *)(a1 + 20);
    if (v10 - 1 >= 0)
      --v10;
    v11 = *(_QWORD *)(a1 + 24) + 4 * (v10 >> 1);
    v12 = *(a2 - 1);
    v13 = a2[1];
    v14 = (const float *)(a1 + 4);
    v15 = vld1q_dup_f32(v14);
    v16 = vcvtq_s32_f32(v15);
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v18 = *a2;
      v9.i32[0] = *(_DWORD *)v11;
      if (*(float *)v11 == 2.0 && *(float *)(v11 + 4) == 1.0)
      {
        if (a4 >= 4)
        {
          result = 0;
          do
          {
            v26 = *v12++;
            v27 = v26;
            v28 = *v18++;
            v29 = v28;
            v30 = *v13++;
            *a3++ = vqmovn_s32(vaddq_s32(vaddq_s32(vaddq_s32(v27, v16), v30), vqshlq_n_s32(v29, 1uLL)));
            result += 4;
          }
          while (result <= (a4 - 4));
        }
        else
        {
          return 0;
        }
      }
      else if (*(float *)v9.i32 == -2.0 && *(float *)(v11 + 4) == 1.0)
      {
        if (a4 >= 4)
        {
          result = 0;
          do
          {
            v31 = *v12++;
            v32 = v31;
            v33 = *v18++;
            v34 = v33;
            v35 = *v13++;
            *a3++ = vqmovn_s32(vsubq_s32(vaddq_s32(vaddq_s32(v32, v16), v35), vqshlq_n_s32(v34, 1uLL)));
            result += 4;
          }
          while (result <= (a4 - 4));
        }
        else
        {
          return 0;
        }
      }
      else if (*(float *)v9.i32 == 10.0 && *(float *)(v11 + 4) == 3.0)
      {
        if (a4 >= 4)
        {
          result = 0;
          v44.i64[0] = 0xA0000000ALL;
          v44.i64[1] = 0xA0000000ALL;
          v45.i64[0] = 0x300000003;
          v45.i64[1] = 0x300000003;
          do
          {
            v46 = *v12++;
            v47 = v46;
            v48 = *v18++;
            v49 = v48;
            v50 = *v13++;
            *a3++ = vqmovn_s32(vmlaq_s32(vmlaq_s32(v16, v49, v44), vaddq_s32(v50, v47), v45));
            result += 4;
          }
          while (result <= (a4 - 4));
        }
        else
        {
          return 0;
        }
      }
      else if (a4 >= 4)
      {
        result = 0;
        v36 = (const float *)(v11 + 4);
        v37 = (float32x4_t)vdupq_lane_s32(v9, 0);
        v38 = vld1q_dup_f32(v36);
        do
        {
          v39 = *v12++;
          v40 = v39;
          v41 = *v18++;
          v42 = v41;
          v43 = *v13++;
          *a3++ = vqmovn_s32(vcvtq_s32_f32(vmlaq_f32(vmlaq_f32(v15, v37, vcvtq_f32_s32(v42)), v38, vcvtq_f32_s32(vaddq_s32(v43, v40)))));
          result += 4;
        }
        while (result <= (a4 - 4));
      }
      else
      {
        return 0;
      }
    }
    else
    {
      v9.i32[0] = *(_DWORD *)(v11 + 4);
      if (fabsf(*(float *)v9.i32) == 1.0 && *(float *)v9.i32 == (float)-*(float *)(v11 - 4))
      {
        if (*(float *)v9.i32 >= 0.0)
          v17 = *(a2 - 1);
        else
          v17 = a2[1];
        if (*(float *)v9.i32 >= 0.0)
          v12 = a2[1];
        if (a4 >= 4)
        {
          result = 0;
          do
          {
            v23 = *v17++;
            v24 = v23;
            v25 = *v12++;
            *a3++ = vqmovn_s32(vqaddq_s32(vsubq_s32(v25, v24), v16));
            result += 4;
          }
          while (result <= (a4 - 4));
        }
        else
        {
          return 0;
        }
      }
      else if (a4 >= 4)
      {
        result = 0;
        v19 = (float32x4_t)vdupq_lane_s32(v9, 0);
        do
        {
          v20 = *v12++;
          v21 = v20;
          v22 = *v13++;
          *a3++ = vqmovn_s32(vcvtq_s32_f32(vmlaq_f32(v15, v19, vcvtq_f32_s32(vsubq_s32(v22, v21)))));
          result += 4;
        }
        while (result <= (a4 - 4));
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_100307A7C()
{
  operator delete();
}

uint64_t sub_100307A90(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_100307ACC(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v6;
  uint64_t v8[2];

  v6 = sub_100307B84(a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = off_100452DB0;
  if (*(_DWORD *)(v6 + 8) != 3)
  {
    v8[0] = 0;
    v8[1] = 0;
    *(_OWORD *)sub_10029430C(v8, 16) = *(_OWORD *)"this->ksize == 3";
    sub_100294B74(-215, v8, "SymmColumnSmallFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3420);
  }
  return a1;
}

void sub_100307B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_100307C50(v9);
  _Unwind_Resume(a1);
}

